// C++ for the Windows Runtime v1.29 - http://moderncpp.com
// Copyright (c) 2016 Microsoft Corporation

#pragma once

namespace winrt { namespace Windows { namespace ApplicationModel {

struct IAppDisplayInfo;
struct IAppInfo;
struct ISuspendingDeferral;
struct ISuspendingOperation;
struct ISuspendingEventArgs;
struct IPackageIdWithMetadata;
struct IPackageWithMetadata;
struct IPackageStatus;
struct IPackageId;
struct IPackage;
struct IPackage2;
struct IPackage3;
struct IPackageStatics;
struct IDesignModeStatics;
struct AppDisplayInfo;
struct SuspendingEventArgs;
struct AppInfo;
struct SuspendingDeferral;
struct SuspendingOperation;
struct PackageStatus;
struct PackageId;
struct Package;
struct DesignMode;

}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Activation {

struct ISplashScreen;
struct IActivatedEventArgs;
struct IApplicationViewActivatedEventArgs;
struct IViewSwitcherProvider;
struct IPrelaunchActivatedEventArgs;
struct ILaunchActivatedEventArgs;
struct ISearchActivatedEventArgs;
struct ISearchActivatedEventArgsWithLinguisticDetails;
struct IShareTargetActivatedEventArgs;
struct IFileActivatedEventArgs;
struct IFileActivatedEventArgsWithNeighboringFiles;
struct IFileActivatedEventArgsWithCallerPackageFamilyName;
struct IProtocolActivatedEventArgs;
struct IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData;
struct IProtocolForResultsActivatedEventArgs;
struct IFileOpenPickerActivatedEventArgs;
struct IFileOpenPickerActivatedEventArgs2;
struct IFileSavePickerActivatedEventArgs;
struct IFileSavePickerActivatedEventArgs2;
struct ICachedFileUpdaterActivatedEventArgs;
struct IContactPickerActivatedEventArgs;
struct IDeviceActivatedEventArgs;
struct IPrintTaskSettingsActivatedEventArgs;
struct IPrint3DWorkflowActivatedEventArgs;
struct ICameraSettingsActivatedEventArgs;
struct IAppointmentsProviderActivatedEventArgs;
struct IAppointmentsProviderAddAppointmentActivatedEventArgs;
struct IAppointmentsProviderReplaceAppointmentActivatedEventArgs;
struct IAppointmentsProviderRemoveAppointmentActivatedEventArgs;
struct IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs;
struct IAppointmentsProviderShowTimeFrameActivatedEventArgs;
struct IContactActivatedEventArgs;
struct IContactCallActivatedEventArgs;
struct IContactMessageActivatedEventArgs;
struct IContactMapActivatedEventArgs;
struct IContactPostActivatedEventArgs;
struct IContactVideoCallActivatedEventArgs;
struct IContactsProviderActivatedEventArgs;
struct IRestrictedLaunchActivatedEventArgs;
struct ILockScreenCallActivatedEventArgs;
struct ILockScreenActivatedEventArgs;
struct IContinuationActivatedEventArgs;
struct IFileOpenPickerContinuationEventArgs;
struct IFileSavePickerContinuationEventArgs;
struct IFolderPickerContinuationEventArgs;
struct IWebAccountProviderActivatedEventArgs;
struct IToastNotificationActivatedEventArgs;
struct IDialReceiverActivatedEventArgs;
struct IDevicePairingActivatedEventArgs;
struct IVoiceCommandActivatedEventArgs;
struct SplashScreen;
struct LaunchActivatedEventArgs;
struct SearchActivatedEventArgs;
struct ShareTargetActivatedEventArgs;
struct FileActivatedEventArgs;
struct ProtocolActivatedEventArgs;
struct ProtocolForResultsActivatedEventArgs;
struct FileOpenPickerActivatedEventArgs;
struct FileSavePickerActivatedEventArgs;
struct CachedFileUpdaterActivatedEventArgs;
struct ContactPickerActivatedEventArgs;
struct DeviceActivatedEventArgs;
struct PrintTaskSettingsActivatedEventArgs;
struct Print3DWorkflowActivatedEventArgs;
struct CameraSettingsActivatedEventArgs;
struct AppointmentsProviderAddAppointmentActivatedEventArgs;
struct AppointmentsProviderReplaceAppointmentActivatedEventArgs;
struct AppointmentsProviderRemoveAppointmentActivatedEventArgs;
struct AppointmentsProviderShowAppointmentDetailsActivatedEventArgs;
struct AppointmentsProviderShowTimeFrameActivatedEventArgs;
struct ContactCallActivatedEventArgs;
struct ContactMessageActivatedEventArgs;
struct ContactMapActivatedEventArgs;
struct ContactPostActivatedEventArgs;
struct ContactVideoCallActivatedEventArgs;
struct RestrictedLaunchActivatedEventArgs;
struct LockScreenCallActivatedEventArgs;
struct LockScreenActivatedEventArgs;
struct FileOpenPickerContinuationEventArgs;
struct FileSavePickerContinuationEventArgs;
struct FolderPickerContinuationEventArgs;
struct WebAccountProviderActivatedEventArgs;
struct ToastNotificationActivatedEventArgs;
struct DialReceiverActivatedEventArgs;
struct DevicePairingActivatedEventArgs;
struct VoiceCommandActivatedEventArgs;

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Appointments {

struct IAppointmentManagerStatics;
struct IAppointmentManagerStatics2;
struct IAppointmentParticipant;
struct IAppointmentInvitee;
struct IAppointmentRecurrence;
struct IAppointmentRecurrence2;
struct IAppointmentRecurrence3;
struct IAppointment;
struct IAppointment2;
struct IAppointment3;
struct IFindAppointmentsOptions;
struct IAppointmentCalendar;
struct IAppointmentCalendar2;
struct IAppointmentCalendarSyncManager;
struct IAppointmentPropertiesStatics;
struct IAppointmentPropertiesStatics2;
struct IAppointmentConflictResult;
struct IAppointmentStoreChange;
struct IAppointmentStoreChange2;
struct IAppointmentStoreChangeReader;
struct IAppointmentStoreChangeTracker;
struct IAppointmentStoreChangedEventArgs;
struct IAppointmentStoreChangedDeferral;
struct IAppointmentStoreNotificationTriggerDetails;
struct IAppointmentStore;
struct IAppointmentStore2;
struct IAppointmentException;
struct Appointment;
struct AppointmentStore;
struct AppointmentOrganizer;
struct AppointmentInvitee;
struct AppointmentRecurrence;
struct AppointmentManager;
struct FindAppointmentsOptions;
struct AppointmentException;
struct AppointmentCalendarSyncManager;
struct AppointmentCalendar;
struct AppointmentStoreChange;
struct AppointmentStoreChangeReader;
struct AppointmentStoreChangedDeferral;
struct AppointmentStoreChangeTracker;
struct AppointmentConflictResult;
struct AppointmentStoreChangedEventArgs;
struct AppointmentProperties;
struct AppointmentStoreNotificationTriggerDetails;

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

struct IAppointmentsProviderLaunchActionVerbsStatics;
struct IAppointmentsProviderLaunchActionVerbsStatics2;
struct IAddAppointmentOperation;
struct IReplaceAppointmentOperation;
struct IRemoveAppointmentOperation;
struct AppointmentsProviderLaunchActionVerbs;
struct AddAppointmentOperation;
struct ReplaceAppointmentOperation;
struct RemoveAppointmentOperation;

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Background {

struct IBackgroundTaskCanceledEventHandler;
struct IBackgroundTaskProgressEventHandler;
struct IBackgroundTaskCompletedEventHandler;
struct IAlarmApplicationManagerStatics;
struct IApplicationTriggerDetails;
struct IBackgroundExecutionManagerStatics;
struct IBackgroundTaskInstance;
struct IBackgroundWorkCostStatics;
struct IBackgroundTaskDeferral;
struct IBackgroundTaskInstance2;
struct IBackgroundTask;
struct IBackgroundTaskRegistration;
struct IBackgroundTaskRegistration2;
struct IBackgroundTrigger;
struct IAppointmentStoreNotificationTrigger;
struct IApplicationTrigger;
struct IMediaProcessingTrigger;
struct IBackgroundTaskRegistrationStatics;
struct IBackgroundTaskBuilder;
struct IBackgroundCondition;
struct IBackgroundTaskBuilder2;
struct IBackgroundTaskBuilder3;
struct IBackgroundTaskCompletedEventArgs;
struct IBackgroundTaskProgressEventArgs;
struct IChatMessageNotificationTrigger;
struct IChatMessageReceivedNotificationTrigger;
struct IRcsEndUserMessageAvailableTrigger;
struct IContactStoreNotificationTrigger;
struct IContentPrefetchTrigger;
struct IContentPrefetchTriggerFactory;
struct IEmailStoreNotificationTrigger;
struct ISmsMessageReceivedTriggerFactory;
struct IStorageLibraryContentChangedTrigger;
struct IStorageLibraryContentChangedTriggerStatics;
struct ISystemTrigger;
struct ISystemTriggerFactory;
struct ISystemCondition;
struct ISystemConditionFactory;
struct INetworkOperatorNotificationTrigger;
struct INetworkOperatorNotificationTriggerFactory;
struct ICachedFileUpdaterTriggerDetails;
struct ICachedFileUpdaterTrigger;
struct ITimeTrigger;
struct ITimeTriggerFactory;
struct IMaintenanceTrigger;
struct IMaintenanceTriggerFactory;
struct IPhoneTrigger;
struct IPhoneTriggerFactory;
struct IDeviceUseTrigger;
struct IDeviceServicingTrigger;
struct IRfcommConnectionTrigger;
struct IDeviceConnectionChangeTrigger;
struct IDeviceConnectionChangeTriggerStatics;
struct IGattCharacteristicNotificationTrigger;
struct IGattCharacteristicNotificationTriggerFactory;
struct IBluetoothLEAdvertisementWatcherTrigger;
struct IBluetoothLEAdvertisementPublisherTrigger;
struct IDeviceWatcherTrigger;
struct ILocationTrigger;
struct ILocationTriggerFactory;
struct IActivitySensorTrigger;
struct IActivitySensorTriggerFactory;
struct ISensorDataThresholdTrigger;
struct ISensorDataThresholdTriggerFactory;
struct INetworkOperatorHotspotAuthenticationTrigger;
struct IPushNotificationTriggerFactory;
struct IToastNotificationHistoryChangedTriggerFactory;
struct IToastNotificationActionTriggerFactory;
struct AlarmApplicationManager;
struct AppointmentStoreNotificationTrigger;
struct ApplicationTrigger;
struct ApplicationTriggerDetails;
struct BackgroundExecutionManager;
struct MediaProcessingTrigger;
struct BackgroundTaskRegistration;
struct BackgroundTaskDeferral;
struct BackgroundTaskProgressEventArgs;
struct BackgroundTaskCompletedEventArgs;
struct BackgroundTaskBuilder;
struct BackgroundWorkCost;
struct ChatMessageNotificationTrigger;
struct ChatMessageReceivedNotificationTrigger;
struct RcsEndUserMessageAvailableTrigger;
struct ContactStoreNotificationTrigger;
struct ContentPrefetchTrigger;
struct EmailStoreNotificationTrigger;
struct MobileBroadbandRegistrationStateChangeTrigger;
struct MobileBroadbandRadioStateChangeTrigger;
struct MobileBroadbandPinLockStateChangeTrigger;
struct MobileBroadbandDeviceServiceNotificationTrigger;
struct SmsMessageReceivedTrigger;
struct StorageLibraryContentChangedTrigger;
struct SystemTrigger;
struct SystemCondition;
struct NetworkOperatorNotificationTrigger;
struct CachedFileUpdaterTriggerDetails;
struct CachedFileUpdaterTrigger;
struct TimeTrigger;
struct MaintenanceTrigger;
struct PhoneTrigger;
struct DeviceUseTrigger;
struct DeviceServicingTrigger;
struct RfcommConnectionTrigger;
struct DeviceConnectionChangeTrigger;
struct GattCharacteristicNotificationTrigger;
struct BluetoothLEAdvertisementWatcherTrigger;
struct BluetoothLEAdvertisementPublisherTrigger;
struct DeviceWatcherTrigger;
struct LocationTrigger;
struct ActivitySensorTrigger;
struct SensorDataThresholdTrigger;
struct NetworkOperatorHotspotAuthenticationTrigger;
struct SocketActivityTrigger;
struct PushNotificationTrigger;
struct ToastNotificationHistoryChangedTrigger;
struct ToastNotificationActionTrigger;

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls {

struct IPhoneCallHistoryEntry;
struct IPhoneCallHistoryEntryAddress;
struct IPhoneCallHistoryEntryAddressFactory;
struct IPhoneCallHistoryEntryQueryOptions;
struct IPhoneCallHistoryEntryReader;
struct IPhoneCallHistoryStore;
struct IPhoneCallHistoryManagerStatics;
struct IPhoneVoicemail;
struct IPhoneDialOptions;
struct IPhoneLineCellularDetails;
struct IPhoneLine;
struct IPhoneCallStore;
struct IPhoneLineConfiguration;
struct IPhoneLineStatics;
struct IPhoneLineWatcher;
struct IPhoneLineWatcherEventArgs;
struct IPhoneCallManagerStatics;
struct IPhoneCallManagerStatics2;
struct IPhoneCallVideoCapabilities;
struct IPhoneCallVideoCapabilitiesManagerStatics;
struct IPhoneCallBlockingStatics;
struct ICallStateChangeEventArgs;
struct ICallAnswerEventArgs;
struct ICallRejectEventArgs;
struct IVoipPhoneCall;
struct IMuteChangeEventArgs;
struct IVoipCallCoordinator;
struct IVoipCallCoordinatorStatics;
struct ILockScreenCallEndCallDeferral;
struct ILockScreenCallEndRequestedEventArgs;
struct ILockScreenCallUI;
struct PhoneCallHistoryEntryAddress;
struct PhoneCallHistoryEntry;
struct PhoneCallHistoryEntryReader;
struct PhoneCallHistoryEntryQueryOptions;
struct PhoneCallHistoryStore;
struct PhoneCallHistoryManager;
struct PhoneLine;
struct PhoneVoicemail;
struct PhoneLineCellularDetails;
struct PhoneCallVideoCapabilities;
struct PhoneLineConfiguration;
struct PhoneDialOptions;
struct PhoneLineWatcher;
struct PhoneLineWatcherEventArgs;
struct PhoneCallStore;
struct PhoneCallManager;
struct PhoneCallVideoCapabilitiesManager;
struct PhoneCallBlocking;
struct CallStateChangeEventArgs;
struct CallAnswerEventArgs;
struct CallRejectEventArgs;
struct VoipPhoneCall;
struct MuteChangeEventArgs;
struct VoipCallCoordinator;
struct LockScreenCallEndCallDeferral;
struct LockScreenCallUI;
struct LockScreenCallEndRequestedEventArgs;

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls { namespace Background {

struct IPhoneCallBlockedTriggerDetails;
struct IPhoneCallOriginDataRequestTriggerDetails;
struct IPhoneNewVoicemailMessageTriggerDetails;
struct IPhoneLineChangedTriggerDetails;
struct PhoneCallBlockedTriggerDetails;
struct PhoneCallOriginDataRequestTriggerDetails;
struct PhoneNewVoicemailMessageTriggerDetails;
struct PhoneLineChangedTriggerDetails;

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Contacts {

struct IContactCardOptions;
struct IContactCardOptions2;
struct IFullContactCardOptions;
struct IContactManagerStatics;
struct IContactManagerStatics2;
struct IContactManagerStatics3;
struct IAggregateContactManager;
struct IContactAnnotationStore;
struct IContactAnnotationList;
struct IContactAnnotation;
struct IContactStoreNotificationTriggerDetails;
struct IContactStore;
struct IContactStore2;
struct IContactList;
struct IContactListSyncManager;
struct IContactConnectedServiceAccount;
struct IContactSignificantOther;
struct IContactSignificantOther2;
struct IContactWebsite;
struct IContactWebsite2;
struct IContactEmail;
struct IContactPhone;
struct IContactAddress;
struct IContactDate;
struct IContactJobInfo;
struct IContact;
struct IContactField;
struct IContactName;
struct IContact2;
struct IContact3;
struct IContactChange;
struct IContactChangedDeferral;
struct IContactChangedEventArgs;
struct IContactChangeReader;
struct IContactChangeTracker;
struct IContactReader;
struct IContactQueryTextSearch;
struct IContactQueryOptionsFactory;
struct IContactQueryOptions;
struct IContactBatch;
struct IContactMatchReason;
struct IContactLaunchActionVerbsStatics;
struct IContactLocationField;
struct IContactInstantMessageField;
struct IKnownContactFieldStatics;
struct IContactInformation;
struct IContactFieldFactory;
struct IContactLocationFieldFactory;
struct IContactInstantMessageFieldFactory;
struct IContactPicker;
struct IContactPicker2;
struct IContactCardDelayedDataLoader;
struct Contact;
struct ContactCardDelayedDataLoader;
struct ContactStore;
struct ContactAnnotationStore;
struct ContactCardOptions;
struct FullContactCardOptions;
struct ContactAnnotation;
struct ContactAnnotationList;
struct ContactChangeTracker;
struct ContactChangedEventArgs;
struct AggregateContactManager;
struct ContactList;
struct ContactReader;
struct ContactQueryOptions;
struct ContactListSyncManager;
struct ContactPhone;
struct ContactEmail;
struct ContactAddress;
struct ContactConnectedServiceAccount;
struct ContactDate;
struct ContactJobInfo;
struct ContactSignificantOther;
struct ContactWebsite;
struct ContactChangedDeferral;
struct ContactChange;
struct ContactChangeReader;
struct ContactBatch;
struct ContactMatchReason;
struct ContactQueryTextSearch;
struct ContactStoreNotificationTriggerDetails;
struct ContactManager;
struct ContactLaunchActionVerbs;
struct ContactField;
struct ContactLocationField;
struct ContactInstantMessageField;
struct KnownContactField;
struct ContactInformation;
struct ContactFieldFactory;
struct ContactPicker;

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

struct IContactRemovedEventArgs;
struct IContactPickerUI;
struct IContactPickerUI2;
struct ContactRemovedEventArgs;
struct ContactPickerUI;

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Core {

struct IAppListEntry;
struct IFrameworkView;
struct IFrameworkViewSource;
struct ICoreApplication;
struct ICoreApplicationUseCount;
struct ICoreApplicationExit;
struct ICoreImmersiveApplication;
struct ICoreImmersiveApplication2;
struct ICoreImmersiveApplication3;
struct ICoreApplicationUnhandledError;
struct ICoreApplicationView;
struct ICoreApplicationView2;
struct ICoreApplicationView3;
struct IHostedViewClosingEventArgs;
struct ICoreApplicationViewTitleBar;
struct IUnhandledErrorDetectedEventArgs;
struct IUnhandledError;
struct CoreApplicationView;
struct AppListEntry;
struct CoreApplication;
struct CoreApplicationViewTitleBar;
struct UnhandledErrorDetectedEventArgs;
struct HostedViewClosingEventArgs;
struct UnhandledError;

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

struct IDataProviderHandler;
struct IStandardDataFormatsStatics;
struct IStandardDataFormatsStatics2;
struct IDataPackagePropertySetView;
struct IDataPackagePropertySetView2;
struct IDataPackagePropertySetView3;
struct IDataPackagePropertySet;
struct IDataPackagePropertySet2;
struct IDataPackagePropertySet3;
struct IDataProviderDeferral;
struct IDataProviderRequest;
struct IOperationCompletedEventArgs;
struct IOperationCompletedEventArgs2;
struct IDataPackageView;
struct IDataPackageView2;
struct IDataPackageView3;
struct IDataPackageView4;
struct IDataPackage;
struct IDataPackage2;
struct IHtmlFormatHelperStatics;
struct IClipboardStatics;
struct IDataRequestDeferral;
struct IDataRequest;
struct IDataRequestedEventArgs;
struct ITargetApplicationChosenEventArgs;
struct IDataTransferManager;
struct IDataTransferManagerStatics;
struct ISharedStorageAccessManagerStatics;
struct StandardDataFormats;
struct DataPackagePropertySetView;
struct DataPackagePropertySet;
struct DataProviderDeferral;
struct DataProviderRequest;
struct OperationCompletedEventArgs;
struct DataPackageView;
struct DataPackage;
struct HtmlFormatHelper;
struct Clipboard;
struct DataRequestDeferral;
struct DataRequest;
struct DataRequestedEventArgs;
struct TargetApplicationChosenEventArgs;
struct DataTransferManager;
struct SharedStorageAccessManager;

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

struct IQuickLink;
struct IShareOperation;
struct IShareOperation2;
struct QuickLink;
struct ShareOperation;

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Search {

struct ISearchPaneQueryLinguisticDetails;
struct ISearchPaneVisibilityChangedEventArgs;
struct ISearchPaneQueryChangedEventArgs;
struct ISearchPaneQuerySubmittedEventArgs;
struct ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails;
struct ISearchPaneResultSuggestionChosenEventArgs;
struct ISearchSuggestionCollection;
struct ISearchPaneSuggestionsRequestDeferral;
struct ISearchPaneSuggestionsRequest;
struct ISearchPaneSuggestionsRequestedEventArgs;
struct ILocalContentSuggestionSettings;
struct ISearchPaneStatics;
struct ISearchPaneStaticsWithHideThisApplication;
struct ISearchPane;
struct ISearchQueryLinguisticDetailsFactory;
struct ISearchQueryLinguisticDetails;
struct ISearchSuggestionsRequestDeferral;
struct ISearchSuggestionsRequest;
struct SearchPaneQueryLinguisticDetails;
struct SearchPaneVisibilityChangedEventArgs;
struct SearchPaneQueryChangedEventArgs;
struct SearchPaneQuerySubmittedEventArgs;
struct SearchPaneResultSuggestionChosenEventArgs;
struct SearchSuggestionCollection;
struct SearchPaneSuggestionsRequestDeferral;
struct SearchPaneSuggestionsRequest;
struct SearchPaneSuggestionsRequestedEventArgs;
struct LocalContentSuggestionSettings;
struct SearchPane;
struct SearchQueryLinguisticDetails;
struct SearchSuggestionsRequestDeferral;
struct SearchSuggestionsRequest;

}}}}

namespace winrt { namespace Windows { namespace Data { namespace Text {

struct IWordSegmentsTokenizingHandler;
struct ISelectableWordSegmentsTokenizingHandler;
struct ISemanticTextQueryFactory;
struct ISemanticTextQuery;
struct IUnicodeCharactersStatics;
struct IAlternateWordForm;
struct ISelectableWordSegment;
struct IWordSegment;
struct IWordsSegmenter;
struct IWordsSegmenterFactory;
struct ISelectableWordsSegmenter;
struct ISelectableWordsSegmenterFactory;
struct ITextPredictionGenerator;
struct ITextPredictionGeneratorFactory;
struct ITextConversionGenerator;
struct ITextConversionGeneratorFactory;
struct ITextReverseConversionGenerator;
struct ITextReverseConversionGeneratorFactory;
struct SemanticTextQuery;
struct UnicodeCharacters;
struct AlternateWordForm;
struct WordSegment;
struct WordsSegmenter;
struct SelectableWordSegment;
struct SelectableWordsSegmenter;
struct TextPredictionGenerator;
struct TextConversionGenerator;
struct TextReverseConversionGenerator;

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth {

struct IBluetoothDevice;
struct IBluetoothDevice2;
struct IBluetoothDeviceStatics;
struct IBluetoothDeviceStatics2;
struct IBluetoothLEAppearanceCategoriesStatics;
struct IBluetoothLEAppearanceSubcategoriesStatics;
struct IBluetoothLEAppearance;
struct IBluetoothLEAppearanceStatics;
struct IBluetoothLEDevice;
struct IBluetoothLEDevice2;
struct IBluetoothLEDeviceStatics;
struct IBluetoothLEDeviceStatics2;
struct IBluetoothClassOfDevice;
struct IBluetoothClassOfDeviceStatics;
struct IBluetoothSignalStrengthFilter;
struct BluetoothLEDevice;
struct BluetoothDevice;
struct BluetoothClassOfDevice;
struct BluetoothLEAppearanceCategories;
struct BluetoothLEAppearanceSubcategories;
struct BluetoothLEAppearance;
struct BluetoothSignalStrengthFilter;

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Advertisement {

struct IBluetoothLEAdvertisement;
struct IBluetoothLEAdvertisementFilter;
struct IBluetoothLEAdvertisementWatcherStoppedEventArgs;
struct IBluetoothLEAdvertisementWatcherFactory;
struct IBluetoothLEAdvertisementWatcher;
struct IBluetoothLEAdvertisementReceivedEventArgs;
struct IBluetoothLEAdvertisementDataSectionFactory;
struct IBluetoothLEAdvertisementDataSection;
struct IBluetoothLEManufacturerDataFactory;
struct IBluetoothLEManufacturerData;
struct IBluetoothLEAdvertisementBytePatternFactory;
struct IBluetoothLEAdvertisementBytePattern;
struct IBluetoothLEAdvertisementDataTypesStatics;
struct IBluetoothLEAdvertisementPublisherStatusChangedEventArgs;
struct IBluetoothLEAdvertisementPublisherFactory;
struct IBluetoothLEAdvertisementPublisher;
struct BluetoothLEManufacturerData;
struct BluetoothLEAdvertisementDataSection;
struct BluetoothLEAdvertisement;
struct BluetoothLEAdvertisementBytePattern;
struct BluetoothLEAdvertisementFilter;
struct BluetoothLEAdvertisementWatcherStoppedEventArgs;
struct BluetoothLEAdvertisementWatcher;
struct BluetoothLEAdvertisementReceivedEventArgs;
struct BluetoothLEAdvertisementDataTypes;
struct BluetoothLEAdvertisementPublisherStatusChangedEventArgs;
struct BluetoothLEAdvertisementPublisher;

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Background {

struct IRfcommInboundConnectionInformation;
struct IRfcommOutboundConnectionInformation;
struct IRfcommConnectionTriggerDetails;
struct IGattCharacteristicNotificationTriggerDetails;
struct IBluetoothLEAdvertisementWatcherTriggerDetails;
struct IBluetoothLEAdvertisementPublisherTriggerDetails;
struct RfcommInboundConnectionInformation;
struct RfcommOutboundConnectionInformation;
struct RfcommConnectionTriggerDetails;
struct GattCharacteristicNotificationTriggerDetails;
struct BluetoothLEAdvertisementWatcherTriggerDetails;
struct BluetoothLEAdvertisementPublisherTriggerDetails;

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace GenericAttributeProfile {

struct IGattDeviceServiceStatics;
struct IGattCharacteristicStatics;
struct IGattCharacteristic;
struct IGattCharacteristic2;
struct IGattDescriptorStatics;
struct IGattDescriptor;
struct IGattPresentationFormatStatics;
struct IGattPresentationFormatTypesStatics;
struct IGattPresentationFormat;
struct IGattValueChangedEventArgs;
struct IGattServiceUuidsStatics;
struct IGattServiceUuidsStatics2;
struct IGattCharacteristicUuidsStatics;
struct IGattCharacteristicUuidsStatics2;
struct IGattDescriptorUuidsStatics;
struct IGattReliableWriteTransaction;
struct IGattReadResult;
struct IGattReadClientCharacteristicConfigurationDescriptorResult;
struct IGattDeviceService;
struct IGattDeviceService2;
struct GattDeviceService;
struct GattCharacteristic;
struct GattDescriptor;
struct GattPresentationFormat;
struct GattReadResult;
struct GattReadClientCharacteristicConfigurationDescriptorResult;
struct GattValueChangedEventArgs;
struct GattServiceUuids;
struct GattCharacteristicUuids;
struct GattDescriptorUuids;
struct GattReliableWriteTransaction;
struct GattPresentationFormatTypes;

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Rfcomm {

struct IRfcommServiceIdStatics;
struct IRfcommServiceId;
struct IRfcommDeviceServiceStatics;
struct IRfcommDeviceService;
struct IRfcommDeviceService2;
struct IRfcommServiceProviderStatics;
struct IRfcommServiceProvider;
struct IRfcommServiceProvider2;
struct RfcommDeviceService;
struct RfcommServiceId;
struct RfcommServiceProvider;

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Enumeration {

struct IDeviceConnectionChangeTriggerDetails;
struct IDevicePickerAppearance;
struct IDeviceSelectedEventArgs;
struct IDeviceDisconnectButtonClickedEventArgs;
struct IDevicePickerFilter;
struct IDevicePicker;
struct IEnclosureLocation;
struct IDeviceInformationUpdate;
struct IDeviceInformationUpdate2;
struct IDeviceWatcher;
struct IDeviceWatcher2;
struct IDeviceInformationStatics;
struct IDeviceInformationStatics2;
struct IDeviceInformation;
struct IDevicePairingResult;
struct IDeviceUnpairingResult;
struct IDevicePairingSettings;
struct IDevicePairingRequestedEventArgs;
struct IDeviceInformationCustomPairing;
struct IDeviceInformationPairing;
struct IDeviceInformationPairing2;
struct IDeviceInformationPairingStatics;
struct IDeviceInformation2;
struct IDeviceAccessChangedEventArgs;
struct IDeviceAccessInformation;
struct IDeviceAccessInformationStatics;
struct IDeviceWatcherEvent;
struct IDeviceWatcherTriggerDetails;
struct DeviceInformation;
struct DeviceConnectionChangeTriggerDetails;
struct DevicePickerAppearance;
struct DeviceSelectedEventArgs;
struct DeviceDisconnectButtonClickedEventArgs;
struct DevicePickerFilter;
struct DevicePicker;
struct DeviceThumbnail;
struct EnclosureLocation;
struct DeviceInformationUpdate;
struct DeviceInformationCollection;
struct DeviceWatcher;
struct DevicePairingResult;
struct DeviceUnpairingResult;
struct DevicePairingRequestedEventArgs;
struct DeviceInformationCustomPairing;
struct DeviceInformationPairing;
struct DeviceAccessChangedEventArgs;
struct DeviceAccessInformation;
struct DeviceWatcherEvent;
struct DeviceWatcherTriggerDetails;

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Geolocation {

struct IGeoshape;
struct IGeopoint;
struct IGeopointFactory;
struct IGeopath;
struct IGeopathFactory;
struct IGeoboundingBox;
struct IGeoboundingBoxFactory;
struct IGeoboundingBoxStatics;
struct IGeocoordinateSatelliteData;
struct IVenueData;
struct IGeocoordinate;
struct IGeocoordinateWithPositionData;
struct IGeocoordinateWithPoint;
struct IGeoposition;
struct IGeoposition2;
struct ICivicAddress;
struct IPositionChangedEventArgs;
struct IStatusChangedEventArgs;
struct IGeolocator;
struct IGeolocatorWithScalarAccuracy;
struct IGeolocatorStatics;
struct IGeocircle;
struct IGeocircleFactory;
struct Geopoint;
struct Geopath;
struct GeoboundingBox;
struct GeocoordinateSatelliteData;
struct VenueData;
struct Geocoordinate;
struct CivicAddress;
struct Geoposition;
struct PositionChangedEventArgs;
struct StatusChangedEventArgs;
struct Geolocator;
struct Geocircle;

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Input {

struct IMouseCapabilities;
struct IKeyboardCapabilities;
struct ITouchCapabilities;
struct IPointerDeviceStatics;
struct IPointerDevice;
struct IMouseEventArgs;
struct IMouseDevice;
struct IMouseDeviceStatics;
struct PointerDevice;
struct MouseDevice;
struct MouseEventArgs;
struct MouseCapabilities;
struct KeyboardCapabilities;
struct TouchCapabilities;

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

struct IPrintTaskConfigurationSaveRequestedDeferral;
struct IPrintTaskConfigurationSaveRequest;
struct IPrintTaskConfigurationSaveRequestedEventArgs;
struct IPrintTaskConfiguration;
struct IPrintNotificationEventDetails;
struct IPrintExtensionContextStatic;
struct IPrint3DWorkflowPrintRequestedEventArgs;
struct IPrint3DWorkflow;
struct PrintTaskConfigurationSaveRequestedDeferral;
struct PrintTaskConfigurationSaveRequest;
struct PrintTaskConfigurationSaveRequestedEventArgs;
struct PrintTaskConfiguration;
struct PrintNotificationEventDetails;
struct PrintExtensionContext;
struct Print3DWorkflowPrintRequestedEventArgs;
struct Print3DWorkflow;

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sensors {

struct ISensorDataThreshold;
struct ISensorDataThresholdTriggerDetails;
struct IAccelerometerDeviceId;
struct IAccelerometerStatics;
struct IAccelerometer;
struct IAccelerometer2;
struct IAccelerometer3;
struct IAccelerometerReading;
struct IAccelerometerReadingChangedEventArgs;
struct IAccelerometerShakenEventArgs;
struct IInclinometerDeviceId;
struct IInclinometerStatics;
struct IInclinometerStatics2;
struct IInclinometer;
struct IInclinometer2;
struct IInclinometerReading;
struct IInclinometerReadingYawAccuracy;
struct IInclinometerReadingChangedEventArgs;
struct IGyrometerDeviceId;
struct IGyrometerStatics;
struct IGyrometer;
struct IGyrometer2;
struct IGyrometerReading;
struct IGyrometerReadingChangedEventArgs;
struct ICompassDeviceId;
struct ICompassStatics;
struct ICompass;
struct ICompass2;
struct ICompassReading;
struct ICompassReadingHeadingAccuracy;
struct ICompassReadingChangedEventArgs;
struct ILightSensorDeviceId;
struct ILightSensorStatics;
struct ILightSensor;
struct ILightSensorReading;
struct ILightSensorReadingChangedEventArgs;
struct ISensorRotationMatrix;
struct ISensorQuaternion;
struct IOrientationSensorDeviceId;
struct IOrientationSensorStatics;
struct IOrientationSensorStatics2;
struct IOrientationSensor;
struct IOrientationSensor2;
struct IOrientationSensorReading;
struct IOrientationSensorReadingYawAccuracy;
struct IOrientationSensorReadingChangedEventArgs;
struct ISimpleOrientationSensorDeviceId;
struct ISimpleOrientationSensorStatics;
struct ISimpleOrientationSensor;
struct ISimpleOrientationSensor2;
struct ISimpleOrientationSensorOrientationChangedEventArgs;
struct IMagnetometerDeviceId;
struct IMagnetometerStatics;
struct IMagnetometer;
struct IMagnetometer2;
struct IMagnetometerReading;
struct IMagnetometerReadingChangedEventArgs;
struct IActivitySensorStatics;
struct IActivitySensor;
struct IActivitySensorReading;
struct IActivitySensorReadingChangedEventArgs;
struct IActivitySensorReadingChangeReport;
struct IActivitySensorTriggerDetails;
struct IBarometerStatics;
struct IBarometer;
struct IBarometerReading;
struct IBarometerReadingChangedEventArgs;
struct IPedometerReading;
struct IPedometerReadingChangedEventArgs;
struct IPedometerStatics;
struct IPedometerStatics2;
struct IPedometer2;
struct IPedometer;
struct IPedometerDataThresholdFactory;
struct IProximitySensorStatics;
struct IProximitySensor;
struct IProximitySensorReadingChangedEventArgs;
struct IProximitySensorReading;
struct IProximitySensorDataThresholdFactory;
struct IProximitySensorStatics2;
struct IAltimeterStatics;
struct IAltimeter;
struct IAltimeterReading;
struct IAltimeterReadingChangedEventArgs;
struct SensorDataThresholdTriggerDetails;
struct Accelerometer;
struct AccelerometerReading;
struct AccelerometerReadingChangedEventArgs;
struct AccelerometerShakenEventArgs;
struct Inclinometer;
struct InclinometerReading;
struct InclinometerReadingChangedEventArgs;
struct Gyrometer;
struct GyrometerReading;
struct GyrometerReadingChangedEventArgs;
struct Compass;
struct CompassReading;
struct CompassReadingChangedEventArgs;
struct LightSensor;
struct LightSensorReading;
struct LightSensorReadingChangedEventArgs;
struct SensorRotationMatrix;
struct SensorQuaternion;
struct OrientationSensor;
struct OrientationSensorReading;
struct OrientationSensorReadingChangedEventArgs;
struct SimpleOrientationSensor;
struct SimpleOrientationSensorOrientationChangedEventArgs;
struct Magnetometer;
struct MagnetometerReading;
struct MagnetometerReadingChangedEventArgs;
struct ActivitySensor;
struct ActivitySensorReading;
struct ActivitySensorReadingChangedEventArgs;
struct ActivitySensorReadingChangeReport;
struct ActivitySensorTriggerDetails;
struct Barometer;
struct BarometerReading;
struct BarometerReadingChangedEventArgs;
struct PedometerReading;
struct Pedometer;
struct PedometerReadingChangedEventArgs;
struct PedometerDataThreshold;
struct ProximitySensor;
struct ProximitySensorReading;
struct ProximitySensorReadingChangedEventArgs;
struct ProximitySensorDisplayOnOffController;
struct ProximitySensorDataThreshold;
struct Altimeter;
struct AltimeterReading;
struct AltimeterReadingChangedEventArgs;

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sms {

struct ISmsMessageReceivedEventHandler;
struct ISmsDeviceStatusChangedEventHandler;
struct ISmsMessage;
struct ISmsMessageBase;
struct ISmsBinaryMessage;
struct ISmsTextMessage;
struct ISmsTextMessageStatics;
struct ISmsTextMessage2;
struct ISmsWapMessage;
struct ISmsAppMessage;
struct ISmsBroadcastMessage;
struct ISmsVoicemailMessage;
struct ISmsStatusMessage;
struct ISmsDeviceMessageStore;
struct ISmsSendMessageResult;
struct ISmsMessageReceivedEventArgs;
struct ISmsDeviceStatics;
struct ISmsDeviceStatics2;
struct ISmsDevice;
struct ISmsDevice2Statics;
struct ISmsDevice2;
struct ISmsReceivedEventDetails;
struct ISmsReceivedEventDetails2;
struct ISmsMessageReceivedTriggerDetails;
struct ISmsFilterRule;
struct ISmsFilterRuleFactory;
struct ISmsFilterRules;
struct ISmsFilterRulesFactory;
struct ISmsMessageRegistrationStatics;
struct ISmsMessageRegistration;
struct SmsBinaryMessage;
struct SmsTextMessage;
struct SmsTextMessage2;
struct SmsWapMessage;
struct SmsAppMessage;
struct SmsBroadcastMessage;
struct SmsVoicemailMessage;
struct SmsStatusMessage;
struct DeleteSmsMessageOperation;
struct DeleteSmsMessagesOperation;
struct GetSmsMessageOperation;
struct GetSmsMessagesOperation;
struct SmsDeviceMessageStore;
struct SmsSendMessageResult;
struct SendSmsMessageOperation;
struct SmsMessageReceivedEventArgs;
struct SmsDevice;
struct GetSmsDeviceOperation;
struct SmsDevice2;
struct SmsReceivedEventDetails;
struct SmsMessageReceivedTriggerDetails;
struct SmsFilterRule;
struct SmsFilterRules;
struct SmsMessageRegistration;

}}}}

namespace winrt { namespace Windows { namespace Foundation {

struct IAsyncActionCompletedHandler;
struct IDeferralCompletedHandler;
struct IUriRuntimeClass;
struct IUriRuntimeClassWithAbsoluteCanonicalUri;
struct IUriEscapeStatics;
struct IUriRuntimeClassFactory;
struct IWwwFormUrlDecoderEntry;
struct IWwwFormUrlDecoderRuntimeClass;
struct IWwwFormUrlDecoderRuntimeClassFactory;
struct IGetActivationFactory;
struct IClosable;
struct IPropertyValue;
struct IPropertyValueStatics;
struct IStringable;
struct IDeferral;
struct IDeferralFactory;
struct IMemoryBufferReference;
struct IMemoryBuffer;
struct IMemoryBufferFactory;
struct IAsyncAction;
struct WwwFormUrlDecoder;
struct Uri;
struct WwwFormUrlDecoderEntry;
struct PropertyValue;
struct Deferral;
struct MemoryBuffer;

}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Collections {

struct IPropertySet;
struct PropertySet;
struct ValueSet;
struct StringMap;

}}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Diagnostics {

struct ITracingStatusChangedEventArgs;
struct IAsyncCausalityTracerStatics;
struct IErrorReportingSettings;
struct IErrorDetailsStatics;
struct IErrorDetails;
struct ILoggingOptions;
struct ILoggingOptionsFactory;
struct ILoggingChannelOptions;
struct ILoggingChannelOptionsFactory;
struct ILoggingFields;
struct ILoggingTarget;
struct ILoggingChannel;
struct ILoggingChannel2;
struct ILoggingChannelFactory;
struct ILoggingChannelFactory2;
struct ILoggingActivity;
struct ILoggingActivity2;
struct ILoggingActivityFactory;
struct ILoggingSession;
struct ILoggingSessionFactory;
struct ILogFileGeneratedEventArgs;
struct IFileLoggingSession;
struct IFileLoggingSessionFactory;
struct TracingStatusChangedEventArgs;
struct AsyncCausalityTracer;
struct RuntimeBrokerErrorSettings;
struct ErrorDetails;
struct LoggingOptions;
struct LoggingChannelOptions;
struct LoggingFields;
struct LoggingActivity;
struct LoggingChannel;
struct LoggingSession;
struct LogFileGeneratedEventArgs;
struct FileLoggingSession;

}}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Metadata {

struct IApiInformationStatics;
struct ApiInformation;

}}}}

namespace winrt { namespace Windows { namespace Gaming { namespace Input {

struct IGameController;
struct IGamepad;
struct IGamepadStatics;
struct IHeadset;
struct Headset;
struct Gamepad;

}}}}

namespace winrt { namespace Windows { namespace Globalization {

struct IJapanesePhoneticAnalyzerStatics;
struct IJapanesePhoneme;
struct ICalendarIdentifiersStatics;
struct ICalendarIdentifiersStatics2;
struct IClockIdentifiersStatics;
struct INumeralSystemIdentifiersStatics;
struct INumeralSystemIdentifiersStatics2;
struct ICurrencyIdentifiersStatics;
struct IGeographicRegion;
struct IGeographicRegionFactory;
struct IGeographicRegionStatics;
struct ILanguage;
struct ILanguageExtensionSubtags;
struct ILanguageFactory;
struct ILanguageStatics;
struct ILanguageStatics2;
struct ICalendar;
struct ICalendarFactory2;
struct ITimeZoneOnCalendar;
struct ICalendarFactory;
struct IApplicationLanguagesStatics;
struct JapanesePhoneme;
struct JapanesePhoneticAnalyzer;
struct CalendarIdentifiers;
struct ClockIdentifiers;
struct NumeralSystemIdentifiers;
struct CurrencyIdentifiers;
struct GeographicRegion;
struct Language;
struct Calendar;
struct ApplicationLanguages;

}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Display {

struct IDisplayPropertiesEventHandler;
struct IDisplayInformationStatics;
struct IDisplayInformation;
struct IDisplayInformation2;
struct IDisplayInformation3;
struct IDisplayPropertiesStatics;
struct DisplayInformation;
struct DisplayProperties;

}}}}

namespace winrt { namespace Windows { namespace Media { namespace SpeechRecognition {

struct ISpeechRecognitionCompilationResult;
struct ISpeechRecognizerTimeouts;
struct ISpeechRecognizerUIOptions;
struct ISpeechRecognitionResult;
struct ISpeechRecognitionConstraint;
struct ISpeechRecognitionResult2;
struct ISpeechRecognitionSemanticInterpretation;
struct ISpeechRecognitionTopicConstraint;
struct ISpeechRecognitionTopicConstraintFactory;
struct ISpeechRecognitionListConstraint;
struct ISpeechRecognitionListConstraintFactory;
struct ISpeechRecognitionGrammarFileConstraint;
struct ISpeechRecognitionGrammarFileConstraintFactory;
struct ISpeechRecognitionVoiceCommandDefinitionConstraint;
struct ISpeechRecognitionQualityDegradingEventArgs;
struct ISpeechRecognizerStateChangedEventArgs;
struct ISpeechRecognizer;
struct ISpeechRecognizerFactory;
struct ISpeechRecognizerStatics;
struct ISpeechRecognizer2;
struct ISpeechRecognitionHypothesis;
struct ISpeechRecognitionHypothesisGeneratedEventArgs;
struct ISpeechContinuousRecognitionSession;
struct ISpeechContinuousRecognitionCompletedEventArgs;
struct ISpeechContinuousRecognitionResultGeneratedEventArgs;
struct SpeechRecognitionSemanticInterpretation;
struct SpeechRecognitionResult;
struct SpeechRecognitionTopicConstraint;
struct SpeechRecognitionListConstraint;
struct SpeechRecognitionGrammarFileConstraint;
struct SpeechRecognizerTimeouts;
struct SpeechRecognizerUIOptions;
struct SpeechRecognitionCompilationResult;
struct SpeechRecognizer;
struct SpeechRecognitionQualityDegradingEventArgs;
struct SpeechRecognizerStateChangedEventArgs;
struct SpeechRecognitionVoiceCommandDefinitionConstraint;
struct SpeechContinuousRecognitionSession;
struct SpeechRecognitionHypothesisGeneratedEventArgs;
struct SpeechRecognitionHypothesis;
struct SpeechContinuousRecognitionCompletedEventArgs;
struct SpeechContinuousRecognitionResultGeneratedEventArgs;

}}}}

namespace winrt { namespace Windows { namespace Networking {

struct IHostNameStatics;
struct IHostName;
struct IHostNameFactory;
struct IEndpointPair;
struct IEndpointPairFactory;
struct EndpointPair;
struct HostName;

}}}

namespace winrt { namespace Windows { namespace Networking { namespace Connectivity {

struct INetworkStatusChangedEventHandler;
struct IDataUsage;
struct IDataPlanUsage;
struct IDataPlanStatus;
struct IConnectionCost;
struct IConnectionCost2;
struct INetworkSecuritySettings;
struct IConnectionProfile;
struct IWwanConnectionProfileDetails;
struct IWlanConnectionProfileDetails;
struct IConnectivityInterval;
struct INetworkUsage;
struct IConnectionProfile2;
struct ILanIdentifierData;
struct ILanIdentifier;
struct INetworkInformationStatics;
struct IConnectionProfileFilter;
struct IConnectionProfileFilter2;
struct INetworkInformationStatics2;
struct INetworkItem;
struct INetworkAdapter;
struct IIPInformation;
struct IProxyConfiguration;
struct IConnectionSession;
struct IRoutePolicy;
struct IRoutePolicyFactory;
struct ICellularApnContext;
struct IConnectivityManagerStatics;
struct INetworkStateChangeEventDetails;
struct INetworkStateChangeEventDetails2;
struct IPInformation;
struct DataPlanUsage;
struct ConnectionCost;
struct DataPlanStatus;
struct NetworkAdapter;
struct DataUsage;
struct NetworkSecuritySettings;
struct WwanConnectionProfileDetails;
struct WlanConnectionProfileDetails;
struct NetworkUsage;
struct ConnectivityInterval;
struct LanIdentifierData;
struct ConnectionProfile;
struct LanIdentifier;
struct ProxyConfiguration;
struct ConnectionProfileFilter;
struct NetworkItem;
struct RoutePolicy;
struct CellularApnContext;
struct ConnectionSession;
struct NetworkInformation;
struct ConnectivityManager;
struct NetworkStateChangeEventDetails;

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Sockets {

struct IControlChannelTrigger;
struct IControlChannelTriggerFactory;
struct IControlChannelTriggerEventDetails;
struct IControlChannelTriggerResetEventDetails;
struct ISocketActivityInformation;
struct ISocketActivityTriggerDetails;
struct ISocketActivityInformationStatics;
struct ISocketActivityContext;
struct ISocketActivityContextFactory;
struct IDatagramSocketMessageReceivedEventArgs;
struct IMessageWebSocketMessageReceivedEventArgs;
struct IWebSocketClosedEventArgs;
struct IDatagramSocketInformation;
struct IDatagramSocketControl;
struct IDatagramSocketControl2;
struct IDatagramSocketControl3;
struct IDatagramSocketStatics;
struct IDatagramSocket;
struct IDatagramSocket2;
struct IDatagramSocket3;
struct IStreamSocketInformation;
struct IStreamSocketInformation2;
struct IStreamSocketControl;
struct IStreamSocketControl2;
struct IStreamSocketControl3;
struct IStreamSocket;
struct IStreamSocket2;
struct IStreamSocket3;
struct IStreamSocketListenerControl;
struct IStreamSocketListenerControl2;
struct IStreamSocketListenerInformation;
struct IStreamSocketListenerConnectionReceivedEventArgs;
struct IStreamSocketListener;
struct IStreamSocketListener2;
struct IStreamSocketListener3;
struct IWebSocketControl;
struct IWebSocketInformation;
struct IWebSocket;
struct IMessageWebSocketControl;
struct IMessageWebSocket;
struct IStreamWebSocketControl;
struct IStreamWebSocket;
struct ISocketErrorStatics;
struct IWebSocketErrorStatics;
struct ControlChannelTrigger;
struct SocketActivityContext;
struct DatagramSocket;
struct StreamSocket;
struct StreamSocketListener;
struct SocketActivityInformation;
struct DatagramSocketControl;
struct DatagramSocketInformation;
struct DatagramSocketMessageReceivedEventArgs;
struct StreamSocketControl;
struct StreamSocketInformation;
struct StreamSocketListenerControl;
struct StreamSocketListenerInformation;
struct StreamSocketListenerConnectionReceivedEventArgs;
struct WebSocketClosedEventArgs;
struct MessageWebSocketControl;
struct MessageWebSocketInformation;
struct MessageWebSocket;
struct MessageWebSocketMessageReceivedEventArgs;
struct StreamWebSocketControl;
struct StreamWebSocketInformation;
struct StreamWebSocket;
struct WebSocketKeepAlive;
struct SocketError;
struct WebSocketError;
struct SocketActivityTriggerDetails;

}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web {

struct IWebAuthenticationResult;
struct IWebAuthenticationBrokerStatics;
struct IWebAuthenticationBrokerStatics2;
struct WebAuthenticationResult;
struct WebAuthenticationBroker;

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Core {

struct IWebTokenRequest;
struct IWebTokenRequest2;
struct IWebTokenRequestFactory;
struct IWebAuthenticationCoreManagerStatics;
struct IWebAuthenticationCoreManagerStatics2;
struct IWebProviderError;
struct IWebProviderErrorFactory;
struct IWebTokenRequestResult;
struct IWebTokenResponse;
struct IWebTokenResponseFactory;
struct WebTokenRequest;
struct WebAuthenticationCoreManager;
struct WebProviderError;
struct WebTokenResponse;
struct WebTokenRequestResult;

}}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Provider {

struct IWebAccountProviderOperation;
struct IWebProviderTokenRequest;
struct IWebProviderTokenResponse;
struct IWebProviderTokenResponseFactory;
struct IWebAccountClientView;
struct IWebAccountClientViewFactory;
struct IWebAccountManagerStatics;
struct IWebAccountManagerStatics2;
struct IWebAccountScopeManagerStatics;
struct IWebAccountProviderBaseReportOperation;
struct IWebAccountProviderUIReportOperation;
struct IWebAccountProviderSilentReportOperation;
struct IWebAccountProviderTokenOperation;
struct IWebAccountProviderAddAccountOperation;
struct IWebAccountProviderManageAccountOperation;
struct IWebAccountProviderDeleteAccountOperation;
struct IWebAccountProviderSignOutAccountOperation;
struct IWebAccountProviderRetrieveCookiesOperation;
struct IWebAccountProviderTokenObjects;
struct WebProviderTokenRequest;
struct WebProviderTokenResponse;
struct WebAccountClientView;
struct WebAccountManager;
struct WebAccountProviderRequestTokenOperation;
struct WebAccountProviderGetTokenSilentOperation;
struct WebAccountProviderAddAccountOperation;
struct WebAccountProviderManageAccountOperation;
struct WebAccountProviderDeleteAccountOperation;
struct WebAccountProviderSignOutAccountOperation;
struct WebAccountProviderRetrieveCookiesOperation;
struct WebAccountProviderTriggerDetails;

}}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Credentials {

struct IWebAccountFactory;
struct IWebAccount;
struct IWebAccount2;
struct IWebAccountProviderFactory;
struct IWebAccountProvider;
struct IWebAccountProvider2;
struct IWebAccountProvider3;
struct IKeyCredentialManagerStatics;
struct IKeyCredential;
struct IKeyCredentialRetrievalResult;
struct IKeyCredentialOperationResult;
struct IKeyCredentialAttestationResult;
struct IPasswordCredential;
struct ICredentialFactory;
struct IPasswordVault;
struct WebAccountProvider;
struct WebAccount;
struct KeyCredentialRetrievalResult;
struct KeyCredentialOperationResult;
struct KeyCredentialAttestationResult;
struct KeyCredential;
struct KeyCredentialManager;
struct PasswordCredential;
struct PasswordVault;
struct PasswordCredentialPropertyStore;

}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

struct ICertificateRequestProperties;
struct ICertificateRequestProperties2;
struct ICertificateRequestProperties3;
struct ICertificateEnrollmentManagerStatics;
struct ICertificateEnrollmentManagerStatics2;
struct ICertificateEnrollmentManagerStatics3;
struct IKeyAttestationHelperStatics;
struct IKeyAttestationHelperStatics2;
struct ICertificateStoresStatics;
struct IUserCertificateEnrollmentManager;
struct IUserCertificateEnrollmentManager2;
struct ICertificateStore;
struct ICertificateStore2;
struct IKeyAlgorithmNamesStatics;
struct IKeyAlgorithmNamesStatics2;
struct IKeyStorageProviderNamesStatics;
struct IKeyStorageProviderNamesStatics2;
struct IChainBuildingParameters;
struct IChainValidationParameters;
struct ICertificateQuery;
struct ICertificateQuery2;
struct ICertificateChain;
struct ICertificate;
struct ICertificate2;
struct ICertificateFactory;
struct ICmsTimestampInfo;
struct ICmsSignerInfo;
struct ISubjectAlternativeNameInfo;
struct IPfxImportParameters;
struct ICertificateKeyUsages;
struct ICmsAttachedSignature;
struct ICmsAttachedSignatureFactory;
struct ICmsAttachedSignatureStatics;
struct ICmsDetachedSignature;
struct ICmsDetachedSignatureFactory;
struct ICmsDetachedSignatureStatics;
struct Certificate;
struct CertificateRequestProperties;
struct UserCertificateEnrollmentManager;
struct PfxImportParameters;
struct CertificateEnrollmentManager;
struct KeyAttestationHelper;
struct CertificateQuery;
struct CertificateStore;
struct CertificateStores;
struct KeyAlgorithmNames;
struct KeyStorageProviderNames;
struct ChainBuildingParameters;
struct ChainValidationParameters;
struct CertificateChain;
struct CertificateKeyUsages;
struct SubjectAlternativeNameInfo;
struct CmsTimestampInfo;
struct CmsSignerInfo;
struct CmsAttachedSignature;
struct CmsDetachedSignature;

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

struct IKeyDerivationParameters;
struct IKeyDerivationParameters2;
struct IKeyDerivationParametersStatics;
struct IKeyDerivationParametersStatics2;
struct ICryptographicKey;
struct IHashComputation;
struct IHashAlgorithmProvider;
struct IMacAlgorithmProvider;
struct IMacAlgorithmProvider2;
struct IKeyDerivationAlgorithmProvider;
struct ISymmetricKeyAlgorithmProvider;
struct IAsymmetricKeyAlgorithmProvider;
struct IAsymmetricKeyAlgorithmProvider2;
struct IPersistedKeyProviderStatics;
struct IEncryptedAndAuthenticatedData;
struct ICryptographicEngineStatics;
struct ICryptographicEngineStatics2;
struct IHashAlgorithmProviderStatics;
struct IMacAlgorithmProviderStatics;
struct IKeyDerivationAlgorithmProviderStatics;
struct ISymmetricKeyAlgorithmProviderStatics;
struct IAsymmetricKeyAlgorithmProviderStatics;
struct IHashAlgorithmNamesStatics;
struct IMacAlgorithmNamesStatics;
struct ISymmetricAlgorithmNamesStatics;
struct IAsymmetricAlgorithmNamesStatics;
struct IAsymmetricAlgorithmNamesStatics2;
struct IEccCurveNamesStatics;
struct IKeyDerivationAlgorithmNamesStatics;
struct IKeyDerivationAlgorithmNamesStatics2;
struct KeyDerivationParameters;
struct CryptographicKey;
struct CryptographicHash;
struct PersistedKeyProvider;
struct EncryptedAndAuthenticatedData;
struct CryptographicEngine;
struct HashAlgorithmProvider;
struct MacAlgorithmProvider;
struct KeyDerivationAlgorithmProvider;
struct SymmetricKeyAlgorithmProvider;
struct AsymmetricKeyAlgorithmProvider;
struct HashAlgorithmNames;
struct MacAlgorithmNames;
struct SymmetricAlgorithmNames;
struct AsymmetricAlgorithmNames;
struct EccCurveNames;
struct KeyDerivationAlgorithmNames;

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace EnterpriseData {

struct IFileRevocationManagerStatics;
struct IFileProtectionManagerStatics;
struct IFileProtectionManagerStatics2;
struct IProtectedFileCreateResult;
struct IFileProtectionInfo;
struct IProtectedContainerExportResult;
struct IProtectedContainerImportResult;
struct IDataProtectionManagerStatics;
struct IDataProtectionInfo;
struct IBufferProtectUnprotectResult;
struct IProtectionPolicyManager;
struct IProtectionPolicyManagerStatics;
struct IProtectionPolicyManagerStatics2;
struct IThreadNetworkContext;
struct IProtectedAccessSuspendingEventArgs;
struct IProtectedAccessResumedEventArgs;
struct IProtectedContentRevokedEventArgs;
struct FileProtectionInfo;
struct ProtectedContainerExportResult;
struct ProtectedContainerImportResult;
struct ProtectedFileCreateResult;
struct BufferProtectUnprotectResult;
struct DataProtectionInfo;
struct ThreadNetworkContext;
struct ProtectionPolicyManager;
struct ProtectedAccessSuspendingEventArgs;
struct ProtectedAccessResumedEventArgs;
struct ProtectedContentRevokedEventArgs;
struct FileRevocationManager;
struct FileProtectionManager;
struct DataProtectionManager;

}}}}

namespace winrt { namespace Windows { namespace Storage {

struct IStreamedFileDataRequestedHandler;
struct IApplicationDataSetVersionHandler;
struct IStorageLibraryStatics;
struct IStorageLibraryStatics2;
struct IStorageLibrary;
struct IKnownFoldersStatics;
struct IKnownFoldersStatics2;
struct IKnownFoldersStatics3;
struct IKnownFoldersPlaylistsStatics;
struct IKnownFoldersCameraRollStatics;
struct IKnownFoldersSavedPicturesStatics;
struct IDownloadsFolderStatics;
struct IDownloadsFolderStatics2;
struct IStreamedFileDataRequest;
struct IStorageFileStatics;
struct IStorageItem;
struct IStorageFolder;
struct IStorageFile;
struct IStorageFolderStatics;
struct IStorageItem2;
struct IStorageItemProperties;
struct IStorageItemProperties2;
struct IStorageItemPropertiesWithProvider;
struct IStorageFilePropertiesWithAvailability;
struct IStorageProvider;
struct IStorageFolder2;
struct IStorageFile2;
struct IFileIOStatics;
struct IPathIOStatics;
struct ICachedFileManagerStatics;
struct ISystemAudioProperties;
struct ISystemGPSProperties;
struct ISystemImageProperties;
struct ISystemMediaProperties;
struct ISystemMusicProperties;
struct ISystemPhotoProperties;
struct ISystemVideoProperties;
struct ISystemProperties;
struct IStorageStreamTransaction;
struct IApplicationDataStatics;
struct IApplicationDataStatics2;
struct IApplicationData;
struct IApplicationData2;
struct IApplicationData3;
struct ISetVersionRequest;
struct ISetVersionDeferral;
struct IApplicationDataContainer;
struct StorageFile;
struct StorageFolder;
struct StorageLibrary;
struct KnownFolders;
struct DownloadsFolder;
struct StreamedFileDataRequest;
struct StorageStreamTransaction;
struct StorageProvider;
struct FileIO;
struct PathIO;
struct CachedFileManager;
struct SystemAudioProperties;
struct SystemGPSProperties;
struct SystemImageProperties;
struct SystemMediaProperties;
struct SystemMusicProperties;
struct SystemPhotoProperties;
struct SystemVideoProperties;
struct SystemProperties;
struct ApplicationData;
struct SetVersionRequest;
struct ApplicationDataContainer;
struct SetVersionDeferral;
struct ApplicationDataContainerSettings;
struct ApplicationDataCompositeValue;

}}}

namespace winrt { namespace Windows { namespace Storage { namespace FileProperties {

struct IGeotagHelperStatics;
struct IThumbnailProperties;
struct IStorageItemExtraProperties;
struct IStorageItemContentProperties;
struct IMusicProperties;
struct IImageProperties;
struct IVideoProperties;
struct IDocumentProperties;
struct IBasicProperties;
struct GeotagHelper;
struct StorageItemThumbnail;
struct MusicProperties;
struct VideoProperties;
struct ImageProperties;
struct DocumentProperties;
struct StorageItemContentProperties;
struct BasicProperties;

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

struct IFileRemovedEventArgs;
struct IFileOpenPickerUI;
struct IPickerClosingEventArgs;
struct IPickerClosingOperation;
struct IPickerClosingDeferral;
struct IFileSavePickerUI;
struct ITargetFileRequestedEventArgs;
struct ITargetFileRequest;
struct ITargetFileRequestDeferral;
struct FileRemovedEventArgs;
struct FileOpenPickerUI;
struct PickerClosingEventArgs;
struct PickerClosingOperation;
struct PickerClosingDeferral;
struct FileSavePickerUI;
struct TargetFileRequestedEventArgs;
struct TargetFileRequest;
struct TargetFileRequestDeferral;

}}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Provider {

struct ICachedFileUpdaterUI;
struct IFileUpdateRequestedEventArgs;
struct IFileUpdateRequest;
struct IFileUpdateRequestDeferral;
struct ICachedFileUpdaterUI2;
struct IFileUpdateRequest2;
struct ICachedFileUpdaterStatics;
struct CachedFileUpdaterUI;
struct FileUpdateRequestedEventArgs;
struct FileUpdateRequest;
struct FileUpdateRequestDeferral;
struct CachedFileUpdater;

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Search {

struct IContentIndexerStatics;
struct IIndexableContent;
struct IContentIndexer;
struct IValueAndLanguage;
struct IContentIndexerQueryOperations;
struct IContentIndexerQuery;
struct IQueryOptions;
struct IQueryOptionsWithProviderFilter;
struct IQueryOptionsFactory;
struct IStorageQueryResultBase;
struct IStorageFileQueryResult;
struct IStorageFileQueryResult2;
struct IStorageFolderQueryResult;
struct IStorageItemQueryResult;
struct IStorageFolderQueryOperations;
struct IStorageLibraryContentChangedTriggerDetails;
struct ContentIndexer;
struct ValueAndLanguage;
struct ContentIndexerQuery;
struct IndexableContent;
struct QueryOptions;
struct StorageFileQueryResult;
struct StorageFolderQueryResult;
struct StorageItemQueryResult;
struct SortEntryVector;
struct StorageLibraryContentChangedTriggerDetails;

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Streams {

struct IDataReader;
struct IDataReaderFactory;
struct IDataReaderStatics;
struct IDataWriter;
struct IDataWriterFactory;
struct IRandomAccessStreamReference;
struct IRandomAccessStreamStatics;
struct IBufferFactory;
struct IBuffer;
struct IBufferStatics;
struct IContentTypeProvider;
struct IInputStreamReference;
struct IRandomAccessStreamReferenceStatics;
struct IInputStream;
struct IOutputStream;
struct IRandomAccessStream;
struct IRandomAccessStreamWithContentType;
struct DataReaderLoadOperation;
struct DataReader;
struct DataWriterStoreOperation;
struct DataWriter;
struct RandomAccessStream;
struct Buffer;
struct RandomAccessStreamReference;
struct FileRandomAccessStream;
struct FileInputStream;
struct FileOutputStream;
struct RandomAccessStreamOverStream;
struct InputStreamOverStream;
struct OutputStreamOverStream;
struct InMemoryRandomAccessStream;

}}}}

namespace winrt { namespace Windows { namespace System {

struct IAppMemoryReport;
struct IProcessMemoryReport;
struct IAppMemoryUsageLimitChangingEventArgs;
struct IMemoryManagerStatics;
struct IMemoryManagerStatics2;
struct IMemoryManagerStatics3;
struct IProtocolForResultsOperation;
struct IUser;
struct IUserStatics;
struct IUserWatcher;
struct IUserChangedEventArgs;
struct IUserAuthenticationStatusChangeDeferral;
struct IUserAuthenticationStatusChangingEventArgs;
struct IKnownUserPropertiesStatics;
struct ILaunchUriResult;
struct ILauncherUIOptions;
struct ILauncherOptions;
struct ILauncherOptions2;
struct ILauncherViewOptions;
struct IFolderLauncherOptions;
struct ILauncherStatics;
struct ILauncherStatics2;
struct ILauncherStatics3;
struct User;
struct ProtocolForResultsOperation;
struct UserChangedEventArgs;
struct AppMemoryUsageLimitChangingEventArgs;
struct AppMemoryReport;
struct ProcessMemoryReport;
struct MemoryManager;
struct UserWatcher;
struct UserAuthenticationStatusChangingEventArgs;
struct UserAuthenticationStatusChangeDeferral;
struct KnownUserProperties;
struct LaunchUriResult;
struct LauncherUIOptions;
struct LauncherOptions;
struct FolderLauncherOptions;
struct Launcher;

}}}

namespace winrt { namespace Windows { namespace UI {

struct IColorHelper;
struct IColorHelperStatics;
struct IColors;
struct IColorsStatics;
struct ColorHelper;
struct Colors;

}}}

namespace winrt { namespace Windows { namespace UI { namespace Core {

struct IDispatchedHandler;
struct IIdleDispatchedHandler;
struct ICoreWindowEventArgs;
struct IAutomationProviderRequestedEventArgs;
struct ICharacterReceivedEventArgs;
struct IInputEnabledEventArgs;
struct IKeyEventArgs;
struct IPointerEventArgs;
struct ITouchHitTestingEventArgs;
struct IWindowActivatedEventArgs;
struct IWindowSizeChangedEventArgs;
struct IVisibilityChangedEventArgs;
struct ICoreWindow;
struct ICoreWindow2;
struct ICoreWindowStatic;
struct IAcceleratorKeyEventArgs;
struct ICoreAcceleratorKeys;
struct ICoreDispatcher;
struct ICoreDispatcher2;
struct ICoreDispatcherWithTaskPriority;
struct IIdleDispatchedHandlerArgs;
struct ICoreCursor;
struct ICoreCursorFactory;
struct IInitializeWithCoreWindow;
struct ICoreWindowResizeManager;
struct ICoreWindowResizeManagerLayoutCapability;
struct ICoreWindowResizeManagerStatics;
struct ICoreInputSourceBase;
struct ICorePointerInputSource;
struct ICoreKeyboardInputSource;
struct ICoreComponentFocusable;
struct ICoreTouchHitTesting;
struct ICorePointerRedirector;
struct ICoreWindowPopupShowingEventArgs;
struct ICoreWindowDialog;
struct ICoreWindowDialogFactory;
struct ICoreWindowFlyout;
struct ICoreWindowFlyoutFactory;
struct ISystemNavigationManager;
struct ISystemNavigationManager2;
struct ISystemNavigationManagerStatics;
struct IBackRequestedEventArgs;
struct KeyEventArgs;
struct PointerEventArgs;
struct CoreDispatcher;
struct CoreCursor;
struct CoreWindow;
struct WindowActivatedEventArgs;
struct AutomationProviderRequestedEventArgs;
struct CharacterReceivedEventArgs;
struct CoreWindowEventArgs;
struct InputEnabledEventArgs;
struct TouchHitTestingEventArgs;
struct WindowSizeChangedEventArgs;
struct VisibilityChangedEventArgs;
struct IdleDispatchedHandlerArgs;
struct AcceleratorKeyEventArgs;
struct CoreAcceleratorKeys;
struct CoreWindowResizeManager;
struct CoreIndependentInputSource;
struct CoreComponentInputSource;
struct CoreWindowPopupShowingEventArgs;
struct CoreWindowDialog;
struct CoreWindowFlyout;
struct BackRequestedEventArgs;
struct SystemNavigationManager;

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input {

struct IEdgeGestureEventArgs;
struct IEdgeGestureStatics;
struct IEdgeGesture;
struct IKeyboardDeliveryInterceptor;
struct IKeyboardDeliveryInterceptorStatics;
struct ITappedEventArgs;
struct IRightTappedEventArgs;
struct IHoldingEventArgs;
struct IDraggingEventArgs;
struct IManipulationStartedEventArgs;
struct IManipulationUpdatedEventArgs;
struct IManipulationInertiaStartingEventArgs;
struct IManipulationCompletedEventArgs;
struct ICrossSlidingEventArgs;
struct IMouseWheelParameters;
struct IGestureRecognizer;
struct IPointerPointStatics;
struct IPointerPointTransform;
struct IPointerPoint;
struct IPointerPointProperties;
struct IPointerVisualizationSettings;
struct IPointerVisualizationSettingsStatics;
struct EdgeGestureEventArgs;
struct EdgeGesture;
struct KeyboardDeliveryInterceptor;
struct MouseWheelParameters;
struct GestureRecognizer;
struct TappedEventArgs;
struct RightTappedEventArgs;
struct HoldingEventArgs;
struct DraggingEventArgs;
struct ManipulationStartedEventArgs;
struct ManipulationUpdatedEventArgs;
struct ManipulationInertiaStartingEventArgs;
struct ManipulationCompletedEventArgs;
struct CrossSlidingEventArgs;
struct PointerPoint;
struct PointerPointProperties;
struct PointerVisualizationSettings;

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Inking {

struct IInkStrokesCollectedEventArgs;
struct IInkStrokesErasedEventArgs;
struct IInkPresenter;
struct IInkInputProcessingConfiguration;
struct IInkSynchronizer;
struct IInkUnprocessedInput;
struct IInkStrokeInput;
struct IInkPoint;
struct IInkPointFactory;
struct IInkDrawingAttributes;
struct IInkDrawingAttributes2;
struct IInkStrokeRenderingSegment;
struct IInkStroke;
struct IInkStroke2;
struct IInkStrokeBuilder;
struct IInkStrokeBuilder2;
struct IInkRecognitionResult;
struct IInkStrokeContainer;
struct IInkStrokeContainer2;
struct IInkRecognizer;
struct IInkRecognizerContainer;
struct IInkManager;
struct InkUnprocessedInput;
struct InkStrokeInput;
struct InkInputProcessingConfiguration;
struct InkSynchronizer;
struct InkPresenter;
struct InkStrokesCollectedEventArgs;
struct InkStrokesErasedEventArgs;
struct InkPoint;
struct InkDrawingAttributes;
struct InkStrokeRenderingSegment;
struct InkStroke;
struct InkStrokeBuilder;
struct InkRecognitionResult;
struct InkStrokeContainer;
struct InkRecognizer;
struct InkRecognizerContainer;
struct InkManager;

}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Inking { namespace Core {

struct ICoreInkIndependentInputSource;
struct ICoreInkIndependentInputSourceStatics;
struct CoreInkIndependentInputSource;

}}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Popups {

struct IUICommandInvokedHandler;
struct IMessageDialog;
struct IMessageDialogFactory;
struct IUICommand;
struct IUICommandFactory;
struct IPopupMenu;
struct MessageDialog;
struct UICommand;
struct UICommandSeparator;
struct PopupMenu;

}}}}

namespace winrt { namespace Windows { namespace UI { namespace ViewManagement {

struct IApplicationViewSwitcherStatics;
struct IApplicationViewSwitcherStatics2;
struct IApplicationViewInteropStatics;
struct IApplicationViewStatics;
struct IApplicationViewStatics2;
struct IApplicationViewStatics3;
struct IApplicationView;
struct IApplicationView2;
struct IApplicationViewTitleBar;
struct IApplicationView3;
struct IApplicationViewFullscreenStatics;
struct IApplicationViewConsolidatedEventArgs;
struct IActivationViewSwitcher;
struct IApplicationViewTransferContext;
struct IApplicationViewTransferContextStatics;
struct IInputPaneVisibilityEventArgs;
struct IInputPane;
struct IInputPane2;
struct IInputPaneControl;
struct IInputPaneStatics;
struct IProjectionManagerStatics;
struct IProjectionManagerStatics2;
struct IUIViewSettings;
struct IUIViewSettingsStatics;
struct IAccessibilitySettings;
struct IUISettings;
struct IUISettings2;
struct IUISettings3;
struct IApplicationViewScaling;
struct IApplicationViewScalingStatics;
struct ApplicationView;
struct ApplicationViewConsolidatedEventArgs;
struct ApplicationViewTitleBar;
struct ApplicationViewSwitcher;
struct ActivationViewSwitcher;
struct ApplicationViewTransferContext;
struct InputPaneVisibilityEventArgs;
struct InputPane;
struct ProjectionManager;
struct UIViewSettings;
struct AccessibilitySettings;
struct UISettings;
struct ApplicationViewScaling;

}}}}

namespace winrt { namespace Windows { namespace Web {

struct IUriToStreamResolver;
struct IWebErrorStatics;
struct WebError;

}}}

namespace winrt { namespace Windows { namespace Web { namespace Http {

struct IHttpClientFactory;
struct IHttpClient;
struct IHttpContent;
struct IHttpCookieManager;
struct IHttpCookieFactory;
struct IHttpCookie;
struct IHttpMethodStatics;
struct IHttpMethodFactory;
struct IHttpMethod;
struct IHttpTransportInformation;
struct IHttpRequestMessageFactory;
struct IHttpRequestMessage;
struct IHttpResponseMessageFactory;
struct IHttpResponseMessage;
struct IHttpStringContentFactory;
struct IHttpBufferContentFactory;
struct IHttpStreamContentFactory;
struct IHttpFormUrlEncodedContentFactory;
struct IHttpMultipartContentFactory;
struct IHttpMultipartContent;
struct IHttpMultipartFormDataContentFactory;
struct IHttpMultipartFormDataContent;
struct HttpCookieManager;
struct HttpRequestMessage;
struct HttpResponseMessage;
struct HttpMethod;
struct HttpClient;
struct HttpCookie;
struct HttpCookieCollection;
struct HttpTransportInformation;
struct HttpStringContent;
struct HttpBufferContent;
struct HttpStreamContent;
struct HttpFormUrlEncodedContent;
struct HttpMultipartContent;
struct HttpMultipartFormDataContent;

}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http { namespace Filters {

struct IHttpFilter;
struct IHttpCacheControl;
struct IHttpBaseProtocolFilter;
struct IHttpBaseProtocolFilter2;
struct IHttpBaseProtocolFilter3;
struct HttpCacheControl;
struct HttpBaseProtocolFilter;

}}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http { namespace Headers {

struct IHttpContentHeaderCollection;
struct IHttpRequestHeaderCollection;
struct IHttpResponseHeaderCollection;
struct IHttpCacheDirectiveHeaderValueCollection;
struct IHttpChallengeHeaderValueStatics;
struct IHttpChallengeHeaderValueFactory;
struct IHttpChallengeHeaderValue;
struct IHttpChallengeHeaderValueCollection;
struct IHttpCredentialsHeaderValueStatics;
struct IHttpCredentialsHeaderValueFactory;
struct IHttpCredentialsHeaderValue;
struct IHttpConnectionOptionHeaderValueStatics;
struct IHttpConnectionOptionHeaderValueFactory;
struct IHttpConnectionOptionHeaderValue;
struct IHttpConnectionOptionHeaderValueCollection;
struct IHttpContentCodingHeaderValueStatics;
struct IHttpContentCodingHeaderValueFactory;
struct IHttpContentCodingHeaderValue;
struct IHttpContentCodingHeaderValueCollection;
struct IHttpContentDispositionHeaderValueStatics;
struct IHttpContentDispositionHeaderValueFactory;
struct IHttpContentDispositionHeaderValue;
struct IHttpContentRangeHeaderValueStatics;
struct IHttpContentRangeHeaderValueFactory;
struct IHttpContentRangeHeaderValue;
struct IHttpCookiePairHeaderValueStatics;
struct IHttpCookiePairHeaderValueFactory;
struct IHttpCookiePairHeaderValue;
struct IHttpCookiePairHeaderValueCollection;
struct IHttpDateOrDeltaHeaderValueStatics;
struct IHttpDateOrDeltaHeaderValue;
struct IHttpExpectationHeaderValueStatics;
struct IHttpExpectationHeaderValueFactory;
struct IHttpExpectationHeaderValue;
struct IHttpExpectationHeaderValueCollection;
struct IHttpLanguageHeaderValueCollection;
struct IHttpLanguageRangeWithQualityHeaderValueStatics;
struct IHttpLanguageRangeWithQualityHeaderValueFactory;
struct IHttpLanguageRangeWithQualityHeaderValue;
struct IHttpLanguageRangeWithQualityHeaderValueCollection;
struct IHttpMediaTypeHeaderValueStatics;
struct IHttpMediaTypeHeaderValueFactory;
struct IHttpMediaTypeHeaderValue;
struct IHttpMediaTypeWithQualityHeaderValueStatics;
struct IHttpMediaTypeWithQualityHeaderValueFactory;
struct IHttpMediaTypeWithQualityHeaderValue;
struct IHttpMediaTypeWithQualityHeaderValueCollection;
struct IHttpMethodHeaderValueCollection;
struct IHttpNameValueHeaderValueStatics;
struct IHttpNameValueHeaderValueFactory;
struct IHttpNameValueHeaderValue;
struct IHttpProductHeaderValueStatics;
struct IHttpProductHeaderValueFactory;
struct IHttpProductHeaderValue;
struct IHttpProductInfoHeaderValueStatics;
struct IHttpProductInfoHeaderValueFactory;
struct IHttpProductInfoHeaderValue;
struct IHttpProductInfoHeaderValueCollection;
struct IHttpContentCodingWithQualityHeaderValueStatics;
struct IHttpContentCodingWithQualityHeaderValueFactory;
struct IHttpContentCodingWithQualityHeaderValue;
struct IHttpContentCodingWithQualityHeaderValueCollection;
struct IHttpTransferCodingHeaderValueStatics;
struct IHttpTransferCodingHeaderValueFactory;
struct IHttpTransferCodingHeaderValue;
struct IHttpTransferCodingHeaderValueCollection;
struct HttpContentHeaderCollection;
struct HttpRequestHeaderCollection;
struct HttpResponseHeaderCollection;
struct HttpContentDispositionHeaderValue;
struct HttpContentCodingHeaderValueCollection;
struct HttpLanguageHeaderValueCollection;
struct HttpContentRangeHeaderValue;
struct HttpMediaTypeHeaderValue;
struct HttpMediaTypeWithQualityHeaderValueCollection;
struct HttpContentCodingWithQualityHeaderValueCollection;
struct HttpLanguageRangeWithQualityHeaderValueCollection;
struct HttpCredentialsHeaderValue;
struct HttpCacheDirectiveHeaderValueCollection;
struct HttpConnectionOptionHeaderValueCollection;
struct HttpCookiePairHeaderValueCollection;
struct HttpExpectationHeaderValueCollection;
struct HttpTransferCodingHeaderValueCollection;
struct HttpProductInfoHeaderValueCollection;
struct HttpMethodHeaderValueCollection;
struct HttpChallengeHeaderValueCollection;
struct HttpDateOrDeltaHeaderValue;
struct HttpNameValueHeaderValue;
struct HttpChallengeHeaderValue;
struct HttpConnectionOptionHeaderValue;
struct HttpContentCodingHeaderValue;
struct HttpCookiePairHeaderValue;
struct HttpExpectationHeaderValue;
struct HttpLanguageRangeWithQualityHeaderValue;
struct HttpMediaTypeWithQualityHeaderValue;
struct HttpProductHeaderValue;
struct HttpProductInfoHeaderValue;
struct HttpContentCodingWithQualityHeaderValue;
struct HttpTransferCodingHeaderValue;

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel {

template <typename T>
class impl_IAppDisplayInfo
{
	auto shim() const { return impl::shim<T, IAppDisplayInfo>(this); }

public:

	hstring DisplayName() const;
	hstring Description() const;
	Windows::Storage::Streams::RandomAccessStreamReference GetLogo(Windows::Foundation::Size const & size) const;
};

template <typename T>
class impl_IAppInfo
{
	auto shim() const { return impl::shim<T, IAppInfo>(this); }

public:

	hstring Id() const;
	hstring AppUserModelId() const;
	Windows::ApplicationModel::AppDisplayInfo DisplayInfo() const;
	hstring PackageFamilyName() const;
};

template <typename T>
class impl_ISuspendingDeferral
{
	auto shim() const { return impl::shim<T, ISuspendingDeferral>(this); }

public:

	void Complete() const;
};

template <typename T>
class impl_ISuspendingOperation
{
	auto shim() const { return impl::shim<T, ISuspendingOperation>(this); }

public:

	Windows::ApplicationModel::SuspendingDeferral GetDeferral() const;
	Windows::Foundation::DateTime Deadline() const;
};

template <typename T>
class impl_ISuspendingEventArgs
{
	auto shim() const { return impl::shim<T, ISuspendingEventArgs>(this); }

public:

	Windows::ApplicationModel::SuspendingOperation SuspendingOperation() const;
};

template <typename T>
class impl_IPackageIdWithMetadata
{
	auto shim() const { return impl::shim<T, IPackageIdWithMetadata>(this); }

public:

	hstring ProductId() const;
	hstring Author() const;
};

template <typename T>
class impl_IPackageWithMetadata
{
	auto shim() const { return impl::shim<T, IPackageWithMetadata>(this); }

public:

	Windows::Foundation::DateTime InstallDate() const;
	hstring GetThumbnailToken() const;
	void Launch(hstring_ref parameters) const;
};

template <typename T>
class impl_IPackageStatus
{
	auto shim() const { return impl::shim<T, IPackageStatus>(this); }

public:

	bool VerifyIsOK() const;
	bool NotAvailable() const;
	bool PackageOffline() const;
	bool DataOffline() const;
	bool Disabled() const;
	bool NeedsRemediation() const;
	bool LicenseIssue() const;
	bool Modified() const;
	bool Tampered() const;
	bool DependencyIssue() const;
	bool Servicing() const;
	bool DeploymentInProgress() const;
};

template <typename T>
class impl_IPackageId
{
	auto shim() const { return impl::shim<T, IPackageId>(this); }

public:

	hstring Name() const;
	Windows::ApplicationModel::PackageVersion Version() const;
	Windows::System::ProcessorArchitecture Architecture() const;
	hstring ResourceId() const;
	hstring Publisher() const;
	hstring PublisherId() const;
	hstring FullName() const;
	hstring FamilyName() const;
};

template <typename T>
class impl_IPackage
{
	auto shim() const { return impl::shim<T, IPackage>(this); }

public:

	Windows::ApplicationModel::PackageId Id() const;
	Windows::Storage::StorageFolder InstalledLocation() const;
	bool IsFramework() const;
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Package> Dependencies() const;
};

template <typename T>
class impl_IPackage2
{
	auto shim() const { return impl::shim<T, IPackage2>(this); }

public:

	hstring DisplayName() const;
	hstring PublisherDisplayName() const;
	hstring Description() const;
	Windows::Foundation::Uri Logo() const;
	bool IsResourcePackage() const;
	bool IsBundle() const;
	bool IsDevelopmentMode() const;
};

template <typename T>
class impl_IPackage3
{
	auto shim() const { return impl::shim<T, IPackage3>(this); }

public:

	Windows::ApplicationModel::PackageStatus Status() const;
	Windows::Foundation::DateTime InstalledDate() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::AppListEntry>> GetAppListEntriesAsync() const;
};

template <typename T>
class impl_IPackageStatics
{
	auto shim() const { return impl::shim<T, IPackageStatics>(this); }

public:

	Windows::ApplicationModel::Package Current() const;
};

template <typename T>
class impl_IDesignModeStatics
{
	auto shim() const { return impl::shim<T, IDesignModeStatics>(this); }

public:

	bool DesignModeEnabled() const;
};

}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Activation {

template <typename T>
class impl_ISplashScreen
{
	auto shim() const { return impl::shim<T, ISplashScreen>(this); }

public:

	Windows::Foundation::Rect ImageLocation() const;
	long long Dismissed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen, IInspectable> const & handler) const;
	template <typename F> long long Dismissed(F handler) const;
	void Dismissed(long long cookie) const;
};

template <typename T>
class impl_IActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IActivatedEventArgs>(this); }

public:

	Windows::ApplicationModel::Activation::ActivationKind Kind() const;
	Windows::ApplicationModel::Activation::ApplicationExecutionState PreviousExecutionState() const;
	Windows::ApplicationModel::Activation::SplashScreen SplashScreen() const;
};

template <typename T>
class impl_IApplicationViewActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IApplicationViewActivatedEventArgs>(this); }

public:

	int CurrentlyShownApplicationViewId() const;
};

template <typename T>
class impl_IViewSwitcherProvider
{
	auto shim() const { return impl::shim<T, IViewSwitcherProvider>(this); }

public:

	Windows::UI::ViewManagement::ActivationViewSwitcher ViewSwitcher() const;
};

template <typename T>
class impl_IPrelaunchActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IPrelaunchActivatedEventArgs>(this); }

public:

	bool PrelaunchActivated() const;
};

template <typename T>
class impl_ILaunchActivatedEventArgs
{
	auto shim() const { return impl::shim<T, ILaunchActivatedEventArgs>(this); }

public:

	hstring Arguments() const;
	hstring TileId() const;
};

template <typename T>
class impl_ISearchActivatedEventArgs
{
	auto shim() const { return impl::shim<T, ISearchActivatedEventArgs>(this); }

public:

	hstring QueryText() const;
	hstring Language() const;
};

template <typename T>
class impl_ISearchActivatedEventArgsWithLinguisticDetails
{
	auto shim() const { return impl::shim<T, ISearchActivatedEventArgsWithLinguisticDetails>(this); }

public:

	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails LinguisticDetails() const;
};

template <typename T>
class impl_IShareTargetActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IShareTargetActivatedEventArgs>(this); }

public:

	Windows::ApplicationModel::DataTransfer::ShareTarget::ShareOperation ShareOperation() const;
};

template <typename T>
class impl_IFileActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IFileActivatedEventArgs>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem> Files() const;
	hstring Verb() const;
};

template <typename T>
class impl_IFileActivatedEventArgsWithNeighboringFiles
{
	auto shim() const { return impl::shim<T, IFileActivatedEventArgsWithNeighboringFiles>(this); }

public:

	Windows::Storage::Search::StorageFileQueryResult NeighboringFilesQuery() const;
};

template <typename T>
class impl_IFileActivatedEventArgsWithCallerPackageFamilyName
{
	auto shim() const { return impl::shim<T, IFileActivatedEventArgsWithCallerPackageFamilyName>(this); }

public:

	hstring CallerPackageFamilyName() const;
};

template <typename T>
class impl_IProtocolActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IProtocolActivatedEventArgs>(this); }

public:

	Windows::Foundation::Uri Uri() const;
};

template <typename T>
class impl_IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData
{
	auto shim() const { return impl::shim<T, IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData>(this); }

public:

	hstring CallerPackageFamilyName() const;
	Windows::Foundation::Collections::ValueSet Data() const;
};

template <typename T>
class impl_IProtocolForResultsActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IProtocolForResultsActivatedEventArgs>(this); }

public:

	Windows::System::ProtocolForResultsOperation ProtocolForResultsOperation() const;
};

template <typename T>
class impl_IFileOpenPickerActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IFileOpenPickerActivatedEventArgs>(this); }

public:

	Windows::Storage::Pickers::Provider::FileOpenPickerUI FileOpenPickerUI() const;
};

template <typename T>
class impl_IFileOpenPickerActivatedEventArgs2
{
	auto shim() const { return impl::shim<T, IFileOpenPickerActivatedEventArgs2>(this); }

public:

	hstring CallerPackageFamilyName() const;
};

template <typename T>
class impl_IFileSavePickerActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IFileSavePickerActivatedEventArgs>(this); }

public:

	Windows::Storage::Pickers::Provider::FileSavePickerUI FileSavePickerUI() const;
};

template <typename T>
class impl_IFileSavePickerActivatedEventArgs2
{
	auto shim() const { return impl::shim<T, IFileSavePickerActivatedEventArgs2>(this); }

public:

	hstring CallerPackageFamilyName() const;
	hstring EnterpriseId() const;
};

template <typename T>
class impl_ICachedFileUpdaterActivatedEventArgs
{
	auto shim() const { return impl::shim<T, ICachedFileUpdaterActivatedEventArgs>(this); }

public:

	Windows::Storage::Provider::CachedFileUpdaterUI CachedFileUpdaterUI() const;
};

template <typename T>
class impl_IContactPickerActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IContactPickerActivatedEventArgs>(this); }

public:

	Windows::ApplicationModel::Contacts::Provider::ContactPickerUI ContactPickerUI() const;
};

template <typename T>
class impl_IDeviceActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IDeviceActivatedEventArgs>(this); }

public:

	hstring DeviceInformationId() const;
	hstring Verb() const;
};

template <typename T>
class impl_IPrintTaskSettingsActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IPrintTaskSettingsActivatedEventArgs>(this); }

public:

	Windows::Devices::Printers::Extensions::PrintTaskConfiguration Configuration() const;
};

template <typename T>
class impl_IPrint3DWorkflowActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IPrint3DWorkflowActivatedEventArgs>(this); }

public:

	Windows::Devices::Printers::Extensions::Print3DWorkflow Workflow() const;
};

template <typename T>
class impl_ICameraSettingsActivatedEventArgs
{
	auto shim() const { return impl::shim<T, ICameraSettingsActivatedEventArgs>(this); }

public:

	IInspectable VideoDeviceController() const;
	IInspectable VideoDeviceExtension() const;
};

template <typename T>
class impl_IAppointmentsProviderActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IAppointmentsProviderActivatedEventArgs>(this); }

public:

	hstring Verb() const;
};

template <typename T>
class impl_IAppointmentsProviderAddAppointmentActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IAppointmentsProviderAddAppointmentActivatedEventArgs>(this); }

public:

	Windows::ApplicationModel::Appointments::AppointmentsProvider::AddAppointmentOperation AddAppointmentOperation() const;
};

template <typename T>
class impl_IAppointmentsProviderReplaceAppointmentActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IAppointmentsProviderReplaceAppointmentActivatedEventArgs>(this); }

public:

	Windows::ApplicationModel::Appointments::AppointmentsProvider::ReplaceAppointmentOperation ReplaceAppointmentOperation() const;
};

template <typename T>
class impl_IAppointmentsProviderRemoveAppointmentActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IAppointmentsProviderRemoveAppointmentActivatedEventArgs>(this); }

public:

	Windows::ApplicationModel::Appointments::AppointmentsProvider::RemoveAppointmentOperation RemoveAppointmentOperation() const;
};

template <typename T>
class impl_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs>(this); }

public:

	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> InstanceStartDate() const;
	hstring LocalId() const;
	hstring RoamingId() const;
};

template <typename T>
class impl_IAppointmentsProviderShowTimeFrameActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IAppointmentsProviderShowTimeFrameActivatedEventArgs>(this); }

public:

	Windows::Foundation::DateTime TimeToShow() const;
	Windows::Foundation::TimeSpan Duration() const;
};

template <typename T>
class impl_IContactActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IContactActivatedEventArgs>(this); }

public:

	hstring Verb() const;
};

template <typename T>
class impl_IContactCallActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IContactCallActivatedEventArgs>(this); }

public:

	hstring ServiceId() const;
	hstring ServiceUserId() const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
};

template <typename T>
class impl_IContactMessageActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IContactMessageActivatedEventArgs>(this); }

public:

	hstring ServiceId() const;
	hstring ServiceUserId() const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
};

template <typename T>
class impl_IContactMapActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IContactMapActivatedEventArgs>(this); }

public:

	Windows::ApplicationModel::Contacts::ContactAddress Address() const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
};

template <typename T>
class impl_IContactPostActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IContactPostActivatedEventArgs>(this); }

public:

	hstring ServiceId() const;
	hstring ServiceUserId() const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
};

template <typename T>
class impl_IContactVideoCallActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IContactVideoCallActivatedEventArgs>(this); }

public:

	hstring ServiceId() const;
	hstring ServiceUserId() const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
};

template <typename T>
class impl_IContactsProviderActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IContactsProviderActivatedEventArgs>(this); }

public:

	hstring Verb() const;
};

template <typename T>
class impl_IRestrictedLaunchActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IRestrictedLaunchActivatedEventArgs>(this); }

public:

	IInspectable SharedContext() const;
};

template <typename T>
class impl_ILockScreenCallActivatedEventArgs
{
	auto shim() const { return impl::shim<T, ILockScreenCallActivatedEventArgs>(this); }

public:

	Windows::ApplicationModel::Calls::LockScreenCallUI CallUI() const;
};

template <typename T>
class impl_ILockScreenActivatedEventArgs
{
	auto shim() const { return impl::shim<T, ILockScreenActivatedEventArgs>(this); }

public:

	IInspectable Info() const;
};

template <typename T>
class impl_IContinuationActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IContinuationActivatedEventArgs>(this); }

public:

	Windows::Foundation::Collections::ValueSet ContinuationData() const;
};

template <typename T>
class impl_IFileOpenPickerContinuationEventArgs
{
	auto shim() const { return impl::shim<T, IFileOpenPickerContinuationEventArgs>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile> Files() const;
};

template <typename T>
class impl_IFileSavePickerContinuationEventArgs
{
	auto shim() const { return impl::shim<T, IFileSavePickerContinuationEventArgs>(this); }

public:

	Windows::Storage::StorageFile File() const;
};

template <typename T>
class impl_IFolderPickerContinuationEventArgs
{
	auto shim() const { return impl::shim<T, IFolderPickerContinuationEventArgs>(this); }

public:

	Windows::Storage::StorageFolder Folder() const;
};

template <typename T>
class impl_IWebAccountProviderActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IWebAccountProviderActivatedEventArgs>(this); }

public:

	Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation Operation() const;
};

template <typename T>
class impl_IToastNotificationActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IToastNotificationActivatedEventArgs>(this); }

public:

	hstring Argument() const;
	Windows::Foundation::Collections::ValueSet UserInput() const;
};

template <typename T>
class impl_IDialReceiverActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IDialReceiverActivatedEventArgs>(this); }

public:

	hstring AppName() const;
};

template <typename T>
class impl_IDevicePairingActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IDevicePairingActivatedEventArgs>(this); }

public:

	Windows::Devices::Enumeration::DeviceInformation DeviceInformation() const;
};

template <typename T>
class impl_IVoiceCommandActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IVoiceCommandActivatedEventArgs>(this); }

public:

	Windows::Media::SpeechRecognition::SpeechRecognitionResult Result() const;
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Appointments {

template <typename T>
class impl_IAppointmentManagerStatics
{
	auto shim() const { return impl::shim<T, IAppointmentManagerStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<hstring> ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<hstring> ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	Windows::Foundation::IAsyncOperation<hstring> ShowReplaceAppointmentAsync(hstring_ref appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<hstring> ShowReplaceAppointmentAsync(hstring_ref appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	Windows::Foundation::IAsyncOperation<hstring> ShowReplaceAppointmentAsync(hstring_ref appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const;
	Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(hstring_ref appointmentId, Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(hstring_ref appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(hstring_ref appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const;
	Windows::Foundation::IAsyncAction ShowTimeFrameAsync(Windows::Foundation::DateTime const & timeToShow, Windows::Foundation::TimeSpan const & duration) const;
};

template <typename T>
class impl_IAppointmentManagerStatics2
{
	auto shim() const { return impl::shim<T, IAppointmentManagerStatics2>(this); }

public:

	Windows::Foundation::IAsyncAction ShowAppointmentDetailsAsync(hstring_ref appointmentId) const;
	Windows::Foundation::IAsyncAction ShowAppointmentDetailsAsync(hstring_ref appointmentId, Windows::Foundation::DateTime const & instanceStartDate) const;
	Windows::Foundation::IAsyncOperation<hstring> ShowEditNewAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentStore> RequestStoreAsync(Windows::ApplicationModel::Appointments::AppointmentStoreAccessType options) const;
};

template <typename T>
class impl_IAppointmentParticipant
{
	auto shim() const { return impl::shim<T, IAppointmentParticipant>(this); }

public:

	hstring DisplayName() const;
	void DisplayName(hstring_ref value) const;
	hstring Address() const;
	void Address(hstring_ref value) const;
};

template <typename T>
class impl_IAppointmentInvitee
{
	auto shim() const { return impl::shim<T, IAppointmentInvitee>(this); }

public:

	Windows::ApplicationModel::Appointments::AppointmentParticipantRole Role() const;
	void Role(Windows::ApplicationModel::Appointments::AppointmentParticipantRole value) const;
	Windows::ApplicationModel::Appointments::AppointmentParticipantResponse Response() const;
	void Response(Windows::ApplicationModel::Appointments::AppointmentParticipantResponse value) const;
};

template <typename T>
class impl_IAppointmentRecurrence
{
	auto shim() const { return impl::shim<T, IAppointmentRecurrence>(this); }

public:

	Windows::ApplicationModel::Appointments::AppointmentRecurrenceUnit Unit() const;
	void Unit(Windows::ApplicationModel::Appointments::AppointmentRecurrenceUnit value) const;
	Windows::Foundation::IReference<unsigned> Occurrences() const;
	void Occurrences(Windows::Foundation::IReference<unsigned> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> Until() const;
	void Until(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const;
	unsigned Interval() const;
	void Interval(unsigned value) const;
	Windows::ApplicationModel::Appointments::AppointmentDaysOfWeek DaysOfWeek() const;
	void DaysOfWeek(Windows::ApplicationModel::Appointments::AppointmentDaysOfWeek value) const;
	Windows::ApplicationModel::Appointments::AppointmentWeekOfMonth WeekOfMonth() const;
	void WeekOfMonth(Windows::ApplicationModel::Appointments::AppointmentWeekOfMonth value) const;
	unsigned Month() const;
	void Month(unsigned value) const;
	unsigned Day() const;
	void Day(unsigned value) const;
};

template <typename T>
class impl_IAppointmentRecurrence2
{
	auto shim() const { return impl::shim<T, IAppointmentRecurrence2>(this); }

public:

	Windows::ApplicationModel::Appointments::RecurrenceType RecurrenceType() const;
	hstring TimeZone() const;
	void TimeZone(hstring_ref value) const;
};

template <typename T>
class impl_IAppointmentRecurrence3
{
	auto shim() const { return impl::shim<T, IAppointmentRecurrence3>(this); }

public:

	hstring CalendarIdentifier() const;
};

template <typename T>
class impl_IAppointment
{
	auto shim() const { return impl::shim<T, IAppointment>(this); }

public:

	Windows::Foundation::DateTime StartTime() const;
	void StartTime(Windows::Foundation::DateTime const & value) const;
	Windows::Foundation::TimeSpan Duration() const;
	void Duration(Windows::Foundation::TimeSpan const & value) const;
	hstring Location() const;
	void Location(hstring_ref value) const;
	hstring Subject() const;
	void Subject(hstring_ref value) const;
	hstring Details() const;
	void Details(hstring_ref value) const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> Reminder() const;
	void Reminder(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const;
	Windows::ApplicationModel::Appointments::AppointmentOrganizer Organizer() const;
	void Organizer(Windows::ApplicationModel::Appointments::AppointmentOrganizer const & value) const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Appointments::AppointmentInvitee> Invitees() const;
	Windows::ApplicationModel::Appointments::AppointmentRecurrence Recurrence() const;
	void Recurrence(Windows::ApplicationModel::Appointments::AppointmentRecurrence const & value) const;
	Windows::ApplicationModel::Appointments::AppointmentBusyStatus BusyStatus() const;
	void BusyStatus(Windows::ApplicationModel::Appointments::AppointmentBusyStatus value) const;
	bool AllDay() const;
	void AllDay(bool value) const;
	Windows::ApplicationModel::Appointments::AppointmentSensitivity Sensitivity() const;
	void Sensitivity(Windows::ApplicationModel::Appointments::AppointmentSensitivity value) const;
	Windows::Foundation::Uri Uri() const;
	void Uri(Windows::Foundation::Uri const & value) const;
};

template <typename T>
class impl_IAppointment2
{
	auto shim() const { return impl::shim<T, IAppointment2>(this); }

public:

	hstring LocalId() const;
	hstring CalendarId() const;
	hstring RoamingId() const;
	void RoamingId(hstring_ref value) const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> OriginalStartTime() const;
	bool IsResponseRequested() const;
	void IsResponseRequested(bool value) const;
	bool AllowNewTimeProposal() const;
	void AllowNewTimeProposal(bool value) const;
	hstring OnlineMeetingLink() const;
	void OnlineMeetingLink(hstring_ref value) const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> ReplyTime() const;
	void ReplyTime(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const;
	Windows::ApplicationModel::Appointments::AppointmentParticipantResponse UserResponse() const;
	void UserResponse(Windows::ApplicationModel::Appointments::AppointmentParticipantResponse value) const;
	bool HasInvitees() const;
	bool IsCanceledMeeting() const;
	void IsCanceledMeeting(bool value) const;
	bool IsOrganizedByUser() const;
	void IsOrganizedByUser(bool value) const;
};

template <typename T>
class impl_IAppointment3
{
	auto shim() const { return impl::shim<T, IAppointment3>(this); }

public:

	unsigned long long ChangeNumber() const;
	unsigned long long RemoteChangeNumber() const;
	void RemoteChangeNumber(unsigned long long value) const;
	Windows::ApplicationModel::Appointments::AppointmentDetailsKind DetailsKind() const;
	void DetailsKind(Windows::ApplicationModel::Appointments::AppointmentDetailsKind value) const;
};

template <typename T>
class impl_IFindAppointmentsOptions
{
	auto shim() const { return impl::shim<T, IFindAppointmentsOptions>(this); }

public:

	Windows::Foundation::Collections::IVector<hstring> CalendarIds() const;
	Windows::Foundation::Collections::IVector<hstring> FetchProperties() const;
	bool IncludeHidden() const;
	void IncludeHidden(bool value) const;
	unsigned MaxCount() const;
	void MaxCount(unsigned value) const;
};

template <typename T>
class impl_IAppointmentCalendar
{
	auto shim() const { return impl::shim<T, IAppointmentCalendar>(this); }

public:

	Windows::UI::Color DisplayColor() const;
	hstring DisplayName() const;
	void DisplayName(hstring_ref value) const;
	hstring LocalId() const;
	bool IsHidden() const;
	Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppReadAccess OtherAppReadAccess() const;
	void OtherAppReadAccess(Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppReadAccess value) const;
	Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppWriteAccess OtherAppWriteAccess() const;
	void OtherAppWriteAccess(Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppWriteAccess value) const;
	hstring SourceDisplayName() const;
	Windows::ApplicationModel::Appointments::AppointmentSummaryCardView SummaryCardView() const;
	void SummaryCardView(Windows::ApplicationModel::Appointments::AppointmentSummaryCardView value) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> FindAppointmentsAsync(Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> FindAppointmentsAsync(Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength, Windows::ApplicationModel::Appointments::FindAppointmentsOptions const & options) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentException>> FindExceptionsFromMasterAsync(hstring_ref masterLocalId) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> FindAllInstancesAsync(hstring_ref masterLocalId, Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> FindAllInstancesAsync(hstring_ref masterLocalId, Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength, Windows::ApplicationModel::Appointments::FindAppointmentsOptions const & pOptions) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> GetAppointmentAsync(hstring_ref localId) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> GetAppointmentInstanceAsync(hstring_ref localId, Windows::Foundation::DateTime const & instanceStartTime) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> FindUnexpandedAppointmentsAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> FindUnexpandedAppointmentsAsync(Windows::ApplicationModel::Appointments::FindAppointmentsOptions const & options) const;
	Windows::Foundation::IAsyncAction DeleteAsync() const;
	Windows::Foundation::IAsyncAction SaveAsync() const;
	Windows::Foundation::IAsyncAction DeleteAppointmentAsync(hstring_ref localId) const;
	Windows::Foundation::IAsyncAction DeleteAppointmentInstanceAsync(hstring_ref localId, Windows::Foundation::DateTime const & instanceStartTime) const;
	Windows::Foundation::IAsyncAction SaveAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & pAppointment) const;
};

template <typename T>
class impl_IAppointmentCalendar2
{
	auto shim() const { return impl::shim<T, IAppointmentCalendar2>(this); }

public:

	Windows::ApplicationModel::Appointments::AppointmentCalendarSyncManager SyncManager() const;
	hstring RemoteId() const;
	void RemoteId(hstring_ref value) const;
	void DisplayColor(Windows::UI::Color const & value) const;
	void IsHidden(bool value) const;
	hstring UserDataAccountId() const;
	bool CanCreateOrUpdateAppointments() const;
	void CanCreateOrUpdateAppointments(bool value) const;
	bool CanCancelMeetings() const;
	void CanCancelMeetings(bool value) const;
	bool CanForwardMeetings() const;
	void CanForwardMeetings(bool value) const;
	bool CanProposeNewTimeForMeetings() const;
	void CanProposeNewTimeForMeetings(bool value) const;
	bool CanUpdateMeetingResponses() const;
	void CanUpdateMeetingResponses(bool value) const;
	bool CanNotifyInvitees() const;
	void CanNotifyInvitees(bool value) const;
	bool MustNofityInvitees() const;
	void MustNofityInvitees(bool value) const;
	Windows::Foundation::IAsyncOperation<bool> TryCreateOrUpdateAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, bool notifyInvitees) const;
	Windows::Foundation::IAsyncOperation<bool> TryCancelMeetingAsync(Windows::ApplicationModel::Appointments::Appointment const & meeting, hstring_ref subject, hstring_ref comment, bool notifyInvitees) const;
	Windows::Foundation::IAsyncOperation<bool> TryForwardMeetingAsync(Windows::ApplicationModel::Appointments::Appointment const & meeting, Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Appointments::AppointmentInvitee> const & invitees, hstring_ref subject, hstring_ref forwardHeader, hstring_ref comment) const;
	Windows::Foundation::IAsyncOperation<bool> TryProposeNewTimeForMeetingAsync(Windows::ApplicationModel::Appointments::Appointment const & meeting, Windows::Foundation::DateTime const & newStartTime, Windows::Foundation::TimeSpan const & newDuration, hstring_ref subject, hstring_ref comment) const;
	Windows::Foundation::IAsyncOperation<bool> TryUpdateMeetingResponseAsync(Windows::ApplicationModel::Appointments::Appointment const & meeting, Windows::ApplicationModel::Appointments::AppointmentParticipantResponse response, hstring_ref subject, hstring_ref comment, bool sendUpdate) const;
};

template <typename T>
class impl_IAppointmentCalendarSyncManager
{
	auto shim() const { return impl::shim<T, IAppointmentCalendarSyncManager>(this); }

public:

	Windows::ApplicationModel::Appointments::AppointmentCalendarSyncStatus Status() const;
	Windows::Foundation::DateTime LastSuccessfulSyncTime() const;
	Windows::Foundation::DateTime LastAttemptedSyncTime() const;
	Windows::Foundation::IAsyncOperation<bool> SyncAsync() const;
	long long SyncStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Appointments::AppointmentCalendarSyncManager, IInspectable> const & handler) const;
	template <typename F> long long SyncStatusChanged(F handler) const;
	void SyncStatusChanged(long long token) const;
};

template <typename T>
class impl_IAppointmentPropertiesStatics
{
	auto shim() const { return impl::shim<T, IAppointmentPropertiesStatics>(this); }

public:

	hstring Subject() const;
	hstring Location() const;
	hstring StartTime() const;
	hstring Duration() const;
	hstring Reminder() const;
	hstring BusyStatus() const;
	hstring Sensitivity() const;
	hstring OriginalStartTime() const;
	hstring IsResponseRequested() const;
	hstring AllowNewTimeProposal() const;
	hstring AllDay() const;
	hstring Details() const;
	hstring OnlineMeetingLink() const;
	hstring ReplyTime() const;
	hstring Organizer() const;
	hstring UserResponse() const;
	hstring HasInvitees() const;
	hstring IsCanceledMeeting() const;
	hstring IsOrganizedByUser() const;
	hstring Recurrence() const;
	hstring Uri() const;
	hstring Invitees() const;
	Windows::Foundation::Collections::IVector<hstring> DefaultProperties() const;
};

template <typename T>
class impl_IAppointmentPropertiesStatics2
{
	auto shim() const { return impl::shim<T, IAppointmentPropertiesStatics2>(this); }

public:

	hstring ChangeNumber() const;
	hstring RemoteChangeNumber() const;
	hstring DetailsKind() const;
};

template <typename T>
class impl_IAppointmentConflictResult
{
	auto shim() const { return impl::shim<T, IAppointmentConflictResult>(this); }

public:

	Windows::ApplicationModel::Appointments::AppointmentConflictType Type() const;
	Windows::Foundation::DateTime Date() const;
};

template <typename T>
class impl_IAppointmentStoreChange
{
	auto shim() const { return impl::shim<T, IAppointmentStoreChange>(this); }

public:

	Windows::ApplicationModel::Appointments::Appointment Appointment() const;
	Windows::ApplicationModel::Appointments::AppointmentStoreChangeType ChangeType() const;
};

template <typename T>
class impl_IAppointmentStoreChange2
{
	auto shim() const { return impl::shim<T, IAppointmentStoreChange2>(this); }

public:

	Windows::ApplicationModel::Appointments::AppointmentCalendar AppointmentCalendar() const;
};

template <typename T>
class impl_IAppointmentStoreChangeReader
{
	auto shim() const { return impl::shim<T, IAppointmentStoreChangeReader>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentStoreChange>> ReadBatchAsync() const;
	void AcceptChanges() const;
	void AcceptChangesThrough(Windows::ApplicationModel::Appointments::AppointmentStoreChange const & lastChangeToAccept) const;
};

template <typename T>
class impl_IAppointmentStoreChangeTracker
{
	auto shim() const { return impl::shim<T, IAppointmentStoreChangeTracker>(this); }

public:

	Windows::ApplicationModel::Appointments::AppointmentStoreChangeReader GetChangeReader() const;
	void Enable() const;
	void Reset() const;
};

template <typename T>
class impl_IAppointmentStoreChangedEventArgs
{
	auto shim() const { return impl::shim<T, IAppointmentStoreChangedEventArgs>(this); }

public:

	Windows::ApplicationModel::Appointments::AppointmentStoreChangedDeferral GetDeferral() const;
};

template <typename T>
class impl_IAppointmentStoreChangedDeferral
{
	auto shim() const { return impl::shim<T, IAppointmentStoreChangedDeferral>(this); }

public:

	void Complete() const;
};

template <typename T>
class impl_IAppointmentStoreNotificationTriggerDetails
{
	auto shim() const { return impl::shim<T, IAppointmentStoreNotificationTriggerDetails>(this); }

public:

};

template <typename T>
class impl_IAppointmentStore
{
	auto shim() const { return impl::shim<T, IAppointmentStore>(this); }

public:

	Windows::ApplicationModel::Appointments::AppointmentStoreChangeTracker ChangeTracker() const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentCalendar> CreateAppointmentCalendarAsync(hstring_ref name) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentCalendar> GetAppointmentCalendarAsync(hstring_ref calendarId) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> GetAppointmentAsync(hstring_ref localId) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> GetAppointmentInstanceAsync(hstring_ref localId, Windows::Foundation::DateTime const & instanceStartTime) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentCalendar>> FindAppointmentCalendarsAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentCalendar>> FindAppointmentCalendarsAsync(Windows::ApplicationModel::Appointments::FindAppointmentCalendarsOptions options) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> FindAppointmentsAsync(Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> FindAppointmentsAsync(Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength, Windows::ApplicationModel::Appointments::FindAppointmentsOptions const & options) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentConflictResult> FindConflictAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentConflictResult> FindConflictAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::DateTime const & instanceStartTime) const;
	Windows::Foundation::IAsyncAction MoveAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::ApplicationModel::Appointments::AppointmentCalendar const & destinationCalendar) const;
	Windows::Foundation::IAsyncOperation<hstring> ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<hstring> ShowReplaceAppointmentAsync(hstring_ref localId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<hstring> ShowReplaceAppointmentAsync(hstring_ref localId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const;
	Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(hstring_ref localId, Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(hstring_ref localId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const;
	Windows::Foundation::IAsyncAction ShowAppointmentDetailsAsync(hstring_ref localId) const;
	Windows::Foundation::IAsyncAction ShowAppointmentDetailsAsync(hstring_ref localId, Windows::Foundation::DateTime const & instanceStartDate) const;
	Windows::Foundation::IAsyncOperation<hstring> ShowEditNewAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> FindLocalIdsFromRoamingIdAsync(hstring_ref roamingId) const;
};

template <typename T>
class impl_IAppointmentStore2
{
	auto shim() const { return impl::shim<T, IAppointmentStore2>(this); }

public:

	long long StoreChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Appointments::AppointmentStore, Windows::ApplicationModel::Appointments::AppointmentStoreChangedEventArgs> const & pHandler) const;
	template <typename F> long long StoreChanged(F pHandler) const;
	void StoreChanged(long long token) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentCalendar> CreateAppointmentCalendarAsync(hstring_ref name, hstring_ref userDataAccountId) const;
};

template <typename T>
class impl_IAppointmentException
{
	auto shim() const { return impl::shim<T, IAppointmentException>(this); }

public:

	Windows::ApplicationModel::Appointments::Appointment Appointment() const;
	Windows::Foundation::Collections::IVectorView<hstring> ExceptionProperties() const;
	bool IsDeleted() const;
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

template <typename T>
class impl_IAppointmentsProviderLaunchActionVerbsStatics
{
	auto shim() const { return impl::shim<T, IAppointmentsProviderLaunchActionVerbsStatics>(this); }

public:

	hstring AddAppointment() const;
	hstring ReplaceAppointment() const;
	hstring RemoveAppointment() const;
	hstring ShowTimeFrame() const;
};

template <typename T>
class impl_IAppointmentsProviderLaunchActionVerbsStatics2
{
	auto shim() const { return impl::shim<T, IAppointmentsProviderLaunchActionVerbsStatics2>(this); }

public:

	hstring ShowAppointmentDetails() const;
};

template <typename T>
class impl_IAddAppointmentOperation
{
	auto shim() const { return impl::shim<T, IAddAppointmentOperation>(this); }

public:

	Windows::ApplicationModel::Appointments::Appointment AppointmentInformation() const;
	hstring SourcePackageFamilyName() const;
	void ReportCompleted(hstring_ref itemId) const;
	void ReportCanceled() const;
	void ReportError(hstring_ref value) const;
	void DismissUI() const;
};

template <typename T>
class impl_IReplaceAppointmentOperation
{
	auto shim() const { return impl::shim<T, IReplaceAppointmentOperation>(this); }

public:

	hstring AppointmentId() const;
	Windows::ApplicationModel::Appointments::Appointment AppointmentInformation() const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> InstanceStartDate() const;
	hstring SourcePackageFamilyName() const;
	void ReportCompleted(hstring_ref itemId) const;
	void ReportCanceled() const;
	void ReportError(hstring_ref value) const;
	void DismissUI() const;
};

template <typename T>
class impl_IRemoveAppointmentOperation
{
	auto shim() const { return impl::shim<T, IRemoveAppointmentOperation>(this); }

public:

	hstring AppointmentId() const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> InstanceStartDate() const;
	hstring SourcePackageFamilyName() const;
	void ReportCompleted() const;
	void ReportCanceled() const;
	void ReportError(hstring_ref value) const;
	void DismissUI() const;
};

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Background {

template <typename T>
class impl_IBackgroundTaskCanceledEventHandler
{
	auto shim() const { return impl::shim<T, IBackgroundTaskCanceledEventHandler>(this); }

public:

	void Invoke(Windows::ApplicationModel::Background::IBackgroundTaskInstance const & sender, Windows::ApplicationModel::Background::BackgroundTaskCancellationReason reason) const;
};

template <typename T>
class impl_IBackgroundTaskProgressEventHandler
{
	auto shim() const { return impl::shim<T, IBackgroundTaskProgressEventHandler>(this); }

public:

	void Invoke(Windows::ApplicationModel::Background::BackgroundTaskRegistration const & sender, Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs const & args) const;
};

template <typename T>
class impl_IBackgroundTaskCompletedEventHandler
{
	auto shim() const { return impl::shim<T, IBackgroundTaskCompletedEventHandler>(this); }

public:

	void Invoke(Windows::ApplicationModel::Background::BackgroundTaskRegistration const & sender, Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs const & args) const;
};

template <typename T>
class impl_IAlarmApplicationManagerStatics
{
	auto shim() const { return impl::shim<T, IAlarmApplicationManagerStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::AlarmAccessStatus> RequestAccessAsync() const;
	Windows::ApplicationModel::Background::AlarmAccessStatus GetAccessStatus() const;
};

template <typename T>
class impl_IApplicationTriggerDetails
{
	auto shim() const { return impl::shim<T, IApplicationTriggerDetails>(this); }

public:

	Windows::Foundation::Collections::ValueSet Arguments() const;
};

template <typename T>
class impl_IBackgroundExecutionManagerStatics
{
	auto shim() const { return impl::shim<T, IBackgroundExecutionManagerStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::BackgroundAccessStatus> RequestAccessAsync() const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::BackgroundAccessStatus> RequestAccessAsync(hstring_ref applicationId) const;
	void RemoveAccess() const;
	void RemoveAccess(hstring_ref applicationId) const;
	Windows::ApplicationModel::Background::BackgroundAccessStatus GetAccessStatus() const;
	Windows::ApplicationModel::Background::BackgroundAccessStatus GetAccessStatus(hstring_ref applicationId) const;
};

template <typename T>
class impl_IBackgroundTaskInstance
{
	auto shim() const { return impl::shim<T, IBackgroundTaskInstance>(this); }

public:

	GUID InstanceId() const;
	Windows::ApplicationModel::Background::BackgroundTaskRegistration Task() const;
	unsigned Progress() const;
	void Progress(unsigned value) const;
	IInspectable TriggerDetails() const;
	long long Canceled(Windows::ApplicationModel::Background::IBackgroundTaskCanceledEventHandler const & cancelHandler) const;
	template <typename F> long long Canceled(F cancelHandler) const;
	void Canceled(long long cookie) const;
	unsigned SuspendedCount() const;
	Windows::ApplicationModel::Background::BackgroundTaskDeferral GetDeferral() const;
};

template <typename T>
class impl_IBackgroundWorkCostStatics
{
	auto shim() const { return impl::shim<T, IBackgroundWorkCostStatics>(this); }

public:

	Windows::ApplicationModel::Background::BackgroundWorkCostValue CurrentBackgroundWorkCost() const;
};

template <typename T>
class impl_IBackgroundTaskDeferral
{
	auto shim() const { return impl::shim<T, IBackgroundTaskDeferral>(this); }

public:

	void Complete() const;
};

template <typename T>
class impl_IBackgroundTaskInstance2
{
	auto shim() const { return impl::shim<T, IBackgroundTaskInstance2>(this); }

public:

	unsigned GetThrottleCount(Windows::ApplicationModel::Background::BackgroundTaskThrottleCounter counter) const;
};

template <typename T>
class impl_IBackgroundTask
{
	auto shim() const { return impl::shim<T, IBackgroundTask>(this); }

public:

	void Run(Windows::ApplicationModel::Background::IBackgroundTaskInstance const & taskInstance) const;
};

template <typename T>
class impl_IBackgroundTaskRegistration
{
	auto shim() const { return impl::shim<T, IBackgroundTaskRegistration>(this); }

public:

	GUID TaskId() const;
	hstring Name() const;
	long long Progress(Windows::ApplicationModel::Background::IBackgroundTaskProgressEventHandler const & handler) const;
	template <typename F> long long Progress(F handler) const;
	void Progress(long long cookie) const;
	long long Completed(Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventHandler const & handler) const;
	template <typename F> long long Completed(F handler) const;
	void Completed(long long cookie) const;
	void Unregister(bool cancelTask) const;
};

template <typename T>
class impl_IBackgroundTaskRegistration2
{
	auto shim() const { return impl::shim<T, IBackgroundTaskRegistration2>(this); }

public:

	Windows::ApplicationModel::Background::IBackgroundTrigger Trigger() const;
};

template <typename T>
class impl_IBackgroundTrigger
{
	auto shim() const { return impl::shim<T, IBackgroundTrigger>(this); }

public:

};

template <typename T>
class impl_IAppointmentStoreNotificationTrigger
{
	auto shim() const { return impl::shim<T, IAppointmentStoreNotificationTrigger>(this); }

public:

};

template <typename T>
class impl_IApplicationTrigger
{
	auto shim() const { return impl::shim<T, IApplicationTrigger>(this); }

public:

	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::ApplicationTriggerResult> RequestAsync() const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::ApplicationTriggerResult> RequestAsync(Windows::Foundation::Collections::ValueSet const & arguments) const;
};

template <typename T>
class impl_IMediaProcessingTrigger
{
	auto shim() const { return impl::shim<T, IMediaProcessingTrigger>(this); }

public:

	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::MediaProcessingTriggerResult> RequestAsync() const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::MediaProcessingTriggerResult> RequestAsync(Windows::Foundation::Collections::ValueSet const & arguments) const;
};

template <typename T>
class impl_IBackgroundTaskRegistrationStatics
{
	auto shim() const { return impl::shim<T, IBackgroundTaskRegistrationStatics>(this); }

public:

	Windows::Foundation::Collections::IMapView<GUID, Windows::ApplicationModel::Background::IBackgroundTaskRegistration> AllTasks() const;
};

template <typename T>
class impl_IBackgroundTaskBuilder
{
	auto shim() const { return impl::shim<T, IBackgroundTaskBuilder>(this); }

public:

	void TaskEntryPoint(hstring_ref value) const;
	hstring TaskEntryPoint() const;
	void SetTrigger(Windows::ApplicationModel::Background::IBackgroundTrigger const & trigger) const;
	void AddCondition(Windows::ApplicationModel::Background::IBackgroundCondition const & condition) const;
	void Name(hstring_ref value) const;
	hstring Name() const;
	Windows::ApplicationModel::Background::BackgroundTaskRegistration Register() const;
};

template <typename T>
class impl_IBackgroundCondition
{
	auto shim() const { return impl::shim<T, IBackgroundCondition>(this); }

public:

};

template <typename T>
class impl_IBackgroundTaskBuilder2
{
	auto shim() const { return impl::shim<T, IBackgroundTaskBuilder2>(this); }

public:

	void CancelOnConditionLoss(bool value) const;
	bool CancelOnConditionLoss() const;
};

template <typename T>
class impl_IBackgroundTaskBuilder3
{
	auto shim() const { return impl::shim<T, IBackgroundTaskBuilder3>(this); }

public:

	void IsNetworkRequested(bool value) const;
	bool IsNetworkRequested() const;
};

template <typename T>
class impl_IBackgroundTaskCompletedEventArgs
{
	auto shim() const { return impl::shim<T, IBackgroundTaskCompletedEventArgs>(this); }

public:

	GUID InstanceId() const;
	void CheckResult() const;
};

template <typename T>
class impl_IBackgroundTaskProgressEventArgs
{
	auto shim() const { return impl::shim<T, IBackgroundTaskProgressEventArgs>(this); }

public:

	GUID InstanceId() const;
	unsigned Progress() const;
};

template <typename T>
class impl_IChatMessageNotificationTrigger
{
	auto shim() const { return impl::shim<T, IChatMessageNotificationTrigger>(this); }

public:

};

template <typename T>
class impl_IChatMessageReceivedNotificationTrigger
{
	auto shim() const { return impl::shim<T, IChatMessageReceivedNotificationTrigger>(this); }

public:

};

template <typename T>
class impl_IRcsEndUserMessageAvailableTrigger
{
	auto shim() const { return impl::shim<T, IRcsEndUserMessageAvailableTrigger>(this); }

public:

};

template <typename T>
class impl_IContactStoreNotificationTrigger
{
	auto shim() const { return impl::shim<T, IContactStoreNotificationTrigger>(this); }

public:

};

template <typename T>
class impl_IContentPrefetchTrigger
{
	auto shim() const { return impl::shim<T, IContentPrefetchTrigger>(this); }

public:

	Windows::Foundation::TimeSpan WaitInterval() const;
};

template <typename T>
class impl_IContentPrefetchTriggerFactory
{
	auto shim() const { return impl::shim<T, IContentPrefetchTriggerFactory>(this); }

public:

	Windows::ApplicationModel::Background::ContentPrefetchTrigger Create(Windows::Foundation::TimeSpan const & waitInterval) const;
};

template <typename T>
class impl_IEmailStoreNotificationTrigger
{
	auto shim() const { return impl::shim<T, IEmailStoreNotificationTrigger>(this); }

public:

};

template <typename T>
class impl_ISmsMessageReceivedTriggerFactory
{
	auto shim() const { return impl::shim<T, ISmsMessageReceivedTriggerFactory>(this); }

public:

	Windows::ApplicationModel::Background::SmsMessageReceivedTrigger Create(Windows::Devices::Sms::SmsFilterRules const & filterRules) const;
};

template <typename T>
class impl_IStorageLibraryContentChangedTrigger
{
	auto shim() const { return impl::shim<T, IStorageLibraryContentChangedTrigger>(this); }

public:

};

template <typename T>
class impl_IStorageLibraryContentChangedTriggerStatics
{
	auto shim() const { return impl::shim<T, IStorageLibraryContentChangedTriggerStatics>(this); }

public:

	Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger Create(Windows::Storage::StorageLibrary const & storageLibrary) const;
	Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger CreateFromLibraries(Windows::Foundation::Collections::IIterable<Windows::Storage::StorageLibrary> const & storageLibraries) const;
};

template <typename T>
class impl_ISystemTrigger
{
	auto shim() const { return impl::shim<T, ISystemTrigger>(this); }

public:

	bool OneShot() const;
	Windows::ApplicationModel::Background::SystemTriggerType TriggerType() const;
};

template <typename T>
class impl_ISystemTriggerFactory
{
	auto shim() const { return impl::shim<T, ISystemTriggerFactory>(this); }

public:

	Windows::ApplicationModel::Background::SystemTrigger Create(Windows::ApplicationModel::Background::SystemTriggerType triggerType, bool oneShot) const;
};

template <typename T>
class impl_ISystemCondition
{
	auto shim() const { return impl::shim<T, ISystemCondition>(this); }

public:

	Windows::ApplicationModel::Background::SystemConditionType ConditionType() const;
};

template <typename T>
class impl_ISystemConditionFactory
{
	auto shim() const { return impl::shim<T, ISystemConditionFactory>(this); }

public:

	Windows::ApplicationModel::Background::SystemCondition Create(Windows::ApplicationModel::Background::SystemConditionType conditionType) const;
};

template <typename T>
class impl_INetworkOperatorNotificationTrigger
{
	auto shim() const { return impl::shim<T, INetworkOperatorNotificationTrigger>(this); }

public:

	hstring NetworkAccountId() const;
};

template <typename T>
class impl_INetworkOperatorNotificationTriggerFactory
{
	auto shim() const { return impl::shim<T, INetworkOperatorNotificationTriggerFactory>(this); }

public:

	Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger Create(hstring_ref networkAccountId) const;
};

template <typename T>
class impl_ICachedFileUpdaterTriggerDetails
{
	auto shim() const { return impl::shim<T, ICachedFileUpdaterTriggerDetails>(this); }

public:

	Windows::Storage::Provider::CachedFileTarget UpdateTarget() const;
	Windows::Storage::Provider::FileUpdateRequest UpdateRequest() const;
	bool CanRequestUserInput() const;
};

template <typename T>
class impl_ICachedFileUpdaterTrigger
{
	auto shim() const { return impl::shim<T, ICachedFileUpdaterTrigger>(this); }

public:

};

template <typename T>
class impl_ITimeTrigger
{
	auto shim() const { return impl::shim<T, ITimeTrigger>(this); }

public:

	unsigned FreshnessTime() const;
	bool OneShot() const;
};

template <typename T>
class impl_ITimeTriggerFactory
{
	auto shim() const { return impl::shim<T, ITimeTriggerFactory>(this); }

public:

	Windows::ApplicationModel::Background::TimeTrigger Create(unsigned freshnessTime, bool oneShot) const;
};

template <typename T>
class impl_IMaintenanceTrigger
{
	auto shim() const { return impl::shim<T, IMaintenanceTrigger>(this); }

public:

	unsigned FreshnessTime() const;
	bool OneShot() const;
};

template <typename T>
class impl_IMaintenanceTriggerFactory
{
	auto shim() const { return impl::shim<T, IMaintenanceTriggerFactory>(this); }

public:

	Windows::ApplicationModel::Background::MaintenanceTrigger Create(unsigned freshnessTime, bool oneShot) const;
};

template <typename T>
class impl_IPhoneTrigger
{
	auto shim() const { return impl::shim<T, IPhoneTrigger>(this); }

public:

	bool OneShot() const;
	Windows::ApplicationModel::Calls::Background::PhoneTriggerType TriggerType() const;
};

template <typename T>
class impl_IPhoneTriggerFactory
{
	auto shim() const { return impl::shim<T, IPhoneTriggerFactory>(this); }

public:

	Windows::ApplicationModel::Background::PhoneTrigger Create(Windows::ApplicationModel::Calls::Background::PhoneTriggerType type, bool oneShot) const;
};

template <typename T>
class impl_IDeviceUseTrigger
{
	auto shim() const { return impl::shim<T, IDeviceUseTrigger>(this); }

public:

	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(hstring_ref deviceId) const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(hstring_ref deviceId, hstring_ref arguments) const;
};

template <typename T>
class impl_IDeviceServicingTrigger
{
	auto shim() const { return impl::shim<T, IDeviceServicingTrigger>(this); }

public:

	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(hstring_ref deviceId, Windows::Foundation::TimeSpan const & expectedDuration) const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> RequestAsync(hstring_ref deviceId, Windows::Foundation::TimeSpan const & expectedDuration, hstring_ref arguments) const;
};

template <typename T>
class impl_IRfcommConnectionTrigger
{
	auto shim() const { return impl::shim<T, IRfcommConnectionTrigger>(this); }

public:

	Windows::Devices::Bluetooth::Background::RfcommInboundConnectionInformation InboundConnection() const;
	Windows::Devices::Bluetooth::Background::RfcommOutboundConnectionInformation OutboundConnection() const;
	bool AllowMultipleConnections() const;
	void AllowMultipleConnections(bool value) const;
	Windows::Networking::Sockets::SocketProtectionLevel ProtectionLevel() const;
	void ProtectionLevel(Windows::Networking::Sockets::SocketProtectionLevel value) const;
	Windows::Networking::HostName RemoteHostName() const;
	void RemoteHostName(Windows::Networking::HostName const & value) const;
};

template <typename T>
class impl_IDeviceConnectionChangeTrigger
{
	auto shim() const { return impl::shim<T, IDeviceConnectionChangeTrigger>(this); }

public:

	hstring DeviceId() const;
	bool CanMaintainConnection() const;
	bool MaintainConnection() const;
	void MaintainConnection(bool value) const;
};

template <typename T>
class impl_IDeviceConnectionChangeTriggerStatics
{
	auto shim() const { return impl::shim<T, IDeviceConnectionChangeTriggerStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Background::DeviceConnectionChangeTrigger> FromIdAsync(hstring_ref deviceId) const;
};

template <typename T>
class impl_IGattCharacteristicNotificationTrigger
{
	auto shim() const { return impl::shim<T, IGattCharacteristicNotificationTrigger>(this); }

public:

	Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic Characteristic() const;
};

template <typename T>
class impl_IGattCharacteristicNotificationTriggerFactory
{
	auto shim() const { return impl::shim<T, IGattCharacteristicNotificationTriggerFactory>(this); }

public:

	Windows::ApplicationModel::Background::GattCharacteristicNotificationTrigger Create(Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic const & characteristic) const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementWatcherTrigger
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementWatcherTrigger>(this); }

public:

	Windows::Foundation::TimeSpan MinSamplingInterval() const;
	Windows::Foundation::TimeSpan MaxSamplingInterval() const;
	Windows::Foundation::TimeSpan MinOutOfRangeTimeout() const;
	Windows::Foundation::TimeSpan MaxOutOfRangeTimeout() const;
	Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter SignalStrengthFilter() const;
	void SignalStrengthFilter(Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter const & value) const;
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter AdvertisementFilter() const;
	void AdvertisementFilter(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter const & value) const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementPublisherTrigger
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementPublisherTrigger>(this); }

public:

	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement Advertisement() const;
};

template <typename T>
class impl_IDeviceWatcherTrigger
{
	auto shim() const { return impl::shim<T, IDeviceWatcherTrigger>(this); }

public:

};

template <typename T>
class impl_ILocationTrigger
{
	auto shim() const { return impl::shim<T, ILocationTrigger>(this); }

public:

	Windows::ApplicationModel::Background::LocationTriggerType TriggerType() const;
};

template <typename T>
class impl_ILocationTriggerFactory
{
	auto shim() const { return impl::shim<T, ILocationTriggerFactory>(this); }

public:

	Windows::ApplicationModel::Background::LocationTrigger Create(Windows::ApplicationModel::Background::LocationTriggerType triggerType) const;
};

template <typename T>
class impl_IActivitySensorTrigger
{
	auto shim() const { return impl::shim<T, IActivitySensorTrigger>(this); }

public:

	Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Sensors::ActivityType> SubscribedActivities() const;
	unsigned ReportInterval() const;
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Sensors::ActivityType> SupportedActivities() const;
	unsigned MinimumReportInterval() const;
};

template <typename T>
class impl_IActivitySensorTriggerFactory
{
	auto shim() const { return impl::shim<T, IActivitySensorTriggerFactory>(this); }

public:

	Windows::ApplicationModel::Background::ActivitySensorTrigger Create(unsigned reportIntervalInMilliseconds) const;
};

template <typename T>
class impl_ISensorDataThresholdTrigger
{
	auto shim() const { return impl::shim<T, ISensorDataThresholdTrigger>(this); }

public:

};

template <typename T>
class impl_ISensorDataThresholdTriggerFactory
{
	auto shim() const { return impl::shim<T, ISensorDataThresholdTriggerFactory>(this); }

public:

	Windows::ApplicationModel::Background::SensorDataThresholdTrigger Create(Windows::Devices::Sensors::ISensorDataThreshold const & threshold) const;
};

template <typename T>
class impl_INetworkOperatorHotspotAuthenticationTrigger
{
	auto shim() const { return impl::shim<T, INetworkOperatorHotspotAuthenticationTrigger>(this); }

public:

};

template <typename T>
class impl_IPushNotificationTriggerFactory
{
	auto shim() const { return impl::shim<T, IPushNotificationTriggerFactory>(this); }

public:

	Windows::ApplicationModel::Background::PushNotificationTrigger Create(hstring_ref applicationId) const;
};

template <typename T>
class impl_IToastNotificationHistoryChangedTriggerFactory
{
	auto shim() const { return impl::shim<T, IToastNotificationHistoryChangedTriggerFactory>(this); }

public:

	Windows::ApplicationModel::Background::ToastNotificationHistoryChangedTrigger Create(hstring_ref applicationId) const;
};

template <typename T>
class impl_IToastNotificationActionTriggerFactory
{
	auto shim() const { return impl::shim<T, IToastNotificationActionTriggerFactory>(this); }

public:

	Windows::ApplicationModel::Background::ToastNotificationActionTrigger Create(hstring_ref applicationId) const;
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls {

template <typename T>
class impl_IPhoneCallHistoryEntry
{
	auto shim() const { return impl::shim<T, IPhoneCallHistoryEntry>(this); }

public:

	hstring Id() const;
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress Address() const;
	void Address(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress const & value) const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> Duration() const;
	void Duration(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const;
	bool IsCallerIdBlocked() const;
	void IsCallerIdBlocked(bool value) const;
	bool IsEmergency() const;
	void IsEmergency(bool value) const;
	bool IsIncoming() const;
	void IsIncoming(bool value) const;
	bool IsMissed() const;
	void IsMissed(bool value) const;
	bool IsRinging() const;
	void IsRinging(bool value) const;
	bool IsSeen() const;
	void IsSeen(bool value) const;
	bool IsSuppressed() const;
	void IsSuppressed(bool value) const;
	bool IsVoicemail() const;
	void IsVoicemail(bool value) const;
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryMedia Media() const;
	void Media(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryMedia value) const;
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryOtherAppReadAccess OtherAppReadAccess() const;
	void OtherAppReadAccess(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryOtherAppReadAccess value) const;
	hstring RemoteId() const;
	void RemoteId(hstring_ref value) const;
	hstring SourceDisplayName() const;
	hstring SourceId() const;
	void SourceId(hstring_ref value) const;
	Windows::ApplicationModel::Calls::PhoneCallHistorySourceIdKind SourceIdKind() const;
	void SourceIdKind(Windows::ApplicationModel::Calls::PhoneCallHistorySourceIdKind value) const;
	Windows::Foundation::DateTime StartTime() const;
	void StartTime(Windows::Foundation::DateTime const & value) const;
};

template <typename T>
class impl_IPhoneCallHistoryEntryAddress
{
	auto shim() const { return impl::shim<T, IPhoneCallHistoryEntryAddress>(this); }

public:

	hstring ContactId() const;
	void ContactId(hstring_ref value) const;
	hstring DisplayName() const;
	void DisplayName(hstring_ref value) const;
	hstring RawAddress() const;
	void RawAddress(hstring_ref value) const;
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryRawAddressKind RawAddressKind() const;
	void RawAddressKind(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryRawAddressKind value) const;
};

template <typename T>
class impl_IPhoneCallHistoryEntryAddressFactory
{
	auto shim() const { return impl::shim<T, IPhoneCallHistoryEntryAddressFactory>(this); }

public:

	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress Create(hstring_ref rawAddress, Windows::ApplicationModel::Calls::PhoneCallHistoryEntryRawAddressKind rawAddressKind) const;
};

template <typename T>
class impl_IPhoneCallHistoryEntryQueryOptions
{
	auto shim() const { return impl::shim<T, IPhoneCallHistoryEntryQueryOptions>(this); }

public:

	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryQueryDesiredMedia DesiredMedia() const;
	void DesiredMedia(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryQueryDesiredMedia value) const;
	Windows::Foundation::Collections::IVector<hstring> SourceIds() const;
};

template <typename T>
class impl_IPhoneCallHistoryEntryReader
{
	auto shim() const { return impl::shim<T, IPhoneCallHistoryEntryReader>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry>> ReadBatchAsync() const;
};

template <typename T>
class impl_IPhoneCallHistoryStore
{
	auto shim() const { return impl::shim<T, IPhoneCallHistoryStore>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry> GetEntryAsync(hstring_ref callHistoryEntryId) const;
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryReader GetEntryReader() const;
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryReader GetEntryReader(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryQueryOptions const & queryOptions) const;
	Windows::Foundation::IAsyncAction SaveEntryAsync(Windows::ApplicationModel::Calls::PhoneCallHistoryEntry const & callHistoryEntry) const;
	Windows::Foundation::IAsyncAction DeleteEntryAsync(Windows::ApplicationModel::Calls::PhoneCallHistoryEntry const & callHistoryEntry) const;
	Windows::Foundation::IAsyncAction DeleteEntriesAsync(Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry> const & callHistoryEntries) const;
	Windows::Foundation::IAsyncAction MarkEntryAsSeenAsync(Windows::ApplicationModel::Calls::PhoneCallHistoryEntry const & callHistoryEntry) const;
	Windows::Foundation::IAsyncAction MarkEntriesAsSeenAsync(Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry> const & callHistoryEntries) const;
	Windows::Foundation::IAsyncOperation<unsigned> GetUnseenCountAsync() const;
	Windows::Foundation::IAsyncAction MarkAllAsSeenAsync() const;
	Windows::Foundation::IAsyncOperation<unsigned> GetSourcesUnseenCountAsync(Windows::Foundation::Collections::IIterable<hstring> const & sourceIds) const;
	Windows::Foundation::IAsyncAction MarkSourcesAsSeenAsync(Windows::Foundation::Collections::IIterable<hstring> const & sourceIds) const;
};

template <typename T>
class impl_IPhoneCallHistoryManagerStatics
{
	auto shim() const { return impl::shim<T, IPhoneCallHistoryManagerStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallHistoryStore> RequestStoreAsync(Windows::ApplicationModel::Calls::PhoneCallHistoryStoreAccessType accessType) const;
};

template <typename T>
class impl_IPhoneVoicemail
{
	auto shim() const { return impl::shim<T, IPhoneVoicemail>(this); }

public:

	hstring Number() const;
	int MessageCount() const;
	Windows::ApplicationModel::Calls::PhoneVoicemailType Type() const;
	Windows::Foundation::IAsyncAction DialVoicemailAsync() const;
};

template <typename T>
class impl_IPhoneDialOptions
{
	auto shim() const { return impl::shim<T, IPhoneDialOptions>(this); }

public:

	hstring Number() const;
	void Number(hstring_ref value) const;
	hstring DisplayName() const;
	void DisplayName(hstring_ref value) const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
	void Contact(Windows::ApplicationModel::Contacts::Contact const & value) const;
	Windows::ApplicationModel::Contacts::ContactPhone ContactPhone() const;
	void ContactPhone(Windows::ApplicationModel::Contacts::ContactPhone const & value) const;
	Windows::ApplicationModel::Calls::PhoneCallMedia Media() const;
	void Media(Windows::ApplicationModel::Calls::PhoneCallMedia value) const;
	Windows::ApplicationModel::Calls::PhoneAudioRoutingEndpoint AudioEndpoint() const;
	void AudioEndpoint(Windows::ApplicationModel::Calls::PhoneAudioRoutingEndpoint value) const;
};

template <typename T>
class impl_IPhoneLineCellularDetails
{
	auto shim() const { return impl::shim<T, IPhoneLineCellularDetails>(this); }

public:

	Windows::ApplicationModel::Calls::PhoneSimState SimState() const;
	int SimSlotIndex() const;
	bool IsModemOn() const;
	int RegistrationRejectCode() const;
	hstring GetNetworkOperatorDisplayText(Windows::ApplicationModel::Calls::PhoneLineNetworkOperatorDisplayTextLocation location) const;
};

template <typename T>
class impl_IPhoneLine
{
	auto shim() const { return impl::shim<T, IPhoneLine>(this); }

public:

	long long LineChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLine, IInspectable> const & handler) const;
	template <typename F> long long LineChanged(F handler) const;
	void LineChanged(long long token) const;
	GUID Id() const;
	Windows::UI::Color DisplayColor() const;
	Windows::ApplicationModel::Calls::PhoneNetworkState NetworkState() const;
	hstring DisplayName() const;
	Windows::ApplicationModel::Calls::PhoneVoicemail Voicemail() const;
	hstring NetworkName() const;
	Windows::ApplicationModel::Calls::PhoneLineCellularDetails CellularDetails() const;
	Windows::ApplicationModel::Calls::PhoneLineTransport Transport() const;
	bool CanDial() const;
	bool SupportsTile() const;
	Windows::ApplicationModel::Calls::PhoneCallVideoCapabilities VideoCallingCapabilities() const;
	Windows::ApplicationModel::Calls::PhoneLineConfiguration LineConfiguration() const;
	Windows::Foundation::IAsyncOperation<bool> IsImmediateDialNumberAsync(hstring_ref number) const;
	void Dial(hstring_ref number, hstring_ref displayName) const;
	void DialWithOptions(Windows::ApplicationModel::Calls::PhoneDialOptions const & options) const;
};

template <typename T>
class impl_IPhoneCallStore
{
	auto shim() const { return impl::shim<T, IPhoneCallStore>(this); }

public:

	Windows::Foundation::IAsyncOperation<bool> IsEmergencyPhoneNumberAsync(hstring_ref number) const;
	Windows::Foundation::IAsyncOperation<GUID> GetDefaultLineAsync() const;
	Windows::ApplicationModel::Calls::PhoneLineWatcher RequestLineWatcher() const;
};

template <typename T>
class impl_IPhoneLineConfiguration
{
	auto shim() const { return impl::shim<T, IPhoneLineConfiguration>(this); }

public:

	bool IsVideoCallingEnabled() const;
	Windows::Foundation::Collections::IMapView<hstring, IInspectable> ExtendedProperties() const;
};

template <typename T>
class impl_IPhoneLineStatics
{
	auto shim() const { return impl::shim<T, IPhoneLineStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneLine> FromIdAsync(GUID lineId) const;
};

template <typename T>
class impl_IPhoneLineWatcher
{
	auto shim() const { return impl::shim<T, IPhoneLineWatcher>(this); }

public:

	void Start() const;
	void Stop() const;
	long long LineAdded(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs> const & handler) const;
	template <typename F> long long LineAdded(F handler) const;
	void LineAdded(long long token) const;
	long long LineRemoved(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs> const & handler) const;
	template <typename F> long long LineRemoved(F handler) const;
	void LineRemoved(long long token) const;
	long long LineUpdated(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs> const & handler) const;
	template <typename F> long long LineUpdated(F handler) const;
	void LineUpdated(long long token) const;
	long long EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, IInspectable> const & handler) const;
	template <typename F> long long EnumerationCompleted(F handler) const;
	void EnumerationCompleted(long long token) const;
	long long Stopped(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, IInspectable> const & handler) const;
	template <typename F> long long Stopped(F handler) const;
	void Stopped(long long token) const;
	Windows::ApplicationModel::Calls::PhoneLineWatcherStatus Status() const;
};

template <typename T>
class impl_IPhoneLineWatcherEventArgs
{
	auto shim() const { return impl::shim<T, IPhoneLineWatcherEventArgs>(this); }

public:

	GUID LineId() const;
};

template <typename T>
class impl_IPhoneCallManagerStatics
{
	auto shim() const { return impl::shim<T, IPhoneCallManagerStatics>(this); }

public:

	void ShowPhoneCallUI(hstring_ref phoneNumber, hstring_ref displayName) const;
};

template <typename T>
class impl_IPhoneCallManagerStatics2
{
	auto shim() const { return impl::shim<T, IPhoneCallManagerStatics2>(this); }

public:

	long long CallStateChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const;
	template <typename F> long long CallStateChanged(F handler) const;
	void CallStateChanged(long long token) const;
	bool IsCallActive() const;
	bool IsCallIncoming() const;
	void ShowPhoneCallSettingsUI() const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallStore> RequestStoreAsync() const;
};

template <typename T>
class impl_IPhoneCallVideoCapabilities
{
	auto shim() const { return impl::shim<T, IPhoneCallVideoCapabilities>(this); }

public:

	bool IsVideoCallingCapable() const;
};

template <typename T>
class impl_IPhoneCallVideoCapabilitiesManagerStatics
{
	auto shim() const { return impl::shim<T, IPhoneCallVideoCapabilitiesManagerStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallVideoCapabilities> GetCapabilitiesAsync(hstring_ref phoneNumber) const;
};

template <typename T>
class impl_IPhoneCallBlockingStatics
{
	auto shim() const { return impl::shim<T, IPhoneCallBlockingStatics>(this); }

public:

	bool BlockUnknownNumbers() const;
	void BlockUnknownNumbers(bool value) const;
	bool BlockPrivateNumbers() const;
	void BlockPrivateNumbers(bool value) const;
	Windows::Foundation::IAsyncOperation<bool> SetCallBlockingListAsync(Windows::Foundation::Collections::IIterable<hstring> const & phoneNumberList) const;
};

template <typename T>
class impl_ICallStateChangeEventArgs
{
	auto shim() const { return impl::shim<T, ICallStateChangeEventArgs>(this); }

public:

	Windows::ApplicationModel::Calls::VoipPhoneCallState State() const;
};

template <typename T>
class impl_ICallAnswerEventArgs
{
	auto shim() const { return impl::shim<T, ICallAnswerEventArgs>(this); }

public:

	Windows::ApplicationModel::Calls::VoipPhoneCallMedia AcceptedMedia() const;
};

template <typename T>
class impl_ICallRejectEventArgs
{
	auto shim() const { return impl::shim<T, ICallRejectEventArgs>(this); }

public:

	Windows::ApplicationModel::Calls::VoipPhoneCallRejectReason RejectReason() const;
};

template <typename T>
class impl_IVoipPhoneCall
{
	auto shim() const { return impl::shim<T, IVoipPhoneCall>(this); }

public:

	long long EndRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallStateChangeEventArgs> const & handler) const;
	template <typename F> long long EndRequested(F handler) const;
	void EndRequested(long long token) const;
	long long HoldRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallStateChangeEventArgs> const & handler) const;
	template <typename F> long long HoldRequested(F handler) const;
	void HoldRequested(long long token) const;
	long long ResumeRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallStateChangeEventArgs> const & handler) const;
	template <typename F> long long ResumeRequested(F handler) const;
	void ResumeRequested(long long token) const;
	long long AnswerRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallAnswerEventArgs> const & acceptHandler) const;
	template <typename F> long long AnswerRequested(F acceptHandler) const;
	void AnswerRequested(long long token) const;
	long long RejectRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallRejectEventArgs> const & rejectHandler) const;
	template <typename F> long long RejectRequested(F rejectHandler) const;
	void RejectRequested(long long token) const;
	void NotifyCallHeld() const;
	void NotifyCallActive() const;
	void NotifyCallEnded() const;
	hstring ContactName() const;
	void ContactName(hstring_ref value) const;
	Windows::Foundation::DateTime StartTime() const;
	void StartTime(Windows::Foundation::DateTime const & value) const;
	Windows::ApplicationModel::Calls::VoipPhoneCallMedia CallMedia() const;
	void CallMedia(Windows::ApplicationModel::Calls::VoipPhoneCallMedia value) const;
	void NotifyCallReady() const;
};

template <typename T>
class impl_IMuteChangeEventArgs
{
	auto shim() const { return impl::shim<T, IMuteChangeEventArgs>(this); }

public:

	bool Muted() const;
};

template <typename T>
class impl_IVoipCallCoordinator
{
	auto shim() const { return impl::shim<T, IVoipCallCoordinator>(this); }

public:

	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Calls::VoipPhoneCallResourceReservationStatus> ReserveCallResourcesAsync(hstring_ref taskEntryPoint) const;
	long long MuteStateChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipCallCoordinator, Windows::ApplicationModel::Calls::MuteChangeEventArgs> const & muteChangeHandler) const;
	template <typename F> long long MuteStateChanged(F muteChangeHandler) const;
	void MuteStateChanged(long long token) const;
	Windows::ApplicationModel::Calls::VoipPhoneCall RequestNewIncomingCall(hstring_ref context, hstring_ref contactName, hstring_ref contactNumber, Windows::Foundation::Uri const & contactImage, hstring_ref serviceName, Windows::Foundation::Uri const & brandingImage, hstring_ref callDetails, Windows::Foundation::Uri const & ringtone, Windows::ApplicationModel::Calls::VoipPhoneCallMedia media, Windows::Foundation::TimeSpan const & ringTimeout) const;
	Windows::ApplicationModel::Calls::VoipPhoneCall RequestNewOutgoingCall(hstring_ref context, hstring_ref contactName, hstring_ref serviceName, Windows::ApplicationModel::Calls::VoipPhoneCallMedia media) const;
	void NotifyMuted() const;
	void NotifyUnmuted() const;
	Windows::ApplicationModel::Calls::VoipPhoneCall RequestOutgoingUpgradeToVideoCall(GUID callUpgradeGuid, hstring_ref context, hstring_ref contactName, hstring_ref serviceName) const;
	Windows::ApplicationModel::Calls::VoipPhoneCall RequestIncomingUpgradeToVideoCall(hstring_ref context, hstring_ref contactName, hstring_ref contactNumber, Windows::Foundation::Uri const & contactImage, hstring_ref serviceName, Windows::Foundation::Uri const & brandingImage, hstring_ref callDetails, Windows::Foundation::Uri const & ringtone, Windows::Foundation::TimeSpan const & ringTimeout) const;
	void TerminateCellularCall(GUID callUpgradeGuid) const;
	void CancelUpgrade(GUID callUpgradeGuid) const;
};

template <typename T>
class impl_IVoipCallCoordinatorStatics
{
	auto shim() const { return impl::shim<T, IVoipCallCoordinatorStatics>(this); }

public:

	Windows::ApplicationModel::Calls::VoipCallCoordinator GetDefault() const;
};

template <typename T>
class impl_ILockScreenCallEndCallDeferral
{
	auto shim() const { return impl::shim<T, ILockScreenCallEndCallDeferral>(this); }

public:

	void Complete() const;
};

template <typename T>
class impl_ILockScreenCallEndRequestedEventArgs
{
	auto shim() const { return impl::shim<T, ILockScreenCallEndRequestedEventArgs>(this); }

public:

	Windows::ApplicationModel::Calls::LockScreenCallEndCallDeferral GetDeferral() const;
	Windows::Foundation::DateTime Deadline() const;
};

template <typename T>
class impl_ILockScreenCallUI
{
	auto shim() const { return impl::shim<T, ILockScreenCallUI>(this); }

public:

	void Dismiss() const;
	long long EndRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, Windows::ApplicationModel::Calls::LockScreenCallEndRequestedEventArgs> const & handler) const;
	template <typename F> long long EndRequested(F handler) const;
	void EndRequested(long long token) const;
	long long Closed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, IInspectable> const & handler) const;
	template <typename F> long long Closed(F handler) const;
	void Closed(long long token) const;
	hstring CallTitle() const;
	void CallTitle(hstring_ref value) const;
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls { namespace Background {

template <typename T>
class impl_IPhoneCallBlockedTriggerDetails
{
	auto shim() const { return impl::shim<T, IPhoneCallBlockedTriggerDetails>(this); }

public:

	hstring PhoneNumber() const;
	GUID LineId() const;
	Windows::ApplicationModel::Calls::Background::PhoneCallBlockedReason CallBlockedReason() const;
};

template <typename T>
class impl_IPhoneCallOriginDataRequestTriggerDetails
{
	auto shim() const { return impl::shim<T, IPhoneCallOriginDataRequestTriggerDetails>(this); }

public:

	GUID RequestId() const;
	hstring PhoneNumber() const;
};

template <typename T>
class impl_IPhoneNewVoicemailMessageTriggerDetails
{
	auto shim() const { return impl::shim<T, IPhoneNewVoicemailMessageTriggerDetails>(this); }

public:

	GUID LineId() const;
	int VoicemailCount() const;
	hstring OperatorMessage() const;
};

template <typename T>
class impl_IPhoneLineChangedTriggerDetails
{
	auto shim() const { return impl::shim<T, IPhoneLineChangedTriggerDetails>(this); }

public:

	GUID LineId() const;
	Windows::ApplicationModel::Calls::Background::PhoneLineChangeKind ChangeType() const;
	bool HasLinePropertyChanged(Windows::ApplicationModel::Calls::Background::PhoneLineProperties lineProperty) const;
};

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Contacts {

template <typename T>
class impl_IContactCardOptions
{
	auto shim() const { return impl::shim<T, IContactCardOptions>(this); }

public:

	Windows::ApplicationModel::Contacts::ContactCardHeaderKind HeaderKind() const;
	void HeaderKind(Windows::ApplicationModel::Contacts::ContactCardHeaderKind value) const;
	Windows::ApplicationModel::Contacts::ContactCardTabKind InitialTabKind() const;
	void InitialTabKind(Windows::ApplicationModel::Contacts::ContactCardTabKind value) const;
};

template <typename T>
class impl_IContactCardOptions2
{
	auto shim() const { return impl::shim<T, IContactCardOptions2>(this); }

public:

	Windows::Foundation::Collections::IVector<hstring> ServerSearchContactListIds() const;
};

template <typename T>
class impl_IFullContactCardOptions
{
	auto shim() const { return impl::shim<T, IFullContactCardOptions>(this); }

public:

	Windows::UI::ViewManagement::ViewSizePreference DesiredRemainingView() const;
	void DesiredRemainingView(Windows::UI::ViewManagement::ViewSizePreference value) const;
};

template <typename T>
class impl_IContactManagerStatics
{
	auto shim() const { return impl::shim<T, IContactManagerStatics>(this); }

public:

	void ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection) const;
	void ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
	Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
};

template <typename T>
class impl_IContactManagerStatics2
{
	auto shim() const { return impl::shim<T, IContactManagerStatics2>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactStore> RequestStoreAsync() const;
};

template <typename T>
class impl_IContactManagerStatics3
{
	auto shim() const { return impl::shim<T, IContactManagerStatics3>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> ConvertContactToVCardAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> ConvertContactToVCardAsync(Windows::ApplicationModel::Contacts::Contact const & contact, unsigned maxBytes) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> ConvertVCardToContactAsync(Windows::Storage::Streams::IRandomAccessStreamReference const & vCard) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactStore> RequestStoreAsync(Windows::ApplicationModel::Contacts::ContactStoreAccessType accessType) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationStore> RequestAnnotationStoreAsync(Windows::ApplicationModel::Contacts::ContactAnnotationStoreAccessType accessType) const;
	bool IsShowContactCardSupported() const;
	void ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::ApplicationModel::Contacts::ContactCardOptions const & contactCardOptions) const;
	bool IsShowDelayLoadedContactCardSupported() const;
	Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::ApplicationModel::Contacts::ContactCardOptions const & contactCardOptions) const;
	void ShowFullContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::ApplicationModel::Contacts::FullContactCardOptions const & fullContactCardOptions) const;
	Windows::ApplicationModel::Contacts::ContactNameOrder SystemDisplayNameOrder() const;
	void SystemDisplayNameOrder(Windows::ApplicationModel::Contacts::ContactNameOrder value) const;
	Windows::ApplicationModel::Contacts::ContactNameOrder SystemSortOrder() const;
	void SystemSortOrder(Windows::ApplicationModel::Contacts::ContactNameOrder value) const;
};

template <typename T>
class impl_IAggregateContactManager
{
	auto shim() const { return impl::shim<T, IAggregateContactManager>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact>> FindRawContactsAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> TryLinkContactsAsync(Windows::ApplicationModel::Contacts::Contact const & primaryContact, Windows::ApplicationModel::Contacts::Contact const & secondaryContact) const;
	Windows::Foundation::IAsyncAction UnlinkRawContactAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const;
	Windows::Foundation::IAsyncOperation<bool> TrySetPreferredSourceForPictureAsync(Windows::ApplicationModel::Contacts::Contact const & aggregateContact, Windows::ApplicationModel::Contacts::Contact const & rawContact) const;
};

template <typename T>
class impl_IContactAnnotationStore
{
	auto shim() const { return impl::shim<T, IContactAnnotationStore>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> FindContactIdsByEmailAsync(hstring_ref emailAddress) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> FindContactIdsByPhoneNumberAsync(hstring_ref phoneNumber) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotation>> FindAnnotationsForContactAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const;
	Windows::Foundation::IAsyncAction DisableAnnotationAsync(Windows::ApplicationModel::Contacts::ContactAnnotation const & annotation) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationList> CreateAnnotationListAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationList> CreateAnnotationListAsync(hstring_ref userDataAccountId) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationList> GetAnnotationListAsync(hstring_ref annotationListId) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotationList>> FindAnnotationListsAsync() const;
};

template <typename T>
class impl_IContactAnnotationList
{
	auto shim() const { return impl::shim<T, IContactAnnotationList>(this); }

public:

	hstring Id() const;
	hstring ProviderPackageFamilyName() const;
	hstring UserDataAccountId() const;
	Windows::Foundation::IAsyncAction DeleteAsync() const;
	Windows::Foundation::IAsyncOperation<bool> TrySaveAnnotationAsync(Windows::ApplicationModel::Contacts::ContactAnnotation const & annotation) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotation> GetAnnotationAsync(hstring_ref annotationId) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotation>> FindAnnotationsByRemoteIdAsync(hstring_ref remoteId) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotation>> FindAnnotationsAsync() const;
	Windows::Foundation::IAsyncAction DeleteAnnotationAsync(Windows::ApplicationModel::Contacts::ContactAnnotation const & annotation) const;
};

template <typename T>
class impl_IContactAnnotation
{
	auto shim() const { return impl::shim<T, IContactAnnotation>(this); }

public:

	hstring Id() const;
	hstring AnnotationListId() const;
	hstring ContactId() const;
	void ContactId(hstring_ref value) const;
	hstring RemoteId() const;
	void RemoteId(hstring_ref value) const;
	Windows::ApplicationModel::Contacts::ContactAnnotationOperations SupportedOperations() const;
	void SupportedOperations(Windows::ApplicationModel::Contacts::ContactAnnotationOperations value) const;
	bool IsDisabled() const;
	Windows::Foundation::Collections::ValueSet ProviderProperties() const;
};

template <typename T>
class impl_IContactStoreNotificationTriggerDetails
{
	auto shim() const { return impl::shim<T, IContactStoreNotificationTriggerDetails>(this); }

public:

};

template <typename T>
class impl_IContactStore
{
	auto shim() const { return impl::shim<T, IContactStore>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact>> FindContactsAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact>> FindContactsAsync(hstring_ref searchText) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> GetContactAsync(hstring_ref contactId) const;
};

template <typename T>
class impl_IContactStore2
{
	auto shim() const { return impl::shim<T, IContactStore2>(this); }

public:

	Windows::ApplicationModel::Contacts::ContactChangeTracker ChangeTracker() const;
	long long ContactChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Contacts::ContactStore, Windows::ApplicationModel::Contacts::ContactChangedEventArgs> const & value) const;
	template <typename F> long long ContactChanged(F value) const;
	void ContactChanged(long long value) const;
	Windows::ApplicationModel::Contacts::AggregateContactManager AggregateContactManager() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactList>> FindContactListsAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactList> GetContactListAsync(hstring_ref contactListId) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactList> CreateContactListAsync(hstring_ref displayName) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> GetMeContactAsync() const;
	Windows::ApplicationModel::Contacts::ContactReader GetContactReader() const;
	Windows::ApplicationModel::Contacts::ContactReader GetContactReader(Windows::ApplicationModel::Contacts::ContactQueryOptions const & options) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactList> CreateContactListAsync(hstring_ref displayName, hstring_ref userDataAccountId) const;
};

template <typename T>
class impl_IContactList
{
	auto shim() const { return impl::shim<T, IContactList>(this); }

public:

	hstring Id() const;
	hstring DisplayName() const;
	void DisplayName(hstring_ref value) const;
	hstring SourceDisplayName() const;
	bool IsHidden() const;
	void IsHidden(bool value) const;
	Windows::ApplicationModel::Contacts::ContactListOtherAppReadAccess OtherAppReadAccess() const;
	void OtherAppReadAccess(Windows::ApplicationModel::Contacts::ContactListOtherAppReadAccess value) const;
	Windows::ApplicationModel::Contacts::ContactListOtherAppWriteAccess OtherAppWriteAccess() const;
	void OtherAppWriteAccess(Windows::ApplicationModel::Contacts::ContactListOtherAppWriteAccess value) const;
	Windows::ApplicationModel::Contacts::ContactChangeTracker ChangeTracker() const;
	Windows::ApplicationModel::Contacts::ContactListSyncManager SyncManager() const;
	bool SupportsServerSearch() const;
	hstring UserDataAccountId() const;
	long long ContactChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Contacts::ContactList, Windows::ApplicationModel::Contacts::ContactChangedEventArgs> const & value) const;
	template <typename F> long long ContactChanged(F value) const;
	void ContactChanged(long long value) const;
	Windows::Foundation::IAsyncAction SaveAsync() const;
	Windows::Foundation::IAsyncAction DeleteAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> GetContactFromRemoteIdAsync(hstring_ref remoteId) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> GetMeContactAsync() const;
	Windows::ApplicationModel::Contacts::ContactReader GetContactReader() const;
	Windows::ApplicationModel::Contacts::ContactReader GetContactReader(Windows::ApplicationModel::Contacts::ContactQueryOptions const & options) const;
	Windows::Foundation::IAsyncAction SaveContactAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const;
	Windows::Foundation::IAsyncAction DeleteContactAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> GetContactAsync(hstring_ref contactId) const;
};

template <typename T>
class impl_IContactListSyncManager
{
	auto shim() const { return impl::shim<T, IContactListSyncManager>(this); }

public:

	Windows::ApplicationModel::Contacts::ContactListSyncStatus Status() const;
	Windows::Foundation::DateTime LastSuccessfulSyncTime() const;
	Windows::Foundation::DateTime LastAttemptedSyncTime() const;
	Windows::Foundation::IAsyncOperation<bool> SyncAsync() const;
	long long SyncStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Contacts::ContactListSyncManager, IInspectable> const & handler) const;
	template <typename F> long long SyncStatusChanged(F handler) const;
	void SyncStatusChanged(long long token) const;
};

template <typename T>
class impl_IContactConnectedServiceAccount
{
	auto shim() const { return impl::shim<T, IContactConnectedServiceAccount>(this); }

public:

	hstring Id() const;
	void Id(hstring_ref value) const;
	hstring ServiceName() const;
	void ServiceName(hstring_ref value) const;
};

template <typename T>
class impl_IContactSignificantOther
{
	auto shim() const { return impl::shim<T, IContactSignificantOther>(this); }

public:

	hstring Name() const;
	void Name(hstring_ref value) const;
	hstring Description() const;
	void Description(hstring_ref value) const;
};

template <typename T>
class impl_IContactSignificantOther2
{
	auto shim() const { return impl::shim<T, IContactSignificantOther2>(this); }

public:

	Windows::ApplicationModel::Contacts::ContactRelationship Relationship() const;
	void Relationship(Windows::ApplicationModel::Contacts::ContactRelationship value) const;
};

template <typename T>
class impl_IContactWebsite
{
	auto shim() const { return impl::shim<T, IContactWebsite>(this); }

public:

	Windows::Foundation::Uri Uri() const;
	void Uri(Windows::Foundation::Uri const & value) const;
	hstring Description() const;
	void Description(hstring_ref value) const;
};

template <typename T>
class impl_IContactWebsite2
{
	auto shim() const { return impl::shim<T, IContactWebsite2>(this); }

public:

	hstring RawValue() const;
	void RawValue(hstring_ref value) const;
};

template <typename T>
class impl_IContactEmail
{
	auto shim() const { return impl::shim<T, IContactEmail>(this); }

public:

	hstring Address() const;
	void Address(hstring_ref value) const;
	Windows::ApplicationModel::Contacts::ContactEmailKind Kind() const;
	void Kind(Windows::ApplicationModel::Contacts::ContactEmailKind value) const;
	hstring Description() const;
	void Description(hstring_ref value) const;
};

template <typename T>
class impl_IContactPhone
{
	auto shim() const { return impl::shim<T, IContactPhone>(this); }

public:

	hstring Number() const;
	void Number(hstring_ref value) const;
	Windows::ApplicationModel::Contacts::ContactPhoneKind Kind() const;
	void Kind(Windows::ApplicationModel::Contacts::ContactPhoneKind value) const;
	hstring Description() const;
	void Description(hstring_ref value) const;
};

template <typename T>
class impl_IContactAddress
{
	auto shim() const { return impl::shim<T, IContactAddress>(this); }

public:

	hstring StreetAddress() const;
	void StreetAddress(hstring_ref value) const;
	hstring Locality() const;
	void Locality(hstring_ref value) const;
	hstring Region() const;
	void Region(hstring_ref value) const;
	hstring Country() const;
	void Country(hstring_ref value) const;
	hstring PostalCode() const;
	void PostalCode(hstring_ref value) const;
	Windows::ApplicationModel::Contacts::ContactAddressKind Kind() const;
	void Kind(Windows::ApplicationModel::Contacts::ContactAddressKind value) const;
	hstring Description() const;
	void Description(hstring_ref value) const;
};

template <typename T>
class impl_IContactDate
{
	auto shim() const { return impl::shim<T, IContactDate>(this); }

public:

	Windows::Foundation::IReference<unsigned> Day() const;
	void Day(Windows::Foundation::IReference<unsigned> const & value) const;
	Windows::Foundation::IReference<unsigned> Month() const;
	void Month(Windows::Foundation::IReference<unsigned> const & value) const;
	Windows::Foundation::IReference<int> Year() const;
	void Year(Windows::Foundation::IReference<int> const & value) const;
	Windows::ApplicationModel::Contacts::ContactDateKind Kind() const;
	void Kind(Windows::ApplicationModel::Contacts::ContactDateKind value) const;
	hstring Description() const;
	void Description(hstring_ref value) const;
};

template <typename T>
class impl_IContactJobInfo
{
	auto shim() const { return impl::shim<T, IContactJobInfo>(this); }

public:

	hstring CompanyName() const;
	void CompanyName(hstring_ref value) const;
	hstring CompanyYomiName() const;
	void CompanyYomiName(hstring_ref value) const;
	hstring Department() const;
	void Department(hstring_ref value) const;
	hstring Title() const;
	void Title(hstring_ref value) const;
	hstring Manager() const;
	void Manager(hstring_ref value) const;
	hstring Office() const;
	void Office(hstring_ref value) const;
	hstring CompanyAddress() const;
	void CompanyAddress(hstring_ref value) const;
	hstring Description() const;
	void Description(hstring_ref value) const;
};

template <typename T>
class impl_IContact
{
	auto shim() const { return impl::shim<T, IContact>(this); }

public:

	hstring Name() const;
	void Name(hstring_ref value) const;
	Windows::Storage::Streams::IRandomAccessStreamReference Thumbnail() const;
	void Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::IContactField> Fields() const;
};

template <typename T>
class impl_IContactField
{
	auto shim() const { return impl::shim<T, IContactField>(this); }

public:

	Windows::ApplicationModel::Contacts::ContactFieldType Type() const;
	Windows::ApplicationModel::Contacts::ContactFieldCategory Category() const;
	hstring Name() const;
	hstring Value() const;
};

template <typename T>
class impl_IContactName
{
	auto shim() const { return impl::shim<T, IContactName>(this); }

public:

	hstring FirstName() const;
	void FirstName(hstring_ref value) const;
	hstring LastName() const;
	void LastName(hstring_ref value) const;
	hstring MiddleName() const;
	void MiddleName(hstring_ref value) const;
	hstring YomiGivenName() const;
	void YomiGivenName(hstring_ref value) const;
	hstring YomiFamilyName() const;
	void YomiFamilyName(hstring_ref value) const;
	hstring HonorificNameSuffix() const;
	void HonorificNameSuffix(hstring_ref value) const;
	hstring HonorificNamePrefix() const;
	void HonorificNamePrefix(hstring_ref value) const;
	hstring DisplayName() const;
	hstring YomiDisplayName() const;
};

template <typename T>
class impl_IContact2
{
	auto shim() const { return impl::shim<T, IContact2>(this); }

public:

	hstring Id() const;
	void Id(hstring_ref value) const;
	hstring Notes() const;
	void Notes(hstring_ref value) const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactPhone> Phones() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactEmail> Emails() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactAddress> Addresses() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount> ConnectedServiceAccounts() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactDate> ImportantDates() const;
	Windows::Foundation::Collections::IVector<hstring> DataSuppliers() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactJobInfo> JobInfo() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactSignificantOther> SignificantOthers() const;
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactWebsite> Websites() const;
	Windows::Foundation::Collections::IPropertySet ProviderProperties() const;
};

template <typename T>
class impl_IContact3
{
	auto shim() const { return impl::shim<T, IContact3>(this); }

public:

	hstring ContactListId() const;
	Windows::Foundation::DateTime DisplayPictureUserUpdateTime() const;
	void DisplayPictureUserUpdateTime(Windows::Foundation::DateTime const & value) const;
	bool IsMe() const;
	hstring AggregateId() const;
	hstring RemoteId() const;
	void RemoteId(hstring_ref value) const;
	hstring RingToneToken() const;
	void RingToneToken(hstring_ref value) const;
	bool IsDisplayPictureManuallySet() const;
	Windows::Storage::Streams::IRandomAccessStreamReference LargeDisplayPicture() const;
	Windows::Storage::Streams::IRandomAccessStreamReference SmallDisplayPicture() const;
	Windows::Storage::Streams::IRandomAccessStreamReference SourceDisplayPicture() const;
	void SourceDisplayPicture(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const;
	hstring TextToneToken() const;
	void TextToneToken(hstring_ref value) const;
	bool IsAggregate() const;
	hstring FullName() const;
	hstring DisplayNameOverride() const;
	void DisplayNameOverride(hstring_ref value) const;
	hstring Nickname() const;
	void Nickname(hstring_ref value) const;
	hstring SortName() const;
};

template <typename T>
class impl_IContactChange
{
	auto shim() const { return impl::shim<T, IContactChange>(this); }

public:

	Windows::ApplicationModel::Contacts::ContactChangeType ChangeType() const;
	Windows::ApplicationModel::Contacts::Contact Contact() const;
};

template <typename T>
class impl_IContactChangedDeferral
{
	auto shim() const { return impl::shim<T, IContactChangedDeferral>(this); }

public:

	void Complete() const;
};

template <typename T>
class impl_IContactChangedEventArgs
{
	auto shim() const { return impl::shim<T, IContactChangedEventArgs>(this); }

public:

	Windows::ApplicationModel::Contacts::ContactChangedDeferral GetDeferral() const;
};

template <typename T>
class impl_IContactChangeReader
{
	auto shim() const { return impl::shim<T, IContactChangeReader>(this); }

public:

	void AcceptChanges() const;
	void AcceptChangesThrough(Windows::ApplicationModel::Contacts::ContactChange const & lastChangeToAccept) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactChange>> ReadBatchAsync() const;
};

template <typename T>
class impl_IContactChangeTracker
{
	auto shim() const { return impl::shim<T, IContactChangeTracker>(this); }

public:

	void Enable() const;
	Windows::ApplicationModel::Contacts::ContactChangeReader GetChangeReader() const;
	void Reset() const;
};

template <typename T>
class impl_IContactReader
{
	auto shim() const { return impl::shim<T, IContactReader>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactBatch> ReadBatchAsync() const;
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactMatchReason> GetMatchingPropertiesWithMatchReason(Windows::ApplicationModel::Contacts::Contact const & contact) const;
};

template <typename T>
class impl_IContactQueryTextSearch
{
	auto shim() const { return impl::shim<T, IContactQueryTextSearch>(this); }

public:

	Windows::ApplicationModel::Contacts::ContactQuerySearchFields Fields() const;
	void Fields(Windows::ApplicationModel::Contacts::ContactQuerySearchFields value) const;
	hstring Text() const;
	void Text(hstring_ref value) const;
	Windows::ApplicationModel::Contacts::ContactQuerySearchScope SearchScope() const;
	void SearchScope(Windows::ApplicationModel::Contacts::ContactQuerySearchScope value) const;
};

template <typename T>
class impl_IContactQueryOptionsFactory
{
	auto shim() const { return impl::shim<T, IContactQueryOptionsFactory>(this); }

public:

	Windows::ApplicationModel::Contacts::ContactQueryOptions CreateWithText(hstring_ref text) const;
	Windows::ApplicationModel::Contacts::ContactQueryOptions CreateWithTextAndFields(hstring_ref text, Windows::ApplicationModel::Contacts::ContactQuerySearchFields fields) const;
};

template <typename T>
class impl_IContactQueryOptions
{
	auto shim() const { return impl::shim<T, IContactQueryOptions>(this); }

public:

	Windows::ApplicationModel::Contacts::ContactQueryTextSearch TextSearch() const;
	Windows::Foundation::Collections::IVector<hstring> ContactListIds() const;
	bool IncludeContactsFromHiddenLists() const;
	void IncludeContactsFromHiddenLists(bool value) const;
	Windows::ApplicationModel::Contacts::ContactQueryDesiredFields DesiredFields() const;
	void DesiredFields(Windows::ApplicationModel::Contacts::ContactQueryDesiredFields value) const;
	Windows::ApplicationModel::Contacts::ContactAnnotationOperations DesiredOperations() const;
	void DesiredOperations(Windows::ApplicationModel::Contacts::ContactAnnotationOperations value) const;
	Windows::Foundation::Collections::IVector<hstring> AnnotationListIds() const;
};

template <typename T>
class impl_IContactBatch
{
	auto shim() const { return impl::shim<T, IContactBatch>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact> Contacts() const;
	Windows::ApplicationModel::Contacts::ContactBatchStatus Status() const;
};

template <typename T>
class impl_IContactMatchReason
{
	auto shim() const { return impl::shim<T, IContactMatchReason>(this); }

public:

	Windows::ApplicationModel::Contacts::ContactMatchReasonKind Field() const;
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment> Segments() const;
	hstring Text() const;
};

template <typename T>
class impl_IContactLaunchActionVerbsStatics
{
	auto shim() const { return impl::shim<T, IContactLaunchActionVerbsStatics>(this); }

public:

	hstring Call() const;
	hstring Message() const;
	hstring Map() const;
	hstring Post() const;
	hstring VideoCall() const;
};

template <typename T>
class impl_IContactLocationField
{
	auto shim() const { return impl::shim<T, IContactLocationField>(this); }

public:

	hstring UnstructuredAddress() const;
	hstring Street() const;
	hstring City() const;
	hstring Region() const;
	hstring Country() const;
	hstring PostalCode() const;
};

template <typename T>
class impl_IContactInstantMessageField
{
	auto shim() const { return impl::shim<T, IContactInstantMessageField>(this); }

public:

	hstring UserName() const;
	hstring Service() const;
	hstring DisplayText() const;
	Windows::Foundation::Uri LaunchUri() const;
};

template <typename T>
class impl_IKnownContactFieldStatics
{
	auto shim() const { return impl::shim<T, IKnownContactFieldStatics>(this); }

public:

	hstring Email() const;
	hstring PhoneNumber() const;
	hstring Location() const;
	hstring InstantMessage() const;
	Windows::ApplicationModel::Contacts::ContactFieldType ConvertNameToType(hstring_ref name) const;
	hstring ConvertTypeToName(Windows::ApplicationModel::Contacts::ContactFieldType type) const;
};

template <typename T>
class impl_IContactInformation
{
	auto shim() const { return impl::shim<T, IContactInformation>(this); }

public:

	hstring Name() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> GetThumbnailAsync() const;
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> Emails() const;
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> PhoneNumbers() const;
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactLocationField> Locations() const;
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactInstantMessageField> InstantMessages() const;
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> CustomFields() const;
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> QueryCustomFields(hstring_ref customName) const;
};

template <typename T>
class impl_IContactFieldFactory
{
	auto shim() const { return impl::shim<T, IContactFieldFactory>(this); }

public:

	Windows::ApplicationModel::Contacts::ContactField CreateField(hstring_ref value, Windows::ApplicationModel::Contacts::ContactFieldType type) const;
	Windows::ApplicationModel::Contacts::ContactField CreateField(hstring_ref value, Windows::ApplicationModel::Contacts::ContactFieldType type, Windows::ApplicationModel::Contacts::ContactFieldCategory category) const;
	Windows::ApplicationModel::Contacts::ContactField CreateField(hstring_ref name, hstring_ref value, Windows::ApplicationModel::Contacts::ContactFieldType type, Windows::ApplicationModel::Contacts::ContactFieldCategory category) const;
};

template <typename T>
class impl_IContactLocationFieldFactory
{
	auto shim() const { return impl::shim<T, IContactLocationFieldFactory>(this); }

public:

	Windows::ApplicationModel::Contacts::ContactLocationField CreateLocation(hstring_ref unstructuredAddress) const;
	Windows::ApplicationModel::Contacts::ContactLocationField CreateLocation(hstring_ref unstructuredAddress, Windows::ApplicationModel::Contacts::ContactFieldCategory category) const;
	Windows::ApplicationModel::Contacts::ContactLocationField CreateLocation(hstring_ref unstructuredAddress, Windows::ApplicationModel::Contacts::ContactFieldCategory category, hstring_ref street, hstring_ref city, hstring_ref region, hstring_ref country, hstring_ref postalCode) const;
};

template <typename T>
class impl_IContactInstantMessageFieldFactory
{
	auto shim() const { return impl::shim<T, IContactInstantMessageFieldFactory>(this); }

public:

	Windows::ApplicationModel::Contacts::ContactInstantMessageField CreateInstantMessage(hstring_ref userName) const;
	Windows::ApplicationModel::Contacts::ContactInstantMessageField CreateInstantMessage(hstring_ref userName, Windows::ApplicationModel::Contacts::ContactFieldCategory category) const;
	Windows::ApplicationModel::Contacts::ContactInstantMessageField CreateInstantMessage(hstring_ref userName, Windows::ApplicationModel::Contacts::ContactFieldCategory category, hstring_ref service, hstring_ref displayText, Windows::Foundation::Uri const & verb) const;
};

template <typename T>
class impl_IContactPicker
{
	auto shim() const { return impl::shim<T, IContactPicker>(this); }

public:

	hstring CommitButtonText() const;
	void CommitButtonText(hstring_ref value) const;
	Windows::ApplicationModel::Contacts::ContactSelectionMode SelectionMode() const;
	void SelectionMode(Windows::ApplicationModel::Contacts::ContactSelectionMode value) const;
	Windows::Foundation::Collections::IVector<hstring> DesiredFields() const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactInformation> PickSingleContactAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactInformation>> PickMultipleContactsAsync() const;
};

template <typename T>
class impl_IContactPicker2
{
	auto shim() const { return impl::shim<T, IContactPicker2>(this); }

public:

	Windows::Foundation::Collections::IVector<winrt::Windows::ApplicationModel::Contacts::ContactFieldType> DesiredFieldsWithContactFieldType() const;
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> PickContactAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Contact>> PickContactsAsync() const;
};

template <typename T>
class impl_IContactCardDelayedDataLoader
{
	auto shim() const { return impl::shim<T, IContactCardDelayedDataLoader>(this); }

public:

	void SetData(Windows::ApplicationModel::Contacts::Contact const & contact) const;
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

template <typename T>
class impl_IContactRemovedEventArgs
{
	auto shim() const { return impl::shim<T, IContactRemovedEventArgs>(this); }

public:

	hstring Id() const;
};

template <typename T>
class impl_IContactPickerUI
{
	auto shim() const { return impl::shim<T, IContactPickerUI>(this); }

public:

	Windows::ApplicationModel::Contacts::Provider::AddContactResult AddContact(hstring_ref id, Windows::ApplicationModel::Contacts::Contact const & contact) const;
	void RemoveContact(hstring_ref id) const;
	bool ContainsContact(hstring_ref id) const;
	Windows::Foundation::Collections::IVectorView<hstring> DesiredFields() const;
	Windows::ApplicationModel::Contacts::ContactSelectionMode SelectionMode() const;
	long long ContactRemoved(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Contacts::Provider::ContactPickerUI, Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs> const & handler) const;
	template <typename F> long long ContactRemoved(F handler) const;
	void ContactRemoved(long long token) const;
};

template <typename T>
class impl_IContactPickerUI2
{
	auto shim() const { return impl::shim<T, IContactPickerUI2>(this); }

public:

	Windows::ApplicationModel::Contacts::Provider::AddContactResult AddContact(Windows::ApplicationModel::Contacts::Contact const & contact) const;
	Windows::Foundation::Collections::IVector<winrt::Windows::ApplicationModel::Contacts::ContactFieldType> DesiredFieldsWithContactFieldType() const;
};

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Core {

template <typename T>
class impl_IAppListEntry
{
	auto shim() const { return impl::shim<T, IAppListEntry>(this); }

public:

	Windows::ApplicationModel::AppDisplayInfo DisplayInfo() const;
	Windows::Foundation::IAsyncOperation<bool> LaunchAsync() const;
};

template <typename T>
class impl_IFrameworkView
{
	auto shim() const { return impl::shim<T, IFrameworkView>(this); }

public:

	void Initialize(Windows::ApplicationModel::Core::CoreApplicationView const & applicationView) const;
	void SetWindow(Windows::UI::Core::CoreWindow const & window) const;
	void Load(hstring_ref entryPoint) const;
	void Run() const;
	void Uninitialize() const;
};

template <typename T>
class impl_IFrameworkViewSource
{
	auto shim() const { return impl::shim<T, IFrameworkViewSource>(this); }

public:

	Windows::ApplicationModel::Core::IFrameworkView CreateView() const;
};

template <typename T>
class impl_ICoreApplication
{
	auto shim() const { return impl::shim<T, ICoreApplication>(this); }

public:

	hstring Id() const;
	long long Suspending(Windows::Foundation::IEventHandler<Windows::ApplicationModel::SuspendingEventArgs> const & handler) const;
	template <typename F> long long Suspending(F handler) const;
	void Suspending(long long token) const;
	long long Resuming(Windows::Foundation::IEventHandler<IInspectable> const & handler) const;
	template <typename F> long long Resuming(F handler) const;
	void Resuming(long long token) const;
	Windows::Foundation::Collections::IPropertySet Properties() const;
	Windows::ApplicationModel::Core::CoreApplicationView GetCurrentView() const;
	void Run(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource) const;
	void RunWithActivationFactories(Windows::Foundation::IGetActivationFactory const & activationFactoryCallback) const;
};

template <typename T>
class impl_ICoreApplicationUseCount
{
	auto shim() const { return impl::shim<T, ICoreApplicationUseCount>(this); }

public:

	void IncrementApplicationUseCount() const;
	void DecrementApplicationUseCount() const;
};

template <typename T>
class impl_ICoreApplicationExit
{
	auto shim() const { return impl::shim<T, ICoreApplicationExit>(this); }

public:

	void Exit() const;
	long long Exiting(Windows::Foundation::IEventHandler<IInspectable> const & handler) const;
	template <typename F> long long Exiting(F handler) const;
	void Exiting(long long token) const;
};

template <typename T>
class impl_ICoreImmersiveApplication
{
	auto shim() const { return impl::shim<T, ICoreImmersiveApplication>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::CoreApplicationView> Views() const;
	Windows::ApplicationModel::Core::CoreApplicationView CreateNewView(hstring_ref runtimeType, hstring_ref entryPoint) const;
	Windows::ApplicationModel::Core::CoreApplicationView MainView() const;
};

template <typename T>
class impl_ICoreImmersiveApplication2
{
	auto shim() const { return impl::shim<T, ICoreImmersiveApplication2>(this); }

public:

	Windows::ApplicationModel::Core::CoreApplicationView CreateNewView() const;
};

template <typename T>
class impl_ICoreImmersiveApplication3
{
	auto shim() const { return impl::shim<T, ICoreImmersiveApplication3>(this); }

public:

	Windows::ApplicationModel::Core::CoreApplicationView CreateNewView(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource) const;
};

template <typename T>
class impl_ICoreApplicationUnhandledError
{
	auto shim() const { return impl::shim<T, ICoreApplicationUnhandledError>(this); }

public:

	long long UnhandledErrorDetected(Windows::Foundation::IEventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs> const & handler) const;
	template <typename F> long long UnhandledErrorDetected(F handler) const;
	void UnhandledErrorDetected(long long token) const;
};

template <typename T>
class impl_ICoreApplicationView
{
	auto shim() const { return impl::shim<T, ICoreApplicationView>(this); }

public:

	Windows::UI::Core::CoreWindow CoreWindow() const;
	long long Activated(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationView, Windows::ApplicationModel::Activation::IActivatedEventArgs> const & handler) const;
	template <typename F> long long Activated(F handler) const;
	void Activated(long long token) const;
	bool IsMain() const;
	bool IsHosted() const;
};

template <typename T>
class impl_ICoreApplicationView2
{
	auto shim() const { return impl::shim<T, ICoreApplicationView2>(this); }

public:

	Windows::UI::Core::CoreDispatcher Dispatcher() const;
};

template <typename T>
class impl_ICoreApplicationView3
{
	auto shim() const { return impl::shim<T, ICoreApplicationView3>(this); }

public:

	bool IsComponent() const;
	Windows::ApplicationModel::Core::CoreApplicationViewTitleBar TitleBar() const;
	long long HostedViewClosing(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationView, Windows::ApplicationModel::Core::HostedViewClosingEventArgs> const & handler) const;
	template <typename F> long long HostedViewClosing(F handler) const;
	void HostedViewClosing(long long token) const;
};

template <typename T>
class impl_IHostedViewClosingEventArgs
{
	auto shim() const { return impl::shim<T, IHostedViewClosingEventArgs>(this); }

public:

	Windows::Foundation::Deferral GetDeferral() const;
};

template <typename T>
class impl_ICoreApplicationViewTitleBar
{
	auto shim() const { return impl::shim<T, ICoreApplicationViewTitleBar>(this); }

public:

	void ExtendViewIntoTitleBar(bool value) const;
	bool ExtendViewIntoTitleBar() const;
	double SystemOverlayLeftInset() const;
	double SystemOverlayRightInset() const;
	double Height() const;
	long long LayoutMetricsChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationViewTitleBar, IInspectable> const & handler) const;
	template <typename F> long long LayoutMetricsChanged(F handler) const;
	void LayoutMetricsChanged(long long token) const;
	bool IsVisible() const;
	long long IsVisibleChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationViewTitleBar, IInspectable> const & handler) const;
	template <typename F> long long IsVisibleChanged(F handler) const;
	void IsVisibleChanged(long long token) const;
};

template <typename T>
class impl_IUnhandledErrorDetectedEventArgs
{
	auto shim() const { return impl::shim<T, IUnhandledErrorDetectedEventArgs>(this); }

public:

	Windows::ApplicationModel::Core::UnhandledError UnhandledError() const;
};

template <typename T>
class impl_IUnhandledError
{
	auto shim() const { return impl::shim<T, IUnhandledError>(this); }

public:

	bool Handled() const;
	void Propagate() const;
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

template <typename T>
class impl_IDataProviderHandler
{
	auto shim() const { return impl::shim<T, IDataProviderHandler>(this); }

public:

	void Invoke(Windows::ApplicationModel::DataTransfer::DataProviderRequest const & request) const;
};

template <typename T>
class impl_IStandardDataFormatsStatics
{
	auto shim() const { return impl::shim<T, IStandardDataFormatsStatics>(this); }

public:

	hstring Text() const;
	hstring Uri() const;
	hstring Html() const;
	hstring Rtf() const;
	hstring Bitmap() const;
	hstring StorageItems() const;
};

template <typename T>
class impl_IStandardDataFormatsStatics2
{
	auto shim() const { return impl::shim<T, IStandardDataFormatsStatics2>(this); }

public:

	hstring WebLink() const;
	hstring ApplicationLink() const;
};

template <typename T>
class impl_IDataPackagePropertySetView
{
	auto shim() const { return impl::shim<T, IDataPackagePropertySetView>(this); }

public:

	hstring Title() const;
	hstring Description() const;
	Windows::Storage::Streams::RandomAccessStreamReference Thumbnail() const;
	Windows::Foundation::Collections::IVectorView<hstring> FileTypes() const;
	hstring ApplicationName() const;
	Windows::Foundation::Uri ApplicationListingUri() const;
};

template <typename T>
class impl_IDataPackagePropertySetView2
{
	auto shim() const { return impl::shim<T, IDataPackagePropertySetView2>(this); }

public:

	hstring PackageFamilyName() const;
	Windows::Foundation::Uri ContentSourceWebLink() const;
	Windows::Foundation::Uri ContentSourceApplicationLink() const;
	Windows::Storage::Streams::IRandomAccessStreamReference Square30x30Logo() const;
	Windows::UI::Color LogoBackgroundColor() const;
};

template <typename T>
class impl_IDataPackagePropertySetView3
{
	auto shim() const { return impl::shim<T, IDataPackagePropertySetView3>(this); }

public:

	hstring EnterpriseId() const;
};

template <typename T>
class impl_IDataPackagePropertySet
{
	auto shim() const { return impl::shim<T, IDataPackagePropertySet>(this); }

public:

	hstring Title() const;
	void Title(hstring_ref value) const;
	hstring Description() const;
	void Description(hstring_ref value) const;
	Windows::Storage::Streams::IRandomAccessStreamReference Thumbnail() const;
	void Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const;
	Windows::Foundation::Collections::IVector<hstring> FileTypes() const;
	hstring ApplicationName() const;
	void ApplicationName(hstring_ref value) const;
	Windows::Foundation::Uri ApplicationListingUri() const;
	void ApplicationListingUri(Windows::Foundation::Uri const & value) const;
};

template <typename T>
class impl_IDataPackagePropertySet2
{
	auto shim() const { return impl::shim<T, IDataPackagePropertySet2>(this); }

public:

	Windows::Foundation::Uri ContentSourceWebLink() const;
	void ContentSourceWebLink(Windows::Foundation::Uri const & value) const;
	Windows::Foundation::Uri ContentSourceApplicationLink() const;
	void ContentSourceApplicationLink(Windows::Foundation::Uri const & value) const;
	hstring PackageFamilyName() const;
	void PackageFamilyName(hstring_ref value) const;
	Windows::Storage::Streams::IRandomAccessStreamReference Square30x30Logo() const;
	void Square30x30Logo(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const;
	Windows::UI::Color LogoBackgroundColor() const;
	void LogoBackgroundColor(Windows::UI::Color const & value) const;
};

template <typename T>
class impl_IDataPackagePropertySet3
{
	auto shim() const { return impl::shim<T, IDataPackagePropertySet3>(this); }

public:

	hstring EnterpriseId() const;
	void EnterpriseId(hstring_ref value) const;
};

template <typename T>
class impl_IDataProviderDeferral
{
	auto shim() const { return impl::shim<T, IDataProviderDeferral>(this); }

public:

	void Complete() const;
};

template <typename T>
class impl_IDataProviderRequest
{
	auto shim() const { return impl::shim<T, IDataProviderRequest>(this); }

public:

	hstring FormatId() const;
	Windows::Foundation::DateTime Deadline() const;
	Windows::ApplicationModel::DataTransfer::DataProviderDeferral GetDeferral() const;
	void SetData(IInspectable const & value) const;
};

template <typename T>
class impl_IOperationCompletedEventArgs
{
	auto shim() const { return impl::shim<T, IOperationCompletedEventArgs>(this); }

public:

	Windows::ApplicationModel::DataTransfer::DataPackageOperation Operation() const;
};

template <typename T>
class impl_IOperationCompletedEventArgs2
{
	auto shim() const { return impl::shim<T, IOperationCompletedEventArgs2>(this); }

public:

	hstring AcceptedFormatId() const;
};

template <typename T>
class impl_IDataPackageView
{
	auto shim() const { return impl::shim<T, IDataPackageView>(this); }

public:

	Windows::ApplicationModel::DataTransfer::DataPackagePropertySetView Properties() const;
	Windows::ApplicationModel::DataTransfer::DataPackageOperation RequestedOperation() const;
	void ReportOperationCompleted(Windows::ApplicationModel::DataTransfer::DataPackageOperation value) const;
	Windows::Foundation::Collections::IVectorView<hstring> AvailableFormats() const;
	bool Contains(hstring_ref formatId) const;
	Windows::Foundation::IAsyncOperation<IInspectable> GetDataAsync(hstring_ref formatId) const;
	Windows::Foundation::IAsyncOperation<hstring> GetTextAsync() const;
	Windows::Foundation::IAsyncOperation<hstring> GetTextAsync(hstring_ref formatId) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> GetUriAsync() const;
	Windows::Foundation::IAsyncOperation<hstring> GetHtmlFormatAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<hstring, Windows::Storage::Streams::RandomAccessStreamReference>> GetResourceMapAsync() const;
	Windows::Foundation::IAsyncOperation<hstring> GetRtfAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> GetBitmapAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> GetStorageItemsAsync() const;
};

template <typename T>
class impl_IDataPackageView2
{
	auto shim() const { return impl::shim<T, IDataPackageView2>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> GetApplicationLinkAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> GetWebLinkAsync() const;
};

template <typename T>
class impl_IDataPackageView3
{
	auto shim() const { return impl::shim<T, IDataPackageView3>(this); }

public:

	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> RequestAccessAsync() const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> RequestAccessAsync(hstring_ref enterpriseId) const;
	Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult UnlockAndAssumeEnterpriseIdentity() const;
};

template <typename T>
class impl_IDataPackageView4
{
	auto shim() const { return impl::shim<T, IDataPackageView4>(this); }

public:

	void SetAcceptedFormatId(hstring_ref formatId) const;
};

template <typename T>
class impl_IDataPackage
{
	auto shim() const { return impl::shim<T, IDataPackage>(this); }

public:

	Windows::ApplicationModel::DataTransfer::DataPackageView GetView() const;
	Windows::ApplicationModel::DataTransfer::DataPackagePropertySet Properties() const;
	Windows::ApplicationModel::DataTransfer::DataPackageOperation RequestedOperation() const;
	void RequestedOperation(Windows::ApplicationModel::DataTransfer::DataPackageOperation value) const;
	long long OperationCompleted(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, Windows::ApplicationModel::DataTransfer::OperationCompletedEventArgs> const & handler) const;
	template <typename F> long long OperationCompleted(F handler) const;
	void OperationCompleted(long long eventCookie) const;
	long long Destroyed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, IInspectable> const & handler) const;
	template <typename F> long long Destroyed(F handler) const;
	void Destroyed(long long eventCookie) const;
	void SetData(hstring_ref formatId, IInspectable const & value) const;
	void SetDataProvider(hstring_ref formatId, Windows::ApplicationModel::DataTransfer::IDataProviderHandler const & delayRenderer) const;
	template <typename F> void SetDataProvider(hstring_ref formatId, F delayRenderer) const;
	void SetText(hstring_ref value) const;
	void SetUri(Windows::Foundation::Uri const & value) const;
	void SetHtmlFormat(hstring_ref value) const;
	Windows::Foundation::Collections::IMap<hstring, Windows::Storage::Streams::RandomAccessStreamReference> ResourceMap() const;
	void SetRtf(hstring_ref value) const;
	void SetBitmap(Windows::Storage::Streams::RandomAccessStreamReference const & value) const;
	void SetStorageItems(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem> const & value) const;
	void SetStorageItems(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem> const & value, bool readOnly) const;
};

template <typename T>
class impl_IDataPackage2
{
	auto shim() const { return impl::shim<T, IDataPackage2>(this); }

public:

	void SetApplicationLink(Windows::Foundation::Uri const & value) const;
	void SetWebLink(Windows::Foundation::Uri const & value) const;
};

template <typename T>
class impl_IHtmlFormatHelperStatics
{
	auto shim() const { return impl::shim<T, IHtmlFormatHelperStatics>(this); }

public:

	hstring GetStaticFragment(hstring_ref htmlFormat) const;
	hstring CreateHtmlFormat(hstring_ref htmlFragment) const;
};

template <typename T>
class impl_IClipboardStatics
{
	auto shim() const { return impl::shim<T, IClipboardStatics>(this); }

public:

	Windows::ApplicationModel::DataTransfer::DataPackageView GetContent() const;
	void SetContent(Windows::ApplicationModel::DataTransfer::DataPackage const & content) const;
	void Flush() const;
	void Clear() const;
	long long ContentChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler) const;
	template <typename F> long long ContentChanged(F changeHandler) const;
	void ContentChanged(long long token) const;
};

template <typename T>
class impl_IDataRequestDeferral
{
	auto shim() const { return impl::shim<T, IDataRequestDeferral>(this); }

public:

	void Complete() const;
};

template <typename T>
class impl_IDataRequest
{
	auto shim() const { return impl::shim<T, IDataRequest>(this); }

public:

	Windows::ApplicationModel::DataTransfer::DataPackage Data() const;
	void Data(Windows::ApplicationModel::DataTransfer::DataPackage const & value) const;
	Windows::Foundation::DateTime Deadline() const;
	void FailWithDisplayText(hstring_ref value) const;
	Windows::ApplicationModel::DataTransfer::DataRequestDeferral GetDeferral() const;
};

template <typename T>
class impl_IDataRequestedEventArgs
{
	auto shim() const { return impl::shim<T, IDataRequestedEventArgs>(this); }

public:

	Windows::ApplicationModel::DataTransfer::DataRequest Request() const;
};

template <typename T>
class impl_ITargetApplicationChosenEventArgs
{
	auto shim() const { return impl::shim<T, ITargetApplicationChosenEventArgs>(this); }

public:

	hstring ApplicationName() const;
};

template <typename T>
class impl_IDataTransferManager
{
	auto shim() const { return impl::shim<T, IDataTransferManager>(this); }

public:

	long long DataRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::DataRequestedEventArgs> const & eventHandler) const;
	template <typename F> long long DataRequested(F eventHandler) const;
	void DataRequested(long long eventCookie) const;
	long long TargetApplicationChosen(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::TargetApplicationChosenEventArgs> const & eventHandler) const;
	template <typename F> long long TargetApplicationChosen(F eventHandler) const;
	void TargetApplicationChosen(long long eventCookie) const;
};

template <typename T>
class impl_IDataTransferManagerStatics
{
	auto shim() const { return impl::shim<T, IDataTransferManagerStatics>(this); }

public:

	void ShowShareUI() const;
	Windows::ApplicationModel::DataTransfer::DataTransferManager GetForCurrentView() const;
};

template <typename T>
class impl_ISharedStorageAccessManagerStatics
{
	auto shim() const { return impl::shim<T, ISharedStorageAccessManagerStatics>(this); }

public:

	hstring AddFile(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> RedeemTokenForFileAsync(hstring_ref token) const;
	void RemoveFile(hstring_ref token) const;
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

template <typename T>
class impl_IQuickLink
{
	auto shim() const { return impl::shim<T, IQuickLink>(this); }

public:

	hstring Title() const;
	void Title(hstring_ref value) const;
	Windows::Storage::Streams::RandomAccessStreamReference Thumbnail() const;
	void Thumbnail(Windows::Storage::Streams::RandomAccessStreamReference const & value) const;
	hstring Id() const;
	void Id(hstring_ref value) const;
	Windows::Foundation::Collections::IVector<hstring> SupportedDataFormats() const;
	Windows::Foundation::Collections::IVector<hstring> SupportedFileTypes() const;
};

template <typename T>
class impl_IShareOperation
{
	auto shim() const { return impl::shim<T, IShareOperation>(this); }

public:

	Windows::ApplicationModel::DataTransfer::DataPackageView Data() const;
	hstring QuickLinkId() const;
	void RemoveThisQuickLink() const;
	void ReportStarted() const;
	void ReportDataRetrieved() const;
	void ReportSubmittedBackgroundTask() const;
	void ReportCompleted(Windows::ApplicationModel::DataTransfer::ShareTarget::QuickLink const & quicklink) const;
	void ReportCompleted() const;
	void ReportError(hstring_ref value) const;
};

template <typename T>
class impl_IShareOperation2
{
	auto shim() const { return impl::shim<T, IShareOperation2>(this); }

public:

	void DismissUI() const;
};

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Search {

template <typename T>
class impl_ISearchPaneQueryLinguisticDetails
{
	auto shim() const { return impl::shim<T, ISearchPaneQueryLinguisticDetails>(this); }

public:

	Windows::Foundation::Collections::IVectorView<hstring> QueryTextAlternatives() const;
	unsigned QueryTextCompositionStart() const;
	unsigned QueryTextCompositionLength() const;
};

template <typename T>
class impl_ISearchPaneVisibilityChangedEventArgs
{
	auto shim() const { return impl::shim<T, ISearchPaneVisibilityChangedEventArgs>(this); }

public:

	bool Visible() const;
};

template <typename T>
class impl_ISearchPaneQueryChangedEventArgs
{
	auto shim() const { return impl::shim<T, ISearchPaneQueryChangedEventArgs>(this); }

public:

	hstring QueryText() const;
	hstring Language() const;
	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails LinguisticDetails() const;
};

template <typename T>
class impl_ISearchPaneQuerySubmittedEventArgs
{
	auto shim() const { return impl::shim<T, ISearchPaneQuerySubmittedEventArgs>(this); }

public:

	hstring QueryText() const;
	hstring Language() const;
};

template <typename T>
class impl_ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails
{
	auto shim() const { return impl::shim<T, ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails>(this); }

public:

	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails LinguisticDetails() const;
};

template <typename T>
class impl_ISearchPaneResultSuggestionChosenEventArgs
{
	auto shim() const { return impl::shim<T, ISearchPaneResultSuggestionChosenEventArgs>(this); }

public:

	hstring Tag() const;
};

template <typename T>
class impl_ISearchSuggestionCollection
{
	auto shim() const { return impl::shim<T, ISearchSuggestionCollection>(this); }

public:

	unsigned Size() const;
	void AppendQuerySuggestion(hstring_ref text) const;
	void AppendQuerySuggestions(Windows::Foundation::Collections::IIterable<hstring> const & suggestions) const;
	void AppendResultSuggestion(hstring_ref text, hstring_ref detailText, hstring_ref tag, Windows::Storage::Streams::IRandomAccessStreamReference const & image, hstring_ref imageAlternateText) const;
	void AppendSearchSeparator(hstring_ref label) const;
};

template <typename T>
class impl_ISearchPaneSuggestionsRequestDeferral
{
	auto shim() const { return impl::shim<T, ISearchPaneSuggestionsRequestDeferral>(this); }

public:

	void Complete() const;
};

template <typename T>
class impl_ISearchPaneSuggestionsRequest
{
	auto shim() const { return impl::shim<T, ISearchPaneSuggestionsRequest>(this); }

public:

	bool IsCanceled() const;
	Windows::ApplicationModel::Search::SearchSuggestionCollection SearchSuggestionCollection() const;
	Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestDeferral GetDeferral() const;
};

template <typename T>
class impl_ISearchPaneSuggestionsRequestedEventArgs
{
	auto shim() const { return impl::shim<T, ISearchPaneSuggestionsRequestedEventArgs>(this); }

public:

	Windows::ApplicationModel::Search::SearchPaneSuggestionsRequest Request() const;
};

template <typename T>
class impl_ILocalContentSuggestionSettings
{
	auto shim() const { return impl::shim<T, ILocalContentSuggestionSettings>(this); }

public:

	void Enabled(bool value) const;
	bool Enabled() const;
	Windows::Foundation::Collections::IVector<Windows::Storage::StorageFolder> Locations() const;
	void AqsFilter(hstring_ref value) const;
	hstring AqsFilter() const;
	Windows::Foundation::Collections::IVector<hstring> PropertiesToMatch() const;
};

template <typename T>
class impl_ISearchPaneStatics
{
	auto shim() const { return impl::shim<T, ISearchPaneStatics>(this); }

public:

	Windows::ApplicationModel::Search::SearchPane GetForCurrentView() const;
};

template <typename T>
class impl_ISearchPaneStaticsWithHideThisApplication
{
	auto shim() const { return impl::shim<T, ISearchPaneStaticsWithHideThisApplication>(this); }

public:

	void HideThisApplication() const;
};

template <typename T>
class impl_ISearchPane
{
	auto shim() const { return impl::shim<T, ISearchPane>(this); }

public:

	void SearchHistoryEnabled(bool value) const;
	bool SearchHistoryEnabled() const;
	void SearchHistoryContext(hstring_ref value) const;
	hstring SearchHistoryContext() const;
	void PlaceholderText(hstring_ref value) const;
	hstring PlaceholderText() const;
	hstring QueryText() const;
	hstring Language() const;
	bool Visible() const;
	long long VisibilityChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneVisibilityChangedEventArgs> const & handler) const;
	template <typename F> long long VisibilityChanged(F handler) const;
	void VisibilityChanged(long long token) const;
	long long QueryChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQueryChangedEventArgs> const & handler) const;
	template <typename F> long long QueryChanged(F handler) const;
	void QueryChanged(long long token) const;
	long long SuggestionsRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestedEventArgs> const & handler) const;
	template <typename F> long long SuggestionsRequested(F handler) const;
	void SuggestionsRequested(long long token) const;
	long long QuerySubmitted(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQuerySubmittedEventArgs> const & handler) const;
	template <typename F> long long QuerySubmitted(F handler) const;
	void QuerySubmitted(long long token) const;
	long long ResultSuggestionChosen(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneResultSuggestionChosenEventArgs> const & handler) const;
	template <typename F> long long ResultSuggestionChosen(F handler) const;
	void ResultSuggestionChosen(long long token) const;
	void SetLocalContentSuggestionSettings(Windows::ApplicationModel::Search::LocalContentSuggestionSettings const & settings) const;
	void Show() const;
	void Show(hstring_ref query) const;
	void ShowOnKeyboardInput(bool value) const;
	bool ShowOnKeyboardInput() const;
	bool TrySetQueryText(hstring_ref query) const;
};

template <typename T>
class impl_ISearchQueryLinguisticDetailsFactory
{
	auto shim() const { return impl::shim<T, ISearchQueryLinguisticDetailsFactory>(this); }

public:

	Windows::ApplicationModel::Search::SearchQueryLinguisticDetails CreateInstance(Windows::Foundation::Collections::IIterable<hstring> const & queryTextAlternatives, unsigned queryTextCompositionStart, unsigned queryTextCompositionLength) const;
};

template <typename T>
class impl_ISearchQueryLinguisticDetails
{
	auto shim() const { return impl::shim<T, ISearchQueryLinguisticDetails>(this); }

public:

	Windows::Foundation::Collections::IVectorView<hstring> QueryTextAlternatives() const;
	unsigned QueryTextCompositionStart() const;
	unsigned QueryTextCompositionLength() const;
};

template <typename T>
class impl_ISearchSuggestionsRequestDeferral
{
	auto shim() const { return impl::shim<T, ISearchSuggestionsRequestDeferral>(this); }

public:

	void Complete() const;
};

template <typename T>
class impl_ISearchSuggestionsRequest
{
	auto shim() const { return impl::shim<T, ISearchSuggestionsRequest>(this); }

public:

	bool IsCanceled() const;
	Windows::ApplicationModel::Search::SearchSuggestionCollection SearchSuggestionCollection() const;
	Windows::ApplicationModel::Search::SearchSuggestionsRequestDeferral GetDeferral() const;
};

}}}}

namespace winrt { namespace Windows { namespace Data { namespace Text {

template <typename T>
class impl_IWordSegmentsTokenizingHandler
{
	auto shim() const { return impl::shim<T, IWordSegmentsTokenizingHandler>(this); }

public:

	void Invoke(Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment> const & precedingWords, Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment> const & words) const;
};

template <typename T>
class impl_ISelectableWordSegmentsTokenizingHandler
{
	auto shim() const { return impl::shim<T, ISelectableWordSegmentsTokenizingHandler>(this); }

public:

	void Invoke(Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment> const & precedingWords, Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment> const & words) const;
};

template <typename T>
class impl_ISemanticTextQueryFactory
{
	auto shim() const { return impl::shim<T, ISemanticTextQueryFactory>(this); }

public:

	Windows::Data::Text::SemanticTextQuery Create(hstring_ref aqsFilter) const;
	Windows::Data::Text::SemanticTextQuery CreateWithLanguage(hstring_ref aqsFilter, hstring_ref filterLanguage) const;
};

template <typename T>
class impl_ISemanticTextQuery
{
	auto shim() const { return impl::shim<T, ISemanticTextQuery>(this); }

public:

	Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment> Find(hstring_ref content) const;
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment> FindInProperty(hstring_ref propertyContent, hstring_ref propertyName) const;
};

template <typename T>
class impl_IUnicodeCharactersStatics
{
	auto shim() const { return impl::shim<T, IUnicodeCharactersStatics>(this); }

public:

	unsigned GetCodepointFromSurrogatePair(unsigned highSurrogate, unsigned lowSurrogate) const;
	void GetSurrogatePairFromCodepoint(unsigned codepoint, wchar_t & highSurrogate, wchar_t & lowSurrogate) const;
	bool IsHighSurrogate(unsigned codepoint) const;
	bool IsLowSurrogate(unsigned codepoint) const;
	bool IsSupplementary(unsigned codepoint) const;
	bool IsNoncharacter(unsigned codepoint) const;
	bool IsWhitespace(unsigned codepoint) const;
	bool IsAlphabetic(unsigned codepoint) const;
	bool IsCased(unsigned codepoint) const;
	bool IsUppercase(unsigned codepoint) const;
	bool IsLowercase(unsigned codepoint) const;
	bool IsIdStart(unsigned codepoint) const;
	bool IsIdContinue(unsigned codepoint) const;
	bool IsGraphemeBase(unsigned codepoint) const;
	bool IsGraphemeExtend(unsigned codepoint) const;
	Windows::Data::Text::UnicodeNumericType GetNumericType(unsigned codepoint) const;
	Windows::Data::Text::UnicodeGeneralCategory GetGeneralCategory(unsigned codepoint) const;
};

template <typename T>
class impl_IAlternateWordForm
{
	auto shim() const { return impl::shim<T, IAlternateWordForm>(this); }

public:

	Windows::Data::Text::TextSegment SourceTextSegment() const;
	hstring AlternateText() const;
	Windows::Data::Text::AlternateNormalizationFormat NormalizationFormat() const;
};

template <typename T>
class impl_ISelectableWordSegment
{
	auto shim() const { return impl::shim<T, ISelectableWordSegment>(this); }

public:

	hstring Text() const;
	Windows::Data::Text::TextSegment SourceTextSegment() const;
};

template <typename T>
class impl_IWordSegment
{
	auto shim() const { return impl::shim<T, IWordSegment>(this); }

public:

	hstring Text() const;
	Windows::Data::Text::TextSegment SourceTextSegment() const;
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::AlternateWordForm> AlternateForms() const;
};

template <typename T>
class impl_IWordsSegmenter
{
	auto shim() const { return impl::shim<T, IWordsSegmenter>(this); }

public:

	hstring ResolvedLanguage() const;
	Windows::Data::Text::WordSegment GetTokenAt(hstring_ref text, unsigned startIndex) const;
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::WordSegment> GetTokens(hstring_ref text) const;
	void Tokenize(hstring_ref text, unsigned startIndex, Windows::Data::Text::IWordSegmentsTokenizingHandler const & handler) const;
	template <typename F> void Tokenize(hstring_ref text, unsigned startIndex, F handler) const;
};

template <typename T>
class impl_IWordsSegmenterFactory
{
	auto shim() const { return impl::shim<T, IWordsSegmenterFactory>(this); }

public:

	Windows::Data::Text::WordsSegmenter CreateWithLanguage(hstring_ref language) const;
};

template <typename T>
class impl_ISelectableWordsSegmenter
{
	auto shim() const { return impl::shim<T, ISelectableWordsSegmenter>(this); }

public:

	hstring ResolvedLanguage() const;
	Windows::Data::Text::SelectableWordSegment GetTokenAt(hstring_ref text, unsigned startIndex) const;
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::SelectableWordSegment> GetTokens(hstring_ref text) const;
	void Tokenize(hstring_ref text, unsigned startIndex, Windows::Data::Text::ISelectableWordSegmentsTokenizingHandler const & handler) const;
	template <typename F> void Tokenize(hstring_ref text, unsigned startIndex, F handler) const;
};

template <typename T>
class impl_ISelectableWordsSegmenterFactory
{
	auto shim() const { return impl::shim<T, ISelectableWordsSegmenterFactory>(this); }

public:

	Windows::Data::Text::SelectableWordsSegmenter CreateWithLanguage(hstring_ref language) const;
};

template <typename T>
class impl_ITextPredictionGenerator
{
	auto shim() const { return impl::shim<T, ITextPredictionGenerator>(this); }

public:

	hstring ResolvedLanguage() const;
	bool LanguageAvailableButNotInstalled() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> GetCandidatesAsync(hstring_ref input) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> GetCandidatesAsync(hstring_ref input, unsigned maxCandidates) const;
};

template <typename T>
class impl_ITextPredictionGeneratorFactory
{
	auto shim() const { return impl::shim<T, ITextPredictionGeneratorFactory>(this); }

public:

	Windows::Data::Text::TextPredictionGenerator Create(hstring_ref languageTag) const;
};

template <typename T>
class impl_ITextConversionGenerator
{
	auto shim() const { return impl::shim<T, ITextConversionGenerator>(this); }

public:

	hstring ResolvedLanguage() const;
	bool LanguageAvailableButNotInstalled() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> GetCandidatesAsync(hstring_ref input) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> GetCandidatesAsync(hstring_ref input, unsigned maxCandidates) const;
};

template <typename T>
class impl_ITextConversionGeneratorFactory
{
	auto shim() const { return impl::shim<T, ITextConversionGeneratorFactory>(this); }

public:

	Windows::Data::Text::TextConversionGenerator Create(hstring_ref languageTag) const;
};

template <typename T>
class impl_ITextReverseConversionGenerator
{
	auto shim() const { return impl::shim<T, ITextReverseConversionGenerator>(this); }

public:

	hstring ResolvedLanguage() const;
	bool LanguageAvailableButNotInstalled() const;
	Windows::Foundation::IAsyncOperation<hstring> ConvertBackAsync(hstring_ref input) const;
};

template <typename T>
class impl_ITextReverseConversionGeneratorFactory
{
	auto shim() const { return impl::shim<T, ITextReverseConversionGeneratorFactory>(this); }

public:

	Windows::Data::Text::TextReverseConversionGenerator Create(hstring_ref languageTag) const;
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth {

template <typename T>
class impl_IBluetoothDevice
{
	auto shim() const { return impl::shim<T, IBluetoothDevice>(this); }

public:

	hstring DeviceId() const;
	Windows::Networking::HostName HostName() const;
	hstring Name() const;
	Windows::Devices::Bluetooth::BluetoothClassOfDevice ClassOfDevice() const;
	Windows::Foundation::Collections::IVectorView<Windows::Storage::Streams::IBuffer> SdpRecords() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService> RfcommServices() const;
	Windows::Devices::Bluetooth::BluetoothConnectionStatus ConnectionStatus() const;
	unsigned long long BluetoothAddress() const;
	long long NameChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothDevice, IInspectable> const & handler) const;
	template <typename F> long long NameChanged(F handler) const;
	void NameChanged(long long token) const;
	long long SdpRecordsChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothDevice, IInspectable> const & handler) const;
	template <typename F> long long SdpRecordsChanged(F handler) const;
	void SdpRecordsChanged(long long token) const;
	long long ConnectionStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothDevice, IInspectable> const & handler) const;
	template <typename F> long long ConnectionStatusChanged(F handler) const;
	void ConnectionStatusChanged(long long token) const;
};

template <typename T>
class impl_IBluetoothDevice2
{
	auto shim() const { return impl::shim<T, IBluetoothDevice2>(this); }

public:

	Windows::Devices::Enumeration::DeviceInformation DeviceInformation() const;
};

template <typename T>
class impl_IBluetoothDeviceStatics
{
	auto shim() const { return impl::shim<T, IBluetoothDeviceStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> FromIdAsync(hstring_ref deviceId) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> FromHostNameAsync(Windows::Networking::HostName const & hostName) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> FromBluetoothAddressAsync(unsigned long long address) const;
	hstring GetDeviceSelector() const;
};

template <typename T>
class impl_IBluetoothDeviceStatics2
{
	auto shim() const { return impl::shim<T, IBluetoothDeviceStatics2>(this); }

public:

	hstring GetDeviceSelectorFromPairingState(bool pairingState) const;
	hstring GetDeviceSelectorFromConnectionStatus(Windows::Devices::Bluetooth::BluetoothConnectionStatus connectionStatus) const;
	hstring GetDeviceSelectorFromDeviceName(hstring_ref deviceName) const;
	hstring GetDeviceSelectorFromBluetoothAddress(unsigned long long bluetoothAddress) const;
	hstring GetDeviceSelectorFromClassOfDevice(Windows::Devices::Bluetooth::BluetoothClassOfDevice const & classOfDevice) const;
};

template <typename T>
class impl_IBluetoothLEAppearanceCategoriesStatics
{
	auto shim() const { return impl::shim<T, IBluetoothLEAppearanceCategoriesStatics>(this); }

public:

	unsigned short Uncategorized() const;
	unsigned short Phone() const;
	unsigned short Computer() const;
	unsigned short Watch() const;
	unsigned short Clock() const;
	unsigned short Display() const;
	unsigned short RemoteControl() const;
	unsigned short EyeGlasses() const;
	unsigned short Tag() const;
	unsigned short Keyring() const;
	unsigned short MediaPlayer() const;
	unsigned short BarcodeScanner() const;
	unsigned short Thermometer() const;
	unsigned short HeartRate() const;
	unsigned short BloodPressure() const;
	unsigned short HumanInterfaceDevice() const;
	unsigned short GlucoseMeter() const;
	unsigned short RunningWalking() const;
	unsigned short Cycling() const;
	unsigned short PulseOximeter() const;
	unsigned short WeightScale() const;
	unsigned short OutdoorSportActivity() const;
};

template <typename T>
class impl_IBluetoothLEAppearanceSubcategoriesStatics
{
	auto shim() const { return impl::shim<T, IBluetoothLEAppearanceSubcategoriesStatics>(this); }

public:

	unsigned short Generic() const;
	unsigned short SportsWatch() const;
	unsigned short ThermometerEar() const;
	unsigned short HeartRateBelt() const;
	unsigned short BloodPressureArm() const;
	unsigned short BloodPressureWrist() const;
	unsigned short Keyboard() const;
	unsigned short Mouse() const;
	unsigned short Joystick() const;
	unsigned short Gamepad() const;
	unsigned short DigitizerTablet() const;
	unsigned short CardReader() const;
	unsigned short DigitalPen() const;
	unsigned short BarcodeScanner() const;
	unsigned short RunningWalkingInShoe() const;
	unsigned short RunningWalkingOnShoe() const;
	unsigned short RunningWalkingOnHip() const;
	unsigned short CyclingComputer() const;
	unsigned short CyclingSpeedSensor() const;
	unsigned short CyclingCadenceSensor() const;
	unsigned short CyclingPowerSensor() const;
	unsigned short CyclingSpeedCadenceSensor() const;
	unsigned short OximeterFingertip() const;
	unsigned short OximeterWristWorn() const;
	unsigned short LocationDisplay() const;
	unsigned short LocationNavigationDisplay() const;
	unsigned short LocationPod() const;
	unsigned short LocationNavigationPod() const;
};

template <typename T>
class impl_IBluetoothLEAppearance
{
	auto shim() const { return impl::shim<T, IBluetoothLEAppearance>(this); }

public:

	unsigned short RawValue() const;
	unsigned short Category() const;
	unsigned short SubCategory() const;
};

template <typename T>
class impl_IBluetoothLEAppearanceStatics
{
	auto shim() const { return impl::shim<T, IBluetoothLEAppearanceStatics>(this); }

public:

	Windows::Devices::Bluetooth::BluetoothLEAppearance FromRawValue(unsigned short rawValue) const;
	Windows::Devices::Bluetooth::BluetoothLEAppearance FromParts(unsigned short appearanceCategory, unsigned short appearanceSubCategory) const;
};

template <typename T>
class impl_IBluetoothLEDevice
{
	auto shim() const { return impl::shim<T, IBluetoothLEDevice>(this); }

public:

	hstring DeviceId() const;
	hstring Name() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> GattServices() const;
	Windows::Devices::Bluetooth::BluetoothConnectionStatus ConnectionStatus() const;
	unsigned long long BluetoothAddress() const;
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService GetGattService(GUID serviceUuid) const;
	long long NameChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothLEDevice, IInspectable> const & handler) const;
	template <typename F> long long NameChanged(F handler) const;
	void NameChanged(long long token) const;
	long long GattServicesChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothLEDevice, IInspectable> const & handler) const;
	template <typename F> long long GattServicesChanged(F handler) const;
	void GattServicesChanged(long long token) const;
	long long ConnectionStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothLEDevice, IInspectable> const & handler) const;
	template <typename F> long long ConnectionStatusChanged(F handler) const;
	void ConnectionStatusChanged(long long token) const;
};

template <typename T>
class impl_IBluetoothLEDevice2
{
	auto shim() const { return impl::shim<T, IBluetoothLEDevice2>(this); }

public:

	Windows::Devices::Enumeration::DeviceInformation DeviceInformation() const;
	Windows::Devices::Bluetooth::BluetoothLEAppearance Appearance() const;
	Windows::Devices::Bluetooth::BluetoothAddressType BluetoothAddressType() const;
};

template <typename T>
class impl_IBluetoothLEDeviceStatics
{
	auto shim() const { return impl::shim<T, IBluetoothLEDeviceStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> FromIdAsync(hstring_ref deviceId) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> FromBluetoothAddressAsync(unsigned long long bluetoothAddress) const;
	hstring GetDeviceSelector() const;
};

template <typename T>
class impl_IBluetoothLEDeviceStatics2
{
	auto shim() const { return impl::shim<T, IBluetoothLEDeviceStatics2>(this); }

public:

	hstring GetDeviceSelectorFromPairingState(bool pairingState) const;
	hstring GetDeviceSelectorFromConnectionStatus(Windows::Devices::Bluetooth::BluetoothConnectionStatus connectionStatus) const;
	hstring GetDeviceSelectorFromDeviceName(hstring_ref deviceName) const;
	hstring GetDeviceSelectorFromBluetoothAddress(unsigned long long bluetoothAddress) const;
	hstring GetDeviceSelectorFromBluetoothAddress(unsigned long long bluetoothAddress, Windows::Devices::Bluetooth::BluetoothAddressType bluetoothAddressType) const;
	hstring GetDeviceSelectorFromAppearance(Windows::Devices::Bluetooth::BluetoothLEAppearance const & appearance) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> FromBluetoothAddressAsync(unsigned long long bluetoothAddress, Windows::Devices::Bluetooth::BluetoothAddressType bluetoothAddressType) const;
};

template <typename T>
class impl_IBluetoothClassOfDevice
{
	auto shim() const { return impl::shim<T, IBluetoothClassOfDevice>(this); }

public:

	unsigned RawValue() const;
	Windows::Devices::Bluetooth::BluetoothMajorClass MajorClass() const;
	Windows::Devices::Bluetooth::BluetoothMinorClass MinorClass() const;
	Windows::Devices::Bluetooth::BluetoothServiceCapabilities ServiceCapabilities() const;
};

template <typename T>
class impl_IBluetoothClassOfDeviceStatics
{
	auto shim() const { return impl::shim<T, IBluetoothClassOfDeviceStatics>(this); }

public:

	Windows::Devices::Bluetooth::BluetoothClassOfDevice FromRawValue(unsigned rawValue) const;
	Windows::Devices::Bluetooth::BluetoothClassOfDevice FromParts(Windows::Devices::Bluetooth::BluetoothMajorClass majorClass, Windows::Devices::Bluetooth::BluetoothMinorClass minorClass, Windows::Devices::Bluetooth::BluetoothServiceCapabilities serviceCapabilities) const;
};

template <typename T>
class impl_IBluetoothSignalStrengthFilter
{
	auto shim() const { return impl::shim<T, IBluetoothSignalStrengthFilter>(this); }

public:

	Windows::Foundation::IReference<short> InRangeThresholdInDBm() const;
	void InRangeThresholdInDBm(Windows::Foundation::IReference<short> const & value) const;
	Windows::Foundation::IReference<short> OutOfRangeThresholdInDBm() const;
	void OutOfRangeThresholdInDBm(Windows::Foundation::IReference<short> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> OutOfRangeTimeout() const;
	void OutOfRangeTimeout(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> SamplingInterval() const;
	void SamplingInterval(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const;
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Advertisement {

template <typename T>
class impl_IBluetoothLEAdvertisement
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisement>(this); }

public:

	Windows::Foundation::IReference<winrt::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFlags> Flags() const;
	void Flags(Windows::Foundation::IReference<winrt::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFlags> const & value) const;
	hstring LocalName() const;
	void LocalName(hstring_ref value) const;
	Windows::Foundation::Collections::IVector<GUID> ServiceUuids() const;
	Windows::Foundation::Collections::IVector<Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData> ManufacturerData() const;
	Windows::Foundation::Collections::IVector<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection> DataSections() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData> GetManufacturerDataByCompanyId(unsigned short companyId) const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection> GetSectionsByType(byte type) const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementFilter
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementFilter>(this); }

public:

	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement Advertisement() const;
	void Advertisement(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement const & value) const;
	Windows::Foundation::Collections::IVector<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementBytePattern> BytePatterns() const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementWatcherStoppedEventArgs
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementWatcherStoppedEventArgs>(this); }

public:

	Windows::Devices::Bluetooth::BluetoothError Error() const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementWatcherFactory
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementWatcherFactory>(this); }

public:

	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher Create(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter const & advertisementFilter) const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementWatcher
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementWatcher>(this); }

public:

	Windows::Foundation::TimeSpan MinSamplingInterval() const;
	Windows::Foundation::TimeSpan MaxSamplingInterval() const;
	Windows::Foundation::TimeSpan MinOutOfRangeTimeout() const;
	Windows::Foundation::TimeSpan MaxOutOfRangeTimeout() const;
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcherStatus Status() const;
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEScanningMode ScanningMode() const;
	void ScanningMode(Windows::Devices::Bluetooth::Advertisement::BluetoothLEScanningMode value) const;
	Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter SignalStrengthFilter() const;
	void SignalStrengthFilter(Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter const & value) const;
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter AdvertisementFilter() const;
	void AdvertisementFilter(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter const & value) const;
	void Start() const;
	void Stop() const;
	long long Received(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementReceivedEventArgs> const & handler) const;
	template <typename F> long long Received(F handler) const;
	void Received(long long token) const;
	long long Stopped(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcherStoppedEventArgs> const & handler) const;
	template <typename F> long long Stopped(F handler) const;
	void Stopped(long long token) const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementReceivedEventArgs
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementReceivedEventArgs>(this); }

public:

	short RawSignalStrengthInDBm() const;
	unsigned long long BluetoothAddress() const;
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementType AdvertisementType() const;
	Windows::Foundation::DateTime Timestamp() const;
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement Advertisement() const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementDataSectionFactory
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementDataSectionFactory>(this); }

public:

	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection Create(byte dataType, Windows::Storage::Streams::IBuffer const & data) const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementDataSection
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementDataSection>(this); }

public:

	byte DataType() const;
	void DataType(byte value) const;
	Windows::Storage::Streams::IBuffer Data() const;
	void Data(Windows::Storage::Streams::IBuffer const & value) const;
};

template <typename T>
class impl_IBluetoothLEManufacturerDataFactory
{
	auto shim() const { return impl::shim<T, IBluetoothLEManufacturerDataFactory>(this); }

public:

	Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData Create(unsigned short companyId, Windows::Storage::Streams::IBuffer const & data) const;
};

template <typename T>
class impl_IBluetoothLEManufacturerData
{
	auto shim() const { return impl::shim<T, IBluetoothLEManufacturerData>(this); }

public:

	unsigned short CompanyId() const;
	void CompanyId(unsigned short value) const;
	Windows::Storage::Streams::IBuffer Data() const;
	void Data(Windows::Storage::Streams::IBuffer const & value) const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementBytePatternFactory
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementBytePatternFactory>(this); }

public:

	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementBytePattern Create(byte dataType, short offset, Windows::Storage::Streams::IBuffer const & data) const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementBytePattern
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementBytePattern>(this); }

public:

	byte DataType() const;
	void DataType(byte value) const;
	short Offset() const;
	void Offset(short value) const;
	Windows::Storage::Streams::IBuffer Data() const;
	void Data(Windows::Storage::Streams::IBuffer const & value) const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementDataTypesStatics
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementDataTypesStatics>(this); }

public:

	byte Flags() const;
	byte IncompleteService16BitUuids() const;
	byte CompleteService16BitUuids() const;
	byte IncompleteService32BitUuids() const;
	byte CompleteService32BitUuids() const;
	byte IncompleteService128BitUuids() const;
	byte CompleteService128BitUuids() const;
	byte ShortenedLocalName() const;
	byte CompleteLocalName() const;
	byte TxPowerLevel() const;
	byte SlaveConnectionIntervalRange() const;
	byte ServiceSolicitation16BitUuids() const;
	byte ServiceSolicitation32BitUuids() const;
	byte ServiceSolicitation128BitUuids() const;
	byte ServiceData16BitUuids() const;
	byte ServiceData32BitUuids() const;
	byte ServiceData128BitUuids() const;
	byte PublicTargetAddress() const;
	byte RandomTargetAddress() const;
	byte Appearance() const;
	byte AdvertisingInterval() const;
	byte ManufacturerSpecificData() const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementPublisherStatusChangedEventArgs
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementPublisherStatusChangedEventArgs>(this); }

public:

	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatus Status() const;
	Windows::Devices::Bluetooth::BluetoothError Error() const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementPublisherFactory
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementPublisherFactory>(this); }

public:

	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisher Create(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement const & advertisement) const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementPublisher
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementPublisher>(this); }

public:

	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatus Status() const;
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement Advertisement() const;
	void Start() const;
	void Stop() const;
	long long StatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisher, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatusChangedEventArgs> const & handler) const;
	template <typename F> long long StatusChanged(F handler) const;
	void StatusChanged(long long token) const;
};

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Background {

template <typename T>
class impl_IRfcommInboundConnectionInformation
{
	auto shim() const { return impl::shim<T, IRfcommInboundConnectionInformation>(this); }

public:

	Windows::Storage::Streams::IBuffer SdpRecord() const;
	void SdpRecord(Windows::Storage::Streams::IBuffer const & value) const;
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId LocalServiceId() const;
	void LocalServiceId(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & value) const;
	Windows::Devices::Bluetooth::BluetoothServiceCapabilities ServiceCapabilities() const;
	void ServiceCapabilities(Windows::Devices::Bluetooth::BluetoothServiceCapabilities value) const;
};

template <typename T>
class impl_IRfcommOutboundConnectionInformation
{
	auto shim() const { return impl::shim<T, IRfcommOutboundConnectionInformation>(this); }

public:

	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RemoteServiceId() const;
	void RemoteServiceId(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & value) const;
};

template <typename T>
class impl_IRfcommConnectionTriggerDetails
{
	auto shim() const { return impl::shim<T, IRfcommConnectionTriggerDetails>(this); }

public:

	Windows::Networking::Sockets::StreamSocket Socket() const;
	bool Incoming() const;
	Windows::Devices::Bluetooth::BluetoothDevice RemoteDevice() const;
};

template <typename T>
class impl_IGattCharacteristicNotificationTriggerDetails
{
	auto shim() const { return impl::shim<T, IGattCharacteristicNotificationTriggerDetails>(this); }

public:

	Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic Characteristic() const;
	Windows::Storage::Streams::IBuffer Value() const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementWatcherTriggerDetails
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementWatcherTriggerDetails>(this); }

public:

	Windows::Devices::Bluetooth::BluetoothError Error() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementReceivedEventArgs> Advertisements() const;
	Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter SignalStrengthFilter() const;
};

template <typename T>
class impl_IBluetoothLEAdvertisementPublisherTriggerDetails
{
	auto shim() const { return impl::shim<T, IBluetoothLEAdvertisementPublisherTriggerDetails>(this); }

public:

	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatus Status() const;
	Windows::Devices::Bluetooth::BluetoothError Error() const;
};

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace GenericAttributeProfile {

template <typename T>
class impl_IGattDeviceServiceStatics
{
	auto shim() const { return impl::shim<T, IGattDeviceServiceStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> FromIdAsync(hstring_ref deviceId) const;
	hstring GetDeviceSelectorFromUuid(GUID serviceUuid) const;
	hstring GetDeviceSelectorFromShortId(unsigned short serviceShortId) const;
	GUID ConvertShortIdToUuid(unsigned short shortId) const;
};

template <typename T>
class impl_IGattCharacteristicStatics
{
	auto shim() const { return impl::shim<T, IGattCharacteristicStatics>(this); }

public:

	GUID ConvertShortIdToUuid(unsigned short shortId) const;
};

template <typename T>
class impl_IGattCharacteristic
{
	auto shim() const { return impl::shim<T, IGattCharacteristic>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDescriptor> GetDescriptors(GUID descriptorUuid) const;
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristicProperties CharacteristicProperties() const;
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattProtectionLevel ProtectionLevel() const;
	void ProtectionLevel(Windows::Devices::Bluetooth::GenericAttributeProfile::GattProtectionLevel value) const;
	hstring UserDescription() const;
	GUID Uuid() const;
	unsigned short AttributeHandle() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattPresentationFormat> PresentationFormats() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> ReadValueAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> ReadValueAsync(Windows::Devices::Bluetooth::BluetoothCacheMode cacheMode) const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> WriteValueAsync(Windows::Storage::Streams::IBuffer const & value) const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> WriteValueAsync(Windows::Storage::Streams::IBuffer const & value, Windows::Devices::Bluetooth::GenericAttributeProfile::GattWriteOption writeOption) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadClientCharacteristicConfigurationDescriptorResult> ReadClientCharacteristicConfigurationDescriptorAsync() const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> WriteClientCharacteristicConfigurationDescriptorAsync(Windows::Devices::Bluetooth::GenericAttributeProfile::GattClientCharacteristicConfigurationDescriptorValue clientCharacteristicConfigurationDescriptorValue) const;
	long long ValueChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic, Windows::Devices::Bluetooth::GenericAttributeProfile::GattValueChangedEventArgs> const & valueChangedHandler) const;
	template <typename F> long long ValueChanged(F valueChangedHandler) const;
	void ValueChanged(long long valueChangedEventCookie) const;
};

template <typename T>
class impl_IGattCharacteristic2
{
	auto shim() const { return impl::shim<T, IGattCharacteristic2>(this); }

public:

	Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService Service() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDescriptor> GetAllDescriptors() const;
};

template <typename T>
class impl_IGattDescriptorStatics
{
	auto shim() const { return impl::shim<T, IGattDescriptorStatics>(this); }

public:

	GUID ConvertShortIdToUuid(unsigned short shortId) const;
};

template <typename T>
class impl_IGattDescriptor
{
	auto shim() const { return impl::shim<T, IGattDescriptor>(this); }

public:

	Windows::Devices::Bluetooth::GenericAttributeProfile::GattProtectionLevel ProtectionLevel() const;
	void ProtectionLevel(Windows::Devices::Bluetooth::GenericAttributeProfile::GattProtectionLevel value) const;
	GUID Uuid() const;
	unsigned short AttributeHandle() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> ReadValueAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> ReadValueAsync(Windows::Devices::Bluetooth::BluetoothCacheMode cacheMode) const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> WriteValueAsync(Windows::Storage::Streams::IBuffer const & value) const;
};

template <typename T>
class impl_IGattPresentationFormatStatics
{
	auto shim() const { return impl::shim<T, IGattPresentationFormatStatics>(this); }

public:

	byte BluetoothSigAssignedNumbers() const;
};

template <typename T>
class impl_IGattPresentationFormatTypesStatics
{
	auto shim() const { return impl::shim<T, IGattPresentationFormatTypesStatics>(this); }

public:

	byte Boolean() const;
	byte Bit2() const;
	byte Nibble() const;
	byte UInt8() const;
	byte UInt12() const;
	byte UInt16() const;
	byte UInt24() const;
	byte UInt32() const;
	byte UInt48() const;
	byte UInt64() const;
	byte UInt128() const;
	byte SInt8() const;
	byte SInt12() const;
	byte SInt16() const;
	byte SInt24() const;
	byte SInt32() const;
	byte SInt48() const;
	byte SInt64() const;
	byte SInt128() const;
	byte Float32() const;
	byte Float64() const;
	byte SFloat() const;
	byte Float() const;
	byte DUInt16() const;
	byte Utf8() const;
	byte Utf16() const;
	byte Struct() const;
};

template <typename T>
class impl_IGattPresentationFormat
{
	auto shim() const { return impl::shim<T, IGattPresentationFormat>(this); }

public:

	byte FormatType() const;
	int Exponent() const;
	unsigned short Unit() const;
	byte Namespace() const;
	unsigned short Description() const;
};

template <typename T>
class impl_IGattValueChangedEventArgs
{
	auto shim() const { return impl::shim<T, IGattValueChangedEventArgs>(this); }

public:

	Windows::Storage::Streams::IBuffer CharacteristicValue() const;
	Windows::Foundation::DateTime Timestamp() const;
};

template <typename T>
class impl_IGattServiceUuidsStatics
{
	auto shim() const { return impl::shim<T, IGattServiceUuidsStatics>(this); }

public:

	GUID Battery() const;
	GUID BloodPressure() const;
	GUID CyclingSpeedAndCadence() const;
	GUID GenericAccess() const;
	GUID GenericAttribute() const;
	GUID Glucose() const;
	GUID HealthThermometer() const;
	GUID HeartRate() const;
	GUID RunningSpeedAndCadence() const;
};

template <typename T>
class impl_IGattServiceUuidsStatics2
{
	auto shim() const { return impl::shim<T, IGattServiceUuidsStatics2>(this); }

public:

	GUID AlertNotification() const;
	GUID CurrentTime() const;
	GUID CyclingPower() const;
	GUID DeviceInformation() const;
	GUID HumanInterfaceDevice() const;
	GUID ImmediateAlert() const;
	GUID LinkLoss() const;
	GUID LocationAndNavigation() const;
	GUID NextDstChange() const;
	GUID PhoneAlertStatus() const;
	GUID ReferenceTimeUpdate() const;
	GUID ScanParameters() const;
	GUID TxPower() const;
};

template <typename T>
class impl_IGattCharacteristicUuidsStatics
{
	auto shim() const { return impl::shim<T, IGattCharacteristicUuidsStatics>(this); }

public:

	GUID BatteryLevel() const;
	GUID BloodPressureFeature() const;
	GUID BloodPressureMeasurement() const;
	GUID BodySensorLocation() const;
	GUID CscFeature() const;
	GUID CscMeasurement() const;
	GUID GlucoseFeature() const;
	GUID GlucoseMeasurement() const;
	GUID GlucoseMeasurementContext() const;
	GUID HeartRateControlPoint() const;
	GUID HeartRateMeasurement() const;
	GUID IntermediateCuffPressure() const;
	GUID IntermediateTemperature() const;
	GUID MeasurementInterval() const;
	GUID RecordAccessControlPoint() const;
	GUID RscFeature() const;
	GUID RscMeasurement() const;
	GUID SCControlPoint() const;
	GUID SensorLocation() const;
	GUID TemperatureMeasurement() const;
	GUID TemperatureType() const;
};

template <typename T>
class impl_IGattCharacteristicUuidsStatics2
{
	auto shim() const { return impl::shim<T, IGattCharacteristicUuidsStatics2>(this); }

public:

	GUID AlertCategoryId() const;
	GUID AlertCategoryIdBitMask() const;
	GUID AlertLevel() const;
	GUID AlertNotificationControlPoint() const;
	GUID AlertStatus() const;
	GUID GapAppearance() const;
	GUID BootKeyboardInputReport() const;
	GUID BootKeyboardOutputReport() const;
	GUID BootMouseInputReport() const;
	GUID CurrentTime() const;
	GUID CyclingPowerControlPoint() const;
	GUID CyclingPowerFeature() const;
	GUID CyclingPowerMeasurement() const;
	GUID CyclingPowerVector() const;
	GUID DateTime() const;
	GUID DayDateTime() const;
	GUID DayOfWeek() const;
	GUID GapDeviceName() const;
	GUID DstOffset() const;
	GUID ExactTime256() const;
	GUID FirmwareRevisionString() const;
	GUID HardwareRevisionString() const;
	GUID HidControlPoint() const;
	GUID HidInformation() const;
	GUID Ieee1107320601RegulatoryCertificationDataList() const;
	GUID LnControlPoint() const;
	GUID LnFeature() const;
	GUID LocalTimeInformation() const;
	GUID LocationAndSpeed() const;
	GUID ManufacturerNameString() const;
	GUID ModelNumberString() const;
	GUID Navigation() const;
	GUID NewAlert() const;
	GUID GapPeripheralPreferredConnectionParameters() const;
	GUID GapPeripheralPrivacyFlag() const;
	GUID PnpId() const;
	GUID PositionQuality() const;
	GUID ProtocolMode() const;
	GUID GapReconnectionAddress() const;
	GUID ReferenceTimeInformation() const;
	GUID Report() const;
	GUID ReportMap() const;
	GUID RingerControlPoint() const;
	GUID RingerSetting() const;
	GUID ScanIntervalWindow() const;
	GUID ScanRefresh() const;
	GUID SerialNumberString() const;
	GUID GattServiceChanged() const;
	GUID SoftwareRevisionString() const;
	GUID SupportedNewAlertCategory() const;
	GUID SupportUnreadAlertCategory() const;
	GUID SystemId() const;
	GUID TimeAccuracy() const;
	GUID TimeSource() const;
	GUID TimeUpdateControlPoint() const;
	GUID TimeUpdateState() const;
	GUID TimeWithDst() const;
	GUID TimeZone() const;
	GUID TxPowerLevel() const;
	GUID UnreadAlertStatus() const;
};

template <typename T>
class impl_IGattDescriptorUuidsStatics
{
	auto shim() const { return impl::shim<T, IGattDescriptorUuidsStatics>(this); }

public:

	GUID CharacteristicAggregateFormat() const;
	GUID CharacteristicExtendedProperties() const;
	GUID CharacteristicPresentationFormat() const;
	GUID CharacteristicUserDescription() const;
	GUID ClientCharacteristicConfiguration() const;
	GUID ServerCharacteristicConfiguration() const;
};

template <typename T>
class impl_IGattReliableWriteTransaction
{
	auto shim() const { return impl::shim<T, IGattReliableWriteTransaction>(this); }

public:

	void WriteValue(Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic const & characteristic, Windows::Storage::Streams::IBuffer const & value) const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> CommitAsync() const;
};

template <typename T>
class impl_IGattReadResult
{
	auto shim() const { return impl::shim<T, IGattReadResult>(this); }

public:

	Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus Status() const;
	Windows::Storage::Streams::IBuffer Value() const;
};

template <typename T>
class impl_IGattReadClientCharacteristicConfigurationDescriptorResult
{
	auto shim() const { return impl::shim<T, IGattReadClientCharacteristicConfigurationDescriptorResult>(this); }

public:

	Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus Status() const;
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattClientCharacteristicConfigurationDescriptorValue ClientCharacteristicConfigurationDescriptor() const;
};

template <typename T>
class impl_IGattDeviceService
{
	auto shim() const { return impl::shim<T, IGattDeviceService>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic> GetCharacteristics(GUID characteristicUuid) const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> GetIncludedServices(GUID serviceUuid) const;
	hstring DeviceId() const;
	GUID Uuid() const;
	unsigned short AttributeHandle() const;
};

template <typename T>
class impl_IGattDeviceService2
{
	auto shim() const { return impl::shim<T, IGattDeviceService2>(this); }

public:

	Windows::Devices::Bluetooth::BluetoothLEDevice Device() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> ParentServices() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic> GetAllCharacteristics() const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> GetAllIncludedServices() const;
};

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Rfcomm {

template <typename T>
class impl_IRfcommServiceIdStatics
{
	auto shim() const { return impl::shim<T, IRfcommServiceIdStatics>(this); }

public:

	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId FromUuid(GUID uuid) const;
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId FromShortId(unsigned shortId) const;
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId SerialPort() const;
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId ObexObjectPush() const;
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId ObexFileTransfer() const;
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId PhoneBookAccessPce() const;
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId PhoneBookAccessPse() const;
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId GenericFileTransfer() const;
};

template <typename T>
class impl_IRfcommServiceId
{
	auto shim() const { return impl::shim<T, IRfcommServiceId>(this); }

public:

	GUID Uuid() const;
	unsigned AsShortId() const;
	hstring AsString() const;
};

template <typename T>
class impl_IRfcommDeviceServiceStatics
{
	auto shim() const { return impl::shim<T, IRfcommDeviceServiceStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService> FromIdAsync(hstring_ref deviceId) const;
	hstring GetDeviceSelector(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & serviceId) const;
};

template <typename T>
class impl_IRfcommDeviceService
{
	auto shim() const { return impl::shim<T, IRfcommDeviceService>(this); }

public:

	Windows::Networking::HostName ConnectionHostName() const;
	hstring ConnectionServiceName() const;
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId ServiceId() const;
	Windows::Networking::Sockets::SocketProtectionLevel ProtectionLevel() const;
	Windows::Networking::Sockets::SocketProtectionLevel MaxProtectionLevel() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<unsigned, Windows::Storage::Streams::IBuffer>> GetSdpRawAttributesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<unsigned, Windows::Storage::Streams::IBuffer>> GetSdpRawAttributesAsync(Windows::Devices::Bluetooth::BluetoothCacheMode cacheMode) const;
};

template <typename T>
class impl_IRfcommDeviceService2
{
	auto shim() const { return impl::shim<T, IRfcommDeviceService2>(this); }

public:

	Windows::Devices::Bluetooth::BluetoothDevice Device() const;
};

template <typename T>
class impl_IRfcommServiceProviderStatics
{
	auto shim() const { return impl::shim<T, IRfcommServiceProviderStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider> CreateAsync(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & serviceId) const;
};

template <typename T>
class impl_IRfcommServiceProvider
{
	auto shim() const { return impl::shim<T, IRfcommServiceProvider>(this); }

public:

	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId ServiceId() const;
	Windows::Foundation::Collections::IMap<unsigned, Windows::Storage::Streams::IBuffer> SdpRawAttributes() const;
	void StartAdvertising(Windows::Networking::Sockets::StreamSocketListener const & listener) const;
	void StopAdvertising() const;
};

template <typename T>
class impl_IRfcommServiceProvider2
{
	auto shim() const { return impl::shim<T, IRfcommServiceProvider2>(this); }

public:

	void StartAdvertising(Windows::Networking::Sockets::StreamSocketListener const & listener, bool radioDiscoverable) const;
};

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Enumeration {

template <typename T>
class impl_IDeviceConnectionChangeTriggerDetails
{
	auto shim() const { return impl::shim<T, IDeviceConnectionChangeTriggerDetails>(this); }

public:

	hstring DeviceId() const;
};

template <typename T>
class impl_IDevicePickerAppearance
{
	auto shim() const { return impl::shim<T, IDevicePickerAppearance>(this); }

public:

	hstring Title() const;
	void Title(hstring_ref value) const;
	Windows::UI::Color ForegroundColor() const;
	void ForegroundColor(Windows::UI::Color const & value) const;
	Windows::UI::Color BackgroundColor() const;
	void BackgroundColor(Windows::UI::Color const & value) const;
	Windows::UI::Color AccentColor() const;
	void AccentColor(Windows::UI::Color const & value) const;
	Windows::UI::Color SelectedForegroundColor() const;
	void SelectedForegroundColor(Windows::UI::Color const & value) const;
	Windows::UI::Color SelectedBackgroundColor() const;
	void SelectedBackgroundColor(Windows::UI::Color const & value) const;
	Windows::UI::Color SelectedAccentColor() const;
	void SelectedAccentColor(Windows::UI::Color const & value) const;
};

template <typename T>
class impl_IDeviceSelectedEventArgs
{
	auto shim() const { return impl::shim<T, IDeviceSelectedEventArgs>(this); }

public:

	Windows::Devices::Enumeration::DeviceInformation SelectedDevice() const;
};

template <typename T>
class impl_IDeviceDisconnectButtonClickedEventArgs
{
	auto shim() const { return impl::shim<T, IDeviceDisconnectButtonClickedEventArgs>(this); }

public:

	Windows::Devices::Enumeration::DeviceInformation Device() const;
};

template <typename T>
class impl_IDevicePickerFilter
{
	auto shim() const { return impl::shim<T, IDevicePickerFilter>(this); }

public:

	Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Enumeration::DeviceClass> SupportedDeviceClasses() const;
	Windows::Foundation::Collections::IVector<hstring> SupportedDeviceSelectors() const;
};

template <typename T>
class impl_IDevicePicker
{
	auto shim() const { return impl::shim<T, IDevicePicker>(this); }

public:

	Windows::Devices::Enumeration::DevicePickerFilter Filter() const;
	Windows::Devices::Enumeration::DevicePickerAppearance Appearance() const;
	Windows::Foundation::Collections::IVector<hstring> RequestedProperties() const;
	long long DeviceSelected(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DevicePicker, Windows::Devices::Enumeration::DeviceSelectedEventArgs> const & handler) const;
	template <typename F> long long DeviceSelected(F handler) const;
	void DeviceSelected(long long token) const;
	long long DisconnectButtonClicked(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DevicePicker, Windows::Devices::Enumeration::DeviceDisconnectButtonClickedEventArgs> const & handler) const;
	template <typename F> long long DisconnectButtonClicked(F handler) const;
	void DisconnectButtonClicked(long long token) const;
	long long DevicePickerDismissed(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DevicePicker, IInspectable> const & handler) const;
	template <typename F> long long DevicePickerDismissed(F handler) const;
	void DevicePickerDismissed(long long token) const;
	void Show(Windows::Foundation::Rect const & selection) const;
	void Show(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement placement) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> PickSingleDeviceAsync(Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> PickSingleDeviceAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement placement) const;
	void Hide() const;
	void SetDisplayStatus(Windows::Devices::Enumeration::DeviceInformation const & device, hstring_ref status, Windows::Devices::Enumeration::DevicePickerDisplayStatusOptions options) const;
};

template <typename T>
class impl_IEnclosureLocation
{
	auto shim() const { return impl::shim<T, IEnclosureLocation>(this); }

public:

	bool InDock() const;
	bool InLid() const;
	Windows::Devices::Enumeration::Panel Panel() const;
};

template <typename T>
class impl_IDeviceInformationUpdate
{
	auto shim() const { return impl::shim<T, IDeviceInformationUpdate>(this); }

public:

	hstring Id() const;
	Windows::Foundation::Collections::IMapView<hstring, IInspectable> Properties() const;
};

template <typename T>
class impl_IDeviceInformationUpdate2
{
	auto shim() const { return impl::shim<T, IDeviceInformationUpdate2>(this); }

public:

	Windows::Devices::Enumeration::DeviceInformationKind Kind() const;
};

template <typename T>
class impl_IDeviceWatcher
{
	auto shim() const { return impl::shim<T, IDeviceWatcher>(this); }

public:

	long long Added(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformation> const & handler) const;
	template <typename F> long long Added(F handler) const;
	void Added(long long token) const;
	long long Updated(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate> const & handler) const;
	template <typename F> long long Updated(F handler) const;
	void Updated(long long token) const;
	long long Removed(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate> const & handler) const;
	template <typename F> long long Removed(F handler) const;
	void Removed(long long token) const;
	long long EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable> const & handler) const;
	template <typename F> long long EnumerationCompleted(F handler) const;
	void EnumerationCompleted(long long token) const;
	long long Stopped(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable> const & handler) const;
	template <typename F> long long Stopped(F handler) const;
	void Stopped(long long token) const;
	Windows::Devices::Enumeration::DeviceWatcherStatus Status() const;
	void Start() const;
	void Stop() const;
};

template <typename T>
class impl_IDeviceWatcher2
{
	auto shim() const { return impl::shim<T, IDeviceWatcher2>(this); }

public:

	Windows::ApplicationModel::Background::DeviceWatcherTrigger GetBackgroundTrigger(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Enumeration::DeviceWatcherEventKind> const & requestedEventKinds) const;
};

template <typename T>
class impl_IDeviceInformationStatics
{
	auto shim() const { return impl::shim<T, IDeviceInformationStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(hstring_ref deviceId) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(hstring_ref deviceId, Windows::Foundation::Collections::IIterable<hstring> const & additionalProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(Windows::Devices::Enumeration::DeviceClass deviceClass) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(hstring_ref aqsFilter) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(hstring_ref aqsFilter, Windows::Foundation::Collections::IIterable<hstring> const & additionalProperties) const;
	Windows::Devices::Enumeration::DeviceWatcher CreateWatcher() const;
	Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(Windows::Devices::Enumeration::DeviceClass deviceClass) const;
	Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(hstring_ref aqsFilter) const;
	Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(hstring_ref aqsFilter, Windows::Foundation::Collections::IIterable<hstring> const & additionalProperties) const;
};

template <typename T>
class impl_IDeviceInformationStatics2
{
	auto shim() const { return impl::shim<T, IDeviceInformationStatics2>(this); }

public:

	hstring GetAqsFilterFromDeviceClass(Windows::Devices::Enumeration::DeviceClass deviceClass) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(hstring_ref deviceId, Windows::Foundation::Collections::IIterable<hstring> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind kind) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(hstring_ref aqsFilter, Windows::Foundation::Collections::IIterable<hstring> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind kind) const;
	Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(hstring_ref aqsFilter, Windows::Foundation::Collections::IIterable<hstring> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind kind) const;
};

template <typename T>
class impl_IDeviceInformation
{
	auto shim() const { return impl::shim<T, IDeviceInformation>(this); }

public:

	hstring Id() const;
	hstring Name() const;
	bool IsEnabled() const;
	bool IsDefault() const;
	Windows::Devices::Enumeration::EnclosureLocation EnclosureLocation() const;
	Windows::Foundation::Collections::IMapView<hstring, IInspectable> Properties() const;
	void Update(Windows::Devices::Enumeration::DeviceInformationUpdate const & updateInfo) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> GetThumbnailAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> GetGlyphThumbnailAsync() const;
};

template <typename T>
class impl_IDevicePairingResult
{
	auto shim() const { return impl::shim<T, IDevicePairingResult>(this); }

public:

	Windows::Devices::Enumeration::DevicePairingResultStatus Status() const;
	Windows::Devices::Enumeration::DevicePairingProtectionLevel ProtectionLevelUsed() const;
};

template <typename T>
class impl_IDeviceUnpairingResult
{
	auto shim() const { return impl::shim<T, IDeviceUnpairingResult>(this); }

public:

	Windows::Devices::Enumeration::DeviceUnpairingResultStatus Status() const;
};

template <typename T>
class impl_IDevicePairingSettings
{
	auto shim() const { return impl::shim<T, IDevicePairingSettings>(this); }

public:

};

template <typename T>
class impl_IDevicePairingRequestedEventArgs
{
	auto shim() const { return impl::shim<T, IDevicePairingRequestedEventArgs>(this); }

public:

	Windows::Devices::Enumeration::DeviceInformation DeviceInformation() const;
	Windows::Devices::Enumeration::DevicePairingKinds PairingKind() const;
	hstring Pin() const;
	void Accept() const;
	void Accept(hstring_ref pin) const;
	Windows::Foundation::Deferral GetDeferral() const;
};

template <typename T>
class impl_IDeviceInformationCustomPairing
{
	auto shim() const { return impl::shim<T, IDeviceInformationCustomPairing>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> PairAsync(Windows::Devices::Enumeration::DevicePairingKinds pairingKindsSupported) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> PairAsync(Windows::Devices::Enumeration::DevicePairingKinds pairingKindsSupported, Windows::Devices::Enumeration::DevicePairingProtectionLevel minProtectionLevel) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> PairAsync(Windows::Devices::Enumeration::DevicePairingKinds pairingKindsSupported, Windows::Devices::Enumeration::DevicePairingProtectionLevel minProtectionLevel, Windows::Devices::Enumeration::IDevicePairingSettings const & devicePairingSettings) const;
	long long PairingRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceInformationCustomPairing, Windows::Devices::Enumeration::DevicePairingRequestedEventArgs> const & handler) const;
	template <typename F> long long PairingRequested(F handler) const;
	void PairingRequested(long long token) const;
};

template <typename T>
class impl_IDeviceInformationPairing
{
	auto shim() const { return impl::shim<T, IDeviceInformationPairing>(this); }

public:

	bool IsPaired() const;
	bool CanPair() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> PairAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> PairAsync(Windows::Devices::Enumeration::DevicePairingProtectionLevel minProtectionLevel) const;
};

template <typename T>
class impl_IDeviceInformationPairing2
{
	auto shim() const { return impl::shim<T, IDeviceInformationPairing2>(this); }

public:

	Windows::Devices::Enumeration::DevicePairingProtectionLevel ProtectionLevel() const;
	Windows::Devices::Enumeration::DeviceInformationCustomPairing Custom() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> PairAsync(Windows::Devices::Enumeration::DevicePairingProtectionLevel minProtectionLevel, Windows::Devices::Enumeration::IDevicePairingSettings const & devicePairingSettings) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceUnpairingResult> UnpairAsync() const;
};

template <typename T>
class impl_IDeviceInformationPairingStatics
{
	auto shim() const { return impl::shim<T, IDeviceInformationPairingStatics>(this); }

public:

	bool TryRegisterForAllInboundPairingRequests(Windows::Devices::Enumeration::DevicePairingKinds pairingKindsSupported) const;
};

template <typename T>
class impl_IDeviceInformation2
{
	auto shim() const { return impl::shim<T, IDeviceInformation2>(this); }

public:

	Windows::Devices::Enumeration::DeviceInformationKind Kind() const;
	Windows::Devices::Enumeration::DeviceInformationPairing Pairing() const;
};

template <typename T>
class impl_IDeviceAccessChangedEventArgs
{
	auto shim() const { return impl::shim<T, IDeviceAccessChangedEventArgs>(this); }

public:

	Windows::Devices::Enumeration::DeviceAccessStatus Status() const;
};

template <typename T>
class impl_IDeviceAccessInformation
{
	auto shim() const { return impl::shim<T, IDeviceAccessInformation>(this); }

public:

	long long AccessChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceAccessInformation, Windows::Devices::Enumeration::DeviceAccessChangedEventArgs> const & handler) const;
	template <typename F> long long AccessChanged(F handler) const;
	void AccessChanged(long long cookie) const;
	Windows::Devices::Enumeration::DeviceAccessStatus CurrentStatus() const;
};

template <typename T>
class impl_IDeviceAccessInformationStatics
{
	auto shim() const { return impl::shim<T, IDeviceAccessInformationStatics>(this); }

public:

	Windows::Devices::Enumeration::DeviceAccessInformation CreateFromId(hstring_ref deviceId) const;
	Windows::Devices::Enumeration::DeviceAccessInformation CreateFromDeviceClassId(GUID deviceClassId) const;
	Windows::Devices::Enumeration::DeviceAccessInformation CreateFromDeviceClass(Windows::Devices::Enumeration::DeviceClass deviceClass) const;
};

template <typename T>
class impl_IDeviceWatcherEvent
{
	auto shim() const { return impl::shim<T, IDeviceWatcherEvent>(this); }

public:

	Windows::Devices::Enumeration::DeviceWatcherEventKind Kind() const;
	Windows::Devices::Enumeration::DeviceInformation DeviceInformation() const;
	Windows::Devices::Enumeration::DeviceInformationUpdate DeviceInformationUpdate() const;
};

template <typename T>
class impl_IDeviceWatcherTriggerDetails
{
	auto shim() const { return impl::shim<T, IDeviceWatcherTriggerDetails>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::Devices::Enumeration::DeviceWatcherEvent> DeviceWatcherEvents() const;
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Geolocation {

template <typename T>
class impl_IGeoshape
{
	auto shim() const { return impl::shim<T, IGeoshape>(this); }

public:

	Windows::Devices::Geolocation::GeoshapeType GeoshapeType() const;
	unsigned SpatialReferenceId() const;
	Windows::Devices::Geolocation::AltitudeReferenceSystem AltitudeReferenceSystem() const;
};

template <typename T>
class impl_IGeopoint
{
	auto shim() const { return impl::shim<T, IGeopoint>(this); }

public:

	Windows::Devices::Geolocation::BasicGeoposition Position() const;
};

template <typename T>
class impl_IGeopointFactory
{
	auto shim() const { return impl::shim<T, IGeopointFactory>(this); }

public:

	Windows::Devices::Geolocation::Geopoint Create(Windows::Devices::Geolocation::BasicGeoposition const & position) const;
	Windows::Devices::Geolocation::Geopoint CreateWithAltitudeReferenceSystem(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem) const;
	Windows::Devices::Geolocation::Geopoint CreateWithAltitudeReferenceSystemAndSpatialReferenceId(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem, unsigned spatialReferenceId) const;
};

template <typename T>
class impl_IGeopath
{
	auto shim() const { return impl::shim<T, IGeopath>(this); }

public:

	Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Geolocation::BasicGeoposition> Positions() const;
};

template <typename T>
class impl_IGeopathFactory
{
	auto shim() const { return impl::shim<T, IGeopathFactory>(this); }

public:

	Windows::Devices::Geolocation::Geopath Create(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions) const;
	Windows::Devices::Geolocation::Geopath CreateWithAltitudeReference(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem) const;
	Windows::Devices::Geolocation::Geopath CreateWithAltitudeReferenceAndSpatialReference(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem, unsigned spatialReferenceId) const;
};

template <typename T>
class impl_IGeoboundingBox
{
	auto shim() const { return impl::shim<T, IGeoboundingBox>(this); }

public:

	Windows::Devices::Geolocation::BasicGeoposition NorthwestCorner() const;
	Windows::Devices::Geolocation::BasicGeoposition SoutheastCorner() const;
	Windows::Devices::Geolocation::BasicGeoposition Center() const;
	double MinAltitude() const;
	double MaxAltitude() const;
};

template <typename T>
class impl_IGeoboundingBoxFactory
{
	auto shim() const { return impl::shim<T, IGeoboundingBoxFactory>(this); }

public:

	Windows::Devices::Geolocation::GeoboundingBox Create(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner) const;
	Windows::Devices::Geolocation::GeoboundingBox CreateWithAltitudeReference(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem) const;
	Windows::Devices::Geolocation::GeoboundingBox CreateWithAltitudeReferenceAndSpatialReference(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem, unsigned spatialReferenceId) const;
};

template <typename T>
class impl_IGeoboundingBoxStatics
{
	auto shim() const { return impl::shim<T, IGeoboundingBoxStatics>(this); }

public:

	Windows::Devices::Geolocation::GeoboundingBox TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions) const;
	Windows::Devices::Geolocation::GeoboundingBox TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeRefSystem) const;
	Windows::Devices::Geolocation::GeoboundingBox TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeRefSystem, unsigned spatialReferenceId) const;
};

template <typename T>
class impl_IGeocoordinateSatelliteData
{
	auto shim() const { return impl::shim<T, IGeocoordinateSatelliteData>(this); }

public:

	Windows::Foundation::IReference<double> PositionDilutionOfPrecision() const;
	Windows::Foundation::IReference<double> HorizontalDilutionOfPrecision() const;
	Windows::Foundation::IReference<double> VerticalDilutionOfPrecision() const;
};

template <typename T>
class impl_IVenueData
{
	auto shim() const { return impl::shim<T, IVenueData>(this); }

public:

	hstring Id() const;
	hstring Level() const;
};

template <typename T>
class impl_IGeocoordinate
{
	auto shim() const { return impl::shim<T, IGeocoordinate>(this); }

public:

	double Latitude() const;
	double Longitude() const;
	Windows::Foundation::IReference<double> Altitude() const;
	double Accuracy() const;
	Windows::Foundation::IReference<double> AltitudeAccuracy() const;
	Windows::Foundation::IReference<double> Heading() const;
	Windows::Foundation::IReference<double> Speed() const;
	Windows::Foundation::DateTime Timestamp() const;
};

template <typename T>
class impl_IGeocoordinateWithPositionData
{
	auto shim() const { return impl::shim<T, IGeocoordinateWithPositionData>(this); }

public:

	Windows::Devices::Geolocation::PositionSource PositionSource() const;
	Windows::Devices::Geolocation::GeocoordinateSatelliteData SatelliteData() const;
};

template <typename T>
class impl_IGeocoordinateWithPoint
{
	auto shim() const { return impl::shim<T, IGeocoordinateWithPoint>(this); }

public:

	Windows::Devices::Geolocation::Geopoint Point() const;
};

template <typename T>
class impl_IGeoposition
{
	auto shim() const { return impl::shim<T, IGeoposition>(this); }

public:

	Windows::Devices::Geolocation::Geocoordinate Coordinate() const;
	Windows::Devices::Geolocation::CivicAddress CivicAddress() const;
};

template <typename T>
class impl_IGeoposition2
{
	auto shim() const { return impl::shim<T, IGeoposition2>(this); }

public:

	Windows::Devices::Geolocation::VenueData VenueData() const;
};

template <typename T>
class impl_ICivicAddress
{
	auto shim() const { return impl::shim<T, ICivicAddress>(this); }

public:

	hstring Country() const;
	hstring State() const;
	hstring City() const;
	hstring PostalCode() const;
	Windows::Foundation::DateTime Timestamp() const;
};

template <typename T>
class impl_IPositionChangedEventArgs
{
	auto shim() const { return impl::shim<T, IPositionChangedEventArgs>(this); }

public:

	Windows::Devices::Geolocation::Geoposition Position() const;
};

template <typename T>
class impl_IStatusChangedEventArgs
{
	auto shim() const { return impl::shim<T, IStatusChangedEventArgs>(this); }

public:

	Windows::Devices::Geolocation::PositionStatus Status() const;
};

template <typename T>
class impl_IGeolocator
{
	auto shim() const { return impl::shim<T, IGeolocator>(this); }

public:

	Windows::Devices::Geolocation::PositionAccuracy DesiredAccuracy() const;
	void DesiredAccuracy(Windows::Devices::Geolocation::PositionAccuracy value) const;
	double MovementThreshold() const;
	void MovementThreshold(double value) const;
	unsigned ReportInterval() const;
	void ReportInterval(unsigned value) const;
	Windows::Devices::Geolocation::PositionStatus LocationStatus() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> GetGeopositionAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> GetGeopositionAsync(Windows::Foundation::TimeSpan const & maximumAge, Windows::Foundation::TimeSpan const & timeout) const;
	long long PositionChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::PositionChangedEventArgs> const & handler) const;
	template <typename F> long long PositionChanged(F handler) const;
	void PositionChanged(long long token) const;
	long long StatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::StatusChangedEventArgs> const & handler) const;
	template <typename F> long long StatusChanged(F handler) const;
	void StatusChanged(long long token) const;
};

template <typename T>
class impl_IGeolocatorWithScalarAccuracy
{
	auto shim() const { return impl::shim<T, IGeolocatorWithScalarAccuracy>(this); }

public:

	Windows::Foundation::IReference<unsigned> DesiredAccuracyInMeters() const;
	void DesiredAccuracyInMeters(Windows::Foundation::IReference<unsigned> const & value) const;
};

template <typename T>
class impl_IGeolocatorStatics
{
	auto shim() const { return impl::shim<T, IGeolocatorStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Geolocation::GeolocationAccessStatus> RequestAccessAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geoposition>> GetGeopositionHistoryAsync(Windows::Foundation::DateTime const & startTime) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geoposition>> GetGeopositionHistoryAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration) const;
};

template <typename T>
class impl_IGeocircle
{
	auto shim() const { return impl::shim<T, IGeocircle>(this); }

public:

	Windows::Devices::Geolocation::BasicGeoposition Center() const;
	double Radius() const;
};

template <typename T>
class impl_IGeocircleFactory
{
	auto shim() const { return impl::shim<T, IGeocircleFactory>(this); }

public:

	Windows::Devices::Geolocation::Geocircle Create(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius) const;
	Windows::Devices::Geolocation::Geocircle CreateWithAltitudeReferenceSystem(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem) const;
	Windows::Devices::Geolocation::Geocircle CreateWithAltitudeReferenceSystemAndSpatialReferenceId(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem, unsigned spatialReferenceId) const;
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Input {

template <typename T>
class impl_IMouseCapabilities
{
	auto shim() const { return impl::shim<T, IMouseCapabilities>(this); }

public:

	int MousePresent() const;
	int VerticalWheelPresent() const;
	int HorizontalWheelPresent() const;
	int SwapButtons() const;
	unsigned NumberOfButtons() const;
};

template <typename T>
class impl_IKeyboardCapabilities
{
	auto shim() const { return impl::shim<T, IKeyboardCapabilities>(this); }

public:

	int KeyboardPresent() const;
};

template <typename T>
class impl_ITouchCapabilities
{
	auto shim() const { return impl::shim<T, ITouchCapabilities>(this); }

public:

	int TouchPresent() const;
	unsigned Contacts() const;
};

template <typename T>
class impl_IPointerDeviceStatics
{
	auto shim() const { return impl::shim<T, IPointerDeviceStatics>(this); }

public:

	Windows::Devices::Input::PointerDevice GetPointerDevice(unsigned pointerId) const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Input::PointerDevice> GetPointerDevices() const;
};

template <typename T>
class impl_IPointerDevice
{
	auto shim() const { return impl::shim<T, IPointerDevice>(this); }

public:

	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	bool IsIntegrated() const;
	unsigned MaxContacts() const;
	Windows::Foundation::Rect PhysicalDeviceRect() const;
	Windows::Foundation::Rect ScreenRect() const;
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Input::PointerDeviceUsage> SupportedUsages() const;
};

template <typename T>
class impl_IMouseEventArgs
{
	auto shim() const { return impl::shim<T, IMouseEventArgs>(this); }

public:

	Windows::Devices::Input::MouseDelta MouseDelta() const;
};

template <typename T>
class impl_IMouseDevice
{
	auto shim() const { return impl::shim<T, IMouseDevice>(this); }

public:

	long long MouseMoved(Windows::Foundation::ITypedEventHandler<Windows::Devices::Input::MouseDevice, Windows::Devices::Input::MouseEventArgs> const & handler) const;
	template <typename F> long long MouseMoved(F handler) const;
	void MouseMoved(long long cookie) const;
};

template <typename T>
class impl_IMouseDeviceStatics
{
	auto shim() const { return impl::shim<T, IMouseDeviceStatics>(this); }

public:

	Windows::Devices::Input::MouseDevice GetForCurrentView() const;
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

template <typename T>
class impl_IPrintTaskConfigurationSaveRequestedDeferral
{
	auto shim() const { return impl::shim<T, IPrintTaskConfigurationSaveRequestedDeferral>(this); }

public:

	void Complete() const;
};

template <typename T>
class impl_IPrintTaskConfigurationSaveRequest
{
	auto shim() const { return impl::shim<T, IPrintTaskConfigurationSaveRequest>(this); }

public:

	void Cancel() const;
	void Save(IInspectable const & printerExtensionContext) const;
	Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedDeferral GetDeferral() const;
	Windows::Foundation::DateTime Deadline() const;
};

template <typename T>
class impl_IPrintTaskConfigurationSaveRequestedEventArgs
{
	auto shim() const { return impl::shim<T, IPrintTaskConfigurationSaveRequestedEventArgs>(this); }

public:

	Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequest Request() const;
};

template <typename T>
class impl_IPrintTaskConfiguration
{
	auto shim() const { return impl::shim<T, IPrintTaskConfiguration>(this); }

public:

	IInspectable PrinterExtensionContext() const;
	long long SaveRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::Printers::Extensions::PrintTaskConfiguration, Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedEventArgs> const & eventHandler) const;
	template <typename F> long long SaveRequested(F eventHandler) const;
	void SaveRequested(long long eventCookie) const;
};

template <typename T>
class impl_IPrintNotificationEventDetails
{
	auto shim() const { return impl::shim<T, IPrintNotificationEventDetails>(this); }

public:

	hstring PrinterName() const;
	hstring EventData() const;
	void EventData(hstring_ref value) const;
};

template <typename T>
class impl_IPrintExtensionContextStatic
{
	auto shim() const { return impl::shim<T, IPrintExtensionContextStatic>(this); }

public:

	IInspectable FromDeviceId(hstring_ref deviceId) const;
};

template <typename T>
class impl_IPrint3DWorkflowPrintRequestedEventArgs
{
	auto shim() const { return impl::shim<T, IPrint3DWorkflowPrintRequestedEventArgs>(this); }

public:

	Windows::Devices::Printers::Extensions::Print3DWorkflowStatus Status() const;
	void SetExtendedStatus(Windows::Devices::Printers::Extensions::Print3DWorkflowDetail value) const;
	void SetSource(IInspectable const & source) const;
	void SetSourceChanged(bool value) const;
};

template <typename T>
class impl_IPrint3DWorkflow
{
	auto shim() const { return impl::shim<T, IPrint3DWorkflow>(this); }

public:

	hstring DeviceID() const;
	IInspectable GetPrintModelPackage() const;
	bool IsPrintReady() const;
	void IsPrintReady(bool value) const;
	long long PrintRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::Printers::Extensions::Print3DWorkflow, Windows::Devices::Printers::Extensions::Print3DWorkflowPrintRequestedEventArgs> const & eventHandler) const;
	template <typename F> long long PrintRequested(F eventHandler) const;
	void PrintRequested(long long eventCookie) const;
};

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sensors {

template <typename T>
class impl_ISensorDataThreshold
{
	auto shim() const { return impl::shim<T, ISensorDataThreshold>(this); }

public:

};

template <typename T>
class impl_ISensorDataThresholdTriggerDetails
{
	auto shim() const { return impl::shim<T, ISensorDataThresholdTriggerDetails>(this); }

public:

	hstring DeviceId() const;
	Windows::Devices::Sensors::SensorType SensorType() const;
};

template <typename T>
class impl_IAccelerometerDeviceId
{
	auto shim() const { return impl::shim<T, IAccelerometerDeviceId>(this); }

public:

	hstring DeviceId() const;
};

template <typename T>
class impl_IAccelerometerStatics
{
	auto shim() const { return impl::shim<T, IAccelerometerStatics>(this); }

public:

	Windows::Devices::Sensors::Accelerometer GetDefault() const;
};

template <typename T>
class impl_IAccelerometer
{
	auto shim() const { return impl::shim<T, IAccelerometer>(this); }

public:

	Windows::Devices::Sensors::AccelerometerReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	long long ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs> const & handler) const;
	template <typename F> long long ReadingChanged(F handler) const;
	void ReadingChanged(long long token) const;
	long long Shaken(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerShakenEventArgs> const & handler) const;
	template <typename F> long long Shaken(F handler) const;
	void Shaken(long long token) const;
};

template <typename T>
class impl_IAccelerometer2
{
	auto shim() const { return impl::shim<T, IAccelerometer2>(this); }

public:

	void ReadingTransform(Windows::Graphics::Display::DisplayOrientations value) const;
	Windows::Graphics::Display::DisplayOrientations ReadingTransform() const;
};

template <typename T>
class impl_IAccelerometer3
{
	auto shim() const { return impl::shim<T, IAccelerometer3>(this); }

public:

	void ReportLatency(unsigned value) const;
	unsigned ReportLatency() const;
	unsigned MaxBatchSize() const;
};

template <typename T>
class impl_IAccelerometerReading
{
	auto shim() const { return impl::shim<T, IAccelerometerReading>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	double AccelerationX() const;
	double AccelerationY() const;
	double AccelerationZ() const;
};

template <typename T>
class impl_IAccelerometerReadingChangedEventArgs
{
	auto shim() const { return impl::shim<T, IAccelerometerReadingChangedEventArgs>(this); }

public:

	Windows::Devices::Sensors::AccelerometerReading Reading() const;
};

template <typename T>
class impl_IAccelerometerShakenEventArgs
{
	auto shim() const { return impl::shim<T, IAccelerometerShakenEventArgs>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
};

template <typename T>
class impl_IInclinometerDeviceId
{
	auto shim() const { return impl::shim<T, IInclinometerDeviceId>(this); }

public:

	hstring DeviceId() const;
};

template <typename T>
class impl_IInclinometerStatics
{
	auto shim() const { return impl::shim<T, IInclinometerStatics>(this); }

public:

	Windows::Devices::Sensors::Inclinometer GetDefault() const;
};

template <typename T>
class impl_IInclinometerStatics2
{
	auto shim() const { return impl::shim<T, IInclinometerStatics2>(this); }

public:

	Windows::Devices::Sensors::Inclinometer GetDefaultForRelativeReadings() const;
};

template <typename T>
class impl_IInclinometer
{
	auto shim() const { return impl::shim<T, IInclinometer>(this); }

public:

	Windows::Devices::Sensors::InclinometerReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	long long ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Inclinometer, Windows::Devices::Sensors::InclinometerReadingChangedEventArgs> const & handler) const;
	template <typename F> long long ReadingChanged(F handler) const;
	void ReadingChanged(long long token) const;
};

template <typename T>
class impl_IInclinometer2
{
	auto shim() const { return impl::shim<T, IInclinometer2>(this); }

public:

	void ReadingTransform(Windows::Graphics::Display::DisplayOrientations value) const;
	Windows::Graphics::Display::DisplayOrientations ReadingTransform() const;
	Windows::Devices::Sensors::SensorReadingType ReadingType() const;
};

template <typename T>
class impl_IInclinometerReading
{
	auto shim() const { return impl::shim<T, IInclinometerReading>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	float PitchDegrees() const;
	float RollDegrees() const;
	float YawDegrees() const;
};

template <typename T>
class impl_IInclinometerReadingYawAccuracy
{
	auto shim() const { return impl::shim<T, IInclinometerReadingYawAccuracy>(this); }

public:

	Windows::Devices::Sensors::MagnetometerAccuracy YawAccuracy() const;
};

template <typename T>
class impl_IInclinometerReadingChangedEventArgs
{
	auto shim() const { return impl::shim<T, IInclinometerReadingChangedEventArgs>(this); }

public:

	Windows::Devices::Sensors::InclinometerReading Reading() const;
};

template <typename T>
class impl_IGyrometerDeviceId
{
	auto shim() const { return impl::shim<T, IGyrometerDeviceId>(this); }

public:

	hstring DeviceId() const;
};

template <typename T>
class impl_IGyrometerStatics
{
	auto shim() const { return impl::shim<T, IGyrometerStatics>(this); }

public:

	Windows::Devices::Sensors::Gyrometer GetDefault() const;
};

template <typename T>
class impl_IGyrometer
{
	auto shim() const { return impl::shim<T, IGyrometer>(this); }

public:

	Windows::Devices::Sensors::GyrometerReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	long long ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Gyrometer, Windows::Devices::Sensors::GyrometerReadingChangedEventArgs> const & handler) const;
	template <typename F> long long ReadingChanged(F handler) const;
	void ReadingChanged(long long token) const;
};

template <typename T>
class impl_IGyrometer2
{
	auto shim() const { return impl::shim<T, IGyrometer2>(this); }

public:

	void ReadingTransform(Windows::Graphics::Display::DisplayOrientations value) const;
	Windows::Graphics::Display::DisplayOrientations ReadingTransform() const;
};

template <typename T>
class impl_IGyrometerReading
{
	auto shim() const { return impl::shim<T, IGyrometerReading>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	double AngularVelocityX() const;
	double AngularVelocityY() const;
	double AngularVelocityZ() const;
};

template <typename T>
class impl_IGyrometerReadingChangedEventArgs
{
	auto shim() const { return impl::shim<T, IGyrometerReadingChangedEventArgs>(this); }

public:

	Windows::Devices::Sensors::GyrometerReading Reading() const;
};

template <typename T>
class impl_ICompassDeviceId
{
	auto shim() const { return impl::shim<T, ICompassDeviceId>(this); }

public:

	hstring DeviceId() const;
};

template <typename T>
class impl_ICompassStatics
{
	auto shim() const { return impl::shim<T, ICompassStatics>(this); }

public:

	Windows::Devices::Sensors::Compass GetDefault() const;
};

template <typename T>
class impl_ICompass
{
	auto shim() const { return impl::shim<T, ICompass>(this); }

public:

	Windows::Devices::Sensors::CompassReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	long long ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Compass, Windows::Devices::Sensors::CompassReadingChangedEventArgs> const & handler) const;
	template <typename F> long long ReadingChanged(F handler) const;
	void ReadingChanged(long long token) const;
};

template <typename T>
class impl_ICompass2
{
	auto shim() const { return impl::shim<T, ICompass2>(this); }

public:

	void ReadingTransform(Windows::Graphics::Display::DisplayOrientations value) const;
	Windows::Graphics::Display::DisplayOrientations ReadingTransform() const;
};

template <typename T>
class impl_ICompassReading
{
	auto shim() const { return impl::shim<T, ICompassReading>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	double HeadingMagneticNorth() const;
	Windows::Foundation::IReference<double> HeadingTrueNorth() const;
};

template <typename T>
class impl_ICompassReadingHeadingAccuracy
{
	auto shim() const { return impl::shim<T, ICompassReadingHeadingAccuracy>(this); }

public:

	Windows::Devices::Sensors::MagnetometerAccuracy HeadingAccuracy() const;
};

template <typename T>
class impl_ICompassReadingChangedEventArgs
{
	auto shim() const { return impl::shim<T, ICompassReadingChangedEventArgs>(this); }

public:

	Windows::Devices::Sensors::CompassReading Reading() const;
};

template <typename T>
class impl_ILightSensorDeviceId
{
	auto shim() const { return impl::shim<T, ILightSensorDeviceId>(this); }

public:

	hstring DeviceId() const;
};

template <typename T>
class impl_ILightSensorStatics
{
	auto shim() const { return impl::shim<T, ILightSensorStatics>(this); }

public:

	Windows::Devices::Sensors::LightSensor GetDefault() const;
};

template <typename T>
class impl_ILightSensor
{
	auto shim() const { return impl::shim<T, ILightSensor>(this); }

public:

	Windows::Devices::Sensors::LightSensorReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	long long ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::LightSensor, Windows::Devices::Sensors::LightSensorReadingChangedEventArgs> const & handler) const;
	template <typename F> long long ReadingChanged(F handler) const;
	void ReadingChanged(long long token) const;
};

template <typename T>
class impl_ILightSensorReading
{
	auto shim() const { return impl::shim<T, ILightSensorReading>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	float IlluminanceInLux() const;
};

template <typename T>
class impl_ILightSensorReadingChangedEventArgs
{
	auto shim() const { return impl::shim<T, ILightSensorReadingChangedEventArgs>(this); }

public:

	Windows::Devices::Sensors::LightSensorReading Reading() const;
};

template <typename T>
class impl_ISensorRotationMatrix
{
	auto shim() const { return impl::shim<T, ISensorRotationMatrix>(this); }

public:

	float M11() const;
	float M12() const;
	float M13() const;
	float M21() const;
	float M22() const;
	float M23() const;
	float M31() const;
	float M32() const;
	float M33() const;
};

template <typename T>
class impl_ISensorQuaternion
{
	auto shim() const { return impl::shim<T, ISensorQuaternion>(this); }

public:

	float W() const;
	float X() const;
	float Y() const;
	float Z() const;
};

template <typename T>
class impl_IOrientationSensorDeviceId
{
	auto shim() const { return impl::shim<T, IOrientationSensorDeviceId>(this); }

public:

	hstring DeviceId() const;
};

template <typename T>
class impl_IOrientationSensorStatics
{
	auto shim() const { return impl::shim<T, IOrientationSensorStatics>(this); }

public:

	Windows::Devices::Sensors::OrientationSensor GetDefault() const;
};

template <typename T>
class impl_IOrientationSensorStatics2
{
	auto shim() const { return impl::shim<T, IOrientationSensorStatics2>(this); }

public:

	Windows::Devices::Sensors::OrientationSensor GetDefaultForRelativeReadings() const;
};

template <typename T>
class impl_IOrientationSensor
{
	auto shim() const { return impl::shim<T, IOrientationSensor>(this); }

public:

	Windows::Devices::Sensors::OrientationSensorReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	long long ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::OrientationSensor, Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs> const & handler) const;
	template <typename F> long long ReadingChanged(F handler) const;
	void ReadingChanged(long long token) const;
};

template <typename T>
class impl_IOrientationSensor2
{
	auto shim() const { return impl::shim<T, IOrientationSensor2>(this); }

public:

	void ReadingTransform(Windows::Graphics::Display::DisplayOrientations value) const;
	Windows::Graphics::Display::DisplayOrientations ReadingTransform() const;
	Windows::Devices::Sensors::SensorReadingType ReadingType() const;
};

template <typename T>
class impl_IOrientationSensorReading
{
	auto shim() const { return impl::shim<T, IOrientationSensorReading>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	Windows::Devices::Sensors::SensorRotationMatrix RotationMatrix() const;
	Windows::Devices::Sensors::SensorQuaternion Quaternion() const;
};

template <typename T>
class impl_IOrientationSensorReadingYawAccuracy
{
	auto shim() const { return impl::shim<T, IOrientationSensorReadingYawAccuracy>(this); }

public:

	Windows::Devices::Sensors::MagnetometerAccuracy YawAccuracy() const;
};

template <typename T>
class impl_IOrientationSensorReadingChangedEventArgs
{
	auto shim() const { return impl::shim<T, IOrientationSensorReadingChangedEventArgs>(this); }

public:

	Windows::Devices::Sensors::OrientationSensorReading Reading() const;
};

template <typename T>
class impl_ISimpleOrientationSensorDeviceId
{
	auto shim() const { return impl::shim<T, ISimpleOrientationSensorDeviceId>(this); }

public:

	hstring DeviceId() const;
};

template <typename T>
class impl_ISimpleOrientationSensorStatics
{
	auto shim() const { return impl::shim<T, ISimpleOrientationSensorStatics>(this); }

public:

	Windows::Devices::Sensors::SimpleOrientationSensor GetDefault() const;
};

template <typename T>
class impl_ISimpleOrientationSensor
{
	auto shim() const { return impl::shim<T, ISimpleOrientationSensor>(this); }

public:

	Windows::Devices::Sensors::SimpleOrientation GetCurrentOrientation() const;
	long long OrientationChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::SimpleOrientationSensor, Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs> const & handler) const;
	template <typename F> long long OrientationChanged(F handler) const;
	void OrientationChanged(long long token) const;
};

template <typename T>
class impl_ISimpleOrientationSensor2
{
	auto shim() const { return impl::shim<T, ISimpleOrientationSensor2>(this); }

public:

	void ReadingTransform(Windows::Graphics::Display::DisplayOrientations value) const;
	Windows::Graphics::Display::DisplayOrientations ReadingTransform() const;
};

template <typename T>
class impl_ISimpleOrientationSensorOrientationChangedEventArgs
{
	auto shim() const { return impl::shim<T, ISimpleOrientationSensorOrientationChangedEventArgs>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	Windows::Devices::Sensors::SimpleOrientation Orientation() const;
};

template <typename T>
class impl_IMagnetometerDeviceId
{
	auto shim() const { return impl::shim<T, IMagnetometerDeviceId>(this); }

public:

	hstring DeviceId() const;
};

template <typename T>
class impl_IMagnetometerStatics
{
	auto shim() const { return impl::shim<T, IMagnetometerStatics>(this); }

public:

	Windows::Devices::Sensors::Magnetometer GetDefault() const;
};

template <typename T>
class impl_IMagnetometer
{
	auto shim() const { return impl::shim<T, IMagnetometer>(this); }

public:

	Windows::Devices::Sensors::MagnetometerReading GetCurrentReading() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	long long ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Magnetometer, Windows::Devices::Sensors::MagnetometerReadingChangedEventArgs> const & handler) const;
	template <typename F> long long ReadingChanged(F handler) const;
	void ReadingChanged(long long token) const;
};

template <typename T>
class impl_IMagnetometer2
{
	auto shim() const { return impl::shim<T, IMagnetometer2>(this); }

public:

	void ReadingTransform(Windows::Graphics::Display::DisplayOrientations value) const;
	Windows::Graphics::Display::DisplayOrientations ReadingTransform() const;
};

template <typename T>
class impl_IMagnetometerReading
{
	auto shim() const { return impl::shim<T, IMagnetometerReading>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	float MagneticFieldX() const;
	float MagneticFieldY() const;
	float MagneticFieldZ() const;
	Windows::Devices::Sensors::MagnetometerAccuracy DirectionalAccuracy() const;
};

template <typename T>
class impl_IMagnetometerReadingChangedEventArgs
{
	auto shim() const { return impl::shim<T, IMagnetometerReadingChangedEventArgs>(this); }

public:

	Windows::Devices::Sensors::MagnetometerReading Reading() const;
};

template <typename T>
class impl_IActivitySensorStatics
{
	auto shim() const { return impl::shim<T, IActivitySensorStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensor> GetDefaultAsync() const;
	hstring GetDeviceSelector() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensor> FromIdAsync(hstring_ref deviceId) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReading>> GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReading>> GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime, Windows::Foundation::TimeSpan const & duration) const;
};

template <typename T>
class impl_IActivitySensor
{
	auto shim() const { return impl::shim<T, IActivitySensor>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensorReading> GetCurrentReadingAsync() const;
	Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Sensors::ActivityType> SubscribedActivities() const;
	double PowerInMilliwatts() const;
	hstring DeviceId() const;
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Sensors::ActivityType> SupportedActivities() const;
	unsigned MinimumReportInterval() const;
	long long ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::ActivitySensor, Windows::Devices::Sensors::ActivitySensorReadingChangedEventArgs> const & handler) const;
	template <typename F> long long ReadingChanged(F handler) const;
	void ReadingChanged(long long token) const;
};

template <typename T>
class impl_IActivitySensorReading
{
	auto shim() const { return impl::shim<T, IActivitySensorReading>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	Windows::Devices::Sensors::ActivityType Activity() const;
	Windows::Devices::Sensors::ActivitySensorReadingConfidence Confidence() const;
};

template <typename T>
class impl_IActivitySensorReadingChangedEventArgs
{
	auto shim() const { return impl::shim<T, IActivitySensorReadingChangedEventArgs>(this); }

public:

	Windows::Devices::Sensors::ActivitySensorReading Reading() const;
};

template <typename T>
class impl_IActivitySensorReadingChangeReport
{
	auto shim() const { return impl::shim<T, IActivitySensorReadingChangeReport>(this); }

public:

	Windows::Devices::Sensors::ActivitySensorReading Reading() const;
};

template <typename T>
class impl_IActivitySensorTriggerDetails
{
	auto shim() const { return impl::shim<T, IActivitySensorTriggerDetails>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReadingChangeReport> ReadReports() const;
};

template <typename T>
class impl_IBarometerStatics
{
	auto shim() const { return impl::shim<T, IBarometerStatics>(this); }

public:

	Windows::Devices::Sensors::Barometer GetDefault() const;
};

template <typename T>
class impl_IBarometer
{
	auto shim() const { return impl::shim<T, IBarometer>(this); }

public:

	Windows::Devices::Sensors::BarometerReading GetCurrentReading() const;
	hstring DeviceId() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	long long ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Barometer, Windows::Devices::Sensors::BarometerReadingChangedEventArgs> const & handler) const;
	template <typename F> long long ReadingChanged(F handler) const;
	void ReadingChanged(long long token) const;
};

template <typename T>
class impl_IBarometerReading
{
	auto shim() const { return impl::shim<T, IBarometerReading>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	double StationPressureInHectopascals() const;
};

template <typename T>
class impl_IBarometerReadingChangedEventArgs
{
	auto shim() const { return impl::shim<T, IBarometerReadingChangedEventArgs>(this); }

public:

	Windows::Devices::Sensors::BarometerReading Reading() const;
};

template <typename T>
class impl_IPedometerReading
{
	auto shim() const { return impl::shim<T, IPedometerReading>(this); }

public:

	Windows::Devices::Sensors::PedometerStepKind StepKind() const;
	int CumulativeSteps() const;
	Windows::Foundation::DateTime Timestamp() const;
	Windows::Foundation::TimeSpan CumulativeStepsDuration() const;
};

template <typename T>
class impl_IPedometerReadingChangedEventArgs
{
	auto shim() const { return impl::shim<T, IPedometerReadingChangedEventArgs>(this); }

public:

	Windows::Devices::Sensors::PedometerReading Reading() const;
};

template <typename T>
class impl_IPedometerStatics
{
	auto shim() const { return impl::shim<T, IPedometerStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::Pedometer> FromIdAsync(hstring_ref deviceId) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::Pedometer> GetDefaultAsync() const;
	hstring GetDeviceSelector() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading>> GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading>> GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime, Windows::Foundation::TimeSpan const & duration) const;
};

template <typename T>
class impl_IPedometerStatics2
{
	auto shim() const { return impl::shim<T, IPedometerStatics2>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading> GetReadingsFromTriggerDetails(Windows::Devices::Sensors::SensorDataThresholdTriggerDetails const & triggerDetails) const;
};

template <typename T>
class impl_IPedometer2
{
	auto shim() const { return impl::shim<T, IPedometer2>(this); }

public:

	Windows::Foundation::Collections::IMapView<winrt::Windows::Devices::Sensors::PedometerStepKind, Windows::Devices::Sensors::PedometerReading> GetCurrentReadings() const;
};

template <typename T>
class impl_IPedometer
{
	auto shim() const { return impl::shim<T, IPedometer>(this); }

public:

	hstring DeviceId() const;
	double PowerInMilliwatts() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	long long ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Pedometer, Windows::Devices::Sensors::PedometerReadingChangedEventArgs> const & handler) const;
	template <typename F> long long ReadingChanged(F handler) const;
	void ReadingChanged(long long token) const;
};

template <typename T>
class impl_IPedometerDataThresholdFactory
{
	auto shim() const { return impl::shim<T, IPedometerDataThresholdFactory>(this); }

public:

	Windows::Devices::Sensors::PedometerDataThreshold Create(Windows::Devices::Sensors::Pedometer const & sensor, int stepGoal) const;
};

template <typename T>
class impl_IProximitySensorStatics
{
	auto shim() const { return impl::shim<T, IProximitySensorStatics>(this); }

public:

	hstring GetDeviceSelector() const;
	Windows::Devices::Sensors::ProximitySensor FromId(hstring_ref sensorId) const;
};

template <typename T>
class impl_IProximitySensor
{
	auto shim() const { return impl::shim<T, IProximitySensor>(this); }

public:

	hstring DeviceId() const;
	Windows::Foundation::IReference<unsigned> MaxDistanceInMillimeters() const;
	Windows::Foundation::IReference<unsigned> MinDistanceInMillimeters() const;
	Windows::Devices::Sensors::ProximitySensorReading GetCurrentReading() const;
	long long ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::ProximitySensor, Windows::Devices::Sensors::ProximitySensorReadingChangedEventArgs> const & handler) const;
	template <typename F> long long ReadingChanged(F handler) const;
	void ReadingChanged(long long token) const;
	Windows::Devices::Sensors::ProximitySensorDisplayOnOffController CreateDisplayOnOffController() const;
};

template <typename T>
class impl_IProximitySensorReadingChangedEventArgs
{
	auto shim() const { return impl::shim<T, IProximitySensorReadingChangedEventArgs>(this); }

public:

	Windows::Devices::Sensors::ProximitySensorReading Reading() const;
};

template <typename T>
class impl_IProximitySensorReading
{
	auto shim() const { return impl::shim<T, IProximitySensorReading>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	bool IsDetected() const;
	Windows::Foundation::IReference<unsigned> DistanceInMillimeters() const;
};

template <typename T>
class impl_IProximitySensorDataThresholdFactory
{
	auto shim() const { return impl::shim<T, IProximitySensorDataThresholdFactory>(this); }

public:

	Windows::Devices::Sensors::ProximitySensorDataThreshold Create(Windows::Devices::Sensors::ProximitySensor const & sensor) const;
};

template <typename T>
class impl_IProximitySensorStatics2
{
	auto shim() const { return impl::shim<T, IProximitySensorStatics2>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ProximitySensorReading> GetReadingsFromTriggerDetails(Windows::Devices::Sensors::SensorDataThresholdTriggerDetails const & triggerDetails) const;
};

template <typename T>
class impl_IAltimeterStatics
{
	auto shim() const { return impl::shim<T, IAltimeterStatics>(this); }

public:

	Windows::Devices::Sensors::Altimeter GetDefault() const;
};

template <typename T>
class impl_IAltimeter
{
	auto shim() const { return impl::shim<T, IAltimeter>(this); }

public:

	Windows::Devices::Sensors::AltimeterReading GetCurrentReading() const;
	hstring DeviceId() const;
	unsigned MinimumReportInterval() const;
	void ReportInterval(unsigned value) const;
	unsigned ReportInterval() const;
	long long ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Altimeter, Windows::Devices::Sensors::AltimeterReadingChangedEventArgs> const & handler) const;
	template <typename F> long long ReadingChanged(F handler) const;
	void ReadingChanged(long long token) const;
};

template <typename T>
class impl_IAltimeterReading
{
	auto shim() const { return impl::shim<T, IAltimeterReading>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	double AltitudeChangeInMeters() const;
};

template <typename T>
class impl_IAltimeterReadingChangedEventArgs
{
	auto shim() const { return impl::shim<T, IAltimeterReadingChangedEventArgs>(this); }

public:

	Windows::Devices::Sensors::AltimeterReading Reading() const;
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sms {

template <typename T>
class impl_ISmsMessageReceivedEventHandler
{
	auto shim() const { return impl::shim<T, ISmsMessageReceivedEventHandler>(this); }

public:

	void Invoke(Windows::Devices::Sms::SmsDevice const & sender, Windows::Devices::Sms::SmsMessageReceivedEventArgs const & e) const;
};

template <typename T>
class impl_ISmsDeviceStatusChangedEventHandler
{
	auto shim() const { return impl::shim<T, ISmsDeviceStatusChangedEventHandler>(this); }

public:

	void Invoke(Windows::Devices::Sms::SmsDevice const & sender) const;
};

template <typename T>
class impl_ISmsMessage
{
	auto shim() const { return impl::shim<T, ISmsMessage>(this); }

public:

	unsigned Id() const;
	Windows::Devices::Sms::SmsMessageClass MessageClass() const;
};

template <typename T>
class impl_ISmsMessageBase
{
	auto shim() const { return impl::shim<T, ISmsMessageBase>(this); }

public:

	Windows::Devices::Sms::SmsMessageType MessageType() const;
	hstring DeviceId() const;
	Windows::Devices::Sms::CellularClass CellularClass() const;
	Windows::Devices::Sms::SmsMessageClass MessageClass() const;
	hstring SimIccId() const;
};

template <typename T>
class impl_ISmsBinaryMessage
{
	auto shim() const { return impl::shim<T, ISmsBinaryMessage>(this); }

public:

	Windows::Devices::Sms::SmsDataFormat Format() const;
	void Format(Windows::Devices::Sms::SmsDataFormat value) const;
};

template <typename T>
class impl_ISmsTextMessage
{
	auto shim() const { return impl::shim<T, ISmsTextMessage>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	unsigned PartReferenceId() const;
	unsigned PartNumber() const;
	unsigned PartCount() const;
	hstring To() const;
	void To(hstring_ref value) const;
	hstring From() const;
	void From(hstring_ref value) const;
	hstring Body() const;
	void Body(hstring_ref value) const;
	Windows::Devices::Sms::SmsEncoding Encoding() const;
	void Encoding(Windows::Devices::Sms::SmsEncoding value) const;
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsBinaryMessage> ToBinaryMessages(Windows::Devices::Sms::SmsDataFormat format) const;
};

template <typename T>
class impl_ISmsTextMessageStatics
{
	auto shim() const { return impl::shim<T, ISmsTextMessageStatics>(this); }

public:

	Windows::Devices::Sms::SmsTextMessage FromBinaryMessage(Windows::Devices::Sms::SmsBinaryMessage const & binaryMessage) const;
};

template <typename T>
class impl_ISmsTextMessage2
{
	auto shim() const { return impl::shim<T, ISmsTextMessage2>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	hstring To() const;
	void To(hstring_ref value) const;
	hstring From() const;
	hstring Body() const;
	void Body(hstring_ref value) const;
	Windows::Devices::Sms::SmsEncoding Encoding() const;
	void Encoding(Windows::Devices::Sms::SmsEncoding value) const;
	hstring CallbackNumber() const;
	void CallbackNumber(hstring_ref value) const;
	bool IsDeliveryNotificationEnabled() const;
	void IsDeliveryNotificationEnabled(bool value) const;
	int RetryAttemptCount() const;
	void RetryAttemptCount(int value) const;
	int TeleserviceId() const;
	int ProtocolId() const;
};

template <typename T>
class impl_ISmsWapMessage
{
	auto shim() const { return impl::shim<T, ISmsWapMessage>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	hstring To() const;
	hstring From() const;
	hstring ApplicationId() const;
	hstring ContentType() const;
	Windows::Storage::Streams::IBuffer BinaryBody() const;
	Windows::Foundation::Collections::IMap<hstring, hstring> Headers() const;
};

template <typename T>
class impl_ISmsAppMessage
{
	auto shim() const { return impl::shim<T, ISmsAppMessage>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	hstring To() const;
	void To(hstring_ref value) const;
	hstring From() const;
	hstring Body() const;
	void Body(hstring_ref value) const;
	hstring CallbackNumber() const;
	void CallbackNumber(hstring_ref value) const;
	bool IsDeliveryNotificationEnabled() const;
	void IsDeliveryNotificationEnabled(bool value) const;
	int RetryAttemptCount() const;
	void RetryAttemptCount(int value) const;
	Windows::Devices::Sms::SmsEncoding Encoding() const;
	void Encoding(Windows::Devices::Sms::SmsEncoding value) const;
	int PortNumber() const;
	void PortNumber(int value) const;
	int TeleserviceId() const;
	void TeleserviceId(int value) const;
	int ProtocolId() const;
	void ProtocolId(int value) const;
	Windows::Storage::Streams::IBuffer BinaryBody() const;
	void BinaryBody(Windows::Storage::Streams::IBuffer const & value) const;
};

template <typename T>
class impl_ISmsBroadcastMessage
{
	auto shim() const { return impl::shim<T, ISmsBroadcastMessage>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	hstring To() const;
	hstring Body() const;
	int Channel() const;
	Windows::Devices::Sms::SmsGeographicalScope GeographicalScope() const;
	int MessageCode() const;
	int UpdateNumber() const;
	Windows::Devices::Sms::SmsBroadcastType BroadcastType() const;
	bool IsEmergencyAlert() const;
	bool IsUserPopupRequested() const;
};

template <typename T>
class impl_ISmsVoicemailMessage
{
	auto shim() const { return impl::shim<T, ISmsVoicemailMessage>(this); }

public:

	Windows::Foundation::DateTime Timestamp() const;
	hstring To() const;
	hstring Body() const;
	Windows::Foundation::IReference<int> MessageCount() const;
};

template <typename T>
class impl_ISmsStatusMessage
{
	auto shim() const { return impl::shim<T, ISmsStatusMessage>(this); }

public:

	hstring To() const;
	hstring From() const;
	hstring Body() const;
	int Status() const;
	int MessageReferenceNumber() const;
	Windows::Foundation::DateTime ServiceCenterTimestamp() const;
	Windows::Foundation::DateTime DischargeTime() const;
};

template <typename T>
class impl_ISmsDeviceMessageStore
{
	auto shim() const { return impl::shim<T, ISmsDeviceMessageStore>(this); }

public:

	Windows::Foundation::IAsyncAction DeleteMessageAsync(unsigned messageId) const;
	Windows::Foundation::IAsyncAction DeleteMessagesAsync(Windows::Devices::Sms::SmsMessageFilter messageFilter) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::ISmsMessage> GetMessageAsync(unsigned messageId) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsMessage>, int> GetMessagesAsync(Windows::Devices::Sms::SmsMessageFilter messageFilter) const;
	unsigned MaxMessages() const;
};

template <typename T>
class impl_ISmsSendMessageResult
{
	auto shim() const { return impl::shim<T, ISmsSendMessageResult>(this); }

public:

	bool IsSuccessful() const;
	Windows::Foundation::Collections::IVectorView<int> MessageReferenceNumbers() const;
	Windows::Devices::Sms::CellularClass CellularClass() const;
	Windows::Devices::Sms::SmsModemErrorCode ModemErrorCode() const;
	bool IsErrorTransient() const;
	int NetworkCauseCode() const;
	int TransportFailureCause() const;
};

template <typename T>
class impl_ISmsMessageReceivedEventArgs
{
	auto shim() const { return impl::shim<T, ISmsMessageReceivedEventArgs>(this); }

public:

	Windows::Devices::Sms::SmsTextMessage TextMessage() const;
	Windows::Devices::Sms::SmsBinaryMessage BinaryMessage() const;
};

template <typename T>
class impl_ISmsDeviceStatics
{
	auto shim() const { return impl::shim<T, ISmsDeviceStatics>(this); }

public:

	hstring GetDeviceSelector() const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromIdAsync(hstring_ref deviceId) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> GetDefaultAsync() const;
};

template <typename T>
class impl_ISmsDeviceStatics2
{
	auto shim() const { return impl::shim<T, ISmsDeviceStatics2>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromNetworkAccountIdAsync(hstring_ref networkAccountId) const;
};

template <typename T>
class impl_ISmsDevice
{
	auto shim() const { return impl::shim<T, ISmsDevice>(this); }

public:

	Windows::Devices::Sms::SendSmsMessageOperation SendMessageAsync(Windows::Devices::Sms::ISmsMessage const & message) const;
	Windows::Devices::Sms::SmsEncodedLength CalculateLength(Windows::Devices::Sms::SmsTextMessage const & message) const;
	hstring AccountPhoneNumber() const;
	Windows::Devices::Sms::CellularClass CellularClass() const;
	Windows::Devices::Sms::SmsDeviceMessageStore MessageStore() const;
	Windows::Devices::Sms::SmsDeviceStatus DeviceStatus() const;
	long long SmsMessageReceived(Windows::Devices::Sms::ISmsMessageReceivedEventHandler const & eventHandler) const;
	template <typename F> long long SmsMessageReceived(F eventHandler) const;
	void SmsMessageReceived(long long eventCookie) const;
	long long SmsDeviceStatusChanged(Windows::Devices::Sms::ISmsDeviceStatusChangedEventHandler const & eventHandler) const;
	template <typename F> long long SmsDeviceStatusChanged(F eventHandler) const;
	void SmsDeviceStatusChanged(long long eventCookie) const;
};

template <typename T>
class impl_ISmsDevice2Statics
{
	auto shim() const { return impl::shim<T, ISmsDevice2Statics>(this); }

public:

	hstring GetDeviceSelector() const;
	Windows::Devices::Sms::SmsDevice2 FromId(hstring_ref deviceId) const;
	Windows::Devices::Sms::SmsDevice2 GetDefault() const;
	Windows::Devices::Sms::SmsDevice2 FromParentId(hstring_ref parentDeviceId) const;
};

template <typename T>
class impl_ISmsDevice2
{
	auto shim() const { return impl::shim<T, ISmsDevice2>(this); }

public:

	hstring SmscAddress() const;
	void SmscAddress(hstring_ref value) const;
	hstring DeviceId() const;
	hstring ParentDeviceId() const;
	hstring AccountPhoneNumber() const;
	Windows::Devices::Sms::CellularClass CellularClass() const;
	Windows::Devices::Sms::SmsDeviceStatus DeviceStatus() const;
	Windows::Devices::Sms::SmsEncodedLength CalculateLength(Windows::Devices::Sms::ISmsMessageBase const & message) const;
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsSendMessageResult> SendMessageAndGetResultAsync(Windows::Devices::Sms::ISmsMessageBase const & message) const;
	long long DeviceStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sms::SmsDevice2, IInspectable> const & eventHandler) const;
	template <typename F> long long DeviceStatusChanged(F eventHandler) const;
	void DeviceStatusChanged(long long eventCookie) const;
};

template <typename T>
class impl_ISmsReceivedEventDetails
{
	auto shim() const { return impl::shim<T, ISmsReceivedEventDetails>(this); }

public:

	hstring DeviceId() const;
	unsigned MessageIndex() const;
};

template <typename T>
class impl_ISmsReceivedEventDetails2
{
	auto shim() const { return impl::shim<T, ISmsReceivedEventDetails2>(this); }

public:

	Windows::Devices::Sms::SmsMessageClass MessageClass() const;
	Windows::Devices::Sms::SmsBinaryMessage BinaryMessage() const;
};

template <typename T>
class impl_ISmsMessageReceivedTriggerDetails
{
	auto shim() const { return impl::shim<T, ISmsMessageReceivedTriggerDetails>(this); }

public:

	Windows::Devices::Sms::SmsMessageType MessageType() const;
	Windows::Devices::Sms::SmsTextMessage2 TextMessage() const;
	Windows::Devices::Sms::SmsWapMessage WapMessage() const;
	Windows::Devices::Sms::SmsAppMessage AppMessage() const;
	Windows::Devices::Sms::SmsBroadcastMessage BroadcastMessage() const;
	Windows::Devices::Sms::SmsVoicemailMessage VoicemailMessage() const;
	Windows::Devices::Sms::SmsStatusMessage StatusMessage() const;
	void Drop() const;
	void Accept() const;
};

template <typename T>
class impl_ISmsFilterRule
{
	auto shim() const { return impl::shim<T, ISmsFilterRule>(this); }

public:

	Windows::Devices::Sms::SmsMessageType MessageType() const;
	Windows::Foundation::Collections::IVector<hstring> ImsiPrefixes() const;
	Windows::Foundation::Collections::IVector<hstring> DeviceIds() const;
	Windows::Foundation::Collections::IVector<hstring> SenderNumbers() const;
	Windows::Foundation::Collections::IVector<hstring> TextMessagePrefixes() const;
	Windows::Foundation::Collections::IVector<int> PortNumbers() const;
	Windows::Devices::Sms::CellularClass CellularClass() const;
	void CellularClass(Windows::Devices::Sms::CellularClass value) const;
	Windows::Foundation::Collections::IVector<int> ProtocolIds() const;
	Windows::Foundation::Collections::IVector<int> TeleserviceIds() const;
	Windows::Foundation::Collections::IVector<hstring> WapApplicationIds() const;
	Windows::Foundation::Collections::IVector<hstring> WapContentTypes() const;
	Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Sms::SmsBroadcastType> BroadcastTypes() const;
	Windows::Foundation::Collections::IVector<int> BroadcastChannels() const;
};

template <typename T>
class impl_ISmsFilterRuleFactory
{
	auto shim() const { return impl::shim<T, ISmsFilterRuleFactory>(this); }

public:

	Windows::Devices::Sms::SmsFilterRule CreateFilterRule(Windows::Devices::Sms::SmsMessageType messageType) const;
};

template <typename T>
class impl_ISmsFilterRules
{
	auto shim() const { return impl::shim<T, ISmsFilterRules>(this); }

public:

	Windows::Devices::Sms::SmsFilterActionType ActionType() const;
	Windows::Foundation::Collections::IVector<Windows::Devices::Sms::SmsFilterRule> Rules() const;
};

template <typename T>
class impl_ISmsFilterRulesFactory
{
	auto shim() const { return impl::shim<T, ISmsFilterRulesFactory>(this); }

public:

	Windows::Devices::Sms::SmsFilterRules CreateFilterRules(Windows::Devices::Sms::SmsFilterActionType actionType) const;
};

template <typename T>
class impl_ISmsMessageRegistrationStatics
{
	auto shim() const { return impl::shim<T, ISmsMessageRegistrationStatics>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::SmsMessageRegistration> AllRegistrations() const;
	Windows::Devices::Sms::SmsMessageRegistration Register(hstring_ref id, Windows::Devices::Sms::SmsFilterRules const & filterRules) const;
};

template <typename T>
class impl_ISmsMessageRegistration
{
	auto shim() const { return impl::shim<T, ISmsMessageRegistration>(this); }

public:

	hstring Id() const;
	void Unregister() const;
	long long MessageReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sms::SmsMessageRegistration, Windows::Devices::Sms::SmsMessageReceivedTriggerDetails> const & eventHandler) const;
	template <typename F> long long MessageReceived(F eventHandler) const;
	void MessageReceived(long long eventCookie) const;
};

}}}}

namespace winrt { namespace Windows { namespace Foundation {

template <typename T>
class impl_IAsyncActionCompletedHandler
{
	auto shim() const { return impl::shim<T, IAsyncActionCompletedHandler>(this); }

public:

	void Invoke(Windows::Foundation::IAsyncAction const & asyncInfo, AsyncStatus asyncStatus) const;
};

template <typename T>
class impl_IDeferralCompletedHandler
{
	auto shim() const { return impl::shim<T, IDeferralCompletedHandler>(this); }

public:

	void Invoke() const;
};

template <typename T>
class impl_IUriRuntimeClass
{
	auto shim() const { return impl::shim<T, IUriRuntimeClass>(this); }

public:

	hstring AbsoluteUri() const;
	hstring DisplayUri() const;
	hstring Domain() const;
	hstring Extension() const;
	hstring Fragment() const;
	hstring Host() const;
	hstring Password() const;
	hstring Path() const;
	hstring Query() const;
	Windows::Foundation::WwwFormUrlDecoder QueryParsed() const;
	hstring RawUri() const;
	hstring SchemeName() const;
	hstring UserName() const;
	int Port() const;
	bool Suspicious() const;
	bool Equals(Windows::Foundation::Uri const & pUri) const;
	Windows::Foundation::Uri CombineUri(hstring_ref relativeUri) const;
};

template <typename T>
class impl_IUriRuntimeClassWithAbsoluteCanonicalUri
{
	auto shim() const { return impl::shim<T, IUriRuntimeClassWithAbsoluteCanonicalUri>(this); }

public:

	hstring AbsoluteCanonicalUri() const;
	hstring DisplayIri() const;
};

template <typename T>
class impl_IUriEscapeStatics
{
	auto shim() const { return impl::shim<T, IUriEscapeStatics>(this); }

public:

	hstring UnescapeComponent(hstring_ref toUnescape) const;
	hstring EscapeComponent(hstring_ref toEscape) const;
};

template <typename T>
class impl_IUriRuntimeClassFactory
{
	auto shim() const { return impl::shim<T, IUriRuntimeClassFactory>(this); }

public:

	Windows::Foundation::Uri CreateUri(hstring_ref uri) const;
	Windows::Foundation::Uri CreateWithRelativeUri(hstring_ref baseUri, hstring_ref relativeUri) const;
};

template <typename T>
class impl_IWwwFormUrlDecoderEntry
{
	auto shim() const { return impl::shim<T, IWwwFormUrlDecoderEntry>(this); }

public:

	hstring Name() const;
	hstring Value() const;
};

template <typename T>
class impl_IWwwFormUrlDecoderRuntimeClass
{
	auto shim() const { return impl::shim<T, IWwwFormUrlDecoderRuntimeClass>(this); }

public:

	hstring GetFirstValueByName(hstring_ref name) const;
};

template <typename T>
class impl_IWwwFormUrlDecoderRuntimeClassFactory
{
	auto shim() const { return impl::shim<T, IWwwFormUrlDecoderRuntimeClassFactory>(this); }

public:

	Windows::Foundation::WwwFormUrlDecoder CreateWwwFormUrlDecoder(hstring_ref query) const;
};

template <typename T>
class impl_IGetActivationFactory
{
	auto shim() const { return impl::shim<T, IGetActivationFactory>(this); }

public:

	IInspectable GetActivationFactory(hstring_ref activatableClassId) const;
};

template <typename T>
class impl_IClosable
{
	auto shim() const { return impl::shim<T, IClosable>(this); }

public:

	void Close() const;
};

template <typename T>
class impl_IPropertyValue
{
	auto shim() const { return impl::shim<T, IPropertyValue>(this); }

public:

	Windows::Foundation::PropertyType Type() const;
	bool IsNumericScalar() const;
	byte GetUInt8() const;
	short GetInt16() const;
	unsigned short GetUInt16() const;
	int GetInt32() const;
	unsigned GetUInt32() const;
	long long GetInt64() const;
	unsigned long long GetUInt64() const;
	float GetSingle() const;
	double GetDouble() const;
	wchar_t GetChar16() const;
	bool GetBoolean() const;
	hstring GetString() const;
	GUID GetGuid() const;
	Windows::Foundation::DateTime GetDateTime() const;
	Windows::Foundation::TimeSpan GetTimeSpan() const;
	Windows::Foundation::Point GetPoint() const;
	Windows::Foundation::Size GetSize() const;
	Windows::Foundation::Rect GetRect() const;
};

template <typename T>
class impl_IPropertyValueStatics
{
	auto shim() const { return impl::shim<T, IPropertyValueStatics>(this); }

public:

	IInspectable CreateEmpty() const;
	IInspectable CreateUInt8(byte value) const;
	IInspectable CreateInt16(short value) const;
	IInspectable CreateUInt16(unsigned short value) const;
	IInspectable CreateInt32(int value) const;
	IInspectable CreateUInt32(unsigned value) const;
	IInspectable CreateInt64(long long value) const;
	IInspectable CreateUInt64(unsigned long long value) const;
	IInspectable CreateSingle(float value) const;
	IInspectable CreateDouble(double value) const;
	IInspectable CreateChar16(wchar_t value) const;
	IInspectable CreateBoolean(bool value) const;
	IInspectable CreateString(hstring_ref value) const;
	IInspectable CreateInspectable(IInspectable const & value) const;
	IInspectable CreateGuid(GUID value) const;
	IInspectable CreateDateTime(Windows::Foundation::DateTime const & value) const;
	IInspectable CreateTimeSpan(Windows::Foundation::TimeSpan const & value) const;
	IInspectable CreatePoint(Windows::Foundation::Point const & value) const;
	IInspectable CreateSize(Windows::Foundation::Size const & value) const;
	IInspectable CreateRect(Windows::Foundation::Rect const & value) const;
};

template <typename T>
class impl_IStringable
{
	auto shim() const { return impl::shim<T, IStringable>(this); }

public:

	hstring ToString() const;
};

template <typename T>
class impl_IDeferral
{
	auto shim() const { return impl::shim<T, IDeferral>(this); }

public:

	void Complete() const;
};

template <typename T>
class impl_IDeferralFactory
{
	auto shim() const { return impl::shim<T, IDeferralFactory>(this); }

public:

	Windows::Foundation::Deferral Create(Windows::Foundation::IDeferralCompletedHandler const & handler) const;
	template <typename F> Windows::Foundation::Deferral Create(F handler) const;
};

template <typename T>
class impl_IMemoryBufferReference
{
	auto shim() const { return impl::shim<T, IMemoryBufferReference>(this); }

public:

	unsigned Capacity() const;
	long long Closed(Windows::Foundation::ITypedEventHandler<Windows::Foundation::IMemoryBufferReference, IInspectable> const & handler) const;
	template <typename F> long long Closed(F handler) const;
	void Closed(long long cookie) const;
};

template <typename T>
class impl_IMemoryBuffer
{
	auto shim() const { return impl::shim<T, IMemoryBuffer>(this); }

public:

	Windows::Foundation::IMemoryBufferReference CreateReference() const;
};

template <typename T>
class impl_IMemoryBufferFactory
{
	auto shim() const { return impl::shim<T, IMemoryBufferFactory>(this); }

public:

	Windows::Foundation::MemoryBuffer Create(unsigned capacity) const;
};

template <typename T>
class impl_IAsyncAction
{
	auto shim() const { return impl::shim<T, IAsyncAction>(this); }

public:

	void Completed(Windows::Foundation::IAsyncActionCompletedHandler const & handler) const;
	template <typename F> void Completed(F handler) const;
	Windows::Foundation::IAsyncActionCompletedHandler Completed() const;
	void GetResults() const;
};

}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Collections {

template <typename T>
class impl_IPropertySet
{
	auto shim() const { return impl::shim<T, IPropertySet>(this); }

public:

};

}}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Diagnostics {

template <typename T>
class impl_ITracingStatusChangedEventArgs
{
	auto shim() const { return impl::shim<T, ITracingStatusChangedEventArgs>(this); }

public:

	bool Enabled() const;
	Windows::Foundation::Diagnostics::CausalityTraceLevel TraceLevel() const;
};

template <typename T>
class impl_IAsyncCausalityTracerStatics
{
	auto shim() const { return impl::shim<T, IAsyncCausalityTracerStatics>(this); }

public:

	void TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, hstring_ref operationName, unsigned long long relatedContext) const;
	void TraceOperationCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, AsyncStatus status) const;
	void TraceOperationRelation(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, Windows::Foundation::Diagnostics::CausalityRelation relation) const;
	void TraceSynchronousWorkStart(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, Windows::Foundation::Diagnostics::CausalitySynchronousWork work) const;
	void TraceSynchronousWorkCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, Windows::Foundation::Diagnostics::CausalitySynchronousWork work) const;
	long long TracingStatusChanged(Windows::Foundation::IEventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs> const & handler) const;
	template <typename F> long long TracingStatusChanged(F handler) const;
	void TracingStatusChanged(long long cookie) const;
};

template <typename T>
class impl_IErrorReportingSettings
{
	auto shim() const { return impl::shim<T, IErrorReportingSettings>(this); }

public:

	void SetErrorOptions(Windows::Foundation::Diagnostics::ErrorOptions value) const;
	Windows::Foundation::Diagnostics::ErrorOptions GetErrorOptions() const;
};

template <typename T>
class impl_IErrorDetailsStatics
{
	auto shim() const { return impl::shim<T, IErrorDetailsStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Foundation::Diagnostics::ErrorDetails> CreateFromHResultAsync(int errorCode) const;
};

template <typename T>
class impl_IErrorDetails
{
	auto shim() const { return impl::shim<T, IErrorDetails>(this); }

public:

	hstring Description() const;
	hstring LongDescription() const;
	Windows::Foundation::Uri HelpUri() const;
};

template <typename T>
class impl_ILoggingOptions
{
	auto shim() const { return impl::shim<T, ILoggingOptions>(this); }

public:

	long long Keywords() const;
	void Keywords(long long value) const;
	int Tags() const;
	void Tags(int value) const;
	short Task() const;
	void Task(short value) const;
	Windows::Foundation::Diagnostics::LoggingOpcode Opcode() const;
	void Opcode(Windows::Foundation::Diagnostics::LoggingOpcode value) const;
	GUID ActivityId() const;
	void ActivityId(GUID value) const;
	GUID RelatedActivityId() const;
	void RelatedActivityId(GUID value) const;
};

template <typename T>
class impl_ILoggingOptionsFactory
{
	auto shim() const { return impl::shim<T, ILoggingOptionsFactory>(this); }

public:

	Windows::Foundation::Diagnostics::LoggingOptions CreateWithKeywords(long long keywords) const;
};

template <typename T>
class impl_ILoggingChannelOptions
{
	auto shim() const { return impl::shim<T, ILoggingChannelOptions>(this); }

public:

	GUID Group() const;
	void Group(GUID value) const;
};

template <typename T>
class impl_ILoggingChannelOptionsFactory
{
	auto shim() const { return impl::shim<T, ILoggingChannelOptionsFactory>(this); }

public:

	Windows::Foundation::Diagnostics::LoggingChannelOptions Create(GUID group) const;
};

template <typename T>
class impl_ILoggingFields
{
	auto shim() const { return impl::shim<T, ILoggingFields>(this); }

public:

	void Clear() const;
	void BeginStruct(hstring_ref name) const;
	void BeginStruct(hstring_ref name, int tags) const;
	void EndStruct() const;
	void AddEmpty(hstring_ref name) const;
	void AddEmpty(hstring_ref name, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddEmpty(hstring_ref name, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddUInt8(hstring_ref name, byte value) const;
	void AddUInt8(hstring_ref name, byte value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddUInt8(hstring_ref name, byte value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddInt16(hstring_ref name, short value) const;
	void AddInt16(hstring_ref name, short value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddInt16(hstring_ref name, short value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddUInt16(hstring_ref name, unsigned short value) const;
	void AddUInt16(hstring_ref name, unsigned short value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddUInt16(hstring_ref name, unsigned short value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddInt32(hstring_ref name, int value) const;
	void AddInt32(hstring_ref name, int value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddInt32(hstring_ref name, int value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddUInt32(hstring_ref name, unsigned value) const;
	void AddUInt32(hstring_ref name, unsigned value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddUInt32(hstring_ref name, unsigned value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddInt64(hstring_ref name, long long value) const;
	void AddInt64(hstring_ref name, long long value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddInt64(hstring_ref name, long long value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddUInt64(hstring_ref name, unsigned long long value) const;
	void AddUInt64(hstring_ref name, unsigned long long value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddUInt64(hstring_ref name, unsigned long long value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddSingle(hstring_ref name, float value) const;
	void AddSingle(hstring_ref name, float value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddSingle(hstring_ref name, float value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddDouble(hstring_ref name, double value) const;
	void AddDouble(hstring_ref name, double value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddDouble(hstring_ref name, double value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddChar16(hstring_ref name, wchar_t value) const;
	void AddChar16(hstring_ref name, wchar_t value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddChar16(hstring_ref name, wchar_t value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddBoolean(hstring_ref name, bool value) const;
	void AddBoolean(hstring_ref name, bool value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddBoolean(hstring_ref name, bool value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddString(hstring_ref name, hstring_ref value) const;
	void AddString(hstring_ref name, hstring_ref value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddString(hstring_ref name, hstring_ref value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddGuid(hstring_ref name, GUID value) const;
	void AddGuid(hstring_ref name, GUID value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddGuid(hstring_ref name, GUID value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddDateTime(hstring_ref name, Windows::Foundation::DateTime const & value) const;
	void AddDateTime(hstring_ref name, Windows::Foundation::DateTime const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddDateTime(hstring_ref name, Windows::Foundation::DateTime const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddTimeSpan(hstring_ref name, Windows::Foundation::TimeSpan const & value) const;
	void AddTimeSpan(hstring_ref name, Windows::Foundation::TimeSpan const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddTimeSpan(hstring_ref name, Windows::Foundation::TimeSpan const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddPoint(hstring_ref name, Windows::Foundation::Point const & value) const;
	void AddPoint(hstring_ref name, Windows::Foundation::Point const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddPoint(hstring_ref name, Windows::Foundation::Point const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddSize(hstring_ref name, Windows::Foundation::Size const & value) const;
	void AddSize(hstring_ref name, Windows::Foundation::Size const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddSize(hstring_ref name, Windows::Foundation::Size const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
	void AddRect(hstring_ref name, Windows::Foundation::Rect const & value) const;
	void AddRect(hstring_ref name, Windows::Foundation::Rect const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat format) const;
	void AddRect(hstring_ref name, Windows::Foundation::Rect const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat format, int tags) const;
};

template <typename T>
class impl_ILoggingTarget
{
	auto shim() const { return impl::shim<T, ILoggingTarget>(this); }

public:

	bool IsEnabled() const;
	bool IsEnabled(Windows::Foundation::Diagnostics::LoggingLevel level) const;
	bool IsEnabled(Windows::Foundation::Diagnostics::LoggingLevel level, long long keywords) const;
	void LogEvent(hstring_ref eventName) const;
	void LogEvent(hstring_ref eventName, Windows::Foundation::Diagnostics::LoggingFields const & fields) const;
	void LogEvent(hstring_ref eventName, Windows::Foundation::Diagnostics::LoggingFields const & fields, Windows::Foundation::Diagnostics::LoggingLevel level) const;
	void LogEvent(hstring_ref eventName, Windows::Foundation::Diagnostics::LoggingFields const & fields, Windows::Foundation::Diagnostics::LoggingLevel level, Windows::Foundation::Diagnostics::LoggingOptions const & options) const;
	Windows::Foundation::Diagnostics::LoggingActivity StartActivity(hstring_ref startEventName) const;
	Windows::Foundation::Diagnostics::LoggingActivity StartActivity(hstring_ref startEventName, Windows::Foundation::Diagnostics::LoggingFields const & fields) const;
	Windows::Foundation::Diagnostics::LoggingActivity StartActivity(hstring_ref startEventName, Windows::Foundation::Diagnostics::LoggingFields const & fields, Windows::Foundation::Diagnostics::LoggingLevel level) const;
	Windows::Foundation::Diagnostics::LoggingActivity StartActivity(hstring_ref startEventName, Windows::Foundation::Diagnostics::LoggingFields const & fields, Windows::Foundation::Diagnostics::LoggingLevel level, Windows::Foundation::Diagnostics::LoggingOptions const & options) const;
};

template <typename T>
class impl_ILoggingChannel
{
	auto shim() const { return impl::shim<T, ILoggingChannel>(this); }

public:

	hstring Name() const;
	bool Enabled() const;
	Windows::Foundation::Diagnostics::LoggingLevel Level() const;
	void LogMessage(hstring_ref eventString) const;
	void LogMessage(hstring_ref eventString, Windows::Foundation::Diagnostics::LoggingLevel level) const;
	void LogValuePair(hstring_ref value1, int value2) const;
	void LogValuePair(hstring_ref value1, int value2, Windows::Foundation::Diagnostics::LoggingLevel level) const;
	long long LoggingEnabled(Windows::Foundation::ITypedEventHandler<Windows::Foundation::Diagnostics::ILoggingChannel, IInspectable> const & handler) const;
	template <typename F> long long LoggingEnabled(F handler) const;
	void LoggingEnabled(long long token) const;
};

template <typename T>
class impl_ILoggingChannel2
{
	auto shim() const { return impl::shim<T, ILoggingChannel2>(this); }

public:

	GUID Id() const;
};

template <typename T>
class impl_ILoggingChannelFactory
{
	auto shim() const { return impl::shim<T, ILoggingChannelFactory>(this); }

public:

	Windows::Foundation::Diagnostics::LoggingChannel Create(hstring_ref name) const;
};

template <typename T>
class impl_ILoggingChannelFactory2
{
	auto shim() const { return impl::shim<T, ILoggingChannelFactory2>(this); }

public:

	Windows::Foundation::Diagnostics::LoggingChannel CreateWithOptions(hstring_ref name, Windows::Foundation::Diagnostics::LoggingChannelOptions const & options) const;
	Windows::Foundation::Diagnostics::LoggingChannel CreateWithOptionsAndId(hstring_ref name, Windows::Foundation::Diagnostics::LoggingChannelOptions const & options, GUID id) const;
};

template <typename T>
class impl_ILoggingActivity
{
	auto shim() const { return impl::shim<T, ILoggingActivity>(this); }

public:

	hstring Name() const;
	GUID Id() const;
};

template <typename T>
class impl_ILoggingActivity2
{
	auto shim() const { return impl::shim<T, ILoggingActivity2>(this); }

public:

	Windows::Foundation::Diagnostics::LoggingChannel Channel() const;
	void StopActivity(hstring_ref stopEventName) const;
	void StopActivity(hstring_ref stopEventName, Windows::Foundation::Diagnostics::LoggingFields const & fields) const;
	void StopActivity(hstring_ref stopEventName, Windows::Foundation::Diagnostics::LoggingFields const & fields, Windows::Foundation::Diagnostics::LoggingOptions const & options) const;
};

template <typename T>
class impl_ILoggingActivityFactory
{
	auto shim() const { return impl::shim<T, ILoggingActivityFactory>(this); }

public:

	Windows::Foundation::Diagnostics::LoggingActivity CreateLoggingActivity(hstring_ref activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
	Windows::Foundation::Diagnostics::LoggingActivity CreateLoggingActivityWithLevel(hstring_ref activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel level) const;
};

template <typename T>
class impl_ILoggingSession
{
	auto shim() const { return impl::shim<T, ILoggingSession>(this); }

public:

	hstring Name() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> SaveToFileAsync(Windows::Storage::IStorageFolder const & folder, hstring_ref fileName) const;
	void AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
	void AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel maxLevel) const;
	void RemoveLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
};

template <typename T>
class impl_ILoggingSessionFactory
{
	auto shim() const { return impl::shim<T, ILoggingSessionFactory>(this); }

public:

	Windows::Foundation::Diagnostics::LoggingSession Create(hstring_ref name) const;
};

template <typename T>
class impl_ILogFileGeneratedEventArgs
{
	auto shim() const { return impl::shim<T, ILogFileGeneratedEventArgs>(this); }

public:

	Windows::Storage::StorageFile File() const;
};

template <typename T>
class impl_IFileLoggingSession
{
	auto shim() const { return impl::shim<T, IFileLoggingSession>(this); }

public:

	hstring Name() const;
	void AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
	void AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel maxLevel) const;
	void RemoveLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CloseAndSaveToFileAsync() const;
	long long LogFileGenerated(Windows::Foundation::ITypedEventHandler<Windows::Foundation::Diagnostics::IFileLoggingSession, Windows::Foundation::Diagnostics::LogFileGeneratedEventArgs> const & handler) const;
	template <typename F> long long LogFileGenerated(F handler) const;
	void LogFileGenerated(long long token) const;
};

template <typename T>
class impl_IFileLoggingSessionFactory
{
	auto shim() const { return impl::shim<T, IFileLoggingSessionFactory>(this); }

public:

	Windows::Foundation::Diagnostics::FileLoggingSession Create(hstring_ref name) const;
};

}}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Metadata {

template <typename T>
class impl_IApiInformationStatics
{
	auto shim() const { return impl::shim<T, IApiInformationStatics>(this); }

public:

	bool IsTypePresent(hstring_ref typeName) const;
	bool IsMethodPresent(hstring_ref typeName, hstring_ref methodName) const;
	bool IsMethodPresent(hstring_ref typeName, hstring_ref methodName, unsigned inputParameterCount) const;
	bool IsEventPresent(hstring_ref typeName, hstring_ref eventName) const;
	bool IsPropertyPresent(hstring_ref typeName, hstring_ref propertyName) const;
	bool IsReadOnlyPropertyPresent(hstring_ref typeName, hstring_ref propertyName) const;
	bool IsWriteablePropertyPresent(hstring_ref typeName, hstring_ref propertyName) const;
	bool IsEnumNamedValuePresent(hstring_ref enumTypeName, hstring_ref valueName) const;
	bool IsApiContractPresent(hstring_ref contractName, unsigned short majorVersion) const;
	bool IsApiContractPresent(hstring_ref contractName, unsigned short majorVersion, unsigned short minorVersion) const;
};

}}}}

namespace winrt { namespace Windows { namespace Gaming { namespace Input {

template <typename T>
class impl_IGameController
{
	auto shim() const { return impl::shim<T, IGameController>(this); }

public:

	long long HeadsetConnected(Windows::Foundation::ITypedEventHandler<Windows::Gaming::Input::IGameController, Windows::Gaming::Input::Headset> const & value) const;
	template <typename F> long long HeadsetConnected(F value) const;
	void HeadsetConnected(long long token) const;
	long long HeadsetDisconnected(Windows::Foundation::ITypedEventHandler<Windows::Gaming::Input::IGameController, Windows::Gaming::Input::Headset> const & value) const;
	template <typename F> long long HeadsetDisconnected(F value) const;
	void HeadsetDisconnected(long long token) const;
	long long UserChanged(Windows::Foundation::ITypedEventHandler<Windows::Gaming::Input::IGameController, Windows::System::UserChangedEventArgs> const & value) const;
	template <typename F> long long UserChanged(F value) const;
	void UserChanged(long long token) const;
	Windows::Gaming::Input::Headset Headset() const;
	bool IsWireless() const;
	Windows::System::User User() const;
};

template <typename T>
class impl_IGamepad
{
	auto shim() const { return impl::shim<T, IGamepad>(this); }

public:

	Windows::Gaming::Input::GamepadVibration Vibration() const;
	void Vibration(Windows::Gaming::Input::GamepadVibration const & value) const;
	Windows::Gaming::Input::GamepadReading GetCurrentReading() const;
};

template <typename T>
class impl_IGamepadStatics
{
	auto shim() const { return impl::shim<T, IGamepadStatics>(this); }

public:

	long long GamepadAdded(Windows::Foundation::IEventHandler<Windows::Gaming::Input::Gamepad> const & value) const;
	template <typename F> long long GamepadAdded(F value) const;
	void GamepadAdded(long long token) const;
	long long GamepadRemoved(Windows::Foundation::IEventHandler<Windows::Gaming::Input::Gamepad> const & value) const;
	template <typename F> long long GamepadRemoved(F value) const;
	void GamepadRemoved(long long token) const;
	Windows::Foundation::Collections::IVectorView<Windows::Gaming::Input::Gamepad> Gamepads() const;
};

template <typename T>
class impl_IHeadset
{
	auto shim() const { return impl::shim<T, IHeadset>(this); }

public:

	hstring CaptureDeviceId() const;
	hstring RenderDeviceId() const;
};

}}}}

namespace winrt { namespace Windows { namespace Globalization {

template <typename T>
class impl_IJapanesePhoneticAnalyzerStatics
{
	auto shim() const { return impl::shim<T, IJapanesePhoneticAnalyzerStatics>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(hstring_ref input) const;
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(hstring_ref input, bool monoRuby) const;
};

template <typename T>
class impl_IJapanesePhoneme
{
	auto shim() const { return impl::shim<T, IJapanesePhoneme>(this); }

public:

	hstring DisplayText() const;
	hstring YomiText() const;
	bool IsPhraseStart() const;
};

template <typename T>
class impl_ICalendarIdentifiersStatics
{
	auto shim() const { return impl::shim<T, ICalendarIdentifiersStatics>(this); }

public:

	hstring Gregorian() const;
	hstring Hebrew() const;
	hstring Hijri() const;
	hstring Japanese() const;
	hstring Julian() const;
	hstring Korean() const;
	hstring Taiwan() const;
	hstring Thai() const;
	hstring UmAlQura() const;
};

template <typename T>
class impl_ICalendarIdentifiersStatics2
{
	auto shim() const { return impl::shim<T, ICalendarIdentifiersStatics2>(this); }

public:

	hstring Persian() const;
};

template <typename T>
class impl_IClockIdentifiersStatics
{
	auto shim() const { return impl::shim<T, IClockIdentifiersStatics>(this); }

public:

	hstring TwelveHour() const;
	hstring TwentyFourHour() const;
};

template <typename T>
class impl_INumeralSystemIdentifiersStatics
{
	auto shim() const { return impl::shim<T, INumeralSystemIdentifiersStatics>(this); }

public:

	hstring Arab() const;
	hstring ArabExt() const;
	hstring Bali() const;
	hstring Beng() const;
	hstring Cham() const;
	hstring Deva() const;
	hstring FullWide() const;
	hstring Gujr() const;
	hstring Guru() const;
	hstring HaniDec() const;
	hstring Java() const;
	hstring Kali() const;
	hstring Khmr() const;
	hstring Knda() const;
	hstring Lana() const;
	hstring LanaTham() const;
	hstring Laoo() const;
	hstring Latn() const;
	hstring Lepc() const;
	hstring Limb() const;
	hstring Mlym() const;
	hstring Mong() const;
	hstring Mtei() const;
	hstring Mymr() const;
	hstring MymrShan() const;
	hstring Nkoo() const;
	hstring Olck() const;
	hstring Orya() const;
	hstring Saur() const;
	hstring Sund() const;
	hstring Talu() const;
	hstring TamlDec() const;
	hstring Telu() const;
	hstring Thai() const;
	hstring Tibt() const;
	hstring Vaii() const;
};

template <typename T>
class impl_INumeralSystemIdentifiersStatics2
{
	auto shim() const { return impl::shim<T, INumeralSystemIdentifiersStatics2>(this); }

public:

	hstring Brah() const;
	hstring Osma() const;
	hstring MathBold() const;
	hstring MathDbl() const;
	hstring MathSans() const;
	hstring MathSanb() const;
	hstring MathMono() const;
	hstring ZmthBold() const;
	hstring ZmthDbl() const;
	hstring ZmthSans() const;
	hstring ZmthSanb() const;
	hstring ZmthMono() const;
};

template <typename T>
class impl_ICurrencyIdentifiersStatics
{
	auto shim() const { return impl::shim<T, ICurrencyIdentifiersStatics>(this); }

public:

	hstring AED() const;
	hstring AFN() const;
	hstring ALL() const;
	hstring AMD() const;
	hstring ANG() const;
	hstring AOA() const;
	hstring ARS() const;
	hstring AUD() const;
	hstring AWG() const;
	hstring AZN() const;
	hstring BAM() const;
	hstring BBD() const;
	hstring BDT() const;
	hstring BGN() const;
	hstring BHD() const;
	hstring BIF() const;
	hstring BMD() const;
	hstring BND() const;
	hstring BOB() const;
	hstring BRL() const;
	hstring BSD() const;
	hstring BTN() const;
	hstring BWP() const;
	hstring BYR() const;
	hstring BZD() const;
	hstring CAD() const;
	hstring CDF() const;
	hstring CHF() const;
	hstring CLP() const;
	hstring CNY() const;
	hstring COP() const;
	hstring CRC() const;
	hstring CUP() const;
	hstring CVE() const;
	hstring CZK() const;
	hstring DJF() const;
	hstring DKK() const;
	hstring DOP() const;
	hstring DZD() const;
	hstring EGP() const;
	hstring ERN() const;
	hstring ETB() const;
	hstring EUR() const;
	hstring FJD() const;
	hstring FKP() const;
	hstring GBP() const;
	hstring GEL() const;
	hstring GHS() const;
	hstring GIP() const;
	hstring GMD() const;
	hstring GNF() const;
	hstring GTQ() const;
	hstring GYD() const;
	hstring HKD() const;
	hstring HNL() const;
	hstring HRK() const;
	hstring HTG() const;
	hstring HUF() const;
	hstring IDR() const;
	hstring ILS() const;
	hstring INR() const;
	hstring IQD() const;
	hstring IRR() const;
	hstring ISK() const;
	hstring JMD() const;
	hstring JOD() const;
	hstring JPY() const;
	hstring KES() const;
	hstring KGS() const;
	hstring KHR() const;
	hstring KMF() const;
	hstring KPW() const;
	hstring KRW() const;
	hstring KWD() const;
	hstring KYD() const;
	hstring KZT() const;
	hstring LAK() const;
	hstring LBP() const;
	hstring LKR() const;
	hstring LRD() const;
	hstring LSL() const;
	hstring LTL() const;
	hstring LVL() const;
	hstring LYD() const;
	hstring MAD() const;
	hstring MDL() const;
	hstring MGA() const;
	hstring MKD() const;
	hstring MMK() const;
	hstring MNT() const;
	hstring MOP() const;
	hstring MRO() const;
	hstring MUR() const;
	hstring MVR() const;
	hstring MWK() const;
	hstring MXN() const;
	hstring MYR() const;
	hstring MZN() const;
	hstring NAD() const;
	hstring NGN() const;
	hstring NIO() const;
	hstring NOK() const;
	hstring NPR() const;
	hstring NZD() const;
	hstring OMR() const;
	hstring PAB() const;
	hstring PEN() const;
	hstring PGK() const;
	hstring PHP() const;
	hstring PKR() const;
	hstring PLN() const;
	hstring PYG() const;
	hstring QAR() const;
	hstring RON() const;
	hstring RSD() const;
	hstring RUB() const;
	hstring RWF() const;
	hstring SAR() const;
	hstring SBD() const;
	hstring SCR() const;
	hstring SDG() const;
	hstring SEK() const;
	hstring SGD() const;
	hstring SHP() const;
	hstring SLL() const;
	hstring SOS() const;
	hstring SRD() const;
	hstring STD() const;
	hstring SYP() const;
	hstring SZL() const;
	hstring THB() const;
	hstring TJS() const;
	hstring TMT() const;
	hstring TND() const;
	hstring TOP() const;
	hstring TRY() const;
	hstring TTD() const;
	hstring TWD() const;
	hstring TZS() const;
	hstring UAH() const;
	hstring UGX() const;
	hstring USD() const;
	hstring UYU() const;
	hstring UZS() const;
	hstring VEF() const;
	hstring VND() const;
	hstring VUV() const;
	hstring WST() const;
	hstring XAF() const;
	hstring XCD() const;
	hstring XOF() const;
	hstring XPF() const;
	hstring XXX() const;
	hstring YER() const;
	hstring ZAR() const;
	hstring ZMW() const;
	hstring ZWL() const;
};

template <typename T>
class impl_IGeographicRegion
{
	auto shim() const { return impl::shim<T, IGeographicRegion>(this); }

public:

	hstring Code() const;
	hstring CodeTwoLetter() const;
	hstring CodeThreeLetter() const;
	hstring CodeThreeDigit() const;
	hstring DisplayName() const;
	hstring NativeName() const;
	Windows::Foundation::Collections::IVectorView<hstring> CurrenciesInUse() const;
};

template <typename T>
class impl_IGeographicRegionFactory
{
	auto shim() const { return impl::shim<T, IGeographicRegionFactory>(this); }

public:

	Windows::Globalization::GeographicRegion CreateGeographicRegion(hstring_ref geographicRegionCode) const;
};

template <typename T>
class impl_IGeographicRegionStatics
{
	auto shim() const { return impl::shim<T, IGeographicRegionStatics>(this); }

public:

	bool IsSupported(hstring_ref geographicRegionCode) const;
};

template <typename T>
class impl_ILanguage
{
	auto shim() const { return impl::shim<T, ILanguage>(this); }

public:

	hstring LanguageTag() const;
	hstring DisplayName() const;
	hstring NativeName() const;
	hstring Script() const;
};

template <typename T>
class impl_ILanguageExtensionSubtags
{
	auto shim() const { return impl::shim<T, ILanguageExtensionSubtags>(this); }

public:

	Windows::Foundation::Collections::IVectorView<hstring> GetExtensionSubtags(hstring_ref singleton) const;
};

template <typename T>
class impl_ILanguageFactory
{
	auto shim() const { return impl::shim<T, ILanguageFactory>(this); }

public:

	Windows::Globalization::Language CreateLanguage(hstring_ref languageTag) const;
};

template <typename T>
class impl_ILanguageStatics
{
	auto shim() const { return impl::shim<T, ILanguageStatics>(this); }

public:

	bool IsWellFormed(hstring_ref languageTag) const;
	hstring CurrentInputMethodLanguageTag() const;
};

template <typename T>
class impl_ILanguageStatics2
{
	auto shim() const { return impl::shim<T, ILanguageStatics2>(this); }

public:

	bool TrySetInputMethodLanguageTag(hstring_ref languageTag) const;
};

template <typename T>
class impl_ICalendar
{
	auto shim() const { return impl::shim<T, ICalendar>(this); }

public:

	Windows::Globalization::Calendar Clone() const;
	void SetToMin() const;
	void SetToMax() const;
	Windows::Foundation::Collections::IVectorView<hstring> Languages() const;
	hstring NumeralSystem() const;
	void NumeralSystem(hstring_ref value) const;
	hstring GetCalendarSystem() const;
	void ChangeCalendarSystem(hstring_ref value) const;
	hstring GetClock() const;
	void ChangeClock(hstring_ref value) const;
	Windows::Foundation::DateTime GetDateTime() const;
	void SetDateTime(Windows::Foundation::DateTime const & value) const;
	void SetToNow() const;
	int FirstEra() const;
	int LastEra() const;
	int NumberOfEras() const;
	int Era() const;
	void Era(int value) const;
	void AddEras(int eras) const;
	hstring EraAsString() const;
	hstring EraAsString(int idealLength) const;
	int FirstYearInThisEra() const;
	int LastYearInThisEra() const;
	int NumberOfYearsInThisEra() const;
	int Year() const;
	void Year(int value) const;
	void AddYears(int years) const;
	hstring YearAsString() const;
	hstring YearAsTruncatedString(int remainingDigits) const;
	hstring YearAsPaddedString(int minDigits) const;
	int FirstMonthInThisYear() const;
	int LastMonthInThisYear() const;
	int NumberOfMonthsInThisYear() const;
	int Month() const;
	void Month(int value) const;
	void AddMonths(int months) const;
	hstring MonthAsString() const;
	hstring MonthAsString(int idealLength) const;
	hstring MonthAsSoloString() const;
	hstring MonthAsSoloString(int idealLength) const;
	hstring MonthAsNumericString() const;
	hstring MonthAsPaddedNumericString(int minDigits) const;
	void AddWeeks(int weeks) const;
	int FirstDayInThisMonth() const;
	int LastDayInThisMonth() const;
	int NumberOfDaysInThisMonth() const;
	int Day() const;
	void Day(int value) const;
	void AddDays(int days) const;
	hstring DayAsString() const;
	hstring DayAsPaddedString(int minDigits) const;
	Windows::Globalization::DayOfWeek DayOfWeek() const;
	hstring DayOfWeekAsString() const;
	hstring DayOfWeekAsString(int idealLength) const;
	hstring DayOfWeekAsSoloString() const;
	hstring DayOfWeekAsSoloString(int idealLength) const;
	int FirstPeriodInThisDay() const;
	int LastPeriodInThisDay() const;
	int NumberOfPeriodsInThisDay() const;
	int Period() const;
	void Period(int value) const;
	void AddPeriods(int periods) const;
	hstring PeriodAsString() const;
	hstring PeriodAsString(int idealLength) const;
	int FirstHourInThisPeriod() const;
	int LastHourInThisPeriod() const;
	int NumberOfHoursInThisPeriod() const;
	int Hour() const;
	void Hour(int value) const;
	void AddHours(int hours) const;
	hstring HourAsString() const;
	hstring HourAsPaddedString(int minDigits) const;
	int Minute() const;
	void Minute(int value) const;
	void AddMinutes(int minutes) const;
	hstring MinuteAsString() const;
	hstring MinuteAsPaddedString(int minDigits) const;
	int Second() const;
	void Second(int value) const;
	void AddSeconds(int seconds) const;
	hstring SecondAsString() const;
	hstring SecondAsPaddedString(int minDigits) const;
	int Nanosecond() const;
	void Nanosecond(int value) const;
	void AddNanoseconds(int nanoseconds) const;
	hstring NanosecondAsString() const;
	hstring NanosecondAsPaddedString(int minDigits) const;
	int Compare(Windows::Globalization::Calendar const & other) const;
	int CompareDateTime(Windows::Foundation::DateTime const & other) const;
	void CopyTo(Windows::Globalization::Calendar const & other) const;
	int FirstMinuteInThisHour() const;
	int LastMinuteInThisHour() const;
	int NumberOfMinutesInThisHour() const;
	int FirstSecondInThisMinute() const;
	int LastSecondInThisMinute() const;
	int NumberOfSecondsInThisMinute() const;
	hstring ResolvedLanguage() const;
	bool IsDaylightSavingTime() const;
};

template <typename T>
class impl_ICalendarFactory2
{
	auto shim() const { return impl::shim<T, ICalendarFactory2>(this); }

public:

	Windows::Globalization::Calendar CreateCalendarWithTimeZone(Windows::Foundation::Collections::IIterable<hstring> const & languages, hstring_ref calendar, hstring_ref clock, hstring_ref timeZoneId) const;
};

template <typename T>
class impl_ITimeZoneOnCalendar
{
	auto shim() const { return impl::shim<T, ITimeZoneOnCalendar>(this); }

public:

	hstring GetTimeZone() const;
	void ChangeTimeZone(hstring_ref timeZoneId) const;
	hstring TimeZoneAsString() const;
	hstring TimeZoneAsString(int idealLength) const;
};

template <typename T>
class impl_ICalendarFactory
{
	auto shim() const { return impl::shim<T, ICalendarFactory>(this); }

public:

	Windows::Globalization::Calendar CreateCalendarDefaultCalendarAndClock(Windows::Foundation::Collections::IIterable<hstring> const & languages) const;
	Windows::Globalization::Calendar CreateCalendar(Windows::Foundation::Collections::IIterable<hstring> const & languages, hstring_ref calendar, hstring_ref clock) const;
};

template <typename T>
class impl_IApplicationLanguagesStatics
{
	auto shim() const { return impl::shim<T, IApplicationLanguagesStatics>(this); }

public:

	hstring PrimaryLanguageOverride() const;
	void PrimaryLanguageOverride(hstring_ref value) const;
	Windows::Foundation::Collections::IVectorView<hstring> Languages() const;
	Windows::Foundation::Collections::IVectorView<hstring> ManifestLanguages() const;
};

}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Display {

template <typename T>
class impl_IDisplayPropertiesEventHandler
{
	auto shim() const { return impl::shim<T, IDisplayPropertiesEventHandler>(this); }

public:

	void Invoke(IInspectable const & sender) const;
};

template <typename T>
class impl_IDisplayInformationStatics
{
	auto shim() const { return impl::shim<T, IDisplayInformationStatics>(this); }

public:

	Windows::Graphics::Display::DisplayInformation GetForCurrentView() const;
	Windows::Graphics::Display::DisplayOrientations AutoRotationPreferences() const;
	void AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations value) const;
	long long DisplayContentsInvalidated(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const;
	template <typename F> long long DisplayContentsInvalidated(F handler) const;
	void DisplayContentsInvalidated(long long token) const;
};

template <typename T>
class impl_IDisplayInformation
{
	auto shim() const { return impl::shim<T, IDisplayInformation>(this); }

public:

	Windows::Graphics::Display::DisplayOrientations CurrentOrientation() const;
	Windows::Graphics::Display::DisplayOrientations NativeOrientation() const;
	long long OrientationChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const;
	template <typename F> long long OrientationChanged(F handler) const;
	void OrientationChanged(long long token) const;
	Windows::Graphics::Display::ResolutionScale ResolutionScale() const;
	float LogicalDpi() const;
	float RawDpiX() const;
	float RawDpiY() const;
	long long DpiChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const;
	template <typename F> long long DpiChanged(F handler) const;
	void DpiChanged(long long token) const;
	bool StereoEnabled() const;
	long long StereoEnabledChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const;
	template <typename F> long long StereoEnabledChanged(F handler) const;
	void StereoEnabledChanged(long long token) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> GetColorProfileAsync() const;
	long long ColorProfileChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const;
	template <typename F> long long ColorProfileChanged(F handler) const;
	void ColorProfileChanged(long long token) const;
};

template <typename T>
class impl_IDisplayInformation2
{
	auto shim() const { return impl::shim<T, IDisplayInformation2>(this); }

public:

	double RawPixelsPerViewPixel() const;
};

template <typename T>
class impl_IDisplayInformation3
{
	auto shim() const { return impl::shim<T, IDisplayInformation3>(this); }

public:

	Windows::Foundation::IReference<double> DiagonalSizeInInches() const;
};

template <typename T>
class impl_IDisplayPropertiesStatics
{
	auto shim() const { return impl::shim<T, IDisplayPropertiesStatics>(this); }

public:

	Windows::Graphics::Display::DisplayOrientations CurrentOrientation() const;
	Windows::Graphics::Display::DisplayOrientations NativeOrientation() const;
	Windows::Graphics::Display::DisplayOrientations AutoRotationPreferences() const;
	void AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations value) const;
	long long OrientationChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler) const;
	template <typename F> long long OrientationChanged(F handler) const;
	void OrientationChanged(long long token) const;
	Windows::Graphics::Display::ResolutionScale ResolutionScale() const;
	float LogicalDpi() const;
	long long LogicalDpiChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler) const;
	template <typename F> long long LogicalDpiChanged(F handler) const;
	void LogicalDpiChanged(long long token) const;
	bool StereoEnabled() const;
	long long StereoEnabledChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler) const;
	template <typename F> long long StereoEnabledChanged(F handler) const;
	void StereoEnabledChanged(long long token) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> GetColorProfileAsync() const;
	long long ColorProfileChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler) const;
	template <typename F> long long ColorProfileChanged(F handler) const;
	void ColorProfileChanged(long long token) const;
	long long DisplayContentsInvalidated(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler) const;
	template <typename F> long long DisplayContentsInvalidated(F handler) const;
	void DisplayContentsInvalidated(long long token) const;
};

}}}}

namespace winrt { namespace Windows { namespace Media { namespace SpeechRecognition {

template <typename T>
class impl_ISpeechRecognitionCompilationResult
{
	auto shim() const { return impl::shim<T, ISpeechRecognitionCompilationResult>(this); }

public:

	Windows::Media::SpeechRecognition::SpeechRecognitionResultStatus Status() const;
};

template <typename T>
class impl_ISpeechRecognizerTimeouts
{
	auto shim() const { return impl::shim<T, ISpeechRecognizerTimeouts>(this); }

public:

	Windows::Foundation::TimeSpan InitialSilenceTimeout() const;
	void InitialSilenceTimeout(Windows::Foundation::TimeSpan const & value) const;
	Windows::Foundation::TimeSpan EndSilenceTimeout() const;
	void EndSilenceTimeout(Windows::Foundation::TimeSpan const & value) const;
	Windows::Foundation::TimeSpan BabbleTimeout() const;
	void BabbleTimeout(Windows::Foundation::TimeSpan const & value) const;
};

template <typename T>
class impl_ISpeechRecognizerUIOptions
{
	auto shim() const { return impl::shim<T, ISpeechRecognizerUIOptions>(this); }

public:

	hstring ExampleText() const;
	void ExampleText(hstring_ref value) const;
	hstring AudiblePrompt() const;
	void AudiblePrompt(hstring_ref value) const;
	bool IsReadBackEnabled() const;
	void IsReadBackEnabled(bool value) const;
	bool ShowConfirmation() const;
	void ShowConfirmation(bool value) const;
};

template <typename T>
class impl_ISpeechRecognitionResult
{
	auto shim() const { return impl::shim<T, ISpeechRecognitionResult>(this); }

public:

	Windows::Media::SpeechRecognition::SpeechRecognitionResultStatus Status() const;
	hstring Text() const;
	Windows::Media::SpeechRecognition::SpeechRecognitionConfidence Confidence() const;
	Windows::Media::SpeechRecognition::SpeechRecognitionSemanticInterpretation SemanticInterpretation() const;
	Windows::Foundation::Collections::IVectorView<Windows::Media::SpeechRecognition::SpeechRecognitionResult> GetAlternates(unsigned maxAlternates) const;
	Windows::Media::SpeechRecognition::ISpeechRecognitionConstraint Constraint() const;
	Windows::Foundation::Collections::IVectorView<hstring> RulePath() const;
	double RawConfidence() const;
};

template <typename T>
class impl_ISpeechRecognitionConstraint
{
	auto shim() const { return impl::shim<T, ISpeechRecognitionConstraint>(this); }

public:

	bool IsEnabled() const;
	void IsEnabled(bool value) const;
	hstring Tag() const;
	void Tag(hstring_ref value) const;
	Windows::Media::SpeechRecognition::SpeechRecognitionConstraintType Type() const;
	Windows::Media::SpeechRecognition::SpeechRecognitionConstraintProbability Probability() const;
	void Probability(Windows::Media::SpeechRecognition::SpeechRecognitionConstraintProbability value) const;
};

template <typename T>
class impl_ISpeechRecognitionResult2
{
	auto shim() const { return impl::shim<T, ISpeechRecognitionResult2>(this); }

public:

	Windows::Foundation::DateTime PhraseStartTime() const;
	Windows::Foundation::TimeSpan PhraseDuration() const;
};

template <typename T>
class impl_ISpeechRecognitionSemanticInterpretation
{
	auto shim() const { return impl::shim<T, ISpeechRecognitionSemanticInterpretation>(this); }

public:

	Windows::Foundation::Collections::IMapView<hstring, Windows::Foundation::Collections::IVectorView<hstring>> Properties() const;
};

template <typename T>
class impl_ISpeechRecognitionTopicConstraint
{
	auto shim() const { return impl::shim<T, ISpeechRecognitionTopicConstraint>(this); }

public:

	Windows::Media::SpeechRecognition::SpeechRecognitionScenario Scenario() const;
	hstring TopicHint() const;
};

template <typename T>
class impl_ISpeechRecognitionTopicConstraintFactory
{
	auto shim() const { return impl::shim<T, ISpeechRecognitionTopicConstraintFactory>(this); }

public:

	Windows::Media::SpeechRecognition::SpeechRecognitionTopicConstraint Create(Windows::Media::SpeechRecognition::SpeechRecognitionScenario scenario, hstring_ref topicHint) const;
	Windows::Media::SpeechRecognition::SpeechRecognitionTopicConstraint CreateWithTag(Windows::Media::SpeechRecognition::SpeechRecognitionScenario scenario, hstring_ref topicHint, hstring_ref tag) const;
};

template <typename T>
class impl_ISpeechRecognitionListConstraint
{
	auto shim() const { return impl::shim<T, ISpeechRecognitionListConstraint>(this); }

public:

	Windows::Foundation::Collections::IVector<hstring> Commands() const;
};

template <typename T>
class impl_ISpeechRecognitionListConstraintFactory
{
	auto shim() const { return impl::shim<T, ISpeechRecognitionListConstraintFactory>(this); }

public:

	Windows::Media::SpeechRecognition::SpeechRecognitionListConstraint Create(Windows::Foundation::Collections::IIterable<hstring> const & commands) const;
	Windows::Media::SpeechRecognition::SpeechRecognitionListConstraint CreateWithTag(Windows::Foundation::Collections::IIterable<hstring> const & commands, hstring_ref tag) const;
};

template <typename T>
class impl_ISpeechRecognitionGrammarFileConstraint
{
	auto shim() const { return impl::shim<T, ISpeechRecognitionGrammarFileConstraint>(this); }

public:

	Windows::Storage::StorageFile GrammarFile() const;
};

template <typename T>
class impl_ISpeechRecognitionGrammarFileConstraintFactory
{
	auto shim() const { return impl::shim<T, ISpeechRecognitionGrammarFileConstraintFactory>(this); }

public:

	Windows::Media::SpeechRecognition::SpeechRecognitionGrammarFileConstraint Create(Windows::Storage::StorageFile const & file) const;
	Windows::Media::SpeechRecognition::SpeechRecognitionGrammarFileConstraint CreateWithTag(Windows::Storage::StorageFile const & file, hstring_ref tag) const;
};

template <typename T>
class impl_ISpeechRecognitionVoiceCommandDefinitionConstraint
{
	auto shim() const { return impl::shim<T, ISpeechRecognitionVoiceCommandDefinitionConstraint>(this); }

public:

};

template <typename T>
class impl_ISpeechRecognitionQualityDegradingEventArgs
{
	auto shim() const { return impl::shim<T, ISpeechRecognitionQualityDegradingEventArgs>(this); }

public:

	Windows::Media::SpeechRecognition::SpeechRecognitionAudioProblem Problem() const;
};

template <typename T>
class impl_ISpeechRecognizerStateChangedEventArgs
{
	auto shim() const { return impl::shim<T, ISpeechRecognizerStateChangedEventArgs>(this); }

public:

	Windows::Media::SpeechRecognition::SpeechRecognizerState State() const;
};

template <typename T>
class impl_ISpeechRecognizer
{
	auto shim() const { return impl::shim<T, ISpeechRecognizer>(this); }

public:

	Windows::Globalization::Language CurrentLanguage() const;
	Windows::Foundation::Collections::IVector<Windows::Media::SpeechRecognition::ISpeechRecognitionConstraint> Constraints() const;
	Windows::Media::SpeechRecognition::SpeechRecognizerTimeouts Timeouts() const;
	Windows::Media::SpeechRecognition::SpeechRecognizerUIOptions UIOptions() const;
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechRecognition::SpeechRecognitionCompilationResult> CompileConstraintsAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechRecognition::SpeechRecognitionResult> RecognizeAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechRecognition::SpeechRecognitionResult> RecognizeWithUIAsync() const;
	long long RecognitionQualityDegrading(Windows::Foundation::ITypedEventHandler<Windows::Media::SpeechRecognition::SpeechRecognizer, Windows::Media::SpeechRecognition::SpeechRecognitionQualityDegradingEventArgs> const & speechRecognitionQualityDegradingHandler) const;
	template <typename F> long long RecognitionQualityDegrading(F speechRecognitionQualityDegradingHandler) const;
	void RecognitionQualityDegrading(long long cookie) const;
	long long StateChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::SpeechRecognition::SpeechRecognizer, Windows::Media::SpeechRecognition::SpeechRecognizerStateChangedEventArgs> const & stateChangedHandler) const;
	template <typename F> long long StateChanged(F stateChangedHandler) const;
	void StateChanged(long long cookie) const;
};

template <typename T>
class impl_ISpeechRecognizerFactory
{
	auto shim() const { return impl::shim<T, ISpeechRecognizerFactory>(this); }

public:

	Windows::Media::SpeechRecognition::SpeechRecognizer Create(Windows::Globalization::Language const & language) const;
};

template <typename T>
class impl_ISpeechRecognizerStatics
{
	auto shim() const { return impl::shim<T, ISpeechRecognizerStatics>(this); }

public:

	Windows::Globalization::Language SystemSpeechLanguage() const;
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> SupportedTopicLanguages() const;
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> SupportedGrammarLanguages() const;
};

template <typename T>
class impl_ISpeechRecognizer2
{
	auto shim() const { return impl::shim<T, ISpeechRecognizer2>(this); }

public:

	Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession ContinuousRecognitionSession() const;
	Windows::Media::SpeechRecognition::SpeechRecognizerState State() const;
	Windows::Foundation::IAsyncAction StopRecognitionAsync() const;
	long long HypothesisGenerated(Windows::Foundation::ITypedEventHandler<Windows::Media::SpeechRecognition::SpeechRecognizer, Windows::Media::SpeechRecognition::SpeechRecognitionHypothesisGeneratedEventArgs> const & value) const;
	template <typename F> long long HypothesisGenerated(F value) const;
	void HypothesisGenerated(long long value) const;
};

template <typename T>
class impl_ISpeechRecognitionHypothesis
{
	auto shim() const { return impl::shim<T, ISpeechRecognitionHypothesis>(this); }

public:

	hstring Text() const;
};

template <typename T>
class impl_ISpeechRecognitionHypothesisGeneratedEventArgs
{
	auto shim() const { return impl::shim<T, ISpeechRecognitionHypothesisGeneratedEventArgs>(this); }

public:

	Windows::Media::SpeechRecognition::SpeechRecognitionHypothesis Hypothesis() const;
};

template <typename T>
class impl_ISpeechContinuousRecognitionSession
{
	auto shim() const { return impl::shim<T, ISpeechContinuousRecognitionSession>(this); }

public:

	Windows::Foundation::TimeSpan AutoStopSilenceTimeout() const;
	void AutoStopSilenceTimeout(Windows::Foundation::TimeSpan const & value) const;
	Windows::Foundation::IAsyncAction StartAsync() const;
	Windows::Foundation::IAsyncAction StartAsync(Windows::Media::SpeechRecognition::SpeechContinuousRecognitionMode mode) const;
	Windows::Foundation::IAsyncAction StopAsync() const;
	Windows::Foundation::IAsyncAction CancelAsync() const;
	Windows::Foundation::IAsyncAction PauseAsync() const;
	void Resume() const;
	long long Completed(Windows::Foundation::ITypedEventHandler<Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession, Windows::Media::SpeechRecognition::SpeechContinuousRecognitionCompletedEventArgs> const & value) const;
	template <typename F> long long Completed(F value) const;
	void Completed(long long value) const;
	long long ResultGenerated(Windows::Foundation::ITypedEventHandler<Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession, Windows::Media::SpeechRecognition::SpeechContinuousRecognitionResultGeneratedEventArgs> const & value) const;
	template <typename F> long long ResultGenerated(F value) const;
	void ResultGenerated(long long value) const;
};

template <typename T>
class impl_ISpeechContinuousRecognitionCompletedEventArgs
{
	auto shim() const { return impl::shim<T, ISpeechContinuousRecognitionCompletedEventArgs>(this); }

public:

	Windows::Media::SpeechRecognition::SpeechRecognitionResultStatus Status() const;
};

template <typename T>
class impl_ISpeechContinuousRecognitionResultGeneratedEventArgs
{
	auto shim() const { return impl::shim<T, ISpeechContinuousRecognitionResultGeneratedEventArgs>(this); }

public:

	Windows::Media::SpeechRecognition::SpeechRecognitionResult Result() const;
};

}}}}

namespace winrt { namespace Windows { namespace Networking {

template <typename T>
class impl_IHostNameStatics
{
	auto shim() const { return impl::shim<T, IHostNameStatics>(this); }

public:

	int Compare(hstring_ref value1, hstring_ref value2) const;
};

template <typename T>
class impl_IHostName
{
	auto shim() const { return impl::shim<T, IHostName>(this); }

public:

	Windows::Networking::Connectivity::IPInformation IPInformation() const;
	hstring RawName() const;
	hstring DisplayName() const;
	hstring CanonicalName() const;
	Windows::Networking::HostNameType Type() const;
	bool IsEqual(Windows::Networking::HostName const & hostName) const;
};

template <typename T>
class impl_IHostNameFactory
{
	auto shim() const { return impl::shim<T, IHostNameFactory>(this); }

public:

	Windows::Networking::HostName CreateHostName(hstring_ref hostName) const;
};

template <typename T>
class impl_IEndpointPair
{
	auto shim() const { return impl::shim<T, IEndpointPair>(this); }

public:

	Windows::Networking::HostName LocalHostName() const;
	void LocalHostName(Windows::Networking::HostName const & value) const;
	hstring LocalServiceName() const;
	void LocalServiceName(hstring_ref value) const;
	Windows::Networking::HostName RemoteHostName() const;
	void RemoteHostName(Windows::Networking::HostName const & value) const;
	hstring RemoteServiceName() const;
	void RemoteServiceName(hstring_ref value) const;
};

template <typename T>
class impl_IEndpointPairFactory
{
	auto shim() const { return impl::shim<T, IEndpointPairFactory>(this); }

public:

	Windows::Networking::EndpointPair CreateEndpointPair(Windows::Networking::HostName const & localHostName, hstring_ref localServiceName, Windows::Networking::HostName const & remoteHostName, hstring_ref remoteServiceName) const;
};

}}}

namespace winrt { namespace Windows { namespace Networking { namespace Connectivity {

template <typename T>
class impl_INetworkStatusChangedEventHandler
{
	auto shim() const { return impl::shim<T, INetworkStatusChangedEventHandler>(this); }

public:

	void Invoke(IInspectable const & sender) const;
};

template <typename T>
class impl_IDataUsage
{
	auto shim() const { return impl::shim<T, IDataUsage>(this); }

public:

	unsigned long long BytesSent() const;
	unsigned long long BytesReceived() const;
};

template <typename T>
class impl_IDataPlanUsage
{
	auto shim() const { return impl::shim<T, IDataPlanUsage>(this); }

public:

	unsigned MegabytesUsed() const;
	Windows::Foundation::DateTime LastSyncTime() const;
};

template <typename T>
class impl_IDataPlanStatus
{
	auto shim() const { return impl::shim<T, IDataPlanStatus>(this); }

public:

	Windows::Networking::Connectivity::DataPlanUsage DataPlanUsage() const;
	Windows::Foundation::IReference<unsigned> DataLimitInMegabytes() const;
	Windows::Foundation::IReference<unsigned long long> InboundBitsPerSecond() const;
	Windows::Foundation::IReference<unsigned long long> OutboundBitsPerSecond() const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> NextBillingCycle() const;
	Windows::Foundation::IReference<unsigned> MaxTransferSizeInMegabytes() const;
};

template <typename T>
class impl_IConnectionCost
{
	auto shim() const { return impl::shim<T, IConnectionCost>(this); }

public:

	Windows::Networking::Connectivity::NetworkCostType NetworkCostType() const;
	bool Roaming() const;
	bool OverDataLimit() const;
	bool ApproachingDataLimit() const;
};

template <typename T>
class impl_IConnectionCost2
{
	auto shim() const { return impl::shim<T, IConnectionCost2>(this); }

public:

	bool BackgroundDataUsageRestricted() const;
};

template <typename T>
class impl_INetworkSecuritySettings
{
	auto shim() const { return impl::shim<T, INetworkSecuritySettings>(this); }

public:

	Windows::Networking::Connectivity::NetworkAuthenticationType NetworkAuthenticationType() const;
	Windows::Networking::Connectivity::NetworkEncryptionType NetworkEncryptionType() const;
};

template <typename T>
class impl_IConnectionProfile
{
	auto shim() const { return impl::shim<T, IConnectionProfile>(this); }

public:

	hstring ProfileName() const;
	Windows::Networking::Connectivity::NetworkConnectivityLevel GetNetworkConnectivityLevel() const;
	Windows::Foundation::Collections::IVectorView<hstring> GetNetworkNames() const;
	Windows::Networking::Connectivity::ConnectionCost GetConnectionCost() const;
	Windows::Networking::Connectivity::DataPlanStatus GetDataPlanStatus() const;
	Windows::Networking::Connectivity::NetworkAdapter NetworkAdapter() const;
	Windows::Networking::Connectivity::DataUsage GetLocalUsage(Windows::Foundation::DateTime const & StartTime, Windows::Foundation::DateTime const & EndTime) const;
	Windows::Networking::Connectivity::DataUsage GetLocalUsage(Windows::Foundation::DateTime const & StartTime, Windows::Foundation::DateTime const & EndTime, Windows::Networking::Connectivity::RoamingStates States) const;
	Windows::Networking::Connectivity::NetworkSecuritySettings NetworkSecuritySettings() const;
};

template <typename T>
class impl_IWwanConnectionProfileDetails
{
	auto shim() const { return impl::shim<T, IWwanConnectionProfileDetails>(this); }

public:

	hstring HomeProviderId() const;
	hstring AccessPointName() const;
	Windows::Networking::Connectivity::WwanNetworkRegistrationState GetNetworkRegistrationState() const;
	Windows::Networking::Connectivity::WwanDataClass GetCurrentDataClass() const;
};

template <typename T>
class impl_IWlanConnectionProfileDetails
{
	auto shim() const { return impl::shim<T, IWlanConnectionProfileDetails>(this); }

public:

	hstring GetConnectedSsid() const;
};

template <typename T>
class impl_IConnectivityInterval
{
	auto shim() const { return impl::shim<T, IConnectivityInterval>(this); }

public:

	Windows::Foundation::DateTime StartTime() const;
	Windows::Foundation::TimeSpan ConnectionDuration() const;
};

template <typename T>
class impl_INetworkUsage
{
	auto shim() const { return impl::shim<T, INetworkUsage>(this); }

public:

	unsigned long long BytesSent() const;
	unsigned long long BytesReceived() const;
	Windows::Foundation::TimeSpan ConnectionDuration() const;
};

template <typename T>
class impl_IConnectionProfile2
{
	auto shim() const { return impl::shim<T, IConnectionProfile2>(this); }

public:

	bool IsWwanConnectionProfile() const;
	bool IsWlanConnectionProfile() const;
	Windows::Networking::Connectivity::WwanConnectionProfileDetails WwanConnectionProfileDetails() const;
	Windows::Networking::Connectivity::WlanConnectionProfileDetails WlanConnectionProfileDetails() const;
	Windows::Foundation::IReference<GUID> ServiceProviderGuid() const;
	Windows::Foundation::IReference<byte> GetSignalBars() const;
	Windows::Networking::Connectivity::DomainConnectivityLevel GetDomainConnectivityLevel() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage>> GetNetworkUsageAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::DateTime const & endTime, Windows::Networking::Connectivity::DataUsageGranularity granularity, Windows::Networking::Connectivity::NetworkUsageStates const & states) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval>> GetConnectivityIntervalsAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::DateTime const & endTime, Windows::Networking::Connectivity::NetworkUsageStates const & states) const;
};

template <typename T>
class impl_ILanIdentifierData
{
	auto shim() const { return impl::shim<T, ILanIdentifierData>(this); }

public:

	unsigned Type() const;
	Windows::Foundation::Collections::IVectorView<byte> Value() const;
};

template <typename T>
class impl_ILanIdentifier
{
	auto shim() const { return impl::shim<T, ILanIdentifier>(this); }

public:

	Windows::Networking::Connectivity::LanIdentifierData InfrastructureId() const;
	Windows::Networking::Connectivity::LanIdentifierData PortId() const;
	GUID NetworkAdapterId() const;
};

template <typename T>
class impl_INetworkInformationStatics
{
	auto shim() const { return impl::shim<T, INetworkInformationStatics>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> GetConnectionProfiles() const;
	Windows::Networking::Connectivity::ConnectionProfile GetInternetConnectionProfile() const;
	Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::LanIdentifier> GetLanIdentifiers() const;
	Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> GetHostNames() const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration> GetProxyConfigurationAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> GetSortedEndpointPairs(Windows::Foundation::Collections::IIterable<Windows::Networking::EndpointPair> const & destinationList, Windows::Networking::HostNameSortOptions sortOptions) const;
	long long NetworkStatusChanged(Windows::Networking::Connectivity::INetworkStatusChangedEventHandler const & networkStatusHandler) const;
	template <typename F> long long NetworkStatusChanged(F networkStatusHandler) const;
	void NetworkStatusChanged(long long eventCookie) const;
};

template <typename T>
class impl_IConnectionProfileFilter
{
	auto shim() const { return impl::shim<T, IConnectionProfileFilter>(this); }

public:

	void IsConnected(bool value) const;
	bool IsConnected() const;
	void IsWwanConnectionProfile(bool value) const;
	bool IsWwanConnectionProfile() const;
	void IsWlanConnectionProfile(bool value) const;
	bool IsWlanConnectionProfile() const;
	void NetworkCostType(Windows::Networking::Connectivity::NetworkCostType value) const;
	Windows::Networking::Connectivity::NetworkCostType NetworkCostType() const;
	void ServiceProviderGuid(Windows::Foundation::IReference<GUID> const & value) const;
	Windows::Foundation::IReference<GUID> ServiceProviderGuid() const;
};

template <typename T>
class impl_IConnectionProfileFilter2
{
	auto shim() const { return impl::shim<T, IConnectionProfileFilter2>(this); }

public:

	void IsRoaming(Windows::Foundation::IReference<bool> const & value) const;
	Windows::Foundation::IReference<bool> IsRoaming() const;
	void IsOverDataLimit(Windows::Foundation::IReference<bool> const & value) const;
	Windows::Foundation::IReference<bool> IsOverDataLimit() const;
	void IsBackgroundDataUsageRestricted(Windows::Foundation::IReference<bool> const & value) const;
	Windows::Foundation::IReference<bool> IsBackgroundDataUsageRestricted() const;
	Windows::Storage::Streams::IBuffer RawData() const;
};

template <typename T>
class impl_INetworkInformationStatics2
{
	auto shim() const { return impl::shim<T, INetworkInformationStatics2>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile>> FindConnectionProfilesAsync(Windows::Networking::Connectivity::ConnectionProfileFilter const & pProfileFilter) const;
};

template <typename T>
class impl_INetworkItem
{
	auto shim() const { return impl::shim<T, INetworkItem>(this); }

public:

	GUID NetworkId() const;
	Windows::Networking::Connectivity::NetworkTypes GetNetworkTypes() const;
};

template <typename T>
class impl_INetworkAdapter
{
	auto shim() const { return impl::shim<T, INetworkAdapter>(this); }

public:

	unsigned long long OutboundMaxBitsPerSecond() const;
	unsigned long long InboundMaxBitsPerSecond() const;
	unsigned IanaInterfaceType() const;
	Windows::Networking::Connectivity::NetworkItem NetworkItem() const;
	GUID NetworkAdapterId() const;
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile> GetConnectedProfileAsync() const;
};

template <typename T>
class impl_IIPInformation
{
	auto shim() const { return impl::shim<T, IIPInformation>(this); }

public:

	Windows::Networking::Connectivity::NetworkAdapter NetworkAdapter() const;
	Windows::Foundation::IReference<byte> PrefixLength() const;
};

template <typename T>
class impl_IProxyConfiguration
{
	auto shim() const { return impl::shim<T, IProxyConfiguration>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::Foundation::Uri> ProxyUris() const;
	bool CanConnectDirectly() const;
};

template <typename T>
class impl_IConnectionSession
{
	auto shim() const { return impl::shim<T, IConnectionSession>(this); }

public:

	Windows::Networking::Connectivity::ConnectionProfile ConnectionProfile() const;
};

template <typename T>
class impl_IRoutePolicy
{
	auto shim() const { return impl::shim<T, IRoutePolicy>(this); }

public:

	Windows::Networking::Connectivity::ConnectionProfile ConnectionProfile() const;
	Windows::Networking::HostName HostName() const;
	Windows::Networking::DomainNameType HostNameType() const;
};

template <typename T>
class impl_IRoutePolicyFactory
{
	auto shim() const { return impl::shim<T, IRoutePolicyFactory>(this); }

public:

	Windows::Networking::Connectivity::RoutePolicy CreateRoutePolicy(Windows::Networking::Connectivity::ConnectionProfile const & connectionProfile, Windows::Networking::HostName const & hostName, Windows::Networking::DomainNameType type) const;
};

template <typename T>
class impl_ICellularApnContext
{
	auto shim() const { return impl::shim<T, ICellularApnContext>(this); }

public:

	hstring ProviderId() const;
	void ProviderId(hstring_ref value) const;
	hstring AccessPointName() const;
	void AccessPointName(hstring_ref value) const;
	hstring UserName() const;
	void UserName(hstring_ref value) const;
	hstring Password() const;
	void Password(hstring_ref value) const;
	bool IsCompressionEnabled() const;
	void IsCompressionEnabled(bool value) const;
	Windows::Networking::Connectivity::CellularApnAuthenticationType AuthenticationType() const;
	void AuthenticationType(Windows::Networking::Connectivity::CellularApnAuthenticationType value) const;
};

template <typename T>
class impl_IConnectivityManagerStatics
{
	auto shim() const { return impl::shim<T, IConnectivityManagerStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession> AcquireConnectionAsync(Windows::Networking::Connectivity::CellularApnContext const & cellularApnContext) const;
	void AddHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy) const;
	void RemoveHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy) const;
};

template <typename T>
class impl_INetworkStateChangeEventDetails
{
	auto shim() const { return impl::shim<T, INetworkStateChangeEventDetails>(this); }

public:

	bool HasNewInternetConnectionProfile() const;
	bool HasNewConnectionCost() const;
	bool HasNewNetworkConnectivityLevel() const;
	bool HasNewDomainConnectivityLevel() const;
	bool HasNewHostNameList() const;
	bool HasNewWwanRegistrationState() const;
};

template <typename T>
class impl_INetworkStateChangeEventDetails2
{
	auto shim() const { return impl::shim<T, INetworkStateChangeEventDetails2>(this); }

public:

	bool HasNewTetheringOperationalState() const;
	bool HasNewTetheringClientCount() const;
};

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Sockets {

template <typename T>
class impl_IControlChannelTrigger
{
	auto shim() const { return impl::shim<T, IControlChannelTrigger>(this); }

public:

	hstring ControlChannelTriggerId() const;
	unsigned ServerKeepAliveIntervalInMinutes() const;
	void ServerKeepAliveIntervalInMinutes(unsigned value) const;
	unsigned CurrentKeepAliveIntervalInMinutes() const;
	IInspectable TransportObject() const;
	Windows::ApplicationModel::Background::IBackgroundTrigger KeepAliveTrigger() const;
	Windows::ApplicationModel::Background::IBackgroundTrigger PushNotificationTrigger() const;
	void UsingTransport(IInspectable const & transport) const;
	Windows::Networking::Sockets::ControlChannelTriggerStatus WaitForPushEnabled() const;
	void DecreaseNetworkKeepAliveInterval() const;
	void FlushTransport() const;
};

template <typename T>
class impl_IControlChannelTriggerFactory
{
	auto shim() const { return impl::shim<T, IControlChannelTriggerFactory>(this); }

public:

	Windows::Networking::Sockets::ControlChannelTrigger CreateControlChannelTrigger(hstring_ref channelId, unsigned serverKeepAliveIntervalInMinutes) const;
	Windows::Networking::Sockets::ControlChannelTrigger CreateControlChannelTriggerEx(hstring_ref channelId, unsigned serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType resourceRequestType) const;
};

template <typename T>
class impl_IControlChannelTriggerEventDetails
{
	auto shim() const { return impl::shim<T, IControlChannelTriggerEventDetails>(this); }

public:

	Windows::Networking::Sockets::ControlChannelTrigger ControlChannelTrigger() const;
};

template <typename T>
class impl_IControlChannelTriggerResetEventDetails
{
	auto shim() const { return impl::shim<T, IControlChannelTriggerResetEventDetails>(this); }

public:

	Windows::Networking::Sockets::ControlChannelTriggerResetReason ResetReason() const;
	bool HardwareSlotReset() const;
	bool SoftwareSlotReset() const;
};

template <typename T>
class impl_ISocketActivityInformation
{
	auto shim() const { return impl::shim<T, ISocketActivityInformation>(this); }

public:

	GUID TaskId() const;
	hstring Id() const;
	Windows::Networking::Sockets::SocketActivityKind SocketKind() const;
	Windows::Networking::Sockets::SocketActivityContext Context() const;
	Windows::Networking::Sockets::DatagramSocket DatagramSocket() const;
	Windows::Networking::Sockets::StreamSocket StreamSocket() const;
	Windows::Networking::Sockets::StreamSocketListener StreamSocketListener() const;
};

template <typename T>
class impl_ISocketActivityTriggerDetails
{
	auto shim() const { return impl::shim<T, ISocketActivityTriggerDetails>(this); }

public:

	Windows::Networking::Sockets::SocketActivityTriggerReason Reason() const;
	Windows::Networking::Sockets::SocketActivityInformation SocketInformation() const;
};

template <typename T>
class impl_ISocketActivityInformationStatics
{
	auto shim() const { return impl::shim<T, ISocketActivityInformationStatics>(this); }

public:

	Windows::Foundation::Collections::IMapView<hstring, Windows::Networking::Sockets::SocketActivityInformation> AllSockets() const;
};

template <typename T>
class impl_ISocketActivityContext
{
	auto shim() const { return impl::shim<T, ISocketActivityContext>(this); }

public:

	Windows::Storage::Streams::IBuffer Data() const;
};

template <typename T>
class impl_ISocketActivityContextFactory
{
	auto shim() const { return impl::shim<T, ISocketActivityContextFactory>(this); }

public:

	Windows::Networking::Sockets::SocketActivityContext Create(Windows::Storage::Streams::IBuffer const & data) const;
};

template <typename T>
class impl_IDatagramSocketMessageReceivedEventArgs
{
	auto shim() const { return impl::shim<T, IDatagramSocketMessageReceivedEventArgs>(this); }

public:

	Windows::Networking::HostName RemoteAddress() const;
	hstring RemotePort() const;
	Windows::Networking::HostName LocalAddress() const;
	Windows::Storage::Streams::DataReader GetDataReader() const;
	Windows::Storage::Streams::IInputStream GetDataStream() const;
};

template <typename T>
class impl_IMessageWebSocketMessageReceivedEventArgs
{
	auto shim() const { return impl::shim<T, IMessageWebSocketMessageReceivedEventArgs>(this); }

public:

	Windows::Networking::Sockets::SocketMessageType MessageType() const;
	Windows::Storage::Streams::DataReader GetDataReader() const;
	Windows::Storage::Streams::IInputStream GetDataStream() const;
};

template <typename T>
class impl_IWebSocketClosedEventArgs
{
	auto shim() const { return impl::shim<T, IWebSocketClosedEventArgs>(this); }

public:

	unsigned short Code() const;
	hstring Reason() const;
};

template <typename T>
class impl_IDatagramSocketInformation
{
	auto shim() const { return impl::shim<T, IDatagramSocketInformation>(this); }

public:

	Windows::Networking::HostName LocalAddress() const;
	hstring LocalPort() const;
	Windows::Networking::HostName RemoteAddress() const;
	hstring RemotePort() const;
};

template <typename T>
class impl_IDatagramSocketControl
{
	auto shim() const { return impl::shim<T, IDatagramSocketControl>(this); }

public:

	Windows::Networking::Sockets::SocketQualityOfService QualityOfService() const;
	void QualityOfService(Windows::Networking::Sockets::SocketQualityOfService value) const;
	byte OutboundUnicastHopLimit() const;
	void OutboundUnicastHopLimit(byte value) const;
};

template <typename T>
class impl_IDatagramSocketControl2
{
	auto shim() const { return impl::shim<T, IDatagramSocketControl2>(this); }

public:

	unsigned InboundBufferSizeInBytes() const;
	void InboundBufferSizeInBytes(unsigned value) const;
	bool DontFragment() const;
	void DontFragment(bool value) const;
};

template <typename T>
class impl_IDatagramSocketControl3
{
	auto shim() const { return impl::shim<T, IDatagramSocketControl3>(this); }

public:

	bool MulticastOnly() const;
	void MulticastOnly(bool value) const;
};

template <typename T>
class impl_IDatagramSocketStatics
{
	auto shim() const { return impl::shim<T, IDatagramSocketStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, hstring_ref remoteServiceName) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, hstring_ref remoteServiceName, Windows::Networking::HostNameSortOptions sortOptions) const;
};

template <typename T>
class impl_IDatagramSocket
{
	auto shim() const { return impl::shim<T, IDatagramSocket>(this); }

public:

	Windows::Networking::Sockets::DatagramSocketControl Control() const;
	Windows::Networking::Sockets::DatagramSocketInformation Information() const;
	Windows::Storage::Streams::IOutputStream OutputStream() const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, hstring_ref remoteServiceName) const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::EndpointPair const & endpointPair) const;
	Windows::Foundation::IAsyncAction BindServiceNameAsync(hstring_ref localServiceName) const;
	Windows::Foundation::IAsyncAction BindEndpointAsync(Windows::Networking::HostName const & localHostName, hstring_ref localServiceName) const;
	void JoinMulticastGroup(Windows::Networking::HostName const & host) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> GetOutputStreamAsync(Windows::Networking::HostName const & remoteHostName, hstring_ref remoteServiceName) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> GetOutputStreamAsync(Windows::Networking::EndpointPair const & endpointPair) const;
	long long MessageReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::DatagramSocket, Windows::Networking::Sockets::DatagramSocketMessageReceivedEventArgs> const & eventHandler) const;
	template <typename F> long long MessageReceived(F eventHandler) const;
	void MessageReceived(long long eventCookie) const;
};

template <typename T>
class impl_IDatagramSocket2
{
	auto shim() const { return impl::shim<T, IDatagramSocket2>(this); }

public:

	Windows::Foundation::IAsyncAction BindServiceNameAsync(hstring_ref localServiceName, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const;
};

template <typename T>
class impl_IDatagramSocket3
{
	auto shim() const { return impl::shim<T, IDatagramSocket3>(this); }

public:

	Windows::Foundation::IAsyncAction CancelIOAsync() const;
	void EnableTransferOwnership(GUID taskId) const;
	void EnableTransferOwnership(GUID taskId, Windows::Networking::Sockets::SocketActivityConnectedStandbyAction connectedStandbyAction) const;
	void TransferOwnership(hstring_ref socketId) const;
	void TransferOwnership(hstring_ref socketId, Windows::Networking::Sockets::SocketActivityContext const & data) const;
	void TransferOwnership(hstring_ref socketId, Windows::Networking::Sockets::SocketActivityContext const & data, Windows::Foundation::TimeSpan const & keepAliveTime) const;
};

template <typename T>
class impl_IStreamSocketInformation
{
	auto shim() const { return impl::shim<T, IStreamSocketInformation>(this); }

public:

	Windows::Networking::HostName LocalAddress() const;
	hstring LocalPort() const;
	Windows::Networking::HostName RemoteHostName() const;
	Windows::Networking::HostName RemoteAddress() const;
	hstring RemoteServiceName() const;
	hstring RemotePort() const;
	Windows::Networking::Sockets::RoundTripTimeStatistics RoundTripTimeStatistics() const;
	Windows::Networking::Sockets::BandwidthStatistics BandwidthStatistics() const;
	Windows::Networking::Sockets::SocketProtectionLevel ProtectionLevel() const;
	Windows::Storage::Streams::IBuffer SessionKey() const;
};

template <typename T>
class impl_IStreamSocketInformation2
{
	auto shim() const { return impl::shim<T, IStreamSocketInformation2>(this); }

public:

	Windows::Networking::Sockets::SocketSslErrorSeverity ServerCertificateErrorSeverity() const;
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> ServerCertificateErrors() const;
	Windows::Security::Cryptography::Certificates::Certificate ServerCertificate() const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> ServerIntermediateCertificates() const;
};

template <typename T>
class impl_IStreamSocketControl
{
	auto shim() const { return impl::shim<T, IStreamSocketControl>(this); }

public:

	bool NoDelay() const;
	void NoDelay(bool value) const;
	bool KeepAlive() const;
	void KeepAlive(bool value) const;
	unsigned OutboundBufferSizeInBytes() const;
	void OutboundBufferSizeInBytes(unsigned value) const;
	Windows::Networking::Sockets::SocketQualityOfService QualityOfService() const;
	void QualityOfService(Windows::Networking::Sockets::SocketQualityOfService value) const;
	byte OutboundUnicastHopLimit() const;
	void OutboundUnicastHopLimit(byte value) const;
};

template <typename T>
class impl_IStreamSocketControl2
{
	auto shim() const { return impl::shim<T, IStreamSocketControl2>(this); }

public:

	Windows::Foundation::Collections::IVector<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> IgnorableServerCertificateErrors() const;
};

template <typename T>
class impl_IStreamSocketControl3
{
	auto shim() const { return impl::shim<T, IStreamSocketControl3>(this); }

public:

	bool SerializeConnectionAttempts() const;
	void SerializeConnectionAttempts(bool value) const;
	Windows::Security::Cryptography::Certificates::Certificate ClientCertificate() const;
	void ClientCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const;
};

template <typename T>
class impl_IStreamSocket
{
	auto shim() const { return impl::shim<T, IStreamSocket>(this); }

public:

	Windows::Networking::Sockets::StreamSocketControl Control() const;
	Windows::Networking::Sockets::StreamSocketInformation Information() const;
	Windows::Storage::Streams::IInputStream InputStream() const;
	Windows::Storage::Streams::IOutputStream OutputStream() const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::EndpointPair const & endpointPair) const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, hstring_ref remoteServiceName) const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::EndpointPair const & endpointPair, Windows::Networking::Sockets::SocketProtectionLevel protectionLevel) const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, hstring_ref remoteServiceName, Windows::Networking::Sockets::SocketProtectionLevel protectionLevel) const;
	Windows::Foundation::IAsyncAction UpgradeToSslAsync(Windows::Networking::Sockets::SocketProtectionLevel protectionLevel, Windows::Networking::HostName const & validationHostName) const;
};

template <typename T>
class impl_IStreamSocket2
{
	auto shim() const { return impl::shim<T, IStreamSocket2>(this); }

public:

	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Networking::HostName const & remoteHostName, hstring_ref remoteServiceName, Windows::Networking::Sockets::SocketProtectionLevel protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const;
};

template <typename T>
class impl_IStreamSocket3
{
	auto shim() const { return impl::shim<T, IStreamSocket3>(this); }

public:

	Windows::Foundation::IAsyncAction CancelIOAsync() const;
	void EnableTransferOwnership(GUID taskId) const;
	void EnableTransferOwnership(GUID taskId, Windows::Networking::Sockets::SocketActivityConnectedStandbyAction connectedStandbyAction) const;
	void TransferOwnership(hstring_ref socketId) const;
	void TransferOwnership(hstring_ref socketId, Windows::Networking::Sockets::SocketActivityContext const & data) const;
	void TransferOwnership(hstring_ref socketId, Windows::Networking::Sockets::SocketActivityContext const & data, Windows::Foundation::TimeSpan const & keepAliveTime) const;
};

template <typename T>
class impl_IStreamSocketListenerControl
{
	auto shim() const { return impl::shim<T, IStreamSocketListenerControl>(this); }

public:

	Windows::Networking::Sockets::SocketQualityOfService QualityOfService() const;
	void QualityOfService(Windows::Networking::Sockets::SocketQualityOfService value) const;
};

template <typename T>
class impl_IStreamSocketListenerControl2
{
	auto shim() const { return impl::shim<T, IStreamSocketListenerControl2>(this); }

public:

	bool NoDelay() const;
	void NoDelay(bool value) const;
	bool KeepAlive() const;
	void KeepAlive(bool value) const;
	unsigned OutboundBufferSizeInBytes() const;
	void OutboundBufferSizeInBytes(unsigned value) const;
	byte OutboundUnicastHopLimit() const;
	void OutboundUnicastHopLimit(byte value) const;
};

template <typename T>
class impl_IStreamSocketListenerInformation
{
	auto shim() const { return impl::shim<T, IStreamSocketListenerInformation>(this); }

public:

	hstring LocalPort() const;
};

template <typename T>
class impl_IStreamSocketListenerConnectionReceivedEventArgs
{
	auto shim() const { return impl::shim<T, IStreamSocketListenerConnectionReceivedEventArgs>(this); }

public:

	Windows::Networking::Sockets::StreamSocket Socket() const;
};

template <typename T>
class impl_IStreamSocketListener
{
	auto shim() const { return impl::shim<T, IStreamSocketListener>(this); }

public:

	Windows::Networking::Sockets::StreamSocketListenerControl Control() const;
	Windows::Networking::Sockets::StreamSocketListenerInformation Information() const;
	Windows::Foundation::IAsyncAction BindServiceNameAsync(hstring_ref localServiceName) const;
	Windows::Foundation::IAsyncAction BindEndpointAsync(Windows::Networking::HostName const & localHostName, hstring_ref localServiceName) const;
	long long ConnectionReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::StreamSocketListener, Windows::Networking::Sockets::StreamSocketListenerConnectionReceivedEventArgs> const & eventHandler) const;
	template <typename F> long long ConnectionReceived(F eventHandler) const;
	void ConnectionReceived(long long eventCookie) const;
};

template <typename T>
class impl_IStreamSocketListener2
{
	auto shim() const { return impl::shim<T, IStreamSocketListener2>(this); }

public:

	Windows::Foundation::IAsyncAction BindServiceNameAsync(hstring_ref localServiceName, Windows::Networking::Sockets::SocketProtectionLevel protectionLevel) const;
	Windows::Foundation::IAsyncAction BindServiceNameAsync(hstring_ref localServiceName, Windows::Networking::Sockets::SocketProtectionLevel protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const;
};

template <typename T>
class impl_IStreamSocketListener3
{
	auto shim() const { return impl::shim<T, IStreamSocketListener3>(this); }

public:

	Windows::Foundation::IAsyncAction CancelIOAsync() const;
	void EnableTransferOwnership(GUID taskId) const;
	void EnableTransferOwnership(GUID taskId, Windows::Networking::Sockets::SocketActivityConnectedStandbyAction connectedStandbyAction) const;
	void TransferOwnership(hstring_ref socketId) const;
	void TransferOwnership(hstring_ref socketId, Windows::Networking::Sockets::SocketActivityContext const & data) const;
};

template <typename T>
class impl_IWebSocketControl
{
	auto shim() const { return impl::shim<T, IWebSocketControl>(this); }

public:

	unsigned OutboundBufferSizeInBytes() const;
	void OutboundBufferSizeInBytes(unsigned value) const;
	Windows::Security::Credentials::PasswordCredential ServerCredential() const;
	void ServerCredential(Windows::Security::Credentials::PasswordCredential const & value) const;
	Windows::Security::Credentials::PasswordCredential ProxyCredential() const;
	void ProxyCredential(Windows::Security::Credentials::PasswordCredential const & value) const;
	Windows::Foundation::Collections::IVector<hstring> SupportedProtocols() const;
};

template <typename T>
class impl_IWebSocketInformation
{
	auto shim() const { return impl::shim<T, IWebSocketInformation>(this); }

public:

	Windows::Networking::HostName LocalAddress() const;
	Windows::Networking::Sockets::BandwidthStatistics BandwidthStatistics() const;
	hstring Protocol() const;
};

template <typename T>
class impl_IWebSocket
{
	auto shim() const { return impl::shim<T, IWebSocket>(this); }

public:

	Windows::Storage::Streams::IOutputStream OutputStream() const;
	Windows::Foundation::IAsyncAction ConnectAsync(Windows::Foundation::Uri const & uri) const;
	void SetRequestHeader(hstring_ref headerName, hstring_ref headerValue) const;
	long long Closed(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::IWebSocket, Windows::Networking::Sockets::WebSocketClosedEventArgs> const & eventHandler) const;
	template <typename F> long long Closed(F eventHandler) const;
	void Closed(long long eventCookie) const;
	void Close(unsigned short code, hstring_ref reason) const;
};

template <typename T>
class impl_IMessageWebSocketControl
{
	auto shim() const { return impl::shim<T, IMessageWebSocketControl>(this); }

public:

	unsigned MaxMessageSize() const;
	void MaxMessageSize(unsigned value) const;
	Windows::Networking::Sockets::SocketMessageType MessageType() const;
	void MessageType(Windows::Networking::Sockets::SocketMessageType value) const;
};

template <typename T>
class impl_IMessageWebSocket
{
	auto shim() const { return impl::shim<T, IMessageWebSocket>(this); }

public:

	Windows::Networking::Sockets::MessageWebSocketControl Control() const;
	Windows::Networking::Sockets::MessageWebSocketInformation Information() const;
	long long MessageReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::MessageWebSocket, Windows::Networking::Sockets::MessageWebSocketMessageReceivedEventArgs> const & eventHandler) const;
	template <typename F> long long MessageReceived(F eventHandler) const;
	void MessageReceived(long long eventCookie) const;
};

template <typename T>
class impl_IStreamWebSocketControl
{
	auto shim() const { return impl::shim<T, IStreamWebSocketControl>(this); }

public:

	bool NoDelay() const;
	void NoDelay(bool value) const;
};

template <typename T>
class impl_IStreamWebSocket
{
	auto shim() const { return impl::shim<T, IStreamWebSocket>(this); }

public:

	Windows::Networking::Sockets::StreamWebSocketControl Control() const;
	Windows::Networking::Sockets::StreamWebSocketInformation Information() const;
	Windows::Storage::Streams::IInputStream InputStream() const;
};

template <typename T>
class impl_ISocketErrorStatics
{
	auto shim() const { return impl::shim<T, ISocketErrorStatics>(this); }

public:

	Windows::Networking::Sockets::SocketErrorStatus GetStatus(int hresult) const;
};

template <typename T>
class impl_IWebSocketErrorStatics
{
	auto shim() const { return impl::shim<T, IWebSocketErrorStatics>(this); }

public:

	Windows::Web::WebErrorStatus GetStatus(int hresult) const;
};

}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web {

template <typename T>
class impl_IWebAuthenticationResult
{
	auto shim() const { return impl::shim<T, IWebAuthenticationResult>(this); }

public:

	hstring ResponseData() const;
	Windows::Security::Authentication::Web::WebAuthenticationStatus ResponseStatus() const;
	unsigned ResponseErrorDetail() const;
};

template <typename T>
class impl_IWebAuthenticationBrokerStatics
{
	auto shim() const { return impl::shim<T, IWebAuthenticationBrokerStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions options, Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions options, Windows::Foundation::Uri const & requestUri) const;
	Windows::Foundation::Uri GetCurrentApplicationCallbackUri() const;
};

template <typename T>
class impl_IWebAuthenticationBrokerStatics2
{
	auto shim() const { return impl::shim<T, IWebAuthenticationBrokerStatics2>(this); }

public:

	void AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri) const;
	void AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri) const;
	void AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri, Windows::Foundation::Collections::ValueSet const & continuationData, Windows::Security::Authentication::Web::WebAuthenticationOptions options) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> AuthenticateSilentlyAsync(Windows::Foundation::Uri const & requestUri) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> AuthenticateSilentlyAsync(Windows::Foundation::Uri const & requestUri, Windows::Security::Authentication::Web::WebAuthenticationOptions options) const;
};

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Core {

template <typename T>
class impl_IWebTokenRequest
{
	auto shim() const { return impl::shim<T, IWebTokenRequest>(this); }

public:

	Windows::Security::Credentials::WebAccountProvider WebAccountProvider() const;
	hstring Scope() const;
	hstring ClientId() const;
	Windows::Security::Authentication::Web::Core::WebTokenRequestPromptType PromptType() const;
	Windows::Foundation::Collections::IMap<hstring, hstring> Properties() const;
};

template <typename T>
class impl_IWebTokenRequest2
{
	auto shim() const { return impl::shim<T, IWebTokenRequest2>(this); }

public:

	Windows::Foundation::Collections::IMap<hstring, hstring> AppProperties() const;
};

template <typename T>
class impl_IWebTokenRequestFactory
{
	auto shim() const { return impl::shim<T, IWebTokenRequestFactory>(this); }

public:

	Windows::Security::Authentication::Web::Core::WebTokenRequest Create(Windows::Security::Credentials::WebAccountProvider const & provider, hstring_ref scope, hstring_ref clientId) const;
	Windows::Security::Authentication::Web::Core::WebTokenRequest CreateWithPromptType(Windows::Security::Credentials::WebAccountProvider const & provider, hstring_ref scope, hstring_ref clientId, Windows::Security::Authentication::Web::Core::WebTokenRequestPromptType promptType) const;
	Windows::Security::Authentication::Web::Core::WebTokenRequest CreateWithProvider(Windows::Security::Credentials::WebAccountProvider const & provider) const;
	Windows::Security::Authentication::Web::Core::WebTokenRequest CreateWithScope(Windows::Security::Credentials::WebAccountProvider const & provider, hstring_ref scope) const;
};

template <typename T>
class impl_IWebAuthenticationCoreManagerStatics
{
	auto shim() const { return impl::shim<T, IWebAuthenticationCoreManagerStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> GetTokenSilentlyAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> GetTokenSilentlyAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request, Windows::Security::Credentials::WebAccount const & webAccount) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> RequestTokenAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> RequestTokenAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request, Windows::Security::Credentials::WebAccount const & webAccount) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> FindAccountAsync(Windows::Security::Credentials::WebAccountProvider const & provider, hstring_ref webAccountId) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> FindAccountProviderAsync(hstring_ref webAccountProviderId) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> FindAccountProviderAsync(hstring_ref webAccountProviderId, hstring_ref authority) const;
};

template <typename T>
class impl_IWebAuthenticationCoreManagerStatics2
{
	auto shim() const { return impl::shim<T, IWebAuthenticationCoreManagerStatics2>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> FindAccountProviderAsync(hstring_ref webAccountProviderId, hstring_ref authority, Windows::System::User const & user) const;
};

template <typename T>
class impl_IWebProviderError
{
	auto shim() const { return impl::shim<T, IWebProviderError>(this); }

public:

	unsigned ErrorCode() const;
	hstring ErrorMessage() const;
	Windows::Foundation::Collections::IMap<hstring, hstring> Properties() const;
};

template <typename T>
class impl_IWebProviderErrorFactory
{
	auto shim() const { return impl::shim<T, IWebProviderErrorFactory>(this); }

public:

	Windows::Security::Authentication::Web::Core::WebProviderError Create(unsigned errorCode, hstring_ref errorMessage) const;
};

template <typename T>
class impl_IWebTokenRequestResult
{
	auto shim() const { return impl::shim<T, IWebTokenRequestResult>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::Web::Core::WebTokenResponse> ResponseData() const;
	Windows::Security::Authentication::Web::Core::WebTokenRequestStatus ResponseStatus() const;
	Windows::Security::Authentication::Web::Core::WebProviderError ResponseError() const;
	Windows::Foundation::IAsyncAction InvalidateCacheAsync() const;
};

template <typename T>
class impl_IWebTokenResponse
{
	auto shim() const { return impl::shim<T, IWebTokenResponse>(this); }

public:

	hstring Token() const;
	Windows::Security::Authentication::Web::Core::WebProviderError ProviderError() const;
	Windows::Security::Credentials::WebAccount WebAccount() const;
	Windows::Foundation::Collections::IMap<hstring, hstring> Properties() const;
};

template <typename T>
class impl_IWebTokenResponseFactory
{
	auto shim() const { return impl::shim<T, IWebTokenResponseFactory>(this); }

public:

	Windows::Security::Authentication::Web::Core::WebTokenResponse CreateWithToken(hstring_ref token) const;
	Windows::Security::Authentication::Web::Core::WebTokenResponse CreateWithTokenAndAccount(hstring_ref token, Windows::Security::Credentials::WebAccount const & webAccount) const;
	Windows::Security::Authentication::Web::Core::WebTokenResponse CreateWithTokenAccountAndError(hstring_ref token, Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Core::WebProviderError const & error) const;
};

}}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Provider {

template <typename T>
class impl_IWebAccountProviderOperation
{
	auto shim() const { return impl::shim<T, IWebAccountProviderOperation>(this); }

public:

	Windows::Security::Authentication::Web::Provider::WebAccountProviderOperationKind Kind() const;
};

template <typename T>
class impl_IWebProviderTokenRequest
{
	auto shim() const { return impl::shim<T, IWebProviderTokenRequest>(this); }

public:

	Windows::Security::Authentication::Web::Core::WebTokenRequest ClientRequest() const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount> WebAccounts() const;
	Windows::Security::Authentication::Web::Provider::WebAccountSelectionOptions WebAccountSelectionOptions() const;
	Windows::Foundation::Uri ApplicationCallbackUri() const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> GetApplicationTokenBindingKeyAsync(Windows::Security::Authentication::Web::TokenBindingKeyType keyType, Windows::Foundation::Uri const & target) const;
};

template <typename T>
class impl_IWebProviderTokenResponse
{
	auto shim() const { return impl::shim<T, IWebProviderTokenResponse>(this); }

public:

	Windows::Security::Authentication::Web::Core::WebTokenResponse ClientResponse() const;
};

template <typename T>
class impl_IWebProviderTokenResponseFactory
{
	auto shim() const { return impl::shim<T, IWebProviderTokenResponseFactory>(this); }

public:

	Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse Create(Windows::Security::Authentication::Web::Core::WebTokenResponse const & webTokenResponse) const;
};

template <typename T>
class impl_IWebAccountClientView
{
	auto shim() const { return impl::shim<T, IWebAccountClientView>(this); }

public:

	Windows::Foundation::Uri ApplicationCallbackUri() const;
	Windows::Security::Authentication::Web::Provider::WebAccountClientViewType Type() const;
	hstring AccountPairwiseId() const;
};

template <typename T>
class impl_IWebAccountClientViewFactory
{
	auto shim() const { return impl::shim<T, IWebAccountClientViewFactory>(this); }

public:

	Windows::Security::Authentication::Web::Provider::WebAccountClientView Create(Windows::Security::Authentication::Web::Provider::WebAccountClientViewType viewType, Windows::Foundation::Uri const & applicationCallbackUri) const;
	Windows::Security::Authentication::Web::Provider::WebAccountClientView CreateWithPairwiseId(Windows::Security::Authentication::Web::Provider::WebAccountClientViewType viewType, Windows::Foundation::Uri const & applicationCallbackUri, hstring_ref accountPairwiseId) const;
};

template <typename T>
class impl_IWebAccountManagerStatics
{
	auto shim() const { return impl::shim<T, IWebAccountManagerStatics>(this); }

public:

	Windows::Foundation::IAsyncAction UpdateWebAccountPropertiesAsync(Windows::Security::Credentials::WebAccount const & webAccount, hstring_ref webAccountUserName, Windows::Foundation::Collections::IMapView<hstring, hstring> const & additionalProperties) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> AddWebAccountAsync(hstring_ref webAccountId, hstring_ref webAccountUserName, Windows::Foundation::Collections::IMapView<hstring, hstring> const & props) const;
	Windows::Foundation::IAsyncAction DeleteWebAccountAsync(Windows::Security::Credentials::WebAccount const & webAccount) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount>> FindAllProviderWebAccountsAsync() const;
	Windows::Foundation::IAsyncAction PushCookiesAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IVectorView<Windows::Web::Http::HttpCookie> const & cookies) const;
	Windows::Foundation::IAsyncAction SetViewAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Provider::WebAccountClientView const & view) const;
	Windows::Foundation::IAsyncAction ClearViewAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Foundation::Uri const & applicationCallbackUri) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::Web::Provider::WebAccountClientView>> GetViewsAsync(Windows::Security::Credentials::WebAccount const & webAccount) const;
	Windows::Foundation::IAsyncAction SetWebAccountPictureAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Storage::Streams::IRandomAccessStream const & webAccountPicture) const;
	Windows::Foundation::IAsyncAction ClearWebAccountPictureAsync(Windows::Security::Credentials::WebAccount const & webAccount) const;
};

template <typename T>
class impl_IWebAccountManagerStatics2
{
	auto shim() const { return impl::shim<T, IWebAccountManagerStatics2>(this); }

public:

	Windows::Foundation::IAsyncAction PullCookiesAsync(hstring_ref uriString, hstring_ref callerPFN) const;
};

template <typename T>
class impl_IWebAccountScopeManagerStatics
{
	auto shim() const { return impl::shim<T, IWebAccountScopeManagerStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> AddWebAccountAsync(hstring_ref webAccountId, hstring_ref webAccountUserName, Windows::Foundation::Collections::IMapView<hstring, hstring> const & props, Windows::Security::Authentication::Web::Provider::WebAccountScope scope) const;
	Windows::Foundation::IAsyncAction SetScopeAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Provider::WebAccountScope scope) const;
	Windows::Security::Authentication::Web::Provider::WebAccountScope GetScope(Windows::Security::Credentials::WebAccount const & webAccount) const;
};

template <typename T>
class impl_IWebAccountProviderBaseReportOperation
{
	auto shim() const { return impl::shim<T, IWebAccountProviderBaseReportOperation>(this); }

public:

	void ReportCompleted() const;
	void ReportError(Windows::Security::Authentication::Web::Core::WebProviderError const & value) const;
};

template <typename T>
class impl_IWebAccountProviderUIReportOperation
{
	auto shim() const { return impl::shim<T, IWebAccountProviderUIReportOperation>(this); }

public:

	void ReportUserCanceled() const;
};

template <typename T>
class impl_IWebAccountProviderSilentReportOperation
{
	auto shim() const { return impl::shim<T, IWebAccountProviderSilentReportOperation>(this); }

public:

	void ReportUserInteractionRequired() const;
	void ReportUserInteractionRequired(Windows::Security::Authentication::Web::Core::WebProviderError const & value) const;
};

template <typename T>
class impl_IWebAccountProviderTokenOperation
{
	auto shim() const { return impl::shim<T, IWebAccountProviderTokenOperation>(this); }

public:

	Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest ProviderRequest() const;
	Windows::Foundation::Collections::IVector<Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse> ProviderResponses() const;
	void CacheExpirationTime(Windows::Foundation::DateTime const & value) const;
	Windows::Foundation::DateTime CacheExpirationTime() const;
};

template <typename T>
class impl_IWebAccountProviderAddAccountOperation
{
	auto shim() const { return impl::shim<T, IWebAccountProviderAddAccountOperation>(this); }

public:

	void ReportCompleted() const;
};

template <typename T>
class impl_IWebAccountProviderManageAccountOperation
{
	auto shim() const { return impl::shim<T, IWebAccountProviderManageAccountOperation>(this); }

public:

	Windows::Security::Credentials::WebAccount WebAccount() const;
	void ReportCompleted() const;
};

template <typename T>
class impl_IWebAccountProviderDeleteAccountOperation
{
	auto shim() const { return impl::shim<T, IWebAccountProviderDeleteAccountOperation>(this); }

public:

	Windows::Security::Credentials::WebAccount WebAccount() const;
};

template <typename T>
class impl_IWebAccountProviderSignOutAccountOperation
{
	auto shim() const { return impl::shim<T, IWebAccountProviderSignOutAccountOperation>(this); }

public:

	Windows::Security::Credentials::WebAccount WebAccount() const;
	Windows::Foundation::Uri ApplicationCallbackUri() const;
	hstring ClientId() const;
};

template <typename T>
class impl_IWebAccountProviderRetrieveCookiesOperation
{
	auto shim() const { return impl::shim<T, IWebAccountProviderRetrieveCookiesOperation>(this); }

public:

	Windows::Foundation::Uri Context() const;
	Windows::Foundation::Collections::IVector<Windows::Web::Http::HttpCookie> Cookies() const;
	void Uri(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::Uri Uri() const;
	Windows::Foundation::Uri ApplicationCallbackUri() const;
};

template <typename T>
class impl_IWebAccountProviderTokenObjects
{
	auto shim() const { return impl::shim<T, IWebAccountProviderTokenObjects>(this); }

public:

	Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation Operation() const;
};

}}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Credentials {

template <typename T>
class impl_IWebAccountFactory
{
	auto shim() const { return impl::shim<T, IWebAccountFactory>(this); }

public:

	Windows::Security::Credentials::WebAccount CreateWebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, hstring_ref userName, Windows::Security::Credentials::WebAccountState state) const;
};

template <typename T>
class impl_IWebAccount
{
	auto shim() const { return impl::shim<T, IWebAccount>(this); }

public:

	Windows::Security::Credentials::WebAccountProvider WebAccountProvider() const;
	hstring UserName() const;
	Windows::Security::Credentials::WebAccountState State() const;
};

template <typename T>
class impl_IWebAccount2
{
	auto shim() const { return impl::shim<T, IWebAccount2>(this); }

public:

	hstring Id() const;
	Windows::Foundation::Collections::IMapView<hstring, hstring> Properties() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> GetPictureAsync(Windows::Security::Credentials::WebAccountPictureSize desizedSize) const;
	Windows::Foundation::IAsyncAction SignOutAsync() const;
	Windows::Foundation::IAsyncAction SignOutAsync(hstring_ref clientId) const;
};

template <typename T>
class impl_IWebAccountProviderFactory
{
	auto shim() const { return impl::shim<T, IWebAccountProviderFactory>(this); }

public:

	Windows::Security::Credentials::WebAccountProvider CreateWebAccountProvider(hstring_ref id, hstring_ref displayName, Windows::Foundation::Uri const & iconUri) const;
};

template <typename T>
class impl_IWebAccountProvider
{
	auto shim() const { return impl::shim<T, IWebAccountProvider>(this); }

public:

	hstring Id() const;
	hstring DisplayName() const;
	Windows::Foundation::Uri IconUri() const;
};

template <typename T>
class impl_IWebAccountProvider2
{
	auto shim() const { return impl::shim<T, IWebAccountProvider2>(this); }

public:

	hstring DisplayPurpose() const;
	hstring Authority() const;
};

template <typename T>
class impl_IWebAccountProvider3
{
	auto shim() const { return impl::shim<T, IWebAccountProvider3>(this); }

public:

	Windows::System::User User() const;
};

template <typename T>
class impl_IKeyCredentialManagerStatics
{
	auto shim() const { return impl::shim<T, IKeyCredentialManagerStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<bool> IsSupportedAsync() const;
	Windows::Foundation::IAsyncAction RenewAttestationAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialRetrievalResult> RequestCreateAsync(hstring_ref name, Windows::Security::Credentials::KeyCredentialCreationOption option) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialRetrievalResult> OpenAsync(hstring_ref name) const;
	Windows::Foundation::IAsyncAction DeleteAsync(hstring_ref name) const;
};

template <typename T>
class impl_IKeyCredential
{
	auto shim() const { return impl::shim<T, IKeyCredential>(this); }

public:

	hstring Name() const;
	Windows::Storage::Streams::IBuffer RetrievePublicKey() const;
	Windows::Storage::Streams::IBuffer RetrievePublicKey(Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType blobType) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialOperationResult> RequestSignAsync(Windows::Storage::Streams::IBuffer const & data) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialAttestationResult> GetAttestationAsync() const;
};

template <typename T>
class impl_IKeyCredentialRetrievalResult
{
	auto shim() const { return impl::shim<T, IKeyCredentialRetrievalResult>(this); }

public:

	Windows::Security::Credentials::KeyCredential Credential() const;
	Windows::Security::Credentials::KeyCredentialStatus Status() const;
};

template <typename T>
class impl_IKeyCredentialOperationResult
{
	auto shim() const { return impl::shim<T, IKeyCredentialOperationResult>(this); }

public:

	Windows::Storage::Streams::IBuffer Result() const;
	Windows::Security::Credentials::KeyCredentialStatus Status() const;
};

template <typename T>
class impl_IKeyCredentialAttestationResult
{
	auto shim() const { return impl::shim<T, IKeyCredentialAttestationResult>(this); }

public:

	Windows::Storage::Streams::IBuffer CertificateChainBuffer() const;
	Windows::Storage::Streams::IBuffer AttestationBuffer() const;
	Windows::Security::Credentials::KeyCredentialAttestationStatus Status() const;
};

template <typename T>
class impl_IPasswordCredential
{
	auto shim() const { return impl::shim<T, IPasswordCredential>(this); }

public:

	hstring Resource() const;
	void Resource(hstring_ref resource) const;
	hstring UserName() const;
	void UserName(hstring_ref userName) const;
	hstring Password() const;
	void Password(hstring_ref password) const;
	void RetrievePassword() const;
	Windows::Foundation::Collections::IPropertySet Properties() const;
};

template <typename T>
class impl_ICredentialFactory
{
	auto shim() const { return impl::shim<T, ICredentialFactory>(this); }

public:

	Windows::Security::Credentials::PasswordCredential CreatePasswordCredential(hstring_ref resource, hstring_ref userName, hstring_ref password) const;
};

template <typename T>
class impl_IPasswordVault
{
	auto shim() const { return impl::shim<T, IPasswordVault>(this); }

public:

	void Add(Windows::Security::Credentials::PasswordCredential const & credential) const;
	void Remove(Windows::Security::Credentials::PasswordCredential const & credential) const;
	Windows::Security::Credentials::PasswordCredential Retrieve(hstring_ref resource, hstring_ref userName) const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> FindAllByResource(hstring_ref resource) const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> FindAllByUserName(hstring_ref userName) const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> RetrieveAll() const;
};

}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

template <typename T>
class impl_ICertificateRequestProperties
{
	auto shim() const { return impl::shim<T, ICertificateRequestProperties>(this); }

public:

	hstring Subject() const;
	void Subject(hstring_ref value) const;
	hstring KeyAlgorithmName() const;
	void KeyAlgorithmName(hstring_ref value) const;
	unsigned KeySize() const;
	void KeySize(unsigned value) const;
	hstring FriendlyName() const;
	void FriendlyName(hstring_ref value) const;
	hstring HashAlgorithmName() const;
	void HashAlgorithmName(hstring_ref value) const;
	Windows::Security::Cryptography::Certificates::ExportOption Exportable() const;
	void Exportable(Windows::Security::Cryptography::Certificates::ExportOption value) const;
	Windows::Security::Cryptography::Certificates::EnrollKeyUsages KeyUsages() const;
	void KeyUsages(Windows::Security::Cryptography::Certificates::EnrollKeyUsages value) const;
	Windows::Security::Cryptography::Certificates::KeyProtectionLevel KeyProtectionLevel() const;
	void KeyProtectionLevel(Windows::Security::Cryptography::Certificates::KeyProtectionLevel value) const;
	hstring KeyStorageProviderName() const;
	void KeyStorageProviderName(hstring_ref value) const;
};

template <typename T>
class impl_ICertificateRequestProperties2
{
	auto shim() const { return impl::shim<T, ICertificateRequestProperties2>(this); }

public:

	hstring SmartcardReaderName() const;
	void SmartcardReaderName(hstring_ref value) const;
	Windows::Security::Cryptography::Certificates::Certificate SigningCertificate() const;
	void SigningCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const;
	Windows::Security::Cryptography::Certificates::Certificate AttestationCredentialCertificate() const;
	void AttestationCredentialCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const;
};

template <typename T>
class impl_ICertificateRequestProperties3
{
	auto shim() const { return impl::shim<T, ICertificateRequestProperties3>(this); }

public:

	hstring CurveName() const;
	void CurveName(hstring_ref value) const;
	hstring ContainerNamePrefix() const;
	void ContainerNamePrefix(hstring_ref value) const;
	hstring ContainerName() const;
	void ContainerName(hstring_ref value) const;
	bool UseExistingKey() const;
	void UseExistingKey(bool value) const;
};

template <typename T>
class impl_ICertificateEnrollmentManagerStatics
{
	auto shim() const { return impl::shim<T, ICertificateEnrollmentManagerStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<hstring> CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request) const;
	Windows::Foundation::IAsyncAction InstallCertificateAsync(hstring_ref certificate, Windows::Security::Cryptography::Certificates::InstallOptions installOption) const;
	Windows::Foundation::IAsyncAction ImportPfxDataAsync(hstring_ref pfxData, hstring_ref password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, hstring_ref friendlyName) const;
};

template <typename T>
class impl_ICertificateEnrollmentManagerStatics2
{
	auto shim() const { return impl::shim<T, ICertificateEnrollmentManagerStatics2>(this); }

public:

	Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager UserCertificateEnrollmentManager() const;
	Windows::Foundation::IAsyncAction ImportPfxDataAsync(hstring_ref pfxData, hstring_ref password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, hstring_ref friendlyName, hstring_ref keyStorageProvider) const;
};

template <typename T>
class impl_ICertificateEnrollmentManagerStatics3
{
	auto shim() const { return impl::shim<T, ICertificateEnrollmentManagerStatics3>(this); }

public:

	Windows::Foundation::IAsyncAction ImportPfxDataAsync(hstring_ref pfxData, hstring_ref password, Windows::Security::Cryptography::Certificates::PfxImportParameters const & pfxImportParameters) const;
};

template <typename T>
class impl_IKeyAttestationHelperStatics
{
	auto shim() const { return impl::shim<T, IKeyAttestationHelperStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<hstring> DecryptTpmAttestationCredentialAsync(hstring_ref credential) const;
	hstring GetTpmAttestationCredentialId(hstring_ref credential) const;
};

template <typename T>
class impl_IKeyAttestationHelperStatics2
{
	auto shim() const { return impl::shim<T, IKeyAttestationHelperStatics2>(this); }

public:

	Windows::Foundation::IAsyncOperation<hstring> DecryptTpmAttestationCredentialAsync(hstring_ref credential, hstring_ref containerName) const;
};

template <typename T>
class impl_ICertificateStoresStatics
{
	auto shim() const { return impl::shim<T, ICertificateStoresStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> FindAllAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> FindAllAsync(Windows::Security::Cryptography::Certificates::CertificateQuery const & query) const;
	Windows::Security::Cryptography::Certificates::CertificateStore TrustedRootCertificationAuthorities() const;
	Windows::Security::Cryptography::Certificates::CertificateStore IntermediateCertificationAuthorities() const;
	Windows::Security::Cryptography::Certificates::CertificateStore GetStoreByName(hstring_ref storeName) const;
};

template <typename T>
class impl_IUserCertificateEnrollmentManager
{
	auto shim() const { return impl::shim<T, IUserCertificateEnrollmentManager>(this); }

public:

	Windows::Foundation::IAsyncOperation<hstring> CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request) const;
	Windows::Foundation::IAsyncAction InstallCertificateAsync(hstring_ref certificate, Windows::Security::Cryptography::Certificates::InstallOptions installOption) const;
	Windows::Foundation::IAsyncAction ImportPfxDataAsync(hstring_ref pfxData, hstring_ref password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, hstring_ref friendlyName) const;
	Windows::Foundation::IAsyncAction ImportPfxDataAsync(hstring_ref pfxData, hstring_ref password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, hstring_ref friendlyName, hstring_ref keyStorageProvider) const;
};

template <typename T>
class impl_IUserCertificateEnrollmentManager2
{
	auto shim() const { return impl::shim<T, IUserCertificateEnrollmentManager2>(this); }

public:

	Windows::Foundation::IAsyncAction ImportPfxDataAsync(hstring_ref pfxData, hstring_ref password, Windows::Security::Cryptography::Certificates::PfxImportParameters const & pfxImportParameters) const;
};

template <typename T>
class impl_ICertificateStore
{
	auto shim() const { return impl::shim<T, ICertificateStore>(this); }

public:

	void Add(Windows::Security::Cryptography::Certificates::Certificate const & certificate) const;
	void Delete(Windows::Security::Cryptography::Certificates::Certificate const & certificate) const;
};

template <typename T>
class impl_ICertificateStore2
{
	auto shim() const { return impl::shim<T, ICertificateStore2>(this); }

public:

	hstring Name() const;
};

template <typename T>
class impl_IKeyAlgorithmNamesStatics
{
	auto shim() const { return impl::shim<T, IKeyAlgorithmNamesStatics>(this); }

public:

	hstring Rsa() const;
	hstring Dsa() const;
	hstring Ecdh256() const;
	hstring Ecdh384() const;
	hstring Ecdh521() const;
	hstring Ecdsa256() const;
	hstring Ecdsa384() const;
	hstring Ecdsa521() const;
};

template <typename T>
class impl_IKeyAlgorithmNamesStatics2
{
	auto shim() const { return impl::shim<T, IKeyAlgorithmNamesStatics2>(this); }

public:

	hstring Ecdsa() const;
	hstring Ecdh() const;
};

template <typename T>
class impl_IKeyStorageProviderNamesStatics
{
	auto shim() const { return impl::shim<T, IKeyStorageProviderNamesStatics>(this); }

public:

	hstring SoftwareKeyStorageProvider() const;
	hstring SmartcardKeyStorageProvider() const;
	hstring PlatformKeyStorageProvider() const;
};

template <typename T>
class impl_IKeyStorageProviderNamesStatics2
{
	auto shim() const { return impl::shim<T, IKeyStorageProviderNamesStatics2>(this); }

public:

	hstring PassportKeyStorageProvider() const;
};

template <typename T>
class impl_IChainBuildingParameters
{
	auto shim() const { return impl::shim<T, IChainBuildingParameters>(this); }

public:

	Windows::Foundation::Collections::IVector<hstring> EnhancedKeyUsages() const;
	Windows::Foundation::DateTime ValidationTimestamp() const;
	void ValidationTimestamp(Windows::Foundation::DateTime const & value) const;
	bool RevocationCheckEnabled() const;
	void RevocationCheckEnabled(bool value) const;
	bool NetworkRetrievalEnabled() const;
	void NetworkRetrievalEnabled(bool value) const;
	bool AuthorityInformationAccessEnabled() const;
	void AuthorityInformationAccessEnabled(bool value) const;
	bool CurrentTimeValidationEnabled() const;
	void CurrentTimeValidationEnabled(bool value) const;
	Windows::Foundation::Collections::IVector<Windows::Security::Cryptography::Certificates::Certificate> ExclusiveTrustRoots() const;
};

template <typename T>
class impl_IChainValidationParameters
{
	auto shim() const { return impl::shim<T, IChainValidationParameters>(this); }

public:

	Windows::Security::Cryptography::Certificates::CertificateChainPolicy CertificateChainPolicy() const;
	void CertificateChainPolicy(Windows::Security::Cryptography::Certificates::CertificateChainPolicy value) const;
	Windows::Networking::HostName ServerDnsName() const;
	void ServerDnsName(Windows::Networking::HostName const & value) const;
};

template <typename T>
class impl_ICertificateQuery
{
	auto shim() const { return impl::shim<T, ICertificateQuery>(this); }

public:

	Windows::Foundation::Collections::IVector<hstring> EnhancedKeyUsages() const;
	hstring IssuerName() const;
	void IssuerName(hstring_ref value) const;
	hstring FriendlyName() const;
	void FriendlyName(hstring_ref value) const;
	bool HardwareOnly() const;
	void HardwareOnly(bool value) const;
};

template <typename T>
class impl_ICertificateQuery2
{
	auto shim() const { return impl::shim<T, ICertificateQuery2>(this); }

public:

	bool IncludeDuplicates() const;
	void IncludeDuplicates(bool value) const;
	bool IncludeExpiredCertificates() const;
	void IncludeExpiredCertificates(bool value) const;
	hstring StoreName() const;
	void StoreName(hstring_ref value) const;
};

template <typename T>
class impl_ICertificateChain
{
	auto shim() const { return impl::shim<T, ICertificateChain>(this); }

public:

	Windows::Security::Cryptography::Certificates::ChainValidationResult Validate() const;
	Windows::Security::Cryptography::Certificates::ChainValidationResult Validate(Windows::Security::Cryptography::Certificates::ChainValidationParameters const & parameter) const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> GetCertificates(bool includeRoot) const;
};

template <typename T>
class impl_ICertificate
{
	auto shim() const { return impl::shim<T, ICertificate>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> BuildChainAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> BuildChainAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates, Windows::Security::Cryptography::Certificates::ChainBuildingParameters const & parameters) const;
	Windows::Storage::Streams::IBuffer GetCertificateBlob() const;
	hstring Subject() const;
	hstring Issuer() const;
	bool HasPrivateKey() const;
	bool IsStronglyProtected() const;
	Windows::Foundation::DateTime ValidFrom() const;
	Windows::Foundation::DateTime ValidTo() const;
	Windows::Foundation::Collections::IVectorView<hstring> EnhancedKeyUsages() const;
	void FriendlyName(hstring_ref value) const;
	hstring FriendlyName() const;
};

template <typename T>
class impl_ICertificate2
{
	auto shim() const { return impl::shim<T, ICertificate2>(this); }

public:

	bool IsSecurityDeviceBound() const;
	Windows::Security::Cryptography::Certificates::CertificateKeyUsages KeyUsages() const;
	hstring KeyAlgorithmName() const;
	hstring SignatureAlgorithmName() const;
	hstring SignatureHashAlgorithmName() const;
	Windows::Security::Cryptography::Certificates::SubjectAlternativeNameInfo SubjectAlternativeName() const;
};

template <typename T>
class impl_ICertificateFactory
{
	auto shim() const { return impl::shim<T, ICertificateFactory>(this); }

public:

	Windows::Security::Cryptography::Certificates::Certificate CreateCertificate(Windows::Storage::Streams::IBuffer const & certBlob) const;
};

template <typename T>
class impl_ICmsTimestampInfo
{
	auto shim() const { return impl::shim<T, ICmsTimestampInfo>(this); }

public:

	Windows::Security::Cryptography::Certificates::Certificate SigningCertificate() const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> Certificates() const;
	Windows::Foundation::DateTime Timestamp() const;
};

template <typename T>
class impl_ICmsSignerInfo
{
	auto shim() const { return impl::shim<T, ICmsSignerInfo>(this); }

public:

	Windows::Security::Cryptography::Certificates::Certificate Certificate() const;
	void Certificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const;
	hstring HashAlgorithmName() const;
	void HashAlgorithmName(hstring_ref value) const;
	Windows::Security::Cryptography::Certificates::CmsTimestampInfo TimestampInfo() const;
};

template <typename T>
class impl_ISubjectAlternativeNameInfo
{
	auto shim() const { return impl::shim<T, ISubjectAlternativeNameInfo>(this); }

public:

	Windows::Foundation::Collections::IVectorView<hstring> EmailName() const;
	Windows::Foundation::Collections::IVectorView<hstring> IPAddress() const;
	Windows::Foundation::Collections::IVectorView<hstring> Url() const;
	Windows::Foundation::Collections::IVectorView<hstring> DnsName() const;
	Windows::Foundation::Collections::IVectorView<hstring> DistinguishedName() const;
	Windows::Foundation::Collections::IVectorView<hstring> PrincipalName() const;
};

template <typename T>
class impl_IPfxImportParameters
{
	auto shim() const { return impl::shim<T, IPfxImportParameters>(this); }

public:

	Windows::Security::Cryptography::Certificates::ExportOption Exportable() const;
	void Exportable(Windows::Security::Cryptography::Certificates::ExportOption value) const;
	Windows::Security::Cryptography::Certificates::KeyProtectionLevel KeyProtectionLevel() const;
	void KeyProtectionLevel(Windows::Security::Cryptography::Certificates::KeyProtectionLevel value) const;
	Windows::Security::Cryptography::Certificates::InstallOptions InstallOptions() const;
	void InstallOptions(Windows::Security::Cryptography::Certificates::InstallOptions value) const;
	hstring FriendlyName() const;
	void FriendlyName(hstring_ref value) const;
	hstring KeyStorageProviderName() const;
	void KeyStorageProviderName(hstring_ref value) const;
	hstring ContainerNamePrefix() const;
	void ContainerNamePrefix(hstring_ref value) const;
	hstring ReaderName() const;
	void ReaderName(hstring_ref value) const;
};

template <typename T>
class impl_ICertificateKeyUsages
{
	auto shim() const { return impl::shim<T, ICertificateKeyUsages>(this); }

public:

	bool EncipherOnly() const;
	void EncipherOnly(bool value) const;
	bool CrlSign() const;
	void CrlSign(bool value) const;
	bool KeyCertificateSign() const;
	void KeyCertificateSign(bool value) const;
	bool KeyAgreement() const;
	void KeyAgreement(bool value) const;
	bool DataEncipherment() const;
	void DataEncipherment(bool value) const;
	bool KeyEncipherment() const;
	void KeyEncipherment(bool value) const;
	bool NonRepudiation() const;
	void NonRepudiation(bool value) const;
	bool DigitalSignature() const;
	void DigitalSignature(bool value) const;
};

template <typename T>
class impl_ICmsAttachedSignature
{
	auto shim() const { return impl::shim<T, ICmsAttachedSignature>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> Certificates() const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> Signers() const;
	Windows::Security::Cryptography::Certificates::SignatureValidationResult VerifySignature() const;
};

template <typename T>
class impl_ICmsAttachedSignatureFactory
{
	auto shim() const { return impl::shim<T, ICmsAttachedSignatureFactory>(this); }

public:

	Windows::Security::Cryptography::Certificates::CmsAttachedSignature CreateCmsAttachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) const;
};

template <typename T>
class impl_ICmsAttachedSignatureStatics
{
	auto shim() const { return impl::shim<T, ICmsAttachedSignatureStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> GenerateSignatureAsync(Windows::Storage::Streams::IBuffer const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const;
};

template <typename T>
class impl_ICmsDetachedSignature
{
	auto shim() const { return impl::shim<T, ICmsDetachedSignature>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> Certificates() const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> Signers() const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::Cryptography::Certificates::SignatureValidationResult> VerifySignatureAsync(Windows::Storage::Streams::IInputStream const & data) const;
};

template <typename T>
class impl_ICmsDetachedSignatureFactory
{
	auto shim() const { return impl::shim<T, ICmsDetachedSignatureFactory>(this); }

public:

	Windows::Security::Cryptography::Certificates::CmsDetachedSignature CreateCmsDetachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) const;
};

template <typename T>
class impl_ICmsDetachedSignatureStatics
{
	auto shim() const { return impl::shim<T, ICmsDetachedSignatureStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> GenerateSignatureAsync(Windows::Storage::Streams::IInputStream const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const;
};

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

template <typename T>
class impl_IKeyDerivationParameters
{
	auto shim() const { return impl::shim<T, IKeyDerivationParameters>(this); }

public:

	Windows::Storage::Streams::IBuffer KdfGenericBinary() const;
	void KdfGenericBinary(Windows::Storage::Streams::IBuffer const & value) const;
	unsigned IterationCount() const;
};

template <typename T>
class impl_IKeyDerivationParameters2
{
	auto shim() const { return impl::shim<T, IKeyDerivationParameters2>(this); }

public:

	Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm Capi1KdfTargetAlgorithm() const;
	void Capi1KdfTargetAlgorithm(Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm value) const;
};

template <typename T>
class impl_IKeyDerivationParametersStatics
{
	auto shim() const { return impl::shim<T, IKeyDerivationParametersStatics>(this); }

public:

	Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForPbkdf2(Windows::Storage::Streams::IBuffer const & pbkdf2Salt, unsigned iterationCount) const;
	Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForSP800108(Windows::Storage::Streams::IBuffer const & label, Windows::Storage::Streams::IBuffer const & context) const;
	Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForSP80056a(Windows::Storage::Streams::IBuffer const & algorithmId, Windows::Storage::Streams::IBuffer const & partyUInfo, Windows::Storage::Streams::IBuffer const & partyVInfo, Windows::Storage::Streams::IBuffer const & suppPubInfo, Windows::Storage::Streams::IBuffer const & suppPrivInfo) const;
};

template <typename T>
class impl_IKeyDerivationParametersStatics2
{
	auto shim() const { return impl::shim<T, IKeyDerivationParametersStatics2>(this); }

public:

	Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForCapi1Kdf(Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm capi1KdfTargetAlgorithm) const;
};

template <typename T>
class impl_ICryptographicKey
{
	auto shim() const { return impl::shim<T, ICryptographicKey>(this); }

public:

	unsigned KeySize() const;
	Windows::Storage::Streams::IBuffer Export() const;
	Windows::Storage::Streams::IBuffer Export(Windows::Security::Cryptography::Core::CryptographicPrivateKeyBlobType BlobType) const;
	Windows::Storage::Streams::IBuffer ExportPublicKey() const;
	Windows::Storage::Streams::IBuffer ExportPublicKey(Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType BlobType) const;
};

template <typename T>
class impl_IHashComputation
{
	auto shim() const { return impl::shim<T, IHashComputation>(this); }

public:

	void Append(Windows::Storage::Streams::IBuffer const & data) const;
	Windows::Storage::Streams::IBuffer GetValueAndReset() const;
};

template <typename T>
class impl_IHashAlgorithmProvider
{
	auto shim() const { return impl::shim<T, IHashAlgorithmProvider>(this); }

public:

	hstring AlgorithmName() const;
	unsigned HashLength() const;
	Windows::Storage::Streams::IBuffer HashData(Windows::Storage::Streams::IBuffer const & data) const;
	Windows::Security::Cryptography::Core::CryptographicHash CreateHash() const;
};

template <typename T>
class impl_IMacAlgorithmProvider
{
	auto shim() const { return impl::shim<T, IMacAlgorithmProvider>(this); }

public:

	hstring AlgorithmName() const;
	unsigned MacLength() const;
	Windows::Security::Cryptography::Core::CryptographicKey CreateKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const;
};

template <typename T>
class impl_IMacAlgorithmProvider2
{
	auto shim() const { return impl::shim<T, IMacAlgorithmProvider2>(this); }

public:

	Windows::Security::Cryptography::Core::CryptographicHash CreateHash(Windows::Storage::Streams::IBuffer const & keyMaterial) const;
};

template <typename T>
class impl_IKeyDerivationAlgorithmProvider
{
	auto shim() const { return impl::shim<T, IKeyDerivationAlgorithmProvider>(this); }

public:

	hstring AlgorithmName() const;
	Windows::Security::Cryptography::Core::CryptographicKey CreateKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const;
};

template <typename T>
class impl_ISymmetricKeyAlgorithmProvider
{
	auto shim() const { return impl::shim<T, ISymmetricKeyAlgorithmProvider>(this); }

public:

	hstring AlgorithmName() const;
	unsigned BlockLength() const;
	Windows::Security::Cryptography::Core::CryptographicKey CreateSymmetricKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const;
};

template <typename T>
class impl_IAsymmetricKeyAlgorithmProvider
{
	auto shim() const { return impl::shim<T, IAsymmetricKeyAlgorithmProvider>(this); }

public:

	hstring AlgorithmName() const;
	Windows::Security::Cryptography::Core::CryptographicKey CreateKeyPair(unsigned keySize) const;
	Windows::Security::Cryptography::Core::CryptographicKey ImportKeyPair(Windows::Storage::Streams::IBuffer const & keyBlob) const;
	Windows::Security::Cryptography::Core::CryptographicKey ImportKeyPair(Windows::Storage::Streams::IBuffer const & keyBlob, Windows::Security::Cryptography::Core::CryptographicPrivateKeyBlobType BlobType) const;
	Windows::Security::Cryptography::Core::CryptographicKey ImportPublicKey(Windows::Storage::Streams::IBuffer const & keyBlob) const;
	Windows::Security::Cryptography::Core::CryptographicKey ImportPublicKey(Windows::Storage::Streams::IBuffer const & keyBlob, Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType BlobType) const;
};

template <typename T>
class impl_IAsymmetricKeyAlgorithmProvider2
{
	auto shim() const { return impl::shim<T, IAsymmetricKeyAlgorithmProvider2>(this); }

public:

	Windows::Security::Cryptography::Core::CryptographicKey CreateKeyPairWithCurveName(hstring_ref curveName) const;
};

template <typename T>
class impl_IPersistedKeyProviderStatics
{
	auto shim() const { return impl::shim<T, IPersistedKeyProviderStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, hstring_ref hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding padding) const;
	Windows::Security::Cryptography::Core::CryptographicKey OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, hstring_ref hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding padding) const;
};

template <typename T>
class impl_IEncryptedAndAuthenticatedData
{
	auto shim() const { return impl::shim<T, IEncryptedAndAuthenticatedData>(this); }

public:

	Windows::Storage::Streams::IBuffer EncryptedData() const;
	Windows::Storage::Streams::IBuffer AuthenticationTag() const;
};

template <typename T>
class impl_ICryptographicEngineStatics
{
	auto shim() const { return impl::shim<T, ICryptographicEngineStatics>(this); }

public:

	Windows::Storage::Streams::IBuffer Encrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const;
	Windows::Storage::Streams::IBuffer Decrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const;
	Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData EncryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticatedData) const;
	Windows::Storage::Streams::IBuffer DecryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticationTag, Windows::Storage::Streams::IBuffer const & authenticatedData) const;
	Windows::Storage::Streams::IBuffer Sign(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const;
	bool VerifySignature(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature) const;
	Windows::Storage::Streams::IBuffer DeriveKeyMaterial(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Security::Cryptography::Core::KeyDerivationParameters const & parameters, unsigned desiredKeySize) const;
};

template <typename T>
class impl_ICryptographicEngineStatics2
{
	auto shim() const { return impl::shim<T, ICryptographicEngineStatics2>(this); }

public:

	Windows::Storage::Streams::IBuffer SignHashedData(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const;
	bool VerifySignatureWithHashInput(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> DecryptAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> SignAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> SignHashedDataAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const;
};

template <typename T>
class impl_IHashAlgorithmProviderStatics
{
	auto shim() const { return impl::shim<T, IHashAlgorithmProviderStatics>(this); }

public:

	Windows::Security::Cryptography::Core::HashAlgorithmProvider OpenAlgorithm(hstring_ref algorithm) const;
};

template <typename T>
class impl_IMacAlgorithmProviderStatics
{
	auto shim() const { return impl::shim<T, IMacAlgorithmProviderStatics>(this); }

public:

	Windows::Security::Cryptography::Core::MacAlgorithmProvider OpenAlgorithm(hstring_ref algorithm) const;
};

template <typename T>
class impl_IKeyDerivationAlgorithmProviderStatics
{
	auto shim() const { return impl::shim<T, IKeyDerivationAlgorithmProviderStatics>(this); }

public:

	Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider OpenAlgorithm(hstring_ref algorithm) const;
};

template <typename T>
class impl_ISymmetricKeyAlgorithmProviderStatics
{
	auto shim() const { return impl::shim<T, ISymmetricKeyAlgorithmProviderStatics>(this); }

public:

	Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider OpenAlgorithm(hstring_ref algorithm) const;
};

template <typename T>
class impl_IAsymmetricKeyAlgorithmProviderStatics
{
	auto shim() const { return impl::shim<T, IAsymmetricKeyAlgorithmProviderStatics>(this); }

public:

	Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider OpenAlgorithm(hstring_ref algorithm) const;
};

template <typename T>
class impl_IHashAlgorithmNamesStatics
{
	auto shim() const { return impl::shim<T, IHashAlgorithmNamesStatics>(this); }

public:

	hstring Md5() const;
	hstring Sha1() const;
	hstring Sha256() const;
	hstring Sha384() const;
	hstring Sha512() const;
};

template <typename T>
class impl_IMacAlgorithmNamesStatics
{
	auto shim() const { return impl::shim<T, IMacAlgorithmNamesStatics>(this); }

public:

	hstring HmacMd5() const;
	hstring HmacSha1() const;
	hstring HmacSha256() const;
	hstring HmacSha384() const;
	hstring HmacSha512() const;
	hstring AesCmac() const;
};

template <typename T>
class impl_ISymmetricAlgorithmNamesStatics
{
	auto shim() const { return impl::shim<T, ISymmetricAlgorithmNamesStatics>(this); }

public:

	hstring DesCbc() const;
	hstring DesEcb() const;
	hstring TripleDesCbc() const;
	hstring TripleDesEcb() const;
	hstring Rc2Cbc() const;
	hstring Rc2Ecb() const;
	hstring AesCbc() const;
	hstring AesEcb() const;
	hstring AesGcm() const;
	hstring AesCcm() const;
	hstring AesCbcPkcs7() const;
	hstring AesEcbPkcs7() const;
	hstring DesCbcPkcs7() const;
	hstring DesEcbPkcs7() const;
	hstring TripleDesCbcPkcs7() const;
	hstring TripleDesEcbPkcs7() const;
	hstring Rc2CbcPkcs7() const;
	hstring Rc2EcbPkcs7() const;
	hstring Rc4() const;
};

template <typename T>
class impl_IAsymmetricAlgorithmNamesStatics
{
	auto shim() const { return impl::shim<T, IAsymmetricAlgorithmNamesStatics>(this); }

public:

	hstring RsaPkcs1() const;
	hstring RsaOaepSha1() const;
	hstring RsaOaepSha256() const;
	hstring RsaOaepSha384() const;
	hstring RsaOaepSha512() const;
	hstring EcdsaP256Sha256() const;
	hstring EcdsaP384Sha384() const;
	hstring EcdsaP521Sha512() const;
	hstring DsaSha1() const;
	hstring DsaSha256() const;
	hstring RsaSignPkcs1Sha1() const;
	hstring RsaSignPkcs1Sha256() const;
	hstring RsaSignPkcs1Sha384() const;
	hstring RsaSignPkcs1Sha512() const;
	hstring RsaSignPssSha1() const;
	hstring RsaSignPssSha256() const;
	hstring RsaSignPssSha384() const;
	hstring RsaSignPssSha512() const;
};

template <typename T>
class impl_IAsymmetricAlgorithmNamesStatics2
{
	auto shim() const { return impl::shim<T, IAsymmetricAlgorithmNamesStatics2>(this); }

public:

	hstring EcdsaSha256() const;
	hstring EcdsaSha384() const;
	hstring EcdsaSha512() const;
};

template <typename T>
class impl_IEccCurveNamesStatics
{
	auto shim() const { return impl::shim<T, IEccCurveNamesStatics>(this); }

public:

	hstring BrainpoolP160r1() const;
	hstring BrainpoolP160t1() const;
	hstring BrainpoolP192r1() const;
	hstring BrainpoolP192t1() const;
	hstring BrainpoolP224r1() const;
	hstring BrainpoolP224t1() const;
	hstring BrainpoolP256r1() const;
	hstring BrainpoolP256t1() const;
	hstring BrainpoolP320r1() const;
	hstring BrainpoolP320t1() const;
	hstring BrainpoolP384r1() const;
	hstring BrainpoolP384t1() const;
	hstring BrainpoolP512r1() const;
	hstring BrainpoolP512t1() const;
	hstring Curve25519() const;
	hstring Ec192wapi() const;
	hstring NistP192() const;
	hstring NistP224() const;
	hstring NistP256() const;
	hstring NistP384() const;
	hstring NistP521() const;
	hstring NumsP256t1() const;
	hstring NumsP384t1() const;
	hstring NumsP512t1() const;
	hstring SecP160k1() const;
	hstring SecP160r1() const;
	hstring SecP160r2() const;
	hstring SecP192k1() const;
	hstring SecP192r1() const;
	hstring SecP224k1() const;
	hstring SecP224r1() const;
	hstring SecP256k1() const;
	hstring SecP256r1() const;
	hstring SecP384r1() const;
	hstring SecP521r1() const;
	hstring Wtls7() const;
	hstring Wtls9() const;
	hstring Wtls12() const;
	hstring X962P192v1() const;
	hstring X962P192v2() const;
	hstring X962P192v3() const;
	hstring X962P239v1() const;
	hstring X962P239v2() const;
	hstring X962P239v3() const;
	hstring X962P256v1() const;
	Windows::Foundation::Collections::IVectorView<hstring> AllEccCurveNames() const;
};

template <typename T>
class impl_IKeyDerivationAlgorithmNamesStatics
{
	auto shim() const { return impl::shim<T, IKeyDerivationAlgorithmNamesStatics>(this); }

public:

	hstring Pbkdf2Md5() const;
	hstring Pbkdf2Sha1() const;
	hstring Pbkdf2Sha256() const;
	hstring Pbkdf2Sha384() const;
	hstring Pbkdf2Sha512() const;
	hstring Sp800108CtrHmacMd5() const;
	hstring Sp800108CtrHmacSha1() const;
	hstring Sp800108CtrHmacSha256() const;
	hstring Sp800108CtrHmacSha384() const;
	hstring Sp800108CtrHmacSha512() const;
	hstring Sp80056aConcatMd5() const;
	hstring Sp80056aConcatSha1() const;
	hstring Sp80056aConcatSha256() const;
	hstring Sp80056aConcatSha384() const;
	hstring Sp80056aConcatSha512() const;
};

template <typename T>
class impl_IKeyDerivationAlgorithmNamesStatics2
{
	auto shim() const { return impl::shim<T, IKeyDerivationAlgorithmNamesStatics2>(this); }

public:

	hstring CapiKdfMd5() const;
	hstring CapiKdfSha1() const;
	hstring CapiKdfSha256() const;
	hstring CapiKdfSha384() const;
	hstring CapiKdfSha512() const;
};

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace EnterpriseData {

template <typename T>
class impl_IFileRevocationManagerStatics
{
	auto shim() const { return impl::shim<T, IFileRevocationManagerStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::FileProtectionStatus> ProtectAsync(Windows::Storage::IStorageItem const & storageItem, hstring_ref enterpriseIdentity) const;
	Windows::Foundation::IAsyncOperation<bool> CopyProtectionAsync(Windows::Storage::IStorageItem const & sourceStorageItem, Windows::Storage::IStorageItem const & targetStorageItem) const;
	void Revoke(hstring_ref enterpriseIdentity) const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::FileProtectionStatus> GetStatusAsync(Windows::Storage::IStorageItem const & storageItem) const;
};

template <typename T>
class impl_IFileProtectionManagerStatics
{
	auto shim() const { return impl::shim<T, IFileProtectionManagerStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::FileProtectionInfo> ProtectAsync(Windows::Storage::IStorageItem const & target, hstring_ref identity) const;
	Windows::Foundation::IAsyncOperation<bool> CopyProtectionAsync(Windows::Storage::IStorageItem const & source, Windows::Storage::IStorageItem const & target) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::FileProtectionInfo> GetProtectionInfoAsync(Windows::Storage::IStorageItem const & source) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerExportResult> SaveFileAsContainerAsync(Windows::Storage::IStorageFile const & protectedFile) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile, Windows::Storage::IStorageItem const & target) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedFileCreateResult> CreateProtectedAndOpenAsync(Windows::Storage::IStorageFolder const & parentFolder, hstring_ref desiredName, hstring_ref identity, Windows::Storage::CreationCollisionOption collisionOption) const;
};

template <typename T>
class impl_IFileProtectionManagerStatics2
{
	auto shim() const { return impl::shim<T, IFileProtectionManagerStatics2>(this); }

public:

	Windows::Foundation::IAsyncOperation<bool> IsContainerAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile, Windows::Storage::IStorageItem const & target, Windows::Storage::NameCollisionOption collisionOption) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerExportResult> SaveFileAsContainerAsync(Windows::Storage::IStorageFile const & protectedFile, Windows::Foundation::Collections::IIterable<hstring> const & sharedWithIdentities) const;
};

template <typename T>
class impl_IProtectedFileCreateResult
{
	auto shim() const { return impl::shim<T, IProtectedFileCreateResult>(this); }

public:

	Windows::Storage::StorageFile File() const;
	Windows::Storage::Streams::IRandomAccessStream Stream() const;
	Windows::Security::EnterpriseData::FileProtectionInfo ProtectionInfo() const;
};

template <typename T>
class impl_IFileProtectionInfo
{
	auto shim() const { return impl::shim<T, IFileProtectionInfo>(this); }

public:

	Windows::Security::EnterpriseData::FileProtectionStatus Status() const;
	bool IsRoamable() const;
	hstring Identity() const;
};

template <typename T>
class impl_IProtectedContainerExportResult
{
	auto shim() const { return impl::shim<T, IProtectedContainerExportResult>(this); }

public:

	Windows::Security::EnterpriseData::ProtectedImportExportStatus Status() const;
	Windows::Storage::StorageFile File() const;
};

template <typename T>
class impl_IProtectedContainerImportResult
{
	auto shim() const { return impl::shim<T, IProtectedContainerImportResult>(this); }

public:

	Windows::Security::EnterpriseData::ProtectedImportExportStatus Status() const;
	Windows::Storage::StorageFile File() const;
};

template <typename T>
class impl_IDataProtectionManagerStatics
{
	auto shim() const { return impl::shim<T, IDataProtectionManagerStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::BufferProtectUnprotectResult> ProtectAsync(Windows::Storage::Streams::IBuffer const & data, hstring_ref identity) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::BufferProtectUnprotectResult> UnprotectAsync(Windows::Storage::Streams::IBuffer const & data) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> ProtectStreamAsync(Windows::Storage::Streams::IInputStream const & unprotectedStream, hstring_ref identity, Windows::Storage::Streams::IOutputStream const & protectedStream) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> UnprotectStreamAsync(Windows::Storage::Streams::IInputStream const & protectedStream, Windows::Storage::Streams::IOutputStream const & unprotectedStream) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> GetProtectionInfoAsync(Windows::Storage::Streams::IBuffer const & protectedData) const;
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> GetStreamProtectionInfoAsync(Windows::Storage::Streams::IInputStream const & protectedStream) const;
};

template <typename T>
class impl_IDataProtectionInfo
{
	auto shim() const { return impl::shim<T, IDataProtectionInfo>(this); }

public:

	Windows::Security::EnterpriseData::DataProtectionStatus Status() const;
	hstring Identity() const;
};

template <typename T>
class impl_IBufferProtectUnprotectResult
{
	auto shim() const { return impl::shim<T, IBufferProtectUnprotectResult>(this); }

public:

	Windows::Storage::Streams::IBuffer Buffer() const;
	Windows::Security::EnterpriseData::DataProtectionInfo ProtectionInfo() const;
};

template <typename T>
class impl_IProtectionPolicyManager
{
	auto shim() const { return impl::shim<T, IProtectionPolicyManager>(this); }

public:

	void Identity(hstring_ref value) const;
	hstring Identity() const;
};

template <typename T>
class impl_IProtectionPolicyManagerStatics
{
	auto shim() const { return impl::shim<T, IProtectionPolicyManagerStatics>(this); }

public:

	bool IsIdentityManaged(hstring_ref identity) const;
	bool TryApplyProcessUIPolicy(hstring_ref identity) const;
	void ClearProcessUIPolicy() const;
	Windows::Security::EnterpriseData::ThreadNetworkContext CreateCurrentThreadNetworkContext(hstring_ref identity) const;
	Windows::Foundation::IAsyncOperation<hstring> GetPrimaryManagedIdentityForNetworkEndpointAsync(Windows::Networking::HostName const & endpointHost) const;
	void RevokeContent(hstring_ref identity) const;
	Windows::Security::EnterpriseData::ProtectionPolicyManager GetForCurrentView() const;
	long long ProtectedAccessSuspending(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs> const & handler) const;
	template <typename F> long long ProtectedAccessSuspending(F handler) const;
	void ProtectedAccessSuspending(long long token) const;
	long long ProtectedAccessResumed(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs> const & handler) const;
	template <typename F> long long ProtectedAccessResumed(F handler) const;
	void ProtectedAccessResumed(long long token) const;
	long long ProtectedContentRevoked(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs> const & handler) const;
	template <typename F> long long ProtectedContentRevoked(F handler) const;
	void ProtectedContentRevoked(long long token) const;
	Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult CheckAccess(hstring_ref sourceIdentity, hstring_ref targetIdentity) const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> RequestAccessAsync(hstring_ref sourceIdentity, hstring_ref targetIdentity) const;
};

template <typename T>
class impl_IProtectionPolicyManagerStatics2
{
	auto shim() const { return impl::shim<T, IProtectionPolicyManagerStatics2>(this); }

public:

	bool HasContentBeenRevokedSince(hstring_ref identity, Windows::Foundation::DateTime const & since) const;
	Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult CheckAccessForApp(hstring_ref sourceIdentity, hstring_ref appPackageFamilyName) const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> RequestAccessForAppAsync(hstring_ref sourceIdentity, hstring_ref appPackageFamilyName) const;
	Windows::Security::EnterpriseData::EnforcementLevel GetEnforcementLevel(hstring_ref identity) const;
	bool IsUserDecryptionAllowed(hstring_ref identity) const;
	bool IsProtectionUnderLockRequired(hstring_ref identity) const;
	long long PolicyChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const;
	template <typename F> long long PolicyChanged(F handler) const;
	void PolicyChanged(long long token) const;
	bool IsProtectionEnabled() const;
};

template <typename T>
class impl_IThreadNetworkContext
{
	auto shim() const { return impl::shim<T, IThreadNetworkContext>(this); }

public:

};

template <typename T>
class impl_IProtectedAccessSuspendingEventArgs
{
	auto shim() const { return impl::shim<T, IProtectedAccessSuspendingEventArgs>(this); }

public:

	Windows::Foundation::Collections::IVectorView<hstring> Identities() const;
	Windows::Foundation::DateTime Deadline() const;
	Windows::Foundation::Deferral GetDeferral() const;
};

template <typename T>
class impl_IProtectedAccessResumedEventArgs
{
	auto shim() const { return impl::shim<T, IProtectedAccessResumedEventArgs>(this); }

public:

	Windows::Foundation::Collections::IVectorView<hstring> Identities() const;
};

template <typename T>
class impl_IProtectedContentRevokedEventArgs
{
	auto shim() const { return impl::shim<T, IProtectedContentRevokedEventArgs>(this); }

public:

	Windows::Foundation::Collections::IVectorView<hstring> Identities() const;
};

}}}}

namespace winrt { namespace Windows { namespace Storage {

template <typename T>
class impl_IStreamedFileDataRequestedHandler
{
	auto shim() const { return impl::shim<T, IStreamedFileDataRequestedHandler>(this); }

public:

	void Invoke(Windows::Storage::StreamedFileDataRequest const & stream) const;
};

template <typename T>
class impl_IApplicationDataSetVersionHandler
{
	auto shim() const { return impl::shim<T, IApplicationDataSetVersionHandler>(this); }

public:

	void Invoke(Windows::Storage::SetVersionRequest const & setVersionRequest) const;
};

template <typename T>
class impl_IStorageLibraryStatics
{
	auto shim() const { return impl::shim<T, IStorageLibraryStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> GetLibraryAsync(Windows::Storage::KnownLibraryId libraryId) const;
};

template <typename T>
class impl_IStorageLibraryStatics2
{
	auto shim() const { return impl::shim<T, IStorageLibraryStatics2>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> GetLibraryForUserAsync(Windows::System::User const & user, Windows::Storage::KnownLibraryId libraryId) const;
};

template <typename T>
class impl_IStorageLibrary
{
	auto shim() const { return impl::shim<T, IStorageLibrary>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> RequestAddFolderAsync() const;
	Windows::Foundation::IAsyncOperation<bool> RequestRemoveFolderAsync(Windows::Storage::StorageFolder const & folder) const;
	Windows::Foundation::Collections::IObservableVector<Windows::Storage::StorageFolder> Folders() const;
	Windows::Storage::StorageFolder SaveFolder() const;
	long long DefinitionChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::StorageLibrary, IInspectable> const & handler) const;
	template <typename F> long long DefinitionChanged(F handler) const;
	void DefinitionChanged(long long eventCookie) const;
};

template <typename T>
class impl_IKnownFoldersStatics
{
	auto shim() const { return impl::shim<T, IKnownFoldersStatics>(this); }

public:

	Windows::Storage::StorageFolder MusicLibrary() const;
	Windows::Storage::StorageFolder PicturesLibrary() const;
	Windows::Storage::StorageFolder VideosLibrary() const;
	Windows::Storage::StorageFolder DocumentsLibrary() const;
	Windows::Storage::StorageFolder HomeGroup() const;
	Windows::Storage::StorageFolder RemovableDevices() const;
	Windows::Storage::StorageFolder MediaServerDevices() const;
};

template <typename T>
class impl_IKnownFoldersStatics2
{
	auto shim() const { return impl::shim<T, IKnownFoldersStatics2>(this); }

public:

	Windows::Storage::StorageFolder Objects3D() const;
	Windows::Storage::StorageFolder AppCaptures() const;
	Windows::Storage::StorageFolder RecordedCalls() const;
};

template <typename T>
class impl_IKnownFoldersStatics3
{
	auto shim() const { return impl::shim<T, IKnownFoldersStatics3>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderForUserAsync(Windows::System::User const & user, Windows::Storage::KnownFolderId folderId) const;
};

template <typename T>
class impl_IKnownFoldersPlaylistsStatics
{
	auto shim() const { return impl::shim<T, IKnownFoldersPlaylistsStatics>(this); }

public:

	Windows::Storage::StorageFolder Playlists() const;
};

template <typename T>
class impl_IKnownFoldersCameraRollStatics
{
	auto shim() const { return impl::shim<T, IKnownFoldersCameraRollStatics>(this); }

public:

	Windows::Storage::StorageFolder CameraRoll() const;
};

template <typename T>
class impl_IKnownFoldersSavedPicturesStatics
{
	auto shim() const { return impl::shim<T, IKnownFoldersSavedPicturesStatics>(this); }

public:

	Windows::Storage::StorageFolder SavedPictures() const;
};

template <typename T>
class impl_IDownloadsFolderStatics
{
	auto shim() const { return impl::shim<T, IDownloadsFolderStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(hstring_ref desiredName) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(hstring_ref desiredName) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(hstring_ref desiredName, Windows::Storage::CreationCollisionOption option) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(hstring_ref desiredName, Windows::Storage::CreationCollisionOption option) const;
};

template <typename T>
class impl_IDownloadsFolderStatics2
{
	auto shim() const { return impl::shim<T, IDownloadsFolderStatics2>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileForUserAsync(Windows::System::User const & user, hstring_ref desiredName) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderForUserAsync(Windows::System::User const & user, hstring_ref desiredName) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileForUserAsync(Windows::System::User const & user, hstring_ref desiredName, Windows::Storage::CreationCollisionOption option) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderForUserAsync(Windows::System::User const & user, hstring_ref desiredName, Windows::Storage::CreationCollisionOption option) const;
};

template <typename T>
class impl_IStreamedFileDataRequest
{
	auto shim() const { return impl::shim<T, IStreamedFileDataRequest>(this); }

public:

	void FailAndClose(Windows::Storage::StreamedFileFailureMode failureMode) const;
};

template <typename T>
class impl_IStorageFileStatics
{
	auto shim() const { return impl::shim<T, IStorageFileStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileFromPathAsync(hstring_ref path) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileFromApplicationUriAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(hstring_ref displayNameWithExtension, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(hstring_ref displayNameWithExtension, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileFromUriAsync(hstring_ref displayNameWithExtension, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileFromUriAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const;
};

template <typename T>
class impl_IStorageItem
{
	auto shim() const { return impl::shim<T, IStorageItem>(this); }

public:

	Windows::Foundation::IAsyncAction RenameAsync(hstring_ref desiredName) const;
	Windows::Foundation::IAsyncAction RenameAsync(hstring_ref desiredName, Windows::Storage::NameCollisionOption option) const;
	Windows::Foundation::IAsyncAction DeleteAsync() const;
	Windows::Foundation::IAsyncAction DeleteAsync(Windows::Storage::StorageDeleteOption option) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::BasicProperties> GetBasicPropertiesAsync() const;
	hstring Name() const;
	hstring Path() const;
	Windows::Storage::FileAttributes Attributes() const;
	Windows::Foundation::DateTime DateCreated() const;
	bool IsOfType(Windows::Storage::StorageItemTypes type) const;
};

template <typename T>
class impl_IStorageFolder
{
	auto shim() const { return impl::shim<T, IStorageFolder>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(hstring_ref desiredName) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(hstring_ref desiredName, Windows::Storage::CreationCollisionOption options) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(hstring_ref desiredName) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(hstring_ref desiredName, Windows::Storage::CreationCollisionOption options) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileAsync(hstring_ref name) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderAsync(hstring_ref name) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> GetItemAsync(hstring_ref name) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> GetFilesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> GetFoldersAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> GetItemsAsync() const;
};

template <typename T>
class impl_IStorageFile
{
	auto shim() const { return impl::shim<T, IStorageFile>(this); }

public:

	hstring FileType() const;
	hstring ContentType() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> OpenAsync(Windows::Storage::FileAccessMode accessMode) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageStreamTransaction> OpenTransactedWriteAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, hstring_ref desiredNewName) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, hstring_ref desiredNewName, Windows::Storage::NameCollisionOption option) const;
	Windows::Foundation::IAsyncAction CopyAndReplaceAsync(Windows::Storage::IStorageFile const & fileToReplace) const;
	Windows::Foundation::IAsyncAction MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder) const;
	Windows::Foundation::IAsyncAction MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, hstring_ref desiredNewName) const;
	Windows::Foundation::IAsyncAction MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, hstring_ref desiredNewName, Windows::Storage::NameCollisionOption option) const;
	Windows::Foundation::IAsyncAction MoveAndReplaceAsync(Windows::Storage::IStorageFile const & fileToReplace) const;
};

template <typename T>
class impl_IStorageFolderStatics
{
	auto shim() const { return impl::shim<T, IStorageFolderStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderFromPathAsync(hstring_ref path) const;
};

template <typename T>
class impl_IStorageItem2
{
	auto shim() const { return impl::shim<T, IStorageItem2>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetParentAsync() const;
	bool IsEqual(Windows::Storage::IStorageItem const & item) const;
};

template <typename T>
class impl_IStorageItemProperties
{
	auto shim() const { return impl::shim<T, IStorageItemProperties>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedSize) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedSize, Windows::Storage::FileProperties::ThumbnailOptions options) const;
	hstring DisplayName() const;
	hstring DisplayType() const;
	hstring FolderRelativeId() const;
	Windows::Storage::FileProperties::StorageItemContentProperties Properties() const;
};

template <typename T>
class impl_IStorageItemProperties2
{
	auto shim() const { return impl::shim<T, IStorageItemProperties2>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedSize) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedSize, Windows::Storage::FileProperties::ThumbnailOptions options) const;
};

template <typename T>
class impl_IStorageItemPropertiesWithProvider
{
	auto shim() const { return impl::shim<T, IStorageItemPropertiesWithProvider>(this); }

public:

	Windows::Storage::StorageProvider Provider() const;
};

template <typename T>
class impl_IStorageFilePropertiesWithAvailability
{
	auto shim() const { return impl::shim<T, IStorageFilePropertiesWithAvailability>(this); }

public:

	bool IsAvailable() const;
};

template <typename T>
class impl_IStorageProvider
{
	auto shim() const { return impl::shim<T, IStorageProvider>(this); }

public:

	hstring Id() const;
	hstring DisplayName() const;
};

template <typename T>
class impl_IStorageFolder2
{
	auto shim() const { return impl::shim<T, IStorageFolder2>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> TryGetItemAsync(hstring_ref name) const;
};

template <typename T>
class impl_IStorageFile2
{
	auto shim() const { return impl::shim<T, IStorageFile2>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> OpenAsync(Windows::Storage::FileAccessMode accessMode, Windows::Storage::StorageOpenOptions options) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageStreamTransaction> OpenTransactedWriteAsync(Windows::Storage::StorageOpenOptions options) const;
};

template <typename T>
class impl_IFileIOStatics
{
	auto shim() const { return impl::shim<T, IFileIOStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<hstring> ReadTextAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<hstring> ReadTextAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, hstring_ref contents) const;
	Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, hstring_ref contents, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, hstring_ref contents) const;
	Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, hstring_ref contents, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<hstring>> ReadLinesAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<hstring>> ReadLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<hstring> const & lines) const;
	Windows::Foundation::IAsyncAction WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<hstring> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<hstring> const & lines) const;
	Windows::Foundation::IAsyncAction AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<hstring> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ReadBufferAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncAction WriteBufferAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::IBuffer const & buffer) const;
};

template <typename T>
class impl_IPathIOStatics
{
	auto shim() const { return impl::shim<T, IPathIOStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<hstring> ReadTextAsync(hstring_ref absolutePath) const;
	Windows::Foundation::IAsyncOperation<hstring> ReadTextAsync(hstring_ref absolutePath, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction WriteTextAsync(hstring_ref absolutePath, hstring_ref contents) const;
	Windows::Foundation::IAsyncAction WriteTextAsync(hstring_ref absolutePath, hstring_ref contents, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction AppendTextAsync(hstring_ref absolutePath, hstring_ref contents) const;
	Windows::Foundation::IAsyncAction AppendTextAsync(hstring_ref absolutePath, hstring_ref contents, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<hstring>> ReadLinesAsync(hstring_ref absolutePath) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<hstring>> ReadLinesAsync(hstring_ref absolutePath, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction WriteLinesAsync(hstring_ref absolutePath, Windows::Foundation::Collections::IIterable<hstring> const & lines) const;
	Windows::Foundation::IAsyncAction WriteLinesAsync(hstring_ref absolutePath, Windows::Foundation::Collections::IIterable<hstring> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncAction AppendLinesAsync(hstring_ref absolutePath, Windows::Foundation::Collections::IIterable<hstring> const & lines) const;
	Windows::Foundation::IAsyncAction AppendLinesAsync(hstring_ref absolutePath, Windows::Foundation::Collections::IIterable<hstring> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ReadBufferAsync(hstring_ref absolutePath) const;
	Windows::Foundation::IAsyncAction WriteBufferAsync(hstring_ref absolutePath, Windows::Storage::Streams::IBuffer const & buffer) const;
};

template <typename T>
class impl_ICachedFileManagerStatics
{
	auto shim() const { return impl::shim<T, ICachedFileManagerStatics>(this); }

public:

	void DeferUpdates(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Provider::FileUpdateStatus> CompleteUpdatesAsync(Windows::Storage::IStorageFile const & file) const;
};

template <typename T>
class impl_ISystemAudioProperties
{
	auto shim() const { return impl::shim<T, ISystemAudioProperties>(this); }

public:

	hstring EncodingBitrate() const;
};

template <typename T>
class impl_ISystemGPSProperties
{
	auto shim() const { return impl::shim<T, ISystemGPSProperties>(this); }

public:

	hstring LatitudeDecimal() const;
	hstring LongitudeDecimal() const;
};

template <typename T>
class impl_ISystemImageProperties
{
	auto shim() const { return impl::shim<T, ISystemImageProperties>(this); }

public:

	hstring HorizontalSize() const;
	hstring VerticalSize() const;
};

template <typename T>
class impl_ISystemMediaProperties
{
	auto shim() const { return impl::shim<T, ISystemMediaProperties>(this); }

public:

	hstring Duration() const;
	hstring Producer() const;
	hstring Publisher() const;
	hstring SubTitle() const;
	hstring Writer() const;
	hstring Year() const;
};

template <typename T>
class impl_ISystemMusicProperties
{
	auto shim() const { return impl::shim<T, ISystemMusicProperties>(this); }

public:

	hstring AlbumArtist() const;
	hstring AlbumTitle() const;
	hstring Artist() const;
	hstring Composer() const;
	hstring Conductor() const;
	hstring DisplayArtist() const;
	hstring Genre() const;
	hstring TrackNumber() const;
};

template <typename T>
class impl_ISystemPhotoProperties
{
	auto shim() const { return impl::shim<T, ISystemPhotoProperties>(this); }

public:

	hstring CameraManufacturer() const;
	hstring CameraModel() const;
	hstring DateTaken() const;
	hstring Orientation() const;
	hstring PeopleNames() const;
};

template <typename T>
class impl_ISystemVideoProperties
{
	auto shim() const { return impl::shim<T, ISystemVideoProperties>(this); }

public:

	hstring Director() const;
	hstring FrameHeight() const;
	hstring FrameWidth() const;
	hstring Orientation() const;
	hstring TotalBitrate() const;
};

template <typename T>
class impl_ISystemProperties
{
	auto shim() const { return impl::shim<T, ISystemProperties>(this); }

public:

	hstring Author() const;
	hstring Comment() const;
	hstring ItemNameDisplay() const;
	hstring Keywords() const;
	hstring Rating() const;
	hstring Title() const;
	Windows::Storage::SystemAudioProperties Audio() const;
	Windows::Storage::SystemGPSProperties GPS() const;
	Windows::Storage::SystemMediaProperties Media() const;
	Windows::Storage::SystemMusicProperties Music() const;
	Windows::Storage::SystemPhotoProperties Photo() const;
	Windows::Storage::SystemVideoProperties Video() const;
	Windows::Storage::SystemImageProperties Image() const;
};

template <typename T>
class impl_IStorageStreamTransaction
{
	auto shim() const { return impl::shim<T, IStorageStreamTransaction>(this); }

public:

	Windows::Storage::Streams::IRandomAccessStream Stream() const;
	Windows::Foundation::IAsyncAction CommitAsync() const;
};

template <typename T>
class impl_IApplicationDataStatics
{
	auto shim() const { return impl::shim<T, IApplicationDataStatics>(this); }

public:

	Windows::Storage::ApplicationData Current() const;
};

template <typename T>
class impl_IApplicationDataStatics2
{
	auto shim() const { return impl::shim<T, IApplicationDataStatics2>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::ApplicationData> GetForUserAsync(Windows::System::User const & user) const;
};

template <typename T>
class impl_IApplicationData
{
	auto shim() const { return impl::shim<T, IApplicationData>(this); }

public:

	unsigned Version() const;
	Windows::Foundation::IAsyncAction SetVersionAsync(unsigned desiredVersion, Windows::Storage::IApplicationDataSetVersionHandler const & handler) const;
	template <typename F> Windows::Foundation::IAsyncAction SetVersionAsync(unsigned desiredVersion, F handler) const;
	Windows::Foundation::IAsyncAction ClearAsync() const;
	Windows::Foundation::IAsyncAction ClearAsync(Windows::Storage::ApplicationDataLocality locality) const;
	Windows::Storage::ApplicationDataContainer LocalSettings() const;
	Windows::Storage::ApplicationDataContainer RoamingSettings() const;
	Windows::Storage::StorageFolder LocalFolder() const;
	Windows::Storage::StorageFolder RoamingFolder() const;
	Windows::Storage::StorageFolder TemporaryFolder() const;
	long long DataChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::ApplicationData, IInspectable> const & handler) const;
	template <typename F> long long DataChanged(F handler) const;
	void DataChanged(long long token) const;
	void SignalDataChanged() const;
	unsigned long long RoamingStorageQuota() const;
};

template <typename T>
class impl_IApplicationData2
{
	auto shim() const { return impl::shim<T, IApplicationData2>(this); }

public:

	Windows::Storage::StorageFolder LocalCacheFolder() const;
};

template <typename T>
class impl_IApplicationData3
{
	auto shim() const { return impl::shim<T, IApplicationData3>(this); }

public:

	Windows::Storage::StorageFolder GetPublisherCacheFolder(hstring_ref folderName) const;
	Windows::Foundation::IAsyncAction ClearPublisherCacheFolderAsync(hstring_ref folderName) const;
	Windows::Storage::StorageFolder SharedLocalFolder() const;
};

template <typename T>
class impl_ISetVersionRequest
{
	auto shim() const { return impl::shim<T, ISetVersionRequest>(this); }

public:

	unsigned CurrentVersion() const;
	unsigned DesiredVersion() const;
	Windows::Storage::SetVersionDeferral GetDeferral() const;
};

template <typename T>
class impl_ISetVersionDeferral
{
	auto shim() const { return impl::shim<T, ISetVersionDeferral>(this); }

public:

	void Complete() const;
};

template <typename T>
class impl_IApplicationDataContainer
{
	auto shim() const { return impl::shim<T, IApplicationDataContainer>(this); }

public:

	hstring Name() const;
	Windows::Storage::ApplicationDataLocality Locality() const;
	Windows::Foundation::Collections::IPropertySet Values() const;
	Windows::Foundation::Collections::IMapView<hstring, Windows::Storage::ApplicationDataContainer> Containers() const;
	Windows::Storage::ApplicationDataContainer CreateContainer(hstring_ref name, Windows::Storage::ApplicationDataCreateDisposition disposition) const;
	void DeleteContainer(hstring_ref name) const;
};

}}}

namespace winrt { namespace Windows { namespace Storage { namespace FileProperties {

template <typename T>
class impl_IGeotagHelperStatics
{
	auto shim() const { return impl::shim<T, IGeotagHelperStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geopoint> GetGeotagAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncAction SetGeotagFromGeolocatorAsync(Windows::Storage::IStorageFile const & file, Windows::Devices::Geolocation::Geolocator const & geolocator) const;
	Windows::Foundation::IAsyncAction SetGeotagAsync(Windows::Storage::IStorageFile const & file, Windows::Devices::Geolocation::Geopoint const & geopoint) const;
};

template <typename T>
class impl_IThumbnailProperties
{
	auto shim() const { return impl::shim<T, IThumbnailProperties>(this); }

public:

	unsigned OriginalWidth() const;
	unsigned OriginalHeight() const;
	bool ReturnedSmallerCachedSize() const;
	Windows::Storage::FileProperties::ThumbnailType Type() const;
};

template <typename T>
class impl_IStorageItemExtraProperties
{
	auto shim() const { return impl::shim<T, IStorageItemExtraProperties>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<hstring, IInspectable>> RetrievePropertiesAsync(Windows::Foundation::Collections::IIterable<hstring> const & propertiesToRetrieve) const;
	Windows::Foundation::IAsyncAction SavePropertiesAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<hstring, IInspectable>> const & propertiesToSave) const;
	Windows::Foundation::IAsyncAction SavePropertiesAsync() const;
};

template <typename T>
class impl_IStorageItemContentProperties
{
	auto shim() const { return impl::shim<T, IStorageItemContentProperties>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::MusicProperties> GetMusicPropertiesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::VideoProperties> GetVideoPropertiesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::ImageProperties> GetImagePropertiesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::DocumentProperties> GetDocumentPropertiesAsync() const;
};

template <typename T>
class impl_IMusicProperties
{
	auto shim() const { return impl::shim<T, IMusicProperties>(this); }

public:

	hstring Album() const;
	void Album(hstring_ref value) const;
	hstring Artist() const;
	void Artist(hstring_ref value) const;
	Windows::Foundation::Collections::IVector<hstring> Genre() const;
	unsigned TrackNumber() const;
	void TrackNumber(unsigned value) const;
	hstring Title() const;
	void Title(hstring_ref value) const;
	unsigned Rating() const;
	void Rating(unsigned value) const;
	Windows::Foundation::TimeSpan Duration() const;
	unsigned Bitrate() const;
	hstring AlbumArtist() const;
	void AlbumArtist(hstring_ref value) const;
	Windows::Foundation::Collections::IVector<hstring> Composers() const;
	Windows::Foundation::Collections::IVector<hstring> Conductors() const;
	hstring Subtitle() const;
	void Subtitle(hstring_ref value) const;
	Windows::Foundation::Collections::IVector<hstring> Producers() const;
	hstring Publisher() const;
	void Publisher(hstring_ref value) const;
	Windows::Foundation::Collections::IVector<hstring> Writers() const;
	unsigned Year() const;
	void Year(unsigned value) const;
};

template <typename T>
class impl_IImageProperties
{
	auto shim() const { return impl::shim<T, IImageProperties>(this); }

public:

	unsigned Rating() const;
	void Rating(unsigned value) const;
	Windows::Foundation::Collections::IVector<hstring> Keywords() const;
	Windows::Foundation::DateTime DateTaken() const;
	void DateTaken(Windows::Foundation::DateTime const & value) const;
	unsigned Width() const;
	unsigned Height() const;
	hstring Title() const;
	void Title(hstring_ref value) const;
	Windows::Foundation::IReference<double> Latitude() const;
	Windows::Foundation::IReference<double> Longitude() const;
	hstring CameraManufacturer() const;
	void CameraManufacturer(hstring_ref value) const;
	hstring CameraModel() const;
	void CameraModel(hstring_ref value) const;
	Windows::Storage::FileProperties::PhotoOrientation Orientation() const;
	Windows::Foundation::Collections::IVectorView<hstring> PeopleNames() const;
};

template <typename T>
class impl_IVideoProperties
{
	auto shim() const { return impl::shim<T, IVideoProperties>(this); }

public:

	unsigned Rating() const;
	void Rating(unsigned value) const;
	Windows::Foundation::Collections::IVector<hstring> Keywords() const;
	unsigned Width() const;
	unsigned Height() const;
	Windows::Foundation::TimeSpan Duration() const;
	Windows::Foundation::IReference<double> Latitude() const;
	Windows::Foundation::IReference<double> Longitude() const;
	hstring Title() const;
	void Title(hstring_ref value) const;
	hstring Subtitle() const;
	void Subtitle(hstring_ref value) const;
	Windows::Foundation::Collections::IVector<hstring> Producers() const;
	hstring Publisher() const;
	void Publisher(hstring_ref value) const;
	Windows::Foundation::Collections::IVector<hstring> Writers() const;
	unsigned Year() const;
	void Year(unsigned value) const;
	unsigned Bitrate() const;
	Windows::Foundation::Collections::IVector<hstring> Directors() const;
	Windows::Storage::FileProperties::VideoOrientation Orientation() const;
};

template <typename T>
class impl_IDocumentProperties
{
	auto shim() const { return impl::shim<T, IDocumentProperties>(this); }

public:

	Windows::Foundation::Collections::IVector<hstring> Author() const;
	hstring Title() const;
	void Title(hstring_ref value) const;
	Windows::Foundation::Collections::IVector<hstring> Keywords() const;
	hstring Comment() const;
	void Comment(hstring_ref value) const;
};

template <typename T>
class impl_IBasicProperties
{
	auto shim() const { return impl::shim<T, IBasicProperties>(this); }

public:

	unsigned long long Size() const;
	Windows::Foundation::DateTime DateModified() const;
	Windows::Foundation::DateTime ItemDate() const;
};

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

template <typename T>
class impl_IFileRemovedEventArgs
{
	auto shim() const { return impl::shim<T, IFileRemovedEventArgs>(this); }

public:

	hstring Id() const;
};

template <typename T>
class impl_IFileOpenPickerUI
{
	auto shim() const { return impl::shim<T, IFileOpenPickerUI>(this); }

public:

	Windows::Storage::Pickers::Provider::AddFileResult AddFile(hstring_ref id, Windows::Storage::IStorageFile const & file) const;
	void RemoveFile(hstring_ref id) const;
	bool ContainsFile(hstring_ref id) const;
	bool CanAddFile(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::Collections::IVectorView<hstring> AllowedFileTypes() const;
	Windows::Storage::Pickers::Provider::FileSelectionMode SelectionMode() const;
	hstring SettingsIdentifier() const;
	hstring Title() const;
	void Title(hstring_ref value) const;
	long long FileRemoved(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::FileRemovedEventArgs> const & handler) const;
	template <typename F> long long FileRemoved(F handler) const;
	void FileRemoved(long long token) const;
	long long Closing(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::PickerClosingEventArgs> const & handler) const;
	template <typename F> long long Closing(F handler) const;
	void Closing(long long token) const;
};

template <typename T>
class impl_IPickerClosingEventArgs
{
	auto shim() const { return impl::shim<T, IPickerClosingEventArgs>(this); }

public:

	Windows::Storage::Pickers::Provider::PickerClosingOperation ClosingOperation() const;
	bool IsCanceled() const;
};

template <typename T>
class impl_IPickerClosingOperation
{
	auto shim() const { return impl::shim<T, IPickerClosingOperation>(this); }

public:

	Windows::Storage::Pickers::Provider::PickerClosingDeferral GetDeferral() const;
	Windows::Foundation::DateTime Deadline() const;
};

template <typename T>
class impl_IPickerClosingDeferral
{
	auto shim() const { return impl::shim<T, IPickerClosingDeferral>(this); }

public:

	void Complete() const;
};

template <typename T>
class impl_IFileSavePickerUI
{
	auto shim() const { return impl::shim<T, IFileSavePickerUI>(this); }

public:

	hstring Title() const;
	void Title(hstring_ref value) const;
	Windows::Foundation::Collections::IVectorView<hstring> AllowedFileTypes() const;
	hstring SettingsIdentifier() const;
	hstring FileName() const;
	Windows::Storage::Pickers::Provider::SetFileNameResult TrySetFileName(hstring_ref value) const;
	long long FileNameChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, IInspectable> const & handler) const;
	template <typename F> long long FileNameChanged(F handler) const;
	void FileNameChanged(long long token) const;
	long long TargetFileRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs> const & handler) const;
	template <typename F> long long TargetFileRequested(F handler) const;
	void TargetFileRequested(long long token) const;
};

template <typename T>
class impl_ITargetFileRequestedEventArgs
{
	auto shim() const { return impl::shim<T, ITargetFileRequestedEventArgs>(this); }

public:

	Windows::Storage::Pickers::Provider::TargetFileRequest Request() const;
};

template <typename T>
class impl_ITargetFileRequest
{
	auto shim() const { return impl::shim<T, ITargetFileRequest>(this); }

public:

	Windows::Storage::IStorageFile TargetFile() const;
	void TargetFile(Windows::Storage::IStorageFile const & value) const;
	Windows::Storage::Pickers::Provider::TargetFileRequestDeferral GetDeferral() const;
};

template <typename T>
class impl_ITargetFileRequestDeferral
{
	auto shim() const { return impl::shim<T, ITargetFileRequestDeferral>(this); }

public:

	void Complete() const;
};

}}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Provider {

template <typename T>
class impl_ICachedFileUpdaterUI
{
	auto shim() const { return impl::shim<T, ICachedFileUpdaterUI>(this); }

public:

	hstring Title() const;
	void Title(hstring_ref value) const;
	Windows::Storage::Provider::CachedFileTarget UpdateTarget() const;
	long long FileUpdateRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, Windows::Storage::Provider::FileUpdateRequestedEventArgs> const & handler) const;
	template <typename F> long long FileUpdateRequested(F handler) const;
	void FileUpdateRequested(long long token) const;
	long long UIRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, IInspectable> const & handler) const;
	template <typename F> long long UIRequested(F handler) const;
	void UIRequested(long long token) const;
	Windows::Storage::Provider::UIStatus UIStatus() const;
};

template <typename T>
class impl_IFileUpdateRequestedEventArgs
{
	auto shim() const { return impl::shim<T, IFileUpdateRequestedEventArgs>(this); }

public:

	Windows::Storage::Provider::FileUpdateRequest Request() const;
};

template <typename T>
class impl_IFileUpdateRequest
{
	auto shim() const { return impl::shim<T, IFileUpdateRequest>(this); }

public:

	hstring ContentId() const;
	Windows::Storage::StorageFile File() const;
	Windows::Storage::Provider::FileUpdateStatus Status() const;
	void Status(Windows::Storage::Provider::FileUpdateStatus value) const;
	Windows::Storage::Provider::FileUpdateRequestDeferral GetDeferral() const;
	void UpdateLocalFile(Windows::Storage::IStorageFile const & value) const;
};

template <typename T>
class impl_IFileUpdateRequestDeferral
{
	auto shim() const { return impl::shim<T, IFileUpdateRequestDeferral>(this); }

public:

	void Complete() const;
};

template <typename T>
class impl_ICachedFileUpdaterUI2
{
	auto shim() const { return impl::shim<T, ICachedFileUpdaterUI2>(this); }

public:

	Windows::Storage::Provider::FileUpdateRequest UpdateRequest() const;
	Windows::Storage::Provider::FileUpdateRequestDeferral GetDeferral() const;
};

template <typename T>
class impl_IFileUpdateRequest2
{
	auto shim() const { return impl::shim<T, IFileUpdateRequest2>(this); }

public:

	hstring UserInputNeededMessage() const;
	void UserInputNeededMessage(hstring_ref value) const;
};

template <typename T>
class impl_ICachedFileUpdaterStatics
{
	auto shim() const { return impl::shim<T, ICachedFileUpdaterStatics>(this); }

public:

	void SetUpdateInformation(Windows::Storage::IStorageFile const & file, hstring_ref contentId, Windows::Storage::Provider::ReadActivationMode readMode, Windows::Storage::Provider::WriteActivationMode writeMode, Windows::Storage::Provider::CachedFileOptions options) const;
};

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Search {

template <typename T>
class impl_IContentIndexerStatics
{
	auto shim() const { return impl::shim<T, IContentIndexerStatics>(this); }

public:

	Windows::Storage::Search::ContentIndexer GetIndexer(hstring_ref indexName) const;
	Windows::Storage::Search::ContentIndexer GetIndexer() const;
};

template <typename T>
class impl_IIndexableContent
{
	auto shim() const { return impl::shim<T, IIndexableContent>(this); }

public:

	hstring Id() const;
	void Id(hstring_ref value) const;
	Windows::Foundation::Collections::IMap<hstring, IInspectable> Properties() const;
	Windows::Storage::Streams::IRandomAccessStream Stream() const;
	void Stream(Windows::Storage::Streams::IRandomAccessStream const & value) const;
	hstring StreamContentType() const;
	void StreamContentType(hstring_ref value) const;
};

template <typename T>
class impl_IContentIndexer
{
	auto shim() const { return impl::shim<T, IContentIndexer>(this); }

public:

	Windows::Foundation::IAsyncAction AddAsync(Windows::Storage::Search::IIndexableContent const & indexableContent) const;
	Windows::Foundation::IAsyncAction UpdateAsync(Windows::Storage::Search::IIndexableContent const & indexableContent) const;
	Windows::Foundation::IAsyncAction DeleteAsync(hstring_ref contentId) const;
	Windows::Foundation::IAsyncAction DeleteMultipleAsync(Windows::Foundation::Collections::IIterable<hstring> const & contentIds) const;
	Windows::Foundation::IAsyncAction DeleteAllAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<hstring, IInspectable>> RetrievePropertiesAsync(hstring_ref contentId, Windows::Foundation::Collections::IIterable<hstring> const & propertiesToRetrieve) const;
	unsigned long long Revision() const;
};

template <typename T>
class impl_IValueAndLanguage
{
	auto shim() const { return impl::shim<T, IValueAndLanguage>(this); }

public:

	hstring Language() const;
	void Language(hstring_ref value) const;
	IInspectable Value() const;
	void Value(IInspectable const & value) const;
};

template <typename T>
class impl_IContentIndexerQueryOperations
{
	auto shim() const { return impl::shim<T, IContentIndexerQueryOperations>(this); }

public:

	Windows::Storage::Search::ContentIndexerQuery CreateQuery(hstring_ref searchFilter, Windows::Foundation::Collections::IIterable<hstring> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<winrt::Windows::Storage::Search::SortEntry> const & sortOrder, hstring_ref searchFilterLanguage) const;
	Windows::Storage::Search::ContentIndexerQuery CreateQuery(hstring_ref searchFilter, Windows::Foundation::Collections::IIterable<hstring> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<winrt::Windows::Storage::Search::SortEntry> const & sortOrder) const;
	Windows::Storage::Search::ContentIndexerQuery CreateQuery(hstring_ref searchFilter, Windows::Foundation::Collections::IIterable<hstring> const & propertiesToRetrieve) const;
};

template <typename T>
class impl_IContentIndexerQuery
{
	auto shim() const { return impl::shim<T, IContentIndexerQuery>(this); }

public:

	Windows::Foundation::IAsyncOperation<unsigned> GetCountAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<hstring, IInspectable>>> GetPropertiesAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<hstring, IInspectable>>> GetPropertiesAsync(unsigned startIndex, unsigned maxItems) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> GetAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> GetAsync(unsigned startIndex, unsigned maxItems) const;
	Windows::Storage::StorageFolder QueryFolder() const;
};

template <typename T>
class impl_IQueryOptions
{
	auto shim() const { return impl::shim<T, IQueryOptions>(this); }

public:

	Windows::Foundation::Collections::IVector<hstring> FileTypeFilter() const;
	Windows::Storage::Search::FolderDepth FolderDepth() const;
	void FolderDepth(Windows::Storage::Search::FolderDepth value) const;
	hstring ApplicationSearchFilter() const;
	void ApplicationSearchFilter(hstring_ref value) const;
	hstring UserSearchFilter() const;
	void UserSearchFilter(hstring_ref value) const;
	hstring Language() const;
	void Language(hstring_ref value) const;
	Windows::Storage::Search::IndexerOption IndexerOption() const;
	void IndexerOption(Windows::Storage::Search::IndexerOption value) const;
	Windows::Foundation::Collections::IVector<winrt::Windows::Storage::Search::SortEntry> SortOrder() const;
	hstring GroupPropertyName() const;
	Windows::Storage::Search::DateStackOption DateStackOption() const;
	hstring SaveToString() const;
	void LoadFromString(hstring_ref value) const;
	void SetThumbnailPrefetch(Windows::Storage::FileProperties::ThumbnailMode mode, unsigned requestedSize, Windows::Storage::FileProperties::ThumbnailOptions options) const;
	void SetPropertyPrefetch(Windows::Storage::FileProperties::PropertyPrefetchOptions options, Windows::Foundation::Collections::IIterable<hstring> const & propertiesToRetrieve) const;
};

template <typename T>
class impl_IQueryOptionsWithProviderFilter
{
	auto shim() const { return impl::shim<T, IQueryOptionsWithProviderFilter>(this); }

public:

	Windows::Foundation::Collections::IVector<hstring> StorageProviderIdFilter() const;
};

template <typename T>
class impl_IQueryOptionsFactory
{
	auto shim() const { return impl::shim<T, IQueryOptionsFactory>(this); }

public:

	Windows::Storage::Search::QueryOptions CreateCommonFileQuery(Windows::Storage::Search::CommonFileQuery query, Windows::Foundation::Collections::IIterable<hstring> const & fileTypeFilter) const;
	Windows::Storage::Search::QueryOptions CreateCommonFolderQuery(Windows::Storage::Search::CommonFolderQuery query) const;
};

template <typename T>
class impl_IStorageQueryResultBase
{
	auto shim() const { return impl::shim<T, IStorageQueryResultBase>(this); }

public:

	Windows::Foundation::IAsyncOperation<unsigned> GetItemCountAsync() const;
	Windows::Storage::StorageFolder Folder() const;
	long long ContentsChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable> const & handler) const;
	template <typename F> long long ContentsChanged(F handler) const;
	void ContentsChanged(long long eventCookie) const;
	long long OptionsChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable> const & changedHandler) const;
	template <typename F> long long OptionsChanged(F changedHandler) const;
	void OptionsChanged(long long eventCookie) const;
	Windows::Foundation::IAsyncOperation<unsigned> FindStartIndexAsync(IInspectable const & value) const;
	Windows::Storage::Search::QueryOptions GetCurrentQueryOptions() const;
	void ApplyNewQueryOptions(Windows::Storage::Search::QueryOptions const & newQueryOptions) const;
};

template <typename T>
class impl_IStorageFileQueryResult
{
	auto shim() const { return impl::shim<T, IStorageFileQueryResult>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> GetFilesAsync(unsigned startIndex, unsigned maxNumberOfItems) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> GetFilesAsync() const;
};

template <typename T>
class impl_IStorageFileQueryResult2
{
	auto shim() const { return impl::shim<T, IStorageFileQueryResult2>(this); }

public:

	Windows::Foundation::Collections::IMap<hstring, Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment>> GetMatchingPropertiesWithRanges(Windows::Storage::StorageFile const & file) const;
};

template <typename T>
class impl_IStorageFolderQueryResult
{
	auto shim() const { return impl::shim<T, IStorageFolderQueryResult>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> GetFoldersAsync(unsigned startIndex, unsigned maxNumberOfItems) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> GetFoldersAsync() const;
};

template <typename T>
class impl_IStorageItemQueryResult
{
	auto shim() const { return impl::shim<T, IStorageItemQueryResult>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> GetItemsAsync(unsigned startIndex, unsigned maxNumberOfItems) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> GetItemsAsync() const;
};

template <typename T>
class impl_IStorageFolderQueryOperations
{
	auto shim() const { return impl::shim<T, IStorageFolderQueryOperations>(this); }

public:

	Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Search::IndexedState> GetIndexedStateAsync() const;
	Windows::Storage::Search::StorageFileQueryResult CreateFileQuery() const;
	Windows::Storage::Search::StorageFileQueryResult CreateFileQuery(Windows::Storage::Search::CommonFileQuery query) const;
	Windows::Storage::Search::StorageFileQueryResult CreateFileQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const;
	Windows::Storage::Search::StorageFolderQueryResult CreateFolderQuery() const;
	Windows::Storage::Search::StorageFolderQueryResult CreateFolderQuery(Windows::Storage::Search::CommonFolderQuery query) const;
	Windows::Storage::Search::StorageFolderQueryResult CreateFolderQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const;
	Windows::Storage::Search::StorageItemQueryResult CreateItemQuery() const;
	Windows::Storage::Search::StorageItemQueryResult CreateItemQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> GetFilesAsync(Windows::Storage::Search::CommonFileQuery query, unsigned startIndex, unsigned maxItemsToRetrieve) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> GetFilesAsync(Windows::Storage::Search::CommonFileQuery query) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> GetFoldersAsync(Windows::Storage::Search::CommonFolderQuery query, unsigned startIndex, unsigned maxItemsToRetrieve) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> GetFoldersAsync(Windows::Storage::Search::CommonFolderQuery query) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> GetItemsAsync(unsigned startIndex, unsigned maxItemsToRetrieve) const;
	bool AreQueryOptionsSupported(Windows::Storage::Search::QueryOptions const & queryOptions) const;
	bool IsCommonFolderQuerySupported(Windows::Storage::Search::CommonFolderQuery query) const;
	bool IsCommonFileQuerySupported(Windows::Storage::Search::CommonFileQuery query) const;
};

template <typename T>
class impl_IStorageLibraryContentChangedTriggerDetails
{
	auto shim() const { return impl::shim<T, IStorageLibraryContentChangedTriggerDetails>(this); }

public:

	Windows::Storage::StorageFolder Folder() const;
	Windows::Storage::Search::StorageItemQueryResult CreateModifiedSinceQuery(Windows::Foundation::DateTime const & lastQueryTime) const;
};

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Streams {

template <typename T>
class impl_IDataReader
{
	auto shim() const { return impl::shim<T, IDataReader>(this); }

public:

	unsigned UnconsumedBufferLength() const;
	Windows::Storage::Streams::UnicodeEncoding UnicodeEncoding() const;
	void UnicodeEncoding(Windows::Storage::Streams::UnicodeEncoding value) const;
	Windows::Storage::Streams::ByteOrder ByteOrder() const;
	void ByteOrder(Windows::Storage::Streams::ByteOrder value) const;
	Windows::Storage::Streams::InputStreamOptions InputStreamOptions() const;
	void InputStreamOptions(Windows::Storage::Streams::InputStreamOptions value) const;
	byte ReadByte() const;
	Windows::Storage::Streams::IBuffer ReadBuffer(unsigned length) const;
	bool ReadBoolean() const;
	GUID ReadGuid() const;
	short ReadInt16() const;
	int ReadInt32() const;
	long long ReadInt64() const;
	unsigned short ReadUInt16() const;
	unsigned ReadUInt32() const;
	unsigned long long ReadUInt64() const;
	float ReadSingle() const;
	double ReadDouble() const;
	hstring ReadString(unsigned codeUnitCount) const;
	Windows::Foundation::DateTime ReadDateTime() const;
	Windows::Foundation::TimeSpan ReadTimeSpan() const;
	Windows::Storage::Streams::DataReaderLoadOperation LoadAsync(unsigned count) const;
	Windows::Storage::Streams::IBuffer DetachBuffer() const;
	Windows::Storage::Streams::IInputStream DetachStream() const;
};

template <typename T>
class impl_IDataReaderFactory
{
	auto shim() const { return impl::shim<T, IDataReaderFactory>(this); }

public:

	Windows::Storage::Streams::DataReader CreateDataReader(Windows::Storage::Streams::IInputStream const & inputStream) const;
};

template <typename T>
class impl_IDataReaderStatics
{
	auto shim() const { return impl::shim<T, IDataReaderStatics>(this); }

public:

	Windows::Storage::Streams::DataReader FromBuffer(Windows::Storage::Streams::IBuffer const & buffer) const;
};

template <typename T>
class impl_IDataWriter
{
	auto shim() const { return impl::shim<T, IDataWriter>(this); }

public:

	unsigned UnstoredBufferLength() const;
	Windows::Storage::Streams::UnicodeEncoding UnicodeEncoding() const;
	void UnicodeEncoding(Windows::Storage::Streams::UnicodeEncoding value) const;
	Windows::Storage::Streams::ByteOrder ByteOrder() const;
	void ByteOrder(Windows::Storage::Streams::ByteOrder value) const;
	void WriteByte(byte value) const;
	void WriteBuffer(Windows::Storage::Streams::IBuffer const & buffer) const;
	void WriteBuffer(Windows::Storage::Streams::IBuffer const & buffer, unsigned start, unsigned count) const;
	void WriteBoolean(bool value) const;
	void WriteGuid(GUID value) const;
	void WriteInt16(short value) const;
	void WriteInt32(int value) const;
	void WriteInt64(long long value) const;
	void WriteUInt16(unsigned short value) const;
	void WriteUInt32(unsigned value) const;
	void WriteUInt64(unsigned long long value) const;
	void WriteSingle(float value) const;
	void WriteDouble(double value) const;
	void WriteDateTime(Windows::Foundation::DateTime const & value) const;
	void WriteTimeSpan(Windows::Foundation::TimeSpan const & value) const;
	unsigned WriteString(hstring_ref value) const;
	unsigned MeasureString(hstring_ref value) const;
	Windows::Storage::Streams::DataWriterStoreOperation StoreAsync() const;
	Windows::Foundation::IAsyncOperation<bool> FlushAsync() const;
	Windows::Storage::Streams::IBuffer DetachBuffer() const;
	Windows::Storage::Streams::IOutputStream DetachStream() const;
};

template <typename T>
class impl_IDataWriterFactory
{
	auto shim() const { return impl::shim<T, IDataWriterFactory>(this); }

public:

	Windows::Storage::Streams::DataWriter CreateDataWriter(Windows::Storage::Streams::IOutputStream const & outputStream) const;
};

template <typename T>
class impl_IRandomAccessStreamReference
{
	auto shim() const { return impl::shim<T, IRandomAccessStreamReference>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> OpenReadAsync() const;
};

template <typename T>
class impl_IRandomAccessStreamStatics
{
	auto shim() const { return impl::shim<T, IRandomAccessStreamStatics>(this); }

public:

	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination) const;
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination, unsigned long long bytesToCopy) const;
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAndCloseAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination) const;
};

template <typename T>
class impl_IBufferFactory
{
	auto shim() const { return impl::shim<T, IBufferFactory>(this); }

public:

	Windows::Storage::Streams::Buffer Create(unsigned capacity) const;
};

template <typename T>
class impl_IBuffer
{
	auto shim() const { return impl::shim<T, IBuffer>(this); }

public:

	unsigned Capacity() const;
	unsigned Length() const;
	void Length(unsigned value) const;
};

template <typename T>
class impl_IBufferStatics
{
	auto shim() const { return impl::shim<T, IBufferStatics>(this); }

public:

	Windows::Storage::Streams::Buffer CreateCopyFromMemoryBuffer(Windows::Foundation::IMemoryBuffer const & input) const;
	Windows::Foundation::MemoryBuffer CreateMemoryBufferOverIBuffer(Windows::Storage::Streams::IBuffer const & input) const;
};

template <typename T>
class impl_IContentTypeProvider
{
	auto shim() const { return impl::shim<T, IContentTypeProvider>(this); }

public:

	hstring ContentType() const;
};

template <typename T>
class impl_IInputStreamReference
{
	auto shim() const { return impl::shim<T, IInputStreamReference>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> OpenSequentialReadAsync() const;
};

template <typename T>
class impl_IRandomAccessStreamReferenceStatics
{
	auto shim() const { return impl::shim<T, IRandomAccessStreamReferenceStatics>(this); }

public:

	Windows::Storage::Streams::RandomAccessStreamReference CreateFromFile(Windows::Storage::IStorageFile const & file) const;
	Windows::Storage::Streams::RandomAccessStreamReference CreateFromUri(Windows::Foundation::Uri const & uri) const;
	Windows::Storage::Streams::RandomAccessStreamReference CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream) const;
};

template <typename T>
class impl_IInputStream
{
	auto shim() const { return impl::shim<T, IInputStream>(this); }

public:

	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned> ReadAsync(Windows::Storage::Streams::IBuffer const & buffer, unsigned count, Windows::Storage::Streams::InputStreamOptions options) const;
};

template <typename T>
class impl_IOutputStream
{
	auto shim() const { return impl::shim<T, IOutputStream>(this); }

public:

	Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> WriteAsync(Windows::Storage::Streams::IBuffer const & buffer) const;
	Windows::Foundation::IAsyncOperation<bool> FlushAsync() const;
};

template <typename T>
class impl_IRandomAccessStream
{
	auto shim() const { return impl::shim<T, IRandomAccessStream>(this); }

public:

	unsigned long long Size() const;
	void Size(unsigned long long value) const;
	Windows::Storage::Streams::IInputStream GetInputStreamAt(unsigned long long position) const;
	Windows::Storage::Streams::IOutputStream GetOutputStreamAt(unsigned long long position) const;
	unsigned long long Position() const;
	void Seek(unsigned long long position) const;
	Windows::Storage::Streams::IRandomAccessStream CloneStream() const;
	bool CanRead() const;
	bool CanWrite() const;
};

template <typename T>
class impl_IRandomAccessStreamWithContentType
{
	auto shim() const { return impl::shim<T, IRandomAccessStreamWithContentType>(this); }

public:

};

}}}}

namespace winrt { namespace Windows { namespace System {

template <typename T>
class impl_IAppMemoryReport
{
	auto shim() const { return impl::shim<T, IAppMemoryReport>(this); }

public:

	unsigned long long PrivateCommitUsage() const;
	unsigned long long PeakPrivateCommitUsage() const;
	unsigned long long TotalCommitUsage() const;
	unsigned long long TotalCommitLimit() const;
};

template <typename T>
class impl_IProcessMemoryReport
{
	auto shim() const { return impl::shim<T, IProcessMemoryReport>(this); }

public:

	unsigned long long PrivateWorkingSetUsage() const;
	unsigned long long TotalWorkingSetUsage() const;
};

template <typename T>
class impl_IAppMemoryUsageLimitChangingEventArgs
{
	auto shim() const { return impl::shim<T, IAppMemoryUsageLimitChangingEventArgs>(this); }

public:

	unsigned long long OldLimit() const;
	unsigned long long NewLimit() const;
};

template <typename T>
class impl_IMemoryManagerStatics
{
	auto shim() const { return impl::shim<T, IMemoryManagerStatics>(this); }

public:

	unsigned long long AppMemoryUsage() const;
	unsigned long long AppMemoryUsageLimit() const;
	Windows::System::AppMemoryUsageLevel AppMemoryUsageLevel() const;
	long long AppMemoryUsageIncreased(Windows::Foundation::IEventHandler<IInspectable> const & handler) const;
	template <typename F> long long AppMemoryUsageIncreased(F handler) const;
	void AppMemoryUsageIncreased(long long token) const;
	long long AppMemoryUsageDecreased(Windows::Foundation::IEventHandler<IInspectable> const & handler) const;
	template <typename F> long long AppMemoryUsageDecreased(F handler) const;
	void AppMemoryUsageDecreased(long long token) const;
	long long AppMemoryUsageLimitChanging(Windows::Foundation::IEventHandler<Windows::System::AppMemoryUsageLimitChangingEventArgs> const & handler) const;
	template <typename F> long long AppMemoryUsageLimitChanging(F handler) const;
	void AppMemoryUsageLimitChanging(long long token) const;
};

template <typename T>
class impl_IMemoryManagerStatics2
{
	auto shim() const { return impl::shim<T, IMemoryManagerStatics2>(this); }

public:

	Windows::System::AppMemoryReport GetAppMemoryReport() const;
	Windows::System::ProcessMemoryReport GetProcessMemoryReport() const;
};

template <typename T>
class impl_IMemoryManagerStatics3
{
	auto shim() const { return impl::shim<T, IMemoryManagerStatics3>(this); }

public:

	bool TrySetAppMemoryUsageLimit(unsigned long long value) const;
};

template <typename T>
class impl_IProtocolForResultsOperation
{
	auto shim() const { return impl::shim<T, IProtocolForResultsOperation>(this); }

public:

	void ReportCompleted(Windows::Foundation::Collections::ValueSet const & data) const;
};

template <typename T>
class impl_IUser
{
	auto shim() const { return impl::shim<T, IUser>(this); }

public:

	hstring NonRoamableId() const;
	Windows::System::UserAuthenticationStatus AuthenticationStatus() const;
	Windows::System::UserType Type() const;
	Windows::Foundation::IAsyncOperation<IInspectable> GetPropertyAsync(hstring_ref value) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IPropertySet> GetPropertiesAsync(Windows::Foundation::Collections::IVectorView<hstring> const & values) const;
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamReference> GetPictureAsync(Windows::System::UserPictureSize desiredSize) const;
};

template <typename T>
class impl_IUserStatics
{
	auto shim() const { return impl::shim<T, IUserStatics>(this); }

public:

	Windows::System::UserWatcher CreateWatcher() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> FindAllAsync() const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> FindAllAsync(Windows::System::UserType type) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> FindAllAsync(Windows::System::UserType type, Windows::System::UserAuthenticationStatus status) const;
	Windows::System::User GetFromId(hstring_ref nonRoamableId) const;
};

template <typename T>
class impl_IUserWatcher
{
	auto shim() const { return impl::shim<T, IUserWatcher>(this); }

public:

	Windows::System::UserWatcherStatus Status() const;
	void Start() const;
	void Stop() const;
	long long Added(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs> const & handler) const;
	template <typename F> long long Added(F handler) const;
	void Added(long long token) const;
	long long Removed(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs> const & handler) const;
	template <typename F> long long Removed(F handler) const;
	void Removed(long long token) const;
	long long Updated(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs> const & handler) const;
	template <typename F> long long Updated(F handler) const;
	void Updated(long long token) const;
	long long AuthenticationStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs> const & handler) const;
	template <typename F> long long AuthenticationStatusChanged(F handler) const;
	void AuthenticationStatusChanged(long long token) const;
	long long AuthenticationStatusChanging(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, Windows::System::UserAuthenticationStatusChangingEventArgs> const & handler) const;
	template <typename F> long long AuthenticationStatusChanging(F handler) const;
	void AuthenticationStatusChanging(long long token) const;
	long long EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, IInspectable> const & handler) const;
	template <typename F> long long EnumerationCompleted(F handler) const;
	void EnumerationCompleted(long long token) const;
	long long Stopped(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, IInspectable> const & handler) const;
	template <typename F> long long Stopped(F handler) const;
	void Stopped(long long token) const;
};

template <typename T>
class impl_IUserChangedEventArgs
{
	auto shim() const { return impl::shim<T, IUserChangedEventArgs>(this); }

public:

	Windows::System::User User() const;
};

template <typename T>
class impl_IUserAuthenticationStatusChangeDeferral
{
	auto shim() const { return impl::shim<T, IUserAuthenticationStatusChangeDeferral>(this); }

public:

	void Complete() const;
};

template <typename T>
class impl_IUserAuthenticationStatusChangingEventArgs
{
	auto shim() const { return impl::shim<T, IUserAuthenticationStatusChangingEventArgs>(this); }

public:

	Windows::System::UserAuthenticationStatusChangeDeferral GetDeferral() const;
	Windows::System::User User() const;
	Windows::System::UserAuthenticationStatus NewStatus() const;
	Windows::System::UserAuthenticationStatus CurrentStatus() const;
};

template <typename T>
class impl_IKnownUserPropertiesStatics
{
	auto shim() const { return impl::shim<T, IKnownUserPropertiesStatics>(this); }

public:

	hstring DisplayName() const;
	hstring FirstName() const;
	hstring LastName() const;
	hstring ProviderName() const;
	hstring AccountName() const;
	hstring GuestHost() const;
	hstring PrincipalName() const;
	hstring DomainName() const;
	hstring SessionInitiationProtocolUri() const;
};

template <typename T>
class impl_ILaunchUriResult
{
	auto shim() const { return impl::shim<T, ILaunchUriResult>(this); }

public:

	Windows::System::LaunchUriStatus Status() const;
	Windows::Foundation::Collections::ValueSet Result() const;
};

template <typename T>
class impl_ILauncherUIOptions
{
	auto shim() const { return impl::shim<T, ILauncherUIOptions>(this); }

public:

	Windows::Foundation::IReference<winrt::Windows::Foundation::Point> InvocationPoint() const;
	void InvocationPoint(Windows::Foundation::IReference<winrt::Windows::Foundation::Point> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::Rect> SelectionRect() const;
	void SelectionRect(Windows::Foundation::IReference<winrt::Windows::Foundation::Rect> const & value) const;
	Windows::UI::Popups::Placement PreferredPlacement() const;
	void PreferredPlacement(Windows::UI::Popups::Placement value) const;
};

template <typename T>
class impl_ILauncherOptions
{
	auto shim() const { return impl::shim<T, ILauncherOptions>(this); }

public:

	bool TreatAsUntrusted() const;
	void TreatAsUntrusted(bool value) const;
	bool DisplayApplicationPicker() const;
	void DisplayApplicationPicker(bool value) const;
	Windows::System::LauncherUIOptions UI() const;
	hstring PreferredApplicationPackageFamilyName() const;
	void PreferredApplicationPackageFamilyName(hstring_ref value) const;
	hstring PreferredApplicationDisplayName() const;
	void PreferredApplicationDisplayName(hstring_ref value) const;
	Windows::Foundation::Uri FallbackUri() const;
	void FallbackUri(Windows::Foundation::Uri const & value) const;
	hstring ContentType() const;
	void ContentType(hstring_ref value) const;
};

template <typename T>
class impl_ILauncherOptions2
{
	auto shim() const { return impl::shim<T, ILauncherOptions2>(this); }

public:

	hstring TargetApplicationPackageFamilyName() const;
	void TargetApplicationPackageFamilyName(hstring_ref value) const;
	Windows::Storage::Search::StorageFileQueryResult NeighboringFilesQuery() const;
	void NeighboringFilesQuery(Windows::Storage::Search::StorageFileQueryResult const & value) const;
};

template <typename T>
class impl_ILauncherViewOptions
{
	auto shim() const { return impl::shim<T, ILauncherViewOptions>(this); }

public:

	Windows::UI::ViewManagement::ViewSizePreference DesiredRemainingView() const;
	void DesiredRemainingView(Windows::UI::ViewManagement::ViewSizePreference value) const;
};

template <typename T>
class impl_IFolderLauncherOptions
{
	auto shim() const { return impl::shim<T, IFolderLauncherOptions>(this); }

public:

	Windows::Foundation::Collections::IVector<Windows::Storage::IStorageItem> ItemsToSelect() const;
};

template <typename T>
class impl_ILauncherStatics
{
	auto shim() const { return impl::shim<T, ILauncherStatics>(this); }

public:

	Windows::Foundation::IAsyncOperation<bool> LaunchFileAsync(Windows::Storage::IStorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<bool> LaunchFileAsync(Windows::Storage::IStorageFile const & file, Windows::System::LauncherOptions const & options) const;
	Windows::Foundation::IAsyncOperation<bool> LaunchUriAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperation<bool> LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options) const;
};

template <typename T>
class impl_ILauncherStatics2
{
	auto shim() const { return impl::shim<T, ILauncherStatics2>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::System::LaunchUriResult> LaunchUriForResultsAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options) const;
	Windows::Foundation::IAsyncOperation<Windows::System::LaunchUriResult> LaunchUriForResultsAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options, Windows::Foundation::Collections::ValueSet const & inputData) const;
	Windows::Foundation::IAsyncOperation<bool> LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options, Windows::Foundation::Collections::ValueSet const & inputData) const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> QueryUriSupportAsync(Windows::Foundation::Uri const & uri, Windows::System::LaunchQuerySupportType launchQuerySupportType) const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> QueryUriSupportAsync(Windows::Foundation::Uri const & uri, Windows::System::LaunchQuerySupportType launchQuerySupportType, hstring_ref packageFamilyName) const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> QueryFileSupportAsync(Windows::Storage::StorageFile const & file) const;
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> QueryFileSupportAsync(Windows::Storage::StorageFile const & file, hstring_ref packageFamilyName) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> FindUriSchemeHandlersAsync(hstring_ref scheme) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> FindUriSchemeHandlersAsync(hstring_ref scheme, Windows::System::LaunchQuerySupportType launchQuerySupportType) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> FindFileHandlersAsync(hstring_ref extension) const;
};

template <typename T>
class impl_ILauncherStatics3
{
	auto shim() const { return impl::shim<T, ILauncherStatics3>(this); }

public:

	Windows::Foundation::IAsyncOperation<bool> LaunchFolderAsync(Windows::Storage::IStorageFolder const & folder) const;
	Windows::Foundation::IAsyncOperation<bool> LaunchFolderAsync(Windows::Storage::IStorageFolder const & folder, Windows::System::FolderLauncherOptions const & options) const;
};

}}}

namespace winrt { namespace Windows { namespace UI {

template <typename T>
class impl_IColorHelper
{
	auto shim() const { return impl::shim<T, IColorHelper>(this); }

public:

};

template <typename T>
class impl_IColorHelperStatics
{
	auto shim() const { return impl::shim<T, IColorHelperStatics>(this); }

public:

	Windows::UI::Color FromArgb(byte a, byte r, byte g, byte b) const;
};

template <typename T>
class impl_IColors
{
	auto shim() const { return impl::shim<T, IColors>(this); }

public:

};

template <typename T>
class impl_IColorsStatics
{
	auto shim() const { return impl::shim<T, IColorsStatics>(this); }

public:

	Windows::UI::Color AliceBlue() const;
	Windows::UI::Color AntiqueWhite() const;
	Windows::UI::Color Aqua() const;
	Windows::UI::Color Aquamarine() const;
	Windows::UI::Color Azure() const;
	Windows::UI::Color Beige() const;
	Windows::UI::Color Bisque() const;
	Windows::UI::Color Black() const;
	Windows::UI::Color BlanchedAlmond() const;
	Windows::UI::Color Blue() const;
	Windows::UI::Color BlueViolet() const;
	Windows::UI::Color Brown() const;
	Windows::UI::Color BurlyWood() const;
	Windows::UI::Color CadetBlue() const;
	Windows::UI::Color Chartreuse() const;
	Windows::UI::Color Chocolate() const;
	Windows::UI::Color Coral() const;
	Windows::UI::Color CornflowerBlue() const;
	Windows::UI::Color Cornsilk() const;
	Windows::UI::Color Crimson() const;
	Windows::UI::Color Cyan() const;
	Windows::UI::Color DarkBlue() const;
	Windows::UI::Color DarkCyan() const;
	Windows::UI::Color DarkGoldenrod() const;
	Windows::UI::Color DarkGray() const;
	Windows::UI::Color DarkGreen() const;
	Windows::UI::Color DarkKhaki() const;
	Windows::UI::Color DarkMagenta() const;
	Windows::UI::Color DarkOliveGreen() const;
	Windows::UI::Color DarkOrange() const;
	Windows::UI::Color DarkOrchid() const;
	Windows::UI::Color DarkRed() const;
	Windows::UI::Color DarkSalmon() const;
	Windows::UI::Color DarkSeaGreen() const;
	Windows::UI::Color DarkSlateBlue() const;
	Windows::UI::Color DarkSlateGray() const;
	Windows::UI::Color DarkTurquoise() const;
	Windows::UI::Color DarkViolet() const;
	Windows::UI::Color DeepPink() const;
	Windows::UI::Color DeepSkyBlue() const;
	Windows::UI::Color DimGray() const;
	Windows::UI::Color DodgerBlue() const;
	Windows::UI::Color Firebrick() const;
	Windows::UI::Color FloralWhite() const;
	Windows::UI::Color ForestGreen() const;
	Windows::UI::Color Fuchsia() const;
	Windows::UI::Color Gainsboro() const;
	Windows::UI::Color GhostWhite() const;
	Windows::UI::Color Gold() const;
	Windows::UI::Color Goldenrod() const;
	Windows::UI::Color Gray() const;
	Windows::UI::Color Green() const;
	Windows::UI::Color GreenYellow() const;
	Windows::UI::Color Honeydew() const;
	Windows::UI::Color HotPink() const;
	Windows::UI::Color IndianRed() const;
	Windows::UI::Color Indigo() const;
	Windows::UI::Color Ivory() const;
	Windows::UI::Color Khaki() const;
	Windows::UI::Color Lavender() const;
	Windows::UI::Color LavenderBlush() const;
	Windows::UI::Color LawnGreen() const;
	Windows::UI::Color LemonChiffon() const;
	Windows::UI::Color LightBlue() const;
	Windows::UI::Color LightCoral() const;
	Windows::UI::Color LightCyan() const;
	Windows::UI::Color LightGoldenrodYellow() const;
	Windows::UI::Color LightGreen() const;
	Windows::UI::Color LightGray() const;
	Windows::UI::Color LightPink() const;
	Windows::UI::Color LightSalmon() const;
	Windows::UI::Color LightSeaGreen() const;
	Windows::UI::Color LightSkyBlue() const;
	Windows::UI::Color LightSlateGray() const;
	Windows::UI::Color LightSteelBlue() const;
	Windows::UI::Color LightYellow() const;
	Windows::UI::Color Lime() const;
	Windows::UI::Color LimeGreen() const;
	Windows::UI::Color Linen() const;
	Windows::UI::Color Magenta() const;
	Windows::UI::Color Maroon() const;
	Windows::UI::Color MediumAquamarine() const;
	Windows::UI::Color MediumBlue() const;
	Windows::UI::Color MediumOrchid() const;
	Windows::UI::Color MediumPurple() const;
	Windows::UI::Color MediumSeaGreen() const;
	Windows::UI::Color MediumSlateBlue() const;
	Windows::UI::Color MediumSpringGreen() const;
	Windows::UI::Color MediumTurquoise() const;
	Windows::UI::Color MediumVioletRed() const;
	Windows::UI::Color MidnightBlue() const;
	Windows::UI::Color MintCream() const;
	Windows::UI::Color MistyRose() const;
	Windows::UI::Color Moccasin() const;
	Windows::UI::Color NavajoWhite() const;
	Windows::UI::Color Navy() const;
	Windows::UI::Color OldLace() const;
	Windows::UI::Color Olive() const;
	Windows::UI::Color OliveDrab() const;
	Windows::UI::Color Orange() const;
	Windows::UI::Color OrangeRed() const;
	Windows::UI::Color Orchid() const;
	Windows::UI::Color PaleGoldenrod() const;
	Windows::UI::Color PaleGreen() const;
	Windows::UI::Color PaleTurquoise() const;
	Windows::UI::Color PaleVioletRed() const;
	Windows::UI::Color PapayaWhip() const;
	Windows::UI::Color PeachPuff() const;
	Windows::UI::Color Peru() const;
	Windows::UI::Color Pink() const;
	Windows::UI::Color Plum() const;
	Windows::UI::Color PowderBlue() const;
	Windows::UI::Color Purple() const;
	Windows::UI::Color Red() const;
	Windows::UI::Color RosyBrown() const;
	Windows::UI::Color RoyalBlue() const;
	Windows::UI::Color SaddleBrown() const;
	Windows::UI::Color Salmon() const;
	Windows::UI::Color SandyBrown() const;
	Windows::UI::Color SeaGreen() const;
	Windows::UI::Color SeaShell() const;
	Windows::UI::Color Sienna() const;
	Windows::UI::Color Silver() const;
	Windows::UI::Color SkyBlue() const;
	Windows::UI::Color SlateBlue() const;
	Windows::UI::Color SlateGray() const;
	Windows::UI::Color Snow() const;
	Windows::UI::Color SpringGreen() const;
	Windows::UI::Color SteelBlue() const;
	Windows::UI::Color Tan() const;
	Windows::UI::Color Teal() const;
	Windows::UI::Color Thistle() const;
	Windows::UI::Color Tomato() const;
	Windows::UI::Color Transparent() const;
	Windows::UI::Color Turquoise() const;
	Windows::UI::Color Violet() const;
	Windows::UI::Color Wheat() const;
	Windows::UI::Color White() const;
	Windows::UI::Color WhiteSmoke() const;
	Windows::UI::Color Yellow() const;
	Windows::UI::Color YellowGreen() const;
};

}}}

namespace winrt { namespace Windows { namespace UI { namespace Core {

template <typename T>
class impl_IDispatchedHandler
{
	auto shim() const { return impl::shim<T, IDispatchedHandler>(this); }

public:

	void Invoke() const;
};

template <typename T>
class impl_IIdleDispatchedHandler
{
	auto shim() const { return impl::shim<T, IIdleDispatchedHandler>(this); }

public:

	void Invoke(Windows::UI::Core::IdleDispatchedHandlerArgs const & e) const;
};

template <typename T>
class impl_ICoreWindowEventArgs
{
	auto shim() const { return impl::shim<T, ICoreWindowEventArgs>(this); }

public:

	bool Handled() const;
	void Handled(bool value) const;
};

template <typename T>
class impl_IAutomationProviderRequestedEventArgs
{
	auto shim() const { return impl::shim<T, IAutomationProviderRequestedEventArgs>(this); }

public:

	IInspectable AutomationProvider() const;
	void AutomationProvider(IInspectable const & value) const;
};

template <typename T>
class impl_ICharacterReceivedEventArgs
{
	auto shim() const { return impl::shim<T, ICharacterReceivedEventArgs>(this); }

public:

	unsigned KeyCode() const;
	Windows::UI::Core::CorePhysicalKeyStatus KeyStatus() const;
};

template <typename T>
class impl_IInputEnabledEventArgs
{
	auto shim() const { return impl::shim<T, IInputEnabledEventArgs>(this); }

public:

	bool InputEnabled() const;
};

template <typename T>
class impl_IKeyEventArgs
{
	auto shim() const { return impl::shim<T, IKeyEventArgs>(this); }

public:

	Windows::System::VirtualKey VirtualKey() const;
	Windows::UI::Core::CorePhysicalKeyStatus KeyStatus() const;
};

template <typename T>
class impl_IPointerEventArgs
{
	auto shim() const { return impl::shim<T, IPointerEventArgs>(this); }

public:

	Windows::UI::Input::PointerPoint CurrentPoint() const;
	Windows::System::VirtualKeyModifiers KeyModifiers() const;
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> GetIntermediatePoints() const;
};

template <typename T>
class impl_ITouchHitTestingEventArgs
{
	auto shim() const { return impl::shim<T, ITouchHitTestingEventArgs>(this); }

public:

	Windows::UI::Core::CoreProximityEvaluation ProximityEvaluation() const;
	void ProximityEvaluation(Windows::UI::Core::CoreProximityEvaluation const & value) const;
	Windows::Foundation::Point Point() const;
	Windows::Foundation::Rect BoundingBox() const;
	Windows::UI::Core::CoreProximityEvaluation EvaluateProximity(Windows::Foundation::Rect const & controlBoundingBox) const;
};

template <typename T>
class impl_IWindowActivatedEventArgs
{
	auto shim() const { return impl::shim<T, IWindowActivatedEventArgs>(this); }

public:

	Windows::UI::Core::CoreWindowActivationState WindowActivationState() const;
};

template <typename T>
class impl_IWindowSizeChangedEventArgs
{
	auto shim() const { return impl::shim<T, IWindowSizeChangedEventArgs>(this); }

public:

	Windows::Foundation::Size Size() const;
};

template <typename T>
class impl_IVisibilityChangedEventArgs
{
	auto shim() const { return impl::shim<T, IVisibilityChangedEventArgs>(this); }

public:

	bool Visible() const;
};

template <typename T>
class impl_ICoreWindow
{
	auto shim() const { return impl::shim<T, ICoreWindow>(this); }

public:

	IInspectable AutomationHostProvider() const;
	Windows::Foundation::Rect Bounds() const;
	Windows::Foundation::Collections::IPropertySet CustomProperties() const;
	Windows::UI::Core::CoreDispatcher Dispatcher() const;
	Windows::UI::Core::CoreWindowFlowDirection FlowDirection() const;
	void FlowDirection(Windows::UI::Core::CoreWindowFlowDirection value) const;
	bool IsInputEnabled() const;
	void IsInputEnabled(bool value) const;
	Windows::UI::Core::CoreCursor PointerCursor() const;
	void PointerCursor(Windows::UI::Core::CoreCursor const & value) const;
	Windows::Foundation::Point PointerPosition() const;
	bool Visible() const;
	void Activate() const;
	void Close() const;
	Windows::UI::Core::CoreVirtualKeyStates GetAsyncKeyState(Windows::System::VirtualKey virtualKey) const;
	Windows::UI::Core::CoreVirtualKeyStates GetKeyState(Windows::System::VirtualKey virtualKey) const;
	void ReleasePointerCapture() const;
	void SetPointerCapture() const;
	long long Activated(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowActivatedEventArgs> const & handler) const;
	template <typename F> long long Activated(F handler) const;
	void Activated(long long cookie) const;
	long long AutomationProviderRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::AutomationProviderRequestedEventArgs> const & handler) const;
	template <typename F> long long AutomationProviderRequested(F handler) const;
	void AutomationProviderRequested(long long cookie) const;
	long long CharacterReceived(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CharacterReceivedEventArgs> const & handler) const;
	template <typename F> long long CharacterReceived(F handler) const;
	void CharacterReceived(long long cookie) const;
	long long Closed(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowEventArgs> const & handler) const;
	template <typename F> long long Closed(F handler) const;
	void Closed(long long cookie) const;
	long long InputEnabled(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::InputEnabledEventArgs> const & handler) const;
	template <typename F> long long InputEnabled(F handler) const;
	void InputEnabled(long long cookie) const;
	long long KeyDown(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs> const & handler) const;
	template <typename F> long long KeyDown(F handler) const;
	void KeyDown(long long cookie) const;
	long long KeyUp(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs> const & handler) const;
	template <typename F> long long KeyUp(F handler) const;
	void KeyUp(long long cookie) const;
	long long PointerCaptureLost(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerCaptureLost(F handler) const;
	void PointerCaptureLost(long long cookie) const;
	long long PointerEntered(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerEntered(F handler) const;
	void PointerEntered(long long cookie) const;
	long long PointerExited(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerExited(F handler) const;
	void PointerExited(long long cookie) const;
	long long PointerMoved(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerMoved(F handler) const;
	void PointerMoved(long long cookie) const;
	long long PointerPressed(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerPressed(F handler) const;
	void PointerPressed(long long cookie) const;
	long long PointerReleased(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerReleased(F handler) const;
	void PointerReleased(long long cookie) const;
	long long TouchHitTesting(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::TouchHitTestingEventArgs> const & handler) const;
	template <typename F> long long TouchHitTesting(F handler) const;
	void TouchHitTesting(long long cookie) const;
	long long PointerWheelChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerWheelChanged(F handler) const;
	void PointerWheelChanged(long long cookie) const;
	long long SizeChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowSizeChangedEventArgs> const & handler) const;
	template <typename F> long long SizeChanged(F handler) const;
	void SizeChanged(long long cookie) const;
	long long VisibilityChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::VisibilityChangedEventArgs> const & handler) const;
	template <typename F> long long VisibilityChanged(F handler) const;
	void VisibilityChanged(long long cookie) const;
};

template <typename T>
class impl_ICoreWindow2
{
	auto shim() const { return impl::shim<T, ICoreWindow2>(this); }

public:

	void PointerPosition(Windows::Foundation::Point const & value) const;
};

template <typename T>
class impl_ICoreWindowStatic
{
	auto shim() const { return impl::shim<T, ICoreWindowStatic>(this); }

public:

	Windows::UI::Core::CoreWindow GetForCurrentThread() const;
};

template <typename T>
class impl_IAcceleratorKeyEventArgs
{
	auto shim() const { return impl::shim<T, IAcceleratorKeyEventArgs>(this); }

public:

	Windows::UI::Core::CoreAcceleratorKeyEventType EventType() const;
	Windows::System::VirtualKey VirtualKey() const;
	Windows::UI::Core::CorePhysicalKeyStatus KeyStatus() const;
};

template <typename T>
class impl_ICoreAcceleratorKeys
{
	auto shim() const { return impl::shim<T, ICoreAcceleratorKeys>(this); }

public:

	long long AcceleratorKeyActivated(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreDispatcher, Windows::UI::Core::AcceleratorKeyEventArgs> const & handler) const;
	template <typename F> long long AcceleratorKeyActivated(F handler) const;
	void AcceleratorKeyActivated(long long cookie) const;
};

template <typename T>
class impl_ICoreDispatcher
{
	auto shim() const { return impl::shim<T, ICoreDispatcher>(this); }

public:

	bool HasThreadAccess() const;
	void ProcessEvents(Windows::UI::Core::CoreProcessEventsOption options) const;
	Windows::Foundation::IAsyncAction RunAsync(Windows::UI::Core::CoreDispatcherPriority priority, Windows::UI::Core::IDispatchedHandler const & agileCallback) const;
	template <typename F> Windows::Foundation::IAsyncAction RunAsync(Windows::UI::Core::CoreDispatcherPriority priority, F agileCallback) const;
	Windows::Foundation::IAsyncAction RunIdleAsync(Windows::UI::Core::IIdleDispatchedHandler const & agileCallback) const;
	template <typename F> Windows::Foundation::IAsyncAction RunIdleAsync(F agileCallback) const;
};

template <typename T>
class impl_ICoreDispatcher2
{
	auto shim() const { return impl::shim<T, ICoreDispatcher2>(this); }

public:

	Windows::Foundation::IAsyncOperation<bool> TryRunAsync(Windows::UI::Core::CoreDispatcherPriority priority, Windows::UI::Core::IDispatchedHandler const & agileCallback) const;
	template <typename F> Windows::Foundation::IAsyncOperation<bool> TryRunAsync(Windows::UI::Core::CoreDispatcherPriority priority, F agileCallback) const;
	Windows::Foundation::IAsyncOperation<bool> TryRunIdleAsync(Windows::UI::Core::IIdleDispatchedHandler const & agileCallback) const;
	template <typename F> Windows::Foundation::IAsyncOperation<bool> TryRunIdleAsync(F agileCallback) const;
};

template <typename T>
class impl_ICoreDispatcherWithTaskPriority
{
	auto shim() const { return impl::shim<T, ICoreDispatcherWithTaskPriority>(this); }

public:

	Windows::UI::Core::CoreDispatcherPriority CurrentPriority() const;
	void CurrentPriority(Windows::UI::Core::CoreDispatcherPriority value) const;
	bool ShouldYield() const;
	bool ShouldYield(Windows::UI::Core::CoreDispatcherPriority priority) const;
	void StopProcessEvents() const;
};

template <typename T>
class impl_IIdleDispatchedHandlerArgs
{
	auto shim() const { return impl::shim<T, IIdleDispatchedHandlerArgs>(this); }

public:

	bool IsDispatcherIdle() const;
};

template <typename T>
class impl_ICoreCursor
{
	auto shim() const { return impl::shim<T, ICoreCursor>(this); }

public:

	unsigned Id() const;
	Windows::UI::Core::CoreCursorType Type() const;
};

template <typename T>
class impl_ICoreCursorFactory
{
	auto shim() const { return impl::shim<T, ICoreCursorFactory>(this); }

public:

	Windows::UI::Core::CoreCursor CreateCursor(Windows::UI::Core::CoreCursorType type, unsigned id) const;
};

template <typename T>
class impl_IInitializeWithCoreWindow
{
	auto shim() const { return impl::shim<T, IInitializeWithCoreWindow>(this); }

public:

	void Initialize(Windows::UI::Core::CoreWindow const & window) const;
};

template <typename T>
class impl_ICoreWindowResizeManager
{
	auto shim() const { return impl::shim<T, ICoreWindowResizeManager>(this); }

public:

	void NotifyLayoutCompleted() const;
};

template <typename T>
class impl_ICoreWindowResizeManagerLayoutCapability
{
	auto shim() const { return impl::shim<T, ICoreWindowResizeManagerLayoutCapability>(this); }

public:

	void ShouldWaitForLayoutCompletion(bool value) const;
	bool ShouldWaitForLayoutCompletion() const;
};

template <typename T>
class impl_ICoreWindowResizeManagerStatics
{
	auto shim() const { return impl::shim<T, ICoreWindowResizeManagerStatics>(this); }

public:

	Windows::UI::Core::CoreWindowResizeManager GetForCurrentView() const;
};

template <typename T>
class impl_ICoreInputSourceBase
{
	auto shim() const { return impl::shim<T, ICoreInputSourceBase>(this); }

public:

	Windows::UI::Core::CoreDispatcher Dispatcher() const;
	bool IsInputEnabled() const;
	void IsInputEnabled(bool value) const;
	long long InputEnabled(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::InputEnabledEventArgs> const & handler) const;
	template <typename F> long long InputEnabled(F handler) const;
	void InputEnabled(long long cookie) const;
};

template <typename T>
class impl_ICorePointerInputSource
{
	auto shim() const { return impl::shim<T, ICorePointerInputSource>(this); }

public:

	void ReleasePointerCapture() const;
	void SetPointerCapture() const;
	bool HasCapture() const;
	Windows::Foundation::Point PointerPosition() const;
	Windows::UI::Core::CoreCursor PointerCursor() const;
	void PointerCursor(Windows::UI::Core::CoreCursor const & value) const;
	long long PointerCaptureLost(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerCaptureLost(F handler) const;
	void PointerCaptureLost(long long cookie) const;
	long long PointerEntered(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerEntered(F handler) const;
	void PointerEntered(long long cookie) const;
	long long PointerExited(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerExited(F handler) const;
	void PointerExited(long long cookie) const;
	long long PointerMoved(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerMoved(F handler) const;
	void PointerMoved(long long cookie) const;
	long long PointerPressed(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerPressed(F handler) const;
	void PointerPressed(long long cookie) const;
	long long PointerReleased(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerReleased(F handler) const;
	void PointerReleased(long long cookie) const;
	long long PointerWheelChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerWheelChanged(F handler) const;
	void PointerWheelChanged(long long cookie) const;
};

template <typename T>
class impl_ICoreKeyboardInputSource
{
	auto shim() const { return impl::shim<T, ICoreKeyboardInputSource>(this); }

public:

	Windows::UI::Core::CoreVirtualKeyStates GetCurrentKeyState(Windows::System::VirtualKey virtualKey) const;
	long long CharacterReceived(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CharacterReceivedEventArgs> const & handler) const;
	template <typename F> long long CharacterReceived(F handler) const;
	void CharacterReceived(long long cookie) const;
	long long KeyDown(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs> const & handler) const;
	template <typename F> long long KeyDown(F handler) const;
	void KeyDown(long long cookie) const;
	long long KeyUp(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs> const & handler) const;
	template <typename F> long long KeyUp(F handler) const;
	void KeyUp(long long cookie) const;
};

template <typename T>
class impl_ICoreComponentFocusable
{
	auto shim() const { return impl::shim<T, ICoreComponentFocusable>(this); }

public:

	bool HasFocus() const;
	long long GotFocus(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs> const & handler) const;
	template <typename F> long long GotFocus(F handler) const;
	void GotFocus(long long cookie) const;
	long long LostFocus(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs> const & handler) const;
	template <typename F> long long LostFocus(F handler) const;
	void LostFocus(long long cookie) const;
};

template <typename T>
class impl_ICoreTouchHitTesting
{
	auto shim() const { return impl::shim<T, ICoreTouchHitTesting>(this); }

public:

	long long TouchHitTesting(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::TouchHitTestingEventArgs> const & handler) const;
	template <typename F> long long TouchHitTesting(F handler) const;
	void TouchHitTesting(long long cookie) const;
};

template <typename T>
class impl_ICorePointerRedirector
{
	auto shim() const { return impl::shim<T, ICorePointerRedirector>(this); }

public:

	long long PointerRoutedAway(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::ICorePointerRedirector, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerRoutedAway(F handler) const;
	void PointerRoutedAway(long long cookie) const;
	long long PointerRoutedTo(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::ICorePointerRedirector, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerRoutedTo(F handler) const;
	void PointerRoutedTo(long long cookie) const;
	long long PointerRoutedReleased(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::ICorePointerRedirector, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerRoutedReleased(F handler) const;
	void PointerRoutedReleased(long long cookie) const;
};

template <typename T>
class impl_ICoreWindowPopupShowingEventArgs
{
	auto shim() const { return impl::shim<T, ICoreWindowPopupShowingEventArgs>(this); }

public:

	void SetDesiredSize(Windows::Foundation::Size const & value) const;
};

template <typename T>
class impl_ICoreWindowDialog
{
	auto shim() const { return impl::shim<T, ICoreWindowDialog>(this); }

public:

	long long Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs> const & handler) const;
	template <typename F> long long Showing(F handler) const;
	void Showing(long long cookie) const;
	Windows::Foundation::Size MaxSize() const;
	Windows::Foundation::Size MinSize() const;
	hstring Title() const;
	void Title(hstring_ref value) const;
	int IsInteractionDelayed() const;
	void IsInteractionDelayed(int value) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> Commands() const;
	unsigned DefaultCommandIndex() const;
	void DefaultCommandIndex(unsigned value) const;
	unsigned CancelCommandIndex() const;
	void CancelCommandIndex(unsigned value) const;
	Windows::UI::Popups::IUICommandInvokedHandler BackButtonCommand() const;
	void BackButtonCommand(Windows::UI::Popups::IUICommandInvokedHandler const & value) const;
	template <typename F> void BackButtonCommand(F value) const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowAsync() const;
};

template <typename T>
class impl_ICoreWindowDialogFactory
{
	auto shim() const { return impl::shim<T, ICoreWindowDialogFactory>(this); }

public:

	Windows::UI::Core::CoreWindowDialog CreateWithTitle(hstring_ref title) const;
};

template <typename T>
class impl_ICoreWindowFlyout
{
	auto shim() const { return impl::shim<T, ICoreWindowFlyout>(this); }

public:

	long long Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs> const & handler) const;
	template <typename F> long long Showing(F handler) const;
	void Showing(long long cookie) const;
	Windows::Foundation::Size MaxSize() const;
	Windows::Foundation::Size MinSize() const;
	hstring Title() const;
	void Title(hstring_ref value) const;
	int IsInteractionDelayed() const;
	void IsInteractionDelayed(int value) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> Commands() const;
	unsigned DefaultCommandIndex() const;
	void DefaultCommandIndex(unsigned value) const;
	Windows::UI::Popups::IUICommandInvokedHandler BackButtonCommand() const;
	void BackButtonCommand(Windows::UI::Popups::IUICommandInvokedHandler const & value) const;
	template <typename F> void BackButtonCommand(F value) const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowAsync() const;
};

template <typename T>
class impl_ICoreWindowFlyoutFactory
{
	auto shim() const { return impl::shim<T, ICoreWindowFlyoutFactory>(this); }

public:

	Windows::UI::Core::CoreWindowFlyout Create(Windows::Foundation::Point const & position) const;
	Windows::UI::Core::CoreWindowFlyout CreateWithTitle(Windows::Foundation::Point const & position, hstring_ref title) const;
};

template <typename T>
class impl_ISystemNavigationManager
{
	auto shim() const { return impl::shim<T, ISystemNavigationManager>(this); }

public:

	long long BackRequested(Windows::Foundation::IEventHandler<Windows::UI::Core::BackRequestedEventArgs> const & handler) const;
	template <typename F> long long BackRequested(F handler) const;
	void BackRequested(long long token) const;
};

template <typename T>
class impl_ISystemNavigationManager2
{
	auto shim() const { return impl::shim<T, ISystemNavigationManager2>(this); }

public:

	Windows::UI::Core::AppViewBackButtonVisibility AppViewBackButtonVisibility() const;
	void AppViewBackButtonVisibility(Windows::UI::Core::AppViewBackButtonVisibility value) const;
};

template <typename T>
class impl_ISystemNavigationManagerStatics
{
	auto shim() const { return impl::shim<T, ISystemNavigationManagerStatics>(this); }

public:

	Windows::UI::Core::SystemNavigationManager GetForCurrentView() const;
};

template <typename T>
class impl_IBackRequestedEventArgs
{
	auto shim() const { return impl::shim<T, IBackRequestedEventArgs>(this); }

public:

	bool Handled() const;
	void Handled(bool value) const;
};

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input {

template <typename T>
class impl_IEdgeGestureEventArgs
{
	auto shim() const { return impl::shim<T, IEdgeGestureEventArgs>(this); }

public:

	Windows::UI::Input::EdgeGestureKind Kind() const;
};

template <typename T>
class impl_IEdgeGestureStatics
{
	auto shim() const { return impl::shim<T, IEdgeGestureStatics>(this); }

public:

	Windows::UI::Input::EdgeGesture GetForCurrentView() const;
};

template <typename T>
class impl_IEdgeGesture
{
	auto shim() const { return impl::shim<T, IEdgeGesture>(this); }

public:

	long long Starting(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const;
	template <typename F> long long Starting(F handler) const;
	void Starting(long long token) const;
	long long Completed(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const;
	template <typename F> long long Completed(F handler) const;
	void Completed(long long token) const;
	long long Canceled(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const;
	template <typename F> long long Canceled(F handler) const;
	void Canceled(long long token) const;
};

template <typename T>
class impl_IKeyboardDeliveryInterceptor
{
	auto shim() const { return impl::shim<T, IKeyboardDeliveryInterceptor>(this); }

public:

	bool IsInterceptionEnabledWhenInForeground() const;
	void IsInterceptionEnabledWhenInForeground(bool value) const;
	long long KeyDown(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::KeyboardDeliveryInterceptor, Windows::UI::Core::KeyEventArgs> const & handler) const;
	template <typename F> long long KeyDown(F handler) const;
	void KeyDown(long long token) const;
	long long KeyUp(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::KeyboardDeliveryInterceptor, Windows::UI::Core::KeyEventArgs> const & handler) const;
	template <typename F> long long KeyUp(F handler) const;
	void KeyUp(long long token) const;
};

template <typename T>
class impl_IKeyboardDeliveryInterceptorStatics
{
	auto shim() const { return impl::shim<T, IKeyboardDeliveryInterceptorStatics>(this); }

public:

	Windows::UI::Input::KeyboardDeliveryInterceptor GetForCurrentView() const;
};

template <typename T>
class impl_ITappedEventArgs
{
	auto shim() const { return impl::shim<T, ITappedEventArgs>(this); }

public:

	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	unsigned TapCount() const;
};

template <typename T>
class impl_IRightTappedEventArgs
{
	auto shim() const { return impl::shim<T, IRightTappedEventArgs>(this); }

public:

	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
};

template <typename T>
class impl_IHoldingEventArgs
{
	auto shim() const { return impl::shim<T, IHoldingEventArgs>(this); }

public:

	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::HoldingState HoldingState() const;
};

template <typename T>
class impl_IDraggingEventArgs
{
	auto shim() const { return impl::shim<T, IDraggingEventArgs>(this); }

public:

	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::DraggingState DraggingState() const;
};

template <typename T>
class impl_IManipulationStartedEventArgs
{
	auto shim() const { return impl::shim<T, IManipulationStartedEventArgs>(this); }

public:

	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::ManipulationDelta Cumulative() const;
};

template <typename T>
class impl_IManipulationUpdatedEventArgs
{
	auto shim() const { return impl::shim<T, IManipulationUpdatedEventArgs>(this); }

public:

	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::ManipulationDelta Delta() const;
	Windows::UI::Input::ManipulationDelta Cumulative() const;
	Windows::UI::Input::ManipulationVelocities Velocities() const;
};

template <typename T>
class impl_IManipulationInertiaStartingEventArgs
{
	auto shim() const { return impl::shim<T, IManipulationInertiaStartingEventArgs>(this); }

public:

	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::ManipulationDelta Delta() const;
	Windows::UI::Input::ManipulationDelta Cumulative() const;
	Windows::UI::Input::ManipulationVelocities Velocities() const;
};

template <typename T>
class impl_IManipulationCompletedEventArgs
{
	auto shim() const { return impl::shim<T, IManipulationCompletedEventArgs>(this); }

public:

	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::ManipulationDelta Cumulative() const;
	Windows::UI::Input::ManipulationVelocities Velocities() const;
};

template <typename T>
class impl_ICrossSlidingEventArgs
{
	auto shim() const { return impl::shim<T, ICrossSlidingEventArgs>(this); }

public:

	Windows::Devices::Input::PointerDeviceType PointerDeviceType() const;
	Windows::Foundation::Point Position() const;
	Windows::UI::Input::CrossSlidingState CrossSlidingState() const;
};

template <typename T>
class impl_IMouseWheelParameters
{
	auto shim() const { return impl::shim<T, IMouseWheelParameters>(this); }

public:

	Windows::Foundation::Point CharTranslation() const;
	void CharTranslation(Windows::Foundation::Point const & value) const;
	float DeltaScale() const;
	void DeltaScale(float value) const;
	float DeltaRotationAngle() const;
	void DeltaRotationAngle(float value) const;
	Windows::Foundation::Point PageTranslation() const;
	void PageTranslation(Windows::Foundation::Point const & value) const;
};

template <typename T>
class impl_IGestureRecognizer
{
	auto shim() const { return impl::shim<T, IGestureRecognizer>(this); }

public:

	Windows::UI::Input::GestureSettings GestureSettings() const;
	void GestureSettings(Windows::UI::Input::GestureSettings value) const;
	bool IsInertial() const;
	bool IsActive() const;
	bool ShowGestureFeedback() const;
	void ShowGestureFeedback(bool value) const;
	Windows::Foundation::Point PivotCenter() const;
	void PivotCenter(Windows::Foundation::Point const & value) const;
	float PivotRadius() const;
	void PivotRadius(float value) const;
	float InertiaTranslationDeceleration() const;
	void InertiaTranslationDeceleration(float value) const;
	float InertiaRotationDeceleration() const;
	void InertiaRotationDeceleration(float value) const;
	float InertiaExpansionDeceleration() const;
	void InertiaExpansionDeceleration(float value) const;
	float InertiaTranslationDisplacement() const;
	void InertiaTranslationDisplacement(float value) const;
	float InertiaRotationAngle() const;
	void InertiaRotationAngle(float value) const;
	float InertiaExpansion() const;
	void InertiaExpansion(float value) const;
	bool ManipulationExact() const;
	void ManipulationExact(bool value) const;
	Windows::UI::Input::CrossSlideThresholds CrossSlideThresholds() const;
	void CrossSlideThresholds(Windows::UI::Input::CrossSlideThresholds const & value) const;
	bool CrossSlideHorizontally() const;
	void CrossSlideHorizontally(bool value) const;
	bool CrossSlideExact() const;
	void CrossSlideExact(bool value) const;
	bool AutoProcessInertia() const;
	void AutoProcessInertia(bool value) const;
	Windows::UI::Input::MouseWheelParameters MouseWheelParameters() const;
	bool CanBeDoubleTap(Windows::UI::Input::PointerPoint const & value) const;
	void ProcessDownEvent(Windows::UI::Input::PointerPoint const & value) const;
	void ProcessMoveEvents(Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> const & value) const;
	void ProcessUpEvent(Windows::UI::Input::PointerPoint const & value) const;
	void ProcessMouseWheelEvent(Windows::UI::Input::PointerPoint const & value, bool isShiftKeyDown, bool isControlKeyDown) const;
	void ProcessInertia() const;
	void CompleteGesture() const;
	long long Tapped(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::TappedEventArgs> const & handler) const;
	template <typename F> long long Tapped(F handler) const;
	void Tapped(long long cookie) const;
	long long RightTapped(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::RightTappedEventArgs> const & handler) const;
	template <typename F> long long RightTapped(F handler) const;
	void RightTapped(long long cookie) const;
	long long Holding(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::HoldingEventArgs> const & handler) const;
	template <typename F> long long Holding(F handler) const;
	void Holding(long long cookie) const;
	long long Dragging(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::DraggingEventArgs> const & handler) const;
	template <typename F> long long Dragging(F handler) const;
	void Dragging(long long cookie) const;
	long long ManipulationStarted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationStartedEventArgs> const & handler) const;
	template <typename F> long long ManipulationStarted(F handler) const;
	void ManipulationStarted(long long cookie) const;
	long long ManipulationUpdated(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationUpdatedEventArgs> const & handler) const;
	template <typename F> long long ManipulationUpdated(F handler) const;
	void ManipulationUpdated(long long cookie) const;
	long long ManipulationInertiaStarting(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationInertiaStartingEventArgs> const & handler) const;
	template <typename F> long long ManipulationInertiaStarting(F handler) const;
	void ManipulationInertiaStarting(long long cookie) const;
	long long ManipulationCompleted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationCompletedEventArgs> const & handler) const;
	template <typename F> long long ManipulationCompleted(F handler) const;
	void ManipulationCompleted(long long cookie) const;
	long long CrossSliding(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::CrossSlidingEventArgs> const & handler) const;
	template <typename F> long long CrossSliding(F handler) const;
	void CrossSliding(long long cookie) const;
};

template <typename T>
class impl_IPointerPointStatics
{
	auto shim() const { return impl::shim<T, IPointerPointStatics>(this); }

public:

	Windows::UI::Input::PointerPoint GetCurrentPoint(unsigned pointerId) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> GetIntermediatePoints(unsigned pointerId) const;
	Windows::UI::Input::PointerPoint GetCurrentPoint(unsigned pointerId, Windows::UI::Input::IPointerPointTransform const & transform) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> GetIntermediatePoints(unsigned pointerId, Windows::UI::Input::IPointerPointTransform const & transform) const;
};

template <typename T>
class impl_IPointerPointTransform
{
	auto shim() const { return impl::shim<T, IPointerPointTransform>(this); }

public:

	Windows::UI::Input::IPointerPointTransform Inverse() const;
	bool TryTransform(Windows::Foundation::Point const & inPoint, Windows::Foundation::Point & outPoint) const;
	Windows::Foundation::Rect TransformBounds(Windows::Foundation::Rect const & rect) const;
};

template <typename T>
class impl_IPointerPoint
{
	auto shim() const { return impl::shim<T, IPointerPoint>(this); }

public:

	Windows::Devices::Input::PointerDevice PointerDevice() const;
	Windows::Foundation::Point Position() const;
	Windows::Foundation::Point RawPosition() const;
	unsigned PointerId() const;
	unsigned FrameId() const;
	unsigned long long Timestamp() const;
	bool IsInContact() const;
	Windows::UI::Input::PointerPointProperties Properties() const;
};

template <typename T>
class impl_IPointerPointProperties
{
	auto shim() const { return impl::shim<T, IPointerPointProperties>(this); }

public:

	float Pressure() const;
	bool IsInverted() const;
	bool IsEraser() const;
	float Orientation() const;
	float XTilt() const;
	float YTilt() const;
	float Twist() const;
	Windows::Foundation::Rect ContactRect() const;
	Windows::Foundation::Rect ContactRectRaw() const;
	bool TouchConfidence() const;
	bool IsLeftButtonPressed() const;
	bool IsRightButtonPressed() const;
	bool IsMiddleButtonPressed() const;
	int MouseWheelDelta() const;
	bool IsHorizontalMouseWheel() const;
	bool IsPrimary() const;
	bool IsInRange() const;
	bool IsCanceled() const;
	bool IsBarrelButtonPressed() const;
	bool IsXButton1Pressed() const;
	bool IsXButton2Pressed() const;
	Windows::UI::Input::PointerUpdateKind PointerUpdateKind() const;
	bool HasUsage(unsigned usagePage, unsigned usageId) const;
	int GetUsageValue(unsigned usagePage, unsigned usageId) const;
};

template <typename T>
class impl_IPointerVisualizationSettings
{
	auto shim() const { return impl::shim<T, IPointerVisualizationSettings>(this); }

public:

	void IsContactFeedbackEnabled(bool value) const;
	bool IsContactFeedbackEnabled() const;
	void IsBarrelButtonFeedbackEnabled(bool value) const;
	bool IsBarrelButtonFeedbackEnabled() const;
};

template <typename T>
class impl_IPointerVisualizationSettingsStatics
{
	auto shim() const { return impl::shim<T, IPointerVisualizationSettingsStatics>(this); }

public:

	Windows::UI::Input::PointerVisualizationSettings GetForCurrentView() const;
};

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Inking {

template <typename T>
class impl_IInkStrokesCollectedEventArgs
{
	auto shim() const { return impl::shim<T, IInkStrokesCollectedEventArgs>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> Strokes() const;
};

template <typename T>
class impl_IInkStrokesErasedEventArgs
{
	auto shim() const { return impl::shim<T, IInkStrokesErasedEventArgs>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> Strokes() const;
};

template <typename T>
class impl_IInkPresenter
{
	auto shim() const { return impl::shim<T, IInkPresenter>(this); }

public:

	bool IsInputEnabled() const;
	void IsInputEnabled(bool value) const;
	Windows::UI::Core::CoreInputDeviceTypes InputDeviceTypes() const;
	void InputDeviceTypes(Windows::UI::Core::CoreInputDeviceTypes value) const;
	Windows::UI::Input::Inking::InkUnprocessedInput UnprocessedInput() const;
	Windows::UI::Input::Inking::InkStrokeInput StrokeInput() const;
	Windows::UI::Input::Inking::InkInputProcessingConfiguration InputProcessingConfiguration() const;
	Windows::UI::Input::Inking::InkStrokeContainer StrokeContainer() const;
	void StrokeContainer(Windows::UI::Input::Inking::InkStrokeContainer const & value) const;
	Windows::UI::Input::Inking::InkDrawingAttributes CopyDefaultDrawingAttributes() const;
	void UpdateDefaultDrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & value) const;
	Windows::UI::Input::Inking::InkSynchronizer ActivateCustomDrying() const;
	void SetPredefinedConfiguration(Windows::UI::Input::Inking::InkPresenterPredefinedConfiguration value) const;
	long long StrokesCollected(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkPresenter, Windows::UI::Input::Inking::InkStrokesCollectedEventArgs> const & handler) const;
	template <typename F> long long StrokesCollected(F handler) const;
	void StrokesCollected(long long cookie) const;
	long long StrokesErased(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkPresenter, Windows::UI::Input::Inking::InkStrokesErasedEventArgs> const & handler) const;
	template <typename F> long long StrokesErased(F handler) const;
	void StrokesErased(long long cookie) const;
};

template <typename T>
class impl_IInkInputProcessingConfiguration
{
	auto shim() const { return impl::shim<T, IInkInputProcessingConfiguration>(this); }

public:

	Windows::UI::Input::Inking::InkInputProcessingMode Mode() const;
	void Mode(Windows::UI::Input::Inking::InkInputProcessingMode value) const;
	Windows::UI::Input::Inking::InkInputRightDragAction RightDragAction() const;
	void RightDragAction(Windows::UI::Input::Inking::InkInputRightDragAction value) const;
};

template <typename T>
class impl_IInkSynchronizer
{
	auto shim() const { return impl::shim<T, IInkSynchronizer>(this); }

public:

	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> BeginDry() const;
	void EndDry() const;
};

template <typename T>
class impl_IInkUnprocessedInput
{
	auto shim() const { return impl::shim<T, IInkUnprocessedInput>(this); }

public:

	long long PointerEntered(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerEntered(F handler) const;
	void PointerEntered(long long cookie) const;
	long long PointerHovered(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerHovered(F handler) const;
	void PointerHovered(long long cookie) const;
	long long PointerExited(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerExited(F handler) const;
	void PointerExited(long long cookie) const;
	long long PointerPressed(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerPressed(F handler) const;
	void PointerPressed(long long cookie) const;
	long long PointerMoved(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerMoved(F handler) const;
	void PointerMoved(long long cookie) const;
	long long PointerReleased(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerReleased(F handler) const;
	void PointerReleased(long long cookie) const;
	long long PointerLost(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerLost(F handler) const;
	void PointerLost(long long cookie) const;
	Windows::UI::Input::Inking::InkPresenter InkPresenter() const;
};

template <typename T>
class impl_IInkStrokeInput
{
	auto shim() const { return impl::shim<T, IInkStrokeInput>(this); }

public:

	long long StrokeStarted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long StrokeStarted(F handler) const;
	void StrokeStarted(long long cookie) const;
	long long StrokeContinued(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long StrokeContinued(F handler) const;
	void StrokeContinued(long long cookie) const;
	long long StrokeEnded(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long StrokeEnded(F handler) const;
	void StrokeEnded(long long cookie) const;
	long long StrokeCanceled(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long StrokeCanceled(F handler) const;
	void StrokeCanceled(long long cookie) const;
	Windows::UI::Input::Inking::InkPresenter InkPresenter() const;
};

template <typename T>
class impl_IInkPoint
{
	auto shim() const { return impl::shim<T, IInkPoint>(this); }

public:

	Windows::Foundation::Point Position() const;
	float Pressure() const;
};

template <typename T>
class impl_IInkPointFactory
{
	auto shim() const { return impl::shim<T, IInkPointFactory>(this); }

public:

	Windows::UI::Input::Inking::InkPoint CreateInkPoint(Windows::Foundation::Point const & position, float pressure) const;
};

template <typename T>
class impl_IInkDrawingAttributes
{
	auto shim() const { return impl::shim<T, IInkDrawingAttributes>(this); }

public:

	Windows::UI::Color Color() const;
	void Color(Windows::UI::Color const & value) const;
	Windows::UI::Input::Inking::PenTipShape PenTip() const;
	void PenTip(Windows::UI::Input::Inking::PenTipShape value) const;
	Windows::Foundation::Size Size() const;
	void Size(Windows::Foundation::Size const & value) const;
	bool IgnorePressure() const;
	void IgnorePressure(bool value) const;
	bool FitToCurve() const;
	void FitToCurve(bool value) const;
};

template <typename T>
class impl_IInkDrawingAttributes2
{
	auto shim() const { return impl::shim<T, IInkDrawingAttributes2>(this); }

public:

	Windows::Foundation::Numerics::Matrix3x2 PenTipTransform() const;
	void PenTipTransform(Windows::Foundation::Numerics::Matrix3x2 const & value) const;
	bool DrawAsHighlighter() const;
	void DrawAsHighlighter(bool value) const;
};

template <typename T>
class impl_IInkStrokeRenderingSegment
{
	auto shim() const { return impl::shim<T, IInkStrokeRenderingSegment>(this); }

public:

	Windows::Foundation::Point Position() const;
	Windows::Foundation::Point BezierControlPoint1() const;
	Windows::Foundation::Point BezierControlPoint2() const;
	float Pressure() const;
	float TiltX() const;
	float TiltY() const;
	float Twist() const;
};

template <typename T>
class impl_IInkStroke
{
	auto shim() const { return impl::shim<T, IInkStroke>(this); }

public:

	Windows::UI::Input::Inking::InkDrawingAttributes DrawingAttributes() const;
	void DrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & value) const;
	Windows::Foundation::Rect BoundingRect() const;
	bool Selected() const;
	void Selected(bool value) const;
	bool Recognized() const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStrokeRenderingSegment> GetRenderingSegments() const;
	Windows::UI::Input::Inking::InkStroke Clone() const;
};

template <typename T>
class impl_IInkStroke2
{
	auto shim() const { return impl::shim<T, IInkStroke2>(this); }

public:

	Windows::Foundation::Numerics::Matrix3x2 PointTransform() const;
	void PointTransform(Windows::Foundation::Numerics::Matrix3x2 const & value) const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkPoint> GetInkPoints() const;
};

template <typename T>
class impl_IInkStrokeBuilder
{
	auto shim() const { return impl::shim<T, IInkStrokeBuilder>(this); }

public:

	void BeginStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	Windows::UI::Input::PointerPoint AppendToStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	Windows::UI::Input::Inking::InkStroke EndStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	Windows::UI::Input::Inking::InkStroke CreateStroke(Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Point> const & points) const;
	void SetDefaultDrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & drawingAttributes) const;
};

template <typename T>
class impl_IInkStrokeBuilder2
{
	auto shim() const { return impl::shim<T, IInkStrokeBuilder2>(this); }

public:

	Windows::UI::Input::Inking::InkStroke CreateStrokeFromInkPoints(Windows::Foundation::Collections::IIterable<Windows::UI::Input::Inking::InkPoint> const & inkPoints, Windows::Foundation::Numerics::Matrix3x2 const & transform) const;
};

template <typename T>
class impl_IInkRecognitionResult
{
	auto shim() const { return impl::shim<T, IInkRecognitionResult>(this); }

public:

	Windows::Foundation::Rect BoundingRect() const;
	Windows::Foundation::Collections::IVectorView<hstring> GetTextCandidates() const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> GetStrokes() const;
};

template <typename T>
class impl_IInkStrokeContainer
{
	auto shim() const { return impl::shim<T, IInkStrokeContainer>(this); }

public:

	Windows::Foundation::Rect BoundingRect() const;
	void AddStroke(Windows::UI::Input::Inking::InkStroke const & stroke) const;
	Windows::Foundation::Rect DeleteSelected() const;
	Windows::Foundation::Rect MoveSelected(Windows::Foundation::Point const & translation) const;
	Windows::Foundation::Rect SelectWithPolyLine(Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Point> const & polyline) const;
	Windows::Foundation::Rect SelectWithLine(Windows::Foundation::Point const & from, Windows::Foundation::Point const & to) const;
	void CopySelectedToClipboard() const;
	Windows::Foundation::Rect PasteFromClipboard(Windows::Foundation::Point const & position) const;
	bool CanPasteFromClipboard() const;
	Windows::Foundation::IAsyncActionWithProgress<unsigned long long> LoadAsync(Windows::Storage::Streams::IInputStream const & inputStream) const;
	Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> SaveAsync(Windows::Storage::Streams::IOutputStream const & outputStream) const;
	void UpdateRecognitionResults(Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult> const & recognitionResults) const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> GetStrokes() const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult> GetRecognitionResults() const;
};

template <typename T>
class impl_IInkStrokeContainer2
{
	auto shim() const { return impl::shim<T, IInkStrokeContainer2>(this); }

public:

	void AddStrokes(Windows::Foundation::Collections::IIterable<Windows::UI::Input::Inking::InkStroke> const & strokes) const;
	void Clear() const;
};

template <typename T>
class impl_IInkRecognizer
{
	auto shim() const { return impl::shim<T, IInkRecognizer>(this); }

public:

	hstring Name() const;
};

template <typename T>
class impl_IInkRecognizerContainer
{
	auto shim() const { return impl::shim<T, IInkRecognizerContainer>(this); }

public:

	void SetDefaultRecognizer(Windows::UI::Input::Inking::InkRecognizer const & recognizer) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> RecognizeAsync(Windows::UI::Input::Inking::InkStrokeContainer const & strokeCollection, Windows::UI::Input::Inking::InkRecognitionTarget recognitionTarget) const;
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognizer> GetRecognizers() const;
};

template <typename T>
class impl_IInkManager
{
	auto shim() const { return impl::shim<T, IInkManager>(this); }

public:

	Windows::UI::Input::Inking::InkManipulationMode Mode() const;
	void Mode(Windows::UI::Input::Inking::InkManipulationMode value) const;
	void ProcessPointerDown(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	IInspectable ProcessPointerUpdate(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	Windows::Foundation::Rect ProcessPointerUp(Windows::UI::Input::PointerPoint const & pointerPoint) const;
	void SetDefaultDrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & drawingAttributes) const;
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> RecognizeAsync(Windows::UI::Input::Inking::InkRecognitionTarget recognitionTarget) const;
};

}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Inking { namespace Core {

template <typename T>
class impl_ICoreInkIndependentInputSource
{
	auto shim() const { return impl::shim<T, ICoreInkIndependentInputSource>(this); }

public:

	long long PointerEntering(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerEntering(F handler) const;
	void PointerEntering(long long cookie) const;
	long long PointerHovering(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerHovering(F handler) const;
	void PointerHovering(long long cookie) const;
	long long PointerExiting(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerExiting(F handler) const;
	void PointerExiting(long long cookie) const;
	long long PointerPressing(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerPressing(F handler) const;
	void PointerPressing(long long cookie) const;
	long long PointerMoving(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerMoving(F handler) const;
	void PointerMoving(long long cookie) const;
	long long PointerReleasing(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerReleasing(F handler) const;
	void PointerReleasing(long long cookie) const;
	long long PointerLost(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const;
	template <typename F> long long PointerLost(F handler) const;
	void PointerLost(long long cookie) const;
	Windows::UI::Input::Inking::InkPresenter InkPresenter() const;
};

template <typename T>
class impl_ICoreInkIndependentInputSourceStatics
{
	auto shim() const { return impl::shim<T, ICoreInkIndependentInputSourceStatics>(this); }

public:

	Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource Create(Windows::UI::Input::Inking::InkPresenter const & inkPresenter) const;
};

}}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Popups {

template <typename T>
class impl_IUICommandInvokedHandler
{
	auto shim() const { return impl::shim<T, IUICommandInvokedHandler>(this); }

public:

	void Invoke(Windows::UI::Popups::IUICommand const & command) const;
};

template <typename T>
class impl_IMessageDialog
{
	auto shim() const { return impl::shim<T, IMessageDialog>(this); }

public:

	hstring Title() const;
	void Title(hstring_ref value) const;
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> Commands() const;
	unsigned DefaultCommandIndex() const;
	void DefaultCommandIndex(unsigned value) const;
	unsigned CancelCommandIndex() const;
	void CancelCommandIndex(unsigned value) const;
	hstring Content() const;
	void Content(hstring_ref value) const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowAsync() const;
	Windows::UI::Popups::MessageDialogOptions Options() const;
	void Options(Windows::UI::Popups::MessageDialogOptions value) const;
};

template <typename T>
class impl_IMessageDialogFactory
{
	auto shim() const { return impl::shim<T, IMessageDialogFactory>(this); }

public:

	Windows::UI::Popups::MessageDialog Create(hstring_ref content) const;
	Windows::UI::Popups::MessageDialog CreateWithTitle(hstring_ref content, hstring_ref title) const;
};

template <typename T>
class impl_IUICommand
{
	auto shim() const { return impl::shim<T, IUICommand>(this); }

public:

	hstring Label() const;
	void Label(hstring_ref value) const;
	Windows::UI::Popups::IUICommandInvokedHandler Invoked() const;
	void Invoked(Windows::UI::Popups::IUICommandInvokedHandler const & value) const;
	template <typename F> void Invoked(F value) const;
	IInspectable Id() const;
	void Id(IInspectable const & value) const;
};

template <typename T>
class impl_IUICommandFactory
{
	auto shim() const { return impl::shim<T, IUICommandFactory>(this); }

public:

	Windows::UI::Popups::UICommand Create(hstring_ref label) const;
	Windows::UI::Popups::UICommand CreateWithHandler(hstring_ref label, Windows::UI::Popups::IUICommandInvokedHandler const & action) const;
	template <typename F> Windows::UI::Popups::UICommand CreateWithHandler(hstring_ref label, F action) const;
	Windows::UI::Popups::UICommand CreateWithHandlerAndId(hstring_ref label, Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId) const;
	template <typename F> Windows::UI::Popups::UICommand CreateWithHandlerAndId(hstring_ref label, F action, IInspectable const & commandId) const;
};

template <typename T>
class impl_IPopupMenu
{
	auto shim() const { return impl::shim<T, IPopupMenu>(this); }

public:

	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> Commands() const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowAsync(Windows::Foundation::Point const & invocationPoint) const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowForSelectionAsync(Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> ShowForSelectionAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement) const;
};

}}}}

namespace winrt { namespace Windows { namespace UI { namespace ViewManagement {

template <typename T>
class impl_IApplicationViewSwitcherStatics
{
	auto shim() const { return impl::shim<T, IApplicationViewSwitcherStatics>(this); }

public:

	void DisableShowingMainViewOnActivation() const;
	Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId) const;
	Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId, Windows::UI::ViewManagement::ViewSizePreference sizePreference) const;
	Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId, Windows::UI::ViewManagement::ViewSizePreference sizePreference, int anchorViewId, Windows::UI::ViewManagement::ViewSizePreference anchorSizePreference) const;
	Windows::Foundation::IAsyncAction SwitchAsync(int viewId) const;
	Windows::Foundation::IAsyncAction SwitchAsync(int toViewId, int fromViewId) const;
	Windows::Foundation::IAsyncAction SwitchAsync(int toViewId, int fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions options) const;
	Windows::Foundation::IAsyncOperation<bool> PrepareForCustomAnimatedSwitchAsync(int toViewId, int fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions options) const;
};

template <typename T>
class impl_IApplicationViewSwitcherStatics2
{
	auto shim() const { return impl::shim<T, IApplicationViewSwitcherStatics2>(this); }

public:

	void DisableSystemViewActivationPolicy() const;
};

template <typename T>
class impl_IApplicationViewInteropStatics
{
	auto shim() const { return impl::shim<T, IApplicationViewInteropStatics>(this); }

public:

	int GetApplicationViewIdForWindow(Windows::UI::Core::ICoreWindow const & window) const;
};

template <typename T>
class impl_IApplicationViewStatics
{
	auto shim() const { return impl::shim<T, IApplicationViewStatics>(this); }

public:

	Windows::UI::ViewManagement::ApplicationViewState Value() const;
	bool TryUnsnap() const;
};

template <typename T>
class impl_IApplicationViewStatics2
{
	auto shim() const { return impl::shim<T, IApplicationViewStatics2>(this); }

public:

	Windows::UI::ViewManagement::ApplicationView GetForCurrentView() const;
	bool TerminateAppOnFinalViewClose() const;
	void TerminateAppOnFinalViewClose(bool value) const;
};

template <typename T>
class impl_IApplicationViewStatics3
{
	auto shim() const { return impl::shim<T, IApplicationViewStatics3>(this); }

public:

	Windows::UI::ViewManagement::ApplicationViewWindowingMode PreferredLaunchWindowingMode() const;
	void PreferredLaunchWindowingMode(Windows::UI::ViewManagement::ApplicationViewWindowingMode value) const;
	Windows::Foundation::Size PreferredLaunchViewSize() const;
	void PreferredLaunchViewSize(Windows::Foundation::Size const & value) const;
};

template <typename T>
class impl_IApplicationView
{
	auto shim() const { return impl::shim<T, IApplicationView>(this); }

public:

	Windows::UI::ViewManagement::ApplicationViewOrientation Orientation() const;
	bool AdjacentToLeftDisplayEdge() const;
	bool AdjacentToRightDisplayEdge() const;
	bool IsFullScreen() const;
	bool IsOnLockScreen() const;
	bool IsScreenCaptureEnabled() const;
	void IsScreenCaptureEnabled(bool value) const;
	void Title(hstring_ref value) const;
	hstring Title() const;
	int Id() const;
	long long Consolidated(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::ApplicationView, Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs> const & handler) const;
	template <typename F> long long Consolidated(F handler) const;
	void Consolidated(long long token) const;
};

template <typename T>
class impl_IApplicationView2
{
	auto shim() const { return impl::shim<T, IApplicationView2>(this); }

public:

	bool SuppressSystemOverlays() const;
	void SuppressSystemOverlays(bool value) const;
	Windows::Foundation::Rect VisibleBounds() const;
	long long VisibleBoundsChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::ApplicationView, IInspectable> const & handler) const;
	template <typename F> long long VisibleBoundsChanged(F handler) const;
	void VisibleBoundsChanged(long long token) const;
	bool SetDesiredBoundsMode(Windows::UI::ViewManagement::ApplicationViewBoundsMode boundsMode) const;
	Windows::UI::ViewManagement::ApplicationViewBoundsMode DesiredBoundsMode() const;
};

template <typename T>
class impl_IApplicationViewTitleBar
{
	auto shim() const { return impl::shim<T, IApplicationViewTitleBar>(this); }

public:

	void ForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::UI::Color> ForegroundColor() const;
	void BackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::UI::Color> BackgroundColor() const;
	void ButtonForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::UI::Color> ButtonForegroundColor() const;
	void ButtonBackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::UI::Color> ButtonBackgroundColor() const;
	void ButtonHoverForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::UI::Color> ButtonHoverForegroundColor() const;
	void ButtonHoverBackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::UI::Color> ButtonHoverBackgroundColor() const;
	void ButtonPressedForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::UI::Color> ButtonPressedForegroundColor() const;
	void ButtonPressedBackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::UI::Color> ButtonPressedBackgroundColor() const;
	void InactiveForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::UI::Color> InactiveForegroundColor() const;
	void InactiveBackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::UI::Color> InactiveBackgroundColor() const;
	void ButtonInactiveForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::UI::Color> ButtonInactiveForegroundColor() const;
	void ButtonInactiveBackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::UI::Color> ButtonInactiveBackgroundColor() const;
};

template <typename T>
class impl_IApplicationView3
{
	auto shim() const { return impl::shim<T, IApplicationView3>(this); }

public:

	Windows::UI::ViewManagement::ApplicationViewTitleBar TitleBar() const;
	Windows::UI::ViewManagement::FullScreenSystemOverlayMode FullScreenSystemOverlayMode() const;
	void FullScreenSystemOverlayMode(Windows::UI::ViewManagement::FullScreenSystemOverlayMode value) const;
	bool IsFullScreenMode() const;
	bool TryEnterFullScreenMode() const;
	void ExitFullScreenMode() const;
	void ShowStandardSystemOverlays() const;
	bool TryResizeView(Windows::Foundation::Size const & value) const;
	void SetPreferredMinSize(Windows::Foundation::Size const & minSize) const;
};

template <typename T>
class impl_IApplicationViewFullscreenStatics
{
	auto shim() const { return impl::shim<T, IApplicationViewFullscreenStatics>(this); }

public:

	bool TryUnsnapToFullscreen() const;
};

template <typename T>
class impl_IApplicationViewConsolidatedEventArgs
{
	auto shim() const { return impl::shim<T, IApplicationViewConsolidatedEventArgs>(this); }

public:

	bool IsUserInitiated() const;
};

template <typename T>
class impl_IActivationViewSwitcher
{
	auto shim() const { return impl::shim<T, IActivationViewSwitcher>(this); }

public:

	Windows::Foundation::IAsyncAction ShowAsStandaloneAsync(int viewId) const;
	Windows::Foundation::IAsyncAction ShowAsStandaloneAsync(int viewId, Windows::UI::ViewManagement::ViewSizePreference sizePreference) const;
	bool IsViewPresentedOnActivationVirtualDesktop(int viewId) const;
};

template <typename T>
class impl_IApplicationViewTransferContext
{
	auto shim() const { return impl::shim<T, IApplicationViewTransferContext>(this); }

public:

	int ViewId() const;
	void ViewId(int value) const;
};

template <typename T>
class impl_IApplicationViewTransferContextStatics
{
	auto shim() const { return impl::shim<T, IApplicationViewTransferContextStatics>(this); }

public:

	hstring DataPackageFormatId() const;
};

template <typename T>
class impl_IInputPaneVisibilityEventArgs
{
	auto shim() const { return impl::shim<T, IInputPaneVisibilityEventArgs>(this); }

public:

	Windows::Foundation::Rect OccludedRect() const;
	void EnsuredFocusedElementInView(bool value) const;
	bool EnsuredFocusedElementInView() const;
};

template <typename T>
class impl_IInputPane
{
	auto shim() const { return impl::shim<T, IInputPane>(this); }

public:

	long long Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs> const & handler) const;
	template <typename F> long long Showing(F handler) const;
	void Showing(long long token) const;
	long long Hiding(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs> const & handler) const;
	template <typename F> long long Hiding(F handler) const;
	void Hiding(long long token) const;
	Windows::Foundation::Rect OccludedRect() const;
};

template <typename T>
class impl_IInputPane2
{
	auto shim() const { return impl::shim<T, IInputPane2>(this); }

public:

	bool TryShow() const;
	bool TryHide() const;
};

template <typename T>
class impl_IInputPaneControl
{
	auto shim() const { return impl::shim<T, IInputPaneControl>(this); }

public:

	bool Visible() const;
	void Visible(bool value) const;
};

template <typename T>
class impl_IInputPaneStatics
{
	auto shim() const { return impl::shim<T, IInputPaneStatics>(this); }

public:

	Windows::UI::ViewManagement::InputPane GetForCurrentView() const;
};

template <typename T>
class impl_IProjectionManagerStatics
{
	auto shim() const { return impl::shim<T, IProjectionManagerStatics>(this); }

public:

	Windows::Foundation::IAsyncAction StartProjectingAsync(int projectionViewId, int anchorViewId) const;
	Windows::Foundation::IAsyncAction SwapDisplaysForViewsAsync(int projectionViewId, int anchorViewId) const;
	Windows::Foundation::IAsyncAction StopProjectingAsync(int projectionViewId, int anchorViewId) const;
	bool ProjectionDisplayAvailable() const;
	long long ProjectionDisplayAvailableChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const;
	template <typename F> long long ProjectionDisplayAvailableChanged(F handler) const;
	void ProjectionDisplayAvailableChanged(long long token) const;
};

template <typename T>
class impl_IProjectionManagerStatics2
{
	auto shim() const { return impl::shim<T, IProjectionManagerStatics2>(this); }

public:

	Windows::Foundation::IAsyncAction StartProjectingAsync(int projectionViewId, int anchorViewId, Windows::Devices::Enumeration::DeviceInformation const & displayDeviceInfo) const;
	Windows::Foundation::IAsyncOperation<bool> RequestStartProjectingAsync(int projectionViewId, int anchorViewId, Windows::Foundation::Rect const & selection) const;
	Windows::Foundation::IAsyncOperation<bool> RequestStartProjectingAsync(int projectionViewId, int anchorViewId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement prefferedPlacement) const;
	hstring GetDeviceSelector() const;
};

template <typename T>
class impl_IUIViewSettings
{
	auto shim() const { return impl::shim<T, IUIViewSettings>(this); }

public:

	Windows::UI::ViewManagement::UserInteractionMode UserInteractionMode() const;
};

template <typename T>
class impl_IUIViewSettingsStatics
{
	auto shim() const { return impl::shim<T, IUIViewSettingsStatics>(this); }

public:

	Windows::UI::ViewManagement::UIViewSettings GetForCurrentView() const;
};

template <typename T>
class impl_IAccessibilitySettings
{
	auto shim() const { return impl::shim<T, IAccessibilitySettings>(this); }

public:

	bool HighContrast() const;
	hstring HighContrastScheme() const;
	long long HighContrastChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::AccessibilitySettings, IInspectable> const & handler) const;
	template <typename F> long long HighContrastChanged(F handler) const;
	void HighContrastChanged(long long cookie) const;
};

template <typename T>
class impl_IUISettings
{
	auto shim() const { return impl::shim<T, IUISettings>(this); }

public:

	Windows::UI::ViewManagement::HandPreference HandPreference() const;
	Windows::Foundation::Size CursorSize() const;
	Windows::Foundation::Size ScrollBarSize() const;
	Windows::Foundation::Size ScrollBarArrowSize() const;
	Windows::Foundation::Size ScrollBarThumbBoxSize() const;
	unsigned MessageDuration() const;
	bool AnimationsEnabled() const;
	bool CaretBrowsingEnabled() const;
	unsigned CaretBlinkRate() const;
	unsigned CaretWidth() const;
	unsigned DoubleClickTime() const;
	unsigned MouseHoverTime() const;
	Windows::UI::Color UIElementColor(Windows::UI::ViewManagement::UIElementType desiredElement) const;
};

template <typename T>
class impl_IUISettings2
{
	auto shim() const { return impl::shim<T, IUISettings2>(this); }

public:

	double TextScaleFactor() const;
	long long TextScaleFactorChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::UISettings, IInspectable> const & handler) const;
	template <typename F> long long TextScaleFactorChanged(F handler) const;
	void TextScaleFactorChanged(long long cookie) const;
};

template <typename T>
class impl_IUISettings3
{
	auto shim() const { return impl::shim<T, IUISettings3>(this); }

public:

	Windows::UI::Color GetColorValue(Windows::UI::ViewManagement::UIColorType desiredColor) const;
	long long ColorValuesChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::UISettings, IInspectable> const & handler) const;
	template <typename F> long long ColorValuesChanged(F handler) const;
	void ColorValuesChanged(long long cookie) const;
};

template <typename T>
class impl_IApplicationViewScaling
{
	auto shim() const { return impl::shim<T, IApplicationViewScaling>(this); }

public:

};

template <typename T>
class impl_IApplicationViewScalingStatics
{
	auto shim() const { return impl::shim<T, IApplicationViewScalingStatics>(this); }

public:

	bool DisableLayoutScaling() const;
	bool TrySetDisableLayoutScaling(bool disableLayoutScaling) const;
};

}}}}

namespace winrt { namespace Windows { namespace Web {

template <typename T>
class impl_IUriToStreamResolver
{
	auto shim() const { return impl::shim<T, IUriToStreamResolver>(this); }

public:

	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> UriToStreamAsync(Windows::Foundation::Uri const & uri) const;
};

template <typename T>
class impl_IWebErrorStatics
{
	auto shim() const { return impl::shim<T, IWebErrorStatics>(this); }

public:

	Windows::Web::WebErrorStatus GetStatus(int hresult) const;
};

}}}

namespace winrt { namespace Windows { namespace Web { namespace Http {

template <typename T>
class impl_IHttpClientFactory
{
	auto shim() const { return impl::shim<T, IHttpClientFactory>(this); }

public:

	Windows::Web::Http::HttpClient Create(Windows::Web::Http::Filters::IHttpFilter const & filter) const;
};

template <typename T>
class impl_IHttpClient
{
	auto shim() const { return impl::shim<T, IHttpClient>(this); }

public:

	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> DeleteAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> GetAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> GetAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::HttpCompletionOption completionOption) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, winrt::Windows::Web::Http::HttpProgress> GetBufferAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, winrt::Windows::Web::Http::HttpProgress> GetInputStreamAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<hstring, winrt::Windows::Web::Http::HttpProgress> GetStringAsync(Windows::Foundation::Uri const & uri) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> PostAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::IHttpContent const & content) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> PutAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::IHttpContent const & content) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request) const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request, Windows::Web::Http::HttpCompletionOption completionOption) const;
	Windows::Web::Http::Headers::HttpRequestHeaderCollection DefaultRequestHeaders() const;
};

template <typename T>
class impl_IHttpContent
{
	auto shim() const { return impl::shim<T, IHttpContent>(this); }

public:

	Windows::Web::Http::Headers::HttpContentHeaderCollection Headers() const;
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> BufferAllAsync() const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned long long> ReadAsBufferAsync() const;
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, unsigned long long> ReadAsInputStreamAsync() const;
	Windows::Foundation::IAsyncOperationWithProgress<hstring, unsigned long long> ReadAsStringAsync() const;
	bool TryComputeLength(unsigned long long & length) const;
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> WriteToStreamAsync(Windows::Storage::Streams::IOutputStream const & outputStream) const;
};

template <typename T>
class impl_IHttpCookieManager
{
	auto shim() const { return impl::shim<T, IHttpCookieManager>(this); }

public:

	bool SetCookie(Windows::Web::Http::HttpCookie const & cookie) const;
	bool SetCookie(Windows::Web::Http::HttpCookie const & cookie, bool thirdParty) const;
	void DeleteCookie(Windows::Web::Http::HttpCookie const & cookie) const;
	Windows::Web::Http::HttpCookieCollection GetCookies(Windows::Foundation::Uri const & uri) const;
};

template <typename T>
class impl_IHttpCookieFactory
{
	auto shim() const { return impl::shim<T, IHttpCookieFactory>(this); }

public:

	Windows::Web::Http::HttpCookie Create(hstring_ref name, hstring_ref domain, hstring_ref path) const;
};

template <typename T>
class impl_IHttpCookie
{
	auto shim() const { return impl::shim<T, IHttpCookie>(this); }

public:

	hstring Name() const;
	hstring Domain() const;
	hstring Path() const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> Expires() const;
	void Expires(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const;
	bool HttpOnly() const;
	void HttpOnly(bool value) const;
	bool Secure() const;
	void Secure(bool value) const;
	hstring Value() const;
	void Value(hstring_ref value) const;
};

template <typename T>
class impl_IHttpMethodStatics
{
	auto shim() const { return impl::shim<T, IHttpMethodStatics>(this); }

public:

	Windows::Web::Http::HttpMethod Delete() const;
	Windows::Web::Http::HttpMethod Get() const;
	Windows::Web::Http::HttpMethod Head() const;
	Windows::Web::Http::HttpMethod Options() const;
	Windows::Web::Http::HttpMethod Patch() const;
	Windows::Web::Http::HttpMethod Post() const;
	Windows::Web::Http::HttpMethod Put() const;
};

template <typename T>
class impl_IHttpMethodFactory
{
	auto shim() const { return impl::shim<T, IHttpMethodFactory>(this); }

public:

	Windows::Web::Http::HttpMethod Create(hstring_ref method) const;
};

template <typename T>
class impl_IHttpMethod
{
	auto shim() const { return impl::shim<T, IHttpMethod>(this); }

public:

	hstring Method() const;
};

template <typename T>
class impl_IHttpTransportInformation
{
	auto shim() const { return impl::shim<T, IHttpTransportInformation>(this); }

public:

	Windows::Security::Cryptography::Certificates::Certificate ServerCertificate() const;
	Windows::Networking::Sockets::SocketSslErrorSeverity ServerCertificateErrorSeverity() const;
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> ServerCertificateErrors() const;
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> ServerIntermediateCertificates() const;
};

template <typename T>
class impl_IHttpRequestMessageFactory
{
	auto shim() const { return impl::shim<T, IHttpRequestMessageFactory>(this); }

public:

	Windows::Web::Http::HttpRequestMessage Create(Windows::Web::Http::HttpMethod const & method, Windows::Foundation::Uri const & uri) const;
};

template <typename T>
class impl_IHttpRequestMessage
{
	auto shim() const { return impl::shim<T, IHttpRequestMessage>(this); }

public:

	Windows::Web::Http::IHttpContent Content() const;
	void Content(Windows::Web::Http::IHttpContent const & value) const;
	Windows::Web::Http::Headers::HttpRequestHeaderCollection Headers() const;
	Windows::Web::Http::HttpMethod Method() const;
	void Method(Windows::Web::Http::HttpMethod const & value) const;
	Windows::Foundation::Collections::IMap<hstring, IInspectable> Properties() const;
	Windows::Foundation::Uri RequestUri() const;
	void RequestUri(Windows::Foundation::Uri const & value) const;
	Windows::Web::Http::HttpTransportInformation TransportInformation() const;
};

template <typename T>
class impl_IHttpResponseMessageFactory
{
	auto shim() const { return impl::shim<T, IHttpResponseMessageFactory>(this); }

public:

	Windows::Web::Http::HttpResponseMessage Create(Windows::Web::Http::HttpStatusCode statusCode) const;
};

template <typename T>
class impl_IHttpResponseMessage
{
	auto shim() const { return impl::shim<T, IHttpResponseMessage>(this); }

public:

	Windows::Web::Http::IHttpContent Content() const;
	void Content(Windows::Web::Http::IHttpContent const & value) const;
	Windows::Web::Http::Headers::HttpResponseHeaderCollection Headers() const;
	bool IsSuccessStatusCode() const;
	hstring ReasonPhrase() const;
	void ReasonPhrase(hstring_ref value) const;
	Windows::Web::Http::HttpRequestMessage RequestMessage() const;
	void RequestMessage(Windows::Web::Http::HttpRequestMessage const & value) const;
	Windows::Web::Http::HttpResponseMessageSource Source() const;
	void Source(Windows::Web::Http::HttpResponseMessageSource value) const;
	Windows::Web::Http::HttpStatusCode StatusCode() const;
	void StatusCode(Windows::Web::Http::HttpStatusCode value) const;
	Windows::Web::Http::HttpVersion Version() const;
	void Version(Windows::Web::Http::HttpVersion value) const;
	Windows::Web::Http::HttpResponseMessage EnsureSuccessStatusCode() const;
};

template <typename T>
class impl_IHttpStringContentFactory
{
	auto shim() const { return impl::shim<T, IHttpStringContentFactory>(this); }

public:

	Windows::Web::Http::HttpStringContent CreateFromString(hstring_ref content) const;
	Windows::Web::Http::HttpStringContent CreateFromStringWithEncoding(hstring_ref content, Windows::Storage::Streams::UnicodeEncoding encoding) const;
	Windows::Web::Http::HttpStringContent CreateFromStringWithEncodingAndMediaType(hstring_ref content, Windows::Storage::Streams::UnicodeEncoding encoding, hstring_ref mediaType) const;
};

template <typename T>
class impl_IHttpBufferContentFactory
{
	auto shim() const { return impl::shim<T, IHttpBufferContentFactory>(this); }

public:

	Windows::Web::Http::HttpBufferContent CreateFromBuffer(Windows::Storage::Streams::IBuffer const & content) const;
	Windows::Web::Http::HttpBufferContent CreateFromBufferWithOffset(Windows::Storage::Streams::IBuffer const & content, unsigned offset, unsigned count) const;
};

template <typename T>
class impl_IHttpStreamContentFactory
{
	auto shim() const { return impl::shim<T, IHttpStreamContentFactory>(this); }

public:

	Windows::Web::Http::HttpStreamContent CreateFromInputStream(Windows::Storage::Streams::IInputStream const & content) const;
};

template <typename T>
class impl_IHttpFormUrlEncodedContentFactory
{
	auto shim() const { return impl::shim<T, IHttpFormUrlEncodedContentFactory>(this); }

public:

	Windows::Web::Http::HttpFormUrlEncodedContent Create(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<hstring, hstring>> const & content) const;
};

template <typename T>
class impl_IHttpMultipartContentFactory
{
	auto shim() const { return impl::shim<T, IHttpMultipartContentFactory>(this); }

public:

	Windows::Web::Http::HttpMultipartContent CreateWithSubtype(hstring_ref subtype) const;
	Windows::Web::Http::HttpMultipartContent CreateWithSubtypeAndBoundary(hstring_ref subtype, hstring_ref boundary) const;
};

template <typename T>
class impl_IHttpMultipartContent
{
	auto shim() const { return impl::shim<T, IHttpMultipartContent>(this); }

public:

	void Add(Windows::Web::Http::IHttpContent const & content) const;
};

template <typename T>
class impl_IHttpMultipartFormDataContentFactory
{
	auto shim() const { return impl::shim<T, IHttpMultipartFormDataContentFactory>(this); }

public:

	Windows::Web::Http::HttpMultipartFormDataContent CreateWithBoundary(hstring_ref boundary) const;
};

template <typename T>
class impl_IHttpMultipartFormDataContent
{
	auto shim() const { return impl::shim<T, IHttpMultipartFormDataContent>(this); }

public:

	void Add(Windows::Web::Http::IHttpContent const & content) const;
	void Add(Windows::Web::Http::IHttpContent const & content, hstring_ref name) const;
	void Add(Windows::Web::Http::IHttpContent const & content, hstring_ref name, hstring_ref fileName) const;
};

}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http { namespace Filters {

template <typename T>
class impl_IHttpFilter
{
	auto shim() const { return impl::shim<T, IHttpFilter>(this); }

public:

	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request) const;
};

template <typename T>
class impl_IHttpCacheControl
{
	auto shim() const { return impl::shim<T, IHttpCacheControl>(this); }

public:

	Windows::Web::Http::Filters::HttpCacheReadBehavior ReadBehavior() const;
	void ReadBehavior(Windows::Web::Http::Filters::HttpCacheReadBehavior value) const;
	Windows::Web::Http::Filters::HttpCacheWriteBehavior WriteBehavior() const;
	void WriteBehavior(Windows::Web::Http::Filters::HttpCacheWriteBehavior value) const;
};

template <typename T>
class impl_IHttpBaseProtocolFilter
{
	auto shim() const { return impl::shim<T, IHttpBaseProtocolFilter>(this); }

public:

	bool AllowAutoRedirect() const;
	void AllowAutoRedirect(bool value) const;
	bool AllowUI() const;
	void AllowUI(bool value) const;
	bool AutomaticDecompression() const;
	void AutomaticDecompression(bool value) const;
	Windows::Web::Http::Filters::HttpCacheControl CacheControl() const;
	Windows::Web::Http::HttpCookieManager CookieManager() const;
	Windows::Security::Cryptography::Certificates::Certificate ClientCertificate() const;
	void ClientCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const;
	Windows::Foundation::Collections::IVector<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> IgnorableServerCertificateErrors() const;
	unsigned MaxConnectionsPerServer() const;
	void MaxConnectionsPerServer(unsigned value) const;
	Windows::Security::Credentials::PasswordCredential ProxyCredential() const;
	void ProxyCredential(Windows::Security::Credentials::PasswordCredential const & value) const;
	Windows::Security::Credentials::PasswordCredential ServerCredential() const;
	void ServerCredential(Windows::Security::Credentials::PasswordCredential const & value) const;
	bool UseProxy() const;
	void UseProxy(bool value) const;
};

template <typename T>
class impl_IHttpBaseProtocolFilter2
{
	auto shim() const { return impl::shim<T, IHttpBaseProtocolFilter2>(this); }

public:

	Windows::Web::Http::HttpVersion MaxVersion() const;
	void MaxVersion(Windows::Web::Http::HttpVersion value) const;
};

template <typename T>
class impl_IHttpBaseProtocolFilter3
{
	auto shim() const { return impl::shim<T, IHttpBaseProtocolFilter3>(this); }

public:

	Windows::Web::Http::Filters::HttpCookieUsageBehavior CookieUsageBehavior() const;
	void CookieUsageBehavior(Windows::Web::Http::Filters::HttpCookieUsageBehavior value) const;
};

}}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http { namespace Headers {

template <typename T>
class impl_IHttpContentHeaderCollection
{
	auto shim() const { return impl::shim<T, IHttpContentHeaderCollection>(this); }

public:

	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue ContentDisposition() const;
	void ContentDisposition(Windows::Web::Http::Headers::HttpContentDispositionHeaderValue const & value) const;
	Windows::Web::Http::Headers::HttpContentCodingHeaderValueCollection ContentEncoding() const;
	Windows::Web::Http::Headers::HttpLanguageHeaderValueCollection ContentLanguage() const;
	Windows::Foundation::IReference<unsigned long long> ContentLength() const;
	void ContentLength(Windows::Foundation::IReference<unsigned long long> const & value) const;
	Windows::Foundation::Uri ContentLocation() const;
	void ContentLocation(Windows::Foundation::Uri const & value) const;
	Windows::Storage::Streams::IBuffer ContentMD5() const;
	void ContentMD5(Windows::Storage::Streams::IBuffer const & value) const;
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue ContentRange() const;
	void ContentRange(Windows::Web::Http::Headers::HttpContentRangeHeaderValue const & value) const;
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue ContentType() const;
	void ContentType(Windows::Web::Http::Headers::HttpMediaTypeHeaderValue const & value) const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> Expires() const;
	void Expires(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> LastModified() const;
	void LastModified(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const;
	void Append(hstring_ref name, hstring_ref value) const;
	bool TryAppendWithoutValidation(hstring_ref name, hstring_ref value) const;
};

template <typename T>
class impl_IHttpRequestHeaderCollection
{
	auto shim() const { return impl::shim<T, IHttpRequestHeaderCollection>(this); }

public:

	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValueCollection Accept() const;
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValueCollection AcceptEncoding() const;
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValueCollection AcceptLanguage() const;
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue Authorization() const;
	void Authorization(Windows::Web::Http::Headers::HttpCredentialsHeaderValue const & value) const;
	Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection CacheControl() const;
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection Connection() const;
	Windows::Web::Http::Headers::HttpCookiePairHeaderValueCollection Cookie() const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> Date() const;
	void Date(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const;
	Windows::Web::Http::Headers::HttpExpectationHeaderValueCollection Expect() const;
	hstring From() const;
	void From(hstring_ref value) const;
	Windows::Networking::HostName Host() const;
	void Host(Windows::Networking::HostName const & value) const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> IfModifiedSince() const;
	void IfModifiedSince(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> IfUnmodifiedSince() const;
	void IfUnmodifiedSince(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::IReference<unsigned> MaxForwards() const;
	void MaxForwards(Windows::Foundation::IReference<unsigned> const & value) const;
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue ProxyAuthorization() const;
	void ProxyAuthorization(Windows::Web::Http::Headers::HttpCredentialsHeaderValue const & value) const;
	Windows::Foundation::Uri Referer() const;
	void Referer(Windows::Foundation::Uri const & value) const;
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection TransferEncoding() const;
	Windows::Web::Http::Headers::HttpProductInfoHeaderValueCollection UserAgent() const;
	void Append(hstring_ref name, hstring_ref value) const;
	bool TryAppendWithoutValidation(hstring_ref name, hstring_ref value) const;
};

template <typename T>
class impl_IHttpResponseHeaderCollection
{
	auto shim() const { return impl::shim<T, IHttpResponseHeaderCollection>(this); }

public:

	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> Age() const;
	void Age(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const;
	Windows::Web::Http::Headers::HttpMethodHeaderValueCollection Allow() const;
	Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection CacheControl() const;
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection Connection() const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> Date() const;
	void Date(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const;
	Windows::Foundation::Uri Location() const;
	void Location(Windows::Foundation::Uri const & value) const;
	Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection ProxyAuthenticate() const;
	Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue RetryAfter() const;
	void RetryAfter(Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue const & value) const;
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection TransferEncoding() const;
	Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection WwwAuthenticate() const;
	void Append(hstring_ref name, hstring_ref value) const;
	bool TryAppendWithoutValidation(hstring_ref name, hstring_ref value) const;
};

template <typename T>
class impl_IHttpCacheDirectiveHeaderValueCollection
{
	auto shim() const { return impl::shim<T, IHttpCacheDirectiveHeaderValueCollection>(this); }

public:

	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> MaxAge() const;
	void MaxAge(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> MaxStale() const;
	void MaxStale(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> MinFresh() const;
	void MinFresh(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> SharedMaxAge() const;
	void SharedMaxAge(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const;
	void ParseAdd(hstring_ref input) const;
	bool TryParseAdd(hstring_ref input) const;
};

template <typename T>
class impl_IHttpChallengeHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpChallengeHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpChallengeHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue) const;
};

template <typename T>
class impl_IHttpChallengeHeaderValueFactory
{
	auto shim() const { return impl::shim<T, IHttpChallengeHeaderValueFactory>(this); }

public:

	Windows::Web::Http::Headers::HttpChallengeHeaderValue CreateFromScheme(hstring_ref scheme) const;
	Windows::Web::Http::Headers::HttpChallengeHeaderValue CreateFromSchemeWithToken(hstring_ref scheme, hstring_ref token) const;
};

template <typename T>
class impl_IHttpChallengeHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpChallengeHeaderValue>(this); }

public:

	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
	hstring Scheme() const;
	hstring Token() const;
};

template <typename T>
class impl_IHttpChallengeHeaderValueCollection
{
	auto shim() const { return impl::shim<T, IHttpChallengeHeaderValueCollection>(this); }

public:

	void ParseAdd(hstring_ref input) const;
	bool TryParseAdd(hstring_ref input) const;
};

template <typename T>
class impl_IHttpCredentialsHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpCredentialsHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpCredentialsHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue) const;
};

template <typename T>
class impl_IHttpCredentialsHeaderValueFactory
{
	auto shim() const { return impl::shim<T, IHttpCredentialsHeaderValueFactory>(this); }

public:

	Windows::Web::Http::Headers::HttpCredentialsHeaderValue CreateFromScheme(hstring_ref scheme) const;
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue CreateFromSchemeWithToken(hstring_ref scheme, hstring_ref token) const;
};

template <typename T>
class impl_IHttpCredentialsHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpCredentialsHeaderValue>(this); }

public:

	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
	hstring Scheme() const;
	hstring Token() const;
};

template <typename T>
class impl_IHttpConnectionOptionHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpConnectionOptionHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue) const;
};

template <typename T>
class impl_IHttpConnectionOptionHeaderValueFactory
{
	auto shim() const { return impl::shim<T, IHttpConnectionOptionHeaderValueFactory>(this); }

public:

	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue Create(hstring_ref token) const;
};

template <typename T>
class impl_IHttpConnectionOptionHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpConnectionOptionHeaderValue>(this); }

public:

	hstring Token() const;
};

template <typename T>
class impl_IHttpConnectionOptionHeaderValueCollection
{
	auto shim() const { return impl::shim<T, IHttpConnectionOptionHeaderValueCollection>(this); }

public:

	void ParseAdd(hstring_ref input) const;
	bool TryParseAdd(hstring_ref input) const;
};

template <typename T>
class impl_IHttpContentCodingHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpContentCodingHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpContentCodingHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue) const;
};

template <typename T>
class impl_IHttpContentCodingHeaderValueFactory
{
	auto shim() const { return impl::shim<T, IHttpContentCodingHeaderValueFactory>(this); }

public:

	Windows::Web::Http::Headers::HttpContentCodingHeaderValue Create(hstring_ref contentCoding) const;
};

template <typename T>
class impl_IHttpContentCodingHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpContentCodingHeaderValue>(this); }

public:

	hstring ContentCoding() const;
};

template <typename T>
class impl_IHttpContentCodingHeaderValueCollection
{
	auto shim() const { return impl::shim<T, IHttpContentCodingHeaderValueCollection>(this); }

public:

	void ParseAdd(hstring_ref input) const;
	bool TryParseAdd(hstring_ref input) const;
};

template <typename T>
class impl_IHttpContentDispositionHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpContentDispositionHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue) const;
};

template <typename T>
class impl_IHttpContentDispositionHeaderValueFactory
{
	auto shim() const { return impl::shim<T, IHttpContentDispositionHeaderValueFactory>(this); }

public:

	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue Create(hstring_ref dispositionType) const;
};

template <typename T>
class impl_IHttpContentDispositionHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpContentDispositionHeaderValue>(this); }

public:

	hstring DispositionType() const;
	void DispositionType(hstring_ref value) const;
	hstring FileName() const;
	void FileName(hstring_ref value) const;
	hstring FileNameStar() const;
	void FileNameStar(hstring_ref value) const;
	hstring Name() const;
	void Name(hstring_ref value) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
	Windows::Foundation::IReference<unsigned long long> Size() const;
	void Size(Windows::Foundation::IReference<unsigned long long> const & value) const;
};

template <typename T>
class impl_IHttpContentRangeHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpContentRangeHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpContentRangeHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue) const;
};

template <typename T>
class impl_IHttpContentRangeHeaderValueFactory
{
	auto shim() const { return impl::shim<T, IHttpContentRangeHeaderValueFactory>(this); }

public:

	Windows::Web::Http::Headers::HttpContentRangeHeaderValue CreateFromLength(unsigned long long length) const;
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue CreateFromRange(unsigned long long from, unsigned long long to) const;
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue CreateFromRangeWithLength(unsigned long long from, unsigned long long to, unsigned long long length) const;
};

template <typename T>
class impl_IHttpContentRangeHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpContentRangeHeaderValue>(this); }

public:

	Windows::Foundation::IReference<unsigned long long> FirstBytePosition() const;
	Windows::Foundation::IReference<unsigned long long> LastBytePosition() const;
	Windows::Foundation::IReference<unsigned long long> Length() const;
	hstring Unit() const;
	void Unit(hstring_ref value) const;
};

template <typename T>
class impl_IHttpCookiePairHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpCookiePairHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpCookiePairHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue) const;
};

template <typename T>
class impl_IHttpCookiePairHeaderValueFactory
{
	auto shim() const { return impl::shim<T, IHttpCookiePairHeaderValueFactory>(this); }

public:

	Windows::Web::Http::Headers::HttpCookiePairHeaderValue CreateFromName(hstring_ref name) const;
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue CreateFromNameWithValue(hstring_ref name, hstring_ref value) const;
};

template <typename T>
class impl_IHttpCookiePairHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpCookiePairHeaderValue>(this); }

public:

	hstring Name() const;
	hstring Value() const;
	void Value(hstring_ref value) const;
};

template <typename T>
class impl_IHttpCookiePairHeaderValueCollection
{
	auto shim() const { return impl::shim<T, IHttpCookiePairHeaderValueCollection>(this); }

public:

	void ParseAdd(hstring_ref input) const;
	bool TryParseAdd(hstring_ref input) const;
};

template <typename T>
class impl_IHttpDateOrDeltaHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpDateOrDeltaHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue) const;
};

template <typename T>
class impl_IHttpDateOrDeltaHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpDateOrDeltaHeaderValue>(this); }

public:

	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> Date() const;
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> Delta() const;
};

template <typename T>
class impl_IHttpExpectationHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpExpectationHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpExpectationHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue) const;
};

template <typename T>
class impl_IHttpExpectationHeaderValueFactory
{
	auto shim() const { return impl::shim<T, IHttpExpectationHeaderValueFactory>(this); }

public:

	Windows::Web::Http::Headers::HttpExpectationHeaderValue CreateFromName(hstring_ref name) const;
	Windows::Web::Http::Headers::HttpExpectationHeaderValue CreateFromNameWithValue(hstring_ref name, hstring_ref value) const;
};

template <typename T>
class impl_IHttpExpectationHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpExpectationHeaderValue>(this); }

public:

	hstring Name() const;
	hstring Value() const;
	void Value(hstring_ref value) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
};

template <typename T>
class impl_IHttpExpectationHeaderValueCollection
{
	auto shim() const { return impl::shim<T, IHttpExpectationHeaderValueCollection>(this); }

public:

	void ParseAdd(hstring_ref input) const;
	bool TryParseAdd(hstring_ref input) const;
};

template <typename T>
class impl_IHttpLanguageHeaderValueCollection
{
	auto shim() const { return impl::shim<T, IHttpLanguageHeaderValueCollection>(this); }

public:

	void ParseAdd(hstring_ref input) const;
	bool TryParseAdd(hstring_ref input) const;
};

template <typename T>
class impl_IHttpLanguageRangeWithQualityHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpLanguageRangeWithQualityHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue) const;
};

template <typename T>
class impl_IHttpLanguageRangeWithQualityHeaderValueFactory
{
	auto shim() const { return impl::shim<T, IHttpLanguageRangeWithQualityHeaderValueFactory>(this); }

public:

	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue CreateFromLanguageRange(hstring_ref languageRange) const;
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue CreateFromLanguageRangeWithQuality(hstring_ref languageRange, double quality) const;
};

template <typename T>
class impl_IHttpLanguageRangeWithQualityHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpLanguageRangeWithQualityHeaderValue>(this); }

public:

	hstring LanguageRange() const;
	Windows::Foundation::IReference<double> Quality() const;
};

template <typename T>
class impl_IHttpLanguageRangeWithQualityHeaderValueCollection
{
	auto shim() const { return impl::shim<T, IHttpLanguageRangeWithQualityHeaderValueCollection>(this); }

public:

	void ParseAdd(hstring_ref input) const;
	bool TryParseAdd(hstring_ref input) const;
};

template <typename T>
class impl_IHttpMediaTypeHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpMediaTypeHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue) const;
};

template <typename T>
class impl_IHttpMediaTypeHeaderValueFactory
{
	auto shim() const { return impl::shim<T, IHttpMediaTypeHeaderValueFactory>(this); }

public:

	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue Create(hstring_ref mediaType) const;
};

template <typename T>
class impl_IHttpMediaTypeHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpMediaTypeHeaderValue>(this); }

public:

	hstring CharSet() const;
	void CharSet(hstring_ref value) const;
	hstring MediaType() const;
	void MediaType(hstring_ref value) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
};

template <typename T>
class impl_IHttpMediaTypeWithQualityHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpMediaTypeWithQualityHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue) const;
};

template <typename T>
class impl_IHttpMediaTypeWithQualityHeaderValueFactory
{
	auto shim() const { return impl::shim<T, IHttpMediaTypeWithQualityHeaderValueFactory>(this); }

public:

	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue CreateFromMediaType(hstring_ref mediaType) const;
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue CreateFromMediaTypeWithQuality(hstring_ref mediaType, double quality) const;
};

template <typename T>
class impl_IHttpMediaTypeWithQualityHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpMediaTypeWithQualityHeaderValue>(this); }

public:

	hstring CharSet() const;
	void CharSet(hstring_ref value) const;
	hstring MediaType() const;
	void MediaType(hstring_ref value) const;
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
	Windows::Foundation::IReference<double> Quality() const;
	void Quality(Windows::Foundation::IReference<double> const & value) const;
};

template <typename T>
class impl_IHttpMediaTypeWithQualityHeaderValueCollection
{
	auto shim() const { return impl::shim<T, IHttpMediaTypeWithQualityHeaderValueCollection>(this); }

public:

	void ParseAdd(hstring_ref input) const;
	bool TryParseAdd(hstring_ref input) const;
};

template <typename T>
class impl_IHttpMethodHeaderValueCollection
{
	auto shim() const { return impl::shim<T, IHttpMethodHeaderValueCollection>(this); }

public:

	void ParseAdd(hstring_ref input) const;
	bool TryParseAdd(hstring_ref input) const;
};

template <typename T>
class impl_IHttpNameValueHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpNameValueHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpNameValueHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue) const;
};

template <typename T>
class impl_IHttpNameValueHeaderValueFactory
{
	auto shim() const { return impl::shim<T, IHttpNameValueHeaderValueFactory>(this); }

public:

	Windows::Web::Http::Headers::HttpNameValueHeaderValue CreateFromName(hstring_ref name) const;
	Windows::Web::Http::Headers::HttpNameValueHeaderValue CreateFromNameWithValue(hstring_ref name, hstring_ref value) const;
};

template <typename T>
class impl_IHttpNameValueHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpNameValueHeaderValue>(this); }

public:

	hstring Name() const;
	hstring Value() const;
	void Value(hstring_ref value) const;
};

template <typename T>
class impl_IHttpProductHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpProductHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpProductHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue) const;
};

template <typename T>
class impl_IHttpProductHeaderValueFactory
{
	auto shim() const { return impl::shim<T, IHttpProductHeaderValueFactory>(this); }

public:

	Windows::Web::Http::Headers::HttpProductHeaderValue CreateFromName(hstring_ref productName) const;
	Windows::Web::Http::Headers::HttpProductHeaderValue CreateFromNameWithVersion(hstring_ref productName, hstring_ref productVersion) const;
};

template <typename T>
class impl_IHttpProductHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpProductHeaderValue>(this); }

public:

	hstring Name() const;
	hstring Version() const;
};

template <typename T>
class impl_IHttpProductInfoHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpProductInfoHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpProductInfoHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue) const;
};

template <typename T>
class impl_IHttpProductInfoHeaderValueFactory
{
	auto shim() const { return impl::shim<T, IHttpProductInfoHeaderValueFactory>(this); }

public:

	Windows::Web::Http::Headers::HttpProductInfoHeaderValue CreateFromComment(hstring_ref productComment) const;
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue CreateFromNameWithVersion(hstring_ref productName, hstring_ref productVersion) const;
};

template <typename T>
class impl_IHttpProductInfoHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpProductInfoHeaderValue>(this); }

public:

	Windows::Web::Http::Headers::HttpProductHeaderValue Product() const;
	hstring Comment() const;
};

template <typename T>
class impl_IHttpProductInfoHeaderValueCollection
{
	auto shim() const { return impl::shim<T, IHttpProductInfoHeaderValueCollection>(this); }

public:

	void ParseAdd(hstring_ref input) const;
	bool TryParseAdd(hstring_ref input) const;
};

template <typename T>
class impl_IHttpContentCodingWithQualityHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpContentCodingWithQualityHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue) const;
};

template <typename T>
class impl_IHttpContentCodingWithQualityHeaderValueFactory
{
	auto shim() const { return impl::shim<T, IHttpContentCodingWithQualityHeaderValueFactory>(this); }

public:

	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue CreateFromValue(hstring_ref contentCoding) const;
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue CreateFromValueWithQuality(hstring_ref contentCoding, double quality) const;
};

template <typename T>
class impl_IHttpContentCodingWithQualityHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpContentCodingWithQualityHeaderValue>(this); }

public:

	hstring ContentCoding() const;
	Windows::Foundation::IReference<double> Quality() const;
};

template <typename T>
class impl_IHttpContentCodingWithQualityHeaderValueCollection
{
	auto shim() const { return impl::shim<T, IHttpContentCodingWithQualityHeaderValueCollection>(this); }

public:

	void ParseAdd(hstring_ref input) const;
	bool TryParseAdd(hstring_ref input) const;
};

template <typename T>
class impl_IHttpTransferCodingHeaderValueStatics
{
	auto shim() const { return impl::shim<T, IHttpTransferCodingHeaderValueStatics>(this); }

public:

	Windows::Web::Http::Headers::HttpTransferCodingHeaderValue Parse(hstring_ref input) const;
	bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue) const;
};

template <typename T>
class impl_IHttpTransferCodingHeaderValueFactory
{
	auto shim() const { return impl::shim<T, IHttpTransferCodingHeaderValueFactory>(this); }

public:

	Windows::Web::Http::Headers::HttpTransferCodingHeaderValue Create(hstring_ref input) const;
};

template <typename T>
class impl_IHttpTransferCodingHeaderValue
{
	auto shim() const { return impl::shim<T, IHttpTransferCodingHeaderValue>(this); }

public:

	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> Parameters() const;
	hstring Value() const;
};

template <typename T>
class impl_IHttpTransferCodingHeaderValueCollection
{
	auto shim() const { return impl::shim<T, IHttpTransferCodingHeaderValueCollection>(this); }

public:

	void ParseAdd(hstring_ref input) const;
	bool TryParseAdd(hstring_ref input) const;
};

}}}}}

namespace winrt { namespace impl {

template <> struct traits<Windows::Foundation::IAsyncActionCompletedHandler>
{
	using abi = ABI::Windows::Foundation::IAsyncActionCompletedHandler;
	template <typename T> using methods = Windows::Foundation::impl_IAsyncActionCompletedHandler<T>;
};

template <> struct traits<Windows::Foundation::IDeferralCompletedHandler>
{
	using abi = ABI::Windows::Foundation::IDeferralCompletedHandler;
	template <typename T> using methods = Windows::Foundation::impl_IDeferralCompletedHandler<T>;
};

template <> struct traits<Windows::Foundation::IUriRuntimeClass>
{
	using abi = ABI::Windows::Foundation::IUriRuntimeClass;
	template <typename T> using methods = Windows::Foundation::impl_IUriRuntimeClass<T>;
};

template <> struct traits<Windows::Foundation::IUriRuntimeClassWithAbsoluteCanonicalUri>
{
	using abi = ABI::Windows::Foundation::IUriRuntimeClassWithAbsoluteCanonicalUri;
	template <typename T> using methods = Windows::Foundation::impl_IUriRuntimeClassWithAbsoluteCanonicalUri<T>;
};

template <> struct traits<Windows::Foundation::IUriEscapeStatics>
{
	using abi = ABI::Windows::Foundation::IUriEscapeStatics;
	template <typename T> using methods = Windows::Foundation::impl_IUriEscapeStatics<T>;
};

template <> struct traits<Windows::Foundation::IUriRuntimeClassFactory>
{
	using abi = ABI::Windows::Foundation::IUriRuntimeClassFactory;
	template <typename T> using methods = Windows::Foundation::impl_IUriRuntimeClassFactory<T>;
};

template <> struct traits<Windows::Foundation::IWwwFormUrlDecoderEntry>
{
	using abi = ABI::Windows::Foundation::IWwwFormUrlDecoderEntry;
	template <typename T> using methods = Windows::Foundation::impl_IWwwFormUrlDecoderEntry<T>;
};

template <> struct traits<Windows::Foundation::IWwwFormUrlDecoderRuntimeClass>
{
	using abi = ABI::Windows::Foundation::IWwwFormUrlDecoderRuntimeClass;
	template <typename T> using methods = Windows::Foundation::impl_IWwwFormUrlDecoderRuntimeClass<T>;
};

template <> struct traits<Windows::Foundation::IWwwFormUrlDecoderRuntimeClassFactory>
{
	using abi = ABI::Windows::Foundation::IWwwFormUrlDecoderRuntimeClassFactory;
	template <typename T> using methods = Windows::Foundation::impl_IWwwFormUrlDecoderRuntimeClassFactory<T>;
};

template <> struct traits<Windows::Foundation::IGetActivationFactory>
{
	using abi = ABI::Windows::Foundation::IGetActivationFactory;
	template <typename T> using methods = Windows::Foundation::impl_IGetActivationFactory<T>;
};

template <> struct traits<Windows::Foundation::IClosable>
{
	using abi = ABI::Windows::Foundation::IClosable;
	template <typename T> using methods = Windows::Foundation::impl_IClosable<T>;
};

template <> struct traits<Windows::Foundation::IPropertyValue>
{
	using abi = ABI::Windows::Foundation::IPropertyValue;
	template <typename T> using methods = Windows::Foundation::impl_IPropertyValue<T>;
};

template <> struct traits<Windows::Foundation::IPropertyValueStatics>
{
	using abi = ABI::Windows::Foundation::IPropertyValueStatics;
	template <typename T> using methods = Windows::Foundation::impl_IPropertyValueStatics<T>;
};

template <> struct traits<Windows::Foundation::IStringable>
{
	using abi = ABI::Windows::Foundation::IStringable;
	template <typename T> using methods = Windows::Foundation::impl_IStringable<T>;
};

template <> struct traits<Windows::Foundation::Collections::IPropertySet>
{
	using abi = ABI::Windows::Foundation::Collections::IPropertySet;
	template <typename T> using methods = Windows::Foundation::Collections::impl_IPropertySet<T>;
};

template <> struct traits<Windows::Foundation::IDeferral>
{
	using abi = ABI::Windows::Foundation::IDeferral;
	template <typename T> using methods = Windows::Foundation::impl_IDeferral<T>;
};

template <> struct traits<Windows::Foundation::IDeferralFactory>
{
	using abi = ABI::Windows::Foundation::IDeferralFactory;
	template <typename T> using methods = Windows::Foundation::impl_IDeferralFactory<T>;
};

template <> struct traits<Windows::Foundation::IMemoryBufferReference>
{
	using abi = ABI::Windows::Foundation::IMemoryBufferReference;
	template <typename T> using methods = Windows::Foundation::impl_IMemoryBufferReference<T>;
};

template <> struct traits<Windows::Foundation::IMemoryBuffer>
{
	using abi = ABI::Windows::Foundation::IMemoryBuffer;
	template <typename T> using methods = Windows::Foundation::impl_IMemoryBuffer<T>;
};

template <> struct traits<Windows::Foundation::IMemoryBufferFactory>
{
	using abi = ABI::Windows::Foundation::IMemoryBufferFactory;
	template <typename T> using methods = Windows::Foundation::impl_IMemoryBufferFactory<T>;
};

template <> struct traits<Windows::Foundation::IAsyncAction>
{
	using abi = ABI::Windows::Foundation::IAsyncAction;
	template <typename T> using methods = Windows::Foundation::impl_IAsyncAction<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeoshape>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeoshape;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeoshape<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeopoint>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeopoint;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeopoint<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeopointFactory>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeopointFactory;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeopointFactory<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeopath>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeopath;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeopath<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeopathFactory>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeopathFactory;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeopathFactory<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeoboundingBox>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeoboundingBox;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeoboundingBox<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeoboundingBoxFactory>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeoboundingBoxFactory;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeoboundingBoxFactory<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeoboundingBoxStatics>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeoboundingBoxStatics;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeoboundingBoxStatics<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeocoordinateSatelliteData>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeocoordinateSatelliteData;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeocoordinateSatelliteData<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IVenueData>
{
	using abi = ABI::Windows::Devices::Geolocation::IVenueData;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IVenueData<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeocoordinate>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeocoordinate;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeocoordinate<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeocoordinateWithPositionData>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeocoordinateWithPositionData;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeocoordinateWithPositionData<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeocoordinateWithPoint>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeocoordinateWithPoint;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeocoordinateWithPoint<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeoposition>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeoposition;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeoposition<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeoposition2>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeoposition2;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeoposition2<T>;
};

template <> struct traits<Windows::Devices::Geolocation::ICivicAddress>
{
	using abi = ABI::Windows::Devices::Geolocation::ICivicAddress;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_ICivicAddress<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IPositionChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Geolocation::IPositionChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IPositionChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IStatusChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Geolocation::IStatusChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IStatusChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeolocator>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeolocator;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeolocator<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeolocatorWithScalarAccuracy>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeolocatorWithScalarAccuracy;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeolocatorWithScalarAccuracy<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeolocatorStatics>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeolocatorStatics;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeolocatorStatics<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeocircle>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeocircle;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeocircle<T>;
};

template <> struct traits<Windows::Devices::Geolocation::IGeocircleFactory>
{
	using abi = ABI::Windows::Devices::Geolocation::IGeocircleFactory;
	template <typename T> using methods = Windows::Devices::Geolocation::impl_IGeocircleFactory<T>;
};

template <> struct traits<Windows::Storage::Streams::IDataReader>
{
	using abi = ABI::Windows::Storage::Streams::IDataReader;
	template <typename T> using methods = Windows::Storage::Streams::impl_IDataReader<T>;
};

template <> struct traits<Windows::Storage::Streams::IDataReaderFactory>
{
	using abi = ABI::Windows::Storage::Streams::IDataReaderFactory;
	template <typename T> using methods = Windows::Storage::Streams::impl_IDataReaderFactory<T>;
};

template <> struct traits<Windows::Storage::Streams::IDataReaderStatics>
{
	using abi = ABI::Windows::Storage::Streams::IDataReaderStatics;
	template <typename T> using methods = Windows::Storage::Streams::impl_IDataReaderStatics<T>;
};

template <> struct traits<Windows::Storage::Streams::IDataWriter>
{
	using abi = ABI::Windows::Storage::Streams::IDataWriter;
	template <typename T> using methods = Windows::Storage::Streams::impl_IDataWriter<T>;
};

template <> struct traits<Windows::Storage::Streams::IDataWriterFactory>
{
	using abi = ABI::Windows::Storage::Streams::IDataWriterFactory;
	template <typename T> using methods = Windows::Storage::Streams::impl_IDataWriterFactory<T>;
};

template <> struct traits<Windows::Storage::Streams::IRandomAccessStreamReference>
{
	using abi = ABI::Windows::Storage::Streams::IRandomAccessStreamReference;
	template <typename T> using methods = Windows::Storage::Streams::impl_IRandomAccessStreamReference<T>;
};

template <> struct traits<Windows::Storage::Streams::IRandomAccessStreamStatics>
{
	using abi = ABI::Windows::Storage::Streams::IRandomAccessStreamStatics;
	template <typename T> using methods = Windows::Storage::Streams::impl_IRandomAccessStreamStatics<T>;
};

template <> struct traits<Windows::Storage::Streams::IBufferFactory>
{
	using abi = ABI::Windows::Storage::Streams::IBufferFactory;
	template <typename T> using methods = Windows::Storage::Streams::impl_IBufferFactory<T>;
};

template <> struct traits<Windows::Storage::Streams::IBuffer>
{
	using abi = ABI::Windows::Storage::Streams::IBuffer;
	template <typename T> using methods = Windows::Storage::Streams::impl_IBuffer<T>;
};

template <> struct traits<Windows::Storage::Streams::IBufferStatics>
{
	using abi = ABI::Windows::Storage::Streams::IBufferStatics;
	template <typename T> using methods = Windows::Storage::Streams::impl_IBufferStatics<T>;
};

template <> struct traits<Windows::Storage::Streams::IContentTypeProvider>
{
	using abi = ABI::Windows::Storage::Streams::IContentTypeProvider;
	template <typename T> using methods = Windows::Storage::Streams::impl_IContentTypeProvider<T>;
};

template <> struct traits<Windows::Storage::Streams::IInputStreamReference>
{
	using abi = ABI::Windows::Storage::Streams::IInputStreamReference;
	template <typename T> using methods = Windows::Storage::Streams::impl_IInputStreamReference<T>;
};

template <> struct traits<Windows::Storage::Streams::IRandomAccessStreamReferenceStatics>
{
	using abi = ABI::Windows::Storage::Streams::IRandomAccessStreamReferenceStatics;
	template <typename T> using methods = Windows::Storage::Streams::impl_IRandomAccessStreamReferenceStatics<T>;
};

template <> struct traits<Windows::Storage::Streams::IInputStream>
{
	using abi = ABI::Windows::Storage::Streams::IInputStream;
	template <typename T> using methods = Windows::Storage::Streams::impl_IInputStream<T>;
};

template <> struct traits<Windows::Storage::Streams::IOutputStream>
{
	using abi = ABI::Windows::Storage::Streams::IOutputStream;
	template <typename T> using methods = Windows::Storage::Streams::impl_IOutputStream<T>;
};

template <> struct traits<Windows::Storage::Streams::IRandomAccessStream>
{
	using abi = ABI::Windows::Storage::Streams::IRandomAccessStream;
	template <typename T> using methods = Windows::Storage::Streams::impl_IRandomAccessStream<T>;
};

template <> struct traits<Windows::Storage::Streams::IRandomAccessStreamWithContentType>
{
	using abi = ABI::Windows::Storage::Streams::IRandomAccessStreamWithContentType;
	template <typename T> using methods = Windows::Storage::Streams::impl_IRandomAccessStreamWithContentType<T>;
};

template <> struct traits<Windows::Storage::FileProperties::IGeotagHelperStatics>
{
	using abi = ABI::Windows::Storage::FileProperties::IGeotagHelperStatics;
	template <typename T> using methods = Windows::Storage::FileProperties::impl_IGeotagHelperStatics<T>;
};

template <> struct traits<Windows::Storage::FileProperties::IThumbnailProperties>
{
	using abi = ABI::Windows::Storage::FileProperties::IThumbnailProperties;
	template <typename T> using methods = Windows::Storage::FileProperties::impl_IThumbnailProperties<T>;
};

template <> struct traits<Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	using abi = ABI::Windows::Storage::FileProperties::IStorageItemExtraProperties;
	template <typename T> using methods = Windows::Storage::FileProperties::impl_IStorageItemExtraProperties<T>;
};

template <> struct traits<Windows::Storage::FileProperties::IStorageItemContentProperties>
{
	using abi = ABI::Windows::Storage::FileProperties::IStorageItemContentProperties;
	template <typename T> using methods = Windows::Storage::FileProperties::impl_IStorageItemContentProperties<T>;
};

template <> struct traits<Windows::Storage::FileProperties::IMusicProperties>
{
	using abi = ABI::Windows::Storage::FileProperties::IMusicProperties;
	template <typename T> using methods = Windows::Storage::FileProperties::impl_IMusicProperties<T>;
};

template <> struct traits<Windows::Storage::FileProperties::IImageProperties>
{
	using abi = ABI::Windows::Storage::FileProperties::IImageProperties;
	template <typename T> using methods = Windows::Storage::FileProperties::impl_IImageProperties<T>;
};

template <> struct traits<Windows::Storage::FileProperties::IVideoProperties>
{
	using abi = ABI::Windows::Storage::FileProperties::IVideoProperties;
	template <typename T> using methods = Windows::Storage::FileProperties::impl_IVideoProperties<T>;
};

template <> struct traits<Windows::Storage::FileProperties::IDocumentProperties>
{
	using abi = ABI::Windows::Storage::FileProperties::IDocumentProperties;
	template <typename T> using methods = Windows::Storage::FileProperties::impl_IDocumentProperties<T>;
};

template <> struct traits<Windows::Storage::FileProperties::IBasicProperties>
{
	using abi = ABI::Windows::Storage::FileProperties::IBasicProperties;
	template <typename T> using methods = Windows::Storage::FileProperties::impl_IBasicProperties<T>;
};

template <> struct traits<Windows::Storage::Provider::ICachedFileUpdaterUI>
{
	using abi = ABI::Windows::Storage::Provider::ICachedFileUpdaterUI;
	template <typename T> using methods = Windows::Storage::Provider::impl_ICachedFileUpdaterUI<T>;
};

template <> struct traits<Windows::Storage::Provider::IFileUpdateRequestedEventArgs>
{
	using abi = ABI::Windows::Storage::Provider::IFileUpdateRequestedEventArgs;
	template <typename T> using methods = Windows::Storage::Provider::impl_IFileUpdateRequestedEventArgs<T>;
};

template <> struct traits<Windows::Storage::Provider::IFileUpdateRequest>
{
	using abi = ABI::Windows::Storage::Provider::IFileUpdateRequest;
	template <typename T> using methods = Windows::Storage::Provider::impl_IFileUpdateRequest<T>;
};

template <> struct traits<Windows::Storage::Provider::IFileUpdateRequestDeferral>
{
	using abi = ABI::Windows::Storage::Provider::IFileUpdateRequestDeferral;
	template <typename T> using methods = Windows::Storage::Provider::impl_IFileUpdateRequestDeferral<T>;
};

template <> struct traits<Windows::Storage::Provider::ICachedFileUpdaterUI2>
{
	using abi = ABI::Windows::Storage::Provider::ICachedFileUpdaterUI2;
	template <typename T> using methods = Windows::Storage::Provider::impl_ICachedFileUpdaterUI2<T>;
};

template <> struct traits<Windows::Storage::Provider::IFileUpdateRequest2>
{
	using abi = ABI::Windows::Storage::Provider::IFileUpdateRequest2;
	template <typename T> using methods = Windows::Storage::Provider::impl_IFileUpdateRequest2<T>;
};

template <> struct traits<Windows::Storage::Provider::ICachedFileUpdaterStatics>
{
	using abi = ABI::Windows::Storage::Provider::ICachedFileUpdaterStatics;
	template <typename T> using methods = Windows::Storage::Provider::impl_ICachedFileUpdaterStatics<T>;
};

template <> struct traits<Windows::Data::Text::IWordSegmentsTokenizingHandler>
{
	using abi = ABI::Windows::Data::Text::IWordSegmentsTokenizingHandler;
	template <typename T> using methods = Windows::Data::Text::impl_IWordSegmentsTokenizingHandler<T>;
};

template <> struct traits<Windows::Data::Text::ISelectableWordSegmentsTokenizingHandler>
{
	using abi = ABI::Windows::Data::Text::ISelectableWordSegmentsTokenizingHandler;
	template <typename T> using methods = Windows::Data::Text::impl_ISelectableWordSegmentsTokenizingHandler<T>;
};

template <> struct traits<Windows::Data::Text::ISemanticTextQueryFactory>
{
	using abi = ABI::Windows::Data::Text::ISemanticTextQueryFactory;
	template <typename T> using methods = Windows::Data::Text::impl_ISemanticTextQueryFactory<T>;
};

template <> struct traits<Windows::Data::Text::ISemanticTextQuery>
{
	using abi = ABI::Windows::Data::Text::ISemanticTextQuery;
	template <typename T> using methods = Windows::Data::Text::impl_ISemanticTextQuery<T>;
};

template <> struct traits<Windows::Data::Text::IUnicodeCharactersStatics>
{
	using abi = ABI::Windows::Data::Text::IUnicodeCharactersStatics;
	template <typename T> using methods = Windows::Data::Text::impl_IUnicodeCharactersStatics<T>;
};

template <> struct traits<Windows::Data::Text::IAlternateWordForm>
{
	using abi = ABI::Windows::Data::Text::IAlternateWordForm;
	template <typename T> using methods = Windows::Data::Text::impl_IAlternateWordForm<T>;
};

template <> struct traits<Windows::Data::Text::ISelectableWordSegment>
{
	using abi = ABI::Windows::Data::Text::ISelectableWordSegment;
	template <typename T> using methods = Windows::Data::Text::impl_ISelectableWordSegment<T>;
};

template <> struct traits<Windows::Data::Text::IWordSegment>
{
	using abi = ABI::Windows::Data::Text::IWordSegment;
	template <typename T> using methods = Windows::Data::Text::impl_IWordSegment<T>;
};

template <> struct traits<Windows::Data::Text::IWordsSegmenter>
{
	using abi = ABI::Windows::Data::Text::IWordsSegmenter;
	template <typename T> using methods = Windows::Data::Text::impl_IWordsSegmenter<T>;
};

template <> struct traits<Windows::Data::Text::IWordsSegmenterFactory>
{
	using abi = ABI::Windows::Data::Text::IWordsSegmenterFactory;
	template <typename T> using methods = Windows::Data::Text::impl_IWordsSegmenterFactory<T>;
};

template <> struct traits<Windows::Data::Text::ISelectableWordsSegmenter>
{
	using abi = ABI::Windows::Data::Text::ISelectableWordsSegmenter;
	template <typename T> using methods = Windows::Data::Text::impl_ISelectableWordsSegmenter<T>;
};

template <> struct traits<Windows::Data::Text::ISelectableWordsSegmenterFactory>
{
	using abi = ABI::Windows::Data::Text::ISelectableWordsSegmenterFactory;
	template <typename T> using methods = Windows::Data::Text::impl_ISelectableWordsSegmenterFactory<T>;
};

template <> struct traits<Windows::Data::Text::ITextPredictionGenerator>
{
	using abi = ABI::Windows::Data::Text::ITextPredictionGenerator;
	template <typename T> using methods = Windows::Data::Text::impl_ITextPredictionGenerator<T>;
};

template <> struct traits<Windows::Data::Text::ITextPredictionGeneratorFactory>
{
	using abi = ABI::Windows::Data::Text::ITextPredictionGeneratorFactory;
	template <typename T> using methods = Windows::Data::Text::impl_ITextPredictionGeneratorFactory<T>;
};

template <> struct traits<Windows::Data::Text::ITextConversionGenerator>
{
	using abi = ABI::Windows::Data::Text::ITextConversionGenerator;
	template <typename T> using methods = Windows::Data::Text::impl_ITextConversionGenerator<T>;
};

template <> struct traits<Windows::Data::Text::ITextConversionGeneratorFactory>
{
	using abi = ABI::Windows::Data::Text::ITextConversionGeneratorFactory;
	template <typename T> using methods = Windows::Data::Text::impl_ITextConversionGeneratorFactory<T>;
};

template <> struct traits<Windows::Data::Text::ITextReverseConversionGenerator>
{
	using abi = ABI::Windows::Data::Text::ITextReverseConversionGenerator;
	template <typename T> using methods = Windows::Data::Text::impl_ITextReverseConversionGenerator<T>;
};

template <> struct traits<Windows::Data::Text::ITextReverseConversionGeneratorFactory>
{
	using abi = ABI::Windows::Data::Text::ITextReverseConversionGeneratorFactory;
	template <typename T> using methods = Windows::Data::Text::impl_ITextReverseConversionGeneratorFactory<T>;
};

template <> struct traits<Windows::Storage::Search::IContentIndexerStatics>
{
	using abi = ABI::Windows::Storage::Search::IContentIndexerStatics;
	template <typename T> using methods = Windows::Storage::Search::impl_IContentIndexerStatics<T>;
};

template <> struct traits<Windows::Storage::Search::IIndexableContent>
{
	using abi = ABI::Windows::Storage::Search::IIndexableContent;
	template <typename T> using methods = Windows::Storage::Search::impl_IIndexableContent<T>;
};

template <> struct traits<Windows::Storage::Search::IContentIndexer>
{
	using abi = ABI::Windows::Storage::Search::IContentIndexer;
	template <typename T> using methods = Windows::Storage::Search::impl_IContentIndexer<T>;
};

template <> struct traits<Windows::Storage::Search::IValueAndLanguage>
{
	using abi = ABI::Windows::Storage::Search::IValueAndLanguage;
	template <typename T> using methods = Windows::Storage::Search::impl_IValueAndLanguage<T>;
};

template <> struct traits<Windows::Storage::Search::IContentIndexerQueryOperations>
{
	using abi = ABI::Windows::Storage::Search::IContentIndexerQueryOperations;
	template <typename T> using methods = Windows::Storage::Search::impl_IContentIndexerQueryOperations<T>;
};

template <> struct traits<Windows::Storage::Search::IContentIndexerQuery>
{
	using abi = ABI::Windows::Storage::Search::IContentIndexerQuery;
	template <typename T> using methods = Windows::Storage::Search::impl_IContentIndexerQuery<T>;
};

template <> struct traits<Windows::Storage::Search::IQueryOptions>
{
	using abi = ABI::Windows::Storage::Search::IQueryOptions;
	template <typename T> using methods = Windows::Storage::Search::impl_IQueryOptions<T>;
};

template <> struct traits<Windows::Storage::Search::IQueryOptionsWithProviderFilter>
{
	using abi = ABI::Windows::Storage::Search::IQueryOptionsWithProviderFilter;
	template <typename T> using methods = Windows::Storage::Search::impl_IQueryOptionsWithProviderFilter<T>;
};

template <> struct traits<Windows::Storage::Search::IQueryOptionsFactory>
{
	using abi = ABI::Windows::Storage::Search::IQueryOptionsFactory;
	template <typename T> using methods = Windows::Storage::Search::impl_IQueryOptionsFactory<T>;
};

template <> struct traits<Windows::Storage::Search::IStorageQueryResultBase>
{
	using abi = ABI::Windows::Storage::Search::IStorageQueryResultBase;
	template <typename T> using methods = Windows::Storage::Search::impl_IStorageQueryResultBase<T>;
};

template <> struct traits<Windows::Storage::Search::IStorageFileQueryResult>
{
	using abi = ABI::Windows::Storage::Search::IStorageFileQueryResult;
	template <typename T> using methods = Windows::Storage::Search::impl_IStorageFileQueryResult<T>;
};

template <> struct traits<Windows::Storage::Search::IStorageFileQueryResult2>
{
	using abi = ABI::Windows::Storage::Search::IStorageFileQueryResult2;
	template <typename T> using methods = Windows::Storage::Search::impl_IStorageFileQueryResult2<T>;
};

template <> struct traits<Windows::Storage::Search::IStorageFolderQueryResult>
{
	using abi = ABI::Windows::Storage::Search::IStorageFolderQueryResult;
	template <typename T> using methods = Windows::Storage::Search::impl_IStorageFolderQueryResult<T>;
};

template <> struct traits<Windows::Storage::Search::IStorageItemQueryResult>
{
	using abi = ABI::Windows::Storage::Search::IStorageItemQueryResult;
	template <typename T> using methods = Windows::Storage::Search::impl_IStorageItemQueryResult<T>;
};

template <> struct traits<Windows::Storage::Search::IStorageFolderQueryOperations>
{
	using abi = ABI::Windows::Storage::Search::IStorageFolderQueryOperations;
	template <typename T> using methods = Windows::Storage::Search::impl_IStorageFolderQueryOperations<T>;
};

template <> struct traits<Windows::Storage::Search::IStorageLibraryContentChangedTriggerDetails>
{
	using abi = ABI::Windows::Storage::Search::IStorageLibraryContentChangedTriggerDetails;
	template <typename T> using methods = Windows::Storage::Search::impl_IStorageLibraryContentChangedTriggerDetails<T>;
};

template <> struct traits<Windows::UI::IColorHelper>
{
	using abi = ABI::Windows::UI::IColorHelper;
	template <typename T> using methods = Windows::UI::impl_IColorHelper<T>;
};

template <> struct traits<Windows::UI::IColorHelperStatics>
{
	using abi = ABI::Windows::UI::IColorHelperStatics;
	template <typename T> using methods = Windows::UI::impl_IColorHelperStatics<T>;
};

template <> struct traits<Windows::UI::IColors>
{
	using abi = ABI::Windows::UI::IColors;
	template <typename T> using methods = Windows::UI::impl_IColors<T>;
};

template <> struct traits<Windows::UI::IColorsStatics>
{
	using abi = ABI::Windows::UI::IColorsStatics;
	template <typename T> using methods = Windows::UI::impl_IColorsStatics<T>;
};

template <> struct traits<Windows::UI::Popups::IUICommandInvokedHandler>
{
	using abi = ABI::Windows::UI::Popups::IUICommandInvokedHandler;
	template <typename T> using methods = Windows::UI::Popups::impl_IUICommandInvokedHandler<T>;
};

template <> struct traits<Windows::UI::Popups::IMessageDialog>
{
	using abi = ABI::Windows::UI::Popups::IMessageDialog;
	template <typename T> using methods = Windows::UI::Popups::impl_IMessageDialog<T>;
};

template <> struct traits<Windows::UI::Popups::IMessageDialogFactory>
{
	using abi = ABI::Windows::UI::Popups::IMessageDialogFactory;
	template <typename T> using methods = Windows::UI::Popups::impl_IMessageDialogFactory<T>;
};

template <> struct traits<Windows::UI::Popups::IUICommand>
{
	using abi = ABI::Windows::UI::Popups::IUICommand;
	template <typename T> using methods = Windows::UI::Popups::impl_IUICommand<T>;
};

template <> struct traits<Windows::UI::Popups::IUICommandFactory>
{
	using abi = ABI::Windows::UI::Popups::IUICommandFactory;
	template <typename T> using methods = Windows::UI::Popups::impl_IUICommandFactory<T>;
};

template <> struct traits<Windows::UI::Popups::IPopupMenu>
{
	using abi = ABI::Windows::UI::Popups::IPopupMenu;
	template <typename T> using methods = Windows::UI::Popups::impl_IPopupMenu<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentManagerStatics>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentManagerStatics;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentManagerStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentManagerStatics2>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentManagerStatics2;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentManagerStatics2<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentParticipant>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentParticipant;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentParticipant<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentInvitee>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentInvitee;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentInvitee<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentRecurrence>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentRecurrence;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentRecurrence<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentRecurrence2>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentRecurrence2;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentRecurrence2<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentRecurrence3>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentRecurrence3;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentRecurrence3<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointment>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointment;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointment<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointment2>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointment2;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointment2<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointment3>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointment3;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointment3<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IFindAppointmentsOptions>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IFindAppointmentsOptions;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IFindAppointmentsOptions<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentCalendar>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentCalendar;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentCalendar<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentCalendar2>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentCalendar2;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentCalendar2<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentCalendarSyncManager>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentCalendarSyncManager;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentCalendarSyncManager<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentPropertiesStatics>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentPropertiesStatics;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentPropertiesStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentPropertiesStatics2>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentPropertiesStatics2;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentPropertiesStatics2<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentConflictResult>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentConflictResult;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentConflictResult<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentStoreChange>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentStoreChange;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentStoreChange<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentStoreChange2>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentStoreChange2;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentStoreChange2<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentStoreChangeReader>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentStoreChangeReader;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentStoreChangeReader<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentStoreChangeTracker>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentStoreChangeTracker;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentStoreChangeTracker<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentStoreChangedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentStoreChangedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentStoreChangedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentStoreChangedDeferral>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentStoreChangedDeferral;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentStoreChangedDeferral<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentStoreNotificationTriggerDetails>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentStoreNotificationTriggerDetails;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentStoreNotificationTriggerDetails<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentStore>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentStore;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentStore<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentStore2>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentStore2;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentStore2<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::IAppointmentException>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::IAppointmentException;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::impl_IAppointmentException<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::IAppointmentsProviderLaunchActionVerbsStatics>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::IAppointmentsProviderLaunchActionVerbsStatics;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::AppointmentsProvider::impl_IAppointmentsProviderLaunchActionVerbsStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::IAppointmentsProviderLaunchActionVerbsStatics2>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::IAppointmentsProviderLaunchActionVerbsStatics2;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::AppointmentsProvider::impl_IAppointmentsProviderLaunchActionVerbsStatics2<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::AppointmentsProvider::impl_IAddAppointmentOperation<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::AppointmentsProvider::impl_IReplaceAppointmentOperation<T>;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation;
	template <typename T> using methods = Windows::ApplicationModel::Appointments::AppointmentsProvider::impl_IRemoveAppointmentOperation<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::Background::IPhoneCallBlockedTriggerDetails>
{
	using abi = ABI::Windows::ApplicationModel::Calls::Background::IPhoneCallBlockedTriggerDetails;
	template <typename T> using methods = Windows::ApplicationModel::Calls::Background::impl_IPhoneCallBlockedTriggerDetails<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::Background::IPhoneCallOriginDataRequestTriggerDetails>
{
	using abi = ABI::Windows::ApplicationModel::Calls::Background::IPhoneCallOriginDataRequestTriggerDetails;
	template <typename T> using methods = Windows::ApplicationModel::Calls::Background::impl_IPhoneCallOriginDataRequestTriggerDetails<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::Background::IPhoneNewVoicemailMessageTriggerDetails>
{
	using abi = ABI::Windows::ApplicationModel::Calls::Background::IPhoneNewVoicemailMessageTriggerDetails;
	template <typename T> using methods = Windows::ApplicationModel::Calls::Background::impl_IPhoneNewVoicemailMessageTriggerDetails<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::Background::IPhoneLineChangedTriggerDetails>
{
	using abi = ABI::Windows::ApplicationModel::Calls::Background::IPhoneLineChangedTriggerDetails;
	template <typename T> using methods = Windows::ApplicationModel::Calls::Background::impl_IPhoneLineChangedTriggerDetails<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDeviceServiceStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDeviceServiceStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattDeviceServiceStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattCharacteristicStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattCharacteristicStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattCharacteristicStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattCharacteristic>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattCharacteristic;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattCharacteristic<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattCharacteristic2>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattCharacteristic2;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattCharacteristic2<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDescriptorStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDescriptorStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattDescriptorStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDescriptor>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDescriptor;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattDescriptor<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattPresentationFormatStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattPresentationFormatStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattPresentationFormatStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattPresentationFormatTypesStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattPresentationFormatTypesStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattPresentationFormatTypesStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattPresentationFormat>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattPresentationFormat;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattPresentationFormat<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattValueChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattValueChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattValueChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattServiceUuidsStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattServiceUuidsStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattServiceUuidsStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattServiceUuidsStatics2>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattServiceUuidsStatics2;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattServiceUuidsStatics2<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattCharacteristicUuidsStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattCharacteristicUuidsStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattCharacteristicUuidsStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattCharacteristicUuidsStatics2>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattCharacteristicUuidsStatics2;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattCharacteristicUuidsStatics2<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDescriptorUuidsStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDescriptorUuidsStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattDescriptorUuidsStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattReliableWriteTransaction>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattReliableWriteTransaction;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattReliableWriteTransaction<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattReadResult>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattReadResult;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattReadResult<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattReadClientCharacteristicConfigurationDescriptorResult>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattReadClientCharacteristicConfigurationDescriptorResult;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattReadClientCharacteristicConfigurationDescriptorResult<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDeviceService>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDeviceService;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattDeviceService<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDeviceService2>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDeviceService2;
	template <typename T> using methods = Windows::Devices::Bluetooth::GenericAttributeProfile::impl_IGattDeviceService2<T>;
};

template <> struct traits<Windows::Networking::Connectivity::INetworkStatusChangedEventHandler>
{
	using abi = ABI::Windows::Networking::Connectivity::INetworkStatusChangedEventHandler;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_INetworkStatusChangedEventHandler<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IDataUsage>
{
	using abi = ABI::Windows::Networking::Connectivity::IDataUsage;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IDataUsage<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IDataPlanUsage>
{
	using abi = ABI::Windows::Networking::Connectivity::IDataPlanUsage;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IDataPlanUsage<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IDataPlanStatus>
{
	using abi = ABI::Windows::Networking::Connectivity::IDataPlanStatus;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IDataPlanStatus<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IConnectionCost>
{
	using abi = ABI::Windows::Networking::Connectivity::IConnectionCost;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IConnectionCost<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IConnectionCost2>
{
	using abi = ABI::Windows::Networking::Connectivity::IConnectionCost2;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IConnectionCost2<T>;
};

template <> struct traits<Windows::Networking::Connectivity::INetworkSecuritySettings>
{
	using abi = ABI::Windows::Networking::Connectivity::INetworkSecuritySettings;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_INetworkSecuritySettings<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IConnectionProfile>
{
	using abi = ABI::Windows::Networking::Connectivity::IConnectionProfile;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IConnectionProfile<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IWwanConnectionProfileDetails>
{
	using abi = ABI::Windows::Networking::Connectivity::IWwanConnectionProfileDetails;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IWwanConnectionProfileDetails<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IWlanConnectionProfileDetails>
{
	using abi = ABI::Windows::Networking::Connectivity::IWlanConnectionProfileDetails;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IWlanConnectionProfileDetails<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IConnectivityInterval>
{
	using abi = ABI::Windows::Networking::Connectivity::IConnectivityInterval;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IConnectivityInterval<T>;
};

template <> struct traits<Windows::Networking::Connectivity::INetworkUsage>
{
	using abi = ABI::Windows::Networking::Connectivity::INetworkUsage;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_INetworkUsage<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IConnectionProfile2>
{
	using abi = ABI::Windows::Networking::Connectivity::IConnectionProfile2;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IConnectionProfile2<T>;
};

template <> struct traits<Windows::Networking::Connectivity::ILanIdentifierData>
{
	using abi = ABI::Windows::Networking::Connectivity::ILanIdentifierData;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_ILanIdentifierData<T>;
};

template <> struct traits<Windows::Networking::Connectivity::ILanIdentifier>
{
	using abi = ABI::Windows::Networking::Connectivity::ILanIdentifier;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_ILanIdentifier<T>;
};

template <> struct traits<Windows::Networking::Connectivity::INetworkInformationStatics>
{
	using abi = ABI::Windows::Networking::Connectivity::INetworkInformationStatics;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_INetworkInformationStatics<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IConnectionProfileFilter>
{
	using abi = ABI::Windows::Networking::Connectivity::IConnectionProfileFilter;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IConnectionProfileFilter<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IConnectionProfileFilter2>
{
	using abi = ABI::Windows::Networking::Connectivity::IConnectionProfileFilter2;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IConnectionProfileFilter2<T>;
};

template <> struct traits<Windows::Networking::Connectivity::INetworkInformationStatics2>
{
	using abi = ABI::Windows::Networking::Connectivity::INetworkInformationStatics2;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_INetworkInformationStatics2<T>;
};

template <> struct traits<Windows::Networking::Connectivity::INetworkItem>
{
	using abi = ABI::Windows::Networking::Connectivity::INetworkItem;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_INetworkItem<T>;
};

template <> struct traits<Windows::Networking::Connectivity::INetworkAdapter>
{
	using abi = ABI::Windows::Networking::Connectivity::INetworkAdapter;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_INetworkAdapter<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IIPInformation>
{
	using abi = ABI::Windows::Networking::Connectivity::IIPInformation;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IIPInformation<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IProxyConfiguration>
{
	using abi = ABI::Windows::Networking::Connectivity::IProxyConfiguration;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IProxyConfiguration<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IConnectionSession>
{
	using abi = ABI::Windows::Networking::Connectivity::IConnectionSession;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IConnectionSession<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IRoutePolicy>
{
	using abi = ABI::Windows::Networking::Connectivity::IRoutePolicy;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IRoutePolicy<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IRoutePolicyFactory>
{
	using abi = ABI::Windows::Networking::Connectivity::IRoutePolicyFactory;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IRoutePolicyFactory<T>;
};

template <> struct traits<Windows::Networking::Connectivity::ICellularApnContext>
{
	using abi = ABI::Windows::Networking::Connectivity::ICellularApnContext;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_ICellularApnContext<T>;
};

template <> struct traits<Windows::Networking::Connectivity::IConnectivityManagerStatics>
{
	using abi = ABI::Windows::Networking::Connectivity::IConnectivityManagerStatics;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_IConnectivityManagerStatics<T>;
};

template <> struct traits<Windows::Networking::Connectivity::INetworkStateChangeEventDetails>
{
	using abi = ABI::Windows::Networking::Connectivity::INetworkStateChangeEventDetails;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_INetworkStateChangeEventDetails<T>;
};

template <> struct traits<Windows::Networking::Connectivity::INetworkStateChangeEventDetails2>
{
	using abi = ABI::Windows::Networking::Connectivity::INetworkStateChangeEventDetails2;
	template <typename T> using methods = Windows::Networking::Connectivity::impl_INetworkStateChangeEventDetails2<T>;
};

template <> struct traits<Windows::Networking::IHostNameStatics>
{
	using abi = ABI::Windows::Networking::IHostNameStatics;
	template <typename T> using methods = Windows::Networking::impl_IHostNameStatics<T>;
};

template <> struct traits<Windows::Networking::IHostName>
{
	using abi = ABI::Windows::Networking::IHostName;
	template <typename T> using methods = Windows::Networking::impl_IHostName<T>;
};

template <> struct traits<Windows::Networking::IHostNameFactory>
{
	using abi = ABI::Windows::Networking::IHostNameFactory;
	template <typename T> using methods = Windows::Networking::impl_IHostNameFactory<T>;
};

template <> struct traits<Windows::Networking::IEndpointPair>
{
	using abi = ABI::Windows::Networking::IEndpointPair;
	template <typename T> using methods = Windows::Networking::impl_IEndpointPair<T>;
};

template <> struct traits<Windows::Networking::IEndpointPairFactory>
{
	using abi = ABI::Windows::Networking::IEndpointPairFactory;
	template <typename T> using methods = Windows::Networking::impl_IEndpointPairFactory<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICertificateRequestProperties>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateRequestProperties;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICertificateRequestProperties<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICertificateRequestProperties2>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateRequestProperties2;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICertificateRequestProperties2<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICertificateRequestProperties3>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateRequestProperties3;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICertificateRequestProperties3<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICertificateEnrollmentManagerStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateEnrollmentManagerStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICertificateEnrollmentManagerStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICertificateEnrollmentManagerStatics2>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateEnrollmentManagerStatics2;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICertificateEnrollmentManagerStatics2<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICertificateEnrollmentManagerStatics3>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateEnrollmentManagerStatics3;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICertificateEnrollmentManagerStatics3<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::IKeyAttestationHelperStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::IKeyAttestationHelperStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_IKeyAttestationHelperStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::IKeyAttestationHelperStatics2>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::IKeyAttestationHelperStatics2;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_IKeyAttestationHelperStatics2<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICertificateStoresStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateStoresStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICertificateStoresStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::IUserCertificateEnrollmentManager>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::IUserCertificateEnrollmentManager;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_IUserCertificateEnrollmentManager<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::IUserCertificateEnrollmentManager2>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::IUserCertificateEnrollmentManager2;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_IUserCertificateEnrollmentManager2<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICertificateStore>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateStore;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICertificateStore<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICertificateStore2>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateStore2;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICertificateStore2<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::IKeyAlgorithmNamesStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::IKeyAlgorithmNamesStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_IKeyAlgorithmNamesStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::IKeyAlgorithmNamesStatics2>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::IKeyAlgorithmNamesStatics2;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_IKeyAlgorithmNamesStatics2<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::IKeyStorageProviderNamesStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::IKeyStorageProviderNamesStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_IKeyStorageProviderNamesStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::IKeyStorageProviderNamesStatics2>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::IKeyStorageProviderNamesStatics2;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_IKeyStorageProviderNamesStatics2<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::IChainBuildingParameters>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::IChainBuildingParameters;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_IChainBuildingParameters<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::IChainValidationParameters>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::IChainValidationParameters;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_IChainValidationParameters<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICertificateQuery>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateQuery;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICertificateQuery<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICertificateQuery2>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateQuery2;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICertificateQuery2<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICertificateChain>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateChain;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICertificateChain<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICertificate>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICertificate;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICertificate<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICertificate2>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICertificate2;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICertificate2<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICertificateFactory>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateFactory;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICertificateFactory<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICmsTimestampInfo>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICmsTimestampInfo;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICmsTimestampInfo<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICmsSignerInfo>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICmsSignerInfo;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICmsSignerInfo<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ISubjectAlternativeNameInfo>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ISubjectAlternativeNameInfo;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ISubjectAlternativeNameInfo<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::IPfxImportParameters>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::IPfxImportParameters;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_IPfxImportParameters<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICertificateKeyUsages>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICertificateKeyUsages;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICertificateKeyUsages<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICmsAttachedSignature>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICmsAttachedSignature;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICmsAttachedSignature<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICmsAttachedSignatureFactory>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICmsAttachedSignatureFactory;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICmsAttachedSignatureFactory<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICmsAttachedSignatureStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICmsAttachedSignatureStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICmsAttachedSignatureStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICmsDetachedSignature>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICmsDetachedSignature;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICmsDetachedSignature<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICmsDetachedSignatureFactory>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICmsDetachedSignatureFactory;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICmsDetachedSignatureFactory<T>;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ICmsDetachedSignatureStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ICmsDetachedSignatureStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Certificates::impl_ICmsDetachedSignatureStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IKeyDerivationParameters>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationParameters;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationParameters<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IKeyDerivationParameters2>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationParameters2;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationParameters2<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IKeyDerivationParametersStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationParametersStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationParametersStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IKeyDerivationParametersStatics2>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationParametersStatics2;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationParametersStatics2<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::ICryptographicKey>
{
	using abi = ABI::Windows::Security::Cryptography::Core::ICryptographicKey;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_ICryptographicKey<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IHashComputation>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IHashComputation;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IHashComputation<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IHashAlgorithmProvider>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IHashAlgorithmProvider;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IHashAlgorithmProvider<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IMacAlgorithmProvider>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IMacAlgorithmProvider;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IMacAlgorithmProvider<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IMacAlgorithmProvider2>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IMacAlgorithmProvider2;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IMacAlgorithmProvider2<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProvider>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProvider;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationAlgorithmProvider<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProvider>
{
	using abi = ABI::Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProvider;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_ISymmetricKeyAlgorithmProvider<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IAsymmetricKeyAlgorithmProvider<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider2>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider2;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IAsymmetricKeyAlgorithmProvider2<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IPersistedKeyProviderStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IPersistedKeyProviderStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IPersistedKeyProviderStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IEncryptedAndAuthenticatedData>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IEncryptedAndAuthenticatedData;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IEncryptedAndAuthenticatedData<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::ICryptographicEngineStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Core::ICryptographicEngineStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_ICryptographicEngineStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::ICryptographicEngineStatics2>
{
	using abi = ABI::Windows::Security::Cryptography::Core::ICryptographicEngineStatics2;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_ICryptographicEngineStatics2<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IHashAlgorithmProviderStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IHashAlgorithmProviderStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IHashAlgorithmProviderStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IMacAlgorithmProviderStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IMacAlgorithmProviderStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IMacAlgorithmProviderStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProviderStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProviderStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationAlgorithmProviderStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProviderStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProviderStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_ISymmetricKeyAlgorithmProviderStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProviderStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProviderStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IAsymmetricKeyAlgorithmProviderStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IHashAlgorithmNamesStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IHashAlgorithmNamesStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IHashAlgorithmNamesStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IMacAlgorithmNamesStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IMacAlgorithmNamesStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IMacAlgorithmNamesStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::ISymmetricAlgorithmNamesStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Core::ISymmetricAlgorithmNamesStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_ISymmetricAlgorithmNamesStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IAsymmetricAlgorithmNamesStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IAsymmetricAlgorithmNamesStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IAsymmetricAlgorithmNamesStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IAsymmetricAlgorithmNamesStatics2>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IAsymmetricAlgorithmNamesStatics2;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IAsymmetricAlgorithmNamesStatics2<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IEccCurveNamesStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IEccCurveNamesStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IEccCurveNamesStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmNamesStatics>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmNamesStatics;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationAlgorithmNamesStatics<T>;
};

template <> struct traits<Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmNamesStatics2>
{
	using abi = ABI::Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmNamesStatics2;
	template <typename T> using methods = Windows::Security::Cryptography::Core::impl_IKeyDerivationAlgorithmNamesStatics2<T>;
};

template <> struct traits<Windows::Security::Credentials::IWebAccountFactory>
{
	using abi = ABI::Windows::Security::Credentials::IWebAccountFactory;
	template <typename T> using methods = Windows::Security::Credentials::impl_IWebAccountFactory<T>;
};

template <> struct traits<Windows::Security::Credentials::IWebAccount>
{
	using abi = ABI::Windows::Security::Credentials::IWebAccount;
	template <typename T> using methods = Windows::Security::Credentials::impl_IWebAccount<T>;
};

template <> struct traits<Windows::Security::Credentials::IWebAccount2>
{
	using abi = ABI::Windows::Security::Credentials::IWebAccount2;
	template <typename T> using methods = Windows::Security::Credentials::impl_IWebAccount2<T>;
};

template <> struct traits<Windows::Security::Credentials::IWebAccountProviderFactory>
{
	using abi = ABI::Windows::Security::Credentials::IWebAccountProviderFactory;
	template <typename T> using methods = Windows::Security::Credentials::impl_IWebAccountProviderFactory<T>;
};

template <> struct traits<Windows::Security::Credentials::IWebAccountProvider>
{
	using abi = ABI::Windows::Security::Credentials::IWebAccountProvider;
	template <typename T> using methods = Windows::Security::Credentials::impl_IWebAccountProvider<T>;
};

template <> struct traits<Windows::Security::Credentials::IWebAccountProvider2>
{
	using abi = ABI::Windows::Security::Credentials::IWebAccountProvider2;
	template <typename T> using methods = Windows::Security::Credentials::impl_IWebAccountProvider2<T>;
};

template <> struct traits<Windows::Security::Credentials::IWebAccountProvider3>
{
	using abi = ABI::Windows::Security::Credentials::IWebAccountProvider3;
	template <typename T> using methods = Windows::Security::Credentials::impl_IWebAccountProvider3<T>;
};

template <> struct traits<Windows::Security::Credentials::IKeyCredentialManagerStatics>
{
	using abi = ABI::Windows::Security::Credentials::IKeyCredentialManagerStatics;
	template <typename T> using methods = Windows::Security::Credentials::impl_IKeyCredentialManagerStatics<T>;
};

template <> struct traits<Windows::Security::Credentials::IKeyCredential>
{
	using abi = ABI::Windows::Security::Credentials::IKeyCredential;
	template <typename T> using methods = Windows::Security::Credentials::impl_IKeyCredential<T>;
};

template <> struct traits<Windows::Security::Credentials::IKeyCredentialRetrievalResult>
{
	using abi = ABI::Windows::Security::Credentials::IKeyCredentialRetrievalResult;
	template <typename T> using methods = Windows::Security::Credentials::impl_IKeyCredentialRetrievalResult<T>;
};

template <> struct traits<Windows::Security::Credentials::IKeyCredentialOperationResult>
{
	using abi = ABI::Windows::Security::Credentials::IKeyCredentialOperationResult;
	template <typename T> using methods = Windows::Security::Credentials::impl_IKeyCredentialOperationResult<T>;
};

template <> struct traits<Windows::Security::Credentials::IKeyCredentialAttestationResult>
{
	using abi = ABI::Windows::Security::Credentials::IKeyCredentialAttestationResult;
	template <typename T> using methods = Windows::Security::Credentials::impl_IKeyCredentialAttestationResult<T>;
};

template <> struct traits<Windows::Security::Credentials::IPasswordCredential>
{
	using abi = ABI::Windows::Security::Credentials::IPasswordCredential;
	template <typename T> using methods = Windows::Security::Credentials::impl_IPasswordCredential<T>;
};

template <> struct traits<Windows::Security::Credentials::ICredentialFactory>
{
	using abi = ABI::Windows::Security::Credentials::ICredentialFactory;
	template <typename T> using methods = Windows::Security::Credentials::impl_ICredentialFactory<T>;
};

template <> struct traits<Windows::Security::Credentials::IPasswordVault>
{
	using abi = ABI::Windows::Security::Credentials::IPasswordVault;
	template <typename T> using methods = Windows::Security::Credentials::impl_IPasswordVault<T>;
};

template <> struct traits<Windows::Web::IUriToStreamResolver>
{
	using abi = ABI::Windows::Web::IUriToStreamResolver;
	template <typename T> using methods = Windows::Web::impl_IUriToStreamResolver<T>;
};

template <> struct traits<Windows::Web::IWebErrorStatics>
{
	using abi = ABI::Windows::Web::IWebErrorStatics;
	template <typename T> using methods = Windows::Web::impl_IWebErrorStatics<T>;
};

template <> struct traits<Windows::Networking::Sockets::IControlChannelTrigger>
{
	using abi = ABI::Windows::Networking::Sockets::IControlChannelTrigger;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IControlChannelTrigger<T>;
};

template <> struct traits<Windows::Networking::Sockets::IControlChannelTriggerFactory>
{
	using abi = ABI::Windows::Networking::Sockets::IControlChannelTriggerFactory;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IControlChannelTriggerFactory<T>;
};

template <> struct traits<Windows::Networking::Sockets::IControlChannelTriggerEventDetails>
{
	using abi = ABI::Windows::Networking::Sockets::IControlChannelTriggerEventDetails;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IControlChannelTriggerEventDetails<T>;
};

template <> struct traits<Windows::Networking::Sockets::IControlChannelTriggerResetEventDetails>
{
	using abi = ABI::Windows::Networking::Sockets::IControlChannelTriggerResetEventDetails;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IControlChannelTriggerResetEventDetails<T>;
};

template <> struct traits<Windows::Networking::Sockets::ISocketActivityInformation>
{
	using abi = ABI::Windows::Networking::Sockets::ISocketActivityInformation;
	template <typename T> using methods = Windows::Networking::Sockets::impl_ISocketActivityInformation<T>;
};

template <> struct traits<Windows::Networking::Sockets::ISocketActivityTriggerDetails>
{
	using abi = ABI::Windows::Networking::Sockets::ISocketActivityTriggerDetails;
	template <typename T> using methods = Windows::Networking::Sockets::impl_ISocketActivityTriggerDetails<T>;
};

template <> struct traits<Windows::Networking::Sockets::ISocketActivityInformationStatics>
{
	using abi = ABI::Windows::Networking::Sockets::ISocketActivityInformationStatics;
	template <typename T> using methods = Windows::Networking::Sockets::impl_ISocketActivityInformationStatics<T>;
};

template <> struct traits<Windows::Networking::Sockets::ISocketActivityContext>
{
	using abi = ABI::Windows::Networking::Sockets::ISocketActivityContext;
	template <typename T> using methods = Windows::Networking::Sockets::impl_ISocketActivityContext<T>;
};

template <> struct traits<Windows::Networking::Sockets::ISocketActivityContextFactory>
{
	using abi = ABI::Windows::Networking::Sockets::ISocketActivityContextFactory;
	template <typename T> using methods = Windows::Networking::Sockets::impl_ISocketActivityContextFactory<T>;
};

template <> struct traits<Windows::Networking::Sockets::IDatagramSocketMessageReceivedEventArgs>
{
	using abi = ABI::Windows::Networking::Sockets::IDatagramSocketMessageReceivedEventArgs;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IDatagramSocketMessageReceivedEventArgs<T>;
};

template <> struct traits<Windows::Networking::Sockets::IMessageWebSocketMessageReceivedEventArgs>
{
	using abi = ABI::Windows::Networking::Sockets::IMessageWebSocketMessageReceivedEventArgs;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IMessageWebSocketMessageReceivedEventArgs<T>;
};

template <> struct traits<Windows::Networking::Sockets::IWebSocketClosedEventArgs>
{
	using abi = ABI::Windows::Networking::Sockets::IWebSocketClosedEventArgs;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IWebSocketClosedEventArgs<T>;
};

template <> struct traits<Windows::Networking::Sockets::IDatagramSocketInformation>
{
	using abi = ABI::Windows::Networking::Sockets::IDatagramSocketInformation;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IDatagramSocketInformation<T>;
};

template <> struct traits<Windows::Networking::Sockets::IDatagramSocketControl>
{
	using abi = ABI::Windows::Networking::Sockets::IDatagramSocketControl;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IDatagramSocketControl<T>;
};

template <> struct traits<Windows::Networking::Sockets::IDatagramSocketControl2>
{
	using abi = ABI::Windows::Networking::Sockets::IDatagramSocketControl2;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IDatagramSocketControl2<T>;
};

template <> struct traits<Windows::Networking::Sockets::IDatagramSocketControl3>
{
	using abi = ABI::Windows::Networking::Sockets::IDatagramSocketControl3;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IDatagramSocketControl3<T>;
};

template <> struct traits<Windows::Networking::Sockets::IDatagramSocketStatics>
{
	using abi = ABI::Windows::Networking::Sockets::IDatagramSocketStatics;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IDatagramSocketStatics<T>;
};

template <> struct traits<Windows::Networking::Sockets::IDatagramSocket>
{
	using abi = ABI::Windows::Networking::Sockets::IDatagramSocket;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IDatagramSocket<T>;
};

template <> struct traits<Windows::Networking::Sockets::IDatagramSocket2>
{
	using abi = ABI::Windows::Networking::Sockets::IDatagramSocket2;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IDatagramSocket2<T>;
};

template <> struct traits<Windows::Networking::Sockets::IDatagramSocket3>
{
	using abi = ABI::Windows::Networking::Sockets::IDatagramSocket3;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IDatagramSocket3<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamSocketInformation>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamSocketInformation;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamSocketInformation<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamSocketInformation2>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamSocketInformation2;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamSocketInformation2<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamSocketControl>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamSocketControl;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamSocketControl<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamSocketControl2>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamSocketControl2;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamSocketControl2<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamSocketControl3>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamSocketControl3;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamSocketControl3<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamSocket>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamSocket;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamSocket<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamSocket2>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamSocket2;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamSocket2<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamSocket3>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamSocket3;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamSocket3<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamSocketListenerControl>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamSocketListenerControl;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamSocketListenerControl<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamSocketListenerControl2>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamSocketListenerControl2;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamSocketListenerControl2<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamSocketListenerInformation>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamSocketListenerInformation;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamSocketListenerInformation<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamSocketListenerConnectionReceivedEventArgs>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamSocketListenerConnectionReceivedEventArgs;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamSocketListenerConnectionReceivedEventArgs<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamSocketListener>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamSocketListener;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamSocketListener<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamSocketListener2>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamSocketListener2;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamSocketListener2<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamSocketListener3>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamSocketListener3;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamSocketListener3<T>;
};

template <> struct traits<Windows::Networking::Sockets::IWebSocketControl>
{
	using abi = ABI::Windows::Networking::Sockets::IWebSocketControl;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IWebSocketControl<T>;
};

template <> struct traits<Windows::Networking::Sockets::IWebSocketInformation>
{
	using abi = ABI::Windows::Networking::Sockets::IWebSocketInformation;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IWebSocketInformation<T>;
};

template <> struct traits<Windows::Networking::Sockets::IWebSocket>
{
	using abi = ABI::Windows::Networking::Sockets::IWebSocket;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IWebSocket<T>;
};

template <> struct traits<Windows::Networking::Sockets::IMessageWebSocketControl>
{
	using abi = ABI::Windows::Networking::Sockets::IMessageWebSocketControl;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IMessageWebSocketControl<T>;
};

template <> struct traits<Windows::Networking::Sockets::IMessageWebSocket>
{
	using abi = ABI::Windows::Networking::Sockets::IMessageWebSocket;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IMessageWebSocket<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamWebSocketControl>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamWebSocketControl;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamWebSocketControl<T>;
};

template <> struct traits<Windows::Networking::Sockets::IStreamWebSocket>
{
	using abi = ABI::Windows::Networking::Sockets::IStreamWebSocket;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IStreamWebSocket<T>;
};

template <> struct traits<Windows::Networking::Sockets::ISocketErrorStatics>
{
	using abi = ABI::Windows::Networking::Sockets::ISocketErrorStatics;
	template <typename T> using methods = Windows::Networking::Sockets::impl_ISocketErrorStatics<T>;
};

template <> struct traits<Windows::Networking::Sockets::IWebSocketErrorStatics>
{
	using abi = ABI::Windows::Networking::Sockets::IWebSocketErrorStatics;
	template <typename T> using methods = Windows::Networking::Sockets::impl_IWebSocketErrorStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceIdStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceIdStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::Rfcomm::impl_IRfcommServiceIdStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceId>
{
	using abi = ABI::Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceId;
	template <typename T> using methods = Windows::Devices::Bluetooth::Rfcomm::impl_IRfcommServiceId<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceServiceStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceServiceStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::Rfcomm::impl_IRfcommDeviceServiceStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService>
{
	using abi = ABI::Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService;
	template <typename T> using methods = Windows::Devices::Bluetooth::Rfcomm::impl_IRfcommDeviceService<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService2>
{
	using abi = ABI::Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService2;
	template <typename T> using methods = Windows::Devices::Bluetooth::Rfcomm::impl_IRfcommDeviceService2<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProviderStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProviderStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::Rfcomm::impl_IRfcommServiceProviderStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider>
{
	using abi = ABI::Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider;
	template <typename T> using methods = Windows::Devices::Bluetooth::Rfcomm::impl_IRfcommServiceProvider<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider2>
{
	using abi = ABI::Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider2;
	template <typename T> using methods = Windows::Devices::Bluetooth::Rfcomm::impl_IRfcommServiceProvider2<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::IBluetoothDevice>
{
	using abi = ABI::Windows::Devices::Bluetooth::IBluetoothDevice;
	template <typename T> using methods = Windows::Devices::Bluetooth::impl_IBluetoothDevice<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::IBluetoothDevice2>
{
	using abi = ABI::Windows::Devices::Bluetooth::IBluetoothDevice2;
	template <typename T> using methods = Windows::Devices::Bluetooth::impl_IBluetoothDevice2<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::IBluetoothDeviceStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::IBluetoothDeviceStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::impl_IBluetoothDeviceStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::IBluetoothDeviceStatics2>
{
	using abi = ABI::Windows::Devices::Bluetooth::IBluetoothDeviceStatics2;
	template <typename T> using methods = Windows::Devices::Bluetooth::impl_IBluetoothDeviceStatics2<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::IBluetoothLEAppearanceCategoriesStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::IBluetoothLEAppearanceCategoriesStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::impl_IBluetoothLEAppearanceCategoriesStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::IBluetoothLEAppearanceSubcategoriesStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::IBluetoothLEAppearanceSubcategoriesStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::impl_IBluetoothLEAppearanceSubcategoriesStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::IBluetoothLEAppearance>
{
	using abi = ABI::Windows::Devices::Bluetooth::IBluetoothLEAppearance;
	template <typename T> using methods = Windows::Devices::Bluetooth::impl_IBluetoothLEAppearance<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::IBluetoothLEAppearanceStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::IBluetoothLEAppearanceStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::impl_IBluetoothLEAppearanceStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::IBluetoothLEDevice>
{
	using abi = ABI::Windows::Devices::Bluetooth::IBluetoothLEDevice;
	template <typename T> using methods = Windows::Devices::Bluetooth::impl_IBluetoothLEDevice<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::IBluetoothLEDevice2>
{
	using abi = ABI::Windows::Devices::Bluetooth::IBluetoothLEDevice2;
	template <typename T> using methods = Windows::Devices::Bluetooth::impl_IBluetoothLEDevice2<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::IBluetoothLEDeviceStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::IBluetoothLEDeviceStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::impl_IBluetoothLEDeviceStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::IBluetoothLEDeviceStatics2>
{
	using abi = ABI::Windows::Devices::Bluetooth::IBluetoothLEDeviceStatics2;
	template <typename T> using methods = Windows::Devices::Bluetooth::impl_IBluetoothLEDeviceStatics2<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::IBluetoothClassOfDevice>
{
	using abi = ABI::Windows::Devices::Bluetooth::IBluetoothClassOfDevice;
	template <typename T> using methods = Windows::Devices::Bluetooth::impl_IBluetoothClassOfDevice<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::IBluetoothClassOfDeviceStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::IBluetoothClassOfDeviceStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::impl_IBluetoothClassOfDeviceStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::IBluetoothSignalStrengthFilter>
{
	using abi = ABI::Windows::Devices::Bluetooth::IBluetoothSignalStrengthFilter;
	template <typename T> using methods = Windows::Devices::Bluetooth::impl_IBluetoothSignalStrengthFilter<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisement>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisement;
	template <typename T> using methods = Windows::Devices::Bluetooth::Advertisement::impl_IBluetoothLEAdvertisement<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementFilter>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementFilter;
	template <typename T> using methods = Windows::Devices::Bluetooth::Advertisement::impl_IBluetoothLEAdvertisementFilter<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcherStoppedEventArgs>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcherStoppedEventArgs;
	template <typename T> using methods = Windows::Devices::Bluetooth::Advertisement::impl_IBluetoothLEAdvertisementWatcherStoppedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcherFactory>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcherFactory;
	template <typename T> using methods = Windows::Devices::Bluetooth::Advertisement::impl_IBluetoothLEAdvertisementWatcherFactory<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcher>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcher;
	template <typename T> using methods = Windows::Devices::Bluetooth::Advertisement::impl_IBluetoothLEAdvertisementWatcher<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementReceivedEventArgs>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementReceivedEventArgs;
	template <typename T> using methods = Windows::Devices::Bluetooth::Advertisement::impl_IBluetoothLEAdvertisementReceivedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementDataSectionFactory>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementDataSectionFactory;
	template <typename T> using methods = Windows::Devices::Bluetooth::Advertisement::impl_IBluetoothLEAdvertisementDataSectionFactory<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementDataSection>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementDataSection;
	template <typename T> using methods = Windows::Devices::Bluetooth::Advertisement::impl_IBluetoothLEAdvertisementDataSection<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEManufacturerDataFactory>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::IBluetoothLEManufacturerDataFactory;
	template <typename T> using methods = Windows::Devices::Bluetooth::Advertisement::impl_IBluetoothLEManufacturerDataFactory<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEManufacturerData>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::IBluetoothLEManufacturerData;
	template <typename T> using methods = Windows::Devices::Bluetooth::Advertisement::impl_IBluetoothLEManufacturerData<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementBytePatternFactory>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementBytePatternFactory;
	template <typename T> using methods = Windows::Devices::Bluetooth::Advertisement::impl_IBluetoothLEAdvertisementBytePatternFactory<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementBytePattern>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementBytePattern;
	template <typename T> using methods = Windows::Devices::Bluetooth::Advertisement::impl_IBluetoothLEAdvertisementBytePattern<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementDataTypesStatics>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementDataTypesStatics;
	template <typename T> using methods = Windows::Devices::Bluetooth::Advertisement::impl_IBluetoothLEAdvertisementDataTypesStatics<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisherStatusChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisherStatusChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Bluetooth::Advertisement::impl_IBluetoothLEAdvertisementPublisherStatusChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisherFactory>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisherFactory;
	template <typename T> using methods = Windows::Devices::Bluetooth::Advertisement::impl_IBluetoothLEAdvertisementPublisherFactory<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisher>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisher;
	template <typename T> using methods = Windows::Devices::Bluetooth::Advertisement::impl_IBluetoothLEAdvertisementPublisher<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Background::IRfcommInboundConnectionInformation>
{
	using abi = ABI::Windows::Devices::Bluetooth::Background::IRfcommInboundConnectionInformation;
	template <typename T> using methods = Windows::Devices::Bluetooth::Background::impl_IRfcommInboundConnectionInformation<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Background::IRfcommOutboundConnectionInformation>
{
	using abi = ABI::Windows::Devices::Bluetooth::Background::IRfcommOutboundConnectionInformation;
	template <typename T> using methods = Windows::Devices::Bluetooth::Background::impl_IRfcommOutboundConnectionInformation<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Background::IRfcommConnectionTriggerDetails>
{
	using abi = ABI::Windows::Devices::Bluetooth::Background::IRfcommConnectionTriggerDetails;
	template <typename T> using methods = Windows::Devices::Bluetooth::Background::impl_IRfcommConnectionTriggerDetails<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Background::IGattCharacteristicNotificationTriggerDetails>
{
	using abi = ABI::Windows::Devices::Bluetooth::Background::IGattCharacteristicNotificationTriggerDetails;
	template <typename T> using methods = Windows::Devices::Bluetooth::Background::impl_IGattCharacteristicNotificationTriggerDetails<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Background::IBluetoothLEAdvertisementWatcherTriggerDetails>
{
	using abi = ABI::Windows::Devices::Bluetooth::Background::IBluetoothLEAdvertisementWatcherTriggerDetails;
	template <typename T> using methods = Windows::Devices::Bluetooth::Background::impl_IBluetoothLEAdvertisementWatcherTriggerDetails<T>;
};

template <> struct traits<Windows::Devices::Bluetooth::Background::IBluetoothLEAdvertisementPublisherTriggerDetails>
{
	using abi = ABI::Windows::Devices::Bluetooth::Background::IBluetoothLEAdvertisementPublisherTriggerDetails;
	template <typename T> using methods = Windows::Devices::Bluetooth::Background::impl_IBluetoothLEAdvertisementPublisherTriggerDetails<T>;
};

template <> struct traits<Windows::Graphics::Display::IDisplayPropertiesEventHandler>
{
	using abi = ABI::Windows::Graphics::Display::IDisplayPropertiesEventHandler;
	template <typename T> using methods = Windows::Graphics::Display::impl_IDisplayPropertiesEventHandler<T>;
};

template <> struct traits<Windows::Graphics::Display::IDisplayInformationStatics>
{
	using abi = ABI::Windows::Graphics::Display::IDisplayInformationStatics;
	template <typename T> using methods = Windows::Graphics::Display::impl_IDisplayInformationStatics<T>;
};

template <> struct traits<Windows::Graphics::Display::IDisplayInformation>
{
	using abi = ABI::Windows::Graphics::Display::IDisplayInformation;
	template <typename T> using methods = Windows::Graphics::Display::impl_IDisplayInformation<T>;
};

template <> struct traits<Windows::Graphics::Display::IDisplayInformation2>
{
	using abi = ABI::Windows::Graphics::Display::IDisplayInformation2;
	template <typename T> using methods = Windows::Graphics::Display::impl_IDisplayInformation2<T>;
};

template <> struct traits<Windows::Graphics::Display::IDisplayInformation3>
{
	using abi = ABI::Windows::Graphics::Display::IDisplayInformation3;
	template <typename T> using methods = Windows::Graphics::Display::impl_IDisplayInformation3<T>;
};

template <> struct traits<Windows::Graphics::Display::IDisplayPropertiesStatics>
{
	using abi = ABI::Windows::Graphics::Display::IDisplayPropertiesStatics;
	template <typename T> using methods = Windows::Graphics::Display::impl_IDisplayPropertiesStatics<T>;
};

template <> struct traits<Windows::Devices::Sensors::ISensorDataThreshold>
{
	using abi = ABI::Windows::Devices::Sensors::ISensorDataThreshold;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ISensorDataThreshold<T>;
};

template <> struct traits<Windows::Devices::Sensors::ISensorDataThresholdTriggerDetails>
{
	using abi = ABI::Windows::Devices::Sensors::ISensorDataThresholdTriggerDetails;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ISensorDataThresholdTriggerDetails<T>;
};

template <> struct traits<Windows::Devices::Sensors::IAccelerometerDeviceId>
{
	using abi = ABI::Windows::Devices::Sensors::IAccelerometerDeviceId;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IAccelerometerDeviceId<T>;
};

template <> struct traits<Windows::Devices::Sensors::IAccelerometerStatics>
{
	using abi = ABI::Windows::Devices::Sensors::IAccelerometerStatics;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IAccelerometerStatics<T>;
};

template <> struct traits<Windows::Devices::Sensors::IAccelerometer>
{
	using abi = ABI::Windows::Devices::Sensors::IAccelerometer;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IAccelerometer<T>;
};

template <> struct traits<Windows::Devices::Sensors::IAccelerometer2>
{
	using abi = ABI::Windows::Devices::Sensors::IAccelerometer2;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IAccelerometer2<T>;
};

template <> struct traits<Windows::Devices::Sensors::IAccelerometer3>
{
	using abi = ABI::Windows::Devices::Sensors::IAccelerometer3;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IAccelerometer3<T>;
};

template <> struct traits<Windows::Devices::Sensors::IAccelerometerReading>
{
	using abi = ABI::Windows::Devices::Sensors::IAccelerometerReading;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IAccelerometerReading<T>;
};

template <> struct traits<Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IAccelerometerReadingChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Sensors::IAccelerometerShakenEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::IAccelerometerShakenEventArgs;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IAccelerometerShakenEventArgs<T>;
};

template <> struct traits<Windows::Devices::Sensors::IInclinometerDeviceId>
{
	using abi = ABI::Windows::Devices::Sensors::IInclinometerDeviceId;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IInclinometerDeviceId<T>;
};

template <> struct traits<Windows::Devices::Sensors::IInclinometerStatics>
{
	using abi = ABI::Windows::Devices::Sensors::IInclinometerStatics;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IInclinometerStatics<T>;
};

template <> struct traits<Windows::Devices::Sensors::IInclinometerStatics2>
{
	using abi = ABI::Windows::Devices::Sensors::IInclinometerStatics2;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IInclinometerStatics2<T>;
};

template <> struct traits<Windows::Devices::Sensors::IInclinometer>
{
	using abi = ABI::Windows::Devices::Sensors::IInclinometer;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IInclinometer<T>;
};

template <> struct traits<Windows::Devices::Sensors::IInclinometer2>
{
	using abi = ABI::Windows::Devices::Sensors::IInclinometer2;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IInclinometer2<T>;
};

template <> struct traits<Windows::Devices::Sensors::IInclinometerReading>
{
	using abi = ABI::Windows::Devices::Sensors::IInclinometerReading;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IInclinometerReading<T>;
};

template <> struct traits<Windows::Devices::Sensors::IInclinometerReadingYawAccuracy>
{
	using abi = ABI::Windows::Devices::Sensors::IInclinometerReadingYawAccuracy;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IInclinometerReadingYawAccuracy<T>;
};

template <> struct traits<Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IInclinometerReadingChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Sensors::IGyrometerDeviceId>
{
	using abi = ABI::Windows::Devices::Sensors::IGyrometerDeviceId;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IGyrometerDeviceId<T>;
};

template <> struct traits<Windows::Devices::Sensors::IGyrometerStatics>
{
	using abi = ABI::Windows::Devices::Sensors::IGyrometerStatics;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IGyrometerStatics<T>;
};

template <> struct traits<Windows::Devices::Sensors::IGyrometer>
{
	using abi = ABI::Windows::Devices::Sensors::IGyrometer;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IGyrometer<T>;
};

template <> struct traits<Windows::Devices::Sensors::IGyrometer2>
{
	using abi = ABI::Windows::Devices::Sensors::IGyrometer2;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IGyrometer2<T>;
};

template <> struct traits<Windows::Devices::Sensors::IGyrometerReading>
{
	using abi = ABI::Windows::Devices::Sensors::IGyrometerReading;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IGyrometerReading<T>;
};

template <> struct traits<Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IGyrometerReadingChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Sensors::ICompassDeviceId>
{
	using abi = ABI::Windows::Devices::Sensors::ICompassDeviceId;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ICompassDeviceId<T>;
};

template <> struct traits<Windows::Devices::Sensors::ICompassStatics>
{
	using abi = ABI::Windows::Devices::Sensors::ICompassStatics;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ICompassStatics<T>;
};

template <> struct traits<Windows::Devices::Sensors::ICompass>
{
	using abi = ABI::Windows::Devices::Sensors::ICompass;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ICompass<T>;
};

template <> struct traits<Windows::Devices::Sensors::ICompass2>
{
	using abi = ABI::Windows::Devices::Sensors::ICompass2;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ICompass2<T>;
};

template <> struct traits<Windows::Devices::Sensors::ICompassReading>
{
	using abi = ABI::Windows::Devices::Sensors::ICompassReading;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ICompassReading<T>;
};

template <> struct traits<Windows::Devices::Sensors::ICompassReadingHeadingAccuracy>
{
	using abi = ABI::Windows::Devices::Sensors::ICompassReadingHeadingAccuracy;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ICompassReadingHeadingAccuracy<T>;
};

template <> struct traits<Windows::Devices::Sensors::ICompassReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::ICompassReadingChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ICompassReadingChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Sensors::ILightSensorDeviceId>
{
	using abi = ABI::Windows::Devices::Sensors::ILightSensorDeviceId;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ILightSensorDeviceId<T>;
};

template <> struct traits<Windows::Devices::Sensors::ILightSensorStatics>
{
	using abi = ABI::Windows::Devices::Sensors::ILightSensorStatics;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ILightSensorStatics<T>;
};

template <> struct traits<Windows::Devices::Sensors::ILightSensor>
{
	using abi = ABI::Windows::Devices::Sensors::ILightSensor;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ILightSensor<T>;
};

template <> struct traits<Windows::Devices::Sensors::ILightSensorReading>
{
	using abi = ABI::Windows::Devices::Sensors::ILightSensorReading;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ILightSensorReading<T>;
};

template <> struct traits<Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ILightSensorReadingChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Sensors::ISensorRotationMatrix>
{
	using abi = ABI::Windows::Devices::Sensors::ISensorRotationMatrix;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ISensorRotationMatrix<T>;
};

template <> struct traits<Windows::Devices::Sensors::ISensorQuaternion>
{
	using abi = ABI::Windows::Devices::Sensors::ISensorQuaternion;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ISensorQuaternion<T>;
};

template <> struct traits<Windows::Devices::Sensors::IOrientationSensorDeviceId>
{
	using abi = ABI::Windows::Devices::Sensors::IOrientationSensorDeviceId;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IOrientationSensorDeviceId<T>;
};

template <> struct traits<Windows::Devices::Sensors::IOrientationSensorStatics>
{
	using abi = ABI::Windows::Devices::Sensors::IOrientationSensorStatics;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IOrientationSensorStatics<T>;
};

template <> struct traits<Windows::Devices::Sensors::IOrientationSensorStatics2>
{
	using abi = ABI::Windows::Devices::Sensors::IOrientationSensorStatics2;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IOrientationSensorStatics2<T>;
};

template <> struct traits<Windows::Devices::Sensors::IOrientationSensor>
{
	using abi = ABI::Windows::Devices::Sensors::IOrientationSensor;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IOrientationSensor<T>;
};

template <> struct traits<Windows::Devices::Sensors::IOrientationSensor2>
{
	using abi = ABI::Windows::Devices::Sensors::IOrientationSensor2;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IOrientationSensor2<T>;
};

template <> struct traits<Windows::Devices::Sensors::IOrientationSensorReading>
{
	using abi = ABI::Windows::Devices::Sensors::IOrientationSensorReading;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IOrientationSensorReading<T>;
};

template <> struct traits<Windows::Devices::Sensors::IOrientationSensorReadingYawAccuracy>
{
	using abi = ABI::Windows::Devices::Sensors::IOrientationSensorReadingYawAccuracy;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IOrientationSensorReadingYawAccuracy<T>;
};

template <> struct traits<Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IOrientationSensorReadingChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Sensors::ISimpleOrientationSensorDeviceId>
{
	using abi = ABI::Windows::Devices::Sensors::ISimpleOrientationSensorDeviceId;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ISimpleOrientationSensorDeviceId<T>;
};

template <> struct traits<Windows::Devices::Sensors::ISimpleOrientationSensorStatics>
{
	using abi = ABI::Windows::Devices::Sensors::ISimpleOrientationSensorStatics;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ISimpleOrientationSensorStatics<T>;
};

template <> struct traits<Windows::Devices::Sensors::ISimpleOrientationSensor>
{
	using abi = ABI::Windows::Devices::Sensors::ISimpleOrientationSensor;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ISimpleOrientationSensor<T>;
};

template <> struct traits<Windows::Devices::Sensors::ISimpleOrientationSensor2>
{
	using abi = ABI::Windows::Devices::Sensors::ISimpleOrientationSensor2;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ISimpleOrientationSensor2<T>;
};

template <> struct traits<Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Sensors::impl_ISimpleOrientationSensorOrientationChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Sensors::IMagnetometerDeviceId>
{
	using abi = ABI::Windows::Devices::Sensors::IMagnetometerDeviceId;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IMagnetometerDeviceId<T>;
};

template <> struct traits<Windows::Devices::Sensors::IMagnetometerStatics>
{
	using abi = ABI::Windows::Devices::Sensors::IMagnetometerStatics;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IMagnetometerStatics<T>;
};

template <> struct traits<Windows::Devices::Sensors::IMagnetometer>
{
	using abi = ABI::Windows::Devices::Sensors::IMagnetometer;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IMagnetometer<T>;
};

template <> struct traits<Windows::Devices::Sensors::IMagnetometer2>
{
	using abi = ABI::Windows::Devices::Sensors::IMagnetometer2;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IMagnetometer2<T>;
};

template <> struct traits<Windows::Devices::Sensors::IMagnetometerReading>
{
	using abi = ABI::Windows::Devices::Sensors::IMagnetometerReading;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IMagnetometerReading<T>;
};

template <> struct traits<Windows::Devices::Sensors::IMagnetometerReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::IMagnetometerReadingChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IMagnetometerReadingChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Sensors::IActivitySensorStatics>
{
	using abi = ABI::Windows::Devices::Sensors::IActivitySensorStatics;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IActivitySensorStatics<T>;
};

template <> struct traits<Windows::Devices::Sensors::IActivitySensor>
{
	using abi = ABI::Windows::Devices::Sensors::IActivitySensor;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IActivitySensor<T>;
};

template <> struct traits<Windows::Devices::Sensors::IActivitySensorReading>
{
	using abi = ABI::Windows::Devices::Sensors::IActivitySensorReading;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IActivitySensorReading<T>;
};

template <> struct traits<Windows::Devices::Sensors::IActivitySensorReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::IActivitySensorReadingChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IActivitySensorReadingChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Sensors::IActivitySensorReadingChangeReport>
{
	using abi = ABI::Windows::Devices::Sensors::IActivitySensorReadingChangeReport;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IActivitySensorReadingChangeReport<T>;
};

template <> struct traits<Windows::Devices::Sensors::IActivitySensorTriggerDetails>
{
	using abi = ABI::Windows::Devices::Sensors::IActivitySensorTriggerDetails;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IActivitySensorTriggerDetails<T>;
};

template <> struct traits<Windows::Devices::Sensors::IBarometerStatics>
{
	using abi = ABI::Windows::Devices::Sensors::IBarometerStatics;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IBarometerStatics<T>;
};

template <> struct traits<Windows::Devices::Sensors::IBarometer>
{
	using abi = ABI::Windows::Devices::Sensors::IBarometer;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IBarometer<T>;
};

template <> struct traits<Windows::Devices::Sensors::IBarometerReading>
{
	using abi = ABI::Windows::Devices::Sensors::IBarometerReading;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IBarometerReading<T>;
};

template <> struct traits<Windows::Devices::Sensors::IBarometerReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::IBarometerReadingChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IBarometerReadingChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Sensors::IPedometerReading>
{
	using abi = ABI::Windows::Devices::Sensors::IPedometerReading;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IPedometerReading<T>;
};

template <> struct traits<Windows::Devices::Sensors::IPedometerReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::IPedometerReadingChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IPedometerReadingChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Sensors::IPedometerStatics>
{
	using abi = ABI::Windows::Devices::Sensors::IPedometerStatics;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IPedometerStatics<T>;
};

template <> struct traits<Windows::Devices::Sensors::IPedometerStatics2>
{
	using abi = ABI::Windows::Devices::Sensors::IPedometerStatics2;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IPedometerStatics2<T>;
};

template <> struct traits<Windows::Devices::Sensors::IPedometer2>
{
	using abi = ABI::Windows::Devices::Sensors::IPedometer2;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IPedometer2<T>;
};

template <> struct traits<Windows::Devices::Sensors::IPedometer>
{
	using abi = ABI::Windows::Devices::Sensors::IPedometer;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IPedometer<T>;
};

template <> struct traits<Windows::Devices::Sensors::IPedometerDataThresholdFactory>
{
	using abi = ABI::Windows::Devices::Sensors::IPedometerDataThresholdFactory;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IPedometerDataThresholdFactory<T>;
};

template <> struct traits<Windows::Devices::Sensors::IProximitySensorStatics>
{
	using abi = ABI::Windows::Devices::Sensors::IProximitySensorStatics;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IProximitySensorStatics<T>;
};

template <> struct traits<Windows::Devices::Sensors::IProximitySensor>
{
	using abi = ABI::Windows::Devices::Sensors::IProximitySensor;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IProximitySensor<T>;
};

template <> struct traits<Windows::Devices::Sensors::IProximitySensorReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::IProximitySensorReadingChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IProximitySensorReadingChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Sensors::IProximitySensorReading>
{
	using abi = ABI::Windows::Devices::Sensors::IProximitySensorReading;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IProximitySensorReading<T>;
};

template <> struct traits<Windows::Devices::Sensors::IProximitySensorDataThresholdFactory>
{
	using abi = ABI::Windows::Devices::Sensors::IProximitySensorDataThresholdFactory;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IProximitySensorDataThresholdFactory<T>;
};

template <> struct traits<Windows::Devices::Sensors::IProximitySensorStatics2>
{
	using abi = ABI::Windows::Devices::Sensors::IProximitySensorStatics2;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IProximitySensorStatics2<T>;
};

template <> struct traits<Windows::Devices::Sensors::IAltimeterStatics>
{
	using abi = ABI::Windows::Devices::Sensors::IAltimeterStatics;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IAltimeterStatics<T>;
};

template <> struct traits<Windows::Devices::Sensors::IAltimeter>
{
	using abi = ABI::Windows::Devices::Sensors::IAltimeter;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IAltimeter<T>;
};

template <> struct traits<Windows::Devices::Sensors::IAltimeterReading>
{
	using abi = ABI::Windows::Devices::Sensors::IAltimeterReading;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IAltimeterReading<T>;
};

template <> struct traits<Windows::Devices::Sensors::IAltimeterReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::IAltimeterReadingChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Sensors::impl_IAltimeterReadingChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsMessageReceivedEventHandler>
{
	using abi = ABI::Windows::Devices::Sms::ISmsMessageReceivedEventHandler;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsMessageReceivedEventHandler<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsDeviceStatusChangedEventHandler>
{
	using abi = ABI::Windows::Devices::Sms::ISmsDeviceStatusChangedEventHandler;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsDeviceStatusChangedEventHandler<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsMessage>
{
	using abi = ABI::Windows::Devices::Sms::ISmsMessage;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsMessage<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsMessageBase>
{
	using abi = ABI::Windows::Devices::Sms::ISmsMessageBase;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsMessageBase<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsBinaryMessage>
{
	using abi = ABI::Windows::Devices::Sms::ISmsBinaryMessage;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsBinaryMessage<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsTextMessage>
{
	using abi = ABI::Windows::Devices::Sms::ISmsTextMessage;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsTextMessage<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsTextMessageStatics>
{
	using abi = ABI::Windows::Devices::Sms::ISmsTextMessageStatics;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsTextMessageStatics<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsTextMessage2>
{
	using abi = ABI::Windows::Devices::Sms::ISmsTextMessage2;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsTextMessage2<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsWapMessage>
{
	using abi = ABI::Windows::Devices::Sms::ISmsWapMessage;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsWapMessage<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsAppMessage>
{
	using abi = ABI::Windows::Devices::Sms::ISmsAppMessage;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsAppMessage<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsBroadcastMessage>
{
	using abi = ABI::Windows::Devices::Sms::ISmsBroadcastMessage;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsBroadcastMessage<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsVoicemailMessage>
{
	using abi = ABI::Windows::Devices::Sms::ISmsVoicemailMessage;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsVoicemailMessage<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsStatusMessage>
{
	using abi = ABI::Windows::Devices::Sms::ISmsStatusMessage;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsStatusMessage<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsDeviceMessageStore>
{
	using abi = ABI::Windows::Devices::Sms::ISmsDeviceMessageStore;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsDeviceMessageStore<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsSendMessageResult>
{
	using abi = ABI::Windows::Devices::Sms::ISmsSendMessageResult;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsSendMessageResult<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsMessageReceivedEventArgs>
{
	using abi = ABI::Windows::Devices::Sms::ISmsMessageReceivedEventArgs;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsMessageReceivedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsDeviceStatics>
{
	using abi = ABI::Windows::Devices::Sms::ISmsDeviceStatics;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsDeviceStatics<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsDeviceStatics2>
{
	using abi = ABI::Windows::Devices::Sms::ISmsDeviceStatics2;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsDeviceStatics2<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsDevice>
{
	using abi = ABI::Windows::Devices::Sms::ISmsDevice;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsDevice<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsDevice2Statics>
{
	using abi = ABI::Windows::Devices::Sms::ISmsDevice2Statics;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsDevice2Statics<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsDevice2>
{
	using abi = ABI::Windows::Devices::Sms::ISmsDevice2;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsDevice2<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsReceivedEventDetails>
{
	using abi = ABI::Windows::Devices::Sms::ISmsReceivedEventDetails;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsReceivedEventDetails<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsReceivedEventDetails2>
{
	using abi = ABI::Windows::Devices::Sms::ISmsReceivedEventDetails2;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsReceivedEventDetails2<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsMessageReceivedTriggerDetails>
{
	using abi = ABI::Windows::Devices::Sms::ISmsMessageReceivedTriggerDetails;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsMessageReceivedTriggerDetails<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsFilterRule>
{
	using abi = ABI::Windows::Devices::Sms::ISmsFilterRule;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsFilterRule<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsFilterRuleFactory>
{
	using abi = ABI::Windows::Devices::Sms::ISmsFilterRuleFactory;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsFilterRuleFactory<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsFilterRules>
{
	using abi = ABI::Windows::Devices::Sms::ISmsFilterRules;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsFilterRules<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsFilterRulesFactory>
{
	using abi = ABI::Windows::Devices::Sms::ISmsFilterRulesFactory;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsFilterRulesFactory<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsMessageRegistrationStatics>
{
	using abi = ABI::Windows::Devices::Sms::ISmsMessageRegistrationStatics;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsMessageRegistrationStatics<T>;
};

template <> struct traits<Windows::Devices::Sms::ISmsMessageRegistration>
{
	using abi = ABI::Windows::Devices::Sms::ISmsMessageRegistration;
	template <typename T> using methods = Windows::Devices::Sms::impl_ISmsMessageRegistration<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundTaskCanceledEventHandler>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskCanceledEventHandler;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskCanceledEventHandler<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundTaskProgressEventHandler>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskProgressEventHandler;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskProgressEventHandler<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventHandler>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventHandler;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskCompletedEventHandler<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IAlarmApplicationManagerStatics>
{
	using abi = ABI::Windows::ApplicationModel::Background::IAlarmApplicationManagerStatics;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IAlarmApplicationManagerStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IApplicationTriggerDetails>
{
	using abi = ABI::Windows::ApplicationModel::Background::IApplicationTriggerDetails;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IApplicationTriggerDetails<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundExecutionManagerStatics>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundExecutionManagerStatics;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundExecutionManagerStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundTaskInstance>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskInstance;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskInstance<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundWorkCostStatics>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundWorkCostStatics;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundWorkCostStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundTaskDeferral>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskDeferral;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskDeferral<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundTaskInstance2>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskInstance2;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskInstance2<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundTask>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundTask;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundTask<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundTaskRegistration>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskRegistration;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskRegistration<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundTaskRegistration2>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskRegistration2;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskRegistration2<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IAppointmentStoreNotificationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IAppointmentStoreNotificationTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IAppointmentStoreNotificationTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IApplicationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IApplicationTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IApplicationTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IMediaProcessingTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IMediaProcessingTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IMediaProcessingTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundTaskRegistrationStatics>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskRegistrationStatics;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskRegistrationStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundTaskBuilder>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskBuilder;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskBuilder<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundCondition>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundCondition;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundCondition<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundTaskBuilder2>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskBuilder2;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskBuilder2<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundTaskBuilder3>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskBuilder3;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskBuilder3<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskCompletedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBackgroundTaskProgressEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IChatMessageNotificationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IChatMessageNotificationTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IChatMessageNotificationTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IChatMessageReceivedNotificationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IChatMessageReceivedNotificationTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IChatMessageReceivedNotificationTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IRcsEndUserMessageAvailableTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IRcsEndUserMessageAvailableTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IRcsEndUserMessageAvailableTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IContactStoreNotificationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IContactStoreNotificationTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IContactStoreNotificationTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IContentPrefetchTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IContentPrefetchTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IContentPrefetchTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IContentPrefetchTriggerFactory>
{
	using abi = ABI::Windows::ApplicationModel::Background::IContentPrefetchTriggerFactory;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IContentPrefetchTriggerFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IEmailStoreNotificationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IEmailStoreNotificationTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IEmailStoreNotificationTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::ISmsMessageReceivedTriggerFactory>
{
	using abi = ABI::Windows::ApplicationModel::Background::ISmsMessageReceivedTriggerFactory;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_ISmsMessageReceivedTriggerFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IStorageLibraryContentChangedTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IStorageLibraryContentChangedTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IStorageLibraryContentChangedTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IStorageLibraryContentChangedTriggerStatics>
{
	using abi = ABI::Windows::ApplicationModel::Background::IStorageLibraryContentChangedTriggerStatics;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IStorageLibraryContentChangedTriggerStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::ISystemTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::ISystemTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_ISystemTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::ISystemTriggerFactory>
{
	using abi = ABI::Windows::ApplicationModel::Background::ISystemTriggerFactory;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_ISystemTriggerFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::ISystemCondition>
{
	using abi = ABI::Windows::ApplicationModel::Background::ISystemCondition;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_ISystemCondition<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::ISystemConditionFactory>
{
	using abi = ABI::Windows::ApplicationModel::Background::ISystemConditionFactory;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_ISystemConditionFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_INetworkOperatorNotificationTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::INetworkOperatorNotificationTriggerFactory>
{
	using abi = ABI::Windows::ApplicationModel::Background::INetworkOperatorNotificationTriggerFactory;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_INetworkOperatorNotificationTriggerFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::ICachedFileUpdaterTriggerDetails>
{
	using abi = ABI::Windows::ApplicationModel::Background::ICachedFileUpdaterTriggerDetails;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_ICachedFileUpdaterTriggerDetails<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::ICachedFileUpdaterTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::ICachedFileUpdaterTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_ICachedFileUpdaterTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::ITimeTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::ITimeTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_ITimeTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::ITimeTriggerFactory>
{
	using abi = ABI::Windows::ApplicationModel::Background::ITimeTriggerFactory;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_ITimeTriggerFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IMaintenanceTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IMaintenanceTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IMaintenanceTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IMaintenanceTriggerFactory>
{
	using abi = ABI::Windows::ApplicationModel::Background::IMaintenanceTriggerFactory;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IMaintenanceTriggerFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IPhoneTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IPhoneTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IPhoneTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IPhoneTriggerFactory>
{
	using abi = ABI::Windows::ApplicationModel::Background::IPhoneTriggerFactory;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IPhoneTriggerFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IDeviceUseTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IDeviceUseTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IDeviceUseTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IDeviceServicingTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IDeviceServicingTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IDeviceServicingTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IRfcommConnectionTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IRfcommConnectionTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IRfcommConnectionTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IDeviceConnectionChangeTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IDeviceConnectionChangeTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IDeviceConnectionChangeTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IDeviceConnectionChangeTriggerStatics>
{
	using abi = ABI::Windows::ApplicationModel::Background::IDeviceConnectionChangeTriggerStatics;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IDeviceConnectionChangeTriggerStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IGattCharacteristicNotificationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IGattCharacteristicNotificationTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IGattCharacteristicNotificationTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IGattCharacteristicNotificationTriggerFactory>
{
	using abi = ABI::Windows::ApplicationModel::Background::IGattCharacteristicNotificationTriggerFactory;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IGattCharacteristicNotificationTriggerFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBluetoothLEAdvertisementWatcherTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBluetoothLEAdvertisementWatcherTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBluetoothLEAdvertisementWatcherTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IBluetoothLEAdvertisementPublisherTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IBluetoothLEAdvertisementPublisherTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IBluetoothLEAdvertisementPublisherTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IDeviceWatcherTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IDeviceWatcherTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IDeviceWatcherTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::ILocationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::ILocationTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_ILocationTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::ILocationTriggerFactory>
{
	using abi = ABI::Windows::ApplicationModel::Background::ILocationTriggerFactory;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_ILocationTriggerFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IActivitySensorTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::IActivitySensorTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IActivitySensorTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IActivitySensorTriggerFactory>
{
	using abi = ABI::Windows::ApplicationModel::Background::IActivitySensorTriggerFactory;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IActivitySensorTriggerFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::ISensorDataThresholdTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::ISensorDataThresholdTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_ISensorDataThresholdTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::ISensorDataThresholdTriggerFactory>
{
	using abi = ABI::Windows::ApplicationModel::Background::ISensorDataThresholdTriggerFactory;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_ISensorDataThresholdTriggerFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_INetworkOperatorHotspotAuthenticationTrigger<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IPushNotificationTriggerFactory>
{
	using abi = ABI::Windows::ApplicationModel::Background::IPushNotificationTriggerFactory;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IPushNotificationTriggerFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IToastNotificationHistoryChangedTriggerFactory>
{
	using abi = ABI::Windows::ApplicationModel::Background::IToastNotificationHistoryChangedTriggerFactory;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IToastNotificationHistoryChangedTriggerFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Background::IToastNotificationActionTriggerFactory>
{
	using abi = ABI::Windows::ApplicationModel::Background::IToastNotificationActionTriggerFactory;
	template <typename T> using methods = Windows::ApplicationModel::Background::impl_IToastNotificationActionTriggerFactory<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceConnectionChangeTriggerDetails>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceConnectionChangeTriggerDetails;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceConnectionChangeTriggerDetails<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDevicePickerAppearance>
{
	using abi = ABI::Windows::Devices::Enumeration::IDevicePickerAppearance;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDevicePickerAppearance<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceSelectedEventArgs>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceSelectedEventArgs;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceSelectedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceDisconnectButtonClickedEventArgs>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceDisconnectButtonClickedEventArgs;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceDisconnectButtonClickedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDevicePickerFilter>
{
	using abi = ABI::Windows::Devices::Enumeration::IDevicePickerFilter;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDevicePickerFilter<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDevicePicker>
{
	using abi = ABI::Windows::Devices::Enumeration::IDevicePicker;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDevicePicker<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IEnclosureLocation>
{
	using abi = ABI::Windows::Devices::Enumeration::IEnclosureLocation;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IEnclosureLocation<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceInformationUpdate>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceInformationUpdate;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceInformationUpdate<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceInformationUpdate2>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceInformationUpdate2;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceInformationUpdate2<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceWatcher>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceWatcher;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceWatcher<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceWatcher2>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceWatcher2;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceWatcher2<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceInformationStatics>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceInformationStatics;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceInformationStatics<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceInformationStatics2>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceInformationStatics2;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceInformationStatics2<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceInformation>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceInformation;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceInformation<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDevicePairingResult>
{
	using abi = ABI::Windows::Devices::Enumeration::IDevicePairingResult;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDevicePairingResult<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceUnpairingResult>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceUnpairingResult;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceUnpairingResult<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDevicePairingSettings>
{
	using abi = ABI::Windows::Devices::Enumeration::IDevicePairingSettings;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDevicePairingSettings<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDevicePairingRequestedEventArgs>
{
	using abi = ABI::Windows::Devices::Enumeration::IDevicePairingRequestedEventArgs;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDevicePairingRequestedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceInformationCustomPairing>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceInformationCustomPairing;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceInformationCustomPairing<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceInformationPairing>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceInformationPairing;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceInformationPairing<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceInformationPairing2>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceInformationPairing2;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceInformationPairing2<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceInformationPairingStatics>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceInformationPairingStatics;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceInformationPairingStatics<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceInformation2>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceInformation2;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceInformation2<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceAccessChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceAccessChangedEventArgs;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceAccessChangedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceAccessInformation>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceAccessInformation;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceAccessInformation<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceAccessInformationStatics>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceAccessInformationStatics;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceAccessInformationStatics<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceWatcherEvent>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceWatcherEvent;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceWatcherEvent<T>;
};

template <> struct traits<Windows::Devices::Enumeration::IDeviceWatcherTriggerDetails>
{
	using abi = ABI::Windows::Devices::Enumeration::IDeviceWatcherTriggerDetails;
	template <typename T> using methods = Windows::Devices::Enumeration::impl_IDeviceWatcherTriggerDetails<T>;
};

template <> struct traits<Windows::Devices::Input::IMouseCapabilities>
{
	using abi = ABI::Windows::Devices::Input::IMouseCapabilities;
	template <typename T> using methods = Windows::Devices::Input::impl_IMouseCapabilities<T>;
};

template <> struct traits<Windows::Devices::Input::IKeyboardCapabilities>
{
	using abi = ABI::Windows::Devices::Input::IKeyboardCapabilities;
	template <typename T> using methods = Windows::Devices::Input::impl_IKeyboardCapabilities<T>;
};

template <> struct traits<Windows::Devices::Input::ITouchCapabilities>
{
	using abi = ABI::Windows::Devices::Input::ITouchCapabilities;
	template <typename T> using methods = Windows::Devices::Input::impl_ITouchCapabilities<T>;
};

template <> struct traits<Windows::Devices::Input::IPointerDeviceStatics>
{
	using abi = ABI::Windows::Devices::Input::IPointerDeviceStatics;
	template <typename T> using methods = Windows::Devices::Input::impl_IPointerDeviceStatics<T>;
};

template <> struct traits<Windows::Devices::Input::IPointerDevice>
{
	using abi = ABI::Windows::Devices::Input::IPointerDevice;
	template <typename T> using methods = Windows::Devices::Input::impl_IPointerDevice<T>;
};

template <> struct traits<Windows::Devices::Input::IMouseEventArgs>
{
	using abi = ABI::Windows::Devices::Input::IMouseEventArgs;
	template <typename T> using methods = Windows::Devices::Input::impl_IMouseEventArgs<T>;
};

template <> struct traits<Windows::Devices::Input::IMouseDevice>
{
	using abi = ABI::Windows::Devices::Input::IMouseDevice;
	template <typename T> using methods = Windows::Devices::Input::impl_IMouseDevice<T>;
};

template <> struct traits<Windows::Devices::Input::IMouseDeviceStatics>
{
	using abi = ABI::Windows::Devices::Input::IMouseDeviceStatics;
	template <typename T> using methods = Windows::Devices::Input::impl_IMouseDeviceStatics<T>;
};

template <> struct traits<Windows::UI::Input::IEdgeGestureEventArgs>
{
	using abi = ABI::Windows::UI::Input::IEdgeGestureEventArgs;
	template <typename T> using methods = Windows::UI::Input::impl_IEdgeGestureEventArgs<T>;
};

template <> struct traits<Windows::UI::Input::IEdgeGestureStatics>
{
	using abi = ABI::Windows::UI::Input::IEdgeGestureStatics;
	template <typename T> using methods = Windows::UI::Input::impl_IEdgeGestureStatics<T>;
};

template <> struct traits<Windows::UI::Input::IEdgeGesture>
{
	using abi = ABI::Windows::UI::Input::IEdgeGesture;
	template <typename T> using methods = Windows::UI::Input::impl_IEdgeGesture<T>;
};

template <> struct traits<Windows::UI::Input::IKeyboardDeliveryInterceptor>
{
	using abi = ABI::Windows::UI::Input::IKeyboardDeliveryInterceptor;
	template <typename T> using methods = Windows::UI::Input::impl_IKeyboardDeliveryInterceptor<T>;
};

template <> struct traits<Windows::UI::Input::IKeyboardDeliveryInterceptorStatics>
{
	using abi = ABI::Windows::UI::Input::IKeyboardDeliveryInterceptorStatics;
	template <typename T> using methods = Windows::UI::Input::impl_IKeyboardDeliveryInterceptorStatics<T>;
};

template <> struct traits<Windows::UI::Input::ITappedEventArgs>
{
	using abi = ABI::Windows::UI::Input::ITappedEventArgs;
	template <typename T> using methods = Windows::UI::Input::impl_ITappedEventArgs<T>;
};

template <> struct traits<Windows::UI::Input::IRightTappedEventArgs>
{
	using abi = ABI::Windows::UI::Input::IRightTappedEventArgs;
	template <typename T> using methods = Windows::UI::Input::impl_IRightTappedEventArgs<T>;
};

template <> struct traits<Windows::UI::Input::IHoldingEventArgs>
{
	using abi = ABI::Windows::UI::Input::IHoldingEventArgs;
	template <typename T> using methods = Windows::UI::Input::impl_IHoldingEventArgs<T>;
};

template <> struct traits<Windows::UI::Input::IDraggingEventArgs>
{
	using abi = ABI::Windows::UI::Input::IDraggingEventArgs;
	template <typename T> using methods = Windows::UI::Input::impl_IDraggingEventArgs<T>;
};

template <> struct traits<Windows::UI::Input::IManipulationStartedEventArgs>
{
	using abi = ABI::Windows::UI::Input::IManipulationStartedEventArgs;
	template <typename T> using methods = Windows::UI::Input::impl_IManipulationStartedEventArgs<T>;
};

template <> struct traits<Windows::UI::Input::IManipulationUpdatedEventArgs>
{
	using abi = ABI::Windows::UI::Input::IManipulationUpdatedEventArgs;
	template <typename T> using methods = Windows::UI::Input::impl_IManipulationUpdatedEventArgs<T>;
};

template <> struct traits<Windows::UI::Input::IManipulationInertiaStartingEventArgs>
{
	using abi = ABI::Windows::UI::Input::IManipulationInertiaStartingEventArgs;
	template <typename T> using methods = Windows::UI::Input::impl_IManipulationInertiaStartingEventArgs<T>;
};

template <> struct traits<Windows::UI::Input::IManipulationCompletedEventArgs>
{
	using abi = ABI::Windows::UI::Input::IManipulationCompletedEventArgs;
	template <typename T> using methods = Windows::UI::Input::impl_IManipulationCompletedEventArgs<T>;
};

template <> struct traits<Windows::UI::Input::ICrossSlidingEventArgs>
{
	using abi = ABI::Windows::UI::Input::ICrossSlidingEventArgs;
	template <typename T> using methods = Windows::UI::Input::impl_ICrossSlidingEventArgs<T>;
};

template <> struct traits<Windows::UI::Input::IMouseWheelParameters>
{
	using abi = ABI::Windows::UI::Input::IMouseWheelParameters;
	template <typename T> using methods = Windows::UI::Input::impl_IMouseWheelParameters<T>;
};

template <> struct traits<Windows::UI::Input::IGestureRecognizer>
{
	using abi = ABI::Windows::UI::Input::IGestureRecognizer;
	template <typename T> using methods = Windows::UI::Input::impl_IGestureRecognizer<T>;
};

template <> struct traits<Windows::UI::Input::IPointerPointStatics>
{
	using abi = ABI::Windows::UI::Input::IPointerPointStatics;
	template <typename T> using methods = Windows::UI::Input::impl_IPointerPointStatics<T>;
};

template <> struct traits<Windows::UI::Input::IPointerPointTransform>
{
	using abi = ABI::Windows::UI::Input::IPointerPointTransform;
	template <typename T> using methods = Windows::UI::Input::impl_IPointerPointTransform<T>;
};

template <> struct traits<Windows::UI::Input::IPointerPoint>
{
	using abi = ABI::Windows::UI::Input::IPointerPoint;
	template <typename T> using methods = Windows::UI::Input::impl_IPointerPoint<T>;
};

template <> struct traits<Windows::UI::Input::IPointerPointProperties>
{
	using abi = ABI::Windows::UI::Input::IPointerPointProperties;
	template <typename T> using methods = Windows::UI::Input::impl_IPointerPointProperties<T>;
};

template <> struct traits<Windows::UI::Input::IPointerVisualizationSettings>
{
	using abi = ABI::Windows::UI::Input::IPointerVisualizationSettings;
	template <typename T> using methods = Windows::UI::Input::impl_IPointerVisualizationSettings<T>;
};

template <> struct traits<Windows::UI::Input::IPointerVisualizationSettingsStatics>
{
	using abi = ABI::Windows::UI::Input::IPointerVisualizationSettingsStatics;
	template <typename T> using methods = Windows::UI::Input::impl_IPointerVisualizationSettingsStatics<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkStrokesCollectedEventArgs>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkStrokesCollectedEventArgs;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkStrokesCollectedEventArgs<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkStrokesErasedEventArgs>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkStrokesErasedEventArgs;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkStrokesErasedEventArgs<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkPresenter>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkPresenter;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkPresenter<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkInputProcessingConfiguration>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkInputProcessingConfiguration;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkInputProcessingConfiguration<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkSynchronizer>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkSynchronizer;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkSynchronizer<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkUnprocessedInput>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkUnprocessedInput;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkUnprocessedInput<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkStrokeInput>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkStrokeInput;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkStrokeInput<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkPoint>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkPoint;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkPoint<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkPointFactory>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkPointFactory;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkPointFactory<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkDrawingAttributes>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkDrawingAttributes;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkDrawingAttributes<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkDrawingAttributes2>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkDrawingAttributes2;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkDrawingAttributes2<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkStrokeRenderingSegment>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkStrokeRenderingSegment;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkStrokeRenderingSegment<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkStroke>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkStroke;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkStroke<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkStroke2>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkStroke2;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkStroke2<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkStrokeBuilder>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkStrokeBuilder;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkStrokeBuilder<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkStrokeBuilder2>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkStrokeBuilder2;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkStrokeBuilder2<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkRecognitionResult>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkRecognitionResult;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkRecognitionResult<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkStrokeContainer>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkStrokeContainer;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkStrokeContainer<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkStrokeContainer2>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkStrokeContainer2;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkStrokeContainer2<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkRecognizer>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkRecognizer;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkRecognizer<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkRecognizerContainer>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkRecognizerContainer;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkRecognizerContainer<T>;
};

template <> struct traits<Windows::UI::Input::Inking::IInkManager>
{
	using abi = ABI::Windows::UI::Input::Inking::IInkManager;
	template <typename T> using methods = Windows::UI::Input::Inking::impl_IInkManager<T>;
};

template <> struct traits<Windows::UI::Input::Inking::Core::ICoreInkIndependentInputSource>
{
	using abi = ABI::Windows::UI::Input::Inking::Core::ICoreInkIndependentInputSource;
	template <typename T> using methods = Windows::UI::Input::Inking::Core::impl_ICoreInkIndependentInputSource<T>;
};

template <> struct traits<Windows::UI::Input::Inking::Core::ICoreInkIndependentInputSourceStatics>
{
	using abi = ABI::Windows::UI::Input::Inking::Core::ICoreInkIndependentInputSourceStatics;
	template <typename T> using methods = Windows::UI::Input::Inking::Core::impl_ICoreInkIndependentInputSourceStatics<T>;
};

template <> struct traits<Windows::UI::Core::IDispatchedHandler>
{
	using abi = ABI::Windows::UI::Core::IDispatchedHandler;
	template <typename T> using methods = Windows::UI::Core::impl_IDispatchedHandler<T>;
};

template <> struct traits<Windows::UI::Core::IIdleDispatchedHandler>
{
	using abi = ABI::Windows::UI::Core::IIdleDispatchedHandler;
	template <typename T> using methods = Windows::UI::Core::impl_IIdleDispatchedHandler<T>;
};

template <> struct traits<Windows::UI::Core::ICoreWindowEventArgs>
{
	using abi = ABI::Windows::UI::Core::ICoreWindowEventArgs;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreWindowEventArgs<T>;
};

template <> struct traits<Windows::UI::Core::IAutomationProviderRequestedEventArgs>
{
	using abi = ABI::Windows::UI::Core::IAutomationProviderRequestedEventArgs;
	template <typename T> using methods = Windows::UI::Core::impl_IAutomationProviderRequestedEventArgs<T>;
};

template <> struct traits<Windows::UI::Core::ICharacterReceivedEventArgs>
{
	using abi = ABI::Windows::UI::Core::ICharacterReceivedEventArgs;
	template <typename T> using methods = Windows::UI::Core::impl_ICharacterReceivedEventArgs<T>;
};

template <> struct traits<Windows::UI::Core::IInputEnabledEventArgs>
{
	using abi = ABI::Windows::UI::Core::IInputEnabledEventArgs;
	template <typename T> using methods = Windows::UI::Core::impl_IInputEnabledEventArgs<T>;
};

template <> struct traits<Windows::UI::Core::IKeyEventArgs>
{
	using abi = ABI::Windows::UI::Core::IKeyEventArgs;
	template <typename T> using methods = Windows::UI::Core::impl_IKeyEventArgs<T>;
};

template <> struct traits<Windows::UI::Core::IPointerEventArgs>
{
	using abi = ABI::Windows::UI::Core::IPointerEventArgs;
	template <typename T> using methods = Windows::UI::Core::impl_IPointerEventArgs<T>;
};

template <> struct traits<Windows::UI::Core::ITouchHitTestingEventArgs>
{
	using abi = ABI::Windows::UI::Core::ITouchHitTestingEventArgs;
	template <typename T> using methods = Windows::UI::Core::impl_ITouchHitTestingEventArgs<T>;
};

template <> struct traits<Windows::UI::Core::IWindowActivatedEventArgs>
{
	using abi = ABI::Windows::UI::Core::IWindowActivatedEventArgs;
	template <typename T> using methods = Windows::UI::Core::impl_IWindowActivatedEventArgs<T>;
};

template <> struct traits<Windows::UI::Core::IWindowSizeChangedEventArgs>
{
	using abi = ABI::Windows::UI::Core::IWindowSizeChangedEventArgs;
	template <typename T> using methods = Windows::UI::Core::impl_IWindowSizeChangedEventArgs<T>;
};

template <> struct traits<Windows::UI::Core::IVisibilityChangedEventArgs>
{
	using abi = ABI::Windows::UI::Core::IVisibilityChangedEventArgs;
	template <typename T> using methods = Windows::UI::Core::impl_IVisibilityChangedEventArgs<T>;
};

template <> struct traits<Windows::UI::Core::ICoreWindow>
{
	using abi = ABI::Windows::UI::Core::ICoreWindow;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreWindow<T>;
};

template <> struct traits<Windows::UI::Core::ICoreWindow2>
{
	using abi = ABI::Windows::UI::Core::ICoreWindow2;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreWindow2<T>;
};

template <> struct traits<Windows::UI::Core::ICoreWindowStatic>
{
	using abi = ABI::Windows::UI::Core::ICoreWindowStatic;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreWindowStatic<T>;
};

template <> struct traits<Windows::UI::Core::IAcceleratorKeyEventArgs>
{
	using abi = ABI::Windows::UI::Core::IAcceleratorKeyEventArgs;
	template <typename T> using methods = Windows::UI::Core::impl_IAcceleratorKeyEventArgs<T>;
};

template <> struct traits<Windows::UI::Core::ICoreAcceleratorKeys>
{
	using abi = ABI::Windows::UI::Core::ICoreAcceleratorKeys;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreAcceleratorKeys<T>;
};

template <> struct traits<Windows::UI::Core::ICoreDispatcher>
{
	using abi = ABI::Windows::UI::Core::ICoreDispatcher;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreDispatcher<T>;
};

template <> struct traits<Windows::UI::Core::ICoreDispatcher2>
{
	using abi = ABI::Windows::UI::Core::ICoreDispatcher2;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreDispatcher2<T>;
};

template <> struct traits<Windows::UI::Core::ICoreDispatcherWithTaskPriority>
{
	using abi = ABI::Windows::UI::Core::ICoreDispatcherWithTaskPriority;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreDispatcherWithTaskPriority<T>;
};

template <> struct traits<Windows::UI::Core::IIdleDispatchedHandlerArgs>
{
	using abi = ABI::Windows::UI::Core::IIdleDispatchedHandlerArgs;
	template <typename T> using methods = Windows::UI::Core::impl_IIdleDispatchedHandlerArgs<T>;
};

template <> struct traits<Windows::UI::Core::ICoreCursor>
{
	using abi = ABI::Windows::UI::Core::ICoreCursor;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreCursor<T>;
};

template <> struct traits<Windows::UI::Core::ICoreCursorFactory>
{
	using abi = ABI::Windows::UI::Core::ICoreCursorFactory;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreCursorFactory<T>;
};

template <> struct traits<Windows::UI::Core::IInitializeWithCoreWindow>
{
	using abi = ABI::Windows::UI::Core::IInitializeWithCoreWindow;
	template <typename T> using methods = Windows::UI::Core::impl_IInitializeWithCoreWindow<T>;
};

template <> struct traits<Windows::UI::Core::ICoreWindowResizeManager>
{
	using abi = ABI::Windows::UI::Core::ICoreWindowResizeManager;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreWindowResizeManager<T>;
};

template <> struct traits<Windows::UI::Core::ICoreWindowResizeManagerLayoutCapability>
{
	using abi = ABI::Windows::UI::Core::ICoreWindowResizeManagerLayoutCapability;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreWindowResizeManagerLayoutCapability<T>;
};

template <> struct traits<Windows::UI::Core::ICoreWindowResizeManagerStatics>
{
	using abi = ABI::Windows::UI::Core::ICoreWindowResizeManagerStatics;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreWindowResizeManagerStatics<T>;
};

template <> struct traits<Windows::UI::Core::ICoreInputSourceBase>
{
	using abi = ABI::Windows::UI::Core::ICoreInputSourceBase;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreInputSourceBase<T>;
};

template <> struct traits<Windows::UI::Core::ICorePointerInputSource>
{
	using abi = ABI::Windows::UI::Core::ICorePointerInputSource;
	template <typename T> using methods = Windows::UI::Core::impl_ICorePointerInputSource<T>;
};

template <> struct traits<Windows::UI::Core::ICoreKeyboardInputSource>
{
	using abi = ABI::Windows::UI::Core::ICoreKeyboardInputSource;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreKeyboardInputSource<T>;
};

template <> struct traits<Windows::UI::Core::ICoreComponentFocusable>
{
	using abi = ABI::Windows::UI::Core::ICoreComponentFocusable;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreComponentFocusable<T>;
};

template <> struct traits<Windows::UI::Core::ICoreTouchHitTesting>
{
	using abi = ABI::Windows::UI::Core::ICoreTouchHitTesting;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreTouchHitTesting<T>;
};

template <> struct traits<Windows::UI::Core::ICorePointerRedirector>
{
	using abi = ABI::Windows::UI::Core::ICorePointerRedirector;
	template <typename T> using methods = Windows::UI::Core::impl_ICorePointerRedirector<T>;
};

template <> struct traits<Windows::UI::Core::ICoreWindowPopupShowingEventArgs>
{
	using abi = ABI::Windows::UI::Core::ICoreWindowPopupShowingEventArgs;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreWindowPopupShowingEventArgs<T>;
};

template <> struct traits<Windows::UI::Core::ICoreWindowDialog>
{
	using abi = ABI::Windows::UI::Core::ICoreWindowDialog;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreWindowDialog<T>;
};

template <> struct traits<Windows::UI::Core::ICoreWindowDialogFactory>
{
	using abi = ABI::Windows::UI::Core::ICoreWindowDialogFactory;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreWindowDialogFactory<T>;
};

template <> struct traits<Windows::UI::Core::ICoreWindowFlyout>
{
	using abi = ABI::Windows::UI::Core::ICoreWindowFlyout;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreWindowFlyout<T>;
};

template <> struct traits<Windows::UI::Core::ICoreWindowFlyoutFactory>
{
	using abi = ABI::Windows::UI::Core::ICoreWindowFlyoutFactory;
	template <typename T> using methods = Windows::UI::Core::impl_ICoreWindowFlyoutFactory<T>;
};

template <> struct traits<Windows::UI::Core::ISystemNavigationManager>
{
	using abi = ABI::Windows::UI::Core::ISystemNavigationManager;
	template <typename T> using methods = Windows::UI::Core::impl_ISystemNavigationManager<T>;
};

template <> struct traits<Windows::UI::Core::ISystemNavigationManager2>
{
	using abi = ABI::Windows::UI::Core::ISystemNavigationManager2;
	template <typename T> using methods = Windows::UI::Core::impl_ISystemNavigationManager2<T>;
};

template <> struct traits<Windows::UI::Core::ISystemNavigationManagerStatics>
{
	using abi = ABI::Windows::UI::Core::ISystemNavigationManagerStatics;
	template <typename T> using methods = Windows::UI::Core::impl_ISystemNavigationManagerStatics<T>;
};

template <> struct traits<Windows::UI::Core::IBackRequestedEventArgs>
{
	using abi = ABI::Windows::UI::Core::IBackRequestedEventArgs;
	template <typename T> using methods = Windows::UI::Core::impl_IBackRequestedEventArgs<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IApplicationViewSwitcherStatics>
{
	using abi = ABI::Windows::UI::ViewManagement::IApplicationViewSwitcherStatics;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IApplicationViewSwitcherStatics<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IApplicationViewSwitcherStatics2>
{
	using abi = ABI::Windows::UI::ViewManagement::IApplicationViewSwitcherStatics2;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IApplicationViewSwitcherStatics2<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IApplicationViewInteropStatics>
{
	using abi = ABI::Windows::UI::ViewManagement::IApplicationViewInteropStatics;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IApplicationViewInteropStatics<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IApplicationViewStatics>
{
	using abi = ABI::Windows::UI::ViewManagement::IApplicationViewStatics;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IApplicationViewStatics<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IApplicationViewStatics2>
{
	using abi = ABI::Windows::UI::ViewManagement::IApplicationViewStatics2;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IApplicationViewStatics2<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IApplicationViewStatics3>
{
	using abi = ABI::Windows::UI::ViewManagement::IApplicationViewStatics3;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IApplicationViewStatics3<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IApplicationView>
{
	using abi = ABI::Windows::UI::ViewManagement::IApplicationView;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IApplicationView<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IApplicationView2>
{
	using abi = ABI::Windows::UI::ViewManagement::IApplicationView2;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IApplicationView2<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IApplicationViewTitleBar>
{
	using abi = ABI::Windows::UI::ViewManagement::IApplicationViewTitleBar;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IApplicationViewTitleBar<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IApplicationView3>
{
	using abi = ABI::Windows::UI::ViewManagement::IApplicationView3;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IApplicationView3<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IApplicationViewFullscreenStatics>
{
	using abi = ABI::Windows::UI::ViewManagement::IApplicationViewFullscreenStatics;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IApplicationViewFullscreenStatics<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs>
{
	using abi = ABI::Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IApplicationViewConsolidatedEventArgs<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IActivationViewSwitcher>
{
	using abi = ABI::Windows::UI::ViewManagement::IActivationViewSwitcher;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IActivationViewSwitcher<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IApplicationViewTransferContext>
{
	using abi = ABI::Windows::UI::ViewManagement::IApplicationViewTransferContext;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IApplicationViewTransferContext<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IApplicationViewTransferContextStatics>
{
	using abi = ABI::Windows::UI::ViewManagement::IApplicationViewTransferContextStatics;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IApplicationViewTransferContextStatics<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IInputPaneVisibilityEventArgs>
{
	using abi = ABI::Windows::UI::ViewManagement::IInputPaneVisibilityEventArgs;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IInputPaneVisibilityEventArgs<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IInputPane>
{
	using abi = ABI::Windows::UI::ViewManagement::IInputPane;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IInputPane<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IInputPane2>
{
	using abi = ABI::Windows::UI::ViewManagement::IInputPane2;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IInputPane2<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IInputPaneControl>
{
	using abi = ABI::Windows::UI::ViewManagement::IInputPaneControl;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IInputPaneControl<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IInputPaneStatics>
{
	using abi = ABI::Windows::UI::ViewManagement::IInputPaneStatics;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IInputPaneStatics<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IProjectionManagerStatics>
{
	using abi = ABI::Windows::UI::ViewManagement::IProjectionManagerStatics;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IProjectionManagerStatics<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IProjectionManagerStatics2>
{
	using abi = ABI::Windows::UI::ViewManagement::IProjectionManagerStatics2;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IProjectionManagerStatics2<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IUIViewSettings>
{
	using abi = ABI::Windows::UI::ViewManagement::IUIViewSettings;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IUIViewSettings<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IUIViewSettingsStatics>
{
	using abi = ABI::Windows::UI::ViewManagement::IUIViewSettingsStatics;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IUIViewSettingsStatics<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IAccessibilitySettings>
{
	using abi = ABI::Windows::UI::ViewManagement::IAccessibilitySettings;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IAccessibilitySettings<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IUISettings>
{
	using abi = ABI::Windows::UI::ViewManagement::IUISettings;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IUISettings<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IUISettings2>
{
	using abi = ABI::Windows::UI::ViewManagement::IUISettings2;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IUISettings2<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IUISettings3>
{
	using abi = ABI::Windows::UI::ViewManagement::IUISettings3;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IUISettings3<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IApplicationViewScaling>
{
	using abi = ABI::Windows::UI::ViewManagement::IApplicationViewScaling;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IApplicationViewScaling<T>;
};

template <> struct traits<Windows::UI::ViewManagement::IApplicationViewScalingStatics>
{
	using abi = ABI::Windows::UI::ViewManagement::IApplicationViewScalingStatics;
	template <typename T> using methods = Windows::UI::ViewManagement::impl_IApplicationViewScalingStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactCardOptions>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactCardOptions;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactCardOptions<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactCardOptions2>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactCardOptions2;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactCardOptions2<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IFullContactCardOptions>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IFullContactCardOptions;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IFullContactCardOptions<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactManagerStatics>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactManagerStatics;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactManagerStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactManagerStatics2>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactManagerStatics2;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactManagerStatics2<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactManagerStatics3>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactManagerStatics3;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactManagerStatics3<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IAggregateContactManager>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IAggregateContactManager;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IAggregateContactManager<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactAnnotationStore>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactAnnotationStore;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactAnnotationStore<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactAnnotationList>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactAnnotationList;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactAnnotationList<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactAnnotation>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactAnnotation;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactAnnotation<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactStoreNotificationTriggerDetails>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactStoreNotificationTriggerDetails;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactStoreNotificationTriggerDetails<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactStore>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactStore;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactStore<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactStore2>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactStore2;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactStore2<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactList>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactList;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactList<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactListSyncManager>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactListSyncManager;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactListSyncManager<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactConnectedServiceAccount<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactSignificantOther>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactSignificantOther;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactSignificantOther<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactSignificantOther2>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactSignificantOther2;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactSignificantOther2<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactWebsite>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactWebsite;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactWebsite<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactWebsite2>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactWebsite2;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactWebsite2<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactEmail>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactEmail;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactEmail<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactPhone>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactPhone;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactPhone<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactAddress>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactAddress;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactAddress<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactDate>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactDate;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactDate<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactJobInfo>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactJobInfo;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactJobInfo<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContact>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContact;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContact<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactField>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactField;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactField<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactName>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactName;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactName<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContact2>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContact2;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContact2<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContact3>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContact3;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContact3<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactChange>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactChange;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactChange<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactChangedDeferral>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactChangedDeferral;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactChangedDeferral<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactChangedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactChangedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactChangedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactChangeReader>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactChangeReader;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactChangeReader<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactChangeTracker>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactChangeTracker;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactChangeTracker<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactReader>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactReader;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactReader<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactQueryTextSearch>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactQueryTextSearch;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactQueryTextSearch<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactQueryOptionsFactory>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactQueryOptionsFactory;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactQueryOptionsFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactQueryOptions>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactQueryOptions;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactQueryOptions<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactBatch>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactBatch;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactBatch<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactMatchReason>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactMatchReason;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactMatchReason<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactLaunchActionVerbsStatics>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactLaunchActionVerbsStatics;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactLaunchActionVerbsStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactLocationField>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactLocationField;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactLocationField<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactInstantMessageField>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactInstantMessageField;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactInstantMessageField<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IKnownContactFieldStatics>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IKnownContactFieldStatics;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IKnownContactFieldStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactInformation>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactInformation;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactInformation<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactFieldFactory>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactFieldFactory;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactFieldFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactLocationFieldFactory>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactLocationFieldFactory;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactLocationFieldFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactInstantMessageFieldFactory>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactInstantMessageFieldFactory;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactInstantMessageFieldFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactPicker>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactPicker;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactPicker<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactPicker2>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactPicker2;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactPicker2<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::impl_IContactCardDelayedDataLoader<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneCallHistoryEntry>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneCallHistoryEntry;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneCallHistoryEntry<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryAddress>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryAddress;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneCallHistoryEntryAddress<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryAddressFactory>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryAddressFactory;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneCallHistoryEntryAddressFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryQueryOptions>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryQueryOptions;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneCallHistoryEntryQueryOptions<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryReader>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryReader;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneCallHistoryEntryReader<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneCallHistoryStore>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneCallHistoryStore;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneCallHistoryStore<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneCallHistoryManagerStatics>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneCallHistoryManagerStatics;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneCallHistoryManagerStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneVoicemail>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneVoicemail;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneVoicemail<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneDialOptions>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneDialOptions;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneDialOptions<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneLineCellularDetails>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneLineCellularDetails;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneLineCellularDetails<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneLine>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneLine;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneLine<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneCallStore>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneCallStore;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneCallStore<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneLineConfiguration>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneLineConfiguration;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneLineConfiguration<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneLineStatics>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneLineStatics;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneLineStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneLineWatcher>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneLineWatcher;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneLineWatcher<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneLineWatcherEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneLineWatcherEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneLineWatcherEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneCallManagerStatics>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneCallManagerStatics;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneCallManagerStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneCallManagerStatics2>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneCallManagerStatics2;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneCallManagerStatics2<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneCallVideoCapabilities>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneCallVideoCapabilities;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneCallVideoCapabilities<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneCallVideoCapabilitiesManagerStatics>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneCallVideoCapabilitiesManagerStatics;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneCallVideoCapabilitiesManagerStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IPhoneCallBlockingStatics>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IPhoneCallBlockingStatics;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IPhoneCallBlockingStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::ICallStateChangeEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Calls::ICallStateChangeEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_ICallStateChangeEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::ICallAnswerEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Calls::ICallAnswerEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_ICallAnswerEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::ICallRejectEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Calls::ICallRejectEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_ICallRejectEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IVoipPhoneCall>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IVoipPhoneCall;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IVoipPhoneCall<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IMuteChangeEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IMuteChangeEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IMuteChangeEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IVoipCallCoordinator>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IVoipCallCoordinator;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IVoipCallCoordinator<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::IVoipCallCoordinatorStatics>
{
	using abi = ABI::Windows::ApplicationModel::Calls::IVoipCallCoordinatorStatics;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_IVoipCallCoordinatorStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::ILockScreenCallEndCallDeferral>
{
	using abi = ABI::Windows::ApplicationModel::Calls::ILockScreenCallEndCallDeferral;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_ILockScreenCallEndCallDeferral<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::ILockScreenCallEndRequestedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Calls::ILockScreenCallEndRequestedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_ILockScreenCallEndRequestedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Calls::ILockScreenCallUI>
{
	using abi = ABI::Windows::ApplicationModel::Calls::ILockScreenCallUI;
	template <typename T> using methods = Windows::ApplicationModel::Calls::impl_ILockScreenCallUI<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::Provider::IContactRemovedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::Provider::IContactRemovedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::Provider::impl_IContactRemovedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::Provider::IContactPickerUI>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::Provider::IContactPickerUI;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::Provider::impl_IContactPickerUI<T>;
};

template <> struct traits<Windows::ApplicationModel::Contacts::Provider::IContactPickerUI2>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::Provider::IContactPickerUI2;
	template <typename T> using methods = Windows::ApplicationModel::Contacts::Provider::impl_IContactPickerUI2<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IFileRevocationManagerStatics>
{
	using abi = ABI::Windows::Security::EnterpriseData::IFileRevocationManagerStatics;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IFileRevocationManagerStatics<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IFileProtectionManagerStatics>
{
	using abi = ABI::Windows::Security::EnterpriseData::IFileProtectionManagerStatics;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IFileProtectionManagerStatics<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IFileProtectionManagerStatics2>
{
	using abi = ABI::Windows::Security::EnterpriseData::IFileProtectionManagerStatics2;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IFileProtectionManagerStatics2<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IProtectedFileCreateResult>
{
	using abi = ABI::Windows::Security::EnterpriseData::IProtectedFileCreateResult;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IProtectedFileCreateResult<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IFileProtectionInfo>
{
	using abi = ABI::Windows::Security::EnterpriseData::IFileProtectionInfo;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IFileProtectionInfo<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IProtectedContainerExportResult>
{
	using abi = ABI::Windows::Security::EnterpriseData::IProtectedContainerExportResult;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IProtectedContainerExportResult<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IProtectedContainerImportResult>
{
	using abi = ABI::Windows::Security::EnterpriseData::IProtectedContainerImportResult;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IProtectedContainerImportResult<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IDataProtectionManagerStatics>
{
	using abi = ABI::Windows::Security::EnterpriseData::IDataProtectionManagerStatics;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IDataProtectionManagerStatics<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IDataProtectionInfo>
{
	using abi = ABI::Windows::Security::EnterpriseData::IDataProtectionInfo;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IDataProtectionInfo<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IBufferProtectUnprotectResult>
{
	using abi = ABI::Windows::Security::EnterpriseData::IBufferProtectUnprotectResult;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IBufferProtectUnprotectResult<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IProtectionPolicyManager>
{
	using abi = ABI::Windows::Security::EnterpriseData::IProtectionPolicyManager;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IProtectionPolicyManager<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IProtectionPolicyManagerStatics>
{
	using abi = ABI::Windows::Security::EnterpriseData::IProtectionPolicyManagerStatics;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IProtectionPolicyManagerStatics<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IProtectionPolicyManagerStatics2>
{
	using abi = ABI::Windows::Security::EnterpriseData::IProtectionPolicyManagerStatics2;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IProtectionPolicyManagerStatics2<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IThreadNetworkContext>
{
	using abi = ABI::Windows::Security::EnterpriseData::IThreadNetworkContext;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IThreadNetworkContext<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IProtectedAccessSuspendingEventArgs>
{
	using abi = ABI::Windows::Security::EnterpriseData::IProtectedAccessSuspendingEventArgs;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IProtectedAccessSuspendingEventArgs<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IProtectedAccessResumedEventArgs>
{
	using abi = ABI::Windows::Security::EnterpriseData::IProtectedAccessResumedEventArgs;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IProtectedAccessResumedEventArgs<T>;
};

template <> struct traits<Windows::Security::EnterpriseData::IProtectedContentRevokedEventArgs>
{
	using abi = ABI::Windows::Security::EnterpriseData::IProtectedContentRevokedEventArgs;
	template <typename T> using methods = Windows::Security::EnterpriseData::impl_IProtectedContentRevokedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataProviderHandler>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataProviderHandler;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataProviderHandler<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IStandardDataFormatsStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics2>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IStandardDataFormatsStatics2;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IStandardDataFormatsStatics2<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackagePropertySetView<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackagePropertySetView2<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView3>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView3;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackagePropertySetView3<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackagePropertySet<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackagePropertySet2<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet3>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet3;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackagePropertySet3<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataProviderDeferral>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataProviderDeferral;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataProviderDeferral<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataProviderRequest>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataProviderRequest;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataProviderRequest<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IOperationCompletedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs2>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs2;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IOperationCompletedEventArgs2<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataPackageView>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackageView;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackageView<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataPackageView2>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackageView2;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackageView2<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataPackageView3>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackageView3;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackageView3<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataPackageView4>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackageView4;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackageView4<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataPackage>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackage;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackage<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataPackage2>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataPackage2;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataPackage2<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IHtmlFormatHelperStatics>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IHtmlFormatHelperStatics;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IHtmlFormatHelperStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IClipboardStatics>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IClipboardStatics;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IClipboardStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataRequestDeferral>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataRequestDeferral;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataRequestDeferral<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataRequest>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataRequest;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataRequest<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataRequestedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataRequestedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataRequestedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::ITargetApplicationChosenEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::ITargetApplicationChosenEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_ITargetApplicationChosenEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataTransferManager>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataTransferManager;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataTransferManager<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::IDataTransferManagerStatics>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::IDataTransferManagerStatics;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_IDataTransferManagerStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::ISharedStorageAccessManagerStatics>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::ISharedStorageAccessManagerStatics;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::impl_ISharedStorageAccessManagerStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::ShareTarget::impl_IQuickLink<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::ShareTarget::impl_IShareOperation<T>;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation2>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation2;
	template <typename T> using methods = Windows::ApplicationModel::DataTransfer::ShareTarget::impl_IShareOperation2<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchPaneQueryLinguisticDetails>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchPaneQueryLinguisticDetails;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchPaneQueryLinguisticDetails<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchPaneVisibilityChangedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchPaneVisibilityChangedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchPaneVisibilityChangedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchPaneQueryChangedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchPaneQuerySubmittedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchPaneResultSuggestionChosenEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchPaneResultSuggestionChosenEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchPaneResultSuggestionChosenEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchSuggestionCollection>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchSuggestionCollection;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchSuggestionCollection<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestDeferral>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestDeferral;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchPaneSuggestionsRequestDeferral<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequest>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequest;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchPaneSuggestionsRequest<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchPaneSuggestionsRequestedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ILocalContentSuggestionSettings>
{
	using abi = ABI::Windows::ApplicationModel::Search::ILocalContentSuggestionSettings;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ILocalContentSuggestionSettings<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchPaneStatics>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchPaneStatics;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchPaneStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchPaneStaticsWithHideThisApplication>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchPaneStaticsWithHideThisApplication;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchPaneStaticsWithHideThisApplication<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchPane>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchPane;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchPane<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchQueryLinguisticDetailsFactory>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchQueryLinguisticDetailsFactory;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchQueryLinguisticDetailsFactory<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchQueryLinguisticDetails<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchSuggestionsRequestDeferral>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchSuggestionsRequestDeferral;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchSuggestionsRequestDeferral<T>;
};

template <> struct traits<Windows::ApplicationModel::Search::ISearchSuggestionsRequest>
{
	using abi = ABI::Windows::ApplicationModel::Search::ISearchSuggestionsRequest;
	template <typename T> using methods = Windows::ApplicationModel::Search::impl_ISearchSuggestionsRequest<T>;
};

template <> struct traits<Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedDeferral>
{
	using abi = ABI::Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedDeferral;
	template <typename T> using methods = Windows::Devices::Printers::Extensions::impl_IPrintTaskConfigurationSaveRequestedDeferral<T>;
};

template <> struct traits<Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequest>
{
	using abi = ABI::Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequest;
	template <typename T> using methods = Windows::Devices::Printers::Extensions::impl_IPrintTaskConfigurationSaveRequest<T>;
};

template <> struct traits<Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedEventArgs>
{
	using abi = ABI::Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedEventArgs;
	template <typename T> using methods = Windows::Devices::Printers::Extensions::impl_IPrintTaskConfigurationSaveRequestedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Printers::Extensions::IPrintTaskConfiguration>
{
	using abi = ABI::Windows::Devices::Printers::Extensions::IPrintTaskConfiguration;
	template <typename T> using methods = Windows::Devices::Printers::Extensions::impl_IPrintTaskConfiguration<T>;
};

template <> struct traits<Windows::Devices::Printers::Extensions::IPrintNotificationEventDetails>
{
	using abi = ABI::Windows::Devices::Printers::Extensions::IPrintNotificationEventDetails;
	template <typename T> using methods = Windows::Devices::Printers::Extensions::impl_IPrintNotificationEventDetails<T>;
};

template <> struct traits<Windows::Devices::Printers::Extensions::IPrintExtensionContextStatic>
{
	using abi = ABI::Windows::Devices::Printers::Extensions::IPrintExtensionContextStatic;
	template <typename T> using methods = Windows::Devices::Printers::Extensions::impl_IPrintExtensionContextStatic<T>;
};

template <> struct traits<Windows::Devices::Printers::Extensions::IPrint3DWorkflowPrintRequestedEventArgs>
{
	using abi = ABI::Windows::Devices::Printers::Extensions::IPrint3DWorkflowPrintRequestedEventArgs;
	template <typename T> using methods = Windows::Devices::Printers::Extensions::impl_IPrint3DWorkflowPrintRequestedEventArgs<T>;
};

template <> struct traits<Windows::Devices::Printers::Extensions::IPrint3DWorkflow>
{
	using abi = ABI::Windows::Devices::Printers::Extensions::IPrint3DWorkflow;
	template <typename T> using methods = Windows::Devices::Printers::Extensions::impl_IPrint3DWorkflow<T>;
};

template <> struct traits<Windows::Globalization::IJapanesePhoneticAnalyzerStatics>
{
	using abi = ABI::Windows::Globalization::IJapanesePhoneticAnalyzerStatics;
	template <typename T> using methods = Windows::Globalization::impl_IJapanesePhoneticAnalyzerStatics<T>;
};

template <> struct traits<Windows::Globalization::IJapanesePhoneme>
{
	using abi = ABI::Windows::Globalization::IJapanesePhoneme;
	template <typename T> using methods = Windows::Globalization::impl_IJapanesePhoneme<T>;
};

template <> struct traits<Windows::Globalization::ICalendarIdentifiersStatics>
{
	using abi = ABI::Windows::Globalization::ICalendarIdentifiersStatics;
	template <typename T> using methods = Windows::Globalization::impl_ICalendarIdentifiersStatics<T>;
};

template <> struct traits<Windows::Globalization::ICalendarIdentifiersStatics2>
{
	using abi = ABI::Windows::Globalization::ICalendarIdentifiersStatics2;
	template <typename T> using methods = Windows::Globalization::impl_ICalendarIdentifiersStatics2<T>;
};

template <> struct traits<Windows::Globalization::IClockIdentifiersStatics>
{
	using abi = ABI::Windows::Globalization::IClockIdentifiersStatics;
	template <typename T> using methods = Windows::Globalization::impl_IClockIdentifiersStatics<T>;
};

template <> struct traits<Windows::Globalization::INumeralSystemIdentifiersStatics>
{
	using abi = ABI::Windows::Globalization::INumeralSystemIdentifiersStatics;
	template <typename T> using methods = Windows::Globalization::impl_INumeralSystemIdentifiersStatics<T>;
};

template <> struct traits<Windows::Globalization::INumeralSystemIdentifiersStatics2>
{
	using abi = ABI::Windows::Globalization::INumeralSystemIdentifiersStatics2;
	template <typename T> using methods = Windows::Globalization::impl_INumeralSystemIdentifiersStatics2<T>;
};

template <> struct traits<Windows::Globalization::ICurrencyIdentifiersStatics>
{
	using abi = ABI::Windows::Globalization::ICurrencyIdentifiersStatics;
	template <typename T> using methods = Windows::Globalization::impl_ICurrencyIdentifiersStatics<T>;
};

template <> struct traits<Windows::Globalization::IGeographicRegion>
{
	using abi = ABI::Windows::Globalization::IGeographicRegion;
	template <typename T> using methods = Windows::Globalization::impl_IGeographicRegion<T>;
};

template <> struct traits<Windows::Globalization::IGeographicRegionFactory>
{
	using abi = ABI::Windows::Globalization::IGeographicRegionFactory;
	template <typename T> using methods = Windows::Globalization::impl_IGeographicRegionFactory<T>;
};

template <> struct traits<Windows::Globalization::IGeographicRegionStatics>
{
	using abi = ABI::Windows::Globalization::IGeographicRegionStatics;
	template <typename T> using methods = Windows::Globalization::impl_IGeographicRegionStatics<T>;
};

template <> struct traits<Windows::Globalization::ILanguage>
{
	using abi = ABI::Windows::Globalization::ILanguage;
	template <typename T> using methods = Windows::Globalization::impl_ILanguage<T>;
};

template <> struct traits<Windows::Globalization::ILanguageExtensionSubtags>
{
	using abi = ABI::Windows::Globalization::ILanguageExtensionSubtags;
	template <typename T> using methods = Windows::Globalization::impl_ILanguageExtensionSubtags<T>;
};

template <> struct traits<Windows::Globalization::ILanguageFactory>
{
	using abi = ABI::Windows::Globalization::ILanguageFactory;
	template <typename T> using methods = Windows::Globalization::impl_ILanguageFactory<T>;
};

template <> struct traits<Windows::Globalization::ILanguageStatics>
{
	using abi = ABI::Windows::Globalization::ILanguageStatics;
	template <typename T> using methods = Windows::Globalization::impl_ILanguageStatics<T>;
};

template <> struct traits<Windows::Globalization::ILanguageStatics2>
{
	using abi = ABI::Windows::Globalization::ILanguageStatics2;
	template <typename T> using methods = Windows::Globalization::impl_ILanguageStatics2<T>;
};

template <> struct traits<Windows::Globalization::ICalendar>
{
	using abi = ABI::Windows::Globalization::ICalendar;
	template <typename T> using methods = Windows::Globalization::impl_ICalendar<T>;
};

template <> struct traits<Windows::Globalization::ICalendarFactory2>
{
	using abi = ABI::Windows::Globalization::ICalendarFactory2;
	template <typename T> using methods = Windows::Globalization::impl_ICalendarFactory2<T>;
};

template <> struct traits<Windows::Globalization::ITimeZoneOnCalendar>
{
	using abi = ABI::Windows::Globalization::ITimeZoneOnCalendar;
	template <typename T> using methods = Windows::Globalization::impl_ITimeZoneOnCalendar<T>;
};

template <> struct traits<Windows::Globalization::ICalendarFactory>
{
	using abi = ABI::Windows::Globalization::ICalendarFactory;
	template <typename T> using methods = Windows::Globalization::impl_ICalendarFactory<T>;
};

template <> struct traits<Windows::Globalization::IApplicationLanguagesStatics>
{
	using abi = ABI::Windows::Globalization::IApplicationLanguagesStatics;
	template <typename T> using methods = Windows::Globalization::impl_IApplicationLanguagesStatics<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognitionCompilationResult>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognitionCompilationResult;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognitionCompilationResult<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognizerTimeouts>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognizerTimeouts;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognizerTimeouts<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognizerUIOptions>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognizerUIOptions;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognizerUIOptions<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognitionResult>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognitionResult;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognitionResult<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognitionConstraint>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognitionConstraint;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognitionConstraint<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognitionResult2>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognitionResult2;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognitionResult2<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognitionSemanticInterpretation>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognitionSemanticInterpretation;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognitionSemanticInterpretation<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognitionTopicConstraint>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognitionTopicConstraint;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognitionTopicConstraint<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognitionTopicConstraintFactory>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognitionTopicConstraintFactory;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognitionTopicConstraintFactory<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognitionListConstraint>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognitionListConstraint;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognitionListConstraint<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognitionListConstraintFactory>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognitionListConstraintFactory;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognitionListConstraintFactory<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognitionGrammarFileConstraint>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognitionGrammarFileConstraint;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognitionGrammarFileConstraint<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognitionGrammarFileConstraintFactory>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognitionGrammarFileConstraintFactory;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognitionGrammarFileConstraintFactory<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognitionVoiceCommandDefinitionConstraint>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognitionVoiceCommandDefinitionConstraint;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognitionVoiceCommandDefinitionConstraint<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognitionQualityDegradingEventArgs>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognitionQualityDegradingEventArgs;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognitionQualityDegradingEventArgs<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognizerStateChangedEventArgs>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognizerStateChangedEventArgs;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognizerStateChangedEventArgs<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognizer>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognizer;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognizer<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognizerFactory>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognizerFactory;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognizerFactory<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognizerStatics>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognizerStatics;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognizerStatics<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognizer2>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognizer2;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognizer2<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognitionHypothesis>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognitionHypothesis;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognitionHypothesis<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechRecognitionHypothesisGeneratedEventArgs>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechRecognitionHypothesisGeneratedEventArgs;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechRecognitionHypothesisGeneratedEventArgs<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechContinuousRecognitionSession>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechContinuousRecognitionSession;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechContinuousRecognitionSession<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechContinuousRecognitionCompletedEventArgs>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechContinuousRecognitionCompletedEventArgs;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechContinuousRecognitionCompletedEventArgs<T>;
};

template <> struct traits<Windows::Media::SpeechRecognition::ISpeechContinuousRecognitionResultGeneratedEventArgs>
{
	using abi = ABI::Windows::Media::SpeechRecognition::ISpeechContinuousRecognitionResultGeneratedEventArgs;
	template <typename T> using methods = Windows::Media::SpeechRecognition::impl_ISpeechContinuousRecognitionResultGeneratedEventArgs<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::IWebAuthenticationResult>
{
	using abi = ABI::Windows::Security::Authentication::Web::IWebAuthenticationResult;
	template <typename T> using methods = Windows::Security::Authentication::Web::impl_IWebAuthenticationResult<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::IWebAuthenticationBrokerStatics>
{
	using abi = ABI::Windows::Security::Authentication::Web::IWebAuthenticationBrokerStatics;
	template <typename T> using methods = Windows::Security::Authentication::Web::impl_IWebAuthenticationBrokerStatics<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::IWebAuthenticationBrokerStatics2>
{
	using abi = ABI::Windows::Security::Authentication::Web::IWebAuthenticationBrokerStatics2;
	template <typename T> using methods = Windows::Security::Authentication::Web::impl_IWebAuthenticationBrokerStatics2<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Core::IWebTokenRequest>
{
	using abi = ABI::Windows::Security::Authentication::Web::Core::IWebTokenRequest;
	template <typename T> using methods = Windows::Security::Authentication::Web::Core::impl_IWebTokenRequest<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Core::IWebTokenRequest2>
{
	using abi = ABI::Windows::Security::Authentication::Web::Core::IWebTokenRequest2;
	template <typename T> using methods = Windows::Security::Authentication::Web::Core::impl_IWebTokenRequest2<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Core::IWebTokenRequestFactory>
{
	using abi = ABI::Windows::Security::Authentication::Web::Core::IWebTokenRequestFactory;
	template <typename T> using methods = Windows::Security::Authentication::Web::Core::impl_IWebTokenRequestFactory<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Core::IWebAuthenticationCoreManagerStatics>
{
	using abi = ABI::Windows::Security::Authentication::Web::Core::IWebAuthenticationCoreManagerStatics;
	template <typename T> using methods = Windows::Security::Authentication::Web::Core::impl_IWebAuthenticationCoreManagerStatics<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Core::IWebAuthenticationCoreManagerStatics2>
{
	using abi = ABI::Windows::Security::Authentication::Web::Core::IWebAuthenticationCoreManagerStatics2;
	template <typename T> using methods = Windows::Security::Authentication::Web::Core::impl_IWebAuthenticationCoreManagerStatics2<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Core::IWebProviderError>
{
	using abi = ABI::Windows::Security::Authentication::Web::Core::IWebProviderError;
	template <typename T> using methods = Windows::Security::Authentication::Web::Core::impl_IWebProviderError<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Core::IWebProviderErrorFactory>
{
	using abi = ABI::Windows::Security::Authentication::Web::Core::IWebProviderErrorFactory;
	template <typename T> using methods = Windows::Security::Authentication::Web::Core::impl_IWebProviderErrorFactory<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Core::IWebTokenRequestResult>
{
	using abi = ABI::Windows::Security::Authentication::Web::Core::IWebTokenRequestResult;
	template <typename T> using methods = Windows::Security::Authentication::Web::Core::impl_IWebTokenRequestResult<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Core::IWebTokenResponse>
{
	using abi = ABI::Windows::Security::Authentication::Web::Core::IWebTokenResponse;
	template <typename T> using methods = Windows::Security::Authentication::Web::Core::impl_IWebTokenResponse<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Core::IWebTokenResponseFactory>
{
	using abi = ABI::Windows::Security::Authentication::Web::Core::IWebTokenResponseFactory;
	template <typename T> using methods = Windows::Security::Authentication::Web::Core::impl_IWebTokenResponseFactory<T>;
};

template <> struct traits<Windows::Web::Http::Filters::IHttpFilter>
{
	using abi = ABI::Windows::Web::Http::Filters::IHttpFilter;
	template <typename T> using methods = Windows::Web::Http::Filters::impl_IHttpFilter<T>;
};

template <> struct traits<Windows::Web::Http::Filters::IHttpCacheControl>
{
	using abi = ABI::Windows::Web::Http::Filters::IHttpCacheControl;
	template <typename T> using methods = Windows::Web::Http::Filters::impl_IHttpCacheControl<T>;
};

template <> struct traits<Windows::Web::Http::Filters::IHttpBaseProtocolFilter>
{
	using abi = ABI::Windows::Web::Http::Filters::IHttpBaseProtocolFilter;
	template <typename T> using methods = Windows::Web::Http::Filters::impl_IHttpBaseProtocolFilter<T>;
};

template <> struct traits<Windows::Web::Http::Filters::IHttpBaseProtocolFilter2>
{
	using abi = ABI::Windows::Web::Http::Filters::IHttpBaseProtocolFilter2;
	template <typename T> using methods = Windows::Web::Http::Filters::impl_IHttpBaseProtocolFilter2<T>;
};

template <> struct traits<Windows::Web::Http::Filters::IHttpBaseProtocolFilter3>
{
	using abi = ABI::Windows::Web::Http::Filters::IHttpBaseProtocolFilter3;
	template <typename T> using methods = Windows::Web::Http::Filters::impl_IHttpBaseProtocolFilter3<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpContentHeaderCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpContentHeaderCollection;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpContentHeaderCollection<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpRequestHeaderCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpRequestHeaderCollection;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpRequestHeaderCollection<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpResponseHeaderCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpResponseHeaderCollection;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpResponseHeaderCollection<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpCacheDirectiveHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpCacheDirectiveHeaderValueCollection;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpCacheDirectiveHeaderValueCollection<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpChallengeHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpChallengeHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpChallengeHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpChallengeHeaderValueFactory>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpChallengeHeaderValueFactory;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpChallengeHeaderValueFactory<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpChallengeHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpChallengeHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpChallengeHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpChallengeHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpChallengeHeaderValueCollection;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpChallengeHeaderValueCollection<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpCredentialsHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpCredentialsHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpCredentialsHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpCredentialsHeaderValueFactory>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpCredentialsHeaderValueFactory;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpCredentialsHeaderValueFactory<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpCredentialsHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpCredentialsHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpCredentialsHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpConnectionOptionHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueFactory>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueFactory;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpConnectionOptionHeaderValueFactory<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpConnectionOptionHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueCollection;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpConnectionOptionHeaderValueCollection<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpContentCodingHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpContentCodingHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpContentCodingHeaderValueFactory>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingHeaderValueFactory;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpContentCodingHeaderValueFactory<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpContentCodingHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpContentCodingHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpContentCodingHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingHeaderValueCollection;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpContentCodingHeaderValueCollection<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpContentDispositionHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpContentDispositionHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpContentDispositionHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpContentDispositionHeaderValueFactory>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpContentDispositionHeaderValueFactory;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpContentDispositionHeaderValueFactory<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpContentDispositionHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpContentDispositionHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpContentDispositionHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpContentRangeHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpContentRangeHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpContentRangeHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpContentRangeHeaderValueFactory>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpContentRangeHeaderValueFactory;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpContentRangeHeaderValueFactory<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpContentRangeHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpContentRangeHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpContentRangeHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpCookiePairHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpCookiePairHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpCookiePairHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpCookiePairHeaderValueFactory>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpCookiePairHeaderValueFactory;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpCookiePairHeaderValueFactory<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpCookiePairHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpCookiePairHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpCookiePairHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpCookiePairHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpCookiePairHeaderValueCollection;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpCookiePairHeaderValueCollection<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpDateOrDeltaHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpDateOrDeltaHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpExpectationHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpExpectationHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpExpectationHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpExpectationHeaderValueFactory>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpExpectationHeaderValueFactory;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpExpectationHeaderValueFactory<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpExpectationHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpExpectationHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpExpectationHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpExpectationHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpExpectationHeaderValueCollection;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpExpectationHeaderValueCollection<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpLanguageHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpLanguageHeaderValueCollection;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpLanguageHeaderValueCollection<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpLanguageRangeWithQualityHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueFactory>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueFactory;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpLanguageRangeWithQualityHeaderValueFactory<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpLanguageRangeWithQualityHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueCollection;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpLanguageRangeWithQualityHeaderValueCollection<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpMediaTypeHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpMediaTypeHeaderValueFactory>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeHeaderValueFactory;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeHeaderValueFactory<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpMediaTypeHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeWithQualityHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueFactory>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueFactory;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeWithQualityHeaderValueFactory<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeWithQualityHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueCollection;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpMediaTypeWithQualityHeaderValueCollection<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpMethodHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpMethodHeaderValueCollection;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpMethodHeaderValueCollection<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpNameValueHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpNameValueHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpNameValueHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpNameValueHeaderValueFactory>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpNameValueHeaderValueFactory;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpNameValueHeaderValueFactory<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpNameValueHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpNameValueHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpNameValueHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpProductHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpProductHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpProductHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpProductHeaderValueFactory>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpProductHeaderValueFactory;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpProductHeaderValueFactory<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpProductHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpProductHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpProductHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpProductInfoHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpProductInfoHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpProductInfoHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpProductInfoHeaderValueFactory>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpProductInfoHeaderValueFactory;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpProductInfoHeaderValueFactory<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpProductInfoHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpProductInfoHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpProductInfoHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpProductInfoHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpProductInfoHeaderValueCollection;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpProductInfoHeaderValueCollection<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpContentCodingWithQualityHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueFactory>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueFactory;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpContentCodingWithQualityHeaderValueFactory<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpContentCodingWithQualityHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueCollection;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpContentCodingWithQualityHeaderValueCollection<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueStatics>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueStatics;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpTransferCodingHeaderValueStatics<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueFactory>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueFactory;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpTransferCodingHeaderValueFactory<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpTransferCodingHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpTransferCodingHeaderValue;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpTransferCodingHeaderValue<T>;
};

template <> struct traits<Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueCollection;
	template <typename T> using methods = Windows::Web::Http::Headers::impl_IHttpTransferCodingHeaderValueCollection<T>;
};

template <> struct traits<Windows::Web::Http::IHttpClientFactory>
{
	using abi = ABI::Windows::Web::Http::IHttpClientFactory;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpClientFactory<T>;
};

template <> struct traits<Windows::Web::Http::IHttpClient>
{
	using abi = ABI::Windows::Web::Http::IHttpClient;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpClient<T>;
};

template <> struct traits<Windows::Web::Http::IHttpContent>
{
	using abi = ABI::Windows::Web::Http::IHttpContent;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpContent<T>;
};

template <> struct traits<Windows::Web::Http::IHttpCookieManager>
{
	using abi = ABI::Windows::Web::Http::IHttpCookieManager;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpCookieManager<T>;
};

template <> struct traits<Windows::Web::Http::IHttpCookieFactory>
{
	using abi = ABI::Windows::Web::Http::IHttpCookieFactory;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpCookieFactory<T>;
};

template <> struct traits<Windows::Web::Http::IHttpCookie>
{
	using abi = ABI::Windows::Web::Http::IHttpCookie;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpCookie<T>;
};

template <> struct traits<Windows::Web::Http::IHttpMethodStatics>
{
	using abi = ABI::Windows::Web::Http::IHttpMethodStatics;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpMethodStatics<T>;
};

template <> struct traits<Windows::Web::Http::IHttpMethodFactory>
{
	using abi = ABI::Windows::Web::Http::IHttpMethodFactory;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpMethodFactory<T>;
};

template <> struct traits<Windows::Web::Http::IHttpMethod>
{
	using abi = ABI::Windows::Web::Http::IHttpMethod;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpMethod<T>;
};

template <> struct traits<Windows::Web::Http::IHttpTransportInformation>
{
	using abi = ABI::Windows::Web::Http::IHttpTransportInformation;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpTransportInformation<T>;
};

template <> struct traits<Windows::Web::Http::IHttpRequestMessageFactory>
{
	using abi = ABI::Windows::Web::Http::IHttpRequestMessageFactory;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpRequestMessageFactory<T>;
};

template <> struct traits<Windows::Web::Http::IHttpRequestMessage>
{
	using abi = ABI::Windows::Web::Http::IHttpRequestMessage;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpRequestMessage<T>;
};

template <> struct traits<Windows::Web::Http::IHttpResponseMessageFactory>
{
	using abi = ABI::Windows::Web::Http::IHttpResponseMessageFactory;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpResponseMessageFactory<T>;
};

template <> struct traits<Windows::Web::Http::IHttpResponseMessage>
{
	using abi = ABI::Windows::Web::Http::IHttpResponseMessage;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpResponseMessage<T>;
};

template <> struct traits<Windows::Web::Http::IHttpStringContentFactory>
{
	using abi = ABI::Windows::Web::Http::IHttpStringContentFactory;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpStringContentFactory<T>;
};

template <> struct traits<Windows::Web::Http::IHttpBufferContentFactory>
{
	using abi = ABI::Windows::Web::Http::IHttpBufferContentFactory;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpBufferContentFactory<T>;
};

template <> struct traits<Windows::Web::Http::IHttpStreamContentFactory>
{
	using abi = ABI::Windows::Web::Http::IHttpStreamContentFactory;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpStreamContentFactory<T>;
};

template <> struct traits<Windows::Web::Http::IHttpFormUrlEncodedContentFactory>
{
	using abi = ABI::Windows::Web::Http::IHttpFormUrlEncodedContentFactory;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpFormUrlEncodedContentFactory<T>;
};

template <> struct traits<Windows::Web::Http::IHttpMultipartContentFactory>
{
	using abi = ABI::Windows::Web::Http::IHttpMultipartContentFactory;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpMultipartContentFactory<T>;
};

template <> struct traits<Windows::Web::Http::IHttpMultipartContent>
{
	using abi = ABI::Windows::Web::Http::IHttpMultipartContent;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpMultipartContent<T>;
};

template <> struct traits<Windows::Web::Http::IHttpMultipartFormDataContentFactory>
{
	using abi = ABI::Windows::Web::Http::IHttpMultipartFormDataContentFactory;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpMultipartFormDataContentFactory<T>;
};

template <> struct traits<Windows::Web::Http::IHttpMultipartFormDataContent>
{
	using abi = ABI::Windows::Web::Http::IHttpMultipartFormDataContent;
	template <typename T> using methods = Windows::Web::Http::impl_IHttpMultipartFormDataContent<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebAccountProviderOperation<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebProviderTokenRequest>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebProviderTokenRequest;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebProviderTokenRequest<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebProviderTokenResponse>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebProviderTokenResponse;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebProviderTokenResponse<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebProviderTokenResponseFactory>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebProviderTokenResponseFactory;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebProviderTokenResponseFactory<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebAccountClientView>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebAccountClientView;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebAccountClientView<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebAccountClientViewFactory>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebAccountClientViewFactory;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebAccountClientViewFactory<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebAccountManagerStatics>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebAccountManagerStatics;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebAccountManagerStatics<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebAccountManagerStatics2>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebAccountManagerStatics2;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebAccountManagerStatics2<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebAccountScopeManagerStatics>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebAccountScopeManagerStatics;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebAccountScopeManagerStatics<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebAccountProviderBaseReportOperation<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebAccountProviderUIReportOperation<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebAccountProviderSilentReportOperation<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebAccountProviderTokenOperation<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebAccountProviderAddAccountOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebAccountProviderAddAccountOperation;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebAccountProviderAddAccountOperation<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebAccountProviderManageAccountOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebAccountProviderManageAccountOperation;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebAccountProviderManageAccountOperation<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebAccountProviderDeleteAccountOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebAccountProviderDeleteAccountOperation;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebAccountProviderDeleteAccountOperation<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebAccountProviderSignOutAccountOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebAccountProviderSignOutAccountOperation;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebAccountProviderSignOutAccountOperation<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebAccountProviderRetrieveCookiesOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebAccountProviderRetrieveCookiesOperation;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebAccountProviderRetrieveCookiesOperation<T>;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects;
	template <typename T> using methods = Windows::Security::Authentication::Web::Provider::impl_IWebAccountProviderTokenObjects<T>;
};

template <> struct traits<Windows::Storage::Pickers::Provider::IFileRemovedEventArgs>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::IFileRemovedEventArgs;
	template <typename T> using methods = Windows::Storage::Pickers::Provider::impl_IFileRemovedEventArgs<T>;
};

template <> struct traits<Windows::Storage::Pickers::Provider::IFileOpenPickerUI>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::IFileOpenPickerUI;
	template <typename T> using methods = Windows::Storage::Pickers::Provider::impl_IFileOpenPickerUI<T>;
};

template <> struct traits<Windows::Storage::Pickers::Provider::IPickerClosingEventArgs>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::IPickerClosingEventArgs;
	template <typename T> using methods = Windows::Storage::Pickers::Provider::impl_IPickerClosingEventArgs<T>;
};

template <> struct traits<Windows::Storage::Pickers::Provider::IPickerClosingOperation>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::IPickerClosingOperation;
	template <typename T> using methods = Windows::Storage::Pickers::Provider::impl_IPickerClosingOperation<T>;
};

template <> struct traits<Windows::Storage::Pickers::Provider::IPickerClosingDeferral>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::IPickerClosingDeferral;
	template <typename T> using methods = Windows::Storage::Pickers::Provider::impl_IPickerClosingDeferral<T>;
};

template <> struct traits<Windows::Storage::Pickers::Provider::IFileSavePickerUI>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::IFileSavePickerUI;
	template <typename T> using methods = Windows::Storage::Pickers::Provider::impl_IFileSavePickerUI<T>;
};

template <> struct traits<Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs;
	template <typename T> using methods = Windows::Storage::Pickers::Provider::impl_ITargetFileRequestedEventArgs<T>;
};

template <> struct traits<Windows::Storage::Pickers::Provider::ITargetFileRequest>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::ITargetFileRequest;
	template <typename T> using methods = Windows::Storage::Pickers::Provider::impl_ITargetFileRequest<T>;
};

template <> struct traits<Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral;
	template <typename T> using methods = Windows::Storage::Pickers::Provider::impl_ITargetFileRequestDeferral<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::ISplashScreen>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ISplashScreen;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_ISplashScreen<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IApplicationViewActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IViewSwitcherProvider>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IViewSwitcherProvider;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IViewSwitcherProvider<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IPrelaunchActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_ILaunchActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::ISearchActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ISearchActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_ISearchActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::ISearchActivatedEventArgsWithLinguisticDetails>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ISearchActivatedEventArgsWithLinguisticDetails;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_ISearchActivatedEventArgsWithLinguisticDetails<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IShareTargetActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IFileActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IFileActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IFileActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithNeighboringFiles>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithNeighboringFiles;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IFileActivatedEventArgsWithNeighboringFiles<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithCallerPackageFamilyName>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithCallerPackageFamilyName;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IFileActivatedEventArgsWithCallerPackageFamilyName<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IProtocolActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IProtocolForResultsActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IProtocolForResultsActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IProtocolForResultsActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IFileOpenPickerActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs2>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs2;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IFileOpenPickerActivatedEventArgs2<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IFileSavePickerActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs2>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs2;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IFileSavePickerActivatedEventArgs2<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_ICachedFileUpdaterActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IContactPickerActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IDeviceActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IPrintTaskSettingsActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IPrint3DWorkflowActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IPrint3DWorkflowActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IPrint3DWorkflowActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_ICameraSettingsActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IAppointmentsProviderActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IAppointmentsProviderAddAppointmentActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IAppointmentsProviderReplaceAppointmentActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IAppointmentsProviderRemoveAppointmentActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IAppointmentsProviderShowTimeFrameActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IContactActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IContactActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IContactActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IContactCallActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IContactMessageActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IContactMapActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IContactPostActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IContactVideoCallActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IContactsProviderActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IContactsProviderActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IContactsProviderActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IRestrictedLaunchActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_ILockScreenCallActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::ILockScreenActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ILockScreenActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_ILockScreenActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IContinuationActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IContinuationActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IContinuationActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IFileOpenPickerContinuationEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IFileOpenPickerContinuationEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IFileOpenPickerContinuationEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IFileSavePickerContinuationEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IFileSavePickerContinuationEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IFileSavePickerContinuationEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IFolderPickerContinuationEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IFolderPickerContinuationEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IFolderPickerContinuationEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IWebAccountProviderActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IWebAccountProviderActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IWebAccountProviderActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IToastNotificationActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IToastNotificationActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IToastNotificationActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IDialReceiverActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IDialReceiverActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IDialReceiverActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IDevicePairingActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IDevicePairingActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IDevicePairingActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Activation::IVoiceCommandActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::IVoiceCommandActivatedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Activation::impl_IVoiceCommandActivatedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::IAppListEntry>
{
	using abi = ABI::Windows::ApplicationModel::Core::IAppListEntry;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_IAppListEntry<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::IFrameworkView>
{
	using abi = ABI::Windows::ApplicationModel::Core::IFrameworkView;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_IFrameworkView<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::IFrameworkViewSource>
{
	using abi = ABI::Windows::ApplicationModel::Core::IFrameworkViewSource;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_IFrameworkViewSource<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::ICoreApplication>
{
	using abi = ABI::Windows::ApplicationModel::Core::ICoreApplication;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_ICoreApplication<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::ICoreApplicationUseCount>
{
	using abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationUseCount;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_ICoreApplicationUseCount<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::ICoreApplicationExit>
{
	using abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationExit;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_ICoreApplicationExit<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::ICoreImmersiveApplication>
{
	using abi = ABI::Windows::ApplicationModel::Core::ICoreImmersiveApplication;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_ICoreImmersiveApplication<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::ICoreImmersiveApplication2>
{
	using abi = ABI::Windows::ApplicationModel::Core::ICoreImmersiveApplication2;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_ICoreImmersiveApplication2<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::ICoreImmersiveApplication3>
{
	using abi = ABI::Windows::ApplicationModel::Core::ICoreImmersiveApplication3;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_ICoreImmersiveApplication3<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::ICoreApplicationUnhandledError>
{
	using abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationUnhandledError;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_ICoreApplicationUnhandledError<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::ICoreApplicationView>
{
	using abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationView;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_ICoreApplicationView<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::ICoreApplicationView2>
{
	using abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationView2;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_ICoreApplicationView2<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::ICoreApplicationView3>
{
	using abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationView3;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_ICoreApplicationView3<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::IHostedViewClosingEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Core::IHostedViewClosingEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_IHostedViewClosingEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::ICoreApplicationViewTitleBar>
{
	using abi = ABI::Windows::ApplicationModel::Core::ICoreApplicationViewTitleBar;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_ICoreApplicationViewTitleBar<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::IUnhandledErrorDetectedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Core::IUnhandledErrorDetectedEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_IUnhandledErrorDetectedEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::Core::IUnhandledError>
{
	using abi = ABI::Windows::ApplicationModel::Core::IUnhandledError;
	template <typename T> using methods = Windows::ApplicationModel::Core::impl_IUnhandledError<T>;
};

template <> struct traits<Windows::ApplicationModel::IAppDisplayInfo>
{
	using abi = ABI::Windows::ApplicationModel::IAppDisplayInfo;
	template <typename T> using methods = Windows::ApplicationModel::impl_IAppDisplayInfo<T>;
};

template <> struct traits<Windows::ApplicationModel::IAppInfo>
{
	using abi = ABI::Windows::ApplicationModel::IAppInfo;
	template <typename T> using methods = Windows::ApplicationModel::impl_IAppInfo<T>;
};

template <> struct traits<Windows::ApplicationModel::ISuspendingDeferral>
{
	using abi = ABI::Windows::ApplicationModel::ISuspendingDeferral;
	template <typename T> using methods = Windows::ApplicationModel::impl_ISuspendingDeferral<T>;
};

template <> struct traits<Windows::ApplicationModel::ISuspendingOperation>
{
	using abi = ABI::Windows::ApplicationModel::ISuspendingOperation;
	template <typename T> using methods = Windows::ApplicationModel::impl_ISuspendingOperation<T>;
};

template <> struct traits<Windows::ApplicationModel::ISuspendingEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::ISuspendingEventArgs;
	template <typename T> using methods = Windows::ApplicationModel::impl_ISuspendingEventArgs<T>;
};

template <> struct traits<Windows::ApplicationModel::IPackageIdWithMetadata>
{
	using abi = ABI::Windows::ApplicationModel::IPackageIdWithMetadata;
	template <typename T> using methods = Windows::ApplicationModel::impl_IPackageIdWithMetadata<T>;
};

template <> struct traits<Windows::ApplicationModel::IPackageWithMetadata>
{
	using abi = ABI::Windows::ApplicationModel::IPackageWithMetadata;
	template <typename T> using methods = Windows::ApplicationModel::impl_IPackageWithMetadata<T>;
};

template <> struct traits<Windows::ApplicationModel::IPackageStatus>
{
	using abi = ABI::Windows::ApplicationModel::IPackageStatus;
	template <typename T> using methods = Windows::ApplicationModel::impl_IPackageStatus<T>;
};

template <> struct traits<Windows::ApplicationModel::IPackageId>
{
	using abi = ABI::Windows::ApplicationModel::IPackageId;
	template <typename T> using methods = Windows::ApplicationModel::impl_IPackageId<T>;
};

template <> struct traits<Windows::ApplicationModel::IPackage>
{
	using abi = ABI::Windows::ApplicationModel::IPackage;
	template <typename T> using methods = Windows::ApplicationModel::impl_IPackage<T>;
};

template <> struct traits<Windows::ApplicationModel::IPackage2>
{
	using abi = ABI::Windows::ApplicationModel::IPackage2;
	template <typename T> using methods = Windows::ApplicationModel::impl_IPackage2<T>;
};

template <> struct traits<Windows::ApplicationModel::IPackage3>
{
	using abi = ABI::Windows::ApplicationModel::IPackage3;
	template <typename T> using methods = Windows::ApplicationModel::impl_IPackage3<T>;
};

template <> struct traits<Windows::ApplicationModel::IPackageStatics>
{
	using abi = ABI::Windows::ApplicationModel::IPackageStatics;
	template <typename T> using methods = Windows::ApplicationModel::impl_IPackageStatics<T>;
};

template <> struct traits<Windows::ApplicationModel::IDesignModeStatics>
{
	using abi = ABI::Windows::ApplicationModel::IDesignModeStatics;
	template <typename T> using methods = Windows::ApplicationModel::impl_IDesignModeStatics<T>;
};

template <> struct traits<Windows::Gaming::Input::IGameController>
{
	using abi = ABI::Windows::Gaming::Input::IGameController;
	template <typename T> using methods = Windows::Gaming::Input::impl_IGameController<T>;
};

template <> struct traits<Windows::Gaming::Input::IGamepad>
{
	using abi = ABI::Windows::Gaming::Input::IGamepad;
	template <typename T> using methods = Windows::Gaming::Input::impl_IGamepad<T>;
};

template <> struct traits<Windows::Gaming::Input::IGamepadStatics>
{
	using abi = ABI::Windows::Gaming::Input::IGamepadStatics;
	template <typename T> using methods = Windows::Gaming::Input::impl_IGamepadStatics<T>;
};

template <> struct traits<Windows::Gaming::Input::IHeadset>
{
	using abi = ABI::Windows::Gaming::Input::IHeadset;
	template <typename T> using methods = Windows::Gaming::Input::impl_IHeadset<T>;
};

template <> struct traits<Windows::System::IAppMemoryReport>
{
	using abi = ABI::Windows::System::IAppMemoryReport;
	template <typename T> using methods = Windows::System::impl_IAppMemoryReport<T>;
};

template <> struct traits<Windows::System::IProcessMemoryReport>
{
	using abi = ABI::Windows::System::IProcessMemoryReport;
	template <typename T> using methods = Windows::System::impl_IProcessMemoryReport<T>;
};

template <> struct traits<Windows::System::IAppMemoryUsageLimitChangingEventArgs>
{
	using abi = ABI::Windows::System::IAppMemoryUsageLimitChangingEventArgs;
	template <typename T> using methods = Windows::System::impl_IAppMemoryUsageLimitChangingEventArgs<T>;
};

template <> struct traits<Windows::System::IMemoryManagerStatics>
{
	using abi = ABI::Windows::System::IMemoryManagerStatics;
	template <typename T> using methods = Windows::System::impl_IMemoryManagerStatics<T>;
};

template <> struct traits<Windows::System::IMemoryManagerStatics2>
{
	using abi = ABI::Windows::System::IMemoryManagerStatics2;
	template <typename T> using methods = Windows::System::impl_IMemoryManagerStatics2<T>;
};

template <> struct traits<Windows::System::IMemoryManagerStatics3>
{
	using abi = ABI::Windows::System::IMemoryManagerStatics3;
	template <typename T> using methods = Windows::System::impl_IMemoryManagerStatics3<T>;
};

template <> struct traits<Windows::System::IProtocolForResultsOperation>
{
	using abi = ABI::Windows::System::IProtocolForResultsOperation;
	template <typename T> using methods = Windows::System::impl_IProtocolForResultsOperation<T>;
};

template <> struct traits<Windows::System::IUser>
{
	using abi = ABI::Windows::System::IUser;
	template <typename T> using methods = Windows::System::impl_IUser<T>;
};

template <> struct traits<Windows::System::IUserStatics>
{
	using abi = ABI::Windows::System::IUserStatics;
	template <typename T> using methods = Windows::System::impl_IUserStatics<T>;
};

template <> struct traits<Windows::System::IUserWatcher>
{
	using abi = ABI::Windows::System::IUserWatcher;
	template <typename T> using methods = Windows::System::impl_IUserWatcher<T>;
};

template <> struct traits<Windows::System::IUserChangedEventArgs>
{
	using abi = ABI::Windows::System::IUserChangedEventArgs;
	template <typename T> using methods = Windows::System::impl_IUserChangedEventArgs<T>;
};

template <> struct traits<Windows::System::IUserAuthenticationStatusChangeDeferral>
{
	using abi = ABI::Windows::System::IUserAuthenticationStatusChangeDeferral;
	template <typename T> using methods = Windows::System::impl_IUserAuthenticationStatusChangeDeferral<T>;
};

template <> struct traits<Windows::System::IUserAuthenticationStatusChangingEventArgs>
{
	using abi = ABI::Windows::System::IUserAuthenticationStatusChangingEventArgs;
	template <typename T> using methods = Windows::System::impl_IUserAuthenticationStatusChangingEventArgs<T>;
};

template <> struct traits<Windows::System::IKnownUserPropertiesStatics>
{
	using abi = ABI::Windows::System::IKnownUserPropertiesStatics;
	template <typename T> using methods = Windows::System::impl_IKnownUserPropertiesStatics<T>;
};

template <> struct traits<Windows::System::ILaunchUriResult>
{
	using abi = ABI::Windows::System::ILaunchUriResult;
	template <typename T> using methods = Windows::System::impl_ILaunchUriResult<T>;
};

template <> struct traits<Windows::System::ILauncherUIOptions>
{
	using abi = ABI::Windows::System::ILauncherUIOptions;
	template <typename T> using methods = Windows::System::impl_ILauncherUIOptions<T>;
};

template <> struct traits<Windows::System::ILauncherOptions>
{
	using abi = ABI::Windows::System::ILauncherOptions;
	template <typename T> using methods = Windows::System::impl_ILauncherOptions<T>;
};

template <> struct traits<Windows::System::ILauncherOptions2>
{
	using abi = ABI::Windows::System::ILauncherOptions2;
	template <typename T> using methods = Windows::System::impl_ILauncherOptions2<T>;
};

template <> struct traits<Windows::System::ILauncherViewOptions>
{
	using abi = ABI::Windows::System::ILauncherViewOptions;
	template <typename T> using methods = Windows::System::impl_ILauncherViewOptions<T>;
};

template <> struct traits<Windows::System::IFolderLauncherOptions>
{
	using abi = ABI::Windows::System::IFolderLauncherOptions;
	template <typename T> using methods = Windows::System::impl_IFolderLauncherOptions<T>;
};

template <> struct traits<Windows::System::ILauncherStatics>
{
	using abi = ABI::Windows::System::ILauncherStatics;
	template <typename T> using methods = Windows::System::impl_ILauncherStatics<T>;
};

template <> struct traits<Windows::System::ILauncherStatics2>
{
	using abi = ABI::Windows::System::ILauncherStatics2;
	template <typename T> using methods = Windows::System::impl_ILauncherStatics2<T>;
};

template <> struct traits<Windows::System::ILauncherStatics3>
{
	using abi = ABI::Windows::System::ILauncherStatics3;
	template <typename T> using methods = Windows::System::impl_ILauncherStatics3<T>;
};

template <> struct traits<Windows::Storage::IStreamedFileDataRequestedHandler>
{
	using abi = ABI::Windows::Storage::IStreamedFileDataRequestedHandler;
	template <typename T> using methods = Windows::Storage::impl_IStreamedFileDataRequestedHandler<T>;
};

template <> struct traits<Windows::Storage::IApplicationDataSetVersionHandler>
{
	using abi = ABI::Windows::Storage::IApplicationDataSetVersionHandler;
	template <typename T> using methods = Windows::Storage::impl_IApplicationDataSetVersionHandler<T>;
};

template <> struct traits<Windows::Storage::IStorageLibraryStatics>
{
	using abi = ABI::Windows::Storage::IStorageLibraryStatics;
	template <typename T> using methods = Windows::Storage::impl_IStorageLibraryStatics<T>;
};

template <> struct traits<Windows::Storage::IStorageLibraryStatics2>
{
	using abi = ABI::Windows::Storage::IStorageLibraryStatics2;
	template <typename T> using methods = Windows::Storage::impl_IStorageLibraryStatics2<T>;
};

template <> struct traits<Windows::Storage::IStorageLibrary>
{
	using abi = ABI::Windows::Storage::IStorageLibrary;
	template <typename T> using methods = Windows::Storage::impl_IStorageLibrary<T>;
};

template <> struct traits<Windows::Storage::IKnownFoldersStatics>
{
	using abi = ABI::Windows::Storage::IKnownFoldersStatics;
	template <typename T> using methods = Windows::Storage::impl_IKnownFoldersStatics<T>;
};

template <> struct traits<Windows::Storage::IKnownFoldersStatics2>
{
	using abi = ABI::Windows::Storage::IKnownFoldersStatics2;
	template <typename T> using methods = Windows::Storage::impl_IKnownFoldersStatics2<T>;
};

template <> struct traits<Windows::Storage::IKnownFoldersStatics3>
{
	using abi = ABI::Windows::Storage::IKnownFoldersStatics3;
	template <typename T> using methods = Windows::Storage::impl_IKnownFoldersStatics3<T>;
};

template <> struct traits<Windows::Storage::IKnownFoldersPlaylistsStatics>
{
	using abi = ABI::Windows::Storage::IKnownFoldersPlaylistsStatics;
	template <typename T> using methods = Windows::Storage::impl_IKnownFoldersPlaylistsStatics<T>;
};

template <> struct traits<Windows::Storage::IKnownFoldersCameraRollStatics>
{
	using abi = ABI::Windows::Storage::IKnownFoldersCameraRollStatics;
	template <typename T> using methods = Windows::Storage::impl_IKnownFoldersCameraRollStatics<T>;
};

template <> struct traits<Windows::Storage::IKnownFoldersSavedPicturesStatics>
{
	using abi = ABI::Windows::Storage::IKnownFoldersSavedPicturesStatics;
	template <typename T> using methods = Windows::Storage::impl_IKnownFoldersSavedPicturesStatics<T>;
};

template <> struct traits<Windows::Storage::IDownloadsFolderStatics>
{
	using abi = ABI::Windows::Storage::IDownloadsFolderStatics;
	template <typename T> using methods = Windows::Storage::impl_IDownloadsFolderStatics<T>;
};

template <> struct traits<Windows::Storage::IDownloadsFolderStatics2>
{
	using abi = ABI::Windows::Storage::IDownloadsFolderStatics2;
	template <typename T> using methods = Windows::Storage::impl_IDownloadsFolderStatics2<T>;
};

template <> struct traits<Windows::Storage::IStreamedFileDataRequest>
{
	using abi = ABI::Windows::Storage::IStreamedFileDataRequest;
	template <typename T> using methods = Windows::Storage::impl_IStreamedFileDataRequest<T>;
};

template <> struct traits<Windows::Storage::IStorageFileStatics>
{
	using abi = ABI::Windows::Storage::IStorageFileStatics;
	template <typename T> using methods = Windows::Storage::impl_IStorageFileStatics<T>;
};

template <> struct traits<Windows::Storage::IStorageItem>
{
	using abi = ABI::Windows::Storage::IStorageItem;
	template <typename T> using methods = Windows::Storage::impl_IStorageItem<T>;
};

template <> struct traits<Windows::Storage::IStorageFolder>
{
	using abi = ABI::Windows::Storage::IStorageFolder;
	template <typename T> using methods = Windows::Storage::impl_IStorageFolder<T>;
};

template <> struct traits<Windows::Storage::IStorageFile>
{
	using abi = ABI::Windows::Storage::IStorageFile;
	template <typename T> using methods = Windows::Storage::impl_IStorageFile<T>;
};

template <> struct traits<Windows::Storage::IStorageFolderStatics>
{
	using abi = ABI::Windows::Storage::IStorageFolderStatics;
	template <typename T> using methods = Windows::Storage::impl_IStorageFolderStatics<T>;
};

template <> struct traits<Windows::Storage::IStorageItem2>
{
	using abi = ABI::Windows::Storage::IStorageItem2;
	template <typename T> using methods = Windows::Storage::impl_IStorageItem2<T>;
};

template <> struct traits<Windows::Storage::IStorageItemProperties>
{
	using abi = ABI::Windows::Storage::IStorageItemProperties;
	template <typename T> using methods = Windows::Storage::impl_IStorageItemProperties<T>;
};

template <> struct traits<Windows::Storage::IStorageItemProperties2>
{
	using abi = ABI::Windows::Storage::IStorageItemProperties2;
	template <typename T> using methods = Windows::Storage::impl_IStorageItemProperties2<T>;
};

template <> struct traits<Windows::Storage::IStorageItemPropertiesWithProvider>
{
	using abi = ABI::Windows::Storage::IStorageItemPropertiesWithProvider;
	template <typename T> using methods = Windows::Storage::impl_IStorageItemPropertiesWithProvider<T>;
};

template <> struct traits<Windows::Storage::IStorageFilePropertiesWithAvailability>
{
	using abi = ABI::Windows::Storage::IStorageFilePropertiesWithAvailability;
	template <typename T> using methods = Windows::Storage::impl_IStorageFilePropertiesWithAvailability<T>;
};

template <> struct traits<Windows::Storage::IStorageProvider>
{
	using abi = ABI::Windows::Storage::IStorageProvider;
	template <typename T> using methods = Windows::Storage::impl_IStorageProvider<T>;
};

template <> struct traits<Windows::Storage::IStorageFolder2>
{
	using abi = ABI::Windows::Storage::IStorageFolder2;
	template <typename T> using methods = Windows::Storage::impl_IStorageFolder2<T>;
};

template <> struct traits<Windows::Storage::IStorageFile2>
{
	using abi = ABI::Windows::Storage::IStorageFile2;
	template <typename T> using methods = Windows::Storage::impl_IStorageFile2<T>;
};

template <> struct traits<Windows::Storage::IFileIOStatics>
{
	using abi = ABI::Windows::Storage::IFileIOStatics;
	template <typename T> using methods = Windows::Storage::impl_IFileIOStatics<T>;
};

template <> struct traits<Windows::Storage::IPathIOStatics>
{
	using abi = ABI::Windows::Storage::IPathIOStatics;
	template <typename T> using methods = Windows::Storage::impl_IPathIOStatics<T>;
};

template <> struct traits<Windows::Storage::ICachedFileManagerStatics>
{
	using abi = ABI::Windows::Storage::ICachedFileManagerStatics;
	template <typename T> using methods = Windows::Storage::impl_ICachedFileManagerStatics<T>;
};

template <> struct traits<Windows::Storage::ISystemAudioProperties>
{
	using abi = ABI::Windows::Storage::ISystemAudioProperties;
	template <typename T> using methods = Windows::Storage::impl_ISystemAudioProperties<T>;
};

template <> struct traits<Windows::Storage::ISystemGPSProperties>
{
	using abi = ABI::Windows::Storage::ISystemGPSProperties;
	template <typename T> using methods = Windows::Storage::impl_ISystemGPSProperties<T>;
};

template <> struct traits<Windows::Storage::ISystemImageProperties>
{
	using abi = ABI::Windows::Storage::ISystemImageProperties;
	template <typename T> using methods = Windows::Storage::impl_ISystemImageProperties<T>;
};

template <> struct traits<Windows::Storage::ISystemMediaProperties>
{
	using abi = ABI::Windows::Storage::ISystemMediaProperties;
	template <typename T> using methods = Windows::Storage::impl_ISystemMediaProperties<T>;
};

template <> struct traits<Windows::Storage::ISystemMusicProperties>
{
	using abi = ABI::Windows::Storage::ISystemMusicProperties;
	template <typename T> using methods = Windows::Storage::impl_ISystemMusicProperties<T>;
};

template <> struct traits<Windows::Storage::ISystemPhotoProperties>
{
	using abi = ABI::Windows::Storage::ISystemPhotoProperties;
	template <typename T> using methods = Windows::Storage::impl_ISystemPhotoProperties<T>;
};

template <> struct traits<Windows::Storage::ISystemVideoProperties>
{
	using abi = ABI::Windows::Storage::ISystemVideoProperties;
	template <typename T> using methods = Windows::Storage::impl_ISystemVideoProperties<T>;
};

template <> struct traits<Windows::Storage::ISystemProperties>
{
	using abi = ABI::Windows::Storage::ISystemProperties;
	template <typename T> using methods = Windows::Storage::impl_ISystemProperties<T>;
};

template <> struct traits<Windows::Storage::IStorageStreamTransaction>
{
	using abi = ABI::Windows::Storage::IStorageStreamTransaction;
	template <typename T> using methods = Windows::Storage::impl_IStorageStreamTransaction<T>;
};

template <> struct traits<Windows::Storage::IApplicationDataStatics>
{
	using abi = ABI::Windows::Storage::IApplicationDataStatics;
	template <typename T> using methods = Windows::Storage::impl_IApplicationDataStatics<T>;
};

template <> struct traits<Windows::Storage::IApplicationDataStatics2>
{
	using abi = ABI::Windows::Storage::IApplicationDataStatics2;
	template <typename T> using methods = Windows::Storage::impl_IApplicationDataStatics2<T>;
};

template <> struct traits<Windows::Storage::IApplicationData>
{
	using abi = ABI::Windows::Storage::IApplicationData;
	template <typename T> using methods = Windows::Storage::impl_IApplicationData<T>;
};

template <> struct traits<Windows::Storage::IApplicationData2>
{
	using abi = ABI::Windows::Storage::IApplicationData2;
	template <typename T> using methods = Windows::Storage::impl_IApplicationData2<T>;
};

template <> struct traits<Windows::Storage::IApplicationData3>
{
	using abi = ABI::Windows::Storage::IApplicationData3;
	template <typename T> using methods = Windows::Storage::impl_IApplicationData3<T>;
};

template <> struct traits<Windows::Storage::ISetVersionRequest>
{
	using abi = ABI::Windows::Storage::ISetVersionRequest;
	template <typename T> using methods = Windows::Storage::impl_ISetVersionRequest<T>;
};

template <> struct traits<Windows::Storage::ISetVersionDeferral>
{
	using abi = ABI::Windows::Storage::ISetVersionDeferral;
	template <typename T> using methods = Windows::Storage::impl_ISetVersionDeferral<T>;
};

template <> struct traits<Windows::Storage::IApplicationDataContainer>
{
	using abi = ABI::Windows::Storage::IApplicationDataContainer;
	template <typename T> using methods = Windows::Storage::impl_IApplicationDataContainer<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ITracingStatusChangedEventArgs<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::IAsyncCausalityTracerStatics>
{
	using abi = ABI::Windows::Foundation::Diagnostics::IAsyncCausalityTracerStatics;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_IAsyncCausalityTracerStatics<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::IErrorReportingSettings>
{
	using abi = ABI::Windows::Foundation::Diagnostics::IErrorReportingSettings;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_IErrorReportingSettings<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::IErrorDetailsStatics>
{
	using abi = ABI::Windows::Foundation::Diagnostics::IErrorDetailsStatics;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_IErrorDetailsStatics<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::IErrorDetails>
{
	using abi = ABI::Windows::Foundation::Diagnostics::IErrorDetails;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_IErrorDetails<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ILoggingOptions>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ILoggingOptions;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ILoggingOptions<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ILoggingOptionsFactory>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ILoggingOptionsFactory;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ILoggingOptionsFactory<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ILoggingChannelOptions>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ILoggingChannelOptions;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ILoggingChannelOptions<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ILoggingChannelOptionsFactory>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ILoggingChannelOptionsFactory;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ILoggingChannelOptionsFactory<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ILoggingFields>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ILoggingFields;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ILoggingFields<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ILoggingTarget>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ILoggingTarget;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ILoggingTarget<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ILoggingChannel>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ILoggingChannel;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ILoggingChannel<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ILoggingChannel2>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ILoggingChannel2;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ILoggingChannel2<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ILoggingChannelFactory>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ILoggingChannelFactory;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ILoggingChannelFactory<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ILoggingChannelFactory2>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ILoggingChannelFactory2;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ILoggingChannelFactory2<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ILoggingActivity>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ILoggingActivity;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ILoggingActivity<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ILoggingActivity2>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ILoggingActivity2;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ILoggingActivity2<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ILoggingActivityFactory>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ILoggingActivityFactory;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ILoggingActivityFactory<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ILoggingSession>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ILoggingSession;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ILoggingSession<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ILoggingSessionFactory>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ILoggingSessionFactory;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ILoggingSessionFactory<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::ILogFileGeneratedEventArgs>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ILogFileGeneratedEventArgs;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_ILogFileGeneratedEventArgs<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::IFileLoggingSession>
{
	using abi = ABI::Windows::Foundation::Diagnostics::IFileLoggingSession;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_IFileLoggingSession<T>;
};

template <> struct traits<Windows::Foundation::Diagnostics::IFileLoggingSessionFactory>
{
	using abi = ABI::Windows::Foundation::Diagnostics::IFileLoggingSessionFactory;
	template <typename T> using methods = Windows::Foundation::Diagnostics::impl_IFileLoggingSessionFactory<T>;
};

template <> struct traits<Windows::Foundation::Metadata::IApiInformationStatics>
{
	using abi = ABI::Windows::Foundation::Metadata::IApiInformationStatics;
	template <typename T> using methods = Windows::Foundation::Metadata::impl_IApiInformationStatics<T>;
};

template <> struct traits<Windows::Foundation::WwwFormUrlDecoder>
{
	using abi = ABI::Windows::Foundation::WwwFormUrlDecoder;
	using default_interface = Windows::Foundation::IWwwFormUrlDecoderRuntimeClass;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.WwwFormUrlDecoder"; }
	static constexpr unsigned name_length = 36;
};

template <> struct traits<Windows::Foundation::Uri>
{
	using abi = ABI::Windows::Foundation::Uri;
	using default_interface = Windows::Foundation::IUriRuntimeClass;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Uri"; }
	static constexpr unsigned name_length = 22;
};

template <> struct traits<Windows::Foundation::WwwFormUrlDecoderEntry>
{
	using abi = ABI::Windows::Foundation::WwwFormUrlDecoderEntry;
	using default_interface = Windows::Foundation::IWwwFormUrlDecoderEntry;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.WwwFormUrlDecoderEntry"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::Foundation::PropertyValue>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.PropertyValue"; }
	static constexpr unsigned name_length = 32;
};

template <> struct traits<Windows::Foundation::Collections::PropertySet>
{
	using abi = ABI::Windows::Foundation::Collections::PropertySet;
	using default_interface = Windows::Foundation::Collections::IPropertySet;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Collections.PropertySet"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Foundation::Collections::ValueSet>
{
	using abi = ABI::Windows::Foundation::Collections::ValueSet;
	using default_interface = Windows::Foundation::Collections::IPropertySet;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Collections.ValueSet"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::Foundation::Collections::StringMap>
{
	using abi = ABI::Windows::Foundation::Collections::StringMap;
	using default_interface = Windows::Foundation::Collections::IMap<hstring, hstring>;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Collections.StringMap"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::Foundation::Deferral>
{
	using abi = ABI::Windows::Foundation::Deferral;
	using default_interface = Windows::Foundation::IDeferral;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Deferral"; }
	static constexpr unsigned name_length = 27;
};

template <> struct traits<Windows::Foundation::MemoryBuffer>
{
	using abi = ABI::Windows::Foundation::MemoryBuffer;
	using default_interface = Windows::Foundation::IMemoryBuffer;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.MemoryBuffer"; }
	static constexpr unsigned name_length = 31;
};

template <> struct traits<Windows::Devices::Geolocation::Geopoint>
{
	using abi = ABI::Windows::Devices::Geolocation::Geopoint;
	using default_interface = Windows::Devices::Geolocation::IGeopoint;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Geolocation.Geopoint"; }
	static constexpr unsigned name_length = 36;
};

template <> struct traits<Windows::Devices::Geolocation::Geopath>
{
	using abi = ABI::Windows::Devices::Geolocation::Geopath;
	using default_interface = Windows::Devices::Geolocation::IGeopath;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Geolocation.Geopath"; }
	static constexpr unsigned name_length = 35;
};

template <> struct traits<Windows::Devices::Geolocation::GeoboundingBox>
{
	using abi = ABI::Windows::Devices::Geolocation::GeoboundingBox;
	using default_interface = Windows::Devices::Geolocation::IGeoboundingBox;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Geolocation.GeoboundingBox"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Devices::Geolocation::GeocoordinateSatelliteData>
{
	using abi = ABI::Windows::Devices::Geolocation::GeocoordinateSatelliteData;
	using default_interface = Windows::Devices::Geolocation::IGeocoordinateSatelliteData;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Geolocation.GeocoordinateSatelliteData"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::Devices::Geolocation::VenueData>
{
	using abi = ABI::Windows::Devices::Geolocation::VenueData;
	using default_interface = Windows::Devices::Geolocation::IVenueData;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Geolocation.VenueData"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::Devices::Geolocation::Geocoordinate>
{
	using abi = ABI::Windows::Devices::Geolocation::Geocoordinate;
	using default_interface = Windows::Devices::Geolocation::IGeocoordinate;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Geolocation.Geocoordinate"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::Devices::Geolocation::CivicAddress>
{
	using abi = ABI::Windows::Devices::Geolocation::CivicAddress;
	using default_interface = Windows::Devices::Geolocation::ICivicAddress;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Geolocation.CivicAddress"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::Devices::Geolocation::Geoposition>
{
	using abi = ABI::Windows::Devices::Geolocation::Geoposition;
	using default_interface = Windows::Devices::Geolocation::IGeoposition;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Geolocation.Geoposition"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::Devices::Geolocation::PositionChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Geolocation::PositionChangedEventArgs;
	using default_interface = Windows::Devices::Geolocation::IPositionChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Geolocation.PositionChangedEventArgs"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Devices::Geolocation::StatusChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Geolocation::StatusChangedEventArgs;
	using default_interface = Windows::Devices::Geolocation::IStatusChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Geolocation.StatusChangedEventArgs"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::Devices::Geolocation::Geolocator>
{
	using abi = ABI::Windows::Devices::Geolocation::Geolocator;
	using default_interface = Windows::Devices::Geolocation::IGeolocator;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Geolocation.Geolocator"; }
	static constexpr unsigned name_length = 38;
};

template <> struct traits<Windows::Devices::Geolocation::Geocircle>
{
	using abi = ABI::Windows::Devices::Geolocation::Geocircle;
	using default_interface = Windows::Devices::Geolocation::IGeocircle;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Geolocation.Geocircle"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::Storage::Streams::DataReaderLoadOperation>
{
	using abi = ABI::Windows::Storage::Streams::DataReaderLoadOperation;
	using default_interface = Windows::Foundation::IAsyncOperation<unsigned>;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Streams.DataReaderLoadOperation"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::Storage::Streams::DataReader>
{
	using abi = ABI::Windows::Storage::Streams::DataReader;
	using default_interface = Windows::Storage::Streams::IDataReader;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Streams.DataReader"; }
	static constexpr unsigned name_length = 34;
};

template <> struct traits<Windows::Storage::Streams::DataWriterStoreOperation>
{
	using abi = ABI::Windows::Storage::Streams::DataWriterStoreOperation;
	using default_interface = Windows::Foundation::IAsyncOperation<unsigned>;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Streams.DataWriterStoreOperation"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::Storage::Streams::DataWriter>
{
	using abi = ABI::Windows::Storage::Streams::DataWriter;
	using default_interface = Windows::Storage::Streams::IDataWriter;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Streams.DataWriter"; }
	static constexpr unsigned name_length = 34;
};

template <> struct traits<Windows::Storage::Streams::RandomAccessStream>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Streams.RandomAccessStream"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Storage::Streams::Buffer>
{
	using abi = ABI::Windows::Storage::Streams::Buffer;
	using default_interface = Windows::Storage::Streams::IBuffer;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Streams.Buffer"; }
	static constexpr unsigned name_length = 30;
};

template <> struct traits<Windows::Storage::Streams::RandomAccessStreamReference>
{
	using abi = ABI::Windows::Storage::Streams::RandomAccessStreamReference;
	using default_interface = Windows::Storage::Streams::IRandomAccessStreamReference;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Streams.RandomAccessStreamReference"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::Storage::Streams::FileRandomAccessStream>
{
	using abi = ABI::Windows::Storage::Streams::FileRandomAccessStream;
	using default_interface = Windows::Storage::Streams::IRandomAccessStream;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Streams.FileRandomAccessStream"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Storage::Streams::FileInputStream>
{
	using abi = ABI::Windows::Storage::Streams::FileInputStream;
	using default_interface = Windows::Storage::Streams::IInputStream;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Streams.FileInputStream"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::Storage::Streams::FileOutputStream>
{
	using abi = ABI::Windows::Storage::Streams::FileOutputStream;
	using default_interface = Windows::Storage::Streams::IOutputStream;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Streams.FileOutputStream"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::Storage::Streams::RandomAccessStreamOverStream>
{
	using abi = ABI::Windows::Storage::Streams::RandomAccessStreamOverStream;
	using default_interface = Windows::Storage::Streams::IRandomAccessStream;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Streams.RandomAccessStreamOverStream"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Storage::Streams::InputStreamOverStream>
{
	using abi = ABI::Windows::Storage::Streams::InputStreamOverStream;
	using default_interface = Windows::Storage::Streams::IInputStream;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Streams.InputStreamOverStream"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::Storage::Streams::OutputStreamOverStream>
{
	using abi = ABI::Windows::Storage::Streams::OutputStreamOverStream;
	using default_interface = Windows::Storage::Streams::IOutputStream;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Streams.OutputStreamOverStream"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Storage::Streams::InMemoryRandomAccessStream>
{
	using abi = ABI::Windows::Storage::Streams::InMemoryRandomAccessStream;
	using default_interface = Windows::Storage::Streams::IRandomAccessStream;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Streams.InMemoryRandomAccessStream"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::Storage::FileProperties::GeotagHelper>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.FileProperties.GeotagHelper"; }
	static constexpr unsigned name_length = 43;
};

template <> struct traits<Windows::Storage::FileProperties::StorageItemThumbnail>
{
	using abi = ABI::Windows::Storage::FileProperties::StorageItemThumbnail;
	using default_interface = Windows::Storage::Streams::IRandomAccessStreamWithContentType;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.FileProperties.StorageItemThumbnail"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::Storage::FileProperties::MusicProperties>
{
	using abi = ABI::Windows::Storage::FileProperties::MusicProperties;
	using default_interface = Windows::Storage::FileProperties::IMusicProperties;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.FileProperties.MusicProperties"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Storage::FileProperties::VideoProperties>
{
	using abi = ABI::Windows::Storage::FileProperties::VideoProperties;
	using default_interface = Windows::Storage::FileProperties::IVideoProperties;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.FileProperties.VideoProperties"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Storage::FileProperties::ImageProperties>
{
	using abi = ABI::Windows::Storage::FileProperties::ImageProperties;
	using default_interface = Windows::Storage::FileProperties::IImageProperties;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.FileProperties.ImageProperties"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Storage::FileProperties::DocumentProperties>
{
	using abi = ABI::Windows::Storage::FileProperties::DocumentProperties;
	using default_interface = Windows::Storage::FileProperties::IDocumentProperties;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.FileProperties.DocumentProperties"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::Storage::FileProperties::StorageItemContentProperties>
{
	using abi = ABI::Windows::Storage::FileProperties::StorageItemContentProperties;
	using default_interface = Windows::Storage::FileProperties::IStorageItemContentProperties;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.FileProperties.StorageItemContentProperties"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::Storage::FileProperties::BasicProperties>
{
	using abi = ABI::Windows::Storage::FileProperties::BasicProperties;
	using default_interface = Windows::Storage::FileProperties::IBasicProperties;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.FileProperties.BasicProperties"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Storage::StorageFile>
{
	using abi = ABI::Windows::Storage::StorageFile;
	using default_interface = Windows::Storage::IStorageFile;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.StorageFile"; }
	static constexpr unsigned name_length = 27;
};

template <> struct traits<Windows::Storage::Provider::CachedFileUpdaterUI>
{
	using abi = ABI::Windows::Storage::Provider::CachedFileUpdaterUI;
	using default_interface = Windows::Storage::Provider::ICachedFileUpdaterUI;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Provider.CachedFileUpdaterUI"; }
	static constexpr unsigned name_length = 44;
};

template <> struct traits<Windows::Storage::Provider::FileUpdateRequestedEventArgs>
{
	using abi = ABI::Windows::Storage::Provider::FileUpdateRequestedEventArgs;
	using default_interface = Windows::Storage::Provider::IFileUpdateRequestedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Provider.FileUpdateRequestedEventArgs"; }
	static constexpr unsigned name_length = 53;
};

template <> struct traits<Windows::Storage::Provider::FileUpdateRequest>
{
	using abi = ABI::Windows::Storage::Provider::FileUpdateRequest;
	using default_interface = Windows::Storage::Provider::IFileUpdateRequest;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Provider.FileUpdateRequest"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Storage::Provider::FileUpdateRequestDeferral>
{
	using abi = ABI::Windows::Storage::Provider::FileUpdateRequestDeferral;
	using default_interface = Windows::Storage::Provider::IFileUpdateRequestDeferral;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Provider.FileUpdateRequestDeferral"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::Storage::Provider::CachedFileUpdater>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Provider.CachedFileUpdater"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Data::Text::SemanticTextQuery>
{
	using abi = ABI::Windows::Data::Text::SemanticTextQuery;
	using default_interface = Windows::Data::Text::ISemanticTextQuery;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Data.Text.SemanticTextQuery"; }
	static constexpr unsigned name_length = 35;
};

template <> struct traits<Windows::Data::Text::UnicodeCharacters>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Data.Text.UnicodeCharacters"; }
	static constexpr unsigned name_length = 35;
};

template <> struct traits<Windows::Data::Text::AlternateWordForm>
{
	using abi = ABI::Windows::Data::Text::AlternateWordForm;
	using default_interface = Windows::Data::Text::IAlternateWordForm;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Data.Text.AlternateWordForm"; }
	static constexpr unsigned name_length = 35;
};

template <> struct traits<Windows::Data::Text::WordSegment>
{
	using abi = ABI::Windows::Data::Text::WordSegment;
	using default_interface = Windows::Data::Text::IWordSegment;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Data.Text.WordSegment"; }
	static constexpr unsigned name_length = 29;
};

template <> struct traits<Windows::Data::Text::WordsSegmenter>
{
	using abi = ABI::Windows::Data::Text::WordsSegmenter;
	using default_interface = Windows::Data::Text::IWordsSegmenter;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Data.Text.WordsSegmenter"; }
	static constexpr unsigned name_length = 32;
};

template <> struct traits<Windows::Data::Text::SelectableWordSegment>
{
	using abi = ABI::Windows::Data::Text::SelectableWordSegment;
	using default_interface = Windows::Data::Text::ISelectableWordSegment;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Data.Text.SelectableWordSegment"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::Data::Text::SelectableWordsSegmenter>
{
	using abi = ABI::Windows::Data::Text::SelectableWordsSegmenter;
	using default_interface = Windows::Data::Text::ISelectableWordsSegmenter;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Data.Text.SelectableWordsSegmenter"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Data::Text::TextPredictionGenerator>
{
	using abi = ABI::Windows::Data::Text::TextPredictionGenerator;
	using default_interface = Windows::Data::Text::ITextPredictionGenerator;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Data.Text.TextPredictionGenerator"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::Data::Text::TextConversionGenerator>
{
	using abi = ABI::Windows::Data::Text::TextConversionGenerator;
	using default_interface = Windows::Data::Text::ITextConversionGenerator;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Data.Text.TextConversionGenerator"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::Data::Text::TextReverseConversionGenerator>
{
	using abi = ABI::Windows::Data::Text::TextReverseConversionGenerator;
	using default_interface = Windows::Data::Text::ITextReverseConversionGenerator;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Data.Text.TextReverseConversionGenerator"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::Storage::StorageFolder>
{
	using abi = ABI::Windows::Storage::StorageFolder;
	using default_interface = Windows::Storage::IStorageFolder;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.StorageFolder"; }
	static constexpr unsigned name_length = 29;
};

template <> struct traits<Windows::Storage::Search::ContentIndexer>
{
	using abi = ABI::Windows::Storage::Search::ContentIndexer;
	using default_interface = Windows::Storage::Search::IContentIndexer;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Search.ContentIndexer"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::Storage::Search::ValueAndLanguage>
{
	using abi = ABI::Windows::Storage::Search::ValueAndLanguage;
	using default_interface = Windows::Storage::Search::IValueAndLanguage;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Search.ValueAndLanguage"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::Storage::Search::ContentIndexerQuery>
{
	using abi = ABI::Windows::Storage::Search::ContentIndexerQuery;
	using default_interface = Windows::Storage::Search::IContentIndexerQuery;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Search.ContentIndexerQuery"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Storage::Search::IndexableContent>
{
	using abi = ABI::Windows::Storage::Search::IndexableContent;
	using default_interface = Windows::Storage::Search::IIndexableContent;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Search.IndexableContent"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::Storage::Search::QueryOptions>
{
	using abi = ABI::Windows::Storage::Search::QueryOptions;
	using default_interface = Windows::Storage::Search::IQueryOptions;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Search.QueryOptions"; }
	static constexpr unsigned name_length = 35;
};

template <> struct traits<Windows::Storage::Search::StorageFileQueryResult>
{
	using abi = ABI::Windows::Storage::Search::StorageFileQueryResult;
	using default_interface = Windows::Storage::Search::IStorageFileQueryResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Search.StorageFileQueryResult"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::Storage::Search::StorageFolderQueryResult>
{
	using abi = ABI::Windows::Storage::Search::StorageFolderQueryResult;
	using default_interface = Windows::Storage::Search::IStorageFolderQueryResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Search.StorageFolderQueryResult"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::Storage::Search::StorageItemQueryResult>
{
	using abi = ABI::Windows::Storage::Search::StorageItemQueryResult;
	using default_interface = Windows::Storage::Search::IStorageItemQueryResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Search.StorageItemQueryResult"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::Storage::Search::SortEntryVector>
{
	using abi = ABI::Windows::Storage::Search::SortEntryVector;
	using default_interface = Windows::Foundation::Collections::IVector<winrt::Windows::Storage::Search::SortEntry>;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Search.SortEntryVector"; }
	static constexpr unsigned name_length = 38;
};

template <> struct traits<Windows::Storage::Search::StorageLibraryContentChangedTriggerDetails>
{
	using abi = ABI::Windows::Storage::Search::StorageLibraryContentChangedTriggerDetails;
	using default_interface = Windows::Storage::Search::IStorageLibraryContentChangedTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Search.StorageLibraryContentChangedTriggerDetails"; }
	static constexpr unsigned name_length = 65;
};

template <> struct traits<Windows::UI::ColorHelper>
{
	using abi = ABI::Windows::UI::ColorHelper;
	using default_interface = Windows::UI::IColorHelper;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.ColorHelper"; }
	static constexpr unsigned name_length = 22;
};

template <> struct traits<Windows::UI::Colors>
{
	using abi = ABI::Windows::UI::Colors;
	using default_interface = Windows::UI::IColors;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Colors"; }
	static constexpr unsigned name_length = 17;
};

template <> struct traits<Windows::UI::Popups::MessageDialog>
{
	using abi = ABI::Windows::UI::Popups::MessageDialog;
	using default_interface = Windows::UI::Popups::IMessageDialog;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Popups.MessageDialog"; }
	static constexpr unsigned name_length = 31;
};

template <> struct traits<Windows::UI::Popups::UICommand>
{
	using abi = ABI::Windows::UI::Popups::UICommand;
	using default_interface = Windows::UI::Popups::IUICommand;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Popups.UICommand"; }
	static constexpr unsigned name_length = 27;
};

template <> struct traits<Windows::UI::Popups::UICommandSeparator>
{
	using abi = ABI::Windows::UI::Popups::UICommandSeparator;
	using default_interface = Windows::UI::Popups::IUICommand;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Popups.UICommandSeparator"; }
	static constexpr unsigned name_length = 36;
};

template <> struct traits<Windows::UI::Popups::PopupMenu>
{
	using abi = ABI::Windows::UI::Popups::PopupMenu;
	using default_interface = Windows::UI::Popups::IPopupMenu;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Popups.PopupMenu"; }
	static constexpr unsigned name_length = 27;
};

template <> struct traits<Windows::ApplicationModel::Appointments::Appointment>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::Appointment;
	using default_interface = Windows::ApplicationModel::Appointments::IAppointment;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.Appointment"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentStore>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentStore;
	using default_interface = Windows::ApplicationModel::Appointments::IAppointmentStore;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentStore"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentOrganizer>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentOrganizer;
	using default_interface = Windows::ApplicationModel::Appointments::IAppointmentParticipant;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentOrganizer"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentInvitee>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentInvitee;
	using default_interface = Windows::ApplicationModel::Appointments::IAppointmentInvitee;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentInvitee"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentRecurrence>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentRecurrence;
	using default_interface = Windows::ApplicationModel::Appointments::IAppointmentRecurrence;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentRecurrence"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentManager"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::ApplicationModel::Appointments::FindAppointmentsOptions>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::FindAppointmentsOptions;
	using default_interface = Windows::ApplicationModel::Appointments::IFindAppointmentsOptions;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.FindAppointmentsOptions"; }
	static constexpr unsigned name_length = 61;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentException>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentException;
	using default_interface = Windows::ApplicationModel::Appointments::IAppointmentException;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentException"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentCalendarSyncManager>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentCalendarSyncManager;
	using default_interface = Windows::ApplicationModel::Appointments::IAppointmentCalendarSyncManager;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentCalendarSyncManager"; }
	static constexpr unsigned name_length = 68;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentCalendar>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentCalendar;
	using default_interface = Windows::ApplicationModel::Appointments::IAppointmentCalendar;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentCalendar"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentStoreChange>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentStoreChange;
	using default_interface = Windows::ApplicationModel::Appointments::IAppointmentStoreChange;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentStoreChange"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentStoreChangeReader>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentStoreChangeReader;
	using default_interface = Windows::ApplicationModel::Appointments::IAppointmentStoreChangeReader;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentStoreChangeReader"; }
	static constexpr unsigned name_length = 66;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentStoreChangedDeferral>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentStoreChangedDeferral;
	using default_interface = Windows::ApplicationModel::Appointments::IAppointmentStoreChangedDeferral;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentStoreChangedDeferral"; }
	static constexpr unsigned name_length = 69;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentStoreChangeTracker>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentStoreChangeTracker;
	using default_interface = Windows::ApplicationModel::Appointments::IAppointmentStoreChangeTracker;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentStoreChangeTracker"; }
	static constexpr unsigned name_length = 67;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentConflictResult>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentConflictResult;
	using default_interface = Windows::ApplicationModel::Appointments::IAppointmentConflictResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentConflictResult"; }
	static constexpr unsigned name_length = 63;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentStoreChangedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentStoreChangedEventArgs;
	using default_interface = Windows::ApplicationModel::Appointments::IAppointmentStoreChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentStoreChangedEventArgs"; }
	static constexpr unsigned name_length = 70;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentProperties>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentProperties"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentStoreNotificationTriggerDetails>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentStoreNotificationTriggerDetails;
	using default_interface = Windows::ApplicationModel::Appointments::IAppointmentStoreNotificationTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentStoreNotificationTriggerDetails"; }
	static constexpr unsigned name_length = 80;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::AppointmentsProviderLaunchActionVerbs>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentsProvider.AppointmentsProviderLaunchActionVerbs"; }
	static constexpr unsigned name_length = 96;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::AddAppointmentOperation>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::AddAppointmentOperation;
	using default_interface = Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentsProvider.AddAppointmentOperation"; }
	static constexpr unsigned name_length = 82;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::ReplaceAppointmentOperation>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::ReplaceAppointmentOperation;
	using default_interface = Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentsProvider.ReplaceAppointmentOperation"; }
	static constexpr unsigned name_length = 86;
};

template <> struct traits<Windows::ApplicationModel::Appointments::AppointmentsProvider::RemoveAppointmentOperation>
{
	using abi = ABI::Windows::ApplicationModel::Appointments::AppointmentsProvider::RemoveAppointmentOperation;
	using default_interface = Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Appointments.AppointmentsProvider.RemoveAppointmentOperation"; }
	static constexpr unsigned name_length = 85;
};

template <> struct traits<Windows::ApplicationModel::Calls::Background::PhoneCallBlockedTriggerDetails>
{
	using abi = ABI::Windows::ApplicationModel::Calls::Background::PhoneCallBlockedTriggerDetails;
	using default_interface = Windows::ApplicationModel::Calls::Background::IPhoneCallBlockedTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.Background.PhoneCallBlockedTriggerDetails"; }
	static constexpr unsigned name_length = 72;
};

template <> struct traits<Windows::ApplicationModel::Calls::Background::PhoneCallOriginDataRequestTriggerDetails>
{
	using abi = ABI::Windows::ApplicationModel::Calls::Background::PhoneCallOriginDataRequestTriggerDetails;
	using default_interface = Windows::ApplicationModel::Calls::Background::IPhoneCallOriginDataRequestTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.Background.PhoneCallOriginDataRequestTriggerDetails"; }
	static constexpr unsigned name_length = 82;
};

template <> struct traits<Windows::ApplicationModel::Calls::Background::PhoneNewVoicemailMessageTriggerDetails>
{
	using abi = ABI::Windows::ApplicationModel::Calls::Background::PhoneNewVoicemailMessageTriggerDetails;
	using default_interface = Windows::ApplicationModel::Calls::Background::IPhoneNewVoicemailMessageTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.Background.PhoneNewVoicemailMessageTriggerDetails"; }
	static constexpr unsigned name_length = 80;
};

template <> struct traits<Windows::ApplicationModel::Calls::Background::PhoneLineChangedTriggerDetails>
{
	using abi = ABI::Windows::ApplicationModel::Calls::Background::PhoneLineChangedTriggerDetails;
	using default_interface = Windows::ApplicationModel::Calls::Background::IPhoneLineChangedTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.Background.PhoneLineChangedTriggerDetails"; }
	static constexpr unsigned name_length = 72;
};

template <> struct traits<Windows::Devices::Bluetooth::BluetoothLEDevice>
{
	using abi = ABI::Windows::Devices::Bluetooth::BluetoothLEDevice;
	using default_interface = Windows::Devices::Bluetooth::IBluetoothLEDevice;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.BluetoothLEDevice"; }
	static constexpr unsigned name_length = 43;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService;
	using default_interface = Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDeviceService;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.GenericAttributeProfile.GattDeviceService"; }
	static constexpr unsigned name_length = 67;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic;
	using default_interface = Windows::Devices::Bluetooth::GenericAttributeProfile::IGattCharacteristic;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristic"; }
	static constexpr unsigned name_length = 68;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDescriptor>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::GattDescriptor;
	using default_interface = Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDescriptor;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptor"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::GattPresentationFormat>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::GattPresentationFormat;
	using default_interface = Windows::Devices::Bluetooth::GenericAttributeProfile::IGattPresentationFormat;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormat"; }
	static constexpr unsigned name_length = 72;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult;
	using default_interface = Windows::Devices::Bluetooth::GenericAttributeProfile::IGattReadResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadResult"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadClientCharacteristicConfigurationDescriptorResult>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadClientCharacteristicConfigurationDescriptorResult;
	using default_interface = Windows::Devices::Bluetooth::GenericAttributeProfile::IGattReadClientCharacteristicConfigurationDescriptorResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.GenericAttributeProfile.GattReadClientCharacteristicConfigurationDescriptorResult"; }
	static constexpr unsigned name_length = 107;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::GattValueChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::GattValueChangedEventArgs;
	using default_interface = Windows::Devices::Bluetooth::GenericAttributeProfile::IGattValueChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.GenericAttributeProfile.GattValueChangedEventArgs"; }
	static constexpr unsigned name_length = 75;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::GattServiceUuids>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.GenericAttributeProfile.GattServiceUuids"; }
	static constexpr unsigned name_length = 66;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristicUuids>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.GenericAttributeProfile.GattCharacteristicUuids"; }
	static constexpr unsigned name_length = 73;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDescriptorUuids>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.GenericAttributeProfile.GattDescriptorUuids"; }
	static constexpr unsigned name_length = 69;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReliableWriteTransaction>
{
	using abi = ABI::Windows::Devices::Bluetooth::GenericAttributeProfile::GattReliableWriteTransaction;
	using default_interface = Windows::Devices::Bluetooth::GenericAttributeProfile::IGattReliableWriteTransaction;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.GenericAttributeProfile.GattReliableWriteTransaction"; }
	static constexpr unsigned name_length = 78;
};

template <> struct traits<Windows::Devices::Bluetooth::GenericAttributeProfile::GattPresentationFormatTypes>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.GenericAttributeProfile.GattPresentationFormatTypes"; }
	static constexpr unsigned name_length = 77;
};

template <> struct traits<Windows::Networking::EndpointPair>
{
	using abi = ABI::Windows::Networking::EndpointPair;
	using default_interface = Windows::Networking::IEndpointPair;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.EndpointPair"; }
	static constexpr unsigned name_length = 31;
};

template <> struct traits<Windows::Networking::HostName>
{
	using abi = ABI::Windows::Networking::HostName;
	using default_interface = Windows::Networking::IHostName;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.HostName"; }
	static constexpr unsigned name_length = 27;
};

template <> struct traits<Windows::Networking::Connectivity::IPInformation>
{
	using abi = ABI::Windows::Networking::Connectivity::IPInformation;
	using default_interface = Windows::Networking::Connectivity::IIPInformation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.IPInformation"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::Networking::Connectivity::DataPlanUsage>
{
	using abi = ABI::Windows::Networking::Connectivity::DataPlanUsage;
	using default_interface = Windows::Networking::Connectivity::IDataPlanUsage;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.DataPlanUsage"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::Networking::Connectivity::ConnectionCost>
{
	using abi = ABI::Windows::Networking::Connectivity::ConnectionCost;
	using default_interface = Windows::Networking::Connectivity::IConnectionCost;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.ConnectionCost"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Networking::Connectivity::DataPlanStatus>
{
	using abi = ABI::Windows::Networking::Connectivity::DataPlanStatus;
	using default_interface = Windows::Networking::Connectivity::IDataPlanStatus;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.DataPlanStatus"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Networking::Connectivity::NetworkAdapter>
{
	using abi = ABI::Windows::Networking::Connectivity::NetworkAdapter;
	using default_interface = Windows::Networking::Connectivity::INetworkAdapter;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.NetworkAdapter"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Networking::Connectivity::DataUsage>
{
	using abi = ABI::Windows::Networking::Connectivity::DataUsage;
	using default_interface = Windows::Networking::Connectivity::IDataUsage;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.DataUsage"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::Networking::Connectivity::NetworkSecuritySettings>
{
	using abi = ABI::Windows::Networking::Connectivity::NetworkSecuritySettings;
	using default_interface = Windows::Networking::Connectivity::INetworkSecuritySettings;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.NetworkSecuritySettings"; }
	static constexpr unsigned name_length = 55;
};

template <> struct traits<Windows::Networking::Connectivity::WwanConnectionProfileDetails>
{
	using abi = ABI::Windows::Networking::Connectivity::WwanConnectionProfileDetails;
	using default_interface = Windows::Networking::Connectivity::IWwanConnectionProfileDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.WwanConnectionProfileDetails"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::Networking::Connectivity::WlanConnectionProfileDetails>
{
	using abi = ABI::Windows::Networking::Connectivity::WlanConnectionProfileDetails;
	using default_interface = Windows::Networking::Connectivity::IWlanConnectionProfileDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.WlanConnectionProfileDetails"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::Networking::Connectivity::NetworkUsage>
{
	using abi = ABI::Windows::Networking::Connectivity::NetworkUsage;
	using default_interface = Windows::Networking::Connectivity::INetworkUsage;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.NetworkUsage"; }
	static constexpr unsigned name_length = 44;
};

template <> struct traits<Windows::Networking::Connectivity::ConnectivityInterval>
{
	using abi = ABI::Windows::Networking::Connectivity::ConnectivityInterval;
	using default_interface = Windows::Networking::Connectivity::IConnectivityInterval;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.ConnectivityInterval"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Networking::Connectivity::LanIdentifierData>
{
	using abi = ABI::Windows::Networking::Connectivity::LanIdentifierData;
	using default_interface = Windows::Networking::Connectivity::ILanIdentifierData;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.LanIdentifierData"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::Networking::Connectivity::ConnectionProfile>
{
	using abi = ABI::Windows::Networking::Connectivity::ConnectionProfile;
	using default_interface = Windows::Networking::Connectivity::IConnectionProfile;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.ConnectionProfile"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::Networking::Connectivity::LanIdentifier>
{
	using abi = ABI::Windows::Networking::Connectivity::LanIdentifier;
	using default_interface = Windows::Networking::Connectivity::ILanIdentifier;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.LanIdentifier"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::Networking::Connectivity::ProxyConfiguration>
{
	using abi = ABI::Windows::Networking::Connectivity::ProxyConfiguration;
	using default_interface = Windows::Networking::Connectivity::IProxyConfiguration;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.ProxyConfiguration"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::Networking::Connectivity::ConnectionProfileFilter>
{
	using abi = ABI::Windows::Networking::Connectivity::ConnectionProfileFilter;
	using default_interface = Windows::Networking::Connectivity::IConnectionProfileFilter;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.ConnectionProfileFilter"; }
	static constexpr unsigned name_length = 55;
};

template <> struct traits<Windows::Networking::Connectivity::NetworkItem>
{
	using abi = ABI::Windows::Networking::Connectivity::NetworkItem;
	using default_interface = Windows::Networking::Connectivity::INetworkItem;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.NetworkItem"; }
	static constexpr unsigned name_length = 43;
};

template <> struct traits<Windows::Networking::Connectivity::RoutePolicy>
{
	using abi = ABI::Windows::Networking::Connectivity::RoutePolicy;
	using default_interface = Windows::Networking::Connectivity::IRoutePolicy;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.RoutePolicy"; }
	static constexpr unsigned name_length = 43;
};

template <> struct traits<Windows::Networking::Connectivity::CellularApnContext>
{
	using abi = ABI::Windows::Networking::Connectivity::CellularApnContext;
	using default_interface = Windows::Networking::Connectivity::ICellularApnContext;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.CellularApnContext"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::Networking::Connectivity::ConnectionSession>
{
	using abi = ABI::Windows::Networking::Connectivity::ConnectionSession;
	using default_interface = Windows::Networking::Connectivity::IConnectionSession;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.ConnectionSession"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::Networking::Connectivity::NetworkInformation>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.NetworkInformation"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::Networking::Connectivity::ConnectivityManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.ConnectivityManager"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::Networking::Connectivity::NetworkStateChangeEventDetails>
{
	using abi = ABI::Windows::Networking::Connectivity::NetworkStateChangeEventDetails;
	using default_interface = Windows::Networking::Connectivity::INetworkStateChangeEventDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Connectivity.NetworkStateChangeEventDetails"; }
	static constexpr unsigned name_length = 62;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::Certificate>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::Certificate;
	using default_interface = Windows::Security::Cryptography::Certificates::ICertificate;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.Certificate"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::CertificateRequestProperties>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::CertificateRequestProperties;
	using default_interface = Windows::Security::Cryptography::Certificates::ICertificateRequestProperties;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateRequestProperties"; }
	static constexpr unsigned name_length = 71;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager;
	using default_interface = Windows::Security::Cryptography::Certificates::IUserCertificateEnrollmentManager;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.UserCertificateEnrollmentManager"; }
	static constexpr unsigned name_length = 75;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::PfxImportParameters>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::PfxImportParameters;
	using default_interface = Windows::Security::Cryptography::Certificates::IPfxImportParameters;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.PfxImportParameters"; }
	static constexpr unsigned name_length = 62;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::CertificateEnrollmentManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateEnrollmentManager"; }
	static constexpr unsigned name_length = 71;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::KeyAttestationHelper>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.KeyAttestationHelper"; }
	static constexpr unsigned name_length = 63;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::CertificateQuery>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::CertificateQuery;
	using default_interface = Windows::Security::Cryptography::Certificates::ICertificateQuery;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateQuery"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::CertificateStore>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::CertificateStore;
	using default_interface = Windows::Security::Cryptography::Certificates::ICertificateStore;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateStore"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::CertificateStores>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateStores"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::KeyAlgorithmNames>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.KeyAlgorithmNames"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::KeyStorageProviderNames>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.KeyStorageProviderNames"; }
	static constexpr unsigned name_length = 66;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ChainBuildingParameters>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ChainBuildingParameters;
	using default_interface = Windows::Security::Cryptography::Certificates::IChainBuildingParameters;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.ChainBuildingParameters"; }
	static constexpr unsigned name_length = 66;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::ChainValidationParameters>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::ChainValidationParameters;
	using default_interface = Windows::Security::Cryptography::Certificates::IChainValidationParameters;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.ChainValidationParameters"; }
	static constexpr unsigned name_length = 68;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::CertificateChain>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::CertificateChain;
	using default_interface = Windows::Security::Cryptography::Certificates::ICertificateChain;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateChain"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::CertificateKeyUsages>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::CertificateKeyUsages;
	using default_interface = Windows::Security::Cryptography::Certificates::ICertificateKeyUsages;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.CertificateKeyUsages"; }
	static constexpr unsigned name_length = 63;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::SubjectAlternativeNameInfo>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::SubjectAlternativeNameInfo;
	using default_interface = Windows::Security::Cryptography::Certificates::ISubjectAlternativeNameInfo;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.SubjectAlternativeNameInfo"; }
	static constexpr unsigned name_length = 69;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::CmsTimestampInfo>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::CmsTimestampInfo;
	using default_interface = Windows::Security::Cryptography::Certificates::ICmsTimestampInfo;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.CmsTimestampInfo"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::CmsSignerInfo>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::CmsSignerInfo;
	using default_interface = Windows::Security::Cryptography::Certificates::ICmsSignerInfo;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.CmsSignerInfo"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::CmsAttachedSignature>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::CmsAttachedSignature;
	using default_interface = Windows::Security::Cryptography::Certificates::ICmsAttachedSignature;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.CmsAttachedSignature"; }
	static constexpr unsigned name_length = 63;
};

template <> struct traits<Windows::Security::Cryptography::Certificates::CmsDetachedSignature>
{
	using abi = ABI::Windows::Security::Cryptography::Certificates::CmsDetachedSignature;
	using default_interface = Windows::Security::Cryptography::Certificates::ICmsDetachedSignature;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Certificates.CmsDetachedSignature"; }
	static constexpr unsigned name_length = 63;
};

template <> struct traits<Windows::Security::Cryptography::Core::KeyDerivationParameters>
{
	using abi = ABI::Windows::Security::Cryptography::Core::KeyDerivationParameters;
	using default_interface = Windows::Security::Cryptography::Core::IKeyDerivationParameters;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.KeyDerivationParameters"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::Security::Cryptography::Core::CryptographicKey>
{
	using abi = ABI::Windows::Security::Cryptography::Core::CryptographicKey;
	using default_interface = Windows::Security::Cryptography::Core::ICryptographicKey;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.CryptographicKey"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::Security::Cryptography::Core::CryptographicHash>
{
	using abi = ABI::Windows::Security::Cryptography::Core::CryptographicHash;
	using default_interface = Windows::Security::Cryptography::Core::IHashComputation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.CryptographicHash"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Security::Cryptography::Core::PersistedKeyProvider>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.PersistedKeyProvider"; }
	static constexpr unsigned name_length = 55;
};

template <> struct traits<Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData>
{
	using abi = ABI::Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData;
	using default_interface = Windows::Security::Cryptography::Core::IEncryptedAndAuthenticatedData;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.EncryptedAndAuthenticatedData"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::Security::Cryptography::Core::CryptographicEngine>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.CryptographicEngine"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::Security::Cryptography::Core::HashAlgorithmProvider>
{
	using abi = ABI::Windows::Security::Cryptography::Core::HashAlgorithmProvider;
	using default_interface = Windows::Security::Cryptography::Core::IHashAlgorithmProvider;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.HashAlgorithmProvider"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::Security::Cryptography::Core::MacAlgorithmProvider>
{
	using abi = ABI::Windows::Security::Cryptography::Core::MacAlgorithmProvider;
	using default_interface = Windows::Security::Cryptography::Core::IMacAlgorithmProvider;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.MacAlgorithmProvider"; }
	static constexpr unsigned name_length = 55;
};

template <> struct traits<Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider>
{
	using abi = ABI::Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider;
	using default_interface = Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProvider;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.KeyDerivationAlgorithmProvider"; }
	static constexpr unsigned name_length = 65;
};

template <> struct traits<Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider>
{
	using abi = ABI::Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider;
	using default_interface = Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProvider;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.SymmetricKeyAlgorithmProvider"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider>
{
	using abi = ABI::Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider;
	using default_interface = Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.AsymmetricKeyAlgorithmProvider"; }
	static constexpr unsigned name_length = 65;
};

template <> struct traits<Windows::Security::Cryptography::Core::HashAlgorithmNames>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.HashAlgorithmNames"; }
	static constexpr unsigned name_length = 53;
};

template <> struct traits<Windows::Security::Cryptography::Core::MacAlgorithmNames>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.MacAlgorithmNames"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Security::Cryptography::Core::SymmetricAlgorithmNames>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.SymmetricAlgorithmNames"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::Security::Cryptography::Core::AsymmetricAlgorithmNames>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.AsymmetricAlgorithmNames"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::Security::Cryptography::Core::EccCurveNames>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.EccCurveNames"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::Security::Cryptography::Core::KeyDerivationAlgorithmNames>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Cryptography.Core.KeyDerivationAlgorithmNames"; }
	static constexpr unsigned name_length = 62;
};

template <> struct traits<Windows::System::User>
{
	using abi = ABI::Windows::System::User;
	using default_interface = Windows::System::IUser;
	static constexpr wchar_t const * name() noexcept { return L"Windows.System.User"; }
	static constexpr unsigned name_length = 19;
};

template <> struct traits<Windows::Security::Credentials::WebAccountProvider>
{
	using abi = ABI::Windows::Security::Credentials::WebAccountProvider;
	using default_interface = Windows::Security::Credentials::IWebAccountProvider;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Credentials.WebAccountProvider"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::Security::Credentials::WebAccount>
{
	using abi = ABI::Windows::Security::Credentials::WebAccount;
	using default_interface = Windows::Security::Credentials::IWebAccount;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Credentials.WebAccount"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::Security::Credentials::KeyCredentialRetrievalResult>
{
	using abi = ABI::Windows::Security::Credentials::KeyCredentialRetrievalResult;
	using default_interface = Windows::Security::Credentials::IKeyCredentialRetrievalResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Credentials.KeyCredentialRetrievalResult"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::Security::Credentials::KeyCredentialOperationResult>
{
	using abi = ABI::Windows::Security::Credentials::KeyCredentialOperationResult;
	using default_interface = Windows::Security::Credentials::IKeyCredentialOperationResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Credentials.KeyCredentialOperationResult"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::Security::Credentials::KeyCredentialAttestationResult>
{
	using abi = ABI::Windows::Security::Credentials::KeyCredentialAttestationResult;
	using default_interface = Windows::Security::Credentials::IKeyCredentialAttestationResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Credentials.KeyCredentialAttestationResult"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::Security::Credentials::KeyCredential>
{
	using abi = ABI::Windows::Security::Credentials::KeyCredential;
	using default_interface = Windows::Security::Credentials::IKeyCredential;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Credentials.KeyCredential"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Security::Credentials::KeyCredentialManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Credentials.KeyCredentialManager"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::Security::Credentials::PasswordCredential>
{
	using abi = ABI::Windows::Security::Credentials::PasswordCredential;
	using default_interface = Windows::Security::Credentials::IPasswordCredential;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Credentials.PasswordCredential"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::Security::Credentials::PasswordVault>
{
	using abi = ABI::Windows::Security::Credentials::PasswordVault;
	using default_interface = Windows::Security::Credentials::IPasswordVault;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Credentials.PasswordVault"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Security::Credentials::PasswordCredentialPropertyStore>
{
	using abi = ABI::Windows::Security::Credentials::PasswordCredentialPropertyStore;
	using default_interface = Windows::Foundation::Collections::IPropertySet;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Credentials.PasswordCredentialPropertyStore"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::Web::WebError>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.WebError"; }
	static constexpr unsigned name_length = 20;
};

template <> struct traits<Windows::Networking::Sockets::ControlChannelTrigger>
{
	using abi = ABI::Windows::Networking::Sockets::ControlChannelTrigger;
	using default_interface = Windows::Networking::Sockets::IControlChannelTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.ControlChannelTrigger"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::Networking::Sockets::SocketActivityContext>
{
	using abi = ABI::Windows::Networking::Sockets::SocketActivityContext;
	using default_interface = Windows::Networking::Sockets::ISocketActivityContext;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.SocketActivityContext"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::Networking::Sockets::DatagramSocket>
{
	using abi = ABI::Windows::Networking::Sockets::DatagramSocket;
	using default_interface = Windows::Networking::Sockets::IDatagramSocket;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.DatagramSocket"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::Networking::Sockets::StreamSocket>
{
	using abi = ABI::Windows::Networking::Sockets::StreamSocket;
	using default_interface = Windows::Networking::Sockets::IStreamSocket;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.StreamSocket"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::Networking::Sockets::StreamSocketListener>
{
	using abi = ABI::Windows::Networking::Sockets::StreamSocketListener;
	using default_interface = Windows::Networking::Sockets::IStreamSocketListener;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.StreamSocketListener"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::Networking::Sockets::SocketActivityInformation>
{
	using abi = ABI::Windows::Networking::Sockets::SocketActivityInformation;
	using default_interface = Windows::Networking::Sockets::ISocketActivityInformation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.SocketActivityInformation"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Networking::Sockets::DatagramSocketControl>
{
	using abi = ABI::Windows::Networking::Sockets::DatagramSocketControl;
	using default_interface = Windows::Networking::Sockets::IDatagramSocketControl;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.DatagramSocketControl"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::Networking::Sockets::DatagramSocketInformation>
{
	using abi = ABI::Windows::Networking::Sockets::DatagramSocketInformation;
	using default_interface = Windows::Networking::Sockets::IDatagramSocketInformation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.DatagramSocketInformation"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Networking::Sockets::DatagramSocketMessageReceivedEventArgs>
{
	using abi = ABI::Windows::Networking::Sockets::DatagramSocketMessageReceivedEventArgs;
	using default_interface = Windows::Networking::Sockets::IDatagramSocketMessageReceivedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.DatagramSocketMessageReceivedEventArgs"; }
	static constexpr unsigned name_length = 65;
};

template <> struct traits<Windows::Networking::Sockets::StreamSocketControl>
{
	using abi = ABI::Windows::Networking::Sockets::StreamSocketControl;
	using default_interface = Windows::Networking::Sockets::IStreamSocketControl;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.StreamSocketControl"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Networking::Sockets::StreamSocketInformation>
{
	using abi = ABI::Windows::Networking::Sockets::StreamSocketInformation;
	using default_interface = Windows::Networking::Sockets::IStreamSocketInformation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.StreamSocketInformation"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::Networking::Sockets::StreamSocketListenerControl>
{
	using abi = ABI::Windows::Networking::Sockets::StreamSocketListenerControl;
	using default_interface = Windows::Networking::Sockets::IStreamSocketListenerControl;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.StreamSocketListenerControl"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::Networking::Sockets::StreamSocketListenerInformation>
{
	using abi = ABI::Windows::Networking::Sockets::StreamSocketListenerInformation;
	using default_interface = Windows::Networking::Sockets::IStreamSocketListenerInformation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.StreamSocketListenerInformation"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::Networking::Sockets::StreamSocketListenerConnectionReceivedEventArgs>
{
	using abi = ABI::Windows::Networking::Sockets::StreamSocketListenerConnectionReceivedEventArgs;
	using default_interface = Windows::Networking::Sockets::IStreamSocketListenerConnectionReceivedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.StreamSocketListenerConnectionReceivedEventArgs"; }
	static constexpr unsigned name_length = 74;
};

template <> struct traits<Windows::Networking::Sockets::WebSocketClosedEventArgs>
{
	using abi = ABI::Windows::Networking::Sockets::WebSocketClosedEventArgs;
	using default_interface = Windows::Networking::Sockets::IWebSocketClosedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.WebSocketClosedEventArgs"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::Networking::Sockets::MessageWebSocketControl>
{
	using abi = ABI::Windows::Networking::Sockets::MessageWebSocketControl;
	using default_interface = Windows::Networking::Sockets::IMessageWebSocketControl;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.MessageWebSocketControl"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::Networking::Sockets::MessageWebSocketInformation>
{
	using abi = ABI::Windows::Networking::Sockets::MessageWebSocketInformation;
	using default_interface = Windows::Networking::Sockets::IWebSocketInformation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.MessageWebSocketInformation"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::Networking::Sockets::MessageWebSocket>
{
	using abi = ABI::Windows::Networking::Sockets::MessageWebSocket;
	using default_interface = Windows::Networking::Sockets::IMessageWebSocket;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.MessageWebSocket"; }
	static constexpr unsigned name_length = 43;
};

template <> struct traits<Windows::Networking::Sockets::MessageWebSocketMessageReceivedEventArgs>
{
	using abi = ABI::Windows::Networking::Sockets::MessageWebSocketMessageReceivedEventArgs;
	using default_interface = Windows::Networking::Sockets::IMessageWebSocketMessageReceivedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.MessageWebSocketMessageReceivedEventArgs"; }
	static constexpr unsigned name_length = 67;
};

template <> struct traits<Windows::Networking::Sockets::StreamWebSocketControl>
{
	using abi = ABI::Windows::Networking::Sockets::StreamWebSocketControl;
	using default_interface = Windows::Networking::Sockets::IStreamWebSocketControl;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.StreamWebSocketControl"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::Networking::Sockets::StreamWebSocketInformation>
{
	using abi = ABI::Windows::Networking::Sockets::StreamWebSocketInformation;
	using default_interface = Windows::Networking::Sockets::IWebSocketInformation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.StreamWebSocketInformation"; }
	static constexpr unsigned name_length = 53;
};

template <> struct traits<Windows::Networking::Sockets::StreamWebSocket>
{
	using abi = ABI::Windows::Networking::Sockets::StreamWebSocket;
	using default_interface = Windows::Networking::Sockets::IStreamWebSocket;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.StreamWebSocket"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Networking::Sockets::WebSocketKeepAlive>
{
	using abi = ABI::Windows::Networking::Sockets::WebSocketKeepAlive;
	using default_interface = Windows::ApplicationModel::Background::IBackgroundTask;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.WebSocketKeepAlive"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::Networking::Sockets::SocketError>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.SocketError"; }
	static constexpr unsigned name_length = 38;
};

template <> struct traits<Windows::Networking::Sockets::WebSocketError>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.WebSocketError"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::Networking::Sockets::SocketActivityTriggerDetails>
{
	using abi = ABI::Windows::Networking::Sockets::SocketActivityTriggerDetails;
	using default_interface = Windows::Networking::Sockets::ISocketActivityTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Networking.Sockets.SocketActivityTriggerDetails"; }
	static constexpr unsigned name_length = 55;
};

template <> struct traits<Windows::Devices::Bluetooth::BluetoothDevice>
{
	using abi = ABI::Windows::Devices::Bluetooth::BluetoothDevice;
	using default_interface = Windows::Devices::Bluetooth::IBluetoothDevice;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.BluetoothDevice"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService>
{
	using abi = ABI::Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService;
	using default_interface = Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Rfcomm.RfcommDeviceService"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId>
{
	using abi = ABI::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId;
	using default_interface = Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceId;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Rfcomm.RfcommServiceId"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider>
{
	using abi = ABI::Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider;
	using default_interface = Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Rfcomm.RfcommServiceProvider"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::Devices::Enumeration::DeviceInformation>
{
	using abi = ABI::Windows::Devices::Enumeration::DeviceInformation;
	using default_interface = Windows::Devices::Enumeration::IDeviceInformation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DeviceInformation"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::Devices::Bluetooth::BluetoothClassOfDevice>
{
	using abi = ABI::Windows::Devices::Bluetooth::BluetoothClassOfDevice;
	using default_interface = Windows::Devices::Bluetooth::IBluetoothClassOfDevice;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.BluetoothClassOfDevice"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::Devices::Bluetooth::BluetoothLEAppearanceCategories>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.BluetoothLEAppearanceCategories"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::Devices::Bluetooth::BluetoothLEAppearanceSubcategories>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.BluetoothLEAppearanceSubcategories"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::Devices::Bluetooth::BluetoothLEAppearance>
{
	using abi = ABI::Windows::Devices::Bluetooth::BluetoothLEAppearance;
	using default_interface = Windows::Devices::Bluetooth::IBluetoothLEAppearance;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.BluetoothLEAppearance"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter>
{
	using abi = ABI::Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter;
	using default_interface = Windows::Devices::Bluetooth::IBluetoothSignalStrengthFilter;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.BluetoothSignalStrengthFilter"; }
	static constexpr unsigned name_length = 55;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData;
	using default_interface = Windows::Devices::Bluetooth::Advertisement::IBluetoothLEManufacturerData;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Advertisement.BluetoothLEManufacturerData"; }
	static constexpr unsigned name_length = 67;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection;
	using default_interface = Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementDataSection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataSection"; }
	static constexpr unsigned name_length = 75;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement;
	using default_interface = Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisement;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisement"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementBytePattern>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementBytePattern;
	using default_interface = Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementBytePattern;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementBytePattern"; }
	static constexpr unsigned name_length = 75;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter;
	using default_interface = Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementFilter;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementFilter"; }
	static constexpr unsigned name_length = 70;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcherStoppedEventArgs>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcherStoppedEventArgs;
	using default_interface = Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcherStoppedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcherStoppedEventArgs"; }
	static constexpr unsigned name_length = 87;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher;
	using default_interface = Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcher;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementWatcher"; }
	static constexpr unsigned name_length = 71;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementReceivedEventArgs>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementReceivedEventArgs;
	using default_interface = Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementReceivedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementReceivedEventArgs"; }
	static constexpr unsigned name_length = 81;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataTypes>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementDataTypes"; }
	static constexpr unsigned name_length = 73;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatusChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatusChangedEventArgs;
	using default_interface = Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisherStatusChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisherStatusChangedEventArgs"; }
	static constexpr unsigned name_length = 95;
};

template <> struct traits<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisher>
{
	using abi = ABI::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisher;
	using default_interface = Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisher;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Advertisement.BluetoothLEAdvertisementPublisher"; }
	static constexpr unsigned name_length = 73;
};

template <> struct traits<Windows::Devices::Bluetooth::Background::RfcommInboundConnectionInformation>
{
	using abi = ABI::Windows::Devices::Bluetooth::Background::RfcommInboundConnectionInformation;
	using default_interface = Windows::Devices::Bluetooth::Background::IRfcommInboundConnectionInformation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Background.RfcommInboundConnectionInformation"; }
	static constexpr unsigned name_length = 71;
};

template <> struct traits<Windows::Devices::Bluetooth::Background::RfcommOutboundConnectionInformation>
{
	using abi = ABI::Windows::Devices::Bluetooth::Background::RfcommOutboundConnectionInformation;
	using default_interface = Windows::Devices::Bluetooth::Background::IRfcommOutboundConnectionInformation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Background.RfcommOutboundConnectionInformation"; }
	static constexpr unsigned name_length = 72;
};

template <> struct traits<Windows::Devices::Bluetooth::Background::RfcommConnectionTriggerDetails>
{
	using abi = ABI::Windows::Devices::Bluetooth::Background::RfcommConnectionTriggerDetails;
	using default_interface = Windows::Devices::Bluetooth::Background::IRfcommConnectionTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Background.RfcommConnectionTriggerDetails"; }
	static constexpr unsigned name_length = 67;
};

template <> struct traits<Windows::Devices::Bluetooth::Background::GattCharacteristicNotificationTriggerDetails>
{
	using abi = ABI::Windows::Devices::Bluetooth::Background::GattCharacteristicNotificationTriggerDetails;
	using default_interface = Windows::Devices::Bluetooth::Background::IGattCharacteristicNotificationTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Background.GattCharacteristicNotificationTriggerDetails"; }
	static constexpr unsigned name_length = 81;
};

template <> struct traits<Windows::Devices::Bluetooth::Background::BluetoothLEAdvertisementWatcherTriggerDetails>
{
	using abi = ABI::Windows::Devices::Bluetooth::Background::BluetoothLEAdvertisementWatcherTriggerDetails;
	using default_interface = Windows::Devices::Bluetooth::Background::IBluetoothLEAdvertisementWatcherTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Background.BluetoothLEAdvertisementWatcherTriggerDetails"; }
	static constexpr unsigned name_length = 82;
};

template <> struct traits<Windows::Devices::Bluetooth::Background::BluetoothLEAdvertisementPublisherTriggerDetails>
{
	using abi = ABI::Windows::Devices::Bluetooth::Background::BluetoothLEAdvertisementPublisherTriggerDetails;
	using default_interface = Windows::Devices::Bluetooth::Background::IBluetoothLEAdvertisementPublisherTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Bluetooth.Background.BluetoothLEAdvertisementPublisherTriggerDetails"; }
	static constexpr unsigned name_length = 84;
};

template <> struct traits<Windows::Graphics::Display::DisplayInformation>
{
	using abi = ABI::Windows::Graphics::Display::DisplayInformation;
	using default_interface = Windows::Graphics::Display::IDisplayInformation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Graphics.Display.DisplayInformation"; }
	static constexpr unsigned name_length = 43;
};

template <> struct traits<Windows::Graphics::Display::DisplayProperties>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Graphics.Display.DisplayProperties"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Devices::Sensors::SensorDataThresholdTriggerDetails>
{
	using abi = ABI::Windows::Devices::Sensors::SensorDataThresholdTriggerDetails;
	using default_interface = Windows::Devices::Sensors::ISensorDataThresholdTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.SensorDataThresholdTriggerDetails"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::Devices::Sensors::Accelerometer>
{
	using abi = ABI::Windows::Devices::Sensors::Accelerometer;
	using default_interface = Windows::Devices::Sensors::IAccelerometer;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.Accelerometer"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::Devices::Sensors::AccelerometerReading>
{
	using abi = ABI::Windows::Devices::Sensors::AccelerometerReading;
	using default_interface = Windows::Devices::Sensors::IAccelerometerReading;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.AccelerometerReading"; }
	static constexpr unsigned name_length = 44;
};

template <> struct traits<Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs;
	using default_interface = Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.AccelerometerReadingChangedEventArgs"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::Devices::Sensors::AccelerometerShakenEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::AccelerometerShakenEventArgs;
	using default_interface = Windows::Devices::Sensors::IAccelerometerShakenEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.AccelerometerShakenEventArgs"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Devices::Sensors::Inclinometer>
{
	using abi = ABI::Windows::Devices::Sensors::Inclinometer;
	using default_interface = Windows::Devices::Sensors::IInclinometer;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.Inclinometer"; }
	static constexpr unsigned name_length = 36;
};

template <> struct traits<Windows::Devices::Sensors::InclinometerReading>
{
	using abi = ABI::Windows::Devices::Sensors::InclinometerReading;
	using default_interface = Windows::Devices::Sensors::IInclinometerReading;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.InclinometerReading"; }
	static constexpr unsigned name_length = 43;
};

template <> struct traits<Windows::Devices::Sensors::InclinometerReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::InclinometerReadingChangedEventArgs;
	using default_interface = Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.InclinometerReadingChangedEventArgs"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::Devices::Sensors::Gyrometer>
{
	using abi = ABI::Windows::Devices::Sensors::Gyrometer;
	using default_interface = Windows::Devices::Sensors::IGyrometer;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.Gyrometer"; }
	static constexpr unsigned name_length = 33;
};

template <> struct traits<Windows::Devices::Sensors::GyrometerReading>
{
	using abi = ABI::Windows::Devices::Sensors::GyrometerReading;
	using default_interface = Windows::Devices::Sensors::IGyrometerReading;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.GyrometerReading"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::Devices::Sensors::GyrometerReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::GyrometerReadingChangedEventArgs;
	using default_interface = Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.GyrometerReadingChangedEventArgs"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::Devices::Sensors::Compass>
{
	using abi = ABI::Windows::Devices::Sensors::Compass;
	using default_interface = Windows::Devices::Sensors::ICompass;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.Compass"; }
	static constexpr unsigned name_length = 31;
};

template <> struct traits<Windows::Devices::Sensors::CompassReading>
{
	using abi = ABI::Windows::Devices::Sensors::CompassReading;
	using default_interface = Windows::Devices::Sensors::ICompassReading;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.CompassReading"; }
	static constexpr unsigned name_length = 38;
};

template <> struct traits<Windows::Devices::Sensors::CompassReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::CompassReadingChangedEventArgs;
	using default_interface = Windows::Devices::Sensors::ICompassReadingChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.CompassReadingChangedEventArgs"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::Devices::Sensors::LightSensor>
{
	using abi = ABI::Windows::Devices::Sensors::LightSensor;
	using default_interface = Windows::Devices::Sensors::ILightSensor;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.LightSensor"; }
	static constexpr unsigned name_length = 35;
};

template <> struct traits<Windows::Devices::Sensors::LightSensorReading>
{
	using abi = ABI::Windows::Devices::Sensors::LightSensorReading;
	using default_interface = Windows::Devices::Sensors::ILightSensorReading;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.LightSensorReading"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Devices::Sensors::LightSensorReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::LightSensorReadingChangedEventArgs;
	using default_interface = Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.LightSensorReadingChangedEventArgs"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::Devices::Sensors::SensorRotationMatrix>
{
	using abi = ABI::Windows::Devices::Sensors::SensorRotationMatrix;
	using default_interface = Windows::Devices::Sensors::ISensorRotationMatrix;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.SensorRotationMatrix"; }
	static constexpr unsigned name_length = 44;
};

template <> struct traits<Windows::Devices::Sensors::SensorQuaternion>
{
	using abi = ABI::Windows::Devices::Sensors::SensorQuaternion;
	using default_interface = Windows::Devices::Sensors::ISensorQuaternion;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.SensorQuaternion"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::Devices::Sensors::OrientationSensor>
{
	using abi = ABI::Windows::Devices::Sensors::OrientationSensor;
	using default_interface = Windows::Devices::Sensors::IOrientationSensor;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.OrientationSensor"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::Devices::Sensors::OrientationSensorReading>
{
	using abi = ABI::Windows::Devices::Sensors::OrientationSensorReading;
	using default_interface = Windows::Devices::Sensors::IOrientationSensorReading;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.OrientationSensorReading"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs;
	using default_interface = Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.OrientationSensorReadingChangedEventArgs"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::Devices::Sensors::SimpleOrientationSensor>
{
	using abi = ABI::Windows::Devices::Sensors::SimpleOrientationSensor;
	using default_interface = Windows::Devices::Sensors::ISimpleOrientationSensor;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.SimpleOrientationSensor"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs;
	using default_interface = Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.SimpleOrientationSensorOrientationChangedEventArgs"; }
	static constexpr unsigned name_length = 74;
};

template <> struct traits<Windows::Devices::Sensors::Magnetometer>
{
	using abi = ABI::Windows::Devices::Sensors::Magnetometer;
	using default_interface = Windows::Devices::Sensors::IMagnetometer;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.Magnetometer"; }
	static constexpr unsigned name_length = 36;
};

template <> struct traits<Windows::Devices::Sensors::MagnetometerReading>
{
	using abi = ABI::Windows::Devices::Sensors::MagnetometerReading;
	using default_interface = Windows::Devices::Sensors::IMagnetometerReading;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.MagnetometerReading"; }
	static constexpr unsigned name_length = 43;
};

template <> struct traits<Windows::Devices::Sensors::MagnetometerReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::MagnetometerReadingChangedEventArgs;
	using default_interface = Windows::Devices::Sensors::IMagnetometerReadingChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.MagnetometerReadingChangedEventArgs"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::Devices::Sensors::ActivitySensor>
{
	using abi = ABI::Windows::Devices::Sensors::ActivitySensor;
	using default_interface = Windows::Devices::Sensors::IActivitySensor;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.ActivitySensor"; }
	static constexpr unsigned name_length = 38;
};

template <> struct traits<Windows::Devices::Sensors::ActivitySensorReading>
{
	using abi = ABI::Windows::Devices::Sensors::ActivitySensorReading;
	using default_interface = Windows::Devices::Sensors::IActivitySensorReading;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.ActivitySensorReading"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::Devices::Sensors::ActivitySensorReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::ActivitySensorReadingChangedEventArgs;
	using default_interface = Windows::Devices::Sensors::IActivitySensorReadingChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.ActivitySensorReadingChangedEventArgs"; }
	static constexpr unsigned name_length = 61;
};

template <> struct traits<Windows::Devices::Sensors::ActivitySensorReadingChangeReport>
{
	using abi = ABI::Windows::Devices::Sensors::ActivitySensorReadingChangeReport;
	using default_interface = Windows::Devices::Sensors::IActivitySensorReadingChangeReport;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.ActivitySensorReadingChangeReport"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::Devices::Sensors::ActivitySensorTriggerDetails>
{
	using abi = ABI::Windows::Devices::Sensors::ActivitySensorTriggerDetails;
	using default_interface = Windows::Devices::Sensors::IActivitySensorTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.ActivitySensorTriggerDetails"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Devices::Sensors::Barometer>
{
	using abi = ABI::Windows::Devices::Sensors::Barometer;
	using default_interface = Windows::Devices::Sensors::IBarometer;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.Barometer"; }
	static constexpr unsigned name_length = 33;
};

template <> struct traits<Windows::Devices::Sensors::BarometerReading>
{
	using abi = ABI::Windows::Devices::Sensors::BarometerReading;
	using default_interface = Windows::Devices::Sensors::IBarometerReading;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.BarometerReading"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::Devices::Sensors::BarometerReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::BarometerReadingChangedEventArgs;
	using default_interface = Windows::Devices::Sensors::IBarometerReadingChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.BarometerReadingChangedEventArgs"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::Devices::Sensors::PedometerReading>
{
	using abi = ABI::Windows::Devices::Sensors::PedometerReading;
	using default_interface = Windows::Devices::Sensors::IPedometerReading;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.PedometerReading"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::Devices::Sensors::Pedometer>
{
	using abi = ABI::Windows::Devices::Sensors::Pedometer;
	using default_interface = Windows::Devices::Sensors::IPedometer;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.Pedometer"; }
	static constexpr unsigned name_length = 33;
};

template <> struct traits<Windows::Devices::Sensors::PedometerReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::PedometerReadingChangedEventArgs;
	using default_interface = Windows::Devices::Sensors::IPedometerReadingChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.PedometerReadingChangedEventArgs"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::Devices::Sensors::PedometerDataThreshold>
{
	using abi = ABI::Windows::Devices::Sensors::PedometerDataThreshold;
	using default_interface = Windows::Devices::Sensors::ISensorDataThreshold;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.PedometerDataThreshold"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Devices::Sensors::ProximitySensor>
{
	using abi = ABI::Windows::Devices::Sensors::ProximitySensor;
	using default_interface = Windows::Devices::Sensors::IProximitySensor;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.ProximitySensor"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::Devices::Sensors::ProximitySensorReading>
{
	using abi = ABI::Windows::Devices::Sensors::ProximitySensorReading;
	using default_interface = Windows::Devices::Sensors::IProximitySensorReading;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.ProximitySensorReading"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Devices::Sensors::ProximitySensorReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::ProximitySensorReadingChangedEventArgs;
	using default_interface = Windows::Devices::Sensors::IProximitySensorReadingChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.ProximitySensorReadingChangedEventArgs"; }
	static constexpr unsigned name_length = 62;
};

template <> struct traits<Windows::Devices::Sensors::ProximitySensorDisplayOnOffController>
{
	using abi = ABI::Windows::Devices::Sensors::ProximitySensorDisplayOnOffController;
	using default_interface = Windows::Foundation::IClosable;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.ProximitySensorDisplayOnOffController"; }
	static constexpr unsigned name_length = 61;
};

template <> struct traits<Windows::Devices::Sensors::ProximitySensorDataThreshold>
{
	using abi = ABI::Windows::Devices::Sensors::ProximitySensorDataThreshold;
	using default_interface = Windows::Devices::Sensors::ISensorDataThreshold;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.ProximitySensorDataThreshold"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Devices::Sensors::Altimeter>
{
	using abi = ABI::Windows::Devices::Sensors::Altimeter;
	using default_interface = Windows::Devices::Sensors::IAltimeter;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.Altimeter"; }
	static constexpr unsigned name_length = 33;
};

template <> struct traits<Windows::Devices::Sensors::AltimeterReading>
{
	using abi = ABI::Windows::Devices::Sensors::AltimeterReading;
	using default_interface = Windows::Devices::Sensors::IAltimeterReading;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.AltimeterReading"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::Devices::Sensors::AltimeterReadingChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Sensors::AltimeterReadingChangedEventArgs;
	using default_interface = Windows::Devices::Sensors::IAltimeterReadingChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sensors.AltimeterReadingChangedEventArgs"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::Devices::Sms::SmsBinaryMessage>
{
	using abi = ABI::Windows::Devices::Sms::SmsBinaryMessage;
	using default_interface = Windows::Devices::Sms::ISmsBinaryMessage;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsBinaryMessage"; }
	static constexpr unsigned name_length = 36;
};

template <> struct traits<Windows::Devices::Sms::SmsTextMessage>
{
	using abi = ABI::Windows::Devices::Sms::SmsTextMessage;
	using default_interface = Windows::Devices::Sms::ISmsTextMessage;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsTextMessage"; }
	static constexpr unsigned name_length = 34;
};

template <> struct traits<Windows::Devices::Sms::SmsTextMessage2>
{
	using abi = ABI::Windows::Devices::Sms::SmsTextMessage2;
	using default_interface = Windows::Devices::Sms::ISmsTextMessage2;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsTextMessage2"; }
	static constexpr unsigned name_length = 35;
};

template <> struct traits<Windows::Devices::Sms::SmsWapMessage>
{
	using abi = ABI::Windows::Devices::Sms::SmsWapMessage;
	using default_interface = Windows::Devices::Sms::ISmsWapMessage;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsWapMessage"; }
	static constexpr unsigned name_length = 33;
};

template <> struct traits<Windows::Devices::Sms::SmsAppMessage>
{
	using abi = ABI::Windows::Devices::Sms::SmsAppMessage;
	using default_interface = Windows::Devices::Sms::ISmsAppMessage;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsAppMessage"; }
	static constexpr unsigned name_length = 33;
};

template <> struct traits<Windows::Devices::Sms::SmsBroadcastMessage>
{
	using abi = ABI::Windows::Devices::Sms::SmsBroadcastMessage;
	using default_interface = Windows::Devices::Sms::ISmsBroadcastMessage;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsBroadcastMessage"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::Devices::Sms::SmsVoicemailMessage>
{
	using abi = ABI::Windows::Devices::Sms::SmsVoicemailMessage;
	using default_interface = Windows::Devices::Sms::ISmsVoicemailMessage;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsVoicemailMessage"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::Devices::Sms::SmsStatusMessage>
{
	using abi = ABI::Windows::Devices::Sms::SmsStatusMessage;
	using default_interface = Windows::Devices::Sms::ISmsStatusMessage;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsStatusMessage"; }
	static constexpr unsigned name_length = 36;
};

template <> struct traits<Windows::Devices::Sms::DeleteSmsMessageOperation>
{
	using abi = ABI::Windows::Devices::Sms::DeleteSmsMessageOperation;
	using default_interface = Windows::Foundation::IAsyncAction;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.DeleteSmsMessageOperation"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::Devices::Sms::DeleteSmsMessagesOperation>
{
	using abi = ABI::Windows::Devices::Sms::DeleteSmsMessagesOperation;
	using default_interface = Windows::Foundation::IAsyncAction;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.DeleteSmsMessagesOperation"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Devices::Sms::GetSmsMessageOperation>
{
	using abi = ABI::Windows::Devices::Sms::GetSmsMessageOperation;
	using default_interface = Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::ISmsMessage>;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.GetSmsMessageOperation"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Devices::Sms::GetSmsMessagesOperation>
{
	using abi = ABI::Windows::Devices::Sms::GetSmsMessagesOperation;
	using default_interface = Windows::Foundation::IAsyncOperationWithProgress<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsMessage>, int>;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.GetSmsMessagesOperation"; }
	static constexpr unsigned name_length = 43;
};

template <> struct traits<Windows::Devices::Sms::SmsDeviceMessageStore>
{
	using abi = ABI::Windows::Devices::Sms::SmsDeviceMessageStore;
	using default_interface = Windows::Devices::Sms::ISmsDeviceMessageStore;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsDeviceMessageStore"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::Devices::Sms::SmsSendMessageResult>
{
	using abi = ABI::Windows::Devices::Sms::SmsSendMessageResult;
	using default_interface = Windows::Devices::Sms::ISmsSendMessageResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsSendMessageResult"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::Devices::Sms::SendSmsMessageOperation>
{
	using abi = ABI::Windows::Devices::Sms::SendSmsMessageOperation;
	using default_interface = Windows::Foundation::IAsyncAction;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SendSmsMessageOperation"; }
	static constexpr unsigned name_length = 43;
};

template <> struct traits<Windows::Devices::Sms::SmsMessageReceivedEventArgs>
{
	using abi = ABI::Windows::Devices::Sms::SmsMessageReceivedEventArgs;
	using default_interface = Windows::Devices::Sms::ISmsMessageReceivedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsMessageReceivedEventArgs"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::Devices::Sms::SmsDevice>
{
	using abi = ABI::Windows::Devices::Sms::SmsDevice;
	using default_interface = Windows::Devices::Sms::ISmsDevice;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsDevice"; }
	static constexpr unsigned name_length = 29;
};

template <> struct traits<Windows::Devices::Sms::GetSmsDeviceOperation>
{
	using abi = ABI::Windows::Devices::Sms::GetSmsDeviceOperation;
	using default_interface = Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice>;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.GetSmsDeviceOperation"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::Devices::Sms::SmsDevice2>
{
	using abi = ABI::Windows::Devices::Sms::SmsDevice2;
	using default_interface = Windows::Devices::Sms::ISmsDevice2;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsDevice2"; }
	static constexpr unsigned name_length = 30;
};

template <> struct traits<Windows::Devices::Sms::SmsReceivedEventDetails>
{
	using abi = ABI::Windows::Devices::Sms::SmsReceivedEventDetails;
	using default_interface = Windows::Devices::Sms::ISmsReceivedEventDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsReceivedEventDetails"; }
	static constexpr unsigned name_length = 43;
};

template <> struct traits<Windows::Devices::Sms::SmsMessageReceivedTriggerDetails>
{
	using abi = ABI::Windows::Devices::Sms::SmsMessageReceivedTriggerDetails;
	using default_interface = Windows::Devices::Sms::ISmsMessageReceivedTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsMessageReceivedTriggerDetails"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Devices::Sms::SmsFilterRule>
{
	using abi = ABI::Windows::Devices::Sms::SmsFilterRule;
	using default_interface = Windows::Devices::Sms::ISmsFilterRule;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsFilterRule"; }
	static constexpr unsigned name_length = 33;
};

template <> struct traits<Windows::Devices::Sms::SmsFilterRules>
{
	using abi = ABI::Windows::Devices::Sms::SmsFilterRules;
	using default_interface = Windows::Devices::Sms::ISmsFilterRules;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsFilterRules"; }
	static constexpr unsigned name_length = 34;
};

template <> struct traits<Windows::Devices::Sms::SmsMessageRegistration>
{
	using abi = ABI::Windows::Devices::Sms::SmsMessageRegistration;
	using default_interface = Windows::Devices::Sms::ISmsMessageRegistration;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Sms.SmsMessageRegistration"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Storage::StorageLibrary>
{
	using abi = ABI::Windows::Storage::StorageLibrary;
	using default_interface = Windows::Storage::IStorageLibrary;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.StorageLibrary"; }
	static constexpr unsigned name_length = 30;
};

template <> struct traits<Windows::ApplicationModel::Background::AlarmApplicationManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.AlarmApplicationManager"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::ApplicationModel::Background::AppointmentStoreNotificationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::AppointmentStoreNotificationTrigger;
	using default_interface = Windows::ApplicationModel::Background::IAppointmentStoreNotificationTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.AppointmentStoreNotificationTrigger"; }
	static constexpr unsigned name_length = 71;
};

template <> struct traits<Windows::ApplicationModel::Background::ApplicationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::ApplicationTrigger;
	using default_interface = Windows::ApplicationModel::Background::IApplicationTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.ApplicationTrigger"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::ApplicationModel::Background::ApplicationTriggerDetails>
{
	using abi = ABI::Windows::ApplicationModel::Background::ApplicationTriggerDetails;
	using default_interface = Windows::ApplicationModel::Background::IApplicationTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.ApplicationTriggerDetails"; }
	static constexpr unsigned name_length = 61;
};

template <> struct traits<Windows::ApplicationModel::Background::BackgroundExecutionManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundExecutionManager"; }
	static constexpr unsigned name_length = 62;
};

template <> struct traits<Windows::ApplicationModel::Background::MediaProcessingTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::MediaProcessingTrigger;
	using default_interface = Windows::ApplicationModel::Background::IMediaProcessingTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.MediaProcessingTrigger"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::ApplicationModel::Background::BackgroundTaskRegistration>
{
	using abi = ABI::Windows::ApplicationModel::Background::BackgroundTaskRegistration;
	using default_interface = Windows::ApplicationModel::Background::IBackgroundTaskRegistration;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundTaskRegistration"; }
	static constexpr unsigned name_length = 62;
};

template <> struct traits<Windows::ApplicationModel::Background::BackgroundTaskDeferral>
{
	using abi = ABI::Windows::ApplicationModel::Background::BackgroundTaskDeferral;
	using default_interface = Windows::ApplicationModel::Background::IBackgroundTaskDeferral;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundTaskDeferral"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs;
	using default_interface = Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundTaskProgressEventArgs"; }
	static constexpr unsigned name_length = 67;
};

template <> struct traits<Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs;
	using default_interface = Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundTaskCompletedEventArgs"; }
	static constexpr unsigned name_length = 68;
};

template <> struct traits<Windows::ApplicationModel::Background::BackgroundTaskBuilder>
{
	using abi = ABI::Windows::ApplicationModel::Background::BackgroundTaskBuilder;
	using default_interface = Windows::ApplicationModel::Background::IBackgroundTaskBuilder;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundTaskBuilder"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::ApplicationModel::Background::BackgroundWorkCost>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.BackgroundWorkCost"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::ApplicationModel::Background::ChatMessageNotificationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::ChatMessageNotificationTrigger;
	using default_interface = Windows::ApplicationModel::Background::IChatMessageNotificationTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.ChatMessageNotificationTrigger"; }
	static constexpr unsigned name_length = 66;
};

template <> struct traits<Windows::ApplicationModel::Background::ChatMessageReceivedNotificationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::ChatMessageReceivedNotificationTrigger;
	using default_interface = Windows::ApplicationModel::Background::IChatMessageReceivedNotificationTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.ChatMessageReceivedNotificationTrigger"; }
	static constexpr unsigned name_length = 74;
};

template <> struct traits<Windows::ApplicationModel::Background::RcsEndUserMessageAvailableTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::RcsEndUserMessageAvailableTrigger;
	using default_interface = Windows::ApplicationModel::Background::IRcsEndUserMessageAvailableTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.RcsEndUserMessageAvailableTrigger"; }
	static constexpr unsigned name_length = 69;
};

template <> struct traits<Windows::ApplicationModel::Background::ContactStoreNotificationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::ContactStoreNotificationTrigger;
	using default_interface = Windows::ApplicationModel::Background::IContactStoreNotificationTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.ContactStoreNotificationTrigger"; }
	static constexpr unsigned name_length = 67;
};

template <> struct traits<Windows::ApplicationModel::Background::ContentPrefetchTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::ContentPrefetchTrigger;
	using default_interface = Windows::ApplicationModel::Background::IContentPrefetchTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.ContentPrefetchTrigger"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::ApplicationModel::Background::EmailStoreNotificationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::EmailStoreNotificationTrigger;
	using default_interface = Windows::ApplicationModel::Background::IEmailStoreNotificationTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.EmailStoreNotificationTrigger"; }
	static constexpr unsigned name_length = 65;
};

template <> struct traits<Windows::ApplicationModel::Background::MobileBroadbandRegistrationStateChangeTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::MobileBroadbandRegistrationStateChangeTrigger;
	using default_interface = Windows::ApplicationModel::Background::IBackgroundTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.MobileBroadbandRegistrationStateChangeTrigger"; }
	static constexpr unsigned name_length = 81;
};

template <> struct traits<Windows::ApplicationModel::Background::MobileBroadbandRadioStateChangeTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::MobileBroadbandRadioStateChangeTrigger;
	using default_interface = Windows::ApplicationModel::Background::IBackgroundTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.MobileBroadbandRadioStateChangeTrigger"; }
	static constexpr unsigned name_length = 74;
};

template <> struct traits<Windows::ApplicationModel::Background::MobileBroadbandPinLockStateChangeTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::MobileBroadbandPinLockStateChangeTrigger;
	using default_interface = Windows::ApplicationModel::Background::IBackgroundTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.MobileBroadbandPinLockStateChangeTrigger"; }
	static constexpr unsigned name_length = 76;
};

template <> struct traits<Windows::ApplicationModel::Background::MobileBroadbandDeviceServiceNotificationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::MobileBroadbandDeviceServiceNotificationTrigger;
	using default_interface = Windows::ApplicationModel::Background::IBackgroundTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.MobileBroadbandDeviceServiceNotificationTrigger"; }
	static constexpr unsigned name_length = 83;
};

template <> struct traits<Windows::ApplicationModel::Background::SmsMessageReceivedTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::SmsMessageReceivedTrigger;
	using default_interface = Windows::ApplicationModel::Background::IBackgroundTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.SmsMessageReceivedTrigger"; }
	static constexpr unsigned name_length = 61;
};

template <> struct traits<Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger;
	using default_interface = Windows::ApplicationModel::Background::IStorageLibraryContentChangedTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.StorageLibraryContentChangedTrigger"; }
	static constexpr unsigned name_length = 71;
};

template <> struct traits<Windows::ApplicationModel::Background::SystemTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::SystemTrigger;
	using default_interface = Windows::ApplicationModel::Background::ISystemTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.SystemTrigger"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::ApplicationModel::Background::SystemCondition>
{
	using abi = ABI::Windows::ApplicationModel::Background::SystemCondition;
	using default_interface = Windows::ApplicationModel::Background::ISystemCondition;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.SystemCondition"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger;
	using default_interface = Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.NetworkOperatorNotificationTrigger"; }
	static constexpr unsigned name_length = 70;
};

template <> struct traits<Windows::ApplicationModel::Background::CachedFileUpdaterTriggerDetails>
{
	using abi = ABI::Windows::ApplicationModel::Background::CachedFileUpdaterTriggerDetails;
	using default_interface = Windows::ApplicationModel::Background::ICachedFileUpdaterTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.CachedFileUpdaterTriggerDetails"; }
	static constexpr unsigned name_length = 67;
};

template <> struct traits<Windows::ApplicationModel::Background::CachedFileUpdaterTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::CachedFileUpdaterTrigger;
	using default_interface = Windows::ApplicationModel::Background::ICachedFileUpdaterTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.CachedFileUpdaterTrigger"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::ApplicationModel::Background::TimeTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::TimeTrigger;
	using default_interface = Windows::ApplicationModel::Background::ITimeTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.TimeTrigger"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::ApplicationModel::Background::MaintenanceTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::MaintenanceTrigger;
	using default_interface = Windows::ApplicationModel::Background::IMaintenanceTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.MaintenanceTrigger"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::ApplicationModel::Background::PhoneTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::PhoneTrigger;
	using default_interface = Windows::ApplicationModel::Background::IPhoneTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.PhoneTrigger"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::ApplicationModel::Background::DeviceUseTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::DeviceUseTrigger;
	using default_interface = Windows::ApplicationModel::Background::IDeviceUseTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.DeviceUseTrigger"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::ApplicationModel::Background::DeviceServicingTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::DeviceServicingTrigger;
	using default_interface = Windows::ApplicationModel::Background::IDeviceServicingTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.DeviceServicingTrigger"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::ApplicationModel::Background::RfcommConnectionTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::RfcommConnectionTrigger;
	using default_interface = Windows::ApplicationModel::Background::IRfcommConnectionTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.RfcommConnectionTrigger"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::ApplicationModel::Background::DeviceConnectionChangeTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::DeviceConnectionChangeTrigger;
	using default_interface = Windows::ApplicationModel::Background::IDeviceConnectionChangeTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.DeviceConnectionChangeTrigger"; }
	static constexpr unsigned name_length = 65;
};

template <> struct traits<Windows::ApplicationModel::Background::GattCharacteristicNotificationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::GattCharacteristicNotificationTrigger;
	using default_interface = Windows::ApplicationModel::Background::IGattCharacteristicNotificationTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.GattCharacteristicNotificationTrigger"; }
	static constexpr unsigned name_length = 73;
};

template <> struct traits<Windows::ApplicationModel::Background::BluetoothLEAdvertisementWatcherTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::BluetoothLEAdvertisementWatcherTrigger;
	using default_interface = Windows::ApplicationModel::Background::IBluetoothLEAdvertisementWatcherTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.BluetoothLEAdvertisementWatcherTrigger"; }
	static constexpr unsigned name_length = 74;
};

template <> struct traits<Windows::ApplicationModel::Background::BluetoothLEAdvertisementPublisherTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::BluetoothLEAdvertisementPublisherTrigger;
	using default_interface = Windows::ApplicationModel::Background::IBluetoothLEAdvertisementPublisherTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.BluetoothLEAdvertisementPublisherTrigger"; }
	static constexpr unsigned name_length = 76;
};

template <> struct traits<Windows::ApplicationModel::Background::DeviceWatcherTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::DeviceWatcherTrigger;
	using default_interface = Windows::ApplicationModel::Background::IDeviceWatcherTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.DeviceWatcherTrigger"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::ApplicationModel::Background::LocationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::LocationTrigger;
	using default_interface = Windows::ApplicationModel::Background::ILocationTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.LocationTrigger"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::ApplicationModel::Background::ActivitySensorTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::ActivitySensorTrigger;
	using default_interface = Windows::ApplicationModel::Background::IActivitySensorTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.ActivitySensorTrigger"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::ApplicationModel::Background::SensorDataThresholdTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::SensorDataThresholdTrigger;
	using default_interface = Windows::ApplicationModel::Background::ISensorDataThresholdTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.SensorDataThresholdTrigger"; }
	static constexpr unsigned name_length = 62;
};

template <> struct traits<Windows::ApplicationModel::Background::NetworkOperatorHotspotAuthenticationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::NetworkOperatorHotspotAuthenticationTrigger;
	using default_interface = Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.NetworkOperatorHotspotAuthenticationTrigger"; }
	static constexpr unsigned name_length = 79;
};

template <> struct traits<Windows::ApplicationModel::Background::SocketActivityTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::SocketActivityTrigger;
	using default_interface = Windows::ApplicationModel::Background::IBackgroundTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.SocketActivityTrigger"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::ApplicationModel::Background::PushNotificationTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::PushNotificationTrigger;
	using default_interface = Windows::ApplicationModel::Background::IBackgroundTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.PushNotificationTrigger"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::ApplicationModel::Background::ToastNotificationHistoryChangedTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::ToastNotificationHistoryChangedTrigger;
	using default_interface = Windows::ApplicationModel::Background::IBackgroundTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.ToastNotificationHistoryChangedTrigger"; }
	static constexpr unsigned name_length = 74;
};

template <> struct traits<Windows::ApplicationModel::Background::ToastNotificationActionTrigger>
{
	using abi = ABI::Windows::ApplicationModel::Background::ToastNotificationActionTrigger;
	using default_interface = Windows::ApplicationModel::Background::IBackgroundTrigger;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Background.ToastNotificationActionTrigger"; }
	static constexpr unsigned name_length = 66;
};

template <> struct traits<Windows::Devices::Enumeration::DeviceConnectionChangeTriggerDetails>
{
	using abi = ABI::Windows::Devices::Enumeration::DeviceConnectionChangeTriggerDetails;
	using default_interface = Windows::Devices::Enumeration::IDeviceConnectionChangeTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DeviceConnectionChangeTriggerDetails"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::Devices::Enumeration::DevicePickerAppearance>
{
	using abi = ABI::Windows::Devices::Enumeration::DevicePickerAppearance;
	using default_interface = Windows::Devices::Enumeration::IDevicePickerAppearance;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DevicePickerAppearance"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::Devices::Enumeration::DeviceSelectedEventArgs>
{
	using abi = ABI::Windows::Devices::Enumeration::DeviceSelectedEventArgs;
	using default_interface = Windows::Devices::Enumeration::IDeviceSelectedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DeviceSelectedEventArgs"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::Devices::Enumeration::DeviceDisconnectButtonClickedEventArgs>
{
	using abi = ABI::Windows::Devices::Enumeration::DeviceDisconnectButtonClickedEventArgs;
	using default_interface = Windows::Devices::Enumeration::IDeviceDisconnectButtonClickedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DeviceDisconnectButtonClickedEventArgs"; }
	static constexpr unsigned name_length = 66;
};

template <> struct traits<Windows::Devices::Enumeration::DevicePickerFilter>
{
	using abi = ABI::Windows::Devices::Enumeration::DevicePickerFilter;
	using default_interface = Windows::Devices::Enumeration::IDevicePickerFilter;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DevicePickerFilter"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Devices::Enumeration::DevicePicker>
{
	using abi = ABI::Windows::Devices::Enumeration::DevicePicker;
	using default_interface = Windows::Devices::Enumeration::IDevicePicker;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DevicePicker"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::Devices::Enumeration::DeviceThumbnail>
{
	using abi = ABI::Windows::Devices::Enumeration::DeviceThumbnail;
	using default_interface = Windows::Storage::Streams::IRandomAccessStreamWithContentType;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DeviceThumbnail"; }
	static constexpr unsigned name_length = 43;
};

template <> struct traits<Windows::Devices::Enumeration::EnclosureLocation>
{
	using abi = ABI::Windows::Devices::Enumeration::EnclosureLocation;
	using default_interface = Windows::Devices::Enumeration::IEnclosureLocation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.EnclosureLocation"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::Devices::Enumeration::DeviceInformationUpdate>
{
	using abi = ABI::Windows::Devices::Enumeration::DeviceInformationUpdate;
	using default_interface = Windows::Devices::Enumeration::IDeviceInformationUpdate;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DeviceInformationUpdate"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::Devices::Enumeration::DeviceInformationCollection>
{
	using abi = ABI::Windows::Devices::Enumeration::DeviceInformationCollection;
	using default_interface = Windows::Foundation::Collections::IVectorView<Windows::Devices::Enumeration::DeviceInformation>;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DeviceInformationCollection"; }
	static constexpr unsigned name_length = 55;
};

template <> struct traits<Windows::Devices::Enumeration::DeviceWatcher>
{
	using abi = ABI::Windows::Devices::Enumeration::DeviceWatcher;
	using default_interface = Windows::Devices::Enumeration::IDeviceWatcher;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DeviceWatcher"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::Devices::Enumeration::DevicePairingResult>
{
	using abi = ABI::Windows::Devices::Enumeration::DevicePairingResult;
	using default_interface = Windows::Devices::Enumeration::IDevicePairingResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DevicePairingResult"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::Devices::Enumeration::DeviceUnpairingResult>
{
	using abi = ABI::Windows::Devices::Enumeration::DeviceUnpairingResult;
	using default_interface = Windows::Devices::Enumeration::IDeviceUnpairingResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DeviceUnpairingResult"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::Devices::Enumeration::DevicePairingRequestedEventArgs>
{
	using abi = ABI::Windows::Devices::Enumeration::DevicePairingRequestedEventArgs;
	using default_interface = Windows::Devices::Enumeration::IDevicePairingRequestedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DevicePairingRequestedEventArgs"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::Devices::Enumeration::DeviceInformationCustomPairing>
{
	using abi = ABI::Windows::Devices::Enumeration::DeviceInformationCustomPairing;
	using default_interface = Windows::Devices::Enumeration::IDeviceInformationCustomPairing;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DeviceInformationCustomPairing"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::Devices::Enumeration::DeviceInformationPairing>
{
	using abi = ABI::Windows::Devices::Enumeration::DeviceInformationPairing;
	using default_interface = Windows::Devices::Enumeration::IDeviceInformationPairing;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DeviceInformationPairing"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Devices::Enumeration::DeviceAccessChangedEventArgs>
{
	using abi = ABI::Windows::Devices::Enumeration::DeviceAccessChangedEventArgs;
	using default_interface = Windows::Devices::Enumeration::IDeviceAccessChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DeviceAccessChangedEventArgs"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::Devices::Enumeration::DeviceAccessInformation>
{
	using abi = ABI::Windows::Devices::Enumeration::DeviceAccessInformation;
	using default_interface = Windows::Devices::Enumeration::IDeviceAccessInformation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DeviceAccessInformation"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::Devices::Enumeration::DeviceWatcherEvent>
{
	using abi = ABI::Windows::Devices::Enumeration::DeviceWatcherEvent;
	using default_interface = Windows::Devices::Enumeration::IDeviceWatcherEvent;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DeviceWatcherEvent"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Devices::Enumeration::DeviceWatcherTriggerDetails>
{
	using abi = ABI::Windows::Devices::Enumeration::DeviceWatcherTriggerDetails;
	using default_interface = Windows::Devices::Enumeration::IDeviceWatcherTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Enumeration.DeviceWatcherTriggerDetails"; }
	static constexpr unsigned name_length = 55;
};

template <> struct traits<Windows::Devices::Input::PointerDevice>
{
	using abi = ABI::Windows::Devices::Input::PointerDevice;
	using default_interface = Windows::Devices::Input::IPointerDevice;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Input.PointerDevice"; }
	static constexpr unsigned name_length = 35;
};

template <> struct traits<Windows::Devices::Input::MouseDevice>
{
	using abi = ABI::Windows::Devices::Input::MouseDevice;
	using default_interface = Windows::Devices::Input::IMouseDevice;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Input.MouseDevice"; }
	static constexpr unsigned name_length = 33;
};

template <> struct traits<Windows::Devices::Input::MouseEventArgs>
{
	using abi = ABI::Windows::Devices::Input::MouseEventArgs;
	using default_interface = Windows::Devices::Input::IMouseEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Input.MouseEventArgs"; }
	static constexpr unsigned name_length = 36;
};

template <> struct traits<Windows::Devices::Input::MouseCapabilities>
{
	using abi = ABI::Windows::Devices::Input::MouseCapabilities;
	using default_interface = Windows::Devices::Input::IMouseCapabilities;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Input.MouseCapabilities"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::Devices::Input::KeyboardCapabilities>
{
	using abi = ABI::Windows::Devices::Input::KeyboardCapabilities;
	using default_interface = Windows::Devices::Input::IKeyboardCapabilities;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Input.KeyboardCapabilities"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Devices::Input::TouchCapabilities>
{
	using abi = ABI::Windows::Devices::Input::TouchCapabilities;
	using default_interface = Windows::Devices::Input::ITouchCapabilities;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Input.TouchCapabilities"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::UI::Core::KeyEventArgs>
{
	using abi = ABI::Windows::UI::Core::KeyEventArgs;
	using default_interface = Windows::UI::Core::IKeyEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.KeyEventArgs"; }
	static constexpr unsigned name_length = 28;
};

template <> struct traits<Windows::UI::Input::EdgeGestureEventArgs>
{
	using abi = ABI::Windows::UI::Input::EdgeGestureEventArgs;
	using default_interface = Windows::UI::Input::IEdgeGestureEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.EdgeGestureEventArgs"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::UI::Input::EdgeGesture>
{
	using abi = ABI::Windows::UI::Input::EdgeGesture;
	using default_interface = Windows::UI::Input::IEdgeGesture;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.EdgeGesture"; }
	static constexpr unsigned name_length = 28;
};

template <> struct traits<Windows::UI::Input::KeyboardDeliveryInterceptor>
{
	using abi = ABI::Windows::UI::Input::KeyboardDeliveryInterceptor;
	using default_interface = Windows::UI::Input::IKeyboardDeliveryInterceptor;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.KeyboardDeliveryInterceptor"; }
	static constexpr unsigned name_length = 44;
};

template <> struct traits<Windows::UI::Input::MouseWheelParameters>
{
	using abi = ABI::Windows::UI::Input::MouseWheelParameters;
	using default_interface = Windows::UI::Input::IMouseWheelParameters;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.MouseWheelParameters"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::UI::Input::GestureRecognizer>
{
	using abi = ABI::Windows::UI::Input::GestureRecognizer;
	using default_interface = Windows::UI::Input::IGestureRecognizer;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.GestureRecognizer"; }
	static constexpr unsigned name_length = 34;
};

template <> struct traits<Windows::UI::Input::TappedEventArgs>
{
	using abi = ABI::Windows::UI::Input::TappedEventArgs;
	using default_interface = Windows::UI::Input::ITappedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.TappedEventArgs"; }
	static constexpr unsigned name_length = 32;
};

template <> struct traits<Windows::UI::Input::RightTappedEventArgs>
{
	using abi = ABI::Windows::UI::Input::RightTappedEventArgs;
	using default_interface = Windows::UI::Input::IRightTappedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.RightTappedEventArgs"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::UI::Input::HoldingEventArgs>
{
	using abi = ABI::Windows::UI::Input::HoldingEventArgs;
	using default_interface = Windows::UI::Input::IHoldingEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.HoldingEventArgs"; }
	static constexpr unsigned name_length = 33;
};

template <> struct traits<Windows::UI::Input::DraggingEventArgs>
{
	using abi = ABI::Windows::UI::Input::DraggingEventArgs;
	using default_interface = Windows::UI::Input::IDraggingEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.DraggingEventArgs"; }
	static constexpr unsigned name_length = 34;
};

template <> struct traits<Windows::UI::Input::ManipulationStartedEventArgs>
{
	using abi = ABI::Windows::UI::Input::ManipulationStartedEventArgs;
	using default_interface = Windows::UI::Input::IManipulationStartedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.ManipulationStartedEventArgs"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::UI::Input::ManipulationUpdatedEventArgs>
{
	using abi = ABI::Windows::UI::Input::ManipulationUpdatedEventArgs;
	using default_interface = Windows::UI::Input::IManipulationUpdatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.ManipulationUpdatedEventArgs"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::UI::Input::ManipulationInertiaStartingEventArgs>
{
	using abi = ABI::Windows::UI::Input::ManipulationInertiaStartingEventArgs;
	using default_interface = Windows::UI::Input::IManipulationInertiaStartingEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.ManipulationInertiaStartingEventArgs"; }
	static constexpr unsigned name_length = 53;
};

template <> struct traits<Windows::UI::Input::ManipulationCompletedEventArgs>
{
	using abi = ABI::Windows::UI::Input::ManipulationCompletedEventArgs;
	using default_interface = Windows::UI::Input::IManipulationCompletedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.ManipulationCompletedEventArgs"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::UI::Input::CrossSlidingEventArgs>
{
	using abi = ABI::Windows::UI::Input::CrossSlidingEventArgs;
	using default_interface = Windows::UI::Input::ICrossSlidingEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.CrossSlidingEventArgs"; }
	static constexpr unsigned name_length = 38;
};

template <> struct traits<Windows::UI::Input::PointerPoint>
{
	using abi = ABI::Windows::UI::Input::PointerPoint;
	using default_interface = Windows::UI::Input::IPointerPoint;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.PointerPoint"; }
	static constexpr unsigned name_length = 29;
};

template <> struct traits<Windows::UI::Input::PointerPointProperties>
{
	using abi = ABI::Windows::UI::Input::PointerPointProperties;
	using default_interface = Windows::UI::Input::IPointerPointProperties;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.PointerPointProperties"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::UI::Input::PointerVisualizationSettings>
{
	using abi = ABI::Windows::UI::Input::PointerVisualizationSettings;
	using default_interface = Windows::UI::Input::IPointerVisualizationSettings;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.PointerVisualizationSettings"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::UI::Core::PointerEventArgs>
{
	using abi = ABI::Windows::UI::Core::PointerEventArgs;
	using default_interface = Windows::UI::Core::IPointerEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.PointerEventArgs"; }
	static constexpr unsigned name_length = 32;
};

template <> struct traits<Windows::UI::Input::Inking::InkUnprocessedInput>
{
	using abi = ABI::Windows::UI::Input::Inking::InkUnprocessedInput;
	using default_interface = Windows::UI::Input::Inking::IInkUnprocessedInput;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkUnprocessedInput"; }
	static constexpr unsigned name_length = 43;
};

template <> struct traits<Windows::UI::Input::Inking::InkStrokeInput>
{
	using abi = ABI::Windows::UI::Input::Inking::InkStrokeInput;
	using default_interface = Windows::UI::Input::Inking::IInkStrokeInput;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkStrokeInput"; }
	static constexpr unsigned name_length = 38;
};

template <> struct traits<Windows::UI::Input::Inking::InkInputProcessingConfiguration>
{
	using abi = ABI::Windows::UI::Input::Inking::InkInputProcessingConfiguration;
	using default_interface = Windows::UI::Input::Inking::IInkInputProcessingConfiguration;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkInputProcessingConfiguration"; }
	static constexpr unsigned name_length = 55;
};

template <> struct traits<Windows::UI::Input::Inking::InkSynchronizer>
{
	using abi = ABI::Windows::UI::Input::Inking::InkSynchronizer;
	using default_interface = Windows::UI::Input::Inking::IInkSynchronizer;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkSynchronizer"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::UI::Input::Inking::InkPresenter>
{
	using abi = ABI::Windows::UI::Input::Inking::InkPresenter;
	using default_interface = Windows::UI::Input::Inking::IInkPresenter;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkPresenter"; }
	static constexpr unsigned name_length = 36;
};

template <> struct traits<Windows::UI::Input::Inking::InkStrokesCollectedEventArgs>
{
	using abi = ABI::Windows::UI::Input::Inking::InkStrokesCollectedEventArgs;
	using default_interface = Windows::UI::Input::Inking::IInkStrokesCollectedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkStrokesCollectedEventArgs"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::UI::Input::Inking::InkStrokesErasedEventArgs>
{
	using abi = ABI::Windows::UI::Input::Inking::InkStrokesErasedEventArgs;
	using default_interface = Windows::UI::Input::Inking::IInkStrokesErasedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkStrokesErasedEventArgs"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::UI::Input::Inking::InkPoint>
{
	using abi = ABI::Windows::UI::Input::Inking::InkPoint;
	using default_interface = Windows::UI::Input::Inking::IInkPoint;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkPoint"; }
	static constexpr unsigned name_length = 32;
};

template <> struct traits<Windows::UI::Input::Inking::InkDrawingAttributes>
{
	using abi = ABI::Windows::UI::Input::Inking::InkDrawingAttributes;
	using default_interface = Windows::UI::Input::Inking::IInkDrawingAttributes;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkDrawingAttributes"; }
	static constexpr unsigned name_length = 44;
};

template <> struct traits<Windows::UI::Input::Inking::InkStrokeRenderingSegment>
{
	using abi = ABI::Windows::UI::Input::Inking::InkStrokeRenderingSegment;
	using default_interface = Windows::UI::Input::Inking::IInkStrokeRenderingSegment;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkStrokeRenderingSegment"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::UI::Input::Inking::InkStroke>
{
	using abi = ABI::Windows::UI::Input::Inking::InkStroke;
	using default_interface = Windows::UI::Input::Inking::IInkStroke;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkStroke"; }
	static constexpr unsigned name_length = 33;
};

template <> struct traits<Windows::UI::Input::Inking::InkStrokeBuilder>
{
	using abi = ABI::Windows::UI::Input::Inking::InkStrokeBuilder;
	using default_interface = Windows::UI::Input::Inking::IInkStrokeBuilder;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkStrokeBuilder"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::UI::Input::Inking::InkRecognitionResult>
{
	using abi = ABI::Windows::UI::Input::Inking::InkRecognitionResult;
	using default_interface = Windows::UI::Input::Inking::IInkRecognitionResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkRecognitionResult"; }
	static constexpr unsigned name_length = 44;
};

template <> struct traits<Windows::UI::Input::Inking::InkStrokeContainer>
{
	using abi = ABI::Windows::UI::Input::Inking::InkStrokeContainer;
	using default_interface = Windows::UI::Input::Inking::IInkStrokeContainer;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkStrokeContainer"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::UI::Input::Inking::InkRecognizer>
{
	using abi = ABI::Windows::UI::Input::Inking::InkRecognizer;
	using default_interface = Windows::UI::Input::Inking::IInkRecognizer;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkRecognizer"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::UI::Input::Inking::InkRecognizerContainer>
{
	using abi = ABI::Windows::UI::Input::Inking::InkRecognizerContainer;
	using default_interface = Windows::UI::Input::Inking::IInkRecognizerContainer;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkRecognizerContainer"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::UI::Input::Inking::InkManager>
{
	using abi = ABI::Windows::UI::Input::Inking::InkManager;
	using default_interface = Windows::UI::Input::Inking::IInkManager;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.InkManager"; }
	static constexpr unsigned name_length = 34;
};

template <> struct traits<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource>
{
	using abi = ABI::Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource;
	using default_interface = Windows::UI::Input::Inking::Core::ICoreInkIndependentInputSource;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Input.Inking.Core.CoreInkIndependentInputSource"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::UI::Core::CoreDispatcher>
{
	using abi = ABI::Windows::UI::Core::CoreDispatcher;
	using default_interface = Windows::UI::Core::ICoreDispatcher;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.CoreDispatcher"; }
	static constexpr unsigned name_length = 30;
};

template <> struct traits<Windows::UI::Core::CoreCursor>
{
	using abi = ABI::Windows::UI::Core::CoreCursor;
	using default_interface = Windows::UI::Core::ICoreCursor;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.CoreCursor"; }
	static constexpr unsigned name_length = 26;
};

template <> struct traits<Windows::UI::Core::CoreWindow>
{
	using abi = ABI::Windows::UI::Core::CoreWindow;
	using default_interface = Windows::UI::Core::ICoreWindow;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.CoreWindow"; }
	static constexpr unsigned name_length = 26;
};

template <> struct traits<Windows::UI::Core::WindowActivatedEventArgs>
{
	using abi = ABI::Windows::UI::Core::WindowActivatedEventArgs;
	using default_interface = Windows::UI::Core::IWindowActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.WindowActivatedEventArgs"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::UI::Core::AutomationProviderRequestedEventArgs>
{
	using abi = ABI::Windows::UI::Core::AutomationProviderRequestedEventArgs;
	using default_interface = Windows::UI::Core::IAutomationProviderRequestedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.AutomationProviderRequestedEventArgs"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::UI::Core::CharacterReceivedEventArgs>
{
	using abi = ABI::Windows::UI::Core::CharacterReceivedEventArgs;
	using default_interface = Windows::UI::Core::ICharacterReceivedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.CharacterReceivedEventArgs"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::UI::Core::CoreWindowEventArgs>
{
	using abi = ABI::Windows::UI::Core::CoreWindowEventArgs;
	using default_interface = Windows::UI::Core::ICoreWindowEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.CoreWindowEventArgs"; }
	static constexpr unsigned name_length = 35;
};

template <> struct traits<Windows::UI::Core::InputEnabledEventArgs>
{
	using abi = ABI::Windows::UI::Core::InputEnabledEventArgs;
	using default_interface = Windows::UI::Core::IInputEnabledEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.InputEnabledEventArgs"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::UI::Core::TouchHitTestingEventArgs>
{
	using abi = ABI::Windows::UI::Core::TouchHitTestingEventArgs;
	using default_interface = Windows::UI::Core::ITouchHitTestingEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.TouchHitTestingEventArgs"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::UI::Core::WindowSizeChangedEventArgs>
{
	using abi = ABI::Windows::UI::Core::WindowSizeChangedEventArgs;
	using default_interface = Windows::UI::Core::IWindowSizeChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.WindowSizeChangedEventArgs"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::UI::Core::VisibilityChangedEventArgs>
{
	using abi = ABI::Windows::UI::Core::VisibilityChangedEventArgs;
	using default_interface = Windows::UI::Core::IVisibilityChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.VisibilityChangedEventArgs"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::UI::Core::IdleDispatchedHandlerArgs>
{
	using abi = ABI::Windows::UI::Core::IdleDispatchedHandlerArgs;
	using default_interface = Windows::UI::Core::IIdleDispatchedHandlerArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.IdleDispatchedHandlerArgs"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::UI::Core::AcceleratorKeyEventArgs>
{
	using abi = ABI::Windows::UI::Core::AcceleratorKeyEventArgs;
	using default_interface = Windows::UI::Core::IAcceleratorKeyEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.AcceleratorKeyEventArgs"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::UI::Core::CoreAcceleratorKeys>
{
	using abi = ABI::Windows::UI::Core::CoreAcceleratorKeys;
	using default_interface = Windows::UI::Core::ICoreAcceleratorKeys;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.CoreAcceleratorKeys"; }
	static constexpr unsigned name_length = 35;
};

template <> struct traits<Windows::UI::Core::CoreWindowResizeManager>
{
	using abi = ABI::Windows::UI::Core::CoreWindowResizeManager;
	using default_interface = Windows::UI::Core::ICoreWindowResizeManager;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.CoreWindowResizeManager"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::UI::Core::CoreIndependentInputSource>
{
	using abi = ABI::Windows::UI::Core::CoreIndependentInputSource;
	using default_interface = Windows::UI::Core::ICoreInputSourceBase;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.CoreIndependentInputSource"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::UI::Core::CoreComponentInputSource>
{
	using abi = ABI::Windows::UI::Core::CoreComponentInputSource;
	using default_interface = Windows::UI::Core::ICoreInputSourceBase;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.CoreComponentInputSource"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::UI::Core::CoreWindowPopupShowingEventArgs>
{
	using abi = ABI::Windows::UI::Core::CoreWindowPopupShowingEventArgs;
	using default_interface = Windows::UI::Core::ICoreWindowPopupShowingEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.CoreWindowPopupShowingEventArgs"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::UI::Core::CoreWindowDialog>
{
	using abi = ABI::Windows::UI::Core::CoreWindowDialog;
	using default_interface = Windows::UI::Core::ICoreWindowDialog;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.CoreWindowDialog"; }
	static constexpr unsigned name_length = 32;
};

template <> struct traits<Windows::UI::Core::CoreWindowFlyout>
{
	using abi = ABI::Windows::UI::Core::CoreWindowFlyout;
	using default_interface = Windows::UI::Core::ICoreWindowFlyout;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.CoreWindowFlyout"; }
	static constexpr unsigned name_length = 32;
};

template <> struct traits<Windows::UI::Core::BackRequestedEventArgs>
{
	using abi = ABI::Windows::UI::Core::BackRequestedEventArgs;
	using default_interface = Windows::UI::Core::IBackRequestedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.BackRequestedEventArgs"; }
	static constexpr unsigned name_length = 38;
};

template <> struct traits<Windows::UI::Core::SystemNavigationManager>
{
	using abi = ABI::Windows::UI::Core::SystemNavigationManager;
	using default_interface = Windows::UI::Core::ISystemNavigationManager;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.Core.SystemNavigationManager"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::UI::ViewManagement::ApplicationView>
{
	using abi = ABI::Windows::UI::ViewManagement::ApplicationView;
	using default_interface = Windows::UI::ViewManagement::IApplicationView;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.ViewManagement.ApplicationView"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs>
{
	using abi = ABI::Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs;
	using default_interface = Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.ViewManagement.ApplicationViewConsolidatedEventArgs"; }
	static constexpr unsigned name_length = 62;
};

template <> struct traits<Windows::UI::ViewManagement::ApplicationViewTitleBar>
{
	using abi = ABI::Windows::UI::ViewManagement::ApplicationViewTitleBar;
	using default_interface = Windows::UI::ViewManagement::IApplicationViewTitleBar;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.ViewManagement.ApplicationViewTitleBar"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::UI::ViewManagement::ApplicationViewSwitcher>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.ViewManagement.ApplicationViewSwitcher"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::UI::ViewManagement::ActivationViewSwitcher>
{
	using abi = ABI::Windows::UI::ViewManagement::ActivationViewSwitcher;
	using default_interface = Windows::UI::ViewManagement::IActivationViewSwitcher;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.ViewManagement.ActivationViewSwitcher"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::UI::ViewManagement::ApplicationViewTransferContext>
{
	using abi = ABI::Windows::UI::ViewManagement::ApplicationViewTransferContext;
	using default_interface = Windows::UI::ViewManagement::IApplicationViewTransferContext;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.ViewManagement.ApplicationViewTransferContext"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::UI::ViewManagement::InputPaneVisibilityEventArgs>
{
	using abi = ABI::Windows::UI::ViewManagement::InputPaneVisibilityEventArgs;
	using default_interface = Windows::UI::ViewManagement::IInputPaneVisibilityEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.ViewManagement.InputPaneVisibilityEventArgs"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::UI::ViewManagement::InputPane>
{
	using abi = ABI::Windows::UI::ViewManagement::InputPane;
	using default_interface = Windows::UI::ViewManagement::IInputPane;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.ViewManagement.InputPane"; }
	static constexpr unsigned name_length = 35;
};

template <> struct traits<Windows::UI::ViewManagement::ProjectionManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.ViewManagement.ProjectionManager"; }
	static constexpr unsigned name_length = 43;
};

template <> struct traits<Windows::UI::ViewManagement::UIViewSettings>
{
	using abi = ABI::Windows::UI::ViewManagement::UIViewSettings;
	using default_interface = Windows::UI::ViewManagement::IUIViewSettings;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.ViewManagement.UIViewSettings"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::UI::ViewManagement::AccessibilitySettings>
{
	using abi = ABI::Windows::UI::ViewManagement::AccessibilitySettings;
	using default_interface = Windows::UI::ViewManagement::IAccessibilitySettings;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.ViewManagement.AccessibilitySettings"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::UI::ViewManagement::UISettings>
{
	using abi = ABI::Windows::UI::ViewManagement::UISettings;
	using default_interface = Windows::UI::ViewManagement::IUISettings;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.ViewManagement.UISettings"; }
	static constexpr unsigned name_length = 36;
};

template <> struct traits<Windows::UI::ViewManagement::ApplicationViewScaling>
{
	using abi = ABI::Windows::UI::ViewManagement::ApplicationViewScaling;
	using default_interface = Windows::UI::ViewManagement::IApplicationViewScaling;
	static constexpr wchar_t const * name() noexcept { return L"Windows.UI.ViewManagement.ApplicationViewScaling"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::ApplicationModel::Contacts::Contact>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::Contact;
	using default_interface = Windows::ApplicationModel::Contacts::IContact;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.Contact"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader;
	using default_interface = Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactCardDelayedDataLoader"; }
	static constexpr unsigned name_length = 62;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactStore>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactStore;
	using default_interface = Windows::ApplicationModel::Contacts::IContactStore;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactStore"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactAnnotationStore>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactAnnotationStore;
	using default_interface = Windows::ApplicationModel::Contacts::IContactAnnotationStore;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactAnnotationStore"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactCardOptions>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactCardOptions;
	using default_interface = Windows::ApplicationModel::Contacts::IContactCardOptions;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactCardOptions"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::ApplicationModel::Contacts::FullContactCardOptions>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::FullContactCardOptions;
	using default_interface = Windows::ApplicationModel::Contacts::IFullContactCardOptions;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.FullContactCardOptions"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactAnnotation>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactAnnotation;
	using default_interface = Windows::ApplicationModel::Contacts::IContactAnnotation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactAnnotation"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactAnnotationList>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactAnnotationList;
	using default_interface = Windows::ApplicationModel::Contacts::IContactAnnotationList;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactAnnotationList"; }
	static constexpr unsigned name_length = 55;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactChangeTracker>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactChangeTracker;
	using default_interface = Windows::ApplicationModel::Contacts::IContactChangeTracker;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactChangeTracker"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactChangedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactChangedEventArgs;
	using default_interface = Windows::ApplicationModel::Contacts::IContactChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactChangedEventArgs"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::ApplicationModel::Contacts::AggregateContactManager>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::AggregateContactManager;
	using default_interface = Windows::ApplicationModel::Contacts::IAggregateContactManager;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.AggregateContactManager"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactList>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactList;
	using default_interface = Windows::ApplicationModel::Contacts::IContactList;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactList"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactReader>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactReader;
	using default_interface = Windows::ApplicationModel::Contacts::IContactReader;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactReader"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactQueryOptions>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactQueryOptions;
	using default_interface = Windows::ApplicationModel::Contacts::IContactQueryOptions;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactQueryOptions"; }
	static constexpr unsigned name_length = 53;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactListSyncManager>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactListSyncManager;
	using default_interface = Windows::ApplicationModel::Contacts::IContactListSyncManager;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactListSyncManager"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactPhone>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactPhone;
	using default_interface = Windows::ApplicationModel::Contacts::IContactPhone;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactPhone"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactEmail>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactEmail;
	using default_interface = Windows::ApplicationModel::Contacts::IContactEmail;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactEmail"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactAddress>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactAddress;
	using default_interface = Windows::ApplicationModel::Contacts::IContactAddress;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactAddress"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount;
	using default_interface = Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactConnectedServiceAccount"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactDate>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactDate;
	using default_interface = Windows::ApplicationModel::Contacts::IContactDate;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactDate"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactJobInfo>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactJobInfo;
	using default_interface = Windows::ApplicationModel::Contacts::IContactJobInfo;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactJobInfo"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactSignificantOther>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactSignificantOther;
	using default_interface = Windows::ApplicationModel::Contacts::IContactSignificantOther;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactSignificantOther"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactWebsite>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactWebsite;
	using default_interface = Windows::ApplicationModel::Contacts::IContactWebsite;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactWebsite"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactChangedDeferral>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactChangedDeferral;
	using default_interface = Windows::ApplicationModel::Contacts::IContactChangedDeferral;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactChangedDeferral"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactChange>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactChange;
	using default_interface = Windows::ApplicationModel::Contacts::IContactChange;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactChange"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactChangeReader>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactChangeReader;
	using default_interface = Windows::ApplicationModel::Contacts::IContactChangeReader;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactChangeReader"; }
	static constexpr unsigned name_length = 53;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactBatch>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactBatch;
	using default_interface = Windows::ApplicationModel::Contacts::IContactBatch;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactBatch"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactMatchReason>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactMatchReason;
	using default_interface = Windows::ApplicationModel::Contacts::IContactMatchReason;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactMatchReason"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactQueryTextSearch>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactQueryTextSearch;
	using default_interface = Windows::ApplicationModel::Contacts::IContactQueryTextSearch;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactQueryTextSearch"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactStoreNotificationTriggerDetails>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactStoreNotificationTriggerDetails;
	using default_interface = Windows::ApplicationModel::Contacts::IContactStoreNotificationTriggerDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactStoreNotificationTriggerDetails"; }
	static constexpr unsigned name_length = 72;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactManager"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactLaunchActionVerbs>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactLaunchActionVerbs"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactField>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactField;
	using default_interface = Windows::ApplicationModel::Contacts::IContactField;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactField"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactLocationField>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactLocationField;
	using default_interface = Windows::ApplicationModel::Contacts::IContactLocationField;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactLocationField"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactInstantMessageField>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactInstantMessageField;
	using default_interface = Windows::ApplicationModel::Contacts::IContactInstantMessageField;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactInstantMessageField"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::ApplicationModel::Contacts::KnownContactField>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.KnownContactField"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactInformation>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactInformation;
	using default_interface = Windows::ApplicationModel::Contacts::IContactInformation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactInformation"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactFieldFactory>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactFieldFactory;
	using default_interface = Windows::ApplicationModel::Contacts::IContactFieldFactory;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactFieldFactory"; }
	static constexpr unsigned name_length = 53;
};

template <> struct traits<Windows::ApplicationModel::Contacts::ContactPicker>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::ContactPicker;
	using default_interface = Windows::ApplicationModel::Contacts::IContactPicker;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.ContactPicker"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress>
{
	using abi = ABI::Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress;
	using default_interface = Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryAddress;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneCallHistoryEntryAddress"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry>
{
	using abi = ABI::Windows::ApplicationModel::Calls::PhoneCallHistoryEntry;
	using default_interface = Windows::ApplicationModel::Calls::IPhoneCallHistoryEntry;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneCallHistoryEntry"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneCallHistoryEntryReader>
{
	using abi = ABI::Windows::ApplicationModel::Calls::PhoneCallHistoryEntryReader;
	using default_interface = Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryReader;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneCallHistoryEntryReader"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneCallHistoryEntryQueryOptions>
{
	using abi = ABI::Windows::ApplicationModel::Calls::PhoneCallHistoryEntryQueryOptions;
	using default_interface = Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryQueryOptions;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneCallHistoryEntryQueryOptions"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneCallHistoryStore>
{
	using abi = ABI::Windows::ApplicationModel::Calls::PhoneCallHistoryStore;
	using default_interface = Windows::ApplicationModel::Calls::IPhoneCallHistoryStore;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneCallHistoryStore"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneCallHistoryManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneCallHistoryManager"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneLine>
{
	using abi = ABI::Windows::ApplicationModel::Calls::PhoneLine;
	using default_interface = Windows::ApplicationModel::Calls::IPhoneLine;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneLine"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneVoicemail>
{
	using abi = ABI::Windows::ApplicationModel::Calls::PhoneVoicemail;
	using default_interface = Windows::ApplicationModel::Calls::IPhoneVoicemail;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneVoicemail"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneLineCellularDetails>
{
	using abi = ABI::Windows::ApplicationModel::Calls::PhoneLineCellularDetails;
	using default_interface = Windows::ApplicationModel::Calls::IPhoneLineCellularDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneLineCellularDetails"; }
	static constexpr unsigned name_length = 55;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneCallVideoCapabilities>
{
	using abi = ABI::Windows::ApplicationModel::Calls::PhoneCallVideoCapabilities;
	using default_interface = Windows::ApplicationModel::Calls::IPhoneCallVideoCapabilities;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneCallVideoCapabilities"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneLineConfiguration>
{
	using abi = ABI::Windows::ApplicationModel::Calls::PhoneLineConfiguration;
	using default_interface = Windows::ApplicationModel::Calls::IPhoneLineConfiguration;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneLineConfiguration"; }
	static constexpr unsigned name_length = 53;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneDialOptions>
{
	using abi = ABI::Windows::ApplicationModel::Calls::PhoneDialOptions;
	using default_interface = Windows::ApplicationModel::Calls::IPhoneDialOptions;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneDialOptions"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneLineWatcher>
{
	using abi = ABI::Windows::ApplicationModel::Calls::PhoneLineWatcher;
	using default_interface = Windows::ApplicationModel::Calls::IPhoneLineWatcher;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneLineWatcher"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs;
	using default_interface = Windows::ApplicationModel::Calls::IPhoneLineWatcherEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneLineWatcherEventArgs"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneCallStore>
{
	using abi = ABI::Windows::ApplicationModel::Calls::PhoneCallStore;
	using default_interface = Windows::ApplicationModel::Calls::IPhoneCallStore;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneCallStore"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneCallManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneCallManager"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneCallVideoCapabilitiesManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneCallVideoCapabilitiesManager"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::ApplicationModel::Calls::PhoneCallBlocking>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.PhoneCallBlocking"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::ApplicationModel::Calls::CallStateChangeEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Calls::CallStateChangeEventArgs;
	using default_interface = Windows::ApplicationModel::Calls::ICallStateChangeEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.CallStateChangeEventArgs"; }
	static constexpr unsigned name_length = 55;
};

template <> struct traits<Windows::ApplicationModel::Calls::CallAnswerEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Calls::CallAnswerEventArgs;
	using default_interface = Windows::ApplicationModel::Calls::ICallAnswerEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.CallAnswerEventArgs"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::ApplicationModel::Calls::CallRejectEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Calls::CallRejectEventArgs;
	using default_interface = Windows::ApplicationModel::Calls::ICallRejectEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.CallRejectEventArgs"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::ApplicationModel::Calls::VoipPhoneCall>
{
	using abi = ABI::Windows::ApplicationModel::Calls::VoipPhoneCall;
	using default_interface = Windows::ApplicationModel::Calls::IVoipPhoneCall;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.VoipPhoneCall"; }
	static constexpr unsigned name_length = 44;
};

template <> struct traits<Windows::ApplicationModel::Calls::MuteChangeEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Calls::MuteChangeEventArgs;
	using default_interface = Windows::ApplicationModel::Calls::IMuteChangeEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.MuteChangeEventArgs"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::ApplicationModel::Calls::VoipCallCoordinator>
{
	using abi = ABI::Windows::ApplicationModel::Calls::VoipCallCoordinator;
	using default_interface = Windows::ApplicationModel::Calls::IVoipCallCoordinator;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.VoipCallCoordinator"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::ApplicationModel::Calls::LockScreenCallEndCallDeferral>
{
	using abi = ABI::Windows::ApplicationModel::Calls::LockScreenCallEndCallDeferral;
	using default_interface = Windows::ApplicationModel::Calls::ILockScreenCallEndCallDeferral;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.LockScreenCallEndCallDeferral"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::ApplicationModel::Calls::LockScreenCallUI>
{
	using abi = ABI::Windows::ApplicationModel::Calls::LockScreenCallUI;
	using default_interface = Windows::ApplicationModel::Calls::ILockScreenCallUI;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.LockScreenCallUI"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::ApplicationModel::Calls::LockScreenCallEndRequestedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Calls::LockScreenCallEndRequestedEventArgs;
	using default_interface = Windows::ApplicationModel::Calls::ILockScreenCallEndRequestedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Calls.LockScreenCallEndRequestedEventArgs"; }
	static constexpr unsigned name_length = 66;
};

template <> struct traits<Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs;
	using default_interface = Windows::ApplicationModel::Contacts::Provider::IContactRemovedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.Provider.ContactRemovedEventArgs"; }
	static constexpr unsigned name_length = 66;
};

template <> struct traits<Windows::ApplicationModel::Contacts::Provider::ContactPickerUI>
{
	using abi = ABI::Windows::ApplicationModel::Contacts::Provider::ContactPickerUI;
	using default_interface = Windows::ApplicationModel::Contacts::Provider::IContactPickerUI;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Contacts.Provider.ContactPickerUI"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::Security::EnterpriseData::FileProtectionInfo>
{
	using abi = ABI::Windows::Security::EnterpriseData::FileProtectionInfo;
	using default_interface = Windows::Security::EnterpriseData::IFileProtectionInfo;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.EnterpriseData.FileProtectionInfo"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::Security::EnterpriseData::ProtectedContainerExportResult>
{
	using abi = ABI::Windows::Security::EnterpriseData::ProtectedContainerExportResult;
	using default_interface = Windows::Security::EnterpriseData::IProtectedContainerExportResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.EnterpriseData.ProtectedContainerExportResult"; }
	static constexpr unsigned name_length = 62;
};

template <> struct traits<Windows::Security::EnterpriseData::ProtectedContainerImportResult>
{
	using abi = ABI::Windows::Security::EnterpriseData::ProtectedContainerImportResult;
	using default_interface = Windows::Security::EnterpriseData::IProtectedContainerImportResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.EnterpriseData.ProtectedContainerImportResult"; }
	static constexpr unsigned name_length = 62;
};

template <> struct traits<Windows::Security::EnterpriseData::ProtectedFileCreateResult>
{
	using abi = ABI::Windows::Security::EnterpriseData::ProtectedFileCreateResult;
	using default_interface = Windows::Security::EnterpriseData::IProtectedFileCreateResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.EnterpriseData.ProtectedFileCreateResult"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::Security::EnterpriseData::BufferProtectUnprotectResult>
{
	using abi = ABI::Windows::Security::EnterpriseData::BufferProtectUnprotectResult;
	using default_interface = Windows::Security::EnterpriseData::IBufferProtectUnprotectResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.EnterpriseData.BufferProtectUnprotectResult"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::Security::EnterpriseData::DataProtectionInfo>
{
	using abi = ABI::Windows::Security::EnterpriseData::DataProtectionInfo;
	using default_interface = Windows::Security::EnterpriseData::IDataProtectionInfo;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.EnterpriseData.DataProtectionInfo"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::Security::EnterpriseData::ThreadNetworkContext>
{
	using abi = ABI::Windows::Security::EnterpriseData::ThreadNetworkContext;
	using default_interface = Windows::Security::EnterpriseData::IThreadNetworkContext;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.EnterpriseData.ThreadNetworkContext"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Security::EnterpriseData::ProtectionPolicyManager>
{
	using abi = ABI::Windows::Security::EnterpriseData::ProtectionPolicyManager;
	using default_interface = Windows::Security::EnterpriseData::IProtectionPolicyManager;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.EnterpriseData.ProtectionPolicyManager"; }
	static constexpr unsigned name_length = 55;
};

template <> struct traits<Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs>
{
	using abi = ABI::Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs;
	using default_interface = Windows::Security::EnterpriseData::IProtectedAccessSuspendingEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.EnterpriseData.ProtectedAccessSuspendingEventArgs"; }
	static constexpr unsigned name_length = 66;
};

template <> struct traits<Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs>
{
	using abi = ABI::Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs;
	using default_interface = Windows::Security::EnterpriseData::IProtectedAccessResumedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.EnterpriseData.ProtectedAccessResumedEventArgs"; }
	static constexpr unsigned name_length = 63;
};

template <> struct traits<Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs>
{
	using abi = ABI::Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs;
	using default_interface = Windows::Security::EnterpriseData::IProtectedContentRevokedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.EnterpriseData.ProtectedContentRevokedEventArgs"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::Security::EnterpriseData::FileRevocationManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.EnterpriseData.FileRevocationManager"; }
	static constexpr unsigned name_length = 53;
};

template <> struct traits<Windows::Security::EnterpriseData::FileProtectionManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.EnterpriseData.FileProtectionManager"; }
	static constexpr unsigned name_length = 53;
};

template <> struct traits<Windows::Security::EnterpriseData::DataProtectionManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.EnterpriseData.DataProtectionManager"; }
	static constexpr unsigned name_length = 53;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::StandardDataFormats>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.StandardDataFormats"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::DataPackagePropertySetView>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::DataPackagePropertySetView;
	using default_interface = Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataPackagePropertySetView"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::DataPackagePropertySet>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::DataPackagePropertySet;
	using default_interface = Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataPackagePropertySet"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::DataProviderDeferral>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::DataProviderDeferral;
	using default_interface = Windows::ApplicationModel::DataTransfer::IDataProviderDeferral;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataProviderDeferral"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::DataProviderRequest>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::DataProviderRequest;
	using default_interface = Windows::ApplicationModel::DataTransfer::IDataProviderRequest;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataProviderRequest"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::OperationCompletedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::OperationCompletedEventArgs;
	using default_interface = Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.OperationCompletedEventArgs"; }
	static constexpr unsigned name_length = 65;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::DataPackageView>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::DataPackageView;
	using default_interface = Windows::ApplicationModel::DataTransfer::IDataPackageView;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataPackageView"; }
	static constexpr unsigned name_length = 53;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::DataPackage>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::DataPackage;
	using default_interface = Windows::ApplicationModel::DataTransfer::IDataPackage;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataPackage"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::HtmlFormatHelper>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.HtmlFormatHelper"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::Clipboard>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.Clipboard"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::DataRequestDeferral>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::DataRequestDeferral;
	using default_interface = Windows::ApplicationModel::DataTransfer::IDataRequestDeferral;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataRequestDeferral"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::DataRequest>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::DataRequest;
	using default_interface = Windows::ApplicationModel::DataTransfer::IDataRequest;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataRequest"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::DataRequestedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::DataRequestedEventArgs;
	using default_interface = Windows::ApplicationModel::DataTransfer::IDataRequestedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataRequestedEventArgs"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::TargetApplicationChosenEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::TargetApplicationChosenEventArgs;
	using default_interface = Windows::ApplicationModel::DataTransfer::ITargetApplicationChosenEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.TargetApplicationChosenEventArgs"; }
	static constexpr unsigned name_length = 70;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::DataTransferManager>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::DataTransferManager;
	using default_interface = Windows::ApplicationModel::DataTransfer::IDataTransferManager;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.DataTransferManager"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::SharedStorageAccessManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.SharedStorageAccessManager"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::ShareTarget::QuickLink>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::ShareTarget::QuickLink;
	using default_interface = Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.ShareTarget.QuickLink"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::ApplicationModel::DataTransfer::ShareTarget::ShareOperation>
{
	using abi = ABI::Windows::ApplicationModel::DataTransfer::ShareTarget::ShareOperation;
	using default_interface = Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DataTransfer.ShareTarget.ShareOperation"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails>
{
	using abi = ABI::Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails;
	using default_interface = Windows::ApplicationModel::Search::ISearchPaneQueryLinguisticDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneQueryLinguisticDetails"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::ApplicationModel::Search::SearchPaneVisibilityChangedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Search::SearchPaneVisibilityChangedEventArgs;
	using default_interface = Windows::ApplicationModel::Search::ISearchPaneVisibilityChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneVisibilityChangedEventArgs"; }
	static constexpr unsigned name_length = 68;
};

template <> struct traits<Windows::ApplicationModel::Search::SearchPaneQueryChangedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Search::SearchPaneQueryChangedEventArgs;
	using default_interface = Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneQueryChangedEventArgs"; }
	static constexpr unsigned name_length = 63;
};

template <> struct traits<Windows::ApplicationModel::Search::SearchPaneQuerySubmittedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Search::SearchPaneQuerySubmittedEventArgs;
	using default_interface = Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneQuerySubmittedEventArgs"; }
	static constexpr unsigned name_length = 65;
};

template <> struct traits<Windows::ApplicationModel::Search::SearchPaneResultSuggestionChosenEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Search::SearchPaneResultSuggestionChosenEventArgs;
	using default_interface = Windows::ApplicationModel::Search::ISearchPaneResultSuggestionChosenEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneResultSuggestionChosenEventArgs"; }
	static constexpr unsigned name_length = 73;
};

template <> struct traits<Windows::ApplicationModel::Search::SearchSuggestionCollection>
{
	using abi = ABI::Windows::ApplicationModel::Search::SearchSuggestionCollection;
	using default_interface = Windows::ApplicationModel::Search::ISearchSuggestionCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Search.SearchSuggestionCollection"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestDeferral>
{
	using abi = ABI::Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestDeferral;
	using default_interface = Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestDeferral;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneSuggestionsRequestDeferral"; }
	static constexpr unsigned name_length = 68;
};

template <> struct traits<Windows::ApplicationModel::Search::SearchPaneSuggestionsRequest>
{
	using abi = ABI::Windows::ApplicationModel::Search::SearchPaneSuggestionsRequest;
	using default_interface = Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequest;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneSuggestionsRequest"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestedEventArgs;
	using default_interface = Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Search.SearchPaneSuggestionsRequestedEventArgs"; }
	static constexpr unsigned name_length = 71;
};

template <> struct traits<Windows::ApplicationModel::Search::LocalContentSuggestionSettings>
{
	using abi = ABI::Windows::ApplicationModel::Search::LocalContentSuggestionSettings;
	using default_interface = Windows::ApplicationModel::Search::ILocalContentSuggestionSettings;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Search.LocalContentSuggestionSettings"; }
	static constexpr unsigned name_length = 62;
};

template <> struct traits<Windows::ApplicationModel::Search::SearchPane>
{
	using abi = ABI::Windows::ApplicationModel::Search::SearchPane;
	using default_interface = Windows::ApplicationModel::Search::ISearchPane;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Search.SearchPane"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::ApplicationModel::Search::SearchQueryLinguisticDetails>
{
	using abi = ABI::Windows::ApplicationModel::Search::SearchQueryLinguisticDetails;
	using default_interface = Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Search.SearchQueryLinguisticDetails"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::ApplicationModel::Search::SearchSuggestionsRequestDeferral>
{
	using abi = ABI::Windows::ApplicationModel::Search::SearchSuggestionsRequestDeferral;
	using default_interface = Windows::ApplicationModel::Search::ISearchSuggestionsRequestDeferral;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Search.SearchSuggestionsRequestDeferral"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::ApplicationModel::Search::SearchSuggestionsRequest>
{
	using abi = ABI::Windows::ApplicationModel::Search::SearchSuggestionsRequest;
	using default_interface = Windows::ApplicationModel::Search::ISearchSuggestionsRequest;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Search.SearchSuggestionsRequest"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedDeferral>
{
	using abi = ABI::Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedDeferral;
	using default_interface = Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedDeferral;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintTaskConfigurationSaveRequestedDeferral"; }
	static constexpr unsigned name_length = 79;
};

template <> struct traits<Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequest>
{
	using abi = ABI::Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequest;
	using default_interface = Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequest;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintTaskConfigurationSaveRequest"; }
	static constexpr unsigned name_length = 69;
};

template <> struct traits<Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedEventArgs>
{
	using abi = ABI::Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedEventArgs;
	using default_interface = Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintTaskConfigurationSaveRequestedEventArgs"; }
	static constexpr unsigned name_length = 80;
};

template <> struct traits<Windows::Devices::Printers::Extensions::PrintTaskConfiguration>
{
	using abi = ABI::Windows::Devices::Printers::Extensions::PrintTaskConfiguration;
	using default_interface = Windows::Devices::Printers::Extensions::IPrintTaskConfiguration;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintTaskConfiguration"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::Devices::Printers::Extensions::PrintNotificationEventDetails>
{
	using abi = ABI::Windows::Devices::Printers::Extensions::PrintNotificationEventDetails;
	using default_interface = Windows::Devices::Printers::Extensions::IPrintNotificationEventDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintNotificationEventDetails"; }
	static constexpr unsigned name_length = 65;
};

template <> struct traits<Windows::Devices::Printers::Extensions::PrintExtensionContext>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Printers.Extensions.PrintExtensionContext"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::Devices::Printers::Extensions::Print3DWorkflowPrintRequestedEventArgs>
{
	using abi = ABI::Windows::Devices::Printers::Extensions::Print3DWorkflowPrintRequestedEventArgs;
	using default_interface = Windows::Devices::Printers::Extensions::IPrint3DWorkflowPrintRequestedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Printers.Extensions.Print3DWorkflowPrintRequestedEventArgs"; }
	static constexpr unsigned name_length = 74;
};

template <> struct traits<Windows::Devices::Printers::Extensions::Print3DWorkflow>
{
	using abi = ABI::Windows::Devices::Printers::Extensions::Print3DWorkflow;
	using default_interface = Windows::Devices::Printers::Extensions::IPrint3DWorkflow;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Devices.Printers.Extensions.Print3DWorkflow"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::Globalization::JapanesePhoneme>
{
	using abi = ABI::Windows::Globalization::JapanesePhoneme;
	using default_interface = Windows::Globalization::IJapanesePhoneme;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Globalization.JapanesePhoneme"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::Globalization::JapanesePhoneticAnalyzer>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Globalization.JapanesePhoneticAnalyzer"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Globalization::CalendarIdentifiers>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Globalization.CalendarIdentifiers"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::Globalization::ClockIdentifiers>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Globalization.ClockIdentifiers"; }
	static constexpr unsigned name_length = 38;
};

template <> struct traits<Windows::Globalization::NumeralSystemIdentifiers>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Globalization.NumeralSystemIdentifiers"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Globalization::CurrencyIdentifiers>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Globalization.CurrencyIdentifiers"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::Globalization::GeographicRegion>
{
	using abi = ABI::Windows::Globalization::GeographicRegion;
	using default_interface = Windows::Globalization::IGeographicRegion;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Globalization.GeographicRegion"; }
	static constexpr unsigned name_length = 38;
};

template <> struct traits<Windows::Globalization::Language>
{
	using abi = ABI::Windows::Globalization::Language;
	using default_interface = Windows::Globalization::ILanguage;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Globalization.Language"; }
	static constexpr unsigned name_length = 30;
};

template <> struct traits<Windows::Globalization::Calendar>
{
	using abi = ABI::Windows::Globalization::Calendar;
	using default_interface = Windows::Globalization::ICalendar;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Globalization.Calendar"; }
	static constexpr unsigned name_length = 30;
};

template <> struct traits<Windows::Globalization::ApplicationLanguages>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Globalization.ApplicationLanguages"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechRecognitionSemanticInterpretation>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechRecognitionSemanticInterpretation;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechRecognitionSemanticInterpretation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechRecognitionSemanticInterpretation"; }
	static constexpr unsigned name_length = 71;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechRecognitionResult>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechRecognitionResult;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechRecognitionResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechRecognitionResult"; }
	static constexpr unsigned name_length = 55;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechRecognitionTopicConstraint>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechRecognitionTopicConstraint;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechRecognitionTopicConstraint;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechRecognitionTopicConstraint"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechRecognitionListConstraint>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechRecognitionListConstraint;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechRecognitionListConstraint;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechRecognitionListConstraint"; }
	static constexpr unsigned name_length = 63;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechRecognitionGrammarFileConstraint>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechRecognitionGrammarFileConstraint;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechRecognitionGrammarFileConstraint;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechRecognitionGrammarFileConstraint"; }
	static constexpr unsigned name_length = 70;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechRecognizerTimeouts>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechRecognizerTimeouts;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechRecognizerTimeouts;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechRecognizerTimeouts"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechRecognizerUIOptions>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechRecognizerUIOptions;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechRecognizerUIOptions;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechRecognizerUIOptions"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechRecognitionCompilationResult>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechRecognitionCompilationResult;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechRecognitionCompilationResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechRecognitionCompilationResult"; }
	static constexpr unsigned name_length = 66;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechRecognizer>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechRecognizer;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechRecognizer;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechRecognizer"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechRecognitionQualityDegradingEventArgs>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechRecognitionQualityDegradingEventArgs;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechRecognitionQualityDegradingEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechRecognitionQualityDegradingEventArgs"; }
	static constexpr unsigned name_length = 74;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechRecognizerStateChangedEventArgs>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechRecognizerStateChangedEventArgs;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechRecognizerStateChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechRecognizerStateChangedEventArgs"; }
	static constexpr unsigned name_length = 69;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechRecognitionVoiceCommandDefinitionConstraint>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechRecognitionVoiceCommandDefinitionConstraint;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechRecognitionVoiceCommandDefinitionConstraint;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechRecognitionVoiceCommandDefinitionConstraint"; }
	static constexpr unsigned name_length = 81;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechContinuousRecognitionSession;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechContinuousRecognitionSession"; }
	static constexpr unsigned name_length = 66;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechRecognitionHypothesisGeneratedEventArgs>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechRecognitionHypothesisGeneratedEventArgs;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechRecognitionHypothesisGeneratedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechRecognitionHypothesisGeneratedEventArgs"; }
	static constexpr unsigned name_length = 77;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechRecognitionHypothesis>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechRecognitionHypothesis;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechRecognitionHypothesis;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechRecognitionHypothesis"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechContinuousRecognitionCompletedEventArgs>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechContinuousRecognitionCompletedEventArgs;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechContinuousRecognitionCompletedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechContinuousRecognitionCompletedEventArgs"; }
	static constexpr unsigned name_length = 77;
};

template <> struct traits<Windows::Media::SpeechRecognition::SpeechContinuousRecognitionResultGeneratedEventArgs>
{
	using abi = ABI::Windows::Media::SpeechRecognition::SpeechContinuousRecognitionResultGeneratedEventArgs;
	using default_interface = Windows::Media::SpeechRecognition::ISpeechContinuousRecognitionResultGeneratedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Media.SpeechRecognition.SpeechContinuousRecognitionResultGeneratedEventArgs"; }
	static constexpr unsigned name_length = 83;
};

template <> struct traits<Windows::Security::Authentication::Web::WebAuthenticationResult>
{
	using abi = ABI::Windows::Security::Authentication::Web::WebAuthenticationResult;
	using default_interface = Windows::Security::Authentication::Web::IWebAuthenticationResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.WebAuthenticationResult"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::Security::Authentication::Web::WebAuthenticationBroker>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.WebAuthenticationBroker"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::Security::Authentication::Web::Core::WebTokenRequest>
{
	using abi = ABI::Windows::Security::Authentication::Web::Core::WebTokenRequest;
	using default_interface = Windows::Security::Authentication::Web::Core::IWebTokenRequest;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Core.WebTokenRequest"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::Security::Authentication::Web::Core::WebAuthenticationCoreManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Core.WebAuthenticationCoreManager"; }
	static constexpr unsigned name_length = 69;
};

template <> struct traits<Windows::Security::Authentication::Web::Core::WebProviderError>
{
	using abi = ABI::Windows::Security::Authentication::Web::Core::WebProviderError;
	using default_interface = Windows::Security::Authentication::Web::Core::IWebProviderError;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Core.WebProviderError"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::Security::Authentication::Web::Core::WebTokenResponse>
{
	using abi = ABI::Windows::Security::Authentication::Web::Core::WebTokenResponse;
	using default_interface = Windows::Security::Authentication::Web::Core::IWebTokenResponse;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Core.WebTokenResponse"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::Security::Authentication::Web::Core::WebTokenRequestResult>
{
	using abi = ABI::Windows::Security::Authentication::Web::Core::WebTokenRequestResult;
	using default_interface = Windows::Security::Authentication::Web::Core::IWebTokenRequestResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Core.WebTokenRequestResult"; }
	static constexpr unsigned name_length = 62;
};

template <> struct traits<Windows::Web::Http::HttpCookieManager>
{
	using abi = ABI::Windows::Web::Http::HttpCookieManager;
	using default_interface = Windows::Web::Http::IHttpCookieManager;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.HttpCookieManager"; }
	static constexpr unsigned name_length = 34;
};

template <> struct traits<Windows::Web::Http::HttpRequestMessage>
{
	using abi = ABI::Windows::Web::Http::HttpRequestMessage;
	using default_interface = Windows::Web::Http::IHttpRequestMessage;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.HttpRequestMessage"; }
	static constexpr unsigned name_length = 35;
};

template <> struct traits<Windows::Web::Http::HttpResponseMessage>
{
	using abi = ABI::Windows::Web::Http::HttpResponseMessage;
	using default_interface = Windows::Web::Http::IHttpResponseMessage;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.HttpResponseMessage"; }
	static constexpr unsigned name_length = 36;
};

template <> struct traits<Windows::Web::Http::Filters::HttpCacheControl>
{
	using abi = ABI::Windows::Web::Http::Filters::HttpCacheControl;
	using default_interface = Windows::Web::Http::Filters::IHttpCacheControl;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Filters.HttpCacheControl"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::Web::Http::Filters::HttpBaseProtocolFilter>
{
	using abi = ABI::Windows::Web::Http::Filters::HttpBaseProtocolFilter;
	using default_interface = Windows::Web::Http::Filters::IHttpBaseProtocolFilter;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Filters.HttpBaseProtocolFilter"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::Web::Http::HttpMethod>
{
	using abi = ABI::Windows::Web::Http::HttpMethod;
	using default_interface = Windows::Web::Http::IHttpMethod;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.HttpMethod"; }
	static constexpr unsigned name_length = 27;
};

template <> struct traits<Windows::Web::Http::Headers::HttpContentHeaderCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpContentHeaderCollection;
	using default_interface = Windows::Web::Http::Headers::IHttpContentHeaderCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpContentHeaderCollection"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Web::Http::Headers::HttpRequestHeaderCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpRequestHeaderCollection;
	using default_interface = Windows::Web::Http::Headers::IHttpRequestHeaderCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpRequestHeaderCollection"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Web::Http::Headers::HttpResponseHeaderCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpResponseHeaderCollection;
	using default_interface = Windows::Web::Http::Headers::IHttpResponseHeaderCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpResponseHeaderCollection"; }
	static constexpr unsigned name_length = 53;
};

template <> struct traits<Windows::Web::Http::Headers::HttpContentDispositionHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpContentDispositionHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpContentDispositionHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpContentDispositionHeaderValue"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::Web::Http::Headers::HttpContentCodingHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpContentCodingHeaderValueCollection;
	using default_interface = Windows::Web::Http::Headers::IHttpContentCodingHeaderValueCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpContentCodingHeaderValueCollection"; }
	static constexpr unsigned name_length = 63;
};

template <> struct traits<Windows::Web::Http::Headers::HttpLanguageHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpLanguageHeaderValueCollection;
	using default_interface = Windows::Web::Http::Headers::IHttpLanguageHeaderValueCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpLanguageHeaderValueCollection"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::Web::Http::Headers::HttpContentRangeHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpContentRangeHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpContentRangeHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpContentRangeHeaderValue"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Web::Http::Headers::HttpMediaTypeHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpMediaTypeHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpMediaTypeHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpMediaTypeHeaderValue"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValueCollection;
	using default_interface = Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValueCollection"; }
	static constexpr unsigned name_length = 70;
};

template <> struct traits<Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValueCollection;
	using default_interface = Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValueCollection"; }
	static constexpr unsigned name_length = 74;
};

template <> struct traits<Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValueCollection;
	using default_interface = Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValueCollection"; }
	static constexpr unsigned name_length = 74;
};

template <> struct traits<Windows::Web::Http::Headers::HttpCredentialsHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpCredentialsHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpCredentialsHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpCredentialsHeaderValue"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection;
	using default_interface = Windows::Web::Http::Headers::IHttpCacheDirectiveHeaderValueCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpCacheDirectiveHeaderValueCollection"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection;
	using default_interface = Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpConnectionOptionHeaderValueCollection"; }
	static constexpr unsigned name_length = 66;
};

template <> struct traits<Windows::Web::Http::Headers::HttpCookiePairHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpCookiePairHeaderValueCollection;
	using default_interface = Windows::Web::Http::Headers::IHttpCookiePairHeaderValueCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpCookiePairHeaderValueCollection"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::Web::Http::Headers::HttpExpectationHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpExpectationHeaderValueCollection;
	using default_interface = Windows::Web::Http::Headers::IHttpExpectationHeaderValueCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpExpectationHeaderValueCollection"; }
	static constexpr unsigned name_length = 61;
};

template <> struct traits<Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection;
	using default_interface = Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpTransferCodingHeaderValueCollection"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::Web::Http::Headers::HttpProductInfoHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpProductInfoHeaderValueCollection;
	using default_interface = Windows::Web::Http::Headers::IHttpProductInfoHeaderValueCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpProductInfoHeaderValueCollection"; }
	static constexpr unsigned name_length = 61;
};

template <> struct traits<Windows::Web::Http::Headers::HttpMethodHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpMethodHeaderValueCollection;
	using default_interface = Windows::Web::Http::Headers::IHttpMethodHeaderValueCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpMethodHeaderValueCollection"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection;
	using default_interface = Windows::Web::Http::Headers::IHttpChallengeHeaderValueCollection;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpChallengeHeaderValueCollection"; }
	static constexpr unsigned name_length = 59;
};

template <> struct traits<Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpDateOrDeltaHeaderValue"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::Web::Http::Headers::HttpNameValueHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpNameValueHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpNameValueHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpNameValueHeaderValue"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::Web::Http::Headers::HttpChallengeHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpChallengeHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpChallengeHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpChallengeHeaderValue"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpConnectionOptionHeaderValue"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::Web::Http::Headers::HttpContentCodingHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpContentCodingHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpContentCodingHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpContentCodingHeaderValue"; }
	static constexpr unsigned name_length = 53;
};

template <> struct traits<Windows::Web::Http::Headers::HttpCookiePairHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpCookiePairHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpCookiePairHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpCookiePairHeaderValue"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::Web::Http::Headers::HttpExpectationHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpExpectationHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpExpectationHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpExpectationHeaderValue"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpLanguageRangeWithQualityHeaderValue"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpMediaTypeWithQualityHeaderValue"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::Web::Http::Headers::HttpProductHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpProductHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpProductHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpProductHeaderValue"; }
	static constexpr unsigned name_length = 47;
};

template <> struct traits<Windows::Web::Http::Headers::HttpProductInfoHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpProductInfoHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpProductInfoHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpProductInfoHeaderValue"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpContentCodingWithQualityHeaderValue"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::Web::Http::Headers::HttpTransferCodingHeaderValue>
{
	using abi = ABI::Windows::Web::Http::Headers::HttpTransferCodingHeaderValue;
	using default_interface = Windows::Web::Http::Headers::IHttpTransferCodingHeaderValue;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.Headers.HttpTransferCodingHeaderValue"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::Web::Http::HttpClient>
{
	using abi = ABI::Windows::Web::Http::HttpClient;
	using default_interface = Windows::Web::Http::IHttpClient;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.HttpClient"; }
	static constexpr unsigned name_length = 27;
};

template <> struct traits<Windows::Web::Http::HttpCookie>
{
	using abi = ABI::Windows::Web::Http::HttpCookie;
	using default_interface = Windows::Web::Http::IHttpCookie;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.HttpCookie"; }
	static constexpr unsigned name_length = 27;
};

template <> struct traits<Windows::Web::Http::HttpCookieCollection>
{
	using abi = ABI::Windows::Web::Http::HttpCookieCollection;
	using default_interface = Windows::Foundation::Collections::IVectorView<Windows::Web::Http::HttpCookie>;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.HttpCookieCollection"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::Web::Http::HttpTransportInformation>
{
	using abi = ABI::Windows::Web::Http::HttpTransportInformation;
	using default_interface = Windows::Web::Http::IHttpTransportInformation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.HttpTransportInformation"; }
	static constexpr unsigned name_length = 41;
};

template <> struct traits<Windows::Web::Http::HttpStringContent>
{
	using abi = ABI::Windows::Web::Http::HttpStringContent;
	using default_interface = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.HttpStringContent"; }
	static constexpr unsigned name_length = 34;
};

template <> struct traits<Windows::Web::Http::HttpBufferContent>
{
	using abi = ABI::Windows::Web::Http::HttpBufferContent;
	using default_interface = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.HttpBufferContent"; }
	static constexpr unsigned name_length = 34;
};

template <> struct traits<Windows::Web::Http::HttpStreamContent>
{
	using abi = ABI::Windows::Web::Http::HttpStreamContent;
	using default_interface = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.HttpStreamContent"; }
	static constexpr unsigned name_length = 34;
};

template <> struct traits<Windows::Web::Http::HttpFormUrlEncodedContent>
{
	using abi = ABI::Windows::Web::Http::HttpFormUrlEncodedContent;
	using default_interface = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.HttpFormUrlEncodedContent"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::Web::Http::HttpMultipartContent>
{
	using abi = ABI::Windows::Web::Http::HttpMultipartContent;
	using default_interface = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.HttpMultipartContent"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::Web::Http::HttpMultipartFormDataContent>
{
	using abi = ABI::Windows::Web::Http::HttpMultipartFormDataContent;
	using default_interface = Windows::Web::Http::IHttpContent;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Web.Http.HttpMultipartFormDataContent"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest;
	using default_interface = Windows::Security::Authentication::Web::Provider::IWebProviderTokenRequest;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Provider.WebProviderTokenRequest"; }
	static constexpr unsigned name_length = 68;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse;
	using default_interface = Windows::Security::Authentication::Web::Provider::IWebProviderTokenResponse;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Provider.WebProviderTokenResponse"; }
	static constexpr unsigned name_length = 69;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::WebAccountClientView>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::WebAccountClientView;
	using default_interface = Windows::Security::Authentication::Web::Provider::IWebAccountClientView;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Provider.WebAccountClientView"; }
	static constexpr unsigned name_length = 65;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::WebAccountManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Provider.WebAccountManager"; }
	static constexpr unsigned name_length = 62;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::WebAccountProviderRequestTokenOperation;
	using default_interface = Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRequestTokenOperation"; }
	static constexpr unsigned name_length = 84;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::WebAccountProviderGetTokenSilentOperation;
	using default_interface = Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Provider.WebAccountProviderGetTokenSilentOperation"; }
	static constexpr unsigned name_length = 86;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::WebAccountProviderAddAccountOperation;
	using default_interface = Windows::Security::Authentication::Web::Provider::IWebAccountProviderAddAccountOperation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Provider.WebAccountProviderAddAccountOperation"; }
	static constexpr unsigned name_length = 82;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::WebAccountProviderManageAccountOperation;
	using default_interface = Windows::Security::Authentication::Web::Provider::IWebAccountProviderManageAccountOperation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Provider.WebAccountProviderManageAccountOperation"; }
	static constexpr unsigned name_length = 85;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::WebAccountProviderDeleteAccountOperation;
	using default_interface = Windows::Security::Authentication::Web::Provider::IWebAccountProviderDeleteAccountOperation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Provider.WebAccountProviderDeleteAccountOperation"; }
	static constexpr unsigned name_length = 85;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::WebAccountProviderSignOutAccountOperation;
	using default_interface = Windows::Security::Authentication::Web::Provider::IWebAccountProviderSignOutAccountOperation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Provider.WebAccountProviderSignOutAccountOperation"; }
	static constexpr unsigned name_length = 86;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::WebAccountProviderRetrieveCookiesOperation;
	using default_interface = Windows::Security::Authentication::Web::Provider::IWebAccountProviderRetrieveCookiesOperation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Provider.WebAccountProviderRetrieveCookiesOperation"; }
	static constexpr unsigned name_length = 87;
};

template <> struct traits<Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails>
{
	using abi = ABI::Windows::Security::Authentication::Web::Provider::WebAccountProviderTriggerDetails;
	using default_interface = Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Security.Authentication.Web.Provider.WebAccountProviderTriggerDetails"; }
	static constexpr unsigned name_length = 77;
};

template <> struct traits<Windows::Storage::Pickers::Provider::FileRemovedEventArgs>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::FileRemovedEventArgs;
	using default_interface = Windows::Storage::Pickers::Provider::IFileRemovedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Pickers.Provider.FileRemovedEventArgs"; }
	static constexpr unsigned name_length = 53;
};

template <> struct traits<Windows::Storage::Pickers::Provider::FileOpenPickerUI>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::FileOpenPickerUI;
	using default_interface = Windows::Storage::Pickers::Provider::IFileOpenPickerUI;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Pickers.Provider.FileOpenPickerUI"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::Storage::Pickers::Provider::PickerClosingEventArgs>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::PickerClosingEventArgs;
	using default_interface = Windows::Storage::Pickers::Provider::IPickerClosingEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Pickers.Provider.PickerClosingEventArgs"; }
	static constexpr unsigned name_length = 55;
};

template <> struct traits<Windows::Storage::Pickers::Provider::PickerClosingOperation>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::PickerClosingOperation;
	using default_interface = Windows::Storage::Pickers::Provider::IPickerClosingOperation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Pickers.Provider.PickerClosingOperation"; }
	static constexpr unsigned name_length = 55;
};

template <> struct traits<Windows::Storage::Pickers::Provider::PickerClosingDeferral>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::PickerClosingDeferral;
	using default_interface = Windows::Storage::Pickers::Provider::IPickerClosingDeferral;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Pickers.Provider.PickerClosingDeferral"; }
	static constexpr unsigned name_length = 54;
};

template <> struct traits<Windows::Storage::Pickers::Provider::FileSavePickerUI>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::FileSavePickerUI;
	using default_interface = Windows::Storage::Pickers::Provider::IFileSavePickerUI;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Pickers.Provider.FileSavePickerUI"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs;
	using default_interface = Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Pickers.Provider.TargetFileRequestedEventArgs"; }
	static constexpr unsigned name_length = 61;
};

template <> struct traits<Windows::Storage::Pickers::Provider::TargetFileRequest>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::TargetFileRequest;
	using default_interface = Windows::Storage::Pickers::Provider::ITargetFileRequest;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Pickers.Provider.TargetFileRequest"; }
	static constexpr unsigned name_length = 50;
};

template <> struct traits<Windows::Storage::Pickers::Provider::TargetFileRequestDeferral>
{
	using abi = ABI::Windows::Storage::Pickers::Provider::TargetFileRequestDeferral;
	using default_interface = Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.Pickers.Provider.TargetFileRequestDeferral"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::ApplicationModel::Core::CoreApplicationView>
{
	using abi = ABI::Windows::ApplicationModel::Core::CoreApplicationView;
	using default_interface = Windows::ApplicationModel::Core::ICoreApplicationView;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Core.CoreApplicationView"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::System::ProtocolForResultsOperation>
{
	using abi = ABI::Windows::System::ProtocolForResultsOperation;
	using default_interface = Windows::System::IProtocolForResultsOperation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.System.ProtocolForResultsOperation"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::ApplicationModel::Activation::SplashScreen>
{
	using abi = ABI::Windows::ApplicationModel::Activation::SplashScreen;
	using default_interface = Windows::ApplicationModel::Activation::ISplashScreen;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.SplashScreen"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::ApplicationModel::Activation::LaunchActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::LaunchActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.LaunchActivatedEventArgs"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::ApplicationModel::Activation::SearchActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::SearchActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::ISearchActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.SearchActivatedEventArgs"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::ApplicationModel::Activation::ShareTargetActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ShareTargetActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.ShareTargetActivatedEventArgs"; }
	static constexpr unsigned name_length = 65;
};

template <> struct traits<Windows::ApplicationModel::Activation::FileActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::FileActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IFileActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.FileActivatedEventArgs"; }
	static constexpr unsigned name_length = 58;
};

template <> struct traits<Windows::ApplicationModel::Activation::ProtocolActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ProtocolActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.ProtocolActivatedEventArgs"; }
	static constexpr unsigned name_length = 62;
};

template <> struct traits<Windows::ApplicationModel::Activation::ProtocolForResultsActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ProtocolForResultsActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IProtocolForResultsActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.ProtocolForResultsActivatedEventArgs"; }
	static constexpr unsigned name_length = 72;
};

template <> struct traits<Windows::ApplicationModel::Activation::FileOpenPickerActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::FileOpenPickerActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.FileOpenPickerActivatedEventArgs"; }
	static constexpr unsigned name_length = 68;
};

template <> struct traits<Windows::ApplicationModel::Activation::FileSavePickerActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::FileSavePickerActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.FileSavePickerActivatedEventArgs"; }
	static constexpr unsigned name_length = 68;
};

template <> struct traits<Windows::ApplicationModel::Activation::CachedFileUpdaterActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::CachedFileUpdaterActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.CachedFileUpdaterActivatedEventArgs"; }
	static constexpr unsigned name_length = 71;
};

template <> struct traits<Windows::ApplicationModel::Activation::ContactPickerActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ContactPickerActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.ContactPickerActivatedEventArgs"; }
	static constexpr unsigned name_length = 67;
};

template <> struct traits<Windows::ApplicationModel::Activation::DeviceActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::DeviceActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.DeviceActivatedEventArgs"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::ApplicationModel::Activation::PrintTaskSettingsActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::PrintTaskSettingsActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.PrintTaskSettingsActivatedEventArgs"; }
	static constexpr unsigned name_length = 71;
};

template <> struct traits<Windows::ApplicationModel::Activation::Print3DWorkflowActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::Print3DWorkflowActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IPrint3DWorkflowActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.Print3DWorkflowActivatedEventArgs"; }
	static constexpr unsigned name_length = 69;
};

template <> struct traits<Windows::ApplicationModel::Activation::CameraSettingsActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::CameraSettingsActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.CameraSettingsActivatedEventArgs"; }
	static constexpr unsigned name_length = 68;
};

template <> struct traits<Windows::ApplicationModel::Activation::AppointmentsProviderAddAppointmentActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::AppointmentsProviderAddAppointmentActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.AppointmentsProviderAddAppointmentActivatedEventArgs"; }
	static constexpr unsigned name_length = 88;
};

template <> struct traits<Windows::ApplicationModel::Activation::AppointmentsProviderReplaceAppointmentActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::AppointmentsProviderReplaceAppointmentActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.AppointmentsProviderReplaceAppointmentActivatedEventArgs"; }
	static constexpr unsigned name_length = 92;
};

template <> struct traits<Windows::ApplicationModel::Activation::AppointmentsProviderRemoveAppointmentActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::AppointmentsProviderRemoveAppointmentActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.AppointmentsProviderRemoveAppointmentActivatedEventArgs"; }
	static constexpr unsigned name_length = 91;
};

template <> struct traits<Windows::ApplicationModel::Activation::AppointmentsProviderShowAppointmentDetailsActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::AppointmentsProviderShowAppointmentDetailsActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.AppointmentsProviderShowAppointmentDetailsActivatedEventArgs"; }
	static constexpr unsigned name_length = 96;
};

template <> struct traits<Windows::ApplicationModel::Activation::AppointmentsProviderShowTimeFrameActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::AppointmentsProviderShowTimeFrameActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.AppointmentsProviderShowTimeFrameActivatedEventArgs"; }
	static constexpr unsigned name_length = 87;
};

template <> struct traits<Windows::ApplicationModel::Activation::ContactCallActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ContactCallActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.ContactCallActivatedEventArgs"; }
	static constexpr unsigned name_length = 65;
};

template <> struct traits<Windows::ApplicationModel::Activation::ContactMessageActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ContactMessageActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.ContactMessageActivatedEventArgs"; }
	static constexpr unsigned name_length = 68;
};

template <> struct traits<Windows::ApplicationModel::Activation::ContactMapActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ContactMapActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.ContactMapActivatedEventArgs"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::ApplicationModel::Activation::ContactPostActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ContactPostActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.ContactPostActivatedEventArgs"; }
	static constexpr unsigned name_length = 65;
};

template <> struct traits<Windows::ApplicationModel::Activation::ContactVideoCallActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ContactVideoCallActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.ContactVideoCallActivatedEventArgs"; }
	static constexpr unsigned name_length = 70;
};

template <> struct traits<Windows::ApplicationModel::Activation::RestrictedLaunchActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::RestrictedLaunchActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.RestrictedLaunchActivatedEventArgs"; }
	static constexpr unsigned name_length = 70;
};

template <> struct traits<Windows::ApplicationModel::Activation::LockScreenCallActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::LockScreenCallActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.LockScreenCallActivatedEventArgs"; }
	static constexpr unsigned name_length = 68;
};

template <> struct traits<Windows::ApplicationModel::Activation::LockScreenActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::LockScreenActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::ILockScreenActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.LockScreenActivatedEventArgs"; }
	static constexpr unsigned name_length = 64;
};

template <> struct traits<Windows::ApplicationModel::Activation::FileOpenPickerContinuationEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::FileOpenPickerContinuationEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IFileOpenPickerContinuationEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.FileOpenPickerContinuationEventArgs"; }
	static constexpr unsigned name_length = 71;
};

template <> struct traits<Windows::ApplicationModel::Activation::FileSavePickerContinuationEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::FileSavePickerContinuationEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IFileSavePickerContinuationEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.FileSavePickerContinuationEventArgs"; }
	static constexpr unsigned name_length = 71;
};

template <> struct traits<Windows::ApplicationModel::Activation::FolderPickerContinuationEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::FolderPickerContinuationEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IFolderPickerContinuationEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.FolderPickerContinuationEventArgs"; }
	static constexpr unsigned name_length = 69;
};

template <> struct traits<Windows::ApplicationModel::Activation::WebAccountProviderActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::WebAccountProviderActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IWebAccountProviderActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.WebAccountProviderActivatedEventArgs"; }
	static constexpr unsigned name_length = 72;
};

template <> struct traits<Windows::ApplicationModel::Activation::ToastNotificationActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::ToastNotificationActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IToastNotificationActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.ToastNotificationActivatedEventArgs"; }
	static constexpr unsigned name_length = 71;
};

template <> struct traits<Windows::ApplicationModel::Activation::DialReceiverActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::DialReceiverActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IDialReceiverActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.DialReceiverActivatedEventArgs"; }
	static constexpr unsigned name_length = 66;
};

template <> struct traits<Windows::ApplicationModel::Activation::DevicePairingActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::DevicePairingActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IDevicePairingActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.DevicePairingActivatedEventArgs"; }
	static constexpr unsigned name_length = 67;
};

template <> struct traits<Windows::ApplicationModel::Activation::VoiceCommandActivatedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Activation::VoiceCommandActivatedEventArgs;
	using default_interface = Windows::ApplicationModel::Activation::IVoiceCommandActivatedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Activation.VoiceCommandActivatedEventArgs"; }
	static constexpr unsigned name_length = 66;
};

template <> struct traits<Windows::ApplicationModel::AppDisplayInfo>
{
	using abi = ABI::Windows::ApplicationModel::AppDisplayInfo;
	using default_interface = Windows::ApplicationModel::IAppDisplayInfo;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.AppDisplayInfo"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::ApplicationModel::SuspendingEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::SuspendingEventArgs;
	using default_interface = Windows::ApplicationModel::ISuspendingEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.SuspendingEventArgs"; }
	static constexpr unsigned name_length = 44;
};

template <> struct traits<Windows::ApplicationModel::Core::AppListEntry>
{
	using abi = ABI::Windows::ApplicationModel::Core::AppListEntry;
	using default_interface = Windows::ApplicationModel::Core::IAppListEntry;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Core.AppListEntry"; }
	static constexpr unsigned name_length = 42;
};

template <> struct traits<Windows::ApplicationModel::Core::CoreApplication>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Core.CoreApplication"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::ApplicationModel::Core::CoreApplicationViewTitleBar>
{
	using abi = ABI::Windows::ApplicationModel::Core::CoreApplicationViewTitleBar;
	using default_interface = Windows::ApplicationModel::Core::ICoreApplicationViewTitleBar;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Core.CoreApplicationViewTitleBar"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs;
	using default_interface = Windows::ApplicationModel::Core::IUnhandledErrorDetectedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Core.UnhandledErrorDetectedEventArgs"; }
	static constexpr unsigned name_length = 61;
};

template <> struct traits<Windows::ApplicationModel::Core::HostedViewClosingEventArgs>
{
	using abi = ABI::Windows::ApplicationModel::Core::HostedViewClosingEventArgs;
	using default_interface = Windows::ApplicationModel::Core::IHostedViewClosingEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Core.HostedViewClosingEventArgs"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::ApplicationModel::Core::UnhandledError>
{
	using abi = ABI::Windows::ApplicationModel::Core::UnhandledError;
	using default_interface = Windows::ApplicationModel::Core::IUnhandledError;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Core.UnhandledError"; }
	static constexpr unsigned name_length = 44;
};

template <> struct traits<Windows::ApplicationModel::AppInfo>
{
	using abi = ABI::Windows::ApplicationModel::AppInfo;
	using default_interface = Windows::ApplicationModel::IAppInfo;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.AppInfo"; }
	static constexpr unsigned name_length = 32;
};

template <> struct traits<Windows::ApplicationModel::SuspendingDeferral>
{
	using abi = ABI::Windows::ApplicationModel::SuspendingDeferral;
	using default_interface = Windows::ApplicationModel::ISuspendingDeferral;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.SuspendingDeferral"; }
	static constexpr unsigned name_length = 43;
};

template <> struct traits<Windows::ApplicationModel::SuspendingOperation>
{
	using abi = ABI::Windows::ApplicationModel::SuspendingOperation;
	using default_interface = Windows::ApplicationModel::ISuspendingOperation;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.SuspendingOperation"; }
	static constexpr unsigned name_length = 44;
};

template <> struct traits<Windows::ApplicationModel::PackageStatus>
{
	using abi = ABI::Windows::ApplicationModel::PackageStatus;
	using default_interface = Windows::ApplicationModel::IPackageStatus;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.PackageStatus"; }
	static constexpr unsigned name_length = 38;
};

template <> struct traits<Windows::ApplicationModel::PackageId>
{
	using abi = ABI::Windows::ApplicationModel::PackageId;
	using default_interface = Windows::ApplicationModel::IPackageId;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.PackageId"; }
	static constexpr unsigned name_length = 34;
};

template <> struct traits<Windows::ApplicationModel::Package>
{
	using abi = ABI::Windows::ApplicationModel::Package;
	using default_interface = Windows::ApplicationModel::IPackage;
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.Package"; }
	static constexpr unsigned name_length = 32;
};

template <> struct traits<Windows::ApplicationModel::DesignMode>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.ApplicationModel.DesignMode"; }
	static constexpr unsigned name_length = 35;
};

template <> struct traits<Windows::System::UserChangedEventArgs>
{
	using abi = ABI::Windows::System::UserChangedEventArgs;
	using default_interface = Windows::System::IUserChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.System.UserChangedEventArgs"; }
	static constexpr unsigned name_length = 35;
};

template <> struct traits<Windows::Gaming::Input::Headset>
{
	using abi = ABI::Windows::Gaming::Input::Headset;
	using default_interface = Windows::Gaming::Input::IHeadset;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Gaming.Input.Headset"; }
	static constexpr unsigned name_length = 28;
};

template <> struct traits<Windows::Gaming::Input::Gamepad>
{
	using abi = ABI::Windows::Gaming::Input::Gamepad;
	using default_interface = Windows::Gaming::Input::IGamepad;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Gaming.Input.Gamepad"; }
	static constexpr unsigned name_length = 28;
};

template <> struct traits<Windows::System::AppMemoryUsageLimitChangingEventArgs>
{
	using abi = ABI::Windows::System::AppMemoryUsageLimitChangingEventArgs;
	using default_interface = Windows::System::IAppMemoryUsageLimitChangingEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.System.AppMemoryUsageLimitChangingEventArgs"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::System::AppMemoryReport>
{
	using abi = ABI::Windows::System::AppMemoryReport;
	using default_interface = Windows::System::IAppMemoryReport;
	static constexpr wchar_t const * name() noexcept { return L"Windows.System.AppMemoryReport"; }
	static constexpr unsigned name_length = 30;
};

template <> struct traits<Windows::System::ProcessMemoryReport>
{
	using abi = ABI::Windows::System::ProcessMemoryReport;
	using default_interface = Windows::System::IProcessMemoryReport;
	static constexpr wchar_t const * name() noexcept { return L"Windows.System.ProcessMemoryReport"; }
	static constexpr unsigned name_length = 34;
};

template <> struct traits<Windows::System::MemoryManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.System.MemoryManager"; }
	static constexpr unsigned name_length = 28;
};

template <> struct traits<Windows::System::UserWatcher>
{
	using abi = ABI::Windows::System::UserWatcher;
	using default_interface = Windows::System::IUserWatcher;
	static constexpr wchar_t const * name() noexcept { return L"Windows.System.UserWatcher"; }
	static constexpr unsigned name_length = 26;
};

template <> struct traits<Windows::System::UserAuthenticationStatusChangingEventArgs>
{
	using abi = ABI::Windows::System::UserAuthenticationStatusChangingEventArgs;
	using default_interface = Windows::System::IUserAuthenticationStatusChangingEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.System.UserAuthenticationStatusChangingEventArgs"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::System::UserAuthenticationStatusChangeDeferral>
{
	using abi = ABI::Windows::System::UserAuthenticationStatusChangeDeferral;
	using default_interface = Windows::System::IUserAuthenticationStatusChangeDeferral;
	static constexpr wchar_t const * name() noexcept { return L"Windows.System.UserAuthenticationStatusChangeDeferral"; }
	static constexpr unsigned name_length = 53;
};

template <> struct traits<Windows::System::KnownUserProperties>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.System.KnownUserProperties"; }
	static constexpr unsigned name_length = 34;
};

template <> struct traits<Windows::System::LaunchUriResult>
{
	using abi = ABI::Windows::System::LaunchUriResult;
	using default_interface = Windows::System::ILaunchUriResult;
	static constexpr wchar_t const * name() noexcept { return L"Windows.System.LaunchUriResult"; }
	static constexpr unsigned name_length = 30;
};

template <> struct traits<Windows::System::LauncherUIOptions>
{
	using abi = ABI::Windows::System::LauncherUIOptions;
	using default_interface = Windows::System::ILauncherUIOptions;
	static constexpr wchar_t const * name() noexcept { return L"Windows.System.LauncherUIOptions"; }
	static constexpr unsigned name_length = 32;
};

template <> struct traits<Windows::System::LauncherOptions>
{
	using abi = ABI::Windows::System::LauncherOptions;
	using default_interface = Windows::System::ILauncherOptions;
	static constexpr wchar_t const * name() noexcept { return L"Windows.System.LauncherOptions"; }
	static constexpr unsigned name_length = 30;
};

template <> struct traits<Windows::System::FolderLauncherOptions>
{
	using abi = ABI::Windows::System::FolderLauncherOptions;
	using default_interface = Windows::System::IFolderLauncherOptions;
	static constexpr wchar_t const * name() noexcept { return L"Windows.System.FolderLauncherOptions"; }
	static constexpr unsigned name_length = 36;
};

template <> struct traits<Windows::System::Launcher>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.System.Launcher"; }
	static constexpr unsigned name_length = 23;
};

template <> struct traits<Windows::Storage::KnownFolders>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.KnownFolders"; }
	static constexpr unsigned name_length = 28;
};

template <> struct traits<Windows::Storage::DownloadsFolder>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.DownloadsFolder"; }
	static constexpr unsigned name_length = 31;
};

template <> struct traits<Windows::Storage::StreamedFileDataRequest>
{
	using abi = ABI::Windows::Storage::StreamedFileDataRequest;
	using default_interface = Windows::Storage::Streams::IOutputStream;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.StreamedFileDataRequest"; }
	static constexpr unsigned name_length = 39;
};

template <> struct traits<Windows::Storage::StorageStreamTransaction>
{
	using abi = ABI::Windows::Storage::StorageStreamTransaction;
	using default_interface = Windows::Storage::IStorageStreamTransaction;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.StorageStreamTransaction"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::Storage::StorageProvider>
{
	using abi = ABI::Windows::Storage::StorageProvider;
	using default_interface = Windows::Storage::IStorageProvider;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.StorageProvider"; }
	static constexpr unsigned name_length = 31;
};

template <> struct traits<Windows::Storage::FileIO>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.FileIO"; }
	static constexpr unsigned name_length = 22;
};

template <> struct traits<Windows::Storage::PathIO>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.PathIO"; }
	static constexpr unsigned name_length = 22;
};

template <> struct traits<Windows::Storage::CachedFileManager>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.CachedFileManager"; }
	static constexpr unsigned name_length = 33;
};

template <> struct traits<Windows::Storage::SystemAudioProperties>
{
	using abi = ABI::Windows::Storage::SystemAudioProperties;
	using default_interface = Windows::Storage::ISystemAudioProperties;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.SystemAudioProperties"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::Storage::SystemGPSProperties>
{
	using abi = ABI::Windows::Storage::SystemGPSProperties;
	using default_interface = Windows::Storage::ISystemGPSProperties;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.SystemGPSProperties"; }
	static constexpr unsigned name_length = 35;
};

template <> struct traits<Windows::Storage::SystemImageProperties>
{
	using abi = ABI::Windows::Storage::SystemImageProperties;
	using default_interface = Windows::Storage::ISystemImageProperties;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.SystemImageProperties"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::Storage::SystemMediaProperties>
{
	using abi = ABI::Windows::Storage::SystemMediaProperties;
	using default_interface = Windows::Storage::ISystemMediaProperties;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.SystemMediaProperties"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::Storage::SystemMusicProperties>
{
	using abi = ABI::Windows::Storage::SystemMusicProperties;
	using default_interface = Windows::Storage::ISystemMusicProperties;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.SystemMusicProperties"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::Storage::SystemPhotoProperties>
{
	using abi = ABI::Windows::Storage::SystemPhotoProperties;
	using default_interface = Windows::Storage::ISystemPhotoProperties;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.SystemPhotoProperties"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::Storage::SystemVideoProperties>
{
	using abi = ABI::Windows::Storage::SystemVideoProperties;
	using default_interface = Windows::Storage::ISystemVideoProperties;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.SystemVideoProperties"; }
	static constexpr unsigned name_length = 37;
};

template <> struct traits<Windows::Storage::SystemProperties>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.SystemProperties"; }
	static constexpr unsigned name_length = 32;
};

template <> struct traits<Windows::Storage::ApplicationData>
{
	using abi = ABI::Windows::Storage::ApplicationData;
	using default_interface = Windows::Storage::IApplicationData;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.ApplicationData"; }
	static constexpr unsigned name_length = 31;
};

template <> struct traits<Windows::Storage::SetVersionRequest>
{
	using abi = ABI::Windows::Storage::SetVersionRequest;
	using default_interface = Windows::Storage::ISetVersionRequest;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.SetVersionRequest"; }
	static constexpr unsigned name_length = 33;
};

template <> struct traits<Windows::Storage::ApplicationDataContainer>
{
	using abi = ABI::Windows::Storage::ApplicationDataContainer;
	using default_interface = Windows::Storage::IApplicationDataContainer;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.ApplicationDataContainer"; }
	static constexpr unsigned name_length = 40;
};

template <> struct traits<Windows::Storage::SetVersionDeferral>
{
	using abi = ABI::Windows::Storage::SetVersionDeferral;
	using default_interface = Windows::Storage::ISetVersionDeferral;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.SetVersionDeferral"; }
	static constexpr unsigned name_length = 34;
};

template <> struct traits<Windows::Storage::ApplicationDataContainerSettings>
{
	using abi = ABI::Windows::Storage::ApplicationDataContainerSettings;
	using default_interface = Windows::Foundation::Collections::IPropertySet;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.ApplicationDataContainerSettings"; }
	static constexpr unsigned name_length = 48;
};

template <> struct traits<Windows::Storage::ApplicationDataCompositeValue>
{
	using abi = ABI::Windows::Storage::ApplicationDataCompositeValue;
	using default_interface = Windows::Foundation::Collections::IPropertySet;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Storage.ApplicationDataCompositeValue"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs>
{
	using abi = ABI::Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs;
	using default_interface = Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Diagnostics.TracingStatusChangedEventArgs"; }
	static constexpr unsigned name_length = 60;
};

template <> struct traits<Windows::Foundation::Diagnostics::AsyncCausalityTracer>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Diagnostics.AsyncCausalityTracer"; }
	static constexpr unsigned name_length = 51;
};

template <> struct traits<Windows::Foundation::Diagnostics::RuntimeBrokerErrorSettings>
{
	using abi = ABI::Windows::Foundation::Diagnostics::RuntimeBrokerErrorSettings;
	using default_interface = Windows::Foundation::Diagnostics::IErrorReportingSettings;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Diagnostics.RuntimeBrokerErrorSettings"; }
	static constexpr unsigned name_length = 57;
};

template <> struct traits<Windows::Foundation::Diagnostics::ErrorDetails>
{
	using abi = ABI::Windows::Foundation::Diagnostics::ErrorDetails;
	using default_interface = Windows::Foundation::Diagnostics::IErrorDetails;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Diagnostics.ErrorDetails"; }
	static constexpr unsigned name_length = 43;
};

template <> struct traits<Windows::Foundation::Diagnostics::LoggingOptions>
{
	using abi = ABI::Windows::Foundation::Diagnostics::LoggingOptions;
	using default_interface = Windows::Foundation::Diagnostics::ILoggingOptions;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Diagnostics.LoggingOptions"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::Foundation::Diagnostics::LoggingChannelOptions>
{
	using abi = ABI::Windows::Foundation::Diagnostics::LoggingChannelOptions;
	using default_interface = Windows::Foundation::Diagnostics::ILoggingChannelOptions;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Diagnostics.LoggingChannelOptions"; }
	static constexpr unsigned name_length = 52;
};

template <> struct traits<Windows::Foundation::Diagnostics::LoggingFields>
{
	using abi = ABI::Windows::Foundation::Diagnostics::LoggingFields;
	using default_interface = Windows::Foundation::Diagnostics::ILoggingFields;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Diagnostics.LoggingFields"; }
	static constexpr unsigned name_length = 44;
};

template <> struct traits<Windows::Foundation::Diagnostics::LoggingActivity>
{
	using abi = ABI::Windows::Foundation::Diagnostics::LoggingActivity;
	using default_interface = Windows::Foundation::Diagnostics::ILoggingActivity;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Diagnostics.LoggingActivity"; }
	static constexpr unsigned name_length = 46;
};

template <> struct traits<Windows::Foundation::Diagnostics::LoggingChannel>
{
	using abi = ABI::Windows::Foundation::Diagnostics::LoggingChannel;
	using default_interface = Windows::Foundation::Diagnostics::ILoggingChannel;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Diagnostics.LoggingChannel"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::Foundation::Diagnostics::LoggingSession>
{
	using abi = ABI::Windows::Foundation::Diagnostics::LoggingSession;
	using default_interface = Windows::Foundation::Diagnostics::ILoggingSession;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Diagnostics.LoggingSession"; }
	static constexpr unsigned name_length = 45;
};

template <> struct traits<Windows::Foundation::Diagnostics::LogFileGeneratedEventArgs>
{
	using abi = ABI::Windows::Foundation::Diagnostics::LogFileGeneratedEventArgs;
	using default_interface = Windows::Foundation::Diagnostics::ILogFileGeneratedEventArgs;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Diagnostics.LogFileGeneratedEventArgs"; }
	static constexpr unsigned name_length = 56;
};

template <> struct traits<Windows::Foundation::Diagnostics::FileLoggingSession>
{
	using abi = ABI::Windows::Foundation::Diagnostics::FileLoggingSession;
	using default_interface = Windows::Foundation::Diagnostics::IFileLoggingSession;
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Diagnostics.FileLoggingSession"; }
	static constexpr unsigned name_length = 49;
};

template <> struct traits<Windows::Foundation::Metadata::ApiInformation>
{
	static constexpr wchar_t const * name() noexcept { return L"Windows.Foundation.Metadata.ApiInformation"; }
	static constexpr unsigned name_length = 42;
};

}}

namespace winrt { namespace Windows { namespace ApplicationModel {

struct IAppDisplayInfo :
	Windows::IInspectable,
	impl_IAppDisplayInfo<IAppDisplayInfo>
{
	IAppDisplayInfo(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppDisplayInfo>(m_ptr); }
};

struct IAppInfo :
	Windows::IInspectable,
	impl_IAppInfo<IAppInfo>
{
	IAppInfo(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppInfo>(m_ptr); }
};

struct ISuspendingDeferral :
	Windows::IInspectable,
	impl_ISuspendingDeferral<ISuspendingDeferral>
{
	ISuspendingDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISuspendingDeferral>(m_ptr); }
};

struct ISuspendingOperation :
	Windows::IInspectable,
	impl_ISuspendingOperation<ISuspendingOperation>
{
	ISuspendingOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISuspendingOperation>(m_ptr); }
};

struct ISuspendingEventArgs :
	Windows::IInspectable,
	impl_ISuspendingEventArgs<ISuspendingEventArgs>
{
	ISuspendingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISuspendingEventArgs>(m_ptr); }
};

struct IPackageIdWithMetadata :
	Windows::IInspectable,
	impl_IPackageIdWithMetadata<IPackageIdWithMetadata>
{
	IPackageIdWithMetadata(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPackageIdWithMetadata>(m_ptr); }
};

struct IPackageWithMetadata :
	Windows::IInspectable,
	impl_IPackageWithMetadata<IPackageWithMetadata>
{
	IPackageWithMetadata(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPackageWithMetadata>(m_ptr); }
};

struct IPackageStatus :
	Windows::IInspectable,
	impl_IPackageStatus<IPackageStatus>
{
	IPackageStatus(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPackageStatus>(m_ptr); }
};

struct IPackageId :
	Windows::IInspectable,
	impl_IPackageId<IPackageId>
{
	IPackageId(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPackageId>(m_ptr); }
};

struct IPackage :
	Windows::IInspectable,
	impl_IPackage<IPackage>
{
	IPackage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPackage>(m_ptr); }
};

struct IPackage2 :
	Windows::IInspectable,
	impl_IPackage2<IPackage2>
{
	IPackage2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPackage2>(m_ptr); }
};

struct IPackage3 :
	Windows::IInspectable,
	impl_IPackage3<IPackage3>
{
	IPackage3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPackage3>(m_ptr); }
};

struct IPackageStatics :
	Windows::IInspectable,
	impl_IPackageStatics<IPackageStatics>
{
	IPackageStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPackageStatics>(m_ptr); }
};

struct IDesignModeStatics :
	Windows::IInspectable,
	impl_IDesignModeStatics<IDesignModeStatics>
{
	IDesignModeStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDesignModeStatics>(m_ptr); }
};

}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Activation {

struct ISplashScreen :
	Windows::IInspectable,
	impl_ISplashScreen<ISplashScreen>
{
	ISplashScreen(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISplashScreen>(m_ptr); }
};

struct IActivatedEventArgs :
	Windows::IInspectable,
	impl_IActivatedEventArgs<IActivatedEventArgs>
{
	IActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IActivatedEventArgs>(m_ptr); }
};

struct IApplicationViewActivatedEventArgs :
	Windows::IInspectable,
	impl_IApplicationViewActivatedEventArgs<IApplicationViewActivatedEventArgs>,
	requires<IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IApplicationViewActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationViewActivatedEventArgs>(m_ptr); }
};

struct IViewSwitcherProvider :
	Windows::IInspectable,
	impl_IViewSwitcherProvider<IViewSwitcherProvider>,
	requires<IViewSwitcherProvider, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IViewSwitcherProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IViewSwitcherProvider>(m_ptr); }
};

struct IPrelaunchActivatedEventArgs :
	Windows::IInspectable,
	impl_IPrelaunchActivatedEventArgs<IPrelaunchActivatedEventArgs>,
	requires<IPrelaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IPrelaunchActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPrelaunchActivatedEventArgs>(m_ptr); }
};

struct ILaunchActivatedEventArgs :
	Windows::IInspectable,
	impl_ILaunchActivatedEventArgs<ILaunchActivatedEventArgs>,
	requires<ILaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	ILaunchActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILaunchActivatedEventArgs>(m_ptr); }
};

struct ISearchActivatedEventArgs :
	Windows::IInspectable,
	impl_ISearchActivatedEventArgs<ISearchActivatedEventArgs>,
	requires<ISearchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	ISearchActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchActivatedEventArgs>(m_ptr); }
};

struct ISearchActivatedEventArgsWithLinguisticDetails :
	Windows::IInspectable,
	impl_ISearchActivatedEventArgsWithLinguisticDetails<ISearchActivatedEventArgsWithLinguisticDetails>
{
	ISearchActivatedEventArgsWithLinguisticDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchActivatedEventArgsWithLinguisticDetails>(m_ptr); }
};

struct IShareTargetActivatedEventArgs :
	Windows::IInspectable,
	impl_IShareTargetActivatedEventArgs<IShareTargetActivatedEventArgs>,
	requires<IShareTargetActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IShareTargetActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IShareTargetActivatedEventArgs>(m_ptr); }
};

struct IFileActivatedEventArgs :
	Windows::IInspectable,
	impl_IFileActivatedEventArgs<IFileActivatedEventArgs>,
	requires<IFileActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IFileActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileActivatedEventArgs>(m_ptr); }
};

struct IFileActivatedEventArgsWithNeighboringFiles :
	Windows::IInspectable,
	impl_IFileActivatedEventArgsWithNeighboringFiles<IFileActivatedEventArgsWithNeighboringFiles>,
	requires<IFileActivatedEventArgsWithNeighboringFiles, Windows::ApplicationModel::Activation::IFileActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IFileActivatedEventArgsWithNeighboringFiles(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileActivatedEventArgsWithNeighboringFiles>(m_ptr); }
};

struct IFileActivatedEventArgsWithCallerPackageFamilyName :
	Windows::IInspectable,
	impl_IFileActivatedEventArgsWithCallerPackageFamilyName<IFileActivatedEventArgsWithCallerPackageFamilyName>,
	requires<IFileActivatedEventArgsWithCallerPackageFamilyName, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IFileActivatedEventArgsWithCallerPackageFamilyName(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileActivatedEventArgsWithCallerPackageFamilyName>(m_ptr); }
};

struct IProtocolActivatedEventArgs :
	Windows::IInspectable,
	impl_IProtocolActivatedEventArgs<IProtocolActivatedEventArgs>,
	requires<IProtocolActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IProtocolActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProtocolActivatedEventArgs>(m_ptr); }
};

struct IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData :
	Windows::IInspectable,
	impl_IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData<IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData>,
	requires<IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData>(m_ptr); }
};

struct IProtocolForResultsActivatedEventArgs :
	Windows::IInspectable,
	impl_IProtocolForResultsActivatedEventArgs<IProtocolForResultsActivatedEventArgs>,
	requires<IProtocolForResultsActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IProtocolForResultsActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProtocolForResultsActivatedEventArgs>(m_ptr); }
};

struct IFileOpenPickerActivatedEventArgs :
	Windows::IInspectable,
	impl_IFileOpenPickerActivatedEventArgs<IFileOpenPickerActivatedEventArgs>,
	requires<IFileOpenPickerActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IFileOpenPickerActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileOpenPickerActivatedEventArgs>(m_ptr); }
};

struct IFileOpenPickerActivatedEventArgs2 :
	Windows::IInspectable,
	impl_IFileOpenPickerActivatedEventArgs2<IFileOpenPickerActivatedEventArgs2>
{
	IFileOpenPickerActivatedEventArgs2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileOpenPickerActivatedEventArgs2>(m_ptr); }
};

struct IFileSavePickerActivatedEventArgs :
	Windows::IInspectable,
	impl_IFileSavePickerActivatedEventArgs<IFileSavePickerActivatedEventArgs>,
	requires<IFileSavePickerActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IFileSavePickerActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileSavePickerActivatedEventArgs>(m_ptr); }
};

struct IFileSavePickerActivatedEventArgs2 :
	Windows::IInspectable,
	impl_IFileSavePickerActivatedEventArgs2<IFileSavePickerActivatedEventArgs2>
{
	IFileSavePickerActivatedEventArgs2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileSavePickerActivatedEventArgs2>(m_ptr); }
};

struct ICachedFileUpdaterActivatedEventArgs :
	Windows::IInspectable,
	impl_ICachedFileUpdaterActivatedEventArgs<ICachedFileUpdaterActivatedEventArgs>,
	requires<ICachedFileUpdaterActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	ICachedFileUpdaterActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICachedFileUpdaterActivatedEventArgs>(m_ptr); }
};

struct IContactPickerActivatedEventArgs :
	Windows::IInspectable,
	impl_IContactPickerActivatedEventArgs<IContactPickerActivatedEventArgs>,
	requires<IContactPickerActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactPickerActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactPickerActivatedEventArgs>(m_ptr); }
};

struct IDeviceActivatedEventArgs :
	Windows::IInspectable,
	impl_IDeviceActivatedEventArgs<IDeviceActivatedEventArgs>,
	requires<IDeviceActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IDeviceActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceActivatedEventArgs>(m_ptr); }
};

struct IPrintTaskSettingsActivatedEventArgs :
	Windows::IInspectable,
	impl_IPrintTaskSettingsActivatedEventArgs<IPrintTaskSettingsActivatedEventArgs>,
	requires<IPrintTaskSettingsActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IPrintTaskSettingsActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPrintTaskSettingsActivatedEventArgs>(m_ptr); }
};

struct IPrint3DWorkflowActivatedEventArgs :
	Windows::IInspectable,
	impl_IPrint3DWorkflowActivatedEventArgs<IPrint3DWorkflowActivatedEventArgs>,
	requires<IPrint3DWorkflowActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IPrint3DWorkflowActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPrint3DWorkflowActivatedEventArgs>(m_ptr); }
};

struct ICameraSettingsActivatedEventArgs :
	Windows::IInspectable,
	impl_ICameraSettingsActivatedEventArgs<ICameraSettingsActivatedEventArgs>,
	requires<ICameraSettingsActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	ICameraSettingsActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICameraSettingsActivatedEventArgs>(m_ptr); }
};

struct IAppointmentsProviderActivatedEventArgs :
	Windows::IInspectable,
	impl_IAppointmentsProviderActivatedEventArgs<IAppointmentsProviderActivatedEventArgs>,
	requires<IAppointmentsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IAppointmentsProviderActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentsProviderActivatedEventArgs>(m_ptr); }
};

struct IAppointmentsProviderAddAppointmentActivatedEventArgs :
	Windows::IInspectable,
	impl_IAppointmentsProviderAddAppointmentActivatedEventArgs<IAppointmentsProviderAddAppointmentActivatedEventArgs>,
	requires<IAppointmentsProviderAddAppointmentActivatedEventArgs, Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IAppointmentsProviderAddAppointmentActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentsProviderAddAppointmentActivatedEventArgs>(m_ptr); }
};

struct IAppointmentsProviderReplaceAppointmentActivatedEventArgs :
	Windows::IInspectable,
	impl_IAppointmentsProviderReplaceAppointmentActivatedEventArgs<IAppointmentsProviderReplaceAppointmentActivatedEventArgs>,
	requires<IAppointmentsProviderReplaceAppointmentActivatedEventArgs, Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IAppointmentsProviderReplaceAppointmentActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentsProviderReplaceAppointmentActivatedEventArgs>(m_ptr); }
};

struct IAppointmentsProviderRemoveAppointmentActivatedEventArgs :
	Windows::IInspectable,
	impl_IAppointmentsProviderRemoveAppointmentActivatedEventArgs<IAppointmentsProviderRemoveAppointmentActivatedEventArgs>,
	requires<IAppointmentsProviderRemoveAppointmentActivatedEventArgs, Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IAppointmentsProviderRemoveAppointmentActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentsProviderRemoveAppointmentActivatedEventArgs>(m_ptr); }
};

struct IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs :
	Windows::IInspectable,
	impl_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs<IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs>,
	requires<IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs, Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs>(m_ptr); }
};

struct IAppointmentsProviderShowTimeFrameActivatedEventArgs :
	Windows::IInspectable,
	impl_IAppointmentsProviderShowTimeFrameActivatedEventArgs<IAppointmentsProviderShowTimeFrameActivatedEventArgs>,
	requires<IAppointmentsProviderShowTimeFrameActivatedEventArgs, Windows::ApplicationModel::Activation::IAppointmentsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IAppointmentsProviderShowTimeFrameActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentsProviderShowTimeFrameActivatedEventArgs>(m_ptr); }
};

struct IContactActivatedEventArgs :
	Windows::IInspectable,
	impl_IContactActivatedEventArgs<IContactActivatedEventArgs>,
	requires<IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactActivatedEventArgs>(m_ptr); }
};

struct IContactCallActivatedEventArgs :
	Windows::IInspectable,
	impl_IContactCallActivatedEventArgs<IContactCallActivatedEventArgs>,
	requires<IContactCallActivatedEventArgs, Windows::ApplicationModel::Activation::IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactCallActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactCallActivatedEventArgs>(m_ptr); }
};

struct IContactMessageActivatedEventArgs :
	Windows::IInspectable,
	impl_IContactMessageActivatedEventArgs<IContactMessageActivatedEventArgs>,
	requires<IContactMessageActivatedEventArgs, Windows::ApplicationModel::Activation::IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactMessageActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactMessageActivatedEventArgs>(m_ptr); }
};

struct IContactMapActivatedEventArgs :
	Windows::IInspectable,
	impl_IContactMapActivatedEventArgs<IContactMapActivatedEventArgs>,
	requires<IContactMapActivatedEventArgs, Windows::ApplicationModel::Activation::IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactMapActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactMapActivatedEventArgs>(m_ptr); }
};

struct IContactPostActivatedEventArgs :
	Windows::IInspectable,
	impl_IContactPostActivatedEventArgs<IContactPostActivatedEventArgs>,
	requires<IContactPostActivatedEventArgs, Windows::ApplicationModel::Activation::IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactPostActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactPostActivatedEventArgs>(m_ptr); }
};

struct IContactVideoCallActivatedEventArgs :
	Windows::IInspectable,
	impl_IContactVideoCallActivatedEventArgs<IContactVideoCallActivatedEventArgs>,
	requires<IContactVideoCallActivatedEventArgs, Windows::ApplicationModel::Activation::IContactActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactVideoCallActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactVideoCallActivatedEventArgs>(m_ptr); }
};

struct IContactsProviderActivatedEventArgs :
	Windows::IInspectable,
	impl_IContactsProviderActivatedEventArgs<IContactsProviderActivatedEventArgs>,
	requires<IContactsProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContactsProviderActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactsProviderActivatedEventArgs>(m_ptr); }
};

struct IRestrictedLaunchActivatedEventArgs :
	Windows::IInspectable,
	impl_IRestrictedLaunchActivatedEventArgs<IRestrictedLaunchActivatedEventArgs>,
	requires<IRestrictedLaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IRestrictedLaunchActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRestrictedLaunchActivatedEventArgs>(m_ptr); }
};

struct ILockScreenCallActivatedEventArgs :
	Windows::IInspectable,
	impl_ILockScreenCallActivatedEventArgs<ILockScreenCallActivatedEventArgs>,
	requires<ILockScreenCallActivatedEventArgs, Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	ILockScreenCallActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILockScreenCallActivatedEventArgs>(m_ptr); }
};

struct ILockScreenActivatedEventArgs :
	Windows::IInspectable,
	impl_ILockScreenActivatedEventArgs<ILockScreenActivatedEventArgs>,
	requires<ILockScreenActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	ILockScreenActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILockScreenActivatedEventArgs>(m_ptr); }
};

struct IContinuationActivatedEventArgs :
	Windows::IInspectable,
	impl_IContinuationActivatedEventArgs<IContinuationActivatedEventArgs>,
	requires<IContinuationActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IContinuationActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContinuationActivatedEventArgs>(m_ptr); }
};

struct IFileOpenPickerContinuationEventArgs :
	Windows::IInspectable,
	impl_IFileOpenPickerContinuationEventArgs<IFileOpenPickerContinuationEventArgs>,
	requires<IFileOpenPickerContinuationEventArgs, Windows::ApplicationModel::Activation::IContinuationActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IFileOpenPickerContinuationEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileOpenPickerContinuationEventArgs>(m_ptr); }
};

struct IFileSavePickerContinuationEventArgs :
	Windows::IInspectable,
	impl_IFileSavePickerContinuationEventArgs<IFileSavePickerContinuationEventArgs>,
	requires<IFileSavePickerContinuationEventArgs, Windows::ApplicationModel::Activation::IContinuationActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IFileSavePickerContinuationEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileSavePickerContinuationEventArgs>(m_ptr); }
};

struct IFolderPickerContinuationEventArgs :
	Windows::IInspectable,
	impl_IFolderPickerContinuationEventArgs<IFolderPickerContinuationEventArgs>,
	requires<IFolderPickerContinuationEventArgs, Windows::ApplicationModel::Activation::IContinuationActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IFolderPickerContinuationEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFolderPickerContinuationEventArgs>(m_ptr); }
};

struct IWebAccountProviderActivatedEventArgs :
	Windows::IInspectable,
	impl_IWebAccountProviderActivatedEventArgs<IWebAccountProviderActivatedEventArgs>,
	requires<IWebAccountProviderActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IWebAccountProviderActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountProviderActivatedEventArgs>(m_ptr); }
};

struct IToastNotificationActivatedEventArgs :
	Windows::IInspectable,
	impl_IToastNotificationActivatedEventArgs<IToastNotificationActivatedEventArgs>,
	requires<IToastNotificationActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IToastNotificationActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IToastNotificationActivatedEventArgs>(m_ptr); }
};

struct IDialReceiverActivatedEventArgs :
	Windows::IInspectable,
	impl_IDialReceiverActivatedEventArgs<IDialReceiverActivatedEventArgs>,
	requires<IDialReceiverActivatedEventArgs, Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IDialReceiverActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDialReceiverActivatedEventArgs>(m_ptr); }
};

struct IDevicePairingActivatedEventArgs :
	Windows::IInspectable,
	impl_IDevicePairingActivatedEventArgs<IDevicePairingActivatedEventArgs>,
	requires<IDevicePairingActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IDevicePairingActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDevicePairingActivatedEventArgs>(m_ptr); }
};

struct IVoiceCommandActivatedEventArgs :
	Windows::IInspectable,
	impl_IVoiceCommandActivatedEventArgs<IVoiceCommandActivatedEventArgs>,
	requires<IVoiceCommandActivatedEventArgs, Windows::ApplicationModel::Activation::IActivatedEventArgs>
{
	IVoiceCommandActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IVoiceCommandActivatedEventArgs>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Appointments {

struct IAppointmentManagerStatics :
	Windows::IInspectable,
	impl_IAppointmentManagerStatics<IAppointmentManagerStatics>
{
	IAppointmentManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentManagerStatics>(m_ptr); }
};

struct IAppointmentManagerStatics2 :
	Windows::IInspectable,
	impl_IAppointmentManagerStatics2<IAppointmentManagerStatics2>
{
	IAppointmentManagerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentManagerStatics2>(m_ptr); }
};

struct IAppointmentParticipant :
	Windows::IInspectable,
	impl_IAppointmentParticipant<IAppointmentParticipant>
{
	IAppointmentParticipant(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentParticipant>(m_ptr); }
};

struct IAppointmentInvitee :
	Windows::IInspectable,
	impl_IAppointmentInvitee<IAppointmentInvitee>,
	requires<IAppointmentInvitee, Windows::ApplicationModel::Appointments::IAppointmentParticipant>
{
	IAppointmentInvitee(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentInvitee>(m_ptr); }
};

struct IAppointmentRecurrence :
	Windows::IInspectable,
	impl_IAppointmentRecurrence<IAppointmentRecurrence>
{
	IAppointmentRecurrence(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentRecurrence>(m_ptr); }
};

struct IAppointmentRecurrence2 :
	Windows::IInspectable,
	impl_IAppointmentRecurrence2<IAppointmentRecurrence2>,
	requires<IAppointmentRecurrence2, Windows::ApplicationModel::Appointments::IAppointmentRecurrence>
{
	IAppointmentRecurrence2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentRecurrence2>(m_ptr); }
};

struct IAppointmentRecurrence3 :
	Windows::IInspectable,
	impl_IAppointmentRecurrence3<IAppointmentRecurrence3>,
	requires<IAppointmentRecurrence3, Windows::ApplicationModel::Appointments::IAppointmentRecurrence2, Windows::ApplicationModel::Appointments::IAppointmentRecurrence>
{
	IAppointmentRecurrence3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentRecurrence3>(m_ptr); }
};

struct IAppointment :
	Windows::IInspectable,
	impl_IAppointment<IAppointment>
{
	IAppointment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointment>(m_ptr); }
};

struct IAppointment2 :
	Windows::IInspectable,
	impl_IAppointment2<IAppointment2>,
	requires<IAppointment2, Windows::ApplicationModel::Appointments::IAppointment>
{
	IAppointment2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointment2>(m_ptr); }
};

struct IAppointment3 :
	Windows::IInspectable,
	impl_IAppointment3<IAppointment3>,
	requires<IAppointment3, Windows::ApplicationModel::Appointments::IAppointment2, Windows::ApplicationModel::Appointments::IAppointment>
{
	IAppointment3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointment3>(m_ptr); }
};

struct IFindAppointmentsOptions :
	Windows::IInspectable,
	impl_IFindAppointmentsOptions<IFindAppointmentsOptions>
{
	IFindAppointmentsOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFindAppointmentsOptions>(m_ptr); }
};

struct IAppointmentCalendar :
	Windows::IInspectable,
	impl_IAppointmentCalendar<IAppointmentCalendar>
{
	IAppointmentCalendar(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentCalendar>(m_ptr); }
};

struct IAppointmentCalendar2 :
	Windows::IInspectable,
	impl_IAppointmentCalendar2<IAppointmentCalendar2>,
	requires<IAppointmentCalendar2, Windows::ApplicationModel::Appointments::IAppointmentCalendar>
{
	IAppointmentCalendar2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentCalendar2>(m_ptr); }
	using impl_IAppointmentCalendar::DisplayColor;
	using impl_IAppointmentCalendar::IsHidden;
	using impl_IAppointmentCalendar2::DisplayColor;
	using impl_IAppointmentCalendar2::IsHidden;
};

struct IAppointmentCalendarSyncManager :
	Windows::IInspectable,
	impl_IAppointmentCalendarSyncManager<IAppointmentCalendarSyncManager>
{
	IAppointmentCalendarSyncManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentCalendarSyncManager>(m_ptr); }
};

struct IAppointmentPropertiesStatics :
	Windows::IInspectable,
	impl_IAppointmentPropertiesStatics<IAppointmentPropertiesStatics>
{
	IAppointmentPropertiesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentPropertiesStatics>(m_ptr); }
};

struct IAppointmentPropertiesStatics2 :
	Windows::IInspectable,
	impl_IAppointmentPropertiesStatics2<IAppointmentPropertiesStatics2>,
	requires<IAppointmentPropertiesStatics2, Windows::ApplicationModel::Appointments::IAppointmentPropertiesStatics>
{
	IAppointmentPropertiesStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentPropertiesStatics2>(m_ptr); }
};

struct IAppointmentConflictResult :
	Windows::IInspectable,
	impl_IAppointmentConflictResult<IAppointmentConflictResult>
{
	IAppointmentConflictResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentConflictResult>(m_ptr); }
};

struct IAppointmentStoreChange :
	Windows::IInspectable,
	impl_IAppointmentStoreChange<IAppointmentStoreChange>
{
	IAppointmentStoreChange(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentStoreChange>(m_ptr); }
};

struct IAppointmentStoreChange2 :
	Windows::IInspectable,
	impl_IAppointmentStoreChange2<IAppointmentStoreChange2>,
	requires<IAppointmentStoreChange2, Windows::ApplicationModel::Appointments::IAppointmentStoreChange>
{
	IAppointmentStoreChange2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentStoreChange2>(m_ptr); }
};

struct IAppointmentStoreChangeReader :
	Windows::IInspectable,
	impl_IAppointmentStoreChangeReader<IAppointmentStoreChangeReader>
{
	IAppointmentStoreChangeReader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentStoreChangeReader>(m_ptr); }
};

struct IAppointmentStoreChangeTracker :
	Windows::IInspectable,
	impl_IAppointmentStoreChangeTracker<IAppointmentStoreChangeTracker>
{
	IAppointmentStoreChangeTracker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentStoreChangeTracker>(m_ptr); }
};

struct IAppointmentStoreChangedEventArgs :
	Windows::IInspectable,
	impl_IAppointmentStoreChangedEventArgs<IAppointmentStoreChangedEventArgs>
{
	IAppointmentStoreChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentStoreChangedEventArgs>(m_ptr); }
};

struct IAppointmentStoreChangedDeferral :
	Windows::IInspectable,
	impl_IAppointmentStoreChangedDeferral<IAppointmentStoreChangedDeferral>
{
	IAppointmentStoreChangedDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentStoreChangedDeferral>(m_ptr); }
};

struct IAppointmentStoreNotificationTriggerDetails :
	Windows::IInspectable,
	impl_IAppointmentStoreNotificationTriggerDetails<IAppointmentStoreNotificationTriggerDetails>
{
	IAppointmentStoreNotificationTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentStoreNotificationTriggerDetails>(m_ptr); }
};

struct IAppointmentStore :
	Windows::IInspectable,
	impl_IAppointmentStore<IAppointmentStore>
{
	IAppointmentStore(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentStore>(m_ptr); }
};

struct IAppointmentStore2 :
	Windows::IInspectable,
	impl_IAppointmentStore2<IAppointmentStore2>,
	requires<IAppointmentStore2, Windows::ApplicationModel::Appointments::IAppointmentStore>
{
	IAppointmentStore2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentStore2>(m_ptr); }
	using impl_IAppointmentStore::CreateAppointmentCalendarAsync;
	using impl_IAppointmentStore2::CreateAppointmentCalendarAsync;
};

struct IAppointmentException :
	Windows::IInspectable,
	impl_IAppointmentException<IAppointmentException>
{
	IAppointmentException(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentException>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

struct IAppointmentsProviderLaunchActionVerbsStatics :
	Windows::IInspectable,
	impl_IAppointmentsProviderLaunchActionVerbsStatics<IAppointmentsProviderLaunchActionVerbsStatics>
{
	IAppointmentsProviderLaunchActionVerbsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentsProviderLaunchActionVerbsStatics>(m_ptr); }
};

struct IAppointmentsProviderLaunchActionVerbsStatics2 :
	Windows::IInspectable,
	impl_IAppointmentsProviderLaunchActionVerbsStatics2<IAppointmentsProviderLaunchActionVerbsStatics2>
{
	IAppointmentsProviderLaunchActionVerbsStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentsProviderLaunchActionVerbsStatics2>(m_ptr); }
};

struct IAddAppointmentOperation :
	Windows::IInspectable,
	impl_IAddAppointmentOperation<IAddAppointmentOperation>
{
	IAddAppointmentOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAddAppointmentOperation>(m_ptr); }
};

struct IReplaceAppointmentOperation :
	Windows::IInspectable,
	impl_IReplaceAppointmentOperation<IReplaceAppointmentOperation>
{
	IReplaceAppointmentOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IReplaceAppointmentOperation>(m_ptr); }
};

struct IRemoveAppointmentOperation :
	Windows::IInspectable,
	impl_IRemoveAppointmentOperation<IRemoveAppointmentOperation>
{
	IRemoveAppointmentOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRemoveAppointmentOperation>(m_ptr); }
};

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Background {

struct IBackgroundTaskCanceledEventHandler :
	Windows::IUnknown,
	impl_IBackgroundTaskCanceledEventHandler<IBackgroundTaskCanceledEventHandler>
{
	IBackgroundTaskCanceledEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundTaskCanceledEventHandler>(m_ptr); }
};

struct IBackgroundTaskProgressEventHandler :
	Windows::IUnknown,
	impl_IBackgroundTaskProgressEventHandler<IBackgroundTaskProgressEventHandler>
{
	IBackgroundTaskProgressEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundTaskProgressEventHandler>(m_ptr); }
};

struct IBackgroundTaskCompletedEventHandler :
	Windows::IUnknown,
	impl_IBackgroundTaskCompletedEventHandler<IBackgroundTaskCompletedEventHandler>
{
	IBackgroundTaskCompletedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundTaskCompletedEventHandler>(m_ptr); }
};

struct IAlarmApplicationManagerStatics :
	Windows::IInspectable,
	impl_IAlarmApplicationManagerStatics<IAlarmApplicationManagerStatics>
{
	IAlarmApplicationManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAlarmApplicationManagerStatics>(m_ptr); }
};

struct IApplicationTriggerDetails :
	Windows::IInspectable,
	impl_IApplicationTriggerDetails<IApplicationTriggerDetails>
{
	IApplicationTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationTriggerDetails>(m_ptr); }
};

struct IBackgroundExecutionManagerStatics :
	Windows::IInspectable,
	impl_IBackgroundExecutionManagerStatics<IBackgroundExecutionManagerStatics>
{
	IBackgroundExecutionManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundExecutionManagerStatics>(m_ptr); }
};

struct IBackgroundTaskInstance :
	Windows::IInspectable,
	impl_IBackgroundTaskInstance<IBackgroundTaskInstance>
{
	IBackgroundTaskInstance(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundTaskInstance>(m_ptr); }
};

struct IBackgroundWorkCostStatics :
	Windows::IInspectable,
	impl_IBackgroundWorkCostStatics<IBackgroundWorkCostStatics>
{
	IBackgroundWorkCostStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundWorkCostStatics>(m_ptr); }
};

struct IBackgroundTaskDeferral :
	Windows::IInspectable,
	impl_IBackgroundTaskDeferral<IBackgroundTaskDeferral>
{
	IBackgroundTaskDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundTaskDeferral>(m_ptr); }
};

struct IBackgroundTaskInstance2 :
	Windows::IInspectable,
	impl_IBackgroundTaskInstance2<IBackgroundTaskInstance2>,
	requires<IBackgroundTaskInstance2, Windows::ApplicationModel::Background::IBackgroundTaskInstance>
{
	IBackgroundTaskInstance2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundTaskInstance2>(m_ptr); }
};

struct IBackgroundTask :
	Windows::IInspectable,
	impl_IBackgroundTask<IBackgroundTask>
{
	IBackgroundTask(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundTask>(m_ptr); }
};

struct IBackgroundTaskRegistration :
	Windows::IInspectable,
	impl_IBackgroundTaskRegistration<IBackgroundTaskRegistration>
{
	IBackgroundTaskRegistration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundTaskRegistration>(m_ptr); }
};

struct IBackgroundTaskRegistration2 :
	Windows::IInspectable,
	impl_IBackgroundTaskRegistration2<IBackgroundTaskRegistration2>,
	requires<IBackgroundTaskRegistration2, Windows::ApplicationModel::Background::IBackgroundTaskRegistration>
{
	IBackgroundTaskRegistration2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundTaskRegistration2>(m_ptr); }
};

struct IBackgroundTrigger :
	Windows::IInspectable,
	impl_IBackgroundTrigger<IBackgroundTrigger>
{
	IBackgroundTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundTrigger>(m_ptr); }
};

struct IAppointmentStoreNotificationTrigger :
	Windows::IInspectable,
	impl_IAppointmentStoreNotificationTrigger<IAppointmentStoreNotificationTrigger>,
	requires<IAppointmentStoreNotificationTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IAppointmentStoreNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppointmentStoreNotificationTrigger>(m_ptr); }
};

struct IApplicationTrigger :
	Windows::IInspectable,
	impl_IApplicationTrigger<IApplicationTrigger>,
	requires<IApplicationTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IApplicationTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationTrigger>(m_ptr); }
};

struct IMediaProcessingTrigger :
	Windows::IInspectable,
	impl_IMediaProcessingTrigger<IMediaProcessingTrigger>,
	requires<IMediaProcessingTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IMediaProcessingTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMediaProcessingTrigger>(m_ptr); }
};

struct IBackgroundTaskRegistrationStatics :
	Windows::IInspectable,
	impl_IBackgroundTaskRegistrationStatics<IBackgroundTaskRegistrationStatics>
{
	IBackgroundTaskRegistrationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundTaskRegistrationStatics>(m_ptr); }
};

struct IBackgroundTaskBuilder :
	Windows::IInspectable,
	impl_IBackgroundTaskBuilder<IBackgroundTaskBuilder>
{
	IBackgroundTaskBuilder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundTaskBuilder>(m_ptr); }
};

struct IBackgroundCondition :
	Windows::IInspectable,
	impl_IBackgroundCondition<IBackgroundCondition>
{
	IBackgroundCondition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundCondition>(m_ptr); }
};

struct IBackgroundTaskBuilder2 :
	Windows::IInspectable,
	impl_IBackgroundTaskBuilder2<IBackgroundTaskBuilder2>,
	requires<IBackgroundTaskBuilder2, Windows::ApplicationModel::Background::IBackgroundTaskBuilder>
{
	IBackgroundTaskBuilder2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundTaskBuilder2>(m_ptr); }
};

struct IBackgroundTaskBuilder3 :
	Windows::IInspectable,
	impl_IBackgroundTaskBuilder3<IBackgroundTaskBuilder3>,
	requires<IBackgroundTaskBuilder3, Windows::ApplicationModel::Background::IBackgroundTaskBuilder>
{
	IBackgroundTaskBuilder3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundTaskBuilder3>(m_ptr); }
};

struct IBackgroundTaskCompletedEventArgs :
	Windows::IInspectable,
	impl_IBackgroundTaskCompletedEventArgs<IBackgroundTaskCompletedEventArgs>
{
	IBackgroundTaskCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundTaskCompletedEventArgs>(m_ptr); }
};

struct IBackgroundTaskProgressEventArgs :
	Windows::IInspectable,
	impl_IBackgroundTaskProgressEventArgs<IBackgroundTaskProgressEventArgs>
{
	IBackgroundTaskProgressEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackgroundTaskProgressEventArgs>(m_ptr); }
};

struct IChatMessageNotificationTrigger :
	Windows::IInspectable,
	impl_IChatMessageNotificationTrigger<IChatMessageNotificationTrigger>,
	requires<IChatMessageNotificationTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IChatMessageNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IChatMessageNotificationTrigger>(m_ptr); }
};

struct IChatMessageReceivedNotificationTrigger :
	Windows::IInspectable,
	impl_IChatMessageReceivedNotificationTrigger<IChatMessageReceivedNotificationTrigger>,
	requires<IChatMessageReceivedNotificationTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IChatMessageReceivedNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IChatMessageReceivedNotificationTrigger>(m_ptr); }
};

struct IRcsEndUserMessageAvailableTrigger :
	Windows::IInspectable,
	impl_IRcsEndUserMessageAvailableTrigger<IRcsEndUserMessageAvailableTrigger>,
	requires<IRcsEndUserMessageAvailableTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IRcsEndUserMessageAvailableTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRcsEndUserMessageAvailableTrigger>(m_ptr); }
};

struct IContactStoreNotificationTrigger :
	Windows::IInspectable,
	impl_IContactStoreNotificationTrigger<IContactStoreNotificationTrigger>,
	requires<IContactStoreNotificationTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IContactStoreNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactStoreNotificationTrigger>(m_ptr); }
};

struct IContentPrefetchTrigger :
	Windows::IInspectable,
	impl_IContentPrefetchTrigger<IContentPrefetchTrigger>,
	requires<IContentPrefetchTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IContentPrefetchTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContentPrefetchTrigger>(m_ptr); }
};

struct IContentPrefetchTriggerFactory :
	Windows::IInspectable,
	impl_IContentPrefetchTriggerFactory<IContentPrefetchTriggerFactory>
{
	IContentPrefetchTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContentPrefetchTriggerFactory>(m_ptr); }
};

struct IEmailStoreNotificationTrigger :
	Windows::IInspectable,
	impl_IEmailStoreNotificationTrigger<IEmailStoreNotificationTrigger>,
	requires<IEmailStoreNotificationTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IEmailStoreNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IEmailStoreNotificationTrigger>(m_ptr); }
};

struct ISmsMessageReceivedTriggerFactory :
	Windows::IInspectable,
	impl_ISmsMessageReceivedTriggerFactory<ISmsMessageReceivedTriggerFactory>
{
	ISmsMessageReceivedTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsMessageReceivedTriggerFactory>(m_ptr); }
};

struct IStorageLibraryContentChangedTrigger :
	Windows::IInspectable,
	impl_IStorageLibraryContentChangedTrigger<IStorageLibraryContentChangedTrigger>,
	requires<IStorageLibraryContentChangedTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IStorageLibraryContentChangedTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageLibraryContentChangedTrigger>(m_ptr); }
};

struct IStorageLibraryContentChangedTriggerStatics :
	Windows::IInspectable,
	impl_IStorageLibraryContentChangedTriggerStatics<IStorageLibraryContentChangedTriggerStatics>
{
	IStorageLibraryContentChangedTriggerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageLibraryContentChangedTriggerStatics>(m_ptr); }
};

struct ISystemTrigger :
	Windows::IInspectable,
	impl_ISystemTrigger<ISystemTrigger>,
	requires<ISystemTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	ISystemTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISystemTrigger>(m_ptr); }
};

struct ISystemTriggerFactory :
	Windows::IInspectable,
	impl_ISystemTriggerFactory<ISystemTriggerFactory>
{
	ISystemTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISystemTriggerFactory>(m_ptr); }
};

struct ISystemCondition :
	Windows::IInspectable,
	impl_ISystemCondition<ISystemCondition>,
	requires<ISystemCondition, Windows::ApplicationModel::Background::IBackgroundCondition>
{
	ISystemCondition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISystemCondition>(m_ptr); }
};

struct ISystemConditionFactory :
	Windows::IInspectable,
	impl_ISystemConditionFactory<ISystemConditionFactory>
{
	ISystemConditionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISystemConditionFactory>(m_ptr); }
};

struct INetworkOperatorNotificationTrigger :
	Windows::IInspectable,
	impl_INetworkOperatorNotificationTrigger<INetworkOperatorNotificationTrigger>,
	requires<INetworkOperatorNotificationTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	INetworkOperatorNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<INetworkOperatorNotificationTrigger>(m_ptr); }
};

struct INetworkOperatorNotificationTriggerFactory :
	Windows::IInspectable,
	impl_INetworkOperatorNotificationTriggerFactory<INetworkOperatorNotificationTriggerFactory>
{
	INetworkOperatorNotificationTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<INetworkOperatorNotificationTriggerFactory>(m_ptr); }
};

struct ICachedFileUpdaterTriggerDetails :
	Windows::IInspectable,
	impl_ICachedFileUpdaterTriggerDetails<ICachedFileUpdaterTriggerDetails>
{
	ICachedFileUpdaterTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICachedFileUpdaterTriggerDetails>(m_ptr); }
};

struct ICachedFileUpdaterTrigger :
	Windows::IInspectable,
	impl_ICachedFileUpdaterTrigger<ICachedFileUpdaterTrigger>,
	requires<ICachedFileUpdaterTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	ICachedFileUpdaterTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICachedFileUpdaterTrigger>(m_ptr); }
};

struct ITimeTrigger :
	Windows::IInspectable,
	impl_ITimeTrigger<ITimeTrigger>,
	requires<ITimeTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	ITimeTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITimeTrigger>(m_ptr); }
};

struct ITimeTriggerFactory :
	Windows::IInspectable,
	impl_ITimeTriggerFactory<ITimeTriggerFactory>
{
	ITimeTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITimeTriggerFactory>(m_ptr); }
};

struct IMaintenanceTrigger :
	Windows::IInspectable,
	impl_IMaintenanceTrigger<IMaintenanceTrigger>,
	requires<IMaintenanceTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IMaintenanceTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMaintenanceTrigger>(m_ptr); }
};

struct IMaintenanceTriggerFactory :
	Windows::IInspectable,
	impl_IMaintenanceTriggerFactory<IMaintenanceTriggerFactory>
{
	IMaintenanceTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMaintenanceTriggerFactory>(m_ptr); }
};

struct IPhoneTrigger :
	Windows::IInspectable,
	impl_IPhoneTrigger<IPhoneTrigger>,
	requires<IPhoneTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IPhoneTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneTrigger>(m_ptr); }
};

struct IPhoneTriggerFactory :
	Windows::IInspectable,
	impl_IPhoneTriggerFactory<IPhoneTriggerFactory>
{
	IPhoneTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneTriggerFactory>(m_ptr); }
};

struct IDeviceUseTrigger :
	Windows::IInspectable,
	impl_IDeviceUseTrigger<IDeviceUseTrigger>,
	requires<IDeviceUseTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IDeviceUseTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceUseTrigger>(m_ptr); }
};

struct IDeviceServicingTrigger :
	Windows::IInspectable,
	impl_IDeviceServicingTrigger<IDeviceServicingTrigger>,
	requires<IDeviceServicingTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IDeviceServicingTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceServicingTrigger>(m_ptr); }
};

struct IRfcommConnectionTrigger :
	Windows::IInspectable,
	impl_IRfcommConnectionTrigger<IRfcommConnectionTrigger>,
	requires<IRfcommConnectionTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IRfcommConnectionTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRfcommConnectionTrigger>(m_ptr); }
};

struct IDeviceConnectionChangeTrigger :
	Windows::IInspectable,
	impl_IDeviceConnectionChangeTrigger<IDeviceConnectionChangeTrigger>,
	requires<IDeviceConnectionChangeTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IDeviceConnectionChangeTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceConnectionChangeTrigger>(m_ptr); }
};

struct IDeviceConnectionChangeTriggerStatics :
	Windows::IInspectable,
	impl_IDeviceConnectionChangeTriggerStatics<IDeviceConnectionChangeTriggerStatics>
{
	IDeviceConnectionChangeTriggerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceConnectionChangeTriggerStatics>(m_ptr); }
};

struct IGattCharacteristicNotificationTrigger :
	Windows::IInspectable,
	impl_IGattCharacteristicNotificationTrigger<IGattCharacteristicNotificationTrigger>,
	requires<IGattCharacteristicNotificationTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IGattCharacteristicNotificationTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattCharacteristicNotificationTrigger>(m_ptr); }
};

struct IGattCharacteristicNotificationTriggerFactory :
	Windows::IInspectable,
	impl_IGattCharacteristicNotificationTriggerFactory<IGattCharacteristicNotificationTriggerFactory>
{
	IGattCharacteristicNotificationTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattCharacteristicNotificationTriggerFactory>(m_ptr); }
};

struct IBluetoothLEAdvertisementWatcherTrigger :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementWatcherTrigger<IBluetoothLEAdvertisementWatcherTrigger>,
	requires<IBluetoothLEAdvertisementWatcherTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IBluetoothLEAdvertisementWatcherTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementWatcherTrigger>(m_ptr); }
};

struct IBluetoothLEAdvertisementPublisherTrigger :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementPublisherTrigger<IBluetoothLEAdvertisementPublisherTrigger>,
	requires<IBluetoothLEAdvertisementPublisherTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IBluetoothLEAdvertisementPublisherTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementPublisherTrigger>(m_ptr); }
};

struct IDeviceWatcherTrigger :
	Windows::IInspectable,
	impl_IDeviceWatcherTrigger<IDeviceWatcherTrigger>,
	requires<IDeviceWatcherTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IDeviceWatcherTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceWatcherTrigger>(m_ptr); }
};

struct ILocationTrigger :
	Windows::IInspectable,
	impl_ILocationTrigger<ILocationTrigger>,
	requires<ILocationTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	ILocationTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILocationTrigger>(m_ptr); }
};

struct ILocationTriggerFactory :
	Windows::IInspectable,
	impl_ILocationTriggerFactory<ILocationTriggerFactory>
{
	ILocationTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILocationTriggerFactory>(m_ptr); }
};

struct IActivitySensorTrigger :
	Windows::IInspectable,
	impl_IActivitySensorTrigger<IActivitySensorTrigger>,
	requires<IActivitySensorTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	IActivitySensorTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IActivitySensorTrigger>(m_ptr); }
};

struct IActivitySensorTriggerFactory :
	Windows::IInspectable,
	impl_IActivitySensorTriggerFactory<IActivitySensorTriggerFactory>
{
	IActivitySensorTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IActivitySensorTriggerFactory>(m_ptr); }
};

struct ISensorDataThresholdTrigger :
	Windows::IInspectable,
	impl_ISensorDataThresholdTrigger<ISensorDataThresholdTrigger>,
	requires<ISensorDataThresholdTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	ISensorDataThresholdTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISensorDataThresholdTrigger>(m_ptr); }
};

struct ISensorDataThresholdTriggerFactory :
	Windows::IInspectable,
	impl_ISensorDataThresholdTriggerFactory<ISensorDataThresholdTriggerFactory>
{
	ISensorDataThresholdTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISensorDataThresholdTriggerFactory>(m_ptr); }
};

struct INetworkOperatorHotspotAuthenticationTrigger :
	Windows::IInspectable,
	impl_INetworkOperatorHotspotAuthenticationTrigger<INetworkOperatorHotspotAuthenticationTrigger>,
	requires<INetworkOperatorHotspotAuthenticationTrigger, Windows::ApplicationModel::Background::IBackgroundTrigger>
{
	INetworkOperatorHotspotAuthenticationTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<INetworkOperatorHotspotAuthenticationTrigger>(m_ptr); }
};

struct IPushNotificationTriggerFactory :
	Windows::IInspectable,
	impl_IPushNotificationTriggerFactory<IPushNotificationTriggerFactory>
{
	IPushNotificationTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPushNotificationTriggerFactory>(m_ptr); }
};

struct IToastNotificationHistoryChangedTriggerFactory :
	Windows::IInspectable,
	impl_IToastNotificationHistoryChangedTriggerFactory<IToastNotificationHistoryChangedTriggerFactory>
{
	IToastNotificationHistoryChangedTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IToastNotificationHistoryChangedTriggerFactory>(m_ptr); }
};

struct IToastNotificationActionTriggerFactory :
	Windows::IInspectable,
	impl_IToastNotificationActionTriggerFactory<IToastNotificationActionTriggerFactory>
{
	IToastNotificationActionTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IToastNotificationActionTriggerFactory>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls {

struct IPhoneCallHistoryEntry :
	Windows::IInspectable,
	impl_IPhoneCallHistoryEntry<IPhoneCallHistoryEntry>
{
	IPhoneCallHistoryEntry(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneCallHistoryEntry>(m_ptr); }
};

struct IPhoneCallHistoryEntryAddress :
	Windows::IInspectable,
	impl_IPhoneCallHistoryEntryAddress<IPhoneCallHistoryEntryAddress>
{
	IPhoneCallHistoryEntryAddress(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneCallHistoryEntryAddress>(m_ptr); }
};

struct IPhoneCallHistoryEntryAddressFactory :
	Windows::IInspectable,
	impl_IPhoneCallHistoryEntryAddressFactory<IPhoneCallHistoryEntryAddressFactory>
{
	IPhoneCallHistoryEntryAddressFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneCallHistoryEntryAddressFactory>(m_ptr); }
};

struct IPhoneCallHistoryEntryQueryOptions :
	Windows::IInspectable,
	impl_IPhoneCallHistoryEntryQueryOptions<IPhoneCallHistoryEntryQueryOptions>
{
	IPhoneCallHistoryEntryQueryOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneCallHistoryEntryQueryOptions>(m_ptr); }
};

struct IPhoneCallHistoryEntryReader :
	Windows::IInspectable,
	impl_IPhoneCallHistoryEntryReader<IPhoneCallHistoryEntryReader>
{
	IPhoneCallHistoryEntryReader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneCallHistoryEntryReader>(m_ptr); }
};

struct IPhoneCallHistoryStore :
	Windows::IInspectable,
	impl_IPhoneCallHistoryStore<IPhoneCallHistoryStore>
{
	IPhoneCallHistoryStore(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneCallHistoryStore>(m_ptr); }
};

struct IPhoneCallHistoryManagerStatics :
	Windows::IInspectable,
	impl_IPhoneCallHistoryManagerStatics<IPhoneCallHistoryManagerStatics>
{
	IPhoneCallHistoryManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneCallHistoryManagerStatics>(m_ptr); }
};

struct IPhoneVoicemail :
	Windows::IInspectable,
	impl_IPhoneVoicemail<IPhoneVoicemail>
{
	IPhoneVoicemail(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneVoicemail>(m_ptr); }
};

struct IPhoneDialOptions :
	Windows::IInspectable,
	impl_IPhoneDialOptions<IPhoneDialOptions>
{
	IPhoneDialOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneDialOptions>(m_ptr); }
};

struct IPhoneLineCellularDetails :
	Windows::IInspectable,
	impl_IPhoneLineCellularDetails<IPhoneLineCellularDetails>
{
	IPhoneLineCellularDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneLineCellularDetails>(m_ptr); }
};

struct IPhoneLine :
	Windows::IInspectable,
	impl_IPhoneLine<IPhoneLine>
{
	IPhoneLine(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneLine>(m_ptr); }
};

struct IPhoneCallStore :
	Windows::IInspectable,
	impl_IPhoneCallStore<IPhoneCallStore>
{
	IPhoneCallStore(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneCallStore>(m_ptr); }
};

struct IPhoneLineConfiguration :
	Windows::IInspectable,
	impl_IPhoneLineConfiguration<IPhoneLineConfiguration>
{
	IPhoneLineConfiguration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneLineConfiguration>(m_ptr); }
};

struct IPhoneLineStatics :
	Windows::IInspectable,
	impl_IPhoneLineStatics<IPhoneLineStatics>
{
	IPhoneLineStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneLineStatics>(m_ptr); }
};

struct IPhoneLineWatcher :
	Windows::IInspectable,
	impl_IPhoneLineWatcher<IPhoneLineWatcher>
{
	IPhoneLineWatcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneLineWatcher>(m_ptr); }
};

struct IPhoneLineWatcherEventArgs :
	Windows::IInspectable,
	impl_IPhoneLineWatcherEventArgs<IPhoneLineWatcherEventArgs>
{
	IPhoneLineWatcherEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneLineWatcherEventArgs>(m_ptr); }
};

struct IPhoneCallManagerStatics :
	Windows::IInspectable,
	impl_IPhoneCallManagerStatics<IPhoneCallManagerStatics>
{
	IPhoneCallManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneCallManagerStatics>(m_ptr); }
};

struct IPhoneCallManagerStatics2 :
	Windows::IInspectable,
	impl_IPhoneCallManagerStatics2<IPhoneCallManagerStatics2>
{
	IPhoneCallManagerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneCallManagerStatics2>(m_ptr); }
};

struct IPhoneCallVideoCapabilities :
	Windows::IInspectable,
	impl_IPhoneCallVideoCapabilities<IPhoneCallVideoCapabilities>
{
	IPhoneCallVideoCapabilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneCallVideoCapabilities>(m_ptr); }
};

struct IPhoneCallVideoCapabilitiesManagerStatics :
	Windows::IInspectable,
	impl_IPhoneCallVideoCapabilitiesManagerStatics<IPhoneCallVideoCapabilitiesManagerStatics>
{
	IPhoneCallVideoCapabilitiesManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneCallVideoCapabilitiesManagerStatics>(m_ptr); }
};

struct IPhoneCallBlockingStatics :
	Windows::IInspectable,
	impl_IPhoneCallBlockingStatics<IPhoneCallBlockingStatics>
{
	IPhoneCallBlockingStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneCallBlockingStatics>(m_ptr); }
};

struct ICallStateChangeEventArgs :
	Windows::IInspectable,
	impl_ICallStateChangeEventArgs<ICallStateChangeEventArgs>
{
	ICallStateChangeEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICallStateChangeEventArgs>(m_ptr); }
};

struct ICallAnswerEventArgs :
	Windows::IInspectable,
	impl_ICallAnswerEventArgs<ICallAnswerEventArgs>
{
	ICallAnswerEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICallAnswerEventArgs>(m_ptr); }
};

struct ICallRejectEventArgs :
	Windows::IInspectable,
	impl_ICallRejectEventArgs<ICallRejectEventArgs>
{
	ICallRejectEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICallRejectEventArgs>(m_ptr); }
};

struct IVoipPhoneCall :
	Windows::IInspectable,
	impl_IVoipPhoneCall<IVoipPhoneCall>
{
	IVoipPhoneCall(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IVoipPhoneCall>(m_ptr); }
};

struct IMuteChangeEventArgs :
	Windows::IInspectable,
	impl_IMuteChangeEventArgs<IMuteChangeEventArgs>
{
	IMuteChangeEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMuteChangeEventArgs>(m_ptr); }
};

struct IVoipCallCoordinator :
	Windows::IInspectable,
	impl_IVoipCallCoordinator<IVoipCallCoordinator>
{
	IVoipCallCoordinator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IVoipCallCoordinator>(m_ptr); }
};

struct IVoipCallCoordinatorStatics :
	Windows::IInspectable,
	impl_IVoipCallCoordinatorStatics<IVoipCallCoordinatorStatics>
{
	IVoipCallCoordinatorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IVoipCallCoordinatorStatics>(m_ptr); }
};

struct ILockScreenCallEndCallDeferral :
	Windows::IInspectable,
	impl_ILockScreenCallEndCallDeferral<ILockScreenCallEndCallDeferral>
{
	ILockScreenCallEndCallDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILockScreenCallEndCallDeferral>(m_ptr); }
};

struct ILockScreenCallEndRequestedEventArgs :
	Windows::IInspectable,
	impl_ILockScreenCallEndRequestedEventArgs<ILockScreenCallEndRequestedEventArgs>
{
	ILockScreenCallEndRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILockScreenCallEndRequestedEventArgs>(m_ptr); }
};

struct ILockScreenCallUI :
	Windows::IInspectable,
	impl_ILockScreenCallUI<ILockScreenCallUI>
{
	ILockScreenCallUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILockScreenCallUI>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls { namespace Background {

struct IPhoneCallBlockedTriggerDetails :
	Windows::IInspectable,
	impl_IPhoneCallBlockedTriggerDetails<IPhoneCallBlockedTriggerDetails>
{
	IPhoneCallBlockedTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneCallBlockedTriggerDetails>(m_ptr); }
};

struct IPhoneCallOriginDataRequestTriggerDetails :
	Windows::IInspectable,
	impl_IPhoneCallOriginDataRequestTriggerDetails<IPhoneCallOriginDataRequestTriggerDetails>
{
	IPhoneCallOriginDataRequestTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneCallOriginDataRequestTriggerDetails>(m_ptr); }
};

struct IPhoneNewVoicemailMessageTriggerDetails :
	Windows::IInspectable,
	impl_IPhoneNewVoicemailMessageTriggerDetails<IPhoneNewVoicemailMessageTriggerDetails>
{
	IPhoneNewVoicemailMessageTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneNewVoicemailMessageTriggerDetails>(m_ptr); }
};

struct IPhoneLineChangedTriggerDetails :
	Windows::IInspectable,
	impl_IPhoneLineChangedTriggerDetails<IPhoneLineChangedTriggerDetails>
{
	IPhoneLineChangedTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPhoneLineChangedTriggerDetails>(m_ptr); }
};

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Contacts {

struct IContactCardOptions :
	Windows::IInspectable,
	impl_IContactCardOptions<IContactCardOptions>
{
	IContactCardOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactCardOptions>(m_ptr); }
};

struct IContactCardOptions2 :
	Windows::IInspectable,
	impl_IContactCardOptions2<IContactCardOptions2>,
	requires<IContactCardOptions2, Windows::ApplicationModel::Contacts::IContactCardOptions>
{
	IContactCardOptions2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactCardOptions2>(m_ptr); }
};

struct IFullContactCardOptions :
	Windows::IInspectable,
	impl_IFullContactCardOptions<IFullContactCardOptions>
{
	IFullContactCardOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFullContactCardOptions>(m_ptr); }
};

struct IContactManagerStatics :
	Windows::IInspectable,
	impl_IContactManagerStatics<IContactManagerStatics>
{
	IContactManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactManagerStatics>(m_ptr); }
};

struct IContactManagerStatics2 :
	Windows::IInspectable,
	impl_IContactManagerStatics2<IContactManagerStatics2>,
	requires<IContactManagerStatics2, Windows::ApplicationModel::Contacts::IContactManagerStatics>
{
	IContactManagerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactManagerStatics2>(m_ptr); }
};

struct IContactManagerStatics3 :
	Windows::IInspectable,
	impl_IContactManagerStatics3<IContactManagerStatics3>,
	requires<IContactManagerStatics3, Windows::ApplicationModel::Contacts::IContactManagerStatics2, Windows::ApplicationModel::Contacts::IContactManagerStatics>
{
	IContactManagerStatics3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactManagerStatics3>(m_ptr); }
	using impl_IContactManagerStatics::ShowContactCard;
	using impl_IContactManagerStatics::ShowDelayLoadedContactCard;
	using impl_IContactManagerStatics2::RequestStoreAsync;
	using impl_IContactManagerStatics3::RequestStoreAsync;
	using impl_IContactManagerStatics3::ShowContactCard;
	using impl_IContactManagerStatics3::ShowDelayLoadedContactCard;
};

struct IAggregateContactManager :
	Windows::IInspectable,
	impl_IAggregateContactManager<IAggregateContactManager>
{
	IAggregateContactManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAggregateContactManager>(m_ptr); }
};

struct IContactAnnotationStore :
	Windows::IInspectable,
	impl_IContactAnnotationStore<IContactAnnotationStore>
{
	IContactAnnotationStore(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactAnnotationStore>(m_ptr); }
};

struct IContactAnnotationList :
	Windows::IInspectable,
	impl_IContactAnnotationList<IContactAnnotationList>
{
	IContactAnnotationList(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactAnnotationList>(m_ptr); }
};

struct IContactAnnotation :
	Windows::IInspectable,
	impl_IContactAnnotation<IContactAnnotation>
{
	IContactAnnotation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactAnnotation>(m_ptr); }
};

struct IContactStoreNotificationTriggerDetails :
	Windows::IInspectable,
	impl_IContactStoreNotificationTriggerDetails<IContactStoreNotificationTriggerDetails>
{
	IContactStoreNotificationTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactStoreNotificationTriggerDetails>(m_ptr); }
};

struct IContactStore :
	Windows::IInspectable,
	impl_IContactStore<IContactStore>
{
	IContactStore(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactStore>(m_ptr); }
};

struct IContactStore2 :
	Windows::IInspectable,
	impl_IContactStore2<IContactStore2>,
	requires<IContactStore2, Windows::ApplicationModel::Contacts::IContactStore>
{
	IContactStore2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactStore2>(m_ptr); }
};

struct IContactList :
	Windows::IInspectable,
	impl_IContactList<IContactList>
{
	IContactList(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactList>(m_ptr); }
};

struct IContactListSyncManager :
	Windows::IInspectable,
	impl_IContactListSyncManager<IContactListSyncManager>
{
	IContactListSyncManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactListSyncManager>(m_ptr); }
};

struct IContactConnectedServiceAccount :
	Windows::IInspectable,
	impl_IContactConnectedServiceAccount<IContactConnectedServiceAccount>
{
	IContactConnectedServiceAccount(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactConnectedServiceAccount>(m_ptr); }
};

struct IContactSignificantOther :
	Windows::IInspectable,
	impl_IContactSignificantOther<IContactSignificantOther>
{
	IContactSignificantOther(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactSignificantOther>(m_ptr); }
};

struct IContactSignificantOther2 :
	Windows::IInspectable,
	impl_IContactSignificantOther2<IContactSignificantOther2>,
	requires<IContactSignificantOther2, Windows::ApplicationModel::Contacts::IContactSignificantOther>
{
	IContactSignificantOther2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactSignificantOther2>(m_ptr); }
};

struct IContactWebsite :
	Windows::IInspectable,
	impl_IContactWebsite<IContactWebsite>
{
	IContactWebsite(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactWebsite>(m_ptr); }
};

struct IContactWebsite2 :
	Windows::IInspectable,
	impl_IContactWebsite2<IContactWebsite2>,
	requires<IContactWebsite2, Windows::ApplicationModel::Contacts::IContactWebsite>
{
	IContactWebsite2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactWebsite2>(m_ptr); }
};

struct IContactEmail :
	Windows::IInspectable,
	impl_IContactEmail<IContactEmail>
{
	IContactEmail(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactEmail>(m_ptr); }
};

struct IContactPhone :
	Windows::IInspectable,
	impl_IContactPhone<IContactPhone>
{
	IContactPhone(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactPhone>(m_ptr); }
};

struct IContactAddress :
	Windows::IInspectable,
	impl_IContactAddress<IContactAddress>
{
	IContactAddress(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactAddress>(m_ptr); }
};

struct IContactDate :
	Windows::IInspectable,
	impl_IContactDate<IContactDate>
{
	IContactDate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactDate>(m_ptr); }
};

struct IContactJobInfo :
	Windows::IInspectable,
	impl_IContactJobInfo<IContactJobInfo>
{
	IContactJobInfo(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactJobInfo>(m_ptr); }
};

struct IContact :
	Windows::IInspectable,
	impl_IContact<IContact>
{
	IContact(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContact>(m_ptr); }
};

struct IContactField :
	Windows::IInspectable,
	impl_IContactField<IContactField>
{
	IContactField(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactField>(m_ptr); }
};

struct IContactName :
	Windows::IInspectable,
	impl_IContactName<IContactName>
{
	IContactName(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactName>(m_ptr); }
};

struct IContact2 :
	Windows::IInspectable,
	impl_IContact2<IContact2>,
	requires<IContact2, Windows::ApplicationModel::Contacts::IContact>
{
	IContact2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContact2>(m_ptr); }
};

struct IContact3 :
	Windows::IInspectable,
	impl_IContact3<IContact3>,
	requires<IContact3, Windows::ApplicationModel::Contacts::IContact2, Windows::ApplicationModel::Contacts::IContact>
{
	IContact3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContact3>(m_ptr); }
};

struct IContactChange :
	Windows::IInspectable,
	impl_IContactChange<IContactChange>
{
	IContactChange(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactChange>(m_ptr); }
};

struct IContactChangedDeferral :
	Windows::IInspectable,
	impl_IContactChangedDeferral<IContactChangedDeferral>
{
	IContactChangedDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactChangedDeferral>(m_ptr); }
};

struct IContactChangedEventArgs :
	Windows::IInspectable,
	impl_IContactChangedEventArgs<IContactChangedEventArgs>
{
	IContactChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactChangedEventArgs>(m_ptr); }
};

struct IContactChangeReader :
	Windows::IInspectable,
	impl_IContactChangeReader<IContactChangeReader>
{
	IContactChangeReader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactChangeReader>(m_ptr); }
};

struct IContactChangeTracker :
	Windows::IInspectable,
	impl_IContactChangeTracker<IContactChangeTracker>
{
	IContactChangeTracker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactChangeTracker>(m_ptr); }
};

struct IContactReader :
	Windows::IInspectable,
	impl_IContactReader<IContactReader>
{
	IContactReader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactReader>(m_ptr); }
};

struct IContactQueryTextSearch :
	Windows::IInspectable,
	impl_IContactQueryTextSearch<IContactQueryTextSearch>
{
	IContactQueryTextSearch(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactQueryTextSearch>(m_ptr); }
};

struct IContactQueryOptionsFactory :
	Windows::IInspectable,
	impl_IContactQueryOptionsFactory<IContactQueryOptionsFactory>
{
	IContactQueryOptionsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactQueryOptionsFactory>(m_ptr); }
};

struct IContactQueryOptions :
	Windows::IInspectable,
	impl_IContactQueryOptions<IContactQueryOptions>
{
	IContactQueryOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactQueryOptions>(m_ptr); }
};

struct IContactBatch :
	Windows::IInspectable,
	impl_IContactBatch<IContactBatch>
{
	IContactBatch(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactBatch>(m_ptr); }
};

struct IContactMatchReason :
	Windows::IInspectable,
	impl_IContactMatchReason<IContactMatchReason>
{
	IContactMatchReason(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactMatchReason>(m_ptr); }
};

struct IContactLaunchActionVerbsStatics :
	Windows::IInspectable,
	impl_IContactLaunchActionVerbsStatics<IContactLaunchActionVerbsStatics>
{
	IContactLaunchActionVerbsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactLaunchActionVerbsStatics>(m_ptr); }
};

struct IContactLocationField :
	Windows::IInspectable,
	impl_IContactLocationField<IContactLocationField>,
	requires<IContactLocationField, Windows::ApplicationModel::Contacts::IContactField>
{
	IContactLocationField(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactLocationField>(m_ptr); }
};

struct IContactInstantMessageField :
	Windows::IInspectable,
	impl_IContactInstantMessageField<IContactInstantMessageField>,
	requires<IContactInstantMessageField, Windows::ApplicationModel::Contacts::IContactField>
{
	IContactInstantMessageField(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactInstantMessageField>(m_ptr); }
};

struct IKnownContactFieldStatics :
	Windows::IInspectable,
	impl_IKnownContactFieldStatics<IKnownContactFieldStatics>
{
	IKnownContactFieldStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKnownContactFieldStatics>(m_ptr); }
};

struct IContactInformation :
	Windows::IInspectable,
	impl_IContactInformation<IContactInformation>
{
	IContactInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactInformation>(m_ptr); }
};

struct IContactFieldFactory :
	Windows::IInspectable,
	impl_IContactFieldFactory<IContactFieldFactory>
{
	IContactFieldFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactFieldFactory>(m_ptr); }
};

struct IContactLocationFieldFactory :
	Windows::IInspectable,
	impl_IContactLocationFieldFactory<IContactLocationFieldFactory>
{
	IContactLocationFieldFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactLocationFieldFactory>(m_ptr); }
};

struct IContactInstantMessageFieldFactory :
	Windows::IInspectable,
	impl_IContactInstantMessageFieldFactory<IContactInstantMessageFieldFactory>
{
	IContactInstantMessageFieldFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactInstantMessageFieldFactory>(m_ptr); }
};

struct IContactPicker :
	Windows::IInspectable,
	impl_IContactPicker<IContactPicker>
{
	IContactPicker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactPicker>(m_ptr); }
};

struct IContactPicker2 :
	Windows::IInspectable,
	impl_IContactPicker2<IContactPicker2>
{
	IContactPicker2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactPicker2>(m_ptr); }
};

struct IContactCardDelayedDataLoader :
	Windows::IInspectable,
	impl_IContactCardDelayedDataLoader<IContactCardDelayedDataLoader>
{
	IContactCardDelayedDataLoader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactCardDelayedDataLoader>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

struct IContactRemovedEventArgs :
	Windows::IInspectable,
	impl_IContactRemovedEventArgs<IContactRemovedEventArgs>
{
	IContactRemovedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactRemovedEventArgs>(m_ptr); }
};

struct IContactPickerUI :
	Windows::IInspectable,
	impl_IContactPickerUI<IContactPickerUI>
{
	IContactPickerUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactPickerUI>(m_ptr); }
};

struct IContactPickerUI2 :
	Windows::IInspectable,
	impl_IContactPickerUI2<IContactPickerUI2>
{
	IContactPickerUI2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContactPickerUI2>(m_ptr); }
};

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Core {

struct IAppListEntry :
	Windows::IInspectable,
	impl_IAppListEntry<IAppListEntry>
{
	IAppListEntry(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppListEntry>(m_ptr); }
};

struct IFrameworkView :
	Windows::IInspectable,
	impl_IFrameworkView<IFrameworkView>
{
	IFrameworkView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFrameworkView>(m_ptr); }
};

struct IFrameworkViewSource :
	Windows::IInspectable,
	impl_IFrameworkViewSource<IFrameworkViewSource>
{
	IFrameworkViewSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFrameworkViewSource>(m_ptr); }
};

struct ICoreApplication :
	Windows::IInspectable,
	impl_ICoreApplication<ICoreApplication>
{
	ICoreApplication(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreApplication>(m_ptr); }
};

struct ICoreApplicationUseCount :
	Windows::IInspectable,
	impl_ICoreApplicationUseCount<ICoreApplicationUseCount>
{
	ICoreApplicationUseCount(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreApplicationUseCount>(m_ptr); }
};

struct ICoreApplicationExit :
	Windows::IInspectable,
	impl_ICoreApplicationExit<ICoreApplicationExit>
{
	ICoreApplicationExit(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreApplicationExit>(m_ptr); }
};

struct ICoreImmersiveApplication :
	Windows::IInspectable,
	impl_ICoreImmersiveApplication<ICoreImmersiveApplication>
{
	ICoreImmersiveApplication(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreImmersiveApplication>(m_ptr); }
};

struct ICoreImmersiveApplication2 :
	Windows::IInspectable,
	impl_ICoreImmersiveApplication2<ICoreImmersiveApplication2>
{
	ICoreImmersiveApplication2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreImmersiveApplication2>(m_ptr); }
};

struct ICoreImmersiveApplication3 :
	Windows::IInspectable,
	impl_ICoreImmersiveApplication3<ICoreImmersiveApplication3>
{
	ICoreImmersiveApplication3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreImmersiveApplication3>(m_ptr); }
};

struct ICoreApplicationUnhandledError :
	Windows::IInspectable,
	impl_ICoreApplicationUnhandledError<ICoreApplicationUnhandledError>
{
	ICoreApplicationUnhandledError(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreApplicationUnhandledError>(m_ptr); }
};

struct ICoreApplicationView :
	Windows::IInspectable,
	impl_ICoreApplicationView<ICoreApplicationView>
{
	ICoreApplicationView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreApplicationView>(m_ptr); }
};

struct ICoreApplicationView2 :
	Windows::IInspectable,
	impl_ICoreApplicationView2<ICoreApplicationView2>
{
	ICoreApplicationView2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreApplicationView2>(m_ptr); }
};

struct ICoreApplicationView3 :
	Windows::IInspectable,
	impl_ICoreApplicationView3<ICoreApplicationView3>
{
	ICoreApplicationView3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreApplicationView3>(m_ptr); }
};

struct IHostedViewClosingEventArgs :
	Windows::IInspectable,
	impl_IHostedViewClosingEventArgs<IHostedViewClosingEventArgs>
{
	IHostedViewClosingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHostedViewClosingEventArgs>(m_ptr); }
};

struct ICoreApplicationViewTitleBar :
	Windows::IInspectable,
	impl_ICoreApplicationViewTitleBar<ICoreApplicationViewTitleBar>
{
	ICoreApplicationViewTitleBar(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreApplicationViewTitleBar>(m_ptr); }
};

struct IUnhandledErrorDetectedEventArgs :
	Windows::IInspectable,
	impl_IUnhandledErrorDetectedEventArgs<IUnhandledErrorDetectedEventArgs>
{
	IUnhandledErrorDetectedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUnhandledErrorDetectedEventArgs>(m_ptr); }
};

struct IUnhandledError :
	Windows::IInspectable,
	impl_IUnhandledError<IUnhandledError>
{
	IUnhandledError(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUnhandledError>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

struct IDataProviderHandler :
	Windows::IUnknown,
	impl_IDataProviderHandler<IDataProviderHandler>
{
	IDataProviderHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataProviderHandler>(m_ptr); }
};

struct IStandardDataFormatsStatics :
	Windows::IInspectable,
	impl_IStandardDataFormatsStatics<IStandardDataFormatsStatics>
{
	IStandardDataFormatsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStandardDataFormatsStatics>(m_ptr); }
};

struct IStandardDataFormatsStatics2 :
	Windows::IInspectable,
	impl_IStandardDataFormatsStatics2<IStandardDataFormatsStatics2>
{
	IStandardDataFormatsStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStandardDataFormatsStatics2>(m_ptr); }
};

struct IDataPackagePropertySetView :
	Windows::IInspectable,
	impl_IDataPackagePropertySetView<IDataPackagePropertySetView>,
	requires<IDataPackagePropertySetView, Windows::Foundation::Collections::IMapView<hstring, IInspectable>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<hstring, IInspectable>>>
{
	IDataPackagePropertySetView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataPackagePropertySetView>(m_ptr); }
};

struct IDataPackagePropertySetView2 :
	Windows::IInspectable,
	impl_IDataPackagePropertySetView2<IDataPackagePropertySetView2>
{
	IDataPackagePropertySetView2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataPackagePropertySetView2>(m_ptr); }
};

struct IDataPackagePropertySetView3 :
	Windows::IInspectable,
	impl_IDataPackagePropertySetView3<IDataPackagePropertySetView3>
{
	IDataPackagePropertySetView3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataPackagePropertySetView3>(m_ptr); }
};

struct IDataPackagePropertySet :
	Windows::IInspectable,
	impl_IDataPackagePropertySet<IDataPackagePropertySet>,
	requires<IDataPackagePropertySet, Windows::Foundation::Collections::IMap<hstring, IInspectable>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<hstring, IInspectable>>>
{
	IDataPackagePropertySet(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataPackagePropertySet>(m_ptr); }
};

struct IDataPackagePropertySet2 :
	Windows::IInspectable,
	impl_IDataPackagePropertySet2<IDataPackagePropertySet2>
{
	IDataPackagePropertySet2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataPackagePropertySet2>(m_ptr); }
};

struct IDataPackagePropertySet3 :
	Windows::IInspectable,
	impl_IDataPackagePropertySet3<IDataPackagePropertySet3>
{
	IDataPackagePropertySet3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataPackagePropertySet3>(m_ptr); }
};

struct IDataProviderDeferral :
	Windows::IInspectable,
	impl_IDataProviderDeferral<IDataProviderDeferral>
{
	IDataProviderDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataProviderDeferral>(m_ptr); }
};

struct IDataProviderRequest :
	Windows::IInspectable,
	impl_IDataProviderRequest<IDataProviderRequest>
{
	IDataProviderRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataProviderRequest>(m_ptr); }
};

struct IOperationCompletedEventArgs :
	Windows::IInspectable,
	impl_IOperationCompletedEventArgs<IOperationCompletedEventArgs>
{
	IOperationCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IOperationCompletedEventArgs>(m_ptr); }
};

struct IOperationCompletedEventArgs2 :
	Windows::IInspectable,
	impl_IOperationCompletedEventArgs2<IOperationCompletedEventArgs2>
{
	IOperationCompletedEventArgs2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IOperationCompletedEventArgs2>(m_ptr); }
};

struct IDataPackageView :
	Windows::IInspectable,
	impl_IDataPackageView<IDataPackageView>
{
	IDataPackageView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataPackageView>(m_ptr); }
};

struct IDataPackageView2 :
	Windows::IInspectable,
	impl_IDataPackageView2<IDataPackageView2>
{
	IDataPackageView2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataPackageView2>(m_ptr); }
};

struct IDataPackageView3 :
	Windows::IInspectable,
	impl_IDataPackageView3<IDataPackageView3>
{
	IDataPackageView3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataPackageView3>(m_ptr); }
};

struct IDataPackageView4 :
	Windows::IInspectable,
	impl_IDataPackageView4<IDataPackageView4>
{
	IDataPackageView4(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataPackageView4>(m_ptr); }
};

struct IDataPackage :
	Windows::IInspectable,
	impl_IDataPackage<IDataPackage>
{
	IDataPackage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataPackage>(m_ptr); }
};

struct IDataPackage2 :
	Windows::IInspectable,
	impl_IDataPackage2<IDataPackage2>
{
	IDataPackage2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataPackage2>(m_ptr); }
};

struct IHtmlFormatHelperStatics :
	Windows::IInspectable,
	impl_IHtmlFormatHelperStatics<IHtmlFormatHelperStatics>
{
	IHtmlFormatHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHtmlFormatHelperStatics>(m_ptr); }
};

struct IClipboardStatics :
	Windows::IInspectable,
	impl_IClipboardStatics<IClipboardStatics>
{
	IClipboardStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IClipboardStatics>(m_ptr); }
};

struct IDataRequestDeferral :
	Windows::IInspectable,
	impl_IDataRequestDeferral<IDataRequestDeferral>
{
	IDataRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataRequestDeferral>(m_ptr); }
};

struct IDataRequest :
	Windows::IInspectable,
	impl_IDataRequest<IDataRequest>
{
	IDataRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataRequest>(m_ptr); }
};

struct IDataRequestedEventArgs :
	Windows::IInspectable,
	impl_IDataRequestedEventArgs<IDataRequestedEventArgs>
{
	IDataRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataRequestedEventArgs>(m_ptr); }
};

struct ITargetApplicationChosenEventArgs :
	Windows::IInspectable,
	impl_ITargetApplicationChosenEventArgs<ITargetApplicationChosenEventArgs>
{
	ITargetApplicationChosenEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITargetApplicationChosenEventArgs>(m_ptr); }
};

struct IDataTransferManager :
	Windows::IInspectable,
	impl_IDataTransferManager<IDataTransferManager>
{
	IDataTransferManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataTransferManager>(m_ptr); }
};

struct IDataTransferManagerStatics :
	Windows::IInspectable,
	impl_IDataTransferManagerStatics<IDataTransferManagerStatics>
{
	IDataTransferManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataTransferManagerStatics>(m_ptr); }
};

struct ISharedStorageAccessManagerStatics :
	Windows::IInspectable,
	impl_ISharedStorageAccessManagerStatics<ISharedStorageAccessManagerStatics>
{
	ISharedStorageAccessManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISharedStorageAccessManagerStatics>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

struct IQuickLink :
	Windows::IInspectable,
	impl_IQuickLink<IQuickLink>
{
	IQuickLink(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IQuickLink>(m_ptr); }
};

struct IShareOperation :
	Windows::IInspectable,
	impl_IShareOperation<IShareOperation>
{
	IShareOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IShareOperation>(m_ptr); }
};

struct IShareOperation2 :
	Windows::IInspectable,
	impl_IShareOperation2<IShareOperation2>
{
	IShareOperation2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IShareOperation2>(m_ptr); }
};

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Search {

struct ISearchPaneQueryLinguisticDetails :
	Windows::IInspectable,
	impl_ISearchPaneQueryLinguisticDetails<ISearchPaneQueryLinguisticDetails>
{
	ISearchPaneQueryLinguisticDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchPaneQueryLinguisticDetails>(m_ptr); }
};

struct ISearchPaneVisibilityChangedEventArgs :
	Windows::IInspectable,
	impl_ISearchPaneVisibilityChangedEventArgs<ISearchPaneVisibilityChangedEventArgs>
{
	ISearchPaneVisibilityChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchPaneVisibilityChangedEventArgs>(m_ptr); }
};

struct ISearchPaneQueryChangedEventArgs :
	Windows::IInspectable,
	impl_ISearchPaneQueryChangedEventArgs<ISearchPaneQueryChangedEventArgs>
{
	ISearchPaneQueryChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchPaneQueryChangedEventArgs>(m_ptr); }
};

struct ISearchPaneQuerySubmittedEventArgs :
	Windows::IInspectable,
	impl_ISearchPaneQuerySubmittedEventArgs<ISearchPaneQuerySubmittedEventArgs>
{
	ISearchPaneQuerySubmittedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchPaneQuerySubmittedEventArgs>(m_ptr); }
};

struct ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails :
	Windows::IInspectable,
	impl_ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails<ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails>
{
	ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails>(m_ptr); }
};

struct ISearchPaneResultSuggestionChosenEventArgs :
	Windows::IInspectable,
	impl_ISearchPaneResultSuggestionChosenEventArgs<ISearchPaneResultSuggestionChosenEventArgs>
{
	ISearchPaneResultSuggestionChosenEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchPaneResultSuggestionChosenEventArgs>(m_ptr); }
};

struct ISearchSuggestionCollection :
	Windows::IInspectable,
	impl_ISearchSuggestionCollection<ISearchSuggestionCollection>
{
	ISearchSuggestionCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchSuggestionCollection>(m_ptr); }
};

struct ISearchPaneSuggestionsRequestDeferral :
	Windows::IInspectable,
	impl_ISearchPaneSuggestionsRequestDeferral<ISearchPaneSuggestionsRequestDeferral>
{
	ISearchPaneSuggestionsRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchPaneSuggestionsRequestDeferral>(m_ptr); }
};

struct ISearchPaneSuggestionsRequest :
	Windows::IInspectable,
	impl_ISearchPaneSuggestionsRequest<ISearchPaneSuggestionsRequest>
{
	ISearchPaneSuggestionsRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchPaneSuggestionsRequest>(m_ptr); }
};

struct ISearchPaneSuggestionsRequestedEventArgs :
	Windows::IInspectable,
	impl_ISearchPaneSuggestionsRequestedEventArgs<ISearchPaneSuggestionsRequestedEventArgs>,
	requires<ISearchPaneSuggestionsRequestedEventArgs, Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs>
{
	ISearchPaneSuggestionsRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchPaneSuggestionsRequestedEventArgs>(m_ptr); }
};

struct ILocalContentSuggestionSettings :
	Windows::IInspectable,
	impl_ILocalContentSuggestionSettings<ILocalContentSuggestionSettings>
{
	ILocalContentSuggestionSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILocalContentSuggestionSettings>(m_ptr); }
};

struct ISearchPaneStatics :
	Windows::IInspectable,
	impl_ISearchPaneStatics<ISearchPaneStatics>
{
	ISearchPaneStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchPaneStatics>(m_ptr); }
};

struct ISearchPaneStaticsWithHideThisApplication :
	Windows::IInspectable,
	impl_ISearchPaneStaticsWithHideThisApplication<ISearchPaneStaticsWithHideThisApplication>
{
	ISearchPaneStaticsWithHideThisApplication(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchPaneStaticsWithHideThisApplication>(m_ptr); }
};

struct ISearchPane :
	Windows::IInspectable,
	impl_ISearchPane<ISearchPane>
{
	ISearchPane(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchPane>(m_ptr); }
};

struct ISearchQueryLinguisticDetailsFactory :
	Windows::IInspectable,
	impl_ISearchQueryLinguisticDetailsFactory<ISearchQueryLinguisticDetailsFactory>
{
	ISearchQueryLinguisticDetailsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchQueryLinguisticDetailsFactory>(m_ptr); }
};

struct ISearchQueryLinguisticDetails :
	Windows::IInspectable,
	impl_ISearchQueryLinguisticDetails<ISearchQueryLinguisticDetails>
{
	ISearchQueryLinguisticDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchQueryLinguisticDetails>(m_ptr); }
};

struct ISearchSuggestionsRequestDeferral :
	Windows::IInspectable,
	impl_ISearchSuggestionsRequestDeferral<ISearchSuggestionsRequestDeferral>
{
	ISearchSuggestionsRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchSuggestionsRequestDeferral>(m_ptr); }
};

struct ISearchSuggestionsRequest :
	Windows::IInspectable,
	impl_ISearchSuggestionsRequest<ISearchSuggestionsRequest>
{
	ISearchSuggestionsRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISearchSuggestionsRequest>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Data { namespace Text {

struct IWordSegmentsTokenizingHandler :
	Windows::IUnknown,
	impl_IWordSegmentsTokenizingHandler<IWordSegmentsTokenizingHandler>
{
	IWordSegmentsTokenizingHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWordSegmentsTokenizingHandler>(m_ptr); }
};

struct ISelectableWordSegmentsTokenizingHandler :
	Windows::IUnknown,
	impl_ISelectableWordSegmentsTokenizingHandler<ISelectableWordSegmentsTokenizingHandler>
{
	ISelectableWordSegmentsTokenizingHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISelectableWordSegmentsTokenizingHandler>(m_ptr); }
};

struct ISemanticTextQueryFactory :
	Windows::IInspectable,
	impl_ISemanticTextQueryFactory<ISemanticTextQueryFactory>
{
	ISemanticTextQueryFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISemanticTextQueryFactory>(m_ptr); }
};

struct ISemanticTextQuery :
	Windows::IInspectable,
	impl_ISemanticTextQuery<ISemanticTextQuery>
{
	ISemanticTextQuery(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISemanticTextQuery>(m_ptr); }
};

struct IUnicodeCharactersStatics :
	Windows::IInspectable,
	impl_IUnicodeCharactersStatics<IUnicodeCharactersStatics>
{
	IUnicodeCharactersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUnicodeCharactersStatics>(m_ptr); }
};

struct IAlternateWordForm :
	Windows::IInspectable,
	impl_IAlternateWordForm<IAlternateWordForm>
{
	IAlternateWordForm(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAlternateWordForm>(m_ptr); }
};

struct ISelectableWordSegment :
	Windows::IInspectable,
	impl_ISelectableWordSegment<ISelectableWordSegment>
{
	ISelectableWordSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISelectableWordSegment>(m_ptr); }
};

struct IWordSegment :
	Windows::IInspectable,
	impl_IWordSegment<IWordSegment>
{
	IWordSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWordSegment>(m_ptr); }
};

struct IWordsSegmenter :
	Windows::IInspectable,
	impl_IWordsSegmenter<IWordsSegmenter>
{
	IWordsSegmenter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWordsSegmenter>(m_ptr); }
};

struct IWordsSegmenterFactory :
	Windows::IInspectable,
	impl_IWordsSegmenterFactory<IWordsSegmenterFactory>
{
	IWordsSegmenterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWordsSegmenterFactory>(m_ptr); }
};

struct ISelectableWordsSegmenter :
	Windows::IInspectable,
	impl_ISelectableWordsSegmenter<ISelectableWordsSegmenter>
{
	ISelectableWordsSegmenter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISelectableWordsSegmenter>(m_ptr); }
};

struct ISelectableWordsSegmenterFactory :
	Windows::IInspectable,
	impl_ISelectableWordsSegmenterFactory<ISelectableWordsSegmenterFactory>
{
	ISelectableWordsSegmenterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISelectableWordsSegmenterFactory>(m_ptr); }
};

struct ITextPredictionGenerator :
	Windows::IInspectable,
	impl_ITextPredictionGenerator<ITextPredictionGenerator>
{
	ITextPredictionGenerator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITextPredictionGenerator>(m_ptr); }
};

struct ITextPredictionGeneratorFactory :
	Windows::IInspectable,
	impl_ITextPredictionGeneratorFactory<ITextPredictionGeneratorFactory>
{
	ITextPredictionGeneratorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITextPredictionGeneratorFactory>(m_ptr); }
};

struct ITextConversionGenerator :
	Windows::IInspectable,
	impl_ITextConversionGenerator<ITextConversionGenerator>
{
	ITextConversionGenerator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITextConversionGenerator>(m_ptr); }
};

struct ITextConversionGeneratorFactory :
	Windows::IInspectable,
	impl_ITextConversionGeneratorFactory<ITextConversionGeneratorFactory>
{
	ITextConversionGeneratorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITextConversionGeneratorFactory>(m_ptr); }
};

struct ITextReverseConversionGenerator :
	Windows::IInspectable,
	impl_ITextReverseConversionGenerator<ITextReverseConversionGenerator>
{
	ITextReverseConversionGenerator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITextReverseConversionGenerator>(m_ptr); }
};

struct ITextReverseConversionGeneratorFactory :
	Windows::IInspectable,
	impl_ITextReverseConversionGeneratorFactory<ITextReverseConversionGeneratorFactory>
{
	ITextReverseConversionGeneratorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITextReverseConversionGeneratorFactory>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth {

struct IBluetoothDevice :
	Windows::IInspectable,
	impl_IBluetoothDevice<IBluetoothDevice>
{
	IBluetoothDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothDevice>(m_ptr); }
};

struct IBluetoothDevice2 :
	Windows::IInspectable,
	impl_IBluetoothDevice2<IBluetoothDevice2>,
	requires<IBluetoothDevice2, Windows::Devices::Bluetooth::IBluetoothDevice>
{
	IBluetoothDevice2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothDevice2>(m_ptr); }
};

struct IBluetoothDeviceStatics :
	Windows::IInspectable,
	impl_IBluetoothDeviceStatics<IBluetoothDeviceStatics>
{
	IBluetoothDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothDeviceStatics>(m_ptr); }
};

struct IBluetoothDeviceStatics2 :
	Windows::IInspectable,
	impl_IBluetoothDeviceStatics2<IBluetoothDeviceStatics2>
{
	IBluetoothDeviceStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothDeviceStatics2>(m_ptr); }
};

struct IBluetoothLEAppearanceCategoriesStatics :
	Windows::IInspectable,
	impl_IBluetoothLEAppearanceCategoriesStatics<IBluetoothLEAppearanceCategoriesStatics>
{
	IBluetoothLEAppearanceCategoriesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAppearanceCategoriesStatics>(m_ptr); }
};

struct IBluetoothLEAppearanceSubcategoriesStatics :
	Windows::IInspectable,
	impl_IBluetoothLEAppearanceSubcategoriesStatics<IBluetoothLEAppearanceSubcategoriesStatics>
{
	IBluetoothLEAppearanceSubcategoriesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAppearanceSubcategoriesStatics>(m_ptr); }
};

struct IBluetoothLEAppearance :
	Windows::IInspectable,
	impl_IBluetoothLEAppearance<IBluetoothLEAppearance>
{
	IBluetoothLEAppearance(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAppearance>(m_ptr); }
};

struct IBluetoothLEAppearanceStatics :
	Windows::IInspectable,
	impl_IBluetoothLEAppearanceStatics<IBluetoothLEAppearanceStatics>
{
	IBluetoothLEAppearanceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAppearanceStatics>(m_ptr); }
};

struct IBluetoothLEDevice :
	Windows::IInspectable,
	impl_IBluetoothLEDevice<IBluetoothLEDevice>
{
	IBluetoothLEDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEDevice>(m_ptr); }
};

struct IBluetoothLEDevice2 :
	Windows::IInspectable,
	impl_IBluetoothLEDevice2<IBluetoothLEDevice2>,
	requires<IBluetoothLEDevice2, Windows::Devices::Bluetooth::IBluetoothLEDevice>
{
	IBluetoothLEDevice2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEDevice2>(m_ptr); }
};

struct IBluetoothLEDeviceStatics :
	Windows::IInspectable,
	impl_IBluetoothLEDeviceStatics<IBluetoothLEDeviceStatics>
{
	IBluetoothLEDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEDeviceStatics>(m_ptr); }
};

struct IBluetoothLEDeviceStatics2 :
	Windows::IInspectable,
	impl_IBluetoothLEDeviceStatics2<IBluetoothLEDeviceStatics2>
{
	IBluetoothLEDeviceStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEDeviceStatics2>(m_ptr); }
};

struct IBluetoothClassOfDevice :
	Windows::IInspectable,
	impl_IBluetoothClassOfDevice<IBluetoothClassOfDevice>
{
	IBluetoothClassOfDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothClassOfDevice>(m_ptr); }
};

struct IBluetoothClassOfDeviceStatics :
	Windows::IInspectable,
	impl_IBluetoothClassOfDeviceStatics<IBluetoothClassOfDeviceStatics>
{
	IBluetoothClassOfDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothClassOfDeviceStatics>(m_ptr); }
};

struct IBluetoothSignalStrengthFilter :
	Windows::IInspectable,
	impl_IBluetoothSignalStrengthFilter<IBluetoothSignalStrengthFilter>
{
	IBluetoothSignalStrengthFilter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothSignalStrengthFilter>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Advertisement {

struct IBluetoothLEAdvertisement :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisement<IBluetoothLEAdvertisement>
{
	IBluetoothLEAdvertisement(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisement>(m_ptr); }
};

struct IBluetoothLEAdvertisementFilter :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementFilter<IBluetoothLEAdvertisementFilter>
{
	IBluetoothLEAdvertisementFilter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementFilter>(m_ptr); }
};

struct IBluetoothLEAdvertisementWatcherStoppedEventArgs :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementWatcherStoppedEventArgs<IBluetoothLEAdvertisementWatcherStoppedEventArgs>
{
	IBluetoothLEAdvertisementWatcherStoppedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementWatcherStoppedEventArgs>(m_ptr); }
};

struct IBluetoothLEAdvertisementWatcherFactory :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementWatcherFactory<IBluetoothLEAdvertisementWatcherFactory>
{
	IBluetoothLEAdvertisementWatcherFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementWatcherFactory>(m_ptr); }
};

struct IBluetoothLEAdvertisementWatcher :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementWatcher<IBluetoothLEAdvertisementWatcher>
{
	IBluetoothLEAdvertisementWatcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementWatcher>(m_ptr); }
};

struct IBluetoothLEAdvertisementReceivedEventArgs :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementReceivedEventArgs<IBluetoothLEAdvertisementReceivedEventArgs>
{
	IBluetoothLEAdvertisementReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementReceivedEventArgs>(m_ptr); }
};

struct IBluetoothLEAdvertisementDataSectionFactory :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementDataSectionFactory<IBluetoothLEAdvertisementDataSectionFactory>
{
	IBluetoothLEAdvertisementDataSectionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementDataSectionFactory>(m_ptr); }
};

struct IBluetoothLEAdvertisementDataSection :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementDataSection<IBluetoothLEAdvertisementDataSection>
{
	IBluetoothLEAdvertisementDataSection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementDataSection>(m_ptr); }
};

struct IBluetoothLEManufacturerDataFactory :
	Windows::IInspectable,
	impl_IBluetoothLEManufacturerDataFactory<IBluetoothLEManufacturerDataFactory>
{
	IBluetoothLEManufacturerDataFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEManufacturerDataFactory>(m_ptr); }
};

struct IBluetoothLEManufacturerData :
	Windows::IInspectable,
	impl_IBluetoothLEManufacturerData<IBluetoothLEManufacturerData>
{
	IBluetoothLEManufacturerData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEManufacturerData>(m_ptr); }
};

struct IBluetoothLEAdvertisementBytePatternFactory :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementBytePatternFactory<IBluetoothLEAdvertisementBytePatternFactory>
{
	IBluetoothLEAdvertisementBytePatternFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementBytePatternFactory>(m_ptr); }
};

struct IBluetoothLEAdvertisementBytePattern :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementBytePattern<IBluetoothLEAdvertisementBytePattern>
{
	IBluetoothLEAdvertisementBytePattern(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementBytePattern>(m_ptr); }
};

struct IBluetoothLEAdvertisementDataTypesStatics :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementDataTypesStatics<IBluetoothLEAdvertisementDataTypesStatics>
{
	IBluetoothLEAdvertisementDataTypesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementDataTypesStatics>(m_ptr); }
};

struct IBluetoothLEAdvertisementPublisherStatusChangedEventArgs :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementPublisherStatusChangedEventArgs<IBluetoothLEAdvertisementPublisherStatusChangedEventArgs>
{
	IBluetoothLEAdvertisementPublisherStatusChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementPublisherStatusChangedEventArgs>(m_ptr); }
};

struct IBluetoothLEAdvertisementPublisherFactory :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementPublisherFactory<IBluetoothLEAdvertisementPublisherFactory>
{
	IBluetoothLEAdvertisementPublisherFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementPublisherFactory>(m_ptr); }
};

struct IBluetoothLEAdvertisementPublisher :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementPublisher<IBluetoothLEAdvertisementPublisher>
{
	IBluetoothLEAdvertisementPublisher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementPublisher>(m_ptr); }
};

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Background {

struct IRfcommInboundConnectionInformation :
	Windows::IInspectable,
	impl_IRfcommInboundConnectionInformation<IRfcommInboundConnectionInformation>
{
	IRfcommInboundConnectionInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRfcommInboundConnectionInformation>(m_ptr); }
};

struct IRfcommOutboundConnectionInformation :
	Windows::IInspectable,
	impl_IRfcommOutboundConnectionInformation<IRfcommOutboundConnectionInformation>
{
	IRfcommOutboundConnectionInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRfcommOutboundConnectionInformation>(m_ptr); }
};

struct IRfcommConnectionTriggerDetails :
	Windows::IInspectable,
	impl_IRfcommConnectionTriggerDetails<IRfcommConnectionTriggerDetails>
{
	IRfcommConnectionTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRfcommConnectionTriggerDetails>(m_ptr); }
};

struct IGattCharacteristicNotificationTriggerDetails :
	Windows::IInspectable,
	impl_IGattCharacteristicNotificationTriggerDetails<IGattCharacteristicNotificationTriggerDetails>
{
	IGattCharacteristicNotificationTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattCharacteristicNotificationTriggerDetails>(m_ptr); }
};

struct IBluetoothLEAdvertisementWatcherTriggerDetails :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementWatcherTriggerDetails<IBluetoothLEAdvertisementWatcherTriggerDetails>
{
	IBluetoothLEAdvertisementWatcherTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementWatcherTriggerDetails>(m_ptr); }
};

struct IBluetoothLEAdvertisementPublisherTriggerDetails :
	Windows::IInspectable,
	impl_IBluetoothLEAdvertisementPublisherTriggerDetails<IBluetoothLEAdvertisementPublisherTriggerDetails>
{
	IBluetoothLEAdvertisementPublisherTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBluetoothLEAdvertisementPublisherTriggerDetails>(m_ptr); }
};

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace GenericAttributeProfile {

struct IGattDeviceServiceStatics :
	Windows::IInspectable,
	impl_IGattDeviceServiceStatics<IGattDeviceServiceStatics>
{
	IGattDeviceServiceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattDeviceServiceStatics>(m_ptr); }
};

struct IGattCharacteristicStatics :
	Windows::IInspectable,
	impl_IGattCharacteristicStatics<IGattCharacteristicStatics>
{
	IGattCharacteristicStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattCharacteristicStatics>(m_ptr); }
};

struct IGattCharacteristic :
	Windows::IInspectable,
	impl_IGattCharacteristic<IGattCharacteristic>
{
	IGattCharacteristic(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattCharacteristic>(m_ptr); }
};

struct IGattCharacteristic2 :
	Windows::IInspectable,
	impl_IGattCharacteristic2<IGattCharacteristic2>,
	requires<IGattCharacteristic2, Windows::Devices::Bluetooth::GenericAttributeProfile::IGattCharacteristic>
{
	IGattCharacteristic2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattCharacteristic2>(m_ptr); }
};

struct IGattDescriptorStatics :
	Windows::IInspectable,
	impl_IGattDescriptorStatics<IGattDescriptorStatics>
{
	IGattDescriptorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattDescriptorStatics>(m_ptr); }
};

struct IGattDescriptor :
	Windows::IInspectable,
	impl_IGattDescriptor<IGattDescriptor>
{
	IGattDescriptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattDescriptor>(m_ptr); }
};

struct IGattPresentationFormatStatics :
	Windows::IInspectable,
	impl_IGattPresentationFormatStatics<IGattPresentationFormatStatics>
{
	IGattPresentationFormatStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattPresentationFormatStatics>(m_ptr); }
};

struct IGattPresentationFormatTypesStatics :
	Windows::IInspectable,
	impl_IGattPresentationFormatTypesStatics<IGattPresentationFormatTypesStatics>
{
	IGattPresentationFormatTypesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattPresentationFormatTypesStatics>(m_ptr); }
};

struct IGattPresentationFormat :
	Windows::IInspectable,
	impl_IGattPresentationFormat<IGattPresentationFormat>
{
	IGattPresentationFormat(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattPresentationFormat>(m_ptr); }
};

struct IGattValueChangedEventArgs :
	Windows::IInspectable,
	impl_IGattValueChangedEventArgs<IGattValueChangedEventArgs>
{
	IGattValueChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattValueChangedEventArgs>(m_ptr); }
};

struct IGattServiceUuidsStatics :
	Windows::IInspectable,
	impl_IGattServiceUuidsStatics<IGattServiceUuidsStatics>
{
	IGattServiceUuidsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattServiceUuidsStatics>(m_ptr); }
};

struct IGattServiceUuidsStatics2 :
	Windows::IInspectable,
	impl_IGattServiceUuidsStatics2<IGattServiceUuidsStatics2>
{
	IGattServiceUuidsStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattServiceUuidsStatics2>(m_ptr); }
};

struct IGattCharacteristicUuidsStatics :
	Windows::IInspectable,
	impl_IGattCharacteristicUuidsStatics<IGattCharacteristicUuidsStatics>
{
	IGattCharacteristicUuidsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattCharacteristicUuidsStatics>(m_ptr); }
};

struct IGattCharacteristicUuidsStatics2 :
	Windows::IInspectable,
	impl_IGattCharacteristicUuidsStatics2<IGattCharacteristicUuidsStatics2>
{
	IGattCharacteristicUuidsStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattCharacteristicUuidsStatics2>(m_ptr); }
};

struct IGattDescriptorUuidsStatics :
	Windows::IInspectable,
	impl_IGattDescriptorUuidsStatics<IGattDescriptorUuidsStatics>
{
	IGattDescriptorUuidsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattDescriptorUuidsStatics>(m_ptr); }
};

struct IGattReliableWriteTransaction :
	Windows::IInspectable,
	impl_IGattReliableWriteTransaction<IGattReliableWriteTransaction>
{
	IGattReliableWriteTransaction(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattReliableWriteTransaction>(m_ptr); }
};

struct IGattReadResult :
	Windows::IInspectable,
	impl_IGattReadResult<IGattReadResult>
{
	IGattReadResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattReadResult>(m_ptr); }
};

struct IGattReadClientCharacteristicConfigurationDescriptorResult :
	Windows::IInspectable,
	impl_IGattReadClientCharacteristicConfigurationDescriptorResult<IGattReadClientCharacteristicConfigurationDescriptorResult>
{
	IGattReadClientCharacteristicConfigurationDescriptorResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattReadClientCharacteristicConfigurationDescriptorResult>(m_ptr); }
};

struct IGattDeviceService :
	Windows::IInspectable,
	impl_IGattDeviceService<IGattDeviceService>
{
	IGattDeviceService(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattDeviceService>(m_ptr); }
};

struct IGattDeviceService2 :
	Windows::IInspectable,
	impl_IGattDeviceService2<IGattDeviceService2>,
	requires<IGattDeviceService2, Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDeviceService>
{
	IGattDeviceService2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGattDeviceService2>(m_ptr); }
};

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Rfcomm {

struct IRfcommServiceIdStatics :
	Windows::IInspectable,
	impl_IRfcommServiceIdStatics<IRfcommServiceIdStatics>
{
	IRfcommServiceIdStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRfcommServiceIdStatics>(m_ptr); }
};

struct IRfcommServiceId :
	Windows::IInspectable,
	impl_IRfcommServiceId<IRfcommServiceId>
{
	IRfcommServiceId(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRfcommServiceId>(m_ptr); }
};

struct IRfcommDeviceServiceStatics :
	Windows::IInspectable,
	impl_IRfcommDeviceServiceStatics<IRfcommDeviceServiceStatics>
{
	IRfcommDeviceServiceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRfcommDeviceServiceStatics>(m_ptr); }
};

struct IRfcommDeviceService :
	Windows::IInspectable,
	impl_IRfcommDeviceService<IRfcommDeviceService>
{
	IRfcommDeviceService(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRfcommDeviceService>(m_ptr); }
};

struct IRfcommDeviceService2 :
	Windows::IInspectable,
	impl_IRfcommDeviceService2<IRfcommDeviceService2>,
	requires<IRfcommDeviceService2, Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService>
{
	IRfcommDeviceService2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRfcommDeviceService2>(m_ptr); }
};

struct IRfcommServiceProviderStatics :
	Windows::IInspectable,
	impl_IRfcommServiceProviderStatics<IRfcommServiceProviderStatics>
{
	IRfcommServiceProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRfcommServiceProviderStatics>(m_ptr); }
};

struct IRfcommServiceProvider :
	Windows::IInspectable,
	impl_IRfcommServiceProvider<IRfcommServiceProvider>
{
	IRfcommServiceProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRfcommServiceProvider>(m_ptr); }
};

struct IRfcommServiceProvider2 :
	Windows::IInspectable,
	impl_IRfcommServiceProvider2<IRfcommServiceProvider2>,
	requires<IRfcommServiceProvider2, Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider>
{
	IRfcommServiceProvider2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRfcommServiceProvider2>(m_ptr); }
	using impl_IRfcommServiceProvider::StartAdvertising;
	using impl_IRfcommServiceProvider2::StartAdvertising;
};

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Enumeration {

struct IDeviceConnectionChangeTriggerDetails :
	Windows::IInspectable,
	impl_IDeviceConnectionChangeTriggerDetails<IDeviceConnectionChangeTriggerDetails>
{
	IDeviceConnectionChangeTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceConnectionChangeTriggerDetails>(m_ptr); }
};

struct IDevicePickerAppearance :
	Windows::IInspectable,
	impl_IDevicePickerAppearance<IDevicePickerAppearance>
{
	IDevicePickerAppearance(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDevicePickerAppearance>(m_ptr); }
};

struct IDeviceSelectedEventArgs :
	Windows::IInspectable,
	impl_IDeviceSelectedEventArgs<IDeviceSelectedEventArgs>
{
	IDeviceSelectedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceSelectedEventArgs>(m_ptr); }
};

struct IDeviceDisconnectButtonClickedEventArgs :
	Windows::IInspectable,
	impl_IDeviceDisconnectButtonClickedEventArgs<IDeviceDisconnectButtonClickedEventArgs>
{
	IDeviceDisconnectButtonClickedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceDisconnectButtonClickedEventArgs>(m_ptr); }
};

struct IDevicePickerFilter :
	Windows::IInspectable,
	impl_IDevicePickerFilter<IDevicePickerFilter>
{
	IDevicePickerFilter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDevicePickerFilter>(m_ptr); }
};

struct IDevicePicker :
	Windows::IInspectable,
	impl_IDevicePicker<IDevicePicker>
{
	IDevicePicker(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDevicePicker>(m_ptr); }
};

struct IEnclosureLocation :
	Windows::IInspectable,
	impl_IEnclosureLocation<IEnclosureLocation>
{
	IEnclosureLocation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IEnclosureLocation>(m_ptr); }
};

struct IDeviceInformationUpdate :
	Windows::IInspectable,
	impl_IDeviceInformationUpdate<IDeviceInformationUpdate>
{
	IDeviceInformationUpdate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceInformationUpdate>(m_ptr); }
};

struct IDeviceInformationUpdate2 :
	Windows::IInspectable,
	impl_IDeviceInformationUpdate2<IDeviceInformationUpdate2>
{
	IDeviceInformationUpdate2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceInformationUpdate2>(m_ptr); }
};

struct IDeviceWatcher :
	Windows::IInspectable,
	impl_IDeviceWatcher<IDeviceWatcher>
{
	IDeviceWatcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceWatcher>(m_ptr); }
};

struct IDeviceWatcher2 :
	Windows::IInspectable,
	impl_IDeviceWatcher2<IDeviceWatcher2>
{
	IDeviceWatcher2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceWatcher2>(m_ptr); }
};

struct IDeviceInformationStatics :
	Windows::IInspectable,
	impl_IDeviceInformationStatics<IDeviceInformationStatics>
{
	IDeviceInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceInformationStatics>(m_ptr); }
};

struct IDeviceInformationStatics2 :
	Windows::IInspectable,
	impl_IDeviceInformationStatics2<IDeviceInformationStatics2>
{
	IDeviceInformationStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceInformationStatics2>(m_ptr); }
};

struct IDeviceInformation :
	Windows::IInspectable,
	impl_IDeviceInformation<IDeviceInformation>
{
	IDeviceInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceInformation>(m_ptr); }
};

struct IDevicePairingResult :
	Windows::IInspectable,
	impl_IDevicePairingResult<IDevicePairingResult>
{
	IDevicePairingResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDevicePairingResult>(m_ptr); }
};

struct IDeviceUnpairingResult :
	Windows::IInspectable,
	impl_IDeviceUnpairingResult<IDeviceUnpairingResult>
{
	IDeviceUnpairingResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceUnpairingResult>(m_ptr); }
};

struct IDevicePairingSettings :
	Windows::IInspectable,
	impl_IDevicePairingSettings<IDevicePairingSettings>
{
	IDevicePairingSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDevicePairingSettings>(m_ptr); }
};

struct IDevicePairingRequestedEventArgs :
	Windows::IInspectable,
	impl_IDevicePairingRequestedEventArgs<IDevicePairingRequestedEventArgs>
{
	IDevicePairingRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDevicePairingRequestedEventArgs>(m_ptr); }
};

struct IDeviceInformationCustomPairing :
	Windows::IInspectable,
	impl_IDeviceInformationCustomPairing<IDeviceInformationCustomPairing>
{
	IDeviceInformationCustomPairing(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceInformationCustomPairing>(m_ptr); }
};

struct IDeviceInformationPairing :
	Windows::IInspectable,
	impl_IDeviceInformationPairing<IDeviceInformationPairing>
{
	IDeviceInformationPairing(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceInformationPairing>(m_ptr); }
};

struct IDeviceInformationPairing2 :
	Windows::IInspectable,
	impl_IDeviceInformationPairing2<IDeviceInformationPairing2>
{
	IDeviceInformationPairing2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceInformationPairing2>(m_ptr); }
};

struct IDeviceInformationPairingStatics :
	Windows::IInspectable,
	impl_IDeviceInformationPairingStatics<IDeviceInformationPairingStatics>
{
	IDeviceInformationPairingStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceInformationPairingStatics>(m_ptr); }
};

struct IDeviceInformation2 :
	Windows::IInspectable,
	impl_IDeviceInformation2<IDeviceInformation2>
{
	IDeviceInformation2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceInformation2>(m_ptr); }
};

struct IDeviceAccessChangedEventArgs :
	Windows::IInspectable,
	impl_IDeviceAccessChangedEventArgs<IDeviceAccessChangedEventArgs>
{
	IDeviceAccessChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceAccessChangedEventArgs>(m_ptr); }
};

struct IDeviceAccessInformation :
	Windows::IInspectable,
	impl_IDeviceAccessInformation<IDeviceAccessInformation>
{
	IDeviceAccessInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceAccessInformation>(m_ptr); }
};

struct IDeviceAccessInformationStatics :
	Windows::IInspectable,
	impl_IDeviceAccessInformationStatics<IDeviceAccessInformationStatics>
{
	IDeviceAccessInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceAccessInformationStatics>(m_ptr); }
};

struct IDeviceWatcherEvent :
	Windows::IInspectable,
	impl_IDeviceWatcherEvent<IDeviceWatcherEvent>
{
	IDeviceWatcherEvent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceWatcherEvent>(m_ptr); }
};

struct IDeviceWatcherTriggerDetails :
	Windows::IInspectable,
	impl_IDeviceWatcherTriggerDetails<IDeviceWatcherTriggerDetails>
{
	IDeviceWatcherTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeviceWatcherTriggerDetails>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Geolocation {

struct IGeoshape :
	Windows::IInspectable,
	impl_IGeoshape<IGeoshape>
{
	IGeoshape(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeoshape>(m_ptr); }
};

struct IGeopoint :
	Windows::IInspectable,
	impl_IGeopoint<IGeopoint>,
	requires<IGeopoint, Windows::Devices::Geolocation::IGeoshape>
{
	IGeopoint(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeopoint>(m_ptr); }
};

struct IGeopointFactory :
	Windows::IInspectable,
	impl_IGeopointFactory<IGeopointFactory>
{
	IGeopointFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeopointFactory>(m_ptr); }
};

struct IGeopath :
	Windows::IInspectable,
	impl_IGeopath<IGeopath>,
	requires<IGeopath, Windows::Devices::Geolocation::IGeoshape>
{
	IGeopath(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeopath>(m_ptr); }
};

struct IGeopathFactory :
	Windows::IInspectable,
	impl_IGeopathFactory<IGeopathFactory>
{
	IGeopathFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeopathFactory>(m_ptr); }
};

struct IGeoboundingBox :
	Windows::IInspectable,
	impl_IGeoboundingBox<IGeoboundingBox>,
	requires<IGeoboundingBox, Windows::Devices::Geolocation::IGeoshape>
{
	IGeoboundingBox(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeoboundingBox>(m_ptr); }
};

struct IGeoboundingBoxFactory :
	Windows::IInspectable,
	impl_IGeoboundingBoxFactory<IGeoboundingBoxFactory>
{
	IGeoboundingBoxFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeoboundingBoxFactory>(m_ptr); }
};

struct IGeoboundingBoxStatics :
	Windows::IInspectable,
	impl_IGeoboundingBoxStatics<IGeoboundingBoxStatics>
{
	IGeoboundingBoxStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeoboundingBoxStatics>(m_ptr); }
};

struct IGeocoordinateSatelliteData :
	Windows::IInspectable,
	impl_IGeocoordinateSatelliteData<IGeocoordinateSatelliteData>
{
	IGeocoordinateSatelliteData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeocoordinateSatelliteData>(m_ptr); }
};

struct IVenueData :
	Windows::IInspectable,
	impl_IVenueData<IVenueData>
{
	IVenueData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IVenueData>(m_ptr); }
};

struct IGeocoordinate :
	Windows::IInspectable,
	impl_IGeocoordinate<IGeocoordinate>
{
	IGeocoordinate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeocoordinate>(m_ptr); }
};

struct IGeocoordinateWithPositionData :
	Windows::IInspectable,
	impl_IGeocoordinateWithPositionData<IGeocoordinateWithPositionData>,
	requires<IGeocoordinateWithPositionData, Windows::Devices::Geolocation::IGeocoordinate>
{
	IGeocoordinateWithPositionData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeocoordinateWithPositionData>(m_ptr); }
};

struct IGeocoordinateWithPoint :
	Windows::IInspectable,
	impl_IGeocoordinateWithPoint<IGeocoordinateWithPoint>
{
	IGeocoordinateWithPoint(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeocoordinateWithPoint>(m_ptr); }
};

struct IGeoposition :
	Windows::IInspectable,
	impl_IGeoposition<IGeoposition>
{
	IGeoposition(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeoposition>(m_ptr); }
};

struct IGeoposition2 :
	Windows::IInspectable,
	impl_IGeoposition2<IGeoposition2>,
	requires<IGeoposition2, Windows::Devices::Geolocation::IGeoposition>
{
	IGeoposition2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeoposition2>(m_ptr); }
};

struct ICivicAddress :
	Windows::IInspectable,
	impl_ICivicAddress<ICivicAddress>
{
	ICivicAddress(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICivicAddress>(m_ptr); }
};

struct IPositionChangedEventArgs :
	Windows::IInspectable,
	impl_IPositionChangedEventArgs<IPositionChangedEventArgs>
{
	IPositionChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPositionChangedEventArgs>(m_ptr); }
};

struct IStatusChangedEventArgs :
	Windows::IInspectable,
	impl_IStatusChangedEventArgs<IStatusChangedEventArgs>
{
	IStatusChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStatusChangedEventArgs>(m_ptr); }
};

struct IGeolocator :
	Windows::IInspectable,
	impl_IGeolocator<IGeolocator>
{
	IGeolocator(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeolocator>(m_ptr); }
};

struct IGeolocatorWithScalarAccuracy :
	Windows::IInspectable,
	impl_IGeolocatorWithScalarAccuracy<IGeolocatorWithScalarAccuracy>,
	requires<IGeolocatorWithScalarAccuracy, Windows::Devices::Geolocation::IGeolocator>
{
	IGeolocatorWithScalarAccuracy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeolocatorWithScalarAccuracy>(m_ptr); }
};

struct IGeolocatorStatics :
	Windows::IInspectable,
	impl_IGeolocatorStatics<IGeolocatorStatics>
{
	IGeolocatorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeolocatorStatics>(m_ptr); }
};

struct IGeocircle :
	Windows::IInspectable,
	impl_IGeocircle<IGeocircle>,
	requires<IGeocircle, Windows::Devices::Geolocation::IGeoshape>
{
	IGeocircle(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeocircle>(m_ptr); }
};

struct IGeocircleFactory :
	Windows::IInspectable,
	impl_IGeocircleFactory<IGeocircleFactory>
{
	IGeocircleFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeocircleFactory>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Input {

struct IMouseCapabilities :
	Windows::IInspectable,
	impl_IMouseCapabilities<IMouseCapabilities>
{
	IMouseCapabilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMouseCapabilities>(m_ptr); }
};

struct IKeyboardCapabilities :
	Windows::IInspectable,
	impl_IKeyboardCapabilities<IKeyboardCapabilities>
{
	IKeyboardCapabilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyboardCapabilities>(m_ptr); }
};

struct ITouchCapabilities :
	Windows::IInspectable,
	impl_ITouchCapabilities<ITouchCapabilities>
{
	ITouchCapabilities(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITouchCapabilities>(m_ptr); }
};

struct IPointerDeviceStatics :
	Windows::IInspectable,
	impl_IPointerDeviceStatics<IPointerDeviceStatics>
{
	IPointerDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPointerDeviceStatics>(m_ptr); }
};

struct IPointerDevice :
	Windows::IInspectable,
	impl_IPointerDevice<IPointerDevice>
{
	IPointerDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPointerDevice>(m_ptr); }
};

struct IMouseEventArgs :
	Windows::IInspectable,
	impl_IMouseEventArgs<IMouseEventArgs>
{
	IMouseEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMouseEventArgs>(m_ptr); }
};

struct IMouseDevice :
	Windows::IInspectable,
	impl_IMouseDevice<IMouseDevice>
{
	IMouseDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMouseDevice>(m_ptr); }
};

struct IMouseDeviceStatics :
	Windows::IInspectable,
	impl_IMouseDeviceStatics<IMouseDeviceStatics>
{
	IMouseDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMouseDeviceStatics>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

struct IPrintTaskConfigurationSaveRequestedDeferral :
	Windows::IInspectable,
	impl_IPrintTaskConfigurationSaveRequestedDeferral<IPrintTaskConfigurationSaveRequestedDeferral>
{
	IPrintTaskConfigurationSaveRequestedDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPrintTaskConfigurationSaveRequestedDeferral>(m_ptr); }
};

struct IPrintTaskConfigurationSaveRequest :
	Windows::IInspectable,
	impl_IPrintTaskConfigurationSaveRequest<IPrintTaskConfigurationSaveRequest>
{
	IPrintTaskConfigurationSaveRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPrintTaskConfigurationSaveRequest>(m_ptr); }
};

struct IPrintTaskConfigurationSaveRequestedEventArgs :
	Windows::IInspectable,
	impl_IPrintTaskConfigurationSaveRequestedEventArgs<IPrintTaskConfigurationSaveRequestedEventArgs>
{
	IPrintTaskConfigurationSaveRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPrintTaskConfigurationSaveRequestedEventArgs>(m_ptr); }
};

struct IPrintTaskConfiguration :
	Windows::IInspectable,
	impl_IPrintTaskConfiguration<IPrintTaskConfiguration>
{
	IPrintTaskConfiguration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPrintTaskConfiguration>(m_ptr); }
};

struct IPrintNotificationEventDetails :
	Windows::IInspectable,
	impl_IPrintNotificationEventDetails<IPrintNotificationEventDetails>
{
	IPrintNotificationEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPrintNotificationEventDetails>(m_ptr); }
};

struct IPrintExtensionContextStatic :
	Windows::IInspectable,
	impl_IPrintExtensionContextStatic<IPrintExtensionContextStatic>
{
	IPrintExtensionContextStatic(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPrintExtensionContextStatic>(m_ptr); }
};

struct IPrint3DWorkflowPrintRequestedEventArgs :
	Windows::IInspectable,
	impl_IPrint3DWorkflowPrintRequestedEventArgs<IPrint3DWorkflowPrintRequestedEventArgs>
{
	IPrint3DWorkflowPrintRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPrint3DWorkflowPrintRequestedEventArgs>(m_ptr); }
};

struct IPrint3DWorkflow :
	Windows::IInspectable,
	impl_IPrint3DWorkflow<IPrint3DWorkflow>
{
	IPrint3DWorkflow(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPrint3DWorkflow>(m_ptr); }
};

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sensors {

struct ISensorDataThreshold :
	Windows::IInspectable,
	impl_ISensorDataThreshold<ISensorDataThreshold>
{
	ISensorDataThreshold(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISensorDataThreshold>(m_ptr); }
};

struct ISensorDataThresholdTriggerDetails :
	Windows::IInspectable,
	impl_ISensorDataThresholdTriggerDetails<ISensorDataThresholdTriggerDetails>
{
	ISensorDataThresholdTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISensorDataThresholdTriggerDetails>(m_ptr); }
};

struct IAccelerometerDeviceId :
	Windows::IInspectable,
	impl_IAccelerometerDeviceId<IAccelerometerDeviceId>
{
	IAccelerometerDeviceId(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAccelerometerDeviceId>(m_ptr); }
};

struct IAccelerometerStatics :
	Windows::IInspectable,
	impl_IAccelerometerStatics<IAccelerometerStatics>
{
	IAccelerometerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAccelerometerStatics>(m_ptr); }
};

struct IAccelerometer :
	Windows::IInspectable,
	impl_IAccelerometer<IAccelerometer>
{
	IAccelerometer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAccelerometer>(m_ptr); }
};

struct IAccelerometer2 :
	Windows::IInspectable,
	impl_IAccelerometer2<IAccelerometer2>
{
	IAccelerometer2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAccelerometer2>(m_ptr); }
};

struct IAccelerometer3 :
	Windows::IInspectable,
	impl_IAccelerometer3<IAccelerometer3>
{
	IAccelerometer3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAccelerometer3>(m_ptr); }
};

struct IAccelerometerReading :
	Windows::IInspectable,
	impl_IAccelerometerReading<IAccelerometerReading>
{
	IAccelerometerReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAccelerometerReading>(m_ptr); }
};

struct IAccelerometerReadingChangedEventArgs :
	Windows::IInspectable,
	impl_IAccelerometerReadingChangedEventArgs<IAccelerometerReadingChangedEventArgs>
{
	IAccelerometerReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAccelerometerReadingChangedEventArgs>(m_ptr); }
};

struct IAccelerometerShakenEventArgs :
	Windows::IInspectable,
	impl_IAccelerometerShakenEventArgs<IAccelerometerShakenEventArgs>
{
	IAccelerometerShakenEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAccelerometerShakenEventArgs>(m_ptr); }
};

struct IInclinometerDeviceId :
	Windows::IInspectable,
	impl_IInclinometerDeviceId<IInclinometerDeviceId>
{
	IInclinometerDeviceId(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInclinometerDeviceId>(m_ptr); }
};

struct IInclinometerStatics :
	Windows::IInspectable,
	impl_IInclinometerStatics<IInclinometerStatics>
{
	IInclinometerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInclinometerStatics>(m_ptr); }
};

struct IInclinometerStatics2 :
	Windows::IInspectable,
	impl_IInclinometerStatics2<IInclinometerStatics2>
{
	IInclinometerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInclinometerStatics2>(m_ptr); }
};

struct IInclinometer :
	Windows::IInspectable,
	impl_IInclinometer<IInclinometer>
{
	IInclinometer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInclinometer>(m_ptr); }
};

struct IInclinometer2 :
	Windows::IInspectable,
	impl_IInclinometer2<IInclinometer2>
{
	IInclinometer2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInclinometer2>(m_ptr); }
};

struct IInclinometerReading :
	Windows::IInspectable,
	impl_IInclinometerReading<IInclinometerReading>
{
	IInclinometerReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInclinometerReading>(m_ptr); }
};

struct IInclinometerReadingYawAccuracy :
	Windows::IInspectable,
	impl_IInclinometerReadingYawAccuracy<IInclinometerReadingYawAccuracy>
{
	IInclinometerReadingYawAccuracy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInclinometerReadingYawAccuracy>(m_ptr); }
};

struct IInclinometerReadingChangedEventArgs :
	Windows::IInspectable,
	impl_IInclinometerReadingChangedEventArgs<IInclinometerReadingChangedEventArgs>
{
	IInclinometerReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInclinometerReadingChangedEventArgs>(m_ptr); }
};

struct IGyrometerDeviceId :
	Windows::IInspectable,
	impl_IGyrometerDeviceId<IGyrometerDeviceId>
{
	IGyrometerDeviceId(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGyrometerDeviceId>(m_ptr); }
};

struct IGyrometerStatics :
	Windows::IInspectable,
	impl_IGyrometerStatics<IGyrometerStatics>
{
	IGyrometerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGyrometerStatics>(m_ptr); }
};

struct IGyrometer :
	Windows::IInspectable,
	impl_IGyrometer<IGyrometer>
{
	IGyrometer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGyrometer>(m_ptr); }
};

struct IGyrometer2 :
	Windows::IInspectable,
	impl_IGyrometer2<IGyrometer2>
{
	IGyrometer2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGyrometer2>(m_ptr); }
};

struct IGyrometerReading :
	Windows::IInspectable,
	impl_IGyrometerReading<IGyrometerReading>
{
	IGyrometerReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGyrometerReading>(m_ptr); }
};

struct IGyrometerReadingChangedEventArgs :
	Windows::IInspectable,
	impl_IGyrometerReadingChangedEventArgs<IGyrometerReadingChangedEventArgs>
{
	IGyrometerReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGyrometerReadingChangedEventArgs>(m_ptr); }
};

struct ICompassDeviceId :
	Windows::IInspectable,
	impl_ICompassDeviceId<ICompassDeviceId>
{
	ICompassDeviceId(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICompassDeviceId>(m_ptr); }
};

struct ICompassStatics :
	Windows::IInspectable,
	impl_ICompassStatics<ICompassStatics>
{
	ICompassStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICompassStatics>(m_ptr); }
};

struct ICompass :
	Windows::IInspectable,
	impl_ICompass<ICompass>
{
	ICompass(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICompass>(m_ptr); }
};

struct ICompass2 :
	Windows::IInspectable,
	impl_ICompass2<ICompass2>
{
	ICompass2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICompass2>(m_ptr); }
};

struct ICompassReading :
	Windows::IInspectable,
	impl_ICompassReading<ICompassReading>
{
	ICompassReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICompassReading>(m_ptr); }
};

struct ICompassReadingHeadingAccuracy :
	Windows::IInspectable,
	impl_ICompassReadingHeadingAccuracy<ICompassReadingHeadingAccuracy>
{
	ICompassReadingHeadingAccuracy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICompassReadingHeadingAccuracy>(m_ptr); }
};

struct ICompassReadingChangedEventArgs :
	Windows::IInspectable,
	impl_ICompassReadingChangedEventArgs<ICompassReadingChangedEventArgs>
{
	ICompassReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICompassReadingChangedEventArgs>(m_ptr); }
};

struct ILightSensorDeviceId :
	Windows::IInspectable,
	impl_ILightSensorDeviceId<ILightSensorDeviceId>
{
	ILightSensorDeviceId(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILightSensorDeviceId>(m_ptr); }
};

struct ILightSensorStatics :
	Windows::IInspectable,
	impl_ILightSensorStatics<ILightSensorStatics>
{
	ILightSensorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILightSensorStatics>(m_ptr); }
};

struct ILightSensor :
	Windows::IInspectable,
	impl_ILightSensor<ILightSensor>
{
	ILightSensor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILightSensor>(m_ptr); }
};

struct ILightSensorReading :
	Windows::IInspectable,
	impl_ILightSensorReading<ILightSensorReading>
{
	ILightSensorReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILightSensorReading>(m_ptr); }
};

struct ILightSensorReadingChangedEventArgs :
	Windows::IInspectable,
	impl_ILightSensorReadingChangedEventArgs<ILightSensorReadingChangedEventArgs>
{
	ILightSensorReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILightSensorReadingChangedEventArgs>(m_ptr); }
};

struct ISensorRotationMatrix :
	Windows::IInspectable,
	impl_ISensorRotationMatrix<ISensorRotationMatrix>
{
	ISensorRotationMatrix(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISensorRotationMatrix>(m_ptr); }
};

struct ISensorQuaternion :
	Windows::IInspectable,
	impl_ISensorQuaternion<ISensorQuaternion>
{
	ISensorQuaternion(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISensorQuaternion>(m_ptr); }
};

struct IOrientationSensorDeviceId :
	Windows::IInspectable,
	impl_IOrientationSensorDeviceId<IOrientationSensorDeviceId>
{
	IOrientationSensorDeviceId(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IOrientationSensorDeviceId>(m_ptr); }
};

struct IOrientationSensorStatics :
	Windows::IInspectable,
	impl_IOrientationSensorStatics<IOrientationSensorStatics>
{
	IOrientationSensorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IOrientationSensorStatics>(m_ptr); }
};

struct IOrientationSensorStatics2 :
	Windows::IInspectable,
	impl_IOrientationSensorStatics2<IOrientationSensorStatics2>
{
	IOrientationSensorStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IOrientationSensorStatics2>(m_ptr); }
};

struct IOrientationSensor :
	Windows::IInspectable,
	impl_IOrientationSensor<IOrientationSensor>
{
	IOrientationSensor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IOrientationSensor>(m_ptr); }
};

struct IOrientationSensor2 :
	Windows::IInspectable,
	impl_IOrientationSensor2<IOrientationSensor2>
{
	IOrientationSensor2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IOrientationSensor2>(m_ptr); }
};

struct IOrientationSensorReading :
	Windows::IInspectable,
	impl_IOrientationSensorReading<IOrientationSensorReading>
{
	IOrientationSensorReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IOrientationSensorReading>(m_ptr); }
};

struct IOrientationSensorReadingYawAccuracy :
	Windows::IInspectable,
	impl_IOrientationSensorReadingYawAccuracy<IOrientationSensorReadingYawAccuracy>
{
	IOrientationSensorReadingYawAccuracy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IOrientationSensorReadingYawAccuracy>(m_ptr); }
};

struct IOrientationSensorReadingChangedEventArgs :
	Windows::IInspectable,
	impl_IOrientationSensorReadingChangedEventArgs<IOrientationSensorReadingChangedEventArgs>
{
	IOrientationSensorReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IOrientationSensorReadingChangedEventArgs>(m_ptr); }
};

struct ISimpleOrientationSensorDeviceId :
	Windows::IInspectable,
	impl_ISimpleOrientationSensorDeviceId<ISimpleOrientationSensorDeviceId>
{
	ISimpleOrientationSensorDeviceId(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISimpleOrientationSensorDeviceId>(m_ptr); }
};

struct ISimpleOrientationSensorStatics :
	Windows::IInspectable,
	impl_ISimpleOrientationSensorStatics<ISimpleOrientationSensorStatics>
{
	ISimpleOrientationSensorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISimpleOrientationSensorStatics>(m_ptr); }
};

struct ISimpleOrientationSensor :
	Windows::IInspectable,
	impl_ISimpleOrientationSensor<ISimpleOrientationSensor>
{
	ISimpleOrientationSensor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISimpleOrientationSensor>(m_ptr); }
};

struct ISimpleOrientationSensor2 :
	Windows::IInspectable,
	impl_ISimpleOrientationSensor2<ISimpleOrientationSensor2>
{
	ISimpleOrientationSensor2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISimpleOrientationSensor2>(m_ptr); }
};

struct ISimpleOrientationSensorOrientationChangedEventArgs :
	Windows::IInspectable,
	impl_ISimpleOrientationSensorOrientationChangedEventArgs<ISimpleOrientationSensorOrientationChangedEventArgs>
{
	ISimpleOrientationSensorOrientationChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISimpleOrientationSensorOrientationChangedEventArgs>(m_ptr); }
};

struct IMagnetometerDeviceId :
	Windows::IInspectable,
	impl_IMagnetometerDeviceId<IMagnetometerDeviceId>
{
	IMagnetometerDeviceId(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMagnetometerDeviceId>(m_ptr); }
};

struct IMagnetometerStatics :
	Windows::IInspectable,
	impl_IMagnetometerStatics<IMagnetometerStatics>
{
	IMagnetometerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMagnetometerStatics>(m_ptr); }
};

struct IMagnetometer :
	Windows::IInspectable,
	impl_IMagnetometer<IMagnetometer>
{
	IMagnetometer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMagnetometer>(m_ptr); }
};

struct IMagnetometer2 :
	Windows::IInspectable,
	impl_IMagnetometer2<IMagnetometer2>
{
	IMagnetometer2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMagnetometer2>(m_ptr); }
};

struct IMagnetometerReading :
	Windows::IInspectable,
	impl_IMagnetometerReading<IMagnetometerReading>
{
	IMagnetometerReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMagnetometerReading>(m_ptr); }
};

struct IMagnetometerReadingChangedEventArgs :
	Windows::IInspectable,
	impl_IMagnetometerReadingChangedEventArgs<IMagnetometerReadingChangedEventArgs>
{
	IMagnetometerReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMagnetometerReadingChangedEventArgs>(m_ptr); }
};

struct IActivitySensorStatics :
	Windows::IInspectable,
	impl_IActivitySensorStatics<IActivitySensorStatics>
{
	IActivitySensorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IActivitySensorStatics>(m_ptr); }
};

struct IActivitySensor :
	Windows::IInspectable,
	impl_IActivitySensor<IActivitySensor>
{
	IActivitySensor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IActivitySensor>(m_ptr); }
};

struct IActivitySensorReading :
	Windows::IInspectable,
	impl_IActivitySensorReading<IActivitySensorReading>
{
	IActivitySensorReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IActivitySensorReading>(m_ptr); }
};

struct IActivitySensorReadingChangedEventArgs :
	Windows::IInspectable,
	impl_IActivitySensorReadingChangedEventArgs<IActivitySensorReadingChangedEventArgs>
{
	IActivitySensorReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IActivitySensorReadingChangedEventArgs>(m_ptr); }
};

struct IActivitySensorReadingChangeReport :
	Windows::IInspectable,
	impl_IActivitySensorReadingChangeReport<IActivitySensorReadingChangeReport>
{
	IActivitySensorReadingChangeReport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IActivitySensorReadingChangeReport>(m_ptr); }
};

struct IActivitySensorTriggerDetails :
	Windows::IInspectable,
	impl_IActivitySensorTriggerDetails<IActivitySensorTriggerDetails>
{
	IActivitySensorTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IActivitySensorTriggerDetails>(m_ptr); }
};

struct IBarometerStatics :
	Windows::IInspectable,
	impl_IBarometerStatics<IBarometerStatics>
{
	IBarometerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBarometerStatics>(m_ptr); }
};

struct IBarometer :
	Windows::IInspectable,
	impl_IBarometer<IBarometer>
{
	IBarometer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBarometer>(m_ptr); }
};

struct IBarometerReading :
	Windows::IInspectable,
	impl_IBarometerReading<IBarometerReading>
{
	IBarometerReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBarometerReading>(m_ptr); }
};

struct IBarometerReadingChangedEventArgs :
	Windows::IInspectable,
	impl_IBarometerReadingChangedEventArgs<IBarometerReadingChangedEventArgs>
{
	IBarometerReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBarometerReadingChangedEventArgs>(m_ptr); }
};

struct IPedometerReading :
	Windows::IInspectable,
	impl_IPedometerReading<IPedometerReading>
{
	IPedometerReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPedometerReading>(m_ptr); }
};

struct IPedometerReadingChangedEventArgs :
	Windows::IInspectable,
	impl_IPedometerReadingChangedEventArgs<IPedometerReadingChangedEventArgs>
{
	IPedometerReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPedometerReadingChangedEventArgs>(m_ptr); }
};

struct IPedometerStatics :
	Windows::IInspectable,
	impl_IPedometerStatics<IPedometerStatics>
{
	IPedometerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPedometerStatics>(m_ptr); }
};

struct IPedometerStatics2 :
	Windows::IInspectable,
	impl_IPedometerStatics2<IPedometerStatics2>
{
	IPedometerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPedometerStatics2>(m_ptr); }
};

struct IPedometer2 :
	Windows::IInspectable,
	impl_IPedometer2<IPedometer2>
{
	IPedometer2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPedometer2>(m_ptr); }
};

struct IPedometer :
	Windows::IInspectable,
	impl_IPedometer<IPedometer>
{
	IPedometer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPedometer>(m_ptr); }
};

struct IPedometerDataThresholdFactory :
	Windows::IInspectable,
	impl_IPedometerDataThresholdFactory<IPedometerDataThresholdFactory>
{
	IPedometerDataThresholdFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPedometerDataThresholdFactory>(m_ptr); }
};

struct IProximitySensorStatics :
	Windows::IInspectable,
	impl_IProximitySensorStatics<IProximitySensorStatics>
{
	IProximitySensorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProximitySensorStatics>(m_ptr); }
};

struct IProximitySensor :
	Windows::IInspectable,
	impl_IProximitySensor<IProximitySensor>
{
	IProximitySensor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProximitySensor>(m_ptr); }
};

struct IProximitySensorReadingChangedEventArgs :
	Windows::IInspectable,
	impl_IProximitySensorReadingChangedEventArgs<IProximitySensorReadingChangedEventArgs>
{
	IProximitySensorReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProximitySensorReadingChangedEventArgs>(m_ptr); }
};

struct IProximitySensorReading :
	Windows::IInspectable,
	impl_IProximitySensorReading<IProximitySensorReading>
{
	IProximitySensorReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProximitySensorReading>(m_ptr); }
};

struct IProximitySensorDataThresholdFactory :
	Windows::IInspectable,
	impl_IProximitySensorDataThresholdFactory<IProximitySensorDataThresholdFactory>
{
	IProximitySensorDataThresholdFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProximitySensorDataThresholdFactory>(m_ptr); }
};

struct IProximitySensorStatics2 :
	Windows::IInspectable,
	impl_IProximitySensorStatics2<IProximitySensorStatics2>
{
	IProximitySensorStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProximitySensorStatics2>(m_ptr); }
};

struct IAltimeterStatics :
	Windows::IInspectable,
	impl_IAltimeterStatics<IAltimeterStatics>
{
	IAltimeterStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAltimeterStatics>(m_ptr); }
};

struct IAltimeter :
	Windows::IInspectable,
	impl_IAltimeter<IAltimeter>
{
	IAltimeter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAltimeter>(m_ptr); }
};

struct IAltimeterReading :
	Windows::IInspectable,
	impl_IAltimeterReading<IAltimeterReading>
{
	IAltimeterReading(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAltimeterReading>(m_ptr); }
};

struct IAltimeterReadingChangedEventArgs :
	Windows::IInspectable,
	impl_IAltimeterReadingChangedEventArgs<IAltimeterReadingChangedEventArgs>
{
	IAltimeterReadingChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAltimeterReadingChangedEventArgs>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sms {

struct ISmsMessageReceivedEventHandler :
	Windows::IUnknown,
	impl_ISmsMessageReceivedEventHandler<ISmsMessageReceivedEventHandler>
{
	ISmsMessageReceivedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsMessageReceivedEventHandler>(m_ptr); }
};

struct ISmsDeviceStatusChangedEventHandler :
	Windows::IUnknown,
	impl_ISmsDeviceStatusChangedEventHandler<ISmsDeviceStatusChangedEventHandler>
{
	ISmsDeviceStatusChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsDeviceStatusChangedEventHandler>(m_ptr); }
};

struct ISmsMessage :
	Windows::IInspectable,
	impl_ISmsMessage<ISmsMessage>
{
	ISmsMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsMessage>(m_ptr); }
};

struct ISmsMessageBase :
	Windows::IInspectable,
	impl_ISmsMessageBase<ISmsMessageBase>
{
	ISmsMessageBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsMessageBase>(m_ptr); }
};

struct ISmsBinaryMessage :
	Windows::IInspectable,
	impl_ISmsBinaryMessage<ISmsBinaryMessage>,
	requires<ISmsBinaryMessage, Windows::Devices::Sms::ISmsMessage>
{
	ISmsBinaryMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsBinaryMessage>(m_ptr); }
};

struct ISmsTextMessage :
	Windows::IInspectable,
	impl_ISmsTextMessage<ISmsTextMessage>,
	requires<ISmsTextMessage, Windows::Devices::Sms::ISmsMessage>
{
	ISmsTextMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsTextMessage>(m_ptr); }
};

struct ISmsTextMessageStatics :
	Windows::IInspectable,
	impl_ISmsTextMessageStatics<ISmsTextMessageStatics>
{
	ISmsTextMessageStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsTextMessageStatics>(m_ptr); }
};

struct ISmsTextMessage2 :
	Windows::IInspectable,
	impl_ISmsTextMessage2<ISmsTextMessage2>,
	requires<ISmsTextMessage2, Windows::Devices::Sms::ISmsMessageBase>
{
	ISmsTextMessage2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsTextMessage2>(m_ptr); }
};

struct ISmsWapMessage :
	Windows::IInspectable,
	impl_ISmsWapMessage<ISmsWapMessage>,
	requires<ISmsWapMessage, Windows::Devices::Sms::ISmsMessageBase>
{
	ISmsWapMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsWapMessage>(m_ptr); }
};

struct ISmsAppMessage :
	Windows::IInspectable,
	impl_ISmsAppMessage<ISmsAppMessage>,
	requires<ISmsAppMessage, Windows::Devices::Sms::ISmsMessageBase>
{
	ISmsAppMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsAppMessage>(m_ptr); }
};

struct ISmsBroadcastMessage :
	Windows::IInspectable,
	impl_ISmsBroadcastMessage<ISmsBroadcastMessage>,
	requires<ISmsBroadcastMessage, Windows::Devices::Sms::ISmsMessageBase>
{
	ISmsBroadcastMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsBroadcastMessage>(m_ptr); }
};

struct ISmsVoicemailMessage :
	Windows::IInspectable,
	impl_ISmsVoicemailMessage<ISmsVoicemailMessage>,
	requires<ISmsVoicemailMessage, Windows::Devices::Sms::ISmsMessageBase>
{
	ISmsVoicemailMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsVoicemailMessage>(m_ptr); }
};

struct ISmsStatusMessage :
	Windows::IInspectable,
	impl_ISmsStatusMessage<ISmsStatusMessage>,
	requires<ISmsStatusMessage, Windows::Devices::Sms::ISmsMessageBase>
{
	ISmsStatusMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsStatusMessage>(m_ptr); }
};

struct ISmsDeviceMessageStore :
	Windows::IInspectable,
	impl_ISmsDeviceMessageStore<ISmsDeviceMessageStore>
{
	ISmsDeviceMessageStore(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsDeviceMessageStore>(m_ptr); }
};

struct ISmsSendMessageResult :
	Windows::IInspectable,
	impl_ISmsSendMessageResult<ISmsSendMessageResult>
{
	ISmsSendMessageResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsSendMessageResult>(m_ptr); }
};

struct ISmsMessageReceivedEventArgs :
	Windows::IInspectable,
	impl_ISmsMessageReceivedEventArgs<ISmsMessageReceivedEventArgs>
{
	ISmsMessageReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsMessageReceivedEventArgs>(m_ptr); }
};

struct ISmsDeviceStatics :
	Windows::IInspectable,
	impl_ISmsDeviceStatics<ISmsDeviceStatics>
{
	ISmsDeviceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsDeviceStatics>(m_ptr); }
};

struct ISmsDeviceStatics2 :
	Windows::IInspectable,
	impl_ISmsDeviceStatics2<ISmsDeviceStatics2>
{
	ISmsDeviceStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsDeviceStatics2>(m_ptr); }
};

struct ISmsDevice :
	Windows::IInspectable,
	impl_ISmsDevice<ISmsDevice>
{
	ISmsDevice(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsDevice>(m_ptr); }
};

struct ISmsDevice2Statics :
	Windows::IInspectable,
	impl_ISmsDevice2Statics<ISmsDevice2Statics>
{
	ISmsDevice2Statics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsDevice2Statics>(m_ptr); }
};

struct ISmsDevice2 :
	Windows::IInspectable,
	impl_ISmsDevice2<ISmsDevice2>
{
	ISmsDevice2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsDevice2>(m_ptr); }
};

struct ISmsReceivedEventDetails :
	Windows::IInspectable,
	impl_ISmsReceivedEventDetails<ISmsReceivedEventDetails>
{
	ISmsReceivedEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsReceivedEventDetails>(m_ptr); }
};

struct ISmsReceivedEventDetails2 :
	Windows::IInspectable,
	impl_ISmsReceivedEventDetails2<ISmsReceivedEventDetails2>
{
	ISmsReceivedEventDetails2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsReceivedEventDetails2>(m_ptr); }
};

struct ISmsMessageReceivedTriggerDetails :
	Windows::IInspectable,
	impl_ISmsMessageReceivedTriggerDetails<ISmsMessageReceivedTriggerDetails>
{
	ISmsMessageReceivedTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsMessageReceivedTriggerDetails>(m_ptr); }
};

struct ISmsFilterRule :
	Windows::IInspectable,
	impl_ISmsFilterRule<ISmsFilterRule>
{
	ISmsFilterRule(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsFilterRule>(m_ptr); }
};

struct ISmsFilterRuleFactory :
	Windows::IInspectable,
	impl_ISmsFilterRuleFactory<ISmsFilterRuleFactory>
{
	ISmsFilterRuleFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsFilterRuleFactory>(m_ptr); }
};

struct ISmsFilterRules :
	Windows::IInspectable,
	impl_ISmsFilterRules<ISmsFilterRules>
{
	ISmsFilterRules(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsFilterRules>(m_ptr); }
};

struct ISmsFilterRulesFactory :
	Windows::IInspectable,
	impl_ISmsFilterRulesFactory<ISmsFilterRulesFactory>
{
	ISmsFilterRulesFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsFilterRulesFactory>(m_ptr); }
};

struct ISmsMessageRegistrationStatics :
	Windows::IInspectable,
	impl_ISmsMessageRegistrationStatics<ISmsMessageRegistrationStatics>
{
	ISmsMessageRegistrationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsMessageRegistrationStatics>(m_ptr); }
};

struct ISmsMessageRegistration :
	Windows::IInspectable,
	impl_ISmsMessageRegistration<ISmsMessageRegistration>
{
	ISmsMessageRegistration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISmsMessageRegistration>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Foundation {

struct IAsyncActionCompletedHandler :
	Windows::IUnknown,
	impl_IAsyncActionCompletedHandler<IAsyncActionCompletedHandler>
{
	IAsyncActionCompletedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAsyncActionCompletedHandler>(m_ptr); }
};

struct IDeferralCompletedHandler :
	Windows::IUnknown,
	impl_IDeferralCompletedHandler<IDeferralCompletedHandler>
{
	IDeferralCompletedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeferralCompletedHandler>(m_ptr); }
};

struct IUriRuntimeClass :
	Windows::IInspectable,
	impl_IUriRuntimeClass<IUriRuntimeClass>
{
	IUriRuntimeClass(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUriRuntimeClass>(m_ptr); }
};

struct IUriRuntimeClassWithAbsoluteCanonicalUri :
	Windows::IInspectable,
	impl_IUriRuntimeClassWithAbsoluteCanonicalUri<IUriRuntimeClassWithAbsoluteCanonicalUri>
{
	IUriRuntimeClassWithAbsoluteCanonicalUri(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUriRuntimeClassWithAbsoluteCanonicalUri>(m_ptr); }
};

struct IUriEscapeStatics :
	Windows::IInspectable,
	impl_IUriEscapeStatics<IUriEscapeStatics>
{
	IUriEscapeStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUriEscapeStatics>(m_ptr); }
};

struct IUriRuntimeClassFactory :
	Windows::IInspectable,
	impl_IUriRuntimeClassFactory<IUriRuntimeClassFactory>
{
	IUriRuntimeClassFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUriRuntimeClassFactory>(m_ptr); }
};

struct IWwwFormUrlDecoderEntry :
	Windows::IInspectable,
	impl_IWwwFormUrlDecoderEntry<IWwwFormUrlDecoderEntry>
{
	IWwwFormUrlDecoderEntry(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWwwFormUrlDecoderEntry>(m_ptr); }
};

struct IWwwFormUrlDecoderRuntimeClass :
	Windows::IInspectable,
	impl_IWwwFormUrlDecoderRuntimeClass<IWwwFormUrlDecoderRuntimeClass>,
	requires<IWwwFormUrlDecoderRuntimeClass, Windows::Foundation::Collections::IIterable<Windows::Foundation::IWwwFormUrlDecoderEntry>, Windows::Foundation::Collections::IVectorView<Windows::Foundation::IWwwFormUrlDecoderEntry>>
{
	IWwwFormUrlDecoderRuntimeClass(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWwwFormUrlDecoderRuntimeClass>(m_ptr); }
};

struct IWwwFormUrlDecoderRuntimeClassFactory :
	Windows::IInspectable,
	impl_IWwwFormUrlDecoderRuntimeClassFactory<IWwwFormUrlDecoderRuntimeClassFactory>
{
	IWwwFormUrlDecoderRuntimeClassFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWwwFormUrlDecoderRuntimeClassFactory>(m_ptr); }
};

struct IGetActivationFactory :
	Windows::IInspectable,
	impl_IGetActivationFactory<IGetActivationFactory>
{
	IGetActivationFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGetActivationFactory>(m_ptr); }
};

struct IClosable :
	Windows::IInspectable,
	impl_IClosable<IClosable>
{
	IClosable(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IClosable>(m_ptr); }
};

struct IPropertyValue :
	Windows::IInspectable,
	impl_IPropertyValue<IPropertyValue>
{
	IPropertyValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPropertyValue>(m_ptr); }
};

struct IPropertyValueStatics :
	Windows::IInspectable,
	impl_IPropertyValueStatics<IPropertyValueStatics>
{
	IPropertyValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPropertyValueStatics>(m_ptr); }
};

struct IStringable :
	Windows::IInspectable,
	impl_IStringable<IStringable>
{
	IStringable(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStringable>(m_ptr); }
};

struct IDeferral :
	Windows::IInspectable,
	impl_IDeferral<IDeferral>
{
	IDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeferral>(m_ptr); }
};

struct IDeferralFactory :
	Windows::IInspectable,
	impl_IDeferralFactory<IDeferralFactory>
{
	IDeferralFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDeferralFactory>(m_ptr); }
};

struct IMemoryBufferReference :
	Windows::IInspectable,
	impl_IMemoryBufferReference<IMemoryBufferReference>
{
	IMemoryBufferReference(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMemoryBufferReference>(m_ptr); }
};

struct IMemoryBuffer :
	Windows::IInspectable,
	impl_IMemoryBuffer<IMemoryBuffer>
{
	IMemoryBuffer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMemoryBuffer>(m_ptr); }
};

struct IMemoryBufferFactory :
	Windows::IInspectable,
	impl_IMemoryBufferFactory<IMemoryBufferFactory>
{
	IMemoryBufferFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMemoryBufferFactory>(m_ptr); }
};

struct IAsyncAction :
	Windows::IInspectable,
	impl_IAsyncAction<IAsyncAction>,
	requires<IAsyncAction, IAsyncInfo>
{
	IAsyncAction(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAsyncAction>(m_ptr); }
};

}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Collections {

struct IPropertySet :
	Windows::IInspectable,
	impl_IPropertySet<IPropertySet>,
	requires<IPropertySet, Windows::Foundation::Collections::IObservableMap<hstring, IInspectable>, Windows::Foundation::Collections::IMap<hstring, IInspectable>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<hstring, IInspectable>>>
{
	IPropertySet(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPropertySet>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Diagnostics {

struct ITracingStatusChangedEventArgs :
	Windows::IInspectable,
	impl_ITracingStatusChangedEventArgs<ITracingStatusChangedEventArgs>
{
	ITracingStatusChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITracingStatusChangedEventArgs>(m_ptr); }
};

struct IAsyncCausalityTracerStatics :
	Windows::IInspectable,
	impl_IAsyncCausalityTracerStatics<IAsyncCausalityTracerStatics>
{
	IAsyncCausalityTracerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAsyncCausalityTracerStatics>(m_ptr); }
};

struct IErrorReportingSettings :
	Windows::IInspectable,
	impl_IErrorReportingSettings<IErrorReportingSettings>
{
	IErrorReportingSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IErrorReportingSettings>(m_ptr); }
};

struct IErrorDetailsStatics :
	Windows::IInspectable,
	impl_IErrorDetailsStatics<IErrorDetailsStatics>
{
	IErrorDetailsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IErrorDetailsStatics>(m_ptr); }
};

struct IErrorDetails :
	Windows::IInspectable,
	impl_IErrorDetails<IErrorDetails>
{
	IErrorDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IErrorDetails>(m_ptr); }
};

struct ILoggingOptions :
	Windows::IInspectable,
	impl_ILoggingOptions<ILoggingOptions>
{
	ILoggingOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILoggingOptions>(m_ptr); }
};

struct ILoggingOptionsFactory :
	Windows::IInspectable,
	impl_ILoggingOptionsFactory<ILoggingOptionsFactory>
{
	ILoggingOptionsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILoggingOptionsFactory>(m_ptr); }
};

struct ILoggingChannelOptions :
	Windows::IInspectable,
	impl_ILoggingChannelOptions<ILoggingChannelOptions>
{
	ILoggingChannelOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILoggingChannelOptions>(m_ptr); }
};

struct ILoggingChannelOptionsFactory :
	Windows::IInspectable,
	impl_ILoggingChannelOptionsFactory<ILoggingChannelOptionsFactory>
{
	ILoggingChannelOptionsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILoggingChannelOptionsFactory>(m_ptr); }
};

struct ILoggingFields :
	Windows::IInspectable,
	impl_ILoggingFields<ILoggingFields>
{
	ILoggingFields(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILoggingFields>(m_ptr); }
};

struct ILoggingTarget :
	Windows::IInspectable,
	impl_ILoggingTarget<ILoggingTarget>
{
	ILoggingTarget(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILoggingTarget>(m_ptr); }
};

struct ILoggingChannel :
	Windows::IInspectable,
	impl_ILoggingChannel<ILoggingChannel>
{
	ILoggingChannel(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILoggingChannel>(m_ptr); }
};

struct ILoggingChannel2 :
	Windows::IInspectable,
	impl_ILoggingChannel2<ILoggingChannel2>,
	requires<ILoggingChannel2, Windows::Foundation::Diagnostics::ILoggingChannel, Windows::Foundation::Diagnostics::ILoggingTarget>
{
	ILoggingChannel2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILoggingChannel2>(m_ptr); }
};

struct ILoggingChannelFactory :
	Windows::IInspectable,
	impl_ILoggingChannelFactory<ILoggingChannelFactory>
{
	ILoggingChannelFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILoggingChannelFactory>(m_ptr); }
};

struct ILoggingChannelFactory2 :
	Windows::IInspectable,
	impl_ILoggingChannelFactory2<ILoggingChannelFactory2>
{
	ILoggingChannelFactory2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILoggingChannelFactory2>(m_ptr); }
};

struct ILoggingActivity :
	Windows::IInspectable,
	impl_ILoggingActivity<ILoggingActivity>
{
	ILoggingActivity(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILoggingActivity>(m_ptr); }
};

struct ILoggingActivity2 :
	Windows::IInspectable,
	impl_ILoggingActivity2<ILoggingActivity2>,
	requires<ILoggingActivity2, Windows::Foundation::Diagnostics::ILoggingActivity, Windows::Foundation::Diagnostics::ILoggingTarget>
{
	ILoggingActivity2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILoggingActivity2>(m_ptr); }
};

struct ILoggingActivityFactory :
	Windows::IInspectable,
	impl_ILoggingActivityFactory<ILoggingActivityFactory>
{
	ILoggingActivityFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILoggingActivityFactory>(m_ptr); }
};

struct ILoggingSession :
	Windows::IInspectable,
	impl_ILoggingSession<ILoggingSession>
{
	ILoggingSession(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILoggingSession>(m_ptr); }
};

struct ILoggingSessionFactory :
	Windows::IInspectable,
	impl_ILoggingSessionFactory<ILoggingSessionFactory>
{
	ILoggingSessionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILoggingSessionFactory>(m_ptr); }
};

struct ILogFileGeneratedEventArgs :
	Windows::IInspectable,
	impl_ILogFileGeneratedEventArgs<ILogFileGeneratedEventArgs>
{
	ILogFileGeneratedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILogFileGeneratedEventArgs>(m_ptr); }
};

struct IFileLoggingSession :
	Windows::IInspectable,
	impl_IFileLoggingSession<IFileLoggingSession>
{
	IFileLoggingSession(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileLoggingSession>(m_ptr); }
};

struct IFileLoggingSessionFactory :
	Windows::IInspectable,
	impl_IFileLoggingSessionFactory<IFileLoggingSessionFactory>
{
	IFileLoggingSessionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileLoggingSessionFactory>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Metadata {

struct IApiInformationStatics :
	Windows::IInspectable,
	impl_IApiInformationStatics<IApiInformationStatics>
{
	IApiInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApiInformationStatics>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Gaming { namespace Input {

struct IGameController :
	Windows::IInspectable,
	impl_IGameController<IGameController>
{
	IGameController(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGameController>(m_ptr); }
};

struct IGamepad :
	Windows::IInspectable,
	impl_IGamepad<IGamepad>,
	requires<IGamepad, Windows::Gaming::Input::IGameController>
{
	IGamepad(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGamepad>(m_ptr); }
};

struct IGamepadStatics :
	Windows::IInspectable,
	impl_IGamepadStatics<IGamepadStatics>
{
	IGamepadStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGamepadStatics>(m_ptr); }
};

struct IHeadset :
	Windows::IInspectable,
	impl_IHeadset<IHeadset>
{
	IHeadset(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHeadset>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Globalization {

struct IJapanesePhoneticAnalyzerStatics :
	Windows::IInspectable,
	impl_IJapanesePhoneticAnalyzerStatics<IJapanesePhoneticAnalyzerStatics>
{
	IJapanesePhoneticAnalyzerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IJapanesePhoneticAnalyzerStatics>(m_ptr); }
};

struct IJapanesePhoneme :
	Windows::IInspectable,
	impl_IJapanesePhoneme<IJapanesePhoneme>
{
	IJapanesePhoneme(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IJapanesePhoneme>(m_ptr); }
};

struct ICalendarIdentifiersStatics :
	Windows::IInspectable,
	impl_ICalendarIdentifiersStatics<ICalendarIdentifiersStatics>
{
	ICalendarIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICalendarIdentifiersStatics>(m_ptr); }
};

struct ICalendarIdentifiersStatics2 :
	Windows::IInspectable,
	impl_ICalendarIdentifiersStatics2<ICalendarIdentifiersStatics2>
{
	ICalendarIdentifiersStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICalendarIdentifiersStatics2>(m_ptr); }
};

struct IClockIdentifiersStatics :
	Windows::IInspectable,
	impl_IClockIdentifiersStatics<IClockIdentifiersStatics>
{
	IClockIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IClockIdentifiersStatics>(m_ptr); }
};

struct INumeralSystemIdentifiersStatics :
	Windows::IInspectable,
	impl_INumeralSystemIdentifiersStatics<INumeralSystemIdentifiersStatics>
{
	INumeralSystemIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<INumeralSystemIdentifiersStatics>(m_ptr); }
};

struct INumeralSystemIdentifiersStatics2 :
	Windows::IInspectable,
	impl_INumeralSystemIdentifiersStatics2<INumeralSystemIdentifiersStatics2>
{
	INumeralSystemIdentifiersStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<INumeralSystemIdentifiersStatics2>(m_ptr); }
};

struct ICurrencyIdentifiersStatics :
	Windows::IInspectable,
	impl_ICurrencyIdentifiersStatics<ICurrencyIdentifiersStatics>
{
	ICurrencyIdentifiersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICurrencyIdentifiersStatics>(m_ptr); }
};

struct IGeographicRegion :
	Windows::IInspectable,
	impl_IGeographicRegion<IGeographicRegion>
{
	IGeographicRegion(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeographicRegion>(m_ptr); }
};

struct IGeographicRegionFactory :
	Windows::IInspectable,
	impl_IGeographicRegionFactory<IGeographicRegionFactory>
{
	IGeographicRegionFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeographicRegionFactory>(m_ptr); }
};

struct IGeographicRegionStatics :
	Windows::IInspectable,
	impl_IGeographicRegionStatics<IGeographicRegionStatics>
{
	IGeographicRegionStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeographicRegionStatics>(m_ptr); }
};

struct ILanguage :
	Windows::IInspectable,
	impl_ILanguage<ILanguage>
{
	ILanguage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILanguage>(m_ptr); }
};

struct ILanguageExtensionSubtags :
	Windows::IInspectable,
	impl_ILanguageExtensionSubtags<ILanguageExtensionSubtags>
{
	ILanguageExtensionSubtags(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILanguageExtensionSubtags>(m_ptr); }
};

struct ILanguageFactory :
	Windows::IInspectable,
	impl_ILanguageFactory<ILanguageFactory>
{
	ILanguageFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILanguageFactory>(m_ptr); }
};

struct ILanguageStatics :
	Windows::IInspectable,
	impl_ILanguageStatics<ILanguageStatics>
{
	ILanguageStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILanguageStatics>(m_ptr); }
};

struct ILanguageStatics2 :
	Windows::IInspectable,
	impl_ILanguageStatics2<ILanguageStatics2>
{
	ILanguageStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILanguageStatics2>(m_ptr); }
};

struct ICalendar :
	Windows::IInspectable,
	impl_ICalendar<ICalendar>
{
	ICalendar(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICalendar>(m_ptr); }
};

struct ICalendarFactory2 :
	Windows::IInspectable,
	impl_ICalendarFactory2<ICalendarFactory2>
{
	ICalendarFactory2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICalendarFactory2>(m_ptr); }
};

struct ITimeZoneOnCalendar :
	Windows::IInspectable,
	impl_ITimeZoneOnCalendar<ITimeZoneOnCalendar>
{
	ITimeZoneOnCalendar(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITimeZoneOnCalendar>(m_ptr); }
};

struct ICalendarFactory :
	Windows::IInspectable,
	impl_ICalendarFactory<ICalendarFactory>
{
	ICalendarFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICalendarFactory>(m_ptr); }
};

struct IApplicationLanguagesStatics :
	Windows::IInspectable,
	impl_IApplicationLanguagesStatics<IApplicationLanguagesStatics>
{
	IApplicationLanguagesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationLanguagesStatics>(m_ptr); }
};

}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Display {

struct IDisplayPropertiesEventHandler :
	Windows::IUnknown,
	impl_IDisplayPropertiesEventHandler<IDisplayPropertiesEventHandler>
{
	IDisplayPropertiesEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDisplayPropertiesEventHandler>(m_ptr); }
};

struct IDisplayInformationStatics :
	Windows::IInspectable,
	impl_IDisplayInformationStatics<IDisplayInformationStatics>
{
	IDisplayInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDisplayInformationStatics>(m_ptr); }
};

struct IDisplayInformation :
	Windows::IInspectable,
	impl_IDisplayInformation<IDisplayInformation>
{
	IDisplayInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDisplayInformation>(m_ptr); }
};

struct IDisplayInformation2 :
	Windows::IInspectable,
	impl_IDisplayInformation2<IDisplayInformation2>,
	requires<IDisplayInformation2, Windows::Graphics::Display::IDisplayInformation>
{
	IDisplayInformation2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDisplayInformation2>(m_ptr); }
};

struct IDisplayInformation3 :
	Windows::IInspectable,
	impl_IDisplayInformation3<IDisplayInformation3>
{
	IDisplayInformation3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDisplayInformation3>(m_ptr); }
};

struct IDisplayPropertiesStatics :
	Windows::IInspectable,
	impl_IDisplayPropertiesStatics<IDisplayPropertiesStatics>
{
	IDisplayPropertiesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDisplayPropertiesStatics>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Media { namespace SpeechRecognition {

struct ISpeechRecognitionCompilationResult :
	Windows::IInspectable,
	impl_ISpeechRecognitionCompilationResult<ISpeechRecognitionCompilationResult>
{
	ISpeechRecognitionCompilationResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognitionCompilationResult>(m_ptr); }
};

struct ISpeechRecognizerTimeouts :
	Windows::IInspectable,
	impl_ISpeechRecognizerTimeouts<ISpeechRecognizerTimeouts>
{
	ISpeechRecognizerTimeouts(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognizerTimeouts>(m_ptr); }
};

struct ISpeechRecognizerUIOptions :
	Windows::IInspectable,
	impl_ISpeechRecognizerUIOptions<ISpeechRecognizerUIOptions>
{
	ISpeechRecognizerUIOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognizerUIOptions>(m_ptr); }
};

struct ISpeechRecognitionResult :
	Windows::IInspectable,
	impl_ISpeechRecognitionResult<ISpeechRecognitionResult>
{
	ISpeechRecognitionResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognitionResult>(m_ptr); }
};

struct ISpeechRecognitionConstraint :
	Windows::IInspectable,
	impl_ISpeechRecognitionConstraint<ISpeechRecognitionConstraint>
{
	ISpeechRecognitionConstraint(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognitionConstraint>(m_ptr); }
};

struct ISpeechRecognitionResult2 :
	Windows::IInspectable,
	impl_ISpeechRecognitionResult2<ISpeechRecognitionResult2>
{
	ISpeechRecognitionResult2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognitionResult2>(m_ptr); }
};

struct ISpeechRecognitionSemanticInterpretation :
	Windows::IInspectable,
	impl_ISpeechRecognitionSemanticInterpretation<ISpeechRecognitionSemanticInterpretation>
{
	ISpeechRecognitionSemanticInterpretation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognitionSemanticInterpretation>(m_ptr); }
};

struct ISpeechRecognitionTopicConstraint :
	Windows::IInspectable,
	impl_ISpeechRecognitionTopicConstraint<ISpeechRecognitionTopicConstraint>,
	requires<ISpeechRecognitionTopicConstraint, Windows::Media::SpeechRecognition::ISpeechRecognitionConstraint>
{
	ISpeechRecognitionTopicConstraint(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognitionTopicConstraint>(m_ptr); }
};

struct ISpeechRecognitionTopicConstraintFactory :
	Windows::IInspectable,
	impl_ISpeechRecognitionTopicConstraintFactory<ISpeechRecognitionTopicConstraintFactory>
{
	ISpeechRecognitionTopicConstraintFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognitionTopicConstraintFactory>(m_ptr); }
};

struct ISpeechRecognitionListConstraint :
	Windows::IInspectable,
	impl_ISpeechRecognitionListConstraint<ISpeechRecognitionListConstraint>,
	requires<ISpeechRecognitionListConstraint, Windows::Media::SpeechRecognition::ISpeechRecognitionConstraint>
{
	ISpeechRecognitionListConstraint(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognitionListConstraint>(m_ptr); }
};

struct ISpeechRecognitionListConstraintFactory :
	Windows::IInspectable,
	impl_ISpeechRecognitionListConstraintFactory<ISpeechRecognitionListConstraintFactory>
{
	ISpeechRecognitionListConstraintFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognitionListConstraintFactory>(m_ptr); }
};

struct ISpeechRecognitionGrammarFileConstraint :
	Windows::IInspectable,
	impl_ISpeechRecognitionGrammarFileConstraint<ISpeechRecognitionGrammarFileConstraint>,
	requires<ISpeechRecognitionGrammarFileConstraint, Windows::Media::SpeechRecognition::ISpeechRecognitionConstraint>
{
	ISpeechRecognitionGrammarFileConstraint(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognitionGrammarFileConstraint>(m_ptr); }
};

struct ISpeechRecognitionGrammarFileConstraintFactory :
	Windows::IInspectable,
	impl_ISpeechRecognitionGrammarFileConstraintFactory<ISpeechRecognitionGrammarFileConstraintFactory>
{
	ISpeechRecognitionGrammarFileConstraintFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognitionGrammarFileConstraintFactory>(m_ptr); }
};

struct ISpeechRecognitionVoiceCommandDefinitionConstraint :
	Windows::IInspectable,
	impl_ISpeechRecognitionVoiceCommandDefinitionConstraint<ISpeechRecognitionVoiceCommandDefinitionConstraint>,
	requires<ISpeechRecognitionVoiceCommandDefinitionConstraint, Windows::Media::SpeechRecognition::ISpeechRecognitionConstraint>
{
	ISpeechRecognitionVoiceCommandDefinitionConstraint(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognitionVoiceCommandDefinitionConstraint>(m_ptr); }
};

struct ISpeechRecognitionQualityDegradingEventArgs :
	Windows::IInspectable,
	impl_ISpeechRecognitionQualityDegradingEventArgs<ISpeechRecognitionQualityDegradingEventArgs>
{
	ISpeechRecognitionQualityDegradingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognitionQualityDegradingEventArgs>(m_ptr); }
};

struct ISpeechRecognizerStateChangedEventArgs :
	Windows::IInspectable,
	impl_ISpeechRecognizerStateChangedEventArgs<ISpeechRecognizerStateChangedEventArgs>
{
	ISpeechRecognizerStateChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognizerStateChangedEventArgs>(m_ptr); }
};

struct ISpeechRecognizer :
	Windows::IInspectable,
	impl_ISpeechRecognizer<ISpeechRecognizer>
{
	ISpeechRecognizer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognizer>(m_ptr); }
};

struct ISpeechRecognizerFactory :
	Windows::IInspectable,
	impl_ISpeechRecognizerFactory<ISpeechRecognizerFactory>
{
	ISpeechRecognizerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognizerFactory>(m_ptr); }
};

struct ISpeechRecognizerStatics :
	Windows::IInspectable,
	impl_ISpeechRecognizerStatics<ISpeechRecognizerStatics>
{
	ISpeechRecognizerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognizerStatics>(m_ptr); }
};

struct ISpeechRecognizer2 :
	Windows::IInspectable,
	impl_ISpeechRecognizer2<ISpeechRecognizer2>
{
	ISpeechRecognizer2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognizer2>(m_ptr); }
};

struct ISpeechRecognitionHypothesis :
	Windows::IInspectable,
	impl_ISpeechRecognitionHypothesis<ISpeechRecognitionHypothesis>
{
	ISpeechRecognitionHypothesis(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognitionHypothesis>(m_ptr); }
};

struct ISpeechRecognitionHypothesisGeneratedEventArgs :
	Windows::IInspectable,
	impl_ISpeechRecognitionHypothesisGeneratedEventArgs<ISpeechRecognitionHypothesisGeneratedEventArgs>
{
	ISpeechRecognitionHypothesisGeneratedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechRecognitionHypothesisGeneratedEventArgs>(m_ptr); }
};

struct ISpeechContinuousRecognitionSession :
	Windows::IInspectable,
	impl_ISpeechContinuousRecognitionSession<ISpeechContinuousRecognitionSession>
{
	ISpeechContinuousRecognitionSession(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechContinuousRecognitionSession>(m_ptr); }
};

struct ISpeechContinuousRecognitionCompletedEventArgs :
	Windows::IInspectable,
	impl_ISpeechContinuousRecognitionCompletedEventArgs<ISpeechContinuousRecognitionCompletedEventArgs>
{
	ISpeechContinuousRecognitionCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechContinuousRecognitionCompletedEventArgs>(m_ptr); }
};

struct ISpeechContinuousRecognitionResultGeneratedEventArgs :
	Windows::IInspectable,
	impl_ISpeechContinuousRecognitionResultGeneratedEventArgs<ISpeechContinuousRecognitionResultGeneratedEventArgs>
{
	ISpeechContinuousRecognitionResultGeneratedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISpeechContinuousRecognitionResultGeneratedEventArgs>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Networking {

struct IHostNameStatics :
	Windows::IInspectable,
	impl_IHostNameStatics<IHostNameStatics>
{
	IHostNameStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHostNameStatics>(m_ptr); }
};

struct IHostName :
	Windows::IInspectable,
	impl_IHostName<IHostName>
{
	IHostName(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHostName>(m_ptr); }
};

struct IHostNameFactory :
	Windows::IInspectable,
	impl_IHostNameFactory<IHostNameFactory>
{
	IHostNameFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHostNameFactory>(m_ptr); }
};

struct IEndpointPair :
	Windows::IInspectable,
	impl_IEndpointPair<IEndpointPair>
{
	IEndpointPair(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IEndpointPair>(m_ptr); }
};

struct IEndpointPairFactory :
	Windows::IInspectable,
	impl_IEndpointPairFactory<IEndpointPairFactory>
{
	IEndpointPairFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IEndpointPairFactory>(m_ptr); }
};

}}}

namespace winrt { namespace Windows { namespace Networking { namespace Connectivity {

struct INetworkStatusChangedEventHandler :
	Windows::IUnknown,
	impl_INetworkStatusChangedEventHandler<INetworkStatusChangedEventHandler>
{
	INetworkStatusChangedEventHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<INetworkStatusChangedEventHandler>(m_ptr); }
};

struct IDataUsage :
	Windows::IInspectable,
	impl_IDataUsage<IDataUsage>
{
	IDataUsage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataUsage>(m_ptr); }
};

struct IDataPlanUsage :
	Windows::IInspectable,
	impl_IDataPlanUsage<IDataPlanUsage>
{
	IDataPlanUsage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataPlanUsage>(m_ptr); }
};

struct IDataPlanStatus :
	Windows::IInspectable,
	impl_IDataPlanStatus<IDataPlanStatus>
{
	IDataPlanStatus(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataPlanStatus>(m_ptr); }
};

struct IConnectionCost :
	Windows::IInspectable,
	impl_IConnectionCost<IConnectionCost>
{
	IConnectionCost(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IConnectionCost>(m_ptr); }
};

struct IConnectionCost2 :
	Windows::IInspectable,
	impl_IConnectionCost2<IConnectionCost2>
{
	IConnectionCost2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IConnectionCost2>(m_ptr); }
};

struct INetworkSecuritySettings :
	Windows::IInspectable,
	impl_INetworkSecuritySettings<INetworkSecuritySettings>
{
	INetworkSecuritySettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<INetworkSecuritySettings>(m_ptr); }
};

struct IConnectionProfile :
	Windows::IInspectable,
	impl_IConnectionProfile<IConnectionProfile>
{
	IConnectionProfile(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IConnectionProfile>(m_ptr); }
};

struct IWwanConnectionProfileDetails :
	Windows::IInspectable,
	impl_IWwanConnectionProfileDetails<IWwanConnectionProfileDetails>
{
	IWwanConnectionProfileDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWwanConnectionProfileDetails>(m_ptr); }
};

struct IWlanConnectionProfileDetails :
	Windows::IInspectable,
	impl_IWlanConnectionProfileDetails<IWlanConnectionProfileDetails>
{
	IWlanConnectionProfileDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWlanConnectionProfileDetails>(m_ptr); }
};

struct IConnectivityInterval :
	Windows::IInspectable,
	impl_IConnectivityInterval<IConnectivityInterval>
{
	IConnectivityInterval(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IConnectivityInterval>(m_ptr); }
};

struct INetworkUsage :
	Windows::IInspectable,
	impl_INetworkUsage<INetworkUsage>
{
	INetworkUsage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<INetworkUsage>(m_ptr); }
};

struct IConnectionProfile2 :
	Windows::IInspectable,
	impl_IConnectionProfile2<IConnectionProfile2>
{
	IConnectionProfile2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IConnectionProfile2>(m_ptr); }
};

struct ILanIdentifierData :
	Windows::IInspectable,
	impl_ILanIdentifierData<ILanIdentifierData>
{
	ILanIdentifierData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILanIdentifierData>(m_ptr); }
};

struct ILanIdentifier :
	Windows::IInspectable,
	impl_ILanIdentifier<ILanIdentifier>
{
	ILanIdentifier(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILanIdentifier>(m_ptr); }
};

struct INetworkInformationStatics :
	Windows::IInspectable,
	impl_INetworkInformationStatics<INetworkInformationStatics>
{
	INetworkInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<INetworkInformationStatics>(m_ptr); }
};

struct IConnectionProfileFilter :
	Windows::IInspectable,
	impl_IConnectionProfileFilter<IConnectionProfileFilter>
{
	IConnectionProfileFilter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IConnectionProfileFilter>(m_ptr); }
};

struct IConnectionProfileFilter2 :
	Windows::IInspectable,
	impl_IConnectionProfileFilter2<IConnectionProfileFilter2>
{
	IConnectionProfileFilter2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IConnectionProfileFilter2>(m_ptr); }
};

struct INetworkInformationStatics2 :
	Windows::IInspectable,
	impl_INetworkInformationStatics2<INetworkInformationStatics2>
{
	INetworkInformationStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<INetworkInformationStatics2>(m_ptr); }
};

struct INetworkItem :
	Windows::IInspectable,
	impl_INetworkItem<INetworkItem>
{
	INetworkItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<INetworkItem>(m_ptr); }
};

struct INetworkAdapter :
	Windows::IInspectable,
	impl_INetworkAdapter<INetworkAdapter>
{
	INetworkAdapter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<INetworkAdapter>(m_ptr); }
};

struct IIPInformation :
	Windows::IInspectable,
	impl_IIPInformation<IIPInformation>
{
	IIPInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IIPInformation>(m_ptr); }
};

struct IProxyConfiguration :
	Windows::IInspectable,
	impl_IProxyConfiguration<IProxyConfiguration>
{
	IProxyConfiguration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProxyConfiguration>(m_ptr); }
};

struct IConnectionSession :
	Windows::IInspectable,
	impl_IConnectionSession<IConnectionSession>
{
	IConnectionSession(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IConnectionSession>(m_ptr); }
};

struct IRoutePolicy :
	Windows::IInspectable,
	impl_IRoutePolicy<IRoutePolicy>
{
	IRoutePolicy(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRoutePolicy>(m_ptr); }
};

struct IRoutePolicyFactory :
	Windows::IInspectable,
	impl_IRoutePolicyFactory<IRoutePolicyFactory>
{
	IRoutePolicyFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRoutePolicyFactory>(m_ptr); }
};

struct ICellularApnContext :
	Windows::IInspectable,
	impl_ICellularApnContext<ICellularApnContext>
{
	ICellularApnContext(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICellularApnContext>(m_ptr); }
};

struct IConnectivityManagerStatics :
	Windows::IInspectable,
	impl_IConnectivityManagerStatics<IConnectivityManagerStatics>
{
	IConnectivityManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IConnectivityManagerStatics>(m_ptr); }
};

struct INetworkStateChangeEventDetails :
	Windows::IInspectable,
	impl_INetworkStateChangeEventDetails<INetworkStateChangeEventDetails>
{
	INetworkStateChangeEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<INetworkStateChangeEventDetails>(m_ptr); }
};

struct INetworkStateChangeEventDetails2 :
	Windows::IInspectable,
	impl_INetworkStateChangeEventDetails2<INetworkStateChangeEventDetails2>
{
	INetworkStateChangeEventDetails2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<INetworkStateChangeEventDetails2>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Sockets {

struct IControlChannelTrigger :
	Windows::IInspectable,
	impl_IControlChannelTrigger<IControlChannelTrigger>
{
	IControlChannelTrigger(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IControlChannelTrigger>(m_ptr); }
};

struct IControlChannelTriggerFactory :
	Windows::IInspectable,
	impl_IControlChannelTriggerFactory<IControlChannelTriggerFactory>
{
	IControlChannelTriggerFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IControlChannelTriggerFactory>(m_ptr); }
};

struct IControlChannelTriggerEventDetails :
	Windows::IInspectable,
	impl_IControlChannelTriggerEventDetails<IControlChannelTriggerEventDetails>
{
	IControlChannelTriggerEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IControlChannelTriggerEventDetails>(m_ptr); }
};

struct IControlChannelTriggerResetEventDetails :
	Windows::IInspectable,
	impl_IControlChannelTriggerResetEventDetails<IControlChannelTriggerResetEventDetails>
{
	IControlChannelTriggerResetEventDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IControlChannelTriggerResetEventDetails>(m_ptr); }
};

struct ISocketActivityInformation :
	Windows::IInspectable,
	impl_ISocketActivityInformation<ISocketActivityInformation>
{
	ISocketActivityInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISocketActivityInformation>(m_ptr); }
};

struct ISocketActivityTriggerDetails :
	Windows::IInspectable,
	impl_ISocketActivityTriggerDetails<ISocketActivityTriggerDetails>
{
	ISocketActivityTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISocketActivityTriggerDetails>(m_ptr); }
};

struct ISocketActivityInformationStatics :
	Windows::IInspectable,
	impl_ISocketActivityInformationStatics<ISocketActivityInformationStatics>
{
	ISocketActivityInformationStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISocketActivityInformationStatics>(m_ptr); }
};

struct ISocketActivityContext :
	Windows::IInspectable,
	impl_ISocketActivityContext<ISocketActivityContext>
{
	ISocketActivityContext(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISocketActivityContext>(m_ptr); }
};

struct ISocketActivityContextFactory :
	Windows::IInspectable,
	impl_ISocketActivityContextFactory<ISocketActivityContextFactory>
{
	ISocketActivityContextFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISocketActivityContextFactory>(m_ptr); }
};

struct IDatagramSocketMessageReceivedEventArgs :
	Windows::IInspectable,
	impl_IDatagramSocketMessageReceivedEventArgs<IDatagramSocketMessageReceivedEventArgs>
{
	IDatagramSocketMessageReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDatagramSocketMessageReceivedEventArgs>(m_ptr); }
};

struct IMessageWebSocketMessageReceivedEventArgs :
	Windows::IInspectable,
	impl_IMessageWebSocketMessageReceivedEventArgs<IMessageWebSocketMessageReceivedEventArgs>
{
	IMessageWebSocketMessageReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMessageWebSocketMessageReceivedEventArgs>(m_ptr); }
};

struct IWebSocketClosedEventArgs :
	Windows::IInspectable,
	impl_IWebSocketClosedEventArgs<IWebSocketClosedEventArgs>
{
	IWebSocketClosedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebSocketClosedEventArgs>(m_ptr); }
};

struct IDatagramSocketInformation :
	Windows::IInspectable,
	impl_IDatagramSocketInformation<IDatagramSocketInformation>
{
	IDatagramSocketInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDatagramSocketInformation>(m_ptr); }
};

struct IDatagramSocketControl :
	Windows::IInspectable,
	impl_IDatagramSocketControl<IDatagramSocketControl>
{
	IDatagramSocketControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDatagramSocketControl>(m_ptr); }
};

struct IDatagramSocketControl2 :
	Windows::IInspectable,
	impl_IDatagramSocketControl2<IDatagramSocketControl2>
{
	IDatagramSocketControl2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDatagramSocketControl2>(m_ptr); }
};

struct IDatagramSocketControl3 :
	Windows::IInspectable,
	impl_IDatagramSocketControl3<IDatagramSocketControl3>
{
	IDatagramSocketControl3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDatagramSocketControl3>(m_ptr); }
};

struct IDatagramSocketStatics :
	Windows::IInspectable,
	impl_IDatagramSocketStatics<IDatagramSocketStatics>
{
	IDatagramSocketStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDatagramSocketStatics>(m_ptr); }
};

struct IDatagramSocket :
	Windows::IInspectable,
	impl_IDatagramSocket<IDatagramSocket>
{
	IDatagramSocket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDatagramSocket>(m_ptr); }
};

struct IDatagramSocket2 :
	Windows::IInspectable,
	impl_IDatagramSocket2<IDatagramSocket2>
{
	IDatagramSocket2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDatagramSocket2>(m_ptr); }
};

struct IDatagramSocket3 :
	Windows::IInspectable,
	impl_IDatagramSocket3<IDatagramSocket3>
{
	IDatagramSocket3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDatagramSocket3>(m_ptr); }
};

struct IStreamSocketInformation :
	Windows::IInspectable,
	impl_IStreamSocketInformation<IStreamSocketInformation>
{
	IStreamSocketInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamSocketInformation>(m_ptr); }
};

struct IStreamSocketInformation2 :
	Windows::IInspectable,
	impl_IStreamSocketInformation2<IStreamSocketInformation2>
{
	IStreamSocketInformation2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamSocketInformation2>(m_ptr); }
};

struct IStreamSocketControl :
	Windows::IInspectable,
	impl_IStreamSocketControl<IStreamSocketControl>
{
	IStreamSocketControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamSocketControl>(m_ptr); }
};

struct IStreamSocketControl2 :
	Windows::IInspectable,
	impl_IStreamSocketControl2<IStreamSocketControl2>
{
	IStreamSocketControl2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamSocketControl2>(m_ptr); }
};

struct IStreamSocketControl3 :
	Windows::IInspectable,
	impl_IStreamSocketControl3<IStreamSocketControl3>
{
	IStreamSocketControl3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamSocketControl3>(m_ptr); }
};

struct IStreamSocket :
	Windows::IInspectable,
	impl_IStreamSocket<IStreamSocket>
{
	IStreamSocket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamSocket>(m_ptr); }
};

struct IStreamSocket2 :
	Windows::IInspectable,
	impl_IStreamSocket2<IStreamSocket2>
{
	IStreamSocket2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamSocket2>(m_ptr); }
};

struct IStreamSocket3 :
	Windows::IInspectable,
	impl_IStreamSocket3<IStreamSocket3>
{
	IStreamSocket3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamSocket3>(m_ptr); }
};

struct IStreamSocketListenerControl :
	Windows::IInspectable,
	impl_IStreamSocketListenerControl<IStreamSocketListenerControl>
{
	IStreamSocketListenerControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamSocketListenerControl>(m_ptr); }
};

struct IStreamSocketListenerControl2 :
	Windows::IInspectable,
	impl_IStreamSocketListenerControl2<IStreamSocketListenerControl2>
{
	IStreamSocketListenerControl2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamSocketListenerControl2>(m_ptr); }
};

struct IStreamSocketListenerInformation :
	Windows::IInspectable,
	impl_IStreamSocketListenerInformation<IStreamSocketListenerInformation>
{
	IStreamSocketListenerInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamSocketListenerInformation>(m_ptr); }
};

struct IStreamSocketListenerConnectionReceivedEventArgs :
	Windows::IInspectable,
	impl_IStreamSocketListenerConnectionReceivedEventArgs<IStreamSocketListenerConnectionReceivedEventArgs>
{
	IStreamSocketListenerConnectionReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamSocketListenerConnectionReceivedEventArgs>(m_ptr); }
};

struct IStreamSocketListener :
	Windows::IInspectable,
	impl_IStreamSocketListener<IStreamSocketListener>
{
	IStreamSocketListener(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamSocketListener>(m_ptr); }
};

struct IStreamSocketListener2 :
	Windows::IInspectable,
	impl_IStreamSocketListener2<IStreamSocketListener2>
{
	IStreamSocketListener2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamSocketListener2>(m_ptr); }
};

struct IStreamSocketListener3 :
	Windows::IInspectable,
	impl_IStreamSocketListener3<IStreamSocketListener3>
{
	IStreamSocketListener3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamSocketListener3>(m_ptr); }
};

struct IWebSocketControl :
	Windows::IInspectable,
	impl_IWebSocketControl<IWebSocketControl>
{
	IWebSocketControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebSocketControl>(m_ptr); }
};

struct IWebSocketInformation :
	Windows::IInspectable,
	impl_IWebSocketInformation<IWebSocketInformation>
{
	IWebSocketInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebSocketInformation>(m_ptr); }
};

struct IWebSocket :
	Windows::IInspectable,
	impl_IWebSocket<IWebSocket>
{
	IWebSocket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebSocket>(m_ptr); }
};

struct IMessageWebSocketControl :
	Windows::IInspectable,
	impl_IMessageWebSocketControl<IMessageWebSocketControl>,
	requires<IMessageWebSocketControl, Windows::Networking::Sockets::IWebSocketControl>
{
	IMessageWebSocketControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMessageWebSocketControl>(m_ptr); }
};

struct IMessageWebSocket :
	Windows::IInspectable,
	impl_IMessageWebSocket<IMessageWebSocket>,
	requires<IMessageWebSocket, Windows::Networking::Sockets::IWebSocket>
{
	IMessageWebSocket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMessageWebSocket>(m_ptr); }
};

struct IStreamWebSocketControl :
	Windows::IInspectable,
	impl_IStreamWebSocketControl<IStreamWebSocketControl>,
	requires<IStreamWebSocketControl, Windows::Networking::Sockets::IWebSocketControl>
{
	IStreamWebSocketControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamWebSocketControl>(m_ptr); }
};

struct IStreamWebSocket :
	Windows::IInspectable,
	impl_IStreamWebSocket<IStreamWebSocket>,
	requires<IStreamWebSocket, Windows::Networking::Sockets::IWebSocket>
{
	IStreamWebSocket(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamWebSocket>(m_ptr); }
};

struct ISocketErrorStatics :
	Windows::IInspectable,
	impl_ISocketErrorStatics<ISocketErrorStatics>
{
	ISocketErrorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISocketErrorStatics>(m_ptr); }
};

struct IWebSocketErrorStatics :
	Windows::IInspectable,
	impl_IWebSocketErrorStatics<IWebSocketErrorStatics>
{
	IWebSocketErrorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebSocketErrorStatics>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web {

struct IWebAuthenticationResult :
	Windows::IInspectable,
	impl_IWebAuthenticationResult<IWebAuthenticationResult>
{
	IWebAuthenticationResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAuthenticationResult>(m_ptr); }
};

struct IWebAuthenticationBrokerStatics :
	Windows::IInspectable,
	impl_IWebAuthenticationBrokerStatics<IWebAuthenticationBrokerStatics>
{
	IWebAuthenticationBrokerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAuthenticationBrokerStatics>(m_ptr); }
};

struct IWebAuthenticationBrokerStatics2 :
	Windows::IInspectable,
	impl_IWebAuthenticationBrokerStatics2<IWebAuthenticationBrokerStatics2>
{
	IWebAuthenticationBrokerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAuthenticationBrokerStatics2>(m_ptr); }
};

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Core {

struct IWebTokenRequest :
	Windows::IInspectable,
	impl_IWebTokenRequest<IWebTokenRequest>
{
	IWebTokenRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebTokenRequest>(m_ptr); }
};

struct IWebTokenRequest2 :
	Windows::IInspectable,
	impl_IWebTokenRequest2<IWebTokenRequest2>
{
	IWebTokenRequest2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebTokenRequest2>(m_ptr); }
};

struct IWebTokenRequestFactory :
	Windows::IInspectable,
	impl_IWebTokenRequestFactory<IWebTokenRequestFactory>
{
	IWebTokenRequestFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebTokenRequestFactory>(m_ptr); }
};

struct IWebAuthenticationCoreManagerStatics :
	Windows::IInspectable,
	impl_IWebAuthenticationCoreManagerStatics<IWebAuthenticationCoreManagerStatics>
{
	IWebAuthenticationCoreManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAuthenticationCoreManagerStatics>(m_ptr); }
};

struct IWebAuthenticationCoreManagerStatics2 :
	Windows::IInspectable,
	impl_IWebAuthenticationCoreManagerStatics2<IWebAuthenticationCoreManagerStatics2>,
	requires<IWebAuthenticationCoreManagerStatics2, Windows::Security::Authentication::Web::Core::IWebAuthenticationCoreManagerStatics>
{
	IWebAuthenticationCoreManagerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAuthenticationCoreManagerStatics2>(m_ptr); }
	using impl_IWebAuthenticationCoreManagerStatics::FindAccountProviderAsync;
	using impl_IWebAuthenticationCoreManagerStatics2::FindAccountProviderAsync;
};

struct IWebProviderError :
	Windows::IInspectable,
	impl_IWebProviderError<IWebProviderError>
{
	IWebProviderError(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebProviderError>(m_ptr); }
};

struct IWebProviderErrorFactory :
	Windows::IInspectable,
	impl_IWebProviderErrorFactory<IWebProviderErrorFactory>
{
	IWebProviderErrorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebProviderErrorFactory>(m_ptr); }
};

struct IWebTokenRequestResult :
	Windows::IInspectable,
	impl_IWebTokenRequestResult<IWebTokenRequestResult>
{
	IWebTokenRequestResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebTokenRequestResult>(m_ptr); }
};

struct IWebTokenResponse :
	Windows::IInspectable,
	impl_IWebTokenResponse<IWebTokenResponse>
{
	IWebTokenResponse(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebTokenResponse>(m_ptr); }
};

struct IWebTokenResponseFactory :
	Windows::IInspectable,
	impl_IWebTokenResponseFactory<IWebTokenResponseFactory>
{
	IWebTokenResponseFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebTokenResponseFactory>(m_ptr); }
};

}}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Provider {

struct IWebAccountProviderOperation :
	Windows::IInspectable,
	impl_IWebAccountProviderOperation<IWebAccountProviderOperation>
{
	IWebAccountProviderOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountProviderOperation>(m_ptr); }
};

struct IWebProviderTokenRequest :
	Windows::IInspectable,
	impl_IWebProviderTokenRequest<IWebProviderTokenRequest>
{
	IWebProviderTokenRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebProviderTokenRequest>(m_ptr); }
};

struct IWebProviderTokenResponse :
	Windows::IInspectable,
	impl_IWebProviderTokenResponse<IWebProviderTokenResponse>
{
	IWebProviderTokenResponse(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebProviderTokenResponse>(m_ptr); }
};

struct IWebProviderTokenResponseFactory :
	Windows::IInspectable,
	impl_IWebProviderTokenResponseFactory<IWebProviderTokenResponseFactory>
{
	IWebProviderTokenResponseFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebProviderTokenResponseFactory>(m_ptr); }
};

struct IWebAccountClientView :
	Windows::IInspectable,
	impl_IWebAccountClientView<IWebAccountClientView>
{
	IWebAccountClientView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountClientView>(m_ptr); }
};

struct IWebAccountClientViewFactory :
	Windows::IInspectable,
	impl_IWebAccountClientViewFactory<IWebAccountClientViewFactory>
{
	IWebAccountClientViewFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountClientViewFactory>(m_ptr); }
};

struct IWebAccountManagerStatics :
	Windows::IInspectable,
	impl_IWebAccountManagerStatics<IWebAccountManagerStatics>
{
	IWebAccountManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountManagerStatics>(m_ptr); }
};

struct IWebAccountManagerStatics2 :
	Windows::IInspectable,
	impl_IWebAccountManagerStatics2<IWebAccountManagerStatics2>
{
	IWebAccountManagerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountManagerStatics2>(m_ptr); }
};

struct IWebAccountScopeManagerStatics :
	Windows::IInspectable,
	impl_IWebAccountScopeManagerStatics<IWebAccountScopeManagerStatics>
{
	IWebAccountScopeManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountScopeManagerStatics>(m_ptr); }
};

struct IWebAccountProviderBaseReportOperation :
	Windows::IInspectable,
	impl_IWebAccountProviderBaseReportOperation<IWebAccountProviderBaseReportOperation>
{
	IWebAccountProviderBaseReportOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountProviderBaseReportOperation>(m_ptr); }
};

struct IWebAccountProviderUIReportOperation :
	Windows::IInspectable,
	impl_IWebAccountProviderUIReportOperation<IWebAccountProviderUIReportOperation>,
	requires<IWebAccountProviderUIReportOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation>
{
	IWebAccountProviderUIReportOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountProviderUIReportOperation>(m_ptr); }
};

struct IWebAccountProviderSilentReportOperation :
	Windows::IInspectable,
	impl_IWebAccountProviderSilentReportOperation<IWebAccountProviderSilentReportOperation>,
	requires<IWebAccountProviderSilentReportOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation>
{
	IWebAccountProviderSilentReportOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountProviderSilentReportOperation>(m_ptr); }
};

struct IWebAccountProviderTokenOperation :
	Windows::IInspectable,
	impl_IWebAccountProviderTokenOperation<IWebAccountProviderTokenOperation>,
	requires<IWebAccountProviderTokenOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation>
{
	IWebAccountProviderTokenOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountProviderTokenOperation>(m_ptr); }
};

struct IWebAccountProviderAddAccountOperation :
	Windows::IInspectable,
	impl_IWebAccountProviderAddAccountOperation<IWebAccountProviderAddAccountOperation>,
	requires<IWebAccountProviderAddAccountOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation>
{
	IWebAccountProviderAddAccountOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountProviderAddAccountOperation>(m_ptr); }
};

struct IWebAccountProviderManageAccountOperation :
	Windows::IInspectable,
	impl_IWebAccountProviderManageAccountOperation<IWebAccountProviderManageAccountOperation>,
	requires<IWebAccountProviderManageAccountOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation>
{
	IWebAccountProviderManageAccountOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountProviderManageAccountOperation>(m_ptr); }
};

struct IWebAccountProviderDeleteAccountOperation :
	Windows::IInspectable,
	impl_IWebAccountProviderDeleteAccountOperation<IWebAccountProviderDeleteAccountOperation>,
	requires<IWebAccountProviderDeleteAccountOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation>
{
	IWebAccountProviderDeleteAccountOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountProviderDeleteAccountOperation>(m_ptr); }
};

struct IWebAccountProviderSignOutAccountOperation :
	Windows::IInspectable,
	impl_IWebAccountProviderSignOutAccountOperation<IWebAccountProviderSignOutAccountOperation>,
	requires<IWebAccountProviderSignOutAccountOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation>
{
	IWebAccountProviderSignOutAccountOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountProviderSignOutAccountOperation>(m_ptr); }
};

struct IWebAccountProviderRetrieveCookiesOperation :
	Windows::IInspectable,
	impl_IWebAccountProviderRetrieveCookiesOperation<IWebAccountProviderRetrieveCookiesOperation>,
	requires<IWebAccountProviderRetrieveCookiesOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation>
{
	IWebAccountProviderRetrieveCookiesOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountProviderRetrieveCookiesOperation>(m_ptr); }
};

struct IWebAccountProviderTokenObjects :
	Windows::IInspectable,
	impl_IWebAccountProviderTokenObjects<IWebAccountProviderTokenObjects>
{
	IWebAccountProviderTokenObjects(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountProviderTokenObjects>(m_ptr); }
};

}}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Credentials {

struct IWebAccountFactory :
	Windows::IInspectable,
	impl_IWebAccountFactory<IWebAccountFactory>
{
	IWebAccountFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountFactory>(m_ptr); }
};

struct IWebAccount :
	Windows::IInspectable,
	impl_IWebAccount<IWebAccount>
{
	IWebAccount(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccount>(m_ptr); }
};

struct IWebAccount2 :
	Windows::IInspectable,
	impl_IWebAccount2<IWebAccount2>,
	requires<IWebAccount2, Windows::Security::Credentials::IWebAccount>
{
	IWebAccount2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccount2>(m_ptr); }
};

struct IWebAccountProviderFactory :
	Windows::IInspectable,
	impl_IWebAccountProviderFactory<IWebAccountProviderFactory>
{
	IWebAccountProviderFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountProviderFactory>(m_ptr); }
};

struct IWebAccountProvider :
	Windows::IInspectable,
	impl_IWebAccountProvider<IWebAccountProvider>
{
	IWebAccountProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountProvider>(m_ptr); }
};

struct IWebAccountProvider2 :
	Windows::IInspectable,
	impl_IWebAccountProvider2<IWebAccountProvider2>,
	requires<IWebAccountProvider2, Windows::Security::Credentials::IWebAccountProvider>
{
	IWebAccountProvider2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountProvider2>(m_ptr); }
};

struct IWebAccountProvider3 :
	Windows::IInspectable,
	impl_IWebAccountProvider3<IWebAccountProvider3>,
	requires<IWebAccountProvider3, Windows::Security::Credentials::IWebAccountProvider2, Windows::Security::Credentials::IWebAccountProvider>
{
	IWebAccountProvider3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebAccountProvider3>(m_ptr); }
};

struct IKeyCredentialManagerStatics :
	Windows::IInspectable,
	impl_IKeyCredentialManagerStatics<IKeyCredentialManagerStatics>
{
	IKeyCredentialManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyCredentialManagerStatics>(m_ptr); }
};

struct IKeyCredential :
	Windows::IInspectable,
	impl_IKeyCredential<IKeyCredential>
{
	IKeyCredential(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyCredential>(m_ptr); }
};

struct IKeyCredentialRetrievalResult :
	Windows::IInspectable,
	impl_IKeyCredentialRetrievalResult<IKeyCredentialRetrievalResult>
{
	IKeyCredentialRetrievalResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyCredentialRetrievalResult>(m_ptr); }
};

struct IKeyCredentialOperationResult :
	Windows::IInspectable,
	impl_IKeyCredentialOperationResult<IKeyCredentialOperationResult>
{
	IKeyCredentialOperationResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyCredentialOperationResult>(m_ptr); }
};

struct IKeyCredentialAttestationResult :
	Windows::IInspectable,
	impl_IKeyCredentialAttestationResult<IKeyCredentialAttestationResult>
{
	IKeyCredentialAttestationResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyCredentialAttestationResult>(m_ptr); }
};

struct IPasswordCredential :
	Windows::IInspectable,
	impl_IPasswordCredential<IPasswordCredential>
{
	IPasswordCredential(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPasswordCredential>(m_ptr); }
};

struct ICredentialFactory :
	Windows::IInspectable,
	impl_ICredentialFactory<ICredentialFactory>
{
	ICredentialFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICredentialFactory>(m_ptr); }
};

struct IPasswordVault :
	Windows::IInspectable,
	impl_IPasswordVault<IPasswordVault>
{
	IPasswordVault(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPasswordVault>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

struct ICertificateRequestProperties :
	Windows::IInspectable,
	impl_ICertificateRequestProperties<ICertificateRequestProperties>
{
	ICertificateRequestProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICertificateRequestProperties>(m_ptr); }
};

struct ICertificateRequestProperties2 :
	Windows::IInspectable,
	impl_ICertificateRequestProperties2<ICertificateRequestProperties2>
{
	ICertificateRequestProperties2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICertificateRequestProperties2>(m_ptr); }
};

struct ICertificateRequestProperties3 :
	Windows::IInspectable,
	impl_ICertificateRequestProperties3<ICertificateRequestProperties3>
{
	ICertificateRequestProperties3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICertificateRequestProperties3>(m_ptr); }
};

struct ICertificateEnrollmentManagerStatics :
	Windows::IInspectable,
	impl_ICertificateEnrollmentManagerStatics<ICertificateEnrollmentManagerStatics>
{
	ICertificateEnrollmentManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICertificateEnrollmentManagerStatics>(m_ptr); }
};

struct ICertificateEnrollmentManagerStatics2 :
	Windows::IInspectable,
	impl_ICertificateEnrollmentManagerStatics2<ICertificateEnrollmentManagerStatics2>
{
	ICertificateEnrollmentManagerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICertificateEnrollmentManagerStatics2>(m_ptr); }
};

struct ICertificateEnrollmentManagerStatics3 :
	Windows::IInspectable,
	impl_ICertificateEnrollmentManagerStatics3<ICertificateEnrollmentManagerStatics3>
{
	ICertificateEnrollmentManagerStatics3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICertificateEnrollmentManagerStatics3>(m_ptr); }
};

struct IKeyAttestationHelperStatics :
	Windows::IInspectable,
	impl_IKeyAttestationHelperStatics<IKeyAttestationHelperStatics>
{
	IKeyAttestationHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyAttestationHelperStatics>(m_ptr); }
};

struct IKeyAttestationHelperStatics2 :
	Windows::IInspectable,
	impl_IKeyAttestationHelperStatics2<IKeyAttestationHelperStatics2>
{
	IKeyAttestationHelperStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyAttestationHelperStatics2>(m_ptr); }
};

struct ICertificateStoresStatics :
	Windows::IInspectable,
	impl_ICertificateStoresStatics<ICertificateStoresStatics>
{
	ICertificateStoresStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICertificateStoresStatics>(m_ptr); }
};

struct IUserCertificateEnrollmentManager :
	Windows::IInspectable,
	impl_IUserCertificateEnrollmentManager<IUserCertificateEnrollmentManager>
{
	IUserCertificateEnrollmentManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUserCertificateEnrollmentManager>(m_ptr); }
};

struct IUserCertificateEnrollmentManager2 :
	Windows::IInspectable,
	impl_IUserCertificateEnrollmentManager2<IUserCertificateEnrollmentManager2>
{
	IUserCertificateEnrollmentManager2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUserCertificateEnrollmentManager2>(m_ptr); }
};

struct ICertificateStore :
	Windows::IInspectable,
	impl_ICertificateStore<ICertificateStore>
{
	ICertificateStore(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICertificateStore>(m_ptr); }
};

struct ICertificateStore2 :
	Windows::IInspectable,
	impl_ICertificateStore2<ICertificateStore2>
{
	ICertificateStore2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICertificateStore2>(m_ptr); }
};

struct IKeyAlgorithmNamesStatics :
	Windows::IInspectable,
	impl_IKeyAlgorithmNamesStatics<IKeyAlgorithmNamesStatics>
{
	IKeyAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyAlgorithmNamesStatics>(m_ptr); }
};

struct IKeyAlgorithmNamesStatics2 :
	Windows::IInspectable,
	impl_IKeyAlgorithmNamesStatics2<IKeyAlgorithmNamesStatics2>
{
	IKeyAlgorithmNamesStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyAlgorithmNamesStatics2>(m_ptr); }
};

struct IKeyStorageProviderNamesStatics :
	Windows::IInspectable,
	impl_IKeyStorageProviderNamesStatics<IKeyStorageProviderNamesStatics>
{
	IKeyStorageProviderNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyStorageProviderNamesStatics>(m_ptr); }
};

struct IKeyStorageProviderNamesStatics2 :
	Windows::IInspectable,
	impl_IKeyStorageProviderNamesStatics2<IKeyStorageProviderNamesStatics2>
{
	IKeyStorageProviderNamesStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyStorageProviderNamesStatics2>(m_ptr); }
};

struct IChainBuildingParameters :
	Windows::IInspectable,
	impl_IChainBuildingParameters<IChainBuildingParameters>
{
	IChainBuildingParameters(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IChainBuildingParameters>(m_ptr); }
};

struct IChainValidationParameters :
	Windows::IInspectable,
	impl_IChainValidationParameters<IChainValidationParameters>
{
	IChainValidationParameters(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IChainValidationParameters>(m_ptr); }
};

struct ICertificateQuery :
	Windows::IInspectable,
	impl_ICertificateQuery<ICertificateQuery>
{
	ICertificateQuery(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICertificateQuery>(m_ptr); }
};

struct ICertificateQuery2 :
	Windows::IInspectable,
	impl_ICertificateQuery2<ICertificateQuery2>
{
	ICertificateQuery2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICertificateQuery2>(m_ptr); }
};

struct ICertificateChain :
	Windows::IInspectable,
	impl_ICertificateChain<ICertificateChain>
{
	ICertificateChain(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICertificateChain>(m_ptr); }
};

struct ICertificate :
	Windows::IInspectable,
	impl_ICertificate<ICertificate>
{
	ICertificate(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICertificate>(m_ptr); }
};

struct ICertificate2 :
	Windows::IInspectable,
	impl_ICertificate2<ICertificate2>
{
	ICertificate2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICertificate2>(m_ptr); }
};

struct ICertificateFactory :
	Windows::IInspectable,
	impl_ICertificateFactory<ICertificateFactory>
{
	ICertificateFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICertificateFactory>(m_ptr); }
};

struct ICmsTimestampInfo :
	Windows::IInspectable,
	impl_ICmsTimestampInfo<ICmsTimestampInfo>
{
	ICmsTimestampInfo(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICmsTimestampInfo>(m_ptr); }
};

struct ICmsSignerInfo :
	Windows::IInspectable,
	impl_ICmsSignerInfo<ICmsSignerInfo>
{
	ICmsSignerInfo(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICmsSignerInfo>(m_ptr); }
};

struct ISubjectAlternativeNameInfo :
	Windows::IInspectable,
	impl_ISubjectAlternativeNameInfo<ISubjectAlternativeNameInfo>
{
	ISubjectAlternativeNameInfo(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISubjectAlternativeNameInfo>(m_ptr); }
};

struct IPfxImportParameters :
	Windows::IInspectable,
	impl_IPfxImportParameters<IPfxImportParameters>
{
	IPfxImportParameters(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPfxImportParameters>(m_ptr); }
};

struct ICertificateKeyUsages :
	Windows::IInspectable,
	impl_ICertificateKeyUsages<ICertificateKeyUsages>
{
	ICertificateKeyUsages(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICertificateKeyUsages>(m_ptr); }
};

struct ICmsAttachedSignature :
	Windows::IInspectable,
	impl_ICmsAttachedSignature<ICmsAttachedSignature>
{
	ICmsAttachedSignature(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICmsAttachedSignature>(m_ptr); }
};

struct ICmsAttachedSignatureFactory :
	Windows::IInspectable,
	impl_ICmsAttachedSignatureFactory<ICmsAttachedSignatureFactory>
{
	ICmsAttachedSignatureFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICmsAttachedSignatureFactory>(m_ptr); }
};

struct ICmsAttachedSignatureStatics :
	Windows::IInspectable,
	impl_ICmsAttachedSignatureStatics<ICmsAttachedSignatureStatics>
{
	ICmsAttachedSignatureStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICmsAttachedSignatureStatics>(m_ptr); }
};

struct ICmsDetachedSignature :
	Windows::IInspectable,
	impl_ICmsDetachedSignature<ICmsDetachedSignature>
{
	ICmsDetachedSignature(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICmsDetachedSignature>(m_ptr); }
};

struct ICmsDetachedSignatureFactory :
	Windows::IInspectable,
	impl_ICmsDetachedSignatureFactory<ICmsDetachedSignatureFactory>
{
	ICmsDetachedSignatureFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICmsDetachedSignatureFactory>(m_ptr); }
};

struct ICmsDetachedSignatureStatics :
	Windows::IInspectable,
	impl_ICmsDetachedSignatureStatics<ICmsDetachedSignatureStatics>
{
	ICmsDetachedSignatureStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICmsDetachedSignatureStatics>(m_ptr); }
};

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

struct IKeyDerivationParameters :
	Windows::IInspectable,
	impl_IKeyDerivationParameters<IKeyDerivationParameters>
{
	IKeyDerivationParameters(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyDerivationParameters>(m_ptr); }
};

struct IKeyDerivationParameters2 :
	Windows::IInspectable,
	impl_IKeyDerivationParameters2<IKeyDerivationParameters2>
{
	IKeyDerivationParameters2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyDerivationParameters2>(m_ptr); }
};

struct IKeyDerivationParametersStatics :
	Windows::IInspectable,
	impl_IKeyDerivationParametersStatics<IKeyDerivationParametersStatics>
{
	IKeyDerivationParametersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyDerivationParametersStatics>(m_ptr); }
};

struct IKeyDerivationParametersStatics2 :
	Windows::IInspectable,
	impl_IKeyDerivationParametersStatics2<IKeyDerivationParametersStatics2>
{
	IKeyDerivationParametersStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyDerivationParametersStatics2>(m_ptr); }
};

struct ICryptographicKey :
	Windows::IInspectable,
	impl_ICryptographicKey<ICryptographicKey>
{
	ICryptographicKey(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICryptographicKey>(m_ptr); }
};

struct IHashComputation :
	Windows::IInspectable,
	impl_IHashComputation<IHashComputation>
{
	IHashComputation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHashComputation>(m_ptr); }
};

struct IHashAlgorithmProvider :
	Windows::IInspectable,
	impl_IHashAlgorithmProvider<IHashAlgorithmProvider>
{
	IHashAlgorithmProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHashAlgorithmProvider>(m_ptr); }
};

struct IMacAlgorithmProvider :
	Windows::IInspectable,
	impl_IMacAlgorithmProvider<IMacAlgorithmProvider>
{
	IMacAlgorithmProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMacAlgorithmProvider>(m_ptr); }
};

struct IMacAlgorithmProvider2 :
	Windows::IInspectable,
	impl_IMacAlgorithmProvider2<IMacAlgorithmProvider2>
{
	IMacAlgorithmProvider2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMacAlgorithmProvider2>(m_ptr); }
};

struct IKeyDerivationAlgorithmProvider :
	Windows::IInspectable,
	impl_IKeyDerivationAlgorithmProvider<IKeyDerivationAlgorithmProvider>
{
	IKeyDerivationAlgorithmProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyDerivationAlgorithmProvider>(m_ptr); }
};

struct ISymmetricKeyAlgorithmProvider :
	Windows::IInspectable,
	impl_ISymmetricKeyAlgorithmProvider<ISymmetricKeyAlgorithmProvider>
{
	ISymmetricKeyAlgorithmProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISymmetricKeyAlgorithmProvider>(m_ptr); }
};

struct IAsymmetricKeyAlgorithmProvider :
	Windows::IInspectable,
	impl_IAsymmetricKeyAlgorithmProvider<IAsymmetricKeyAlgorithmProvider>
{
	IAsymmetricKeyAlgorithmProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAsymmetricKeyAlgorithmProvider>(m_ptr); }
};

struct IAsymmetricKeyAlgorithmProvider2 :
	Windows::IInspectable,
	impl_IAsymmetricKeyAlgorithmProvider2<IAsymmetricKeyAlgorithmProvider2>
{
	IAsymmetricKeyAlgorithmProvider2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAsymmetricKeyAlgorithmProvider2>(m_ptr); }
};

struct IPersistedKeyProviderStatics :
	Windows::IInspectable,
	impl_IPersistedKeyProviderStatics<IPersistedKeyProviderStatics>
{
	IPersistedKeyProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPersistedKeyProviderStatics>(m_ptr); }
};

struct IEncryptedAndAuthenticatedData :
	Windows::IInspectable,
	impl_IEncryptedAndAuthenticatedData<IEncryptedAndAuthenticatedData>
{
	IEncryptedAndAuthenticatedData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IEncryptedAndAuthenticatedData>(m_ptr); }
};

struct ICryptographicEngineStatics :
	Windows::IInspectable,
	impl_ICryptographicEngineStatics<ICryptographicEngineStatics>
{
	ICryptographicEngineStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICryptographicEngineStatics>(m_ptr); }
};

struct ICryptographicEngineStatics2 :
	Windows::IInspectable,
	impl_ICryptographicEngineStatics2<ICryptographicEngineStatics2>
{
	ICryptographicEngineStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICryptographicEngineStatics2>(m_ptr); }
};

struct IHashAlgorithmProviderStatics :
	Windows::IInspectable,
	impl_IHashAlgorithmProviderStatics<IHashAlgorithmProviderStatics>
{
	IHashAlgorithmProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHashAlgorithmProviderStatics>(m_ptr); }
};

struct IMacAlgorithmProviderStatics :
	Windows::IInspectable,
	impl_IMacAlgorithmProviderStatics<IMacAlgorithmProviderStatics>
{
	IMacAlgorithmProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMacAlgorithmProviderStatics>(m_ptr); }
};

struct IKeyDerivationAlgorithmProviderStatics :
	Windows::IInspectable,
	impl_IKeyDerivationAlgorithmProviderStatics<IKeyDerivationAlgorithmProviderStatics>
{
	IKeyDerivationAlgorithmProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyDerivationAlgorithmProviderStatics>(m_ptr); }
};

struct ISymmetricKeyAlgorithmProviderStatics :
	Windows::IInspectable,
	impl_ISymmetricKeyAlgorithmProviderStatics<ISymmetricKeyAlgorithmProviderStatics>
{
	ISymmetricKeyAlgorithmProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISymmetricKeyAlgorithmProviderStatics>(m_ptr); }
};

struct IAsymmetricKeyAlgorithmProviderStatics :
	Windows::IInspectable,
	impl_IAsymmetricKeyAlgorithmProviderStatics<IAsymmetricKeyAlgorithmProviderStatics>
{
	IAsymmetricKeyAlgorithmProviderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAsymmetricKeyAlgorithmProviderStatics>(m_ptr); }
};

struct IHashAlgorithmNamesStatics :
	Windows::IInspectable,
	impl_IHashAlgorithmNamesStatics<IHashAlgorithmNamesStatics>
{
	IHashAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHashAlgorithmNamesStatics>(m_ptr); }
};

struct IMacAlgorithmNamesStatics :
	Windows::IInspectable,
	impl_IMacAlgorithmNamesStatics<IMacAlgorithmNamesStatics>
{
	IMacAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMacAlgorithmNamesStatics>(m_ptr); }
};

struct ISymmetricAlgorithmNamesStatics :
	Windows::IInspectable,
	impl_ISymmetricAlgorithmNamesStatics<ISymmetricAlgorithmNamesStatics>
{
	ISymmetricAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISymmetricAlgorithmNamesStatics>(m_ptr); }
};

struct IAsymmetricAlgorithmNamesStatics :
	Windows::IInspectable,
	impl_IAsymmetricAlgorithmNamesStatics<IAsymmetricAlgorithmNamesStatics>
{
	IAsymmetricAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAsymmetricAlgorithmNamesStatics>(m_ptr); }
};

struct IAsymmetricAlgorithmNamesStatics2 :
	Windows::IInspectable,
	impl_IAsymmetricAlgorithmNamesStatics2<IAsymmetricAlgorithmNamesStatics2>
{
	IAsymmetricAlgorithmNamesStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAsymmetricAlgorithmNamesStatics2>(m_ptr); }
};

struct IEccCurveNamesStatics :
	Windows::IInspectable,
	impl_IEccCurveNamesStatics<IEccCurveNamesStatics>
{
	IEccCurveNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IEccCurveNamesStatics>(m_ptr); }
};

struct IKeyDerivationAlgorithmNamesStatics :
	Windows::IInspectable,
	impl_IKeyDerivationAlgorithmNamesStatics<IKeyDerivationAlgorithmNamesStatics>
{
	IKeyDerivationAlgorithmNamesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyDerivationAlgorithmNamesStatics>(m_ptr); }
};

struct IKeyDerivationAlgorithmNamesStatics2 :
	Windows::IInspectable,
	impl_IKeyDerivationAlgorithmNamesStatics2<IKeyDerivationAlgorithmNamesStatics2>
{
	IKeyDerivationAlgorithmNamesStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyDerivationAlgorithmNamesStatics2>(m_ptr); }
};

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace EnterpriseData {

struct IFileRevocationManagerStatics :
	Windows::IInspectable,
	impl_IFileRevocationManagerStatics<IFileRevocationManagerStatics>
{
	IFileRevocationManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileRevocationManagerStatics>(m_ptr); }
};

struct IFileProtectionManagerStatics :
	Windows::IInspectable,
	impl_IFileProtectionManagerStatics<IFileProtectionManagerStatics>
{
	IFileProtectionManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileProtectionManagerStatics>(m_ptr); }
};

struct IFileProtectionManagerStatics2 :
	Windows::IInspectable,
	impl_IFileProtectionManagerStatics2<IFileProtectionManagerStatics2>
{
	IFileProtectionManagerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileProtectionManagerStatics2>(m_ptr); }
};

struct IProtectedFileCreateResult :
	Windows::IInspectable,
	impl_IProtectedFileCreateResult<IProtectedFileCreateResult>
{
	IProtectedFileCreateResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProtectedFileCreateResult>(m_ptr); }
};

struct IFileProtectionInfo :
	Windows::IInspectable,
	impl_IFileProtectionInfo<IFileProtectionInfo>
{
	IFileProtectionInfo(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileProtectionInfo>(m_ptr); }
};

struct IProtectedContainerExportResult :
	Windows::IInspectable,
	impl_IProtectedContainerExportResult<IProtectedContainerExportResult>
{
	IProtectedContainerExportResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProtectedContainerExportResult>(m_ptr); }
};

struct IProtectedContainerImportResult :
	Windows::IInspectable,
	impl_IProtectedContainerImportResult<IProtectedContainerImportResult>
{
	IProtectedContainerImportResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProtectedContainerImportResult>(m_ptr); }
};

struct IDataProtectionManagerStatics :
	Windows::IInspectable,
	impl_IDataProtectionManagerStatics<IDataProtectionManagerStatics>
{
	IDataProtectionManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataProtectionManagerStatics>(m_ptr); }
};

struct IDataProtectionInfo :
	Windows::IInspectable,
	impl_IDataProtectionInfo<IDataProtectionInfo>
{
	IDataProtectionInfo(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataProtectionInfo>(m_ptr); }
};

struct IBufferProtectUnprotectResult :
	Windows::IInspectable,
	impl_IBufferProtectUnprotectResult<IBufferProtectUnprotectResult>
{
	IBufferProtectUnprotectResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBufferProtectUnprotectResult>(m_ptr); }
};

struct IProtectionPolicyManager :
	Windows::IInspectable,
	impl_IProtectionPolicyManager<IProtectionPolicyManager>
{
	IProtectionPolicyManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProtectionPolicyManager>(m_ptr); }
};

struct IProtectionPolicyManagerStatics :
	Windows::IInspectable,
	impl_IProtectionPolicyManagerStatics<IProtectionPolicyManagerStatics>
{
	IProtectionPolicyManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProtectionPolicyManagerStatics>(m_ptr); }
};

struct IProtectionPolicyManagerStatics2 :
	Windows::IInspectable,
	impl_IProtectionPolicyManagerStatics2<IProtectionPolicyManagerStatics2>
{
	IProtectionPolicyManagerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProtectionPolicyManagerStatics2>(m_ptr); }
};

struct IThreadNetworkContext :
	Windows::IInspectable,
	impl_IThreadNetworkContext<IThreadNetworkContext>
{
	IThreadNetworkContext(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IThreadNetworkContext>(m_ptr); }
};

struct IProtectedAccessSuspendingEventArgs :
	Windows::IInspectable,
	impl_IProtectedAccessSuspendingEventArgs<IProtectedAccessSuspendingEventArgs>
{
	IProtectedAccessSuspendingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProtectedAccessSuspendingEventArgs>(m_ptr); }
};

struct IProtectedAccessResumedEventArgs :
	Windows::IInspectable,
	impl_IProtectedAccessResumedEventArgs<IProtectedAccessResumedEventArgs>
{
	IProtectedAccessResumedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProtectedAccessResumedEventArgs>(m_ptr); }
};

struct IProtectedContentRevokedEventArgs :
	Windows::IInspectable,
	impl_IProtectedContentRevokedEventArgs<IProtectedContentRevokedEventArgs>
{
	IProtectedContentRevokedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProtectedContentRevokedEventArgs>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Storage {

struct IStreamedFileDataRequestedHandler :
	Windows::IUnknown,
	impl_IStreamedFileDataRequestedHandler<IStreamedFileDataRequestedHandler>
{
	IStreamedFileDataRequestedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamedFileDataRequestedHandler>(m_ptr); }
};

struct IApplicationDataSetVersionHandler :
	Windows::IUnknown,
	impl_IApplicationDataSetVersionHandler<IApplicationDataSetVersionHandler>
{
	IApplicationDataSetVersionHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationDataSetVersionHandler>(m_ptr); }
};

struct IStorageLibraryStatics :
	Windows::IInspectable,
	impl_IStorageLibraryStatics<IStorageLibraryStatics>
{
	IStorageLibraryStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageLibraryStatics>(m_ptr); }
};

struct IStorageLibraryStatics2 :
	Windows::IInspectable,
	impl_IStorageLibraryStatics2<IStorageLibraryStatics2>
{
	IStorageLibraryStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageLibraryStatics2>(m_ptr); }
};

struct IStorageLibrary :
	Windows::IInspectable,
	impl_IStorageLibrary<IStorageLibrary>
{
	IStorageLibrary(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageLibrary>(m_ptr); }
};

struct IKnownFoldersStatics :
	Windows::IInspectable,
	impl_IKnownFoldersStatics<IKnownFoldersStatics>
{
	IKnownFoldersStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKnownFoldersStatics>(m_ptr); }
};

struct IKnownFoldersStatics2 :
	Windows::IInspectable,
	impl_IKnownFoldersStatics2<IKnownFoldersStatics2>
{
	IKnownFoldersStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKnownFoldersStatics2>(m_ptr); }
};

struct IKnownFoldersStatics3 :
	Windows::IInspectable,
	impl_IKnownFoldersStatics3<IKnownFoldersStatics3>
{
	IKnownFoldersStatics3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKnownFoldersStatics3>(m_ptr); }
};

struct IKnownFoldersPlaylistsStatics :
	Windows::IInspectable,
	impl_IKnownFoldersPlaylistsStatics<IKnownFoldersPlaylistsStatics>
{
	IKnownFoldersPlaylistsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKnownFoldersPlaylistsStatics>(m_ptr); }
};

struct IKnownFoldersCameraRollStatics :
	Windows::IInspectable,
	impl_IKnownFoldersCameraRollStatics<IKnownFoldersCameraRollStatics>
{
	IKnownFoldersCameraRollStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKnownFoldersCameraRollStatics>(m_ptr); }
};

struct IKnownFoldersSavedPicturesStatics :
	Windows::IInspectable,
	impl_IKnownFoldersSavedPicturesStatics<IKnownFoldersSavedPicturesStatics>
{
	IKnownFoldersSavedPicturesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKnownFoldersSavedPicturesStatics>(m_ptr); }
};

struct IDownloadsFolderStatics :
	Windows::IInspectable,
	impl_IDownloadsFolderStatics<IDownloadsFolderStatics>
{
	IDownloadsFolderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDownloadsFolderStatics>(m_ptr); }
};

struct IDownloadsFolderStatics2 :
	Windows::IInspectable,
	impl_IDownloadsFolderStatics2<IDownloadsFolderStatics2>
{
	IDownloadsFolderStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDownloadsFolderStatics2>(m_ptr); }
};

struct IStreamedFileDataRequest :
	Windows::IInspectable,
	impl_IStreamedFileDataRequest<IStreamedFileDataRequest>
{
	IStreamedFileDataRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStreamedFileDataRequest>(m_ptr); }
};

struct IStorageFileStatics :
	Windows::IInspectable,
	impl_IStorageFileStatics<IStorageFileStatics>
{
	IStorageFileStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageFileStatics>(m_ptr); }
};

struct IStorageItem :
	Windows::IInspectable,
	impl_IStorageItem<IStorageItem>
{
	IStorageItem(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageItem>(m_ptr); }
};

struct IStorageFolder :
	Windows::IInspectable,
	impl_IStorageFolder<IStorageFolder>,
	requires<IStorageFolder, Windows::Storage::IStorageItem>
{
	IStorageFolder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageFolder>(m_ptr); }
};

struct IStorageFile :
	Windows::IInspectable,
	impl_IStorageFile<IStorageFile>,
	requires<IStorageFile, Windows::Storage::IStorageItem, Windows::Storage::Streams::IRandomAccessStreamReference, Windows::Storage::Streams::IInputStreamReference>
{
	IStorageFile(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageFile>(m_ptr); }
};

struct IStorageFolderStatics :
	Windows::IInspectable,
	impl_IStorageFolderStatics<IStorageFolderStatics>
{
	IStorageFolderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageFolderStatics>(m_ptr); }
};

struct IStorageItem2 :
	Windows::IInspectable,
	impl_IStorageItem2<IStorageItem2>,
	requires<IStorageItem2, Windows::Storage::IStorageItem>
{
	IStorageItem2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageItem2>(m_ptr); }
};

struct IStorageItemProperties :
	Windows::IInspectable,
	impl_IStorageItemProperties<IStorageItemProperties>
{
	IStorageItemProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageItemProperties>(m_ptr); }
};

struct IStorageItemProperties2 :
	Windows::IInspectable,
	impl_IStorageItemProperties2<IStorageItemProperties2>,
	requires<IStorageItemProperties2, Windows::Storage::IStorageItemProperties>
{
	IStorageItemProperties2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageItemProperties2>(m_ptr); }
};

struct IStorageItemPropertiesWithProvider :
	Windows::IInspectable,
	impl_IStorageItemPropertiesWithProvider<IStorageItemPropertiesWithProvider>,
	requires<IStorageItemPropertiesWithProvider, Windows::Storage::IStorageItemProperties>
{
	IStorageItemPropertiesWithProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageItemPropertiesWithProvider>(m_ptr); }
};

struct IStorageFilePropertiesWithAvailability :
	Windows::IInspectable,
	impl_IStorageFilePropertiesWithAvailability<IStorageFilePropertiesWithAvailability>
{
	IStorageFilePropertiesWithAvailability(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageFilePropertiesWithAvailability>(m_ptr); }
};

struct IStorageProvider :
	Windows::IInspectable,
	impl_IStorageProvider<IStorageProvider>
{
	IStorageProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageProvider>(m_ptr); }
};

struct IStorageFolder2 :
	Windows::IInspectable,
	impl_IStorageFolder2<IStorageFolder2>
{
	IStorageFolder2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageFolder2>(m_ptr); }
};

struct IStorageFile2 :
	Windows::IInspectable,
	impl_IStorageFile2<IStorageFile2>
{
	IStorageFile2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageFile2>(m_ptr); }
};

struct IFileIOStatics :
	Windows::IInspectable,
	impl_IFileIOStatics<IFileIOStatics>
{
	IFileIOStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileIOStatics>(m_ptr); }
};

struct IPathIOStatics :
	Windows::IInspectable,
	impl_IPathIOStatics<IPathIOStatics>
{
	IPathIOStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPathIOStatics>(m_ptr); }
};

struct ICachedFileManagerStatics :
	Windows::IInspectable,
	impl_ICachedFileManagerStatics<ICachedFileManagerStatics>
{
	ICachedFileManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICachedFileManagerStatics>(m_ptr); }
};

struct ISystemAudioProperties :
	Windows::IInspectable,
	impl_ISystemAudioProperties<ISystemAudioProperties>
{
	ISystemAudioProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISystemAudioProperties>(m_ptr); }
};

struct ISystemGPSProperties :
	Windows::IInspectable,
	impl_ISystemGPSProperties<ISystemGPSProperties>
{
	ISystemGPSProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISystemGPSProperties>(m_ptr); }
};

struct ISystemImageProperties :
	Windows::IInspectable,
	impl_ISystemImageProperties<ISystemImageProperties>
{
	ISystemImageProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISystemImageProperties>(m_ptr); }
};

struct ISystemMediaProperties :
	Windows::IInspectable,
	impl_ISystemMediaProperties<ISystemMediaProperties>
{
	ISystemMediaProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISystemMediaProperties>(m_ptr); }
};

struct ISystemMusicProperties :
	Windows::IInspectable,
	impl_ISystemMusicProperties<ISystemMusicProperties>
{
	ISystemMusicProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISystemMusicProperties>(m_ptr); }
};

struct ISystemPhotoProperties :
	Windows::IInspectable,
	impl_ISystemPhotoProperties<ISystemPhotoProperties>
{
	ISystemPhotoProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISystemPhotoProperties>(m_ptr); }
};

struct ISystemVideoProperties :
	Windows::IInspectable,
	impl_ISystemVideoProperties<ISystemVideoProperties>
{
	ISystemVideoProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISystemVideoProperties>(m_ptr); }
};

struct ISystemProperties :
	Windows::IInspectable,
	impl_ISystemProperties<ISystemProperties>
{
	ISystemProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISystemProperties>(m_ptr); }
};

struct IStorageStreamTransaction :
	Windows::IInspectable,
	impl_IStorageStreamTransaction<IStorageStreamTransaction>
{
	IStorageStreamTransaction(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageStreamTransaction>(m_ptr); }
};

struct IApplicationDataStatics :
	Windows::IInspectable,
	impl_IApplicationDataStatics<IApplicationDataStatics>
{
	IApplicationDataStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationDataStatics>(m_ptr); }
};

struct IApplicationDataStatics2 :
	Windows::IInspectable,
	impl_IApplicationDataStatics2<IApplicationDataStatics2>
{
	IApplicationDataStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationDataStatics2>(m_ptr); }
};

struct IApplicationData :
	Windows::IInspectable,
	impl_IApplicationData<IApplicationData>
{
	IApplicationData(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationData>(m_ptr); }
};

struct IApplicationData2 :
	Windows::IInspectable,
	impl_IApplicationData2<IApplicationData2>
{
	IApplicationData2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationData2>(m_ptr); }
};

struct IApplicationData3 :
	Windows::IInspectable,
	impl_IApplicationData3<IApplicationData3>
{
	IApplicationData3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationData3>(m_ptr); }
};

struct ISetVersionRequest :
	Windows::IInspectable,
	impl_ISetVersionRequest<ISetVersionRequest>
{
	ISetVersionRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISetVersionRequest>(m_ptr); }
};

struct ISetVersionDeferral :
	Windows::IInspectable,
	impl_ISetVersionDeferral<ISetVersionDeferral>
{
	ISetVersionDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISetVersionDeferral>(m_ptr); }
};

struct IApplicationDataContainer :
	Windows::IInspectable,
	impl_IApplicationDataContainer<IApplicationDataContainer>
{
	IApplicationDataContainer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationDataContainer>(m_ptr); }
};

}}}

namespace winrt { namespace Windows { namespace Storage { namespace FileProperties {

struct IGeotagHelperStatics :
	Windows::IInspectable,
	impl_IGeotagHelperStatics<IGeotagHelperStatics>
{
	IGeotagHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGeotagHelperStatics>(m_ptr); }
};

struct IThumbnailProperties :
	Windows::IInspectable,
	impl_IThumbnailProperties<IThumbnailProperties>
{
	IThumbnailProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IThumbnailProperties>(m_ptr); }
};

struct IStorageItemExtraProperties :
	Windows::IInspectable,
	impl_IStorageItemExtraProperties<IStorageItemExtraProperties>
{
	IStorageItemExtraProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageItemExtraProperties>(m_ptr); }
};

struct IStorageItemContentProperties :
	Windows::IInspectable,
	impl_IStorageItemContentProperties<IStorageItemContentProperties>,
	requires<IStorageItemContentProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	IStorageItemContentProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageItemContentProperties>(m_ptr); }
};

struct IMusicProperties :
	Windows::IInspectable,
	impl_IMusicProperties<IMusicProperties>,
	requires<IMusicProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	IMusicProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMusicProperties>(m_ptr); }
};

struct IImageProperties :
	Windows::IInspectable,
	impl_IImageProperties<IImageProperties>,
	requires<IImageProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	IImageProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IImageProperties>(m_ptr); }
};

struct IVideoProperties :
	Windows::IInspectable,
	impl_IVideoProperties<IVideoProperties>,
	requires<IVideoProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	IVideoProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IVideoProperties>(m_ptr); }
};

struct IDocumentProperties :
	Windows::IInspectable,
	impl_IDocumentProperties<IDocumentProperties>,
	requires<IDocumentProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	IDocumentProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDocumentProperties>(m_ptr); }
};

struct IBasicProperties :
	Windows::IInspectable,
	impl_IBasicProperties<IBasicProperties>
{
	IBasicProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBasicProperties>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

struct IFileRemovedEventArgs :
	Windows::IInspectable,
	impl_IFileRemovedEventArgs<IFileRemovedEventArgs>
{
	IFileRemovedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileRemovedEventArgs>(m_ptr); }
};

struct IFileOpenPickerUI :
	Windows::IInspectable,
	impl_IFileOpenPickerUI<IFileOpenPickerUI>
{
	IFileOpenPickerUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileOpenPickerUI>(m_ptr); }
};

struct IPickerClosingEventArgs :
	Windows::IInspectable,
	impl_IPickerClosingEventArgs<IPickerClosingEventArgs>
{
	IPickerClosingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPickerClosingEventArgs>(m_ptr); }
};

struct IPickerClosingOperation :
	Windows::IInspectable,
	impl_IPickerClosingOperation<IPickerClosingOperation>
{
	IPickerClosingOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPickerClosingOperation>(m_ptr); }
};

struct IPickerClosingDeferral :
	Windows::IInspectable,
	impl_IPickerClosingDeferral<IPickerClosingDeferral>
{
	IPickerClosingDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPickerClosingDeferral>(m_ptr); }
};

struct IFileSavePickerUI :
	Windows::IInspectable,
	impl_IFileSavePickerUI<IFileSavePickerUI>
{
	IFileSavePickerUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileSavePickerUI>(m_ptr); }
};

struct ITargetFileRequestedEventArgs :
	Windows::IInspectable,
	impl_ITargetFileRequestedEventArgs<ITargetFileRequestedEventArgs>
{
	ITargetFileRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITargetFileRequestedEventArgs>(m_ptr); }
};

struct ITargetFileRequest :
	Windows::IInspectable,
	impl_ITargetFileRequest<ITargetFileRequest>
{
	ITargetFileRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITargetFileRequest>(m_ptr); }
};

struct ITargetFileRequestDeferral :
	Windows::IInspectable,
	impl_ITargetFileRequestDeferral<ITargetFileRequestDeferral>
{
	ITargetFileRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITargetFileRequestDeferral>(m_ptr); }
};

}}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Provider {

struct ICachedFileUpdaterUI :
	Windows::IInspectable,
	impl_ICachedFileUpdaterUI<ICachedFileUpdaterUI>
{
	ICachedFileUpdaterUI(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICachedFileUpdaterUI>(m_ptr); }
};

struct IFileUpdateRequestedEventArgs :
	Windows::IInspectable,
	impl_IFileUpdateRequestedEventArgs<IFileUpdateRequestedEventArgs>
{
	IFileUpdateRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileUpdateRequestedEventArgs>(m_ptr); }
};

struct IFileUpdateRequest :
	Windows::IInspectable,
	impl_IFileUpdateRequest<IFileUpdateRequest>
{
	IFileUpdateRequest(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileUpdateRequest>(m_ptr); }
};

struct IFileUpdateRequestDeferral :
	Windows::IInspectable,
	impl_IFileUpdateRequestDeferral<IFileUpdateRequestDeferral>
{
	IFileUpdateRequestDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileUpdateRequestDeferral>(m_ptr); }
};

struct ICachedFileUpdaterUI2 :
	Windows::IInspectable,
	impl_ICachedFileUpdaterUI2<ICachedFileUpdaterUI2>,
	requires<ICachedFileUpdaterUI2, Windows::Storage::Provider::ICachedFileUpdaterUI>
{
	ICachedFileUpdaterUI2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICachedFileUpdaterUI2>(m_ptr); }
};

struct IFileUpdateRequest2 :
	Windows::IInspectable,
	impl_IFileUpdateRequest2<IFileUpdateRequest2>,
	requires<IFileUpdateRequest2, Windows::Storage::Provider::IFileUpdateRequest>
{
	IFileUpdateRequest2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFileUpdateRequest2>(m_ptr); }
};

struct ICachedFileUpdaterStatics :
	Windows::IInspectable,
	impl_ICachedFileUpdaterStatics<ICachedFileUpdaterStatics>
{
	ICachedFileUpdaterStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICachedFileUpdaterStatics>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Search {

struct IContentIndexerStatics :
	Windows::IInspectable,
	impl_IContentIndexerStatics<IContentIndexerStatics>
{
	IContentIndexerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContentIndexerStatics>(m_ptr); }
};

struct IIndexableContent :
	Windows::IInspectable,
	impl_IIndexableContent<IIndexableContent>
{
	IIndexableContent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IIndexableContent>(m_ptr); }
};

struct IContentIndexer :
	Windows::IInspectable,
	impl_IContentIndexer<IContentIndexer>
{
	IContentIndexer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContentIndexer>(m_ptr); }
};

struct IValueAndLanguage :
	Windows::IInspectable,
	impl_IValueAndLanguage<IValueAndLanguage>
{
	IValueAndLanguage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IValueAndLanguage>(m_ptr); }
};

struct IContentIndexerQueryOperations :
	Windows::IInspectable,
	impl_IContentIndexerQueryOperations<IContentIndexerQueryOperations>
{
	IContentIndexerQueryOperations(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContentIndexerQueryOperations>(m_ptr); }
};

struct IContentIndexerQuery :
	Windows::IInspectable,
	impl_IContentIndexerQuery<IContentIndexerQuery>
{
	IContentIndexerQuery(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContentIndexerQuery>(m_ptr); }
};

struct IQueryOptions :
	Windows::IInspectable,
	impl_IQueryOptions<IQueryOptions>
{
	IQueryOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IQueryOptions>(m_ptr); }
};

struct IQueryOptionsWithProviderFilter :
	Windows::IInspectable,
	impl_IQueryOptionsWithProviderFilter<IQueryOptionsWithProviderFilter>
{
	IQueryOptionsWithProviderFilter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IQueryOptionsWithProviderFilter>(m_ptr); }
};

struct IQueryOptionsFactory :
	Windows::IInspectable,
	impl_IQueryOptionsFactory<IQueryOptionsFactory>
{
	IQueryOptionsFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IQueryOptionsFactory>(m_ptr); }
};

struct IStorageQueryResultBase :
	Windows::IInspectable,
	impl_IStorageQueryResultBase<IStorageQueryResultBase>
{
	IStorageQueryResultBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageQueryResultBase>(m_ptr); }
};

struct IStorageFileQueryResult :
	Windows::IInspectable,
	impl_IStorageFileQueryResult<IStorageFileQueryResult>,
	requires<IStorageFileQueryResult, Windows::Storage::Search::IStorageQueryResultBase>
{
	IStorageFileQueryResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageFileQueryResult>(m_ptr); }
};

struct IStorageFileQueryResult2 :
	Windows::IInspectable,
	impl_IStorageFileQueryResult2<IStorageFileQueryResult2>,
	requires<IStorageFileQueryResult2, Windows::Storage::Search::IStorageQueryResultBase>
{
	IStorageFileQueryResult2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageFileQueryResult2>(m_ptr); }
};

struct IStorageFolderQueryResult :
	Windows::IInspectable,
	impl_IStorageFolderQueryResult<IStorageFolderQueryResult>,
	requires<IStorageFolderQueryResult, Windows::Storage::Search::IStorageQueryResultBase>
{
	IStorageFolderQueryResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageFolderQueryResult>(m_ptr); }
};

struct IStorageItemQueryResult :
	Windows::IInspectable,
	impl_IStorageItemQueryResult<IStorageItemQueryResult>,
	requires<IStorageItemQueryResult, Windows::Storage::Search::IStorageQueryResultBase>
{
	IStorageItemQueryResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageItemQueryResult>(m_ptr); }
};

struct IStorageFolderQueryOperations :
	Windows::IInspectable,
	impl_IStorageFolderQueryOperations<IStorageFolderQueryOperations>
{
	IStorageFolderQueryOperations(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageFolderQueryOperations>(m_ptr); }
};

struct IStorageLibraryContentChangedTriggerDetails :
	Windows::IInspectable,
	impl_IStorageLibraryContentChangedTriggerDetails<IStorageLibraryContentChangedTriggerDetails>
{
	IStorageLibraryContentChangedTriggerDetails(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IStorageLibraryContentChangedTriggerDetails>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Streams {

struct IDataReader :
	Windows::IInspectable,
	impl_IDataReader<IDataReader>
{
	IDataReader(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataReader>(m_ptr); }
};

struct IDataReaderFactory :
	Windows::IInspectable,
	impl_IDataReaderFactory<IDataReaderFactory>
{
	IDataReaderFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataReaderFactory>(m_ptr); }
};

struct IDataReaderStatics :
	Windows::IInspectable,
	impl_IDataReaderStatics<IDataReaderStatics>
{
	IDataReaderStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataReaderStatics>(m_ptr); }
};

struct IDataWriter :
	Windows::IInspectable,
	impl_IDataWriter<IDataWriter>
{
	IDataWriter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataWriter>(m_ptr); }
};

struct IDataWriterFactory :
	Windows::IInspectable,
	impl_IDataWriterFactory<IDataWriterFactory>
{
	IDataWriterFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDataWriterFactory>(m_ptr); }
};

struct IRandomAccessStreamReference :
	Windows::IInspectable,
	impl_IRandomAccessStreamReference<IRandomAccessStreamReference>
{
	IRandomAccessStreamReference(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRandomAccessStreamReference>(m_ptr); }
};

struct IRandomAccessStreamStatics :
	Windows::IInspectable,
	impl_IRandomAccessStreamStatics<IRandomAccessStreamStatics>
{
	IRandomAccessStreamStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRandomAccessStreamStatics>(m_ptr); }
};

struct IBufferFactory :
	Windows::IInspectable,
	impl_IBufferFactory<IBufferFactory>
{
	IBufferFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBufferFactory>(m_ptr); }
};

struct IBuffer :
	Windows::IInspectable,
	impl_IBuffer<IBuffer>
{
	IBuffer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBuffer>(m_ptr); }
};

struct IBufferStatics :
	Windows::IInspectable,
	impl_IBufferStatics<IBufferStatics>
{
	IBufferStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBufferStatics>(m_ptr); }
};

struct IContentTypeProvider :
	Windows::IInspectable,
	impl_IContentTypeProvider<IContentTypeProvider>
{
	IContentTypeProvider(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IContentTypeProvider>(m_ptr); }
};

struct IInputStreamReference :
	Windows::IInspectable,
	impl_IInputStreamReference<IInputStreamReference>
{
	IInputStreamReference(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInputStreamReference>(m_ptr); }
};

struct IRandomAccessStreamReferenceStatics :
	Windows::IInspectable,
	impl_IRandomAccessStreamReferenceStatics<IRandomAccessStreamReferenceStatics>
{
	IRandomAccessStreamReferenceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRandomAccessStreamReferenceStatics>(m_ptr); }
};

struct IInputStream :
	Windows::IInspectable,
	impl_IInputStream<IInputStream>
{
	IInputStream(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInputStream>(m_ptr); }
};

struct IOutputStream :
	Windows::IInspectable,
	impl_IOutputStream<IOutputStream>
{
	IOutputStream(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IOutputStream>(m_ptr); }
};

struct IRandomAccessStream :
	Windows::IInspectable,
	impl_IRandomAccessStream<IRandomAccessStream>,
	requires<IRandomAccessStream, Windows::Storage::Streams::IInputStream, Windows::Storage::Streams::IOutputStream>
{
	IRandomAccessStream(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRandomAccessStream>(m_ptr); }
};

struct IRandomAccessStreamWithContentType :
	Windows::IInspectable,
	impl_IRandomAccessStreamWithContentType<IRandomAccessStreamWithContentType>,
	requires<IRandomAccessStreamWithContentType, Windows::Storage::Streams::IRandomAccessStream, Windows::Storage::Streams::IInputStream, Windows::Storage::Streams::IOutputStream, Windows::Storage::Streams::IContentTypeProvider>
{
	IRandomAccessStreamWithContentType(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRandomAccessStreamWithContentType>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace System {

struct IAppMemoryReport :
	Windows::IInspectable,
	impl_IAppMemoryReport<IAppMemoryReport>
{
	IAppMemoryReport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppMemoryReport>(m_ptr); }
};

struct IProcessMemoryReport :
	Windows::IInspectable,
	impl_IProcessMemoryReport<IProcessMemoryReport>
{
	IProcessMemoryReport(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProcessMemoryReport>(m_ptr); }
};

struct IAppMemoryUsageLimitChangingEventArgs :
	Windows::IInspectable,
	impl_IAppMemoryUsageLimitChangingEventArgs<IAppMemoryUsageLimitChangingEventArgs>
{
	IAppMemoryUsageLimitChangingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAppMemoryUsageLimitChangingEventArgs>(m_ptr); }
};

struct IMemoryManagerStatics :
	Windows::IInspectable,
	impl_IMemoryManagerStatics<IMemoryManagerStatics>
{
	IMemoryManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMemoryManagerStatics>(m_ptr); }
};

struct IMemoryManagerStatics2 :
	Windows::IInspectable,
	impl_IMemoryManagerStatics2<IMemoryManagerStatics2>
{
	IMemoryManagerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMemoryManagerStatics2>(m_ptr); }
};

struct IMemoryManagerStatics3 :
	Windows::IInspectable,
	impl_IMemoryManagerStatics3<IMemoryManagerStatics3>
{
	IMemoryManagerStatics3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMemoryManagerStatics3>(m_ptr); }
};

struct IProtocolForResultsOperation :
	Windows::IInspectable,
	impl_IProtocolForResultsOperation<IProtocolForResultsOperation>
{
	IProtocolForResultsOperation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProtocolForResultsOperation>(m_ptr); }
};

struct IUser :
	Windows::IInspectable,
	impl_IUser<IUser>
{
	IUser(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUser>(m_ptr); }
};

struct IUserStatics :
	Windows::IInspectable,
	impl_IUserStatics<IUserStatics>
{
	IUserStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUserStatics>(m_ptr); }
};

struct IUserWatcher :
	Windows::IInspectable,
	impl_IUserWatcher<IUserWatcher>
{
	IUserWatcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUserWatcher>(m_ptr); }
};

struct IUserChangedEventArgs :
	Windows::IInspectable,
	impl_IUserChangedEventArgs<IUserChangedEventArgs>
{
	IUserChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUserChangedEventArgs>(m_ptr); }
};

struct IUserAuthenticationStatusChangeDeferral :
	Windows::IInspectable,
	impl_IUserAuthenticationStatusChangeDeferral<IUserAuthenticationStatusChangeDeferral>
{
	IUserAuthenticationStatusChangeDeferral(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUserAuthenticationStatusChangeDeferral>(m_ptr); }
};

struct IUserAuthenticationStatusChangingEventArgs :
	Windows::IInspectable,
	impl_IUserAuthenticationStatusChangingEventArgs<IUserAuthenticationStatusChangingEventArgs>
{
	IUserAuthenticationStatusChangingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUserAuthenticationStatusChangingEventArgs>(m_ptr); }
};

struct IKnownUserPropertiesStatics :
	Windows::IInspectable,
	impl_IKnownUserPropertiesStatics<IKnownUserPropertiesStatics>
{
	IKnownUserPropertiesStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKnownUserPropertiesStatics>(m_ptr); }
};

struct ILaunchUriResult :
	Windows::IInspectable,
	impl_ILaunchUriResult<ILaunchUriResult>
{
	ILaunchUriResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILaunchUriResult>(m_ptr); }
};

struct ILauncherUIOptions :
	Windows::IInspectable,
	impl_ILauncherUIOptions<ILauncherUIOptions>
{
	ILauncherUIOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILauncherUIOptions>(m_ptr); }
};

struct ILauncherOptions :
	Windows::IInspectable,
	impl_ILauncherOptions<ILauncherOptions>
{
	ILauncherOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILauncherOptions>(m_ptr); }
};

struct ILauncherOptions2 :
	Windows::IInspectable,
	impl_ILauncherOptions2<ILauncherOptions2>
{
	ILauncherOptions2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILauncherOptions2>(m_ptr); }
};

struct ILauncherViewOptions :
	Windows::IInspectable,
	impl_ILauncherViewOptions<ILauncherViewOptions>
{
	ILauncherViewOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILauncherViewOptions>(m_ptr); }
};

struct IFolderLauncherOptions :
	Windows::IInspectable,
	impl_IFolderLauncherOptions<IFolderLauncherOptions>
{
	IFolderLauncherOptions(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IFolderLauncherOptions>(m_ptr); }
};

struct ILauncherStatics :
	Windows::IInspectable,
	impl_ILauncherStatics<ILauncherStatics>
{
	ILauncherStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILauncherStatics>(m_ptr); }
};

struct ILauncherStatics2 :
	Windows::IInspectable,
	impl_ILauncherStatics2<ILauncherStatics2>
{
	ILauncherStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILauncherStatics2>(m_ptr); }
};

struct ILauncherStatics3 :
	Windows::IInspectable,
	impl_ILauncherStatics3<ILauncherStatics3>
{
	ILauncherStatics3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ILauncherStatics3>(m_ptr); }
};

}}}

namespace winrt { namespace Windows { namespace UI {

struct IColorHelper :
	Windows::IInspectable,
	impl_IColorHelper<IColorHelper>
{
	IColorHelper(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IColorHelper>(m_ptr); }
};

struct IColorHelperStatics :
	Windows::IInspectable,
	impl_IColorHelperStatics<IColorHelperStatics>
{
	IColorHelperStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IColorHelperStatics>(m_ptr); }
};

struct IColors :
	Windows::IInspectable,
	impl_IColors<IColors>
{
	IColors(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IColors>(m_ptr); }
};

struct IColorsStatics :
	Windows::IInspectable,
	impl_IColorsStatics<IColorsStatics>
{
	IColorsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IColorsStatics>(m_ptr); }
};

}}}

namespace winrt { namespace Windows { namespace UI { namespace Core {

struct IDispatchedHandler :
	Windows::IUnknown,
	impl_IDispatchedHandler<IDispatchedHandler>
{
	IDispatchedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDispatchedHandler>(m_ptr); }
};

struct IIdleDispatchedHandler :
	Windows::IUnknown,
	impl_IIdleDispatchedHandler<IIdleDispatchedHandler>
{
	IIdleDispatchedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IIdleDispatchedHandler>(m_ptr); }
};

struct ICoreWindowEventArgs :
	Windows::IInspectable,
	impl_ICoreWindowEventArgs<ICoreWindowEventArgs>
{
	ICoreWindowEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreWindowEventArgs>(m_ptr); }
};

struct IAutomationProviderRequestedEventArgs :
	Windows::IInspectable,
	impl_IAutomationProviderRequestedEventArgs<IAutomationProviderRequestedEventArgs>,
	requires<IAutomationProviderRequestedEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IAutomationProviderRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAutomationProviderRequestedEventArgs>(m_ptr); }
};

struct ICharacterReceivedEventArgs :
	Windows::IInspectable,
	impl_ICharacterReceivedEventArgs<ICharacterReceivedEventArgs>,
	requires<ICharacterReceivedEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	ICharacterReceivedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICharacterReceivedEventArgs>(m_ptr); }
};

struct IInputEnabledEventArgs :
	Windows::IInspectable,
	impl_IInputEnabledEventArgs<IInputEnabledEventArgs>,
	requires<IInputEnabledEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IInputEnabledEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInputEnabledEventArgs>(m_ptr); }
};

struct IKeyEventArgs :
	Windows::IInspectable,
	impl_IKeyEventArgs<IKeyEventArgs>,
	requires<IKeyEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IKeyEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyEventArgs>(m_ptr); }
};

struct IPointerEventArgs :
	Windows::IInspectable,
	impl_IPointerEventArgs<IPointerEventArgs>,
	requires<IPointerEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IPointerEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPointerEventArgs>(m_ptr); }
};

struct ITouchHitTestingEventArgs :
	Windows::IInspectable,
	impl_ITouchHitTestingEventArgs<ITouchHitTestingEventArgs>,
	requires<ITouchHitTestingEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	ITouchHitTestingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITouchHitTestingEventArgs>(m_ptr); }
};

struct IWindowActivatedEventArgs :
	Windows::IInspectable,
	impl_IWindowActivatedEventArgs<IWindowActivatedEventArgs>,
	requires<IWindowActivatedEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IWindowActivatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWindowActivatedEventArgs>(m_ptr); }
};

struct IWindowSizeChangedEventArgs :
	Windows::IInspectable,
	impl_IWindowSizeChangedEventArgs<IWindowSizeChangedEventArgs>,
	requires<IWindowSizeChangedEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IWindowSizeChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWindowSizeChangedEventArgs>(m_ptr); }
};

struct IVisibilityChangedEventArgs :
	Windows::IInspectable,
	impl_IVisibilityChangedEventArgs<IVisibilityChangedEventArgs>,
	requires<IVisibilityChangedEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IVisibilityChangedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IVisibilityChangedEventArgs>(m_ptr); }
};

struct ICoreWindow :
	Windows::IInspectable,
	impl_ICoreWindow<ICoreWindow>
{
	ICoreWindow(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreWindow>(m_ptr); }
};

struct ICoreWindow2 :
	Windows::IInspectable,
	impl_ICoreWindow2<ICoreWindow2>
{
	ICoreWindow2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreWindow2>(m_ptr); }
};

struct ICoreWindowStatic :
	Windows::IInspectable,
	impl_ICoreWindowStatic<ICoreWindowStatic>
{
	ICoreWindowStatic(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreWindowStatic>(m_ptr); }
};

struct IAcceleratorKeyEventArgs :
	Windows::IInspectable,
	impl_IAcceleratorKeyEventArgs<IAcceleratorKeyEventArgs>,
	requires<IAcceleratorKeyEventArgs, Windows::UI::Core::ICoreWindowEventArgs>
{
	IAcceleratorKeyEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAcceleratorKeyEventArgs>(m_ptr); }
};

struct ICoreAcceleratorKeys :
	Windows::IInspectable,
	impl_ICoreAcceleratorKeys<ICoreAcceleratorKeys>
{
	ICoreAcceleratorKeys(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreAcceleratorKeys>(m_ptr); }
};

struct ICoreDispatcher :
	Windows::IInspectable,
	impl_ICoreDispatcher<ICoreDispatcher>,
	requires<ICoreDispatcher, Windows::UI::Core::ICoreAcceleratorKeys>
{
	ICoreDispatcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreDispatcher>(m_ptr); }
};

struct ICoreDispatcher2 :
	Windows::IInspectable,
	impl_ICoreDispatcher2<ICoreDispatcher2>
{
	ICoreDispatcher2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreDispatcher2>(m_ptr); }
};

struct ICoreDispatcherWithTaskPriority :
	Windows::IInspectable,
	impl_ICoreDispatcherWithTaskPriority<ICoreDispatcherWithTaskPriority>
{
	ICoreDispatcherWithTaskPriority(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreDispatcherWithTaskPriority>(m_ptr); }
};

struct IIdleDispatchedHandlerArgs :
	Windows::IInspectable,
	impl_IIdleDispatchedHandlerArgs<IIdleDispatchedHandlerArgs>
{
	IIdleDispatchedHandlerArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IIdleDispatchedHandlerArgs>(m_ptr); }
};

struct ICoreCursor :
	Windows::IInspectable,
	impl_ICoreCursor<ICoreCursor>
{
	ICoreCursor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreCursor>(m_ptr); }
};

struct ICoreCursorFactory :
	Windows::IInspectable,
	impl_ICoreCursorFactory<ICoreCursorFactory>
{
	ICoreCursorFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreCursorFactory>(m_ptr); }
};

struct IInitializeWithCoreWindow :
	Windows::IInspectable,
	impl_IInitializeWithCoreWindow<IInitializeWithCoreWindow>
{
	IInitializeWithCoreWindow(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInitializeWithCoreWindow>(m_ptr); }
};

struct ICoreWindowResizeManager :
	Windows::IInspectable,
	impl_ICoreWindowResizeManager<ICoreWindowResizeManager>
{
	ICoreWindowResizeManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreWindowResizeManager>(m_ptr); }
};

struct ICoreWindowResizeManagerLayoutCapability :
	Windows::IInspectable,
	impl_ICoreWindowResizeManagerLayoutCapability<ICoreWindowResizeManagerLayoutCapability>
{
	ICoreWindowResizeManagerLayoutCapability(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreWindowResizeManagerLayoutCapability>(m_ptr); }
};

struct ICoreWindowResizeManagerStatics :
	Windows::IInspectable,
	impl_ICoreWindowResizeManagerStatics<ICoreWindowResizeManagerStatics>
{
	ICoreWindowResizeManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreWindowResizeManagerStatics>(m_ptr); }
};

struct ICoreInputSourceBase :
	Windows::IInspectable,
	impl_ICoreInputSourceBase<ICoreInputSourceBase>
{
	ICoreInputSourceBase(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreInputSourceBase>(m_ptr); }
};

struct ICorePointerInputSource :
	Windows::IInspectable,
	impl_ICorePointerInputSource<ICorePointerInputSource>
{
	ICorePointerInputSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICorePointerInputSource>(m_ptr); }
};

struct ICoreKeyboardInputSource :
	Windows::IInspectable,
	impl_ICoreKeyboardInputSource<ICoreKeyboardInputSource>
{
	ICoreKeyboardInputSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreKeyboardInputSource>(m_ptr); }
};

struct ICoreComponentFocusable :
	Windows::IInspectable,
	impl_ICoreComponentFocusable<ICoreComponentFocusable>
{
	ICoreComponentFocusable(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreComponentFocusable>(m_ptr); }
};

struct ICoreTouchHitTesting :
	Windows::IInspectable,
	impl_ICoreTouchHitTesting<ICoreTouchHitTesting>
{
	ICoreTouchHitTesting(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreTouchHitTesting>(m_ptr); }
};

struct ICorePointerRedirector :
	Windows::IInspectable,
	impl_ICorePointerRedirector<ICorePointerRedirector>
{
	ICorePointerRedirector(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICorePointerRedirector>(m_ptr); }
};

struct ICoreWindowPopupShowingEventArgs :
	Windows::IInspectable,
	impl_ICoreWindowPopupShowingEventArgs<ICoreWindowPopupShowingEventArgs>
{
	ICoreWindowPopupShowingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreWindowPopupShowingEventArgs>(m_ptr); }
};

struct ICoreWindowDialog :
	Windows::IInspectable,
	impl_ICoreWindowDialog<ICoreWindowDialog>
{
	ICoreWindowDialog(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreWindowDialog>(m_ptr); }
};

struct ICoreWindowDialogFactory :
	Windows::IInspectable,
	impl_ICoreWindowDialogFactory<ICoreWindowDialogFactory>
{
	ICoreWindowDialogFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreWindowDialogFactory>(m_ptr); }
};

struct ICoreWindowFlyout :
	Windows::IInspectable,
	impl_ICoreWindowFlyout<ICoreWindowFlyout>
{
	ICoreWindowFlyout(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreWindowFlyout>(m_ptr); }
};

struct ICoreWindowFlyoutFactory :
	Windows::IInspectable,
	impl_ICoreWindowFlyoutFactory<ICoreWindowFlyoutFactory>
{
	ICoreWindowFlyoutFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreWindowFlyoutFactory>(m_ptr); }
};

struct ISystemNavigationManager :
	Windows::IInspectable,
	impl_ISystemNavigationManager<ISystemNavigationManager>
{
	ISystemNavigationManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISystemNavigationManager>(m_ptr); }
};

struct ISystemNavigationManager2 :
	Windows::IInspectable,
	impl_ISystemNavigationManager2<ISystemNavigationManager2>
{
	ISystemNavigationManager2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISystemNavigationManager2>(m_ptr); }
};

struct ISystemNavigationManagerStatics :
	Windows::IInspectable,
	impl_ISystemNavigationManagerStatics<ISystemNavigationManagerStatics>
{
	ISystemNavigationManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ISystemNavigationManagerStatics>(m_ptr); }
};

struct IBackRequestedEventArgs :
	Windows::IInspectable,
	impl_IBackRequestedEventArgs<IBackRequestedEventArgs>
{
	IBackRequestedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IBackRequestedEventArgs>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input {

struct IEdgeGestureEventArgs :
	Windows::IInspectable,
	impl_IEdgeGestureEventArgs<IEdgeGestureEventArgs>
{
	IEdgeGestureEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IEdgeGestureEventArgs>(m_ptr); }
};

struct IEdgeGestureStatics :
	Windows::IInspectable,
	impl_IEdgeGestureStatics<IEdgeGestureStatics>
{
	IEdgeGestureStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IEdgeGestureStatics>(m_ptr); }
};

struct IEdgeGesture :
	Windows::IInspectable,
	impl_IEdgeGesture<IEdgeGesture>
{
	IEdgeGesture(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IEdgeGesture>(m_ptr); }
};

struct IKeyboardDeliveryInterceptor :
	Windows::IInspectable,
	impl_IKeyboardDeliveryInterceptor<IKeyboardDeliveryInterceptor>
{
	IKeyboardDeliveryInterceptor(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyboardDeliveryInterceptor>(m_ptr); }
};

struct IKeyboardDeliveryInterceptorStatics :
	Windows::IInspectable,
	impl_IKeyboardDeliveryInterceptorStatics<IKeyboardDeliveryInterceptorStatics>
{
	IKeyboardDeliveryInterceptorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IKeyboardDeliveryInterceptorStatics>(m_ptr); }
};

struct ITappedEventArgs :
	Windows::IInspectable,
	impl_ITappedEventArgs<ITappedEventArgs>
{
	ITappedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ITappedEventArgs>(m_ptr); }
};

struct IRightTappedEventArgs :
	Windows::IInspectable,
	impl_IRightTappedEventArgs<IRightTappedEventArgs>
{
	IRightTappedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IRightTappedEventArgs>(m_ptr); }
};

struct IHoldingEventArgs :
	Windows::IInspectable,
	impl_IHoldingEventArgs<IHoldingEventArgs>
{
	IHoldingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHoldingEventArgs>(m_ptr); }
};

struct IDraggingEventArgs :
	Windows::IInspectable,
	impl_IDraggingEventArgs<IDraggingEventArgs>
{
	IDraggingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IDraggingEventArgs>(m_ptr); }
};

struct IManipulationStartedEventArgs :
	Windows::IInspectable,
	impl_IManipulationStartedEventArgs<IManipulationStartedEventArgs>
{
	IManipulationStartedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IManipulationStartedEventArgs>(m_ptr); }
};

struct IManipulationUpdatedEventArgs :
	Windows::IInspectable,
	impl_IManipulationUpdatedEventArgs<IManipulationUpdatedEventArgs>
{
	IManipulationUpdatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IManipulationUpdatedEventArgs>(m_ptr); }
};

struct IManipulationInertiaStartingEventArgs :
	Windows::IInspectable,
	impl_IManipulationInertiaStartingEventArgs<IManipulationInertiaStartingEventArgs>
{
	IManipulationInertiaStartingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IManipulationInertiaStartingEventArgs>(m_ptr); }
};

struct IManipulationCompletedEventArgs :
	Windows::IInspectable,
	impl_IManipulationCompletedEventArgs<IManipulationCompletedEventArgs>
{
	IManipulationCompletedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IManipulationCompletedEventArgs>(m_ptr); }
};

struct ICrossSlidingEventArgs :
	Windows::IInspectable,
	impl_ICrossSlidingEventArgs<ICrossSlidingEventArgs>
{
	ICrossSlidingEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICrossSlidingEventArgs>(m_ptr); }
};

struct IMouseWheelParameters :
	Windows::IInspectable,
	impl_IMouseWheelParameters<IMouseWheelParameters>
{
	IMouseWheelParameters(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMouseWheelParameters>(m_ptr); }
};

struct IGestureRecognizer :
	Windows::IInspectable,
	impl_IGestureRecognizer<IGestureRecognizer>
{
	IGestureRecognizer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IGestureRecognizer>(m_ptr); }
};

struct IPointerPointStatics :
	Windows::IInspectable,
	impl_IPointerPointStatics<IPointerPointStatics>
{
	IPointerPointStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPointerPointStatics>(m_ptr); }
};

struct IPointerPointTransform :
	Windows::IInspectable,
	impl_IPointerPointTransform<IPointerPointTransform>
{
	IPointerPointTransform(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPointerPointTransform>(m_ptr); }
};

struct IPointerPoint :
	Windows::IInspectable,
	impl_IPointerPoint<IPointerPoint>
{
	IPointerPoint(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPointerPoint>(m_ptr); }
};

struct IPointerPointProperties :
	Windows::IInspectable,
	impl_IPointerPointProperties<IPointerPointProperties>
{
	IPointerPointProperties(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPointerPointProperties>(m_ptr); }
};

struct IPointerVisualizationSettings :
	Windows::IInspectable,
	impl_IPointerVisualizationSettings<IPointerVisualizationSettings>
{
	IPointerVisualizationSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPointerVisualizationSettings>(m_ptr); }
};

struct IPointerVisualizationSettingsStatics :
	Windows::IInspectable,
	impl_IPointerVisualizationSettingsStatics<IPointerVisualizationSettingsStatics>
{
	IPointerVisualizationSettingsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPointerVisualizationSettingsStatics>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Inking {

struct IInkStrokesCollectedEventArgs :
	Windows::IInspectable,
	impl_IInkStrokesCollectedEventArgs<IInkStrokesCollectedEventArgs>
{
	IInkStrokesCollectedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkStrokesCollectedEventArgs>(m_ptr); }
};

struct IInkStrokesErasedEventArgs :
	Windows::IInspectable,
	impl_IInkStrokesErasedEventArgs<IInkStrokesErasedEventArgs>
{
	IInkStrokesErasedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkStrokesErasedEventArgs>(m_ptr); }
};

struct IInkPresenter :
	Windows::IInspectable,
	impl_IInkPresenter<IInkPresenter>
{
	IInkPresenter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkPresenter>(m_ptr); }
};

struct IInkInputProcessingConfiguration :
	Windows::IInspectable,
	impl_IInkInputProcessingConfiguration<IInkInputProcessingConfiguration>
{
	IInkInputProcessingConfiguration(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkInputProcessingConfiguration>(m_ptr); }
};

struct IInkSynchronizer :
	Windows::IInspectable,
	impl_IInkSynchronizer<IInkSynchronizer>
{
	IInkSynchronizer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkSynchronizer>(m_ptr); }
};

struct IInkUnprocessedInput :
	Windows::IInspectable,
	impl_IInkUnprocessedInput<IInkUnprocessedInput>
{
	IInkUnprocessedInput(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkUnprocessedInput>(m_ptr); }
};

struct IInkStrokeInput :
	Windows::IInspectable,
	impl_IInkStrokeInput<IInkStrokeInput>
{
	IInkStrokeInput(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkStrokeInput>(m_ptr); }
};

struct IInkPoint :
	Windows::IInspectable,
	impl_IInkPoint<IInkPoint>
{
	IInkPoint(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkPoint>(m_ptr); }
};

struct IInkPointFactory :
	Windows::IInspectable,
	impl_IInkPointFactory<IInkPointFactory>
{
	IInkPointFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkPointFactory>(m_ptr); }
};

struct IInkDrawingAttributes :
	Windows::IInspectable,
	impl_IInkDrawingAttributes<IInkDrawingAttributes>
{
	IInkDrawingAttributes(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkDrawingAttributes>(m_ptr); }
};

struct IInkDrawingAttributes2 :
	Windows::IInspectable,
	impl_IInkDrawingAttributes2<IInkDrawingAttributes2>
{
	IInkDrawingAttributes2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkDrawingAttributes2>(m_ptr); }
};

struct IInkStrokeRenderingSegment :
	Windows::IInspectable,
	impl_IInkStrokeRenderingSegment<IInkStrokeRenderingSegment>
{
	IInkStrokeRenderingSegment(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkStrokeRenderingSegment>(m_ptr); }
};

struct IInkStroke :
	Windows::IInspectable,
	impl_IInkStroke<IInkStroke>
{
	IInkStroke(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkStroke>(m_ptr); }
};

struct IInkStroke2 :
	Windows::IInspectable,
	impl_IInkStroke2<IInkStroke2>
{
	IInkStroke2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkStroke2>(m_ptr); }
};

struct IInkStrokeBuilder :
	Windows::IInspectable,
	impl_IInkStrokeBuilder<IInkStrokeBuilder>
{
	IInkStrokeBuilder(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkStrokeBuilder>(m_ptr); }
};

struct IInkStrokeBuilder2 :
	Windows::IInspectable,
	impl_IInkStrokeBuilder2<IInkStrokeBuilder2>
{
	IInkStrokeBuilder2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkStrokeBuilder2>(m_ptr); }
};

struct IInkRecognitionResult :
	Windows::IInspectable,
	impl_IInkRecognitionResult<IInkRecognitionResult>
{
	IInkRecognitionResult(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkRecognitionResult>(m_ptr); }
};

struct IInkStrokeContainer :
	Windows::IInspectable,
	impl_IInkStrokeContainer<IInkStrokeContainer>
{
	IInkStrokeContainer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkStrokeContainer>(m_ptr); }
};

struct IInkStrokeContainer2 :
	Windows::IInspectable,
	impl_IInkStrokeContainer2<IInkStrokeContainer2>
{
	IInkStrokeContainer2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkStrokeContainer2>(m_ptr); }
};

struct IInkRecognizer :
	Windows::IInspectable,
	impl_IInkRecognizer<IInkRecognizer>
{
	IInkRecognizer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkRecognizer>(m_ptr); }
};

struct IInkRecognizerContainer :
	Windows::IInspectable,
	impl_IInkRecognizerContainer<IInkRecognizerContainer>
{
	IInkRecognizerContainer(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkRecognizerContainer>(m_ptr); }
};

struct IInkManager :
	Windows::IInspectable,
	impl_IInkManager<IInkManager>,
	requires<IInkManager, Windows::UI::Input::Inking::IInkStrokeContainer, Windows::UI::Input::Inking::IInkRecognizerContainer>
{
	IInkManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInkManager>(m_ptr); }
	using impl_IInkRecognizerContainer::RecognizeAsync;
	using impl_IInkManager::RecognizeAsync;
};

}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Inking { namespace Core {

struct ICoreInkIndependentInputSource :
	Windows::IInspectable,
	impl_ICoreInkIndependentInputSource<ICoreInkIndependentInputSource>
{
	ICoreInkIndependentInputSource(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreInkIndependentInputSource>(m_ptr); }
};

struct ICoreInkIndependentInputSourceStatics :
	Windows::IInspectable,
	impl_ICoreInkIndependentInputSourceStatics<ICoreInkIndependentInputSourceStatics>
{
	ICoreInkIndependentInputSourceStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<ICoreInkIndependentInputSourceStatics>(m_ptr); }
};

}}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Popups {

struct IUICommandInvokedHandler :
	Windows::IUnknown,
	impl_IUICommandInvokedHandler<IUICommandInvokedHandler>
{
	IUICommandInvokedHandler(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUICommandInvokedHandler>(m_ptr); }
};

struct IMessageDialog :
	Windows::IInspectable,
	impl_IMessageDialog<IMessageDialog>
{
	IMessageDialog(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMessageDialog>(m_ptr); }
};

struct IMessageDialogFactory :
	Windows::IInspectable,
	impl_IMessageDialogFactory<IMessageDialogFactory>
{
	IMessageDialogFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IMessageDialogFactory>(m_ptr); }
};

struct IUICommand :
	Windows::IInspectable,
	impl_IUICommand<IUICommand>
{
	IUICommand(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUICommand>(m_ptr); }
};

struct IUICommandFactory :
	Windows::IInspectable,
	impl_IUICommandFactory<IUICommandFactory>
{
	IUICommandFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUICommandFactory>(m_ptr); }
};

struct IPopupMenu :
	Windows::IInspectable,
	impl_IPopupMenu<IPopupMenu>
{
	IPopupMenu(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IPopupMenu>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace UI { namespace ViewManagement {

struct IApplicationViewSwitcherStatics :
	Windows::IInspectable,
	impl_IApplicationViewSwitcherStatics<IApplicationViewSwitcherStatics>
{
	IApplicationViewSwitcherStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationViewSwitcherStatics>(m_ptr); }
};

struct IApplicationViewSwitcherStatics2 :
	Windows::IInspectable,
	impl_IApplicationViewSwitcherStatics2<IApplicationViewSwitcherStatics2>
{
	IApplicationViewSwitcherStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationViewSwitcherStatics2>(m_ptr); }
};

struct IApplicationViewInteropStatics :
	Windows::IInspectable,
	impl_IApplicationViewInteropStatics<IApplicationViewInteropStatics>
{
	IApplicationViewInteropStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationViewInteropStatics>(m_ptr); }
};

struct IApplicationViewStatics :
	Windows::IInspectable,
	impl_IApplicationViewStatics<IApplicationViewStatics>
{
	IApplicationViewStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationViewStatics>(m_ptr); }
};

struct IApplicationViewStatics2 :
	Windows::IInspectable,
	impl_IApplicationViewStatics2<IApplicationViewStatics2>
{
	IApplicationViewStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationViewStatics2>(m_ptr); }
};

struct IApplicationViewStatics3 :
	Windows::IInspectable,
	impl_IApplicationViewStatics3<IApplicationViewStatics3>
{
	IApplicationViewStatics3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationViewStatics3>(m_ptr); }
};

struct IApplicationView :
	Windows::IInspectable,
	impl_IApplicationView<IApplicationView>
{
	IApplicationView(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationView>(m_ptr); }
};

struct IApplicationView2 :
	Windows::IInspectable,
	impl_IApplicationView2<IApplicationView2>
{
	IApplicationView2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationView2>(m_ptr); }
};

struct IApplicationViewTitleBar :
	Windows::IInspectable,
	impl_IApplicationViewTitleBar<IApplicationViewTitleBar>
{
	IApplicationViewTitleBar(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationViewTitleBar>(m_ptr); }
};

struct IApplicationView3 :
	Windows::IInspectable,
	impl_IApplicationView3<IApplicationView3>
{
	IApplicationView3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationView3>(m_ptr); }
};

struct IApplicationViewFullscreenStatics :
	Windows::IInspectable,
	impl_IApplicationViewFullscreenStatics<IApplicationViewFullscreenStatics>
{
	IApplicationViewFullscreenStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationViewFullscreenStatics>(m_ptr); }
};

struct IApplicationViewConsolidatedEventArgs :
	Windows::IInspectable,
	impl_IApplicationViewConsolidatedEventArgs<IApplicationViewConsolidatedEventArgs>
{
	IApplicationViewConsolidatedEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationViewConsolidatedEventArgs>(m_ptr); }
};

struct IActivationViewSwitcher :
	Windows::IInspectable,
	impl_IActivationViewSwitcher<IActivationViewSwitcher>
{
	IActivationViewSwitcher(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IActivationViewSwitcher>(m_ptr); }
};

struct IApplicationViewTransferContext :
	Windows::IInspectable,
	impl_IApplicationViewTransferContext<IApplicationViewTransferContext>
{
	IApplicationViewTransferContext(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationViewTransferContext>(m_ptr); }
};

struct IApplicationViewTransferContextStatics :
	Windows::IInspectable,
	impl_IApplicationViewTransferContextStatics<IApplicationViewTransferContextStatics>
{
	IApplicationViewTransferContextStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationViewTransferContextStatics>(m_ptr); }
};

struct IInputPaneVisibilityEventArgs :
	Windows::IInspectable,
	impl_IInputPaneVisibilityEventArgs<IInputPaneVisibilityEventArgs>
{
	IInputPaneVisibilityEventArgs(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInputPaneVisibilityEventArgs>(m_ptr); }
};

struct IInputPane :
	Windows::IInspectable,
	impl_IInputPane<IInputPane>
{
	IInputPane(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInputPane>(m_ptr); }
};

struct IInputPane2 :
	Windows::IInspectable,
	impl_IInputPane2<IInputPane2>
{
	IInputPane2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInputPane2>(m_ptr); }
};

struct IInputPaneControl :
	Windows::IInspectable,
	impl_IInputPaneControl<IInputPaneControl>
{
	IInputPaneControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInputPaneControl>(m_ptr); }
};

struct IInputPaneStatics :
	Windows::IInspectable,
	impl_IInputPaneStatics<IInputPaneStatics>
{
	IInputPaneStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IInputPaneStatics>(m_ptr); }
};

struct IProjectionManagerStatics :
	Windows::IInspectable,
	impl_IProjectionManagerStatics<IProjectionManagerStatics>
{
	IProjectionManagerStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProjectionManagerStatics>(m_ptr); }
};

struct IProjectionManagerStatics2 :
	Windows::IInspectable,
	impl_IProjectionManagerStatics2<IProjectionManagerStatics2>
{
	IProjectionManagerStatics2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IProjectionManagerStatics2>(m_ptr); }
};

struct IUIViewSettings :
	Windows::IInspectable,
	impl_IUIViewSettings<IUIViewSettings>
{
	IUIViewSettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUIViewSettings>(m_ptr); }
};

struct IUIViewSettingsStatics :
	Windows::IInspectable,
	impl_IUIViewSettingsStatics<IUIViewSettingsStatics>
{
	IUIViewSettingsStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUIViewSettingsStatics>(m_ptr); }
};

struct IAccessibilitySettings :
	Windows::IInspectable,
	impl_IAccessibilitySettings<IAccessibilitySettings>
{
	IAccessibilitySettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IAccessibilitySettings>(m_ptr); }
};

struct IUISettings :
	Windows::IInspectable,
	impl_IUISettings<IUISettings>
{
	IUISettings(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUISettings>(m_ptr); }
};

struct IUISettings2 :
	Windows::IInspectable,
	impl_IUISettings2<IUISettings2>
{
	IUISettings2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUISettings2>(m_ptr); }
};

struct IUISettings3 :
	Windows::IInspectable,
	impl_IUISettings3<IUISettings3>
{
	IUISettings3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUISettings3>(m_ptr); }
};

struct IApplicationViewScaling :
	Windows::IInspectable,
	impl_IApplicationViewScaling<IApplicationViewScaling>
{
	IApplicationViewScaling(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationViewScaling>(m_ptr); }
};

struct IApplicationViewScalingStatics :
	Windows::IInspectable,
	impl_IApplicationViewScalingStatics<IApplicationViewScalingStatics>
{
	IApplicationViewScalingStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IApplicationViewScalingStatics>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Web {

struct IUriToStreamResolver :
	Windows::IInspectable,
	impl_IUriToStreamResolver<IUriToStreamResolver>
{
	IUriToStreamResolver(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IUriToStreamResolver>(m_ptr); }
};

struct IWebErrorStatics :
	Windows::IInspectable,
	impl_IWebErrorStatics<IWebErrorStatics>
{
	IWebErrorStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IWebErrorStatics>(m_ptr); }
};

}}}

namespace winrt { namespace Windows { namespace Web { namespace Http {

struct IHttpClientFactory :
	Windows::IInspectable,
	impl_IHttpClientFactory<IHttpClientFactory>
{
	IHttpClientFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpClientFactory>(m_ptr); }
};

struct IHttpClient :
	Windows::IInspectable,
	impl_IHttpClient<IHttpClient>
{
	IHttpClient(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpClient>(m_ptr); }
};

struct IHttpContent :
	Windows::IInspectable,
	impl_IHttpContent<IHttpContent>
{
	IHttpContent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpContent>(m_ptr); }
};

struct IHttpCookieManager :
	Windows::IInspectable,
	impl_IHttpCookieManager<IHttpCookieManager>
{
	IHttpCookieManager(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpCookieManager>(m_ptr); }
};

struct IHttpCookieFactory :
	Windows::IInspectable,
	impl_IHttpCookieFactory<IHttpCookieFactory>
{
	IHttpCookieFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpCookieFactory>(m_ptr); }
};

struct IHttpCookie :
	Windows::IInspectable,
	impl_IHttpCookie<IHttpCookie>
{
	IHttpCookie(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpCookie>(m_ptr); }
};

struct IHttpMethodStatics :
	Windows::IInspectable,
	impl_IHttpMethodStatics<IHttpMethodStatics>
{
	IHttpMethodStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpMethodStatics>(m_ptr); }
};

struct IHttpMethodFactory :
	Windows::IInspectable,
	impl_IHttpMethodFactory<IHttpMethodFactory>
{
	IHttpMethodFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpMethodFactory>(m_ptr); }
};

struct IHttpMethod :
	Windows::IInspectable,
	impl_IHttpMethod<IHttpMethod>
{
	IHttpMethod(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpMethod>(m_ptr); }
};

struct IHttpTransportInformation :
	Windows::IInspectable,
	impl_IHttpTransportInformation<IHttpTransportInformation>
{
	IHttpTransportInformation(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpTransportInformation>(m_ptr); }
};

struct IHttpRequestMessageFactory :
	Windows::IInspectable,
	impl_IHttpRequestMessageFactory<IHttpRequestMessageFactory>
{
	IHttpRequestMessageFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpRequestMessageFactory>(m_ptr); }
};

struct IHttpRequestMessage :
	Windows::IInspectable,
	impl_IHttpRequestMessage<IHttpRequestMessage>
{
	IHttpRequestMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpRequestMessage>(m_ptr); }
};

struct IHttpResponseMessageFactory :
	Windows::IInspectable,
	impl_IHttpResponseMessageFactory<IHttpResponseMessageFactory>
{
	IHttpResponseMessageFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpResponseMessageFactory>(m_ptr); }
};

struct IHttpResponseMessage :
	Windows::IInspectable,
	impl_IHttpResponseMessage<IHttpResponseMessage>
{
	IHttpResponseMessage(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpResponseMessage>(m_ptr); }
};

struct IHttpStringContentFactory :
	Windows::IInspectable,
	impl_IHttpStringContentFactory<IHttpStringContentFactory>
{
	IHttpStringContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpStringContentFactory>(m_ptr); }
};

struct IHttpBufferContentFactory :
	Windows::IInspectable,
	impl_IHttpBufferContentFactory<IHttpBufferContentFactory>
{
	IHttpBufferContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpBufferContentFactory>(m_ptr); }
};

struct IHttpStreamContentFactory :
	Windows::IInspectable,
	impl_IHttpStreamContentFactory<IHttpStreamContentFactory>
{
	IHttpStreamContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpStreamContentFactory>(m_ptr); }
};

struct IHttpFormUrlEncodedContentFactory :
	Windows::IInspectable,
	impl_IHttpFormUrlEncodedContentFactory<IHttpFormUrlEncodedContentFactory>
{
	IHttpFormUrlEncodedContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpFormUrlEncodedContentFactory>(m_ptr); }
};

struct IHttpMultipartContentFactory :
	Windows::IInspectable,
	impl_IHttpMultipartContentFactory<IHttpMultipartContentFactory>
{
	IHttpMultipartContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpMultipartContentFactory>(m_ptr); }
};

struct IHttpMultipartContent :
	Windows::IInspectable,
	impl_IHttpMultipartContent<IHttpMultipartContent>,
	requires<IHttpMultipartContent, Windows::Foundation::Collections::IIterable<Windows::Web::Http::IHttpContent>>
{
	IHttpMultipartContent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpMultipartContent>(m_ptr); }
};

struct IHttpMultipartFormDataContentFactory :
	Windows::IInspectable,
	impl_IHttpMultipartFormDataContentFactory<IHttpMultipartFormDataContentFactory>
{
	IHttpMultipartFormDataContentFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpMultipartFormDataContentFactory>(m_ptr); }
};

struct IHttpMultipartFormDataContent :
	Windows::IInspectable,
	impl_IHttpMultipartFormDataContent<IHttpMultipartFormDataContent>,
	requires<IHttpMultipartFormDataContent, Windows::Foundation::Collections::IIterable<Windows::Web::Http::IHttpContent>>
{
	IHttpMultipartFormDataContent(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpMultipartFormDataContent>(m_ptr); }
};

}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http { namespace Filters {

struct IHttpFilter :
	Windows::IInspectable,
	impl_IHttpFilter<IHttpFilter>
{
	IHttpFilter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpFilter>(m_ptr); }
};

struct IHttpCacheControl :
	Windows::IInspectable,
	impl_IHttpCacheControl<IHttpCacheControl>
{
	IHttpCacheControl(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpCacheControl>(m_ptr); }
};

struct IHttpBaseProtocolFilter :
	Windows::IInspectable,
	impl_IHttpBaseProtocolFilter<IHttpBaseProtocolFilter>,
	requires<IHttpBaseProtocolFilter, Windows::Web::Http::Filters::IHttpFilter>
{
	IHttpBaseProtocolFilter(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpBaseProtocolFilter>(m_ptr); }
};

struct IHttpBaseProtocolFilter2 :
	Windows::IInspectable,
	impl_IHttpBaseProtocolFilter2<IHttpBaseProtocolFilter2>,
	requires<IHttpBaseProtocolFilter2, Windows::Web::Http::Filters::IHttpFilter>
{
	IHttpBaseProtocolFilter2(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpBaseProtocolFilter2>(m_ptr); }
};

struct IHttpBaseProtocolFilter3 :
	Windows::IInspectable,
	impl_IHttpBaseProtocolFilter3<IHttpBaseProtocolFilter3>,
	requires<IHttpBaseProtocolFilter3, Windows::Web::Http::Filters::IHttpFilter>
{
	IHttpBaseProtocolFilter3(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpBaseProtocolFilter3>(m_ptr); }
};

}}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http { namespace Headers {

struct IHttpContentHeaderCollection :
	Windows::IInspectable,
	impl_IHttpContentHeaderCollection<IHttpContentHeaderCollection>,
	requires<IHttpContentHeaderCollection, Windows::Foundation::Collections::IMap<hstring, hstring>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<hstring, hstring>>>
{
	IHttpContentHeaderCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpContentHeaderCollection>(m_ptr); }
};

struct IHttpRequestHeaderCollection :
	Windows::IInspectable,
	impl_IHttpRequestHeaderCollection<IHttpRequestHeaderCollection>,
	requires<IHttpRequestHeaderCollection, Windows::Foundation::Collections::IMap<hstring, hstring>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<hstring, hstring>>>
{
	IHttpRequestHeaderCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpRequestHeaderCollection>(m_ptr); }
};

struct IHttpResponseHeaderCollection :
	Windows::IInspectable,
	impl_IHttpResponseHeaderCollection<IHttpResponseHeaderCollection>,
	requires<IHttpResponseHeaderCollection, Windows::Foundation::Collections::IMap<hstring, hstring>, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<hstring, hstring>>>
{
	IHttpResponseHeaderCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpResponseHeaderCollection>(m_ptr); }
};

struct IHttpCacheDirectiveHeaderValueCollection :
	Windows::IInspectable,
	impl_IHttpCacheDirectiveHeaderValueCollection<IHttpCacheDirectiveHeaderValueCollection>,
	requires<IHttpCacheDirectiveHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpNameValueHeaderValue>>
{
	IHttpCacheDirectiveHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpCacheDirectiveHeaderValueCollection>(m_ptr); }
};

struct IHttpChallengeHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpChallengeHeaderValueStatics<IHttpChallengeHeaderValueStatics>
{
	IHttpChallengeHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpChallengeHeaderValueStatics>(m_ptr); }
};

struct IHttpChallengeHeaderValueFactory :
	Windows::IInspectable,
	impl_IHttpChallengeHeaderValueFactory<IHttpChallengeHeaderValueFactory>
{
	IHttpChallengeHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpChallengeHeaderValueFactory>(m_ptr); }
};

struct IHttpChallengeHeaderValue :
	Windows::IInspectable,
	impl_IHttpChallengeHeaderValue<IHttpChallengeHeaderValue>
{
	IHttpChallengeHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpChallengeHeaderValue>(m_ptr); }
};

struct IHttpChallengeHeaderValueCollection :
	Windows::IInspectable,
	impl_IHttpChallengeHeaderValueCollection<IHttpChallengeHeaderValueCollection>,
	requires<IHttpChallengeHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpChallengeHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpChallengeHeaderValue>>
{
	IHttpChallengeHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpChallengeHeaderValueCollection>(m_ptr); }
};

struct IHttpCredentialsHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpCredentialsHeaderValueStatics<IHttpCredentialsHeaderValueStatics>
{
	IHttpCredentialsHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpCredentialsHeaderValueStatics>(m_ptr); }
};

struct IHttpCredentialsHeaderValueFactory :
	Windows::IInspectable,
	impl_IHttpCredentialsHeaderValueFactory<IHttpCredentialsHeaderValueFactory>
{
	IHttpCredentialsHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpCredentialsHeaderValueFactory>(m_ptr); }
};

struct IHttpCredentialsHeaderValue :
	Windows::IInspectable,
	impl_IHttpCredentialsHeaderValue<IHttpCredentialsHeaderValue>
{
	IHttpCredentialsHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpCredentialsHeaderValue>(m_ptr); }
};

struct IHttpConnectionOptionHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpConnectionOptionHeaderValueStatics<IHttpConnectionOptionHeaderValueStatics>
{
	IHttpConnectionOptionHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpConnectionOptionHeaderValueStatics>(m_ptr); }
};

struct IHttpConnectionOptionHeaderValueFactory :
	Windows::IInspectable,
	impl_IHttpConnectionOptionHeaderValueFactory<IHttpConnectionOptionHeaderValueFactory>
{
	IHttpConnectionOptionHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpConnectionOptionHeaderValueFactory>(m_ptr); }
};

struct IHttpConnectionOptionHeaderValue :
	Windows::IInspectable,
	impl_IHttpConnectionOptionHeaderValue<IHttpConnectionOptionHeaderValue>
{
	IHttpConnectionOptionHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpConnectionOptionHeaderValue>(m_ptr); }
};

struct IHttpConnectionOptionHeaderValueCollection :
	Windows::IInspectable,
	impl_IHttpConnectionOptionHeaderValueCollection<IHttpConnectionOptionHeaderValueCollection>,
	requires<IHttpConnectionOptionHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue>>
{
	IHttpConnectionOptionHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpConnectionOptionHeaderValueCollection>(m_ptr); }
};

struct IHttpContentCodingHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpContentCodingHeaderValueStatics<IHttpContentCodingHeaderValueStatics>
{
	IHttpContentCodingHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpContentCodingHeaderValueStatics>(m_ptr); }
};

struct IHttpContentCodingHeaderValueFactory :
	Windows::IInspectable,
	impl_IHttpContentCodingHeaderValueFactory<IHttpContentCodingHeaderValueFactory>
{
	IHttpContentCodingHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpContentCodingHeaderValueFactory>(m_ptr); }
};

struct IHttpContentCodingHeaderValue :
	Windows::IInspectable,
	impl_IHttpContentCodingHeaderValue<IHttpContentCodingHeaderValue>
{
	IHttpContentCodingHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpContentCodingHeaderValue>(m_ptr); }
};

struct IHttpContentCodingHeaderValueCollection :
	Windows::IInspectable,
	impl_IHttpContentCodingHeaderValueCollection<IHttpContentCodingHeaderValueCollection>,
	requires<IHttpContentCodingHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpContentCodingHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpContentCodingHeaderValue>>
{
	IHttpContentCodingHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpContentCodingHeaderValueCollection>(m_ptr); }
};

struct IHttpContentDispositionHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpContentDispositionHeaderValueStatics<IHttpContentDispositionHeaderValueStatics>
{
	IHttpContentDispositionHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpContentDispositionHeaderValueStatics>(m_ptr); }
};

struct IHttpContentDispositionHeaderValueFactory :
	Windows::IInspectable,
	impl_IHttpContentDispositionHeaderValueFactory<IHttpContentDispositionHeaderValueFactory>
{
	IHttpContentDispositionHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpContentDispositionHeaderValueFactory>(m_ptr); }
};

struct IHttpContentDispositionHeaderValue :
	Windows::IInspectable,
	impl_IHttpContentDispositionHeaderValue<IHttpContentDispositionHeaderValue>
{
	IHttpContentDispositionHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpContentDispositionHeaderValue>(m_ptr); }
};

struct IHttpContentRangeHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpContentRangeHeaderValueStatics<IHttpContentRangeHeaderValueStatics>
{
	IHttpContentRangeHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpContentRangeHeaderValueStatics>(m_ptr); }
};

struct IHttpContentRangeHeaderValueFactory :
	Windows::IInspectable,
	impl_IHttpContentRangeHeaderValueFactory<IHttpContentRangeHeaderValueFactory>
{
	IHttpContentRangeHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpContentRangeHeaderValueFactory>(m_ptr); }
};

struct IHttpContentRangeHeaderValue :
	Windows::IInspectable,
	impl_IHttpContentRangeHeaderValue<IHttpContentRangeHeaderValue>
{
	IHttpContentRangeHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpContentRangeHeaderValue>(m_ptr); }
};

struct IHttpCookiePairHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpCookiePairHeaderValueStatics<IHttpCookiePairHeaderValueStatics>
{
	IHttpCookiePairHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpCookiePairHeaderValueStatics>(m_ptr); }
};

struct IHttpCookiePairHeaderValueFactory :
	Windows::IInspectable,
	impl_IHttpCookiePairHeaderValueFactory<IHttpCookiePairHeaderValueFactory>
{
	IHttpCookiePairHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpCookiePairHeaderValueFactory>(m_ptr); }
};

struct IHttpCookiePairHeaderValue :
	Windows::IInspectable,
	impl_IHttpCookiePairHeaderValue<IHttpCookiePairHeaderValue>
{
	IHttpCookiePairHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpCookiePairHeaderValue>(m_ptr); }
};

struct IHttpCookiePairHeaderValueCollection :
	Windows::IInspectable,
	impl_IHttpCookiePairHeaderValueCollection<IHttpCookiePairHeaderValueCollection>,
	requires<IHttpCookiePairHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpCookiePairHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpCookiePairHeaderValue>>
{
	IHttpCookiePairHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpCookiePairHeaderValueCollection>(m_ptr); }
};

struct IHttpDateOrDeltaHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpDateOrDeltaHeaderValueStatics<IHttpDateOrDeltaHeaderValueStatics>
{
	IHttpDateOrDeltaHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpDateOrDeltaHeaderValueStatics>(m_ptr); }
};

struct IHttpDateOrDeltaHeaderValue :
	Windows::IInspectable,
	impl_IHttpDateOrDeltaHeaderValue<IHttpDateOrDeltaHeaderValue>
{
	IHttpDateOrDeltaHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpDateOrDeltaHeaderValue>(m_ptr); }
};

struct IHttpExpectationHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpExpectationHeaderValueStatics<IHttpExpectationHeaderValueStatics>
{
	IHttpExpectationHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpExpectationHeaderValueStatics>(m_ptr); }
};

struct IHttpExpectationHeaderValueFactory :
	Windows::IInspectable,
	impl_IHttpExpectationHeaderValueFactory<IHttpExpectationHeaderValueFactory>
{
	IHttpExpectationHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpExpectationHeaderValueFactory>(m_ptr); }
};

struct IHttpExpectationHeaderValue :
	Windows::IInspectable,
	impl_IHttpExpectationHeaderValue<IHttpExpectationHeaderValue>
{
	IHttpExpectationHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpExpectationHeaderValue>(m_ptr); }
};

struct IHttpExpectationHeaderValueCollection :
	Windows::IInspectable,
	impl_IHttpExpectationHeaderValueCollection<IHttpExpectationHeaderValueCollection>,
	requires<IHttpExpectationHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpExpectationHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpExpectationHeaderValue>>
{
	IHttpExpectationHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpExpectationHeaderValueCollection>(m_ptr); }
};

struct IHttpLanguageHeaderValueCollection :
	Windows::IInspectable,
	impl_IHttpLanguageHeaderValueCollection<IHttpLanguageHeaderValueCollection>,
	requires<IHttpLanguageHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Globalization::Language>, Windows::Foundation::Collections::IIterable<Windows::Globalization::Language>>
{
	IHttpLanguageHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpLanguageHeaderValueCollection>(m_ptr); }
};

struct IHttpLanguageRangeWithQualityHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpLanguageRangeWithQualityHeaderValueStatics<IHttpLanguageRangeWithQualityHeaderValueStatics>
{
	IHttpLanguageRangeWithQualityHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpLanguageRangeWithQualityHeaderValueStatics>(m_ptr); }
};

struct IHttpLanguageRangeWithQualityHeaderValueFactory :
	Windows::IInspectable,
	impl_IHttpLanguageRangeWithQualityHeaderValueFactory<IHttpLanguageRangeWithQualityHeaderValueFactory>
{
	IHttpLanguageRangeWithQualityHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpLanguageRangeWithQualityHeaderValueFactory>(m_ptr); }
};

struct IHttpLanguageRangeWithQualityHeaderValue :
	Windows::IInspectable,
	impl_IHttpLanguageRangeWithQualityHeaderValue<IHttpLanguageRangeWithQualityHeaderValue>
{
	IHttpLanguageRangeWithQualityHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpLanguageRangeWithQualityHeaderValue>(m_ptr); }
};

struct IHttpLanguageRangeWithQualityHeaderValueCollection :
	Windows::IInspectable,
	impl_IHttpLanguageRangeWithQualityHeaderValueCollection<IHttpLanguageRangeWithQualityHeaderValueCollection>,
	requires<IHttpLanguageRangeWithQualityHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue>>
{
	IHttpLanguageRangeWithQualityHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpLanguageRangeWithQualityHeaderValueCollection>(m_ptr); }
};

struct IHttpMediaTypeHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpMediaTypeHeaderValueStatics<IHttpMediaTypeHeaderValueStatics>
{
	IHttpMediaTypeHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpMediaTypeHeaderValueStatics>(m_ptr); }
};

struct IHttpMediaTypeHeaderValueFactory :
	Windows::IInspectable,
	impl_IHttpMediaTypeHeaderValueFactory<IHttpMediaTypeHeaderValueFactory>
{
	IHttpMediaTypeHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpMediaTypeHeaderValueFactory>(m_ptr); }
};

struct IHttpMediaTypeHeaderValue :
	Windows::IInspectable,
	impl_IHttpMediaTypeHeaderValue<IHttpMediaTypeHeaderValue>
{
	IHttpMediaTypeHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpMediaTypeHeaderValue>(m_ptr); }
};

struct IHttpMediaTypeWithQualityHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpMediaTypeWithQualityHeaderValueStatics<IHttpMediaTypeWithQualityHeaderValueStatics>
{
	IHttpMediaTypeWithQualityHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpMediaTypeWithQualityHeaderValueStatics>(m_ptr); }
};

struct IHttpMediaTypeWithQualityHeaderValueFactory :
	Windows::IInspectable,
	impl_IHttpMediaTypeWithQualityHeaderValueFactory<IHttpMediaTypeWithQualityHeaderValueFactory>
{
	IHttpMediaTypeWithQualityHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpMediaTypeWithQualityHeaderValueFactory>(m_ptr); }
};

struct IHttpMediaTypeWithQualityHeaderValue :
	Windows::IInspectable,
	impl_IHttpMediaTypeWithQualityHeaderValue<IHttpMediaTypeWithQualityHeaderValue>
{
	IHttpMediaTypeWithQualityHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpMediaTypeWithQualityHeaderValue>(m_ptr); }
};

struct IHttpMediaTypeWithQualityHeaderValueCollection :
	Windows::IInspectable,
	impl_IHttpMediaTypeWithQualityHeaderValueCollection<IHttpMediaTypeWithQualityHeaderValueCollection>,
	requires<IHttpMediaTypeWithQualityHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue>>
{
	IHttpMediaTypeWithQualityHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpMediaTypeWithQualityHeaderValueCollection>(m_ptr); }
};

struct IHttpMethodHeaderValueCollection :
	Windows::IInspectable,
	impl_IHttpMethodHeaderValueCollection<IHttpMethodHeaderValueCollection>,
	requires<IHttpMethodHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::HttpMethod>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::HttpMethod>>
{
	IHttpMethodHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpMethodHeaderValueCollection>(m_ptr); }
};

struct IHttpNameValueHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpNameValueHeaderValueStatics<IHttpNameValueHeaderValueStatics>
{
	IHttpNameValueHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpNameValueHeaderValueStatics>(m_ptr); }
};

struct IHttpNameValueHeaderValueFactory :
	Windows::IInspectable,
	impl_IHttpNameValueHeaderValueFactory<IHttpNameValueHeaderValueFactory>
{
	IHttpNameValueHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpNameValueHeaderValueFactory>(m_ptr); }
};

struct IHttpNameValueHeaderValue :
	Windows::IInspectable,
	impl_IHttpNameValueHeaderValue<IHttpNameValueHeaderValue>
{
	IHttpNameValueHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpNameValueHeaderValue>(m_ptr); }
};

struct IHttpProductHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpProductHeaderValueStatics<IHttpProductHeaderValueStatics>
{
	IHttpProductHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpProductHeaderValueStatics>(m_ptr); }
};

struct IHttpProductHeaderValueFactory :
	Windows::IInspectable,
	impl_IHttpProductHeaderValueFactory<IHttpProductHeaderValueFactory>
{
	IHttpProductHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpProductHeaderValueFactory>(m_ptr); }
};

struct IHttpProductHeaderValue :
	Windows::IInspectable,
	impl_IHttpProductHeaderValue<IHttpProductHeaderValue>
{
	IHttpProductHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpProductHeaderValue>(m_ptr); }
};

struct IHttpProductInfoHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpProductInfoHeaderValueStatics<IHttpProductInfoHeaderValueStatics>
{
	IHttpProductInfoHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpProductInfoHeaderValueStatics>(m_ptr); }
};

struct IHttpProductInfoHeaderValueFactory :
	Windows::IInspectable,
	impl_IHttpProductInfoHeaderValueFactory<IHttpProductInfoHeaderValueFactory>
{
	IHttpProductInfoHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpProductInfoHeaderValueFactory>(m_ptr); }
};

struct IHttpProductInfoHeaderValue :
	Windows::IInspectable,
	impl_IHttpProductInfoHeaderValue<IHttpProductInfoHeaderValue>
{
	IHttpProductInfoHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpProductInfoHeaderValue>(m_ptr); }
};

struct IHttpProductInfoHeaderValueCollection :
	Windows::IInspectable,
	impl_IHttpProductInfoHeaderValueCollection<IHttpProductInfoHeaderValueCollection>,
	requires<IHttpProductInfoHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpProductInfoHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpProductInfoHeaderValue>>
{
	IHttpProductInfoHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpProductInfoHeaderValueCollection>(m_ptr); }
};

struct IHttpContentCodingWithQualityHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpContentCodingWithQualityHeaderValueStatics<IHttpContentCodingWithQualityHeaderValueStatics>
{
	IHttpContentCodingWithQualityHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpContentCodingWithQualityHeaderValueStatics>(m_ptr); }
};

struct IHttpContentCodingWithQualityHeaderValueFactory :
	Windows::IInspectable,
	impl_IHttpContentCodingWithQualityHeaderValueFactory<IHttpContentCodingWithQualityHeaderValueFactory>
{
	IHttpContentCodingWithQualityHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpContentCodingWithQualityHeaderValueFactory>(m_ptr); }
};

struct IHttpContentCodingWithQualityHeaderValue :
	Windows::IInspectable,
	impl_IHttpContentCodingWithQualityHeaderValue<IHttpContentCodingWithQualityHeaderValue>
{
	IHttpContentCodingWithQualityHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpContentCodingWithQualityHeaderValue>(m_ptr); }
};

struct IHttpContentCodingWithQualityHeaderValueCollection :
	Windows::IInspectable,
	impl_IHttpContentCodingWithQualityHeaderValueCollection<IHttpContentCodingWithQualityHeaderValueCollection>,
	requires<IHttpContentCodingWithQualityHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue>>
{
	IHttpContentCodingWithQualityHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpContentCodingWithQualityHeaderValueCollection>(m_ptr); }
};

struct IHttpTransferCodingHeaderValueStatics :
	Windows::IInspectable,
	impl_IHttpTransferCodingHeaderValueStatics<IHttpTransferCodingHeaderValueStatics>
{
	IHttpTransferCodingHeaderValueStatics(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpTransferCodingHeaderValueStatics>(m_ptr); }
};

struct IHttpTransferCodingHeaderValueFactory :
	Windows::IInspectable,
	impl_IHttpTransferCodingHeaderValueFactory<IHttpTransferCodingHeaderValueFactory>
{
	IHttpTransferCodingHeaderValueFactory(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpTransferCodingHeaderValueFactory>(m_ptr); }
};

struct IHttpTransferCodingHeaderValue :
	Windows::IInspectable,
	impl_IHttpTransferCodingHeaderValue<IHttpTransferCodingHeaderValue>
{
	IHttpTransferCodingHeaderValue(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpTransferCodingHeaderValue>(m_ptr); }
};

struct IHttpTransferCodingHeaderValueCollection :
	Windows::IInspectable,
	impl_IHttpTransferCodingHeaderValueCollection<IHttpTransferCodingHeaderValueCollection>,
	requires<IHttpTransferCodingHeaderValueCollection, Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpTransferCodingHeaderValue>, Windows::Foundation::Collections::IIterable<Windows::Web::Http::Headers::HttpTransferCodingHeaderValue>>
{
	IHttpTransferCodingHeaderValueCollection(std::nullptr_t = nullptr) noexcept {}
	auto operator->() const noexcept { return ptr<IHttpTransferCodingHeaderValueCollection>(m_ptr); }
};

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel {

struct AppDisplayInfo :
	Windows::ApplicationModel::IAppDisplayInfo
{
	AppDisplayInfo(std::nullptr_t) noexcept {}
};

struct SuspendingEventArgs :
	Windows::ApplicationModel::ISuspendingEventArgs
{
	SuspendingEventArgs(std::nullptr_t) noexcept {}
};

struct AppInfo :
	Windows::ApplicationModel::IAppInfo
{
	AppInfo(std::nullptr_t) noexcept {}
};

struct SuspendingDeferral :
	Windows::ApplicationModel::ISuspendingDeferral
{
	SuspendingDeferral(std::nullptr_t) noexcept {}
};

struct SuspendingOperation :
	Windows::ApplicationModel::ISuspendingOperation
{
	SuspendingOperation(std::nullptr_t) noexcept {}
};

struct PackageStatus :
	Windows::ApplicationModel::IPackageStatus
{
	PackageStatus(std::nullptr_t) noexcept {}
};

struct PackageId :
	Windows::ApplicationModel::IPackageId,
	requires<PackageId, Windows::ApplicationModel::IPackageIdWithMetadata>
{
	PackageId(std::nullptr_t) noexcept {}
};

struct Package :
	Windows::ApplicationModel::IPackage,
	requires<Package, Windows::ApplicationModel::IPackage2, Windows::ApplicationModel::IPackage3, Windows::ApplicationModel::IPackageWithMetadata>
{
	Package(std::nullptr_t) noexcept {}
	static Windows::ApplicationModel::Package Current();
};

struct DesignMode
{
	DesignMode() = delete;
	static bool DesignModeEnabled();
};

}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Activation {

struct SplashScreen :
	Windows::ApplicationModel::Activation::ISplashScreen
{
	SplashScreen(std::nullptr_t) noexcept {}
};

struct LaunchActivatedEventArgs :
	Windows::ApplicationModel::Activation::ILaunchActivatedEventArgs,
	requires<LaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IPrelaunchActivatedEventArgs, Windows::ApplicationModel::Activation::IViewSwitcherProvider>
{
	LaunchActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct SearchActivatedEventArgs :
	Windows::ApplicationModel::Activation::ISearchActivatedEventArgs,
	requires<SearchActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::ISearchActivatedEventArgsWithLinguisticDetails, Windows::ApplicationModel::Activation::IViewSwitcherProvider>
{
	SearchActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ShareTargetActivatedEventArgs :
	Windows::ApplicationModel::Activation::IShareTargetActivatedEventArgs
{
	ShareTargetActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct FileActivatedEventArgs :
	Windows::ApplicationModel::Activation::IFileActivatedEventArgs,
	requires<FileActivatedEventArgs, Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithNeighboringFiles, Windows::ApplicationModel::Activation::IFileActivatedEventArgsWithCallerPackageFamilyName, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IViewSwitcherProvider>
{
	FileActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ProtocolActivatedEventArgs :
	Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs,
	requires<ProtocolActivatedEventArgs, Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IViewSwitcherProvider>
{
	ProtocolActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ProtocolForResultsActivatedEventArgs :
	Windows::ApplicationModel::Activation::IProtocolForResultsActivatedEventArgs,
	requires<ProtocolForResultsActivatedEventArgs, Windows::ApplicationModel::Activation::IProtocolActivatedEventArgs, Windows::ApplicationModel::Activation::IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IViewSwitcherProvider>
{
	ProtocolForResultsActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct FileOpenPickerActivatedEventArgs :
	Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs,
	requires<FileOpenPickerActivatedEventArgs, Windows::ApplicationModel::Activation::IFileOpenPickerActivatedEventArgs2>
{
	FileOpenPickerActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct FileSavePickerActivatedEventArgs :
	Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs,
	requires<FileSavePickerActivatedEventArgs, Windows::ApplicationModel::Activation::IFileSavePickerActivatedEventArgs2>
{
	FileSavePickerActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct CachedFileUpdaterActivatedEventArgs :
	Windows::ApplicationModel::Activation::ICachedFileUpdaterActivatedEventArgs
{
	CachedFileUpdaterActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactPickerActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactPickerActivatedEventArgs
{
	ContactPickerActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct DeviceActivatedEventArgs :
	Windows::ApplicationModel::Activation::IDeviceActivatedEventArgs,
	requires<DeviceActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IViewSwitcherProvider>
{
	DeviceActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct PrintTaskSettingsActivatedEventArgs :
	Windows::ApplicationModel::Activation::IPrintTaskSettingsActivatedEventArgs
{
	PrintTaskSettingsActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct Print3DWorkflowActivatedEventArgs :
	Windows::ApplicationModel::Activation::IPrint3DWorkflowActivatedEventArgs
{
	Print3DWorkflowActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct CameraSettingsActivatedEventArgs :
	Windows::ApplicationModel::Activation::ICameraSettingsActivatedEventArgs
{
	CameraSettingsActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct AppointmentsProviderAddAppointmentActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderAddAppointmentActivatedEventArgs
{
	AppointmentsProviderAddAppointmentActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct AppointmentsProviderReplaceAppointmentActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderReplaceAppointmentActivatedEventArgs
{
	AppointmentsProviderReplaceAppointmentActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct AppointmentsProviderRemoveAppointmentActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderRemoveAppointmentActivatedEventArgs
{
	AppointmentsProviderRemoveAppointmentActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct AppointmentsProviderShowAppointmentDetailsActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs
{
	AppointmentsProviderShowAppointmentDetailsActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct AppointmentsProviderShowTimeFrameActivatedEventArgs :
	Windows::ApplicationModel::Activation::IAppointmentsProviderShowTimeFrameActivatedEventArgs
{
	AppointmentsProviderShowTimeFrameActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactCallActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactCallActivatedEventArgs
{
	ContactCallActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactMessageActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactMessageActivatedEventArgs
{
	ContactMessageActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactMapActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactMapActivatedEventArgs
{
	ContactMapActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactPostActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactPostActivatedEventArgs
{
	ContactPostActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactVideoCallActivatedEventArgs :
	Windows::ApplicationModel::Activation::IContactVideoCallActivatedEventArgs
{
	ContactVideoCallActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct RestrictedLaunchActivatedEventArgs :
	Windows::ApplicationModel::Activation::IRestrictedLaunchActivatedEventArgs
{
	RestrictedLaunchActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct LockScreenCallActivatedEventArgs :
	Windows::ApplicationModel::Activation::ILockScreenCallActivatedEventArgs,
	requires<LockScreenCallActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IViewSwitcherProvider>
{
	LockScreenCallActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct LockScreenActivatedEventArgs :
	Windows::ApplicationModel::Activation::ILockScreenActivatedEventArgs
{
	LockScreenActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct FileOpenPickerContinuationEventArgs :
	Windows::ApplicationModel::Activation::IFileOpenPickerContinuationEventArgs
{
	FileOpenPickerContinuationEventArgs(std::nullptr_t) noexcept {}
};

struct FileSavePickerContinuationEventArgs :
	Windows::ApplicationModel::Activation::IFileSavePickerContinuationEventArgs
{
	FileSavePickerContinuationEventArgs(std::nullptr_t) noexcept {}
};

struct FolderPickerContinuationEventArgs :
	Windows::ApplicationModel::Activation::IFolderPickerContinuationEventArgs
{
	FolderPickerContinuationEventArgs(std::nullptr_t) noexcept {}
};

struct WebAccountProviderActivatedEventArgs :
	Windows::ApplicationModel::Activation::IWebAccountProviderActivatedEventArgs
{
	WebAccountProviderActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct ToastNotificationActivatedEventArgs :
	Windows::ApplicationModel::Activation::IToastNotificationActivatedEventArgs
{
	ToastNotificationActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct DialReceiverActivatedEventArgs :
	Windows::ApplicationModel::Activation::IDialReceiverActivatedEventArgs,
	requires<DialReceiverActivatedEventArgs, Windows::ApplicationModel::Activation::IApplicationViewActivatedEventArgs, Windows::ApplicationModel::Activation::IViewSwitcherProvider>
{
	DialReceiverActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct DevicePairingActivatedEventArgs :
	Windows::ApplicationModel::Activation::IDevicePairingActivatedEventArgs
{
	DevicePairingActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct VoiceCommandActivatedEventArgs :
	Windows::ApplicationModel::Activation::IVoiceCommandActivatedEventArgs
{
	VoiceCommandActivatedEventArgs(std::nullptr_t) noexcept {}
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Appointments {

struct Appointment :
	Windows::ApplicationModel::Appointments::IAppointment,
	requires<Appointment, Windows::ApplicationModel::Appointments::IAppointment2, Windows::ApplicationModel::Appointments::IAppointment3>
{
	Appointment(std::nullptr_t) noexcept {}
	Appointment();
};

struct AppointmentStore :
	Windows::ApplicationModel::Appointments::IAppointmentStore,
	requires<AppointmentStore, Windows::ApplicationModel::Appointments::IAppointmentStore2>
{
	AppointmentStore(std::nullptr_t) noexcept {}
	using impl_IAppointmentStore::CreateAppointmentCalendarAsync;
	using impl_IAppointmentStore2::CreateAppointmentCalendarAsync;
};

struct AppointmentOrganizer :
	Windows::ApplicationModel::Appointments::IAppointmentParticipant
{
	AppointmentOrganizer(std::nullptr_t) noexcept {}
	AppointmentOrganizer();
};

struct AppointmentInvitee :
	Windows::ApplicationModel::Appointments::IAppointmentInvitee
{
	AppointmentInvitee(std::nullptr_t) noexcept {}
	AppointmentInvitee();
};

struct AppointmentRecurrence :
	Windows::ApplicationModel::Appointments::IAppointmentRecurrence,
	requires<AppointmentRecurrence, Windows::ApplicationModel::Appointments::IAppointmentRecurrence2, Windows::ApplicationModel::Appointments::IAppointmentRecurrence3>
{
	AppointmentRecurrence(std::nullptr_t) noexcept {}
	AppointmentRecurrence();
};

struct AppointmentManager
{
	AppointmentManager() = delete;
	static Windows::Foundation::IAsyncAction ShowAppointmentDetailsAsync(hstring_ref appointmentId);
	static Windows::Foundation::IAsyncAction ShowAppointmentDetailsAsync(hstring_ref appointmentId, Windows::Foundation::DateTime const & instanceStartDate);
	static Windows::Foundation::IAsyncOperation<hstring> ShowEditNewAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment);
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentStore> RequestStoreAsync(Windows::ApplicationModel::Appointments::AppointmentStoreAccessType options);
	static Windows::Foundation::IAsyncOperation<hstring> ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection);
	static Windows::Foundation::IAsyncOperation<hstring> ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
	static Windows::Foundation::IAsyncOperation<hstring> ShowReplaceAppointmentAsync(hstring_ref appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection);
	static Windows::Foundation::IAsyncOperation<hstring> ShowReplaceAppointmentAsync(hstring_ref appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
	static Windows::Foundation::IAsyncOperation<hstring> ShowReplaceAppointmentAsync(hstring_ref appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate);
	static Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(hstring_ref appointmentId, Windows::Foundation::Rect const & selection);
	static Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(hstring_ref appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
	static Windows::Foundation::IAsyncOperation<bool> ShowRemoveAppointmentAsync(hstring_ref appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate);
	static Windows::Foundation::IAsyncAction ShowTimeFrameAsync(Windows::Foundation::DateTime const & timeToShow, Windows::Foundation::TimeSpan const & duration);
};

struct FindAppointmentsOptions :
	Windows::ApplicationModel::Appointments::IFindAppointmentsOptions
{
	FindAppointmentsOptions(std::nullptr_t) noexcept {}
	FindAppointmentsOptions();
};

struct AppointmentException :
	Windows::ApplicationModel::Appointments::IAppointmentException
{
	AppointmentException(std::nullptr_t) noexcept {}
};

struct AppointmentCalendarSyncManager :
	Windows::ApplicationModel::Appointments::IAppointmentCalendarSyncManager
{
	AppointmentCalendarSyncManager(std::nullptr_t) noexcept {}
};

struct AppointmentCalendar :
	Windows::ApplicationModel::Appointments::IAppointmentCalendar,
	requires<AppointmentCalendar, Windows::ApplicationModel::Appointments::IAppointmentCalendar2>
{
	AppointmentCalendar(std::nullptr_t) noexcept {}
	using impl_IAppointmentCalendar::DisplayColor;
	using impl_IAppointmentCalendar::IsHidden;
	using impl_IAppointmentCalendar2::DisplayColor;
	using impl_IAppointmentCalendar2::IsHidden;
};

struct AppointmentStoreChange :
	Windows::ApplicationModel::Appointments::IAppointmentStoreChange,
	requires<AppointmentStoreChange, Windows::ApplicationModel::Appointments::IAppointmentStoreChange2>
{
	AppointmentStoreChange(std::nullptr_t) noexcept {}
};

struct AppointmentStoreChangeReader :
	Windows::ApplicationModel::Appointments::IAppointmentStoreChangeReader
{
	AppointmentStoreChangeReader(std::nullptr_t) noexcept {}
};

struct AppointmentStoreChangedDeferral :
	Windows::ApplicationModel::Appointments::IAppointmentStoreChangedDeferral
{
	AppointmentStoreChangedDeferral(std::nullptr_t) noexcept {}
};

struct AppointmentStoreChangeTracker :
	Windows::ApplicationModel::Appointments::IAppointmentStoreChangeTracker
{
	AppointmentStoreChangeTracker(std::nullptr_t) noexcept {}
};

struct AppointmentConflictResult :
	Windows::ApplicationModel::Appointments::IAppointmentConflictResult
{
	AppointmentConflictResult(std::nullptr_t) noexcept {}
};

struct AppointmentStoreChangedEventArgs :
	Windows::ApplicationModel::Appointments::IAppointmentStoreChangedEventArgs
{
	AppointmentStoreChangedEventArgs(std::nullptr_t) noexcept {}
};

struct AppointmentProperties
{
	AppointmentProperties() = delete;
	static hstring ChangeNumber();
	static hstring RemoteChangeNumber();
	static hstring DetailsKind();
	static hstring Subject();
	static hstring Location();
	static hstring StartTime();
	static hstring Duration();
	static hstring Reminder();
	static hstring BusyStatus();
	static hstring Sensitivity();
	static hstring OriginalStartTime();
	static hstring IsResponseRequested();
	static hstring AllowNewTimeProposal();
	static hstring AllDay();
	static hstring Details();
	static hstring OnlineMeetingLink();
	static hstring ReplyTime();
	static hstring Organizer();
	static hstring UserResponse();
	static hstring HasInvitees();
	static hstring IsCanceledMeeting();
	static hstring IsOrganizedByUser();
	static hstring Recurrence();
	static hstring Uri();
	static hstring Invitees();
	static Windows::Foundation::Collections::IVector<hstring> DefaultProperties();
};

struct AppointmentStoreNotificationTriggerDetails :
	Windows::ApplicationModel::Appointments::IAppointmentStoreNotificationTriggerDetails
{
	AppointmentStoreNotificationTriggerDetails(std::nullptr_t) noexcept {}
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

struct AppointmentsProviderLaunchActionVerbs
{
	AppointmentsProviderLaunchActionVerbs() = delete;
	static hstring AddAppointment();
	static hstring ReplaceAppointment();
	static hstring RemoveAppointment();
	static hstring ShowTimeFrame();
	static hstring ShowAppointmentDetails();
};

struct AddAppointmentOperation :
	Windows::ApplicationModel::Appointments::AppointmentsProvider::IAddAppointmentOperation
{
	AddAppointmentOperation(std::nullptr_t) noexcept {}
};

struct ReplaceAppointmentOperation :
	Windows::ApplicationModel::Appointments::AppointmentsProvider::IReplaceAppointmentOperation
{
	ReplaceAppointmentOperation(std::nullptr_t) noexcept {}
};

struct RemoveAppointmentOperation :
	Windows::ApplicationModel::Appointments::AppointmentsProvider::IRemoveAppointmentOperation
{
	RemoveAppointmentOperation(std::nullptr_t) noexcept {}
};

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Background {

struct AlarmApplicationManager
{
	AlarmApplicationManager() = delete;
	static Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::AlarmAccessStatus> RequestAccessAsync();
	static Windows::ApplicationModel::Background::AlarmAccessStatus GetAccessStatus();
};

struct AppointmentStoreNotificationTrigger :
	Windows::ApplicationModel::Background::IAppointmentStoreNotificationTrigger
{
	AppointmentStoreNotificationTrigger(std::nullptr_t) noexcept {}
	AppointmentStoreNotificationTrigger();
};

struct ApplicationTrigger :
	Windows::ApplicationModel::Background::IApplicationTrigger
{
	ApplicationTrigger(std::nullptr_t) noexcept {}
	ApplicationTrigger();
};

struct ApplicationTriggerDetails :
	Windows::ApplicationModel::Background::IApplicationTriggerDetails
{
	ApplicationTriggerDetails(std::nullptr_t) noexcept {}
};

struct BackgroundExecutionManager
{
	BackgroundExecutionManager() = delete;
	static Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::BackgroundAccessStatus> RequestAccessAsync();
	static Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::BackgroundAccessStatus> RequestAccessAsync(hstring_ref applicationId);
	static void RemoveAccess();
	static void RemoveAccess(hstring_ref applicationId);
	static Windows::ApplicationModel::Background::BackgroundAccessStatus GetAccessStatus();
	static Windows::ApplicationModel::Background::BackgroundAccessStatus GetAccessStatus(hstring_ref applicationId);
};

struct MediaProcessingTrigger :
	Windows::ApplicationModel::Background::IMediaProcessingTrigger
{
	MediaProcessingTrigger(std::nullptr_t) noexcept {}
	MediaProcessingTrigger();
};

struct BackgroundTaskRegistration :
	Windows::ApplicationModel::Background::IBackgroundTaskRegistration,
	requires<BackgroundTaskRegistration, Windows::ApplicationModel::Background::IBackgroundTaskRegistration2>
{
	BackgroundTaskRegistration(std::nullptr_t) noexcept {}
	static Windows::Foundation::Collections::IMapView<GUID, Windows::ApplicationModel::Background::IBackgroundTaskRegistration> AllTasks();
};

struct BackgroundTaskDeferral :
	Windows::ApplicationModel::Background::IBackgroundTaskDeferral
{
	BackgroundTaskDeferral(std::nullptr_t) noexcept {}
};

struct BackgroundTaskProgressEventArgs :
	Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs
{
	BackgroundTaskProgressEventArgs(std::nullptr_t) noexcept {}
};

struct BackgroundTaskCompletedEventArgs :
	Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs
{
	BackgroundTaskCompletedEventArgs(std::nullptr_t) noexcept {}
};

struct BackgroundTaskBuilder :
	Windows::ApplicationModel::Background::IBackgroundTaskBuilder,
	requires<BackgroundTaskBuilder, Windows::ApplicationModel::Background::IBackgroundTaskBuilder2, Windows::ApplicationModel::Background::IBackgroundTaskBuilder3>
{
	BackgroundTaskBuilder(std::nullptr_t) noexcept {}
	BackgroundTaskBuilder();
};

struct BackgroundWorkCost
{
	BackgroundWorkCost() = delete;
	static Windows::ApplicationModel::Background::BackgroundWorkCostValue CurrentBackgroundWorkCost();
};

struct ChatMessageNotificationTrigger :
	Windows::ApplicationModel::Background::IChatMessageNotificationTrigger
{
	ChatMessageNotificationTrigger(std::nullptr_t) noexcept {}
	ChatMessageNotificationTrigger();
};

struct ChatMessageReceivedNotificationTrigger :
	Windows::ApplicationModel::Background::IChatMessageReceivedNotificationTrigger
{
	ChatMessageReceivedNotificationTrigger(std::nullptr_t) noexcept {}
	ChatMessageReceivedNotificationTrigger();
};

struct RcsEndUserMessageAvailableTrigger :
	Windows::ApplicationModel::Background::IRcsEndUserMessageAvailableTrigger
{
	RcsEndUserMessageAvailableTrigger(std::nullptr_t) noexcept {}
	RcsEndUserMessageAvailableTrigger();
};

struct ContactStoreNotificationTrigger :
	Windows::ApplicationModel::Background::IContactStoreNotificationTrigger
{
	ContactStoreNotificationTrigger(std::nullptr_t) noexcept {}
	ContactStoreNotificationTrigger();
};

struct ContentPrefetchTrigger :
	Windows::ApplicationModel::Background::IContentPrefetchTrigger
{
	ContentPrefetchTrigger(std::nullptr_t) noexcept {}
	ContentPrefetchTrigger();
	ContentPrefetchTrigger(Windows::Foundation::TimeSpan const & waitInterval);
};

struct EmailStoreNotificationTrigger :
	Windows::ApplicationModel::Background::IEmailStoreNotificationTrigger
{
	EmailStoreNotificationTrigger(std::nullptr_t) noexcept {}
	EmailStoreNotificationTrigger();
};

struct MobileBroadbandRegistrationStateChangeTrigger :
	Windows::ApplicationModel::Background::IBackgroundTrigger
{
	MobileBroadbandRegistrationStateChangeTrigger(std::nullptr_t) noexcept {}
	MobileBroadbandRegistrationStateChangeTrigger();
};

struct MobileBroadbandRadioStateChangeTrigger :
	Windows::ApplicationModel::Background::IBackgroundTrigger
{
	MobileBroadbandRadioStateChangeTrigger(std::nullptr_t) noexcept {}
	MobileBroadbandRadioStateChangeTrigger();
};

struct MobileBroadbandPinLockStateChangeTrigger :
	Windows::ApplicationModel::Background::IBackgroundTrigger
{
	MobileBroadbandPinLockStateChangeTrigger(std::nullptr_t) noexcept {}
	MobileBroadbandPinLockStateChangeTrigger();
};

struct MobileBroadbandDeviceServiceNotificationTrigger :
	Windows::ApplicationModel::Background::IBackgroundTrigger
{
	MobileBroadbandDeviceServiceNotificationTrigger(std::nullptr_t) noexcept {}
	MobileBroadbandDeviceServiceNotificationTrigger();
};

struct SmsMessageReceivedTrigger :
	Windows::ApplicationModel::Background::IBackgroundTrigger
{
	SmsMessageReceivedTrigger(std::nullptr_t) noexcept {}
	SmsMessageReceivedTrigger(Windows::Devices::Sms::SmsFilterRules const & filterRules);
};

struct StorageLibraryContentChangedTrigger :
	Windows::ApplicationModel::Background::IStorageLibraryContentChangedTrigger
{
	StorageLibraryContentChangedTrigger(std::nullptr_t) noexcept {}
	static Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger Create(Windows::Storage::StorageLibrary const & storageLibrary);
	static Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger CreateFromLibraries(Windows::Foundation::Collections::IIterable<Windows::Storage::StorageLibrary> const & storageLibraries);
};

struct SystemTrigger :
	Windows::ApplicationModel::Background::ISystemTrigger
{
	SystemTrigger(std::nullptr_t) noexcept {}
	SystemTrigger(Windows::ApplicationModel::Background::SystemTriggerType triggerType, bool oneShot);
};

struct SystemCondition :
	Windows::ApplicationModel::Background::ISystemCondition
{
	SystemCondition(std::nullptr_t) noexcept {}
	SystemCondition(Windows::ApplicationModel::Background::SystemConditionType conditionType);
};

struct NetworkOperatorNotificationTrigger :
	Windows::ApplicationModel::Background::INetworkOperatorNotificationTrigger
{
	NetworkOperatorNotificationTrigger(std::nullptr_t) noexcept {}
	NetworkOperatorNotificationTrigger(hstring_ref networkAccountId);
};

struct CachedFileUpdaterTriggerDetails :
	Windows::ApplicationModel::Background::ICachedFileUpdaterTriggerDetails
{
	CachedFileUpdaterTriggerDetails(std::nullptr_t) noexcept {}
};

struct CachedFileUpdaterTrigger :
	Windows::ApplicationModel::Background::ICachedFileUpdaterTrigger
{
	CachedFileUpdaterTrigger(std::nullptr_t) noexcept {}
	CachedFileUpdaterTrigger();
};

struct TimeTrigger :
	Windows::ApplicationModel::Background::ITimeTrigger
{
	TimeTrigger(std::nullptr_t) noexcept {}
	TimeTrigger(unsigned freshnessTime, bool oneShot);
};

struct MaintenanceTrigger :
	Windows::ApplicationModel::Background::IMaintenanceTrigger
{
	MaintenanceTrigger(std::nullptr_t) noexcept {}
	MaintenanceTrigger(unsigned freshnessTime, bool oneShot);
};

struct PhoneTrigger :
	Windows::ApplicationModel::Background::IPhoneTrigger
{
	PhoneTrigger(std::nullptr_t) noexcept {}
	PhoneTrigger(Windows::ApplicationModel::Calls::Background::PhoneTriggerType type, bool oneShot);
};

struct DeviceUseTrigger :
	Windows::ApplicationModel::Background::IDeviceUseTrigger
{
	DeviceUseTrigger(std::nullptr_t) noexcept {}
	DeviceUseTrigger();
};

struct DeviceServicingTrigger :
	Windows::ApplicationModel::Background::IDeviceServicingTrigger
{
	DeviceServicingTrigger(std::nullptr_t) noexcept {}
	DeviceServicingTrigger();
};

struct RfcommConnectionTrigger :
	Windows::ApplicationModel::Background::IRfcommConnectionTrigger
{
	RfcommConnectionTrigger(std::nullptr_t) noexcept {}
	RfcommConnectionTrigger();
};

struct DeviceConnectionChangeTrigger :
	Windows::ApplicationModel::Background::IDeviceConnectionChangeTrigger
{
	DeviceConnectionChangeTrigger(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Background::DeviceConnectionChangeTrigger> FromIdAsync(hstring_ref deviceId);
};

struct GattCharacteristicNotificationTrigger :
	Windows::ApplicationModel::Background::IGattCharacteristicNotificationTrigger
{
	GattCharacteristicNotificationTrigger(std::nullptr_t) noexcept {}
	GattCharacteristicNotificationTrigger(Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic const & characteristic);
};

struct BluetoothLEAdvertisementWatcherTrigger :
	Windows::ApplicationModel::Background::IBluetoothLEAdvertisementWatcherTrigger
{
	BluetoothLEAdvertisementWatcherTrigger(std::nullptr_t) noexcept {}
	BluetoothLEAdvertisementWatcherTrigger();
};

struct BluetoothLEAdvertisementPublisherTrigger :
	Windows::ApplicationModel::Background::IBluetoothLEAdvertisementPublisherTrigger
{
	BluetoothLEAdvertisementPublisherTrigger(std::nullptr_t) noexcept {}
	BluetoothLEAdvertisementPublisherTrigger();
};

struct DeviceWatcherTrigger :
	Windows::ApplicationModel::Background::IDeviceWatcherTrigger
{
	DeviceWatcherTrigger(std::nullptr_t) noexcept {}
};

struct LocationTrigger :
	Windows::ApplicationModel::Background::ILocationTrigger
{
	LocationTrigger(std::nullptr_t) noexcept {}
	LocationTrigger(Windows::ApplicationModel::Background::LocationTriggerType triggerType);
};

struct ActivitySensorTrigger :
	Windows::ApplicationModel::Background::IActivitySensorTrigger
{
	ActivitySensorTrigger(std::nullptr_t) noexcept {}
	ActivitySensorTrigger(unsigned reportIntervalInMilliseconds);
};

struct SensorDataThresholdTrigger :
	Windows::ApplicationModel::Background::ISensorDataThresholdTrigger
{
	SensorDataThresholdTrigger(std::nullptr_t) noexcept {}
	SensorDataThresholdTrigger(Windows::Devices::Sensors::ISensorDataThreshold const & threshold);
};

struct NetworkOperatorHotspotAuthenticationTrigger :
	Windows::ApplicationModel::Background::INetworkOperatorHotspotAuthenticationTrigger
{
	NetworkOperatorHotspotAuthenticationTrigger(std::nullptr_t) noexcept {}
	NetworkOperatorHotspotAuthenticationTrigger();
};

struct SocketActivityTrigger :
	Windows::ApplicationModel::Background::IBackgroundTrigger
{
	SocketActivityTrigger(std::nullptr_t) noexcept {}
	SocketActivityTrigger();
};

struct PushNotificationTrigger :
	Windows::ApplicationModel::Background::IBackgroundTrigger
{
	PushNotificationTrigger(std::nullptr_t) noexcept {}
	PushNotificationTrigger();
	PushNotificationTrigger(hstring_ref applicationId);
};

struct ToastNotificationHistoryChangedTrigger :
	Windows::ApplicationModel::Background::IBackgroundTrigger
{
	ToastNotificationHistoryChangedTrigger(std::nullptr_t) noexcept {}
	ToastNotificationHistoryChangedTrigger();
	ToastNotificationHistoryChangedTrigger(hstring_ref applicationId);
};

struct ToastNotificationActionTrigger :
	Windows::ApplicationModel::Background::IBackgroundTrigger
{
	ToastNotificationActionTrigger(std::nullptr_t) noexcept {}
	ToastNotificationActionTrigger();
	ToastNotificationActionTrigger(hstring_ref applicationId);
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls {

struct PhoneCallHistoryEntryAddress :
	Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryAddress
{
	PhoneCallHistoryEntryAddress(std::nullptr_t) noexcept {}
	PhoneCallHistoryEntryAddress();
	PhoneCallHistoryEntryAddress(hstring_ref rawAddress, Windows::ApplicationModel::Calls::PhoneCallHistoryEntryRawAddressKind rawAddressKind);
};

struct PhoneCallHistoryEntry :
	Windows::ApplicationModel::Calls::IPhoneCallHistoryEntry
{
	PhoneCallHistoryEntry(std::nullptr_t) noexcept {}
	PhoneCallHistoryEntry();
};

struct PhoneCallHistoryEntryReader :
	Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryReader
{
	PhoneCallHistoryEntryReader(std::nullptr_t) noexcept {}
};

struct PhoneCallHistoryEntryQueryOptions :
	Windows::ApplicationModel::Calls::IPhoneCallHistoryEntryQueryOptions
{
	PhoneCallHistoryEntryQueryOptions(std::nullptr_t) noexcept {}
	PhoneCallHistoryEntryQueryOptions();
};

struct PhoneCallHistoryStore :
	Windows::ApplicationModel::Calls::IPhoneCallHistoryStore
{
	PhoneCallHistoryStore(std::nullptr_t) noexcept {}
};

struct PhoneCallHistoryManager
{
	PhoneCallHistoryManager() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallHistoryStore> RequestStoreAsync(Windows::ApplicationModel::Calls::PhoneCallHistoryStoreAccessType accessType);
};

struct PhoneLine :
	Windows::ApplicationModel::Calls::IPhoneLine
{
	PhoneLine(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneLine> FromIdAsync(GUID lineId);
};

struct PhoneVoicemail :
	Windows::ApplicationModel::Calls::IPhoneVoicemail
{
	PhoneVoicemail(std::nullptr_t) noexcept {}
};

struct PhoneLineCellularDetails :
	Windows::ApplicationModel::Calls::IPhoneLineCellularDetails
{
	PhoneLineCellularDetails(std::nullptr_t) noexcept {}
};

struct PhoneCallVideoCapabilities :
	Windows::ApplicationModel::Calls::IPhoneCallVideoCapabilities
{
	PhoneCallVideoCapabilities(std::nullptr_t) noexcept {}
};

struct PhoneLineConfiguration :
	Windows::ApplicationModel::Calls::IPhoneLineConfiguration
{
	PhoneLineConfiguration(std::nullptr_t) noexcept {}
};

struct PhoneDialOptions :
	Windows::ApplicationModel::Calls::IPhoneDialOptions
{
	PhoneDialOptions(std::nullptr_t) noexcept {}
	PhoneDialOptions();
};

struct PhoneLineWatcher :
	Windows::ApplicationModel::Calls::IPhoneLineWatcher
{
	PhoneLineWatcher(std::nullptr_t) noexcept {}
};

struct PhoneLineWatcherEventArgs :
	Windows::ApplicationModel::Calls::IPhoneLineWatcherEventArgs
{
	PhoneLineWatcherEventArgs(std::nullptr_t) noexcept {}
};

struct PhoneCallStore :
	Windows::ApplicationModel::Calls::IPhoneCallStore
{
	PhoneCallStore(std::nullptr_t) noexcept {}
};

struct PhoneCallManager
{
	PhoneCallManager() = delete;
	static long long CallStateChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler);
	template <typename F> static long long CallStateChanged(F handler);
	static void CallStateChanged(long long token);
	static bool IsCallActive();
	static bool IsCallIncoming();
	static void ShowPhoneCallSettingsUI();
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallStore> RequestStoreAsync();
	static void ShowPhoneCallUI(hstring_ref phoneNumber, hstring_ref displayName);
};

struct PhoneCallVideoCapabilitiesManager
{
	PhoneCallVideoCapabilitiesManager() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallVideoCapabilities> GetCapabilitiesAsync(hstring_ref phoneNumber);
};

struct PhoneCallBlocking
{
	PhoneCallBlocking() = delete;
	static bool BlockUnknownNumbers();
	static void BlockUnknownNumbers(bool value);
	static bool BlockPrivateNumbers();
	static void BlockPrivateNumbers(bool value);
	static Windows::Foundation::IAsyncOperation<bool> SetCallBlockingListAsync(Windows::Foundation::Collections::IIterable<hstring> const & phoneNumberList);
};

struct CallStateChangeEventArgs :
	Windows::ApplicationModel::Calls::ICallStateChangeEventArgs
{
	CallStateChangeEventArgs(std::nullptr_t) noexcept {}
};

struct CallAnswerEventArgs :
	Windows::ApplicationModel::Calls::ICallAnswerEventArgs
{
	CallAnswerEventArgs(std::nullptr_t) noexcept {}
};

struct CallRejectEventArgs :
	Windows::ApplicationModel::Calls::ICallRejectEventArgs
{
	CallRejectEventArgs(std::nullptr_t) noexcept {}
};

struct VoipPhoneCall :
	Windows::ApplicationModel::Calls::IVoipPhoneCall
{
	VoipPhoneCall(std::nullptr_t) noexcept {}
};

struct MuteChangeEventArgs :
	Windows::ApplicationModel::Calls::IMuteChangeEventArgs
{
	MuteChangeEventArgs(std::nullptr_t) noexcept {}
};

struct VoipCallCoordinator :
	Windows::ApplicationModel::Calls::IVoipCallCoordinator
{
	VoipCallCoordinator(std::nullptr_t) noexcept {}
	static Windows::ApplicationModel::Calls::VoipCallCoordinator GetDefault();
};

struct LockScreenCallEndCallDeferral :
	Windows::ApplicationModel::Calls::ILockScreenCallEndCallDeferral
{
	LockScreenCallEndCallDeferral(std::nullptr_t) noexcept {}
};

struct LockScreenCallUI :
	Windows::ApplicationModel::Calls::ILockScreenCallUI
{
	LockScreenCallUI(std::nullptr_t) noexcept {}
};

struct LockScreenCallEndRequestedEventArgs :
	Windows::ApplicationModel::Calls::ILockScreenCallEndRequestedEventArgs
{
	LockScreenCallEndRequestedEventArgs(std::nullptr_t) noexcept {}
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls { namespace Background {

struct PhoneCallBlockedTriggerDetails :
	Windows::ApplicationModel::Calls::Background::IPhoneCallBlockedTriggerDetails
{
	PhoneCallBlockedTriggerDetails(std::nullptr_t) noexcept {}
};

struct PhoneCallOriginDataRequestTriggerDetails :
	Windows::ApplicationModel::Calls::Background::IPhoneCallOriginDataRequestTriggerDetails
{
	PhoneCallOriginDataRequestTriggerDetails(std::nullptr_t) noexcept {}
};

struct PhoneNewVoicemailMessageTriggerDetails :
	Windows::ApplicationModel::Calls::Background::IPhoneNewVoicemailMessageTriggerDetails
{
	PhoneNewVoicemailMessageTriggerDetails(std::nullptr_t) noexcept {}
};

struct PhoneLineChangedTriggerDetails :
	Windows::ApplicationModel::Calls::Background::IPhoneLineChangedTriggerDetails
{
	PhoneLineChangedTriggerDetails(std::nullptr_t) noexcept {}
};

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Contacts {

struct Contact :
	Windows::ApplicationModel::Contacts::IContact,
	requires<Contact, Windows::ApplicationModel::Contacts::IContact2, Windows::ApplicationModel::Contacts::IContactName, Windows::ApplicationModel::Contacts::IContact3>
{
	Contact(std::nullptr_t) noexcept {}
	Contact();
};

struct ContactCardDelayedDataLoader :
	Windows::ApplicationModel::Contacts::IContactCardDelayedDataLoader
{
	ContactCardDelayedDataLoader(std::nullptr_t) noexcept {}
};

struct ContactStore :
	Windows::ApplicationModel::Contacts::IContactStore,
	requires<ContactStore, Windows::ApplicationModel::Contacts::IContactStore2>
{
	ContactStore(std::nullptr_t) noexcept {}
};

struct ContactAnnotationStore :
	Windows::ApplicationModel::Contacts::IContactAnnotationStore
{
	ContactAnnotationStore(std::nullptr_t) noexcept {}
};

struct ContactCardOptions :
	Windows::ApplicationModel::Contacts::IContactCardOptions,
	requires<ContactCardOptions, Windows::ApplicationModel::Contacts::IContactCardOptions2>
{
	ContactCardOptions(std::nullptr_t) noexcept {}
	ContactCardOptions();
};

struct FullContactCardOptions :
	Windows::ApplicationModel::Contacts::IFullContactCardOptions
{
	FullContactCardOptions(std::nullptr_t) noexcept {}
	FullContactCardOptions();
};

struct ContactAnnotation :
	Windows::ApplicationModel::Contacts::IContactAnnotation
{
	ContactAnnotation(std::nullptr_t) noexcept {}
	ContactAnnotation();
};

struct ContactAnnotationList :
	Windows::ApplicationModel::Contacts::IContactAnnotationList
{
	ContactAnnotationList(std::nullptr_t) noexcept {}
};

struct ContactChangeTracker :
	Windows::ApplicationModel::Contacts::IContactChangeTracker
{
	ContactChangeTracker(std::nullptr_t) noexcept {}
};

struct ContactChangedEventArgs :
	Windows::ApplicationModel::Contacts::IContactChangedEventArgs
{
	ContactChangedEventArgs(std::nullptr_t) noexcept {}
};

struct AggregateContactManager :
	Windows::ApplicationModel::Contacts::IAggregateContactManager
{
	AggregateContactManager(std::nullptr_t) noexcept {}
};

struct ContactList :
	Windows::ApplicationModel::Contacts::IContactList
{
	ContactList(std::nullptr_t) noexcept {}
};

struct ContactReader :
	Windows::ApplicationModel::Contacts::IContactReader
{
	ContactReader(std::nullptr_t) noexcept {}
};

struct ContactQueryOptions :
	Windows::ApplicationModel::Contacts::IContactQueryOptions
{
	ContactQueryOptions(std::nullptr_t) noexcept {}
	ContactQueryOptions();
	ContactQueryOptions(hstring_ref text);
	ContactQueryOptions(hstring_ref text, Windows::ApplicationModel::Contacts::ContactQuerySearchFields fields);
};

struct ContactListSyncManager :
	Windows::ApplicationModel::Contacts::IContactListSyncManager
{
	ContactListSyncManager(std::nullptr_t) noexcept {}
};

struct ContactPhone :
	Windows::ApplicationModel::Contacts::IContactPhone
{
	ContactPhone(std::nullptr_t) noexcept {}
	ContactPhone();
};

struct ContactEmail :
	Windows::ApplicationModel::Contacts::IContactEmail
{
	ContactEmail(std::nullptr_t) noexcept {}
	ContactEmail();
};

struct ContactAddress :
	Windows::ApplicationModel::Contacts::IContactAddress
{
	ContactAddress(std::nullptr_t) noexcept {}
	ContactAddress();
};

struct ContactConnectedServiceAccount :
	Windows::ApplicationModel::Contacts::IContactConnectedServiceAccount
{
	ContactConnectedServiceAccount(std::nullptr_t) noexcept {}
	ContactConnectedServiceAccount();
};

struct ContactDate :
	Windows::ApplicationModel::Contacts::IContactDate
{
	ContactDate(std::nullptr_t) noexcept {}
	ContactDate();
};

struct ContactJobInfo :
	Windows::ApplicationModel::Contacts::IContactJobInfo
{
	ContactJobInfo(std::nullptr_t) noexcept {}
	ContactJobInfo();
};

struct ContactSignificantOther :
	Windows::ApplicationModel::Contacts::IContactSignificantOther,
	requires<ContactSignificantOther, Windows::ApplicationModel::Contacts::IContactSignificantOther2>
{
	ContactSignificantOther(std::nullptr_t) noexcept {}
	ContactSignificantOther();
};

struct ContactWebsite :
	Windows::ApplicationModel::Contacts::IContactWebsite,
	requires<ContactWebsite, Windows::ApplicationModel::Contacts::IContactWebsite2>
{
	ContactWebsite(std::nullptr_t) noexcept {}
	ContactWebsite();
};

struct ContactChangedDeferral :
	Windows::ApplicationModel::Contacts::IContactChangedDeferral
{
	ContactChangedDeferral(std::nullptr_t) noexcept {}
};

struct ContactChange :
	Windows::ApplicationModel::Contacts::IContactChange
{
	ContactChange(std::nullptr_t) noexcept {}
};

struct ContactChangeReader :
	Windows::ApplicationModel::Contacts::IContactChangeReader
{
	ContactChangeReader(std::nullptr_t) noexcept {}
};

struct ContactBatch :
	Windows::ApplicationModel::Contacts::IContactBatch
{
	ContactBatch(std::nullptr_t) noexcept {}
};

struct ContactMatchReason :
	Windows::ApplicationModel::Contacts::IContactMatchReason
{
	ContactMatchReason(std::nullptr_t) noexcept {}
};

struct ContactQueryTextSearch :
	Windows::ApplicationModel::Contacts::IContactQueryTextSearch
{
	ContactQueryTextSearch(std::nullptr_t) noexcept {}
};

struct ContactStoreNotificationTriggerDetails :
	Windows::ApplicationModel::Contacts::IContactStoreNotificationTriggerDetails
{
	ContactStoreNotificationTriggerDetails(std::nullptr_t) noexcept {}
};

struct ContactManager
{
	ContactManager() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactStore> RequestStoreAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> ConvertContactToVCardAsync(Windows::ApplicationModel::Contacts::Contact const & contact);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> ConvertContactToVCardAsync(Windows::ApplicationModel::Contacts::Contact const & contact, unsigned maxBytes);
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> ConvertVCardToContactAsync(Windows::Storage::Streams::IRandomAccessStreamReference const & vCard);
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactStore> RequestStoreAsync(Windows::ApplicationModel::Contacts::ContactStoreAccessType accessType);
	static Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationStore> RequestAnnotationStoreAsync(Windows::ApplicationModel::Contacts::ContactAnnotationStoreAccessType accessType);
	static bool IsShowContactCardSupported();
	static void ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::ApplicationModel::Contacts::ContactCardOptions const & contactCardOptions);
	static bool IsShowDelayLoadedContactCardSupported();
	static Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement, Windows::ApplicationModel::Contacts::ContactCardOptions const & contactCardOptions);
	static void ShowFullContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::ApplicationModel::Contacts::FullContactCardOptions const & fullContactCardOptions);
	static Windows::ApplicationModel::Contacts::ContactNameOrder SystemDisplayNameOrder();
	static void SystemDisplayNameOrder(Windows::ApplicationModel::Contacts::ContactNameOrder value);
	static Windows::ApplicationModel::Contacts::ContactNameOrder SystemSortOrder();
	static void SystemSortOrder(Windows::ApplicationModel::Contacts::ContactNameOrder value);
	static void ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection);
	static void ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
	static Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement preferredPlacement);
};

struct ContactLaunchActionVerbs
{
	ContactLaunchActionVerbs() = delete;
	static hstring Call();
	static hstring Message();
	static hstring Map();
	static hstring Post();
	static hstring VideoCall();
};

struct ContactField :
	Windows::ApplicationModel::Contacts::IContactField
{
	ContactField(std::nullptr_t) noexcept {}
	ContactField(hstring_ref value, Windows::ApplicationModel::Contacts::ContactFieldType type);
	ContactField(hstring_ref value, Windows::ApplicationModel::Contacts::ContactFieldType type, Windows::ApplicationModel::Contacts::ContactFieldCategory category);
	ContactField(hstring_ref name, hstring_ref value, Windows::ApplicationModel::Contacts::ContactFieldType type, Windows::ApplicationModel::Contacts::ContactFieldCategory category);
};

struct ContactLocationField :
	Windows::ApplicationModel::Contacts::IContactLocationField
{
	ContactLocationField(std::nullptr_t) noexcept {}
	ContactLocationField(hstring_ref unstructuredAddress);
	ContactLocationField(hstring_ref unstructuredAddress, Windows::ApplicationModel::Contacts::ContactFieldCategory category);
	ContactLocationField(hstring_ref unstructuredAddress, Windows::ApplicationModel::Contacts::ContactFieldCategory category, hstring_ref street, hstring_ref city, hstring_ref region, hstring_ref country, hstring_ref postalCode);
};

struct ContactInstantMessageField :
	Windows::ApplicationModel::Contacts::IContactInstantMessageField
{
	ContactInstantMessageField(std::nullptr_t) noexcept {}
	ContactInstantMessageField(hstring_ref userName);
	ContactInstantMessageField(hstring_ref userName, Windows::ApplicationModel::Contacts::ContactFieldCategory category);
	ContactInstantMessageField(hstring_ref userName, Windows::ApplicationModel::Contacts::ContactFieldCategory category, hstring_ref service, hstring_ref displayText, Windows::Foundation::Uri const & verb);
};

struct KnownContactField
{
	KnownContactField() = delete;
	static hstring Email();
	static hstring PhoneNumber();
	static hstring Location();
	static hstring InstantMessage();
	static Windows::ApplicationModel::Contacts::ContactFieldType ConvertNameToType(hstring_ref name);
	static hstring ConvertTypeToName(Windows::ApplicationModel::Contacts::ContactFieldType type);
};

struct ContactInformation :
	Windows::ApplicationModel::Contacts::IContactInformation
{
	ContactInformation(std::nullptr_t) noexcept {}
};

struct ContactFieldFactory :
	Windows::ApplicationModel::Contacts::IContactFieldFactory,
	requires<ContactFieldFactory, Windows::ApplicationModel::Contacts::IContactLocationFieldFactory, Windows::ApplicationModel::Contacts::IContactInstantMessageFieldFactory>
{
	ContactFieldFactory(std::nullptr_t) noexcept {}
	ContactFieldFactory();
};

struct ContactPicker :
	Windows::ApplicationModel::Contacts::IContactPicker,
	requires<ContactPicker, Windows::ApplicationModel::Contacts::IContactPicker2>
{
	ContactPicker(std::nullptr_t) noexcept {}
	ContactPicker();
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

struct ContactRemovedEventArgs :
	Windows::ApplicationModel::Contacts::Provider::IContactRemovedEventArgs
{
	ContactRemovedEventArgs(std::nullptr_t) noexcept {}
};

struct ContactPickerUI :
	Windows::ApplicationModel::Contacts::Provider::IContactPickerUI,
	requires<ContactPickerUI, Windows::ApplicationModel::Contacts::Provider::IContactPickerUI2>
{
	ContactPickerUI(std::nullptr_t) noexcept {}
	using impl_IContactPickerUI::AddContact;
	using impl_IContactPickerUI2::AddContact;
};

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Core {

struct CoreApplicationView :
	Windows::ApplicationModel::Core::ICoreApplicationView,
	requires<CoreApplicationView, Windows::ApplicationModel::Core::ICoreApplicationView2, Windows::ApplicationModel::Core::ICoreApplicationView3>
{
	CoreApplicationView(std::nullptr_t) noexcept {}
};

struct AppListEntry :
	Windows::ApplicationModel::Core::IAppListEntry
{
	AppListEntry(std::nullptr_t) noexcept {}
};

struct CoreApplication
{
	CoreApplication() = delete;
	static void IncrementApplicationUseCount();
	static void DecrementApplicationUseCount();
	static Windows::ApplicationModel::Core::CoreApplicationView CreateNewView(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource);
	static hstring Id();
	static long long Suspending(Windows::Foundation::IEventHandler<Windows::ApplicationModel::SuspendingEventArgs> const & handler);
	template <typename F> static long long Suspending(F handler);
	static void Suspending(long long token);
	static long long Resuming(Windows::Foundation::IEventHandler<IInspectable> const & handler);
	template <typename F> static long long Resuming(F handler);
	static void Resuming(long long token);
	static Windows::Foundation::Collections::IPropertySet Properties();
	static Windows::ApplicationModel::Core::CoreApplicationView GetCurrentView();
	static void Run(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource);
	static void RunWithActivationFactories(Windows::Foundation::IGetActivationFactory const & activationFactoryCallback);
	static void Exit();
	static long long Exiting(Windows::Foundation::IEventHandler<IInspectable> const & handler);
	template <typename F> static long long Exiting(F handler);
	static void Exiting(long long token);
	static Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::CoreApplicationView> Views();
	static Windows::ApplicationModel::Core::CoreApplicationView CreateNewView(hstring_ref runtimeType, hstring_ref entryPoint);
	static Windows::ApplicationModel::Core::CoreApplicationView MainView();
	static long long UnhandledErrorDetected(Windows::Foundation::IEventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs> const & handler);
	template <typename F> static long long UnhandledErrorDetected(F handler);
	static void UnhandledErrorDetected(long long token);
	static Windows::ApplicationModel::Core::CoreApplicationView CreateNewView();
};

struct CoreApplicationViewTitleBar :
	Windows::ApplicationModel::Core::ICoreApplicationViewTitleBar
{
	CoreApplicationViewTitleBar(std::nullptr_t) noexcept {}
};

struct UnhandledErrorDetectedEventArgs :
	Windows::ApplicationModel::Core::IUnhandledErrorDetectedEventArgs
{
	UnhandledErrorDetectedEventArgs(std::nullptr_t) noexcept {}
};

struct HostedViewClosingEventArgs :
	Windows::ApplicationModel::Core::IHostedViewClosingEventArgs
{
	HostedViewClosingEventArgs(std::nullptr_t) noexcept {}
};

struct UnhandledError :
	Windows::ApplicationModel::Core::IUnhandledError
{
	UnhandledError(std::nullptr_t) noexcept {}
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

struct StandardDataFormats
{
	StandardDataFormats() = delete;
	static hstring WebLink();
	static hstring ApplicationLink();
	static hstring Text();
	static hstring Uri();
	static hstring Html();
	static hstring Rtf();
	static hstring Bitmap();
	static hstring StorageItems();
};

struct DataPackagePropertySetView :
	Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView,
	requires<DataPackagePropertySetView, Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView2, Windows::ApplicationModel::DataTransfer::IDataPackagePropertySetView3>
{
	DataPackagePropertySetView(std::nullptr_t) noexcept {}
};

struct DataPackagePropertySet :
	Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet,
	requires<DataPackagePropertySet, Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet2, Windows::ApplicationModel::DataTransfer::IDataPackagePropertySet3>
{
	DataPackagePropertySet(std::nullptr_t) noexcept {}
};

struct DataProviderDeferral :
	Windows::ApplicationModel::DataTransfer::IDataProviderDeferral
{
	DataProviderDeferral(std::nullptr_t) noexcept {}
};

struct DataProviderRequest :
	Windows::ApplicationModel::DataTransfer::IDataProviderRequest
{
	DataProviderRequest(std::nullptr_t) noexcept {}
};

struct OperationCompletedEventArgs :
	Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs,
	requires<OperationCompletedEventArgs, Windows::ApplicationModel::DataTransfer::IOperationCompletedEventArgs2>
{
	OperationCompletedEventArgs(std::nullptr_t) noexcept {}
};

struct DataPackageView :
	Windows::ApplicationModel::DataTransfer::IDataPackageView,
	requires<DataPackageView, Windows::ApplicationModel::DataTransfer::IDataPackageView2, Windows::ApplicationModel::DataTransfer::IDataPackageView3, Windows::ApplicationModel::DataTransfer::IDataPackageView4>
{
	DataPackageView(std::nullptr_t) noexcept {}
};

struct DataPackage :
	Windows::ApplicationModel::DataTransfer::IDataPackage,
	requires<DataPackage, Windows::ApplicationModel::DataTransfer::IDataPackage2>
{
	DataPackage(std::nullptr_t) noexcept {}
	DataPackage();
};

struct HtmlFormatHelper
{
	HtmlFormatHelper() = delete;
	static hstring GetStaticFragment(hstring_ref htmlFormat);
	static hstring CreateHtmlFormat(hstring_ref htmlFragment);
};

struct Clipboard
{
	Clipboard() = delete;
	static Windows::ApplicationModel::DataTransfer::DataPackageView GetContent();
	static void SetContent(Windows::ApplicationModel::DataTransfer::DataPackage const & content);
	static void Flush();
	static void Clear();
	static long long ContentChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler);
	template <typename F> static long long ContentChanged(F changeHandler);
	static void ContentChanged(long long token);
};

struct DataRequestDeferral :
	Windows::ApplicationModel::DataTransfer::IDataRequestDeferral
{
	DataRequestDeferral(std::nullptr_t) noexcept {}
};

struct DataRequest :
	Windows::ApplicationModel::DataTransfer::IDataRequest
{
	DataRequest(std::nullptr_t) noexcept {}
};

struct DataRequestedEventArgs :
	Windows::ApplicationModel::DataTransfer::IDataRequestedEventArgs
{
	DataRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct TargetApplicationChosenEventArgs :
	Windows::ApplicationModel::DataTransfer::ITargetApplicationChosenEventArgs
{
	TargetApplicationChosenEventArgs(std::nullptr_t) noexcept {}
};

struct DataTransferManager :
	Windows::ApplicationModel::DataTransfer::IDataTransferManager
{
	DataTransferManager(std::nullptr_t) noexcept {}
	static void ShowShareUI();
	static Windows::ApplicationModel::DataTransfer::DataTransferManager GetForCurrentView();
};

struct SharedStorageAccessManager
{
	SharedStorageAccessManager() = delete;
	static hstring AddFile(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> RedeemTokenForFileAsync(hstring_ref token);
	static void RemoveFile(hstring_ref token);
};

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

struct QuickLink :
	Windows::ApplicationModel::DataTransfer::ShareTarget::IQuickLink
{
	QuickLink(std::nullptr_t) noexcept {}
	QuickLink();
};

struct ShareOperation :
	Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation,
	requires<ShareOperation, Windows::ApplicationModel::DataTransfer::ShareTarget::IShareOperation2>
{
	ShareOperation(std::nullptr_t) noexcept {}
};

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Search {

struct SearchPaneQueryLinguisticDetails :
	Windows::ApplicationModel::Search::ISearchPaneQueryLinguisticDetails
{
	SearchPaneQueryLinguisticDetails(std::nullptr_t) noexcept {}
};

struct SearchPaneVisibilityChangedEventArgs :
	Windows::ApplicationModel::Search::ISearchPaneVisibilityChangedEventArgs
{
	SearchPaneVisibilityChangedEventArgs(std::nullptr_t) noexcept {}
};

struct SearchPaneQueryChangedEventArgs :
	Windows::ApplicationModel::Search::ISearchPaneQueryChangedEventArgs
{
	SearchPaneQueryChangedEventArgs(std::nullptr_t) noexcept {}
};

struct SearchPaneQuerySubmittedEventArgs :
	Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgs,
	requires<SearchPaneQuerySubmittedEventArgs, Windows::ApplicationModel::Search::ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails>
{
	SearchPaneQuerySubmittedEventArgs(std::nullptr_t) noexcept {}
};

struct SearchPaneResultSuggestionChosenEventArgs :
	Windows::ApplicationModel::Search::ISearchPaneResultSuggestionChosenEventArgs
{
	SearchPaneResultSuggestionChosenEventArgs(std::nullptr_t) noexcept {}
};

struct SearchSuggestionCollection :
	Windows::ApplicationModel::Search::ISearchSuggestionCollection
{
	SearchSuggestionCollection(std::nullptr_t) noexcept {}
};

struct SearchPaneSuggestionsRequestDeferral :
	Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestDeferral
{
	SearchPaneSuggestionsRequestDeferral(std::nullptr_t) noexcept {}
};

struct SearchPaneSuggestionsRequest :
	Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequest
{
	SearchPaneSuggestionsRequest(std::nullptr_t) noexcept {}
};

struct SearchPaneSuggestionsRequestedEventArgs :
	Windows::ApplicationModel::Search::ISearchPaneSuggestionsRequestedEventArgs
{
	SearchPaneSuggestionsRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct LocalContentSuggestionSettings :
	Windows::ApplicationModel::Search::ILocalContentSuggestionSettings
{
	LocalContentSuggestionSettings(std::nullptr_t) noexcept {}
	LocalContentSuggestionSettings();
};

struct SearchPane :
	Windows::ApplicationModel::Search::ISearchPane
{
	SearchPane(std::nullptr_t) noexcept {}
	static void HideThisApplication();
	static Windows::ApplicationModel::Search::SearchPane GetForCurrentView();
};

struct SearchQueryLinguisticDetails :
	Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails
{
	SearchQueryLinguisticDetails(std::nullptr_t) noexcept {}
	SearchQueryLinguisticDetails(Windows::Foundation::Collections::IIterable<hstring> const & queryTextAlternatives, unsigned queryTextCompositionStart, unsigned queryTextCompositionLength);
};

struct SearchSuggestionsRequestDeferral :
	Windows::ApplicationModel::Search::ISearchSuggestionsRequestDeferral
{
	SearchSuggestionsRequestDeferral(std::nullptr_t) noexcept {}
};

struct SearchSuggestionsRequest :
	Windows::ApplicationModel::Search::ISearchSuggestionsRequest
{
	SearchSuggestionsRequest(std::nullptr_t) noexcept {}
};

}}}}

namespace winrt { namespace Windows { namespace Data { namespace Text {

struct SemanticTextQuery :
	Windows::Data::Text::ISemanticTextQuery
{
	SemanticTextQuery(std::nullptr_t) noexcept {}
	SemanticTextQuery(hstring_ref aqsFilter);
	SemanticTextQuery(hstring_ref aqsFilter, hstring_ref filterLanguage);
};

struct UnicodeCharacters
{
	UnicodeCharacters() = delete;
	static unsigned GetCodepointFromSurrogatePair(unsigned highSurrogate, unsigned lowSurrogate);
	static void GetSurrogatePairFromCodepoint(unsigned codepoint, wchar_t & highSurrogate, wchar_t & lowSurrogate);
	static bool IsHighSurrogate(unsigned codepoint);
	static bool IsLowSurrogate(unsigned codepoint);
	static bool IsSupplementary(unsigned codepoint);
	static bool IsNoncharacter(unsigned codepoint);
	static bool IsWhitespace(unsigned codepoint);
	static bool IsAlphabetic(unsigned codepoint);
	static bool IsCased(unsigned codepoint);
	static bool IsUppercase(unsigned codepoint);
	static bool IsLowercase(unsigned codepoint);
	static bool IsIdStart(unsigned codepoint);
	static bool IsIdContinue(unsigned codepoint);
	static bool IsGraphemeBase(unsigned codepoint);
	static bool IsGraphemeExtend(unsigned codepoint);
	static Windows::Data::Text::UnicodeNumericType GetNumericType(unsigned codepoint);
	static Windows::Data::Text::UnicodeGeneralCategory GetGeneralCategory(unsigned codepoint);
};

struct AlternateWordForm :
	Windows::Data::Text::IAlternateWordForm
{
	AlternateWordForm(std::nullptr_t) noexcept {}
};

struct WordSegment :
	Windows::Data::Text::IWordSegment
{
	WordSegment(std::nullptr_t) noexcept {}
};

struct WordsSegmenter :
	Windows::Data::Text::IWordsSegmenter
{
	WordsSegmenter(std::nullptr_t) noexcept {}
	WordsSegmenter(hstring_ref language);
};

struct SelectableWordSegment :
	Windows::Data::Text::ISelectableWordSegment
{
	SelectableWordSegment(std::nullptr_t) noexcept {}
};

struct SelectableWordsSegmenter :
	Windows::Data::Text::ISelectableWordsSegmenter
{
	SelectableWordsSegmenter(std::nullptr_t) noexcept {}
	SelectableWordsSegmenter(hstring_ref language);
};

struct TextPredictionGenerator :
	Windows::Data::Text::ITextPredictionGenerator
{
	TextPredictionGenerator(std::nullptr_t) noexcept {}
	TextPredictionGenerator(hstring_ref languageTag);
};

struct TextConversionGenerator :
	Windows::Data::Text::ITextConversionGenerator
{
	TextConversionGenerator(std::nullptr_t) noexcept {}
	TextConversionGenerator(hstring_ref languageTag);
};

struct TextReverseConversionGenerator :
	Windows::Data::Text::ITextReverseConversionGenerator
{
	TextReverseConversionGenerator(std::nullptr_t) noexcept {}
	TextReverseConversionGenerator(hstring_ref languageTag);
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth {

struct BluetoothLEDevice :
	Windows::Devices::Bluetooth::IBluetoothLEDevice,
	requires<BluetoothLEDevice, Windows::Devices::Bluetooth::IBluetoothLEDevice2>
{
	BluetoothLEDevice(std::nullptr_t) noexcept {}
	static hstring GetDeviceSelectorFromPairingState(bool pairingState);
	static hstring GetDeviceSelectorFromConnectionStatus(Windows::Devices::Bluetooth::BluetoothConnectionStatus connectionStatus);
	static hstring GetDeviceSelectorFromDeviceName(hstring_ref deviceName);
	static hstring GetDeviceSelectorFromBluetoothAddress(unsigned long long bluetoothAddress);
	static hstring GetDeviceSelectorFromBluetoothAddress(unsigned long long bluetoothAddress, Windows::Devices::Bluetooth::BluetoothAddressType bluetoothAddressType);
	static hstring GetDeviceSelectorFromAppearance(Windows::Devices::Bluetooth::BluetoothLEAppearance const & appearance);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> FromBluetoothAddressAsync(unsigned long long bluetoothAddress, Windows::Devices::Bluetooth::BluetoothAddressType bluetoothAddressType);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> FromIdAsync(hstring_ref deviceId);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> FromBluetoothAddressAsync(unsigned long long bluetoothAddress);
	static hstring GetDeviceSelector();
};

struct BluetoothDevice :
	Windows::Devices::Bluetooth::IBluetoothDevice,
	requires<BluetoothDevice, Windows::Devices::Bluetooth::IBluetoothDevice2>
{
	BluetoothDevice(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> FromIdAsync(hstring_ref deviceId);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> FromHostNameAsync(Windows::Networking::HostName const & hostName);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> FromBluetoothAddressAsync(unsigned long long address);
	static hstring GetDeviceSelector();
	static hstring GetDeviceSelectorFromPairingState(bool pairingState);
	static hstring GetDeviceSelectorFromConnectionStatus(Windows::Devices::Bluetooth::BluetoothConnectionStatus connectionStatus);
	static hstring GetDeviceSelectorFromDeviceName(hstring_ref deviceName);
	static hstring GetDeviceSelectorFromBluetoothAddress(unsigned long long bluetoothAddress);
	static hstring GetDeviceSelectorFromClassOfDevice(Windows::Devices::Bluetooth::BluetoothClassOfDevice const & classOfDevice);
};

struct BluetoothClassOfDevice :
	Windows::Devices::Bluetooth::IBluetoothClassOfDevice
{
	BluetoothClassOfDevice(std::nullptr_t) noexcept {}
	static Windows::Devices::Bluetooth::BluetoothClassOfDevice FromRawValue(unsigned rawValue);
	static Windows::Devices::Bluetooth::BluetoothClassOfDevice FromParts(Windows::Devices::Bluetooth::BluetoothMajorClass majorClass, Windows::Devices::Bluetooth::BluetoothMinorClass minorClass, Windows::Devices::Bluetooth::BluetoothServiceCapabilities serviceCapabilities);
};

struct BluetoothLEAppearanceCategories
{
	BluetoothLEAppearanceCategories() = delete;
	static unsigned short Uncategorized();
	static unsigned short Phone();
	static unsigned short Computer();
	static unsigned short Watch();
	static unsigned short Clock();
	static unsigned short Display();
	static unsigned short RemoteControl();
	static unsigned short EyeGlasses();
	static unsigned short Tag();
	static unsigned short Keyring();
	static unsigned short MediaPlayer();
	static unsigned short BarcodeScanner();
	static unsigned short Thermometer();
	static unsigned short HeartRate();
	static unsigned short BloodPressure();
	static unsigned short HumanInterfaceDevice();
	static unsigned short GlucoseMeter();
	static unsigned short RunningWalking();
	static unsigned short Cycling();
	static unsigned short PulseOximeter();
	static unsigned short WeightScale();
	static unsigned short OutdoorSportActivity();
};

struct BluetoothLEAppearanceSubcategories
{
	BluetoothLEAppearanceSubcategories() = delete;
	static unsigned short Generic();
	static unsigned short SportsWatch();
	static unsigned short ThermometerEar();
	static unsigned short HeartRateBelt();
	static unsigned short BloodPressureArm();
	static unsigned short BloodPressureWrist();
	static unsigned short Keyboard();
	static unsigned short Mouse();
	static unsigned short Joystick();
	static unsigned short Gamepad();
	static unsigned short DigitizerTablet();
	static unsigned short CardReader();
	static unsigned short DigitalPen();
	static unsigned short BarcodeScanner();
	static unsigned short RunningWalkingInShoe();
	static unsigned short RunningWalkingOnShoe();
	static unsigned short RunningWalkingOnHip();
	static unsigned short CyclingComputer();
	static unsigned short CyclingSpeedSensor();
	static unsigned short CyclingCadenceSensor();
	static unsigned short CyclingPowerSensor();
	static unsigned short CyclingSpeedCadenceSensor();
	static unsigned short OximeterFingertip();
	static unsigned short OximeterWristWorn();
	static unsigned short LocationDisplay();
	static unsigned short LocationNavigationDisplay();
	static unsigned short LocationPod();
	static unsigned short LocationNavigationPod();
};

struct BluetoothLEAppearance :
	Windows::Devices::Bluetooth::IBluetoothLEAppearance
{
	BluetoothLEAppearance(std::nullptr_t) noexcept {}
	static Windows::Devices::Bluetooth::BluetoothLEAppearance FromRawValue(unsigned short rawValue);
	static Windows::Devices::Bluetooth::BluetoothLEAppearance FromParts(unsigned short appearanceCategory, unsigned short appearanceSubCategory);
};

struct BluetoothSignalStrengthFilter :
	Windows::Devices::Bluetooth::IBluetoothSignalStrengthFilter
{
	BluetoothSignalStrengthFilter(std::nullptr_t) noexcept {}
	BluetoothSignalStrengthFilter();
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Advertisement {

struct BluetoothLEManufacturerData :
	Windows::Devices::Bluetooth::Advertisement::IBluetoothLEManufacturerData
{
	BluetoothLEManufacturerData(std::nullptr_t) noexcept {}
	BluetoothLEManufacturerData();
	BluetoothLEManufacturerData(unsigned short companyId, Windows::Storage::Streams::IBuffer const & data);
};

struct BluetoothLEAdvertisementDataSection :
	Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementDataSection
{
	BluetoothLEAdvertisementDataSection(std::nullptr_t) noexcept {}
	BluetoothLEAdvertisementDataSection();
	BluetoothLEAdvertisementDataSection(byte dataType, Windows::Storage::Streams::IBuffer const & data);
};

struct BluetoothLEAdvertisement :
	Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisement
{
	BluetoothLEAdvertisement(std::nullptr_t) noexcept {}
	BluetoothLEAdvertisement();
};

struct BluetoothLEAdvertisementBytePattern :
	Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementBytePattern
{
	BluetoothLEAdvertisementBytePattern(std::nullptr_t) noexcept {}
	BluetoothLEAdvertisementBytePattern();
	BluetoothLEAdvertisementBytePattern(byte dataType, short offset, Windows::Storage::Streams::IBuffer const & data);
};

struct BluetoothLEAdvertisementFilter :
	Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementFilter
{
	BluetoothLEAdvertisementFilter(std::nullptr_t) noexcept {}
	BluetoothLEAdvertisementFilter();
};

struct BluetoothLEAdvertisementWatcherStoppedEventArgs :
	Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcherStoppedEventArgs
{
	BluetoothLEAdvertisementWatcherStoppedEventArgs(std::nullptr_t) noexcept {}
};

struct BluetoothLEAdvertisementWatcher :
	Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementWatcher
{
	BluetoothLEAdvertisementWatcher(std::nullptr_t) noexcept {}
	BluetoothLEAdvertisementWatcher();
	BluetoothLEAdvertisementWatcher(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter const & advertisementFilter);
};

struct BluetoothLEAdvertisementReceivedEventArgs :
	Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementReceivedEventArgs
{
	BluetoothLEAdvertisementReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct BluetoothLEAdvertisementDataTypes
{
	BluetoothLEAdvertisementDataTypes() = delete;
	static byte Flags();
	static byte IncompleteService16BitUuids();
	static byte CompleteService16BitUuids();
	static byte IncompleteService32BitUuids();
	static byte CompleteService32BitUuids();
	static byte IncompleteService128BitUuids();
	static byte CompleteService128BitUuids();
	static byte ShortenedLocalName();
	static byte CompleteLocalName();
	static byte TxPowerLevel();
	static byte SlaveConnectionIntervalRange();
	static byte ServiceSolicitation16BitUuids();
	static byte ServiceSolicitation32BitUuids();
	static byte ServiceSolicitation128BitUuids();
	static byte ServiceData16BitUuids();
	static byte ServiceData32BitUuids();
	static byte ServiceData128BitUuids();
	static byte PublicTargetAddress();
	static byte RandomTargetAddress();
	static byte Appearance();
	static byte AdvertisingInterval();
	static byte ManufacturerSpecificData();
};

struct BluetoothLEAdvertisementPublisherStatusChangedEventArgs :
	Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisherStatusChangedEventArgs
{
	BluetoothLEAdvertisementPublisherStatusChangedEventArgs(std::nullptr_t) noexcept {}
};

struct BluetoothLEAdvertisementPublisher :
	Windows::Devices::Bluetooth::Advertisement::IBluetoothLEAdvertisementPublisher
{
	BluetoothLEAdvertisementPublisher(std::nullptr_t) noexcept {}
	BluetoothLEAdvertisementPublisher();
	BluetoothLEAdvertisementPublisher(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement const & advertisement);
};

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Background {

struct RfcommInboundConnectionInformation :
	Windows::Devices::Bluetooth::Background::IRfcommInboundConnectionInformation
{
	RfcommInboundConnectionInformation(std::nullptr_t) noexcept {}
};

struct RfcommOutboundConnectionInformation :
	Windows::Devices::Bluetooth::Background::IRfcommOutboundConnectionInformation
{
	RfcommOutboundConnectionInformation(std::nullptr_t) noexcept {}
};

struct RfcommConnectionTriggerDetails :
	Windows::Devices::Bluetooth::Background::IRfcommConnectionTriggerDetails
{
	RfcommConnectionTriggerDetails(std::nullptr_t) noexcept {}
};

struct GattCharacteristicNotificationTriggerDetails :
	Windows::Devices::Bluetooth::Background::IGattCharacteristicNotificationTriggerDetails
{
	GattCharacteristicNotificationTriggerDetails(std::nullptr_t) noexcept {}
};

struct BluetoothLEAdvertisementWatcherTriggerDetails :
	Windows::Devices::Bluetooth::Background::IBluetoothLEAdvertisementWatcherTriggerDetails
{
	BluetoothLEAdvertisementWatcherTriggerDetails(std::nullptr_t) noexcept {}
};

struct BluetoothLEAdvertisementPublisherTriggerDetails :
	Windows::Devices::Bluetooth::Background::IBluetoothLEAdvertisementPublisherTriggerDetails
{
	BluetoothLEAdvertisementPublisherTriggerDetails(std::nullptr_t) noexcept {}
};

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace GenericAttributeProfile {

struct GattDeviceService :
	Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDeviceService,
	requires<GattDeviceService, Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDeviceService2>
{
	GattDeviceService(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> FromIdAsync(hstring_ref deviceId);
	static hstring GetDeviceSelectorFromUuid(GUID serviceUuid);
	static hstring GetDeviceSelectorFromShortId(unsigned short serviceShortId);
	static GUID ConvertShortIdToUuid(unsigned short shortId);
};

struct GattCharacteristic :
	Windows::Devices::Bluetooth::GenericAttributeProfile::IGattCharacteristic,
	requires<GattCharacteristic, Windows::Devices::Bluetooth::GenericAttributeProfile::IGattCharacteristic2>
{
	GattCharacteristic(std::nullptr_t) noexcept {}
	static GUID ConvertShortIdToUuid(unsigned short shortId);
};

struct GattDescriptor :
	Windows::Devices::Bluetooth::GenericAttributeProfile::IGattDescriptor
{
	GattDescriptor(std::nullptr_t) noexcept {}
	static GUID ConvertShortIdToUuid(unsigned short shortId);
};

struct GattPresentationFormat :
	Windows::Devices::Bluetooth::GenericAttributeProfile::IGattPresentationFormat
{
	GattPresentationFormat(std::nullptr_t) noexcept {}
	static byte BluetoothSigAssignedNumbers();
};

struct GattReadResult :
	Windows::Devices::Bluetooth::GenericAttributeProfile::IGattReadResult
{
	GattReadResult(std::nullptr_t) noexcept {}
};

struct GattReadClientCharacteristicConfigurationDescriptorResult :
	Windows::Devices::Bluetooth::GenericAttributeProfile::IGattReadClientCharacteristicConfigurationDescriptorResult
{
	GattReadClientCharacteristicConfigurationDescriptorResult(std::nullptr_t) noexcept {}
};

struct GattValueChangedEventArgs :
	Windows::Devices::Bluetooth::GenericAttributeProfile::IGattValueChangedEventArgs
{
	GattValueChangedEventArgs(std::nullptr_t) noexcept {}
};

struct GattServiceUuids
{
	GattServiceUuids() = delete;
	static GUID AlertNotification();
	static GUID CurrentTime();
	static GUID CyclingPower();
	static GUID DeviceInformation();
	static GUID HumanInterfaceDevice();
	static GUID ImmediateAlert();
	static GUID LinkLoss();
	static GUID LocationAndNavigation();
	static GUID NextDstChange();
	static GUID PhoneAlertStatus();
	static GUID ReferenceTimeUpdate();
	static GUID ScanParameters();
	static GUID TxPower();
	static GUID Battery();
	static GUID BloodPressure();
	static GUID CyclingSpeedAndCadence();
	static GUID GenericAccess();
	static GUID GenericAttribute();
	static GUID Glucose();
	static GUID HealthThermometer();
	static GUID HeartRate();
	static GUID RunningSpeedAndCadence();
};

struct GattCharacteristicUuids
{
	GattCharacteristicUuids() = delete;
	static GUID AlertCategoryId();
	static GUID AlertCategoryIdBitMask();
	static GUID AlertLevel();
	static GUID AlertNotificationControlPoint();
	static GUID AlertStatus();
	static GUID GapAppearance();
	static GUID BootKeyboardInputReport();
	static GUID BootKeyboardOutputReport();
	static GUID BootMouseInputReport();
	static GUID CurrentTime();
	static GUID CyclingPowerControlPoint();
	static GUID CyclingPowerFeature();
	static GUID CyclingPowerMeasurement();
	static GUID CyclingPowerVector();
	static GUID DateTime();
	static GUID DayDateTime();
	static GUID DayOfWeek();
	static GUID GapDeviceName();
	static GUID DstOffset();
	static GUID ExactTime256();
	static GUID FirmwareRevisionString();
	static GUID HardwareRevisionString();
	static GUID HidControlPoint();
	static GUID HidInformation();
	static GUID Ieee1107320601RegulatoryCertificationDataList();
	static GUID LnControlPoint();
	static GUID LnFeature();
	static GUID LocalTimeInformation();
	static GUID LocationAndSpeed();
	static GUID ManufacturerNameString();
	static GUID ModelNumberString();
	static GUID Navigation();
	static GUID NewAlert();
	static GUID GapPeripheralPreferredConnectionParameters();
	static GUID GapPeripheralPrivacyFlag();
	static GUID PnpId();
	static GUID PositionQuality();
	static GUID ProtocolMode();
	static GUID GapReconnectionAddress();
	static GUID ReferenceTimeInformation();
	static GUID Report();
	static GUID ReportMap();
	static GUID RingerControlPoint();
	static GUID RingerSetting();
	static GUID ScanIntervalWindow();
	static GUID ScanRefresh();
	static GUID SerialNumberString();
	static GUID GattServiceChanged();
	static GUID SoftwareRevisionString();
	static GUID SupportedNewAlertCategory();
	static GUID SupportUnreadAlertCategory();
	static GUID SystemId();
	static GUID TimeAccuracy();
	static GUID TimeSource();
	static GUID TimeUpdateControlPoint();
	static GUID TimeUpdateState();
	static GUID TimeWithDst();
	static GUID TimeZone();
	static GUID TxPowerLevel();
	static GUID UnreadAlertStatus();
	static GUID BatteryLevel();
	static GUID BloodPressureFeature();
	static GUID BloodPressureMeasurement();
	static GUID BodySensorLocation();
	static GUID CscFeature();
	static GUID CscMeasurement();
	static GUID GlucoseFeature();
	static GUID GlucoseMeasurement();
	static GUID GlucoseMeasurementContext();
	static GUID HeartRateControlPoint();
	static GUID HeartRateMeasurement();
	static GUID IntermediateCuffPressure();
	static GUID IntermediateTemperature();
	static GUID MeasurementInterval();
	static GUID RecordAccessControlPoint();
	static GUID RscFeature();
	static GUID RscMeasurement();
	static GUID SCControlPoint();
	static GUID SensorLocation();
	static GUID TemperatureMeasurement();
	static GUID TemperatureType();
};

struct GattDescriptorUuids
{
	GattDescriptorUuids() = delete;
	static GUID CharacteristicAggregateFormat();
	static GUID CharacteristicExtendedProperties();
	static GUID CharacteristicPresentationFormat();
	static GUID CharacteristicUserDescription();
	static GUID ClientCharacteristicConfiguration();
	static GUID ServerCharacteristicConfiguration();
};

struct GattReliableWriteTransaction :
	Windows::Devices::Bluetooth::GenericAttributeProfile::IGattReliableWriteTransaction
{
	GattReliableWriteTransaction(std::nullptr_t) noexcept {}
	GattReliableWriteTransaction();
};

struct GattPresentationFormatTypes
{
	GattPresentationFormatTypes() = delete;
	static byte Boolean();
	static byte Bit2();
	static byte Nibble();
	static byte UInt8();
	static byte UInt12();
	static byte UInt16();
	static byte UInt24();
	static byte UInt32();
	static byte UInt48();
	static byte UInt64();
	static byte UInt128();
	static byte SInt8();
	static byte SInt12();
	static byte SInt16();
	static byte SInt24();
	static byte SInt32();
	static byte SInt48();
	static byte SInt64();
	static byte SInt128();
	static byte Float32();
	static byte Float64();
	static byte SFloat();
	static byte Float();
	static byte DUInt16();
	static byte Utf8();
	static byte Utf16();
	static byte Struct();
};

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Rfcomm {

struct RfcommDeviceService :
	Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService,
	requires<RfcommDeviceService, Windows::Devices::Bluetooth::Rfcomm::IRfcommDeviceService2>
{
	RfcommDeviceService(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService> FromIdAsync(hstring_ref deviceId);
	static hstring GetDeviceSelector(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & serviceId);
};

struct RfcommServiceId :
	Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceId
{
	RfcommServiceId(std::nullptr_t) noexcept {}
	static Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId FromUuid(GUID uuid);
	static Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId FromShortId(unsigned shortId);
	static Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId SerialPort();
	static Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId ObexObjectPush();
	static Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId ObexFileTransfer();
	static Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId PhoneBookAccessPce();
	static Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId PhoneBookAccessPse();
	static Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId GenericFileTransfer();
};

struct RfcommServiceProvider :
	Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider,
	requires<RfcommServiceProvider, Windows::Devices::Bluetooth::Rfcomm::IRfcommServiceProvider2>
{
	RfcommServiceProvider(std::nullptr_t) noexcept {}
	using impl_IRfcommServiceProvider::StartAdvertising;
	using impl_IRfcommServiceProvider2::StartAdvertising;
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider> CreateAsync(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & serviceId);
};

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Enumeration {

struct DeviceInformation :
	Windows::Devices::Enumeration::IDeviceInformation,
	requires<DeviceInformation, Windows::Devices::Enumeration::IDeviceInformation2>
{
	DeviceInformation(std::nullptr_t) noexcept {}
	static hstring GetAqsFilterFromDeviceClass(Windows::Devices::Enumeration::DeviceClass deviceClass);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(hstring_ref deviceId, Windows::Foundation::Collections::IIterable<hstring> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind kind);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(hstring_ref aqsFilter, Windows::Foundation::Collections::IIterable<hstring> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind kind);
	static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(hstring_ref aqsFilter, Windows::Foundation::Collections::IIterable<hstring> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind kind);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(hstring_ref deviceId);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> CreateFromIdAsync(hstring_ref deviceId, Windows::Foundation::Collections::IIterable<hstring> const & additionalProperties);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(Windows::Devices::Enumeration::DeviceClass deviceClass);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(hstring_ref aqsFilter);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> FindAllAsync(hstring_ref aqsFilter, Windows::Foundation::Collections::IIterable<hstring> const & additionalProperties);
	static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher();
	static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(Windows::Devices::Enumeration::DeviceClass deviceClass);
	static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(hstring_ref aqsFilter);
	static Windows::Devices::Enumeration::DeviceWatcher CreateWatcher(hstring_ref aqsFilter, Windows::Foundation::Collections::IIterable<hstring> const & additionalProperties);
};

struct DeviceConnectionChangeTriggerDetails :
	Windows::Devices::Enumeration::IDeviceConnectionChangeTriggerDetails
{
	DeviceConnectionChangeTriggerDetails(std::nullptr_t) noexcept {}
};

struct DevicePickerAppearance :
	Windows::Devices::Enumeration::IDevicePickerAppearance
{
	DevicePickerAppearance(std::nullptr_t) noexcept {}
};

struct DeviceSelectedEventArgs :
	Windows::Devices::Enumeration::IDeviceSelectedEventArgs
{
	DeviceSelectedEventArgs(std::nullptr_t) noexcept {}
};

struct DeviceDisconnectButtonClickedEventArgs :
	Windows::Devices::Enumeration::IDeviceDisconnectButtonClickedEventArgs
{
	DeviceDisconnectButtonClickedEventArgs(std::nullptr_t) noexcept {}
};

struct DevicePickerFilter :
	Windows::Devices::Enumeration::IDevicePickerFilter
{
	DevicePickerFilter(std::nullptr_t) noexcept {}
};

struct DevicePicker :
	Windows::Devices::Enumeration::IDevicePicker
{
	DevicePicker(std::nullptr_t) noexcept {}
	DevicePicker();
};

struct DeviceThumbnail :
	Windows::Storage::Streams::IRandomAccessStreamWithContentType
{
	DeviceThumbnail(std::nullptr_t) noexcept {}
};

struct EnclosureLocation :
	Windows::Devices::Enumeration::IEnclosureLocation
{
	EnclosureLocation(std::nullptr_t) noexcept {}
};

struct DeviceInformationUpdate :
	Windows::Devices::Enumeration::IDeviceInformationUpdate,
	requires<DeviceInformationUpdate, Windows::Devices::Enumeration::IDeviceInformationUpdate2>
{
	DeviceInformationUpdate(std::nullptr_t) noexcept {}
};

struct DeviceInformationCollection :
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Enumeration::DeviceInformation>
{
	DeviceInformationCollection(std::nullptr_t) noexcept {}
};

struct DeviceWatcher :
	Windows::Devices::Enumeration::IDeviceWatcher,
	requires<DeviceWatcher, Windows::Devices::Enumeration::IDeviceWatcher2>
{
	DeviceWatcher(std::nullptr_t) noexcept {}
};

struct DevicePairingResult :
	Windows::Devices::Enumeration::IDevicePairingResult
{
	DevicePairingResult(std::nullptr_t) noexcept {}
};

struct DeviceUnpairingResult :
	Windows::Devices::Enumeration::IDeviceUnpairingResult
{
	DeviceUnpairingResult(std::nullptr_t) noexcept {}
};

struct DevicePairingRequestedEventArgs :
	Windows::Devices::Enumeration::IDevicePairingRequestedEventArgs
{
	DevicePairingRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct DeviceInformationCustomPairing :
	Windows::Devices::Enumeration::IDeviceInformationCustomPairing
{
	DeviceInformationCustomPairing(std::nullptr_t) noexcept {}
};

struct DeviceInformationPairing :
	Windows::Devices::Enumeration::IDeviceInformationPairing,
	requires<DeviceInformationPairing, Windows::Devices::Enumeration::IDeviceInformationPairing2>
{
	DeviceInformationPairing(std::nullptr_t) noexcept {}
	using impl_IDeviceInformationPairing::PairAsync;
	using impl_IDeviceInformationPairing2::PairAsync;
	static bool TryRegisterForAllInboundPairingRequests(Windows::Devices::Enumeration::DevicePairingKinds pairingKindsSupported);
};

struct DeviceAccessChangedEventArgs :
	Windows::Devices::Enumeration::IDeviceAccessChangedEventArgs
{
	DeviceAccessChangedEventArgs(std::nullptr_t) noexcept {}
};

struct DeviceAccessInformation :
	Windows::Devices::Enumeration::IDeviceAccessInformation
{
	DeviceAccessInformation(std::nullptr_t) noexcept {}
	static Windows::Devices::Enumeration::DeviceAccessInformation CreateFromId(hstring_ref deviceId);
	static Windows::Devices::Enumeration::DeviceAccessInformation CreateFromDeviceClassId(GUID deviceClassId);
	static Windows::Devices::Enumeration::DeviceAccessInformation CreateFromDeviceClass(Windows::Devices::Enumeration::DeviceClass deviceClass);
};

struct DeviceWatcherEvent :
	Windows::Devices::Enumeration::IDeviceWatcherEvent
{
	DeviceWatcherEvent(std::nullptr_t) noexcept {}
};

struct DeviceWatcherTriggerDetails :
	Windows::Devices::Enumeration::IDeviceWatcherTriggerDetails
{
	DeviceWatcherTriggerDetails(std::nullptr_t) noexcept {}
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Geolocation {

struct Geopoint :
	Windows::Devices::Geolocation::IGeopoint
{
	Geopoint(std::nullptr_t) noexcept {}
	Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position);
	Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem);
	Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem, unsigned spatialReferenceId);
};

struct Geopath :
	Windows::Devices::Geolocation::IGeopath
{
	Geopath(std::nullptr_t) noexcept {}
	Geopath(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions);
	Geopath(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem);
	Geopath(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem, unsigned spatialReferenceId);
};

struct GeoboundingBox :
	Windows::Devices::Geolocation::IGeoboundingBox
{
	GeoboundingBox(std::nullptr_t) noexcept {}
	GeoboundingBox(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner);
	GeoboundingBox(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem);
	GeoboundingBox(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem, unsigned spatialReferenceId);
	static Windows::Devices::Geolocation::GeoboundingBox TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions);
	static Windows::Devices::Geolocation::GeoboundingBox TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeRefSystem);
	static Windows::Devices::Geolocation::GeoboundingBox TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeRefSystem, unsigned spatialReferenceId);
};

struct GeocoordinateSatelliteData :
	Windows::Devices::Geolocation::IGeocoordinateSatelliteData
{
	GeocoordinateSatelliteData(std::nullptr_t) noexcept {}
};

struct VenueData :
	Windows::Devices::Geolocation::IVenueData
{
	VenueData(std::nullptr_t) noexcept {}
};

struct Geocoordinate :
	Windows::Devices::Geolocation::IGeocoordinate,
	requires<Geocoordinate, Windows::Devices::Geolocation::IGeocoordinateWithPositionData, Windows::Devices::Geolocation::IGeocoordinateWithPoint>
{
	Geocoordinate(std::nullptr_t) noexcept {}
};

struct CivicAddress :
	Windows::Devices::Geolocation::ICivicAddress
{
	CivicAddress(std::nullptr_t) noexcept {}
};

struct Geoposition :
	Windows::Devices::Geolocation::IGeoposition,
	requires<Geoposition, Windows::Devices::Geolocation::IGeoposition2>
{
	Geoposition(std::nullptr_t) noexcept {}
};

struct PositionChangedEventArgs :
	Windows::Devices::Geolocation::IPositionChangedEventArgs
{
	PositionChangedEventArgs(std::nullptr_t) noexcept {}
};

struct StatusChangedEventArgs :
	Windows::Devices::Geolocation::IStatusChangedEventArgs
{
	StatusChangedEventArgs(std::nullptr_t) noexcept {}
};

struct Geolocator :
	Windows::Devices::Geolocation::IGeolocator,
	requires<Geolocator, Windows::Devices::Geolocation::IGeolocatorWithScalarAccuracy>
{
	Geolocator(std::nullptr_t) noexcept {}
	Geolocator();
	static Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Geolocation::GeolocationAccessStatus> RequestAccessAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geoposition>> GetGeopositionHistoryAsync(Windows::Foundation::DateTime const & startTime);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geoposition>> GetGeopositionHistoryAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration);
};

struct Geocircle :
	Windows::Devices::Geolocation::IGeocircle
{
	Geocircle(std::nullptr_t) noexcept {}
	Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius);
	Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem);
	Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double radius, Windows::Devices::Geolocation::AltitudeReferenceSystem altitudeReferenceSystem, unsigned spatialReferenceId);
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Input {

struct PointerDevice :
	Windows::Devices::Input::IPointerDevice
{
	PointerDevice(std::nullptr_t) noexcept {}
	static Windows::Devices::Input::PointerDevice GetPointerDevice(unsigned pointerId);
	static Windows::Foundation::Collections::IVectorView<Windows::Devices::Input::PointerDevice> GetPointerDevices();
};

struct MouseDevice :
	Windows::Devices::Input::IMouseDevice
{
	MouseDevice(std::nullptr_t) noexcept {}
	static Windows::Devices::Input::MouseDevice GetForCurrentView();
};

struct MouseEventArgs :
	Windows::Devices::Input::IMouseEventArgs
{
	MouseEventArgs(std::nullptr_t) noexcept {}
};

struct MouseCapabilities :
	Windows::Devices::Input::IMouseCapabilities
{
	MouseCapabilities(std::nullptr_t) noexcept {}
	MouseCapabilities();
};

struct KeyboardCapabilities :
	Windows::Devices::Input::IKeyboardCapabilities
{
	KeyboardCapabilities(std::nullptr_t) noexcept {}
	KeyboardCapabilities();
};

struct TouchCapabilities :
	Windows::Devices::Input::ITouchCapabilities
{
	TouchCapabilities(std::nullptr_t) noexcept {}
	TouchCapabilities();
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

struct PrintTaskConfigurationSaveRequestedDeferral :
	Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedDeferral
{
	PrintTaskConfigurationSaveRequestedDeferral(std::nullptr_t) noexcept {}
};

struct PrintTaskConfigurationSaveRequest :
	Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequest
{
	PrintTaskConfigurationSaveRequest(std::nullptr_t) noexcept {}
};

struct PrintTaskConfigurationSaveRequestedEventArgs :
	Windows::Devices::Printers::Extensions::IPrintTaskConfigurationSaveRequestedEventArgs
{
	PrintTaskConfigurationSaveRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct PrintTaskConfiguration :
	Windows::Devices::Printers::Extensions::IPrintTaskConfiguration
{
	PrintTaskConfiguration(std::nullptr_t) noexcept {}
};

struct PrintNotificationEventDetails :
	Windows::Devices::Printers::Extensions::IPrintNotificationEventDetails
{
	PrintNotificationEventDetails(std::nullptr_t) noexcept {}
};

struct PrintExtensionContext
{
	PrintExtensionContext() = delete;
	static IInspectable FromDeviceId(hstring_ref deviceId);
};

struct Print3DWorkflowPrintRequestedEventArgs :
	Windows::Devices::Printers::Extensions::IPrint3DWorkflowPrintRequestedEventArgs
{
	Print3DWorkflowPrintRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct Print3DWorkflow :
	Windows::Devices::Printers::Extensions::IPrint3DWorkflow
{
	Print3DWorkflow(std::nullptr_t) noexcept {}
};

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sensors {

struct SensorDataThresholdTriggerDetails :
	Windows::Devices::Sensors::ISensorDataThresholdTriggerDetails
{
	SensorDataThresholdTriggerDetails(std::nullptr_t) noexcept {}
};

struct Accelerometer :
	Windows::Devices::Sensors::IAccelerometer,
	requires<Accelerometer, Windows::Devices::Sensors::IAccelerometerDeviceId, Windows::Devices::Sensors::IAccelerometer2, Windows::Devices::Sensors::IAccelerometer3>
{
	Accelerometer(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::Accelerometer GetDefault();
};

struct AccelerometerReading :
	Windows::Devices::Sensors::IAccelerometerReading
{
	AccelerometerReading(std::nullptr_t) noexcept {}
};

struct AccelerometerReadingChangedEventArgs :
	Windows::Devices::Sensors::IAccelerometerReadingChangedEventArgs
{
	AccelerometerReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct AccelerometerShakenEventArgs :
	Windows::Devices::Sensors::IAccelerometerShakenEventArgs
{
	AccelerometerShakenEventArgs(std::nullptr_t) noexcept {}
};

struct Inclinometer :
	Windows::Devices::Sensors::IInclinometer,
	requires<Inclinometer, Windows::Devices::Sensors::IInclinometerDeviceId, Windows::Devices::Sensors::IInclinometer2>
{
	Inclinometer(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::Inclinometer GetDefault();
	static Windows::Devices::Sensors::Inclinometer GetDefaultForRelativeReadings();
};

struct InclinometerReading :
	Windows::Devices::Sensors::IInclinometerReading,
	requires<InclinometerReading, Windows::Devices::Sensors::IInclinometerReadingYawAccuracy>
{
	InclinometerReading(std::nullptr_t) noexcept {}
};

struct InclinometerReadingChangedEventArgs :
	Windows::Devices::Sensors::IInclinometerReadingChangedEventArgs
{
	InclinometerReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct Gyrometer :
	Windows::Devices::Sensors::IGyrometer,
	requires<Gyrometer, Windows::Devices::Sensors::IGyrometerDeviceId, Windows::Devices::Sensors::IGyrometer2>
{
	Gyrometer(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::Gyrometer GetDefault();
};

struct GyrometerReading :
	Windows::Devices::Sensors::IGyrometerReading
{
	GyrometerReading(std::nullptr_t) noexcept {}
};

struct GyrometerReadingChangedEventArgs :
	Windows::Devices::Sensors::IGyrometerReadingChangedEventArgs
{
	GyrometerReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct Compass :
	Windows::Devices::Sensors::ICompass,
	requires<Compass, Windows::Devices::Sensors::ICompassDeviceId, Windows::Devices::Sensors::ICompass2>
{
	Compass(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::Compass GetDefault();
};

struct CompassReading :
	Windows::Devices::Sensors::ICompassReading,
	requires<CompassReading, Windows::Devices::Sensors::ICompassReadingHeadingAccuracy>
{
	CompassReading(std::nullptr_t) noexcept {}
};

struct CompassReadingChangedEventArgs :
	Windows::Devices::Sensors::ICompassReadingChangedEventArgs
{
	CompassReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct LightSensor :
	Windows::Devices::Sensors::ILightSensor,
	requires<LightSensor, Windows::Devices::Sensors::ILightSensorDeviceId>
{
	LightSensor(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::LightSensor GetDefault();
};

struct LightSensorReading :
	Windows::Devices::Sensors::ILightSensorReading
{
	LightSensorReading(std::nullptr_t) noexcept {}
};

struct LightSensorReadingChangedEventArgs :
	Windows::Devices::Sensors::ILightSensorReadingChangedEventArgs
{
	LightSensorReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct SensorRotationMatrix :
	Windows::Devices::Sensors::ISensorRotationMatrix
{
	SensorRotationMatrix(std::nullptr_t) noexcept {}
};

struct SensorQuaternion :
	Windows::Devices::Sensors::ISensorQuaternion
{
	SensorQuaternion(std::nullptr_t) noexcept {}
};

struct OrientationSensor :
	Windows::Devices::Sensors::IOrientationSensor,
	requires<OrientationSensor, Windows::Devices::Sensors::IOrientationSensorDeviceId, Windows::Devices::Sensors::IOrientationSensor2>
{
	OrientationSensor(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::OrientationSensor GetDefault();
	static Windows::Devices::Sensors::OrientationSensor GetDefaultForRelativeReadings();
};

struct OrientationSensorReading :
	Windows::Devices::Sensors::IOrientationSensorReading,
	requires<OrientationSensorReading, Windows::Devices::Sensors::IOrientationSensorReadingYawAccuracy>
{
	OrientationSensorReading(std::nullptr_t) noexcept {}
};

struct OrientationSensorReadingChangedEventArgs :
	Windows::Devices::Sensors::IOrientationSensorReadingChangedEventArgs
{
	OrientationSensorReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct SimpleOrientationSensor :
	Windows::Devices::Sensors::ISimpleOrientationSensor,
	requires<SimpleOrientationSensor, Windows::Devices::Sensors::ISimpleOrientationSensorDeviceId, Windows::Devices::Sensors::ISimpleOrientationSensor2>
{
	SimpleOrientationSensor(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::SimpleOrientationSensor GetDefault();
};

struct SimpleOrientationSensorOrientationChangedEventArgs :
	Windows::Devices::Sensors::ISimpleOrientationSensorOrientationChangedEventArgs
{
	SimpleOrientationSensorOrientationChangedEventArgs(std::nullptr_t) noexcept {}
};

struct Magnetometer :
	Windows::Devices::Sensors::IMagnetometer,
	requires<Magnetometer, Windows::Devices::Sensors::IMagnetometerDeviceId, Windows::Devices::Sensors::IMagnetometer2>
{
	Magnetometer(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::Magnetometer GetDefault();
};

struct MagnetometerReading :
	Windows::Devices::Sensors::IMagnetometerReading
{
	MagnetometerReading(std::nullptr_t) noexcept {}
};

struct MagnetometerReadingChangedEventArgs :
	Windows::Devices::Sensors::IMagnetometerReadingChangedEventArgs
{
	MagnetometerReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct ActivitySensor :
	Windows::Devices::Sensors::IActivitySensor
{
	ActivitySensor(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensor> GetDefaultAsync();
	static hstring GetDeviceSelector();
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensor> FromIdAsync(hstring_ref deviceId);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReading>> GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReading>> GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime, Windows::Foundation::TimeSpan const & duration);
};

struct ActivitySensorReading :
	Windows::Devices::Sensors::IActivitySensorReading
{
	ActivitySensorReading(std::nullptr_t) noexcept {}
};

struct ActivitySensorReadingChangedEventArgs :
	Windows::Devices::Sensors::IActivitySensorReadingChangedEventArgs
{
	ActivitySensorReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct ActivitySensorReadingChangeReport :
	Windows::Devices::Sensors::IActivitySensorReadingChangeReport
{
	ActivitySensorReadingChangeReport(std::nullptr_t) noexcept {}
};

struct ActivitySensorTriggerDetails :
	Windows::Devices::Sensors::IActivitySensorTriggerDetails
{
	ActivitySensorTriggerDetails(std::nullptr_t) noexcept {}
};

struct Barometer :
	Windows::Devices::Sensors::IBarometer
{
	Barometer(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::Barometer GetDefault();
};

struct BarometerReading :
	Windows::Devices::Sensors::IBarometerReading
{
	BarometerReading(std::nullptr_t) noexcept {}
};

struct BarometerReadingChangedEventArgs :
	Windows::Devices::Sensors::IBarometerReadingChangedEventArgs
{
	BarometerReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct PedometerReading :
	Windows::Devices::Sensors::IPedometerReading
{
	PedometerReading(std::nullptr_t) noexcept {}
};

struct Pedometer :
	Windows::Devices::Sensors::IPedometer,
	requires<Pedometer, Windows::Devices::Sensors::IPedometer2>
{
	Pedometer(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::Pedometer> FromIdAsync(hstring_ref deviceId);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::Pedometer> GetDefaultAsync();
	static hstring GetDeviceSelector();
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading>> GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading>> GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime, Windows::Foundation::TimeSpan const & duration);
	static Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading> GetReadingsFromTriggerDetails(Windows::Devices::Sensors::SensorDataThresholdTriggerDetails const & triggerDetails);
};

struct PedometerReadingChangedEventArgs :
	Windows::Devices::Sensors::IPedometerReadingChangedEventArgs
{
	PedometerReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct PedometerDataThreshold :
	Windows::Devices::Sensors::ISensorDataThreshold
{
	PedometerDataThreshold(std::nullptr_t) noexcept {}
	PedometerDataThreshold(Windows::Devices::Sensors::Pedometer const & sensor, int stepGoal);
};

struct ProximitySensor :
	Windows::Devices::Sensors::IProximitySensor
{
	ProximitySensor(std::nullptr_t) noexcept {}
	static Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ProximitySensorReading> GetReadingsFromTriggerDetails(Windows::Devices::Sensors::SensorDataThresholdTriggerDetails const & triggerDetails);
	static hstring GetDeviceSelector();
	static Windows::Devices::Sensors::ProximitySensor FromId(hstring_ref sensorId);
};

struct ProximitySensorReading :
	Windows::Devices::Sensors::IProximitySensorReading
{
	ProximitySensorReading(std::nullptr_t) noexcept {}
};

struct ProximitySensorReadingChangedEventArgs :
	Windows::Devices::Sensors::IProximitySensorReadingChangedEventArgs
{
	ProximitySensorReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

struct ProximitySensorDisplayOnOffController :
	Windows::Foundation::IClosable
{
	ProximitySensorDisplayOnOffController(std::nullptr_t) noexcept {}
};

struct ProximitySensorDataThreshold :
	Windows::Devices::Sensors::ISensorDataThreshold
{
	ProximitySensorDataThreshold(std::nullptr_t) noexcept {}
	ProximitySensorDataThreshold(Windows::Devices::Sensors::ProximitySensor const & sensor);
};

struct Altimeter :
	Windows::Devices::Sensors::IAltimeter
{
	Altimeter(std::nullptr_t) noexcept {}
	static Windows::Devices::Sensors::Altimeter GetDefault();
};

struct AltimeterReading :
	Windows::Devices::Sensors::IAltimeterReading
{
	AltimeterReading(std::nullptr_t) noexcept {}
};

struct AltimeterReadingChangedEventArgs :
	Windows::Devices::Sensors::IAltimeterReadingChangedEventArgs
{
	AltimeterReadingChangedEventArgs(std::nullptr_t) noexcept {}
};

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sms {

struct SmsBinaryMessage :
	Windows::Devices::Sms::ISmsBinaryMessage
{
	SmsBinaryMessage(std::nullptr_t) noexcept {}
	SmsBinaryMessage();
};

struct SmsTextMessage :
	Windows::Devices::Sms::ISmsTextMessage
{
	SmsTextMessage(std::nullptr_t) noexcept {}
	SmsTextMessage();
	static Windows::Devices::Sms::SmsTextMessage FromBinaryMessage(Windows::Devices::Sms::SmsBinaryMessage const & binaryMessage);
};

struct SmsTextMessage2 :
	Windows::Devices::Sms::ISmsTextMessage2
{
	SmsTextMessage2(std::nullptr_t) noexcept {}
	SmsTextMessage2();
};

struct SmsWapMessage :
	Windows::Devices::Sms::ISmsWapMessage
{
	SmsWapMessage(std::nullptr_t) noexcept {}
};

struct SmsAppMessage :
	Windows::Devices::Sms::ISmsAppMessage
{
	SmsAppMessage(std::nullptr_t) noexcept {}
	SmsAppMessage();
};

struct SmsBroadcastMessage :
	Windows::Devices::Sms::ISmsBroadcastMessage
{
	SmsBroadcastMessage(std::nullptr_t) noexcept {}
};

struct SmsVoicemailMessage :
	Windows::Devices::Sms::ISmsVoicemailMessage
{
	SmsVoicemailMessage(std::nullptr_t) noexcept {}
};

struct SmsStatusMessage :
	Windows::Devices::Sms::ISmsStatusMessage
{
	SmsStatusMessage(std::nullptr_t) noexcept {}
};

struct DeleteSmsMessageOperation :
	Windows::Foundation::IAsyncAction
{
	DeleteSmsMessageOperation(std::nullptr_t) noexcept {}
};

struct DeleteSmsMessagesOperation :
	Windows::Foundation::IAsyncAction
{
	DeleteSmsMessagesOperation(std::nullptr_t) noexcept {}
};

struct GetSmsMessageOperation :
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::ISmsMessage>
{
	GetSmsMessageOperation(std::nullptr_t) noexcept {}
};

struct GetSmsMessagesOperation :
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsMessage>, int>
{
	GetSmsMessagesOperation(std::nullptr_t) noexcept {}
};

struct SmsDeviceMessageStore :
	Windows::Devices::Sms::ISmsDeviceMessageStore
{
	SmsDeviceMessageStore(std::nullptr_t) noexcept {}
};

struct SmsSendMessageResult :
	Windows::Devices::Sms::ISmsSendMessageResult
{
	SmsSendMessageResult(std::nullptr_t) noexcept {}
};

struct SendSmsMessageOperation :
	Windows::Foundation::IAsyncAction
{
	SendSmsMessageOperation(std::nullptr_t) noexcept {}
};

struct SmsMessageReceivedEventArgs :
	Windows::Devices::Sms::ISmsMessageReceivedEventArgs
{
	SmsMessageReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct SmsDevice :
	Windows::Devices::Sms::ISmsDevice
{
	SmsDevice(std::nullptr_t) noexcept {}
	static hstring GetDeviceSelector();
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromIdAsync(hstring_ref deviceId);
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> GetDefaultAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> FromNetworkAccountIdAsync(hstring_ref networkAccountId);
};

struct GetSmsDeviceOperation :
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice>
{
	GetSmsDeviceOperation(std::nullptr_t) noexcept {}
};

struct SmsDevice2 :
	Windows::Devices::Sms::ISmsDevice2
{
	SmsDevice2(std::nullptr_t) noexcept {}
	static hstring GetDeviceSelector();
	static Windows::Devices::Sms::SmsDevice2 FromId(hstring_ref deviceId);
	static Windows::Devices::Sms::SmsDevice2 GetDefault();
	static Windows::Devices::Sms::SmsDevice2 FromParentId(hstring_ref parentDeviceId);
};

struct SmsReceivedEventDetails :
	Windows::Devices::Sms::ISmsReceivedEventDetails,
	requires<SmsReceivedEventDetails, Windows::Devices::Sms::ISmsReceivedEventDetails2>
{
	SmsReceivedEventDetails(std::nullptr_t) noexcept {}
};

struct SmsMessageReceivedTriggerDetails :
	Windows::Devices::Sms::ISmsMessageReceivedTriggerDetails
{
	SmsMessageReceivedTriggerDetails(std::nullptr_t) noexcept {}
};

struct SmsFilterRule :
	Windows::Devices::Sms::ISmsFilterRule
{
	SmsFilterRule(std::nullptr_t) noexcept {}
	SmsFilterRule(Windows::Devices::Sms::SmsMessageType messageType);
};

struct SmsFilterRules :
	Windows::Devices::Sms::ISmsFilterRules
{
	SmsFilterRules(std::nullptr_t) noexcept {}
	SmsFilterRules(Windows::Devices::Sms::SmsFilterActionType actionType);
};

struct SmsMessageRegistration :
	Windows::Devices::Sms::ISmsMessageRegistration
{
	SmsMessageRegistration(std::nullptr_t) noexcept {}
	static Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::SmsMessageRegistration> AllRegistrations();
	static Windows::Devices::Sms::SmsMessageRegistration Register(hstring_ref id, Windows::Devices::Sms::SmsFilterRules const & filterRules);
};

}}}}

namespace winrt { namespace Windows { namespace Foundation {

struct WwwFormUrlDecoder :
	Windows::Foundation::IWwwFormUrlDecoderRuntimeClass
{
	WwwFormUrlDecoder(std::nullptr_t) noexcept {}
	WwwFormUrlDecoder(hstring_ref query);
};

struct Uri :
	Windows::Foundation::IUriRuntimeClass,
	requires<Uri, Windows::Foundation::IUriRuntimeClassWithAbsoluteCanonicalUri, Windows::Foundation::IStringable>
{
	Uri(std::nullptr_t) noexcept {}
	Uri(hstring_ref uri);
	Uri(hstring_ref baseUri, hstring_ref relativeUri);
	static hstring UnescapeComponent(hstring_ref toUnescape);
	static hstring EscapeComponent(hstring_ref toEscape);
};

struct WwwFormUrlDecoderEntry :
	Windows::Foundation::IWwwFormUrlDecoderEntry
{
	WwwFormUrlDecoderEntry(std::nullptr_t) noexcept {}
};

struct PropertyValue
{
	PropertyValue() = delete;
	static IInspectable CreateEmpty();
	static IInspectable CreateUInt8(byte value);
	static IInspectable CreateInt16(short value);
	static IInspectable CreateUInt16(unsigned short value);
	static IInspectable CreateInt32(int value);
	static IInspectable CreateUInt32(unsigned value);
	static IInspectable CreateInt64(long long value);
	static IInspectable CreateUInt64(unsigned long long value);
	static IInspectable CreateSingle(float value);
	static IInspectable CreateDouble(double value);
	static IInspectable CreateChar16(wchar_t value);
	static IInspectable CreateBoolean(bool value);
	static IInspectable CreateString(hstring_ref value);
	static IInspectable CreateInspectable(IInspectable const & value);
	static IInspectable CreateGuid(GUID value);
	static IInspectable CreateDateTime(Windows::Foundation::DateTime const & value);
	static IInspectable CreateTimeSpan(Windows::Foundation::TimeSpan const & value);
	static IInspectable CreatePoint(Windows::Foundation::Point const & value);
	static IInspectable CreateSize(Windows::Foundation::Size const & value);
	static IInspectable CreateRect(Windows::Foundation::Rect const & value);
};

struct Deferral :
	Windows::Foundation::IDeferral
{
	Deferral(std::nullptr_t) noexcept {}
	Deferral(Windows::Foundation::IDeferralCompletedHandler const & handler);
	template <typename F> Deferral(F handler);
};

struct MemoryBuffer :
	Windows::Foundation::IMemoryBuffer
{
	MemoryBuffer(std::nullptr_t) noexcept {}
	MemoryBuffer(unsigned capacity);
};

}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Collections {

struct PropertySet :
	Windows::Foundation::Collections::IPropertySet
{
	PropertySet(std::nullptr_t) noexcept {}
	PropertySet();
};

struct ValueSet :
	Windows::Foundation::Collections::IPropertySet
{
	ValueSet(std::nullptr_t) noexcept {}
	ValueSet();
};

struct StringMap :
	Windows::Foundation::Collections::IMap<hstring, hstring>
{
	StringMap(std::nullptr_t) noexcept {}
	StringMap();
};

}}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Diagnostics {

struct TracingStatusChangedEventArgs :
	Windows::Foundation::Diagnostics::ITracingStatusChangedEventArgs
{
	TracingStatusChangedEventArgs(std::nullptr_t) noexcept {}
};

struct AsyncCausalityTracer
{
	AsyncCausalityTracer() = delete;
	static void TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, hstring_ref operationName, unsigned long long relatedContext);
	static void TraceOperationCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, AsyncStatus status);
	static void TraceOperationRelation(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, Windows::Foundation::Diagnostics::CausalityRelation relation);
	static void TraceSynchronousWorkStart(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, GUID platformId, unsigned long long operationId, Windows::Foundation::Diagnostics::CausalitySynchronousWork work);
	static void TraceSynchronousWorkCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel traceLevel, Windows::Foundation::Diagnostics::CausalitySource source, Windows::Foundation::Diagnostics::CausalitySynchronousWork work);
	static long long TracingStatusChanged(Windows::Foundation::IEventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs> const & handler);
	template <typename F> static long long TracingStatusChanged(F handler);
	static void TracingStatusChanged(long long cookie);
};

struct RuntimeBrokerErrorSettings :
	Windows::Foundation::Diagnostics::IErrorReportingSettings
{
	RuntimeBrokerErrorSettings(std::nullptr_t) noexcept {}
	RuntimeBrokerErrorSettings();
};

struct ErrorDetails :
	Windows::Foundation::Diagnostics::IErrorDetails
{
	ErrorDetails(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Diagnostics::ErrorDetails> CreateFromHResultAsync(int errorCode);
};

struct LoggingOptions :
	Windows::Foundation::Diagnostics::ILoggingOptions
{
	LoggingOptions(std::nullptr_t) noexcept {}
	LoggingOptions();
	LoggingOptions(long long keywords);
};

struct LoggingChannelOptions :
	Windows::Foundation::Diagnostics::ILoggingChannelOptions
{
	LoggingChannelOptions(std::nullptr_t) noexcept {}
	LoggingChannelOptions();
	LoggingChannelOptions(GUID group);
};

struct LoggingFields :
	Windows::Foundation::Diagnostics::ILoggingFields
{
	LoggingFields(std::nullptr_t) noexcept {}
	LoggingFields();
};

struct LoggingActivity :
	Windows::Foundation::Diagnostics::ILoggingActivity,
	requires<LoggingActivity, Windows::Foundation::Diagnostics::ILoggingActivity2, Windows::Foundation::Diagnostics::ILoggingTarget>
{
	LoggingActivity(std::nullptr_t) noexcept {}
	LoggingActivity(hstring_ref activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel);
	LoggingActivity(hstring_ref activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel level);
};

struct LoggingChannel :
	Windows::Foundation::Diagnostics::ILoggingChannel,
	requires<LoggingChannel, Windows::Foundation::Diagnostics::ILoggingChannel2, Windows::Foundation::Diagnostics::ILoggingTarget>
{
	LoggingChannel(std::nullptr_t) noexcept {}
	LoggingChannel(hstring_ref name);
	LoggingChannel(hstring_ref name, Windows::Foundation::Diagnostics::LoggingChannelOptions const & options);
	LoggingChannel(hstring_ref name, Windows::Foundation::Diagnostics::LoggingChannelOptions const & options, GUID id);
};

struct LoggingSession :
	Windows::Foundation::Diagnostics::ILoggingSession
{
	LoggingSession(std::nullptr_t) noexcept {}
	LoggingSession(hstring_ref name);
};

struct LogFileGeneratedEventArgs :
	Windows::Foundation::Diagnostics::ILogFileGeneratedEventArgs
{
	LogFileGeneratedEventArgs(std::nullptr_t) noexcept {}
};

struct FileLoggingSession :
	Windows::Foundation::Diagnostics::IFileLoggingSession
{
	FileLoggingSession(std::nullptr_t) noexcept {}
	FileLoggingSession(hstring_ref name);
};

}}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Metadata {

struct ApiInformation
{
	ApiInformation() = delete;
	static bool IsTypePresent(hstring_ref typeName);
	static bool IsMethodPresent(hstring_ref typeName, hstring_ref methodName);
	static bool IsMethodPresent(hstring_ref typeName, hstring_ref methodName, unsigned inputParameterCount);
	static bool IsEventPresent(hstring_ref typeName, hstring_ref eventName);
	static bool IsPropertyPresent(hstring_ref typeName, hstring_ref propertyName);
	static bool IsReadOnlyPropertyPresent(hstring_ref typeName, hstring_ref propertyName);
	static bool IsWriteablePropertyPresent(hstring_ref typeName, hstring_ref propertyName);
	static bool IsEnumNamedValuePresent(hstring_ref enumTypeName, hstring_ref valueName);
	static bool IsApiContractPresent(hstring_ref contractName, unsigned short majorVersion);
	static bool IsApiContractPresent(hstring_ref contractName, unsigned short majorVersion, unsigned short minorVersion);
};

}}}}

namespace winrt { namespace Windows { namespace Gaming { namespace Input {

struct Headset :
	Windows::Gaming::Input::IHeadset
{
	Headset(std::nullptr_t) noexcept {}
};

struct Gamepad :
	Windows::Gaming::Input::IGamepad
{
	Gamepad(std::nullptr_t) noexcept {}
	static long long GamepadAdded(Windows::Foundation::IEventHandler<Windows::Gaming::Input::Gamepad> const & value);
	template <typename F> static long long GamepadAdded(F value);
	static void GamepadAdded(long long token);
	static long long GamepadRemoved(Windows::Foundation::IEventHandler<Windows::Gaming::Input::Gamepad> const & value);
	template <typename F> static long long GamepadRemoved(F value);
	static void GamepadRemoved(long long token);
	static Windows::Foundation::Collections::IVectorView<Windows::Gaming::Input::Gamepad> Gamepads();
};

}}}}

namespace winrt { namespace Windows { namespace Globalization {

struct JapanesePhoneme :
	Windows::Globalization::IJapanesePhoneme
{
	JapanesePhoneme(std::nullptr_t) noexcept {}
};

struct JapanesePhoneticAnalyzer
{
	JapanesePhoneticAnalyzer() = delete;
	static Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(hstring_ref input);
	static Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> GetWords(hstring_ref input, bool monoRuby);
};

struct CalendarIdentifiers
{
	CalendarIdentifiers() = delete;
	static hstring Gregorian();
	static hstring Hebrew();
	static hstring Hijri();
	static hstring Japanese();
	static hstring Julian();
	static hstring Korean();
	static hstring Taiwan();
	static hstring Thai();
	static hstring UmAlQura();
	static hstring Persian();
};

struct ClockIdentifiers
{
	ClockIdentifiers() = delete;
	static hstring TwelveHour();
	static hstring TwentyFourHour();
};

struct NumeralSystemIdentifiers
{
	NumeralSystemIdentifiers() = delete;
	static hstring Arab();
	static hstring ArabExt();
	static hstring Bali();
	static hstring Beng();
	static hstring Cham();
	static hstring Deva();
	static hstring FullWide();
	static hstring Gujr();
	static hstring Guru();
	static hstring HaniDec();
	static hstring Java();
	static hstring Kali();
	static hstring Khmr();
	static hstring Knda();
	static hstring Lana();
	static hstring LanaTham();
	static hstring Laoo();
	static hstring Latn();
	static hstring Lepc();
	static hstring Limb();
	static hstring Mlym();
	static hstring Mong();
	static hstring Mtei();
	static hstring Mymr();
	static hstring MymrShan();
	static hstring Nkoo();
	static hstring Olck();
	static hstring Orya();
	static hstring Saur();
	static hstring Sund();
	static hstring Talu();
	static hstring TamlDec();
	static hstring Telu();
	static hstring Thai();
	static hstring Tibt();
	static hstring Vaii();
	static hstring Brah();
	static hstring Osma();
	static hstring MathBold();
	static hstring MathDbl();
	static hstring MathSans();
	static hstring MathSanb();
	static hstring MathMono();
	static hstring ZmthBold();
	static hstring ZmthDbl();
	static hstring ZmthSans();
	static hstring ZmthSanb();
	static hstring ZmthMono();
};

struct CurrencyIdentifiers
{
	CurrencyIdentifiers() = delete;
	static hstring AED();
	static hstring AFN();
	static hstring ALL();
	static hstring AMD();
	static hstring ANG();
	static hstring AOA();
	static hstring ARS();
	static hstring AUD();
	static hstring AWG();
	static hstring AZN();
	static hstring BAM();
	static hstring BBD();
	static hstring BDT();
	static hstring BGN();
	static hstring BHD();
	static hstring BIF();
	static hstring BMD();
	static hstring BND();
	static hstring BOB();
	static hstring BRL();
	static hstring BSD();
	static hstring BTN();
	static hstring BWP();
	static hstring BYR();
	static hstring BZD();
	static hstring CAD();
	static hstring CDF();
	static hstring CHF();
	static hstring CLP();
	static hstring CNY();
	static hstring COP();
	static hstring CRC();
	static hstring CUP();
	static hstring CVE();
	static hstring CZK();
	static hstring DJF();
	static hstring DKK();
	static hstring DOP();
	static hstring DZD();
	static hstring EGP();
	static hstring ERN();
	static hstring ETB();
	static hstring EUR();
	static hstring FJD();
	static hstring FKP();
	static hstring GBP();
	static hstring GEL();
	static hstring GHS();
	static hstring GIP();
	static hstring GMD();
	static hstring GNF();
	static hstring GTQ();
	static hstring GYD();
	static hstring HKD();
	static hstring HNL();
	static hstring HRK();
	static hstring HTG();
	static hstring HUF();
	static hstring IDR();
	static hstring ILS();
	static hstring INR();
	static hstring IQD();
	static hstring IRR();
	static hstring ISK();
	static hstring JMD();
	static hstring JOD();
	static hstring JPY();
	static hstring KES();
	static hstring KGS();
	static hstring KHR();
	static hstring KMF();
	static hstring KPW();
	static hstring KRW();
	static hstring KWD();
	static hstring KYD();
	static hstring KZT();
	static hstring LAK();
	static hstring LBP();
	static hstring LKR();
	static hstring LRD();
	static hstring LSL();
	static hstring LTL();
	static hstring LVL();
	static hstring LYD();
	static hstring MAD();
	static hstring MDL();
	static hstring MGA();
	static hstring MKD();
	static hstring MMK();
	static hstring MNT();
	static hstring MOP();
	static hstring MRO();
	static hstring MUR();
	static hstring MVR();
	static hstring MWK();
	static hstring MXN();
	static hstring MYR();
	static hstring MZN();
	static hstring NAD();
	static hstring NGN();
	static hstring NIO();
	static hstring NOK();
	static hstring NPR();
	static hstring NZD();
	static hstring OMR();
	static hstring PAB();
	static hstring PEN();
	static hstring PGK();
	static hstring PHP();
	static hstring PKR();
	static hstring PLN();
	static hstring PYG();
	static hstring QAR();
	static hstring RON();
	static hstring RSD();
	static hstring RUB();
	static hstring RWF();
	static hstring SAR();
	static hstring SBD();
	static hstring SCR();
	static hstring SDG();
	static hstring SEK();
	static hstring SGD();
	static hstring SHP();
	static hstring SLL();
	static hstring SOS();
	static hstring SRD();
	static hstring STD();
	static hstring SYP();
	static hstring SZL();
	static hstring THB();
	static hstring TJS();
	static hstring TMT();
	static hstring TND();
	static hstring TOP();
	static hstring TRY();
	static hstring TTD();
	static hstring TWD();
	static hstring TZS();
	static hstring UAH();
	static hstring UGX();
	static hstring USD();
	static hstring UYU();
	static hstring UZS();
	static hstring VEF();
	static hstring VND();
	static hstring VUV();
	static hstring WST();
	static hstring XAF();
	static hstring XCD();
	static hstring XOF();
	static hstring XPF();
	static hstring XXX();
	static hstring YER();
	static hstring ZAR();
	static hstring ZMW();
	static hstring ZWL();
};

struct GeographicRegion :
	Windows::Globalization::IGeographicRegion
{
	GeographicRegion(std::nullptr_t) noexcept {}
	GeographicRegion();
	GeographicRegion(hstring_ref geographicRegionCode);
	static bool IsSupported(hstring_ref geographicRegionCode);
};

struct Language :
	Windows::Globalization::ILanguage,
	requires<Language, Windows::Globalization::ILanguageExtensionSubtags>
{
	Language(std::nullptr_t) noexcept {}
	Language(hstring_ref languageTag);
	static bool TrySetInputMethodLanguageTag(hstring_ref languageTag);
	static bool IsWellFormed(hstring_ref languageTag);
	static hstring CurrentInputMethodLanguageTag();
};

struct Calendar :
	Windows::Globalization::ICalendar,
	requires<Calendar, Windows::Globalization::ITimeZoneOnCalendar>
{
	Calendar(std::nullptr_t) noexcept {}
	Calendar();
	Calendar(Windows::Foundation::Collections::IIterable<hstring> const & languages);
	Calendar(Windows::Foundation::Collections::IIterable<hstring> const & languages, hstring_ref calendar, hstring_ref clock);
	Calendar(Windows::Foundation::Collections::IIterable<hstring> const & languages, hstring_ref calendar, hstring_ref clock, hstring_ref timeZoneId);
};

struct ApplicationLanguages
{
	ApplicationLanguages() = delete;
	static hstring PrimaryLanguageOverride();
	static void PrimaryLanguageOverride(hstring_ref value);
	static Windows::Foundation::Collections::IVectorView<hstring> Languages();
	static Windows::Foundation::Collections::IVectorView<hstring> ManifestLanguages();
};

}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Display {

struct DisplayInformation :
	Windows::Graphics::Display::IDisplayInformation,
	requires<DisplayInformation, Windows::Graphics::Display::IDisplayInformation2, Windows::Graphics::Display::IDisplayInformation3>
{
	DisplayInformation(std::nullptr_t) noexcept {}
	static Windows::Graphics::Display::DisplayInformation GetForCurrentView();
	static Windows::Graphics::Display::DisplayOrientations AutoRotationPreferences();
	static void AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations value);
	static long long DisplayContentsInvalidated(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler);
	template <typename F> static long long DisplayContentsInvalidated(F handler);
	static void DisplayContentsInvalidated(long long token);
};

struct DisplayProperties
{
	DisplayProperties() = delete;
	static Windows::Graphics::Display::DisplayOrientations CurrentOrientation();
	static Windows::Graphics::Display::DisplayOrientations NativeOrientation();
	static Windows::Graphics::Display::DisplayOrientations AutoRotationPreferences();
	static void AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations value);
	static long long OrientationChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler);
	template <typename F> static long long OrientationChanged(F handler);
	static void OrientationChanged(long long token);
	static Windows::Graphics::Display::ResolutionScale ResolutionScale();
	static float LogicalDpi();
	static long long LogicalDpiChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler);
	template <typename F> static long long LogicalDpiChanged(F handler);
	static void LogicalDpiChanged(long long token);
	static bool StereoEnabled();
	static long long StereoEnabledChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler);
	template <typename F> static long long StereoEnabledChanged(F handler);
	static void StereoEnabledChanged(long long token);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> GetColorProfileAsync();
	static long long ColorProfileChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler);
	template <typename F> static long long ColorProfileChanged(F handler);
	static void ColorProfileChanged(long long token);
	static long long DisplayContentsInvalidated(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler);
	template <typename F> static long long DisplayContentsInvalidated(F handler);
	static void DisplayContentsInvalidated(long long token);
};

}}}}

namespace winrt { namespace Windows { namespace Media { namespace SpeechRecognition {

struct SpeechRecognitionSemanticInterpretation :
	Windows::Media::SpeechRecognition::ISpeechRecognitionSemanticInterpretation
{
	SpeechRecognitionSemanticInterpretation(std::nullptr_t) noexcept {}
};

struct SpeechRecognitionResult :
	Windows::Media::SpeechRecognition::ISpeechRecognitionResult,
	requires<SpeechRecognitionResult, Windows::Media::SpeechRecognition::ISpeechRecognitionResult2>
{
	SpeechRecognitionResult(std::nullptr_t) noexcept {}
};

struct SpeechRecognitionTopicConstraint :
	Windows::Media::SpeechRecognition::ISpeechRecognitionTopicConstraint
{
	SpeechRecognitionTopicConstraint(std::nullptr_t) noexcept {}
	SpeechRecognitionTopicConstraint(Windows::Media::SpeechRecognition::SpeechRecognitionScenario scenario, hstring_ref topicHint);
	SpeechRecognitionTopicConstraint(Windows::Media::SpeechRecognition::SpeechRecognitionScenario scenario, hstring_ref topicHint, hstring_ref tag);
};

struct SpeechRecognitionListConstraint :
	Windows::Media::SpeechRecognition::ISpeechRecognitionListConstraint
{
	SpeechRecognitionListConstraint(std::nullptr_t) noexcept {}
	SpeechRecognitionListConstraint(Windows::Foundation::Collections::IIterable<hstring> const & commands);
	SpeechRecognitionListConstraint(Windows::Foundation::Collections::IIterable<hstring> const & commands, hstring_ref tag);
};

struct SpeechRecognitionGrammarFileConstraint :
	Windows::Media::SpeechRecognition::ISpeechRecognitionGrammarFileConstraint
{
	SpeechRecognitionGrammarFileConstraint(std::nullptr_t) noexcept {}
	SpeechRecognitionGrammarFileConstraint(Windows::Storage::StorageFile const & file);
	SpeechRecognitionGrammarFileConstraint(Windows::Storage::StorageFile const & file, hstring_ref tag);
};

struct SpeechRecognizerTimeouts :
	Windows::Media::SpeechRecognition::ISpeechRecognizerTimeouts
{
	SpeechRecognizerTimeouts(std::nullptr_t) noexcept {}
};

struct SpeechRecognizerUIOptions :
	Windows::Media::SpeechRecognition::ISpeechRecognizerUIOptions
{
	SpeechRecognizerUIOptions(std::nullptr_t) noexcept {}
};

struct SpeechRecognitionCompilationResult :
	Windows::Media::SpeechRecognition::ISpeechRecognitionCompilationResult
{
	SpeechRecognitionCompilationResult(std::nullptr_t) noexcept {}
};

struct SpeechRecognizer :
	Windows::Media::SpeechRecognition::ISpeechRecognizer,
	requires<SpeechRecognizer, Windows::Media::SpeechRecognition::ISpeechRecognizer2>
{
	SpeechRecognizer(std::nullptr_t) noexcept {}
	SpeechRecognizer();
	SpeechRecognizer(Windows::Globalization::Language const & language);
	static Windows::Globalization::Language SystemSpeechLanguage();
	static Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> SupportedTopicLanguages();
	static Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> SupportedGrammarLanguages();
};

struct SpeechRecognitionQualityDegradingEventArgs :
	Windows::Media::SpeechRecognition::ISpeechRecognitionQualityDegradingEventArgs
{
	SpeechRecognitionQualityDegradingEventArgs(std::nullptr_t) noexcept {}
};

struct SpeechRecognizerStateChangedEventArgs :
	Windows::Media::SpeechRecognition::ISpeechRecognizerStateChangedEventArgs
{
	SpeechRecognizerStateChangedEventArgs(std::nullptr_t) noexcept {}
};

struct SpeechRecognitionVoiceCommandDefinitionConstraint :
	Windows::Media::SpeechRecognition::ISpeechRecognitionVoiceCommandDefinitionConstraint
{
	SpeechRecognitionVoiceCommandDefinitionConstraint(std::nullptr_t) noexcept {}
};

struct SpeechContinuousRecognitionSession :
	Windows::Media::SpeechRecognition::ISpeechContinuousRecognitionSession
{
	SpeechContinuousRecognitionSession(std::nullptr_t) noexcept {}
};

struct SpeechRecognitionHypothesisGeneratedEventArgs :
	Windows::Media::SpeechRecognition::ISpeechRecognitionHypothesisGeneratedEventArgs
{
	SpeechRecognitionHypothesisGeneratedEventArgs(std::nullptr_t) noexcept {}
};

struct SpeechRecognitionHypothesis :
	Windows::Media::SpeechRecognition::ISpeechRecognitionHypothesis
{
	SpeechRecognitionHypothesis(std::nullptr_t) noexcept {}
};

struct SpeechContinuousRecognitionCompletedEventArgs :
	Windows::Media::SpeechRecognition::ISpeechContinuousRecognitionCompletedEventArgs
{
	SpeechContinuousRecognitionCompletedEventArgs(std::nullptr_t) noexcept {}
};

struct SpeechContinuousRecognitionResultGeneratedEventArgs :
	Windows::Media::SpeechRecognition::ISpeechContinuousRecognitionResultGeneratedEventArgs
{
	SpeechContinuousRecognitionResultGeneratedEventArgs(std::nullptr_t) noexcept {}
};

}}}}

namespace winrt { namespace Windows { namespace Networking {

struct EndpointPair :
	Windows::Networking::IEndpointPair
{
	EndpointPair(std::nullptr_t) noexcept {}
	EndpointPair(Windows::Networking::HostName const & localHostName, hstring_ref localServiceName, Windows::Networking::HostName const & remoteHostName, hstring_ref remoteServiceName);
};

struct HostName :
	Windows::Networking::IHostName,
	requires<HostName, Windows::Foundation::IStringable>
{
	HostName(std::nullptr_t) noexcept {}
	HostName(hstring_ref hostName);
	static int Compare(hstring_ref value1, hstring_ref value2);
};

}}}

namespace winrt { namespace Windows { namespace Networking { namespace Connectivity {

struct IPInformation :
	Windows::Networking::Connectivity::IIPInformation
{
	IPInformation(std::nullptr_t) noexcept {}
};

struct DataPlanUsage :
	Windows::Networking::Connectivity::IDataPlanUsage
{
	DataPlanUsage(std::nullptr_t) noexcept {}
};

struct ConnectionCost :
	Windows::Networking::Connectivity::IConnectionCost,
	requires<ConnectionCost, Windows::Networking::Connectivity::IConnectionCost2>
{
	ConnectionCost(std::nullptr_t) noexcept {}
};

struct DataPlanStatus :
	Windows::Networking::Connectivity::IDataPlanStatus
{
	DataPlanStatus(std::nullptr_t) noexcept {}
};

struct NetworkAdapter :
	Windows::Networking::Connectivity::INetworkAdapter
{
	NetworkAdapter(std::nullptr_t) noexcept {}
};

struct DataUsage :
	Windows::Networking::Connectivity::IDataUsage
{
	DataUsage(std::nullptr_t) noexcept {}
};

struct NetworkSecuritySettings :
	Windows::Networking::Connectivity::INetworkSecuritySettings
{
	NetworkSecuritySettings(std::nullptr_t) noexcept {}
};

struct WwanConnectionProfileDetails :
	Windows::Networking::Connectivity::IWwanConnectionProfileDetails
{
	WwanConnectionProfileDetails(std::nullptr_t) noexcept {}
};

struct WlanConnectionProfileDetails :
	Windows::Networking::Connectivity::IWlanConnectionProfileDetails
{
	WlanConnectionProfileDetails(std::nullptr_t) noexcept {}
};

struct NetworkUsage :
	Windows::Networking::Connectivity::INetworkUsage
{
	NetworkUsage(std::nullptr_t) noexcept {}
};

struct ConnectivityInterval :
	Windows::Networking::Connectivity::IConnectivityInterval
{
	ConnectivityInterval(std::nullptr_t) noexcept {}
};

struct LanIdentifierData :
	Windows::Networking::Connectivity::ILanIdentifierData
{
	LanIdentifierData(std::nullptr_t) noexcept {}
};

struct ConnectionProfile :
	Windows::Networking::Connectivity::IConnectionProfile,
	requires<ConnectionProfile, Windows::Networking::Connectivity::IConnectionProfile2>
{
	ConnectionProfile(std::nullptr_t) noexcept {}
};

struct LanIdentifier :
	Windows::Networking::Connectivity::ILanIdentifier
{
	LanIdentifier(std::nullptr_t) noexcept {}
};

struct ProxyConfiguration :
	Windows::Networking::Connectivity::IProxyConfiguration
{
	ProxyConfiguration(std::nullptr_t) noexcept {}
};

struct ConnectionProfileFilter :
	Windows::Networking::Connectivity::IConnectionProfileFilter,
	requires<ConnectionProfileFilter, Windows::Networking::Connectivity::IConnectionProfileFilter2>
{
	ConnectionProfileFilter(std::nullptr_t) noexcept {}
	ConnectionProfileFilter();
};

struct NetworkItem :
	Windows::Networking::Connectivity::INetworkItem
{
	NetworkItem(std::nullptr_t) noexcept {}
};

struct RoutePolicy :
	Windows::Networking::Connectivity::IRoutePolicy
{
	RoutePolicy(std::nullptr_t) noexcept {}
	RoutePolicy(Windows::Networking::Connectivity::ConnectionProfile const & connectionProfile, Windows::Networking::HostName const & hostName, Windows::Networking::DomainNameType type);
};

struct CellularApnContext :
	Windows::Networking::Connectivity::ICellularApnContext
{
	CellularApnContext(std::nullptr_t) noexcept {}
	CellularApnContext();
};

struct ConnectionSession :
	Windows::Networking::Connectivity::IConnectionSession
{
	ConnectionSession(std::nullptr_t) noexcept {}
};

struct NetworkInformation
{
	NetworkInformation() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile>> FindConnectionProfilesAsync(Windows::Networking::Connectivity::ConnectionProfileFilter const & pProfileFilter);
	static Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> GetConnectionProfiles();
	static Windows::Networking::Connectivity::ConnectionProfile GetInternetConnectionProfile();
	static Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::LanIdentifier> GetLanIdentifiers();
	static Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> GetHostNames();
	static Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration> GetProxyConfigurationAsync(Windows::Foundation::Uri const & uri);
	static Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> GetSortedEndpointPairs(Windows::Foundation::Collections::IIterable<Windows::Networking::EndpointPair> const & destinationList, Windows::Networking::HostNameSortOptions sortOptions);
	static long long NetworkStatusChanged(Windows::Networking::Connectivity::INetworkStatusChangedEventHandler const & networkStatusHandler);
	template <typename F> static long long NetworkStatusChanged(F networkStatusHandler);
	static void NetworkStatusChanged(long long eventCookie);
};

struct ConnectivityManager
{
	ConnectivityManager() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession> AcquireConnectionAsync(Windows::Networking::Connectivity::CellularApnContext const & cellularApnContext);
	static void AddHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy);
	static void RemoveHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy);
};

struct NetworkStateChangeEventDetails :
	Windows::Networking::Connectivity::INetworkStateChangeEventDetails,
	requires<NetworkStateChangeEventDetails, Windows::Networking::Connectivity::INetworkStateChangeEventDetails2>
{
	NetworkStateChangeEventDetails(std::nullptr_t) noexcept {}
};

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Sockets {

struct ControlChannelTrigger :
	Windows::Networking::Sockets::IControlChannelTrigger
{
	ControlChannelTrigger(std::nullptr_t) noexcept {}
	ControlChannelTrigger(hstring_ref channelId, unsigned serverKeepAliveIntervalInMinutes);
	ControlChannelTrigger(hstring_ref channelId, unsigned serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType resourceRequestType);
};

struct SocketActivityContext :
	Windows::Networking::Sockets::ISocketActivityContext
{
	SocketActivityContext(std::nullptr_t) noexcept {}
	SocketActivityContext(Windows::Storage::Streams::IBuffer const & data);
};

struct DatagramSocket :
	Windows::Networking::Sockets::IDatagramSocket,
	requires<DatagramSocket, Windows::Networking::Sockets::IDatagramSocket2, Windows::Networking::Sockets::IDatagramSocket3>
{
	DatagramSocket(std::nullptr_t) noexcept {}
	DatagramSocket();
	using impl_IDatagramSocket::BindServiceNameAsync;
	using impl_IDatagramSocket2::BindServiceNameAsync;
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, hstring_ref remoteServiceName);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, hstring_ref remoteServiceName, Windows::Networking::HostNameSortOptions sortOptions);
};

struct StreamSocket :
	Windows::Networking::Sockets::IStreamSocket,
	requires<StreamSocket, Windows::Networking::Sockets::IStreamSocket2, Windows::Networking::Sockets::IStreamSocket3>
{
	StreamSocket(std::nullptr_t) noexcept {}
	StreamSocket();
	using impl_IStreamSocket::ConnectAsync;
	using impl_IStreamSocket2::ConnectAsync;
};

struct StreamSocketListener :
	Windows::Networking::Sockets::IStreamSocketListener,
	requires<StreamSocketListener, Windows::Networking::Sockets::IStreamSocketListener2, Windows::Networking::Sockets::IStreamSocketListener3>
{
	StreamSocketListener(std::nullptr_t) noexcept {}
	StreamSocketListener();
	using impl_IStreamSocketListener::BindServiceNameAsync;
	using impl_IStreamSocketListener2::BindServiceNameAsync;
};

struct SocketActivityInformation :
	Windows::Networking::Sockets::ISocketActivityInformation
{
	SocketActivityInformation(std::nullptr_t) noexcept {}
	static Windows::Foundation::Collections::IMapView<hstring, Windows::Networking::Sockets::SocketActivityInformation> AllSockets();
};

struct DatagramSocketControl :
	Windows::Networking::Sockets::IDatagramSocketControl,
	requires<DatagramSocketControl, Windows::Networking::Sockets::IDatagramSocketControl2, Windows::Networking::Sockets::IDatagramSocketControl3>
{
	DatagramSocketControl(std::nullptr_t) noexcept {}
};

struct DatagramSocketInformation :
	Windows::Networking::Sockets::IDatagramSocketInformation
{
	DatagramSocketInformation(std::nullptr_t) noexcept {}
};

struct DatagramSocketMessageReceivedEventArgs :
	Windows::Networking::Sockets::IDatagramSocketMessageReceivedEventArgs
{
	DatagramSocketMessageReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct StreamSocketControl :
	Windows::Networking::Sockets::IStreamSocketControl,
	requires<StreamSocketControl, Windows::Networking::Sockets::IStreamSocketControl2, Windows::Networking::Sockets::IStreamSocketControl3>
{
	StreamSocketControl(std::nullptr_t) noexcept {}
};

struct StreamSocketInformation :
	Windows::Networking::Sockets::IStreamSocketInformation,
	requires<StreamSocketInformation, Windows::Networking::Sockets::IStreamSocketInformation2>
{
	StreamSocketInformation(std::nullptr_t) noexcept {}
};

struct StreamSocketListenerControl :
	Windows::Networking::Sockets::IStreamSocketListenerControl,
	requires<StreamSocketListenerControl, Windows::Networking::Sockets::IStreamSocketListenerControl2>
{
	StreamSocketListenerControl(std::nullptr_t) noexcept {}
};

struct StreamSocketListenerInformation :
	Windows::Networking::Sockets::IStreamSocketListenerInformation
{
	StreamSocketListenerInformation(std::nullptr_t) noexcept {}
};

struct StreamSocketListenerConnectionReceivedEventArgs :
	Windows::Networking::Sockets::IStreamSocketListenerConnectionReceivedEventArgs
{
	StreamSocketListenerConnectionReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct WebSocketClosedEventArgs :
	Windows::Networking::Sockets::IWebSocketClosedEventArgs
{
	WebSocketClosedEventArgs(std::nullptr_t) noexcept {}
};

struct MessageWebSocketControl :
	Windows::Networking::Sockets::IMessageWebSocketControl
{
	MessageWebSocketControl(std::nullptr_t) noexcept {}
};

struct MessageWebSocketInformation :
	Windows::Networking::Sockets::IWebSocketInformation
{
	MessageWebSocketInformation(std::nullptr_t) noexcept {}
};

struct MessageWebSocket :
	Windows::Networking::Sockets::IMessageWebSocket
{
	MessageWebSocket(std::nullptr_t) noexcept {}
	MessageWebSocket();
};

struct MessageWebSocketMessageReceivedEventArgs :
	Windows::Networking::Sockets::IMessageWebSocketMessageReceivedEventArgs
{
	MessageWebSocketMessageReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct StreamWebSocketControl :
	Windows::Networking::Sockets::IStreamWebSocketControl
{
	StreamWebSocketControl(std::nullptr_t) noexcept {}
};

struct StreamWebSocketInformation :
	Windows::Networking::Sockets::IWebSocketInformation
{
	StreamWebSocketInformation(std::nullptr_t) noexcept {}
};

struct StreamWebSocket :
	Windows::Networking::Sockets::IStreamWebSocket
{
	StreamWebSocket(std::nullptr_t) noexcept {}
	StreamWebSocket();
};

struct WebSocketKeepAlive :
	Windows::ApplicationModel::Background::IBackgroundTask
{
	WebSocketKeepAlive(std::nullptr_t) noexcept {}
	WebSocketKeepAlive();
};

struct SocketError
{
	SocketError() = delete;
	static Windows::Networking::Sockets::SocketErrorStatus GetStatus(int hresult);
};

struct WebSocketError
{
	WebSocketError() = delete;
	static Windows::Web::WebErrorStatus GetStatus(int hresult);
};

struct SocketActivityTriggerDetails :
	Windows::Networking::Sockets::ISocketActivityTriggerDetails
{
	SocketActivityTriggerDetails(std::nullptr_t) noexcept {}
};

}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web {

struct WebAuthenticationResult :
	Windows::Security::Authentication::Web::IWebAuthenticationResult
{
	WebAuthenticationResult(std::nullptr_t) noexcept {}
};

struct WebAuthenticationBroker
{
	WebAuthenticationBroker() = delete;
	static void AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri);
	static void AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri);
	static void AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri, Windows::Foundation::Collections::ValueSet const & continuationData, Windows::Security::Authentication::Web::WebAuthenticationOptions options);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> AuthenticateSilentlyAsync(Windows::Foundation::Uri const & requestUri);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> AuthenticateSilentlyAsync(Windows::Foundation::Uri const & requestUri, Windows::Security::Authentication::Web::WebAuthenticationOptions options);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions options, Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions options, Windows::Foundation::Uri const & requestUri);
	static Windows::Foundation::Uri GetCurrentApplicationCallbackUri();
};

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Core {

struct WebTokenRequest :
	Windows::Security::Authentication::Web::Core::IWebTokenRequest
{
	WebTokenRequest(std::nullptr_t) noexcept {}
	WebTokenRequest(Windows::Security::Credentials::WebAccountProvider const & provider, hstring_ref scope, hstring_ref clientId);
	WebTokenRequest(Windows::Security::Credentials::WebAccountProvider const & provider, hstring_ref scope, hstring_ref clientId, Windows::Security::Authentication::Web::Core::WebTokenRequestPromptType promptType);
	WebTokenRequest(Windows::Security::Credentials::WebAccountProvider const & provider);
	WebTokenRequest(Windows::Security::Credentials::WebAccountProvider const & provider, hstring_ref scope);
};

struct WebAuthenticationCoreManager
{
	WebAuthenticationCoreManager() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> GetTokenSilentlyAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> GetTokenSilentlyAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request, Windows::Security::Credentials::WebAccount const & webAccount);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> RequestTokenAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> RequestTokenAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request, Windows::Security::Credentials::WebAccount const & webAccount);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> FindAccountAsync(Windows::Security::Credentials::WebAccountProvider const & provider, hstring_ref webAccountId);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> FindAccountProviderAsync(hstring_ref webAccountProviderId);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> FindAccountProviderAsync(hstring_ref webAccountProviderId, hstring_ref authority);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> FindAccountProviderAsync(hstring_ref webAccountProviderId, hstring_ref authority, Windows::System::User const & user);
};

struct WebProviderError :
	Windows::Security::Authentication::Web::Core::IWebProviderError
{
	WebProviderError(std::nullptr_t) noexcept {}
	WebProviderError(unsigned errorCode, hstring_ref errorMessage);
};

struct WebTokenResponse :
	Windows::Security::Authentication::Web::Core::IWebTokenResponse
{
	WebTokenResponse(std::nullptr_t) noexcept {}
	WebTokenResponse();
	WebTokenResponse(hstring_ref token);
	WebTokenResponse(hstring_ref token, Windows::Security::Credentials::WebAccount const & webAccount);
	WebTokenResponse(hstring_ref token, Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Core::WebProviderError const & error);
};

struct WebTokenRequestResult :
	Windows::Security::Authentication::Web::Core::IWebTokenRequestResult
{
	WebTokenRequestResult(std::nullptr_t) noexcept {}
};

}}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Provider {

struct WebProviderTokenRequest :
	Windows::Security::Authentication::Web::Provider::IWebProviderTokenRequest
{
	WebProviderTokenRequest(std::nullptr_t) noexcept {}
};

struct WebProviderTokenResponse :
	Windows::Security::Authentication::Web::Provider::IWebProviderTokenResponse
{
	WebProviderTokenResponse(std::nullptr_t) noexcept {}
	WebProviderTokenResponse(Windows::Security::Authentication::Web::Core::WebTokenResponse const & webTokenResponse);
};

struct WebAccountClientView :
	Windows::Security::Authentication::Web::Provider::IWebAccountClientView
{
	WebAccountClientView(std::nullptr_t) noexcept {}
	WebAccountClientView(Windows::Security::Authentication::Web::Provider::WebAccountClientViewType viewType, Windows::Foundation::Uri const & applicationCallbackUri);
	WebAccountClientView(Windows::Security::Authentication::Web::Provider::WebAccountClientViewType viewType, Windows::Foundation::Uri const & applicationCallbackUri, hstring_ref accountPairwiseId);
};

struct WebAccountManager
{
	WebAccountManager() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> AddWebAccountAsync(hstring_ref webAccountId, hstring_ref webAccountUserName, Windows::Foundation::Collections::IMapView<hstring, hstring> const & props, Windows::Security::Authentication::Web::Provider::WebAccountScope scope);
	static Windows::Foundation::IAsyncAction SetScopeAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Provider::WebAccountScope scope);
	static Windows::Security::Authentication::Web::Provider::WebAccountScope GetScope(Windows::Security::Credentials::WebAccount const & webAccount);
	static Windows::Foundation::IAsyncAction PullCookiesAsync(hstring_ref uriString, hstring_ref callerPFN);
	static Windows::Foundation::IAsyncAction UpdateWebAccountPropertiesAsync(Windows::Security::Credentials::WebAccount const & webAccount, hstring_ref webAccountUserName, Windows::Foundation::Collections::IMapView<hstring, hstring> const & additionalProperties);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> AddWebAccountAsync(hstring_ref webAccountId, hstring_ref webAccountUserName, Windows::Foundation::Collections::IMapView<hstring, hstring> const & props);
	static Windows::Foundation::IAsyncAction DeleteWebAccountAsync(Windows::Security::Credentials::WebAccount const & webAccount);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount>> FindAllProviderWebAccountsAsync();
	static Windows::Foundation::IAsyncAction PushCookiesAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IVectorView<Windows::Web::Http::HttpCookie> const & cookies);
	static Windows::Foundation::IAsyncAction SetViewAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Provider::WebAccountClientView const & view);
	static Windows::Foundation::IAsyncAction ClearViewAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Foundation::Uri const & applicationCallbackUri);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::Web::Provider::WebAccountClientView>> GetViewsAsync(Windows::Security::Credentials::WebAccount const & webAccount);
	static Windows::Foundation::IAsyncAction SetWebAccountPictureAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Storage::Streams::IRandomAccessStream const & webAccountPicture);
	static Windows::Foundation::IAsyncAction ClearWebAccountPictureAsync(Windows::Security::Credentials::WebAccount const & webAccount);
};

struct WebAccountProviderRequestTokenOperation :
	Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation,
	requires<WebAccountProviderRequestTokenOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderUIReportOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation>
{
	WebAccountProviderRequestTokenOperation(std::nullptr_t) noexcept {}
};

struct WebAccountProviderGetTokenSilentOperation :
	Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenOperation,
	requires<WebAccountProviderGetTokenSilentOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderSilentReportOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation>
{
	WebAccountProviderGetTokenSilentOperation(std::nullptr_t) noexcept {}
};

struct WebAccountProviderAddAccountOperation :
	Windows::Security::Authentication::Web::Provider::IWebAccountProviderAddAccountOperation
{
	WebAccountProviderAddAccountOperation(std::nullptr_t) noexcept {}
};

struct WebAccountProviderManageAccountOperation :
	Windows::Security::Authentication::Web::Provider::IWebAccountProviderManageAccountOperation
{
	WebAccountProviderManageAccountOperation(std::nullptr_t) noexcept {}
};

struct WebAccountProviderDeleteAccountOperation :
	Windows::Security::Authentication::Web::Provider::IWebAccountProviderDeleteAccountOperation,
	requires<WebAccountProviderDeleteAccountOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation>
{
	WebAccountProviderDeleteAccountOperation(std::nullptr_t) noexcept {}
};

struct WebAccountProviderSignOutAccountOperation :
	Windows::Security::Authentication::Web::Provider::IWebAccountProviderSignOutAccountOperation,
	requires<WebAccountProviderSignOutAccountOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation>
{
	WebAccountProviderSignOutAccountOperation(std::nullptr_t) noexcept {}
};

struct WebAccountProviderRetrieveCookiesOperation :
	Windows::Security::Authentication::Web::Provider::IWebAccountProviderRetrieveCookiesOperation,
	requires<WebAccountProviderRetrieveCookiesOperation, Windows::Security::Authentication::Web::Provider::IWebAccountProviderBaseReportOperation>
{
	WebAccountProviderRetrieveCookiesOperation(std::nullptr_t) noexcept {}
};

struct WebAccountProviderTriggerDetails :
	Windows::Security::Authentication::Web::Provider::IWebAccountProviderTokenObjects
{
	WebAccountProviderTriggerDetails(std::nullptr_t) noexcept {}
};

}}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Credentials {

struct WebAccountProvider :
	Windows::Security::Credentials::IWebAccountProvider,
	requires<WebAccountProvider, Windows::Security::Credentials::IWebAccountProvider2, Windows::Security::Credentials::IWebAccountProvider3>
{
	WebAccountProvider(std::nullptr_t) noexcept {}
	WebAccountProvider(hstring_ref id, hstring_ref displayName, Windows::Foundation::Uri const & iconUri);
};

struct WebAccount :
	Windows::Security::Credentials::IWebAccount,
	requires<WebAccount, Windows::Security::Credentials::IWebAccount2>
{
	WebAccount(std::nullptr_t) noexcept {}
	WebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, hstring_ref userName, Windows::Security::Credentials::WebAccountState state);
};

struct KeyCredentialRetrievalResult :
	Windows::Security::Credentials::IKeyCredentialRetrievalResult
{
	KeyCredentialRetrievalResult(std::nullptr_t) noexcept {}
};

struct KeyCredentialOperationResult :
	Windows::Security::Credentials::IKeyCredentialOperationResult
{
	KeyCredentialOperationResult(std::nullptr_t) noexcept {}
};

struct KeyCredentialAttestationResult :
	Windows::Security::Credentials::IKeyCredentialAttestationResult
{
	KeyCredentialAttestationResult(std::nullptr_t) noexcept {}
};

struct KeyCredential :
	Windows::Security::Credentials::IKeyCredential
{
	KeyCredential(std::nullptr_t) noexcept {}
};

struct KeyCredentialManager
{
	KeyCredentialManager() = delete;
	static Windows::Foundation::IAsyncOperation<bool> IsSupportedAsync();
	static Windows::Foundation::IAsyncAction RenewAttestationAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialRetrievalResult> RequestCreateAsync(hstring_ref name, Windows::Security::Credentials::KeyCredentialCreationOption option);
	static Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialRetrievalResult> OpenAsync(hstring_ref name);
	static Windows::Foundation::IAsyncAction DeleteAsync(hstring_ref name);
};

struct PasswordCredential :
	Windows::Security::Credentials::IPasswordCredential
{
	PasswordCredential(std::nullptr_t) noexcept {}
	PasswordCredential();
	PasswordCredential(hstring_ref resource, hstring_ref userName, hstring_ref password);
};

struct PasswordVault :
	Windows::Security::Credentials::IPasswordVault
{
	PasswordVault(std::nullptr_t) noexcept {}
	PasswordVault();
};

struct PasswordCredentialPropertyStore :
	Windows::Foundation::Collections::IPropertySet
{
	PasswordCredentialPropertyStore(std::nullptr_t) noexcept {}
	PasswordCredentialPropertyStore();
};

}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

struct Certificate :
	Windows::Security::Cryptography::Certificates::ICertificate,
	requires<Certificate, Windows::Security::Cryptography::Certificates::ICertificate2>
{
	Certificate(std::nullptr_t) noexcept {}
	Certificate(Windows::Storage::Streams::IBuffer const & certBlob);
};

struct CertificateRequestProperties :
	Windows::Security::Cryptography::Certificates::ICertificateRequestProperties,
	requires<CertificateRequestProperties, Windows::Security::Cryptography::Certificates::ICertificateRequestProperties2, Windows::Security::Cryptography::Certificates::ICertificateRequestProperties3>
{
	CertificateRequestProperties(std::nullptr_t) noexcept {}
	CertificateRequestProperties();
};

struct UserCertificateEnrollmentManager :
	Windows::Security::Cryptography::Certificates::IUserCertificateEnrollmentManager,
	requires<UserCertificateEnrollmentManager, Windows::Security::Cryptography::Certificates::IUserCertificateEnrollmentManager2>
{
	UserCertificateEnrollmentManager(std::nullptr_t) noexcept {}
	using impl_IUserCertificateEnrollmentManager::ImportPfxDataAsync;
	using impl_IUserCertificateEnrollmentManager2::ImportPfxDataAsync;
};

struct PfxImportParameters :
	Windows::Security::Cryptography::Certificates::IPfxImportParameters
{
	PfxImportParameters(std::nullptr_t) noexcept {}
	PfxImportParameters();
};

struct CertificateEnrollmentManager
{
	CertificateEnrollmentManager() = delete;
	static Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager UserCertificateEnrollmentManager();
	static Windows::Foundation::IAsyncAction ImportPfxDataAsync(hstring_ref pfxData, hstring_ref password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, hstring_ref friendlyName, hstring_ref keyStorageProvider);
	static Windows::Foundation::IAsyncAction ImportPfxDataAsync(hstring_ref pfxData, hstring_ref password, Windows::Security::Cryptography::Certificates::PfxImportParameters const & pfxImportParameters);
	static Windows::Foundation::IAsyncOperation<hstring> CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request);
	static Windows::Foundation::IAsyncAction InstallCertificateAsync(hstring_ref certificate, Windows::Security::Cryptography::Certificates::InstallOptions installOption);
	static Windows::Foundation::IAsyncAction ImportPfxDataAsync(hstring_ref pfxData, hstring_ref password, Windows::Security::Cryptography::Certificates::ExportOption exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions installOption, hstring_ref friendlyName);
};

struct KeyAttestationHelper
{
	KeyAttestationHelper() = delete;
	static Windows::Foundation::IAsyncOperation<hstring> DecryptTpmAttestationCredentialAsync(hstring_ref credential, hstring_ref containerName);
	static Windows::Foundation::IAsyncOperation<hstring> DecryptTpmAttestationCredentialAsync(hstring_ref credential);
	static hstring GetTpmAttestationCredentialId(hstring_ref credential);
};

struct CertificateQuery :
	Windows::Security::Cryptography::Certificates::ICertificateQuery,
	requires<CertificateQuery, Windows::Security::Cryptography::Certificates::ICertificateQuery2>
{
	CertificateQuery(std::nullptr_t) noexcept {}
	CertificateQuery();
};

struct CertificateStore :
	Windows::Security::Cryptography::Certificates::ICertificateStore,
	requires<CertificateStore, Windows::Security::Cryptography::Certificates::ICertificateStore2>
{
	CertificateStore(std::nullptr_t) noexcept {}
};

struct CertificateStores
{
	CertificateStores() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> FindAllAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> FindAllAsync(Windows::Security::Cryptography::Certificates::CertificateQuery const & query);
	static Windows::Security::Cryptography::Certificates::CertificateStore TrustedRootCertificationAuthorities();
	static Windows::Security::Cryptography::Certificates::CertificateStore IntermediateCertificationAuthorities();
	static Windows::Security::Cryptography::Certificates::CertificateStore GetStoreByName(hstring_ref storeName);
};

struct KeyAlgorithmNames
{
	KeyAlgorithmNames() = delete;
	static hstring Ecdsa();
	static hstring Ecdh();
	static hstring Rsa();
	static hstring Dsa();
	static hstring Ecdh256();
	static hstring Ecdh384();
	static hstring Ecdh521();
	static hstring Ecdsa256();
	static hstring Ecdsa384();
	static hstring Ecdsa521();
};

struct KeyStorageProviderNames
{
	KeyStorageProviderNames() = delete;
	static hstring PassportKeyStorageProvider();
	static hstring SoftwareKeyStorageProvider();
	static hstring SmartcardKeyStorageProvider();
	static hstring PlatformKeyStorageProvider();
};

struct ChainBuildingParameters :
	Windows::Security::Cryptography::Certificates::IChainBuildingParameters
{
	ChainBuildingParameters(std::nullptr_t) noexcept {}
	ChainBuildingParameters();
};

struct ChainValidationParameters :
	Windows::Security::Cryptography::Certificates::IChainValidationParameters
{
	ChainValidationParameters(std::nullptr_t) noexcept {}
	ChainValidationParameters();
};

struct CertificateChain :
	Windows::Security::Cryptography::Certificates::ICertificateChain
{
	CertificateChain(std::nullptr_t) noexcept {}
};

struct CertificateKeyUsages :
	Windows::Security::Cryptography::Certificates::ICertificateKeyUsages
{
	CertificateKeyUsages(std::nullptr_t) noexcept {}
	CertificateKeyUsages();
};

struct SubjectAlternativeNameInfo :
	Windows::Security::Cryptography::Certificates::ISubjectAlternativeNameInfo
{
	SubjectAlternativeNameInfo(std::nullptr_t) noexcept {}
	SubjectAlternativeNameInfo();
};

struct CmsTimestampInfo :
	Windows::Security::Cryptography::Certificates::ICmsTimestampInfo
{
	CmsTimestampInfo(std::nullptr_t) noexcept {}
};

struct CmsSignerInfo :
	Windows::Security::Cryptography::Certificates::ICmsSignerInfo
{
	CmsSignerInfo(std::nullptr_t) noexcept {}
	CmsSignerInfo();
};

struct CmsAttachedSignature :
	Windows::Security::Cryptography::Certificates::ICmsAttachedSignature
{
	CmsAttachedSignature(std::nullptr_t) noexcept {}
	CmsAttachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> GenerateSignatureAsync(Windows::Storage::Streams::IBuffer const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates);
};

struct CmsDetachedSignature :
	Windows::Security::Cryptography::Certificates::ICmsDetachedSignature
{
	CmsDetachedSignature(std::nullptr_t) noexcept {}
	CmsDetachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> GenerateSignatureAsync(Windows::Storage::Streams::IInputStream const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates);
};

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

struct KeyDerivationParameters :
	Windows::Security::Cryptography::Core::IKeyDerivationParameters,
	requires<KeyDerivationParameters, Windows::Security::Cryptography::Core::IKeyDerivationParameters2>
{
	KeyDerivationParameters(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForPbkdf2(Windows::Storage::Streams::IBuffer const & pbkdf2Salt, unsigned iterationCount);
	static Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForSP800108(Windows::Storage::Streams::IBuffer const & label, Windows::Storage::Streams::IBuffer const & context);
	static Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForSP80056a(Windows::Storage::Streams::IBuffer const & algorithmId, Windows::Storage::Streams::IBuffer const & partyUInfo, Windows::Storage::Streams::IBuffer const & partyVInfo, Windows::Storage::Streams::IBuffer const & suppPubInfo, Windows::Storage::Streams::IBuffer const & suppPrivInfo);
	static Windows::Security::Cryptography::Core::KeyDerivationParameters BuildForCapi1Kdf(Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm capi1KdfTargetAlgorithm);
};

struct CryptographicKey :
	Windows::Security::Cryptography::Core::ICryptographicKey
{
	CryptographicKey(std::nullptr_t) noexcept {}
};

struct CryptographicHash :
	Windows::Security::Cryptography::Core::IHashComputation
{
	CryptographicHash(std::nullptr_t) noexcept {}
};

struct PersistedKeyProvider
{
	PersistedKeyProvider() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, hstring_ref hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding padding);
	static Windows::Security::Cryptography::Core::CryptographicKey OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, hstring_ref hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding padding);
};

struct EncryptedAndAuthenticatedData :
	Windows::Security::Cryptography::Core::IEncryptedAndAuthenticatedData
{
	EncryptedAndAuthenticatedData(std::nullptr_t) noexcept {}
};

struct CryptographicEngine
{
	CryptographicEngine() = delete;
	static Windows::Storage::Streams::IBuffer Encrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv);
	static Windows::Storage::Streams::IBuffer Decrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv);
	static Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData EncryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticatedData);
	static Windows::Storage::Streams::IBuffer DecryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticationTag, Windows::Storage::Streams::IBuffer const & authenticatedData);
	static Windows::Storage::Streams::IBuffer Sign(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data);
	static bool VerifySignature(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature);
	static Windows::Storage::Streams::IBuffer DeriveKeyMaterial(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Security::Cryptography::Core::KeyDerivationParameters const & parameters, unsigned desiredKeySize);
	static Windows::Storage::Streams::IBuffer SignHashedData(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data);
	static bool VerifySignatureWithHashInput(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> DecryptAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> SignAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> SignHashedDataAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data);
};

struct HashAlgorithmProvider :
	Windows::Security::Cryptography::Core::IHashAlgorithmProvider
{
	HashAlgorithmProvider(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::HashAlgorithmProvider OpenAlgorithm(hstring_ref algorithm);
};

struct MacAlgorithmProvider :
	Windows::Security::Cryptography::Core::IMacAlgorithmProvider,
	requires<MacAlgorithmProvider, Windows::Security::Cryptography::Core::IMacAlgorithmProvider2>
{
	MacAlgorithmProvider(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::MacAlgorithmProvider OpenAlgorithm(hstring_ref algorithm);
};

struct KeyDerivationAlgorithmProvider :
	Windows::Security::Cryptography::Core::IKeyDerivationAlgorithmProvider
{
	KeyDerivationAlgorithmProvider(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider OpenAlgorithm(hstring_ref algorithm);
};

struct SymmetricKeyAlgorithmProvider :
	Windows::Security::Cryptography::Core::ISymmetricKeyAlgorithmProvider
{
	SymmetricKeyAlgorithmProvider(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider OpenAlgorithm(hstring_ref algorithm);
};

struct AsymmetricKeyAlgorithmProvider :
	Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider,
	requires<AsymmetricKeyAlgorithmProvider, Windows::Security::Cryptography::Core::IAsymmetricKeyAlgorithmProvider2>
{
	AsymmetricKeyAlgorithmProvider(std::nullptr_t) noexcept {}
	static Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider OpenAlgorithm(hstring_ref algorithm);
};

struct HashAlgorithmNames
{
	HashAlgorithmNames() = delete;
	static hstring Md5();
	static hstring Sha1();
	static hstring Sha256();
	static hstring Sha384();
	static hstring Sha512();
};

struct MacAlgorithmNames
{
	MacAlgorithmNames() = delete;
	static hstring HmacMd5();
	static hstring HmacSha1();
	static hstring HmacSha256();
	static hstring HmacSha384();
	static hstring HmacSha512();
	static hstring AesCmac();
};

struct SymmetricAlgorithmNames
{
	SymmetricAlgorithmNames() = delete;
	static hstring DesCbc();
	static hstring DesEcb();
	static hstring TripleDesCbc();
	static hstring TripleDesEcb();
	static hstring Rc2Cbc();
	static hstring Rc2Ecb();
	static hstring AesCbc();
	static hstring AesEcb();
	static hstring AesGcm();
	static hstring AesCcm();
	static hstring AesCbcPkcs7();
	static hstring AesEcbPkcs7();
	static hstring DesCbcPkcs7();
	static hstring DesEcbPkcs7();
	static hstring TripleDesCbcPkcs7();
	static hstring TripleDesEcbPkcs7();
	static hstring Rc2CbcPkcs7();
	static hstring Rc2EcbPkcs7();
	static hstring Rc4();
};

struct AsymmetricAlgorithmNames
{
	AsymmetricAlgorithmNames() = delete;
	static hstring EcdsaSha256();
	static hstring EcdsaSha384();
	static hstring EcdsaSha512();
	static hstring RsaPkcs1();
	static hstring RsaOaepSha1();
	static hstring RsaOaepSha256();
	static hstring RsaOaepSha384();
	static hstring RsaOaepSha512();
	static hstring EcdsaP256Sha256();
	static hstring EcdsaP384Sha384();
	static hstring EcdsaP521Sha512();
	static hstring DsaSha1();
	static hstring DsaSha256();
	static hstring RsaSignPkcs1Sha1();
	static hstring RsaSignPkcs1Sha256();
	static hstring RsaSignPkcs1Sha384();
	static hstring RsaSignPkcs1Sha512();
	static hstring RsaSignPssSha1();
	static hstring RsaSignPssSha256();
	static hstring RsaSignPssSha384();
	static hstring RsaSignPssSha512();
};

struct EccCurveNames
{
	EccCurveNames() = delete;
	static hstring BrainpoolP160r1();
	static hstring BrainpoolP160t1();
	static hstring BrainpoolP192r1();
	static hstring BrainpoolP192t1();
	static hstring BrainpoolP224r1();
	static hstring BrainpoolP224t1();
	static hstring BrainpoolP256r1();
	static hstring BrainpoolP256t1();
	static hstring BrainpoolP320r1();
	static hstring BrainpoolP320t1();
	static hstring BrainpoolP384r1();
	static hstring BrainpoolP384t1();
	static hstring BrainpoolP512r1();
	static hstring BrainpoolP512t1();
	static hstring Curve25519();
	static hstring Ec192wapi();
	static hstring NistP192();
	static hstring NistP224();
	static hstring NistP256();
	static hstring NistP384();
	static hstring NistP521();
	static hstring NumsP256t1();
	static hstring NumsP384t1();
	static hstring NumsP512t1();
	static hstring SecP160k1();
	static hstring SecP160r1();
	static hstring SecP160r2();
	static hstring SecP192k1();
	static hstring SecP192r1();
	static hstring SecP224k1();
	static hstring SecP224r1();
	static hstring SecP256k1();
	static hstring SecP256r1();
	static hstring SecP384r1();
	static hstring SecP521r1();
	static hstring Wtls7();
	static hstring Wtls9();
	static hstring Wtls12();
	static hstring X962P192v1();
	static hstring X962P192v2();
	static hstring X962P192v3();
	static hstring X962P239v1();
	static hstring X962P239v2();
	static hstring X962P239v3();
	static hstring X962P256v1();
	static Windows::Foundation::Collections::IVectorView<hstring> AllEccCurveNames();
};

struct KeyDerivationAlgorithmNames
{
	KeyDerivationAlgorithmNames() = delete;
	static hstring CapiKdfMd5();
	static hstring CapiKdfSha1();
	static hstring CapiKdfSha256();
	static hstring CapiKdfSha384();
	static hstring CapiKdfSha512();
	static hstring Pbkdf2Md5();
	static hstring Pbkdf2Sha1();
	static hstring Pbkdf2Sha256();
	static hstring Pbkdf2Sha384();
	static hstring Pbkdf2Sha512();
	static hstring Sp800108CtrHmacMd5();
	static hstring Sp800108CtrHmacSha1();
	static hstring Sp800108CtrHmacSha256();
	static hstring Sp800108CtrHmacSha384();
	static hstring Sp800108CtrHmacSha512();
	static hstring Sp80056aConcatMd5();
	static hstring Sp80056aConcatSha1();
	static hstring Sp80056aConcatSha256();
	static hstring Sp80056aConcatSha384();
	static hstring Sp80056aConcatSha512();
};

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace EnterpriseData {

struct FileProtectionInfo :
	Windows::Security::EnterpriseData::IFileProtectionInfo
{
	FileProtectionInfo(std::nullptr_t) noexcept {}
};

struct ProtectedContainerExportResult :
	Windows::Security::EnterpriseData::IProtectedContainerExportResult
{
	ProtectedContainerExportResult(std::nullptr_t) noexcept {}
};

struct ProtectedContainerImportResult :
	Windows::Security::EnterpriseData::IProtectedContainerImportResult
{
	ProtectedContainerImportResult(std::nullptr_t) noexcept {}
};

struct ProtectedFileCreateResult :
	Windows::Security::EnterpriseData::IProtectedFileCreateResult
{
	ProtectedFileCreateResult(std::nullptr_t) noexcept {}
};

struct BufferProtectUnprotectResult :
	Windows::Security::EnterpriseData::IBufferProtectUnprotectResult
{
	BufferProtectUnprotectResult(std::nullptr_t) noexcept {}
};

struct DataProtectionInfo :
	Windows::Security::EnterpriseData::IDataProtectionInfo
{
	DataProtectionInfo(std::nullptr_t) noexcept {}
};

struct ThreadNetworkContext :
	Windows::Security::EnterpriseData::IThreadNetworkContext
{
	ThreadNetworkContext(std::nullptr_t) noexcept {}
};

struct ProtectionPolicyManager :
	Windows::Security::EnterpriseData::IProtectionPolicyManager
{
	ProtectionPolicyManager(std::nullptr_t) noexcept {}
	static bool HasContentBeenRevokedSince(hstring_ref identity, Windows::Foundation::DateTime const & since);
	static Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult CheckAccessForApp(hstring_ref sourceIdentity, hstring_ref appPackageFamilyName);
	static Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> RequestAccessForAppAsync(hstring_ref sourceIdentity, hstring_ref appPackageFamilyName);
	static Windows::Security::EnterpriseData::EnforcementLevel GetEnforcementLevel(hstring_ref identity);
	static bool IsUserDecryptionAllowed(hstring_ref identity);
	static bool IsProtectionUnderLockRequired(hstring_ref identity);
	static long long PolicyChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler);
	template <typename F> static long long PolicyChanged(F handler);
	static void PolicyChanged(long long token);
	static bool IsProtectionEnabled();
	static bool IsIdentityManaged(hstring_ref identity);
	static bool TryApplyProcessUIPolicy(hstring_ref identity);
	static void ClearProcessUIPolicy();
	static Windows::Security::EnterpriseData::ThreadNetworkContext CreateCurrentThreadNetworkContext(hstring_ref identity);
	static Windows::Foundation::IAsyncOperation<hstring> GetPrimaryManagedIdentityForNetworkEndpointAsync(Windows::Networking::HostName const & endpointHost);
	static void RevokeContent(hstring_ref identity);
	static Windows::Security::EnterpriseData::ProtectionPolicyManager GetForCurrentView();
	static long long ProtectedAccessSuspending(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs> const & handler);
	template <typename F> static long long ProtectedAccessSuspending(F handler);
	static void ProtectedAccessSuspending(long long token);
	static long long ProtectedAccessResumed(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs> const & handler);
	template <typename F> static long long ProtectedAccessResumed(F handler);
	static void ProtectedAccessResumed(long long token);
	static long long ProtectedContentRevoked(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs> const & handler);
	template <typename F> static long long ProtectedContentRevoked(F handler);
	static void ProtectedContentRevoked(long long token);
	static Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult CheckAccess(hstring_ref sourceIdentity, hstring_ref targetIdentity);
	static Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> RequestAccessAsync(hstring_ref sourceIdentity, hstring_ref targetIdentity);
};

struct ProtectedAccessSuspendingEventArgs :
	Windows::Security::EnterpriseData::IProtectedAccessSuspendingEventArgs
{
	ProtectedAccessSuspendingEventArgs(std::nullptr_t) noexcept {}
};

struct ProtectedAccessResumedEventArgs :
	Windows::Security::EnterpriseData::IProtectedAccessResumedEventArgs
{
	ProtectedAccessResumedEventArgs(std::nullptr_t) noexcept {}
};

struct ProtectedContentRevokedEventArgs :
	Windows::Security::EnterpriseData::IProtectedContentRevokedEventArgs
{
	ProtectedContentRevokedEventArgs(std::nullptr_t) noexcept {}
};

struct FileRevocationManager
{
	FileRevocationManager() = delete;
	static Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::FileProtectionStatus> ProtectAsync(Windows::Storage::IStorageItem const & storageItem, hstring_ref enterpriseIdentity);
	static Windows::Foundation::IAsyncOperation<bool> CopyProtectionAsync(Windows::Storage::IStorageItem const & sourceStorageItem, Windows::Storage::IStorageItem const & targetStorageItem);
	static void Revoke(hstring_ref enterpriseIdentity);
	static Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::FileProtectionStatus> GetStatusAsync(Windows::Storage::IStorageItem const & storageItem);
};

struct FileProtectionManager
{
	FileProtectionManager() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::FileProtectionInfo> ProtectAsync(Windows::Storage::IStorageItem const & target, hstring_ref identity);
	static Windows::Foundation::IAsyncOperation<bool> CopyProtectionAsync(Windows::Storage::IStorageItem const & source, Windows::Storage::IStorageItem const & target);
	static Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::FileProtectionInfo> GetProtectionInfoAsync(Windows::Storage::IStorageItem const & source);
	static Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerExportResult> SaveFileAsContainerAsync(Windows::Storage::IStorageFile const & protectedFile);
	static Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile);
	static Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile, Windows::Storage::IStorageItem const & target);
	static Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedFileCreateResult> CreateProtectedAndOpenAsync(Windows::Storage::IStorageFolder const & parentFolder, hstring_ref desiredName, hstring_ref identity, Windows::Storage::CreationCollisionOption collisionOption);
	static Windows::Foundation::IAsyncOperation<bool> IsContainerAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile, Windows::Storage::IStorageItem const & target, Windows::Storage::NameCollisionOption collisionOption);
	static Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerExportResult> SaveFileAsContainerAsync(Windows::Storage::IStorageFile const & protectedFile, Windows::Foundation::Collections::IIterable<hstring> const & sharedWithIdentities);
};

struct DataProtectionManager
{
	DataProtectionManager() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::BufferProtectUnprotectResult> ProtectAsync(Windows::Storage::Streams::IBuffer const & data, hstring_ref identity);
	static Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::BufferProtectUnprotectResult> UnprotectAsync(Windows::Storage::Streams::IBuffer const & data);
	static Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> ProtectStreamAsync(Windows::Storage::Streams::IInputStream const & unprotectedStream, hstring_ref identity, Windows::Storage::Streams::IOutputStream const & protectedStream);
	static Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> UnprotectStreamAsync(Windows::Storage::Streams::IInputStream const & protectedStream, Windows::Storage::Streams::IOutputStream const & unprotectedStream);
	static Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> GetProtectionInfoAsync(Windows::Storage::Streams::IBuffer const & protectedData);
	static Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> GetStreamProtectionInfoAsync(Windows::Storage::Streams::IInputStream const & protectedStream);
};

}}}}

namespace winrt { namespace Windows { namespace Storage {

struct StorageFile :
	Windows::Storage::IStorageFile,
	requires<StorageFile, Windows::Storage::IStorageItemProperties, Windows::Storage::IStorageItemProperties2, Windows::Storage::IStorageItem2, Windows::Storage::IStorageItemPropertiesWithProvider, Windows::Storage::IStorageFilePropertiesWithAvailability, Windows::Storage::IStorageFile2>
{
	StorageFile(std::nullptr_t) noexcept {}
	using impl_IStorageFile::OpenAsync;
	using impl_IStorageFile::OpenTransactedWriteAsync;
	using impl_IStorageFile2::OpenAsync;
	using impl_IStorageFile2::OpenTransactedWriteAsync;
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileFromPathAsync(hstring_ref path);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> GetFileFromApplicationUriAsync(Windows::Foundation::Uri const & uri);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(hstring_ref displayNameWithExtension, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	template <typename F> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileAsync(hstring_ref displayNameWithExtension, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	template <typename F> static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateStreamedFileFromUriAsync(hstring_ref displayNameWithExtension, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> ReplaceWithStreamedFileFromUriAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail);
};

struct StorageFolder :
	Windows::Storage::IStorageFolder,
	requires<StorageFolder, Windows::Storage::Search::IStorageFolderQueryOperations, Windows::Storage::IStorageItemProperties, Windows::Storage::IStorageItemProperties2, Windows::Storage::IStorageItem2, Windows::Storage::IStorageFolder2, Windows::Storage::IStorageItemPropertiesWithProvider>
{
	StorageFolder(std::nullptr_t) noexcept {}
	using impl_IStorageFolderQueryOperations::GetFilesAsync;
	using impl_IStorageFolderQueryOperations::GetFoldersAsync;
	using impl_IStorageFolderQueryOperations::GetItemsAsync;
	using impl_IStorageFolder::GetFilesAsync;
	using impl_IStorageFolder::GetFoldersAsync;
	using impl_IStorageFolder::GetItemsAsync;
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderFromPathAsync(hstring_ref path);
};

struct StorageLibrary :
	Windows::Storage::IStorageLibrary
{
	StorageLibrary(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> GetLibraryAsync(Windows::Storage::KnownLibraryId libraryId);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> GetLibraryForUserAsync(Windows::System::User const & user, Windows::Storage::KnownLibraryId libraryId);
};

struct KnownFolders
{
	KnownFolders() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> GetFolderForUserAsync(Windows::System::User const & user, Windows::Storage::KnownFolderId folderId);
	static Windows::Storage::StorageFolder Objects3D();
	static Windows::Storage::StorageFolder AppCaptures();
	static Windows::Storage::StorageFolder RecordedCalls();
	static Windows::Storage::StorageFolder SavedPictures();
	static Windows::Storage::StorageFolder CameraRoll();
	static Windows::Storage::StorageFolder MusicLibrary();
	static Windows::Storage::StorageFolder PicturesLibrary();
	static Windows::Storage::StorageFolder VideosLibrary();
	static Windows::Storage::StorageFolder DocumentsLibrary();
	static Windows::Storage::StorageFolder HomeGroup();
	static Windows::Storage::StorageFolder RemovableDevices();
	static Windows::Storage::StorageFolder MediaServerDevices();
	static Windows::Storage::StorageFolder Playlists();
};

struct DownloadsFolder
{
	DownloadsFolder() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(hstring_ref desiredName);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(hstring_ref desiredName);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileAsync(hstring_ref desiredName, Windows::Storage::CreationCollisionOption option);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderAsync(hstring_ref desiredName, Windows::Storage::CreationCollisionOption option);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileForUserAsync(Windows::System::User const & user, hstring_ref desiredName);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderForUserAsync(Windows::System::User const & user, hstring_ref desiredName);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> CreateFileForUserAsync(Windows::System::User const & user, hstring_ref desiredName, Windows::Storage::CreationCollisionOption option);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> CreateFolderForUserAsync(Windows::System::User const & user, hstring_ref desiredName, Windows::Storage::CreationCollisionOption option);
};

struct StreamedFileDataRequest :
	Windows::Storage::Streams::IOutputStream,
	requires<StreamedFileDataRequest, Windows::Storage::IStreamedFileDataRequest>
{
	StreamedFileDataRequest(std::nullptr_t) noexcept {}
};

struct StorageStreamTransaction :
	Windows::Storage::IStorageStreamTransaction
{
	StorageStreamTransaction(std::nullptr_t) noexcept {}
};

struct StorageProvider :
	Windows::Storage::IStorageProvider
{
	StorageProvider(std::nullptr_t) noexcept {}
};

struct FileIO
{
	FileIO() = delete;
	static Windows::Foundation::IAsyncOperation<hstring> ReadTextAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<hstring> ReadTextAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, hstring_ref contents);
	static Windows::Foundation::IAsyncAction WriteTextAsync(Windows::Storage::IStorageFile const & file, hstring_ref contents, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, hstring_ref contents);
	static Windows::Foundation::IAsyncAction AppendTextAsync(Windows::Storage::IStorageFile const & file, hstring_ref contents, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<hstring>> ReadLinesAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<hstring>> ReadLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<hstring> const & lines);
	static Windows::Foundation::IAsyncAction WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<hstring> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<hstring> const & lines);
	static Windows::Foundation::IAsyncAction AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<hstring> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ReadBufferAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncAction WriteBufferAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::IBuffer const & buffer);
};

struct PathIO
{
	PathIO() = delete;
	static Windows::Foundation::IAsyncOperation<hstring> ReadTextAsync(hstring_ref absolutePath);
	static Windows::Foundation::IAsyncOperation<hstring> ReadTextAsync(hstring_ref absolutePath, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction WriteTextAsync(hstring_ref absolutePath, hstring_ref contents);
	static Windows::Foundation::IAsyncAction WriteTextAsync(hstring_ref absolutePath, hstring_ref contents, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction AppendTextAsync(hstring_ref absolutePath, hstring_ref contents);
	static Windows::Foundation::IAsyncAction AppendTextAsync(hstring_ref absolutePath, hstring_ref contents, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<hstring>> ReadLinesAsync(hstring_ref absolutePath);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<hstring>> ReadLinesAsync(hstring_ref absolutePath, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction WriteLinesAsync(hstring_ref absolutePath, Windows::Foundation::Collections::IIterable<hstring> const & lines);
	static Windows::Foundation::IAsyncAction WriteLinesAsync(hstring_ref absolutePath, Windows::Foundation::Collections::IIterable<hstring> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncAction AppendLinesAsync(hstring_ref absolutePath, Windows::Foundation::Collections::IIterable<hstring> const & lines);
	static Windows::Foundation::IAsyncAction AppendLinesAsync(hstring_ref absolutePath, Windows::Foundation::Collections::IIterable<hstring> const & lines, Windows::Storage::Streams::UnicodeEncoding encoding);
	static Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> ReadBufferAsync(hstring_ref absolutePath);
	static Windows::Foundation::IAsyncAction WriteBufferAsync(hstring_ref absolutePath, Windows::Storage::Streams::IBuffer const & buffer);
};

struct CachedFileManager
{
	CachedFileManager() = delete;
	static void DeferUpdates(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Provider::FileUpdateStatus> CompleteUpdatesAsync(Windows::Storage::IStorageFile const & file);
};

struct SystemAudioProperties :
	Windows::Storage::ISystemAudioProperties
{
	SystemAudioProperties(std::nullptr_t) noexcept {}
};

struct SystemGPSProperties :
	Windows::Storage::ISystemGPSProperties
{
	SystemGPSProperties(std::nullptr_t) noexcept {}
};

struct SystemImageProperties :
	Windows::Storage::ISystemImageProperties
{
	SystemImageProperties(std::nullptr_t) noexcept {}
};

struct SystemMediaProperties :
	Windows::Storage::ISystemMediaProperties
{
	SystemMediaProperties(std::nullptr_t) noexcept {}
};

struct SystemMusicProperties :
	Windows::Storage::ISystemMusicProperties
{
	SystemMusicProperties(std::nullptr_t) noexcept {}
};

struct SystemPhotoProperties :
	Windows::Storage::ISystemPhotoProperties
{
	SystemPhotoProperties(std::nullptr_t) noexcept {}
};

struct SystemVideoProperties :
	Windows::Storage::ISystemVideoProperties
{
	SystemVideoProperties(std::nullptr_t) noexcept {}
};

struct SystemProperties
{
	SystemProperties() = delete;
	static hstring Author();
	static hstring Comment();
	static hstring ItemNameDisplay();
	static hstring Keywords();
	static hstring Rating();
	static hstring Title();
	static Windows::Storage::SystemAudioProperties Audio();
	static Windows::Storage::SystemGPSProperties GPS();
	static Windows::Storage::SystemMediaProperties Media();
	static Windows::Storage::SystemMusicProperties Music();
	static Windows::Storage::SystemPhotoProperties Photo();
	static Windows::Storage::SystemVideoProperties Video();
	static Windows::Storage::SystemImageProperties Image();
};

struct ApplicationData :
	Windows::Storage::IApplicationData,
	requires<ApplicationData, Windows::Storage::IApplicationData2, Windows::Storage::IApplicationData3>
{
	ApplicationData(std::nullptr_t) noexcept {}
	static Windows::Foundation::IAsyncOperation<Windows::Storage::ApplicationData> GetForUserAsync(Windows::System::User const & user);
	static Windows::Storage::ApplicationData Current();
};

struct SetVersionRequest :
	Windows::Storage::ISetVersionRequest
{
	SetVersionRequest(std::nullptr_t) noexcept {}
};

struct ApplicationDataContainer :
	Windows::Storage::IApplicationDataContainer
{
	ApplicationDataContainer(std::nullptr_t) noexcept {}
};

struct SetVersionDeferral :
	Windows::Storage::ISetVersionDeferral
{
	SetVersionDeferral(std::nullptr_t) noexcept {}
};

struct ApplicationDataContainerSettings :
	Windows::Foundation::Collections::IPropertySet
{
	ApplicationDataContainerSettings(std::nullptr_t) noexcept {}
};

struct ApplicationDataCompositeValue :
	Windows::Foundation::Collections::IPropertySet
{
	ApplicationDataCompositeValue(std::nullptr_t) noexcept {}
	ApplicationDataCompositeValue();
};

}}}

namespace winrt { namespace Windows { namespace Storage { namespace FileProperties {

struct GeotagHelper
{
	GeotagHelper() = delete;
	static Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geopoint> GetGeotagAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncAction SetGeotagFromGeolocatorAsync(Windows::Storage::IStorageFile const & file, Windows::Devices::Geolocation::Geolocator const & geolocator);
	static Windows::Foundation::IAsyncAction SetGeotagAsync(Windows::Storage::IStorageFile const & file, Windows::Devices::Geolocation::Geopoint const & geopoint);
};

struct StorageItemThumbnail :
	Windows::Storage::Streams::IRandomAccessStreamWithContentType,
	requires<StorageItemThumbnail, Windows::Storage::FileProperties::IThumbnailProperties>
{
	StorageItemThumbnail(std::nullptr_t) noexcept {}
};

struct MusicProperties :
	Windows::Storage::FileProperties::IMusicProperties
{
	MusicProperties(std::nullptr_t) noexcept {}
};

struct VideoProperties :
	Windows::Storage::FileProperties::IVideoProperties
{
	VideoProperties(std::nullptr_t) noexcept {}
};

struct ImageProperties :
	Windows::Storage::FileProperties::IImageProperties
{
	ImageProperties(std::nullptr_t) noexcept {}
};

struct DocumentProperties :
	Windows::Storage::FileProperties::IDocumentProperties
{
	DocumentProperties(std::nullptr_t) noexcept {}
};

struct StorageItemContentProperties :
	Windows::Storage::FileProperties::IStorageItemContentProperties
{
	StorageItemContentProperties(std::nullptr_t) noexcept {}
};

struct BasicProperties :
	Windows::Storage::FileProperties::IBasicProperties,
	requires<BasicProperties, Windows::Storage::FileProperties::IStorageItemExtraProperties>
{
	BasicProperties(std::nullptr_t) noexcept {}
};

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

struct FileRemovedEventArgs :
	Windows::Storage::Pickers::Provider::IFileRemovedEventArgs
{
	FileRemovedEventArgs(std::nullptr_t) noexcept {}
};

struct FileOpenPickerUI :
	Windows::Storage::Pickers::Provider::IFileOpenPickerUI
{
	FileOpenPickerUI(std::nullptr_t) noexcept {}
};

struct PickerClosingEventArgs :
	Windows::Storage::Pickers::Provider::IPickerClosingEventArgs
{
	PickerClosingEventArgs(std::nullptr_t) noexcept {}
};

struct PickerClosingOperation :
	Windows::Storage::Pickers::Provider::IPickerClosingOperation
{
	PickerClosingOperation(std::nullptr_t) noexcept {}
};

struct PickerClosingDeferral :
	Windows::Storage::Pickers::Provider::IPickerClosingDeferral
{
	PickerClosingDeferral(std::nullptr_t) noexcept {}
};

struct FileSavePickerUI :
	Windows::Storage::Pickers::Provider::IFileSavePickerUI
{
	FileSavePickerUI(std::nullptr_t) noexcept {}
};

struct TargetFileRequestedEventArgs :
	Windows::Storage::Pickers::Provider::ITargetFileRequestedEventArgs
{
	TargetFileRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct TargetFileRequest :
	Windows::Storage::Pickers::Provider::ITargetFileRequest
{
	TargetFileRequest(std::nullptr_t) noexcept {}
};

struct TargetFileRequestDeferral :
	Windows::Storage::Pickers::Provider::ITargetFileRequestDeferral
{
	TargetFileRequestDeferral(std::nullptr_t) noexcept {}
};

}}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Provider {

struct CachedFileUpdaterUI :
	Windows::Storage::Provider::ICachedFileUpdaterUI,
	requires<CachedFileUpdaterUI, Windows::Storage::Provider::ICachedFileUpdaterUI2>
{
	CachedFileUpdaterUI(std::nullptr_t) noexcept {}
};

struct FileUpdateRequestedEventArgs :
	Windows::Storage::Provider::IFileUpdateRequestedEventArgs
{
	FileUpdateRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct FileUpdateRequest :
	Windows::Storage::Provider::IFileUpdateRequest,
	requires<FileUpdateRequest, Windows::Storage::Provider::IFileUpdateRequest2>
{
	FileUpdateRequest(std::nullptr_t) noexcept {}
};

struct FileUpdateRequestDeferral :
	Windows::Storage::Provider::IFileUpdateRequestDeferral
{
	FileUpdateRequestDeferral(std::nullptr_t) noexcept {}
};

struct CachedFileUpdater
{
	CachedFileUpdater() = delete;
	static void SetUpdateInformation(Windows::Storage::IStorageFile const & file, hstring_ref contentId, Windows::Storage::Provider::ReadActivationMode readMode, Windows::Storage::Provider::WriteActivationMode writeMode, Windows::Storage::Provider::CachedFileOptions options);
};

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Search {

struct ContentIndexer :
	Windows::Storage::Search::IContentIndexer,
	requires<ContentIndexer, Windows::Storage::Search::IContentIndexerQueryOperations>
{
	ContentIndexer(std::nullptr_t) noexcept {}
	static Windows::Storage::Search::ContentIndexer GetIndexer(hstring_ref indexName);
	static Windows::Storage::Search::ContentIndexer GetIndexer();
};

struct ValueAndLanguage :
	Windows::Storage::Search::IValueAndLanguage
{
	ValueAndLanguage(std::nullptr_t) noexcept {}
	ValueAndLanguage();
};

struct ContentIndexerQuery :
	Windows::Storage::Search::IContentIndexerQuery
{
	ContentIndexerQuery(std::nullptr_t) noexcept {}
};

struct IndexableContent :
	Windows::Storage::Search::IIndexableContent
{
	IndexableContent(std::nullptr_t) noexcept {}
	IndexableContent();
};

struct QueryOptions :
	Windows::Storage::Search::IQueryOptions,
	requires<QueryOptions, Windows::Storage::Search::IQueryOptionsWithProviderFilter>
{
	QueryOptions(std::nullptr_t) noexcept {}
	QueryOptions();
	QueryOptions(Windows::Storage::Search::CommonFileQuery query, Windows::Foundation::Collections::IIterable<hstring> const & fileTypeFilter);
	QueryOptions(Windows::Storage::Search::CommonFolderQuery query);
};

struct StorageFileQueryResult :
	Windows::Storage::Search::IStorageFileQueryResult,
	requires<StorageFileQueryResult, Windows::Storage::Search::IStorageFileQueryResult2>
{
	StorageFileQueryResult(std::nullptr_t) noexcept {}
};

struct StorageFolderQueryResult :
	Windows::Storage::Search::IStorageFolderQueryResult
{
	StorageFolderQueryResult(std::nullptr_t) noexcept {}
};

struct StorageItemQueryResult :
	Windows::Storage::Search::IStorageItemQueryResult
{
	StorageItemQueryResult(std::nullptr_t) noexcept {}
};

struct SortEntryVector :
	Windows::Foundation::Collections::IVector<winrt::Windows::Storage::Search::SortEntry>
{
	SortEntryVector(std::nullptr_t) noexcept {}
};

struct StorageLibraryContentChangedTriggerDetails :
	Windows::Storage::Search::IStorageLibraryContentChangedTriggerDetails
{
	StorageLibraryContentChangedTriggerDetails(std::nullptr_t) noexcept {}
};

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Streams {

struct DataReaderLoadOperation :
	Windows::Foundation::IAsyncOperation<unsigned>
{
	DataReaderLoadOperation(std::nullptr_t) noexcept {}
};

struct DataReader :
	Windows::Storage::Streams::IDataReader
{
	DataReader(std::nullptr_t) noexcept {}
	DataReader(Windows::Storage::Streams::IInputStream const & inputStream);
	static Windows::Storage::Streams::DataReader FromBuffer(Windows::Storage::Streams::IBuffer const & buffer);
};

struct DataWriterStoreOperation :
	Windows::Foundation::IAsyncOperation<unsigned>
{
	DataWriterStoreOperation(std::nullptr_t) noexcept {}
};

struct DataWriter :
	Windows::Storage::Streams::IDataWriter
{
	DataWriter(std::nullptr_t) noexcept {}
	DataWriter();
	DataWriter(Windows::Storage::Streams::IOutputStream const & outputStream);
};

struct RandomAccessStream
{
	RandomAccessStream() = delete;
	static Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination);
	static Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination, unsigned long long bytesToCopy);
	static Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> CopyAndCloseAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination);
};

struct Buffer :
	Windows::Storage::Streams::IBuffer
{
	Buffer(std::nullptr_t) noexcept {}
	Buffer(unsigned capacity);
	static Windows::Storage::Streams::Buffer CreateCopyFromMemoryBuffer(Windows::Foundation::IMemoryBuffer const & input);
	static Windows::Foundation::MemoryBuffer CreateMemoryBufferOverIBuffer(Windows::Storage::Streams::IBuffer const & input);
};

struct RandomAccessStreamReference :
	Windows::Storage::Streams::IRandomAccessStreamReference
{
	RandomAccessStreamReference(std::nullptr_t) noexcept {}
	static Windows::Storage::Streams::RandomAccessStreamReference CreateFromFile(Windows::Storage::IStorageFile const & file);
	static Windows::Storage::Streams::RandomAccessStreamReference CreateFromUri(Windows::Foundation::Uri const & uri);
	static Windows::Storage::Streams::RandomAccessStreamReference CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream);
};

struct FileRandomAccessStream :
	Windows::Storage::Streams::IRandomAccessStream
{
	FileRandomAccessStream(std::nullptr_t) noexcept {}
};

struct FileInputStream :
	Windows::Storage::Streams::IInputStream
{
	FileInputStream(std::nullptr_t) noexcept {}
};

struct FileOutputStream :
	Windows::Storage::Streams::IOutputStream
{
	FileOutputStream(std::nullptr_t) noexcept {}
};

struct RandomAccessStreamOverStream :
	Windows::Storage::Streams::IRandomAccessStream
{
	RandomAccessStreamOverStream(std::nullptr_t) noexcept {}
};

struct InputStreamOverStream :
	Windows::Storage::Streams::IInputStream
{
	InputStreamOverStream(std::nullptr_t) noexcept {}
};

struct OutputStreamOverStream :
	Windows::Storage::Streams::IOutputStream
{
	OutputStreamOverStream(std::nullptr_t) noexcept {}
};

struct InMemoryRandomAccessStream :
	Windows::Storage::Streams::IRandomAccessStream
{
	InMemoryRandomAccessStream(std::nullptr_t) noexcept {}
	InMemoryRandomAccessStream();
};

}}}}

namespace winrt { namespace Windows { namespace System {

struct User :
	Windows::System::IUser
{
	User(std::nullptr_t) noexcept {}
	static Windows::System::UserWatcher CreateWatcher();
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> FindAllAsync();
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> FindAllAsync(Windows::System::UserType type);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> FindAllAsync(Windows::System::UserType type, Windows::System::UserAuthenticationStatus status);
	static Windows::System::User GetFromId(hstring_ref nonRoamableId);
};

struct ProtocolForResultsOperation :
	Windows::System::IProtocolForResultsOperation
{
	ProtocolForResultsOperation(std::nullptr_t) noexcept {}
};

struct UserChangedEventArgs :
	Windows::System::IUserChangedEventArgs
{
	UserChangedEventArgs(std::nullptr_t) noexcept {}
};

struct AppMemoryUsageLimitChangingEventArgs :
	Windows::System::IAppMemoryUsageLimitChangingEventArgs
{
	AppMemoryUsageLimitChangingEventArgs(std::nullptr_t) noexcept {}
};

struct AppMemoryReport :
	Windows::System::IAppMemoryReport
{
	AppMemoryReport(std::nullptr_t) noexcept {}
};

struct ProcessMemoryReport :
	Windows::System::IProcessMemoryReport
{
	ProcessMemoryReport(std::nullptr_t) noexcept {}
};

struct MemoryManager
{
	MemoryManager() = delete;
	static bool TrySetAppMemoryUsageLimit(unsigned long long value);
	static Windows::System::AppMemoryReport GetAppMemoryReport();
	static Windows::System::ProcessMemoryReport GetProcessMemoryReport();
	static unsigned long long AppMemoryUsage();
	static unsigned long long AppMemoryUsageLimit();
	static Windows::System::AppMemoryUsageLevel AppMemoryUsageLevel();
	static long long AppMemoryUsageIncreased(Windows::Foundation::IEventHandler<IInspectable> const & handler);
	template <typename F> static long long AppMemoryUsageIncreased(F handler);
	static void AppMemoryUsageIncreased(long long token);
	static long long AppMemoryUsageDecreased(Windows::Foundation::IEventHandler<IInspectable> const & handler);
	template <typename F> static long long AppMemoryUsageDecreased(F handler);
	static void AppMemoryUsageDecreased(long long token);
	static long long AppMemoryUsageLimitChanging(Windows::Foundation::IEventHandler<Windows::System::AppMemoryUsageLimitChangingEventArgs> const & handler);
	template <typename F> static long long AppMemoryUsageLimitChanging(F handler);
	static void AppMemoryUsageLimitChanging(long long token);
};

struct UserWatcher :
	Windows::System::IUserWatcher
{
	UserWatcher(std::nullptr_t) noexcept {}
};

struct UserAuthenticationStatusChangingEventArgs :
	Windows::System::IUserAuthenticationStatusChangingEventArgs
{
	UserAuthenticationStatusChangingEventArgs(std::nullptr_t) noexcept {}
};

struct UserAuthenticationStatusChangeDeferral :
	Windows::System::IUserAuthenticationStatusChangeDeferral
{
	UserAuthenticationStatusChangeDeferral(std::nullptr_t) noexcept {}
};

struct KnownUserProperties
{
	KnownUserProperties() = delete;
	static hstring DisplayName();
	static hstring FirstName();
	static hstring LastName();
	static hstring ProviderName();
	static hstring AccountName();
	static hstring GuestHost();
	static hstring PrincipalName();
	static hstring DomainName();
	static hstring SessionInitiationProtocolUri();
};

struct LaunchUriResult :
	Windows::System::ILaunchUriResult
{
	LaunchUriResult(std::nullptr_t) noexcept {}
};

struct LauncherUIOptions :
	Windows::System::ILauncherUIOptions
{
	LauncherUIOptions(std::nullptr_t) noexcept {}
};

struct LauncherOptions :
	Windows::System::ILauncherOptions,
	requires<LauncherOptions, Windows::System::ILauncherViewOptions, Windows::System::ILauncherOptions2>
{
	LauncherOptions(std::nullptr_t) noexcept {}
	LauncherOptions();
};

struct FolderLauncherOptions :
	Windows::System::IFolderLauncherOptions,
	requires<FolderLauncherOptions, Windows::System::ILauncherViewOptions>
{
	FolderLauncherOptions(std::nullptr_t) noexcept {}
	FolderLauncherOptions();
};

struct Launcher
{
	Launcher() = delete;
	static Windows::Foundation::IAsyncOperation<bool> LaunchFileAsync(Windows::Storage::IStorageFile const & file);
	static Windows::Foundation::IAsyncOperation<bool> LaunchFileAsync(Windows::Storage::IStorageFile const & file, Windows::System::LauncherOptions const & options);
	static Windows::Foundation::IAsyncOperation<bool> LaunchUriAsync(Windows::Foundation::Uri const & uri);
	static Windows::Foundation::IAsyncOperation<bool> LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options);
	static Windows::Foundation::IAsyncOperation<bool> LaunchFolderAsync(Windows::Storage::IStorageFolder const & folder);
	static Windows::Foundation::IAsyncOperation<bool> LaunchFolderAsync(Windows::Storage::IStorageFolder const & folder, Windows::System::FolderLauncherOptions const & options);
	static Windows::Foundation::IAsyncOperation<Windows::System::LaunchUriResult> LaunchUriForResultsAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options);
	static Windows::Foundation::IAsyncOperation<Windows::System::LaunchUriResult> LaunchUriForResultsAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options, Windows::Foundation::Collections::ValueSet const & inputData);
	static Windows::Foundation::IAsyncOperation<bool> LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options, Windows::Foundation::Collections::ValueSet const & inputData);
	static Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> QueryUriSupportAsync(Windows::Foundation::Uri const & uri, Windows::System::LaunchQuerySupportType launchQuerySupportType);
	static Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> QueryUriSupportAsync(Windows::Foundation::Uri const & uri, Windows::System::LaunchQuerySupportType launchQuerySupportType, hstring_ref packageFamilyName);
	static Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> QueryFileSupportAsync(Windows::Storage::StorageFile const & file);
	static Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> QueryFileSupportAsync(Windows::Storage::StorageFile const & file, hstring_ref packageFamilyName);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> FindUriSchemeHandlersAsync(hstring_ref scheme);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> FindUriSchemeHandlersAsync(hstring_ref scheme, Windows::System::LaunchQuerySupportType launchQuerySupportType);
	static Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> FindFileHandlersAsync(hstring_ref extension);
};

}}}

namespace winrt { namespace Windows { namespace UI {

struct ColorHelper :
	Windows::UI::IColorHelper
{
	ColorHelper(std::nullptr_t) noexcept {}
	static Windows::UI::Color FromArgb(byte a, byte r, byte g, byte b);
};

struct Colors :
	Windows::UI::IColors
{
	Colors(std::nullptr_t) noexcept {}
	static Windows::UI::Color AliceBlue();
	static Windows::UI::Color AntiqueWhite();
	static Windows::UI::Color Aqua();
	static Windows::UI::Color Aquamarine();
	static Windows::UI::Color Azure();
	static Windows::UI::Color Beige();
	static Windows::UI::Color Bisque();
	static Windows::UI::Color Black();
	static Windows::UI::Color BlanchedAlmond();
	static Windows::UI::Color Blue();
	static Windows::UI::Color BlueViolet();
	static Windows::UI::Color Brown();
	static Windows::UI::Color BurlyWood();
	static Windows::UI::Color CadetBlue();
	static Windows::UI::Color Chartreuse();
	static Windows::UI::Color Chocolate();
	static Windows::UI::Color Coral();
	static Windows::UI::Color CornflowerBlue();
	static Windows::UI::Color Cornsilk();
	static Windows::UI::Color Crimson();
	static Windows::UI::Color Cyan();
	static Windows::UI::Color DarkBlue();
	static Windows::UI::Color DarkCyan();
	static Windows::UI::Color DarkGoldenrod();
	static Windows::UI::Color DarkGray();
	static Windows::UI::Color DarkGreen();
	static Windows::UI::Color DarkKhaki();
	static Windows::UI::Color DarkMagenta();
	static Windows::UI::Color DarkOliveGreen();
	static Windows::UI::Color DarkOrange();
	static Windows::UI::Color DarkOrchid();
	static Windows::UI::Color DarkRed();
	static Windows::UI::Color DarkSalmon();
	static Windows::UI::Color DarkSeaGreen();
	static Windows::UI::Color DarkSlateBlue();
	static Windows::UI::Color DarkSlateGray();
	static Windows::UI::Color DarkTurquoise();
	static Windows::UI::Color DarkViolet();
	static Windows::UI::Color DeepPink();
	static Windows::UI::Color DeepSkyBlue();
	static Windows::UI::Color DimGray();
	static Windows::UI::Color DodgerBlue();
	static Windows::UI::Color Firebrick();
	static Windows::UI::Color FloralWhite();
	static Windows::UI::Color ForestGreen();
	static Windows::UI::Color Fuchsia();
	static Windows::UI::Color Gainsboro();
	static Windows::UI::Color GhostWhite();
	static Windows::UI::Color Gold();
	static Windows::UI::Color Goldenrod();
	static Windows::UI::Color Gray();
	static Windows::UI::Color Green();
	static Windows::UI::Color GreenYellow();
	static Windows::UI::Color Honeydew();
	static Windows::UI::Color HotPink();
	static Windows::UI::Color IndianRed();
	static Windows::UI::Color Indigo();
	static Windows::UI::Color Ivory();
	static Windows::UI::Color Khaki();
	static Windows::UI::Color Lavender();
	static Windows::UI::Color LavenderBlush();
	static Windows::UI::Color LawnGreen();
	static Windows::UI::Color LemonChiffon();
	static Windows::UI::Color LightBlue();
	static Windows::UI::Color LightCoral();
	static Windows::UI::Color LightCyan();
	static Windows::UI::Color LightGoldenrodYellow();
	static Windows::UI::Color LightGreen();
	static Windows::UI::Color LightGray();
	static Windows::UI::Color LightPink();
	static Windows::UI::Color LightSalmon();
	static Windows::UI::Color LightSeaGreen();
	static Windows::UI::Color LightSkyBlue();
	static Windows::UI::Color LightSlateGray();
	static Windows::UI::Color LightSteelBlue();
	static Windows::UI::Color LightYellow();
	static Windows::UI::Color Lime();
	static Windows::UI::Color LimeGreen();
	static Windows::UI::Color Linen();
	static Windows::UI::Color Magenta();
	static Windows::UI::Color Maroon();
	static Windows::UI::Color MediumAquamarine();
	static Windows::UI::Color MediumBlue();
	static Windows::UI::Color MediumOrchid();
	static Windows::UI::Color MediumPurple();
	static Windows::UI::Color MediumSeaGreen();
	static Windows::UI::Color MediumSlateBlue();
	static Windows::UI::Color MediumSpringGreen();
	static Windows::UI::Color MediumTurquoise();
	static Windows::UI::Color MediumVioletRed();
	static Windows::UI::Color MidnightBlue();
	static Windows::UI::Color MintCream();
	static Windows::UI::Color MistyRose();
	static Windows::UI::Color Moccasin();
	static Windows::UI::Color NavajoWhite();
	static Windows::UI::Color Navy();
	static Windows::UI::Color OldLace();
	static Windows::UI::Color Olive();
	static Windows::UI::Color OliveDrab();
	static Windows::UI::Color Orange();
	static Windows::UI::Color OrangeRed();
	static Windows::UI::Color Orchid();
	static Windows::UI::Color PaleGoldenrod();
	static Windows::UI::Color PaleGreen();
	static Windows::UI::Color PaleTurquoise();
	static Windows::UI::Color PaleVioletRed();
	static Windows::UI::Color PapayaWhip();
	static Windows::UI::Color PeachPuff();
	static Windows::UI::Color Peru();
	static Windows::UI::Color Pink();
	static Windows::UI::Color Plum();
	static Windows::UI::Color PowderBlue();
	static Windows::UI::Color Purple();
	static Windows::UI::Color Red();
	static Windows::UI::Color RosyBrown();
	static Windows::UI::Color RoyalBlue();
	static Windows::UI::Color SaddleBrown();
	static Windows::UI::Color Salmon();
	static Windows::UI::Color SandyBrown();
	static Windows::UI::Color SeaGreen();
	static Windows::UI::Color SeaShell();
	static Windows::UI::Color Sienna();
	static Windows::UI::Color Silver();
	static Windows::UI::Color SkyBlue();
	static Windows::UI::Color SlateBlue();
	static Windows::UI::Color SlateGray();
	static Windows::UI::Color Snow();
	static Windows::UI::Color SpringGreen();
	static Windows::UI::Color SteelBlue();
	static Windows::UI::Color Tan();
	static Windows::UI::Color Teal();
	static Windows::UI::Color Thistle();
	static Windows::UI::Color Tomato();
	static Windows::UI::Color Transparent();
	static Windows::UI::Color Turquoise();
	static Windows::UI::Color Violet();
	static Windows::UI::Color Wheat();
	static Windows::UI::Color White();
	static Windows::UI::Color WhiteSmoke();
	static Windows::UI::Color Yellow();
	static Windows::UI::Color YellowGreen();
};

}}}

namespace winrt { namespace Windows { namespace UI { namespace Core {

struct KeyEventArgs :
	Windows::UI::Core::IKeyEventArgs
{
	KeyEventArgs(std::nullptr_t) noexcept {}
};

struct PointerEventArgs :
	Windows::UI::Core::IPointerEventArgs
{
	PointerEventArgs(std::nullptr_t) noexcept {}
};

struct CoreDispatcher :
	Windows::UI::Core::ICoreDispatcher,
	requires<CoreDispatcher, Windows::UI::Core::ICoreDispatcherWithTaskPriority, Windows::UI::Core::ICoreDispatcher2>
{
	CoreDispatcher(std::nullptr_t) noexcept {}
};

struct CoreCursor :
	Windows::UI::Core::ICoreCursor
{
	CoreCursor(std::nullptr_t) noexcept {}
	CoreCursor(Windows::UI::Core::CoreCursorType type, unsigned id);
};

struct CoreWindow :
	Windows::UI::Core::ICoreWindow,
	requires<CoreWindow, Windows::UI::Core::ICoreWindow2, Windows::UI::Core::ICorePointerRedirector>
{
	CoreWindow(std::nullptr_t) noexcept {}
	using impl_ICoreWindow::PointerPosition;
	using impl_ICoreWindow2::PointerPosition;
	static Windows::UI::Core::CoreWindow GetForCurrentThread();
};

struct WindowActivatedEventArgs :
	Windows::UI::Core::IWindowActivatedEventArgs
{
	WindowActivatedEventArgs(std::nullptr_t) noexcept {}
};

struct AutomationProviderRequestedEventArgs :
	Windows::UI::Core::IAutomationProviderRequestedEventArgs
{
	AutomationProviderRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct CharacterReceivedEventArgs :
	Windows::UI::Core::ICharacterReceivedEventArgs
{
	CharacterReceivedEventArgs(std::nullptr_t) noexcept {}
};

struct CoreWindowEventArgs :
	Windows::UI::Core::ICoreWindowEventArgs
{
	CoreWindowEventArgs(std::nullptr_t) noexcept {}
};

struct InputEnabledEventArgs :
	Windows::UI::Core::IInputEnabledEventArgs
{
	InputEnabledEventArgs(std::nullptr_t) noexcept {}
};

struct TouchHitTestingEventArgs :
	Windows::UI::Core::ITouchHitTestingEventArgs
{
	TouchHitTestingEventArgs(std::nullptr_t) noexcept {}
};

struct WindowSizeChangedEventArgs :
	Windows::UI::Core::IWindowSizeChangedEventArgs
{
	WindowSizeChangedEventArgs(std::nullptr_t) noexcept {}
};

struct VisibilityChangedEventArgs :
	Windows::UI::Core::IVisibilityChangedEventArgs
{
	VisibilityChangedEventArgs(std::nullptr_t) noexcept {}
};

struct IdleDispatchedHandlerArgs :
	Windows::UI::Core::IIdleDispatchedHandlerArgs
{
	IdleDispatchedHandlerArgs(std::nullptr_t) noexcept {}
};

struct AcceleratorKeyEventArgs :
	Windows::UI::Core::IAcceleratorKeyEventArgs
{
	AcceleratorKeyEventArgs(std::nullptr_t) noexcept {}
};

struct CoreAcceleratorKeys :
	Windows::UI::Core::ICoreAcceleratorKeys
{
	CoreAcceleratorKeys(std::nullptr_t) noexcept {}
};

struct CoreWindowResizeManager :
	Windows::UI::Core::ICoreWindowResizeManager,
	requires<CoreWindowResizeManager, Windows::UI::Core::ICoreWindowResizeManagerLayoutCapability>
{
	CoreWindowResizeManager(std::nullptr_t) noexcept {}
	static Windows::UI::Core::CoreWindowResizeManager GetForCurrentView();
};

struct CoreIndependentInputSource :
	Windows::UI::Core::ICoreInputSourceBase,
	requires<CoreIndependentInputSource, Windows::UI::Core::ICorePointerInputSource>
{
	CoreIndependentInputSource(std::nullptr_t) noexcept {}
};

struct CoreComponentInputSource :
	Windows::UI::Core::ICoreInputSourceBase,
	requires<CoreComponentInputSource, Windows::UI::Core::ICorePointerInputSource, Windows::UI::Core::ICoreKeyboardInputSource, Windows::UI::Core::ICoreComponentFocusable, Windows::UI::Core::ICoreTouchHitTesting>
{
	CoreComponentInputSource(std::nullptr_t) noexcept {}
};

struct CoreWindowPopupShowingEventArgs :
	Windows::UI::Core::ICoreWindowPopupShowingEventArgs
{
	CoreWindowPopupShowingEventArgs(std::nullptr_t) noexcept {}
};

struct CoreWindowDialog :
	Windows::UI::Core::ICoreWindowDialog
{
	CoreWindowDialog(std::nullptr_t) noexcept {}
	CoreWindowDialog();
	CoreWindowDialog(hstring_ref title);
};

struct CoreWindowFlyout :
	Windows::UI::Core::ICoreWindowFlyout
{
	CoreWindowFlyout(std::nullptr_t) noexcept {}
	CoreWindowFlyout(Windows::Foundation::Point const & position);
	CoreWindowFlyout(Windows::Foundation::Point const & position, hstring_ref title);
};

struct BackRequestedEventArgs :
	Windows::UI::Core::IBackRequestedEventArgs
{
	BackRequestedEventArgs(std::nullptr_t) noexcept {}
};

struct SystemNavigationManager :
	Windows::UI::Core::ISystemNavigationManager,
	requires<SystemNavigationManager, Windows::UI::Core::ISystemNavigationManager2>
{
	SystemNavigationManager(std::nullptr_t) noexcept {}
	static Windows::UI::Core::SystemNavigationManager GetForCurrentView();
};

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input {

struct EdgeGestureEventArgs :
	Windows::UI::Input::IEdgeGestureEventArgs
{
	EdgeGestureEventArgs(std::nullptr_t) noexcept {}
};

struct EdgeGesture :
	Windows::UI::Input::IEdgeGesture
{
	EdgeGesture(std::nullptr_t) noexcept {}
	static Windows::UI::Input::EdgeGesture GetForCurrentView();
};

struct KeyboardDeliveryInterceptor :
	Windows::UI::Input::IKeyboardDeliveryInterceptor
{
	KeyboardDeliveryInterceptor(std::nullptr_t) noexcept {}
	static Windows::UI::Input::KeyboardDeliveryInterceptor GetForCurrentView();
};

struct MouseWheelParameters :
	Windows::UI::Input::IMouseWheelParameters
{
	MouseWheelParameters(std::nullptr_t) noexcept {}
};

struct GestureRecognizer :
	Windows::UI::Input::IGestureRecognizer
{
	GestureRecognizer(std::nullptr_t) noexcept {}
	GestureRecognizer();
};

struct TappedEventArgs :
	Windows::UI::Input::ITappedEventArgs
{
	TappedEventArgs(std::nullptr_t) noexcept {}
};

struct RightTappedEventArgs :
	Windows::UI::Input::IRightTappedEventArgs
{
	RightTappedEventArgs(std::nullptr_t) noexcept {}
};

struct HoldingEventArgs :
	Windows::UI::Input::IHoldingEventArgs
{
	HoldingEventArgs(std::nullptr_t) noexcept {}
};

struct DraggingEventArgs :
	Windows::UI::Input::IDraggingEventArgs
{
	DraggingEventArgs(std::nullptr_t) noexcept {}
};

struct ManipulationStartedEventArgs :
	Windows::UI::Input::IManipulationStartedEventArgs
{
	ManipulationStartedEventArgs(std::nullptr_t) noexcept {}
};

struct ManipulationUpdatedEventArgs :
	Windows::UI::Input::IManipulationUpdatedEventArgs
{
	ManipulationUpdatedEventArgs(std::nullptr_t) noexcept {}
};

struct ManipulationInertiaStartingEventArgs :
	Windows::UI::Input::IManipulationInertiaStartingEventArgs
{
	ManipulationInertiaStartingEventArgs(std::nullptr_t) noexcept {}
};

struct ManipulationCompletedEventArgs :
	Windows::UI::Input::IManipulationCompletedEventArgs
{
	ManipulationCompletedEventArgs(std::nullptr_t) noexcept {}
};

struct CrossSlidingEventArgs :
	Windows::UI::Input::ICrossSlidingEventArgs
{
	CrossSlidingEventArgs(std::nullptr_t) noexcept {}
};

struct PointerPoint :
	Windows::UI::Input::IPointerPoint
{
	PointerPoint(std::nullptr_t) noexcept {}
	static Windows::UI::Input::PointerPoint GetCurrentPoint(unsigned pointerId);
	static Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> GetIntermediatePoints(unsigned pointerId);
	static Windows::UI::Input::PointerPoint GetCurrentPoint(unsigned pointerId, Windows::UI::Input::IPointerPointTransform const & transform);
	static Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> GetIntermediatePoints(unsigned pointerId, Windows::UI::Input::IPointerPointTransform const & transform);
};

struct PointerPointProperties :
	Windows::UI::Input::IPointerPointProperties
{
	PointerPointProperties(std::nullptr_t) noexcept {}
};

struct PointerVisualizationSettings :
	Windows::UI::Input::IPointerVisualizationSettings
{
	PointerVisualizationSettings(std::nullptr_t) noexcept {}
	static Windows::UI::Input::PointerVisualizationSettings GetForCurrentView();
};

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Inking {

struct InkUnprocessedInput :
	Windows::UI::Input::Inking::IInkUnprocessedInput
{
	InkUnprocessedInput(std::nullptr_t) noexcept {}
};

struct InkStrokeInput :
	Windows::UI::Input::Inking::IInkStrokeInput
{
	InkStrokeInput(std::nullptr_t) noexcept {}
};

struct InkInputProcessingConfiguration :
	Windows::UI::Input::Inking::IInkInputProcessingConfiguration
{
	InkInputProcessingConfiguration(std::nullptr_t) noexcept {}
};

struct InkSynchronizer :
	Windows::UI::Input::Inking::IInkSynchronizer
{
	InkSynchronizer(std::nullptr_t) noexcept {}
};

struct InkPresenter :
	Windows::UI::Input::Inking::IInkPresenter
{
	InkPresenter(std::nullptr_t) noexcept {}
};

struct InkStrokesCollectedEventArgs :
	Windows::UI::Input::Inking::IInkStrokesCollectedEventArgs
{
	InkStrokesCollectedEventArgs(std::nullptr_t) noexcept {}
};

struct InkStrokesErasedEventArgs :
	Windows::UI::Input::Inking::IInkStrokesErasedEventArgs
{
	InkStrokesErasedEventArgs(std::nullptr_t) noexcept {}
};

struct InkPoint :
	Windows::UI::Input::Inking::IInkPoint
{
	InkPoint(std::nullptr_t) noexcept {}
	InkPoint(Windows::Foundation::Point const & position, float pressure);
};

struct InkDrawingAttributes :
	Windows::UI::Input::Inking::IInkDrawingAttributes,
	requires<InkDrawingAttributes, Windows::UI::Input::Inking::IInkDrawingAttributes2>
{
	InkDrawingAttributes(std::nullptr_t) noexcept {}
	InkDrawingAttributes();
};

struct InkStrokeRenderingSegment :
	Windows::UI::Input::Inking::IInkStrokeRenderingSegment
{
	InkStrokeRenderingSegment(std::nullptr_t) noexcept {}
};

struct InkStroke :
	Windows::UI::Input::Inking::IInkStroke,
	requires<InkStroke, Windows::UI::Input::Inking::IInkStroke2>
{
	InkStroke(std::nullptr_t) noexcept {}
};

struct InkStrokeBuilder :
	Windows::UI::Input::Inking::IInkStrokeBuilder,
	requires<InkStrokeBuilder, Windows::UI::Input::Inking::IInkStrokeBuilder2>
{
	InkStrokeBuilder(std::nullptr_t) noexcept {}
	InkStrokeBuilder();
};

struct InkRecognitionResult :
	Windows::UI::Input::Inking::IInkRecognitionResult
{
	InkRecognitionResult(std::nullptr_t) noexcept {}
};

struct InkStrokeContainer :
	Windows::UI::Input::Inking::IInkStrokeContainer,
	requires<InkStrokeContainer, Windows::UI::Input::Inking::IInkStrokeContainer2>
{
	InkStrokeContainer(std::nullptr_t) noexcept {}
	InkStrokeContainer();
};

struct InkRecognizer :
	Windows::UI::Input::Inking::IInkRecognizer
{
	InkRecognizer(std::nullptr_t) noexcept {}
};

struct InkRecognizerContainer :
	Windows::UI::Input::Inking::IInkRecognizerContainer
{
	InkRecognizerContainer(std::nullptr_t) noexcept {}
	InkRecognizerContainer();
};

struct InkManager :
	Windows::UI::Input::Inking::IInkManager
{
	InkManager(std::nullptr_t) noexcept {}
	InkManager();
	using impl_IInkRecognizerContainer::RecognizeAsync;
	using impl_IInkManager::RecognizeAsync;
};

}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Inking { namespace Core {

struct CoreInkIndependentInputSource :
	Windows::UI::Input::Inking::Core::ICoreInkIndependentInputSource
{
	CoreInkIndependentInputSource(std::nullptr_t) noexcept {}
	static Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource Create(Windows::UI::Input::Inking::InkPresenter const & inkPresenter);
};

}}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Popups {

struct MessageDialog :
	Windows::UI::Popups::IMessageDialog
{
	MessageDialog(std::nullptr_t) noexcept {}
	MessageDialog(hstring_ref content);
	MessageDialog(hstring_ref content, hstring_ref title);
};

struct UICommand :
	Windows::UI::Popups::IUICommand
{
	UICommand(std::nullptr_t) noexcept {}
	UICommand();
	UICommand(hstring_ref label);
	UICommand(hstring_ref label, Windows::UI::Popups::IUICommandInvokedHandler const & action);
	template <typename F> UICommand(hstring_ref label, F action);
	UICommand(hstring_ref label, Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId);
	template <typename F> UICommand(hstring_ref label, F action, IInspectable const & commandId);
};

struct UICommandSeparator :
	Windows::UI::Popups::IUICommand
{
	UICommandSeparator(std::nullptr_t) noexcept {}
	UICommandSeparator();
};

struct PopupMenu :
	Windows::UI::Popups::IPopupMenu
{
	PopupMenu(std::nullptr_t) noexcept {}
	PopupMenu();
};

}}}}

namespace winrt { namespace Windows { namespace UI { namespace ViewManagement {

struct ApplicationView :
	Windows::UI::ViewManagement::IApplicationView,
	requires<ApplicationView, Windows::UI::ViewManagement::IApplicationView2, Windows::UI::ViewManagement::IApplicationView3>
{
	ApplicationView(std::nullptr_t) noexcept {}
	static int GetApplicationViewIdForWindow(Windows::UI::Core::ICoreWindow const & window);
	static Windows::UI::ViewManagement::ApplicationView GetForCurrentView();
	static bool TerminateAppOnFinalViewClose();
	static void TerminateAppOnFinalViewClose(bool value);
	static bool TryUnsnapToFullscreen();
	static Windows::UI::ViewManagement::ApplicationViewWindowingMode PreferredLaunchWindowingMode();
	static void PreferredLaunchWindowingMode(Windows::UI::ViewManagement::ApplicationViewWindowingMode value);
	static Windows::Foundation::Size PreferredLaunchViewSize();
	static void PreferredLaunchViewSize(Windows::Foundation::Size const & value);
	static Windows::UI::ViewManagement::ApplicationViewState Value();
	static bool TryUnsnap();
};

struct ApplicationViewConsolidatedEventArgs :
	Windows::UI::ViewManagement::IApplicationViewConsolidatedEventArgs
{
	ApplicationViewConsolidatedEventArgs(std::nullptr_t) noexcept {}
};

struct ApplicationViewTitleBar :
	Windows::UI::ViewManagement::IApplicationViewTitleBar
{
	ApplicationViewTitleBar(std::nullptr_t) noexcept {}
};

struct ApplicationViewSwitcher
{
	ApplicationViewSwitcher() = delete;
	static void DisableSystemViewActivationPolicy();
	static void DisableShowingMainViewOnActivation();
	static Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId);
	static Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId, Windows::UI::ViewManagement::ViewSizePreference sizePreference);
	static Windows::Foundation::IAsyncOperation<bool> TryShowAsStandaloneAsync(int viewId, Windows::UI::ViewManagement::ViewSizePreference sizePreference, int anchorViewId, Windows::UI::ViewManagement::ViewSizePreference anchorSizePreference);
	static Windows::Foundation::IAsyncAction SwitchAsync(int viewId);
	static Windows::Foundation::IAsyncAction SwitchAsync(int toViewId, int fromViewId);
	static Windows::Foundation::IAsyncAction SwitchAsync(int toViewId, int fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions options);
	static Windows::Foundation::IAsyncOperation<bool> PrepareForCustomAnimatedSwitchAsync(int toViewId, int fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions options);
};

struct ActivationViewSwitcher :
	Windows::UI::ViewManagement::IActivationViewSwitcher
{
	ActivationViewSwitcher(std::nullptr_t) noexcept {}
};

struct ApplicationViewTransferContext :
	Windows::UI::ViewManagement::IApplicationViewTransferContext
{
	ApplicationViewTransferContext(std::nullptr_t) noexcept {}
	ApplicationViewTransferContext();
	static hstring DataPackageFormatId();
};

struct InputPaneVisibilityEventArgs :
	Windows::UI::ViewManagement::IInputPaneVisibilityEventArgs
{
	InputPaneVisibilityEventArgs(std::nullptr_t) noexcept {}
};

struct InputPane :
	Windows::UI::ViewManagement::IInputPane,
	requires<InputPane, Windows::UI::ViewManagement::IInputPane2, Windows::UI::ViewManagement::IInputPaneControl>
{
	InputPane(std::nullptr_t) noexcept {}
	static Windows::UI::ViewManagement::InputPane GetForCurrentView();
};

struct ProjectionManager
{
	ProjectionManager() = delete;
	static Windows::Foundation::IAsyncAction StartProjectingAsync(int projectionViewId, int anchorViewId, Windows::Devices::Enumeration::DeviceInformation const & displayDeviceInfo);
	static Windows::Foundation::IAsyncOperation<bool> RequestStartProjectingAsync(int projectionViewId, int anchorViewId, Windows::Foundation::Rect const & selection);
	static Windows::Foundation::IAsyncOperation<bool> RequestStartProjectingAsync(int projectionViewId, int anchorViewId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement prefferedPlacement);
	static hstring GetDeviceSelector();
	static Windows::Foundation::IAsyncAction StartProjectingAsync(int projectionViewId, int anchorViewId);
	static Windows::Foundation::IAsyncAction SwapDisplaysForViewsAsync(int projectionViewId, int anchorViewId);
	static Windows::Foundation::IAsyncAction StopProjectingAsync(int projectionViewId, int anchorViewId);
	static bool ProjectionDisplayAvailable();
	static long long ProjectionDisplayAvailableChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler);
	template <typename F> static long long ProjectionDisplayAvailableChanged(F handler);
	static void ProjectionDisplayAvailableChanged(long long token);
};

struct UIViewSettings :
	Windows::UI::ViewManagement::IUIViewSettings
{
	UIViewSettings(std::nullptr_t) noexcept {}
	static Windows::UI::ViewManagement::UIViewSettings GetForCurrentView();
};

struct AccessibilitySettings :
	Windows::UI::ViewManagement::IAccessibilitySettings
{
	AccessibilitySettings(std::nullptr_t) noexcept {}
	AccessibilitySettings();
};

struct UISettings :
	Windows::UI::ViewManagement::IUISettings,
	requires<UISettings, Windows::UI::ViewManagement::IUISettings2, Windows::UI::ViewManagement::IUISettings3>
{
	UISettings(std::nullptr_t) noexcept {}
	UISettings();
};

struct ApplicationViewScaling :
	Windows::UI::ViewManagement::IApplicationViewScaling
{
	ApplicationViewScaling(std::nullptr_t) noexcept {}
	static bool DisableLayoutScaling();
	static bool TrySetDisableLayoutScaling(bool disableLayoutScaling);
};

}}}}

namespace winrt { namespace Windows { namespace Web {

struct WebError
{
	WebError() = delete;
	static Windows::Web::WebErrorStatus GetStatus(int hresult);
};

}}}

namespace winrt { namespace Windows { namespace Web { namespace Http {

struct HttpCookieManager :
	Windows::Web::Http::IHttpCookieManager
{
	HttpCookieManager(std::nullptr_t) noexcept {}
};

struct HttpRequestMessage :
	Windows::Web::Http::IHttpRequestMessage,
	requires<HttpRequestMessage, Windows::Foundation::IStringable>
{
	HttpRequestMessage(std::nullptr_t) noexcept {}
	HttpRequestMessage();
	HttpRequestMessage(Windows::Web::Http::HttpMethod const & method, Windows::Foundation::Uri const & uri);
};

struct HttpResponseMessage :
	Windows::Web::Http::IHttpResponseMessage,
	requires<HttpResponseMessage, Windows::Foundation::IStringable>
{
	HttpResponseMessage(std::nullptr_t) noexcept {}
	HttpResponseMessage();
	HttpResponseMessage(Windows::Web::Http::HttpStatusCode statusCode);
};

struct HttpMethod :
	Windows::Web::Http::IHttpMethod,
	requires<HttpMethod, Windows::Foundation::IStringable>
{
	HttpMethod(std::nullptr_t) noexcept {}
	HttpMethod(hstring_ref method);
	static Windows::Web::Http::HttpMethod Delete();
	static Windows::Web::Http::HttpMethod Get();
	static Windows::Web::Http::HttpMethod Head();
	static Windows::Web::Http::HttpMethod Options();
	static Windows::Web::Http::HttpMethod Patch();
	static Windows::Web::Http::HttpMethod Post();
	static Windows::Web::Http::HttpMethod Put();
};

struct HttpClient :
	Windows::Web::Http::IHttpClient,
	requires<HttpClient, Windows::Foundation::IStringable>
{
	HttpClient(std::nullptr_t) noexcept {}
	HttpClient();
	HttpClient(Windows::Web::Http::Filters::IHttpFilter const & filter);
};

struct HttpCookie :
	Windows::Web::Http::IHttpCookie,
	requires<HttpCookie, Windows::Foundation::IStringable>
{
	HttpCookie(std::nullptr_t) noexcept {}
	HttpCookie(hstring_ref name, hstring_ref domain, hstring_ref path);
};

struct HttpCookieCollection :
	Windows::Foundation::Collections::IVectorView<Windows::Web::Http::HttpCookie>
{
	HttpCookieCollection(std::nullptr_t) noexcept {}
};

struct HttpTransportInformation :
	Windows::Web::Http::IHttpTransportInformation,
	requires<HttpTransportInformation, Windows::Foundation::IStringable>
{
	HttpTransportInformation(std::nullptr_t) noexcept {}
};

struct HttpStringContent :
	Windows::Web::Http::IHttpContent,
	requires<HttpStringContent, Windows::Foundation::IStringable>
{
	HttpStringContent(std::nullptr_t) noexcept {}
	HttpStringContent(hstring_ref content);
	HttpStringContent(hstring_ref content, Windows::Storage::Streams::UnicodeEncoding encoding);
	HttpStringContent(hstring_ref content, Windows::Storage::Streams::UnicodeEncoding encoding, hstring_ref mediaType);
};

struct HttpBufferContent :
	Windows::Web::Http::IHttpContent,
	requires<HttpBufferContent, Windows::Foundation::IStringable>
{
	HttpBufferContent(std::nullptr_t) noexcept {}
	HttpBufferContent(Windows::Storage::Streams::IBuffer const & content);
	HttpBufferContent(Windows::Storage::Streams::IBuffer const & content, unsigned offset, unsigned count);
};

struct HttpStreamContent :
	Windows::Web::Http::IHttpContent,
	requires<HttpStreamContent, Windows::Foundation::IStringable>
{
	HttpStreamContent(std::nullptr_t) noexcept {}
	HttpStreamContent(Windows::Storage::Streams::IInputStream const & content);
};

struct HttpFormUrlEncodedContent :
	Windows::Web::Http::IHttpContent,
	requires<HttpFormUrlEncodedContent, Windows::Foundation::IStringable>
{
	HttpFormUrlEncodedContent(std::nullptr_t) noexcept {}
	HttpFormUrlEncodedContent(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<hstring, hstring>> const & content);
};

struct HttpMultipartContent :
	Windows::Web::Http::IHttpContent,
	requires<HttpMultipartContent, Windows::Web::Http::IHttpMultipartContent, Windows::Foundation::IStringable, Windows::Foundation::Collections::IIterable<Windows::Web::Http::IHttpContent>>
{
	HttpMultipartContent(std::nullptr_t) noexcept {}
	HttpMultipartContent();
	HttpMultipartContent(hstring_ref subtype);
	HttpMultipartContent(hstring_ref subtype, hstring_ref boundary);
};

struct HttpMultipartFormDataContent :
	Windows::Web::Http::IHttpContent,
	requires<HttpMultipartFormDataContent, Windows::Web::Http::IHttpMultipartFormDataContent, Windows::Foundation::IStringable, Windows::Foundation::Collections::IIterable<Windows::Web::Http::IHttpContent>>
{
	HttpMultipartFormDataContent(std::nullptr_t) noexcept {}
	HttpMultipartFormDataContent();
	HttpMultipartFormDataContent(hstring_ref boundary);
};

}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http { namespace Filters {

struct HttpCacheControl :
	Windows::Web::Http::Filters::IHttpCacheControl
{
	HttpCacheControl(std::nullptr_t) noexcept {}
};

struct HttpBaseProtocolFilter :
	Windows::Web::Http::Filters::IHttpBaseProtocolFilter,
	requires<HttpBaseProtocolFilter, Windows::Web::Http::Filters::IHttpBaseProtocolFilter2, Windows::Web::Http::Filters::IHttpBaseProtocolFilter3>
{
	HttpBaseProtocolFilter(std::nullptr_t) noexcept {}
	HttpBaseProtocolFilter();
};

}}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http { namespace Headers {

struct HttpContentHeaderCollection :
	Windows::Web::Http::Headers::IHttpContentHeaderCollection,
	requires<HttpContentHeaderCollection, Windows::Foundation::IStringable>
{
	HttpContentHeaderCollection(std::nullptr_t) noexcept {}
	HttpContentHeaderCollection();
};

struct HttpRequestHeaderCollection :
	Windows::Web::Http::Headers::IHttpRequestHeaderCollection,
	requires<HttpRequestHeaderCollection, Windows::Foundation::IStringable>
{
	HttpRequestHeaderCollection(std::nullptr_t) noexcept {}
};

struct HttpResponseHeaderCollection :
	Windows::Web::Http::Headers::IHttpResponseHeaderCollection,
	requires<HttpResponseHeaderCollection, Windows::Foundation::IStringable>
{
	HttpResponseHeaderCollection(std::nullptr_t) noexcept {}
};

struct HttpContentDispositionHeaderValue :
	Windows::Web::Http::Headers::IHttpContentDispositionHeaderValue,
	requires<HttpContentDispositionHeaderValue, Windows::Foundation::IStringable>
{
	HttpContentDispositionHeaderValue(std::nullptr_t) noexcept {}
	HttpContentDispositionHeaderValue(hstring_ref dispositionType);
	static Windows::Web::Http::Headers::HttpContentDispositionHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue);
};

struct HttpContentCodingHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpContentCodingHeaderValueCollection,
	requires<HttpContentCodingHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpContentCodingHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpLanguageHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpLanguageHeaderValueCollection,
	requires<HttpLanguageHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpLanguageHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpContentRangeHeaderValue :
	Windows::Web::Http::Headers::IHttpContentRangeHeaderValue,
	requires<HttpContentRangeHeaderValue, Windows::Foundation::IStringable>
{
	HttpContentRangeHeaderValue(std::nullptr_t) noexcept {}
	HttpContentRangeHeaderValue(unsigned long long length);
	HttpContentRangeHeaderValue(unsigned long long from, unsigned long long to);
	HttpContentRangeHeaderValue(unsigned long long from, unsigned long long to, unsigned long long length);
	static Windows::Web::Http::Headers::HttpContentRangeHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue);
};

struct HttpMediaTypeHeaderValue :
	Windows::Web::Http::Headers::IHttpMediaTypeHeaderValue,
	requires<HttpMediaTypeHeaderValue, Windows::Foundation::IStringable>
{
	HttpMediaTypeHeaderValue(std::nullptr_t) noexcept {}
	HttpMediaTypeHeaderValue(hstring_ref mediaType);
	static Windows::Web::Http::Headers::HttpMediaTypeHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue);
};

struct HttpMediaTypeWithQualityHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValueCollection,
	requires<HttpMediaTypeWithQualityHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpMediaTypeWithQualityHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpContentCodingWithQualityHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValueCollection,
	requires<HttpContentCodingWithQualityHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpContentCodingWithQualityHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpLanguageRangeWithQualityHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValueCollection,
	requires<HttpLanguageRangeWithQualityHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpLanguageRangeWithQualityHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpCredentialsHeaderValue :
	Windows::Web::Http::Headers::IHttpCredentialsHeaderValue,
	requires<HttpCredentialsHeaderValue, Windows::Foundation::IStringable>
{
	HttpCredentialsHeaderValue(std::nullptr_t) noexcept {}
	HttpCredentialsHeaderValue(hstring_ref scheme);
	HttpCredentialsHeaderValue(hstring_ref scheme, hstring_ref token);
	static Windows::Web::Http::Headers::HttpCredentialsHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue);
};

struct HttpCacheDirectiveHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpCacheDirectiveHeaderValueCollection,
	requires<HttpCacheDirectiveHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpCacheDirectiveHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpConnectionOptionHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValueCollection,
	requires<HttpConnectionOptionHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpConnectionOptionHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpCookiePairHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpCookiePairHeaderValueCollection,
	requires<HttpCookiePairHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpCookiePairHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpExpectationHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpExpectationHeaderValueCollection,
	requires<HttpExpectationHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpExpectationHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpTransferCodingHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpTransferCodingHeaderValueCollection,
	requires<HttpTransferCodingHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpTransferCodingHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpProductInfoHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpProductInfoHeaderValueCollection,
	requires<HttpProductInfoHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpProductInfoHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpMethodHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpMethodHeaderValueCollection,
	requires<HttpMethodHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpMethodHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpChallengeHeaderValueCollection :
	Windows::Web::Http::Headers::IHttpChallengeHeaderValueCollection,
	requires<HttpChallengeHeaderValueCollection, Windows::Foundation::IStringable>
{
	HttpChallengeHeaderValueCollection(std::nullptr_t) noexcept {}
};

struct HttpDateOrDeltaHeaderValue :
	Windows::Web::Http::Headers::IHttpDateOrDeltaHeaderValue,
	requires<HttpDateOrDeltaHeaderValue, Windows::Foundation::IStringable>
{
	HttpDateOrDeltaHeaderValue(std::nullptr_t) noexcept {}
	static Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue);
};

struct HttpNameValueHeaderValue :
	Windows::Web::Http::Headers::IHttpNameValueHeaderValue,
	requires<HttpNameValueHeaderValue, Windows::Foundation::IStringable>
{
	HttpNameValueHeaderValue(std::nullptr_t) noexcept {}
	HttpNameValueHeaderValue(hstring_ref name);
	HttpNameValueHeaderValue(hstring_ref name, hstring_ref value);
	static Windows::Web::Http::Headers::HttpNameValueHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue);
};

struct HttpChallengeHeaderValue :
	Windows::Web::Http::Headers::IHttpChallengeHeaderValue,
	requires<HttpChallengeHeaderValue, Windows::Foundation::IStringable>
{
	HttpChallengeHeaderValue(std::nullptr_t) noexcept {}
	HttpChallengeHeaderValue(hstring_ref scheme);
	HttpChallengeHeaderValue(hstring_ref scheme, hstring_ref token);
	static Windows::Web::Http::Headers::HttpChallengeHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue);
};

struct HttpConnectionOptionHeaderValue :
	Windows::Web::Http::Headers::IHttpConnectionOptionHeaderValue,
	requires<HttpConnectionOptionHeaderValue, Windows::Foundation::IStringable>
{
	HttpConnectionOptionHeaderValue(std::nullptr_t) noexcept {}
	HttpConnectionOptionHeaderValue(hstring_ref token);
	static Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue);
};

struct HttpContentCodingHeaderValue :
	Windows::Web::Http::Headers::IHttpContentCodingHeaderValue,
	requires<HttpContentCodingHeaderValue, Windows::Foundation::IStringable>
{
	HttpContentCodingHeaderValue(std::nullptr_t) noexcept {}
	HttpContentCodingHeaderValue(hstring_ref contentCoding);
	static Windows::Web::Http::Headers::HttpContentCodingHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue);
};

struct HttpCookiePairHeaderValue :
	Windows::Web::Http::Headers::IHttpCookiePairHeaderValue,
	requires<HttpCookiePairHeaderValue, Windows::Foundation::IStringable>
{
	HttpCookiePairHeaderValue(std::nullptr_t) noexcept {}
	HttpCookiePairHeaderValue(hstring_ref name);
	HttpCookiePairHeaderValue(hstring_ref name, hstring_ref value);
	static Windows::Web::Http::Headers::HttpCookiePairHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue);
};

struct HttpExpectationHeaderValue :
	Windows::Web::Http::Headers::IHttpExpectationHeaderValue,
	requires<HttpExpectationHeaderValue, Windows::Foundation::IStringable>
{
	HttpExpectationHeaderValue(std::nullptr_t) noexcept {}
	HttpExpectationHeaderValue(hstring_ref name);
	HttpExpectationHeaderValue(hstring_ref name, hstring_ref value);
	static Windows::Web::Http::Headers::HttpExpectationHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue);
};

struct HttpLanguageRangeWithQualityHeaderValue :
	Windows::Web::Http::Headers::IHttpLanguageRangeWithQualityHeaderValue,
	requires<HttpLanguageRangeWithQualityHeaderValue, Windows::Foundation::IStringable>
{
	HttpLanguageRangeWithQualityHeaderValue(std::nullptr_t) noexcept {}
	HttpLanguageRangeWithQualityHeaderValue(hstring_ref languageRange);
	HttpLanguageRangeWithQualityHeaderValue(hstring_ref languageRange, double quality);
	static Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue);
};

struct HttpMediaTypeWithQualityHeaderValue :
	Windows::Web::Http::Headers::IHttpMediaTypeWithQualityHeaderValue,
	requires<HttpMediaTypeWithQualityHeaderValue, Windows::Foundation::IStringable>
{
	HttpMediaTypeWithQualityHeaderValue(std::nullptr_t) noexcept {}
	HttpMediaTypeWithQualityHeaderValue(hstring_ref mediaType);
	HttpMediaTypeWithQualityHeaderValue(hstring_ref mediaType, double quality);
	static Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue);
};

struct HttpProductHeaderValue :
	Windows::Web::Http::Headers::IHttpProductHeaderValue,
	requires<HttpProductHeaderValue, Windows::Foundation::IStringable>
{
	HttpProductHeaderValue(std::nullptr_t) noexcept {}
	HttpProductHeaderValue(hstring_ref productName);
	HttpProductHeaderValue(hstring_ref productName, hstring_ref productVersion);
	static Windows::Web::Http::Headers::HttpProductHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue);
};

struct HttpProductInfoHeaderValue :
	Windows::Web::Http::Headers::IHttpProductInfoHeaderValue,
	requires<HttpProductInfoHeaderValue, Windows::Foundation::IStringable>
{
	HttpProductInfoHeaderValue(std::nullptr_t) noexcept {}
	HttpProductInfoHeaderValue(hstring_ref productComment);
	HttpProductInfoHeaderValue(hstring_ref productName, hstring_ref productVersion);
	static Windows::Web::Http::Headers::HttpProductInfoHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue);
};

struct HttpContentCodingWithQualityHeaderValue :
	Windows::Web::Http::Headers::IHttpContentCodingWithQualityHeaderValue,
	requires<HttpContentCodingWithQualityHeaderValue, Windows::Foundation::IStringable>
{
	HttpContentCodingWithQualityHeaderValue(std::nullptr_t) noexcept {}
	HttpContentCodingWithQualityHeaderValue(hstring_ref contentCoding);
	HttpContentCodingWithQualityHeaderValue(hstring_ref contentCoding, double quality);
	static Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue);
};

struct HttpTransferCodingHeaderValue :
	Windows::Web::Http::Headers::IHttpTransferCodingHeaderValue,
	requires<HttpTransferCodingHeaderValue, Windows::Foundation::IStringable>
{
	HttpTransferCodingHeaderValue(std::nullptr_t) noexcept {}
	HttpTransferCodingHeaderValue(hstring_ref input);
	static Windows::Web::Http::Headers::HttpTransferCodingHeaderValue Parse(hstring_ref input);
	static bool TryParse(hstring_ref input, Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue);
};

}}}}}
