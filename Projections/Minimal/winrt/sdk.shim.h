// C++ for the Windows Runtime v1.29 - http://moderncpp.com
// Copyright (c) 2016 Microsoft Corporation

#pragma once

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Background {

template <typename T> struct impl_BackgroundTaskCanceledEventHandler : impl::implements<IBackgroundTaskCanceledEventHandler>, T
{
	impl_BackgroundTaskCanceledEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::ApplicationModel::Background::IBackgroundTaskInstance> sender, Windows::ApplicationModel::Background::BackgroundTaskCancellationReason reason) noexcept override
	{
		try { (*this)(impl::forward<Windows::ApplicationModel::Background::IBackgroundTaskInstance>(sender), reason); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> IBackgroundTaskCanceledEventHandler BackgroundTaskCanceledEventHandler(T handler)
{
	return make<impl_BackgroundTaskCanceledEventHandler<T>>(handler);
}

template <typename T> struct impl_BackgroundTaskProgressEventHandler : impl::implements<IBackgroundTaskProgressEventHandler>, T
{
	impl_BackgroundTaskProgressEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::ApplicationModel::Background::IBackgroundTaskRegistration> sender, abi_arg_in<Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs> args) noexcept override
	{
		try { (*this)(impl::forward<Windows::ApplicationModel::Background::BackgroundTaskRegistration>(sender), impl::forward<Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs>(args)); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> IBackgroundTaskProgressEventHandler BackgroundTaskProgressEventHandler(T handler)
{
	return make<impl_BackgroundTaskProgressEventHandler<T>>(handler);
}

template <typename T> struct impl_BackgroundTaskCompletedEventHandler : impl::implements<IBackgroundTaskCompletedEventHandler>, T
{
	impl_BackgroundTaskCompletedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::ApplicationModel::Background::IBackgroundTaskRegistration> sender, abi_arg_in<Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs> args) noexcept override
	{
		try { (*this)(impl::forward<Windows::ApplicationModel::Background::BackgroundTaskRegistration>(sender), impl::forward<Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs>(args)); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> IBackgroundTaskCompletedEventHandler BackgroundTaskCompletedEventHandler(T handler)
{
	return make<impl_BackgroundTaskCompletedEventHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

template <typename T> struct impl_DataProviderHandler : impl::implements<IDataProviderHandler>, T
{
	impl_DataProviderHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::ApplicationModel::DataTransfer::IDataProviderRequest> request) noexcept override
	{
		try { (*this)(impl::forward<Windows::ApplicationModel::DataTransfer::DataProviderRequest>(request)); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> IDataProviderHandler DataProviderHandler(T handler)
{
	return make<impl_DataProviderHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Data { namespace Text {

template <typename T> struct impl_WordSegmentsTokenizingHandler : impl::implements<IWordSegmentsTokenizingHandler>, T
{
	impl_WordSegmentsTokenizingHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment>> precedingWords, abi_arg_in<Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment>> words) noexcept override
	{
		try { (*this)(impl::forward<Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment>>(precedingWords), impl::forward<Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment>>(words)); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> IWordSegmentsTokenizingHandler WordSegmentsTokenizingHandler(T handler)
{
	return make<impl_WordSegmentsTokenizingHandler<T>>(handler);
}

template <typename T> struct impl_SelectableWordSegmentsTokenizingHandler : impl::implements<ISelectableWordSegmentsTokenizingHandler>, T
{
	impl_SelectableWordSegmentsTokenizingHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment>> precedingWords, abi_arg_in<Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment>> words) noexcept override
	{
		try { (*this)(impl::forward<Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment>>(precedingWords), impl::forward<Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment>>(words)); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> ISelectableWordSegmentsTokenizingHandler SelectableWordSegmentsTokenizingHandler(T handler)
{
	return make<impl_SelectableWordSegmentsTokenizingHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sms {

template <typename T> struct impl_SmsMessageReceivedEventHandler : impl::implements<ISmsMessageReceivedEventHandler>, T
{
	impl_SmsMessageReceivedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Devices::Sms::ISmsDevice> sender, abi_arg_in<Windows::Devices::Sms::ISmsMessageReceivedEventArgs> e) noexcept override
	{
		try { (*this)(impl::forward<Windows::Devices::Sms::SmsDevice>(sender), impl::forward<Windows::Devices::Sms::SmsMessageReceivedEventArgs>(e)); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> ISmsMessageReceivedEventHandler SmsMessageReceivedEventHandler(T handler)
{
	return make<impl_SmsMessageReceivedEventHandler<T>>(handler);
}

template <typename T> struct impl_SmsDeviceStatusChangedEventHandler : impl::implements<ISmsDeviceStatusChangedEventHandler>, T
{
	impl_SmsDeviceStatusChangedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Devices::Sms::ISmsDevice> sender) noexcept override
	{
		try { (*this)(impl::forward<Windows::Devices::Sms::SmsDevice>(sender)); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> ISmsDeviceStatusChangedEventHandler SmsDeviceStatusChangedEventHandler(T handler)
{
	return make<impl_SmsDeviceStatusChangedEventHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Foundation {

template <typename T> struct impl_AsyncActionCompletedHandler : impl::implements<IAsyncActionCompletedHandler>, T
{
	impl_AsyncActionCompletedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Foundation::IAsyncAction> asyncInfo, AsyncStatus asyncStatus) noexcept override
	{
		try { (*this)(impl::forward<Windows::Foundation::IAsyncAction>(asyncInfo), asyncStatus); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> IAsyncActionCompletedHandler AsyncActionCompletedHandler(T handler)
{
	return make<impl_AsyncActionCompletedHandler<T>>(handler);
}

template <typename T> struct impl_DeferralCompletedHandler : impl::implements<IDeferralCompletedHandler>, T
{
	impl_DeferralCompletedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke() noexcept override
	{
		try { (*this)(); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> IDeferralCompletedHandler DeferralCompletedHandler(T handler)
{
	return make<impl_DeferralCompletedHandler<T>>(handler);
}

}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Display {

template <typename T> struct impl_DisplayPropertiesEventHandler : impl::implements<IDisplayPropertiesEventHandler>, T
{
	impl_DisplayPropertiesEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<IInspectable> sender) noexcept override
	{
		try { (*this)(impl::forward<IInspectable>(sender)); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> IDisplayPropertiesEventHandler DisplayPropertiesEventHandler(T handler)
{
	return make<impl_DisplayPropertiesEventHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Connectivity {

template <typename T> struct impl_NetworkStatusChangedEventHandler : impl::implements<INetworkStatusChangedEventHandler>, T
{
	impl_NetworkStatusChangedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<IInspectable> sender) noexcept override
	{
		try { (*this)(impl::forward<IInspectable>(sender)); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> INetworkStatusChangedEventHandler NetworkStatusChangedEventHandler(T handler)
{
	return make<impl_NetworkStatusChangedEventHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Storage {

template <typename T> struct impl_StreamedFileDataRequestedHandler : impl::implements<IStreamedFileDataRequestedHandler>, T
{
	impl_StreamedFileDataRequestedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Storage::Streams::IOutputStream> stream) noexcept override
	{
		try { (*this)(impl::forward<Windows::Storage::StreamedFileDataRequest>(stream)); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> IStreamedFileDataRequestedHandler StreamedFileDataRequestedHandler(T handler)
{
	return make<impl_StreamedFileDataRequestedHandler<T>>(handler);
}

template <typename T> struct impl_ApplicationDataSetVersionHandler : impl::implements<IApplicationDataSetVersionHandler>, T
{
	impl_ApplicationDataSetVersionHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Storage::ISetVersionRequest> setVersionRequest) noexcept override
	{
		try { (*this)(impl::forward<Windows::Storage::SetVersionRequest>(setVersionRequest)); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> IApplicationDataSetVersionHandler ApplicationDataSetVersionHandler(T handler)
{
	return make<impl_ApplicationDataSetVersionHandler<T>>(handler);
}

}}}

namespace winrt { namespace Windows { namespace UI { namespace Core {

template <typename T> struct impl_DispatchedHandler : impl::implements<IDispatchedHandler>, T
{
	impl_DispatchedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke() noexcept override
	{
		try { (*this)(); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> IDispatchedHandler DispatchedHandler(T handler)
{
	return make<impl_DispatchedHandler<T>>(handler);
}

template <typename T> struct impl_IdleDispatchedHandler : impl::implements<IIdleDispatchedHandler>, T
{
	impl_IdleDispatchedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::UI::Core::IIdleDispatchedHandlerArgs> e) noexcept override
	{
		try { (*this)(impl::forward<Windows::UI::Core::IdleDispatchedHandlerArgs>(e)); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> IIdleDispatchedHandler IdleDispatchedHandler(T handler)
{
	return make<impl_IdleDispatchedHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Popups {

template <typename T> struct impl_UICommandInvokedHandler : impl::implements<IUICommandInvokedHandler>, T
{
	impl_UICommandInvokedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::UI::Popups::IUICommand> command) noexcept override
	{
		try { (*this)(impl::forward<Windows::UI::Popups::IUICommand>(command)); return S_OK; }
		catch (...) { return impl::to_hresult(); }
	}
};

template <typename T> IUICommandInvokedHandler UICommandInvokedHandler(T handler)
{
	return make<impl_UICommandInvokedHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel {

template <typename T> String impl_IAppDisplayInfo<T>::DisplayName() const
{
	String value;
	check_hresult(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IAppDisplayInfo<T>::Description() const
{
	String value;
	check_hresult(shim()->get_Description(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IAppDisplayInfo<T>::GetLogo(Windows::Foundation::Size const & size) const
{
	Windows::Storage::Streams::RandomAccessStreamReference value = nullptr;
	check_hresult(shim()->abi_GetLogo(size, put(value)));
	return value;
}

template <typename T> String impl_IAppInfo<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IAppInfo<T>::AppUserModelId() const
{
	String value;
	check_hresult(shim()->get_AppUserModelId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::AppDisplayInfo impl_IAppInfo<T>::DisplayInfo() const
{
	Windows::ApplicationModel::AppDisplayInfo value = nullptr;
	check_hresult(shim()->get_DisplayInfo(put(value)));
	return value;
}

template <typename T> String impl_IAppInfo<T>::PackageFamilyName() const
{
	String value;
	check_hresult(shim()->get_PackageFamilyName(put(value)));
	return value;
}

template <typename T> void impl_ISuspendingDeferral<T>::Complete() const
{
	check_hresult(shim()->abi_Complete());
}

template <typename T> Windows::ApplicationModel::SuspendingDeferral impl_ISuspendingOperation<T>::GetDeferral() const
{
	Windows::ApplicationModel::SuspendingDeferral deferral = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> Windows::Foundation::DateTime impl_ISuspendingOperation<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Deadline(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::SuspendingOperation impl_ISuspendingEventArgs<T>::SuspendingOperation() const
{
	Windows::ApplicationModel::SuspendingOperation value = nullptr;
	check_hresult(shim()->get_SuspendingOperation(put(value)));
	return value;
}

template <typename T> String impl_IPackageIdWithMetadata<T>::ProductId() const
{
	String value;
	check_hresult(shim()->get_ProductId(put(value)));
	return value;
}

template <typename T> String impl_IPackageIdWithMetadata<T>::Author() const
{
	String value;
	check_hresult(shim()->get_Author(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPackageWithMetadata<T>::InstallDate() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_InstallDate(&value));
	return value;
}

template <typename T> String impl_IPackageWithMetadata<T>::GetThumbnailToken() const
{
	String value;
	check_hresult(shim()->abi_GetThumbnailToken(put(value)));
	return value;
}

template <typename T> void impl_IPackageWithMetadata<T>::Launch(StringReference const & parameters) const
{
	check_hresult(shim()->abi_Launch(get(parameters)));
}

template <typename T> bool impl_IPackageStatus<T>::VerifyIsOK() const
{
	bool value = {};
	check_hresult(shim()->abi_VerifyIsOK(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::NotAvailable() const
{
	bool value = {};
	check_hresult(shim()->get_NotAvailable(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::PackageOffline() const
{
	bool value = {};
	check_hresult(shim()->get_PackageOffline(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::DataOffline() const
{
	bool value = {};
	check_hresult(shim()->get_DataOffline(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::Disabled() const
{
	bool value = {};
	check_hresult(shim()->get_Disabled(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::NeedsRemediation() const
{
	bool value = {};
	check_hresult(shim()->get_NeedsRemediation(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::LicenseIssue() const
{
	bool value = {};
	check_hresult(shim()->get_LicenseIssue(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::Modified() const
{
	bool value = {};
	check_hresult(shim()->get_Modified(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::Tampered() const
{
	bool value = {};
	check_hresult(shim()->get_Tampered(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::DependencyIssue() const
{
	bool value = {};
	check_hresult(shim()->get_DependencyIssue(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::Servicing() const
{
	bool value = {};
	check_hresult(shim()->get_Servicing(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::DeploymentInProgress() const
{
	bool value = {};
	check_hresult(shim()->get_DeploymentInProgress(put(value)));
	return value;
}

template <typename T> String impl_IPackageId<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::PackageVersion impl_IPackageId<T>::Version() const
{
	Windows::ApplicationModel::PackageVersion value = {};
	check_hresult(shim()->get_Version(&value));
	return value;
}

template <typename T> Windows::System::ProcessorArchitecture impl_IPackageId<T>::Architecture() const
{
	Windows::System::ProcessorArchitecture value = {};
	check_hresult(shim()->get_Architecture(&value));
	return value;
}

template <typename T> String impl_IPackageId<T>::ResourceId() const
{
	String value;
	check_hresult(shim()->get_ResourceId(put(value)));
	return value;
}

template <typename T> String impl_IPackageId<T>::Publisher() const
{
	String value;
	check_hresult(shim()->get_Publisher(put(value)));
	return value;
}

template <typename T> String impl_IPackageId<T>::PublisherId() const
{
	String value;
	check_hresult(shim()->get_PublisherId(put(value)));
	return value;
}

template <typename T> String impl_IPackageId<T>::FullName() const
{
	String value;
	check_hresult(shim()->get_FullName(put(value)));
	return value;
}

template <typename T> String impl_IPackageId<T>::FamilyName() const
{
	String value;
	check_hresult(shim()->get_FamilyName(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::PackageId impl_IPackage<T>::Id() const
{
	Windows::ApplicationModel::PackageId value = nullptr;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IPackage<T>::InstalledLocation() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_InstalledLocation(put(value)));
	return value;
}

template <typename T> bool impl_IPackage<T>::IsFramework() const
{
	bool value = {};
	check_hresult(shim()->get_IsFramework(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Package> impl_IPackage<T>::Dependencies() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Package> value;
	check_hresult(shim()->get_Dependencies(put(value)));
	return value;
}

template <typename T> String impl_IPackage2<T>::DisplayName() const
{
	String value;
	check_hresult(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IPackage2<T>::PublisherDisplayName() const
{
	String value;
	check_hresult(shim()->get_PublisherDisplayName(put(value)));
	return value;
}

template <typename T> String impl_IPackage2<T>::Description() const
{
	String value;
	check_hresult(shim()->get_Description(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IPackage2<T>::Logo() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_Logo(put(value)));
	return value;
}

template <typename T> bool impl_IPackage2<T>::IsResourcePackage() const
{
	bool value = {};
	check_hresult(shim()->get_IsResourcePackage(put(value)));
	return value;
}

template <typename T> bool impl_IPackage2<T>::IsBundle() const
{
	bool value = {};
	check_hresult(shim()->get_IsBundle(put(value)));
	return value;
}

template <typename T> bool impl_IPackage2<T>::IsDevelopmentMode() const
{
	bool value = {};
	check_hresult(shim()->get_IsDevelopmentMode(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::PackageStatus impl_IPackage3<T>::Status() const
{
	Windows::ApplicationModel::PackageStatus value = nullptr;
	check_hresult(shim()->get_Status(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPackage3<T>::InstalledDate() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_InstalledDate(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::AppListEntry>> impl_IPackage3<T>::GetAppListEntriesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::AppListEntry>> operation;
	check_hresult(shim()->abi_GetAppListEntriesAsync(put(operation)));
	return operation;
}

template <typename T> Windows::ApplicationModel::Package impl_IPackageStatics<T>::Current() const
{
	Windows::ApplicationModel::Package value = nullptr;
	check_hresult(shim()->get_Current(put(value)));
	return value;
}

template <typename T> bool impl_IDesignModeStatics<T>::DesignModeEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_DesignModeEnabled(put(value)));
	return value;
}

}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Activation {

template <typename T> Windows::Foundation::Rect impl_ISplashScreen<T>::ImageLocation() const
{
	Windows::Foundation::Rect value = {};
	check_hresult(shim()->get_ImageLocation(&value));
	return value;
}

template <typename T> long long impl_ISplashScreen<T>::Dismissed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen, IInspectable> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_Dismissed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ISplashScreen<T>::Dismissed(F handler) const
{
	return Dismissed(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen, IInspectable>(handler));
}

template <typename T> void impl_ISplashScreen<T>::Dismissed(long long const cookie) const
{
	check_hresult(shim()->remove_Dismissed(cookie));
}

template <typename T> Windows::ApplicationModel::Activation::ActivationKind impl_IActivatedEventArgs<T>::Kind() const
{
	Windows::ApplicationModel::Activation::ActivationKind value = {};
	check_hresult(shim()->get_Kind(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Activation::ApplicationExecutionState impl_IActivatedEventArgs<T>::PreviousExecutionState() const
{
	Windows::ApplicationModel::Activation::ApplicationExecutionState value = {};
	check_hresult(shim()->get_PreviousExecutionState(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Activation::SplashScreen impl_IActivatedEventArgs<T>::SplashScreen() const
{
	Windows::ApplicationModel::Activation::SplashScreen value = nullptr;
	check_hresult(shim()->get_SplashScreen(put(value)));
	return value;
}

template <typename T> int impl_IApplicationViewActivatedEventArgs<T>::CurrentlyShownApplicationViewId() const
{
	int value = {};
	check_hresult(shim()->get_CurrentlyShownApplicationViewId(&value));
	return value;
}

template <typename T> Windows::UI::ViewManagement::ActivationViewSwitcher impl_IViewSwitcherProvider<T>::ViewSwitcher() const
{
	Windows::UI::ViewManagement::ActivationViewSwitcher value = nullptr;
	check_hresult(shim()->get_ViewSwitcher(put(value)));
	return value;
}

template <typename T> bool impl_IPrelaunchActivatedEventArgs<T>::PrelaunchActivated() const
{
	bool value = {};
	check_hresult(shim()->get_PrelaunchActivated(put(value)));
	return value;
}

template <typename T> String impl_ILaunchActivatedEventArgs<T>::Arguments() const
{
	String value;
	check_hresult(shim()->get_Arguments(put(value)));
	return value;
}

template <typename T> String impl_ILaunchActivatedEventArgs<T>::TileId() const
{
	String value;
	check_hresult(shim()->get_TileId(put(value)));
	return value;
}

template <typename T> String impl_ISearchActivatedEventArgs<T>::QueryText() const
{
	String value;
	check_hresult(shim()->get_QueryText(put(value)));
	return value;
}

template <typename T> String impl_ISearchActivatedEventArgs<T>::Language() const
{
	String value;
	check_hresult(shim()->get_Language(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails impl_ISearchActivatedEventArgsWithLinguisticDetails<T>::LinguisticDetails() const
{
	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails value = nullptr;
	check_hresult(shim()->get_LinguisticDetails(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::ShareTarget::ShareOperation impl_IShareTargetActivatedEventArgs<T>::ShareOperation() const
{
	Windows::ApplicationModel::DataTransfer::ShareTarget::ShareOperation value = nullptr;
	check_hresult(shim()->get_ShareOperation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem> impl_IFileActivatedEventArgs<T>::Files() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem> value;
	check_hresult(shim()->get_Files(put(value)));
	return value;
}

template <typename T> String impl_IFileActivatedEventArgs<T>::Verb() const
{
	String value;
	check_hresult(shim()->get_Verb(put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFileQueryResult impl_IFileActivatedEventArgsWithNeighboringFiles<T>::NeighboringFilesQuery() const
{
	Windows::Storage::Search::StorageFileQueryResult value = nullptr;
	check_hresult(shim()->get_NeighboringFilesQuery(put(value)));
	return value;
}

template <typename T> String impl_IFileActivatedEventArgsWithCallerPackageFamilyName<T>::CallerPackageFamilyName() const
{
	String value;
	check_hresult(shim()->get_CallerPackageFamilyName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IProtocolActivatedEventArgs<T>::Uri() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> String impl_IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData<T>::CallerPackageFamilyName() const
{
	String value;
	check_hresult(shim()->get_CallerPackageFamilyName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData<T>::Data() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check_hresult(shim()->get_Data(put(value)));
	return value;
}

template <typename T> Windows::System::ProtocolForResultsOperation impl_IProtocolForResultsActivatedEventArgs<T>::ProtocolForResultsOperation() const
{
	Windows::System::ProtocolForResultsOperation value = nullptr;
	check_hresult(shim()->get_ProtocolForResultsOperation(put(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::FileOpenPickerUI impl_IFileOpenPickerActivatedEventArgs<T>::FileOpenPickerUI() const
{
	Windows::Storage::Pickers::Provider::FileOpenPickerUI value = nullptr;
	check_hresult(shim()->get_FileOpenPickerUI(put(value)));
	return value;
}

template <typename T> String impl_IFileOpenPickerActivatedEventArgs2<T>::CallerPackageFamilyName() const
{
	String value;
	check_hresult(shim()->get_CallerPackageFamilyName(put(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::FileSavePickerUI impl_IFileSavePickerActivatedEventArgs<T>::FileSavePickerUI() const
{
	Windows::Storage::Pickers::Provider::FileSavePickerUI value = nullptr;
	check_hresult(shim()->get_FileSavePickerUI(put(value)));
	return value;
}

template <typename T> String impl_IFileSavePickerActivatedEventArgs2<T>::CallerPackageFamilyName() const
{
	String value;
	check_hresult(shim()->get_CallerPackageFamilyName(put(value)));
	return value;
}

template <typename T> String impl_IFileSavePickerActivatedEventArgs2<T>::EnterpriseId() const
{
	String value;
	check_hresult(shim()->get_EnterpriseId(put(value)));
	return value;
}

template <typename T> Windows::Storage::Provider::CachedFileUpdaterUI impl_ICachedFileUpdaterActivatedEventArgs<T>::CachedFileUpdaterUI() const
{
	Windows::Storage::Provider::CachedFileUpdaterUI value = nullptr;
	check_hresult(shim()->get_CachedFileUpdaterUI(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Provider::ContactPickerUI impl_IContactPickerActivatedEventArgs<T>::ContactPickerUI() const
{
	Windows::ApplicationModel::Contacts::Provider::ContactPickerUI value = nullptr;
	check_hresult(shim()->get_ContactPickerUI(put(value)));
	return value;
}

template <typename T> String impl_IDeviceActivatedEventArgs<T>::DeviceInformationId() const
{
	String value;
	check_hresult(shim()->get_DeviceInformationId(put(value)));
	return value;
}

template <typename T> String impl_IDeviceActivatedEventArgs<T>::Verb() const
{
	String value;
	check_hresult(shim()->get_Verb(put(value)));
	return value;
}

template <typename T> Windows::Devices::Printers::Extensions::PrintTaskConfiguration impl_IPrintTaskSettingsActivatedEventArgs<T>::Configuration() const
{
	Windows::Devices::Printers::Extensions::PrintTaskConfiguration value = nullptr;
	check_hresult(shim()->get_Configuration(put(value)));
	return value;
}

template <typename T> Windows::Devices::Printers::Extensions::Print3DWorkflow impl_IPrint3DWorkflowActivatedEventArgs<T>::Workflow() const
{
	Windows::Devices::Printers::Extensions::Print3DWorkflow value = nullptr;
	check_hresult(shim()->get_Workflow(put(value)));
	return value;
}

template <typename T> IInspectable impl_ICameraSettingsActivatedEventArgs<T>::VideoDeviceController() const
{
	IInspectable value;
	check_hresult(shim()->get_VideoDeviceController(put(value)));
	return value;
}

template <typename T> IInspectable impl_ICameraSettingsActivatedEventArgs<T>::VideoDeviceExtension() const
{
	IInspectable value;
	check_hresult(shim()->get_VideoDeviceExtension(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderActivatedEventArgs<T>::Verb() const
{
	String value;
	check_hresult(shim()->get_Verb(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentsProvider::AddAppointmentOperation impl_IAppointmentsProviderAddAppointmentActivatedEventArgs<T>::AddAppointmentOperation() const
{
	Windows::ApplicationModel::Appointments::AppointmentsProvider::AddAppointmentOperation value = nullptr;
	check_hresult(shim()->get_AddAppointmentOperation(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentsProvider::ReplaceAppointmentOperation impl_IAppointmentsProviderReplaceAppointmentActivatedEventArgs<T>::ReplaceAppointmentOperation() const
{
	Windows::ApplicationModel::Appointments::AppointmentsProvider::ReplaceAppointmentOperation value = nullptr;
	check_hresult(shim()->get_ReplaceAppointmentOperation(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentsProvider::RemoveAppointmentOperation impl_IAppointmentsProviderRemoveAppointmentActivatedEventArgs<T>::RemoveAppointmentOperation() const
{
	Windows::ApplicationModel::Appointments::AppointmentsProvider::RemoveAppointmentOperation value = nullptr;
	check_hresult(shim()->get_RemoveAppointmentOperation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs<T>::InstanceStartDate() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check_hresult(shim()->get_InstanceStartDate(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs<T>::LocalId() const
{
	String value;
	check_hresult(shim()->get_LocalId(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs<T>::RoamingId() const
{
	String value;
	check_hresult(shim()->get_RoamingId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IAppointmentsProviderShowTimeFrameActivatedEventArgs<T>::TimeToShow() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_TimeToShow(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IAppointmentsProviderShowTimeFrameActivatedEventArgs<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_Duration(&value));
	return value;
}

template <typename T> String impl_IContactActivatedEventArgs<T>::Verb() const
{
	String value;
	check_hresult(shim()->get_Verb(put(value)));
	return value;
}

template <typename T> String impl_IContactCallActivatedEventArgs<T>::ServiceId() const
{
	String value;
	check_hresult(shim()->get_ServiceId(put(value)));
	return value;
}

template <typename T> String impl_IContactCallActivatedEventArgs<T>::ServiceUserId() const
{
	String value;
	check_hresult(shim()->get_ServiceUserId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactCallActivatedEventArgs<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value = nullptr;
	check_hresult(shim()->get_Contact(put(value)));
	return value;
}

template <typename T> String impl_IContactMessageActivatedEventArgs<T>::ServiceId() const
{
	String value;
	check_hresult(shim()->get_ServiceId(put(value)));
	return value;
}

template <typename T> String impl_IContactMessageActivatedEventArgs<T>::ServiceUserId() const
{
	String value;
	check_hresult(shim()->get_ServiceUserId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactMessageActivatedEventArgs<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value = nullptr;
	check_hresult(shim()->get_Contact(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactAddress impl_IContactMapActivatedEventArgs<T>::Address() const
{
	Windows::ApplicationModel::Contacts::ContactAddress value = nullptr;
	check_hresult(shim()->get_Address(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactMapActivatedEventArgs<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value = nullptr;
	check_hresult(shim()->get_Contact(put(value)));
	return value;
}

template <typename T> String impl_IContactPostActivatedEventArgs<T>::ServiceId() const
{
	String value;
	check_hresult(shim()->get_ServiceId(put(value)));
	return value;
}

template <typename T> String impl_IContactPostActivatedEventArgs<T>::ServiceUserId() const
{
	String value;
	check_hresult(shim()->get_ServiceUserId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactPostActivatedEventArgs<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value = nullptr;
	check_hresult(shim()->get_Contact(put(value)));
	return value;
}

template <typename T> String impl_IContactVideoCallActivatedEventArgs<T>::ServiceId() const
{
	String value;
	check_hresult(shim()->get_ServiceId(put(value)));
	return value;
}

template <typename T> String impl_IContactVideoCallActivatedEventArgs<T>::ServiceUserId() const
{
	String value;
	check_hresult(shim()->get_ServiceUserId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactVideoCallActivatedEventArgs<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value = nullptr;
	check_hresult(shim()->get_Contact(put(value)));
	return value;
}

template <typename T> String impl_IContactsProviderActivatedEventArgs<T>::Verb() const
{
	String value;
	check_hresult(shim()->get_Verb(put(value)));
	return value;
}

template <typename T> IInspectable impl_IRestrictedLaunchActivatedEventArgs<T>::SharedContext() const
{
	IInspectable value;
	check_hresult(shim()->get_SharedContext(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::LockScreenCallUI impl_ILockScreenCallActivatedEventArgs<T>::CallUI() const
{
	Windows::ApplicationModel::Calls::LockScreenCallUI value = nullptr;
	check_hresult(shim()->get_CallUI(put(value)));
	return value;
}

template <typename T> IInspectable impl_ILockScreenActivatedEventArgs<T>::Info() const
{
	IInspectable value;
	check_hresult(shim()->get_Info(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_IContinuationActivatedEventArgs<T>::ContinuationData() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check_hresult(shim()->get_ContinuationData(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile> impl_IFileOpenPickerContinuationEventArgs<T>::Files() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile> value;
	check_hresult(shim()->get_Files(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFile impl_IFileSavePickerContinuationEventArgs<T>::File() const
{
	Windows::Storage::StorageFile value = nullptr;
	check_hresult(shim()->get_File(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IFolderPickerContinuationEventArgs<T>::Folder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_Folder(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation impl_IWebAccountProviderActivatedEventArgs<T>::Operation() const
{
	Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation value;
	check_hresult(shim()->get_Operation(put(value)));
	return value;
}

template <typename T> String impl_IToastNotificationActivatedEventArgs<T>::Argument() const
{
	String argument;
	check_hresult(shim()->get_Argument(put(argument)));
	return argument;
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_IToastNotificationActivatedEventArgs<T>::UserInput() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check_hresult(shim()->get_UserInput(put(value)));
	return value;
}

template <typename T> String impl_IDialReceiverActivatedEventArgs<T>::AppName() const
{
	String value;
	check_hresult(shim()->get_AppName(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IDevicePairingActivatedEventArgs<T>::DeviceInformation() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check_hresult(shim()->get_DeviceInformation(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionResult impl_IVoiceCommandActivatedEventArgs<T>::Result() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionResult value = nullptr;
	check_hresult(shim()->get_Result(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Appointments {

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check_hresult(shim()->abi_ShowAddAppointmentAsync(get(appointment), selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check_hresult(shim()->abi_ShowAddAppointmentWithPlacementAsync(get(appointment), selection, preferredPlacement, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowReplaceAppointmentAsync(StringReference const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check_hresult(shim()->abi_ShowReplaceAppointmentAsync(get(appointmentId), get(appointment), selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowReplaceAppointmentAsync(StringReference const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check_hresult(shim()->abi_ShowReplaceAppointmentWithPlacementAsync(get(appointmentId), get(appointment), selection, preferredPlacement, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowReplaceAppointmentAsync(StringReference const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check_hresult(shim()->abi_ShowReplaceAppointmentWithPlacementAndDateAsync(get(appointmentId), get(appointment), selection, preferredPlacement, instanceStartDate, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentManagerStatics<T>::ShowRemoveAppointmentAsync(StringReference const & appointmentId, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_ShowRemoveAppointmentAsync(get(appointmentId), selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentManagerStatics<T>::ShowRemoveAppointmentAsync(StringReference const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_ShowRemoveAppointmentWithPlacementAsync(get(appointmentId), selection, preferredPlacement, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentManagerStatics<T>::ShowRemoveAppointmentAsync(StringReference const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_ShowRemoveAppointmentWithPlacementAndDateAsync(get(appointmentId), selection, preferredPlacement, instanceStartDate, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentManagerStatics<T>::ShowTimeFrameAsync(Windows::Foundation::DateTime const & timeToShow, Windows::Foundation::TimeSpan const & duration) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check_hresult(shim()->abi_ShowTimeFrameAsync(timeToShow, duration, put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentManagerStatics2<T>::ShowAppointmentDetailsAsync(StringReference const & appointmentId) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check_hresult(shim()->abi_ShowAppointmentDetailsAsync(get(appointmentId), put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentManagerStatics2<T>::ShowAppointmentDetailsAsync(StringReference const & appointmentId, Windows::Foundation::DateTime const & instanceStartDate) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check_hresult(shim()->abi_ShowAppointmentDetailsWithDateAsync(get(appointmentId), instanceStartDate, put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics2<T>::ShowEditNewAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check_hresult(shim()->abi_ShowEditNewAppointmentAsync(get(appointment), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentStore> impl_IAppointmentManagerStatics2<T>::RequestStoreAsync(Windows::ApplicationModel::Appointments::AppointmentStoreAccessType const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentStore> operation;
	check_hresult(shim()->abi_RequestStoreAsync(options, put(operation)));
	return operation;
}

template <typename T> String impl_IAppointmentParticipant<T>::DisplayName() const
{
	String value;
	check_hresult(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentParticipant<T>::DisplayName(StringReference const & value) const
{
	check_hresult(shim()->put_DisplayName(get(value)));
}

template <typename T> String impl_IAppointmentParticipant<T>::Address() const
{
	String value;
	check_hresult(shim()->get_Address(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentParticipant<T>::Address(StringReference const & value) const
{
	check_hresult(shim()->put_Address(get(value)));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentParticipantRole impl_IAppointmentInvitee<T>::Role() const
{
	Windows::ApplicationModel::Appointments::AppointmentParticipantRole value = {};
	check_hresult(shim()->get_Role(&value));
	return value;
}

template <typename T> void impl_IAppointmentInvitee<T>::Role(Windows::ApplicationModel::Appointments::AppointmentParticipantRole const value) const
{
	check_hresult(shim()->put_Role(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentParticipantResponse impl_IAppointmentInvitee<T>::Response() const
{
	Windows::ApplicationModel::Appointments::AppointmentParticipantResponse value = {};
	check_hresult(shim()->get_Response(&value));
	return value;
}

template <typename T> void impl_IAppointmentInvitee<T>::Response(Windows::ApplicationModel::Appointments::AppointmentParticipantResponse const value) const
{
	check_hresult(shim()->put_Response(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentRecurrenceUnit impl_IAppointmentRecurrence<T>::Unit() const
{
	Windows::ApplicationModel::Appointments::AppointmentRecurrenceUnit value = {};
	check_hresult(shim()->get_Unit(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Unit(Windows::ApplicationModel::Appointments::AppointmentRecurrenceUnit const value) const
{
	check_hresult(shim()->put_Unit(value));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IAppointmentRecurrence<T>::Occurrences() const
{
	Windows::Foundation::IReference<unsigned> value;
	check_hresult(shim()->get_Occurrences(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Occurrences(Windows::Foundation::IReference<unsigned> const & value) const
{
	check_hresult(shim()->put_Occurrences(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IAppointmentRecurrence<T>::Until() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check_hresult(shim()->get_Until(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Until(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check_hresult(shim()->put_Until(get(value)));
}

template <typename T> unsigned impl_IAppointmentRecurrence<T>::Interval() const
{
	unsigned value = {};
	check_hresult(shim()->get_Interval(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Interval(unsigned const value) const
{
	check_hresult(shim()->put_Interval(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentDaysOfWeek impl_IAppointmentRecurrence<T>::DaysOfWeek() const
{
	Windows::ApplicationModel::Appointments::AppointmentDaysOfWeek value = {};
	check_hresult(shim()->get_DaysOfWeek(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::DaysOfWeek(Windows::ApplicationModel::Appointments::AppointmentDaysOfWeek const value) const
{
	check_hresult(shim()->put_DaysOfWeek(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentWeekOfMonth impl_IAppointmentRecurrence<T>::WeekOfMonth() const
{
	Windows::ApplicationModel::Appointments::AppointmentWeekOfMonth value = {};
	check_hresult(shim()->get_WeekOfMonth(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::WeekOfMonth(Windows::ApplicationModel::Appointments::AppointmentWeekOfMonth const value) const
{
	check_hresult(shim()->put_WeekOfMonth(value));
}

template <typename T> unsigned impl_IAppointmentRecurrence<T>::Month() const
{
	unsigned value = {};
	check_hresult(shim()->get_Month(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Month(unsigned const value) const
{
	check_hresult(shim()->put_Month(value));
}

template <typename T> unsigned impl_IAppointmentRecurrence<T>::Day() const
{
	unsigned value = {};
	check_hresult(shim()->get_Day(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Day(unsigned const value) const
{
	check_hresult(shim()->put_Day(value));
}

template <typename T> Windows::ApplicationModel::Appointments::RecurrenceType impl_IAppointmentRecurrence2<T>::RecurrenceType() const
{
	Windows::ApplicationModel::Appointments::RecurrenceType value = {};
	check_hresult(shim()->get_RecurrenceType(&value));
	return value;
}

template <typename T> String impl_IAppointmentRecurrence2<T>::TimeZone() const
{
	String value;
	check_hresult(shim()->get_TimeZone(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence2<T>::TimeZone(StringReference const & value) const
{
	check_hresult(shim()->put_TimeZone(get(value)));
}

template <typename T> String impl_IAppointmentRecurrence3<T>::CalendarIdentifier() const
{
	String value;
	check_hresult(shim()->get_CalendarIdentifier(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IAppointment<T>::StartTime() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_StartTime(&value));
	return value;
}

template <typename T> void impl_IAppointment<T>::StartTime(Windows::Foundation::DateTime const & value) const
{
	check_hresult(shim()->put_StartTime(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IAppointment<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_Duration(&value));
	return value;
}

template <typename T> void impl_IAppointment<T>::Duration(Windows::Foundation::TimeSpan const & value) const
{
	check_hresult(shim()->put_Duration(value));
}

template <typename T> String impl_IAppointment<T>::Location() const
{
	String value;
	check_hresult(shim()->get_Location(put(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Location(StringReference const & value) const
{
	check_hresult(shim()->put_Location(get(value)));
}

template <typename T> String impl_IAppointment<T>::Subject() const
{
	String value;
	check_hresult(shim()->get_Subject(put(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Subject(StringReference const & value) const
{
	check_hresult(shim()->put_Subject(get(value)));
}

template <typename T> String impl_IAppointment<T>::Details() const
{
	String value;
	check_hresult(shim()->get_Details(put(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Details(StringReference const & value) const
{
	check_hresult(shim()->put_Details(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IAppointment<T>::Reminder() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check_hresult(shim()->get_Reminder(put(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Reminder(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check_hresult(shim()->put_Reminder(get(value)));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentOrganizer impl_IAppointment<T>::Organizer() const
{
	Windows::ApplicationModel::Appointments::AppointmentOrganizer value = nullptr;
	check_hresult(shim()->get_Organizer(put(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Organizer(Windows::ApplicationModel::Appointments::AppointmentOrganizer const & value) const
{
	check_hresult(shim()->put_Organizer(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Appointments::AppointmentInvitee> impl_IAppointment<T>::Invitees() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Appointments::AppointmentInvitee> value;
	check_hresult(shim()->get_Invitees(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentRecurrence impl_IAppointment<T>::Recurrence() const
{
	Windows::ApplicationModel::Appointments::AppointmentRecurrence value = nullptr;
	check_hresult(shim()->get_Recurrence(put(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Recurrence(Windows::ApplicationModel::Appointments::AppointmentRecurrence const & value) const
{
	check_hresult(shim()->put_Recurrence(get(value)));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentBusyStatus impl_IAppointment<T>::BusyStatus() const
{
	Windows::ApplicationModel::Appointments::AppointmentBusyStatus value = {};
	check_hresult(shim()->get_BusyStatus(&value));
	return value;
}

template <typename T> void impl_IAppointment<T>::BusyStatus(Windows::ApplicationModel::Appointments::AppointmentBusyStatus const value) const
{
	check_hresult(shim()->put_BusyStatus(value));
}

template <typename T> bool impl_IAppointment<T>::AllDay() const
{
	bool value = {};
	check_hresult(shim()->get_AllDay(put(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::AllDay(bool const value) const
{
	check_hresult(shim()->put_AllDay(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentSensitivity impl_IAppointment<T>::Sensitivity() const
{
	Windows::ApplicationModel::Appointments::AppointmentSensitivity value = {};
	check_hresult(shim()->get_Sensitivity(&value));
	return value;
}

template <typename T> void impl_IAppointment<T>::Sensitivity(Windows::ApplicationModel::Appointments::AppointmentSensitivity const value) const
{
	check_hresult(shim()->put_Sensitivity(value));
}

template <typename T> Windows::Foundation::Uri impl_IAppointment<T>::Uri() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Uri(Windows::Foundation::Uri const & value) const
{
	check_hresult(shim()->put_Uri(get(value)));
}

template <typename T> String impl_IAppointment2<T>::LocalId() const
{
	String value;
	check_hresult(shim()->get_LocalId(put(value)));
	return value;
}

template <typename T> String impl_IAppointment2<T>::CalendarId() const
{
	String value;
	check_hresult(shim()->get_CalendarId(put(value)));
	return value;
}

template <typename T> String impl_IAppointment2<T>::RoamingId() const
{
	String value;
	check_hresult(shim()->get_RoamingId(put(value)));
	return value;
}

template <typename T> void impl_IAppointment2<T>::RoamingId(StringReference const & value) const
{
	check_hresult(shim()->put_RoamingId(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IAppointment2<T>::OriginalStartTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check_hresult(shim()->get_OriginalStartTime(put(value)));
	return value;
}

template <typename T> bool impl_IAppointment2<T>::IsResponseRequested() const
{
	bool value = {};
	check_hresult(shim()->get_IsResponseRequested(put(value)));
	return value;
}

template <typename T> void impl_IAppointment2<T>::IsResponseRequested(bool const value) const
{
	check_hresult(shim()->put_IsResponseRequested(value));
}

template <typename T> bool impl_IAppointment2<T>::AllowNewTimeProposal() const
{
	bool value = {};
	check_hresult(shim()->get_AllowNewTimeProposal(put(value)));
	return value;
}

template <typename T> void impl_IAppointment2<T>::AllowNewTimeProposal(bool const value) const
{
	check_hresult(shim()->put_AllowNewTimeProposal(value));
}

template <typename T> String impl_IAppointment2<T>::OnlineMeetingLink() const
{
	String value;
	check_hresult(shim()->get_OnlineMeetingLink(put(value)));
	return value;
}

template <typename T> void impl_IAppointment2<T>::OnlineMeetingLink(StringReference const & value) const
{
	check_hresult(shim()->put_OnlineMeetingLink(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IAppointment2<T>::ReplyTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check_hresult(shim()->get_ReplyTime(put(value)));
	return value;
}

template <typename T> void impl_IAppointment2<T>::ReplyTime(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check_hresult(shim()->put_ReplyTime(get(value)));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentParticipantResponse impl_IAppointment2<T>::UserResponse() const
{
	Windows::ApplicationModel::Appointments::AppointmentParticipantResponse value = {};
	check_hresult(shim()->get_UserResponse(&value));
	return value;
}

template <typename T> void impl_IAppointment2<T>::UserResponse(Windows::ApplicationModel::Appointments::AppointmentParticipantResponse const value) const
{
	check_hresult(shim()->put_UserResponse(value));
}

template <typename T> bool impl_IAppointment2<T>::HasInvitees() const
{
	bool value = {};
	check_hresult(shim()->get_HasInvitees(put(value)));
	return value;
}

template <typename T> bool impl_IAppointment2<T>::IsCanceledMeeting() const
{
	bool value = {};
	check_hresult(shim()->get_IsCanceledMeeting(put(value)));
	return value;
}

template <typename T> void impl_IAppointment2<T>::IsCanceledMeeting(bool const value) const
{
	check_hresult(shim()->put_IsCanceledMeeting(value));
}

template <typename T> bool impl_IAppointment2<T>::IsOrganizedByUser() const
{
	bool value = {};
	check_hresult(shim()->get_IsOrganizedByUser(put(value)));
	return value;
}

template <typename T> void impl_IAppointment2<T>::IsOrganizedByUser(bool const value) const
{
	check_hresult(shim()->put_IsOrganizedByUser(value));
}

template <typename T> unsigned long long impl_IAppointment3<T>::ChangeNumber() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_ChangeNumber(&value));
	return value;
}

template <typename T> unsigned long long impl_IAppointment3<T>::RemoteChangeNumber() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_RemoteChangeNumber(&value));
	return value;
}

template <typename T> void impl_IAppointment3<T>::RemoteChangeNumber(unsigned long long const value) const
{
	check_hresult(shim()->put_RemoteChangeNumber(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentDetailsKind impl_IAppointment3<T>::DetailsKind() const
{
	Windows::ApplicationModel::Appointments::AppointmentDetailsKind value = {};
	check_hresult(shim()->get_DetailsKind(&value));
	return value;
}

template <typename T> void impl_IAppointment3<T>::DetailsKind(Windows::ApplicationModel::Appointments::AppointmentDetailsKind const value) const
{
	check_hresult(shim()->put_DetailsKind(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IFindAppointmentsOptions<T>::CalendarIds() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_CalendarIds(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IFindAppointmentsOptions<T>::FetchProperties() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_FetchProperties(put(value)));
	return value;
}

template <typename T> bool impl_IFindAppointmentsOptions<T>::IncludeHidden() const
{
	bool value = {};
	check_hresult(shim()->get_IncludeHidden(put(value)));
	return value;
}

template <typename T> void impl_IFindAppointmentsOptions<T>::IncludeHidden(bool const value) const
{
	check_hresult(shim()->put_IncludeHidden(value));
}

template <typename T> unsigned impl_IFindAppointmentsOptions<T>::MaxCount() const
{
	unsigned value = {};
	check_hresult(shim()->get_MaxCount(&value));
	return value;
}

template <typename T> void impl_IFindAppointmentsOptions<T>::MaxCount(unsigned const value) const
{
	check_hresult(shim()->put_MaxCount(value));
}

template <typename T> Windows::UI::Color impl_IAppointmentCalendar<T>::DisplayColor() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DisplayColor(&value));
	return value;
}

template <typename T> String impl_IAppointmentCalendar<T>::DisplayName() const
{
	String value;
	check_hresult(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar<T>::DisplayName(StringReference const & value) const
{
	check_hresult(shim()->put_DisplayName(get(value)));
}

template <typename T> String impl_IAppointmentCalendar<T>::LocalId() const
{
	String value;
	check_hresult(shim()->get_LocalId(put(value)));
	return value;
}

template <typename T> bool impl_IAppointmentCalendar<T>::IsHidden() const
{
	bool value = {};
	check_hresult(shim()->get_IsHidden(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppReadAccess impl_IAppointmentCalendar<T>::OtherAppReadAccess() const
{
	Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppReadAccess value = {};
	check_hresult(shim()->get_OtherAppReadAccess(&value));
	return value;
}

template <typename T> void impl_IAppointmentCalendar<T>::OtherAppReadAccess(Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppReadAccess const value) const
{
	check_hresult(shim()->put_OtherAppReadAccess(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppWriteAccess impl_IAppointmentCalendar<T>::OtherAppWriteAccess() const
{
	Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppWriteAccess value = {};
	check_hresult(shim()->get_OtherAppWriteAccess(&value));
	return value;
}

template <typename T> void impl_IAppointmentCalendar<T>::OtherAppWriteAccess(Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppWriteAccess const value) const
{
	check_hresult(shim()->put_OtherAppWriteAccess(value));
}

template <typename T> String impl_IAppointmentCalendar<T>::SourceDisplayName() const
{
	String value;
	check_hresult(shim()->get_SourceDisplayName(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentSummaryCardView impl_IAppointmentCalendar<T>::SummaryCardView() const
{
	Windows::ApplicationModel::Appointments::AppointmentSummaryCardView value = {};
	check_hresult(shim()->get_SummaryCardView(&value));
	return value;
}

template <typename T> void impl_IAppointmentCalendar<T>::SummaryCardView(Windows::ApplicationModel::Appointments::AppointmentSummaryCardView const value) const
{
	check_hresult(shim()->put_SummaryCardView(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> impl_IAppointmentCalendar<T>::FindAppointmentsAsync(Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> result;
	check_hresult(shim()->abi_FindAppointmentsAsync(rangeStart, rangeLength, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> impl_IAppointmentCalendar<T>::FindAppointmentsAsync(Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength, Windows::ApplicationModel::Appointments::FindAppointmentsOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> result;
	check_hresult(shim()->abi_FindAppointmentsAsyncWithOptions(rangeStart, rangeLength, get(options), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentException>> impl_IAppointmentCalendar<T>::FindExceptionsFromMasterAsync(StringReference const & masterLocalId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentException>> value;
	check_hresult(shim()->abi_FindExceptionsFromMasterAsync(get(masterLocalId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> impl_IAppointmentCalendar<T>::FindAllInstancesAsync(StringReference const & masterLocalId, Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> value;
	check_hresult(shim()->abi_FindAllInstancesAsync(get(masterLocalId), rangeStart, rangeLength, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> impl_IAppointmentCalendar<T>::FindAllInstancesAsync(StringReference const & masterLocalId, Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength, Windows::ApplicationModel::Appointments::FindAppointmentsOptions const & pOptions) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> value;
	check_hresult(shim()->abi_FindAllInstancesAsyncWithOptions(get(masterLocalId), rangeStart, rangeLength, get(pOptions), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> impl_IAppointmentCalendar<T>::GetAppointmentAsync(StringReference const & localId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> result;
	check_hresult(shim()->abi_GetAppointmentAsync(get(localId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> impl_IAppointmentCalendar<T>::GetAppointmentInstanceAsync(StringReference const & localId, Windows::Foundation::DateTime const & instanceStartTime) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> result;
	check_hresult(shim()->abi_GetAppointmentInstanceAsync(get(localId), instanceStartTime, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> impl_IAppointmentCalendar<T>::FindUnexpandedAppointmentsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> result;
	check_hresult(shim()->abi_FindUnexpandedAppointmentsAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> impl_IAppointmentCalendar<T>::FindUnexpandedAppointmentsAsync(Windows::ApplicationModel::Appointments::FindAppointmentsOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> result;
	check_hresult(shim()->abi_FindUnexpandedAppointmentsAsyncWithOptions(get(options), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentCalendar<T>::DeleteAsync() const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check_hresult(shim()->abi_DeleteAsync(put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentCalendar<T>::SaveAsync() const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check_hresult(shim()->abi_SaveAsync(put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentCalendar<T>::DeleteAppointmentAsync(StringReference const & localId) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check_hresult(shim()->abi_DeleteAppointmentAsync(get(localId), put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentCalendar<T>::DeleteAppointmentInstanceAsync(StringReference const & localId, Windows::Foundation::DateTime const & instanceStartTime) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check_hresult(shim()->abi_DeleteAppointmentInstanceAsync(get(localId), instanceStartTime, put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentCalendar<T>::SaveAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & pAppointment) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check_hresult(shim()->abi_SaveAppointmentAsync(get(pAppointment), put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentCalendarSyncManager impl_IAppointmentCalendar2<T>::SyncManager() const
{
	Windows::ApplicationModel::Appointments::AppointmentCalendarSyncManager value = nullptr;
	check_hresult(shim()->get_SyncManager(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentCalendar2<T>::RemoteId() const
{
	String value;
	check_hresult(shim()->get_RemoteId(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar2<T>::RemoteId(StringReference const & value) const
{
	check_hresult(shim()->put_RemoteId(get(value)));
}

template <typename T> void impl_IAppointmentCalendar2<T>::DisplayColor(Windows::UI::Color const & value) const
{
	check_hresult(shim()->put_DisplayColor(value));
}

template <typename T> void impl_IAppointmentCalendar2<T>::IsHidden(bool const value) const
{
	check_hresult(shim()->put_IsHidden(value));
}

template <typename T> String impl_IAppointmentCalendar2<T>::UserDataAccountId() const
{
	String value;
	check_hresult(shim()->get_UserDataAccountId(put(value)));
	return value;
}

template <typename T> bool impl_IAppointmentCalendar2<T>::CanCreateOrUpdateAppointments() const
{
	bool value = {};
	check_hresult(shim()->get_CanCreateOrUpdateAppointments(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar2<T>::CanCreateOrUpdateAppointments(bool const value) const
{
	check_hresult(shim()->put_CanCreateOrUpdateAppointments(value));
}

template <typename T> bool impl_IAppointmentCalendar2<T>::CanCancelMeetings() const
{
	bool value = {};
	check_hresult(shim()->get_CanCancelMeetings(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar2<T>::CanCancelMeetings(bool const value) const
{
	check_hresult(shim()->put_CanCancelMeetings(value));
}

template <typename T> bool impl_IAppointmentCalendar2<T>::CanForwardMeetings() const
{
	bool value = {};
	check_hresult(shim()->get_CanForwardMeetings(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar2<T>::CanForwardMeetings(bool const value) const
{
	check_hresult(shim()->put_CanForwardMeetings(value));
}

template <typename T> bool impl_IAppointmentCalendar2<T>::CanProposeNewTimeForMeetings() const
{
	bool value = {};
	check_hresult(shim()->get_CanProposeNewTimeForMeetings(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar2<T>::CanProposeNewTimeForMeetings(bool const value) const
{
	check_hresult(shim()->put_CanProposeNewTimeForMeetings(value));
}

template <typename T> bool impl_IAppointmentCalendar2<T>::CanUpdateMeetingResponses() const
{
	bool value = {};
	check_hresult(shim()->get_CanUpdateMeetingResponses(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar2<T>::CanUpdateMeetingResponses(bool const value) const
{
	check_hresult(shim()->put_CanUpdateMeetingResponses(value));
}

template <typename T> bool impl_IAppointmentCalendar2<T>::CanNotifyInvitees() const
{
	bool value = {};
	check_hresult(shim()->get_CanNotifyInvitees(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar2<T>::CanNotifyInvitees(bool const value) const
{
	check_hresult(shim()->put_CanNotifyInvitees(value));
}

template <typename T> bool impl_IAppointmentCalendar2<T>::MustNofityInvitees() const
{
	bool value = {};
	check_hresult(shim()->get_MustNofityInvitees(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar2<T>::MustNofityInvitees(bool const value) const
{
	check_hresult(shim()->put_MustNofityInvitees(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentCalendar2<T>::TryCreateOrUpdateAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, bool const notifyInvitees) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check_hresult(shim()->abi_TryCreateOrUpdateAppointmentAsync(get(appointment), notifyInvitees, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentCalendar2<T>::TryCancelMeetingAsync(Windows::ApplicationModel::Appointments::Appointment const & meeting, StringReference const & subject, StringReference const & comment, bool const notifyInvitees) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check_hresult(shim()->abi_TryCancelMeetingAsync(get(meeting), get(subject), get(comment), notifyInvitees, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentCalendar2<T>::TryForwardMeetingAsync(Windows::ApplicationModel::Appointments::Appointment const & meeting, Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Appointments::AppointmentInvitee> const & invitees, StringReference const & subject, StringReference const & forwardHeader, StringReference const & comment) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check_hresult(shim()->abi_TryForwardMeetingAsync(get(meeting), get(invitees), get(subject), get(forwardHeader), get(comment), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentCalendar2<T>::TryProposeNewTimeForMeetingAsync(Windows::ApplicationModel::Appointments::Appointment const & meeting, Windows::Foundation::DateTime const & newStartTime, Windows::Foundation::TimeSpan const & newDuration, StringReference const & subject, StringReference const & comment) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check_hresult(shim()->abi_TryProposeNewTimeForMeetingAsync(get(meeting), newStartTime, newDuration, get(subject), get(comment), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentCalendar2<T>::TryUpdateMeetingResponseAsync(Windows::ApplicationModel::Appointments::Appointment const & meeting, Windows::ApplicationModel::Appointments::AppointmentParticipantResponse const response, StringReference const & subject, StringReference const & comment, bool const sendUpdate) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check_hresult(shim()->abi_TryUpdateMeetingResponseAsync(get(meeting), response, get(subject), get(comment), sendUpdate, put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentCalendarSyncStatus impl_IAppointmentCalendarSyncManager<T>::Status() const
{
	Windows::ApplicationModel::Appointments::AppointmentCalendarSyncStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IAppointmentCalendarSyncManager<T>::LastSuccessfulSyncTime() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_LastSuccessfulSyncTime(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IAppointmentCalendarSyncManager<T>::LastAttemptedSyncTime() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_LastAttemptedSyncTime(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentCalendarSyncManager<T>::SyncAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check_hresult(shim()->abi_SyncAsync(put(result)));
	return result;
}

template <typename T> long long impl_IAppointmentCalendarSyncManager<T>::SyncStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Appointments::AppointmentCalendarSyncManager, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_SyncStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAppointmentCalendarSyncManager<T>::SyncStatusChanged(F handler) const
{
	return SyncStatusChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Appointments::AppointmentCalendarSyncManager, IInspectable>(handler));
}

template <typename T> void impl_IAppointmentCalendarSyncManager<T>::SyncStatusChanged(long long const token) const
{
	check_hresult(shim()->remove_SyncStatusChanged(token));
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Subject() const
{
	String value;
	check_hresult(shim()->get_Subject(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Location() const
{
	String value;
	check_hresult(shim()->get_Location(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::StartTime() const
{
	String value;
	check_hresult(shim()->get_StartTime(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Duration() const
{
	String value;
	check_hresult(shim()->get_Duration(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Reminder() const
{
	String value;
	check_hresult(shim()->get_Reminder(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::BusyStatus() const
{
	String value;
	check_hresult(shim()->get_BusyStatus(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Sensitivity() const
{
	String value;
	check_hresult(shim()->get_Sensitivity(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::OriginalStartTime() const
{
	String value;
	check_hresult(shim()->get_OriginalStartTime(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::IsResponseRequested() const
{
	String value;
	check_hresult(shim()->get_IsResponseRequested(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::AllowNewTimeProposal() const
{
	String value;
	check_hresult(shim()->get_AllowNewTimeProposal(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::AllDay() const
{
	String value;
	check_hresult(shim()->get_AllDay(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Details() const
{
	String value;
	check_hresult(shim()->get_Details(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::OnlineMeetingLink() const
{
	String value;
	check_hresult(shim()->get_OnlineMeetingLink(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::ReplyTime() const
{
	String value;
	check_hresult(shim()->get_ReplyTime(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Organizer() const
{
	String value;
	check_hresult(shim()->get_Organizer(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::UserResponse() const
{
	String value;
	check_hresult(shim()->get_UserResponse(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::HasInvitees() const
{
	String value;
	check_hresult(shim()->get_HasInvitees(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::IsCanceledMeeting() const
{
	String value;
	check_hresult(shim()->get_IsCanceledMeeting(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::IsOrganizedByUser() const
{
	String value;
	check_hresult(shim()->get_IsOrganizedByUser(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Recurrence() const
{
	String value;
	check_hresult(shim()->get_Recurrence(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Uri() const
{
	String value;
	check_hresult(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Invitees() const
{
	String value;
	check_hresult(shim()->get_Invitees(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IAppointmentPropertiesStatics<T>::DefaultProperties() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_DefaultProperties(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics2<T>::ChangeNumber() const
{
	String value;
	check_hresult(shim()->get_ChangeNumber(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics2<T>::RemoteChangeNumber() const
{
	String value;
	check_hresult(shim()->get_RemoteChangeNumber(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics2<T>::DetailsKind() const
{
	String value;
	check_hresult(shim()->get_DetailsKind(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentConflictType impl_IAppointmentConflictResult<T>::Type() const
{
	Windows::ApplicationModel::Appointments::AppointmentConflictType value = {};
	check_hresult(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IAppointmentConflictResult<T>::Date() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Date(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::Appointment impl_IAppointmentStoreChange<T>::Appointment() const
{
	Windows::ApplicationModel::Appointments::Appointment value = nullptr;
	check_hresult(shim()->get_Appointment(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentStoreChangeType impl_IAppointmentStoreChange<T>::ChangeType() const
{
	Windows::ApplicationModel::Appointments::AppointmentStoreChangeType value = {};
	check_hresult(shim()->get_ChangeType(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentCalendar impl_IAppointmentStoreChange2<T>::AppointmentCalendar() const
{
	Windows::ApplicationModel::Appointments::AppointmentCalendar value = nullptr;
	check_hresult(shim()->get_AppointmentCalendar(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentStoreChange>> impl_IAppointmentStoreChangeReader<T>::ReadBatchAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentStoreChange>> result;
	check_hresult(shim()->abi_ReadBatchAsync(put(result)));
	return result;
}

template <typename T> void impl_IAppointmentStoreChangeReader<T>::AcceptChanges() const
{
	check_hresult(shim()->abi_AcceptChanges());
}

template <typename T> void impl_IAppointmentStoreChangeReader<T>::AcceptChangesThrough(Windows::ApplicationModel::Appointments::AppointmentStoreChange const & lastChangeToAccept) const
{
	check_hresult(shim()->abi_AcceptChangesThrough(get(lastChangeToAccept)));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentStoreChangeReader impl_IAppointmentStoreChangeTracker<T>::GetChangeReader() const
{
	Windows::ApplicationModel::Appointments::AppointmentStoreChangeReader value = nullptr;
	check_hresult(shim()->abi_GetChangeReader(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentStoreChangeTracker<T>::Enable() const
{
	check_hresult(shim()->abi_Enable());
}

template <typename T> void impl_IAppointmentStoreChangeTracker<T>::Reset() const
{
	check_hresult(shim()->abi_Reset());
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentStoreChangedDeferral impl_IAppointmentStoreChangedEventArgs<T>::GetDeferral() const
{
	Windows::ApplicationModel::Appointments::AppointmentStoreChangedDeferral result = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(result)));
	return result;
}

template <typename T> void impl_IAppointmentStoreChangedDeferral<T>::Complete() const
{
	check_hresult(shim()->abi_Complete());
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentStoreChangeTracker impl_IAppointmentStore<T>::ChangeTracker() const
{
	Windows::ApplicationModel::Appointments::AppointmentStoreChangeTracker value = nullptr;
	check_hresult(shim()->get_ChangeTracker(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentCalendar> impl_IAppointmentStore<T>::CreateAppointmentCalendarAsync(StringReference const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentCalendar> operation;
	check_hresult(shim()->abi_CreateAppointmentCalendarAsync(get(name), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentCalendar> impl_IAppointmentStore<T>::GetAppointmentCalendarAsync(StringReference const & calendarId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentCalendar> result;
	check_hresult(shim()->abi_GetAppointmentCalendarAsync(get(calendarId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> impl_IAppointmentStore<T>::GetAppointmentAsync(StringReference const & localId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> result;
	check_hresult(shim()->abi_GetAppointmentAsync(get(localId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> impl_IAppointmentStore<T>::GetAppointmentInstanceAsync(StringReference const & localId, Windows::Foundation::DateTime const & instanceStartTime) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> result;
	check_hresult(shim()->abi_GetAppointmentInstanceAsync(get(localId), instanceStartTime, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentCalendar>> impl_IAppointmentStore<T>::FindAppointmentCalendarsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentCalendar>> result;
	check_hresult(shim()->abi_FindAppointmentCalendarsAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentCalendar>> impl_IAppointmentStore<T>::FindAppointmentCalendarsAsync(Windows::ApplicationModel::Appointments::FindAppointmentCalendarsOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentCalendar>> result;
	check_hresult(shim()->abi_FindAppointmentCalendarsAsyncWithOptions(options, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> impl_IAppointmentStore<T>::FindAppointmentsAsync(Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> result;
	check_hresult(shim()->abi_FindAppointmentsAsync(rangeStart, rangeLength, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> impl_IAppointmentStore<T>::FindAppointmentsAsync(Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength, Windows::ApplicationModel::Appointments::FindAppointmentsOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> result;
	check_hresult(shim()->abi_FindAppointmentsAsyncWithOptions(rangeStart, rangeLength, get(options), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentConflictResult> impl_IAppointmentStore<T>::FindConflictAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentConflictResult> result;
	check_hresult(shim()->abi_FindConflictAsync(get(appointment), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentConflictResult> impl_IAppointmentStore<T>::FindConflictAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::DateTime const & instanceStartTime) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentConflictResult> result;
	check_hresult(shim()->abi_FindConflictAsyncWithInstanceStart(get(appointment), instanceStartTime, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentStore<T>::MoveAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::ApplicationModel::Appointments::AppointmentCalendar const & destinationCalendar) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check_hresult(shim()->abi_MoveAppointmentAsync(get(appointment), get(destinationCalendar), put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentStore<T>::ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check_hresult(shim()->abi_ShowAddAppointmentAsync(get(appointment), selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentStore<T>::ShowReplaceAppointmentAsync(StringReference const & localId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check_hresult(shim()->abi_ShowReplaceAppointmentAsync(get(localId), get(appointment), selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentStore<T>::ShowReplaceAppointmentAsync(StringReference const & localId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check_hresult(shim()->abi_ShowReplaceAppointmentWithPlacementAndDateAsync(get(localId), get(appointment), selection, preferredPlacement, instanceStartDate, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentStore<T>::ShowRemoveAppointmentAsync(StringReference const & localId, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_ShowRemoveAppointmentAsync(get(localId), selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentStore<T>::ShowRemoveAppointmentAsync(StringReference const & localId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_ShowRemoveAppointmentWithPlacementAndDateAsync(get(localId), selection, preferredPlacement, instanceStartDate, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentStore<T>::ShowAppointmentDetailsAsync(StringReference const & localId) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check_hresult(shim()->abi_ShowAppointmentDetailsAsync(get(localId), put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentStore<T>::ShowAppointmentDetailsAsync(StringReference const & localId, Windows::Foundation::DateTime const & instanceStartDate) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check_hresult(shim()->abi_ShowAppointmentDetailsWithDateAsync(get(localId), instanceStartDate, put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentStore<T>::ShowEditNewAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check_hresult(shim()->abi_ShowEditNewAppointmentAsync(get(appointment), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> impl_IAppointmentStore<T>::FindLocalIdsFromRoamingIdAsync(StringReference const & roamingId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> operation;
	check_hresult(shim()->abi_FindLocalIdsFromRoamingIdAsync(get(roamingId), put(operation)));
	return operation;
}

template <typename T> long long impl_IAppointmentStore2<T>::StoreChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Appointments::AppointmentStore, Windows::ApplicationModel::Appointments::AppointmentStoreChangedEventArgs> const & pHandler) const
{
	long long pToken = {};
	check_hresult(shim()->add_StoreChanged(get(pHandler), &pToken));
	return pToken;
}

template <typename T> template <typename F> long long impl_IAppointmentStore2<T>::StoreChanged(F pHandler) const
{
	return StoreChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Appointments::AppointmentStore, Windows::ApplicationModel::Appointments::AppointmentStoreChangedEventArgs>(pHandler));
}

template <typename T> void impl_IAppointmentStore2<T>::StoreChanged(long long const token) const
{
	check_hresult(shim()->remove_StoreChanged(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentCalendar> impl_IAppointmentStore2<T>::CreateAppointmentCalendarAsync(StringReference const & name, StringReference const & userDataAccountId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentCalendar> operation;
	check_hresult(shim()->abi_CreateAppointmentCalendarInAccountAsync(get(name), get(userDataAccountId), put(operation)));
	return operation;
}

template <typename T> Windows::ApplicationModel::Appointments::Appointment impl_IAppointmentException<T>::Appointment() const
{
	Windows::ApplicationModel::Appointments::Appointment value = nullptr;
	check_hresult(shim()->get_Appointment(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IAppointmentException<T>::ExceptionProperties() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_ExceptionProperties(put(value)));
	return value;
}

template <typename T> bool impl_IAppointmentException<T>::IsDeleted() const
{
	bool value = {};
	check_hresult(shim()->get_IsDeleted(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

template <typename T> String impl_IAppointmentsProviderLaunchActionVerbsStatics<T>::AddAppointment() const
{
	String value;
	check_hresult(shim()->get_AddAppointment(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderLaunchActionVerbsStatics<T>::ReplaceAppointment() const
{
	String value;
	check_hresult(shim()->get_ReplaceAppointment(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderLaunchActionVerbsStatics<T>::RemoveAppointment() const
{
	String value;
	check_hresult(shim()->get_RemoveAppointment(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderLaunchActionVerbsStatics<T>::ShowTimeFrame() const
{
	String value;
	check_hresult(shim()->get_ShowTimeFrame(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderLaunchActionVerbsStatics2<T>::ShowAppointmentDetails() const
{
	String value;
	check_hresult(shim()->get_ShowAppointmentDetails(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::Appointment impl_IAddAppointmentOperation<T>::AppointmentInformation() const
{
	Windows::ApplicationModel::Appointments::Appointment value = nullptr;
	check_hresult(shim()->get_AppointmentInformation(put(value)));
	return value;
}

template <typename T> String impl_IAddAppointmentOperation<T>::SourcePackageFamilyName() const
{
	String value;
	check_hresult(shim()->get_SourcePackageFamilyName(put(value)));
	return value;
}

template <typename T> void impl_IAddAppointmentOperation<T>::ReportCompleted(StringReference const & itemId) const
{
	check_hresult(shim()->abi_ReportCompleted(get(itemId)));
}

template <typename T> void impl_IAddAppointmentOperation<T>::ReportCanceled() const
{
	check_hresult(shim()->abi_ReportCanceled());
}

template <typename T> void impl_IAddAppointmentOperation<T>::ReportError(StringReference const & value) const
{
	check_hresult(shim()->abi_ReportError(get(value)));
}

template <typename T> void impl_IAddAppointmentOperation<T>::DismissUI() const
{
	check_hresult(shim()->abi_DismissUI());
}

template <typename T> String impl_IReplaceAppointmentOperation<T>::AppointmentId() const
{
	String value;
	check_hresult(shim()->get_AppointmentId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::Appointment impl_IReplaceAppointmentOperation<T>::AppointmentInformation() const
{
	Windows::ApplicationModel::Appointments::Appointment value = nullptr;
	check_hresult(shim()->get_AppointmentInformation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IReplaceAppointmentOperation<T>::InstanceStartDate() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check_hresult(shim()->get_InstanceStartDate(put(value)));
	return value;
}

template <typename T> String impl_IReplaceAppointmentOperation<T>::SourcePackageFamilyName() const
{
	String value;
	check_hresult(shim()->get_SourcePackageFamilyName(put(value)));
	return value;
}

template <typename T> void impl_IReplaceAppointmentOperation<T>::ReportCompleted(StringReference const & itemId) const
{
	check_hresult(shim()->abi_ReportCompleted(get(itemId)));
}

template <typename T> void impl_IReplaceAppointmentOperation<T>::ReportCanceled() const
{
	check_hresult(shim()->abi_ReportCanceled());
}

template <typename T> void impl_IReplaceAppointmentOperation<T>::ReportError(StringReference const & value) const
{
	check_hresult(shim()->abi_ReportError(get(value)));
}

template <typename T> void impl_IReplaceAppointmentOperation<T>::DismissUI() const
{
	check_hresult(shim()->abi_DismissUI());
}

template <typename T> String impl_IRemoveAppointmentOperation<T>::AppointmentId() const
{
	String value;
	check_hresult(shim()->get_AppointmentId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IRemoveAppointmentOperation<T>::InstanceStartDate() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check_hresult(shim()->get_InstanceStartDate(put(value)));
	return value;
}

template <typename T> String impl_IRemoveAppointmentOperation<T>::SourcePackageFamilyName() const
{
	String value;
	check_hresult(shim()->get_SourcePackageFamilyName(put(value)));
	return value;
}

template <typename T> void impl_IRemoveAppointmentOperation<T>::ReportCompleted() const
{
	check_hresult(shim()->abi_ReportCompleted());
}

template <typename T> void impl_IRemoveAppointmentOperation<T>::ReportCanceled() const
{
	check_hresult(shim()->abi_ReportCanceled());
}

template <typename T> void impl_IRemoveAppointmentOperation<T>::ReportError(StringReference const & value) const
{
	check_hresult(shim()->abi_ReportError(get(value)));
}

template <typename T> void impl_IRemoveAppointmentOperation<T>::DismissUI() const
{
	check_hresult(shim()->abi_DismissUI());
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Background {

template <typename T> void impl_IBackgroundTaskCanceledEventHandler<T>::Invoke(Windows::ApplicationModel::Background::IBackgroundTaskInstance const & sender, Windows::ApplicationModel::Background::BackgroundTaskCancellationReason const reason) const
{
	check_hresult(shim()->abi_Invoke(get(sender), reason));
}

template <typename T> void impl_IBackgroundTaskProgressEventHandler<T>::Invoke(Windows::ApplicationModel::Background::BackgroundTaskRegistration const & sender, Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs const & args) const
{
	check_hresult(shim()->abi_Invoke(get(sender), get(args)));
}

template <typename T> void impl_IBackgroundTaskCompletedEventHandler<T>::Invoke(Windows::ApplicationModel::Background::BackgroundTaskRegistration const & sender, Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs const & args) const
{
	check_hresult(shim()->abi_Invoke(get(sender), get(args)));
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::AlarmAccessStatus> impl_IAlarmApplicationManagerStatics<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::AlarmAccessStatus> operation;
	check_hresult(shim()->abi_RequestAccessAsync(put(operation)));
	return operation;
}

template <typename T> Windows::ApplicationModel::Background::AlarmAccessStatus impl_IAlarmApplicationManagerStatics<T>::GetAccessStatus() const
{
	Windows::ApplicationModel::Background::AlarmAccessStatus status = {};
	check_hresult(shim()->abi_GetAccessStatus(&status));
	return status;
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_IApplicationTriggerDetails<T>::Arguments() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check_hresult(shim()->get_Arguments(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::BackgroundAccessStatus> impl_IBackgroundExecutionManagerStatics<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::BackgroundAccessStatus> operation;
	check_hresult(shim()->abi_RequestAccessAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::BackgroundAccessStatus> impl_IBackgroundExecutionManagerStatics<T>::RequestAccessAsync(StringReference const & applicationId) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::BackgroundAccessStatus> operation;
	check_hresult(shim()->abi_RequestAccessForApplicationAsync(get(applicationId), put(operation)));
	return operation;
}

template <typename T> void impl_IBackgroundExecutionManagerStatics<T>::RemoveAccess() const
{
	check_hresult(shim()->abi_RemoveAccess());
}

template <typename T> void impl_IBackgroundExecutionManagerStatics<T>::RemoveAccess(StringReference const & applicationId) const
{
	check_hresult(shim()->abi_RemoveAccessForApplication(get(applicationId)));
}

template <typename T> Windows::ApplicationModel::Background::BackgroundAccessStatus impl_IBackgroundExecutionManagerStatics<T>::GetAccessStatus() const
{
	Windows::ApplicationModel::Background::BackgroundAccessStatus status = {};
	check_hresult(shim()->abi_GetAccessStatus(&status));
	return status;
}

template <typename T> Windows::ApplicationModel::Background::BackgroundAccessStatus impl_IBackgroundExecutionManagerStatics<T>::GetAccessStatus(StringReference const & applicationId) const
{
	Windows::ApplicationModel::Background::BackgroundAccessStatus status = {};
	check_hresult(shim()->abi_GetAccessStatusForApplication(get(applicationId), &status));
	return status;
}

template <typename T> GUID impl_IBackgroundTaskInstance<T>::InstanceId() const
{
	GUID value = {};
	check_hresult(shim()->get_InstanceId(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::BackgroundTaskRegistration impl_IBackgroundTaskInstance<T>::Task() const
{
	Windows::ApplicationModel::Background::BackgroundTaskRegistration task = nullptr;
	check_hresult(shim()->get_Task(put(task)));
	return task;
}

template <typename T> unsigned impl_IBackgroundTaskInstance<T>::Progress() const
{
	unsigned value = {};
	check_hresult(shim()->get_Progress(&value));
	return value;
}

template <typename T> void impl_IBackgroundTaskInstance<T>::Progress(unsigned const value) const
{
	check_hresult(shim()->put_Progress(value));
}

template <typename T> IInspectable impl_IBackgroundTaskInstance<T>::TriggerDetails() const
{
	IInspectable triggerDetails;
	check_hresult(shim()->get_TriggerDetails(put(triggerDetails)));
	return triggerDetails;
}

template <typename T> long long impl_IBackgroundTaskInstance<T>::Canceled(Windows::ApplicationModel::Background::IBackgroundTaskCanceledEventHandler const & cancelHandler) const
{
	long long cookie = {};
	check_hresult(shim()->add_Canceled(get(cancelHandler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IBackgroundTaskInstance<T>::Canceled(F cancelHandler) const
{
	return Canceled(Windows::ApplicationModel::Background::BackgroundTaskCanceledEventHandler(cancelHandler));
}

template <typename T> void impl_IBackgroundTaskInstance<T>::Canceled(long long const cookie) const
{
	check_hresult(shim()->remove_Canceled(cookie));
}

template <typename T> unsigned impl_IBackgroundTaskInstance<T>::SuspendedCount() const
{
	unsigned value = {};
	check_hresult(shim()->get_SuspendedCount(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::BackgroundTaskDeferral impl_IBackgroundTaskInstance<T>::GetDeferral() const
{
	Windows::ApplicationModel::Background::BackgroundTaskDeferral deferral = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> Windows::ApplicationModel::Background::BackgroundWorkCostValue impl_IBackgroundWorkCostStatics<T>::CurrentBackgroundWorkCost() const
{
	Windows::ApplicationModel::Background::BackgroundWorkCostValue value = {};
	check_hresult(shim()->get_CurrentBackgroundWorkCost(&value));
	return value;
}

template <typename T> void impl_IBackgroundTaskDeferral<T>::Complete() const
{
	check_hresult(shim()->abi_Complete());
}

template <typename T> unsigned impl_IBackgroundTaskInstance2<T>::GetThrottleCount(Windows::ApplicationModel::Background::BackgroundTaskThrottleCounter const counter) const
{
	unsigned value = {};
	check_hresult(shim()->abi_GetThrottleCount(counter, &value));
	return value;
}

template <typename T> void impl_IBackgroundTask<T>::Run(Windows::ApplicationModel::Background::IBackgroundTaskInstance const & taskInstance) const
{
	check_hresult(shim()->abi_Run(get(taskInstance)));
}

template <typename T> GUID impl_IBackgroundTaskRegistration<T>::TaskId() const
{
	GUID value = {};
	check_hresult(shim()->get_TaskId(&value));
	return value;
}

template <typename T> String impl_IBackgroundTaskRegistration<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> long long impl_IBackgroundTaskRegistration<T>::Progress(Windows::ApplicationModel::Background::IBackgroundTaskProgressEventHandler const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_Progress(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IBackgroundTaskRegistration<T>::Progress(F handler) const
{
	return Progress(Windows::ApplicationModel::Background::BackgroundTaskProgressEventHandler(handler));
}

template <typename T> void impl_IBackgroundTaskRegistration<T>::Progress(long long const cookie) const
{
	check_hresult(shim()->remove_Progress(cookie));
}

template <typename T> long long impl_IBackgroundTaskRegistration<T>::Completed(Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventHandler const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_Completed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IBackgroundTaskRegistration<T>::Completed(F handler) const
{
	return Completed(Windows::ApplicationModel::Background::BackgroundTaskCompletedEventHandler(handler));
}

template <typename T> void impl_IBackgroundTaskRegistration<T>::Completed(long long const cookie) const
{
	check_hresult(shim()->remove_Completed(cookie));
}

template <typename T> void impl_IBackgroundTaskRegistration<T>::Unregister(bool const cancelTask) const
{
	check_hresult(shim()->abi_Unregister(cancelTask));
}

template <typename T> Windows::ApplicationModel::Background::IBackgroundTrigger impl_IBackgroundTaskRegistration2<T>::Trigger() const
{
	Windows::ApplicationModel::Background::IBackgroundTrigger value;
	check_hresult(shim()->get_Trigger(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::ApplicationTriggerResult> impl_IApplicationTrigger<T>::RequestAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::ApplicationTriggerResult> result;
	check_hresult(shim()->abi_RequestAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::ApplicationTriggerResult> impl_IApplicationTrigger<T>::RequestAsync(Windows::Foundation::Collections::ValueSet const & arguments) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::ApplicationTriggerResult> result;
	check_hresult(shim()->abi_RequestAsyncWithArguments(get(arguments), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::MediaProcessingTriggerResult> impl_IMediaProcessingTrigger<T>::RequestAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::MediaProcessingTriggerResult> result;
	check_hresult(shim()->abi_RequestAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::MediaProcessingTriggerResult> impl_IMediaProcessingTrigger<T>::RequestAsync(Windows::Foundation::Collections::ValueSet const & arguments) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::MediaProcessingTriggerResult> result;
	check_hresult(shim()->abi_RequestAsyncWithArguments(get(arguments), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IMapView<GUID, Windows::ApplicationModel::Background::IBackgroundTaskRegistration> impl_IBackgroundTaskRegistrationStatics<T>::AllTasks() const
{
	Windows::Foundation::Collections::IMapView<GUID, Windows::ApplicationModel::Background::IBackgroundTaskRegistration> tasks;
	check_hresult(shim()->get_AllTasks(put(tasks)));
	return tasks;
}

template <typename T> void impl_IBackgroundTaskBuilder<T>::TaskEntryPoint(StringReference const & value) const
{
	check_hresult(shim()->put_TaskEntryPoint(get(value)));
}

template <typename T> String impl_IBackgroundTaskBuilder<T>::TaskEntryPoint() const
{
	String value;
	check_hresult(shim()->get_TaskEntryPoint(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundTaskBuilder<T>::SetTrigger(Windows::ApplicationModel::Background::IBackgroundTrigger const & trigger) const
{
	check_hresult(shim()->abi_SetTrigger(get(trigger)));
}

template <typename T> void impl_IBackgroundTaskBuilder<T>::AddCondition(Windows::ApplicationModel::Background::IBackgroundCondition const & condition) const
{
	check_hresult(shim()->abi_AddCondition(get(condition)));
}

template <typename T> void impl_IBackgroundTaskBuilder<T>::Name(StringReference const & value) const
{
	check_hresult(shim()->put_Name(get(value)));
}

template <typename T> String impl_IBackgroundTaskBuilder<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::BackgroundTaskRegistration impl_IBackgroundTaskBuilder<T>::Register() const
{
	Windows::ApplicationModel::Background::BackgroundTaskRegistration task = nullptr;
	check_hresult(shim()->abi_Register(put(task)));
	return task;
}

template <typename T> void impl_IBackgroundTaskBuilder2<T>::CancelOnConditionLoss(bool const value) const
{
	check_hresult(shim()->put_CancelOnConditionLoss(value));
}

template <typename T> bool impl_IBackgroundTaskBuilder2<T>::CancelOnConditionLoss() const
{
	bool value = {};
	check_hresult(shim()->get_CancelOnConditionLoss(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundTaskBuilder3<T>::IsNetworkRequested(bool const value) const
{
	check_hresult(shim()->put_IsNetworkRequested(value));
}

template <typename T> bool impl_IBackgroundTaskBuilder3<T>::IsNetworkRequested() const
{
	bool value = {};
	check_hresult(shim()->get_IsNetworkRequested(put(value)));
	return value;
}

template <typename T> GUID impl_IBackgroundTaskCompletedEventArgs<T>::InstanceId() const
{
	GUID value = {};
	check_hresult(shim()->get_InstanceId(&value));
	return value;
}

template <typename T> void impl_IBackgroundTaskCompletedEventArgs<T>::CheckResult() const
{
	check_hresult(shim()->abi_CheckResult());
}

template <typename T> GUID impl_IBackgroundTaskProgressEventArgs<T>::InstanceId() const
{
	GUID value = {};
	check_hresult(shim()->get_InstanceId(&value));
	return value;
}

template <typename T> unsigned impl_IBackgroundTaskProgressEventArgs<T>::Progress() const
{
	unsigned value = {};
	check_hresult(shim()->get_Progress(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IContentPrefetchTrigger<T>::WaitInterval() const
{
	Windows::Foundation::TimeSpan waitInterval = {};
	check_hresult(shim()->get_WaitInterval(&waitInterval));
	return waitInterval;
}

template <typename T> Windows::ApplicationModel::Background::ContentPrefetchTrigger impl_IContentPrefetchTriggerFactory<T>::Create(Windows::Foundation::TimeSpan const & waitInterval) const
{
	Windows::ApplicationModel::Background::ContentPrefetchTrigger trigger = nullptr;
	check_hresult(shim()->abi_Create(waitInterval, put(trigger)));
	return trigger;
}

template <typename T> Windows::ApplicationModel::Background::SmsMessageReceivedTrigger impl_ISmsMessageReceivedTriggerFactory<T>::Create(Windows::Devices::Sms::SmsFilterRules const & filterRules) const
{
	Windows::ApplicationModel::Background::SmsMessageReceivedTrigger value = nullptr;
	check_hresult(shim()->abi_Create(get(filterRules), put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger impl_IStorageLibraryContentChangedTriggerStatics<T>::Create(Windows::Storage::StorageLibrary const & storageLibrary) const
{
	Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger result = nullptr;
	check_hresult(shim()->abi_Create(get(storageLibrary), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger impl_IStorageLibraryContentChangedTriggerStatics<T>::CreateFromLibraries(Windows::Foundation::Collections::IIterable<Windows::Storage::StorageLibrary> const & storageLibraries) const
{
	Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger result = nullptr;
	check_hresult(shim()->abi_CreateFromLibraries(get(storageLibraries), put(result)));
	return result;
}

template <typename T> bool impl_ISystemTrigger<T>::OneShot() const
{
	bool oneShot = {};
	check_hresult(shim()->get_OneShot(put(oneShot)));
	return oneShot;
}

template <typename T> Windows::ApplicationModel::Background::SystemTriggerType impl_ISystemTrigger<T>::TriggerType() const
{
	Windows::ApplicationModel::Background::SystemTriggerType triggerType = {};
	check_hresult(shim()->get_TriggerType(&triggerType));
	return triggerType;
}

template <typename T> Windows::ApplicationModel::Background::SystemTrigger impl_ISystemTriggerFactory<T>::Create(Windows::ApplicationModel::Background::SystemTriggerType const triggerType, bool const oneShot) const
{
	Windows::ApplicationModel::Background::SystemTrigger trigger = nullptr;
	check_hresult(shim()->abi_Create(triggerType, oneShot, put(trigger)));
	return trigger;
}

template <typename T> Windows::ApplicationModel::Background::SystemConditionType impl_ISystemCondition<T>::ConditionType() const
{
	Windows::ApplicationModel::Background::SystemConditionType conditionType = {};
	check_hresult(shim()->get_ConditionType(&conditionType));
	return conditionType;
}

template <typename T> Windows::ApplicationModel::Background::SystemCondition impl_ISystemConditionFactory<T>::Create(Windows::ApplicationModel::Background::SystemConditionType const conditionType) const
{
	Windows::ApplicationModel::Background::SystemCondition condition = nullptr;
	check_hresult(shim()->abi_Create(conditionType, put(condition)));
	return condition;
}

template <typename T> String impl_INetworkOperatorNotificationTrigger<T>::NetworkAccountId() const
{
	String value;
	check_hresult(shim()->get_NetworkAccountId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger impl_INetworkOperatorNotificationTriggerFactory<T>::Create(StringReference const & networkAccountId) const
{
	Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger trigger = nullptr;
	check_hresult(shim()->abi_Create(get(networkAccountId), put(trigger)));
	return trigger;
}

template <typename T> Windows::Storage::Provider::CachedFileTarget impl_ICachedFileUpdaterTriggerDetails<T>::UpdateTarget() const
{
	Windows::Storage::Provider::CachedFileTarget value = {};
	check_hresult(shim()->get_UpdateTarget(&value));
	return value;
}

template <typename T> Windows::Storage::Provider::FileUpdateRequest impl_ICachedFileUpdaterTriggerDetails<T>::UpdateRequest() const
{
	Windows::Storage::Provider::FileUpdateRequest value = nullptr;
	check_hresult(shim()->get_UpdateRequest(put(value)));
	return value;
}

template <typename T> bool impl_ICachedFileUpdaterTriggerDetails<T>::CanRequestUserInput() const
{
	bool value = {};
	check_hresult(shim()->get_CanRequestUserInput(put(value)));
	return value;
}

template <typename T> unsigned impl_ITimeTrigger<T>::FreshnessTime() const
{
	unsigned freshnessTime = {};
	check_hresult(shim()->get_FreshnessTime(&freshnessTime));
	return freshnessTime;
}

template <typename T> bool impl_ITimeTrigger<T>::OneShot() const
{
	bool oneShot = {};
	check_hresult(shim()->get_OneShot(put(oneShot)));
	return oneShot;
}

template <typename T> Windows::ApplicationModel::Background::TimeTrigger impl_ITimeTriggerFactory<T>::Create(unsigned const freshnessTime, bool const oneShot) const
{
	Windows::ApplicationModel::Background::TimeTrigger trigger = nullptr;
	check_hresult(shim()->abi_Create(freshnessTime, oneShot, put(trigger)));
	return trigger;
}

template <typename T> unsigned impl_IMaintenanceTrigger<T>::FreshnessTime() const
{
	unsigned freshnessTime = {};
	check_hresult(shim()->get_FreshnessTime(&freshnessTime));
	return freshnessTime;
}

template <typename T> bool impl_IMaintenanceTrigger<T>::OneShot() const
{
	bool oneShot = {};
	check_hresult(shim()->get_OneShot(put(oneShot)));
	return oneShot;
}

template <typename T> Windows::ApplicationModel::Background::MaintenanceTrigger impl_IMaintenanceTriggerFactory<T>::Create(unsigned const freshnessTime, bool const oneShot) const
{
	Windows::ApplicationModel::Background::MaintenanceTrigger trigger = nullptr;
	check_hresult(shim()->abi_Create(freshnessTime, oneShot, put(trigger)));
	return trigger;
}

template <typename T> bool impl_IPhoneTrigger<T>::OneShot() const
{
	bool value = {};
	check_hresult(shim()->get_OneShot(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::Background::PhoneTriggerType impl_IPhoneTrigger<T>::TriggerType() const
{
	Windows::ApplicationModel::Calls::Background::PhoneTriggerType result = {};
	check_hresult(shim()->get_TriggerType(&result));
	return result;
}

template <typename T> Windows::ApplicationModel::Background::PhoneTrigger impl_IPhoneTriggerFactory<T>::Create(Windows::ApplicationModel::Calls::Background::PhoneTriggerType const type, bool const oneShot) const
{
	Windows::ApplicationModel::Background::PhoneTrigger result = nullptr;
	check_hresult(shim()->abi_Create(type, oneShot, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> impl_IDeviceUseTrigger<T>::RequestAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> result;
	check_hresult(shim()->abi_RequestAsyncSimple(get(deviceId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> impl_IDeviceUseTrigger<T>::RequestAsync(StringReference const & deviceId, StringReference const & arguments) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> result;
	check_hresult(shim()->abi_RequestAsyncWithArguments(get(deviceId), get(arguments), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> impl_IDeviceServicingTrigger<T>::RequestAsync(StringReference const & deviceId, Windows::Foundation::TimeSpan const & expectedDuration) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> result;
	check_hresult(shim()->abi_RequestAsyncSimple(get(deviceId), expectedDuration, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> impl_IDeviceServicingTrigger<T>::RequestAsync(StringReference const & deviceId, Windows::Foundation::TimeSpan const & expectedDuration, StringReference const & arguments) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> result;
	check_hresult(shim()->abi_RequestAsyncWithArguments(get(deviceId), expectedDuration, get(arguments), put(result)));
	return result;
}

template <typename T> Windows::Devices::Bluetooth::Background::RfcommInboundConnectionInformation impl_IRfcommConnectionTrigger<T>::InboundConnection() const
{
	Windows::Devices::Bluetooth::Background::RfcommInboundConnectionInformation value = nullptr;
	check_hresult(shim()->get_InboundConnection(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Background::RfcommOutboundConnectionInformation impl_IRfcommConnectionTrigger<T>::OutboundConnection() const
{
	Windows::Devices::Bluetooth::Background::RfcommOutboundConnectionInformation value = nullptr;
	check_hresult(shim()->get_OutboundConnection(put(value)));
	return value;
}

template <typename T> bool impl_IRfcommConnectionTrigger<T>::AllowMultipleConnections() const
{
	bool value = {};
	check_hresult(shim()->get_AllowMultipleConnections(put(value)));
	return value;
}

template <typename T> void impl_IRfcommConnectionTrigger<T>::AllowMultipleConnections(bool const value) const
{
	check_hresult(shim()->put_AllowMultipleConnections(value));
}

template <typename T> Windows::Networking::Sockets::SocketProtectionLevel impl_IRfcommConnectionTrigger<T>::ProtectionLevel() const
{
	Windows::Networking::Sockets::SocketProtectionLevel value = {};
	check_hresult(shim()->get_ProtectionLevel(&value));
	return value;
}

template <typename T> void impl_IRfcommConnectionTrigger<T>::ProtectionLevel(Windows::Networking::Sockets::SocketProtectionLevel const value) const
{
	check_hresult(shim()->put_ProtectionLevel(value));
}

template <typename T> Windows::Networking::HostName impl_IRfcommConnectionTrigger<T>::RemoteHostName() const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->get_RemoteHostName(put(value)));
	return value;
}

template <typename T> void impl_IRfcommConnectionTrigger<T>::RemoteHostName(Windows::Networking::HostName const & value) const
{
	check_hresult(shim()->put_RemoteHostName(get(value)));
}

template <typename T> String impl_IDeviceConnectionChangeTrigger<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> bool impl_IDeviceConnectionChangeTrigger<T>::CanMaintainConnection() const
{
	bool value = {};
	check_hresult(shim()->get_CanMaintainConnection(put(value)));
	return value;
}

template <typename T> bool impl_IDeviceConnectionChangeTrigger<T>::MaintainConnection() const
{
	bool value = {};
	check_hresult(shim()->get_MaintainConnection(put(value)));
	return value;
}

template <typename T> void impl_IDeviceConnectionChangeTrigger<T>::MaintainConnection(bool const value) const
{
	check_hresult(shim()->put_MaintainConnection(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Background::DeviceConnectionChangeTrigger> impl_IDeviceConnectionChangeTriggerStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Background::DeviceConnectionChangeTrigger> deviceChangeTrigger;
	check_hresult(shim()->abi_FromIdAsync(get(deviceId), put(deviceChangeTrigger)));
	return deviceChangeTrigger;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic impl_IGattCharacteristicNotificationTrigger<T>::Characteristic() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic value = nullptr;
	check_hresult(shim()->get_Characteristic(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::GattCharacteristicNotificationTrigger impl_IGattCharacteristicNotificationTriggerFactory<T>::Create(Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic const & characteristic) const
{
	Windows::ApplicationModel::Background::GattCharacteristicNotificationTrigger gattCharacteristicNotificationTrigger = nullptr;
	check_hresult(shim()->abi_Create(get(characteristic), put(gattCharacteristicNotificationTrigger)));
	return gattCharacteristicNotificationTrigger;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBluetoothLEAdvertisementWatcherTrigger<T>::MinSamplingInterval() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_MinSamplingInterval(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBluetoothLEAdvertisementWatcherTrigger<T>::MaxSamplingInterval() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_MaxSamplingInterval(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBluetoothLEAdvertisementWatcherTrigger<T>::MinOutOfRangeTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_MinOutOfRangeTimeout(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBluetoothLEAdvertisementWatcherTrigger<T>::MaxOutOfRangeTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_MaxOutOfRangeTimeout(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter impl_IBluetoothLEAdvertisementWatcherTrigger<T>::SignalStrengthFilter() const
{
	Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter value = nullptr;
	check_hresult(shim()->get_SignalStrengthFilter(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcherTrigger<T>::SignalStrengthFilter(Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter const & value) const
{
	check_hresult(shim()->put_SignalStrengthFilter(get(value)));
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter impl_IBluetoothLEAdvertisementWatcherTrigger<T>::AdvertisementFilter() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter value = nullptr;
	check_hresult(shim()->get_AdvertisementFilter(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcherTrigger<T>::AdvertisementFilter(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter const & value) const
{
	check_hresult(shim()->put_AdvertisementFilter(get(value)));
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement impl_IBluetoothLEAdvertisementPublisherTrigger<T>::Advertisement() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement value = nullptr;
	check_hresult(shim()->get_Advertisement(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::LocationTriggerType impl_ILocationTrigger<T>::TriggerType() const
{
	Windows::ApplicationModel::Background::LocationTriggerType triggerType = {};
	check_hresult(shim()->get_TriggerType(&triggerType));
	return triggerType;
}

template <typename T> Windows::ApplicationModel::Background::LocationTrigger impl_ILocationTriggerFactory<T>::Create(Windows::ApplicationModel::Background::LocationTriggerType const triggerType) const
{
	Windows::ApplicationModel::Background::LocationTrigger locationTrigger = nullptr;
	check_hresult(shim()->abi_Create(triggerType, put(locationTrigger)));
	return locationTrigger;
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Sensors::ActivityType> impl_IActivitySensorTrigger<T>::SubscribedActivities() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Sensors::ActivityType> value;
	check_hresult(shim()->get_SubscribedActivities(put(value)));
	return value;
}

template <typename T> unsigned impl_IActivitySensorTrigger<T>::ReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Sensors::ActivityType> impl_IActivitySensorTrigger<T>::SupportedActivities() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Sensors::ActivityType> value;
	check_hresult(shim()->get_SupportedActivities(put(value)));
	return value;
}

template <typename T> unsigned impl_IActivitySensorTrigger<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::ActivitySensorTrigger impl_IActivitySensorTriggerFactory<T>::Create(unsigned const reportIntervalInMilliseconds) const
{
	Windows::ApplicationModel::Background::ActivitySensorTrigger activityTrigger = nullptr;
	check_hresult(shim()->abi_Create(reportIntervalInMilliseconds, put(activityTrigger)));
	return activityTrigger;
}

template <typename T> Windows::ApplicationModel::Background::SensorDataThresholdTrigger impl_ISensorDataThresholdTriggerFactory<T>::Create(Windows::Devices::Sensors::ISensorDataThreshold const & threshold) const
{
	Windows::ApplicationModel::Background::SensorDataThresholdTrigger trigger = nullptr;
	check_hresult(shim()->abi_Create(get(threshold), put(trigger)));
	return trigger;
}

template <typename T> Windows::ApplicationModel::Background::PushNotificationTrigger impl_IPushNotificationTriggerFactory<T>::Create(StringReference const & applicationId) const
{
	Windows::ApplicationModel::Background::PushNotificationTrigger trigger = nullptr;
	check_hresult(shim()->abi_Create(get(applicationId), put(trigger)));
	return trigger;
}

template <typename T> Windows::ApplicationModel::Background::ToastNotificationHistoryChangedTrigger impl_IToastNotificationHistoryChangedTriggerFactory<T>::Create(StringReference const & applicationId) const
{
	Windows::ApplicationModel::Background::ToastNotificationHistoryChangedTrigger trigger = nullptr;
	check_hresult(shim()->abi_Create(get(applicationId), put(trigger)));
	return trigger;
}

template <typename T> Windows::ApplicationModel::Background::ToastNotificationActionTrigger impl_IToastNotificationActionTriggerFactory<T>::Create(StringReference const & applicationId) const
{
	Windows::ApplicationModel::Background::ToastNotificationActionTrigger trigger = nullptr;
	check_hresult(shim()->abi_Create(get(applicationId), put(trigger)));
	return trigger;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls {

template <typename T> String impl_IPhoneCallHistoryEntry<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress impl_IPhoneCallHistoryEntry<T>::Address() const
{
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress value = nullptr;
	check_hresult(shim()->get_Address(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::Address(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress const & value) const
{
	check_hresult(shim()->put_Address(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IPhoneCallHistoryEntry<T>::Duration() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check_hresult(shim()->get_Duration(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::Duration(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check_hresult(shim()->put_Duration(get(value)));
}

template <typename T> bool impl_IPhoneCallHistoryEntry<T>::IsCallerIdBlocked() const
{
	bool value = {};
	check_hresult(shim()->get_IsCallerIdBlocked(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::IsCallerIdBlocked(bool const value) const
{
	check_hresult(shim()->put_IsCallerIdBlocked(value));
}

template <typename T> bool impl_IPhoneCallHistoryEntry<T>::IsEmergency() const
{
	bool value = {};
	check_hresult(shim()->get_IsEmergency(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::IsEmergency(bool const value) const
{
	check_hresult(shim()->put_IsEmergency(value));
}

template <typename T> bool impl_IPhoneCallHistoryEntry<T>::IsIncoming() const
{
	bool value = {};
	check_hresult(shim()->get_IsIncoming(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::IsIncoming(bool const value) const
{
	check_hresult(shim()->put_IsIncoming(value));
}

template <typename T> bool impl_IPhoneCallHistoryEntry<T>::IsMissed() const
{
	bool value = {};
	check_hresult(shim()->get_IsMissed(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::IsMissed(bool const value) const
{
	check_hresult(shim()->put_IsMissed(value));
}

template <typename T> bool impl_IPhoneCallHistoryEntry<T>::IsRinging() const
{
	bool value = {};
	check_hresult(shim()->get_IsRinging(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::IsRinging(bool const value) const
{
	check_hresult(shim()->put_IsRinging(value));
}

template <typename T> bool impl_IPhoneCallHistoryEntry<T>::IsSeen() const
{
	bool value = {};
	check_hresult(shim()->get_IsSeen(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::IsSeen(bool const value) const
{
	check_hresult(shim()->put_IsSeen(value));
}

template <typename T> bool impl_IPhoneCallHistoryEntry<T>::IsSuppressed() const
{
	bool value = {};
	check_hresult(shim()->get_IsSuppressed(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::IsSuppressed(bool const value) const
{
	check_hresult(shim()->put_IsSuppressed(value));
}

template <typename T> bool impl_IPhoneCallHistoryEntry<T>::IsVoicemail() const
{
	bool value = {};
	check_hresult(shim()->get_IsVoicemail(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::IsVoicemail(bool const value) const
{
	check_hresult(shim()->put_IsVoicemail(value));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistoryEntryMedia impl_IPhoneCallHistoryEntry<T>::Media() const
{
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryMedia value = {};
	check_hresult(shim()->get_Media(&value));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::Media(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryMedia const value) const
{
	check_hresult(shim()->put_Media(value));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistoryEntryOtherAppReadAccess impl_IPhoneCallHistoryEntry<T>::OtherAppReadAccess() const
{
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryOtherAppReadAccess value = {};
	check_hresult(shim()->get_OtherAppReadAccess(&value));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::OtherAppReadAccess(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryOtherAppReadAccess const value) const
{
	check_hresult(shim()->put_OtherAppReadAccess(value));
}

template <typename T> String impl_IPhoneCallHistoryEntry<T>::RemoteId() const
{
	String value;
	check_hresult(shim()->get_RemoteId(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::RemoteId(StringReference const & value) const
{
	check_hresult(shim()->put_RemoteId(get(value)));
}

template <typename T> String impl_IPhoneCallHistoryEntry<T>::SourceDisplayName() const
{
	String value;
	check_hresult(shim()->get_SourceDisplayName(put(value)));
	return value;
}

template <typename T> String impl_IPhoneCallHistoryEntry<T>::SourceId() const
{
	String value;
	check_hresult(shim()->get_SourceId(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::SourceId(StringReference const & value) const
{
	check_hresult(shim()->put_SourceId(get(value)));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistorySourceIdKind impl_IPhoneCallHistoryEntry<T>::SourceIdKind() const
{
	Windows::ApplicationModel::Calls::PhoneCallHistorySourceIdKind value = {};
	check_hresult(shim()->get_SourceIdKind(&value));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::SourceIdKind(Windows::ApplicationModel::Calls::PhoneCallHistorySourceIdKind const value) const
{
	check_hresult(shim()->put_SourceIdKind(value));
}

template <typename T> Windows::Foundation::DateTime impl_IPhoneCallHistoryEntry<T>::StartTime() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_StartTime(&value));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::StartTime(Windows::Foundation::DateTime const & value) const
{
	check_hresult(shim()->put_StartTime(value));
}

template <typename T> String impl_IPhoneCallHistoryEntryAddress<T>::ContactId() const
{
	String value;
	check_hresult(shim()->get_ContactId(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntryAddress<T>::ContactId(StringReference const & value) const
{
	check_hresult(shim()->put_ContactId(get(value)));
}

template <typename T> String impl_IPhoneCallHistoryEntryAddress<T>::DisplayName() const
{
	String value;
	check_hresult(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntryAddress<T>::DisplayName(StringReference const & value) const
{
	check_hresult(shim()->put_DisplayName(get(value)));
}

template <typename T> String impl_IPhoneCallHistoryEntryAddress<T>::RawAddress() const
{
	String value;
	check_hresult(shim()->get_RawAddress(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntryAddress<T>::RawAddress(StringReference const & value) const
{
	check_hresult(shim()->put_RawAddress(get(value)));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistoryEntryRawAddressKind impl_IPhoneCallHistoryEntryAddress<T>::RawAddressKind() const
{
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryRawAddressKind value = {};
	check_hresult(shim()->get_RawAddressKind(&value));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntryAddress<T>::RawAddressKind(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryRawAddressKind const value) const
{
	check_hresult(shim()->put_RawAddressKind(value));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress impl_IPhoneCallHistoryEntryAddressFactory<T>::Create(StringReference const & rawAddress, Windows::ApplicationModel::Calls::PhoneCallHistoryEntryRawAddressKind const rawAddressKind) const
{
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress result = nullptr;
	check_hresult(shim()->abi_Create(get(rawAddress), rawAddressKind, put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistoryEntryQueryDesiredMedia impl_IPhoneCallHistoryEntryQueryOptions<T>::DesiredMedia() const
{
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryQueryDesiredMedia value = {};
	check_hresult(shim()->get_DesiredMedia(&value));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntryQueryOptions<T>::DesiredMedia(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryQueryDesiredMedia const value) const
{
	check_hresult(shim()->put_DesiredMedia(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IPhoneCallHistoryEntryQueryOptions<T>::SourceIds() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_SourceIds(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry>> impl_IPhoneCallHistoryEntryReader<T>::ReadBatchAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry>> result;
	check_hresult(shim()->abi_ReadBatchAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry> impl_IPhoneCallHistoryStore<T>::GetEntryAsync(StringReference const & callHistoryEntryId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry> result;
	check_hresult(shim()->abi_GetEntryAsync(get(callHistoryEntryId), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistoryEntryReader impl_IPhoneCallHistoryStore<T>::GetEntryReader() const
{
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryReader result = nullptr;
	check_hresult(shim()->abi_GetEntryReader(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistoryEntryReader impl_IPhoneCallHistoryStore<T>::GetEntryReader(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryQueryOptions const & queryOptions) const
{
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryReader result = nullptr;
	check_hresult(shim()->abi_GetEntryReaderWithOptions(get(queryOptions), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhoneCallHistoryStore<T>::SaveEntryAsync(Windows::ApplicationModel::Calls::PhoneCallHistoryEntry const & callHistoryEntry) const
{
	Windows::Foundation::IAsyncAction result;
	check_hresult(shim()->abi_SaveEntryAsync(get(callHistoryEntry), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhoneCallHistoryStore<T>::DeleteEntryAsync(Windows::ApplicationModel::Calls::PhoneCallHistoryEntry const & callHistoryEntry) const
{
	Windows::Foundation::IAsyncAction result;
	check_hresult(shim()->abi_DeleteEntryAsync(get(callHistoryEntry), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhoneCallHistoryStore<T>::DeleteEntriesAsync(Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry> const & callHistoryEntries) const
{
	Windows::Foundation::IAsyncAction result;
	check_hresult(shim()->abi_DeleteEntriesAsync(get(callHistoryEntries), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhoneCallHistoryStore<T>::MarkEntryAsSeenAsync(Windows::ApplicationModel::Calls::PhoneCallHistoryEntry const & callHistoryEntry) const
{
	Windows::Foundation::IAsyncAction result;
	check_hresult(shim()->abi_MarkEntryAsSeenAsync(get(callHistoryEntry), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhoneCallHistoryStore<T>::MarkEntriesAsSeenAsync(Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry> const & callHistoryEntries) const
{
	Windows::Foundation::IAsyncAction result;
	check_hresult(shim()->abi_MarkEntriesAsSeenAsync(get(callHistoryEntries), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IPhoneCallHistoryStore<T>::GetUnseenCountAsync() const
{
	Windows::Foundation::IAsyncOperation<unsigned> result;
	check_hresult(shim()->abi_GetUnseenCountAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhoneCallHistoryStore<T>::MarkAllAsSeenAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check_hresult(shim()->abi_MarkAllAsSeenAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IPhoneCallHistoryStore<T>::GetSourcesUnseenCountAsync(Windows::Foundation::Collections::IIterable<String> const & sourceIds) const
{
	Windows::Foundation::IAsyncOperation<unsigned> result;
	check_hresult(shim()->abi_GetSourcesUnseenCountAsync(get(sourceIds), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhoneCallHistoryStore<T>::MarkSourcesAsSeenAsync(Windows::Foundation::Collections::IIterable<String> const & sourceIds) const
{
	Windows::Foundation::IAsyncAction result;
	check_hresult(shim()->abi_MarkSourcesAsSeenAsync(get(sourceIds), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallHistoryStore> impl_IPhoneCallHistoryManagerStatics<T>::RequestStoreAsync(Windows::ApplicationModel::Calls::PhoneCallHistoryStoreAccessType const accessType) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallHistoryStore> result;
	check_hresult(shim()->abi_RequestStoreAsync(accessType, put(result)));
	return result;
}

template <typename T> String impl_IPhoneVoicemail<T>::Number() const
{
	String value;
	check_hresult(shim()->get_Number(put(value)));
	return value;
}

template <typename T> int impl_IPhoneVoicemail<T>::MessageCount() const
{
	int value = {};
	check_hresult(shim()->get_MessageCount(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneVoicemailType impl_IPhoneVoicemail<T>::Type() const
{
	Windows::ApplicationModel::Calls::PhoneVoicemailType value = {};
	check_hresult(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhoneVoicemail<T>::DialVoicemailAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check_hresult(shim()->abi_DialVoicemailAsync(put(result)));
	return result;
}

template <typename T> String impl_IPhoneDialOptions<T>::Number() const
{
	String value;
	check_hresult(shim()->get_Number(put(value)));
	return value;
}

template <typename T> void impl_IPhoneDialOptions<T>::Number(StringReference const & value) const
{
	check_hresult(shim()->put_Number(get(value)));
}

template <typename T> String impl_IPhoneDialOptions<T>::DisplayName() const
{
	String value;
	check_hresult(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IPhoneDialOptions<T>::DisplayName(StringReference const & value) const
{
	check_hresult(shim()->put_DisplayName(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IPhoneDialOptions<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value = nullptr;
	check_hresult(shim()->get_Contact(put(value)));
	return value;
}

template <typename T> void impl_IPhoneDialOptions<T>::Contact(Windows::ApplicationModel::Contacts::Contact const & value) const
{
	check_hresult(shim()->put_Contact(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactPhone impl_IPhoneDialOptions<T>::ContactPhone() const
{
	Windows::ApplicationModel::Contacts::ContactPhone value = nullptr;
	check_hresult(shim()->get_ContactPhone(put(value)));
	return value;
}

template <typename T> void impl_IPhoneDialOptions<T>::ContactPhone(Windows::ApplicationModel::Contacts::ContactPhone const & value) const
{
	check_hresult(shim()->put_ContactPhone(get(value)));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallMedia impl_IPhoneDialOptions<T>::Media() const
{
	Windows::ApplicationModel::Calls::PhoneCallMedia value = {};
	check_hresult(shim()->get_Media(&value));
	return value;
}

template <typename T> void impl_IPhoneDialOptions<T>::Media(Windows::ApplicationModel::Calls::PhoneCallMedia const value) const
{
	check_hresult(shim()->put_Media(value));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneAudioRoutingEndpoint impl_IPhoneDialOptions<T>::AudioEndpoint() const
{
	Windows::ApplicationModel::Calls::PhoneAudioRoutingEndpoint value = {};
	check_hresult(shim()->get_AudioEndpoint(&value));
	return value;
}

template <typename T> void impl_IPhoneDialOptions<T>::AudioEndpoint(Windows::ApplicationModel::Calls::PhoneAudioRoutingEndpoint const value) const
{
	check_hresult(shim()->put_AudioEndpoint(value));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneSimState impl_IPhoneLineCellularDetails<T>::SimState() const
{
	Windows::ApplicationModel::Calls::PhoneSimState value = {};
	check_hresult(shim()->get_SimState(&value));
	return value;
}

template <typename T> int impl_IPhoneLineCellularDetails<T>::SimSlotIndex() const
{
	int value = {};
	check_hresult(shim()->get_SimSlotIndex(&value));
	return value;
}

template <typename T> bool impl_IPhoneLineCellularDetails<T>::IsModemOn() const
{
	bool value = {};
	check_hresult(shim()->get_IsModemOn(put(value)));
	return value;
}

template <typename T> int impl_IPhoneLineCellularDetails<T>::RegistrationRejectCode() const
{
	int value = {};
	check_hresult(shim()->get_RegistrationRejectCode(&value));
	return value;
}

template <typename T> String impl_IPhoneLineCellularDetails<T>::GetNetworkOperatorDisplayText(Windows::ApplicationModel::Calls::PhoneLineNetworkOperatorDisplayTextLocation const location) const
{
	String value;
	check_hresult(shim()->abi_GetNetworkOperatorDisplayText(location, put(value)));
	return value;
}

template <typename T> long long impl_IPhoneLine<T>::LineChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLine, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_LineChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPhoneLine<T>::LineChanged(F handler) const
{
	return LineChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::PhoneLine, IInspectable>(handler));
}

template <typename T> void impl_IPhoneLine<T>::LineChanged(long long const token) const
{
	check_hresult(shim()->remove_LineChanged(token));
}

template <typename T> GUID impl_IPhoneLine<T>::Id() const
{
	GUID value = {};
	check_hresult(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IPhoneLine<T>::DisplayColor() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DisplayColor(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneNetworkState impl_IPhoneLine<T>::NetworkState() const
{
	Windows::ApplicationModel::Calls::PhoneNetworkState value = {};
	check_hresult(shim()->get_NetworkState(&value));
	return value;
}

template <typename T> String impl_IPhoneLine<T>::DisplayName() const
{
	String value;
	check_hresult(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneVoicemail impl_IPhoneLine<T>::Voicemail() const
{
	Windows::ApplicationModel::Calls::PhoneVoicemail value = nullptr;
	check_hresult(shim()->get_Voicemail(put(value)));
	return value;
}

template <typename T> String impl_IPhoneLine<T>::NetworkName() const
{
	String value;
	check_hresult(shim()->get_NetworkName(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneLineCellularDetails impl_IPhoneLine<T>::CellularDetails() const
{
	Windows::ApplicationModel::Calls::PhoneLineCellularDetails value = nullptr;
	check_hresult(shim()->get_CellularDetails(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneLineTransport impl_IPhoneLine<T>::Transport() const
{
	Windows::ApplicationModel::Calls::PhoneLineTransport value = {};
	check_hresult(shim()->get_Transport(&value));
	return value;
}

template <typename T> bool impl_IPhoneLine<T>::CanDial() const
{
	bool value = {};
	check_hresult(shim()->get_CanDial(put(value)));
	return value;
}

template <typename T> bool impl_IPhoneLine<T>::SupportsTile() const
{
	bool value = {};
	check_hresult(shim()->get_SupportsTile(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallVideoCapabilities impl_IPhoneLine<T>::VideoCallingCapabilities() const
{
	Windows::ApplicationModel::Calls::PhoneCallVideoCapabilities value = nullptr;
	check_hresult(shim()->get_VideoCallingCapabilities(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneLineConfiguration impl_IPhoneLine<T>::LineConfiguration() const
{
	Windows::ApplicationModel::Calls::PhoneLineConfiguration value = nullptr;
	check_hresult(shim()->get_LineConfiguration(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IPhoneLine<T>::IsImmediateDialNumberAsync(StringReference const & number) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check_hresult(shim()->abi_IsImmediateDialNumberAsync(get(number), put(result)));
	return result;
}

template <typename T> void impl_IPhoneLine<T>::Dial(StringReference const & number, StringReference const & displayName) const
{
	check_hresult(shim()->abi_Dial(get(number), get(displayName)));
}

template <typename T> void impl_IPhoneLine<T>::DialWithOptions(Windows::ApplicationModel::Calls::PhoneDialOptions const & options) const
{
	check_hresult(shim()->abi_DialWithOptions(get(options)));
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IPhoneCallStore<T>::IsEmergencyPhoneNumberAsync(StringReference const & number) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check_hresult(shim()->abi_IsEmergencyPhoneNumberAsync(get(number), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<GUID> impl_IPhoneCallStore<T>::GetDefaultLineAsync() const
{
	Windows::Foundation::IAsyncOperation<GUID> result;
	check_hresult(shim()->abi_GetDefaultLineAsync(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneLineWatcher impl_IPhoneCallStore<T>::RequestLineWatcher() const
{
	Windows::ApplicationModel::Calls::PhoneLineWatcher result = nullptr;
	check_hresult(shim()->abi_RequestLineWatcher(put(result)));
	return result;
}

template <typename T> bool impl_IPhoneLineConfiguration<T>::IsVideoCallingEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_IsVideoCallingEnabled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IPhoneLineConfiguration<T>::ExtendedProperties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value;
	check_hresult(shim()->get_ExtendedProperties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneLine> impl_IPhoneLineStatics<T>::FromIdAsync(GUID const lineId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneLine> result;
	check_hresult(shim()->abi_FromIdAsync(lineId, put(result)));
	return result;
}

template <typename T> void impl_IPhoneLineWatcher<T>::Start() const
{
	check_hresult(shim()->abi_Start());
}

template <typename T> void impl_IPhoneLineWatcher<T>::Stop() const
{
	check_hresult(shim()->abi_Stop());
}

template <typename T> long long impl_IPhoneLineWatcher<T>::LineAdded(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_LineAdded(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPhoneLineWatcher<T>::LineAdded(F handler) const
{
	return LineAdded(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs>(handler));
}

template <typename T> void impl_IPhoneLineWatcher<T>::LineAdded(long long const token) const
{
	check_hresult(shim()->remove_LineAdded(token));
}

template <typename T> long long impl_IPhoneLineWatcher<T>::LineRemoved(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_LineRemoved(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPhoneLineWatcher<T>::LineRemoved(F handler) const
{
	return LineRemoved(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs>(handler));
}

template <typename T> void impl_IPhoneLineWatcher<T>::LineRemoved(long long const token) const
{
	check_hresult(shim()->remove_LineRemoved(token));
}

template <typename T> long long impl_IPhoneLineWatcher<T>::LineUpdated(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_LineUpdated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPhoneLineWatcher<T>::LineUpdated(F handler) const
{
	return LineUpdated(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs>(handler));
}

template <typename T> void impl_IPhoneLineWatcher<T>::LineUpdated(long long const token) const
{
	check_hresult(shim()->remove_LineUpdated(token));
}

template <typename T> long long impl_IPhoneLineWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_EnumerationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPhoneLineWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPhoneLineWatcher<T>::EnumerationCompleted(long long const token) const
{
	check_hresult(shim()->remove_EnumerationCompleted(token));
}

template <typename T> long long impl_IPhoneLineWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPhoneLineWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPhoneLineWatcher<T>::Stopped(long long const token) const
{
	check_hresult(shim()->remove_Stopped(token));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneLineWatcherStatus impl_IPhoneLineWatcher<T>::Status() const
{
	Windows::ApplicationModel::Calls::PhoneLineWatcherStatus status = {};
	check_hresult(shim()->get_Status(&status));
	return status;
}

template <typename T> GUID impl_IPhoneLineWatcherEventArgs<T>::LineId() const
{
	GUID value = {};
	check_hresult(shim()->get_LineId(&value));
	return value;
}

template <typename T> void impl_IPhoneCallManagerStatics<T>::ShowPhoneCallUI(StringReference const & phoneNumber, StringReference const & displayName) const
{
	check_hresult(shim()->abi_ShowPhoneCallUI(get(phoneNumber), get(displayName)));
}

template <typename T> long long impl_IPhoneCallManagerStatics2<T>::CallStateChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_CallStateChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPhoneCallManagerStatics2<T>::CallStateChanged(F handler) const
{
	return CallStateChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IPhoneCallManagerStatics2<T>::CallStateChanged(long long const token) const
{
	check_hresult(shim()->remove_CallStateChanged(token));
}

template <typename T> bool impl_IPhoneCallManagerStatics2<T>::IsCallActive() const
{
	bool value = {};
	check_hresult(shim()->get_IsCallActive(put(value)));
	return value;
}

template <typename T> bool impl_IPhoneCallManagerStatics2<T>::IsCallIncoming() const
{
	bool value = {};
	check_hresult(shim()->get_IsCallIncoming(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallManagerStatics2<T>::ShowPhoneCallSettingsUI() const
{
	check_hresult(shim()->abi_ShowPhoneCallSettingsUI());
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallStore> impl_IPhoneCallManagerStatics2<T>::RequestStoreAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallStore> result;
	check_hresult(shim()->abi_RequestStoreAsync(put(result)));
	return result;
}

template <typename T> bool impl_IPhoneCallVideoCapabilities<T>::IsVideoCallingCapable() const
{
	bool pValue = {};
	check_hresult(shim()->get_IsVideoCallingCapable(put(pValue)));
	return pValue;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallVideoCapabilities> impl_IPhoneCallVideoCapabilitiesManagerStatics<T>::GetCapabilitiesAsync(StringReference const & phoneNumber) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallVideoCapabilities> result;
	check_hresult(shim()->abi_GetCapabilitiesAsync(get(phoneNumber), put(result)));
	return result;
}

template <typename T> bool impl_IPhoneCallBlockingStatics<T>::BlockUnknownNumbers() const
{
	bool value = {};
	check_hresult(shim()->get_BlockUnknownNumbers(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallBlockingStatics<T>::BlockUnknownNumbers(bool const value) const
{
	check_hresult(shim()->put_BlockUnknownNumbers(value));
}

template <typename T> bool impl_IPhoneCallBlockingStatics<T>::BlockPrivateNumbers() const
{
	bool value = {};
	check_hresult(shim()->get_BlockPrivateNumbers(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallBlockingStatics<T>::BlockPrivateNumbers(bool const value) const
{
	check_hresult(shim()->put_BlockPrivateNumbers(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IPhoneCallBlockingStatics<T>::SetCallBlockingListAsync(Windows::Foundation::Collections::IIterable<String> const & phoneNumberList) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check_hresult(shim()->abi_SetCallBlockingListAsync(get(phoneNumberList), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Calls::VoipPhoneCallState impl_ICallStateChangeEventArgs<T>::State() const
{
	Windows::ApplicationModel::Calls::VoipPhoneCallState value = {};
	check_hresult(shim()->get_State(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::VoipPhoneCallMedia impl_ICallAnswerEventArgs<T>::AcceptedMedia() const
{
	Windows::ApplicationModel::Calls::VoipPhoneCallMedia value = {};
	check_hresult(shim()->get_AcceptedMedia(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::VoipPhoneCallRejectReason impl_ICallRejectEventArgs<T>::RejectReason() const
{
	Windows::ApplicationModel::Calls::VoipPhoneCallRejectReason value = {};
	check_hresult(shim()->get_RejectReason(&value));
	return value;
}

template <typename T> long long impl_IVoipPhoneCall<T>::EndRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallStateChangeEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_EndRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVoipPhoneCall<T>::EndRequested(F handler) const
{
	return EndRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallStateChangeEventArgs>(handler));
}

template <typename T> void impl_IVoipPhoneCall<T>::EndRequested(long long const token) const
{
	check_hresult(shim()->remove_EndRequested(token));
}

template <typename T> long long impl_IVoipPhoneCall<T>::HoldRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallStateChangeEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_HoldRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVoipPhoneCall<T>::HoldRequested(F handler) const
{
	return HoldRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallStateChangeEventArgs>(handler));
}

template <typename T> void impl_IVoipPhoneCall<T>::HoldRequested(long long const token) const
{
	check_hresult(shim()->remove_HoldRequested(token));
}

template <typename T> long long impl_IVoipPhoneCall<T>::ResumeRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallStateChangeEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ResumeRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVoipPhoneCall<T>::ResumeRequested(F handler) const
{
	return ResumeRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallStateChangeEventArgs>(handler));
}

template <typename T> void impl_IVoipPhoneCall<T>::ResumeRequested(long long const token) const
{
	check_hresult(shim()->remove_ResumeRequested(token));
}

template <typename T> long long impl_IVoipPhoneCall<T>::AnswerRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallAnswerEventArgs> const & acceptHandler) const
{
	long long token = {};
	check_hresult(shim()->add_AnswerRequested(get(acceptHandler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVoipPhoneCall<T>::AnswerRequested(F acceptHandler) const
{
	return AnswerRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallAnswerEventArgs>(acceptHandler));
}

template <typename T> void impl_IVoipPhoneCall<T>::AnswerRequested(long long const token) const
{
	check_hresult(shim()->remove_AnswerRequested(token));
}

template <typename T> long long impl_IVoipPhoneCall<T>::RejectRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallRejectEventArgs> const & rejectHandler) const
{
	long long token = {};
	check_hresult(shim()->add_RejectRequested(get(rejectHandler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVoipPhoneCall<T>::RejectRequested(F rejectHandler) const
{
	return RejectRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallRejectEventArgs>(rejectHandler));
}

template <typename T> void impl_IVoipPhoneCall<T>::RejectRequested(long long const token) const
{
	check_hresult(shim()->remove_RejectRequested(token));
}

template <typename T> void impl_IVoipPhoneCall<T>::NotifyCallHeld() const
{
	check_hresult(shim()->abi_NotifyCallHeld());
}

template <typename T> void impl_IVoipPhoneCall<T>::NotifyCallActive() const
{
	check_hresult(shim()->abi_NotifyCallActive());
}

template <typename T> void impl_IVoipPhoneCall<T>::NotifyCallEnded() const
{
	check_hresult(shim()->abi_NotifyCallEnded());
}

template <typename T> String impl_IVoipPhoneCall<T>::ContactName() const
{
	String value;
	check_hresult(shim()->get_ContactName(put(value)));
	return value;
}

template <typename T> void impl_IVoipPhoneCall<T>::ContactName(StringReference const & value) const
{
	check_hresult(shim()->put_ContactName(get(value)));
}

template <typename T> Windows::Foundation::DateTime impl_IVoipPhoneCall<T>::StartTime() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_StartTime(&value));
	return value;
}

template <typename T> void impl_IVoipPhoneCall<T>::StartTime(Windows::Foundation::DateTime const & value) const
{
	check_hresult(shim()->put_StartTime(value));
}

template <typename T> Windows::ApplicationModel::Calls::VoipPhoneCallMedia impl_IVoipPhoneCall<T>::CallMedia() const
{
	Windows::ApplicationModel::Calls::VoipPhoneCallMedia value = {};
	check_hresult(shim()->get_CallMedia(&value));
	return value;
}

template <typename T> void impl_IVoipPhoneCall<T>::CallMedia(Windows::ApplicationModel::Calls::VoipPhoneCallMedia const value) const
{
	check_hresult(shim()->put_CallMedia(value));
}

template <typename T> void impl_IVoipPhoneCall<T>::NotifyCallReady() const
{
	check_hresult(shim()->abi_NotifyCallReady());
}

template <typename T> bool impl_IMuteChangeEventArgs<T>::Muted() const
{
	bool value = {};
	check_hresult(shim()->get_Muted(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Calls::VoipPhoneCallResourceReservationStatus> impl_IVoipCallCoordinator<T>::ReserveCallResourcesAsync(StringReference const & taskEntryPoint) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Calls::VoipPhoneCallResourceReservationStatus> operation;
	check_hresult(shim()->abi_ReserveCallResourcesAsync(get(taskEntryPoint), put(operation)));
	return operation;
}

template <typename T> long long impl_IVoipCallCoordinator<T>::MuteStateChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipCallCoordinator, Windows::ApplicationModel::Calls::MuteChangeEventArgs> const & muteChangeHandler) const
{
	long long token = {};
	check_hresult(shim()->add_MuteStateChanged(get(muteChangeHandler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVoipCallCoordinator<T>::MuteStateChanged(F muteChangeHandler) const
{
	return MuteStateChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::VoipCallCoordinator, Windows::ApplicationModel::Calls::MuteChangeEventArgs>(muteChangeHandler));
}

template <typename T> void impl_IVoipCallCoordinator<T>::MuteStateChanged(long long const token) const
{
	check_hresult(shim()->remove_MuteStateChanged(token));
}

template <typename T> Windows::ApplicationModel::Calls::VoipPhoneCall impl_IVoipCallCoordinator<T>::RequestNewIncomingCall(StringReference const & context, StringReference const & contactName, StringReference const & contactNumber, Windows::Foundation::Uri const & contactImage, StringReference const & serviceName, Windows::Foundation::Uri const & brandingImage, StringReference const & callDetails, Windows::Foundation::Uri const & ringtone, Windows::ApplicationModel::Calls::VoipPhoneCallMedia const media, Windows::Foundation::TimeSpan const & ringTimeout) const
{
	Windows::ApplicationModel::Calls::VoipPhoneCall call = nullptr;
	check_hresult(shim()->abi_RequestNewIncomingCall(get(context), get(contactName), get(contactNumber), get(contactImage), get(serviceName), get(brandingImage), get(callDetails), get(ringtone), media, ringTimeout, put(call)));
	return call;
}

template <typename T> Windows::ApplicationModel::Calls::VoipPhoneCall impl_IVoipCallCoordinator<T>::RequestNewOutgoingCall(StringReference const & context, StringReference const & contactName, StringReference const & serviceName, Windows::ApplicationModel::Calls::VoipPhoneCallMedia const media) const
{
	Windows::ApplicationModel::Calls::VoipPhoneCall call = nullptr;
	check_hresult(shim()->abi_RequestNewOutgoingCall(get(context), get(contactName), get(serviceName), media, put(call)));
	return call;
}

template <typename T> void impl_IVoipCallCoordinator<T>::NotifyMuted() const
{
	check_hresult(shim()->abi_NotifyMuted());
}

template <typename T> void impl_IVoipCallCoordinator<T>::NotifyUnmuted() const
{
	check_hresult(shim()->abi_NotifyUnmuted());
}

template <typename T> Windows::ApplicationModel::Calls::VoipPhoneCall impl_IVoipCallCoordinator<T>::RequestOutgoingUpgradeToVideoCall(GUID const callUpgradeGuid, StringReference const & context, StringReference const & contactName, StringReference const & serviceName) const
{
	Windows::ApplicationModel::Calls::VoipPhoneCall call = nullptr;
	check_hresult(shim()->abi_RequestOutgoingUpgradeToVideoCall(callUpgradeGuid, get(context), get(contactName), get(serviceName), put(call)));
	return call;
}

template <typename T> Windows::ApplicationModel::Calls::VoipPhoneCall impl_IVoipCallCoordinator<T>::RequestIncomingUpgradeToVideoCall(StringReference const & context, StringReference const & contactName, StringReference const & contactNumber, Windows::Foundation::Uri const & contactImage, StringReference const & serviceName, Windows::Foundation::Uri const & brandingImage, StringReference const & callDetails, Windows::Foundation::Uri const & ringtone, Windows::Foundation::TimeSpan const & ringTimeout) const
{
	Windows::ApplicationModel::Calls::VoipPhoneCall call = nullptr;
	check_hresult(shim()->abi_RequestIncomingUpgradeToVideoCall(get(context), get(contactName), get(contactNumber), get(contactImage), get(serviceName), get(brandingImage), get(callDetails), get(ringtone), ringTimeout, put(call)));
	return call;
}

template <typename T> void impl_IVoipCallCoordinator<T>::TerminateCellularCall(GUID const callUpgradeGuid) const
{
	check_hresult(shim()->abi_TerminateCellularCall(callUpgradeGuid));
}

template <typename T> void impl_IVoipCallCoordinator<T>::CancelUpgrade(GUID const callUpgradeGuid) const
{
	check_hresult(shim()->abi_CancelUpgrade(callUpgradeGuid));
}

template <typename T> Windows::ApplicationModel::Calls::VoipCallCoordinator impl_IVoipCallCoordinatorStatics<T>::GetDefault() const
{
	Windows::ApplicationModel::Calls::VoipCallCoordinator coordinator = nullptr;
	check_hresult(shim()->abi_GetDefault(put(coordinator)));
	return coordinator;
}

template <typename T> void impl_ILockScreenCallEndCallDeferral<T>::Complete() const
{
	check_hresult(shim()->abi_Complete());
}

template <typename T> Windows::ApplicationModel::Calls::LockScreenCallEndCallDeferral impl_ILockScreenCallEndRequestedEventArgs<T>::GetDeferral() const
{
	Windows::ApplicationModel::Calls::LockScreenCallEndCallDeferral value = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ILockScreenCallEndRequestedEventArgs<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Deadline(&value));
	return value;
}

template <typename T> void impl_ILockScreenCallUI<T>::Dismiss() const
{
	check_hresult(shim()->abi_Dismiss());
}

template <typename T> long long impl_ILockScreenCallUI<T>::EndRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, Windows::ApplicationModel::Calls::LockScreenCallEndRequestedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_EndRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ILockScreenCallUI<T>::EndRequested(F handler) const
{
	return EndRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, Windows::ApplicationModel::Calls::LockScreenCallEndRequestedEventArgs>(handler));
}

template <typename T> void impl_ILockScreenCallUI<T>::EndRequested(long long const token) const
{
	check_hresult(shim()->remove_EndRequested(token));
}

template <typename T> long long impl_ILockScreenCallUI<T>::Closed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Closed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ILockScreenCallUI<T>::Closed(F handler) const
{
	return Closed(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, IInspectable>(handler));
}

template <typename T> void impl_ILockScreenCallUI<T>::Closed(long long const token) const
{
	check_hresult(shim()->remove_Closed(token));
}

template <typename T> String impl_ILockScreenCallUI<T>::CallTitle() const
{
	String value;
	check_hresult(shim()->get_CallTitle(put(value)));
	return value;
}

template <typename T> void impl_ILockScreenCallUI<T>::CallTitle(StringReference const & value) const
{
	check_hresult(shim()->put_CallTitle(get(value)));
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls { namespace Background {

template <typename T> String impl_IPhoneCallBlockedTriggerDetails<T>::PhoneNumber() const
{
	String value;
	check_hresult(shim()->get_PhoneNumber(put(value)));
	return value;
}

template <typename T> GUID impl_IPhoneCallBlockedTriggerDetails<T>::LineId() const
{
	GUID value = {};
	check_hresult(shim()->get_LineId(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::Background::PhoneCallBlockedReason impl_IPhoneCallBlockedTriggerDetails<T>::CallBlockedReason() const
{
	Windows::ApplicationModel::Calls::Background::PhoneCallBlockedReason value = {};
	check_hresult(shim()->get_CallBlockedReason(&value));
	return value;
}

template <typename T> GUID impl_IPhoneCallOriginDataRequestTriggerDetails<T>::RequestId() const
{
	GUID result = {};
	check_hresult(shim()->get_RequestId(&result));
	return result;
}

template <typename T> String impl_IPhoneCallOriginDataRequestTriggerDetails<T>::PhoneNumber() const
{
	String result;
	check_hresult(shim()->get_PhoneNumber(put(result)));
	return result;
}

template <typename T> GUID impl_IPhoneNewVoicemailMessageTriggerDetails<T>::LineId() const
{
	GUID result = {};
	check_hresult(shim()->get_LineId(&result));
	return result;
}

template <typename T> int impl_IPhoneNewVoicemailMessageTriggerDetails<T>::VoicemailCount() const
{
	int result = {};
	check_hresult(shim()->get_VoicemailCount(&result));
	return result;
}

template <typename T> String impl_IPhoneNewVoicemailMessageTriggerDetails<T>::OperatorMessage() const
{
	String result;
	check_hresult(shim()->get_OperatorMessage(put(result)));
	return result;
}

template <typename T> GUID impl_IPhoneLineChangedTriggerDetails<T>::LineId() const
{
	GUID result = {};
	check_hresult(shim()->get_LineId(&result));
	return result;
}

template <typename T> Windows::ApplicationModel::Calls::Background::PhoneLineChangeKind impl_IPhoneLineChangedTriggerDetails<T>::ChangeType() const
{
	Windows::ApplicationModel::Calls::Background::PhoneLineChangeKind result = {};
	check_hresult(shim()->get_ChangeType(&result));
	return result;
}

template <typename T> bool impl_IPhoneLineChangedTriggerDetails<T>::HasLinePropertyChanged(Windows::ApplicationModel::Calls::Background::PhoneLineProperties const lineProperty) const
{
	bool result = {};
	check_hresult(shim()->abi_HasLinePropertyChanged(lineProperty, put(result)));
	return result;
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Contacts {

template <typename T> Windows::ApplicationModel::Contacts::ContactCardHeaderKind impl_IContactCardOptions<T>::HeaderKind() const
{
	Windows::ApplicationModel::Contacts::ContactCardHeaderKind value = {};
	check_hresult(shim()->get_HeaderKind(&value));
	return value;
}

template <typename T> void impl_IContactCardOptions<T>::HeaderKind(Windows::ApplicationModel::Contacts::ContactCardHeaderKind const value) const
{
	check_hresult(shim()->put_HeaderKind(value));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactCardTabKind impl_IContactCardOptions<T>::InitialTabKind() const
{
	Windows::ApplicationModel::Contacts::ContactCardTabKind value = {};
	check_hresult(shim()->get_InitialTabKind(&value));
	return value;
}

template <typename T> void impl_IContactCardOptions<T>::InitialTabKind(Windows::ApplicationModel::Contacts::ContactCardTabKind const value) const
{
	check_hresult(shim()->put_InitialTabKind(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IContactCardOptions2<T>::ServerSearchContactListIds() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_ServerSearchContactListIds(put(value)));
	return value;
}

template <typename T> Windows::UI::ViewManagement::ViewSizePreference impl_IFullContactCardOptions<T>::DesiredRemainingView() const
{
	Windows::UI::ViewManagement::ViewSizePreference value = {};
	check_hresult(shim()->get_DesiredRemainingView(&value));
	return value;
}

template <typename T> void impl_IFullContactCardOptions<T>::DesiredRemainingView(Windows::UI::ViewManagement::ViewSizePreference const value) const
{
	check_hresult(shim()->put_DesiredRemainingView(value));
}

template <typename T> void impl_IContactManagerStatics<T>::ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection) const
{
	check_hresult(shim()->abi_ShowContactCard(get(contact), selection));
}

template <typename T> void impl_IContactManagerStatics<T>::ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	check_hresult(shim()->abi_ShowContactCardWithPlacement(get(contact), selection, preferredPlacement));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader impl_IContactManagerStatics<T>::ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader dataLoader = nullptr;
	check_hresult(shim()->abi_ShowDelayLoadedContactCard(get(contact), selection, preferredPlacement, put(dataLoader)));
	return dataLoader;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactStore> impl_IContactManagerStatics2<T>::RequestStoreAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactStore> store;
	check_hresult(shim()->abi_RequestStoreAsync(put(store)));
	return store;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> impl_IContactManagerStatics3<T>::ConvertContactToVCardAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> vCard;
	check_hresult(shim()->abi_ConvertContactToVCardAsync(get(contact), put(vCard)));
	return vCard;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> impl_IContactManagerStatics3<T>::ConvertContactToVCardAsync(Windows::ApplicationModel::Contacts::Contact const & contact, unsigned const maxBytes) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> vCard;
	check_hresult(shim()->abi_ConvertContactToVCardAsyncWithMaxBytes(get(contact), maxBytes, put(vCard)));
	return vCard;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IContactManagerStatics3<T>::ConvertVCardToContactAsync(Windows::Storage::Streams::IRandomAccessStreamReference const & vCard) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> contact;
	check_hresult(shim()->abi_ConvertVCardToContactAsync(get(vCard), put(contact)));
	return contact;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactStore> impl_IContactManagerStatics3<T>::RequestStoreAsync(Windows::ApplicationModel::Contacts::ContactStoreAccessType const accessType) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactStore> store;
	check_hresult(shim()->abi_RequestStoreAsyncWithAccessType(accessType, put(store)));
	return store;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationStore> impl_IContactManagerStatics3<T>::RequestAnnotationStoreAsync(Windows::ApplicationModel::Contacts::ContactAnnotationStoreAccessType const accessType) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationStore> store;
	check_hresult(shim()->abi_RequestAnnotationStoreAsync(accessType, put(store)));
	return store;
}

template <typename T> bool impl_IContactManagerStatics3<T>::IsShowContactCardSupported() const
{
	bool result = {};
	check_hresult(shim()->abi_IsShowContactCardSupported(put(result)));
	return result;
}

template <typename T> void impl_IContactManagerStatics3<T>::ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::ApplicationModel::Contacts::ContactCardOptions const & contactCardOptions) const
{
	check_hresult(shim()->abi_ShowContactCardWithOptions(get(contact), selection, preferredPlacement, get(contactCardOptions)));
}

template <typename T> bool impl_IContactManagerStatics3<T>::IsShowDelayLoadedContactCardSupported() const
{
	bool result = {};
	check_hresult(shim()->abi_IsShowDelayLoadedContactCardSupported(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader impl_IContactManagerStatics3<T>::ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::ApplicationModel::Contacts::ContactCardOptions const & contactCardOptions) const
{
	Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader dataLoader = nullptr;
	check_hresult(shim()->abi_ShowDelayLoadedContactCardWithOptions(get(contact), selection, preferredPlacement, get(contactCardOptions), put(dataLoader)));
	return dataLoader;
}

template <typename T> void impl_IContactManagerStatics3<T>::ShowFullContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::ApplicationModel::Contacts::FullContactCardOptions const & fullContactCardOptions) const
{
	check_hresult(shim()->abi_ShowFullContactCard(get(contact), get(fullContactCardOptions)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactNameOrder impl_IContactManagerStatics3<T>::SystemDisplayNameOrder() const
{
	Windows::ApplicationModel::Contacts::ContactNameOrder value = {};
	check_hresult(shim()->get_SystemDisplayNameOrder(&value));
	return value;
}

template <typename T> void impl_IContactManagerStatics3<T>::SystemDisplayNameOrder(Windows::ApplicationModel::Contacts::ContactNameOrder const value) const
{
	check_hresult(shim()->put_SystemDisplayNameOrder(value));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactNameOrder impl_IContactManagerStatics3<T>::SystemSortOrder() const
{
	Windows::ApplicationModel::Contacts::ContactNameOrder value = {};
	check_hresult(shim()->get_SystemSortOrder(&value));
	return value;
}

template <typename T> void impl_IContactManagerStatics3<T>::SystemSortOrder(Windows::ApplicationModel::Contacts::ContactNameOrder const value) const
{
	check_hresult(shim()->put_SystemSortOrder(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact>> impl_IAggregateContactManager<T>::FindRawContactsAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact>> value;
	check_hresult(shim()->abi_FindRawContactsAsync(get(contact), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IAggregateContactManager<T>::TryLinkContactsAsync(Windows::ApplicationModel::Contacts::Contact const & primaryContact, Windows::ApplicationModel::Contacts::Contact const & secondaryContact) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> contact;
	check_hresult(shim()->abi_TryLinkContactsAsync(get(primaryContact), get(secondaryContact), put(contact)));
	return contact;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAggregateContactManager<T>::UnlinkRawContactAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_UnlinkRawContactAsync(get(contact), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAggregateContactManager<T>::TrySetPreferredSourceForPictureAsync(Windows::ApplicationModel::Contacts::Contact const & aggregateContact, Windows::ApplicationModel::Contacts::Contact const & rawContact) const
{
	Windows::Foundation::IAsyncOperation<bool> value;
	check_hresult(shim()->abi_TrySetPreferredSourceForPictureAsync(get(aggregateContact), get(rawContact), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> impl_IContactAnnotationStore<T>::FindContactIdsByEmailAsync(StringReference const & emailAddress) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> contactIds;
	check_hresult(shim()->abi_FindContactIdsByEmailAsync(get(emailAddress), put(contactIds)));
	return contactIds;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> impl_IContactAnnotationStore<T>::FindContactIdsByPhoneNumberAsync(StringReference const & phoneNumber) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> contactIds;
	check_hresult(shim()->abi_FindContactIdsByPhoneNumberAsync(get(phoneNumber), put(contactIds)));
	return contactIds;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotation>> impl_IContactAnnotationStore<T>::FindAnnotationsForContactAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotation>> annotations;
	check_hresult(shim()->abi_FindAnnotationsForContactAsync(get(contact), put(annotations)));
	return annotations;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContactAnnotationStore<T>::DisableAnnotationAsync(Windows::ApplicationModel::Contacts::ContactAnnotation const & annotation) const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_DisableAnnotationAsync(get(annotation), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationList> impl_IContactAnnotationStore<T>::CreateAnnotationListAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationList> value;
	check_hresult(shim()->abi_CreateAnnotationListAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationList> impl_IContactAnnotationStore<T>::CreateAnnotationListAsync(StringReference const & userDataAccountId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationList> value;
	check_hresult(shim()->abi_CreateAnnotationListInAccountAsync(get(userDataAccountId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationList> impl_IContactAnnotationStore<T>::GetAnnotationListAsync(StringReference const & annotationListId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationList> value;
	check_hresult(shim()->abi_GetAnnotationListAsync(get(annotationListId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotationList>> impl_IContactAnnotationStore<T>::FindAnnotationListsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotationList>> lists;
	check_hresult(shim()->abi_FindAnnotationListsAsync(put(lists)));
	return lists;
}

template <typename T> String impl_IContactAnnotationList<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IContactAnnotationList<T>::ProviderPackageFamilyName() const
{
	String value;
	check_hresult(shim()->get_ProviderPackageFamilyName(put(value)));
	return value;
}

template <typename T> String impl_IContactAnnotationList<T>::UserDataAccountId() const
{
	String value;
	check_hresult(shim()->get_UserDataAccountId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContactAnnotationList<T>::DeleteAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_DeleteAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IContactAnnotationList<T>::TrySaveAnnotationAsync(Windows::ApplicationModel::Contacts::ContactAnnotation const & annotation) const
{
	Windows::Foundation::IAsyncOperation<bool> ppResult;
	check_hresult(shim()->abi_TrySaveAnnotationAsync(get(annotation), put(ppResult)));
	return ppResult;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotation> impl_IContactAnnotationList<T>::GetAnnotationAsync(StringReference const & annotationId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotation> annotation;
	check_hresult(shim()->abi_GetAnnotationAsync(get(annotationId), put(annotation)));
	return annotation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotation>> impl_IContactAnnotationList<T>::FindAnnotationsByRemoteIdAsync(StringReference const & remoteId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotation>> annotations;
	check_hresult(shim()->abi_FindAnnotationsByRemoteIdAsync(get(remoteId), put(annotations)));
	return annotations;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotation>> impl_IContactAnnotationList<T>::FindAnnotationsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotation>> annotations;
	check_hresult(shim()->abi_FindAnnotationsAsync(put(annotations)));
	return annotations;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContactAnnotationList<T>::DeleteAnnotationAsync(Windows::ApplicationModel::Contacts::ContactAnnotation const & annotation) const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_DeleteAnnotationAsync(get(annotation), put(value)));
	return value;
}

template <typename T> String impl_IContactAnnotation<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IContactAnnotation<T>::AnnotationListId() const
{
	String value;
	check_hresult(shim()->get_AnnotationListId(put(value)));
	return value;
}

template <typename T> String impl_IContactAnnotation<T>::ContactId() const
{
	String value;
	check_hresult(shim()->get_ContactId(put(value)));
	return value;
}

template <typename T> void impl_IContactAnnotation<T>::ContactId(StringReference const & value) const
{
	check_hresult(shim()->put_ContactId(get(value)));
}

template <typename T> String impl_IContactAnnotation<T>::RemoteId() const
{
	String value;
	check_hresult(shim()->get_RemoteId(put(value)));
	return value;
}

template <typename T> void impl_IContactAnnotation<T>::RemoteId(StringReference const & value) const
{
	check_hresult(shim()->put_RemoteId(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactAnnotationOperations impl_IContactAnnotation<T>::SupportedOperations() const
{
	Windows::ApplicationModel::Contacts::ContactAnnotationOperations value = {};
	check_hresult(shim()->get_SupportedOperations(&value));
	return value;
}

template <typename T> void impl_IContactAnnotation<T>::SupportedOperations(Windows::ApplicationModel::Contacts::ContactAnnotationOperations const value) const
{
	check_hresult(shim()->put_SupportedOperations(value));
}

template <typename T> bool impl_IContactAnnotation<T>::IsDisabled() const
{
	bool value = {};
	check_hresult(shim()->get_IsDisabled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_IContactAnnotation<T>::ProviderProperties() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check_hresult(shim()->get_ProviderProperties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact>> impl_IContactStore<T>::FindContactsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact>> contacts;
	check_hresult(shim()->abi_FindContactsAsync(put(contacts)));
	return contacts;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact>> impl_IContactStore<T>::FindContactsAsync(StringReference const & searchText) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact>> contacts;
	check_hresult(shim()->abi_FindContactsWithSearchTextAsync(get(searchText), put(contacts)));
	return contacts;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IContactStore<T>::GetContactAsync(StringReference const & contactId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> contacts;
	check_hresult(shim()->abi_GetContactAsync(get(contactId), put(contacts)));
	return contacts;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactChangeTracker impl_IContactStore2<T>::ChangeTracker() const
{
	Windows::ApplicationModel::Contacts::ContactChangeTracker value = nullptr;
	check_hresult(shim()->get_ChangeTracker(put(value)));
	return value;
}

template <typename T> long long impl_IContactStore2<T>::ContactChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Contacts::ContactStore, Windows::ApplicationModel::Contacts::ContactChangedEventArgs> const & value) const
{
	long long returnValue = {};
	check_hresult(shim()->add_ContactChanged(get(value), &returnValue));
	return returnValue;
}

template <typename T> template <typename F> long long impl_IContactStore2<T>::ContactChanged(F value) const
{
	return ContactChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Contacts::ContactStore, Windows::ApplicationModel::Contacts::ContactChangedEventArgs>(value));
}

template <typename T> void impl_IContactStore2<T>::ContactChanged(long long const value) const
{
	check_hresult(shim()->remove_ContactChanged(value));
}

template <typename T> Windows::ApplicationModel::Contacts::AggregateContactManager impl_IContactStore2<T>::AggregateContactManager() const
{
	Windows::ApplicationModel::Contacts::AggregateContactManager value = nullptr;
	check_hresult(shim()->get_AggregateContactManager(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactList>> impl_IContactStore2<T>::FindContactListsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactList>> value;
	check_hresult(shim()->abi_FindContactListsAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactList> impl_IContactStore2<T>::GetContactListAsync(StringReference const & contactListId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactList> value;
	check_hresult(shim()->abi_GetContactListAsync(get(contactListId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactList> impl_IContactStore2<T>::CreateContactListAsync(StringReference const & displayName) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactList> value;
	check_hresult(shim()->abi_CreateContactListAsync(get(displayName), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IContactStore2<T>::GetMeContactAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> meContact;
	check_hresult(shim()->abi_GetMeContactAsync(put(meContact)));
	return meContact;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactReader impl_IContactStore2<T>::GetContactReader() const
{
	Windows::ApplicationModel::Contacts::ContactReader value = nullptr;
	check_hresult(shim()->abi_GetContactReader(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactReader impl_IContactStore2<T>::GetContactReader(Windows::ApplicationModel::Contacts::ContactQueryOptions const & options) const
{
	Windows::ApplicationModel::Contacts::ContactReader value = nullptr;
	check_hresult(shim()->abi_GetContactReaderWithOptions(get(options), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactList> impl_IContactStore2<T>::CreateContactListAsync(StringReference const & displayName, StringReference const & userDataAccountId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactList> value;
	check_hresult(shim()->abi_CreateContactListInAccountAsync(get(displayName), get(userDataAccountId), put(value)));
	return value;
}

template <typename T> String impl_IContactList<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IContactList<T>::DisplayName() const
{
	String value;
	check_hresult(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IContactList<T>::DisplayName(StringReference const & value) const
{
	check_hresult(shim()->put_DisplayName(get(value)));
}

template <typename T> String impl_IContactList<T>::SourceDisplayName() const
{
	String value;
	check_hresult(shim()->get_SourceDisplayName(put(value)));
	return value;
}

template <typename T> bool impl_IContactList<T>::IsHidden() const
{
	bool value = {};
	check_hresult(shim()->get_IsHidden(put(value)));
	return value;
}

template <typename T> void impl_IContactList<T>::IsHidden(bool const value) const
{
	check_hresult(shim()->put_IsHidden(value));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactListOtherAppReadAccess impl_IContactList<T>::OtherAppReadAccess() const
{
	Windows::ApplicationModel::Contacts::ContactListOtherAppReadAccess value = {};
	check_hresult(shim()->get_OtherAppReadAccess(&value));
	return value;
}

template <typename T> void impl_IContactList<T>::OtherAppReadAccess(Windows::ApplicationModel::Contacts::ContactListOtherAppReadAccess const value) const
{
	check_hresult(shim()->put_OtherAppReadAccess(value));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactListOtherAppWriteAccess impl_IContactList<T>::OtherAppWriteAccess() const
{
	Windows::ApplicationModel::Contacts::ContactListOtherAppWriteAccess value = {};
	check_hresult(shim()->get_OtherAppWriteAccess(&value));
	return value;
}

template <typename T> void impl_IContactList<T>::OtherAppWriteAccess(Windows::ApplicationModel::Contacts::ContactListOtherAppWriteAccess const value) const
{
	check_hresult(shim()->put_OtherAppWriteAccess(value));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactChangeTracker impl_IContactList<T>::ChangeTracker() const
{
	Windows::ApplicationModel::Contacts::ContactChangeTracker value = nullptr;
	check_hresult(shim()->get_ChangeTracker(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactListSyncManager impl_IContactList<T>::SyncManager() const
{
	Windows::ApplicationModel::Contacts::ContactListSyncManager value = nullptr;
	check_hresult(shim()->get_SyncManager(put(value)));
	return value;
}

template <typename T> bool impl_IContactList<T>::SupportsServerSearch() const
{
	bool value = {};
	check_hresult(shim()->get_SupportsServerSearch(put(value)));
	return value;
}

template <typename T> String impl_IContactList<T>::UserDataAccountId() const
{
	String value;
	check_hresult(shim()->get_UserDataAccountId(put(value)));
	return value;
}

template <typename T> long long impl_IContactList<T>::ContactChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Contacts::ContactList, Windows::ApplicationModel::Contacts::ContactChangedEventArgs> const & value) const
{
	long long returnValue = {};
	check_hresult(shim()->add_ContactChanged(get(value), &returnValue));
	return returnValue;
}

template <typename T> template <typename F> long long impl_IContactList<T>::ContactChanged(F value) const
{
	return ContactChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Contacts::ContactList, Windows::ApplicationModel::Contacts::ContactChangedEventArgs>(value));
}

template <typename T> void impl_IContactList<T>::ContactChanged(long long const value) const
{
	check_hresult(shim()->remove_ContactChanged(value));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContactList<T>::SaveAsync() const
{
	Windows::Foundation::IAsyncAction returnValue;
	check_hresult(shim()->abi_SaveAsync(put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContactList<T>::DeleteAsync() const
{
	Windows::Foundation::IAsyncAction returnValue;
	check_hresult(shim()->abi_DeleteAsync(put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IContactList<T>::GetContactFromRemoteIdAsync(StringReference const & remoteId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> contact;
	check_hresult(shim()->abi_GetContactFromRemoteIdAsync(get(remoteId), put(contact)));
	return contact;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IContactList<T>::GetMeContactAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> meContact;
	check_hresult(shim()->abi_GetMeContactAsync(put(meContact)));
	return meContact;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactReader impl_IContactList<T>::GetContactReader() const
{
	Windows::ApplicationModel::Contacts::ContactReader value = nullptr;
	check_hresult(shim()->abi_GetContactReader(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactReader impl_IContactList<T>::GetContactReader(Windows::ApplicationModel::Contacts::ContactQueryOptions const & options) const
{
	Windows::ApplicationModel::Contacts::ContactReader value = nullptr;
	check_hresult(shim()->abi_GetContactReaderWithOptions(get(options), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContactList<T>::SaveContactAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_SaveContactAsync(get(contact), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContactList<T>::DeleteContactAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_DeleteContactAsync(get(contact), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IContactList<T>::GetContactAsync(StringReference const & contactId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> contacts;
	check_hresult(shim()->abi_GetContactAsync(get(contactId), put(contacts)));
	return contacts;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactListSyncStatus impl_IContactListSyncManager<T>::Status() const
{
	Windows::ApplicationModel::Contacts::ContactListSyncStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IContactListSyncManager<T>::LastSuccessfulSyncTime() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_LastSuccessfulSyncTime(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IContactListSyncManager<T>::LastAttemptedSyncTime() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_LastAttemptedSyncTime(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IContactListSyncManager<T>::SyncAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check_hresult(shim()->abi_SyncAsync(put(result)));
	return result;
}

template <typename T> long long impl_IContactListSyncManager<T>::SyncStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Contacts::ContactListSyncManager, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_SyncStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IContactListSyncManager<T>::SyncStatusChanged(F handler) const
{
	return SyncStatusChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Contacts::ContactListSyncManager, IInspectable>(handler));
}

template <typename T> void impl_IContactListSyncManager<T>::SyncStatusChanged(long long const token) const
{
	check_hresult(shim()->remove_SyncStatusChanged(token));
}

template <typename T> String impl_IContactConnectedServiceAccount<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_IContactConnectedServiceAccount<T>::Id(StringReference const & value) const
{
	check_hresult(shim()->put_Id(get(value)));
}

template <typename T> String impl_IContactConnectedServiceAccount<T>::ServiceName() const
{
	String value;
	check_hresult(shim()->get_ServiceName(put(value)));
	return value;
}

template <typename T> void impl_IContactConnectedServiceAccount<T>::ServiceName(StringReference const & value) const
{
	check_hresult(shim()->put_ServiceName(get(value)));
}

template <typename T> String impl_IContactSignificantOther<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IContactSignificantOther<T>::Name(StringReference const & value) const
{
	check_hresult(shim()->put_Name(get(value)));
}

template <typename T> String impl_IContactSignificantOther<T>::Description() const
{
	String value;
	check_hresult(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IContactSignificantOther<T>::Description(StringReference const & value) const
{
	check_hresult(shim()->put_Description(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactRelationship impl_IContactSignificantOther2<T>::Relationship() const
{
	Windows::ApplicationModel::Contacts::ContactRelationship value = {};
	check_hresult(shim()->get_Relationship(&value));
	return value;
}

template <typename T> void impl_IContactSignificantOther2<T>::Relationship(Windows::ApplicationModel::Contacts::ContactRelationship const value) const
{
	check_hresult(shim()->put_Relationship(value));
}

template <typename T> Windows::Foundation::Uri impl_IContactWebsite<T>::Uri() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> void impl_IContactWebsite<T>::Uri(Windows::Foundation::Uri const & value) const
{
	check_hresult(shim()->put_Uri(get(value)));
}

template <typename T> String impl_IContactWebsite<T>::Description() const
{
	String value;
	check_hresult(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IContactWebsite<T>::Description(StringReference const & value) const
{
	check_hresult(shim()->put_Description(get(value)));
}

template <typename T> String impl_IContactWebsite2<T>::RawValue() const
{
	String value;
	check_hresult(shim()->get_RawValue(put(value)));
	return value;
}

template <typename T> void impl_IContactWebsite2<T>::RawValue(StringReference const & value) const
{
	check_hresult(shim()->put_RawValue(get(value)));
}

template <typename T> String impl_IContactEmail<T>::Address() const
{
	String value;
	check_hresult(shim()->get_Address(put(value)));
	return value;
}

template <typename T> void impl_IContactEmail<T>::Address(StringReference const & value) const
{
	check_hresult(shim()->put_Address(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactEmailKind impl_IContactEmail<T>::Kind() const
{
	Windows::ApplicationModel::Contacts::ContactEmailKind value = {};
	check_hresult(shim()->get_Kind(&value));
	return value;
}

template <typename T> void impl_IContactEmail<T>::Kind(Windows::ApplicationModel::Contacts::ContactEmailKind const value) const
{
	check_hresult(shim()->put_Kind(value));
}

template <typename T> String impl_IContactEmail<T>::Description() const
{
	String value;
	check_hresult(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IContactEmail<T>::Description(StringReference const & value) const
{
	check_hresult(shim()->put_Description(get(value)));
}

template <typename T> String impl_IContactPhone<T>::Number() const
{
	String value;
	check_hresult(shim()->get_Number(put(value)));
	return value;
}

template <typename T> void impl_IContactPhone<T>::Number(StringReference const & value) const
{
	check_hresult(shim()->put_Number(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactPhoneKind impl_IContactPhone<T>::Kind() const
{
	Windows::ApplicationModel::Contacts::ContactPhoneKind value = {};
	check_hresult(shim()->get_Kind(&value));
	return value;
}

template <typename T> void impl_IContactPhone<T>::Kind(Windows::ApplicationModel::Contacts::ContactPhoneKind const value) const
{
	check_hresult(shim()->put_Kind(value));
}

template <typename T> String impl_IContactPhone<T>::Description() const
{
	String value;
	check_hresult(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IContactPhone<T>::Description(StringReference const & value) const
{
	check_hresult(shim()->put_Description(get(value)));
}

template <typename T> String impl_IContactAddress<T>::StreetAddress() const
{
	String value;
	check_hresult(shim()->get_StreetAddress(put(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::StreetAddress(StringReference const & value) const
{
	check_hresult(shim()->put_StreetAddress(get(value)));
}

template <typename T> String impl_IContactAddress<T>::Locality() const
{
	String value;
	check_hresult(shim()->get_Locality(put(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::Locality(StringReference const & value) const
{
	check_hresult(shim()->put_Locality(get(value)));
}

template <typename T> String impl_IContactAddress<T>::Region() const
{
	String value;
	check_hresult(shim()->get_Region(put(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::Region(StringReference const & value) const
{
	check_hresult(shim()->put_Region(get(value)));
}

template <typename T> String impl_IContactAddress<T>::Country() const
{
	String value;
	check_hresult(shim()->get_Country(put(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::Country(StringReference const & value) const
{
	check_hresult(shim()->put_Country(get(value)));
}

template <typename T> String impl_IContactAddress<T>::PostalCode() const
{
	String value;
	check_hresult(shim()->get_PostalCode(put(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::PostalCode(StringReference const & value) const
{
	check_hresult(shim()->put_PostalCode(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactAddressKind impl_IContactAddress<T>::Kind() const
{
	Windows::ApplicationModel::Contacts::ContactAddressKind value = {};
	check_hresult(shim()->get_Kind(&value));
	return value;
}

template <typename T> void impl_IContactAddress<T>::Kind(Windows::ApplicationModel::Contacts::ContactAddressKind const value) const
{
	check_hresult(shim()->put_Kind(value));
}

template <typename T> String impl_IContactAddress<T>::Description() const
{
	String value;
	check_hresult(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::Description(StringReference const & value) const
{
	check_hresult(shim()->put_Description(get(value)));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IContactDate<T>::Day() const
{
	Windows::Foundation::IReference<unsigned> value;
	check_hresult(shim()->get_Day(put(value)));
	return value;
}

template <typename T> void impl_IContactDate<T>::Day(Windows::Foundation::IReference<unsigned> const & value) const
{
	check_hresult(shim()->put_Day(get(value)));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IContactDate<T>::Month() const
{
	Windows::Foundation::IReference<unsigned> value;
	check_hresult(shim()->get_Month(put(value)));
	return value;
}

template <typename T> void impl_IContactDate<T>::Month(Windows::Foundation::IReference<unsigned> const & value) const
{
	check_hresult(shim()->put_Month(get(value)));
}

template <typename T> Windows::Foundation::IReference<int> impl_IContactDate<T>::Year() const
{
	Windows::Foundation::IReference<int> value;
	check_hresult(shim()->get_Year(put(value)));
	return value;
}

template <typename T> void impl_IContactDate<T>::Year(Windows::Foundation::IReference<int> const & value) const
{
	check_hresult(shim()->put_Year(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactDateKind impl_IContactDate<T>::Kind() const
{
	Windows::ApplicationModel::Contacts::ContactDateKind value = {};
	check_hresult(shim()->get_Kind(&value));
	return value;
}

template <typename T> void impl_IContactDate<T>::Kind(Windows::ApplicationModel::Contacts::ContactDateKind const value) const
{
	check_hresult(shim()->put_Kind(value));
}

template <typename T> String impl_IContactDate<T>::Description() const
{
	String value;
	check_hresult(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IContactDate<T>::Description(StringReference const & value) const
{
	check_hresult(shim()->put_Description(get(value)));
}

template <typename T> String impl_IContactJobInfo<T>::CompanyName() const
{
	String value;
	check_hresult(shim()->get_CompanyName(put(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::CompanyName(StringReference const & value) const
{
	check_hresult(shim()->put_CompanyName(get(value)));
}

template <typename T> String impl_IContactJobInfo<T>::CompanyYomiName() const
{
	String value;
	check_hresult(shim()->get_CompanyYomiName(put(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::CompanyYomiName(StringReference const & value) const
{
	check_hresult(shim()->put_CompanyYomiName(get(value)));
}

template <typename T> String impl_IContactJobInfo<T>::Department() const
{
	String value;
	check_hresult(shim()->get_Department(put(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::Department(StringReference const & value) const
{
	check_hresult(shim()->put_Department(get(value)));
}

template <typename T> String impl_IContactJobInfo<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::Title(StringReference const & value) const
{
	check_hresult(shim()->put_Title(get(value)));
}

template <typename T> String impl_IContactJobInfo<T>::Manager() const
{
	String value;
	check_hresult(shim()->get_Manager(put(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::Manager(StringReference const & value) const
{
	check_hresult(shim()->put_Manager(get(value)));
}

template <typename T> String impl_IContactJobInfo<T>::Office() const
{
	String value;
	check_hresult(shim()->get_Office(put(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::Office(StringReference const & value) const
{
	check_hresult(shim()->put_Office(get(value)));
}

template <typename T> String impl_IContactJobInfo<T>::CompanyAddress() const
{
	String value;
	check_hresult(shim()->get_CompanyAddress(put(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::CompanyAddress(StringReference const & value) const
{
	check_hresult(shim()->put_CompanyAddress(get(value)));
}

template <typename T> String impl_IContactJobInfo<T>::Description() const
{
	String value;
	check_hresult(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::Description(StringReference const & value) const
{
	check_hresult(shim()->put_Description(get(value)));
}

template <typename T> String impl_IContact<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IContact<T>::Name(StringReference const & value) const
{
	check_hresult(shim()->put_Name(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IContact<T>::Thumbnail() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check_hresult(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> void impl_IContact<T>::Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check_hresult(shim()->put_Thumbnail(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::IContactField> impl_IContact<T>::Fields() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::IContactField> value;
	check_hresult(shim()->get_Fields(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactFieldType impl_IContactField<T>::Type() const
{
	Windows::ApplicationModel::Contacts::ContactFieldType value = {};
	check_hresult(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactFieldCategory impl_IContactField<T>::Category() const
{
	Windows::ApplicationModel::Contacts::ContactFieldCategory value = {};
	check_hresult(shim()->get_Category(&value));
	return value;
}

template <typename T> String impl_IContactField<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IContactField<T>::Value() const
{
	String value;
	check_hresult(shim()->get_Value(put(value)));
	return value;
}

template <typename T> String impl_IContactName<T>::FirstName() const
{
	String value;
	check_hresult(shim()->get_FirstName(put(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::FirstName(StringReference const & value) const
{
	check_hresult(shim()->put_FirstName(get(value)));
}

template <typename T> String impl_IContactName<T>::LastName() const
{
	String value;
	check_hresult(shim()->get_LastName(put(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::LastName(StringReference const & value) const
{
	check_hresult(shim()->put_LastName(get(value)));
}

template <typename T> String impl_IContactName<T>::MiddleName() const
{
	String value;
	check_hresult(shim()->get_MiddleName(put(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::MiddleName(StringReference const & value) const
{
	check_hresult(shim()->put_MiddleName(get(value)));
}

template <typename T> String impl_IContactName<T>::YomiGivenName() const
{
	String value;
	check_hresult(shim()->get_YomiGivenName(put(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::YomiGivenName(StringReference const & value) const
{
	check_hresult(shim()->put_YomiGivenName(get(value)));
}

template <typename T> String impl_IContactName<T>::YomiFamilyName() const
{
	String value;
	check_hresult(shim()->get_YomiFamilyName(put(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::YomiFamilyName(StringReference const & value) const
{
	check_hresult(shim()->put_YomiFamilyName(get(value)));
}

template <typename T> String impl_IContactName<T>::HonorificNameSuffix() const
{
	String value;
	check_hresult(shim()->get_HonorificNameSuffix(put(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::HonorificNameSuffix(StringReference const & value) const
{
	check_hresult(shim()->put_HonorificNameSuffix(get(value)));
}

template <typename T> String impl_IContactName<T>::HonorificNamePrefix() const
{
	String value;
	check_hresult(shim()->get_HonorificNamePrefix(put(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::HonorificNamePrefix(StringReference const & value) const
{
	check_hresult(shim()->put_HonorificNamePrefix(get(value)));
}

template <typename T> String impl_IContactName<T>::DisplayName() const
{
	String value;
	check_hresult(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IContactName<T>::YomiDisplayName() const
{
	String value;
	check_hresult(shim()->get_YomiDisplayName(put(value)));
	return value;
}

template <typename T> String impl_IContact2<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_IContact2<T>::Id(StringReference const & value) const
{
	check_hresult(shim()->put_Id(get(value)));
}

template <typename T> String impl_IContact2<T>::Notes() const
{
	String value;
	check_hresult(shim()->get_Notes(put(value)));
	return value;
}

template <typename T> void impl_IContact2<T>::Notes(StringReference const & value) const
{
	check_hresult(shim()->put_Notes(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactPhone> impl_IContact2<T>::Phones() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactPhone> value;
	check_hresult(shim()->get_Phones(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactEmail> impl_IContact2<T>::Emails() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactEmail> value;
	check_hresult(shim()->get_Emails(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactAddress> impl_IContact2<T>::Addresses() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactAddress> value;
	check_hresult(shim()->get_Addresses(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount> impl_IContact2<T>::ConnectedServiceAccounts() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount> value;
	check_hresult(shim()->get_ConnectedServiceAccounts(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactDate> impl_IContact2<T>::ImportantDates() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactDate> value;
	check_hresult(shim()->get_ImportantDates(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IContact2<T>::DataSuppliers() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_DataSuppliers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactJobInfo> impl_IContact2<T>::JobInfo() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactJobInfo> value;
	check_hresult(shim()->get_JobInfo(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactSignificantOther> impl_IContact2<T>::SignificantOthers() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactSignificantOther> value;
	check_hresult(shim()->get_SignificantOthers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactWebsite> impl_IContact2<T>::Websites() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactWebsite> value;
	check_hresult(shim()->get_Websites(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IContact2<T>::ProviderProperties() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check_hresult(shim()->get_ProviderProperties(put(value)));
	return value;
}

template <typename T> String impl_IContact3<T>::ContactListId() const
{
	String value;
	check_hresult(shim()->get_ContactListId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IContact3<T>::DisplayPictureUserUpdateTime() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_DisplayPictureUserUpdateTime(&value));
	return value;
}

template <typename T> void impl_IContact3<T>::DisplayPictureUserUpdateTime(Windows::Foundation::DateTime const & value) const
{
	check_hresult(shim()->put_DisplayPictureUserUpdateTime(value));
}

template <typename T> bool impl_IContact3<T>::IsMe() const
{
	bool value = {};
	check_hresult(shim()->get_IsMe(put(value)));
	return value;
}

template <typename T> String impl_IContact3<T>::AggregateId() const
{
	String value;
	check_hresult(shim()->get_AggregateId(put(value)));
	return value;
}

template <typename T> String impl_IContact3<T>::RemoteId() const
{
	String value;
	check_hresult(shim()->get_RemoteId(put(value)));
	return value;
}

template <typename T> void impl_IContact3<T>::RemoteId(StringReference const & value) const
{
	check_hresult(shim()->put_RemoteId(get(value)));
}

template <typename T> String impl_IContact3<T>::RingToneToken() const
{
	String value;
	check_hresult(shim()->get_RingToneToken(put(value)));
	return value;
}

template <typename T> void impl_IContact3<T>::RingToneToken(StringReference const & value) const
{
	check_hresult(shim()->put_RingToneToken(get(value)));
}

template <typename T> bool impl_IContact3<T>::IsDisplayPictureManuallySet() const
{
	bool value = {};
	check_hresult(shim()->get_IsDisplayPictureManuallySet(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IContact3<T>::LargeDisplayPicture() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check_hresult(shim()->get_LargeDisplayPicture(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IContact3<T>::SmallDisplayPicture() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check_hresult(shim()->get_SmallDisplayPicture(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IContact3<T>::SourceDisplayPicture() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check_hresult(shim()->get_SourceDisplayPicture(put(value)));
	return value;
}

template <typename T> void impl_IContact3<T>::SourceDisplayPicture(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check_hresult(shim()->put_SourceDisplayPicture(get(value)));
}

template <typename T> String impl_IContact3<T>::TextToneToken() const
{
	String value;
	check_hresult(shim()->get_TextToneToken(put(value)));
	return value;
}

template <typename T> void impl_IContact3<T>::TextToneToken(StringReference const & value) const
{
	check_hresult(shim()->put_TextToneToken(get(value)));
}

template <typename T> bool impl_IContact3<T>::IsAggregate() const
{
	bool value = {};
	check_hresult(shim()->get_IsAggregate(put(value)));
	return value;
}

template <typename T> String impl_IContact3<T>::FullName() const
{
	String value;
	check_hresult(shim()->get_FullName(put(value)));
	return value;
}

template <typename T> String impl_IContact3<T>::DisplayNameOverride() const
{
	String value;
	check_hresult(shim()->get_DisplayNameOverride(put(value)));
	return value;
}

template <typename T> void impl_IContact3<T>::DisplayNameOverride(StringReference const & value) const
{
	check_hresult(shim()->put_DisplayNameOverride(get(value)));
}

template <typename T> String impl_IContact3<T>::Nickname() const
{
	String value;
	check_hresult(shim()->get_Nickname(put(value)));
	return value;
}

template <typename T> void impl_IContact3<T>::Nickname(StringReference const & value) const
{
	check_hresult(shim()->put_Nickname(get(value)));
}

template <typename T> String impl_IContact3<T>::SortName() const
{
	String value;
	check_hresult(shim()->get_SortName(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactChangeType impl_IContactChange<T>::ChangeType() const
{
	Windows::ApplicationModel::Contacts::ContactChangeType value = {};
	check_hresult(shim()->get_ChangeType(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactChange<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value = nullptr;
	check_hresult(shim()->get_Contact(put(value)));
	return value;
}

template <typename T> void impl_IContactChangedDeferral<T>::Complete() const
{
	check_hresult(shim()->abi_Complete());
}

template <typename T> Windows::ApplicationModel::Contacts::ContactChangedDeferral impl_IContactChangedEventArgs<T>::GetDeferral() const
{
	Windows::ApplicationModel::Contacts::ContactChangedDeferral value = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> void impl_IContactChangeReader<T>::AcceptChanges() const
{
	check_hresult(shim()->abi_AcceptChanges());
}

template <typename T> void impl_IContactChangeReader<T>::AcceptChangesThrough(Windows::ApplicationModel::Contacts::ContactChange const & lastChangeToAccept) const
{
	check_hresult(shim()->abi_AcceptChangesThrough(get(lastChangeToAccept)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactChange>> impl_IContactChangeReader<T>::ReadBatchAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactChange>> value;
	check_hresult(shim()->abi_ReadBatchAsync(put(value)));
	return value;
}

template <typename T> void impl_IContactChangeTracker<T>::Enable() const
{
	check_hresult(shim()->abi_Enable());
}

template <typename T> Windows::ApplicationModel::Contacts::ContactChangeReader impl_IContactChangeTracker<T>::GetChangeReader() const
{
	Windows::ApplicationModel::Contacts::ContactChangeReader value = nullptr;
	check_hresult(shim()->abi_GetChangeReader(put(value)));
	return value;
}

template <typename T> void impl_IContactChangeTracker<T>::Reset() const
{
	check_hresult(shim()->abi_Reset());
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactBatch> impl_IContactReader<T>::ReadBatchAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactBatch> value;
	check_hresult(shim()->abi_ReadBatchAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactMatchReason> impl_IContactReader<T>::GetMatchingPropertiesWithMatchReason(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactMatchReason> ppRetVal;
	check_hresult(shim()->abi_GetMatchingPropertiesWithMatchReason(get(contact), put(ppRetVal)));
	return ppRetVal;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactQuerySearchFields impl_IContactQueryTextSearch<T>::Fields() const
{
	Windows::ApplicationModel::Contacts::ContactQuerySearchFields value = {};
	check_hresult(shim()->get_Fields(&value));
	return value;
}

template <typename T> void impl_IContactQueryTextSearch<T>::Fields(Windows::ApplicationModel::Contacts::ContactQuerySearchFields const value) const
{
	check_hresult(shim()->put_Fields(value));
}

template <typename T> String impl_IContactQueryTextSearch<T>::Text() const
{
	String value;
	check_hresult(shim()->get_Text(put(value)));
	return value;
}

template <typename T> void impl_IContactQueryTextSearch<T>::Text(StringReference const & value) const
{
	check_hresult(shim()->put_Text(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactQuerySearchScope impl_IContactQueryTextSearch<T>::SearchScope() const
{
	Windows::ApplicationModel::Contacts::ContactQuerySearchScope value = {};
	check_hresult(shim()->get_SearchScope(&value));
	return value;
}

template <typename T> void impl_IContactQueryTextSearch<T>::SearchScope(Windows::ApplicationModel::Contacts::ContactQuerySearchScope const value) const
{
	check_hresult(shim()->put_SearchScope(value));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactQueryOptions impl_IContactQueryOptionsFactory<T>::CreateWithText(StringReference const & text) const
{
	Windows::ApplicationModel::Contacts::ContactQueryOptions result = nullptr;
	check_hresult(shim()->abi_CreateWithText(get(text), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactQueryOptions impl_IContactQueryOptionsFactory<T>::CreateWithTextAndFields(StringReference const & text, Windows::ApplicationModel::Contacts::ContactQuerySearchFields const fields) const
{
	Windows::ApplicationModel::Contacts::ContactQueryOptions result = nullptr;
	check_hresult(shim()->abi_CreateWithTextAndFields(get(text), fields, put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactQueryTextSearch impl_IContactQueryOptions<T>::TextSearch() const
{
	Windows::ApplicationModel::Contacts::ContactQueryTextSearch value = nullptr;
	check_hresult(shim()->get_TextSearch(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IContactQueryOptions<T>::ContactListIds() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_ContactListIds(put(value)));
	return value;
}

template <typename T> bool impl_IContactQueryOptions<T>::IncludeContactsFromHiddenLists() const
{
	bool value = {};
	check_hresult(shim()->get_IncludeContactsFromHiddenLists(put(value)));
	return value;
}

template <typename T> void impl_IContactQueryOptions<T>::IncludeContactsFromHiddenLists(bool const value) const
{
	check_hresult(shim()->put_IncludeContactsFromHiddenLists(value));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactQueryDesiredFields impl_IContactQueryOptions<T>::DesiredFields() const
{
	Windows::ApplicationModel::Contacts::ContactQueryDesiredFields value = {};
	check_hresult(shim()->get_DesiredFields(&value));
	return value;
}

template <typename T> void impl_IContactQueryOptions<T>::DesiredFields(Windows::ApplicationModel::Contacts::ContactQueryDesiredFields const value) const
{
	check_hresult(shim()->put_DesiredFields(value));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactAnnotationOperations impl_IContactQueryOptions<T>::DesiredOperations() const
{
	Windows::ApplicationModel::Contacts::ContactAnnotationOperations value = {};
	check_hresult(shim()->get_DesiredOperations(&value));
	return value;
}

template <typename T> void impl_IContactQueryOptions<T>::DesiredOperations(Windows::ApplicationModel::Contacts::ContactAnnotationOperations const value) const
{
	check_hresult(shim()->put_DesiredOperations(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IContactQueryOptions<T>::AnnotationListIds() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_AnnotationListIds(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact> impl_IContactBatch<T>::Contacts() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact> value;
	check_hresult(shim()->get_Contacts(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactBatchStatus impl_IContactBatch<T>::Status() const
{
	Windows::ApplicationModel::Contacts::ContactBatchStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactMatchReasonKind impl_IContactMatchReason<T>::Field() const
{
	Windows::ApplicationModel::Contacts::ContactMatchReasonKind value = {};
	check_hresult(shim()->get_Field(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment> impl_IContactMatchReason<T>::Segments() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment> value;
	check_hresult(shim()->get_Segments(put(value)));
	return value;
}

template <typename T> String impl_IContactMatchReason<T>::Text() const
{
	String value;
	check_hresult(shim()->get_Text(put(value)));
	return value;
}

template <typename T> String impl_IContactLaunchActionVerbsStatics<T>::Call() const
{
	String value;
	check_hresult(shim()->get_Call(put(value)));
	return value;
}

template <typename T> String impl_IContactLaunchActionVerbsStatics<T>::Message() const
{
	String value;
	check_hresult(shim()->get_Message(put(value)));
	return value;
}

template <typename T> String impl_IContactLaunchActionVerbsStatics<T>::Map() const
{
	String value;
	check_hresult(shim()->get_Map(put(value)));
	return value;
}

template <typename T> String impl_IContactLaunchActionVerbsStatics<T>::Post() const
{
	String value;
	check_hresult(shim()->get_Post(put(value)));
	return value;
}

template <typename T> String impl_IContactLaunchActionVerbsStatics<T>::VideoCall() const
{
	String value;
	check_hresult(shim()->get_VideoCall(put(value)));
	return value;
}

template <typename T> String impl_IContactLocationField<T>::UnstructuredAddress() const
{
	String value;
	check_hresult(shim()->get_UnstructuredAddress(put(value)));
	return value;
}

template <typename T> String impl_IContactLocationField<T>::Street() const
{
	String value;
	check_hresult(shim()->get_Street(put(value)));
	return value;
}

template <typename T> String impl_IContactLocationField<T>::City() const
{
	String value;
	check_hresult(shim()->get_City(put(value)));
	return value;
}

template <typename T> String impl_IContactLocationField<T>::Region() const
{
	String value;
	check_hresult(shim()->get_Region(put(value)));
	return value;
}

template <typename T> String impl_IContactLocationField<T>::Country() const
{
	String value;
	check_hresult(shim()->get_Country(put(value)));
	return value;
}

template <typename T> String impl_IContactLocationField<T>::PostalCode() const
{
	String value;
	check_hresult(shim()->get_PostalCode(put(value)));
	return value;
}

template <typename T> String impl_IContactInstantMessageField<T>::UserName() const
{
	String value;
	check_hresult(shim()->get_UserName(put(value)));
	return value;
}

template <typename T> String impl_IContactInstantMessageField<T>::Service() const
{
	String value;
	check_hresult(shim()->get_Service(put(value)));
	return value;
}

template <typename T> String impl_IContactInstantMessageField<T>::DisplayText() const
{
	String value;
	check_hresult(shim()->get_DisplayText(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IContactInstantMessageField<T>::LaunchUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_LaunchUri(put(value)));
	return value;
}

template <typename T> String impl_IKnownContactFieldStatics<T>::Email() const
{
	String value;
	check_hresult(shim()->get_Email(put(value)));
	return value;
}

template <typename T> String impl_IKnownContactFieldStatics<T>::PhoneNumber() const
{
	String value;
	check_hresult(shim()->get_PhoneNumber(put(value)));
	return value;
}

template <typename T> String impl_IKnownContactFieldStatics<T>::Location() const
{
	String value;
	check_hresult(shim()->get_Location(put(value)));
	return value;
}

template <typename T> String impl_IKnownContactFieldStatics<T>::InstantMessage() const
{
	String value;
	check_hresult(shim()->get_InstantMessage(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactFieldType impl_IKnownContactFieldStatics<T>::ConvertNameToType(StringReference const & name) const
{
	Windows::ApplicationModel::Contacts::ContactFieldType type = {};
	check_hresult(shim()->abi_ConvertNameToType(get(name), &type));
	return type;
}

template <typename T> String impl_IKnownContactFieldStatics<T>::ConvertTypeToName(Windows::ApplicationModel::Contacts::ContactFieldType const type) const
{
	String name;
	check_hresult(shim()->abi_ConvertTypeToName(type, put(name)));
	return name;
}

template <typename T> String impl_IContactInformation<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> impl_IContactInformation<T>::GetThumbnailAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> operation;
	check_hresult(shim()->abi_GetThumbnailAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> impl_IContactInformation<T>::Emails() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> value;
	check_hresult(shim()->get_Emails(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> impl_IContactInformation<T>::PhoneNumbers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> value;
	check_hresult(shim()->get_PhoneNumbers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactLocationField> impl_IContactInformation<T>::Locations() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactLocationField> value;
	check_hresult(shim()->get_Locations(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactInstantMessageField> impl_IContactInformation<T>::InstantMessages() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactInstantMessageField> value;
	check_hresult(shim()->get_InstantMessages(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> impl_IContactInformation<T>::CustomFields() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> value;
	check_hresult(shim()->get_CustomFields(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> impl_IContactInformation<T>::QueryCustomFields(StringReference const & customName) const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> value;
	check_hresult(shim()->abi_QueryCustomFields(get(customName), put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactField impl_IContactFieldFactory<T>::CreateField(StringReference const & value, Windows::ApplicationModel::Contacts::ContactFieldType const type) const
{
	Windows::ApplicationModel::Contacts::ContactField field = nullptr;
	check_hresult(shim()->abi_CreateField_Default(get(value), type, put(field)));
	return field;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactField impl_IContactFieldFactory<T>::CreateField(StringReference const & value, Windows::ApplicationModel::Contacts::ContactFieldType const type, Windows::ApplicationModel::Contacts::ContactFieldCategory const category) const
{
	Windows::ApplicationModel::Contacts::ContactField field = nullptr;
	check_hresult(shim()->abi_CreateField_Category(get(value), type, category, put(field)));
	return field;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactField impl_IContactFieldFactory<T>::CreateField(StringReference const & name, StringReference const & value, Windows::ApplicationModel::Contacts::ContactFieldType const type, Windows::ApplicationModel::Contacts::ContactFieldCategory const category) const
{
	Windows::ApplicationModel::Contacts::ContactField field = nullptr;
	check_hresult(shim()->abi_CreateField_Custom(get(name), get(value), type, category, put(field)));
	return field;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactLocationField impl_IContactLocationFieldFactory<T>::CreateLocation(StringReference const & unstructuredAddress) const
{
	Windows::ApplicationModel::Contacts::ContactLocationField field = nullptr;
	check_hresult(shim()->abi_CreateLocation_Default(get(unstructuredAddress), put(field)));
	return field;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactLocationField impl_IContactLocationFieldFactory<T>::CreateLocation(StringReference const & unstructuredAddress, Windows::ApplicationModel::Contacts::ContactFieldCategory const category) const
{
	Windows::ApplicationModel::Contacts::ContactLocationField field = nullptr;
	check_hresult(shim()->abi_CreateLocation_Category(get(unstructuredAddress), category, put(field)));
	return field;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactLocationField impl_IContactLocationFieldFactory<T>::CreateLocation(StringReference const & unstructuredAddress, Windows::ApplicationModel::Contacts::ContactFieldCategory const category, StringReference const & street, StringReference const & city, StringReference const & region, StringReference const & country, StringReference const & postalCode) const
{
	Windows::ApplicationModel::Contacts::ContactLocationField field = nullptr;
	check_hresult(shim()->abi_CreateLocation_All(get(unstructuredAddress), category, get(street), get(city), get(region), get(country), get(postalCode), put(field)));
	return field;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactInstantMessageField impl_IContactInstantMessageFieldFactory<T>::CreateInstantMessage(StringReference const & userName) const
{
	Windows::ApplicationModel::Contacts::ContactInstantMessageField field = nullptr;
	check_hresult(shim()->abi_CreateInstantMessage_Default(get(userName), put(field)));
	return field;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactInstantMessageField impl_IContactInstantMessageFieldFactory<T>::CreateInstantMessage(StringReference const & userName, Windows::ApplicationModel::Contacts::ContactFieldCategory const category) const
{
	Windows::ApplicationModel::Contacts::ContactInstantMessageField field = nullptr;
	check_hresult(shim()->abi_CreateInstantMessage_Category(get(userName), category, put(field)));
	return field;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactInstantMessageField impl_IContactInstantMessageFieldFactory<T>::CreateInstantMessage(StringReference const & userName, Windows::ApplicationModel::Contacts::ContactFieldCategory const category, StringReference const & service, StringReference const & displayText, Windows::Foundation::Uri const & verb) const
{
	Windows::ApplicationModel::Contacts::ContactInstantMessageField field = nullptr;
	check_hresult(shim()->abi_CreateInstantMessage_All(get(userName), category, get(service), get(displayText), get(verb), put(field)));
	return field;
}

template <typename T> String impl_IContactPicker<T>::CommitButtonText() const
{
	String value;
	check_hresult(shim()->get_CommitButtonText(put(value)));
	return value;
}

template <typename T> void impl_IContactPicker<T>::CommitButtonText(StringReference const & value) const
{
	check_hresult(shim()->put_CommitButtonText(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactSelectionMode impl_IContactPicker<T>::SelectionMode() const
{
	Windows::ApplicationModel::Contacts::ContactSelectionMode value = {};
	check_hresult(shim()->get_SelectionMode(&value));
	return value;
}

template <typename T> void impl_IContactPicker<T>::SelectionMode(Windows::ApplicationModel::Contacts::ContactSelectionMode const value) const
{
	check_hresult(shim()->put_SelectionMode(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IContactPicker<T>::DesiredFields() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_DesiredFields(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactInformation> impl_IContactPicker<T>::PickSingleContactAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactInformation> result;
	check_hresult(shim()->abi_PickSingleContactAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactInformation>> impl_IContactPicker<T>::PickMultipleContactsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactInformation>> result;
	check_hresult(shim()->abi_PickMultipleContactsAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::ApplicationModel::Contacts::ContactFieldType> impl_IContactPicker2<T>::DesiredFieldsWithContactFieldType() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::ApplicationModel::Contacts::ContactFieldType> value;
	check_hresult(shim()->get_DesiredFieldsWithContactFieldType(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IContactPicker2<T>::PickContactAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> result;
	check_hresult(shim()->abi_PickContactAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Contact>> impl_IContactPicker2<T>::PickContactsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Contact>> result;
	check_hresult(shim()->abi_PickContactsAsync(put(result)));
	return result;
}

template <typename T> void impl_IContactCardDelayedDataLoader<T>::SetData(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	check_hresult(shim()->abi_SetData(get(contact)));
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

template <typename T> String impl_IContactRemovedEventArgs<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Provider::AddContactResult impl_IContactPickerUI<T>::AddContact(StringReference const & id, Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::ApplicationModel::Contacts::Provider::AddContactResult result = {};
	check_hresult(shim()->abi_AddContact(get(id), get(contact), &result));
	return result;
}

template <typename T> void impl_IContactPickerUI<T>::RemoveContact(StringReference const & id) const
{
	check_hresult(shim()->abi_RemoveContact(get(id)));
}

template <typename T> bool impl_IContactPickerUI<T>::ContainsContact(StringReference const & id) const
{
	bool isContained = {};
	check_hresult(shim()->abi_ContainsContact(get(id), put(isContained)));
	return isContained;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IContactPickerUI<T>::DesiredFields() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_DesiredFields(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactSelectionMode impl_IContactPickerUI<T>::SelectionMode() const
{
	Windows::ApplicationModel::Contacts::ContactSelectionMode value = {};
	check_hresult(shim()->get_SelectionMode(&value));
	return value;
}

template <typename T> long long impl_IContactPickerUI<T>::ContactRemoved(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Contacts::Provider::ContactPickerUI, Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ContactRemoved(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IContactPickerUI<T>::ContactRemoved(F handler) const
{
	return ContactRemoved(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Contacts::Provider::ContactPickerUI, Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs>(handler));
}

template <typename T> void impl_IContactPickerUI<T>::ContactRemoved(long long const token) const
{
	check_hresult(shim()->remove_ContactRemoved(token));
}

template <typename T> Windows::ApplicationModel::Contacts::Provider::AddContactResult impl_IContactPickerUI2<T>::AddContact(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::ApplicationModel::Contacts::Provider::AddContactResult result = {};
	check_hresult(shim()->abi_AddContact(get(contact), &result));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::ApplicationModel::Contacts::ContactFieldType> impl_IContactPickerUI2<T>::DesiredFieldsWithContactFieldType() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::ApplicationModel::Contacts::ContactFieldType> value;
	check_hresult(shim()->get_DesiredFieldsWithContactFieldType(put(value)));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Core {

template <typename T> Windows::ApplicationModel::AppDisplayInfo impl_IAppListEntry<T>::DisplayInfo() const
{
	Windows::ApplicationModel::AppDisplayInfo value = nullptr;
	check_hresult(shim()->get_DisplayInfo(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppListEntry<T>::LaunchAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_LaunchAsync(put(operation)));
	return operation;
}

template <typename T> void impl_IFrameworkView<T>::Initialize(Windows::ApplicationModel::Core::CoreApplicationView const & applicationView) const
{
	check_hresult(shim()->abi_Initialize(get(applicationView)));
}

template <typename T> void impl_IFrameworkView<T>::SetWindow(Windows::UI::Core::CoreWindow const & window) const
{
	check_hresult(shim()->abi_SetWindow(get(window)));
}

template <typename T> void impl_IFrameworkView<T>::Load(StringReference const & entryPoint) const
{
	check_hresult(shim()->abi_Load(get(entryPoint)));
}

template <typename T> void impl_IFrameworkView<T>::Run() const
{
	check_hresult(shim()->abi_Run());
}

template <typename T> void impl_IFrameworkView<T>::Uninitialize() const
{
	check_hresult(shim()->abi_Uninitialize());
}

template <typename T> Windows::ApplicationModel::Core::IFrameworkView impl_IFrameworkViewSource<T>::CreateView() const
{
	Windows::ApplicationModel::Core::IFrameworkView viewProvider;
	check_hresult(shim()->abi_CreateView(put(viewProvider)));
	return viewProvider;
}

template <typename T> String impl_ICoreApplication<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> long long impl_ICoreApplication<T>::Suspending(Windows::Foundation::IEventHandler<Windows::ApplicationModel::SuspendingEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Suspending(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICoreApplication<T>::Suspending(F handler) const
{
	return Suspending(Windows::Foundation::EventHandler<Windows::ApplicationModel::SuspendingEventArgs>(handler));
}

template <typename T> void impl_ICoreApplication<T>::Suspending(long long const token) const
{
	check_hresult(shim()->remove_Suspending(token));
}

template <typename T> long long impl_ICoreApplication<T>::Resuming(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Resuming(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICoreApplication<T>::Resuming(F handler) const
{
	return Resuming(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_ICoreApplication<T>::Resuming(long long const token) const
{
	check_hresult(shim()->remove_Resuming(token));
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_ICoreApplication<T>::Properties() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check_hresult(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Core::CoreApplicationView impl_ICoreApplication<T>::GetCurrentView() const
{
	Windows::ApplicationModel::Core::CoreApplicationView value = nullptr;
	check_hresult(shim()->abi_GetCurrentView(put(value)));
	return value;
}

template <typename T> void impl_ICoreApplication<T>::Run(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource) const
{
	check_hresult(shim()->abi_Run(get(viewSource)));
}

template <typename T> void impl_ICoreApplication<T>::RunWithActivationFactories(Windows::Foundation::IGetActivationFactory const & activationFactoryCallback) const
{
	check_hresult(shim()->abi_RunWithActivationFactories(get(activationFactoryCallback)));
}

template <typename T> void impl_ICoreApplicationUseCount<T>::IncrementApplicationUseCount() const
{
	check_hresult(shim()->abi_IncrementApplicationUseCount());
}

template <typename T> void impl_ICoreApplicationUseCount<T>::DecrementApplicationUseCount() const
{
	check_hresult(shim()->abi_DecrementApplicationUseCount());
}

template <typename T> void impl_ICoreApplicationExit<T>::Exit() const
{
	check_hresult(shim()->abi_Exit());
}

template <typename T> long long impl_ICoreApplicationExit<T>::Exiting(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Exiting(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICoreApplicationExit<T>::Exiting(F handler) const
{
	return Exiting(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_ICoreApplicationExit<T>::Exiting(long long const token) const
{
	check_hresult(shim()->remove_Exiting(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::CoreApplicationView> impl_ICoreImmersiveApplication<T>::Views() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::CoreApplicationView> value;
	check_hresult(shim()->get_Views(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Core::CoreApplicationView impl_ICoreImmersiveApplication<T>::CreateNewView(StringReference const & runtimeType, StringReference const & entryPoint) const
{
	Windows::ApplicationModel::Core::CoreApplicationView view = nullptr;
	check_hresult(shim()->abi_CreateNewView(get(runtimeType), get(entryPoint), put(view)));
	return view;
}

template <typename T> Windows::ApplicationModel::Core::CoreApplicationView impl_ICoreImmersiveApplication<T>::MainView() const
{
	Windows::ApplicationModel::Core::CoreApplicationView value = nullptr;
	check_hresult(shim()->get_MainView(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Core::CoreApplicationView impl_ICoreImmersiveApplication2<T>::CreateNewView() const
{
	Windows::ApplicationModel::Core::CoreApplicationView view = nullptr;
	check_hresult(shim()->abi_CreateNewViewFromMainView(put(view)));
	return view;
}

template <typename T> Windows::ApplicationModel::Core::CoreApplicationView impl_ICoreImmersiveApplication3<T>::CreateNewView(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource) const
{
	Windows::ApplicationModel::Core::CoreApplicationView view = nullptr;
	check_hresult(shim()->abi_CreateNewViewWithViewSource(get(viewSource), put(view)));
	return view;
}

template <typename T> long long impl_ICoreApplicationUnhandledError<T>::UnhandledErrorDetected(Windows::Foundation::IEventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_UnhandledErrorDetected(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICoreApplicationUnhandledError<T>::UnhandledErrorDetected(F handler) const
{
	return UnhandledErrorDetected(Windows::Foundation::EventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>(handler));
}

template <typename T> void impl_ICoreApplicationUnhandledError<T>::UnhandledErrorDetected(long long const token) const
{
	check_hresult(shim()->remove_UnhandledErrorDetected(token));
}

template <typename T> Windows::UI::Core::CoreWindow impl_ICoreApplicationView<T>::CoreWindow() const
{
	Windows::UI::Core::CoreWindow value = nullptr;
	check_hresult(shim()->get_CoreWindow(put(value)));
	return value;
}

template <typename T> long long impl_ICoreApplicationView<T>::Activated(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationView, Windows::ApplicationModel::Activation::IActivatedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Activated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICoreApplicationView<T>::Activated(F handler) const
{
	return Activated(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationView, Windows::ApplicationModel::Activation::IActivatedEventArgs>(handler));
}

template <typename T> void impl_ICoreApplicationView<T>::Activated(long long const token) const
{
	check_hresult(shim()->remove_Activated(token));
}

template <typename T> bool impl_ICoreApplicationView<T>::IsMain() const
{
	bool value = {};
	check_hresult(shim()->get_IsMain(put(value)));
	return value;
}

template <typename T> bool impl_ICoreApplicationView<T>::IsHosted() const
{
	bool value = {};
	check_hresult(shim()->get_IsHosted(put(value)));
	return value;
}

template <typename T> Windows::UI::Core::CoreDispatcher impl_ICoreApplicationView2<T>::Dispatcher() const
{
	Windows::UI::Core::CoreDispatcher value = nullptr;
	check_hresult(shim()->get_Dispatcher(put(value)));
	return value;
}

template <typename T> bool impl_ICoreApplicationView3<T>::IsComponent() const
{
	bool value = {};
	check_hresult(shim()->get_IsComponent(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Core::CoreApplicationViewTitleBar impl_ICoreApplicationView3<T>::TitleBar() const
{
	Windows::ApplicationModel::Core::CoreApplicationViewTitleBar value = nullptr;
	check_hresult(shim()->get_TitleBar(put(value)));
	return value;
}

template <typename T> long long impl_ICoreApplicationView3<T>::HostedViewClosing(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationView, Windows::ApplicationModel::Core::HostedViewClosingEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_HostedViewClosing(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICoreApplicationView3<T>::HostedViewClosing(F handler) const
{
	return HostedViewClosing(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationView, Windows::ApplicationModel::Core::HostedViewClosingEventArgs>(handler));
}

template <typename T> void impl_ICoreApplicationView3<T>::HostedViewClosing(long long const token) const
{
	check_hresult(shim()->remove_HostedViewClosing(token));
}

template <typename T> Windows::Foundation::Deferral impl_IHostedViewClosingEventArgs<T>::GetDeferral() const
{
	Windows::Foundation::Deferral result = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(result)));
	return result;
}

template <typename T> void impl_ICoreApplicationViewTitleBar<T>::ExtendViewIntoTitleBar(bool const value) const
{
	check_hresult(shim()->put_ExtendViewIntoTitleBar(value));
}

template <typename T> bool impl_ICoreApplicationViewTitleBar<T>::ExtendViewIntoTitleBar() const
{
	bool value = {};
	check_hresult(shim()->get_ExtendViewIntoTitleBar(put(value)));
	return value;
}

template <typename T> double impl_ICoreApplicationViewTitleBar<T>::SystemOverlayLeftInset() const
{
	double value = {};
	check_hresult(shim()->get_SystemOverlayLeftInset(&value));
	return value;
}

template <typename T> double impl_ICoreApplicationViewTitleBar<T>::SystemOverlayRightInset() const
{
	double value = {};
	check_hresult(shim()->get_SystemOverlayRightInset(&value));
	return value;
}

template <typename T> double impl_ICoreApplicationViewTitleBar<T>::Height() const
{
	double value = {};
	check_hresult(shim()->get_Height(&value));
	return value;
}

template <typename T> long long impl_ICoreApplicationViewTitleBar<T>::LayoutMetricsChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationViewTitleBar, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_LayoutMetricsChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICoreApplicationViewTitleBar<T>::LayoutMetricsChanged(F handler) const
{
	return LayoutMetricsChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationViewTitleBar, IInspectable>(handler));
}

template <typename T> void impl_ICoreApplicationViewTitleBar<T>::LayoutMetricsChanged(long long const token) const
{
	check_hresult(shim()->remove_LayoutMetricsChanged(token));
}

template <typename T> bool impl_ICoreApplicationViewTitleBar<T>::IsVisible() const
{
	bool value = {};
	check_hresult(shim()->get_IsVisible(put(value)));
	return value;
}

template <typename T> long long impl_ICoreApplicationViewTitleBar<T>::IsVisibleChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationViewTitleBar, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_IsVisibleChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICoreApplicationViewTitleBar<T>::IsVisibleChanged(F handler) const
{
	return IsVisibleChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationViewTitleBar, IInspectable>(handler));
}

template <typename T> void impl_ICoreApplicationViewTitleBar<T>::IsVisibleChanged(long long const token) const
{
	check_hresult(shim()->remove_IsVisibleChanged(token));
}

template <typename T> Windows::ApplicationModel::Core::UnhandledError impl_IUnhandledErrorDetectedEventArgs<T>::UnhandledError() const
{
	Windows::ApplicationModel::Core::UnhandledError value = nullptr;
	check_hresult(shim()->get_UnhandledError(put(value)));
	return value;
}

template <typename T> bool impl_IUnhandledError<T>::Handled() const
{
	bool value = {};
	check_hresult(shim()->get_Handled(put(value)));
	return value;
}

template <typename T> void impl_IUnhandledError<T>::Propagate() const
{
	check_hresult(shim()->abi_Propagate());
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

template <typename T> void impl_IDataProviderHandler<T>::Invoke(Windows::ApplicationModel::DataTransfer::DataProviderRequest const & request) const
{
	check_hresult(shim()->abi_Invoke(get(request)));
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::Text() const
{
	String value;
	check_hresult(shim()->get_Text(put(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::Uri() const
{
	String value;
	check_hresult(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::Html() const
{
	String value;
	check_hresult(shim()->get_Html(put(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::Rtf() const
{
	String value;
	check_hresult(shim()->get_Rtf(put(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::Bitmap() const
{
	String value;
	check_hresult(shim()->get_Bitmap(put(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::StorageItems() const
{
	String value;
	check_hresult(shim()->get_StorageItems(put(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics2<T>::WebLink() const
{
	String value;
	check_hresult(shim()->get_WebLink(put(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics2<T>::ApplicationLink() const
{
	String value;
	check_hresult(shim()->get_ApplicationLink(put(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySetView<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySetView<T>::Description() const
{
	String value;
	check_hresult(shim()->get_Description(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IDataPackagePropertySetView<T>::Thumbnail() const
{
	Windows::Storage::Streams::RandomAccessStreamReference value = nullptr;
	check_hresult(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IDataPackagePropertySetView<T>::FileTypes() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_FileTypes(put(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySetView<T>::ApplicationName() const
{
	String value;
	check_hresult(shim()->get_ApplicationName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySetView<T>::ApplicationListingUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_ApplicationListingUri(put(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySetView2<T>::PackageFamilyName() const
{
	String value;
	check_hresult(shim()->get_PackageFamilyName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySetView2<T>::ContentSourceWebLink() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_ContentSourceWebLink(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySetView2<T>::ContentSourceApplicationLink() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_ContentSourceApplicationLink(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IDataPackagePropertySetView2<T>::Square30x30Logo() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check_hresult(shim()->get_Square30x30Logo(put(value)));
	return value;
}

template <typename T> Windows::UI::Color impl_IDataPackagePropertySetView2<T>::LogoBackgroundColor() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LogoBackgroundColor(&value));
	return value;
}

template <typename T> String impl_IDataPackagePropertySetView3<T>::EnterpriseId() const
{
	String value;
	check_hresult(shim()->get_EnterpriseId(put(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySet<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet<T>::Title(StringReference const & value) const
{
	check_hresult(shim()->put_Title(get(value)));
}

template <typename T> String impl_IDataPackagePropertySet<T>::Description() const
{
	String value;
	check_hresult(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet<T>::Description(StringReference const & value) const
{
	check_hresult(shim()->put_Description(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IDataPackagePropertySet<T>::Thumbnail() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check_hresult(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet<T>::Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check_hresult(shim()->put_Thumbnail(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IDataPackagePropertySet<T>::FileTypes() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_FileTypes(put(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySet<T>::ApplicationName() const
{
	String value;
	check_hresult(shim()->get_ApplicationName(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet<T>::ApplicationName(StringReference const & value) const
{
	check_hresult(shim()->put_ApplicationName(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySet<T>::ApplicationListingUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_ApplicationListingUri(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet<T>::ApplicationListingUri(Windows::Foundation::Uri const & value) const
{
	check_hresult(shim()->put_ApplicationListingUri(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySet2<T>::ContentSourceWebLink() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_ContentSourceWebLink(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet2<T>::ContentSourceWebLink(Windows::Foundation::Uri const & value) const
{
	check_hresult(shim()->put_ContentSourceWebLink(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySet2<T>::ContentSourceApplicationLink() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_ContentSourceApplicationLink(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet2<T>::ContentSourceApplicationLink(Windows::Foundation::Uri const & value) const
{
	check_hresult(shim()->put_ContentSourceApplicationLink(get(value)));
}

template <typename T> String impl_IDataPackagePropertySet2<T>::PackageFamilyName() const
{
	String value;
	check_hresult(shim()->get_PackageFamilyName(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet2<T>::PackageFamilyName(StringReference const & value) const
{
	check_hresult(shim()->put_PackageFamilyName(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IDataPackagePropertySet2<T>::Square30x30Logo() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check_hresult(shim()->get_Square30x30Logo(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet2<T>::Square30x30Logo(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check_hresult(shim()->put_Square30x30Logo(get(value)));
}

template <typename T> Windows::UI::Color impl_IDataPackagePropertySet2<T>::LogoBackgroundColor() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LogoBackgroundColor(&value));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet2<T>::LogoBackgroundColor(Windows::UI::Color const & value) const
{
	check_hresult(shim()->put_LogoBackgroundColor(value));
}

template <typename T> String impl_IDataPackagePropertySet3<T>::EnterpriseId() const
{
	String value;
	check_hresult(shim()->get_EnterpriseId(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet3<T>::EnterpriseId(StringReference const & value) const
{
	check_hresult(shim()->put_EnterpriseId(get(value)));
}

template <typename T> void impl_IDataProviderDeferral<T>::Complete() const
{
	check_hresult(shim()->abi_Complete());
}

template <typename T> String impl_IDataProviderRequest<T>::FormatId() const
{
	String value;
	check_hresult(shim()->get_FormatId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IDataProviderRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Deadline(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataProviderDeferral impl_IDataProviderRequest<T>::GetDeferral() const
{
	Windows::ApplicationModel::DataTransfer::DataProviderDeferral value = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> void impl_IDataProviderRequest<T>::SetData(IInspectable const & value) const
{
	check_hresult(shim()->abi_SetData(get(value)));
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageOperation impl_IOperationCompletedEventArgs<T>::Operation() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageOperation value = {};
	check_hresult(shim()->get_Operation(&value));
	return value;
}

template <typename T> String impl_IOperationCompletedEventArgs2<T>::AcceptedFormatId() const
{
	String value;
	check_hresult(shim()->get_AcceptedFormatId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackagePropertySetView impl_IDataPackageView<T>::Properties() const
{
	Windows::ApplicationModel::DataTransfer::DataPackagePropertySetView value = nullptr;
	check_hresult(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageOperation impl_IDataPackageView<T>::RequestedOperation() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageOperation value = {};
	check_hresult(shim()->get_RequestedOperation(&value));
	return value;
}

template <typename T> void impl_IDataPackageView<T>::ReportOperationCompleted(Windows::ApplicationModel::DataTransfer::DataPackageOperation const value) const
{
	check_hresult(shim()->abi_ReportOperationCompleted(value));
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IDataPackageView<T>::AvailableFormats() const
{
	Windows::Foundation::Collections::IVectorView<String> formatIds;
	check_hresult(shim()->get_AvailableFormats(put(formatIds)));
	return formatIds;
}

template <typename T> bool impl_IDataPackageView<T>::Contains(StringReference const & formatId) const
{
	bool value = {};
	check_hresult(shim()->abi_Contains(get(formatId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<IInspectable> impl_IDataPackageView<T>::GetDataAsync(StringReference const & formatId) const
{
	Windows::Foundation::IAsyncOperation<IInspectable> operation;
	check_hresult(shim()->abi_GetDataAsync(get(formatId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IDataPackageView<T>::GetTextAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check_hresult(shim()->abi_GetTextAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IDataPackageView<T>::GetTextAsync(StringReference const & formatId) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check_hresult(shim()->abi_GetCustomTextAsync(get(formatId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> impl_IDataPackageView<T>::GetUriAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> operation;
	check_hresult(shim()->abi_GetUriAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IDataPackageView<T>::GetHtmlFormatAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check_hresult(shim()->abi_GetHtmlFormatAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, Windows::Storage::Streams::RandomAccessStreamReference>> impl_IDataPackageView<T>::GetResourceMapAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, Windows::Storage::Streams::RandomAccessStreamReference>> operation;
	check_hresult(shim()->abi_GetResourceMapAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IDataPackageView<T>::GetRtfAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check_hresult(shim()->abi_GetRtfAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> impl_IDataPackageView<T>::GetBitmapAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> operation;
	check_hresult(shim()->abi_GetBitmapAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> impl_IDataPackageView<T>::GetStorageItemsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> operation;
	check_hresult(shim()->abi_GetStorageItemsAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> impl_IDataPackageView2<T>::GetApplicationLinkAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> operation;
	check_hresult(shim()->abi_GetApplicationLinkAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> impl_IDataPackageView2<T>::GetWebLinkAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> operation;
	check_hresult(shim()->abi_GetWebLinkAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> impl_IDataPackageView3<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> operation;
	check_hresult(shim()->abi_RequestAccessAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> impl_IDataPackageView3<T>::RequestAccessAsync(StringReference const & enterpriseId) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> operation;
	check_hresult(shim()->abi_RequestAccessWithEnterpriseIdAsync(get(enterpriseId), put(operation)));
	return operation;
}

template <typename T> Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult impl_IDataPackageView3<T>::UnlockAndAssumeEnterpriseIdentity() const
{
	Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult result = {};
	check_hresult(shim()->abi_UnlockAndAssumeEnterpriseIdentity(&result));
	return result;
}

template <typename T> void impl_IDataPackageView4<T>::SetAcceptedFormatId(StringReference const & formatId) const
{
	check_hresult(shim()->abi_SetAcceptedFormatId(get(formatId)));
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageView impl_IDataPackage<T>::GetView() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageView value = nullptr;
	check_hresult(shim()->abi_GetView(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackagePropertySet impl_IDataPackage<T>::Properties() const
{
	Windows::ApplicationModel::DataTransfer::DataPackagePropertySet value = nullptr;
	check_hresult(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageOperation impl_IDataPackage<T>::RequestedOperation() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageOperation value = {};
	check_hresult(shim()->get_RequestedOperation(&value));
	return value;
}

template <typename T> void impl_IDataPackage<T>::RequestedOperation(Windows::ApplicationModel::DataTransfer::DataPackageOperation const value) const
{
	check_hresult(shim()->put_RequestedOperation(value));
}

template <typename T> long long impl_IDataPackage<T>::OperationCompleted(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, Windows::ApplicationModel::DataTransfer::OperationCompletedEventArgs> const & handler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_OperationCompleted(get(handler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IDataPackage<T>::OperationCompleted(F handler) const
{
	return OperationCompleted(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, Windows::ApplicationModel::DataTransfer::OperationCompletedEventArgs>(handler));
}

template <typename T> void impl_IDataPackage<T>::OperationCompleted(long long const eventCookie) const
{
	check_hresult(shim()->remove_OperationCompleted(eventCookie));
}

template <typename T> long long impl_IDataPackage<T>::Destroyed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, IInspectable> const & handler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_Destroyed(get(handler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IDataPackage<T>::Destroyed(F handler) const
{
	return Destroyed(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, IInspectable>(handler));
}

template <typename T> void impl_IDataPackage<T>::Destroyed(long long const eventCookie) const
{
	check_hresult(shim()->remove_Destroyed(eventCookie));
}

template <typename T> void impl_IDataPackage<T>::SetData(StringReference const & formatId, IInspectable const & value) const
{
	check_hresult(shim()->abi_SetData(get(formatId), get(value)));
}

template <typename T> void impl_IDataPackage<T>::SetDataProvider(StringReference const & formatId, Windows::ApplicationModel::DataTransfer::IDataProviderHandler const & delayRenderer) const
{
	check_hresult(shim()->abi_SetDataProvider(get(formatId), get(delayRenderer)));
}

template <typename T> template <typename F> void impl_IDataPackage<T>::SetDataProvider(StringReference const & formatId, F delayRenderer) const
{
	SetDataProvider(formatId, Windows::ApplicationModel::DataTransfer::DataProviderHandler(delayRenderer));
}

template <typename T> void impl_IDataPackage<T>::SetText(StringReference const & value) const
{
	check_hresult(shim()->abi_SetText(get(value)));
}

template <typename T> void impl_IDataPackage<T>::SetUri(Windows::Foundation::Uri const & value) const
{
	check_hresult(shim()->abi_SetUri(get(value)));
}

template <typename T> void impl_IDataPackage<T>::SetHtmlFormat(StringReference const & value) const
{
	check_hresult(shim()->abi_SetHtmlFormat(get(value)));
}

template <typename T> Windows::Foundation::Collections::IMap<String, Windows::Storage::Streams::RandomAccessStreamReference> impl_IDataPackage<T>::ResourceMap() const
{
	Windows::Foundation::Collections::IMap<String, Windows::Storage::Streams::RandomAccessStreamReference> value;
	check_hresult(shim()->get_ResourceMap(put(value)));
	return value;
}

template <typename T> void impl_IDataPackage<T>::SetRtf(StringReference const & value) const
{
	check_hresult(shim()->abi_SetRtf(get(value)));
}

template <typename T> void impl_IDataPackage<T>::SetBitmap(Windows::Storage::Streams::RandomAccessStreamReference const & value) const
{
	check_hresult(shim()->abi_SetBitmap(get(value)));
}

template <typename T> void impl_IDataPackage<T>::SetStorageItems(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem> const & value) const
{
	check_hresult(shim()->abi_SetStorageItemsReadOnly(get(value)));
}

template <typename T> void impl_IDataPackage<T>::SetStorageItems(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem> const & value, bool const readOnly) const
{
	check_hresult(shim()->abi_SetStorageItems(get(value), readOnly));
}

template <typename T> void impl_IDataPackage2<T>::SetApplicationLink(Windows::Foundation::Uri const & value) const
{
	check_hresult(shim()->abi_SetApplicationLink(get(value)));
}

template <typename T> void impl_IDataPackage2<T>::SetWebLink(Windows::Foundation::Uri const & value) const
{
	check_hresult(shim()->abi_SetWebLink(get(value)));
}

template <typename T> String impl_IHtmlFormatHelperStatics<T>::GetStaticFragment(StringReference const & htmlFormat) const
{
	String htmlFragment;
	check_hresult(shim()->abi_GetStaticFragment(get(htmlFormat), put(htmlFragment)));
	return htmlFragment;
}

template <typename T> String impl_IHtmlFormatHelperStatics<T>::CreateHtmlFormat(StringReference const & htmlFragment) const
{
	String htmlFormat;
	check_hresult(shim()->abi_CreateHtmlFormat(get(htmlFragment), put(htmlFormat)));
	return htmlFormat;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageView impl_IClipboardStatics<T>::GetContent() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageView content = nullptr;
	check_hresult(shim()->abi_GetContent(put(content)));
	return content;
}

template <typename T> void impl_IClipboardStatics<T>::SetContent(Windows::ApplicationModel::DataTransfer::DataPackage const & content) const
{
	check_hresult(shim()->abi_SetContent(get(content)));
}

template <typename T> void impl_IClipboardStatics<T>::Flush() const
{
	check_hresult(shim()->abi_Flush());
}

template <typename T> void impl_IClipboardStatics<T>::Clear() const
{
	check_hresult(shim()->abi_Clear());
}

template <typename T> long long impl_IClipboardStatics<T>::ContentChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler) const
{
	long long token = {};
	check_hresult(shim()->add_ContentChanged(get(changeHandler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IClipboardStatics<T>::ContentChanged(F changeHandler) const
{
	return ContentChanged(Windows::Foundation::EventHandler<IInspectable>(changeHandler));
}

template <typename T> void impl_IClipboardStatics<T>::ContentChanged(long long const token) const
{
	check_hresult(shim()->remove_ContentChanged(token));
}

template <typename T> void impl_IDataRequestDeferral<T>::Complete() const
{
	check_hresult(shim()->abi_Complete());
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackage impl_IDataRequest<T>::Data() const
{
	Windows::ApplicationModel::DataTransfer::DataPackage value = nullptr;
	check_hresult(shim()->get_Data(put(value)));
	return value;
}

template <typename T> void impl_IDataRequest<T>::Data(Windows::ApplicationModel::DataTransfer::DataPackage const & value) const
{
	check_hresult(shim()->put_Data(get(value)));
}

template <typename T> Windows::Foundation::DateTime impl_IDataRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Deadline(&value));
	return value;
}

template <typename T> void impl_IDataRequest<T>::FailWithDisplayText(StringReference const & value) const
{
	check_hresult(shim()->abi_FailWithDisplayText(get(value)));
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataRequestDeferral impl_IDataRequest<T>::GetDeferral() const
{
	Windows::ApplicationModel::DataTransfer::DataRequestDeferral value = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataRequest impl_IDataRequestedEventArgs<T>::Request() const
{
	Windows::ApplicationModel::DataTransfer::DataRequest value = nullptr;
	check_hresult(shim()->get_Request(put(value)));
	return value;
}

template <typename T> String impl_ITargetApplicationChosenEventArgs<T>::ApplicationName() const
{
	String value;
	check_hresult(shim()->get_ApplicationName(put(value)));
	return value;
}

template <typename T> long long impl_IDataTransferManager<T>::DataRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::DataRequestedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_DataRequested(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IDataTransferManager<T>::DataRequested(F eventHandler) const
{
	return DataRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::DataRequestedEventArgs>(eventHandler));
}

template <typename T> void impl_IDataTransferManager<T>::DataRequested(long long const eventCookie) const
{
	check_hresult(shim()->remove_DataRequested(eventCookie));
}

template <typename T> long long impl_IDataTransferManager<T>::TargetApplicationChosen(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::TargetApplicationChosenEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_TargetApplicationChosen(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IDataTransferManager<T>::TargetApplicationChosen(F eventHandler) const
{
	return TargetApplicationChosen(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::TargetApplicationChosenEventArgs>(eventHandler));
}

template <typename T> void impl_IDataTransferManager<T>::TargetApplicationChosen(long long const eventCookie) const
{
	check_hresult(shim()->remove_TargetApplicationChosen(eventCookie));
}

template <typename T> void impl_IDataTransferManagerStatics<T>::ShowShareUI() const
{
	check_hresult(shim()->abi_ShowShareUI());
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataTransferManager impl_IDataTransferManagerStatics<T>::GetForCurrentView() const
{
	Windows::ApplicationModel::DataTransfer::DataTransferManager value = nullptr;
	check_hresult(shim()->abi_GetForCurrentView(put(value)));
	return value;
}

template <typename T> String impl_ISharedStorageAccessManagerStatics<T>::AddFile(Windows::Storage::IStorageFile const & file) const
{
	String outToken;
	check_hresult(shim()->abi_AddFile(get(file), put(outToken)));
	return outToken;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_ISharedStorageAccessManagerStatics<T>::RedeemTokenForFileAsync(StringReference const & token) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_RedeemTokenForFileAsync(get(token), put(operation)));
	return operation;
}

template <typename T> void impl_ISharedStorageAccessManagerStatics<T>::RemoveFile(StringReference const & token) const
{
	check_hresult(shim()->abi_RemoveFile(get(token)));
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

template <typename T> String impl_IQuickLink<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IQuickLink<T>::Title(StringReference const & value) const
{
	check_hresult(shim()->put_Title(get(value)));
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IQuickLink<T>::Thumbnail() const
{
	Windows::Storage::Streams::RandomAccessStreamReference value = nullptr;
	check_hresult(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> void impl_IQuickLink<T>::Thumbnail(Windows::Storage::Streams::RandomAccessStreamReference const & value) const
{
	check_hresult(shim()->put_Thumbnail(get(value)));
}

template <typename T> String impl_IQuickLink<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_IQuickLink<T>::Id(StringReference const & value) const
{
	check_hresult(shim()->put_Id(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IQuickLink<T>::SupportedDataFormats() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_SupportedDataFormats(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IQuickLink<T>::SupportedFileTypes() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_SupportedFileTypes(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageView impl_IShareOperation<T>::Data() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageView value = nullptr;
	check_hresult(shim()->get_Data(put(value)));
	return value;
}

template <typename T> String impl_IShareOperation<T>::QuickLinkId() const
{
	String value;
	check_hresult(shim()->get_QuickLinkId(put(value)));
	return value;
}

template <typename T> void impl_IShareOperation<T>::RemoveThisQuickLink() const
{
	check_hresult(shim()->abi_RemoveThisQuickLink());
}

template <typename T> void impl_IShareOperation<T>::ReportStarted() const
{
	check_hresult(shim()->abi_ReportStarted());
}

template <typename T> void impl_IShareOperation<T>::ReportDataRetrieved() const
{
	check_hresult(shim()->abi_ReportDataRetrieved());
}

template <typename T> void impl_IShareOperation<T>::ReportSubmittedBackgroundTask() const
{
	check_hresult(shim()->abi_ReportSubmittedBackgroundTask());
}

template <typename T> void impl_IShareOperation<T>::ReportCompleted(Windows::ApplicationModel::DataTransfer::ShareTarget::QuickLink const & quicklink) const
{
	check_hresult(shim()->abi_ReportCompletedWithQuickLink(get(quicklink)));
}

template <typename T> void impl_IShareOperation<T>::ReportCompleted() const
{
	check_hresult(shim()->abi_ReportCompleted());
}

template <typename T> void impl_IShareOperation<T>::ReportError(StringReference const & value) const
{
	check_hresult(shim()->abi_ReportError(get(value)));
}

template <typename T> void impl_IShareOperation2<T>::DismissUI() const
{
	check_hresult(shim()->abi_DismissUI());
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Search {

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISearchPaneQueryLinguisticDetails<T>::QueryTextAlternatives() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_QueryTextAlternatives(put(value)));
	return value;
}

template <typename T> unsigned impl_ISearchPaneQueryLinguisticDetails<T>::QueryTextCompositionStart() const
{
	unsigned value = {};
	check_hresult(shim()->get_QueryTextCompositionStart(&value));
	return value;
}

template <typename T> unsigned impl_ISearchPaneQueryLinguisticDetails<T>::QueryTextCompositionLength() const
{
	unsigned value = {};
	check_hresult(shim()->get_QueryTextCompositionLength(&value));
	return value;
}

template <typename T> bool impl_ISearchPaneVisibilityChangedEventArgs<T>::Visible() const
{
	bool value = {};
	check_hresult(shim()->get_Visible(put(value)));
	return value;
}

template <typename T> String impl_ISearchPaneQueryChangedEventArgs<T>::QueryText() const
{
	String value;
	check_hresult(shim()->get_QueryText(put(value)));
	return value;
}

template <typename T> String impl_ISearchPaneQueryChangedEventArgs<T>::Language() const
{
	String value;
	check_hresult(shim()->get_Language(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails impl_ISearchPaneQueryChangedEventArgs<T>::LinguisticDetails() const
{
	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails value = nullptr;
	check_hresult(shim()->get_LinguisticDetails(put(value)));
	return value;
}

template <typename T> String impl_ISearchPaneQuerySubmittedEventArgs<T>::QueryText() const
{
	String value;
	check_hresult(shim()->get_QueryText(put(value)));
	return value;
}

template <typename T> String impl_ISearchPaneQuerySubmittedEventArgs<T>::Language() const
{
	String value;
	check_hresult(shim()->get_Language(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails impl_ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails<T>::LinguisticDetails() const
{
	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails value = nullptr;
	check_hresult(shim()->get_LinguisticDetails(put(value)));
	return value;
}

template <typename T> String impl_ISearchPaneResultSuggestionChosenEventArgs<T>::Tag() const
{
	String value;
	check_hresult(shim()->get_Tag(put(value)));
	return value;
}

template <typename T> unsigned impl_ISearchSuggestionCollection<T>::Size() const
{
	unsigned value = {};
	check_hresult(shim()->get_Size(&value));
	return value;
}

template <typename T> void impl_ISearchSuggestionCollection<T>::AppendQuerySuggestion(StringReference const & text) const
{
	check_hresult(shim()->abi_AppendQuerySuggestion(get(text)));
}

template <typename T> void impl_ISearchSuggestionCollection<T>::AppendQuerySuggestions(Windows::Foundation::Collections::IIterable<String> const & suggestions) const
{
	check_hresult(shim()->abi_AppendQuerySuggestions(get(suggestions)));
}

template <typename T> void impl_ISearchSuggestionCollection<T>::AppendResultSuggestion(StringReference const & text, StringReference const & detailText, StringReference const & tag, Windows::Storage::Streams::IRandomAccessStreamReference const & image, StringReference const & imageAlternateText) const
{
	check_hresult(shim()->abi_AppendResultSuggestion(get(text), get(detailText), get(tag), get(image), get(imageAlternateText)));
}

template <typename T> void impl_ISearchSuggestionCollection<T>::AppendSearchSeparator(StringReference const & label) const
{
	check_hresult(shim()->abi_AppendSearchSeparator(get(label)));
}

template <typename T> void impl_ISearchPaneSuggestionsRequestDeferral<T>::Complete() const
{
	check_hresult(shim()->abi_Complete());
}

template <typename T> bool impl_ISearchPaneSuggestionsRequest<T>::IsCanceled() const
{
	bool value = {};
	check_hresult(shim()->get_IsCanceled(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchSuggestionCollection impl_ISearchPaneSuggestionsRequest<T>::SearchSuggestionCollection() const
{
	Windows::ApplicationModel::Search::SearchSuggestionCollection collection = nullptr;
	check_hresult(shim()->get_SearchSuggestionCollection(put(collection)));
	return collection;
}

template <typename T> Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestDeferral impl_ISearchPaneSuggestionsRequest<T>::GetDeferral() const
{
	Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestDeferral deferral = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> Windows::ApplicationModel::Search::SearchPaneSuggestionsRequest impl_ISearchPaneSuggestionsRequestedEventArgs<T>::Request() const
{
	Windows::ApplicationModel::Search::SearchPaneSuggestionsRequest value = nullptr;
	check_hresult(shim()->get_Request(put(value)));
	return value;
}

template <typename T> void impl_ILocalContentSuggestionSettings<T>::Enabled(bool const value) const
{
	check_hresult(shim()->put_Enabled(value));
}

template <typename T> bool impl_ILocalContentSuggestionSettings<T>::Enabled() const
{
	bool value = {};
	check_hresult(shim()->get_Enabled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Storage::StorageFolder> impl_ILocalContentSuggestionSettings<T>::Locations() const
{
	Windows::Foundation::Collections::IVector<Windows::Storage::StorageFolder> value;
	check_hresult(shim()->get_Locations(put(value)));
	return value;
}

template <typename T> void impl_ILocalContentSuggestionSettings<T>::AqsFilter(StringReference const & value) const
{
	check_hresult(shim()->put_AqsFilter(get(value)));
}

template <typename T> String impl_ILocalContentSuggestionSettings<T>::AqsFilter() const
{
	String value;
	check_hresult(shim()->get_AqsFilter(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ILocalContentSuggestionSettings<T>::PropertiesToMatch() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_PropertiesToMatch(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchPane impl_ISearchPaneStatics<T>::GetForCurrentView() const
{
	Windows::ApplicationModel::Search::SearchPane searchPane = nullptr;
	check_hresult(shim()->abi_GetForCurrentView(put(searchPane)));
	return searchPane;
}

template <typename T> void impl_ISearchPaneStaticsWithHideThisApplication<T>::HideThisApplication() const
{
	check_hresult(shim()->abi_HideThisApplication());
}

template <typename T> void impl_ISearchPane<T>::SearchHistoryEnabled(bool const value) const
{
	check_hresult(shim()->put_SearchHistoryEnabled(value));
}

template <typename T> bool impl_ISearchPane<T>::SearchHistoryEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_SearchHistoryEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISearchPane<T>::SearchHistoryContext(StringReference const & value) const
{
	check_hresult(shim()->put_SearchHistoryContext(get(value)));
}

template <typename T> String impl_ISearchPane<T>::SearchHistoryContext() const
{
	String value;
	check_hresult(shim()->get_SearchHistoryContext(put(value)));
	return value;
}

template <typename T> void impl_ISearchPane<T>::PlaceholderText(StringReference const & value) const
{
	check_hresult(shim()->put_PlaceholderText(get(value)));
}

template <typename T> String impl_ISearchPane<T>::PlaceholderText() const
{
	String value;
	check_hresult(shim()->get_PlaceholderText(put(value)));
	return value;
}

template <typename T> String impl_ISearchPane<T>::QueryText() const
{
	String value;
	check_hresult(shim()->get_QueryText(put(value)));
	return value;
}

template <typename T> String impl_ISearchPane<T>::Language() const
{
	String value;
	check_hresult(shim()->get_Language(put(value)));
	return value;
}

template <typename T> bool impl_ISearchPane<T>::Visible() const
{
	bool value = {};
	check_hresult(shim()->get_Visible(put(value)));
	return value;
}

template <typename T> long long impl_ISearchPane<T>::VisibilityChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneVisibilityChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_VisibilityChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISearchPane<T>::VisibilityChanged(F handler) const
{
	return VisibilityChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneVisibilityChangedEventArgs>(handler));
}

template <typename T> void impl_ISearchPane<T>::VisibilityChanged(long long const token) const
{
	check_hresult(shim()->remove_VisibilityChanged(token));
}

template <typename T> long long impl_ISearchPane<T>::QueryChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQueryChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_QueryChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISearchPane<T>::QueryChanged(F handler) const
{
	return QueryChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQueryChangedEventArgs>(handler));
}

template <typename T> void impl_ISearchPane<T>::QueryChanged(long long const token) const
{
	check_hresult(shim()->remove_QueryChanged(token));
}

template <typename T> long long impl_ISearchPane<T>::SuggestionsRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_SuggestionsRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISearchPane<T>::SuggestionsRequested(F handler) const
{
	return SuggestionsRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestedEventArgs>(handler));
}

template <typename T> void impl_ISearchPane<T>::SuggestionsRequested(long long const token) const
{
	check_hresult(shim()->remove_SuggestionsRequested(token));
}

template <typename T> long long impl_ISearchPane<T>::QuerySubmitted(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQuerySubmittedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_QuerySubmitted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISearchPane<T>::QuerySubmitted(F handler) const
{
	return QuerySubmitted(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQuerySubmittedEventArgs>(handler));
}

template <typename T> void impl_ISearchPane<T>::QuerySubmitted(long long const token) const
{
	check_hresult(shim()->remove_QuerySubmitted(token));
}

template <typename T> long long impl_ISearchPane<T>::ResultSuggestionChosen(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneResultSuggestionChosenEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ResultSuggestionChosen(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISearchPane<T>::ResultSuggestionChosen(F handler) const
{
	return ResultSuggestionChosen(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneResultSuggestionChosenEventArgs>(handler));
}

template <typename T> void impl_ISearchPane<T>::ResultSuggestionChosen(long long const token) const
{
	check_hresult(shim()->remove_ResultSuggestionChosen(token));
}

template <typename T> void impl_ISearchPane<T>::SetLocalContentSuggestionSettings(Windows::ApplicationModel::Search::LocalContentSuggestionSettings const & settings) const
{
	check_hresult(shim()->abi_SetLocalContentSuggestionSettings(get(settings)));
}

template <typename T> void impl_ISearchPane<T>::Show() const
{
	check_hresult(shim()->abi_ShowOverloadDefault());
}

template <typename T> void impl_ISearchPane<T>::Show(StringReference const & query) const
{
	check_hresult(shim()->abi_ShowOverloadWithQuery(get(query)));
}

template <typename T> void impl_ISearchPane<T>::ShowOnKeyboardInput(bool const value) const
{
	check_hresult(shim()->put_ShowOnKeyboardInput(value));
}

template <typename T> bool impl_ISearchPane<T>::ShowOnKeyboardInput() const
{
	bool value = {};
	check_hresult(shim()->get_ShowOnKeyboardInput(put(value)));
	return value;
}

template <typename T> bool impl_ISearchPane<T>::TrySetQueryText(StringReference const & query) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TrySetQueryText(get(query), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::ApplicationModel::Search::SearchQueryLinguisticDetails impl_ISearchQueryLinguisticDetailsFactory<T>::CreateInstance(Windows::Foundation::Collections::IIterable<String> const & queryTextAlternatives, unsigned const queryTextCompositionStart, unsigned const queryTextCompositionLength) const
{
	Windows::ApplicationModel::Search::SearchQueryLinguisticDetails value = nullptr;
	check_hresult(shim()->abi_CreateInstance(get(queryTextAlternatives), queryTextCompositionStart, queryTextCompositionLength, put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISearchQueryLinguisticDetails<T>::QueryTextAlternatives() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_QueryTextAlternatives(put(value)));
	return value;
}

template <typename T> unsigned impl_ISearchQueryLinguisticDetails<T>::QueryTextCompositionStart() const
{
	unsigned value = {};
	check_hresult(shim()->get_QueryTextCompositionStart(&value));
	return value;
}

template <typename T> unsigned impl_ISearchQueryLinguisticDetails<T>::QueryTextCompositionLength() const
{
	unsigned value = {};
	check_hresult(shim()->get_QueryTextCompositionLength(&value));
	return value;
}

template <typename T> void impl_ISearchSuggestionsRequestDeferral<T>::Complete() const
{
	check_hresult(shim()->abi_Complete());
}

template <typename T> bool impl_ISearchSuggestionsRequest<T>::IsCanceled() const
{
	bool value = {};
	check_hresult(shim()->get_IsCanceled(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchSuggestionCollection impl_ISearchSuggestionsRequest<T>::SearchSuggestionCollection() const
{
	Windows::ApplicationModel::Search::SearchSuggestionCollection collection = nullptr;
	check_hresult(shim()->get_SearchSuggestionCollection(put(collection)));
	return collection;
}

template <typename T> Windows::ApplicationModel::Search::SearchSuggestionsRequestDeferral impl_ISearchSuggestionsRequest<T>::GetDeferral() const
{
	Windows::ApplicationModel::Search::SearchSuggestionsRequestDeferral deferral = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

}}}}

namespace winrt { namespace Windows { namespace Data { namespace Text {

template <typename T> void impl_IWordSegmentsTokenizingHandler<T>::Invoke(Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment> const & precedingWords, Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment> const & words) const
{
	check_hresult(shim()->abi_Invoke(get(precedingWords), get(words)));
}

template <typename T> void impl_ISelectableWordSegmentsTokenizingHandler<T>::Invoke(Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment> const & precedingWords, Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment> const & words) const
{
	check_hresult(shim()->abi_Invoke(get(precedingWords), get(words)));
}

template <typename T> Windows::Data::Text::SemanticTextQuery impl_ISemanticTextQueryFactory<T>::Create(StringReference const & aqsFilter) const
{
	Windows::Data::Text::SemanticTextQuery result = nullptr;
	check_hresult(shim()->abi_Create(get(aqsFilter), put(result)));
	return result;
}

template <typename T> Windows::Data::Text::SemanticTextQuery impl_ISemanticTextQueryFactory<T>::CreateWithLanguage(StringReference const & aqsFilter, StringReference const & filterLanguage) const
{
	Windows::Data::Text::SemanticTextQuery result = nullptr;
	check_hresult(shim()->abi_CreateWithLanguage(get(aqsFilter), get(filterLanguage), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment> impl_ISemanticTextQuery<T>::Find(StringReference const & content) const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment> result;
	check_hresult(shim()->abi_Find(get(content), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment> impl_ISemanticTextQuery<T>::FindInProperty(StringReference const & propertyContent, StringReference const & propertyName) const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment> result;
	check_hresult(shim()->abi_FindInProperty(get(propertyContent), get(propertyName), put(result)));
	return result;
}

template <typename T> unsigned impl_IUnicodeCharactersStatics<T>::GetCodepointFromSurrogatePair(unsigned const highSurrogate, unsigned const lowSurrogate) const
{
	unsigned codepoint = {};
	check_hresult(shim()->abi_GetCodepointFromSurrogatePair(highSurrogate, lowSurrogate, &codepoint));
	return codepoint;
}

template <typename T> void impl_IUnicodeCharactersStatics<T>::GetSurrogatePairFromCodepoint(unsigned const codepoint, wchar_t & highSurrogate, wchar_t & lowSurrogate) const
{
	check_hresult(shim()->abi_GetSurrogatePairFromCodepoint(codepoint, &highSurrogate, &lowSurrogate));
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsHighSurrogate(unsigned const codepoint) const
{
	bool value = {};
	check_hresult(shim()->abi_IsHighSurrogate(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsLowSurrogate(unsigned const codepoint) const
{
	bool value = {};
	check_hresult(shim()->abi_IsLowSurrogate(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsSupplementary(unsigned const codepoint) const
{
	bool value = {};
	check_hresult(shim()->abi_IsSupplementary(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsNoncharacter(unsigned const codepoint) const
{
	bool value = {};
	check_hresult(shim()->abi_IsNoncharacter(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsWhitespace(unsigned const codepoint) const
{
	bool value = {};
	check_hresult(shim()->abi_IsWhitespace(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsAlphabetic(unsigned const codepoint) const
{
	bool value = {};
	check_hresult(shim()->abi_IsAlphabetic(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsCased(unsigned const codepoint) const
{
	bool value = {};
	check_hresult(shim()->abi_IsCased(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsUppercase(unsigned const codepoint) const
{
	bool value = {};
	check_hresult(shim()->abi_IsUppercase(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsLowercase(unsigned const codepoint) const
{
	bool value = {};
	check_hresult(shim()->abi_IsLowercase(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsIdStart(unsigned const codepoint) const
{
	bool value = {};
	check_hresult(shim()->abi_IsIdStart(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsIdContinue(unsigned const codepoint) const
{
	bool value = {};
	check_hresult(shim()->abi_IsIdContinue(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsGraphemeBase(unsigned const codepoint) const
{
	bool value = {};
	check_hresult(shim()->abi_IsGraphemeBase(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsGraphemeExtend(unsigned const codepoint) const
{
	bool value = {};
	check_hresult(shim()->abi_IsGraphemeExtend(codepoint, put(value)));
	return value;
}

template <typename T> Windows::Data::Text::UnicodeNumericType impl_IUnicodeCharactersStatics<T>::GetNumericType(unsigned const codepoint) const
{
	Windows::Data::Text::UnicodeNumericType value = {};
	check_hresult(shim()->abi_GetNumericType(codepoint, &value));
	return value;
}

template <typename T> Windows::Data::Text::UnicodeGeneralCategory impl_IUnicodeCharactersStatics<T>::GetGeneralCategory(unsigned const codepoint) const
{
	Windows::Data::Text::UnicodeGeneralCategory value = {};
	check_hresult(shim()->abi_GetGeneralCategory(codepoint, &value));
	return value;
}

template <typename T> Windows::Data::Text::TextSegment impl_IAlternateWordForm<T>::SourceTextSegment() const
{
	Windows::Data::Text::TextSegment value = {};
	check_hresult(shim()->get_SourceTextSegment(&value));
	return value;
}

template <typename T> String impl_IAlternateWordForm<T>::AlternateText() const
{
	String value;
	check_hresult(shim()->get_AlternateText(put(value)));
	return value;
}

template <typename T> Windows::Data::Text::AlternateNormalizationFormat impl_IAlternateWordForm<T>::NormalizationFormat() const
{
	Windows::Data::Text::AlternateNormalizationFormat value = {};
	check_hresult(shim()->get_NormalizationFormat(&value));
	return value;
}

template <typename T> String impl_ISelectableWordSegment<T>::Text() const
{
	String value;
	check_hresult(shim()->get_Text(put(value)));
	return value;
}

template <typename T> Windows::Data::Text::TextSegment impl_ISelectableWordSegment<T>::SourceTextSegment() const
{
	Windows::Data::Text::TextSegment value = {};
	check_hresult(shim()->get_SourceTextSegment(&value));
	return value;
}

template <typename T> String impl_IWordSegment<T>::Text() const
{
	String value;
	check_hresult(shim()->get_Text(put(value)));
	return value;
}

template <typename T> Windows::Data::Text::TextSegment impl_IWordSegment<T>::SourceTextSegment() const
{
	Windows::Data::Text::TextSegment value = {};
	check_hresult(shim()->get_SourceTextSegment(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Data::Text::AlternateWordForm> impl_IWordSegment<T>::AlternateForms() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::AlternateWordForm> value;
	check_hresult(shim()->get_AlternateForms(put(value)));
	return value;
}

template <typename T> String impl_IWordsSegmenter<T>::ResolvedLanguage() const
{
	String value;
	check_hresult(shim()->get_ResolvedLanguage(put(value)));
	return value;
}

template <typename T> Windows::Data::Text::WordSegment impl_IWordsSegmenter<T>::GetTokenAt(StringReference const & text, unsigned const startIndex) const
{
	Windows::Data::Text::WordSegment result = nullptr;
	check_hresult(shim()->abi_GetTokenAt(get(text), startIndex, put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Data::Text::WordSegment> impl_IWordsSegmenter<T>::GetTokens(StringReference const & text) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::WordSegment> result;
	check_hresult(shim()->abi_GetTokens(get(text), put(result)));
	return result;
}

template <typename T> void impl_IWordsSegmenter<T>::Tokenize(StringReference const & text, unsigned const startIndex, Windows::Data::Text::IWordSegmentsTokenizingHandler const & handler) const
{
	check_hresult(shim()->abi_Tokenize(get(text), startIndex, get(handler)));
}

template <typename T> template <typename F> void impl_IWordsSegmenter<T>::Tokenize(StringReference const & text, unsigned const startIndex, F handler) const
{
	Tokenize(text, startIndex, Windows::Data::Text::WordSegmentsTokenizingHandler(handler));
}

template <typename T> Windows::Data::Text::WordsSegmenter impl_IWordsSegmenterFactory<T>::CreateWithLanguage(StringReference const & language) const
{
	Windows::Data::Text::WordsSegmenter result = nullptr;
	check_hresult(shim()->abi_CreateWithLanguage(get(language), put(result)));
	return result;
}

template <typename T> String impl_ISelectableWordsSegmenter<T>::ResolvedLanguage() const
{
	String value;
	check_hresult(shim()->get_ResolvedLanguage(put(value)));
	return value;
}

template <typename T> Windows::Data::Text::SelectableWordSegment impl_ISelectableWordsSegmenter<T>::GetTokenAt(StringReference const & text, unsigned const startIndex) const
{
	Windows::Data::Text::SelectableWordSegment result = nullptr;
	check_hresult(shim()->abi_GetTokenAt(get(text), startIndex, put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Data::Text::SelectableWordSegment> impl_ISelectableWordsSegmenter<T>::GetTokens(StringReference const & text) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::SelectableWordSegment> result;
	check_hresult(shim()->abi_GetTokens(get(text), put(result)));
	return result;
}

template <typename T> void impl_ISelectableWordsSegmenter<T>::Tokenize(StringReference const & text, unsigned const startIndex, Windows::Data::Text::ISelectableWordSegmentsTokenizingHandler const & handler) const
{
	check_hresult(shim()->abi_Tokenize(get(text), startIndex, get(handler)));
}

template <typename T> template <typename F> void impl_ISelectableWordsSegmenter<T>::Tokenize(StringReference const & text, unsigned const startIndex, F handler) const
{
	Tokenize(text, startIndex, Windows::Data::Text::SelectableWordSegmentsTokenizingHandler(handler));
}

template <typename T> Windows::Data::Text::SelectableWordsSegmenter impl_ISelectableWordsSegmenterFactory<T>::CreateWithLanguage(StringReference const & language) const
{
	Windows::Data::Text::SelectableWordsSegmenter result = nullptr;
	check_hresult(shim()->abi_CreateWithLanguage(get(language), put(result)));
	return result;
}

template <typename T> String impl_ITextPredictionGenerator<T>::ResolvedLanguage() const
{
	String value;
	check_hresult(shim()->get_ResolvedLanguage(put(value)));
	return value;
}

template <typename T> bool impl_ITextPredictionGenerator<T>::LanguageAvailableButNotInstalled() const
{
	bool value = {};
	check_hresult(shim()->get_LanguageAvailableButNotInstalled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> impl_ITextPredictionGenerator<T>::GetCandidatesAsync(StringReference const & input) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> result;
	check_hresult(shim()->abi_GetCandidatesAsync(get(input), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> impl_ITextPredictionGenerator<T>::GetCandidatesAsync(StringReference const & input, unsigned const maxCandidates) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> result;
	check_hresult(shim()->abi_GetCandidatesWithMaxCountAsync(get(input), maxCandidates, put(result)));
	return result;
}

template <typename T> Windows::Data::Text::TextPredictionGenerator impl_ITextPredictionGeneratorFactory<T>::Create(StringReference const & languageTag) const
{
	Windows::Data::Text::TextPredictionGenerator result = nullptr;
	check_hresult(shim()->abi_Create(get(languageTag), put(result)));
	return result;
}

template <typename T> String impl_ITextConversionGenerator<T>::ResolvedLanguage() const
{
	String value;
	check_hresult(shim()->get_ResolvedLanguage(put(value)));
	return value;
}

template <typename T> bool impl_ITextConversionGenerator<T>::LanguageAvailableButNotInstalled() const
{
	bool value = {};
	check_hresult(shim()->get_LanguageAvailableButNotInstalled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> impl_ITextConversionGenerator<T>::GetCandidatesAsync(StringReference const & input) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> result;
	check_hresult(shim()->abi_GetCandidatesAsync(get(input), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> impl_ITextConversionGenerator<T>::GetCandidatesAsync(StringReference const & input, unsigned const maxCandidates) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> result;
	check_hresult(shim()->abi_GetCandidatesWithMaxCountAsync(get(input), maxCandidates, put(result)));
	return result;
}

template <typename T> Windows::Data::Text::TextConversionGenerator impl_ITextConversionGeneratorFactory<T>::Create(StringReference const & languageTag) const
{
	Windows::Data::Text::TextConversionGenerator result = nullptr;
	check_hresult(shim()->abi_Create(get(languageTag), put(result)));
	return result;
}

template <typename T> String impl_ITextReverseConversionGenerator<T>::ResolvedLanguage() const
{
	String value;
	check_hresult(shim()->get_ResolvedLanguage(put(value)));
	return value;
}

template <typename T> bool impl_ITextReverseConversionGenerator<T>::LanguageAvailableButNotInstalled() const
{
	bool value = {};
	check_hresult(shim()->get_LanguageAvailableButNotInstalled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ITextReverseConversionGenerator<T>::ConvertBackAsync(StringReference const & input) const
{
	Windows::Foundation::IAsyncOperation<String> result;
	check_hresult(shim()->abi_ConvertBackAsync(get(input), put(result)));
	return result;
}

template <typename T> Windows::Data::Text::TextReverseConversionGenerator impl_ITextReverseConversionGeneratorFactory<T>::Create(StringReference const & languageTag) const
{
	Windows::Data::Text::TextReverseConversionGenerator result = nullptr;
	check_hresult(shim()->abi_Create(get(languageTag), put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth {

template <typename T> String impl_IBluetoothDevice<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IBluetoothDevice<T>::HostName() const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->get_HostName(put(value)));
	return value;
}

template <typename T> String impl_IBluetoothDevice<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothClassOfDevice impl_IBluetoothDevice<T>::ClassOfDevice() const
{
	Windows::Devices::Bluetooth::BluetoothClassOfDevice value = nullptr;
	check_hresult(shim()->get_ClassOfDevice(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Storage::Streams::IBuffer> impl_IBluetoothDevice<T>::SdpRecords() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Storage::Streams::IBuffer> value;
	check_hresult(shim()->get_SdpRecords(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService> impl_IBluetoothDevice<T>::RfcommServices() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService> value;
	check_hresult(shim()->get_RfcommServices(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothConnectionStatus impl_IBluetoothDevice<T>::ConnectionStatus() const
{
	Windows::Devices::Bluetooth::BluetoothConnectionStatus value = {};
	check_hresult(shim()->get_ConnectionStatus(&value));
	return value;
}

template <typename T> unsigned long long impl_IBluetoothDevice<T>::BluetoothAddress() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_BluetoothAddress(&value));
	return value;
}

template <typename T> long long impl_IBluetoothDevice<T>::NameChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothDevice, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_NameChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothDevice<T>::NameChanged(F handler) const
{
	return NameChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::BluetoothDevice, IInspectable>(handler));
}

template <typename T> void impl_IBluetoothDevice<T>::NameChanged(long long const token) const
{
	check_hresult(shim()->remove_NameChanged(token));
}

template <typename T> long long impl_IBluetoothDevice<T>::SdpRecordsChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothDevice, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_SdpRecordsChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothDevice<T>::SdpRecordsChanged(F handler) const
{
	return SdpRecordsChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::BluetoothDevice, IInspectable>(handler));
}

template <typename T> void impl_IBluetoothDevice<T>::SdpRecordsChanged(long long const token) const
{
	check_hresult(shim()->remove_SdpRecordsChanged(token));
}

template <typename T> long long impl_IBluetoothDevice<T>::ConnectionStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothDevice, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ConnectionStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothDevice<T>::ConnectionStatusChanged(F handler) const
{
	return ConnectionStatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::BluetoothDevice, IInspectable>(handler));
}

template <typename T> void impl_IBluetoothDevice<T>::ConnectionStatusChanged(long long const token) const
{
	check_hresult(shim()->remove_ConnectionStatusChanged(token));
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IBluetoothDevice2<T>::DeviceInformation() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check_hresult(shim()->get_DeviceInformation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> impl_IBluetoothDeviceStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> operation;
	check_hresult(shim()->abi_FromIdAsync(get(deviceId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> impl_IBluetoothDeviceStatics<T>::FromHostNameAsync(Windows::Networking::HostName const & hostName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> operation;
	check_hresult(shim()->abi_FromHostNameAsync(get(hostName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> impl_IBluetoothDeviceStatics<T>::FromBluetoothAddressAsync(unsigned long long const address) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> operation;
	check_hresult(shim()->abi_FromBluetoothAddressAsync(address, put(operation)));
	return operation;
}

template <typename T> String impl_IBluetoothDeviceStatics<T>::GetDeviceSelector() const
{
	String deviceSelector;
	check_hresult(shim()->abi_GetDeviceSelector(put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothDeviceStatics2<T>::GetDeviceSelectorFromPairingState(bool const pairingState) const
{
	String deviceSelector;
	check_hresult(shim()->abi_GetDeviceSelectorFromPairingState(pairingState, put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothDeviceStatics2<T>::GetDeviceSelectorFromConnectionStatus(Windows::Devices::Bluetooth::BluetoothConnectionStatus const connectionStatus) const
{
	String deviceSelector;
	check_hresult(shim()->abi_GetDeviceSelectorFromConnectionStatus(connectionStatus, put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothDeviceStatics2<T>::GetDeviceSelectorFromDeviceName(StringReference const & deviceName) const
{
	String deviceSelector;
	check_hresult(shim()->abi_GetDeviceSelectorFromDeviceName(get(deviceName), put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothDeviceStatics2<T>::GetDeviceSelectorFromBluetoothAddress(unsigned long long const bluetoothAddress) const
{
	String deviceSelector;
	check_hresult(shim()->abi_GetDeviceSelectorFromBluetoothAddress(bluetoothAddress, put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothDeviceStatics2<T>::GetDeviceSelectorFromClassOfDevice(Windows::Devices::Bluetooth::BluetoothClassOfDevice const & classOfDevice) const
{
	String deviceSelector;
	check_hresult(shim()->abi_GetDeviceSelectorFromClassOfDevice(get(classOfDevice), put(deviceSelector)));
	return deviceSelector;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Uncategorized() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Uncategorized(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Phone() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Phone(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Computer() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Computer(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Watch() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Watch(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Clock() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Clock(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Display() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Display(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::RemoteControl() const
{
	unsigned short value = {};
	check_hresult(shim()->get_RemoteControl(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::EyeGlasses() const
{
	unsigned short value = {};
	check_hresult(shim()->get_EyeGlasses(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Tag() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Tag(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Keyring() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Keyring(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::MediaPlayer() const
{
	unsigned short value = {};
	check_hresult(shim()->get_MediaPlayer(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::BarcodeScanner() const
{
	unsigned short value = {};
	check_hresult(shim()->get_BarcodeScanner(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Thermometer() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Thermometer(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::HeartRate() const
{
	unsigned short value = {};
	check_hresult(shim()->get_HeartRate(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::BloodPressure() const
{
	unsigned short value = {};
	check_hresult(shim()->get_BloodPressure(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::HumanInterfaceDevice() const
{
	unsigned short value = {};
	check_hresult(shim()->get_HumanInterfaceDevice(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::GlucoseMeter() const
{
	unsigned short value = {};
	check_hresult(shim()->get_GlucoseMeter(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::RunningWalking() const
{
	unsigned short value = {};
	check_hresult(shim()->get_RunningWalking(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Cycling() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Cycling(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::PulseOximeter() const
{
	unsigned short value = {};
	check_hresult(shim()->get_PulseOximeter(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::WeightScale() const
{
	unsigned short value = {};
	check_hresult(shim()->get_WeightScale(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::OutdoorSportActivity() const
{
	unsigned short value = {};
	check_hresult(shim()->get_OutdoorSportActivity(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::Generic() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Generic(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::SportsWatch() const
{
	unsigned short value = {};
	check_hresult(shim()->get_SportsWatch(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::ThermometerEar() const
{
	unsigned short value = {};
	check_hresult(shim()->get_ThermometerEar(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::HeartRateBelt() const
{
	unsigned short value = {};
	check_hresult(shim()->get_HeartRateBelt(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::BloodPressureArm() const
{
	unsigned short value = {};
	check_hresult(shim()->get_BloodPressureArm(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::BloodPressureWrist() const
{
	unsigned short value = {};
	check_hresult(shim()->get_BloodPressureWrist(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::Keyboard() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Keyboard(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::Mouse() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Mouse(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::Joystick() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Joystick(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::Gamepad() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Gamepad(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::DigitizerTablet() const
{
	unsigned short value = {};
	check_hresult(shim()->get_DigitizerTablet(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::CardReader() const
{
	unsigned short value = {};
	check_hresult(shim()->get_CardReader(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::DigitalPen() const
{
	unsigned short value = {};
	check_hresult(shim()->get_DigitalPen(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::BarcodeScanner() const
{
	unsigned short value = {};
	check_hresult(shim()->get_BarcodeScanner(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::RunningWalkingInShoe() const
{
	unsigned short value = {};
	check_hresult(shim()->get_RunningWalkingInShoe(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::RunningWalkingOnShoe() const
{
	unsigned short value = {};
	check_hresult(shim()->get_RunningWalkingOnShoe(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::RunningWalkingOnHip() const
{
	unsigned short value = {};
	check_hresult(shim()->get_RunningWalkingOnHip(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::CyclingComputer() const
{
	unsigned short value = {};
	check_hresult(shim()->get_CyclingComputer(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::CyclingSpeedSensor() const
{
	unsigned short value = {};
	check_hresult(shim()->get_CyclingSpeedSensor(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::CyclingCadenceSensor() const
{
	unsigned short value = {};
	check_hresult(shim()->get_CyclingCadenceSensor(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::CyclingPowerSensor() const
{
	unsigned short value = {};
	check_hresult(shim()->get_CyclingPowerSensor(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::CyclingSpeedCadenceSensor() const
{
	unsigned short value = {};
	check_hresult(shim()->get_CyclingSpeedCadenceSensor(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::OximeterFingertip() const
{
	unsigned short value = {};
	check_hresult(shim()->get_OximeterFingertip(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::OximeterWristWorn() const
{
	unsigned short value = {};
	check_hresult(shim()->get_OximeterWristWorn(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::LocationDisplay() const
{
	unsigned short value = {};
	check_hresult(shim()->get_LocationDisplay(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::LocationNavigationDisplay() const
{
	unsigned short value = {};
	check_hresult(shim()->get_LocationNavigationDisplay(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::LocationPod() const
{
	unsigned short value = {};
	check_hresult(shim()->get_LocationPod(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::LocationNavigationPod() const
{
	unsigned short value = {};
	check_hresult(shim()->get_LocationNavigationPod(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearance<T>::RawValue() const
{
	unsigned short value = {};
	check_hresult(shim()->get_RawValue(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearance<T>::Category() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Category(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearance<T>::SubCategory() const
{
	unsigned short value = {};
	check_hresult(shim()->get_SubCategory(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothLEAppearance impl_IBluetoothLEAppearanceStatics<T>::FromRawValue(unsigned short const rawValue) const
{
	Windows::Devices::Bluetooth::BluetoothLEAppearance appearance = nullptr;
	check_hresult(shim()->abi_FromRawValue(rawValue, put(appearance)));
	return appearance;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothLEAppearance impl_IBluetoothLEAppearanceStatics<T>::FromParts(unsigned short const appearanceCategory, unsigned short const appearanceSubCategory) const
{
	Windows::Devices::Bluetooth::BluetoothLEAppearance appearance = nullptr;
	check_hresult(shim()->abi_FromParts(appearanceCategory, appearanceSubCategory, put(appearance)));
	return appearance;
}

template <typename T> String impl_IBluetoothLEDevice<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> String impl_IBluetoothLEDevice<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> impl_IBluetoothLEDevice<T>::GattServices() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> value;
	check_hresult(shim()->get_GattServices(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothConnectionStatus impl_IBluetoothLEDevice<T>::ConnectionStatus() const
{
	Windows::Devices::Bluetooth::BluetoothConnectionStatus value = {};
	check_hresult(shim()->get_ConnectionStatus(&value));
	return value;
}

template <typename T> unsigned long long impl_IBluetoothLEDevice<T>::BluetoothAddress() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_BluetoothAddress(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService impl_IBluetoothLEDevice<T>::GetGattService(GUID const serviceUuid) const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService service = nullptr;
	check_hresult(shim()->abi_GetGattService(serviceUuid, put(service)));
	return service;
}

template <typename T> long long impl_IBluetoothLEDevice<T>::NameChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothLEDevice, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_NameChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothLEDevice<T>::NameChanged(F handler) const
{
	return NameChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::BluetoothLEDevice, IInspectable>(handler));
}

template <typename T> void impl_IBluetoothLEDevice<T>::NameChanged(long long const token) const
{
	check_hresult(shim()->remove_NameChanged(token));
}

template <typename T> long long impl_IBluetoothLEDevice<T>::GattServicesChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothLEDevice, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_GattServicesChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothLEDevice<T>::GattServicesChanged(F handler) const
{
	return GattServicesChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::BluetoothLEDevice, IInspectable>(handler));
}

template <typename T> void impl_IBluetoothLEDevice<T>::GattServicesChanged(long long const token) const
{
	check_hresult(shim()->remove_GattServicesChanged(token));
}

template <typename T> long long impl_IBluetoothLEDevice<T>::ConnectionStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothLEDevice, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ConnectionStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothLEDevice<T>::ConnectionStatusChanged(F handler) const
{
	return ConnectionStatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::BluetoothLEDevice, IInspectable>(handler));
}

template <typename T> void impl_IBluetoothLEDevice<T>::ConnectionStatusChanged(long long const token) const
{
	check_hresult(shim()->remove_ConnectionStatusChanged(token));
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IBluetoothLEDevice2<T>::DeviceInformation() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check_hresult(shim()->get_DeviceInformation(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothLEAppearance impl_IBluetoothLEDevice2<T>::Appearance() const
{
	Windows::Devices::Bluetooth::BluetoothLEAppearance value = nullptr;
	check_hresult(shim()->get_Appearance(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothAddressType impl_IBluetoothLEDevice2<T>::BluetoothAddressType() const
{
	Windows::Devices::Bluetooth::BluetoothAddressType value = {};
	check_hresult(shim()->get_BluetoothAddressType(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> impl_IBluetoothLEDeviceStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> operation;
	check_hresult(shim()->abi_FromIdAsync(get(deviceId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> impl_IBluetoothLEDeviceStatics<T>::FromBluetoothAddressAsync(unsigned long long const bluetoothAddress) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> operation;
	check_hresult(shim()->abi_FromBluetoothAddressAsync(bluetoothAddress, put(operation)));
	return operation;
}

template <typename T> String impl_IBluetoothLEDeviceStatics<T>::GetDeviceSelector() const
{
	String deviceSelector;
	check_hresult(shim()->abi_GetDeviceSelector(put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothLEDeviceStatics2<T>::GetDeviceSelectorFromPairingState(bool const pairingState) const
{
	String deviceSelector;
	check_hresult(shim()->abi_GetDeviceSelectorFromPairingState(pairingState, put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothLEDeviceStatics2<T>::GetDeviceSelectorFromConnectionStatus(Windows::Devices::Bluetooth::BluetoothConnectionStatus const connectionStatus) const
{
	String deviceSelector;
	check_hresult(shim()->abi_GetDeviceSelectorFromConnectionStatus(connectionStatus, put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothLEDeviceStatics2<T>::GetDeviceSelectorFromDeviceName(StringReference const & deviceName) const
{
	String deviceSelector;
	check_hresult(shim()->abi_GetDeviceSelectorFromDeviceName(get(deviceName), put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothLEDeviceStatics2<T>::GetDeviceSelectorFromBluetoothAddress(unsigned long long const bluetoothAddress) const
{
	String deviceSelector;
	check_hresult(shim()->abi_GetDeviceSelectorFromBluetoothAddress(bluetoothAddress, put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothLEDeviceStatics2<T>::GetDeviceSelectorFromBluetoothAddress(unsigned long long const bluetoothAddress, Windows::Devices::Bluetooth::BluetoothAddressType const bluetoothAddressType) const
{
	String deviceSelector;
	check_hresult(shim()->abi_GetDeviceSelectorFromBluetoothAddressWithBluetoothAddressType(bluetoothAddress, bluetoothAddressType, put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothLEDeviceStatics2<T>::GetDeviceSelectorFromAppearance(Windows::Devices::Bluetooth::BluetoothLEAppearance const & appearance) const
{
	String deviceSelector;
	check_hresult(shim()->abi_GetDeviceSelectorFromAppearance(get(appearance), put(deviceSelector)));
	return deviceSelector;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> impl_IBluetoothLEDeviceStatics2<T>::FromBluetoothAddressAsync(unsigned long long const bluetoothAddress, Windows::Devices::Bluetooth::BluetoothAddressType const bluetoothAddressType) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> operation;
	check_hresult(shim()->abi_FromBluetoothAddressWithBluetoothAddressTypeAsync(bluetoothAddress, bluetoothAddressType, put(operation)));
	return operation;
}

template <typename T> unsigned impl_IBluetoothClassOfDevice<T>::RawValue() const
{
	unsigned value = {};
	check_hresult(shim()->get_RawValue(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothMajorClass impl_IBluetoothClassOfDevice<T>::MajorClass() const
{
	Windows::Devices::Bluetooth::BluetoothMajorClass value = {};
	check_hresult(shim()->get_MajorClass(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothMinorClass impl_IBluetoothClassOfDevice<T>::MinorClass() const
{
	Windows::Devices::Bluetooth::BluetoothMinorClass value = {};
	check_hresult(shim()->get_MinorClass(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothServiceCapabilities impl_IBluetoothClassOfDevice<T>::ServiceCapabilities() const
{
	Windows::Devices::Bluetooth::BluetoothServiceCapabilities value = {};
	check_hresult(shim()->get_ServiceCapabilities(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothClassOfDevice impl_IBluetoothClassOfDeviceStatics<T>::FromRawValue(unsigned const rawValue) const
{
	Windows::Devices::Bluetooth::BluetoothClassOfDevice classOfDevice = nullptr;
	check_hresult(shim()->abi_FromRawValue(rawValue, put(classOfDevice)));
	return classOfDevice;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothClassOfDevice impl_IBluetoothClassOfDeviceStatics<T>::FromParts(Windows::Devices::Bluetooth::BluetoothMajorClass const majorClass, Windows::Devices::Bluetooth::BluetoothMinorClass const minorClass, Windows::Devices::Bluetooth::BluetoothServiceCapabilities const serviceCapabilities) const
{
	Windows::Devices::Bluetooth::BluetoothClassOfDevice classOfDevice = nullptr;
	check_hresult(shim()->abi_FromParts(majorClass, minorClass, serviceCapabilities, put(classOfDevice)));
	return classOfDevice;
}

template <typename T> Windows::Foundation::IReference<short> impl_IBluetoothSignalStrengthFilter<T>::InRangeThresholdInDBm() const
{
	Windows::Foundation::IReference<short> value;
	check_hresult(shim()->get_InRangeThresholdInDBm(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothSignalStrengthFilter<T>::InRangeThresholdInDBm(Windows::Foundation::IReference<short> const & value) const
{
	check_hresult(shim()->put_InRangeThresholdInDBm(get(value)));
}

template <typename T> Windows::Foundation::IReference<short> impl_IBluetoothSignalStrengthFilter<T>::OutOfRangeThresholdInDBm() const
{
	Windows::Foundation::IReference<short> value;
	check_hresult(shim()->get_OutOfRangeThresholdInDBm(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothSignalStrengthFilter<T>::OutOfRangeThresholdInDBm(Windows::Foundation::IReference<short> const & value) const
{
	check_hresult(shim()->put_OutOfRangeThresholdInDBm(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IBluetoothSignalStrengthFilter<T>::OutOfRangeTimeout() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check_hresult(shim()->get_OutOfRangeTimeout(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothSignalStrengthFilter<T>::OutOfRangeTimeout(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check_hresult(shim()->put_OutOfRangeTimeout(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IBluetoothSignalStrengthFilter<T>::SamplingInterval() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check_hresult(shim()->get_SamplingInterval(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothSignalStrengthFilter<T>::SamplingInterval(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check_hresult(shim()->put_SamplingInterval(get(value)));
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Advertisement {

template <typename T> Windows::Foundation::IReference<winrt::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFlags> impl_IBluetoothLEAdvertisement<T>::Flags() const
{
	Windows::Foundation::IReference<winrt::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFlags> value;
	check_hresult(shim()->get_Flags(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisement<T>::Flags(Windows::Foundation::IReference<winrt::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFlags> const & value) const
{
	check_hresult(shim()->put_Flags(get(value)));
}

template <typename T> String impl_IBluetoothLEAdvertisement<T>::LocalName() const
{
	String value;
	check_hresult(shim()->get_LocalName(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisement<T>::LocalName(StringReference const & value) const
{
	check_hresult(shim()->put_LocalName(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<GUID> impl_IBluetoothLEAdvertisement<T>::ServiceUuids() const
{
	Windows::Foundation::Collections::IVector<GUID> value;
	check_hresult(shim()->get_ServiceUuids(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData> impl_IBluetoothLEAdvertisement<T>::ManufacturerData() const
{
	Windows::Foundation::Collections::IVector<Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData> value;
	check_hresult(shim()->get_ManufacturerData(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection> impl_IBluetoothLEAdvertisement<T>::DataSections() const
{
	Windows::Foundation::Collections::IVector<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection> value;
	check_hresult(shim()->get_DataSections(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData> impl_IBluetoothLEAdvertisement<T>::GetManufacturerDataByCompanyId(unsigned short const companyId) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData> dataList;
	check_hresult(shim()->abi_GetManufacturerDataByCompanyId(companyId, put(dataList)));
	return dataList;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection> impl_IBluetoothLEAdvertisement<T>::GetSectionsByType(byte const type) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection> sectionList;
	check_hresult(shim()->abi_GetSectionsByType(type, put(sectionList)));
	return sectionList;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement impl_IBluetoothLEAdvertisementFilter<T>::Advertisement() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement value = nullptr;
	check_hresult(shim()->get_Advertisement(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementFilter<T>::Advertisement(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement const & value) const
{
	check_hresult(shim()->put_Advertisement(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementBytePattern> impl_IBluetoothLEAdvertisementFilter<T>::BytePatterns() const
{
	Windows::Foundation::Collections::IVector<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementBytePattern> value;
	check_hresult(shim()->get_BytePatterns(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothError impl_IBluetoothLEAdvertisementWatcherStoppedEventArgs<T>::Error() const
{
	Windows::Devices::Bluetooth::BluetoothError value = {};
	check_hresult(shim()->get_Error(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher impl_IBluetoothLEAdvertisementWatcherFactory<T>::Create(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter const & advertisementFilter) const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher value = nullptr;
	check_hresult(shim()->abi_Create(get(advertisementFilter), put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBluetoothLEAdvertisementWatcher<T>::MinSamplingInterval() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_MinSamplingInterval(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBluetoothLEAdvertisementWatcher<T>::MaxSamplingInterval() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_MaxSamplingInterval(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBluetoothLEAdvertisementWatcher<T>::MinOutOfRangeTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_MinOutOfRangeTimeout(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBluetoothLEAdvertisementWatcher<T>::MaxOutOfRangeTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_MaxOutOfRangeTimeout(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcherStatus impl_IBluetoothLEAdvertisementWatcher<T>::Status() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcherStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEScanningMode impl_IBluetoothLEAdvertisementWatcher<T>::ScanningMode() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEScanningMode value = {};
	check_hresult(shim()->get_ScanningMode(&value));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcher<T>::ScanningMode(Windows::Devices::Bluetooth::Advertisement::BluetoothLEScanningMode const value) const
{
	check_hresult(shim()->put_ScanningMode(value));
}

template <typename T> Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter impl_IBluetoothLEAdvertisementWatcher<T>::SignalStrengthFilter() const
{
	Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter value = nullptr;
	check_hresult(shim()->get_SignalStrengthFilter(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcher<T>::SignalStrengthFilter(Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter const & value) const
{
	check_hresult(shim()->put_SignalStrengthFilter(get(value)));
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter impl_IBluetoothLEAdvertisementWatcher<T>::AdvertisementFilter() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter value = nullptr;
	check_hresult(shim()->get_AdvertisementFilter(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcher<T>::AdvertisementFilter(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter const & value) const
{
	check_hresult(shim()->put_AdvertisementFilter(get(value)));
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcher<T>::Start() const
{
	check_hresult(shim()->abi_Start());
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcher<T>::Stop() const
{
	check_hresult(shim()->abi_Stop());
}

template <typename T> long long impl_IBluetoothLEAdvertisementWatcher<T>::Received(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementReceivedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Received(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothLEAdvertisementWatcher<T>::Received(F handler) const
{
	return Received(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementReceivedEventArgs>(handler));
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcher<T>::Received(long long const token) const
{
	check_hresult(shim()->remove_Received(token));
}

template <typename T> long long impl_IBluetoothLEAdvertisementWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcherStoppedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothLEAdvertisementWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcherStoppedEventArgs>(handler));
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcher<T>::Stopped(long long const token) const
{
	check_hresult(shim()->remove_Stopped(token));
}

template <typename T> short impl_IBluetoothLEAdvertisementReceivedEventArgs<T>::RawSignalStrengthInDBm() const
{
	short value = {};
	check_hresult(shim()->get_RawSignalStrengthInDBm(&value));
	return value;
}

template <typename T> unsigned long long impl_IBluetoothLEAdvertisementReceivedEventArgs<T>::BluetoothAddress() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_BluetoothAddress(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementType impl_IBluetoothLEAdvertisementReceivedEventArgs<T>::AdvertisementType() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementType value = {};
	check_hresult(shim()->get_AdvertisementType(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IBluetoothLEAdvertisementReceivedEventArgs<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement impl_IBluetoothLEAdvertisementReceivedEventArgs<T>::Advertisement() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement value = nullptr;
	check_hresult(shim()->get_Advertisement(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection impl_IBluetoothLEAdvertisementDataSectionFactory<T>::Create(byte const dataType, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection value = nullptr;
	check_hresult(shim()->abi_Create(dataType, get(data), put(value)));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataSection<T>::DataType() const
{
	byte value = {};
	check_hresult(shim()->get_DataType(&value));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementDataSection<T>::DataType(byte const value) const
{
	check_hresult(shim()->put_DataType(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IBluetoothLEAdvertisementDataSection<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_Data(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementDataSection<T>::Data(Windows::Storage::Streams::IBuffer const & value) const
{
	check_hresult(shim()->put_Data(get(value)));
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData impl_IBluetoothLEManufacturerDataFactory<T>::Create(unsigned short const companyId, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData value = nullptr;
	check_hresult(shim()->abi_Create(companyId, get(data), put(value)));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEManufacturerData<T>::CompanyId() const
{
	unsigned short value = {};
	check_hresult(shim()->get_CompanyId(&value));
	return value;
}

template <typename T> void impl_IBluetoothLEManufacturerData<T>::CompanyId(unsigned short const value) const
{
	check_hresult(shim()->put_CompanyId(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IBluetoothLEManufacturerData<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_Data(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEManufacturerData<T>::Data(Windows::Storage::Streams::IBuffer const & value) const
{
	check_hresult(shim()->put_Data(get(value)));
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementBytePattern impl_IBluetoothLEAdvertisementBytePatternFactory<T>::Create(byte const dataType, short const offset, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementBytePattern value = nullptr;
	check_hresult(shim()->abi_Create(dataType, offset, get(data), put(value)));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementBytePattern<T>::DataType() const
{
	byte value = {};
	check_hresult(shim()->get_DataType(&value));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementBytePattern<T>::DataType(byte const value) const
{
	check_hresult(shim()->put_DataType(value));
}

template <typename T> short impl_IBluetoothLEAdvertisementBytePattern<T>::Offset() const
{
	short value = {};
	check_hresult(shim()->get_Offset(&value));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementBytePattern<T>::Offset(short const value) const
{
	check_hresult(shim()->put_Offset(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IBluetoothLEAdvertisementBytePattern<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_Data(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementBytePattern<T>::Data(Windows::Storage::Streams::IBuffer const & value) const
{
	check_hresult(shim()->put_Data(get(value)));
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::Flags() const
{
	byte value = {};
	check_hresult(shim()->get_Flags(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::IncompleteService16BitUuids() const
{
	byte value = {};
	check_hresult(shim()->get_IncompleteService16BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::CompleteService16BitUuids() const
{
	byte value = {};
	check_hresult(shim()->get_CompleteService16BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::IncompleteService32BitUuids() const
{
	byte value = {};
	check_hresult(shim()->get_IncompleteService32BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::CompleteService32BitUuids() const
{
	byte value = {};
	check_hresult(shim()->get_CompleteService32BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::IncompleteService128BitUuids() const
{
	byte value = {};
	check_hresult(shim()->get_IncompleteService128BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::CompleteService128BitUuids() const
{
	byte value = {};
	check_hresult(shim()->get_CompleteService128BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::ShortenedLocalName() const
{
	byte value = {};
	check_hresult(shim()->get_ShortenedLocalName(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::CompleteLocalName() const
{
	byte value = {};
	check_hresult(shim()->get_CompleteLocalName(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::TxPowerLevel() const
{
	byte value = {};
	check_hresult(shim()->get_TxPowerLevel(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::SlaveConnectionIntervalRange() const
{
	byte value = {};
	check_hresult(shim()->get_SlaveConnectionIntervalRange(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::ServiceSolicitation16BitUuids() const
{
	byte value = {};
	check_hresult(shim()->get_ServiceSolicitation16BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::ServiceSolicitation32BitUuids() const
{
	byte value = {};
	check_hresult(shim()->get_ServiceSolicitation32BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::ServiceSolicitation128BitUuids() const
{
	byte value = {};
	check_hresult(shim()->get_ServiceSolicitation128BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::ServiceData16BitUuids() const
{
	byte value = {};
	check_hresult(shim()->get_ServiceData16BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::ServiceData32BitUuids() const
{
	byte value = {};
	check_hresult(shim()->get_ServiceData32BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::ServiceData128BitUuids() const
{
	byte value = {};
	check_hresult(shim()->get_ServiceData128BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::PublicTargetAddress() const
{
	byte value = {};
	check_hresult(shim()->get_PublicTargetAddress(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::RandomTargetAddress() const
{
	byte value = {};
	check_hresult(shim()->get_RandomTargetAddress(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::Appearance() const
{
	byte value = {};
	check_hresult(shim()->get_Appearance(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::AdvertisingInterval() const
{
	byte value = {};
	check_hresult(shim()->get_AdvertisingInterval(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::ManufacturerSpecificData() const
{
	byte value = {};
	check_hresult(shim()->get_ManufacturerSpecificData(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatus impl_IBluetoothLEAdvertisementPublisherStatusChangedEventArgs<T>::Status() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothError impl_IBluetoothLEAdvertisementPublisherStatusChangedEventArgs<T>::Error() const
{
	Windows::Devices::Bluetooth::BluetoothError value = {};
	check_hresult(shim()->get_Error(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisher impl_IBluetoothLEAdvertisementPublisherFactory<T>::Create(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement const & advertisement) const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisher value = nullptr;
	check_hresult(shim()->abi_Create(get(advertisement), put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatus impl_IBluetoothLEAdvertisementPublisher<T>::Status() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement impl_IBluetoothLEAdvertisementPublisher<T>::Advertisement() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement value = nullptr;
	check_hresult(shim()->get_Advertisement(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementPublisher<T>::Start() const
{
	check_hresult(shim()->abi_Start());
}

template <typename T> void impl_IBluetoothLEAdvertisementPublisher<T>::Stop() const
{
	check_hresult(shim()->abi_Stop());
}

template <typename T> long long impl_IBluetoothLEAdvertisementPublisher<T>::StatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisher, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatusChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_StatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothLEAdvertisementPublisher<T>::StatusChanged(F handler) const
{
	return StatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisher, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatusChangedEventArgs>(handler));
}

template <typename T> void impl_IBluetoothLEAdvertisementPublisher<T>::StatusChanged(long long const token) const
{
	check_hresult(shim()->remove_StatusChanged(token));
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Background {

template <typename T> Windows::Storage::Streams::IBuffer impl_IRfcommInboundConnectionInformation<T>::SdpRecord() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_SdpRecord(put(value)));
	return value;
}

template <typename T> void impl_IRfcommInboundConnectionInformation<T>::SdpRecord(Windows::Storage::Streams::IBuffer const & value) const
{
	check_hresult(shim()->put_SdpRecord(get(value)));
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommInboundConnectionInformation<T>::LocalServiceId() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId value = nullptr;
	check_hresult(shim()->get_LocalServiceId(put(value)));
	return value;
}

template <typename T> void impl_IRfcommInboundConnectionInformation<T>::LocalServiceId(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & value) const
{
	check_hresult(shim()->put_LocalServiceId(get(value)));
}

template <typename T> Windows::Devices::Bluetooth::BluetoothServiceCapabilities impl_IRfcommInboundConnectionInformation<T>::ServiceCapabilities() const
{
	Windows::Devices::Bluetooth::BluetoothServiceCapabilities value = {};
	check_hresult(shim()->get_ServiceCapabilities(&value));
	return value;
}

template <typename T> void impl_IRfcommInboundConnectionInformation<T>::ServiceCapabilities(Windows::Devices::Bluetooth::BluetoothServiceCapabilities const value) const
{
	check_hresult(shim()->put_ServiceCapabilities(value));
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommOutboundConnectionInformation<T>::RemoteServiceId() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId value = nullptr;
	check_hresult(shim()->get_RemoteServiceId(put(value)));
	return value;
}

template <typename T> void impl_IRfcommOutboundConnectionInformation<T>::RemoteServiceId(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & value) const
{
	check_hresult(shim()->put_RemoteServiceId(get(value)));
}

template <typename T> Windows::Networking::Sockets::StreamSocket impl_IRfcommConnectionTriggerDetails<T>::Socket() const
{
	Windows::Networking::Sockets::StreamSocket value = nullptr;
	check_hresult(shim()->get_Socket(put(value)));
	return value;
}

template <typename T> bool impl_IRfcommConnectionTriggerDetails<T>::Incoming() const
{
	bool value = {};
	check_hresult(shim()->get_Incoming(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothDevice impl_IRfcommConnectionTriggerDetails<T>::RemoteDevice() const
{
	Windows::Devices::Bluetooth::BluetoothDevice value = nullptr;
	check_hresult(shim()->get_RemoteDevice(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic impl_IGattCharacteristicNotificationTriggerDetails<T>::Characteristic() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic value = nullptr;
	check_hresult(shim()->get_Characteristic(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IGattCharacteristicNotificationTriggerDetails<T>::Value() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_Value(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothError impl_IBluetoothLEAdvertisementWatcherTriggerDetails<T>::Error() const
{
	Windows::Devices::Bluetooth::BluetoothError value = {};
	check_hresult(shim()->get_Error(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementReceivedEventArgs> impl_IBluetoothLEAdvertisementWatcherTriggerDetails<T>::Advertisements() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementReceivedEventArgs> value;
	check_hresult(shim()->get_Advertisements(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter impl_IBluetoothLEAdvertisementWatcherTriggerDetails<T>::SignalStrengthFilter() const
{
	Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter value = nullptr;
	check_hresult(shim()->get_SignalStrengthFilter(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatus impl_IBluetoothLEAdvertisementPublisherTriggerDetails<T>::Status() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothError impl_IBluetoothLEAdvertisementPublisherTriggerDetails<T>::Error() const
{
	Windows::Devices::Bluetooth::BluetoothError value = {};
	check_hresult(shim()->get_Error(&value));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace GenericAttributeProfile {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> impl_IGattDeviceServiceStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> gattDeviceService;
	check_hresult(shim()->abi_FromIdAsync(get(deviceId), put(gattDeviceService)));
	return gattDeviceService;
}

template <typename T> String impl_IGattDeviceServiceStatics<T>::GetDeviceSelectorFromUuid(GUID const serviceUuid) const
{
	String selector;
	check_hresult(shim()->abi_GetDeviceSelectorFromUuid(serviceUuid, put(selector)));
	return selector;
}

template <typename T> String impl_IGattDeviceServiceStatics<T>::GetDeviceSelectorFromShortId(unsigned short const serviceShortId) const
{
	String selector;
	check_hresult(shim()->abi_GetDeviceSelectorFromShortId(serviceShortId, put(selector)));
	return selector;
}

template <typename T> GUID impl_IGattDeviceServiceStatics<T>::ConvertShortIdToUuid(unsigned short const shortId) const
{
	GUID serviceUuid = {};
	check_hresult(shim()->abi_ConvertShortIdToUuid(shortId, &serviceUuid));
	return serviceUuid;
}

template <typename T> GUID impl_IGattCharacteristicStatics<T>::ConvertShortIdToUuid(unsigned short const shortId) const
{
	GUID characteristicUuid = {};
	check_hresult(shim()->abi_ConvertShortIdToUuid(shortId, &characteristicUuid));
	return characteristicUuid;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDescriptor> impl_IGattCharacteristic<T>::GetDescriptors(GUID const descriptorUuid) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDescriptor> value;
	check_hresult(shim()->abi_GetDescriptors(descriptorUuid, put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristicProperties impl_IGattCharacteristic<T>::CharacteristicProperties() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristicProperties value = {};
	check_hresult(shim()->get_CharacteristicProperties(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattProtectionLevel impl_IGattCharacteristic<T>::ProtectionLevel() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattProtectionLevel value = {};
	check_hresult(shim()->get_ProtectionLevel(&value));
	return value;
}

template <typename T> void impl_IGattCharacteristic<T>::ProtectionLevel(Windows::Devices::Bluetooth::GenericAttributeProfile::GattProtectionLevel const value) const
{
	check_hresult(shim()->put_ProtectionLevel(value));
}

template <typename T> String impl_IGattCharacteristic<T>::UserDescription() const
{
	String value;
	check_hresult(shim()->get_UserDescription(put(value)));
	return value;
}

template <typename T> GUID impl_IGattCharacteristic<T>::Uuid() const
{
	GUID value = {};
	check_hresult(shim()->get_Uuid(&value));
	return value;
}

template <typename T> unsigned short impl_IGattCharacteristic<T>::AttributeHandle() const
{
	unsigned short value = {};
	check_hresult(shim()->get_AttributeHandle(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattPresentationFormat> impl_IGattCharacteristic<T>::PresentationFormats() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattPresentationFormat> value;
	check_hresult(shim()->get_PresentationFormats(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> impl_IGattCharacteristic<T>::ReadValueAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> value;
	check_hresult(shim()->abi_ReadValueAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> impl_IGattCharacteristic<T>::ReadValueAsync(Windows::Devices::Bluetooth::BluetoothCacheMode const cacheMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> value;
	check_hresult(shim()->abi_ReadValueWithCacheModeAsync(cacheMode, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> impl_IGattCharacteristic<T>::WriteValueAsync(Windows::Storage::Streams::IBuffer const & value) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> asyncOp;
	check_hresult(shim()->abi_WriteValueAsync(get(value), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> impl_IGattCharacteristic<T>::WriteValueAsync(Windows::Storage::Streams::IBuffer const & value, Windows::Devices::Bluetooth::GenericAttributeProfile::GattWriteOption const writeOption) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> asyncOp;
	check_hresult(shim()->abi_WriteValueWithOptionAsync(get(value), writeOption, put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadClientCharacteristicConfigurationDescriptorResult> impl_IGattCharacteristic<T>::ReadClientCharacteristicConfigurationDescriptorAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadClientCharacteristicConfigurationDescriptorResult> asyncOp;
	check_hresult(shim()->abi_ReadClientCharacteristicConfigurationDescriptorAsync(put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> impl_IGattCharacteristic<T>::WriteClientCharacteristicConfigurationDescriptorAsync(Windows::Devices::Bluetooth::GenericAttributeProfile::GattClientCharacteristicConfigurationDescriptorValue const clientCharacteristicConfigurationDescriptorValue) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> asyncOp;
	check_hresult(shim()->abi_WriteClientCharacteristicConfigurationDescriptorAsync(clientCharacteristicConfigurationDescriptorValue, put(asyncOp)));
	return asyncOp;
}

template <typename T> long long impl_IGattCharacteristic<T>::ValueChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic, Windows::Devices::Bluetooth::GenericAttributeProfile::GattValueChangedEventArgs> const & valueChangedHandler) const
{
	long long valueChangedEventCookie = {};
	check_hresult(shim()->add_ValueChanged(get(valueChangedHandler), &valueChangedEventCookie));
	return valueChangedEventCookie;
}

template <typename T> template <typename F> long long impl_IGattCharacteristic<T>::ValueChanged(F valueChangedHandler) const
{
	return ValueChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic, Windows::Devices::Bluetooth::GenericAttributeProfile::GattValueChangedEventArgs>(valueChangedHandler));
}

template <typename T> void impl_IGattCharacteristic<T>::ValueChanged(long long const valueChangedEventCookie) const
{
	check_hresult(shim()->remove_ValueChanged(valueChangedEventCookie));
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService impl_IGattCharacteristic2<T>::Service() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService value = nullptr;
	check_hresult(shim()->get_Service(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDescriptor> impl_IGattCharacteristic2<T>::GetAllDescriptors() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDescriptor> descriptors;
	check_hresult(shim()->abi_GetAllDescriptors(put(descriptors)));
	return descriptors;
}

template <typename T> GUID impl_IGattDescriptorStatics<T>::ConvertShortIdToUuid(unsigned short const shortId) const
{
	GUID descriptorUuid = {};
	check_hresult(shim()->abi_ConvertShortIdToUuid(shortId, &descriptorUuid));
	return descriptorUuid;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattProtectionLevel impl_IGattDescriptor<T>::ProtectionLevel() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattProtectionLevel value = {};
	check_hresult(shim()->get_ProtectionLevel(&value));
	return value;
}

template <typename T> void impl_IGattDescriptor<T>::ProtectionLevel(Windows::Devices::Bluetooth::GenericAttributeProfile::GattProtectionLevel const value) const
{
	check_hresult(shim()->put_ProtectionLevel(value));
}

template <typename T> GUID impl_IGattDescriptor<T>::Uuid() const
{
	GUID value = {};
	check_hresult(shim()->get_Uuid(&value));
	return value;
}

template <typename T> unsigned short impl_IGattDescriptor<T>::AttributeHandle() const
{
	unsigned short value = {};
	check_hresult(shim()->get_AttributeHandle(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> impl_IGattDescriptor<T>::ReadValueAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> value;
	check_hresult(shim()->abi_ReadValueAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> impl_IGattDescriptor<T>::ReadValueAsync(Windows::Devices::Bluetooth::BluetoothCacheMode const cacheMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> value;
	check_hresult(shim()->abi_ReadValueWithCacheModeAsync(cacheMode, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> impl_IGattDescriptor<T>::WriteValueAsync(Windows::Storage::Streams::IBuffer const & value) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> action;
	check_hresult(shim()->abi_WriteValueAsync(get(value), put(action)));
	return action;
}

template <typename T> byte impl_IGattPresentationFormatStatics<T>::BluetoothSigAssignedNumbers() const
{
	byte value = {};
	check_hresult(shim()->get_BluetoothSigAssignedNumbers(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Boolean() const
{
	byte value = {};
	check_hresult(shim()->get_Boolean(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Bit2() const
{
	byte value = {};
	check_hresult(shim()->get_Bit2(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Nibble() const
{
	byte value = {};
	check_hresult(shim()->get_Nibble(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::UInt8() const
{
	byte value = {};
	check_hresult(shim()->get_UInt8(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::UInt12() const
{
	byte value = {};
	check_hresult(shim()->get_UInt12(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::UInt16() const
{
	byte value = {};
	check_hresult(shim()->get_UInt16(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::UInt24() const
{
	byte value = {};
	check_hresult(shim()->get_UInt24(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::UInt32() const
{
	byte value = {};
	check_hresult(shim()->get_UInt32(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::UInt48() const
{
	byte value = {};
	check_hresult(shim()->get_UInt48(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::UInt64() const
{
	byte value = {};
	check_hresult(shim()->get_UInt64(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::UInt128() const
{
	byte value = {};
	check_hresult(shim()->get_UInt128(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SInt8() const
{
	byte value = {};
	check_hresult(shim()->get_SInt8(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SInt12() const
{
	byte value = {};
	check_hresult(shim()->get_SInt12(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SInt16() const
{
	byte value = {};
	check_hresult(shim()->get_SInt16(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SInt24() const
{
	byte value = {};
	check_hresult(shim()->get_SInt24(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SInt32() const
{
	byte value = {};
	check_hresult(shim()->get_SInt32(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SInt48() const
{
	byte value = {};
	check_hresult(shim()->get_SInt48(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SInt64() const
{
	byte value = {};
	check_hresult(shim()->get_SInt64(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SInt128() const
{
	byte value = {};
	check_hresult(shim()->get_SInt128(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Float32() const
{
	byte value = {};
	check_hresult(shim()->get_Float32(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Float64() const
{
	byte value = {};
	check_hresult(shim()->get_Float64(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SFloat() const
{
	byte value = {};
	check_hresult(shim()->get_SFloat(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Float() const
{
	byte value = {};
	check_hresult(shim()->get_Float(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::DUInt16() const
{
	byte value = {};
	check_hresult(shim()->get_DUInt16(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Utf8() const
{
	byte value = {};
	check_hresult(shim()->get_Utf8(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Utf16() const
{
	byte value = {};
	check_hresult(shim()->get_Utf16(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Struct() const
{
	byte value = {};
	check_hresult(shim()->get_Struct(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormat<T>::FormatType() const
{
	byte value = {};
	check_hresult(shim()->get_FormatType(&value));
	return value;
}

template <typename T> int impl_IGattPresentationFormat<T>::Exponent() const
{
	int value = {};
	check_hresult(shim()->get_Exponent(&value));
	return value;
}

template <typename T> unsigned short impl_IGattPresentationFormat<T>::Unit() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Unit(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormat<T>::Namespace() const
{
	byte value = {};
	check_hresult(shim()->get_Namespace(&value));
	return value;
}

template <typename T> unsigned short impl_IGattPresentationFormat<T>::Description() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Description(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IGattValueChangedEventArgs<T>::CharacteristicValue() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_CharacteristicValue(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IGattValueChangedEventArgs<T>::Timestamp() const
{
	Windows::Foundation::DateTime timestamp = {};
	check_hresult(shim()->get_Timestamp(&timestamp));
	return timestamp;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::Battery() const
{
	GUID value = {};
	check_hresult(shim()->get_Battery(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::BloodPressure() const
{
	GUID value = {};
	check_hresult(shim()->get_BloodPressure(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::CyclingSpeedAndCadence() const
{
	GUID value = {};
	check_hresult(shim()->get_CyclingSpeedAndCadence(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::GenericAccess() const
{
	GUID value = {};
	check_hresult(shim()->get_GenericAccess(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::GenericAttribute() const
{
	GUID value = {};
	check_hresult(shim()->get_GenericAttribute(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::Glucose() const
{
	GUID value = {};
	check_hresult(shim()->get_Glucose(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::HealthThermometer() const
{
	GUID value = {};
	check_hresult(shim()->get_HealthThermometer(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::HeartRate() const
{
	GUID value = {};
	check_hresult(shim()->get_HeartRate(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::RunningSpeedAndCadence() const
{
	GUID value = {};
	check_hresult(shim()->get_RunningSpeedAndCadence(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::AlertNotification() const
{
	GUID value = {};
	check_hresult(shim()->get_AlertNotification(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::CurrentTime() const
{
	GUID value = {};
	check_hresult(shim()->get_CurrentTime(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::CyclingPower() const
{
	GUID value = {};
	check_hresult(shim()->get_CyclingPower(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::DeviceInformation() const
{
	GUID value = {};
	check_hresult(shim()->get_DeviceInformation(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::HumanInterfaceDevice() const
{
	GUID value = {};
	check_hresult(shim()->get_HumanInterfaceDevice(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::ImmediateAlert() const
{
	GUID value = {};
	check_hresult(shim()->get_ImmediateAlert(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::LinkLoss() const
{
	GUID value = {};
	check_hresult(shim()->get_LinkLoss(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::LocationAndNavigation() const
{
	GUID value = {};
	check_hresult(shim()->get_LocationAndNavigation(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::NextDstChange() const
{
	GUID value = {};
	check_hresult(shim()->get_NextDstChange(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::PhoneAlertStatus() const
{
	GUID value = {};
	check_hresult(shim()->get_PhoneAlertStatus(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::ReferenceTimeUpdate() const
{
	GUID value = {};
	check_hresult(shim()->get_ReferenceTimeUpdate(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::ScanParameters() const
{
	GUID value = {};
	check_hresult(shim()->get_ScanParameters(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::TxPower() const
{
	GUID value = {};
	check_hresult(shim()->get_TxPower(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::BatteryLevel() const
{
	GUID value = {};
	check_hresult(shim()->get_BatteryLevel(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::BloodPressureFeature() const
{
	GUID value = {};
	check_hresult(shim()->get_BloodPressureFeature(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::BloodPressureMeasurement() const
{
	GUID value = {};
	check_hresult(shim()->get_BloodPressureMeasurement(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::BodySensorLocation() const
{
	GUID value = {};
	check_hresult(shim()->get_BodySensorLocation(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::CscFeature() const
{
	GUID value = {};
	check_hresult(shim()->get_CscFeature(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::CscMeasurement() const
{
	GUID value = {};
	check_hresult(shim()->get_CscMeasurement(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::GlucoseFeature() const
{
	GUID value = {};
	check_hresult(shim()->get_GlucoseFeature(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::GlucoseMeasurement() const
{
	GUID value = {};
	check_hresult(shim()->get_GlucoseMeasurement(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::GlucoseMeasurementContext() const
{
	GUID value = {};
	check_hresult(shim()->get_GlucoseMeasurementContext(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::HeartRateControlPoint() const
{
	GUID value = {};
	check_hresult(shim()->get_HeartRateControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::HeartRateMeasurement() const
{
	GUID value = {};
	check_hresult(shim()->get_HeartRateMeasurement(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::IntermediateCuffPressure() const
{
	GUID value = {};
	check_hresult(shim()->get_IntermediateCuffPressure(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::IntermediateTemperature() const
{
	GUID value = {};
	check_hresult(shim()->get_IntermediateTemperature(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::MeasurementInterval() const
{
	GUID value = {};
	check_hresult(shim()->get_MeasurementInterval(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::RecordAccessControlPoint() const
{
	GUID value = {};
	check_hresult(shim()->get_RecordAccessControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::RscFeature() const
{
	GUID value = {};
	check_hresult(shim()->get_RscFeature(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::RscMeasurement() const
{
	GUID value = {};
	check_hresult(shim()->get_RscMeasurement(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::SCControlPoint() const
{
	GUID value = {};
	check_hresult(shim()->get_SCControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::SensorLocation() const
{
	GUID value = {};
	check_hresult(shim()->get_SensorLocation(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::TemperatureMeasurement() const
{
	GUID value = {};
	check_hresult(shim()->get_TemperatureMeasurement(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::TemperatureType() const
{
	GUID value = {};
	check_hresult(shim()->get_TemperatureType(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::AlertCategoryId() const
{
	GUID value = {};
	check_hresult(shim()->get_AlertCategoryId(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::AlertCategoryIdBitMask() const
{
	GUID value = {};
	check_hresult(shim()->get_AlertCategoryIdBitMask(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::AlertLevel() const
{
	GUID value = {};
	check_hresult(shim()->get_AlertLevel(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::AlertNotificationControlPoint() const
{
	GUID value = {};
	check_hresult(shim()->get_AlertNotificationControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::AlertStatus() const
{
	GUID value = {};
	check_hresult(shim()->get_AlertStatus(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::GapAppearance() const
{
	GUID value = {};
	check_hresult(shim()->get_GapAppearance(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::BootKeyboardInputReport() const
{
	GUID value = {};
	check_hresult(shim()->get_BootKeyboardInputReport(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::BootKeyboardOutputReport() const
{
	GUID value = {};
	check_hresult(shim()->get_BootKeyboardOutputReport(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::BootMouseInputReport() const
{
	GUID value = {};
	check_hresult(shim()->get_BootMouseInputReport(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::CurrentTime() const
{
	GUID value = {};
	check_hresult(shim()->get_CurrentTime(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::CyclingPowerControlPoint() const
{
	GUID value = {};
	check_hresult(shim()->get_CyclingPowerControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::CyclingPowerFeature() const
{
	GUID value = {};
	check_hresult(shim()->get_CyclingPowerFeature(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::CyclingPowerMeasurement() const
{
	GUID value = {};
	check_hresult(shim()->get_CyclingPowerMeasurement(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::CyclingPowerVector() const
{
	GUID value = {};
	check_hresult(shim()->get_CyclingPowerVector(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::DateTime() const
{
	GUID value = {};
	check_hresult(shim()->get_DateTime(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::DayDateTime() const
{
	GUID value = {};
	check_hresult(shim()->get_DayDateTime(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::DayOfWeek() const
{
	GUID value = {};
	check_hresult(shim()->get_DayOfWeek(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::GapDeviceName() const
{
	GUID value = {};
	check_hresult(shim()->get_GapDeviceName(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::DstOffset() const
{
	GUID value = {};
	check_hresult(shim()->get_DstOffset(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::ExactTime256() const
{
	GUID value = {};
	check_hresult(shim()->get_ExactTime256(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::FirmwareRevisionString() const
{
	GUID value = {};
	check_hresult(shim()->get_FirmwareRevisionString(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::HardwareRevisionString() const
{
	GUID value = {};
	check_hresult(shim()->get_HardwareRevisionString(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::HidControlPoint() const
{
	GUID value = {};
	check_hresult(shim()->get_HidControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::HidInformation() const
{
	GUID value = {};
	check_hresult(shim()->get_HidInformation(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::Ieee1107320601RegulatoryCertificationDataList() const
{
	GUID value = {};
	check_hresult(shim()->get_Ieee1107320601RegulatoryCertificationDataList(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::LnControlPoint() const
{
	GUID value = {};
	check_hresult(shim()->get_LnControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::LnFeature() const
{
	GUID value = {};
	check_hresult(shim()->get_LnFeature(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::LocalTimeInformation() const
{
	GUID value = {};
	check_hresult(shim()->get_LocalTimeInformation(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::LocationAndSpeed() const
{
	GUID value = {};
	check_hresult(shim()->get_LocationAndSpeed(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::ManufacturerNameString() const
{
	GUID value = {};
	check_hresult(shim()->get_ManufacturerNameString(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::ModelNumberString() const
{
	GUID value = {};
	check_hresult(shim()->get_ModelNumberString(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::Navigation() const
{
	GUID value = {};
	check_hresult(shim()->get_Navigation(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::NewAlert() const
{
	GUID value = {};
	check_hresult(shim()->get_NewAlert(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::GapPeripheralPreferredConnectionParameters() const
{
	GUID value = {};
	check_hresult(shim()->get_GapPeripheralPreferredConnectionParameters(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::GapPeripheralPrivacyFlag() const
{
	GUID value = {};
	check_hresult(shim()->get_GapPeripheralPrivacyFlag(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::PnpId() const
{
	GUID value = {};
	check_hresult(shim()->get_PnpId(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::PositionQuality() const
{
	GUID value = {};
	check_hresult(shim()->get_PositionQuality(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::ProtocolMode() const
{
	GUID value = {};
	check_hresult(shim()->get_ProtocolMode(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::GapReconnectionAddress() const
{
	GUID value = {};
	check_hresult(shim()->get_GapReconnectionAddress(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::ReferenceTimeInformation() const
{
	GUID value = {};
	check_hresult(shim()->get_ReferenceTimeInformation(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::Report() const
{
	GUID value = {};
	check_hresult(shim()->get_Report(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::ReportMap() const
{
	GUID value = {};
	check_hresult(shim()->get_ReportMap(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::RingerControlPoint() const
{
	GUID value = {};
	check_hresult(shim()->get_RingerControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::RingerSetting() const
{
	GUID value = {};
	check_hresult(shim()->get_RingerSetting(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::ScanIntervalWindow() const
{
	GUID value = {};
	check_hresult(shim()->get_ScanIntervalWindow(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::ScanRefresh() const
{
	GUID value = {};
	check_hresult(shim()->get_ScanRefresh(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::SerialNumberString() const
{
	GUID value = {};
	check_hresult(shim()->get_SerialNumberString(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::GattServiceChanged() const
{
	GUID value = {};
	check_hresult(shim()->get_GattServiceChanged(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::SoftwareRevisionString() const
{
	GUID value = {};
	check_hresult(shim()->get_SoftwareRevisionString(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::SupportedNewAlertCategory() const
{
	GUID value = {};
	check_hresult(shim()->get_SupportedNewAlertCategory(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::SupportUnreadAlertCategory() const
{
	GUID value = {};
	check_hresult(shim()->get_SupportUnreadAlertCategory(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::SystemId() const
{
	GUID value = {};
	check_hresult(shim()->get_SystemId(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::TimeAccuracy() const
{
	GUID value = {};
	check_hresult(shim()->get_TimeAccuracy(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::TimeSource() const
{
	GUID value = {};
	check_hresult(shim()->get_TimeSource(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::TimeUpdateControlPoint() const
{
	GUID value = {};
	check_hresult(shim()->get_TimeUpdateControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::TimeUpdateState() const
{
	GUID value = {};
	check_hresult(shim()->get_TimeUpdateState(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::TimeWithDst() const
{
	GUID value = {};
	check_hresult(shim()->get_TimeWithDst(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::TimeZone() const
{
	GUID value = {};
	check_hresult(shim()->get_TimeZone(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::TxPowerLevel() const
{
	GUID value = {};
	check_hresult(shim()->get_TxPowerLevel(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::UnreadAlertStatus() const
{
	GUID value = {};
	check_hresult(shim()->get_UnreadAlertStatus(&value));
	return value;
}

template <typename T> GUID impl_IGattDescriptorUuidsStatics<T>::CharacteristicAggregateFormat() const
{
	GUID value = {};
	check_hresult(shim()->get_CharacteristicAggregateFormat(&value));
	return value;
}

template <typename T> GUID impl_IGattDescriptorUuidsStatics<T>::CharacteristicExtendedProperties() const
{
	GUID value = {};
	check_hresult(shim()->get_CharacteristicExtendedProperties(&value));
	return value;
}

template <typename T> GUID impl_IGattDescriptorUuidsStatics<T>::CharacteristicPresentationFormat() const
{
	GUID value = {};
	check_hresult(shim()->get_CharacteristicPresentationFormat(&value));
	return value;
}

template <typename T> GUID impl_IGattDescriptorUuidsStatics<T>::CharacteristicUserDescription() const
{
	GUID value = {};
	check_hresult(shim()->get_CharacteristicUserDescription(&value));
	return value;
}

template <typename T> GUID impl_IGattDescriptorUuidsStatics<T>::ClientCharacteristicConfiguration() const
{
	GUID value = {};
	check_hresult(shim()->get_ClientCharacteristicConfiguration(&value));
	return value;
}

template <typename T> GUID impl_IGattDescriptorUuidsStatics<T>::ServerCharacteristicConfiguration() const
{
	GUID value = {};
	check_hresult(shim()->get_ServerCharacteristicConfiguration(&value));
	return value;
}

template <typename T> void impl_IGattReliableWriteTransaction<T>::WriteValue(Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic const & characteristic, Windows::Storage::Streams::IBuffer const & value) const
{
	check_hresult(shim()->abi_WriteValue(get(characteristic), get(value)));
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> impl_IGattReliableWriteTransaction<T>::CommitAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> asyncOp;
	check_hresult(shim()->abi_CommitAsync(put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus impl_IGattReadResult<T>::Status() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IGattReadResult<T>::Value() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_Value(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus impl_IGattReadClientCharacteristicConfigurationDescriptorResult<T>::Status() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattClientCharacteristicConfigurationDescriptorValue impl_IGattReadClientCharacteristicConfigurationDescriptorResult<T>::ClientCharacteristicConfigurationDescriptor() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattClientCharacteristicConfigurationDescriptorValue value = {};
	check_hresult(shim()->get_ClientCharacteristicConfigurationDescriptor(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic> impl_IGattDeviceService<T>::GetCharacteristics(GUID const characteristicUuid) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic> value;
	check_hresult(shim()->abi_GetCharacteristics(characteristicUuid, put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> impl_IGattDeviceService<T>::GetIncludedServices(GUID const serviceUuid) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> value;
	check_hresult(shim()->abi_GetIncludedServices(serviceUuid, put(value)));
	return value;
}

template <typename T> String impl_IGattDeviceService<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> GUID impl_IGattDeviceService<T>::Uuid() const
{
	GUID value = {};
	check_hresult(shim()->get_Uuid(&value));
	return value;
}

template <typename T> unsigned short impl_IGattDeviceService<T>::AttributeHandle() const
{
	unsigned short value = {};
	check_hresult(shim()->get_AttributeHandle(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothLEDevice impl_IGattDeviceService2<T>::Device() const
{
	Windows::Devices::Bluetooth::BluetoothLEDevice value = nullptr;
	check_hresult(shim()->get_Device(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> impl_IGattDeviceService2<T>::ParentServices() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> value;
	check_hresult(shim()->get_ParentServices(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic> impl_IGattDeviceService2<T>::GetAllCharacteristics() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic> characteristics;
	check_hresult(shim()->abi_GetAllCharacteristics(put(characteristics)));
	return characteristics;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> impl_IGattDeviceService2<T>::GetAllIncludedServices() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> includedServices;
	check_hresult(shim()->abi_GetAllIncludedServices(put(includedServices)));
	return includedServices;
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Rfcomm {

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceIdStatics<T>::FromUuid(GUID const uuid) const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId serviceId = nullptr;
	check_hresult(shim()->abi_FromUuid(uuid, put(serviceId)));
	return serviceId;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceIdStatics<T>::FromShortId(unsigned const shortId) const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId serviceId = nullptr;
	check_hresult(shim()->abi_FromShortId(shortId, put(serviceId)));
	return serviceId;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceIdStatics<T>::SerialPort() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId serviceId = nullptr;
	check_hresult(shim()->get_SerialPort(put(serviceId)));
	return serviceId;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceIdStatics<T>::ObexObjectPush() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId serviceId = nullptr;
	check_hresult(shim()->get_ObexObjectPush(put(serviceId)));
	return serviceId;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceIdStatics<T>::ObexFileTransfer() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId serviceId = nullptr;
	check_hresult(shim()->get_ObexFileTransfer(put(serviceId)));
	return serviceId;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceIdStatics<T>::PhoneBookAccessPce() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId serviceId = nullptr;
	check_hresult(shim()->get_PhoneBookAccessPce(put(serviceId)));
	return serviceId;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceIdStatics<T>::PhoneBookAccessPse() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId serviceId = nullptr;
	check_hresult(shim()->get_PhoneBookAccessPse(put(serviceId)));
	return serviceId;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceIdStatics<T>::GenericFileTransfer() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId serviceId = nullptr;
	check_hresult(shim()->get_GenericFileTransfer(put(serviceId)));
	return serviceId;
}

template <typename T> GUID impl_IRfcommServiceId<T>::Uuid() const
{
	GUID value = {};
	check_hresult(shim()->get_Uuid(&value));
	return value;
}

template <typename T> unsigned impl_IRfcommServiceId<T>::AsShortId() const
{
	unsigned shortId = {};
	check_hresult(shim()->abi_AsShortId(&shortId));
	return shortId;
}

template <typename T> String impl_IRfcommServiceId<T>::AsString() const
{
	String id;
	check_hresult(shim()->abi_AsString(put(id)));
	return id;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService> impl_IRfcommDeviceServiceStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService> asyncOp;
	check_hresult(shim()->abi_FromIdAsync(get(deviceId), put(asyncOp)));
	return asyncOp;
}

template <typename T> String impl_IRfcommDeviceServiceStatics<T>::GetDeviceSelector(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & serviceId) const
{
	String selector;
	check_hresult(shim()->abi_GetDeviceSelector(get(serviceId), put(selector)));
	return selector;
}

template <typename T> Windows::Networking::HostName impl_IRfcommDeviceService<T>::ConnectionHostName() const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->get_ConnectionHostName(put(value)));
	return value;
}

template <typename T> String impl_IRfcommDeviceService<T>::ConnectionServiceName() const
{
	String value;
	check_hresult(shim()->get_ConnectionServiceName(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommDeviceService<T>::ServiceId() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId value = nullptr;
	check_hresult(shim()->get_ServiceId(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketProtectionLevel impl_IRfcommDeviceService<T>::ProtectionLevel() const
{
	Windows::Networking::Sockets::SocketProtectionLevel value = {};
	check_hresult(shim()->get_ProtectionLevel(&value));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketProtectionLevel impl_IRfcommDeviceService<T>::MaxProtectionLevel() const
{
	Windows::Networking::Sockets::SocketProtectionLevel value = {};
	check_hresult(shim()->get_MaxProtectionLevel(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<unsigned, Windows::Storage::Streams::IBuffer>> impl_IRfcommDeviceService<T>::GetSdpRawAttributesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<unsigned, Windows::Storage::Streams::IBuffer>> asyncOp;
	check_hresult(shim()->abi_GetSdpRawAttributesAsync(put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<unsigned, Windows::Storage::Streams::IBuffer>> impl_IRfcommDeviceService<T>::GetSdpRawAttributesAsync(Windows::Devices::Bluetooth::BluetoothCacheMode const cacheMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<unsigned, Windows::Storage::Streams::IBuffer>> asyncOp;
	check_hresult(shim()->abi_GetSdpRawAttributesWithCacheModeAsync(cacheMode, put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothDevice impl_IRfcommDeviceService2<T>::Device() const
{
	Windows::Devices::Bluetooth::BluetoothDevice value = nullptr;
	check_hresult(shim()->get_Device(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider> impl_IRfcommServiceProviderStatics<T>::CreateAsync(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & serviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider> asyncOp;
	check_hresult(shim()->abi_CreateAsync(get(serviceId), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceProvider<T>::ServiceId() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId value = nullptr;
	check_hresult(shim()->get_ServiceId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<unsigned, Windows::Storage::Streams::IBuffer> impl_IRfcommServiceProvider<T>::SdpRawAttributes() const
{
	Windows::Foundation::Collections::IMap<unsigned, Windows::Storage::Streams::IBuffer> value;
	check_hresult(shim()->get_SdpRawAttributes(put(value)));
	return value;
}

template <typename T> void impl_IRfcommServiceProvider<T>::StartAdvertising(Windows::Networking::Sockets::StreamSocketListener const & listener) const
{
	check_hresult(shim()->abi_StartAdvertising(get(listener)));
}

template <typename T> void impl_IRfcommServiceProvider<T>::StopAdvertising() const
{
	check_hresult(shim()->abi_StopAdvertising());
}

template <typename T> void impl_IRfcommServiceProvider2<T>::StartAdvertising(Windows::Networking::Sockets::StreamSocketListener const & listener, bool const radioDiscoverable) const
{
	check_hresult(shim()->abi_StartAdvertisingWithRadioDiscoverability(get(listener), radioDiscoverable));
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Enumeration {

template <typename T> String impl_IDeviceConnectionChangeTriggerDetails<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> String impl_IDevicePickerAppearance<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IDevicePickerAppearance<T>::Title(StringReference const & value) const
{
	check_hresult(shim()->put_Title(get(value)));
}

template <typename T> Windows::UI::Color impl_IDevicePickerAppearance<T>::ForegroundColor() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_ForegroundColor(&value));
	return value;
}

template <typename T> void impl_IDevicePickerAppearance<T>::ForegroundColor(Windows::UI::Color const & value) const
{
	check_hresult(shim()->put_ForegroundColor(value));
}

template <typename T> Windows::UI::Color impl_IDevicePickerAppearance<T>::BackgroundColor() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_BackgroundColor(&value));
	return value;
}

template <typename T> void impl_IDevicePickerAppearance<T>::BackgroundColor(Windows::UI::Color const & value) const
{
	check_hresult(shim()->put_BackgroundColor(value));
}

template <typename T> Windows::UI::Color impl_IDevicePickerAppearance<T>::AccentColor() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_AccentColor(&value));
	return value;
}

template <typename T> void impl_IDevicePickerAppearance<T>::AccentColor(Windows::UI::Color const & value) const
{
	check_hresult(shim()->put_AccentColor(value));
}

template <typename T> Windows::UI::Color impl_IDevicePickerAppearance<T>::SelectedForegroundColor() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_SelectedForegroundColor(&value));
	return value;
}

template <typename T> void impl_IDevicePickerAppearance<T>::SelectedForegroundColor(Windows::UI::Color const & value) const
{
	check_hresult(shim()->put_SelectedForegroundColor(value));
}

template <typename T> Windows::UI::Color impl_IDevicePickerAppearance<T>::SelectedBackgroundColor() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_SelectedBackgroundColor(&value));
	return value;
}

template <typename T> void impl_IDevicePickerAppearance<T>::SelectedBackgroundColor(Windows::UI::Color const & value) const
{
	check_hresult(shim()->put_SelectedBackgroundColor(value));
}

template <typename T> Windows::UI::Color impl_IDevicePickerAppearance<T>::SelectedAccentColor() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_SelectedAccentColor(&value));
	return value;
}

template <typename T> void impl_IDevicePickerAppearance<T>::SelectedAccentColor(Windows::UI::Color const & value) const
{
	check_hresult(shim()->put_SelectedAccentColor(value));
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IDeviceSelectedEventArgs<T>::SelectedDevice() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check_hresult(shim()->get_SelectedDevice(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IDeviceDisconnectButtonClickedEventArgs<T>::Device() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check_hresult(shim()->get_Device(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Enumeration::DeviceClass> impl_IDevicePickerFilter<T>::SupportedDeviceClasses() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Enumeration::DeviceClass> value;
	check_hresult(shim()->get_SupportedDeviceClasses(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IDevicePickerFilter<T>::SupportedDeviceSelectors() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_SupportedDeviceSelectors(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DevicePickerFilter impl_IDevicePicker<T>::Filter() const
{
	Windows::Devices::Enumeration::DevicePickerFilter filter = nullptr;
	check_hresult(shim()->get_Filter(put(filter)));
	return filter;
}

template <typename T> Windows::Devices::Enumeration::DevicePickerAppearance impl_IDevicePicker<T>::Appearance() const
{
	Windows::Devices::Enumeration::DevicePickerAppearance value = nullptr;
	check_hresult(shim()->get_Appearance(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IDevicePicker<T>::RequestedProperties() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_RequestedProperties(put(value)));
	return value;
}

template <typename T> long long impl_IDevicePicker<T>::DeviceSelected(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DevicePicker, Windows::Devices::Enumeration::DeviceSelectedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_DeviceSelected(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDevicePicker<T>::DeviceSelected(F handler) const
{
	return DeviceSelected(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DevicePicker, Windows::Devices::Enumeration::DeviceSelectedEventArgs>(handler));
}

template <typename T> void impl_IDevicePicker<T>::DeviceSelected(long long const token) const
{
	check_hresult(shim()->remove_DeviceSelected(token));
}

template <typename T> long long impl_IDevicePicker<T>::DisconnectButtonClicked(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DevicePicker, Windows::Devices::Enumeration::DeviceDisconnectButtonClickedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_DisconnectButtonClicked(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDevicePicker<T>::DisconnectButtonClicked(F handler) const
{
	return DisconnectButtonClicked(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DevicePicker, Windows::Devices::Enumeration::DeviceDisconnectButtonClickedEventArgs>(handler));
}

template <typename T> void impl_IDevicePicker<T>::DisconnectButtonClicked(long long const token) const
{
	check_hresult(shim()->remove_DisconnectButtonClicked(token));
}

template <typename T> long long impl_IDevicePicker<T>::DevicePickerDismissed(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DevicePicker, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_DevicePickerDismissed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDevicePicker<T>::DevicePickerDismissed(F handler) const
{
	return DevicePickerDismissed(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DevicePicker, IInspectable>(handler));
}

template <typename T> void impl_IDevicePicker<T>::DevicePickerDismissed(long long const token) const
{
	check_hresult(shim()->remove_DevicePickerDismissed(token));
}

template <typename T> void impl_IDevicePicker<T>::Show(Windows::Foundation::Rect const & selection) const
{
	check_hresult(shim()->abi_Show(selection));
}

template <typename T> void impl_IDevicePicker<T>::Show(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const placement) const
{
	check_hresult(shim()->abi_ShowWithPlacement(selection, placement));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> impl_IDevicePicker<T>::PickSingleDeviceAsync(Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> operation;
	check_hresult(shim()->abi_PickSingleDeviceAsync(selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> impl_IDevicePicker<T>::PickSingleDeviceAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const placement) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> operation;
	check_hresult(shim()->abi_PickSingleDeviceAsyncWithPlacement(selection, placement, put(operation)));
	return operation;
}

template <typename T> void impl_IDevicePicker<T>::Hide() const
{
	check_hresult(shim()->abi_Hide());
}

template <typename T> void impl_IDevicePicker<T>::SetDisplayStatus(Windows::Devices::Enumeration::DeviceInformation const & device, StringReference const & status, Windows::Devices::Enumeration::DevicePickerDisplayStatusOptions const options) const
{
	check_hresult(shim()->abi_SetDisplayStatus(get(device), get(status), options));
}

template <typename T> bool impl_IEnclosureLocation<T>::InDock() const
{
	bool value = {};
	check_hresult(shim()->get_InDock(put(value)));
	return value;
}

template <typename T> bool impl_IEnclosureLocation<T>::InLid() const
{
	bool value = {};
	check_hresult(shim()->get_InLid(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::Panel impl_IEnclosureLocation<T>::Panel() const
{
	Windows::Devices::Enumeration::Panel value = {};
	check_hresult(shim()->get_Panel(&value));
	return value;
}

template <typename T> String impl_IDeviceInformationUpdate<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IDeviceInformationUpdate<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value;
	check_hresult(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformationKind impl_IDeviceInformationUpdate2<T>::Kind() const
{
	Windows::Devices::Enumeration::DeviceInformationKind value = {};
	check_hresult(shim()->get_Kind(&value));
	return value;
}

template <typename T> long long impl_IDeviceWatcher<T>::Added(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformation> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Added(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDeviceWatcher<T>::Added(F handler) const
{
	return Added(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformation>(handler));
}

template <typename T> void impl_IDeviceWatcher<T>::Added(long long const token) const
{
	check_hresult(shim()->remove_Added(token));
}

template <typename T> long long impl_IDeviceWatcher<T>::Updated(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Updated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDeviceWatcher<T>::Updated(F handler) const
{
	return Updated(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate>(handler));
}

template <typename T> void impl_IDeviceWatcher<T>::Updated(long long const token) const
{
	check_hresult(shim()->remove_Updated(token));
}

template <typename T> long long impl_IDeviceWatcher<T>::Removed(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Removed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDeviceWatcher<T>::Removed(F handler) const
{
	return Removed(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate>(handler));
}

template <typename T> void impl_IDeviceWatcher<T>::Removed(long long const token) const
{
	check_hresult(shim()->remove_Removed(token));
}

template <typename T> long long impl_IDeviceWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_EnumerationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDeviceWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable>(handler));
}

template <typename T> void impl_IDeviceWatcher<T>::EnumerationCompleted(long long const token) const
{
	check_hresult(shim()->remove_EnumerationCompleted(token));
}

template <typename T> long long impl_IDeviceWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDeviceWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable>(handler));
}

template <typename T> void impl_IDeviceWatcher<T>::Stopped(long long const token) const
{
	check_hresult(shim()->remove_Stopped(token));
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcherStatus impl_IDeviceWatcher<T>::Status() const
{
	Windows::Devices::Enumeration::DeviceWatcherStatus status = {};
	check_hresult(shim()->get_Status(&status));
	return status;
}

template <typename T> void impl_IDeviceWatcher<T>::Start() const
{
	check_hresult(shim()->abi_Start());
}

template <typename T> void impl_IDeviceWatcher<T>::Stop() const
{
	check_hresult(shim()->abi_Stop());
}

template <typename T> Windows::ApplicationModel::Background::DeviceWatcherTrigger impl_IDeviceWatcher2<T>::GetBackgroundTrigger(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Enumeration::DeviceWatcherEventKind> const & requestedEventKinds) const
{
	Windows::ApplicationModel::Background::DeviceWatcherTrigger trigger = nullptr;
	check_hresult(shim()->abi_GetBackgroundTrigger(get(requestedEventKinds), put(trigger)));
	return trigger;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> impl_IDeviceInformationStatics<T>::CreateFromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> asyncOp;
	check_hresult(shim()->abi_CreateFromIdAsync(get(deviceId), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> impl_IDeviceInformationStatics<T>::CreateFromIdAsync(StringReference const & deviceId, Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> asyncOp;
	check_hresult(shim()->abi_CreateFromIdAsyncAdditionalProperties(get(deviceId), get(additionalProperties), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> impl_IDeviceInformationStatics<T>::FindAllAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> asyncOp;
	check_hresult(shim()->abi_FindAllAsync(put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> impl_IDeviceInformationStatics<T>::FindAllAsync(Windows::Devices::Enumeration::DeviceClass const deviceClass) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> asyncOp;
	check_hresult(shim()->abi_FindAllAsyncDeviceClass(deviceClass, put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> impl_IDeviceInformationStatics<T>::FindAllAsync(StringReference const & aqsFilter) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> asyncOp;
	check_hresult(shim()->abi_FindAllAsyncAqsFilter(get(aqsFilter), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> impl_IDeviceInformationStatics<T>::FindAllAsync(StringReference const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> asyncOp;
	check_hresult(shim()->abi_FindAllAsyncAqsFilterAndAdditionalProperties(get(aqsFilter), get(additionalProperties), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcher impl_IDeviceInformationStatics<T>::CreateWatcher() const
{
	Windows::Devices::Enumeration::DeviceWatcher watcher = nullptr;
	check_hresult(shim()->abi_CreateWatcher(put(watcher)));
	return watcher;
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcher impl_IDeviceInformationStatics<T>::CreateWatcher(Windows::Devices::Enumeration::DeviceClass const deviceClass) const
{
	Windows::Devices::Enumeration::DeviceWatcher watcher = nullptr;
	check_hresult(shim()->abi_CreateWatcherDeviceClass(deviceClass, put(watcher)));
	return watcher;
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcher impl_IDeviceInformationStatics<T>::CreateWatcher(StringReference const & aqsFilter) const
{
	Windows::Devices::Enumeration::DeviceWatcher watcher = nullptr;
	check_hresult(shim()->abi_CreateWatcherAqsFilter(get(aqsFilter), put(watcher)));
	return watcher;
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcher impl_IDeviceInformationStatics<T>::CreateWatcher(StringReference const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const
{
	Windows::Devices::Enumeration::DeviceWatcher watcher = nullptr;
	check_hresult(shim()->abi_CreateWatcherAqsFilterAndAdditionalProperties(get(aqsFilter), get(additionalProperties), put(watcher)));
	return watcher;
}

template <typename T> String impl_IDeviceInformationStatics2<T>::GetAqsFilterFromDeviceClass(Windows::Devices::Enumeration::DeviceClass const deviceClass) const
{
	String aqsFilter;
	check_hresult(shim()->abi_GetAqsFilterFromDeviceClass(deviceClass, put(aqsFilter)));
	return aqsFilter;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> impl_IDeviceInformationStatics2<T>::CreateFromIdAsync(StringReference const & deviceId, Windows::Foundation::Collections::IIterable<String> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind const kind) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> asyncOp;
	check_hresult(shim()->abi_CreateFromIdAsyncWithKindAndAdditionalProperties(get(deviceId), get(additionalProperties), kind, put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> impl_IDeviceInformationStatics2<T>::FindAllAsync(StringReference const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind const kind) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> asyncOp;
	check_hresult(shim()->abi_FindAllAsyncWithKindAqsFilterAndAdditionalProperties(get(aqsFilter), get(additionalProperties), kind, put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcher impl_IDeviceInformationStatics2<T>::CreateWatcher(StringReference const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind const kind) const
{
	Windows::Devices::Enumeration::DeviceWatcher watcher = nullptr;
	check_hresult(shim()->abi_CreateWatcherWithKindAqsFilterAndAdditionalProperties(get(aqsFilter), get(additionalProperties), kind, put(watcher)));
	return watcher;
}

template <typename T> String impl_IDeviceInformation<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IDeviceInformation<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> bool impl_IDeviceInformation<T>::IsEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_IsEnabled(put(value)));
	return value;
}

template <typename T> bool impl_IDeviceInformation<T>::IsDefault() const
{
	bool value = {};
	check_hresult(shim()->get_IsDefault(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::EnclosureLocation impl_IDeviceInformation<T>::EnclosureLocation() const
{
	Windows::Devices::Enumeration::EnclosureLocation value = nullptr;
	check_hresult(shim()->get_EnclosureLocation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IDeviceInformation<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value;
	check_hresult(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> void impl_IDeviceInformation<T>::Update(Windows::Devices::Enumeration::DeviceInformationUpdate const & updateInfo) const
{
	check_hresult(shim()->abi_Update(get(updateInfo)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> impl_IDeviceInformation<T>::GetThumbnailAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> asyncOp;
	check_hresult(shim()->abi_GetThumbnailAsync(put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> impl_IDeviceInformation<T>::GetGlyphThumbnailAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> asyncOp;
	check_hresult(shim()->abi_GetGlyphThumbnailAsync(put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::Enumeration::DevicePairingResultStatus impl_IDevicePairingResult<T>::Status() const
{
	Windows::Devices::Enumeration::DevicePairingResultStatus status = {};
	check_hresult(shim()->get_Status(&status));
	return status;
}

template <typename T> Windows::Devices::Enumeration::DevicePairingProtectionLevel impl_IDevicePairingResult<T>::ProtectionLevelUsed() const
{
	Windows::Devices::Enumeration::DevicePairingProtectionLevel value = {};
	check_hresult(shim()->get_ProtectionLevelUsed(&value));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceUnpairingResultStatus impl_IDeviceUnpairingResult<T>::Status() const
{
	Windows::Devices::Enumeration::DeviceUnpairingResultStatus status = {};
	check_hresult(shim()->get_Status(&status));
	return status;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IDevicePairingRequestedEventArgs<T>::DeviceInformation() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check_hresult(shim()->get_DeviceInformation(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DevicePairingKinds impl_IDevicePairingRequestedEventArgs<T>::PairingKind() const
{
	Windows::Devices::Enumeration::DevicePairingKinds value = {};
	check_hresult(shim()->get_PairingKind(&value));
	return value;
}

template <typename T> String impl_IDevicePairingRequestedEventArgs<T>::Pin() const
{
	String value;
	check_hresult(shim()->get_Pin(put(value)));
	return value;
}

template <typename T> void impl_IDevicePairingRequestedEventArgs<T>::Accept() const
{
	check_hresult(shim()->abi_Accept());
}

template <typename T> void impl_IDevicePairingRequestedEventArgs<T>::Accept(StringReference const & pin) const
{
	check_hresult(shim()->abi_AcceptWithPin(get(pin)));
}

template <typename T> Windows::Foundation::Deferral impl_IDevicePairingRequestedEventArgs<T>::GetDeferral() const
{
	Windows::Foundation::Deferral result = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> impl_IDeviceInformationCustomPairing<T>::PairAsync(Windows::Devices::Enumeration::DevicePairingKinds const pairingKindsSupported) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> result;
	check_hresult(shim()->abi_PairAsync(pairingKindsSupported, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> impl_IDeviceInformationCustomPairing<T>::PairAsync(Windows::Devices::Enumeration::DevicePairingKinds const pairingKindsSupported, Windows::Devices::Enumeration::DevicePairingProtectionLevel const minProtectionLevel) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> result;
	check_hresult(shim()->abi_PairWithProtectionLevelAsync(pairingKindsSupported, minProtectionLevel, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> impl_IDeviceInformationCustomPairing<T>::PairAsync(Windows::Devices::Enumeration::DevicePairingKinds const pairingKindsSupported, Windows::Devices::Enumeration::DevicePairingProtectionLevel const minProtectionLevel, Windows::Devices::Enumeration::IDevicePairingSettings const & devicePairingSettings) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> result;
	check_hresult(shim()->abi_PairWithProtectionLevelAndSettingsAsync(pairingKindsSupported, minProtectionLevel, get(devicePairingSettings), put(result)));
	return result;
}

template <typename T> long long impl_IDeviceInformationCustomPairing<T>::PairingRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceInformationCustomPairing, Windows::Devices::Enumeration::DevicePairingRequestedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_PairingRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDeviceInformationCustomPairing<T>::PairingRequested(F handler) const
{
	return PairingRequested(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceInformationCustomPairing, Windows::Devices::Enumeration::DevicePairingRequestedEventArgs>(handler));
}

template <typename T> void impl_IDeviceInformationCustomPairing<T>::PairingRequested(long long const token) const
{
	check_hresult(shim()->remove_PairingRequested(token));
}

template <typename T> bool impl_IDeviceInformationPairing<T>::IsPaired() const
{
	bool value = {};
	check_hresult(shim()->get_IsPaired(put(value)));
	return value;
}

template <typename T> bool impl_IDeviceInformationPairing<T>::CanPair() const
{
	bool value = {};
	check_hresult(shim()->get_CanPair(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> impl_IDeviceInformationPairing<T>::PairAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> result;
	check_hresult(shim()->abi_PairAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> impl_IDeviceInformationPairing<T>::PairAsync(Windows::Devices::Enumeration::DevicePairingProtectionLevel const minProtectionLevel) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> result;
	check_hresult(shim()->abi_PairWithProtectionLevelAsync(minProtectionLevel, put(result)));
	return result;
}

template <typename T> Windows::Devices::Enumeration::DevicePairingProtectionLevel impl_IDeviceInformationPairing2<T>::ProtectionLevel() const
{
	Windows::Devices::Enumeration::DevicePairingProtectionLevel value = {};
	check_hresult(shim()->get_ProtectionLevel(&value));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformationCustomPairing impl_IDeviceInformationPairing2<T>::Custom() const
{
	Windows::Devices::Enumeration::DeviceInformationCustomPairing value = nullptr;
	check_hresult(shim()->get_Custom(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> impl_IDeviceInformationPairing2<T>::PairAsync(Windows::Devices::Enumeration::DevicePairingProtectionLevel const minProtectionLevel, Windows::Devices::Enumeration::IDevicePairingSettings const & devicePairingSettings) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> result;
	check_hresult(shim()->abi_PairWithProtectionLevelAndSettingsAsync(minProtectionLevel, get(devicePairingSettings), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceUnpairingResult> impl_IDeviceInformationPairing2<T>::UnpairAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceUnpairingResult> result;
	check_hresult(shim()->abi_UnpairAsync(put(result)));
	return result;
}

template <typename T> bool impl_IDeviceInformationPairingStatics<T>::TryRegisterForAllInboundPairingRequests(Windows::Devices::Enumeration::DevicePairingKinds const pairingKindsSupported) const
{
	bool result = {};
	check_hresult(shim()->abi_TryRegisterForAllInboundPairingRequests(pairingKindsSupported, put(result)));
	return result;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformationKind impl_IDeviceInformation2<T>::Kind() const
{
	Windows::Devices::Enumeration::DeviceInformationKind value = {};
	check_hresult(shim()->get_Kind(&value));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformationPairing impl_IDeviceInformation2<T>::Pairing() const
{
	Windows::Devices::Enumeration::DeviceInformationPairing value = nullptr;
	check_hresult(shim()->get_Pairing(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceAccessStatus impl_IDeviceAccessChangedEventArgs<T>::Status() const
{
	Windows::Devices::Enumeration::DeviceAccessStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> long long impl_IDeviceAccessInformation<T>::AccessChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceAccessInformation, Windows::Devices::Enumeration::DeviceAccessChangedEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_AccessChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IDeviceAccessInformation<T>::AccessChanged(F handler) const
{
	return AccessChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceAccessInformation, Windows::Devices::Enumeration::DeviceAccessChangedEventArgs>(handler));
}

template <typename T> void impl_IDeviceAccessInformation<T>::AccessChanged(long long const cookie) const
{
	check_hresult(shim()->remove_AccessChanged(cookie));
}

template <typename T> Windows::Devices::Enumeration::DeviceAccessStatus impl_IDeviceAccessInformation<T>::CurrentStatus() const
{
	Windows::Devices::Enumeration::DeviceAccessStatus status = {};
	check_hresult(shim()->get_CurrentStatus(&status));
	return status;
}

template <typename T> Windows::Devices::Enumeration::DeviceAccessInformation impl_IDeviceAccessInformationStatics<T>::CreateFromId(StringReference const & deviceId) const
{
	Windows::Devices::Enumeration::DeviceAccessInformation value = nullptr;
	check_hresult(shim()->abi_CreateFromId(get(deviceId), put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceAccessInformation impl_IDeviceAccessInformationStatics<T>::CreateFromDeviceClassId(GUID const deviceClassId) const
{
	Windows::Devices::Enumeration::DeviceAccessInformation value = nullptr;
	check_hresult(shim()->abi_CreateFromDeviceClassId(deviceClassId, put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceAccessInformation impl_IDeviceAccessInformationStatics<T>::CreateFromDeviceClass(Windows::Devices::Enumeration::DeviceClass const deviceClass) const
{
	Windows::Devices::Enumeration::DeviceAccessInformation value = nullptr;
	check_hresult(shim()->abi_CreateFromDeviceClass(deviceClass, put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcherEventKind impl_IDeviceWatcherEvent<T>::Kind() const
{
	Windows::Devices::Enumeration::DeviceWatcherEventKind value = {};
	check_hresult(shim()->get_Kind(&value));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IDeviceWatcherEvent<T>::DeviceInformation() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check_hresult(shim()->get_DeviceInformation(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformationUpdate impl_IDeviceWatcherEvent<T>::DeviceInformationUpdate() const
{
	Windows::Devices::Enumeration::DeviceInformationUpdate value = nullptr;
	check_hresult(shim()->get_DeviceInformationUpdate(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Enumeration::DeviceWatcherEvent> impl_IDeviceWatcherTriggerDetails<T>::DeviceWatcherEvents() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Enumeration::DeviceWatcherEvent> value;
	check_hresult(shim()->get_DeviceWatcherEvents(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Geolocation {

template <typename T> Windows::Devices::Geolocation::GeoshapeType impl_IGeoshape<T>::GeoshapeType() const
{
	Windows::Devices::Geolocation::GeoshapeType value = {};
	check_hresult(shim()->get_GeoshapeType(&value));
	return value;
}

template <typename T> unsigned impl_IGeoshape<T>::SpatialReferenceId() const
{
	unsigned value = {};
	check_hresult(shim()->get_SpatialReferenceId(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::AltitudeReferenceSystem impl_IGeoshape<T>::AltitudeReferenceSystem() const
{
	Windows::Devices::Geolocation::AltitudeReferenceSystem value = {};
	check_hresult(shim()->get_AltitudeReferenceSystem(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::BasicGeoposition impl_IGeopoint<T>::Position() const
{
	Windows::Devices::Geolocation::BasicGeoposition value = {};
	check_hresult(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_IGeopointFactory<T>::Create(Windows::Devices::Geolocation::BasicGeoposition const & position) const
{
	Windows::Devices::Geolocation::Geopoint value = nullptr;
	check_hresult(shim()->abi_Create(position, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_IGeopointFactory<T>::CreateWithAltitudeReferenceSystem(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) const
{
	Windows::Devices::Geolocation::Geopoint value = nullptr;
	check_hresult(shim()->abi_CreateWithAltitudeReferenceSystem(position, altitudeReferenceSystem, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_IGeopointFactory<T>::CreateWithAltitudeReferenceSystemAndSpatialReferenceId(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) const
{
	Windows::Devices::Geolocation::Geopoint value = nullptr;
	check_hresult(shim()->abi_CreateWithAltitudeReferenceSystemAndSpatialReferenceId(position, altitudeReferenceSystem, spatialReferenceId, put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Geolocation::BasicGeoposition> impl_IGeopath<T>::Positions() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Geolocation::BasicGeoposition> value;
	check_hresult(shim()->get_Positions(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopath impl_IGeopathFactory<T>::Create(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions) const
{
	Windows::Devices::Geolocation::Geopath value = nullptr;
	check_hresult(shim()->abi_Create(get(positions), put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopath impl_IGeopathFactory<T>::CreateWithAltitudeReference(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) const
{
	Windows::Devices::Geolocation::Geopath value = nullptr;
	check_hresult(shim()->abi_CreateWithAltitudeReference(get(positions), altitudeReferenceSystem, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopath impl_IGeopathFactory<T>::CreateWithAltitudeReferenceAndSpatialReference(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) const
{
	Windows::Devices::Geolocation::Geopath value = nullptr;
	check_hresult(shim()->abi_CreateWithAltitudeReferenceAndSpatialReference(get(positions), altitudeReferenceSystem, spatialReferenceId, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::BasicGeoposition impl_IGeoboundingBox<T>::NorthwestCorner() const
{
	Windows::Devices::Geolocation::BasicGeoposition value = {};
	check_hresult(shim()->get_NorthwestCorner(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::BasicGeoposition impl_IGeoboundingBox<T>::SoutheastCorner() const
{
	Windows::Devices::Geolocation::BasicGeoposition value = {};
	check_hresult(shim()->get_SoutheastCorner(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::BasicGeoposition impl_IGeoboundingBox<T>::Center() const
{
	Windows::Devices::Geolocation::BasicGeoposition value = {};
	check_hresult(shim()->get_Center(&value));
	return value;
}

template <typename T> double impl_IGeoboundingBox<T>::MinAltitude() const
{
	double value = {};
	check_hresult(shim()->get_MinAltitude(&value));
	return value;
}

template <typename T> double impl_IGeoboundingBox<T>::MaxAltitude() const
{
	double value = {};
	check_hresult(shim()->get_MaxAltitude(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::GeoboundingBox impl_IGeoboundingBoxFactory<T>::Create(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner) const
{
	Windows::Devices::Geolocation::GeoboundingBox value = nullptr;
	check_hresult(shim()->abi_Create(northwestCorner, southeastCorner, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::GeoboundingBox impl_IGeoboundingBoxFactory<T>::CreateWithAltitudeReference(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) const
{
	Windows::Devices::Geolocation::GeoboundingBox value = nullptr;
	check_hresult(shim()->abi_CreateWithAltitudeReference(northwestCorner, southeastCorner, altitudeReferenceSystem, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::GeoboundingBox impl_IGeoboundingBoxFactory<T>::CreateWithAltitudeReferenceAndSpatialReference(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) const
{
	Windows::Devices::Geolocation::GeoboundingBox value = nullptr;
	check_hresult(shim()->abi_CreateWithAltitudeReferenceAndSpatialReference(northwestCorner, southeastCorner, altitudeReferenceSystem, spatialReferenceId, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::GeoboundingBox impl_IGeoboundingBoxStatics<T>::TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions) const
{
	Windows::Devices::Geolocation::GeoboundingBox value = nullptr;
	check_hresult(shim()->abi_TryCompute(get(positions), put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::GeoboundingBox impl_IGeoboundingBoxStatics<T>::TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeRefSystem) const
{
	Windows::Devices::Geolocation::GeoboundingBox value = nullptr;
	check_hresult(shim()->abi_TryComputeWithAltitudeReference(get(positions), altitudeRefSystem, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::GeoboundingBox impl_IGeoboundingBoxStatics<T>::TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeRefSystem, unsigned const spatialReferenceId) const
{
	Windows::Devices::Geolocation::GeoboundingBox value = nullptr;
	check_hresult(shim()->abi_TryComputeWithAltitudeReferenceAndSpatialReference(get(positions), altitudeRefSystem, spatialReferenceId, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinateSatelliteData<T>::PositionDilutionOfPrecision() const
{
	Windows::Foundation::IReference<double> ppValue;
	check_hresult(shim()->get_PositionDilutionOfPrecision(put(ppValue)));
	return ppValue;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinateSatelliteData<T>::HorizontalDilutionOfPrecision() const
{
	Windows::Foundation::IReference<double> ppValue;
	check_hresult(shim()->get_HorizontalDilutionOfPrecision(put(ppValue)));
	return ppValue;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinateSatelliteData<T>::VerticalDilutionOfPrecision() const
{
	Windows::Foundation::IReference<double> ppValue;
	check_hresult(shim()->get_VerticalDilutionOfPrecision(put(ppValue)));
	return ppValue;
}

template <typename T> String impl_IVenueData<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IVenueData<T>::Level() const
{
	String value;
	check_hresult(shim()->get_Level(put(value)));
	return value;
}

template <typename T> double impl_IGeocoordinate<T>::Latitude() const
{
	double value = {};
	check_hresult(shim()->get_Latitude(&value));
	return value;
}

template <typename T> double impl_IGeocoordinate<T>::Longitude() const
{
	double value = {};
	check_hresult(shim()->get_Longitude(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinate<T>::Altitude() const
{
	Windows::Foundation::IReference<double> value;
	check_hresult(shim()->get_Altitude(put(value)));
	return value;
}

template <typename T> double impl_IGeocoordinate<T>::Accuracy() const
{
	double value = {};
	check_hresult(shim()->get_Accuracy(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinate<T>::AltitudeAccuracy() const
{
	Windows::Foundation::IReference<double> value;
	check_hresult(shim()->get_AltitudeAccuracy(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinate<T>::Heading() const
{
	Windows::Foundation::IReference<double> value;
	check_hresult(shim()->get_Heading(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinate<T>::Speed() const
{
	Windows::Foundation::IReference<double> value;
	check_hresult(shim()->get_Speed(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IGeocoordinate<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::PositionSource impl_IGeocoordinateWithPositionData<T>::PositionSource() const
{
	Windows::Devices::Geolocation::PositionSource pValue = {};
	check_hresult(shim()->get_PositionSource(&pValue));
	return pValue;
}

template <typename T> Windows::Devices::Geolocation::GeocoordinateSatelliteData impl_IGeocoordinateWithPositionData<T>::SatelliteData() const
{
	Windows::Devices::Geolocation::GeocoordinateSatelliteData ppValue = nullptr;
	check_hresult(shim()->get_SatelliteData(put(ppValue)));
	return ppValue;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_IGeocoordinateWithPoint<T>::Point() const
{
	Windows::Devices::Geolocation::Geopoint value = nullptr;
	check_hresult(shim()->get_Point(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geocoordinate impl_IGeoposition<T>::Coordinate() const
{
	Windows::Devices::Geolocation::Geocoordinate value = nullptr;
	check_hresult(shim()->get_Coordinate(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::CivicAddress impl_IGeoposition<T>::CivicAddress() const
{
	Windows::Devices::Geolocation::CivicAddress value = nullptr;
	check_hresult(shim()->get_CivicAddress(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::VenueData impl_IGeoposition2<T>::VenueData() const
{
	Windows::Devices::Geolocation::VenueData value = nullptr;
	check_hresult(shim()->get_VenueData(put(value)));
	return value;
}

template <typename T> String impl_ICivicAddress<T>::Country() const
{
	String value;
	check_hresult(shim()->get_Country(put(value)));
	return value;
}

template <typename T> String impl_ICivicAddress<T>::State() const
{
	String value;
	check_hresult(shim()->get_State(put(value)));
	return value;
}

template <typename T> String impl_ICivicAddress<T>::City() const
{
	String value;
	check_hresult(shim()->get_City(put(value)));
	return value;
}

template <typename T> String impl_ICivicAddress<T>::PostalCode() const
{
	String value;
	check_hresult(shim()->get_PostalCode(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ICivicAddress<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geoposition impl_IPositionChangedEventArgs<T>::Position() const
{
	Windows::Devices::Geolocation::Geoposition value = nullptr;
	check_hresult(shim()->get_Position(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::PositionStatus impl_IStatusChangedEventArgs<T>::Status() const
{
	Windows::Devices::Geolocation::PositionStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::PositionAccuracy impl_IGeolocator<T>::DesiredAccuracy() const
{
	Windows::Devices::Geolocation::PositionAccuracy value = {};
	check_hresult(shim()->get_DesiredAccuracy(&value));
	return value;
}

template <typename T> void impl_IGeolocator<T>::DesiredAccuracy(Windows::Devices::Geolocation::PositionAccuracy const value) const
{
	check_hresult(shim()->put_DesiredAccuracy(value));
}

template <typename T> double impl_IGeolocator<T>::MovementThreshold() const
{
	double value = {};
	check_hresult(shim()->get_MovementThreshold(&value));
	return value;
}

template <typename T> void impl_IGeolocator<T>::MovementThreshold(double const value) const
{
	check_hresult(shim()->put_MovementThreshold(value));
}

template <typename T> unsigned impl_IGeolocator<T>::ReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> void impl_IGeolocator<T>::ReportInterval(unsigned const value) const
{
	check_hresult(shim()->put_ReportInterval(value));
}

template <typename T> Windows::Devices::Geolocation::PositionStatus impl_IGeolocator<T>::LocationStatus() const
{
	Windows::Devices::Geolocation::PositionStatus value = {};
	check_hresult(shim()->get_LocationStatus(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> impl_IGeolocator<T>::GetGeopositionAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> value;
	check_hresult(shim()->abi_GetGeopositionAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> impl_IGeolocator<T>::GetGeopositionAsync(Windows::Foundation::TimeSpan const & maximumAge, Windows::Foundation::TimeSpan const & timeout) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> value;
	check_hresult(shim()->abi_GetGeopositionAsyncWithAgeAndTimeout(maximumAge, timeout, put(value)));
	return value;
}

template <typename T> long long impl_IGeolocator<T>::PositionChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::PositionChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_PositionChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGeolocator<T>::PositionChanged(F handler) const
{
	return PositionChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::PositionChangedEventArgs>(handler));
}

template <typename T> void impl_IGeolocator<T>::PositionChanged(long long const token) const
{
	check_hresult(shim()->remove_PositionChanged(token));
}

template <typename T> long long impl_IGeolocator<T>::StatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::StatusChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_StatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGeolocator<T>::StatusChanged(F handler) const
{
	return StatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::StatusChangedEventArgs>(handler));
}

template <typename T> void impl_IGeolocator<T>::StatusChanged(long long const token) const
{
	check_hresult(shim()->remove_StatusChanged(token));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IGeolocatorWithScalarAccuracy<T>::DesiredAccuracyInMeters() const
{
	Windows::Foundation::IReference<unsigned> value;
	check_hresult(shim()->get_DesiredAccuracyInMeters(put(value)));
	return value;
}

template <typename T> void impl_IGeolocatorWithScalarAccuracy<T>::DesiredAccuracyInMeters(Windows::Foundation::IReference<unsigned> const & value) const
{
	check_hresult(shim()->put_DesiredAccuracyInMeters(get(value)));
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Geolocation::GeolocationAccessStatus> impl_IGeolocatorStatics<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Geolocation::GeolocationAccessStatus> result;
	check_hresult(shim()->abi_RequestAccessAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geoposition>> impl_IGeolocatorStatics<T>::GetGeopositionHistoryAsync(Windows::Foundation::DateTime const & startTime) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geoposition>> result;
	check_hresult(shim()->abi_GetGeopositionHistoryAsync(startTime, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geoposition>> impl_IGeolocatorStatics<T>::GetGeopositionHistoryAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geoposition>> result;
	check_hresult(shim()->abi_GetGeopositionHistoryWithDurationAsync(startTime, duration, put(result)));
	return result;
}

template <typename T> Windows::Devices::Geolocation::BasicGeoposition impl_IGeocircle<T>::Center() const
{
	Windows::Devices::Geolocation::BasicGeoposition value = {};
	check_hresult(shim()->get_Center(&value));
	return value;
}

template <typename T> double impl_IGeocircle<T>::Radius() const
{
	double value = {};
	check_hresult(shim()->get_Radius(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geocircle impl_IGeocircleFactory<T>::Create(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius) const
{
	Windows::Devices::Geolocation::Geocircle value = nullptr;
	check_hresult(shim()->abi_Create(position, radius, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geocircle impl_IGeocircleFactory<T>::CreateWithAltitudeReferenceSystem(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) const
{
	Windows::Devices::Geolocation::Geocircle value = nullptr;
	check_hresult(shim()->abi_CreateWithAltitudeReferenceSystem(position, radius, altitudeReferenceSystem, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geocircle impl_IGeocircleFactory<T>::CreateWithAltitudeReferenceSystemAndSpatialReferenceId(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) const
{
	Windows::Devices::Geolocation::Geocircle value = nullptr;
	check_hresult(shim()->abi_CreateWithAltitudeReferenceSystemAndSpatialReferenceId(position, radius, altitudeReferenceSystem, spatialReferenceId, put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Input {

template <typename T> int impl_IMouseCapabilities<T>::MousePresent() const
{
	int value = {};
	check_hresult(shim()->get_MousePresent(&value));
	return value;
}

template <typename T> int impl_IMouseCapabilities<T>::VerticalWheelPresent() const
{
	int value = {};
	check_hresult(shim()->get_VerticalWheelPresent(&value));
	return value;
}

template <typename T> int impl_IMouseCapabilities<T>::HorizontalWheelPresent() const
{
	int value = {};
	check_hresult(shim()->get_HorizontalWheelPresent(&value));
	return value;
}

template <typename T> int impl_IMouseCapabilities<T>::SwapButtons() const
{
	int value = {};
	check_hresult(shim()->get_SwapButtons(&value));
	return value;
}

template <typename T> unsigned impl_IMouseCapabilities<T>::NumberOfButtons() const
{
	unsigned value = {};
	check_hresult(shim()->get_NumberOfButtons(&value));
	return value;
}

template <typename T> int impl_IKeyboardCapabilities<T>::KeyboardPresent() const
{
	int value = {};
	check_hresult(shim()->get_KeyboardPresent(&value));
	return value;
}

template <typename T> int impl_ITouchCapabilities<T>::TouchPresent() const
{
	int value = {};
	check_hresult(shim()->get_TouchPresent(&value));
	return value;
}

template <typename T> unsigned impl_ITouchCapabilities<T>::Contacts() const
{
	unsigned value = {};
	check_hresult(shim()->get_Contacts(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDevice impl_IPointerDeviceStatics<T>::GetPointerDevice(unsigned const pointerId) const
{
	Windows::Devices::Input::PointerDevice pointerDevice = nullptr;
	check_hresult(shim()->abi_GetPointerDevice(pointerId, put(pointerDevice)));
	return pointerDevice;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Input::PointerDevice> impl_IPointerDeviceStatics<T>::GetPointerDevices() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Input::PointerDevice> pointerDevices;
	check_hresult(shim()->abi_GetPointerDevices(put(pointerDevices)));
	return pointerDevices;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IPointerDevice<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check_hresult(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> bool impl_IPointerDevice<T>::IsIntegrated() const
{
	bool value = {};
	check_hresult(shim()->get_IsIntegrated(put(value)));
	return value;
}

template <typename T> unsigned impl_IPointerDevice<T>::MaxContacts() const
{
	unsigned value = {};
	check_hresult(shim()->get_MaxContacts(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPointerDevice<T>::PhysicalDeviceRect() const
{
	Windows::Foundation::Rect value = {};
	check_hresult(shim()->get_PhysicalDeviceRect(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPointerDevice<T>::ScreenRect() const
{
	Windows::Foundation::Rect value = {};
	check_hresult(shim()->get_ScreenRect(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Input::PointerDeviceUsage> impl_IPointerDevice<T>::SupportedUsages() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Input::PointerDeviceUsage> value;
	check_hresult(shim()->get_SupportedUsages(put(value)));
	return value;
}

template <typename T> Windows::Devices::Input::MouseDelta impl_IMouseEventArgs<T>::MouseDelta() const
{
	Windows::Devices::Input::MouseDelta value = {};
	check_hresult(shim()->get_MouseDelta(&value));
	return value;
}

template <typename T> long long impl_IMouseDevice<T>::MouseMoved(Windows::Foundation::ITypedEventHandler<Windows::Devices::Input::MouseDevice, Windows::Devices::Input::MouseEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_MouseMoved(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMouseDevice<T>::MouseMoved(F handler) const
{
	return MouseMoved(Windows::Foundation::TypedEventHandler<Windows::Devices::Input::MouseDevice, Windows::Devices::Input::MouseEventArgs>(handler));
}

template <typename T> void impl_IMouseDevice<T>::MouseMoved(long long const cookie) const
{
	check_hresult(shim()->remove_MouseMoved(cookie));
}

template <typename T> Windows::Devices::Input::MouseDevice impl_IMouseDeviceStatics<T>::GetForCurrentView() const
{
	Windows::Devices::Input::MouseDevice mouseDevice = nullptr;
	check_hresult(shim()->abi_GetForCurrentView(put(mouseDevice)));
	return mouseDevice;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

template <typename T> void impl_IPrintTaskConfigurationSaveRequestedDeferral<T>::Complete() const
{
	check_hresult(shim()->abi_Complete());
}

template <typename T> void impl_IPrintTaskConfigurationSaveRequest<T>::Cancel() const
{
	check_hresult(shim()->abi_Cancel());
}

template <typename T> void impl_IPrintTaskConfigurationSaveRequest<T>::Save(IInspectable const & printerExtensionContext) const
{
	check_hresult(shim()->abi_Save(get(printerExtensionContext)));
}

template <typename T> Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedDeferral impl_IPrintTaskConfigurationSaveRequest<T>::GetDeferral() const
{
	Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedDeferral deferral = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> Windows::Foundation::DateTime impl_IPrintTaskConfigurationSaveRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Deadline(&value));
	return value;
}

template <typename T> Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequest impl_IPrintTaskConfigurationSaveRequestedEventArgs<T>::Request() const
{
	Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequest context = nullptr;
	check_hresult(shim()->get_Request(put(context)));
	return context;
}

template <typename T> IInspectable impl_IPrintTaskConfiguration<T>::PrinterExtensionContext() const
{
	IInspectable context;
	check_hresult(shim()->get_PrinterExtensionContext(put(context)));
	return context;
}

template <typename T> long long impl_IPrintTaskConfiguration<T>::SaveRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::Printers::Extensions::PrintTaskConfiguration, Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_SaveRequested(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IPrintTaskConfiguration<T>::SaveRequested(F eventHandler) const
{
	return SaveRequested(Windows::Foundation::TypedEventHandler<Windows::Devices::Printers::Extensions::PrintTaskConfiguration, Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedEventArgs>(eventHandler));
}

template <typename T> void impl_IPrintTaskConfiguration<T>::SaveRequested(long long const eventCookie) const
{
	check_hresult(shim()->remove_SaveRequested(eventCookie));
}

template <typename T> String impl_IPrintNotificationEventDetails<T>::PrinterName() const
{
	String value;
	check_hresult(shim()->get_PrinterName(put(value)));
	return value;
}

template <typename T> String impl_IPrintNotificationEventDetails<T>::EventData() const
{
	String value;
	check_hresult(shim()->get_EventData(put(value)));
	return value;
}

template <typename T> void impl_IPrintNotificationEventDetails<T>::EventData(StringReference const & value) const
{
	check_hresult(shim()->put_EventData(get(value)));
}

template <typename T> IInspectable impl_IPrintExtensionContextStatic<T>::FromDeviceId(StringReference const & deviceId) const
{
	IInspectable context;
	check_hresult(shim()->abi_FromDeviceId(get(deviceId), put(context)));
	return context;
}

template <typename T> Windows::Devices::Printers::Extensions::Print3DWorkflowStatus impl_IPrint3DWorkflowPrintRequestedEventArgs<T>::Status() const
{
	Windows::Devices::Printers::Extensions::Print3DWorkflowStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> void impl_IPrint3DWorkflowPrintRequestedEventArgs<T>::SetExtendedStatus(Windows::Devices::Printers::Extensions::Print3DWorkflowDetail const value) const
{
	check_hresult(shim()->abi_SetExtendedStatus(value));
}

template <typename T> void impl_IPrint3DWorkflowPrintRequestedEventArgs<T>::SetSource(IInspectable const & source) const
{
	check_hresult(shim()->abi_SetSource(get(source)));
}

template <typename T> void impl_IPrint3DWorkflowPrintRequestedEventArgs<T>::SetSourceChanged(bool const value) const
{
	check_hresult(shim()->abi_SetSourceChanged(value));
}

template <typename T> String impl_IPrint3DWorkflow<T>::DeviceID() const
{
	String value;
	check_hresult(shim()->get_DeviceID(put(value)));
	return value;
}

template <typename T> IInspectable impl_IPrint3DWorkflow<T>::GetPrintModelPackage() const
{
	IInspectable printModelPackage;
	check_hresult(shim()->abi_GetPrintModelPackage(put(printModelPackage)));
	return printModelPackage;
}

template <typename T> bool impl_IPrint3DWorkflow<T>::IsPrintReady() const
{
	bool value = {};
	check_hresult(shim()->get_IsPrintReady(put(value)));
	return value;
}

template <typename T> void impl_IPrint3DWorkflow<T>::IsPrintReady(bool const value) const
{
	check_hresult(shim()->put_IsPrintReady(value));
}

template <typename T> long long impl_IPrint3DWorkflow<T>::PrintRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::Printers::Extensions::Print3DWorkflow, Windows::Devices::Printers::Extensions::Print3DWorkflowPrintRequestedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_PrintRequested(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IPrint3DWorkflow<T>::PrintRequested(F eventHandler) const
{
	return PrintRequested(Windows::Foundation::TypedEventHandler<Windows::Devices::Printers::Extensions::Print3DWorkflow, Windows::Devices::Printers::Extensions::Print3DWorkflowPrintRequestedEventArgs>(eventHandler));
}

template <typename T> void impl_IPrint3DWorkflow<T>::PrintRequested(long long const eventCookie) const
{
	check_hresult(shim()->remove_PrintRequested(eventCookie));
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sensors {

template <typename T> String impl_ISensorDataThresholdTriggerDetails<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::SensorType impl_ISensorDataThresholdTriggerDetails<T>::SensorType() const
{
	Windows::Devices::Sensors::SensorType value = {};
	check_hresult(shim()->get_SensorType(&value));
	return value;
}

template <typename T> String impl_IAccelerometerDeviceId<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::Accelerometer impl_IAccelerometerStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Accelerometer result = nullptr;
	check_hresult(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::AccelerometerReading impl_IAccelerometer<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::AccelerometerReading value = nullptr;
	check_hresult(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> unsigned impl_IAccelerometer<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IAccelerometer<T>::ReportInterval(unsigned const value) const
{
	check_hresult(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_IAccelerometer<T>::ReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_IAccelerometer<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAccelerometer<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IAccelerometer<T>::ReadingChanged(long long const token) const
{
	check_hresult(shim()->remove_ReadingChanged(token));
}

template <typename T> long long impl_IAccelerometer<T>::Shaken(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerShakenEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Shaken(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAccelerometer<T>::Shaken(F handler) const
{
	return Shaken(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerShakenEventArgs>(handler));
}

template <typename T> void impl_IAccelerometer<T>::Shaken(long long const token) const
{
	check_hresult(shim()->remove_Shaken(token));
}

template <typename T> void impl_IAccelerometer2<T>::ReadingTransform(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check_hresult(shim()->put_ReadingTransform(value));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IAccelerometer2<T>::ReadingTransform() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check_hresult(shim()->get_ReadingTransform(&value));
	return value;
}

template <typename T> void impl_IAccelerometer3<T>::ReportLatency(unsigned const value) const
{
	check_hresult(shim()->put_ReportLatency(value));
}

template <typename T> unsigned impl_IAccelerometer3<T>::ReportLatency() const
{
	unsigned value = {};
	check_hresult(shim()->get_ReportLatency(&value));
	return value;
}

template <typename T> unsigned impl_IAccelerometer3<T>::MaxBatchSize() const
{
	unsigned value = {};
	check_hresult(shim()->get_MaxBatchSize(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IAccelerometerReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> double impl_IAccelerometerReading<T>::AccelerationX() const
{
	double value = {};
	check_hresult(shim()->get_AccelerationX(&value));
	return value;
}

template <typename T> double impl_IAccelerometerReading<T>::AccelerationY() const
{
	double value = {};
	check_hresult(shim()->get_AccelerationY(&value));
	return value;
}

template <typename T> double impl_IAccelerometerReading<T>::AccelerationZ() const
{
	double value = {};
	check_hresult(shim()->get_AccelerationZ(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::AccelerometerReading impl_IAccelerometerReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::AccelerometerReading value = nullptr;
	check_hresult(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IAccelerometerShakenEventArgs<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> String impl_IInclinometerDeviceId<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::Inclinometer impl_IInclinometerStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Inclinometer result = nullptr;
	check_hresult(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::Inclinometer impl_IInclinometerStatics2<T>::GetDefaultForRelativeReadings() const
{
	Windows::Devices::Sensors::Inclinometer result = nullptr;
	check_hresult(shim()->abi_GetDefaultForRelativeReadings(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::InclinometerReading impl_IInclinometer<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::InclinometerReading value = nullptr;
	check_hresult(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> unsigned impl_IInclinometer<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IInclinometer<T>::ReportInterval(unsigned const value) const
{
	check_hresult(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_IInclinometer<T>::ReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_IInclinometer<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Inclinometer, Windows::Devices::Sensors::InclinometerReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IInclinometer<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Inclinometer, Windows::Devices::Sensors::InclinometerReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IInclinometer<T>::ReadingChanged(long long const token) const
{
	check_hresult(shim()->remove_ReadingChanged(token));
}

template <typename T> void impl_IInclinometer2<T>::ReadingTransform(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check_hresult(shim()->put_ReadingTransform(value));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IInclinometer2<T>::ReadingTransform() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check_hresult(shim()->get_ReadingTransform(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::SensorReadingType impl_IInclinometer2<T>::ReadingType() const
{
	Windows::Devices::Sensors::SensorReadingType type = {};
	check_hresult(shim()->get_ReadingType(&type));
	return type;
}

template <typename T> Windows::Foundation::DateTime impl_IInclinometerReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> float impl_IInclinometerReading<T>::PitchDegrees() const
{
	float value = {};
	check_hresult(shim()->get_PitchDegrees(&value));
	return value;
}

template <typename T> float impl_IInclinometerReading<T>::RollDegrees() const
{
	float value = {};
	check_hresult(shim()->get_RollDegrees(&value));
	return value;
}

template <typename T> float impl_IInclinometerReading<T>::YawDegrees() const
{
	float value = {};
	check_hresult(shim()->get_YawDegrees(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::MagnetometerAccuracy impl_IInclinometerReadingYawAccuracy<T>::YawAccuracy() const
{
	Windows::Devices::Sensors::MagnetometerAccuracy value = {};
	check_hresult(shim()->get_YawAccuracy(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::InclinometerReading impl_IInclinometerReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::InclinometerReading value = nullptr;
	check_hresult(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> String impl_IGyrometerDeviceId<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::Gyrometer impl_IGyrometerStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Gyrometer result = nullptr;
	check_hresult(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::GyrometerReading impl_IGyrometer<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::GyrometerReading value = nullptr;
	check_hresult(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> unsigned impl_IGyrometer<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IGyrometer<T>::ReportInterval(unsigned const value) const
{
	check_hresult(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_IGyrometer<T>::ReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_IGyrometer<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Gyrometer, Windows::Devices::Sensors::GyrometerReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGyrometer<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Gyrometer, Windows::Devices::Sensors::GyrometerReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IGyrometer<T>::ReadingChanged(long long const token) const
{
	check_hresult(shim()->remove_ReadingChanged(token));
}

template <typename T> void impl_IGyrometer2<T>::ReadingTransform(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check_hresult(shim()->put_ReadingTransform(value));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IGyrometer2<T>::ReadingTransform() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check_hresult(shim()->get_ReadingTransform(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IGyrometerReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> double impl_IGyrometerReading<T>::AngularVelocityX() const
{
	double value = {};
	check_hresult(shim()->get_AngularVelocityX(&value));
	return value;
}

template <typename T> double impl_IGyrometerReading<T>::AngularVelocityY() const
{
	double value = {};
	check_hresult(shim()->get_AngularVelocityY(&value));
	return value;
}

template <typename T> double impl_IGyrometerReading<T>::AngularVelocityZ() const
{
	double value = {};
	check_hresult(shim()->get_AngularVelocityZ(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::GyrometerReading impl_IGyrometerReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::GyrometerReading value = nullptr;
	check_hresult(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> String impl_ICompassDeviceId<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::Compass impl_ICompassStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Compass result = nullptr;
	check_hresult(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::CompassReading impl_ICompass<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::CompassReading value = nullptr;
	check_hresult(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> unsigned impl_ICompass<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_ICompass<T>::ReportInterval(unsigned const value) const
{
	check_hresult(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_ICompass<T>::ReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_ICompass<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Compass, Windows::Devices::Sensors::CompassReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICompass<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Compass, Windows::Devices::Sensors::CompassReadingChangedEventArgs>(handler));
}

template <typename T> void impl_ICompass<T>::ReadingChanged(long long const token) const
{
	check_hresult(shim()->remove_ReadingChanged(token));
}

template <typename T> void impl_ICompass2<T>::ReadingTransform(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check_hresult(shim()->put_ReadingTransform(value));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_ICompass2<T>::ReadingTransform() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check_hresult(shim()->get_ReadingTransform(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ICompassReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> double impl_ICompassReading<T>::HeadingMagneticNorth() const
{
	double value = {};
	check_hresult(shim()->get_HeadingMagneticNorth(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_ICompassReading<T>::HeadingTrueNorth() const
{
	Windows::Foundation::IReference<double> value;
	check_hresult(shim()->get_HeadingTrueNorth(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::MagnetometerAccuracy impl_ICompassReadingHeadingAccuracy<T>::HeadingAccuracy() const
{
	Windows::Devices::Sensors::MagnetometerAccuracy value = {};
	check_hresult(shim()->get_HeadingAccuracy(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::CompassReading impl_ICompassReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::CompassReading value = nullptr;
	check_hresult(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> String impl_ILightSensorDeviceId<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::LightSensor impl_ILightSensorStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::LightSensor result = nullptr;
	check_hresult(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::LightSensorReading impl_ILightSensor<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::LightSensorReading value = nullptr;
	check_hresult(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> unsigned impl_ILightSensor<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_ILightSensor<T>::ReportInterval(unsigned const value) const
{
	check_hresult(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_ILightSensor<T>::ReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_ILightSensor<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::LightSensor, Windows::Devices::Sensors::LightSensorReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ILightSensor<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::LightSensor, Windows::Devices::Sensors::LightSensorReadingChangedEventArgs>(handler));
}

template <typename T> void impl_ILightSensor<T>::ReadingChanged(long long const token) const
{
	check_hresult(shim()->remove_ReadingChanged(token));
}

template <typename T> Windows::Foundation::DateTime impl_ILightSensorReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> float impl_ILightSensorReading<T>::IlluminanceInLux() const
{
	float value = {};
	check_hresult(shim()->get_IlluminanceInLux(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::LightSensorReading impl_ILightSensorReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::LightSensorReading value = nullptr;
	check_hresult(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M11() const
{
	float value = {};
	check_hresult(shim()->get_M11(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M12() const
{
	float value = {};
	check_hresult(shim()->get_M12(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M13() const
{
	float value = {};
	check_hresult(shim()->get_M13(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M21() const
{
	float value = {};
	check_hresult(shim()->get_M21(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M22() const
{
	float value = {};
	check_hresult(shim()->get_M22(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M23() const
{
	float value = {};
	check_hresult(shim()->get_M23(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M31() const
{
	float value = {};
	check_hresult(shim()->get_M31(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M32() const
{
	float value = {};
	check_hresult(shim()->get_M32(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M33() const
{
	float value = {};
	check_hresult(shim()->get_M33(&value));
	return value;
}

template <typename T> float impl_ISensorQuaternion<T>::W() const
{
	float value = {};
	check_hresult(shim()->get_W(&value));
	return value;
}

template <typename T> float impl_ISensorQuaternion<T>::X() const
{
	float value = {};
	check_hresult(shim()->get_X(&value));
	return value;
}

template <typename T> float impl_ISensorQuaternion<T>::Y() const
{
	float value = {};
	check_hresult(shim()->get_Y(&value));
	return value;
}

template <typename T> float impl_ISensorQuaternion<T>::Z() const
{
	float value = {};
	check_hresult(shim()->get_Z(&value));
	return value;
}

template <typename T> String impl_IOrientationSensorDeviceId<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::OrientationSensor impl_IOrientationSensorStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::OrientationSensor result = nullptr;
	check_hresult(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::OrientationSensor impl_IOrientationSensorStatics2<T>::GetDefaultForRelativeReadings() const
{
	Windows::Devices::Sensors::OrientationSensor result = nullptr;
	check_hresult(shim()->abi_GetDefaultForRelativeReadings(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::OrientationSensorReading impl_IOrientationSensor<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::OrientationSensorReading value = nullptr;
	check_hresult(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> unsigned impl_IOrientationSensor<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IOrientationSensor<T>::ReportInterval(unsigned const value) const
{
	check_hresult(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_IOrientationSensor<T>::ReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_IOrientationSensor<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::OrientationSensor, Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IOrientationSensor<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::OrientationSensor, Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IOrientationSensor<T>::ReadingChanged(long long const token) const
{
	check_hresult(shim()->remove_ReadingChanged(token));
}

template <typename T> void impl_IOrientationSensor2<T>::ReadingTransform(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check_hresult(shim()->put_ReadingTransform(value));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IOrientationSensor2<T>::ReadingTransform() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check_hresult(shim()->get_ReadingTransform(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::SensorReadingType impl_IOrientationSensor2<T>::ReadingType() const
{
	Windows::Devices::Sensors::SensorReadingType type = {};
	check_hresult(shim()->get_ReadingType(&type));
	return type;
}

template <typename T> Windows::Foundation::DateTime impl_IOrientationSensorReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::SensorRotationMatrix impl_IOrientationSensorReading<T>::RotationMatrix() const
{
	Windows::Devices::Sensors::SensorRotationMatrix value = nullptr;
	check_hresult(shim()->get_RotationMatrix(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::SensorQuaternion impl_IOrientationSensorReading<T>::Quaternion() const
{
	Windows::Devices::Sensors::SensorQuaternion value = nullptr;
	check_hresult(shim()->get_Quaternion(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::MagnetometerAccuracy impl_IOrientationSensorReadingYawAccuracy<T>::YawAccuracy() const
{
	Windows::Devices::Sensors::MagnetometerAccuracy value = {};
	check_hresult(shim()->get_YawAccuracy(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::OrientationSensorReading impl_IOrientationSensorReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::OrientationSensorReading value = nullptr;
	check_hresult(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> String impl_ISimpleOrientationSensorDeviceId<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::SimpleOrientationSensor impl_ISimpleOrientationSensorStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::SimpleOrientationSensor result = nullptr;
	check_hresult(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::SimpleOrientation impl_ISimpleOrientationSensor<T>::GetCurrentOrientation() const
{
	Windows::Devices::Sensors::SimpleOrientation value = {};
	check_hresult(shim()->abi_GetCurrentOrientation(&value));
	return value;
}

template <typename T> long long impl_ISimpleOrientationSensor<T>::OrientationChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::SimpleOrientationSensor, Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_OrientationChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISimpleOrientationSensor<T>::OrientationChanged(F handler) const
{
	return OrientationChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::SimpleOrientationSensor, Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs>(handler));
}

template <typename T> void impl_ISimpleOrientationSensor<T>::OrientationChanged(long long const token) const
{
	check_hresult(shim()->remove_OrientationChanged(token));
}

template <typename T> void impl_ISimpleOrientationSensor2<T>::ReadingTransform(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check_hresult(shim()->put_ReadingTransform(value));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_ISimpleOrientationSensor2<T>::ReadingTransform() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check_hresult(shim()->get_ReadingTransform(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISimpleOrientationSensorOrientationChangedEventArgs<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::SimpleOrientation impl_ISimpleOrientationSensorOrientationChangedEventArgs<T>::Orientation() const
{
	Windows::Devices::Sensors::SimpleOrientation value = {};
	check_hresult(shim()->get_Orientation(&value));
	return value;
}

template <typename T> String impl_IMagnetometerDeviceId<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::Magnetometer impl_IMagnetometerStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Magnetometer result = nullptr;
	check_hresult(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::MagnetometerReading impl_IMagnetometer<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::MagnetometerReading value = nullptr;
	check_hresult(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> unsigned impl_IMagnetometer<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IMagnetometer<T>::ReportInterval(unsigned const value) const
{
	check_hresult(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_IMagnetometer<T>::ReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_IMagnetometer<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Magnetometer, Windows::Devices::Sensors::MagnetometerReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMagnetometer<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Magnetometer, Windows::Devices::Sensors::MagnetometerReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IMagnetometer<T>::ReadingChanged(long long const token) const
{
	check_hresult(shim()->remove_ReadingChanged(token));
}

template <typename T> void impl_IMagnetometer2<T>::ReadingTransform(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check_hresult(shim()->put_ReadingTransform(value));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IMagnetometer2<T>::ReadingTransform() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check_hresult(shim()->get_ReadingTransform(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IMagnetometerReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> float impl_IMagnetometerReading<T>::MagneticFieldX() const
{
	float value = {};
	check_hresult(shim()->get_MagneticFieldX(&value));
	return value;
}

template <typename T> float impl_IMagnetometerReading<T>::MagneticFieldY() const
{
	float value = {};
	check_hresult(shim()->get_MagneticFieldY(&value));
	return value;
}

template <typename T> float impl_IMagnetometerReading<T>::MagneticFieldZ() const
{
	float value = {};
	check_hresult(shim()->get_MagneticFieldZ(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::MagnetometerAccuracy impl_IMagnetometerReading<T>::DirectionalAccuracy() const
{
	Windows::Devices::Sensors::MagnetometerAccuracy value = {};
	check_hresult(shim()->get_DirectionalAccuracy(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::MagnetometerReading impl_IMagnetometerReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::MagnetometerReading value = nullptr;
	check_hresult(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensor> impl_IActivitySensorStatics<T>::GetDefaultAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensor> result;
	check_hresult(shim()->abi_GetDefaultAsync(put(result)));
	return result;
}

template <typename T> String impl_IActivitySensorStatics<T>::GetDeviceSelector() const
{
	String value;
	check_hresult(shim()->abi_GetDeviceSelector(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensor> impl_IActivitySensorStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensor> result;
	check_hresult(shim()->abi_FromIdAsync(get(deviceId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReading>> impl_IActivitySensorStatics<T>::GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReading>> result;
	check_hresult(shim()->abi_GetSystemHistoryAsync(fromTime, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReading>> impl_IActivitySensorStatics<T>::GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime, Windows::Foundation::TimeSpan const & duration) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReading>> result;
	check_hresult(shim()->abi_GetSystemHistoryWithDurationAsync(fromTime, duration, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensorReading> impl_IActivitySensor<T>::GetCurrentReadingAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensorReading> result;
	check_hresult(shim()->abi_GetCurrentReadingAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Sensors::ActivityType> impl_IActivitySensor<T>::SubscribedActivities() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Sensors::ActivityType> value;
	check_hresult(shim()->get_SubscribedActivities(put(value)));
	return value;
}

template <typename T> double impl_IActivitySensor<T>::PowerInMilliwatts() const
{
	double value = {};
	check_hresult(shim()->get_PowerInMilliwatts(&value));
	return value;
}

template <typename T> String impl_IActivitySensor<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Sensors::ActivityType> impl_IActivitySensor<T>::SupportedActivities() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Sensors::ActivityType> value;
	check_hresult(shim()->get_SupportedActivities(put(value)));
	return value;
}

template <typename T> unsigned impl_IActivitySensor<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> long long impl_IActivitySensor<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::ActivitySensor, Windows::Devices::Sensors::ActivitySensorReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IActivitySensor<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::ActivitySensor, Windows::Devices::Sensors::ActivitySensorReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IActivitySensor<T>::ReadingChanged(long long const token) const
{
	check_hresult(shim()->remove_ReadingChanged(token));
}

template <typename T> Windows::Foundation::DateTime impl_IActivitySensorReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::ActivityType impl_IActivitySensorReading<T>::Activity() const
{
	Windows::Devices::Sensors::ActivityType value = {};
	check_hresult(shim()->get_Activity(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::ActivitySensorReadingConfidence impl_IActivitySensorReading<T>::Confidence() const
{
	Windows::Devices::Sensors::ActivitySensorReadingConfidence value = {};
	check_hresult(shim()->get_Confidence(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::ActivitySensorReading impl_IActivitySensorReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::ActivitySensorReading value = nullptr;
	check_hresult(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::ActivitySensorReading impl_IActivitySensorReadingChangeReport<T>::Reading() const
{
	Windows::Devices::Sensors::ActivitySensorReading value = nullptr;
	check_hresult(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReadingChangeReport> impl_IActivitySensorTriggerDetails<T>::ReadReports() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReadingChangeReport> value;
	check_hresult(shim()->abi_ReadReports(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::Barometer impl_IBarometerStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Barometer result = nullptr;
	check_hresult(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::BarometerReading impl_IBarometer<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::BarometerReading value = nullptr;
	check_hresult(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> String impl_IBarometer<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> unsigned impl_IBarometer<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IBarometer<T>::ReportInterval(unsigned const value) const
{
	check_hresult(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_IBarometer<T>::ReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_IBarometer<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Barometer, Windows::Devices::Sensors::BarometerReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBarometer<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Barometer, Windows::Devices::Sensors::BarometerReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IBarometer<T>::ReadingChanged(long long const token) const
{
	check_hresult(shim()->remove_ReadingChanged(token));
}

template <typename T> Windows::Foundation::DateTime impl_IBarometerReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> double impl_IBarometerReading<T>::StationPressureInHectopascals() const
{
	double value = {};
	check_hresult(shim()->get_StationPressureInHectopascals(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::BarometerReading impl_IBarometerReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::BarometerReading value = nullptr;
	check_hresult(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::PedometerStepKind impl_IPedometerReading<T>::StepKind() const
{
	Windows::Devices::Sensors::PedometerStepKind value = {};
	check_hresult(shim()->get_StepKind(&value));
	return value;
}

template <typename T> int impl_IPedometerReading<T>::CumulativeSteps() const
{
	int value = {};
	check_hresult(shim()->get_CumulativeSteps(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPedometerReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPedometerReading<T>::CumulativeStepsDuration() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_CumulativeStepsDuration(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::PedometerReading impl_IPedometerReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::PedometerReading value = nullptr;
	check_hresult(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::Pedometer> impl_IPedometerStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::Pedometer> operation;
	check_hresult(shim()->abi_FromIdAsync(get(deviceId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::Pedometer> impl_IPedometerStatics<T>::GetDefaultAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::Pedometer> operation;
	check_hresult(shim()->abi_GetDefaultAsync(put(operation)));
	return operation;
}

template <typename T> String impl_IPedometerStatics<T>::GetDeviceSelector() const
{
	String result;
	check_hresult(shim()->abi_GetDeviceSelector(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading>> impl_IPedometerStatics<T>::GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading>> operation;
	check_hresult(shim()->abi_GetSystemHistoryAsync(fromTime, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading>> impl_IPedometerStatics<T>::GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime, Windows::Foundation::TimeSpan const & duration) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading>> operation;
	check_hresult(shim()->abi_GetSystemHistoryWithDurationAsync(fromTime, duration, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading> impl_IPedometerStatics2<T>::GetReadingsFromTriggerDetails(Windows::Devices::Sensors::SensorDataThresholdTriggerDetails const & triggerDetails) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading> result;
	check_hresult(shim()->abi_GetReadingsFromTriggerDetails(get(triggerDetails), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IMapView<winrt::Windows::Devices::Sensors::PedometerStepKind, Windows::Devices::Sensors::PedometerReading> impl_IPedometer2<T>::GetCurrentReadings() const
{
	Windows::Foundation::Collections::IMapView<winrt::Windows::Devices::Sensors::PedometerStepKind, Windows::Devices::Sensors::PedometerReading> value;
	check_hresult(shim()->abi_GetCurrentReadings(put(value)));
	return value;
}

template <typename T> String impl_IPedometer<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> double impl_IPedometer<T>::PowerInMilliwatts() const
{
	double value = {};
	check_hresult(shim()->get_PowerInMilliwatts(&value));
	return value;
}

template <typename T> unsigned impl_IPedometer<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IPedometer<T>::ReportInterval(unsigned const value) const
{
	check_hresult(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_IPedometer<T>::ReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_IPedometer<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Pedometer, Windows::Devices::Sensors::PedometerReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPedometer<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Pedometer, Windows::Devices::Sensors::PedometerReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IPedometer<T>::ReadingChanged(long long const token) const
{
	check_hresult(shim()->remove_ReadingChanged(token));
}

template <typename T> Windows::Devices::Sensors::PedometerDataThreshold impl_IPedometerDataThresholdFactory<T>::Create(Windows::Devices::Sensors::Pedometer const & sensor, int const stepGoal) const
{
	Windows::Devices::Sensors::PedometerDataThreshold threshold = nullptr;
	check_hresult(shim()->abi_Create(get(sensor), stepGoal, put(threshold)));
	return threshold;
}

template <typename T> String impl_IProximitySensorStatics<T>::GetDeviceSelector() const
{
	String value;
	check_hresult(shim()->abi_GetDeviceSelector(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::ProximitySensor impl_IProximitySensorStatics<T>::FromId(StringReference const & sensorId) const
{
	Windows::Devices::Sensors::ProximitySensor result = nullptr;
	check_hresult(shim()->abi_FromId(get(sensorId), put(result)));
	return result;
}

template <typename T> String impl_IProximitySensor<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IProximitySensor<T>::MaxDistanceInMillimeters() const
{
	Windows::Foundation::IReference<unsigned> value;
	check_hresult(shim()->get_MaxDistanceInMillimeters(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IProximitySensor<T>::MinDistanceInMillimeters() const
{
	Windows::Foundation::IReference<unsigned> value;
	check_hresult(shim()->get_MinDistanceInMillimeters(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::ProximitySensorReading impl_IProximitySensor<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::ProximitySensorReading value = nullptr;
	check_hresult(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> long long impl_IProximitySensor<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::ProximitySensor, Windows::Devices::Sensors::ProximitySensorReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IProximitySensor<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::ProximitySensor, Windows::Devices::Sensors::ProximitySensorReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IProximitySensor<T>::ReadingChanged(long long const token) const
{
	check_hresult(shim()->remove_ReadingChanged(token));
}

template <typename T> Windows::Devices::Sensors::ProximitySensorDisplayOnOffController impl_IProximitySensor<T>::CreateDisplayOnOffController() const
{
	Windows::Devices::Sensors::ProximitySensorDisplayOnOffController controller = nullptr;
	check_hresult(shim()->abi_CreateDisplayOnOffController(put(controller)));
	return controller;
}

template <typename T> Windows::Devices::Sensors::ProximitySensorReading impl_IProximitySensorReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::ProximitySensorReading value = nullptr;
	check_hresult(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IProximitySensorReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> bool impl_IProximitySensorReading<T>::IsDetected() const
{
	bool value = {};
	check_hresult(shim()->get_IsDetected(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IProximitySensorReading<T>::DistanceInMillimeters() const
{
	Windows::Foundation::IReference<unsigned> value;
	check_hresult(shim()->get_DistanceInMillimeters(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::ProximitySensorDataThreshold impl_IProximitySensorDataThresholdFactory<T>::Create(Windows::Devices::Sensors::ProximitySensor const & sensor) const
{
	Windows::Devices::Sensors::ProximitySensorDataThreshold threshold = nullptr;
	check_hresult(shim()->abi_Create(get(sensor), put(threshold)));
	return threshold;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ProximitySensorReading> impl_IProximitySensorStatics2<T>::GetReadingsFromTriggerDetails(Windows::Devices::Sensors::SensorDataThresholdTriggerDetails const & triggerDetails) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ProximitySensorReading> result;
	check_hresult(shim()->abi_GetReadingsFromTriggerDetails(get(triggerDetails), put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::Altimeter impl_IAltimeterStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Altimeter result = nullptr;
	check_hresult(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::AltimeterReading impl_IAltimeter<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::AltimeterReading value = nullptr;
	check_hresult(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> String impl_IAltimeter<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> unsigned impl_IAltimeter<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IAltimeter<T>::ReportInterval(unsigned const value) const
{
	check_hresult(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_IAltimeter<T>::ReportInterval() const
{
	unsigned value = {};
	check_hresult(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_IAltimeter<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Altimeter, Windows::Devices::Sensors::AltimeterReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAltimeter<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Altimeter, Windows::Devices::Sensors::AltimeterReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IAltimeter<T>::ReadingChanged(long long const token) const
{
	check_hresult(shim()->remove_ReadingChanged(token));
}

template <typename T> Windows::Foundation::DateTime impl_IAltimeterReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> double impl_IAltimeterReading<T>::AltitudeChangeInMeters() const
{
	double value = {};
	check_hresult(shim()->get_AltitudeChangeInMeters(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::AltimeterReading impl_IAltimeterReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::AltimeterReading value = nullptr;
	check_hresult(shim()->get_Reading(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sms {

template <typename T> void impl_ISmsMessageReceivedEventHandler<T>::Invoke(Windows::Devices::Sms::SmsDevice const & sender, Windows::Devices::Sms::SmsMessageReceivedEventArgs const & e) const
{
	check_hresult(shim()->abi_Invoke(get(sender), get(e)));
}

template <typename T> void impl_ISmsDeviceStatusChangedEventHandler<T>::Invoke(Windows::Devices::Sms::SmsDevice const & sender) const
{
	check_hresult(shim()->abi_Invoke(get(sender)));
}

template <typename T> unsigned impl_ISmsMessage<T>::Id() const
{
	unsigned value = {};
	check_hresult(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsMessageClass impl_ISmsMessage<T>::MessageClass() const
{
	Windows::Devices::Sms::SmsMessageClass value = {};
	check_hresult(shim()->get_MessageClass(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsMessageType impl_ISmsMessageBase<T>::MessageType() const
{
	Windows::Devices::Sms::SmsMessageType value = {};
	check_hresult(shim()->get_MessageType(&value));
	return value;
}

template <typename T> String impl_ISmsMessageBase<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::CellularClass impl_ISmsMessageBase<T>::CellularClass() const
{
	Windows::Devices::Sms::CellularClass value = {};
	check_hresult(shim()->get_CellularClass(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsMessageClass impl_ISmsMessageBase<T>::MessageClass() const
{
	Windows::Devices::Sms::SmsMessageClass value = {};
	check_hresult(shim()->get_MessageClass(&value));
	return value;
}

template <typename T> String impl_ISmsMessageBase<T>::SimIccId() const
{
	String value;
	check_hresult(shim()->get_SimIccId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDataFormat impl_ISmsBinaryMessage<T>::Format() const
{
	Windows::Devices::Sms::SmsDataFormat value = {};
	check_hresult(shim()->get_Format(&value));
	return value;
}

template <typename T> void impl_ISmsBinaryMessage<T>::Format(Windows::Devices::Sms::SmsDataFormat const value) const
{
	check_hresult(shim()->put_Format(value));
}

template <typename T> Windows::Foundation::DateTime impl_ISmsTextMessage<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> unsigned impl_ISmsTextMessage<T>::PartReferenceId() const
{
	unsigned value = {};
	check_hresult(shim()->get_PartReferenceId(&value));
	return value;
}

template <typename T> unsigned impl_ISmsTextMessage<T>::PartNumber() const
{
	unsigned value = {};
	check_hresult(shim()->get_PartNumber(&value));
	return value;
}

template <typename T> unsigned impl_ISmsTextMessage<T>::PartCount() const
{
	unsigned value = {};
	check_hresult(shim()->get_PartCount(&value));
	return value;
}

template <typename T> String impl_ISmsTextMessage<T>::To() const
{
	String value;
	check_hresult(shim()->get_To(put(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage<T>::To(StringReference const & value) const
{
	check_hresult(shim()->put_To(get(value)));
}

template <typename T> String impl_ISmsTextMessage<T>::From() const
{
	String value;
	check_hresult(shim()->get_From(put(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage<T>::From(StringReference const & value) const
{
	check_hresult(shim()->put_From(get(value)));
}

template <typename T> String impl_ISmsTextMessage<T>::Body() const
{
	String value;
	check_hresult(shim()->get_Body(put(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage<T>::Body(StringReference const & value) const
{
	check_hresult(shim()->put_Body(get(value)));
}

template <typename T> Windows::Devices::Sms::SmsEncoding impl_ISmsTextMessage<T>::Encoding() const
{
	Windows::Devices::Sms::SmsEncoding value = {};
	check_hresult(shim()->get_Encoding(&value));
	return value;
}

template <typename T> void impl_ISmsTextMessage<T>::Encoding(Windows::Devices::Sms::SmsEncoding const value) const
{
	check_hresult(shim()->put_Encoding(value));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsBinaryMessage> impl_ISmsTextMessage<T>::ToBinaryMessages(Windows::Devices::Sms::SmsDataFormat const format) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsBinaryMessage> messages;
	check_hresult(shim()->abi_ToBinaryMessages(format, put(messages)));
	return messages;
}

template <typename T> Windows::Devices::Sms::SmsTextMessage impl_ISmsTextMessageStatics<T>::FromBinaryMessage(Windows::Devices::Sms::SmsBinaryMessage const & binaryMessage) const
{
	Windows::Devices::Sms::SmsTextMessage textMessage = nullptr;
	check_hresult(shim()->abi_FromBinaryMessage(get(binaryMessage), put(textMessage)));
	return textMessage;
}

template <typename T> Windows::Foundation::DateTime impl_ISmsTextMessage2<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> String impl_ISmsTextMessage2<T>::To() const
{
	String value;
	check_hresult(shim()->get_To(put(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage2<T>::To(StringReference const & value) const
{
	check_hresult(shim()->put_To(get(value)));
}

template <typename T> String impl_ISmsTextMessage2<T>::From() const
{
	String value;
	check_hresult(shim()->get_From(put(value)));
	return value;
}

template <typename T> String impl_ISmsTextMessage2<T>::Body() const
{
	String value;
	check_hresult(shim()->get_Body(put(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage2<T>::Body(StringReference const & value) const
{
	check_hresult(shim()->put_Body(get(value)));
}

template <typename T> Windows::Devices::Sms::SmsEncoding impl_ISmsTextMessage2<T>::Encoding() const
{
	Windows::Devices::Sms::SmsEncoding value = {};
	check_hresult(shim()->get_Encoding(&value));
	return value;
}

template <typename T> void impl_ISmsTextMessage2<T>::Encoding(Windows::Devices::Sms::SmsEncoding const value) const
{
	check_hresult(shim()->put_Encoding(value));
}

template <typename T> String impl_ISmsTextMessage2<T>::CallbackNumber() const
{
	String value;
	check_hresult(shim()->get_CallbackNumber(put(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage2<T>::CallbackNumber(StringReference const & value) const
{
	check_hresult(shim()->put_CallbackNumber(get(value)));
}

template <typename T> bool impl_ISmsTextMessage2<T>::IsDeliveryNotificationEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_IsDeliveryNotificationEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage2<T>::IsDeliveryNotificationEnabled(bool const value) const
{
	check_hresult(shim()->put_IsDeliveryNotificationEnabled(value));
}

template <typename T> int impl_ISmsTextMessage2<T>::RetryAttemptCount() const
{
	int value = {};
	check_hresult(shim()->get_RetryAttemptCount(&value));
	return value;
}

template <typename T> void impl_ISmsTextMessage2<T>::RetryAttemptCount(int const value) const
{
	check_hresult(shim()->put_RetryAttemptCount(value));
}

template <typename T> int impl_ISmsTextMessage2<T>::TeleserviceId() const
{
	int value = {};
	check_hresult(shim()->get_TeleserviceId(&value));
	return value;
}

template <typename T> int impl_ISmsTextMessage2<T>::ProtocolId() const
{
	int value = {};
	check_hresult(shim()->get_ProtocolId(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISmsWapMessage<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> String impl_ISmsWapMessage<T>::To() const
{
	String value;
	check_hresult(shim()->get_To(put(value)));
	return value;
}

template <typename T> String impl_ISmsWapMessage<T>::From() const
{
	String value;
	check_hresult(shim()->get_From(put(value)));
	return value;
}

template <typename T> String impl_ISmsWapMessage<T>::ApplicationId() const
{
	String value;
	check_hresult(shim()->get_ApplicationId(put(value)));
	return value;
}

template <typename T> String impl_ISmsWapMessage<T>::ContentType() const
{
	String value;
	check_hresult(shim()->get_ContentType(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ISmsWapMessage<T>::BinaryBody() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_BinaryBody(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_ISmsWapMessage<T>::Headers() const
{
	Windows::Foundation::Collections::IMap<String, String> value;
	check_hresult(shim()->get_Headers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISmsAppMessage<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> String impl_ISmsAppMessage<T>::To() const
{
	String value;
	check_hresult(shim()->get_To(put(value)));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::To(StringReference const & value) const
{
	check_hresult(shim()->put_To(get(value)));
}

template <typename T> String impl_ISmsAppMessage<T>::From() const
{
	String value;
	check_hresult(shim()->get_From(put(value)));
	return value;
}

template <typename T> String impl_ISmsAppMessage<T>::Body() const
{
	String value;
	check_hresult(shim()->get_Body(put(value)));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::Body(StringReference const & value) const
{
	check_hresult(shim()->put_Body(get(value)));
}

template <typename T> String impl_ISmsAppMessage<T>::CallbackNumber() const
{
	String value;
	check_hresult(shim()->get_CallbackNumber(put(value)));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::CallbackNumber(StringReference const & value) const
{
	check_hresult(shim()->put_CallbackNumber(get(value)));
}

template <typename T> bool impl_ISmsAppMessage<T>::IsDeliveryNotificationEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_IsDeliveryNotificationEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::IsDeliveryNotificationEnabled(bool const value) const
{
	check_hresult(shim()->put_IsDeliveryNotificationEnabled(value));
}

template <typename T> int impl_ISmsAppMessage<T>::RetryAttemptCount() const
{
	int value = {};
	check_hresult(shim()->get_RetryAttemptCount(&value));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::RetryAttemptCount(int const value) const
{
	check_hresult(shim()->put_RetryAttemptCount(value));
}

template <typename T> Windows::Devices::Sms::SmsEncoding impl_ISmsAppMessage<T>::Encoding() const
{
	Windows::Devices::Sms::SmsEncoding value = {};
	check_hresult(shim()->get_Encoding(&value));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::Encoding(Windows::Devices::Sms::SmsEncoding const value) const
{
	check_hresult(shim()->put_Encoding(value));
}

template <typename T> int impl_ISmsAppMessage<T>::PortNumber() const
{
	int value = {};
	check_hresult(shim()->get_PortNumber(&value));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::PortNumber(int const value) const
{
	check_hresult(shim()->put_PortNumber(value));
}

template <typename T> int impl_ISmsAppMessage<T>::TeleserviceId() const
{
	int value = {};
	check_hresult(shim()->get_TeleserviceId(&value));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::TeleserviceId(int const value) const
{
	check_hresult(shim()->put_TeleserviceId(value));
}

template <typename T> int impl_ISmsAppMessage<T>::ProtocolId() const
{
	int value = {};
	check_hresult(shim()->get_ProtocolId(&value));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::ProtocolId(int const value) const
{
	check_hresult(shim()->put_ProtocolId(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ISmsAppMessage<T>::BinaryBody() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_BinaryBody(put(value)));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::BinaryBody(Windows::Storage::Streams::IBuffer const & value) const
{
	check_hresult(shim()->put_BinaryBody(get(value)));
}

template <typename T> Windows::Foundation::DateTime impl_ISmsBroadcastMessage<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> String impl_ISmsBroadcastMessage<T>::To() const
{
	String value;
	check_hresult(shim()->get_To(put(value)));
	return value;
}

template <typename T> String impl_ISmsBroadcastMessage<T>::Body() const
{
	String value;
	check_hresult(shim()->get_Body(put(value)));
	return value;
}

template <typename T> int impl_ISmsBroadcastMessage<T>::Channel() const
{
	int value = {};
	check_hresult(shim()->get_Channel(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsGeographicalScope impl_ISmsBroadcastMessage<T>::GeographicalScope() const
{
	Windows::Devices::Sms::SmsGeographicalScope value = {};
	check_hresult(shim()->get_GeographicalScope(&value));
	return value;
}

template <typename T> int impl_ISmsBroadcastMessage<T>::MessageCode() const
{
	int value = {};
	check_hresult(shim()->get_MessageCode(&value));
	return value;
}

template <typename T> int impl_ISmsBroadcastMessage<T>::UpdateNumber() const
{
	int value = {};
	check_hresult(shim()->get_UpdateNumber(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsBroadcastType impl_ISmsBroadcastMessage<T>::BroadcastType() const
{
	Windows::Devices::Sms::SmsBroadcastType value = {};
	check_hresult(shim()->get_BroadcastType(&value));
	return value;
}

template <typename T> bool impl_ISmsBroadcastMessage<T>::IsEmergencyAlert() const
{
	bool value = {};
	check_hresult(shim()->get_IsEmergencyAlert(put(value)));
	return value;
}

template <typename T> bool impl_ISmsBroadcastMessage<T>::IsUserPopupRequested() const
{
	bool value = {};
	check_hresult(shim()->get_IsUserPopupRequested(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISmsVoicemailMessage<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> String impl_ISmsVoicemailMessage<T>::To() const
{
	String value;
	check_hresult(shim()->get_To(put(value)));
	return value;
}

template <typename T> String impl_ISmsVoicemailMessage<T>::Body() const
{
	String value;
	check_hresult(shim()->get_Body(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<int> impl_ISmsVoicemailMessage<T>::MessageCount() const
{
	Windows::Foundation::IReference<int> value;
	check_hresult(shim()->get_MessageCount(put(value)));
	return value;
}

template <typename T> String impl_ISmsStatusMessage<T>::To() const
{
	String value;
	check_hresult(shim()->get_To(put(value)));
	return value;
}

template <typename T> String impl_ISmsStatusMessage<T>::From() const
{
	String value;
	check_hresult(shim()->get_From(put(value)));
	return value;
}

template <typename T> String impl_ISmsStatusMessage<T>::Body() const
{
	String value;
	check_hresult(shim()->get_Body(put(value)));
	return value;
}

template <typename T> int impl_ISmsStatusMessage<T>::Status() const
{
	int value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> int impl_ISmsStatusMessage<T>::MessageReferenceNumber() const
{
	int value = {};
	check_hresult(shim()->get_MessageReferenceNumber(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISmsStatusMessage<T>::ServiceCenterTimestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_ServiceCenterTimestamp(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISmsStatusMessage<T>::DischargeTime() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_DischargeTime(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISmsDeviceMessageStore<T>::DeleteMessageAsync(unsigned const messageId) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check_hresult(shim()->abi_DeleteMessageAsync(messageId, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISmsDeviceMessageStore<T>::DeleteMessagesAsync(Windows::Devices::Sms::SmsMessageFilter const messageFilter) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check_hresult(shim()->abi_DeleteMessagesAsync(messageFilter, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::ISmsMessage> impl_ISmsDeviceMessageStore<T>::GetMessageAsync(unsigned const messageId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::ISmsMessage> asyncInfo;
	check_hresult(shim()->abi_GetMessageAsync(messageId, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsMessage>, int> impl_ISmsDeviceMessageStore<T>::GetMessagesAsync(Windows::Devices::Sms::SmsMessageFilter const messageFilter) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsMessage>, int> asyncInfo;
	check_hresult(shim()->abi_GetMessagesAsync(messageFilter, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> unsigned impl_ISmsDeviceMessageStore<T>::MaxMessages() const
{
	unsigned value = {};
	check_hresult(shim()->get_MaxMessages(&value));
	return value;
}

template <typename T> bool impl_ISmsSendMessageResult<T>::IsSuccessful() const
{
	bool value = {};
	check_hresult(shim()->get_IsSuccessful(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<int> impl_ISmsSendMessageResult<T>::MessageReferenceNumbers() const
{
	Windows::Foundation::Collections::IVectorView<int> value;
	check_hresult(shim()->get_MessageReferenceNumbers(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::CellularClass impl_ISmsSendMessageResult<T>::CellularClass() const
{
	Windows::Devices::Sms::CellularClass value = {};
	check_hresult(shim()->get_CellularClass(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsModemErrorCode impl_ISmsSendMessageResult<T>::ModemErrorCode() const
{
	Windows::Devices::Sms::SmsModemErrorCode value = {};
	check_hresult(shim()->get_ModemErrorCode(&value));
	return value;
}

template <typename T> bool impl_ISmsSendMessageResult<T>::IsErrorTransient() const
{
	bool value = {};
	check_hresult(shim()->get_IsErrorTransient(put(value)));
	return value;
}

template <typename T> int impl_ISmsSendMessageResult<T>::NetworkCauseCode() const
{
	int value = {};
	check_hresult(shim()->get_NetworkCauseCode(&value));
	return value;
}

template <typename T> int impl_ISmsSendMessageResult<T>::TransportFailureCause() const
{
	int value = {};
	check_hresult(shim()->get_TransportFailureCause(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsTextMessage impl_ISmsMessageReceivedEventArgs<T>::TextMessage() const
{
	Windows::Devices::Sms::SmsTextMessage value = nullptr;
	check_hresult(shim()->get_TextMessage(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsBinaryMessage impl_ISmsMessageReceivedEventArgs<T>::BinaryMessage() const
{
	Windows::Devices::Sms::SmsBinaryMessage value = nullptr;
	check_hresult(shim()->get_BinaryMessage(put(value)));
	return value;
}

template <typename T> String impl_ISmsDeviceStatics<T>::GetDeviceSelector() const
{
	String phstrDeviceClassSelector;
	check_hresult(shim()->abi_GetDeviceSelector(put(phstrDeviceClassSelector)));
	return phstrDeviceClassSelector;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> impl_ISmsDeviceStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> asyncInfo;
	check_hresult(shim()->abi_FromIdAsync(get(deviceId), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> impl_ISmsDeviceStatics<T>::GetDefaultAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> asyncInfo;
	check_hresult(shim()->abi_GetDefaultAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> impl_ISmsDeviceStatics2<T>::FromNetworkAccountIdAsync(StringReference const & networkAccountId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> asyncInfo;
	check_hresult(shim()->abi_FromNetworkAccountIdAsync(get(networkAccountId), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Devices::Sms::SendSmsMessageOperation impl_ISmsDevice<T>::SendMessageAsync(Windows::Devices::Sms::ISmsMessage const & message) const
{
	Windows::Devices::Sms::SendSmsMessageOperation asyncInfo = nullptr;
	check_hresult(shim()->abi_SendMessageAsync(get(message), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Devices::Sms::SmsEncodedLength impl_ISmsDevice<T>::CalculateLength(Windows::Devices::Sms::SmsTextMessage const & message) const
{
	Windows::Devices::Sms::SmsEncodedLength encodedLength = {};
	check_hresult(shim()->abi_CalculateLength(get(message), &encodedLength));
	return encodedLength;
}

template <typename T> String impl_ISmsDevice<T>::AccountPhoneNumber() const
{
	String value;
	check_hresult(shim()->get_AccountPhoneNumber(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::CellularClass impl_ISmsDevice<T>::CellularClass() const
{
	Windows::Devices::Sms::CellularClass value = {};
	check_hresult(shim()->get_CellularClass(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDeviceMessageStore impl_ISmsDevice<T>::MessageStore() const
{
	Windows::Devices::Sms::SmsDeviceMessageStore value = nullptr;
	check_hresult(shim()->get_MessageStore(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDeviceStatus impl_ISmsDevice<T>::DeviceStatus() const
{
	Windows::Devices::Sms::SmsDeviceStatus value = {};
	check_hresult(shim()->get_DeviceStatus(&value));
	return value;
}

template <typename T> long long impl_ISmsDevice<T>::SmsMessageReceived(Windows::Devices::Sms::ISmsMessageReceivedEventHandler const & eventHandler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_SmsMessageReceived(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_ISmsDevice<T>::SmsMessageReceived(F eventHandler) const
{
	return SmsMessageReceived(Windows::Devices::Sms::SmsMessageReceivedEventHandler(eventHandler));
}

template <typename T> void impl_ISmsDevice<T>::SmsMessageReceived(long long const eventCookie) const
{
	check_hresult(shim()->remove_SmsMessageReceived(eventCookie));
}

template <typename T> long long impl_ISmsDevice<T>::SmsDeviceStatusChanged(Windows::Devices::Sms::ISmsDeviceStatusChangedEventHandler const & eventHandler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_SmsDeviceStatusChanged(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_ISmsDevice<T>::SmsDeviceStatusChanged(F eventHandler) const
{
	return SmsDeviceStatusChanged(Windows::Devices::Sms::SmsDeviceStatusChangedEventHandler(eventHandler));
}

template <typename T> void impl_ISmsDevice<T>::SmsDeviceStatusChanged(long long const eventCookie) const
{
	check_hresult(shim()->remove_SmsDeviceStatusChanged(eventCookie));
}

template <typename T> String impl_ISmsDevice2Statics<T>::GetDeviceSelector() const
{
	String value;
	check_hresult(shim()->abi_GetDeviceSelector(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDevice2 impl_ISmsDevice2Statics<T>::FromId(StringReference const & deviceId) const
{
	Windows::Devices::Sms::SmsDevice2 value = nullptr;
	check_hresult(shim()->abi_FromId(get(deviceId), put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDevice2 impl_ISmsDevice2Statics<T>::GetDefault() const
{
	Windows::Devices::Sms::SmsDevice2 value = nullptr;
	check_hresult(shim()->abi_GetDefault(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDevice2 impl_ISmsDevice2Statics<T>::FromParentId(StringReference const & parentDeviceId) const
{
	Windows::Devices::Sms::SmsDevice2 value = nullptr;
	check_hresult(shim()->abi_FromParentId(get(parentDeviceId), put(value)));
	return value;
}

template <typename T> String impl_ISmsDevice2<T>::SmscAddress() const
{
	String value;
	check_hresult(shim()->get_SmscAddress(put(value)));
	return value;
}

template <typename T> void impl_ISmsDevice2<T>::SmscAddress(StringReference const & value) const
{
	check_hresult(shim()->put_SmscAddress(get(value)));
}

template <typename T> String impl_ISmsDevice2<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> String impl_ISmsDevice2<T>::ParentDeviceId() const
{
	String value;
	check_hresult(shim()->get_ParentDeviceId(put(value)));
	return value;
}

template <typename T> String impl_ISmsDevice2<T>::AccountPhoneNumber() const
{
	String value;
	check_hresult(shim()->get_AccountPhoneNumber(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::CellularClass impl_ISmsDevice2<T>::CellularClass() const
{
	Windows::Devices::Sms::CellularClass value = {};
	check_hresult(shim()->get_CellularClass(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDeviceStatus impl_ISmsDevice2<T>::DeviceStatus() const
{
	Windows::Devices::Sms::SmsDeviceStatus value = {};
	check_hresult(shim()->get_DeviceStatus(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsEncodedLength impl_ISmsDevice2<T>::CalculateLength(Windows::Devices::Sms::ISmsMessageBase const & message) const
{
	Windows::Devices::Sms::SmsEncodedLength value = {};
	check_hresult(shim()->abi_CalculateLength(get(message), &value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsSendMessageResult> impl_ISmsDevice2<T>::SendMessageAndGetResultAsync(Windows::Devices::Sms::ISmsMessageBase const & message) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsSendMessageResult> asyncInfo;
	check_hresult(shim()->abi_SendMessageAndGetResultAsync(get(message), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> long long impl_ISmsDevice2<T>::DeviceStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sms::SmsDevice2, IInspectable> const & eventHandler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_DeviceStatusChanged(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_ISmsDevice2<T>::DeviceStatusChanged(F eventHandler) const
{
	return DeviceStatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sms::SmsDevice2, IInspectable>(eventHandler));
}

template <typename T> void impl_ISmsDevice2<T>::DeviceStatusChanged(long long const eventCookie) const
{
	check_hresult(shim()->remove_DeviceStatusChanged(eventCookie));
}

template <typename T> String impl_ISmsReceivedEventDetails<T>::DeviceId() const
{
	String value;
	check_hresult(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> unsigned impl_ISmsReceivedEventDetails<T>::MessageIndex() const
{
	unsigned value = {};
	check_hresult(shim()->get_MessageIndex(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsMessageClass impl_ISmsReceivedEventDetails2<T>::MessageClass() const
{
	Windows::Devices::Sms::SmsMessageClass value = {};
	check_hresult(shim()->get_MessageClass(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsBinaryMessage impl_ISmsReceivedEventDetails2<T>::BinaryMessage() const
{
	Windows::Devices::Sms::SmsBinaryMessage value = nullptr;
	check_hresult(shim()->get_BinaryMessage(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsMessageType impl_ISmsMessageReceivedTriggerDetails<T>::MessageType() const
{
	Windows::Devices::Sms::SmsMessageType value = {};
	check_hresult(shim()->get_MessageType(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsTextMessage2 impl_ISmsMessageReceivedTriggerDetails<T>::TextMessage() const
{
	Windows::Devices::Sms::SmsTextMessage2 value = nullptr;
	check_hresult(shim()->get_TextMessage(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsWapMessage impl_ISmsMessageReceivedTriggerDetails<T>::WapMessage() const
{
	Windows::Devices::Sms::SmsWapMessage value = nullptr;
	check_hresult(shim()->get_WapMessage(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsAppMessage impl_ISmsMessageReceivedTriggerDetails<T>::AppMessage() const
{
	Windows::Devices::Sms::SmsAppMessage value = nullptr;
	check_hresult(shim()->get_AppMessage(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsBroadcastMessage impl_ISmsMessageReceivedTriggerDetails<T>::BroadcastMessage() const
{
	Windows::Devices::Sms::SmsBroadcastMessage value = nullptr;
	check_hresult(shim()->get_BroadcastMessage(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsVoicemailMessage impl_ISmsMessageReceivedTriggerDetails<T>::VoicemailMessage() const
{
	Windows::Devices::Sms::SmsVoicemailMessage value = nullptr;
	check_hresult(shim()->get_VoicemailMessage(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsStatusMessage impl_ISmsMessageReceivedTriggerDetails<T>::StatusMessage() const
{
	Windows::Devices::Sms::SmsStatusMessage value = nullptr;
	check_hresult(shim()->get_StatusMessage(put(value)));
	return value;
}

template <typename T> void impl_ISmsMessageReceivedTriggerDetails<T>::Drop() const
{
	check_hresult(shim()->abi_Drop());
}

template <typename T> void impl_ISmsMessageReceivedTriggerDetails<T>::Accept() const
{
	check_hresult(shim()->abi_Accept());
}

template <typename T> Windows::Devices::Sms::SmsMessageType impl_ISmsFilterRule<T>::MessageType() const
{
	Windows::Devices::Sms::SmsMessageType value = {};
	check_hresult(shim()->get_MessageType(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ISmsFilterRule<T>::ImsiPrefixes() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_ImsiPrefixes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ISmsFilterRule<T>::DeviceIds() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_DeviceIds(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ISmsFilterRule<T>::SenderNumbers() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_SenderNumbers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ISmsFilterRule<T>::TextMessagePrefixes() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_TextMessagePrefixes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<int> impl_ISmsFilterRule<T>::PortNumbers() const
{
	Windows::Foundation::Collections::IVector<int> value;
	check_hresult(shim()->get_PortNumbers(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::CellularClass impl_ISmsFilterRule<T>::CellularClass() const
{
	Windows::Devices::Sms::CellularClass value = {};
	check_hresult(shim()->get_CellularClass(&value));
	return value;
}

template <typename T> void impl_ISmsFilterRule<T>::CellularClass(Windows::Devices::Sms::CellularClass const value) const
{
	check_hresult(shim()->put_CellularClass(value));
}

template <typename T> Windows::Foundation::Collections::IVector<int> impl_ISmsFilterRule<T>::ProtocolIds() const
{
	Windows::Foundation::Collections::IVector<int> value;
	check_hresult(shim()->get_ProtocolIds(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<int> impl_ISmsFilterRule<T>::TeleserviceIds() const
{
	Windows::Foundation::Collections::IVector<int> value;
	check_hresult(shim()->get_TeleserviceIds(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ISmsFilterRule<T>::WapApplicationIds() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_WapApplicationIds(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ISmsFilterRule<T>::WapContentTypes() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_WapContentTypes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Sms::SmsBroadcastType> impl_ISmsFilterRule<T>::BroadcastTypes() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Sms::SmsBroadcastType> value;
	check_hresult(shim()->get_BroadcastTypes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<int> impl_ISmsFilterRule<T>::BroadcastChannels() const
{
	Windows::Foundation::Collections::IVector<int> value;
	check_hresult(shim()->get_BroadcastChannels(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsFilterRule impl_ISmsFilterRuleFactory<T>::CreateFilterRule(Windows::Devices::Sms::SmsMessageType const messageType) const
{
	Windows::Devices::Sms::SmsFilterRule value = nullptr;
	check_hresult(shim()->abi_CreateFilterRule(messageType, put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsFilterActionType impl_ISmsFilterRules<T>::ActionType() const
{
	Windows::Devices::Sms::SmsFilterActionType value = {};
	check_hresult(shim()->get_ActionType(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Devices::Sms::SmsFilterRule> impl_ISmsFilterRules<T>::Rules() const
{
	Windows::Foundation::Collections::IVector<Windows::Devices::Sms::SmsFilterRule> value;
	check_hresult(shim()->get_Rules(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsFilterRules impl_ISmsFilterRulesFactory<T>::CreateFilterRules(Windows::Devices::Sms::SmsFilterActionType const actionType) const
{
	Windows::Devices::Sms::SmsFilterRules value = nullptr;
	check_hresult(shim()->abi_CreateFilterRules(actionType, put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::SmsMessageRegistration> impl_ISmsMessageRegistrationStatics<T>::AllRegistrations() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::SmsMessageRegistration> value;
	check_hresult(shim()->get_AllRegistrations(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsMessageRegistration impl_ISmsMessageRegistrationStatics<T>::Register(StringReference const & id, Windows::Devices::Sms::SmsFilterRules const & filterRules) const
{
	Windows::Devices::Sms::SmsMessageRegistration value = nullptr;
	check_hresult(shim()->abi_Register(get(id), get(filterRules), put(value)));
	return value;
}

template <typename T> String impl_ISmsMessageRegistration<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_ISmsMessageRegistration<T>::Unregister() const
{
	check_hresult(shim()->abi_Unregister());
}

template <typename T> long long impl_ISmsMessageRegistration<T>::MessageReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sms::SmsMessageRegistration, Windows::Devices::Sms::SmsMessageReceivedTriggerDetails> const & eventHandler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_MessageReceived(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_ISmsMessageRegistration<T>::MessageReceived(F eventHandler) const
{
	return MessageReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::Sms::SmsMessageRegistration, Windows::Devices::Sms::SmsMessageReceivedTriggerDetails>(eventHandler));
}

template <typename T> void impl_ISmsMessageRegistration<T>::MessageReceived(long long const eventCookie) const
{
	check_hresult(shim()->remove_MessageReceived(eventCookie));
}

}}}}

namespace winrt { namespace Windows { namespace Foundation {

template <typename T> void impl_IAsyncActionCompletedHandler<T>::Invoke(Windows::Foundation::IAsyncAction const & asyncInfo, AsyncStatus const asyncStatus) const
{
	check_hresult(shim()->abi_Invoke(get(asyncInfo), asyncStatus));
}

template <typename T> void impl_IDeferralCompletedHandler<T>::Invoke() const
{
	check_hresult(shim()->abi_Invoke());
}

template <typename T> String impl_IUriRuntimeClass<T>::AbsoluteUri() const
{
	String value;
	check_hresult(shim()->get_AbsoluteUri(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::DisplayUri() const
{
	String value;
	check_hresult(shim()->get_DisplayUri(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Domain() const
{
	String value;
	check_hresult(shim()->get_Domain(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Extension() const
{
	String value;
	check_hresult(shim()->get_Extension(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Fragment() const
{
	String value;
	check_hresult(shim()->get_Fragment(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Host() const
{
	String value;
	check_hresult(shim()->get_Host(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Password() const
{
	String value;
	check_hresult(shim()->get_Password(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Path() const
{
	String value;
	check_hresult(shim()->get_Path(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Query() const
{
	String value;
	check_hresult(shim()->get_Query(put(value)));
	return value;
}

template <typename T> Windows::Foundation::WwwFormUrlDecoder impl_IUriRuntimeClass<T>::QueryParsed() const
{
	Windows::Foundation::WwwFormUrlDecoder ppWwwFormUrlDecoder = nullptr;
	check_hresult(shim()->get_QueryParsed(put(ppWwwFormUrlDecoder)));
	return ppWwwFormUrlDecoder;
}

template <typename T> String impl_IUriRuntimeClass<T>::RawUri() const
{
	String value;
	check_hresult(shim()->get_RawUri(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::SchemeName() const
{
	String value;
	check_hresult(shim()->get_SchemeName(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::UserName() const
{
	String value;
	check_hresult(shim()->get_UserName(put(value)));
	return value;
}

template <typename T> int impl_IUriRuntimeClass<T>::Port() const
{
	int value = {};
	check_hresult(shim()->get_Port(&value));
	return value;
}

template <typename T> bool impl_IUriRuntimeClass<T>::Suspicious() const
{
	bool value = {};
	check_hresult(shim()->get_Suspicious(put(value)));
	return value;
}

template <typename T> bool impl_IUriRuntimeClass<T>::Equals(Windows::Foundation::Uri const & pUri) const
{
	bool value = {};
	check_hresult(shim()->abi_Equals(get(pUri), put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IUriRuntimeClass<T>::CombineUri(StringReference const & relativeUri) const
{
	Windows::Foundation::Uri instance = nullptr;
	check_hresult(shim()->abi_CombineUri(get(relativeUri), put(instance)));
	return instance;
}

template <typename T> String impl_IUriRuntimeClassWithAbsoluteCanonicalUri<T>::AbsoluteCanonicalUri() const
{
	String value;
	check_hresult(shim()->get_AbsoluteCanonicalUri(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClassWithAbsoluteCanonicalUri<T>::DisplayIri() const
{
	String value;
	check_hresult(shim()->get_DisplayIri(put(value)));
	return value;
}

template <typename T> String impl_IUriEscapeStatics<T>::UnescapeComponent(StringReference const & toUnescape) const
{
	String value;
	check_hresult(shim()->abi_UnescapeComponent(get(toUnescape), put(value)));
	return value;
}

template <typename T> String impl_IUriEscapeStatics<T>::EscapeComponent(StringReference const & toEscape) const
{
	String value;
	check_hresult(shim()->abi_EscapeComponent(get(toEscape), put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IUriRuntimeClassFactory<T>::CreateUri(StringReference const & uri) const
{
	Windows::Foundation::Uri instance = nullptr;
	check_hresult(shim()->abi_CreateUri(get(uri), put(instance)));
	return instance;
}

template <typename T> Windows::Foundation::Uri impl_IUriRuntimeClassFactory<T>::CreateWithRelativeUri(StringReference const & baseUri, StringReference const & relativeUri) const
{
	Windows::Foundation::Uri instance = nullptr;
	check_hresult(shim()->abi_CreateWithRelativeUri(get(baseUri), get(relativeUri), put(instance)));
	return instance;
}

template <typename T> String impl_IWwwFormUrlDecoderEntry<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IWwwFormUrlDecoderEntry<T>::Value() const
{
	String value;
	check_hresult(shim()->get_Value(put(value)));
	return value;
}

template <typename T> String impl_IWwwFormUrlDecoderRuntimeClass<T>::GetFirstValueByName(StringReference const & name) const
{
	String phstrValue;
	check_hresult(shim()->abi_GetFirstValueByName(get(name), put(phstrValue)));
	return phstrValue;
}

template <typename T> Windows::Foundation::WwwFormUrlDecoder impl_IWwwFormUrlDecoderRuntimeClassFactory<T>::CreateWwwFormUrlDecoder(StringReference const & query) const
{
	Windows::Foundation::WwwFormUrlDecoder instance = nullptr;
	check_hresult(shim()->abi_CreateWwwFormUrlDecoder(get(query), put(instance)));
	return instance;
}

template <typename T> IInspectable impl_IGetActivationFactory<T>::GetActivationFactory(StringReference const & activatableClassId) const
{
	IInspectable factory;
	check_hresult(shim()->abi_GetActivationFactory(get(activatableClassId), put(factory)));
	return factory;
}

template <typename T> void impl_IClosable<T>::Close() const
{
	check_hresult(shim()->abi_Close());
}

template <typename T> Windows::Foundation::PropertyType impl_IPropertyValue<T>::Type() const
{
	Windows::Foundation::PropertyType value = {};
	check_hresult(shim()->get_Type(&value));
	return value;
}

template <typename T> bool impl_IPropertyValue<T>::IsNumericScalar() const
{
	bool value = {};
	check_hresult(shim()->get_IsNumericScalar(put(value)));
	return value;
}

template <typename T> byte impl_IPropertyValue<T>::GetUInt8() const
{
	byte value = {};
	check_hresult(shim()->abi_GetUInt8(&value));
	return value;
}

template <typename T> short impl_IPropertyValue<T>::GetInt16() const
{
	short value = {};
	check_hresult(shim()->abi_GetInt16(&value));
	return value;
}

template <typename T> unsigned short impl_IPropertyValue<T>::GetUInt16() const
{
	unsigned short value = {};
	check_hresult(shim()->abi_GetUInt16(&value));
	return value;
}

template <typename T> int impl_IPropertyValue<T>::GetInt32() const
{
	int value = {};
	check_hresult(shim()->abi_GetInt32(&value));
	return value;
}

template <typename T> unsigned impl_IPropertyValue<T>::GetUInt32() const
{
	unsigned value = {};
	check_hresult(shim()->abi_GetUInt32(&value));
	return value;
}

template <typename T> long long impl_IPropertyValue<T>::GetInt64() const
{
	long long value = {};
	check_hresult(shim()->abi_GetInt64(&value));
	return value;
}

template <typename T> unsigned long long impl_IPropertyValue<T>::GetUInt64() const
{
	unsigned long long value = {};
	check_hresult(shim()->abi_GetUInt64(&value));
	return value;
}

template <typename T> float impl_IPropertyValue<T>::GetSingle() const
{
	float value = {};
	check_hresult(shim()->abi_GetSingle(&value));
	return value;
}

template <typename T> double impl_IPropertyValue<T>::GetDouble() const
{
	double value = {};
	check_hresult(shim()->abi_GetDouble(&value));
	return value;
}

template <typename T> wchar_t impl_IPropertyValue<T>::GetChar16() const
{
	wchar_t value = {};
	check_hresult(shim()->abi_GetChar16(&value));
	return value;
}

template <typename T> bool impl_IPropertyValue<T>::GetBoolean() const
{
	bool value = {};
	check_hresult(shim()->abi_GetBoolean(put(value)));
	return value;
}

template <typename T> String impl_IPropertyValue<T>::GetString() const
{
	String value;
	check_hresult(shim()->abi_GetString(put(value)));
	return value;
}

template <typename T> GUID impl_IPropertyValue<T>::GetGuid() const
{
	GUID value = {};
	check_hresult(shim()->abi_GetGuid(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPropertyValue<T>::GetDateTime() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->abi_GetDateTime(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPropertyValue<T>::GetTimeSpan() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->abi_GetTimeSpan(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IPropertyValue<T>::GetPoint() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->abi_GetPoint(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IPropertyValue<T>::GetSize() const
{
	Windows::Foundation::Size value = {};
	check_hresult(shim()->abi_GetSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPropertyValue<T>::GetRect() const
{
	Windows::Foundation::Rect value = {};
	check_hresult(shim()->abi_GetRect(&value));
	return value;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateEmpty() const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateEmpty(put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateUInt8(byte const value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateUInt8(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateInt16(short const value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateInt16(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateUInt16(unsigned short const value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateUInt16(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateInt32(int const value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateInt32(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateUInt32(unsigned const value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateUInt32(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateInt64(long long const value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateInt64(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateUInt64(unsigned long long const value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateUInt64(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateSingle(float const value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateSingle(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateDouble(double const value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateDouble(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateChar16(wchar_t const value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateChar16(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateBoolean(bool const value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateBoolean(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateString(StringReference const & value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateString(get(value), put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateInspectable(IInspectable const & value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateInspectable(get(value), put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateGuid(GUID const value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateGuid(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateDateTime(Windows::Foundation::DateTime const & value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateDateTime(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateTimeSpan(Windows::Foundation::TimeSpan const & value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateTimeSpan(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreatePoint(Windows::Foundation::Point const & value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreatePoint(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateSize(Windows::Foundation::Size const & value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateSize(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateRect(Windows::Foundation::Rect const & value) const
{
	IInspectable propertyValue;
	check_hresult(shim()->abi_CreateRect(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> String impl_IStringable<T>::ToString() const
{
	String value;
	check_hresult(shim()->abi_ToString(put(value)));
	return value;
}

template <typename T> void impl_IDeferral<T>::Complete() const
{
	check_hresult(shim()->abi_Complete());
}

template <typename T> Windows::Foundation::Deferral impl_IDeferralFactory<T>::Create(Windows::Foundation::IDeferralCompletedHandler const & handler) const
{
	Windows::Foundation::Deferral result = nullptr;
	check_hresult(shim()->abi_Create(get(handler), put(result)));
	return result;
}

template <typename T> template <typename F> Windows::Foundation::Deferral impl_IDeferralFactory<T>::Create(F handler) const
{
	return Create(Windows::Foundation::DeferralCompletedHandler(handler));
}

template <typename T> unsigned impl_IMemoryBufferReference<T>::Capacity() const
{
	unsigned value = {};
	check_hresult(shim()->get_Capacity(&value));
	return value;
}

template <typename T> long long impl_IMemoryBufferReference<T>::Closed(Windows::Foundation::ITypedEventHandler<Windows::Foundation::IMemoryBufferReference, IInspectable> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_Closed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMemoryBufferReference<T>::Closed(F handler) const
{
	return Closed(Windows::Foundation::TypedEventHandler<Windows::Foundation::IMemoryBufferReference, IInspectable>(handler));
}

template <typename T> void impl_IMemoryBufferReference<T>::Closed(long long const cookie) const
{
	check_hresult(shim()->remove_Closed(cookie));
}

template <typename T> Windows::Foundation::IMemoryBufferReference impl_IMemoryBuffer<T>::CreateReference() const
{
	Windows::Foundation::IMemoryBufferReference reference;
	check_hresult(shim()->abi_CreateReference(put(reference)));
	return reference;
}

template <typename T> Windows::Foundation::MemoryBuffer impl_IMemoryBufferFactory<T>::Create(unsigned const capacity) const
{
	Windows::Foundation::MemoryBuffer value = nullptr;
	check_hresult(shim()->abi_Create(capacity, put(value)));
	return value;
}

template <typename T> void impl_IAsyncAction<T>::Completed(Windows::Foundation::IAsyncActionCompletedHandler const & handler) const
{
	check_hresult(shim()->put_Completed(get(handler)));
}

template <typename T> template <typename F> void impl_IAsyncAction<T>::Completed(F handler) const
{
	Completed(Windows::Foundation::AsyncActionCompletedHandler(handler));
}

template <typename T> Windows::Foundation::IAsyncActionCompletedHandler impl_IAsyncAction<T>::Completed() const
{
	Windows::Foundation::IAsyncActionCompletedHandler handler = {};
	check_hresult(shim()->get_Completed(put(handler)));
	return handler;
}

template <typename T> void impl_IAsyncAction<T>::GetResults() const
{
	check_hresult(shim()->abi_GetResults());
}

}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Collections {

}}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Diagnostics {

template <typename T> bool impl_ITracingStatusChangedEventArgs<T>::Enabled() const
{
	bool enabled = {};
	check_hresult(shim()->get_Enabled(put(enabled)));
	return enabled;
}

template <typename T> Windows::Foundation::Diagnostics::CausalityTraceLevel impl_ITracingStatusChangedEventArgs<T>::TraceLevel() const
{
	Windows::Foundation::Diagnostics::CausalityTraceLevel value = {};
	check_hresult(shim()->get_TraceLevel(&value));
	return value;
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, StringReference const & operationName, unsigned long long const relatedContext) const
{
	check_hresult(shim()->abi_TraceOperationCreation(traceLevel, source, platformId, operationId, get(operationName), relatedContext));
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TraceOperationCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, AsyncStatus const status) const
{
	check_hresult(shim()->abi_TraceOperationCompletion(traceLevel, source, platformId, operationId, status));
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TraceOperationRelation(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, Windows::Foundation::Diagnostics::CausalityRelation const relation) const
{
	check_hresult(shim()->abi_TraceOperationRelation(traceLevel, source, platformId, operationId, relation));
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TraceSynchronousWorkStart(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, Windows::Foundation::Diagnostics::CausalitySynchronousWork const work) const
{
	check_hresult(shim()->abi_TraceSynchronousWorkStart(traceLevel, source, platformId, operationId, work));
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TraceSynchronousWorkCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, Windows::Foundation::Diagnostics::CausalitySynchronousWork const work) const
{
	check_hresult(shim()->abi_TraceSynchronousWorkCompletion(traceLevel, source, work));
}

template <typename T> long long impl_IAsyncCausalityTracerStatics<T>::TracingStatusChanged(Windows::Foundation::IEventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_TracingStatusChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IAsyncCausalityTracerStatics<T>::TracingStatusChanged(F handler) const
{
	return TracingStatusChanged(Windows::Foundation::EventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs>(handler));
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TracingStatusChanged(long long const cookie) const
{
	check_hresult(shim()->remove_TracingStatusChanged(cookie));
}

template <typename T> void impl_IErrorReportingSettings<T>::SetErrorOptions(Windows::Foundation::Diagnostics::ErrorOptions const value) const
{
	check_hresult(shim()->abi_SetErrorOptions(value));
}

template <typename T> Windows::Foundation::Diagnostics::ErrorOptions impl_IErrorReportingSettings<T>::GetErrorOptions() const
{
	Windows::Foundation::Diagnostics::ErrorOptions value = {};
	check_hresult(shim()->abi_GetErrorOptions(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Diagnostics::ErrorDetails> impl_IErrorDetailsStatics<T>::CreateFromHResultAsync(int const errorCode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Diagnostics::ErrorDetails> operation;
	check_hresult(shim()->abi_CreateFromHResultAsync(errorCode, put(operation)));
	return operation;
}

template <typename T> String impl_IErrorDetails<T>::Description() const
{
	String value;
	check_hresult(shim()->get_Description(put(value)));
	return value;
}

template <typename T> String impl_IErrorDetails<T>::LongDescription() const
{
	String value;
	check_hresult(shim()->get_LongDescription(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IErrorDetails<T>::HelpUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_HelpUri(put(value)));
	return value;
}

template <typename T> long long impl_ILoggingOptions<T>::Keywords() const
{
	long long value = {};
	check_hresult(shim()->get_Keywords(&value));
	return value;
}

template <typename T> void impl_ILoggingOptions<T>::Keywords(long long const value) const
{
	check_hresult(shim()->put_Keywords(value));
}

template <typename T> int impl_ILoggingOptions<T>::Tags() const
{
	int value = {};
	check_hresult(shim()->get_Tags(&value));
	return value;
}

template <typename T> void impl_ILoggingOptions<T>::Tags(int const value) const
{
	check_hresult(shim()->put_Tags(value));
}

template <typename T> short impl_ILoggingOptions<T>::Task() const
{
	short value = {};
	check_hresult(shim()->get_Task(&value));
	return value;
}

template <typename T> void impl_ILoggingOptions<T>::Task(short const value) const
{
	check_hresult(shim()->put_Task(value));
}

template <typename T> Windows::Foundation::Diagnostics::LoggingOpcode impl_ILoggingOptions<T>::Opcode() const
{
	Windows::Foundation::Diagnostics::LoggingOpcode value = {};
	check_hresult(shim()->get_Opcode(&value));
	return value;
}

template <typename T> void impl_ILoggingOptions<T>::Opcode(Windows::Foundation::Diagnostics::LoggingOpcode const value) const
{
	check_hresult(shim()->put_Opcode(value));
}

template <typename T> GUID impl_ILoggingOptions<T>::ActivityId() const
{
	GUID value = {};
	check_hresult(shim()->get_ActivityId(&value));
	return value;
}

template <typename T> void impl_ILoggingOptions<T>::ActivityId(GUID const value) const
{
	check_hresult(shim()->put_ActivityId(value));
}

template <typename T> GUID impl_ILoggingOptions<T>::RelatedActivityId() const
{
	GUID value = {};
	check_hresult(shim()->get_RelatedActivityId(&value));
	return value;
}

template <typename T> void impl_ILoggingOptions<T>::RelatedActivityId(GUID const value) const
{
	check_hresult(shim()->put_RelatedActivityId(value));
}

template <typename T> Windows::Foundation::Diagnostics::LoggingOptions impl_ILoggingOptionsFactory<T>::CreateWithKeywords(long long const keywords) const
{
	Windows::Foundation::Diagnostics::LoggingOptions result = nullptr;
	check_hresult(shim()->abi_CreateWithKeywords(keywords, put(result)));
	return result;
}

template <typename T> GUID impl_ILoggingChannelOptions<T>::Group() const
{
	GUID value = {};
	check_hresult(shim()->get_Group(&value));
	return value;
}

template <typename T> void impl_ILoggingChannelOptions<T>::Group(GUID const value) const
{
	check_hresult(shim()->put_Group(value));
}

template <typename T> Windows::Foundation::Diagnostics::LoggingChannelOptions impl_ILoggingChannelOptionsFactory<T>::Create(GUID const group) const
{
	Windows::Foundation::Diagnostics::LoggingChannelOptions result = nullptr;
	check_hresult(shim()->abi_Create(group, put(result)));
	return result;
}

template <typename T> void impl_ILoggingFields<T>::Clear() const
{
	check_hresult(shim()->abi_Clear());
}

template <typename T> void impl_ILoggingFields<T>::BeginStruct(StringReference const & name) const
{
	check_hresult(shim()->abi_BeginStruct(get(name)));
}

template <typename T> void impl_ILoggingFields<T>::BeginStruct(StringReference const & name, int const tags) const
{
	check_hresult(shim()->abi_BeginStructWithTags(get(name), tags));
}

template <typename T> void impl_ILoggingFields<T>::EndStruct() const
{
	check_hresult(shim()->abi_EndStruct());
}

template <typename T> void impl_ILoggingFields<T>::AddEmpty(StringReference const & name) const
{
	check_hresult(shim()->abi_AddEmpty(get(name)));
}

template <typename T> void impl_ILoggingFields<T>::AddEmpty(StringReference const & name, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddEmptyWithFormat(get(name), format));
}

template <typename T> void impl_ILoggingFields<T>::AddEmpty(StringReference const & name, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddEmptyWithFormatAndTags(get(name), format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt8(StringReference const & name, byte const value) const
{
	check_hresult(shim()->abi_AddUInt8(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt8(StringReference const & name, byte const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddUInt8WithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt8(StringReference const & name, byte const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddUInt8WithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddInt16(StringReference const & name, short const value) const
{
	check_hresult(shim()->abi_AddInt16(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddInt16(StringReference const & name, short const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddInt16WithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddInt16(StringReference const & name, short const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddInt16WithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt16(StringReference const & name, unsigned short const value) const
{
	check_hresult(shim()->abi_AddUInt16(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt16(StringReference const & name, unsigned short const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddUInt16WithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt16(StringReference const & name, unsigned short const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddUInt16WithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddInt32(StringReference const & name, int const value) const
{
	check_hresult(shim()->abi_AddInt32(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddInt32(StringReference const & name, int const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddInt32WithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddInt32(StringReference const & name, int const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddInt32WithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt32(StringReference const & name, unsigned const value) const
{
	check_hresult(shim()->abi_AddUInt32(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt32(StringReference const & name, unsigned const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddUInt32WithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt32(StringReference const & name, unsigned const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddUInt32WithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddInt64(StringReference const & name, long long const value) const
{
	check_hresult(shim()->abi_AddInt64(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddInt64(StringReference const & name, long long const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddInt64WithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddInt64(StringReference const & name, long long const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddInt64WithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt64(StringReference const & name, unsigned long long const value) const
{
	check_hresult(shim()->abi_AddUInt64(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt64(StringReference const & name, unsigned long long const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddUInt64WithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt64(StringReference const & name, unsigned long long const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddUInt64WithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddSingle(StringReference const & name, float const value) const
{
	check_hresult(shim()->abi_AddSingle(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddSingle(StringReference const & name, float const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddSingleWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddSingle(StringReference const & name, float const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddSingleWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddDouble(StringReference const & name, double const value) const
{
	check_hresult(shim()->abi_AddDouble(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddDouble(StringReference const & name, double const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddDoubleWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddDouble(StringReference const & name, double const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddDoubleWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddChar16(StringReference const & name, wchar_t const value) const
{
	check_hresult(shim()->abi_AddChar16(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddChar16(StringReference const & name, wchar_t const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddChar16WithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddChar16(StringReference const & name, wchar_t const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddChar16WithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddBoolean(StringReference const & name, bool const value) const
{
	check_hresult(shim()->abi_AddBoolean(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddBoolean(StringReference const & name, bool const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddBooleanWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddBoolean(StringReference const & name, bool const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddBooleanWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddString(StringReference const & name, StringReference const & value) const
{
	check_hresult(shim()->abi_AddString(get(name), get(value)));
}

template <typename T> void impl_ILoggingFields<T>::AddString(StringReference const & name, StringReference const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddStringWithFormat(get(name), get(value), format));
}

template <typename T> void impl_ILoggingFields<T>::AddString(StringReference const & name, StringReference const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddStringWithFormatAndTags(get(name), get(value), format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddGuid(StringReference const & name, GUID const value) const
{
	check_hresult(shim()->abi_AddGuid(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddGuid(StringReference const & name, GUID const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddGuidWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddGuid(StringReference const & name, GUID const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddGuidWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddDateTime(StringReference const & name, Windows::Foundation::DateTime const & value) const
{
	check_hresult(shim()->abi_AddDateTime(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddDateTime(StringReference const & name, Windows::Foundation::DateTime const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddDateTimeWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddDateTime(StringReference const & name, Windows::Foundation::DateTime const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddDateTimeWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddTimeSpan(StringReference const & name, Windows::Foundation::TimeSpan const & value) const
{
	check_hresult(shim()->abi_AddTimeSpan(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddTimeSpan(StringReference const & name, Windows::Foundation::TimeSpan const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddTimeSpanWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddTimeSpan(StringReference const & name, Windows::Foundation::TimeSpan const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddTimeSpanWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddPoint(StringReference const & name, Windows::Foundation::Point const & value) const
{
	check_hresult(shim()->abi_AddPoint(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddPoint(StringReference const & name, Windows::Foundation::Point const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddPointWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddPoint(StringReference const & name, Windows::Foundation::Point const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddPointWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddSize(StringReference const & name, Windows::Foundation::Size const & value) const
{
	check_hresult(shim()->abi_AddSize(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddSize(StringReference const & name, Windows::Foundation::Size const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddSizeWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddSize(StringReference const & name, Windows::Foundation::Size const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddSizeWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddRect(StringReference const & name, Windows::Foundation::Rect const & value) const
{
	check_hresult(shim()->abi_AddRect(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddRect(StringReference const & name, Windows::Foundation::Rect const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check_hresult(shim()->abi_AddRectWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddRect(StringReference const & name, Windows::Foundation::Rect const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check_hresult(shim()->abi_AddRectWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> bool impl_ILoggingTarget<T>::IsEnabled() const
{
	bool result = {};
	check_hresult(shim()->abi_IsEnabled(put(result)));
	return result;
}

template <typename T> bool impl_ILoggingTarget<T>::IsEnabled(Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	bool result = {};
	check_hresult(shim()->abi_IsEnabledWithLevel(level, put(result)));
	return result;
}

template <typename T> bool impl_ILoggingTarget<T>::IsEnabled(Windows::Foundation::Diagnostics::LoggingLevel const level, long long const keywords) const
{
	bool result = {};
	check_hresult(shim()->abi_IsEnabledWithLevelAndKeywords(level, keywords, put(result)));
	return result;
}

template <typename T> void impl_ILoggingTarget<T>::LogEvent(StringReference const & eventName) const
{
	check_hresult(shim()->abi_LogEvent(get(eventName)));
}

template <typename T> void impl_ILoggingTarget<T>::LogEvent(StringReference const & eventName, Windows::Foundation::Diagnostics::LoggingFields const & fields) const
{
	check_hresult(shim()->abi_LogEventWithFields(get(eventName), get(fields)));
}

template <typename T> void impl_ILoggingTarget<T>::LogEvent(StringReference const & eventName, Windows::Foundation::Diagnostics::LoggingFields const & fields, Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	check_hresult(shim()->abi_LogEventWithFieldsAndLevel(get(eventName), get(fields), level));
}

template <typename T> void impl_ILoggingTarget<T>::LogEvent(StringReference const & eventName, Windows::Foundation::Diagnostics::LoggingFields const & fields, Windows::Foundation::Diagnostics::LoggingLevel const level, Windows::Foundation::Diagnostics::LoggingOptions const & options) const
{
	check_hresult(shim()->abi_LogEventWithFieldsAndOptions(get(eventName), get(fields), level, get(options)));
}

template <typename T> Windows::Foundation::Diagnostics::LoggingActivity impl_ILoggingTarget<T>::StartActivity(StringReference const & startEventName) const
{
	Windows::Foundation::Diagnostics::LoggingActivity result = nullptr;
	check_hresult(shim()->abi_StartActivity(get(startEventName), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingActivity impl_ILoggingTarget<T>::StartActivity(StringReference const & startEventName, Windows::Foundation::Diagnostics::LoggingFields const & fields) const
{
	Windows::Foundation::Diagnostics::LoggingActivity result = nullptr;
	check_hresult(shim()->abi_StartActivityWithFields(get(startEventName), get(fields), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingActivity impl_ILoggingTarget<T>::StartActivity(StringReference const & startEventName, Windows::Foundation::Diagnostics::LoggingFields const & fields, Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	Windows::Foundation::Diagnostics::LoggingActivity result = nullptr;
	check_hresult(shim()->abi_StartActivityWithFieldsAndLevel(get(startEventName), get(fields), level, put(result)));
	return result;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingActivity impl_ILoggingTarget<T>::StartActivity(StringReference const & startEventName, Windows::Foundation::Diagnostics::LoggingFields const & fields, Windows::Foundation::Diagnostics::LoggingLevel const level, Windows::Foundation::Diagnostics::LoggingOptions const & options) const
{
	Windows::Foundation::Diagnostics::LoggingActivity result = nullptr;
	check_hresult(shim()->abi_StartActivityWithFieldsAndOptions(get(startEventName), get(fields), level, get(options), put(result)));
	return result;
}

template <typename T> String impl_ILoggingChannel<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> bool impl_ILoggingChannel<T>::Enabled() const
{
	bool value = {};
	check_hresult(shim()->get_Enabled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingLevel impl_ILoggingChannel<T>::Level() const
{
	Windows::Foundation::Diagnostics::LoggingLevel value = {};
	check_hresult(shim()->get_Level(&value));
	return value;
}

template <typename T> void impl_ILoggingChannel<T>::LogMessage(StringReference const & eventString) const
{
	check_hresult(shim()->abi_LogMessage(get(eventString)));
}

template <typename T> void impl_ILoggingChannel<T>::LogMessage(StringReference const & eventString, Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	check_hresult(shim()->abi_LogMessageWithLevel(get(eventString), level));
}

template <typename T> void impl_ILoggingChannel<T>::LogValuePair(StringReference const & value1, int const value2) const
{
	check_hresult(shim()->abi_LogValuePair(get(value1), value2));
}

template <typename T> void impl_ILoggingChannel<T>::LogValuePair(StringReference const & value1, int const value2, Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	check_hresult(shim()->abi_LogValuePairWithLevel(get(value1), value2, level));
}

template <typename T> long long impl_ILoggingChannel<T>::LoggingEnabled(Windows::Foundation::ITypedEventHandler<Windows::Foundation::Diagnostics::ILoggingChannel, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_LoggingEnabled(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ILoggingChannel<T>::LoggingEnabled(F handler) const
{
	return LoggingEnabled(Windows::Foundation::TypedEventHandler<Windows::Foundation::Diagnostics::ILoggingChannel, IInspectable>(handler));
}

template <typename T> void impl_ILoggingChannel<T>::LoggingEnabled(long long const token) const
{
	check_hresult(shim()->remove_LoggingEnabled(token));
}

template <typename T> GUID impl_ILoggingChannel2<T>::Id() const
{
	GUID value = {};
	check_hresult(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingChannel impl_ILoggingChannelFactory<T>::Create(StringReference const & name) const
{
	Windows::Foundation::Diagnostics::LoggingChannel result = nullptr;
	check_hresult(shim()->abi_Create(get(name), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingChannel impl_ILoggingChannelFactory2<T>::CreateWithOptions(StringReference const & name, Windows::Foundation::Diagnostics::LoggingChannelOptions const & options) const
{
	Windows::Foundation::Diagnostics::LoggingChannel result = nullptr;
	check_hresult(shim()->abi_CreateWithOptions(get(name), get(options), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingChannel impl_ILoggingChannelFactory2<T>::CreateWithOptionsAndId(StringReference const & name, Windows::Foundation::Diagnostics::LoggingChannelOptions const & options, GUID const id) const
{
	Windows::Foundation::Diagnostics::LoggingChannel result = nullptr;
	check_hresult(shim()->abi_CreateWithOptionsAndId(get(name), get(options), id, put(result)));
	return result;
}

template <typename T> String impl_ILoggingActivity<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> GUID impl_ILoggingActivity<T>::Id() const
{
	GUID value = {};
	check_hresult(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingChannel impl_ILoggingActivity2<T>::Channel() const
{
	Windows::Foundation::Diagnostics::LoggingChannel value = nullptr;
	check_hresult(shim()->get_Channel(put(value)));
	return value;
}

template <typename T> void impl_ILoggingActivity2<T>::StopActivity(StringReference const & stopEventName) const
{
	check_hresult(shim()->abi_StopActivity(get(stopEventName)));
}

template <typename T> void impl_ILoggingActivity2<T>::StopActivity(StringReference const & stopEventName, Windows::Foundation::Diagnostics::LoggingFields const & fields) const
{
	check_hresult(shim()->abi_StopActivityWithFields(get(stopEventName), get(fields)));
}

template <typename T> void impl_ILoggingActivity2<T>::StopActivity(StringReference const & stopEventName, Windows::Foundation::Diagnostics::LoggingFields const & fields, Windows::Foundation::Diagnostics::LoggingOptions const & options) const
{
	check_hresult(shim()->abi_StopActivityWithFieldsAndOptions(get(stopEventName), get(fields), get(options)));
}

template <typename T> Windows::Foundation::Diagnostics::LoggingActivity impl_ILoggingActivityFactory<T>::CreateLoggingActivity(StringReference const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const
{
	Windows::Foundation::Diagnostics::LoggingActivity loggingActivity = nullptr;
	check_hresult(shim()->abi_CreateLoggingActivity(get(activityName), get(loggingChannel), put(loggingActivity)));
	return loggingActivity;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingActivity impl_ILoggingActivityFactory<T>::CreateLoggingActivityWithLevel(StringReference const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	Windows::Foundation::Diagnostics::LoggingActivity loggingActivity = nullptr;
	check_hresult(shim()->abi_CreateLoggingActivityWithLevel(get(activityName), get(loggingChannel), level, put(loggingActivity)));
	return loggingActivity;
}

template <typename T> String impl_ILoggingSession<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_ILoggingSession<T>::SaveToFileAsync(Windows::Storage::IStorageFolder const & folder, StringReference const & fileName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_SaveToFileAsync(get(folder), get(fileName), put(operation)));
	return operation;
}

template <typename T> void impl_ILoggingSession<T>::AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const
{
	check_hresult(shim()->abi_AddLoggingChannel(get(loggingChannel)));
}

template <typename T> void impl_ILoggingSession<T>::AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel const maxLevel) const
{
	check_hresult(shim()->abi_AddLoggingChannelWithLevel(get(loggingChannel), maxLevel));
}

template <typename T> void impl_ILoggingSession<T>::RemoveLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const
{
	check_hresult(shim()->abi_RemoveLoggingChannel(get(loggingChannel)));
}

template <typename T> Windows::Foundation::Diagnostics::LoggingSession impl_ILoggingSessionFactory<T>::Create(StringReference const & name) const
{
	Windows::Foundation::Diagnostics::LoggingSession result = nullptr;
	check_hresult(shim()->abi_Create(get(name), put(result)));
	return result;
}

template <typename T> Windows::Storage::StorageFile impl_ILogFileGeneratedEventArgs<T>::File() const
{
	Windows::Storage::StorageFile value = nullptr;
	check_hresult(shim()->get_File(put(value)));
	return value;
}

template <typename T> String impl_IFileLoggingSession<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IFileLoggingSession<T>::AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const
{
	check_hresult(shim()->abi_AddLoggingChannel(get(loggingChannel)));
}

template <typename T> void impl_IFileLoggingSession<T>::AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel const maxLevel) const
{
	check_hresult(shim()->abi_AddLoggingChannelWithLevel(get(loggingChannel), maxLevel));
}

template <typename T> void impl_IFileLoggingSession<T>::RemoveLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const
{
	check_hresult(shim()->abi_RemoveLoggingChannel(get(loggingChannel)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IFileLoggingSession<T>::CloseAndSaveToFileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_CloseAndSaveToFileAsync(put(operation)));
	return operation;
}

template <typename T> long long impl_IFileLoggingSession<T>::LogFileGenerated(Windows::Foundation::ITypedEventHandler<Windows::Foundation::Diagnostics::IFileLoggingSession, Windows::Foundation::Diagnostics::LogFileGeneratedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_LogFileGenerated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IFileLoggingSession<T>::LogFileGenerated(F handler) const
{
	return LogFileGenerated(Windows::Foundation::TypedEventHandler<Windows::Foundation::Diagnostics::IFileLoggingSession, Windows::Foundation::Diagnostics::LogFileGeneratedEventArgs>(handler));
}

template <typename T> void impl_IFileLoggingSession<T>::LogFileGenerated(long long const token) const
{
	check_hresult(shim()->remove_LogFileGenerated(token));
}

template <typename T> Windows::Foundation::Diagnostics::FileLoggingSession impl_IFileLoggingSessionFactory<T>::Create(StringReference const & name) const
{
	Windows::Foundation::Diagnostics::FileLoggingSession result = nullptr;
	check_hresult(shim()->abi_Create(get(name), put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Metadata {

template <typename T> bool impl_IApiInformationStatics<T>::IsTypePresent(StringReference const & typeName) const
{
	bool value = {};
	check_hresult(shim()->abi_IsTypePresent(get(typeName), put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsMethodPresent(StringReference const & typeName, StringReference const & methodName) const
{
	bool value = {};
	check_hresult(shim()->abi_IsMethodPresent(get(typeName), get(methodName), put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsMethodPresent(StringReference const & typeName, StringReference const & methodName, unsigned const inputParameterCount) const
{
	bool value = {};
	check_hresult(shim()->abi_IsMethodPresentWithArity(get(typeName), get(methodName), inputParameterCount, put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsEventPresent(StringReference const & typeName, StringReference const & eventName) const
{
	bool value = {};
	check_hresult(shim()->abi_IsEventPresent(get(typeName), get(eventName), put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsPropertyPresent(StringReference const & typeName, StringReference const & propertyName) const
{
	bool value = {};
	check_hresult(shim()->abi_IsPropertyPresent(get(typeName), get(propertyName), put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsReadOnlyPropertyPresent(StringReference const & typeName, StringReference const & propertyName) const
{
	bool value = {};
	check_hresult(shim()->abi_IsReadOnlyPropertyPresent(get(typeName), get(propertyName), put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsWriteablePropertyPresent(StringReference const & typeName, StringReference const & propertyName) const
{
	bool value = {};
	check_hresult(shim()->abi_IsWriteablePropertyPresent(get(typeName), get(propertyName), put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsEnumNamedValuePresent(StringReference const & enumTypeName, StringReference const & valueName) const
{
	bool value = {};
	check_hresult(shim()->abi_IsEnumNamedValuePresent(get(enumTypeName), get(valueName), put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsApiContractPresent(StringReference const & contractName, unsigned short const majorVersion) const
{
	bool value = {};
	check_hresult(shim()->abi_IsApiContractPresentByMajor(get(contractName), majorVersion, put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsApiContractPresent(StringReference const & contractName, unsigned short const majorVersion, unsigned short const minorVersion) const
{
	bool value = {};
	check_hresult(shim()->abi_IsApiContractPresentByMajorAndMinor(get(contractName), majorVersion, minorVersion, put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Gaming { namespace Input {

template <typename T> long long impl_IGameController<T>::HeadsetConnected(Windows::Foundation::ITypedEventHandler<Windows::Gaming::Input::IGameController, Windows::Gaming::Input::Headset> const & value) const
{
	long long token = {};
	check_hresult(shim()->add_HeadsetConnected(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGameController<T>::HeadsetConnected(F value) const
{
	return HeadsetConnected(Windows::Foundation::TypedEventHandler<Windows::Gaming::Input::IGameController, Windows::Gaming::Input::Headset>(value));
}

template <typename T> void impl_IGameController<T>::HeadsetConnected(long long const token) const
{
	check_hresult(shim()->remove_HeadsetConnected(token));
}

template <typename T> long long impl_IGameController<T>::HeadsetDisconnected(Windows::Foundation::ITypedEventHandler<Windows::Gaming::Input::IGameController, Windows::Gaming::Input::Headset> const & value) const
{
	long long token = {};
	check_hresult(shim()->add_HeadsetDisconnected(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGameController<T>::HeadsetDisconnected(F value) const
{
	return HeadsetDisconnected(Windows::Foundation::TypedEventHandler<Windows::Gaming::Input::IGameController, Windows::Gaming::Input::Headset>(value));
}

template <typename T> void impl_IGameController<T>::HeadsetDisconnected(long long const token) const
{
	check_hresult(shim()->remove_HeadsetDisconnected(token));
}

template <typename T> long long impl_IGameController<T>::UserChanged(Windows::Foundation::ITypedEventHandler<Windows::Gaming::Input::IGameController, Windows::System::UserChangedEventArgs> const & value) const
{
	long long token = {};
	check_hresult(shim()->add_UserChanged(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGameController<T>::UserChanged(F value) const
{
	return UserChanged(Windows::Foundation::TypedEventHandler<Windows::Gaming::Input::IGameController, Windows::System::UserChangedEventArgs>(value));
}

template <typename T> void impl_IGameController<T>::UserChanged(long long const token) const
{
	check_hresult(shim()->remove_UserChanged(token));
}

template <typename T> Windows::Gaming::Input::Headset impl_IGameController<T>::Headset() const
{
	Windows::Gaming::Input::Headset value = nullptr;
	check_hresult(shim()->get_Headset(put(value)));
	return value;
}

template <typename T> bool impl_IGameController<T>::IsWireless() const
{
	bool value = {};
	check_hresult(shim()->get_IsWireless(put(value)));
	return value;
}

template <typename T> Windows::System::User impl_IGameController<T>::User() const
{
	Windows::System::User value = nullptr;
	check_hresult(shim()->get_User(put(value)));
	return value;
}

template <typename T> Windows::Gaming::Input::GamepadVibration impl_IGamepad<T>::Vibration() const
{
	Windows::Gaming::Input::GamepadVibration value = {};
	check_hresult(shim()->get_Vibration(&value));
	return value;
}

template <typename T> void impl_IGamepad<T>::Vibration(Windows::Gaming::Input::GamepadVibration const & value) const
{
	check_hresult(shim()->put_Vibration(value));
}

template <typename T> Windows::Gaming::Input::GamepadReading impl_IGamepad<T>::GetCurrentReading() const
{
	Windows::Gaming::Input::GamepadReading value = {};
	check_hresult(shim()->abi_GetCurrentReading(&value));
	return value;
}

template <typename T> long long impl_IGamepadStatics<T>::GamepadAdded(Windows::Foundation::IEventHandler<Windows::Gaming::Input::Gamepad> const & value) const
{
	long long token = {};
	check_hresult(shim()->add_GamepadAdded(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGamepadStatics<T>::GamepadAdded(F value) const
{
	return GamepadAdded(Windows::Foundation::EventHandler<Windows::Gaming::Input::Gamepad>(value));
}

template <typename T> void impl_IGamepadStatics<T>::GamepadAdded(long long const token) const
{
	check_hresult(shim()->remove_GamepadAdded(token));
}

template <typename T> long long impl_IGamepadStatics<T>::GamepadRemoved(Windows::Foundation::IEventHandler<Windows::Gaming::Input::Gamepad> const & value) const
{
	long long token = {};
	check_hresult(shim()->add_GamepadRemoved(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGamepadStatics<T>::GamepadRemoved(F value) const
{
	return GamepadRemoved(Windows::Foundation::EventHandler<Windows::Gaming::Input::Gamepad>(value));
}

template <typename T> void impl_IGamepadStatics<T>::GamepadRemoved(long long const token) const
{
	check_hresult(shim()->remove_GamepadRemoved(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Gaming::Input::Gamepad> impl_IGamepadStatics<T>::Gamepads() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Gaming::Input::Gamepad> value;
	check_hresult(shim()->get_Gamepads(put(value)));
	return value;
}

template <typename T> String impl_IHeadset<T>::CaptureDeviceId() const
{
	String value;
	check_hresult(shim()->get_CaptureDeviceId(put(value)));
	return value;
}

template <typename T> String impl_IHeadset<T>::RenderDeviceId() const
{
	String value;
	check_hresult(shim()->get_RenderDeviceId(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Globalization {

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> impl_IJapanesePhoneticAnalyzerStatics<T>::GetWords(StringReference const & input) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> result;
	check_hresult(shim()->abi_GetWords(get(input), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> impl_IJapanesePhoneticAnalyzerStatics<T>::GetWords(StringReference const & input, bool const monoRuby) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> result;
	check_hresult(shim()->abi_GetWordsWithMonoRubyOption(get(input), monoRuby, put(result)));
	return result;
}

template <typename T> String impl_IJapanesePhoneme<T>::DisplayText() const
{
	String value;
	check_hresult(shim()->get_DisplayText(put(value)));
	return value;
}

template <typename T> String impl_IJapanesePhoneme<T>::YomiText() const
{
	String value;
	check_hresult(shim()->get_YomiText(put(value)));
	return value;
}

template <typename T> bool impl_IJapanesePhoneme<T>::IsPhraseStart() const
{
	bool value = {};
	check_hresult(shim()->get_IsPhraseStart(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Gregorian() const
{
	String value;
	check_hresult(shim()->get_Gregorian(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Hebrew() const
{
	String value;
	check_hresult(shim()->get_Hebrew(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Hijri() const
{
	String value;
	check_hresult(shim()->get_Hijri(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Japanese() const
{
	String value;
	check_hresult(shim()->get_Japanese(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Julian() const
{
	String value;
	check_hresult(shim()->get_Julian(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Korean() const
{
	String value;
	check_hresult(shim()->get_Korean(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Taiwan() const
{
	String value;
	check_hresult(shim()->get_Taiwan(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Thai() const
{
	String value;
	check_hresult(shim()->get_Thai(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::UmAlQura() const
{
	String value;
	check_hresult(shim()->get_UmAlQura(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics2<T>::Persian() const
{
	String value;
	check_hresult(shim()->get_Persian(put(value)));
	return value;
}

template <typename T> String impl_IClockIdentifiersStatics<T>::TwelveHour() const
{
	String value;
	check_hresult(shim()->get_TwelveHour(put(value)));
	return value;
}

template <typename T> String impl_IClockIdentifiersStatics<T>::TwentyFourHour() const
{
	String value;
	check_hresult(shim()->get_TwentyFourHour(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Arab() const
{
	String value;
	check_hresult(shim()->get_Arab(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::ArabExt() const
{
	String value;
	check_hresult(shim()->get_ArabExt(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Bali() const
{
	String value;
	check_hresult(shim()->get_Bali(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Beng() const
{
	String value;
	check_hresult(shim()->get_Beng(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Cham() const
{
	String value;
	check_hresult(shim()->get_Cham(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Deva() const
{
	String value;
	check_hresult(shim()->get_Deva(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::FullWide() const
{
	String value;
	check_hresult(shim()->get_FullWide(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Gujr() const
{
	String value;
	check_hresult(shim()->get_Gujr(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Guru() const
{
	String value;
	check_hresult(shim()->get_Guru(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::HaniDec() const
{
	String value;
	check_hresult(shim()->get_HaniDec(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Java() const
{
	String value;
	check_hresult(shim()->get_Java(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Kali() const
{
	String value;
	check_hresult(shim()->get_Kali(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Khmr() const
{
	String value;
	check_hresult(shim()->get_Khmr(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Knda() const
{
	String value;
	check_hresult(shim()->get_Knda(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Lana() const
{
	String value;
	check_hresult(shim()->get_Lana(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::LanaTham() const
{
	String value;
	check_hresult(shim()->get_LanaTham(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Laoo() const
{
	String value;
	check_hresult(shim()->get_Laoo(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Latn() const
{
	String value;
	check_hresult(shim()->get_Latn(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Lepc() const
{
	String value;
	check_hresult(shim()->get_Lepc(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Limb() const
{
	String value;
	check_hresult(shim()->get_Limb(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Mlym() const
{
	String value;
	check_hresult(shim()->get_Mlym(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Mong() const
{
	String value;
	check_hresult(shim()->get_Mong(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Mtei() const
{
	String value;
	check_hresult(shim()->get_Mtei(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Mymr() const
{
	String value;
	check_hresult(shim()->get_Mymr(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::MymrShan() const
{
	String value;
	check_hresult(shim()->get_MymrShan(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Nkoo() const
{
	String value;
	check_hresult(shim()->get_Nkoo(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Olck() const
{
	String value;
	check_hresult(shim()->get_Olck(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Orya() const
{
	String value;
	check_hresult(shim()->get_Orya(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Saur() const
{
	String value;
	check_hresult(shim()->get_Saur(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Sund() const
{
	String value;
	check_hresult(shim()->get_Sund(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Talu() const
{
	String value;
	check_hresult(shim()->get_Talu(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::TamlDec() const
{
	String value;
	check_hresult(shim()->get_TamlDec(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Telu() const
{
	String value;
	check_hresult(shim()->get_Telu(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Thai() const
{
	String value;
	check_hresult(shim()->get_Thai(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Tibt() const
{
	String value;
	check_hresult(shim()->get_Tibt(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Vaii() const
{
	String value;
	check_hresult(shim()->get_Vaii(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::Brah() const
{
	String value;
	check_hresult(shim()->get_Brah(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::Osma() const
{
	String value;
	check_hresult(shim()->get_Osma(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::MathBold() const
{
	String value;
	check_hresult(shim()->get_MathBold(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::MathDbl() const
{
	String value;
	check_hresult(shim()->get_MathDbl(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::MathSans() const
{
	String value;
	check_hresult(shim()->get_MathSans(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::MathSanb() const
{
	String value;
	check_hresult(shim()->get_MathSanb(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::MathMono() const
{
	String value;
	check_hresult(shim()->get_MathMono(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::ZmthBold() const
{
	String value;
	check_hresult(shim()->get_ZmthBold(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::ZmthDbl() const
{
	String value;
	check_hresult(shim()->get_ZmthDbl(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::ZmthSans() const
{
	String value;
	check_hresult(shim()->get_ZmthSans(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::ZmthSanb() const
{
	String value;
	check_hresult(shim()->get_ZmthSanb(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::ZmthMono() const
{
	String value;
	check_hresult(shim()->get_ZmthMono(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AED() const
{
	String value;
	check_hresult(shim()->get_AED(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AFN() const
{
	String value;
	check_hresult(shim()->get_AFN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ALL() const
{
	String value;
	check_hresult(shim()->get_ALL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AMD() const
{
	String value;
	check_hresult(shim()->get_AMD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ANG() const
{
	String value;
	check_hresult(shim()->get_ANG(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AOA() const
{
	String value;
	check_hresult(shim()->get_AOA(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ARS() const
{
	String value;
	check_hresult(shim()->get_ARS(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AUD() const
{
	String value;
	check_hresult(shim()->get_AUD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AWG() const
{
	String value;
	check_hresult(shim()->get_AWG(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AZN() const
{
	String value;
	check_hresult(shim()->get_AZN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BAM() const
{
	String value;
	check_hresult(shim()->get_BAM(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BBD() const
{
	String value;
	check_hresult(shim()->get_BBD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BDT() const
{
	String value;
	check_hresult(shim()->get_BDT(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BGN() const
{
	String value;
	check_hresult(shim()->get_BGN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BHD() const
{
	String value;
	check_hresult(shim()->get_BHD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BIF() const
{
	String value;
	check_hresult(shim()->get_BIF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BMD() const
{
	String value;
	check_hresult(shim()->get_BMD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BND() const
{
	String value;
	check_hresult(shim()->get_BND(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BOB() const
{
	String value;
	check_hresult(shim()->get_BOB(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BRL() const
{
	String value;
	check_hresult(shim()->get_BRL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BSD() const
{
	String value;
	check_hresult(shim()->get_BSD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BTN() const
{
	String value;
	check_hresult(shim()->get_BTN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BWP() const
{
	String value;
	check_hresult(shim()->get_BWP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BYR() const
{
	String value;
	check_hresult(shim()->get_BYR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BZD() const
{
	String value;
	check_hresult(shim()->get_BZD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CAD() const
{
	String value;
	check_hresult(shim()->get_CAD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CDF() const
{
	String value;
	check_hresult(shim()->get_CDF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CHF() const
{
	String value;
	check_hresult(shim()->get_CHF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CLP() const
{
	String value;
	check_hresult(shim()->get_CLP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CNY() const
{
	String value;
	check_hresult(shim()->get_CNY(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::COP() const
{
	String value;
	check_hresult(shim()->get_COP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CRC() const
{
	String value;
	check_hresult(shim()->get_CRC(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CUP() const
{
	String value;
	check_hresult(shim()->get_CUP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CVE() const
{
	String value;
	check_hresult(shim()->get_CVE(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CZK() const
{
	String value;
	check_hresult(shim()->get_CZK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::DJF() const
{
	String value;
	check_hresult(shim()->get_DJF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::DKK() const
{
	String value;
	check_hresult(shim()->get_DKK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::DOP() const
{
	String value;
	check_hresult(shim()->get_DOP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::DZD() const
{
	String value;
	check_hresult(shim()->get_DZD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::EGP() const
{
	String value;
	check_hresult(shim()->get_EGP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ERN() const
{
	String value;
	check_hresult(shim()->get_ERN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ETB() const
{
	String value;
	check_hresult(shim()->get_ETB(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::EUR() const
{
	String value;
	check_hresult(shim()->get_EUR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::FJD() const
{
	String value;
	check_hresult(shim()->get_FJD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::FKP() const
{
	String value;
	check_hresult(shim()->get_FKP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GBP() const
{
	String value;
	check_hresult(shim()->get_GBP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GEL() const
{
	String value;
	check_hresult(shim()->get_GEL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GHS() const
{
	String value;
	check_hresult(shim()->get_GHS(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GIP() const
{
	String value;
	check_hresult(shim()->get_GIP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GMD() const
{
	String value;
	check_hresult(shim()->get_GMD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GNF() const
{
	String value;
	check_hresult(shim()->get_GNF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GTQ() const
{
	String value;
	check_hresult(shim()->get_GTQ(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GYD() const
{
	String value;
	check_hresult(shim()->get_GYD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::HKD() const
{
	String value;
	check_hresult(shim()->get_HKD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::HNL() const
{
	String value;
	check_hresult(shim()->get_HNL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::HRK() const
{
	String value;
	check_hresult(shim()->get_HRK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::HTG() const
{
	String value;
	check_hresult(shim()->get_HTG(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::HUF() const
{
	String value;
	check_hresult(shim()->get_HUF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::IDR() const
{
	String value;
	check_hresult(shim()->get_IDR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ILS() const
{
	String value;
	check_hresult(shim()->get_ILS(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::INR() const
{
	String value;
	check_hresult(shim()->get_INR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::IQD() const
{
	String value;
	check_hresult(shim()->get_IQD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::IRR() const
{
	String value;
	check_hresult(shim()->get_IRR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ISK() const
{
	String value;
	check_hresult(shim()->get_ISK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::JMD() const
{
	String value;
	check_hresult(shim()->get_JMD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::JOD() const
{
	String value;
	check_hresult(shim()->get_JOD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::JPY() const
{
	String value;
	check_hresult(shim()->get_JPY(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KES() const
{
	String value;
	check_hresult(shim()->get_KES(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KGS() const
{
	String value;
	check_hresult(shim()->get_KGS(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KHR() const
{
	String value;
	check_hresult(shim()->get_KHR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KMF() const
{
	String value;
	check_hresult(shim()->get_KMF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KPW() const
{
	String value;
	check_hresult(shim()->get_KPW(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KRW() const
{
	String value;
	check_hresult(shim()->get_KRW(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KWD() const
{
	String value;
	check_hresult(shim()->get_KWD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KYD() const
{
	String value;
	check_hresult(shim()->get_KYD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KZT() const
{
	String value;
	check_hresult(shim()->get_KZT(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LAK() const
{
	String value;
	check_hresult(shim()->get_LAK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LBP() const
{
	String value;
	check_hresult(shim()->get_LBP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LKR() const
{
	String value;
	check_hresult(shim()->get_LKR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LRD() const
{
	String value;
	check_hresult(shim()->get_LRD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LSL() const
{
	String value;
	check_hresult(shim()->get_LSL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LTL() const
{
	String value;
	check_hresult(shim()->get_LTL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LVL() const
{
	String value;
	check_hresult(shim()->get_LVL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LYD() const
{
	String value;
	check_hresult(shim()->get_LYD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MAD() const
{
	String value;
	check_hresult(shim()->get_MAD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MDL() const
{
	String value;
	check_hresult(shim()->get_MDL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MGA() const
{
	String value;
	check_hresult(shim()->get_MGA(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MKD() const
{
	String value;
	check_hresult(shim()->get_MKD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MMK() const
{
	String value;
	check_hresult(shim()->get_MMK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MNT() const
{
	String value;
	check_hresult(shim()->get_MNT(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MOP() const
{
	String value;
	check_hresult(shim()->get_MOP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MRO() const
{
	String value;
	check_hresult(shim()->get_MRO(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MUR() const
{
	String value;
	check_hresult(shim()->get_MUR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MVR() const
{
	String value;
	check_hresult(shim()->get_MVR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MWK() const
{
	String value;
	check_hresult(shim()->get_MWK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MXN() const
{
	String value;
	check_hresult(shim()->get_MXN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MYR() const
{
	String value;
	check_hresult(shim()->get_MYR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MZN() const
{
	String value;
	check_hresult(shim()->get_MZN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NAD() const
{
	String value;
	check_hresult(shim()->get_NAD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NGN() const
{
	String value;
	check_hresult(shim()->get_NGN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NIO() const
{
	String value;
	check_hresult(shim()->get_NIO(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NOK() const
{
	String value;
	check_hresult(shim()->get_NOK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NPR() const
{
	String value;
	check_hresult(shim()->get_NPR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NZD() const
{
	String value;
	check_hresult(shim()->get_NZD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::OMR() const
{
	String value;
	check_hresult(shim()->get_OMR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PAB() const
{
	String value;
	check_hresult(shim()->get_PAB(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PEN() const
{
	String value;
	check_hresult(shim()->get_PEN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PGK() const
{
	String value;
	check_hresult(shim()->get_PGK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PHP() const
{
	String value;
	check_hresult(shim()->get_PHP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PKR() const
{
	String value;
	check_hresult(shim()->get_PKR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PLN() const
{
	String value;
	check_hresult(shim()->get_PLN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PYG() const
{
	String value;
	check_hresult(shim()->get_PYG(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::QAR() const
{
	String value;
	check_hresult(shim()->get_QAR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::RON() const
{
	String value;
	check_hresult(shim()->get_RON(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::RSD() const
{
	String value;
	check_hresult(shim()->get_RSD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::RUB() const
{
	String value;
	check_hresult(shim()->get_RUB(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::RWF() const
{
	String value;
	check_hresult(shim()->get_RWF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SAR() const
{
	String value;
	check_hresult(shim()->get_SAR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SBD() const
{
	String value;
	check_hresult(shim()->get_SBD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SCR() const
{
	String value;
	check_hresult(shim()->get_SCR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SDG() const
{
	String value;
	check_hresult(shim()->get_SDG(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SEK() const
{
	String value;
	check_hresult(shim()->get_SEK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SGD() const
{
	String value;
	check_hresult(shim()->get_SGD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SHP() const
{
	String value;
	check_hresult(shim()->get_SHP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SLL() const
{
	String value;
	check_hresult(shim()->get_SLL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SOS() const
{
	String value;
	check_hresult(shim()->get_SOS(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SRD() const
{
	String value;
	check_hresult(shim()->get_SRD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::STD() const
{
	String value;
	check_hresult(shim()->get_STD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SYP() const
{
	String value;
	check_hresult(shim()->get_SYP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SZL() const
{
	String value;
	check_hresult(shim()->get_SZL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::THB() const
{
	String value;
	check_hresult(shim()->get_THB(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TJS() const
{
	String value;
	check_hresult(shim()->get_TJS(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TMT() const
{
	String value;
	check_hresult(shim()->get_TMT(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TND() const
{
	String value;
	check_hresult(shim()->get_TND(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TOP() const
{
	String value;
	check_hresult(shim()->get_TOP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TRY() const
{
	String value;
	check_hresult(shim()->get_TRY(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TTD() const
{
	String value;
	check_hresult(shim()->get_TTD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TWD() const
{
	String value;
	check_hresult(shim()->get_TWD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TZS() const
{
	String value;
	check_hresult(shim()->get_TZS(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::UAH() const
{
	String value;
	check_hresult(shim()->get_UAH(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::UGX() const
{
	String value;
	check_hresult(shim()->get_UGX(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::USD() const
{
	String value;
	check_hresult(shim()->get_USD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::UYU() const
{
	String value;
	check_hresult(shim()->get_UYU(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::UZS() const
{
	String value;
	check_hresult(shim()->get_UZS(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::VEF() const
{
	String value;
	check_hresult(shim()->get_VEF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::VND() const
{
	String value;
	check_hresult(shim()->get_VND(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::VUV() const
{
	String value;
	check_hresult(shim()->get_VUV(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::WST() const
{
	String value;
	check_hresult(shim()->get_WST(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::XAF() const
{
	String value;
	check_hresult(shim()->get_XAF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::XCD() const
{
	String value;
	check_hresult(shim()->get_XCD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::XOF() const
{
	String value;
	check_hresult(shim()->get_XOF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::XPF() const
{
	String value;
	check_hresult(shim()->get_XPF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::XXX() const
{
	String value;
	check_hresult(shim()->get_XXX(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::YER() const
{
	String value;
	check_hresult(shim()->get_YER(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ZAR() const
{
	String value;
	check_hresult(shim()->get_ZAR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ZMW() const
{
	String value;
	check_hresult(shim()->get_ZMW(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ZWL() const
{
	String value;
	check_hresult(shim()->get_ZWL(put(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::Code() const
{
	String value;
	check_hresult(shim()->get_Code(put(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::CodeTwoLetter() const
{
	String value;
	check_hresult(shim()->get_CodeTwoLetter(put(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::CodeThreeLetter() const
{
	String value;
	check_hresult(shim()->get_CodeThreeLetter(put(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::CodeThreeDigit() const
{
	String value;
	check_hresult(shim()->get_CodeThreeDigit(put(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::DisplayName() const
{
	String value;
	check_hresult(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::NativeName() const
{
	String value;
	check_hresult(shim()->get_NativeName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IGeographicRegion<T>::CurrenciesInUse() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_CurrenciesInUse(put(value)));
	return value;
}

template <typename T> Windows::Globalization::GeographicRegion impl_IGeographicRegionFactory<T>::CreateGeographicRegion(StringReference const & geographicRegionCode) const
{
	Windows::Globalization::GeographicRegion result = nullptr;
	check_hresult(shim()->abi_CreateGeographicRegion(get(geographicRegionCode), put(result)));
	return result;
}

template <typename T> bool impl_IGeographicRegionStatics<T>::IsSupported(StringReference const & geographicRegionCode) const
{
	bool result = {};
	check_hresult(shim()->abi_IsSupported(get(geographicRegionCode), put(result)));
	return result;
}

template <typename T> String impl_ILanguage<T>::LanguageTag() const
{
	String value;
	check_hresult(shim()->get_LanguageTag(put(value)));
	return value;
}

template <typename T> String impl_ILanguage<T>::DisplayName() const
{
	String value;
	check_hresult(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_ILanguage<T>::NativeName() const
{
	String value;
	check_hresult(shim()->get_NativeName(put(value)));
	return value;
}

template <typename T> String impl_ILanguage<T>::Script() const
{
	String value;
	check_hresult(shim()->get_Script(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ILanguageExtensionSubtags<T>::GetExtensionSubtags(StringReference const & singleton) const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->abi_GetExtensionSubtags(get(singleton), put(value)));
	return value;
}

template <typename T> Windows::Globalization::Language impl_ILanguageFactory<T>::CreateLanguage(StringReference const & languageTag) const
{
	Windows::Globalization::Language result = nullptr;
	check_hresult(shim()->abi_CreateLanguage(get(languageTag), put(result)));
	return result;
}

template <typename T> bool impl_ILanguageStatics<T>::IsWellFormed(StringReference const & languageTag) const
{
	bool result = {};
	check_hresult(shim()->abi_IsWellFormed(get(languageTag), put(result)));
	return result;
}

template <typename T> String impl_ILanguageStatics<T>::CurrentInputMethodLanguageTag() const
{
	String value;
	check_hresult(shim()->get_CurrentInputMethodLanguageTag(put(value)));
	return value;
}

template <typename T> bool impl_ILanguageStatics2<T>::TrySetInputMethodLanguageTag(StringReference const & languageTag) const
{
	bool result = {};
	check_hresult(shim()->abi_TrySetInputMethodLanguageTag(get(languageTag), put(result)));
	return result;
}

template <typename T> Windows::Globalization::Calendar impl_ICalendar<T>::Clone() const
{
	Windows::Globalization::Calendar value = nullptr;
	check_hresult(shim()->abi_Clone(put(value)));
	return value;
}

template <typename T> void impl_ICalendar<T>::SetToMin() const
{
	check_hresult(shim()->abi_SetToMin());
}

template <typename T> void impl_ICalendar<T>::SetToMax() const
{
	check_hresult(shim()->abi_SetToMax());
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ICalendar<T>::Languages() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_Languages(put(value)));
	return value;
}

template <typename T> String impl_ICalendar<T>::NumeralSystem() const
{
	String value;
	check_hresult(shim()->get_NumeralSystem(put(value)));
	return value;
}

template <typename T> void impl_ICalendar<T>::NumeralSystem(StringReference const & value) const
{
	check_hresult(shim()->put_NumeralSystem(get(value)));
}

template <typename T> String impl_ICalendar<T>::GetCalendarSystem() const
{
	String value;
	check_hresult(shim()->abi_GetCalendarSystem(put(value)));
	return value;
}

template <typename T> void impl_ICalendar<T>::ChangeCalendarSystem(StringReference const & value) const
{
	check_hresult(shim()->abi_ChangeCalendarSystem(get(value)));
}

template <typename T> String impl_ICalendar<T>::GetClock() const
{
	String value;
	check_hresult(shim()->abi_GetClock(put(value)));
	return value;
}

template <typename T> void impl_ICalendar<T>::ChangeClock(StringReference const & value) const
{
	check_hresult(shim()->abi_ChangeClock(get(value)));
}

template <typename T> Windows::Foundation::DateTime impl_ICalendar<T>::GetDateTime() const
{
	Windows::Foundation::DateTime result = {};
	check_hresult(shim()->abi_GetDateTime(&result));
	return result;
}

template <typename T> void impl_ICalendar<T>::SetDateTime(Windows::Foundation::DateTime const & value) const
{
	check_hresult(shim()->abi_SetDateTime(value));
}

template <typename T> void impl_ICalendar<T>::SetToNow() const
{
	check_hresult(shim()->abi_SetToNow());
}

template <typename T> int impl_ICalendar<T>::FirstEra() const
{
	int value = {};
	check_hresult(shim()->get_FirstEra(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastEra() const
{
	int value = {};
	check_hresult(shim()->get_LastEra(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfEras() const
{
	int value = {};
	check_hresult(shim()->get_NumberOfEras(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Era() const
{
	int value = {};
	check_hresult(shim()->get_Era(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Era(int const value) const
{
	check_hresult(shim()->put_Era(value));
}

template <typename T> void impl_ICalendar<T>::AddEras(int const eras) const
{
	check_hresult(shim()->abi_AddEras(eras));
}

template <typename T> String impl_ICalendar<T>::EraAsString() const
{
	String result;
	check_hresult(shim()->abi_EraAsFullString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::EraAsString(int const idealLength) const
{
	String result;
	check_hresult(shim()->abi_EraAsString(idealLength, put(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::FirstYearInThisEra() const
{
	int value = {};
	check_hresult(shim()->get_FirstYearInThisEra(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastYearInThisEra() const
{
	int value = {};
	check_hresult(shim()->get_LastYearInThisEra(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfYearsInThisEra() const
{
	int value = {};
	check_hresult(shim()->get_NumberOfYearsInThisEra(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Year() const
{
	int value = {};
	check_hresult(shim()->get_Year(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Year(int const value) const
{
	check_hresult(shim()->put_Year(value));
}

template <typename T> void impl_ICalendar<T>::AddYears(int const years) const
{
	check_hresult(shim()->abi_AddYears(years));
}

template <typename T> String impl_ICalendar<T>::YearAsString() const
{
	String result;
	check_hresult(shim()->abi_YearAsString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::YearAsTruncatedString(int const remainingDigits) const
{
	String result;
	check_hresult(shim()->abi_YearAsTruncatedString(remainingDigits, put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::YearAsPaddedString(int const minDigits) const
{
	String result;
	check_hresult(shim()->abi_YearAsPaddedString(minDigits, put(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::FirstMonthInThisYear() const
{
	int value = {};
	check_hresult(shim()->get_FirstMonthInThisYear(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastMonthInThisYear() const
{
	int value = {};
	check_hresult(shim()->get_LastMonthInThisYear(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfMonthsInThisYear() const
{
	int value = {};
	check_hresult(shim()->get_NumberOfMonthsInThisYear(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Month() const
{
	int value = {};
	check_hresult(shim()->get_Month(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Month(int const value) const
{
	check_hresult(shim()->put_Month(value));
}

template <typename T> void impl_ICalendar<T>::AddMonths(int const months) const
{
	check_hresult(shim()->abi_AddMonths(months));
}

template <typename T> String impl_ICalendar<T>::MonthAsString() const
{
	String result;
	check_hresult(shim()->abi_MonthAsFullString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MonthAsString(int const idealLength) const
{
	String result;
	check_hresult(shim()->abi_MonthAsString(idealLength, put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MonthAsSoloString() const
{
	String result;
	check_hresult(shim()->abi_MonthAsFullSoloString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MonthAsSoloString(int const idealLength) const
{
	String result;
	check_hresult(shim()->abi_MonthAsSoloString(idealLength, put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MonthAsNumericString() const
{
	String result;
	check_hresult(shim()->abi_MonthAsNumericString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MonthAsPaddedNumericString(int const minDigits) const
{
	String result;
	check_hresult(shim()->abi_MonthAsPaddedNumericString(minDigits, put(result)));
	return result;
}

template <typename T> void impl_ICalendar<T>::AddWeeks(int const weeks) const
{
	check_hresult(shim()->abi_AddWeeks(weeks));
}

template <typename T> int impl_ICalendar<T>::FirstDayInThisMonth() const
{
	int value = {};
	check_hresult(shim()->get_FirstDayInThisMonth(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastDayInThisMonth() const
{
	int value = {};
	check_hresult(shim()->get_LastDayInThisMonth(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfDaysInThisMonth() const
{
	int value = {};
	check_hresult(shim()->get_NumberOfDaysInThisMonth(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Day() const
{
	int value = {};
	check_hresult(shim()->get_Day(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Day(int const value) const
{
	check_hresult(shim()->put_Day(value));
}

template <typename T> void impl_ICalendar<T>::AddDays(int const days) const
{
	check_hresult(shim()->abi_AddDays(days));
}

template <typename T> String impl_ICalendar<T>::DayAsString() const
{
	String result;
	check_hresult(shim()->abi_DayAsString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::DayAsPaddedString(int const minDigits) const
{
	String result;
	check_hresult(shim()->abi_DayAsPaddedString(minDigits, put(result)));
	return result;
}

template <typename T> Windows::Globalization::DayOfWeek impl_ICalendar<T>::DayOfWeek() const
{
	Windows::Globalization::DayOfWeek value = {};
	check_hresult(shim()->get_DayOfWeek(&value));
	return value;
}

template <typename T> String impl_ICalendar<T>::DayOfWeekAsString() const
{
	String result;
	check_hresult(shim()->abi_DayOfWeekAsFullString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::DayOfWeekAsString(int const idealLength) const
{
	String result;
	check_hresult(shim()->abi_DayOfWeekAsString(idealLength, put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::DayOfWeekAsSoloString() const
{
	String result;
	check_hresult(shim()->abi_DayOfWeekAsFullSoloString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::DayOfWeekAsSoloString(int const idealLength) const
{
	String result;
	check_hresult(shim()->abi_DayOfWeekAsSoloString(idealLength, put(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::FirstPeriodInThisDay() const
{
	int value = {};
	check_hresult(shim()->get_FirstPeriodInThisDay(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastPeriodInThisDay() const
{
	int value = {};
	check_hresult(shim()->get_LastPeriodInThisDay(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfPeriodsInThisDay() const
{
	int value = {};
	check_hresult(shim()->get_NumberOfPeriodsInThisDay(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Period() const
{
	int value = {};
	check_hresult(shim()->get_Period(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Period(int const value) const
{
	check_hresult(shim()->put_Period(value));
}

template <typename T> void impl_ICalendar<T>::AddPeriods(int const periods) const
{
	check_hresult(shim()->abi_AddPeriods(periods));
}

template <typename T> String impl_ICalendar<T>::PeriodAsString() const
{
	String result;
	check_hresult(shim()->abi_PeriodAsFullString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::PeriodAsString(int const idealLength) const
{
	String result;
	check_hresult(shim()->abi_PeriodAsString(idealLength, put(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::FirstHourInThisPeriod() const
{
	int value = {};
	check_hresult(shim()->get_FirstHourInThisPeriod(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastHourInThisPeriod() const
{
	int value = {};
	check_hresult(shim()->get_LastHourInThisPeriod(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfHoursInThisPeriod() const
{
	int value = {};
	check_hresult(shim()->get_NumberOfHoursInThisPeriod(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Hour() const
{
	int value = {};
	check_hresult(shim()->get_Hour(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Hour(int const value) const
{
	check_hresult(shim()->put_Hour(value));
}

template <typename T> void impl_ICalendar<T>::AddHours(int const hours) const
{
	check_hresult(shim()->abi_AddHours(hours));
}

template <typename T> String impl_ICalendar<T>::HourAsString() const
{
	String result;
	check_hresult(shim()->abi_HourAsString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::HourAsPaddedString(int const minDigits) const
{
	String result;
	check_hresult(shim()->abi_HourAsPaddedString(minDigits, put(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::Minute() const
{
	int value = {};
	check_hresult(shim()->get_Minute(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Minute(int const value) const
{
	check_hresult(shim()->put_Minute(value));
}

template <typename T> void impl_ICalendar<T>::AddMinutes(int const minutes) const
{
	check_hresult(shim()->abi_AddMinutes(minutes));
}

template <typename T> String impl_ICalendar<T>::MinuteAsString() const
{
	String result;
	check_hresult(shim()->abi_MinuteAsString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MinuteAsPaddedString(int const minDigits) const
{
	String result;
	check_hresult(shim()->abi_MinuteAsPaddedString(minDigits, put(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::Second() const
{
	int value = {};
	check_hresult(shim()->get_Second(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Second(int const value) const
{
	check_hresult(shim()->put_Second(value));
}

template <typename T> void impl_ICalendar<T>::AddSeconds(int const seconds) const
{
	check_hresult(shim()->abi_AddSeconds(seconds));
}

template <typename T> String impl_ICalendar<T>::SecondAsString() const
{
	String result;
	check_hresult(shim()->abi_SecondAsString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::SecondAsPaddedString(int const minDigits) const
{
	String result;
	check_hresult(shim()->abi_SecondAsPaddedString(minDigits, put(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::Nanosecond() const
{
	int value = {};
	check_hresult(shim()->get_Nanosecond(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Nanosecond(int const value) const
{
	check_hresult(shim()->put_Nanosecond(value));
}

template <typename T> void impl_ICalendar<T>::AddNanoseconds(int const nanoseconds) const
{
	check_hresult(shim()->abi_AddNanoseconds(nanoseconds));
}

template <typename T> String impl_ICalendar<T>::NanosecondAsString() const
{
	String result;
	check_hresult(shim()->abi_NanosecondAsString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::NanosecondAsPaddedString(int const minDigits) const
{
	String result;
	check_hresult(shim()->abi_NanosecondAsPaddedString(minDigits, put(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::Compare(Windows::Globalization::Calendar const & other) const
{
	int result = {};
	check_hresult(shim()->abi_Compare(get(other), &result));
	return result;
}

template <typename T> int impl_ICalendar<T>::CompareDateTime(Windows::Foundation::DateTime const & other) const
{
	int result = {};
	check_hresult(shim()->abi_CompareDateTime(other, &result));
	return result;
}

template <typename T> void impl_ICalendar<T>::CopyTo(Windows::Globalization::Calendar const & other) const
{
	check_hresult(shim()->abi_CopyTo(get(other)));
}

template <typename T> int impl_ICalendar<T>::FirstMinuteInThisHour() const
{
	int value = {};
	check_hresult(shim()->get_FirstMinuteInThisHour(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastMinuteInThisHour() const
{
	int value = {};
	check_hresult(shim()->get_LastMinuteInThisHour(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfMinutesInThisHour() const
{
	int value = {};
	check_hresult(shim()->get_NumberOfMinutesInThisHour(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::FirstSecondInThisMinute() const
{
	int value = {};
	check_hresult(shim()->get_FirstSecondInThisMinute(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastSecondInThisMinute() const
{
	int value = {};
	check_hresult(shim()->get_LastSecondInThisMinute(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfSecondsInThisMinute() const
{
	int value = {};
	check_hresult(shim()->get_NumberOfSecondsInThisMinute(&value));
	return value;
}

template <typename T> String impl_ICalendar<T>::ResolvedLanguage() const
{
	String value;
	check_hresult(shim()->get_ResolvedLanguage(put(value)));
	return value;
}

template <typename T> bool impl_ICalendar<T>::IsDaylightSavingTime() const
{
	bool value = {};
	check_hresult(shim()->get_IsDaylightSavingTime(put(value)));
	return value;
}

template <typename T> Windows::Globalization::Calendar impl_ICalendarFactory2<T>::CreateCalendarWithTimeZone(Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & calendar, StringReference const & clock, StringReference const & timeZoneId) const
{
	Windows::Globalization::Calendar result = nullptr;
	check_hresult(shim()->abi_CreateCalendarWithTimeZone(get(languages), get(calendar), get(clock), get(timeZoneId), put(result)));
	return result;
}

template <typename T> String impl_ITimeZoneOnCalendar<T>::GetTimeZone() const
{
	String value;
	check_hresult(shim()->abi_GetTimeZone(put(value)));
	return value;
}

template <typename T> void impl_ITimeZoneOnCalendar<T>::ChangeTimeZone(StringReference const & timeZoneId) const
{
	check_hresult(shim()->abi_ChangeTimeZone(get(timeZoneId)));
}

template <typename T> String impl_ITimeZoneOnCalendar<T>::TimeZoneAsString() const
{
	String result;
	check_hresult(shim()->abi_TimeZoneAsFullString(put(result)));
	return result;
}

template <typename T> String impl_ITimeZoneOnCalendar<T>::TimeZoneAsString(int const idealLength) const
{
	String result;
	check_hresult(shim()->abi_TimeZoneAsString(idealLength, put(result)));
	return result;
}

template <typename T> Windows::Globalization::Calendar impl_ICalendarFactory<T>::CreateCalendarDefaultCalendarAndClock(Windows::Foundation::Collections::IIterable<String> const & languages) const
{
	Windows::Globalization::Calendar result = nullptr;
	check_hresult(shim()->abi_CreateCalendarDefaultCalendarAndClock(get(languages), put(result)));
	return result;
}

template <typename T> Windows::Globalization::Calendar impl_ICalendarFactory<T>::CreateCalendar(Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & calendar, StringReference const & clock) const
{
	Windows::Globalization::Calendar result = nullptr;
	check_hresult(shim()->abi_CreateCalendar(get(languages), get(calendar), get(clock), put(result)));
	return result;
}

template <typename T> String impl_IApplicationLanguagesStatics<T>::PrimaryLanguageOverride() const
{
	String value;
	check_hresult(shim()->get_PrimaryLanguageOverride(put(value)));
	return value;
}

template <typename T> void impl_IApplicationLanguagesStatics<T>::PrimaryLanguageOverride(StringReference const & value) const
{
	check_hresult(shim()->put_PrimaryLanguageOverride(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IApplicationLanguagesStatics<T>::Languages() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_Languages(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IApplicationLanguagesStatics<T>::ManifestLanguages() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_ManifestLanguages(put(value)));
	return value;
}

}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Display {

template <typename T> void impl_IDisplayPropertiesEventHandler<T>::Invoke(IInspectable const & sender) const
{
	check_hresult(shim()->abi_Invoke(get(sender)));
}

template <typename T> Windows::Graphics::Display::DisplayInformation impl_IDisplayInformationStatics<T>::GetForCurrentView() const
{
	Windows::Graphics::Display::DisplayInformation current = nullptr;
	check_hresult(shim()->abi_GetForCurrentView(put(current)));
	return current;
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IDisplayInformationStatics<T>::AutoRotationPreferences() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check_hresult(shim()->get_AutoRotationPreferences(&value));
	return value;
}

template <typename T> void impl_IDisplayInformationStatics<T>::AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check_hresult(shim()->put_AutoRotationPreferences(value));
}

template <typename T> long long impl_IDisplayInformationStatics<T>::DisplayContentsInvalidated(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_DisplayContentsInvalidated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayInformationStatics<T>::DisplayContentsInvalidated(F handler) const
{
	return DisplayContentsInvalidated(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

template <typename T> void impl_IDisplayInformationStatics<T>::DisplayContentsInvalidated(long long const token) const
{
	check_hresult(shim()->remove_DisplayContentsInvalidated(token));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IDisplayInformation<T>::CurrentOrientation() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check_hresult(shim()->get_CurrentOrientation(&value));
	return value;
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IDisplayInformation<T>::NativeOrientation() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check_hresult(shim()->get_NativeOrientation(&value));
	return value;
}

template <typename T> long long impl_IDisplayInformation<T>::OrientationChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_OrientationChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayInformation<T>::OrientationChanged(F handler) const
{
	return OrientationChanged(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

template <typename T> void impl_IDisplayInformation<T>::OrientationChanged(long long const token) const
{
	check_hresult(shim()->remove_OrientationChanged(token));
}

template <typename T> Windows::Graphics::Display::ResolutionScale impl_IDisplayInformation<T>::ResolutionScale() const
{
	Windows::Graphics::Display::ResolutionScale value = {};
	check_hresult(shim()->get_ResolutionScale(&value));
	return value;
}

template <typename T> float impl_IDisplayInformation<T>::LogicalDpi() const
{
	float value = {};
	check_hresult(shim()->get_LogicalDpi(&value));
	return value;
}

template <typename T> float impl_IDisplayInformation<T>::RawDpiX() const
{
	float value = {};
	check_hresult(shim()->get_RawDpiX(&value));
	return value;
}

template <typename T> float impl_IDisplayInformation<T>::RawDpiY() const
{
	float value = {};
	check_hresult(shim()->get_RawDpiY(&value));
	return value;
}

template <typename T> long long impl_IDisplayInformation<T>::DpiChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_DpiChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayInformation<T>::DpiChanged(F handler) const
{
	return DpiChanged(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

template <typename T> void impl_IDisplayInformation<T>::DpiChanged(long long const token) const
{
	check_hresult(shim()->remove_DpiChanged(token));
}

template <typename T> bool impl_IDisplayInformation<T>::StereoEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_StereoEnabled(put(value)));
	return value;
}

template <typename T> long long impl_IDisplayInformation<T>::StereoEnabledChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_StereoEnabledChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayInformation<T>::StereoEnabledChanged(F handler) const
{
	return StereoEnabledChanged(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

template <typename T> void impl_IDisplayInformation<T>::StereoEnabledChanged(long long const token) const
{
	check_hresult(shim()->remove_StereoEnabledChanged(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> impl_IDisplayInformation<T>::GetColorProfileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> asyncInfo;
	check_hresult(shim()->abi_GetColorProfileAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> long long impl_IDisplayInformation<T>::ColorProfileChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ColorProfileChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayInformation<T>::ColorProfileChanged(F handler) const
{
	return ColorProfileChanged(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

template <typename T> void impl_IDisplayInformation<T>::ColorProfileChanged(long long const token) const
{
	check_hresult(shim()->remove_ColorProfileChanged(token));
}

template <typename T> double impl_IDisplayInformation2<T>::RawPixelsPerViewPixel() const
{
	double value = {};
	check_hresult(shim()->get_RawPixelsPerViewPixel(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IDisplayInformation3<T>::DiagonalSizeInInches() const
{
	Windows::Foundation::IReference<double> value;
	check_hresult(shim()->get_DiagonalSizeInInches(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IDisplayPropertiesStatics<T>::CurrentOrientation() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check_hresult(shim()->get_CurrentOrientation(&value));
	return value;
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IDisplayPropertiesStatics<T>::NativeOrientation() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check_hresult(shim()->get_NativeOrientation(&value));
	return value;
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IDisplayPropertiesStatics<T>::AutoRotationPreferences() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check_hresult(shim()->get_AutoRotationPreferences(&value));
	return value;
}

template <typename T> void impl_IDisplayPropertiesStatics<T>::AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check_hresult(shim()->put_AutoRotationPreferences(value));
}

template <typename T> long long impl_IDisplayPropertiesStatics<T>::OrientationChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_OrientationChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayPropertiesStatics<T>::OrientationChanged(F handler) const
{
	return OrientationChanged(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

template <typename T> void impl_IDisplayPropertiesStatics<T>::OrientationChanged(long long const token) const
{
	check_hresult(shim()->remove_OrientationChanged(token));
}

template <typename T> Windows::Graphics::Display::ResolutionScale impl_IDisplayPropertiesStatics<T>::ResolutionScale() const
{
	Windows::Graphics::Display::ResolutionScale value = {};
	check_hresult(shim()->get_ResolutionScale(&value));
	return value;
}

template <typename T> float impl_IDisplayPropertiesStatics<T>::LogicalDpi() const
{
	float value = {};
	check_hresult(shim()->get_LogicalDpi(&value));
	return value;
}

template <typename T> long long impl_IDisplayPropertiesStatics<T>::LogicalDpiChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_LogicalDpiChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayPropertiesStatics<T>::LogicalDpiChanged(F handler) const
{
	return LogicalDpiChanged(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

template <typename T> void impl_IDisplayPropertiesStatics<T>::LogicalDpiChanged(long long const token) const
{
	check_hresult(shim()->remove_LogicalDpiChanged(token));
}

template <typename T> bool impl_IDisplayPropertiesStatics<T>::StereoEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_StereoEnabled(put(value)));
	return value;
}

template <typename T> long long impl_IDisplayPropertiesStatics<T>::StereoEnabledChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_StereoEnabledChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayPropertiesStatics<T>::StereoEnabledChanged(F handler) const
{
	return StereoEnabledChanged(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

template <typename T> void impl_IDisplayPropertiesStatics<T>::StereoEnabledChanged(long long const token) const
{
	check_hresult(shim()->remove_StereoEnabledChanged(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> impl_IDisplayPropertiesStatics<T>::GetColorProfileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> asyncInfo;
	check_hresult(shim()->abi_GetColorProfileAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> long long impl_IDisplayPropertiesStatics<T>::ColorProfileChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ColorProfileChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayPropertiesStatics<T>::ColorProfileChanged(F handler) const
{
	return ColorProfileChanged(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

template <typename T> void impl_IDisplayPropertiesStatics<T>::ColorProfileChanged(long long const token) const
{
	check_hresult(shim()->remove_ColorProfileChanged(token));
}

template <typename T> long long impl_IDisplayPropertiesStatics<T>::DisplayContentsInvalidated(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_DisplayContentsInvalidated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayPropertiesStatics<T>::DisplayContentsInvalidated(F handler) const
{
	return DisplayContentsInvalidated(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

template <typename T> void impl_IDisplayPropertiesStatics<T>::DisplayContentsInvalidated(long long const token) const
{
	check_hresult(shim()->remove_DisplayContentsInvalidated(token));
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace SpeechRecognition {

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionResultStatus impl_ISpeechRecognitionCompilationResult<T>::Status() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionResultStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_ISpeechRecognizerTimeouts<T>::InitialSilenceTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_InitialSilenceTimeout(&value));
	return value;
}

template <typename T> void impl_ISpeechRecognizerTimeouts<T>::InitialSilenceTimeout(Windows::Foundation::TimeSpan const & value) const
{
	check_hresult(shim()->put_InitialSilenceTimeout(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_ISpeechRecognizerTimeouts<T>::EndSilenceTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_EndSilenceTimeout(&value));
	return value;
}

template <typename T> void impl_ISpeechRecognizerTimeouts<T>::EndSilenceTimeout(Windows::Foundation::TimeSpan const & value) const
{
	check_hresult(shim()->put_EndSilenceTimeout(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_ISpeechRecognizerTimeouts<T>::BabbleTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_BabbleTimeout(&value));
	return value;
}

template <typename T> void impl_ISpeechRecognizerTimeouts<T>::BabbleTimeout(Windows::Foundation::TimeSpan const & value) const
{
	check_hresult(shim()->put_BabbleTimeout(value));
}

template <typename T> String impl_ISpeechRecognizerUIOptions<T>::ExampleText() const
{
	String value;
	check_hresult(shim()->get_ExampleText(put(value)));
	return value;
}

template <typename T> void impl_ISpeechRecognizerUIOptions<T>::ExampleText(StringReference const & value) const
{
	check_hresult(shim()->put_ExampleText(get(value)));
}

template <typename T> String impl_ISpeechRecognizerUIOptions<T>::AudiblePrompt() const
{
	String value;
	check_hresult(shim()->get_AudiblePrompt(put(value)));
	return value;
}

template <typename T> void impl_ISpeechRecognizerUIOptions<T>::AudiblePrompt(StringReference const & value) const
{
	check_hresult(shim()->put_AudiblePrompt(get(value)));
}

template <typename T> bool impl_ISpeechRecognizerUIOptions<T>::IsReadBackEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_IsReadBackEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISpeechRecognizerUIOptions<T>::IsReadBackEnabled(bool const value) const
{
	check_hresult(shim()->put_IsReadBackEnabled(value));
}

template <typename T> bool impl_ISpeechRecognizerUIOptions<T>::ShowConfirmation() const
{
	bool value = {};
	check_hresult(shim()->get_ShowConfirmation(put(value)));
	return value;
}

template <typename T> void impl_ISpeechRecognizerUIOptions<T>::ShowConfirmation(bool const value) const
{
	check_hresult(shim()->put_ShowConfirmation(value));
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionResultStatus impl_ISpeechRecognitionResult<T>::Status() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionResultStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> String impl_ISpeechRecognitionResult<T>::Text() const
{
	String value;
	check_hresult(shim()->get_Text(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionConfidence impl_ISpeechRecognitionResult<T>::Confidence() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionConfidence value = {};
	check_hresult(shim()->get_Confidence(&value));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionSemanticInterpretation impl_ISpeechRecognitionResult<T>::SemanticInterpretation() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionSemanticInterpretation value = nullptr;
	check_hresult(shim()->get_SemanticInterpretation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::SpeechRecognition::SpeechRecognitionResult> impl_ISpeechRecognitionResult<T>::GetAlternates(unsigned const maxAlternates) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::SpeechRecognition::SpeechRecognitionResult> alternates;
	check_hresult(shim()->abi_GetAlternates(maxAlternates, put(alternates)));
	return alternates;
}

template <typename T> Windows::Media::SpeechRecognition::ISpeechRecognitionConstraint impl_ISpeechRecognitionResult<T>::Constraint() const
{
	Windows::Media::SpeechRecognition::ISpeechRecognitionConstraint value;
	check_hresult(shim()->get_Constraint(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISpeechRecognitionResult<T>::RulePath() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_RulePath(put(value)));
	return value;
}

template <typename T> double impl_ISpeechRecognitionResult<T>::RawConfidence() const
{
	double value = {};
	check_hresult(shim()->get_RawConfidence(&value));
	return value;
}

template <typename T> bool impl_ISpeechRecognitionConstraint<T>::IsEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_IsEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISpeechRecognitionConstraint<T>::IsEnabled(bool const value) const
{
	check_hresult(shim()->put_IsEnabled(value));
}

template <typename T> String impl_ISpeechRecognitionConstraint<T>::Tag() const
{
	String value;
	check_hresult(shim()->get_Tag(put(value)));
	return value;
}

template <typename T> void impl_ISpeechRecognitionConstraint<T>::Tag(StringReference const & value) const
{
	check_hresult(shim()->put_Tag(get(value)));
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionConstraintType impl_ISpeechRecognitionConstraint<T>::Type() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionConstraintType value = {};
	check_hresult(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionConstraintProbability impl_ISpeechRecognitionConstraint<T>::Probability() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionConstraintProbability value = {};
	check_hresult(shim()->get_Probability(&value));
	return value;
}

template <typename T> void impl_ISpeechRecognitionConstraint<T>::Probability(Windows::Media::SpeechRecognition::SpeechRecognitionConstraintProbability const value) const
{
	check_hresult(shim()->put_Probability(value));
}

template <typename T> Windows::Foundation::DateTime impl_ISpeechRecognitionResult2<T>::PhraseStartTime() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_PhraseStartTime(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_ISpeechRecognitionResult2<T>::PhraseDuration() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_PhraseDuration(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::Foundation::Collections::IVectorView<String>> impl_ISpeechRecognitionSemanticInterpretation<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::Foundation::Collections::IVectorView<String>> value;
	check_hresult(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionScenario impl_ISpeechRecognitionTopicConstraint<T>::Scenario() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionScenario value = {};
	check_hresult(shim()->get_Scenario(&value));
	return value;
}

template <typename T> String impl_ISpeechRecognitionTopicConstraint<T>::TopicHint() const
{
	String value;
	check_hresult(shim()->get_TopicHint(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionTopicConstraint impl_ISpeechRecognitionTopicConstraintFactory<T>::Create(Windows::Media::SpeechRecognition::SpeechRecognitionScenario const scenario, StringReference const & topicHint) const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionTopicConstraint constraint = nullptr;
	check_hresult(shim()->abi_Create(scenario, get(topicHint), put(constraint)));
	return constraint;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionTopicConstraint impl_ISpeechRecognitionTopicConstraintFactory<T>::CreateWithTag(Windows::Media::SpeechRecognition::SpeechRecognitionScenario const scenario, StringReference const & topicHint, StringReference const & tag) const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionTopicConstraint constraint = nullptr;
	check_hresult(shim()->abi_CreateWithTag(scenario, get(topicHint), get(tag), put(constraint)));
	return constraint;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ISpeechRecognitionListConstraint<T>::Commands() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_Commands(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionListConstraint impl_ISpeechRecognitionListConstraintFactory<T>::Create(Windows::Foundation::Collections::IIterable<String> const & commands) const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionListConstraint constraint = nullptr;
	check_hresult(shim()->abi_Create(get(commands), put(constraint)));
	return constraint;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionListConstraint impl_ISpeechRecognitionListConstraintFactory<T>::CreateWithTag(Windows::Foundation::Collections::IIterable<String> const & commands, StringReference const & tag) const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionListConstraint constraint = nullptr;
	check_hresult(shim()->abi_CreateWithTag(get(commands), get(tag), put(constraint)));
	return constraint;
}

template <typename T> Windows::Storage::StorageFile impl_ISpeechRecognitionGrammarFileConstraint<T>::GrammarFile() const
{
	Windows::Storage::StorageFile value = nullptr;
	check_hresult(shim()->get_GrammarFile(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionGrammarFileConstraint impl_ISpeechRecognitionGrammarFileConstraintFactory<T>::Create(Windows::Storage::StorageFile const & file) const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionGrammarFileConstraint constraint = nullptr;
	check_hresult(shim()->abi_Create(get(file), put(constraint)));
	return constraint;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionGrammarFileConstraint impl_ISpeechRecognitionGrammarFileConstraintFactory<T>::CreateWithTag(Windows::Storage::StorageFile const & file, StringReference const & tag) const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionGrammarFileConstraint constraint = nullptr;
	check_hresult(shim()->abi_CreateWithTag(get(file), get(tag), put(constraint)));
	return constraint;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionAudioProblem impl_ISpeechRecognitionQualityDegradingEventArgs<T>::Problem() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionAudioProblem value = {};
	check_hresult(shim()->get_Problem(&value));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognizerState impl_ISpeechRecognizerStateChangedEventArgs<T>::State() const
{
	Windows::Media::SpeechRecognition::SpeechRecognizerState value = {};
	check_hresult(shim()->get_State(&value));
	return value;
}

template <typename T> Windows::Globalization::Language impl_ISpeechRecognizer<T>::CurrentLanguage() const
{
	Windows::Globalization::Language language = nullptr;
	check_hresult(shim()->get_CurrentLanguage(put(language)));
	return language;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::SpeechRecognition::ISpeechRecognitionConstraint> impl_ISpeechRecognizer<T>::Constraints() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::SpeechRecognition::ISpeechRecognitionConstraint> value;
	check_hresult(shim()->get_Constraints(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognizerTimeouts impl_ISpeechRecognizer<T>::Timeouts() const
{
	Windows::Media::SpeechRecognition::SpeechRecognizerTimeouts value = nullptr;
	check_hresult(shim()->get_Timeouts(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognizerUIOptions impl_ISpeechRecognizer<T>::UIOptions() const
{
	Windows::Media::SpeechRecognition::SpeechRecognizerUIOptions value = nullptr;
	check_hresult(shim()->get_UIOptions(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::SpeechRecognition::SpeechRecognitionCompilationResult> impl_ISpeechRecognizer<T>::CompileConstraintsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechRecognition::SpeechRecognitionCompilationResult> asyncOperation;
	check_hresult(shim()->abi_CompileConstraintsAsync(put(asyncOperation)));
	return asyncOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::SpeechRecognition::SpeechRecognitionResult> impl_ISpeechRecognizer<T>::RecognizeAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechRecognition::SpeechRecognitionResult> asyncOperation;
	check_hresult(shim()->abi_RecognizeAsync(put(asyncOperation)));
	return asyncOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::SpeechRecognition::SpeechRecognitionResult> impl_ISpeechRecognizer<T>::RecognizeWithUIAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechRecognition::SpeechRecognitionResult> asyncOperation;
	check_hresult(shim()->abi_RecognizeWithUIAsync(put(asyncOperation)));
	return asyncOperation;
}

template <typename T> long long impl_ISpeechRecognizer<T>::RecognitionQualityDegrading(Windows::Foundation::ITypedEventHandler<Windows::Media::SpeechRecognition::SpeechRecognizer, Windows::Media::SpeechRecognition::SpeechRecognitionQualityDegradingEventArgs> const & speechRecognitionQualityDegradingHandler) const
{
	long long cookie = {};
	check_hresult(shim()->add_RecognitionQualityDegrading(get(speechRecognitionQualityDegradingHandler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ISpeechRecognizer<T>::RecognitionQualityDegrading(F speechRecognitionQualityDegradingHandler) const
{
	return RecognitionQualityDegrading(Windows::Foundation::TypedEventHandler<Windows::Media::SpeechRecognition::SpeechRecognizer, Windows::Media::SpeechRecognition::SpeechRecognitionQualityDegradingEventArgs>(speechRecognitionQualityDegradingHandler));
}

template <typename T> void impl_ISpeechRecognizer<T>::RecognitionQualityDegrading(long long const cookie) const
{
	check_hresult(shim()->remove_RecognitionQualityDegrading(cookie));
}

template <typename T> long long impl_ISpeechRecognizer<T>::StateChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::SpeechRecognition::SpeechRecognizer, Windows::Media::SpeechRecognition::SpeechRecognizerStateChangedEventArgs> const & stateChangedHandler) const
{
	long long cookie = {};
	check_hresult(shim()->add_StateChanged(get(stateChangedHandler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ISpeechRecognizer<T>::StateChanged(F stateChangedHandler) const
{
	return StateChanged(Windows::Foundation::TypedEventHandler<Windows::Media::SpeechRecognition::SpeechRecognizer, Windows::Media::SpeechRecognition::SpeechRecognizerStateChangedEventArgs>(stateChangedHandler));
}

template <typename T> void impl_ISpeechRecognizer<T>::StateChanged(long long const cookie) const
{
	check_hresult(shim()->remove_StateChanged(cookie));
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognizer impl_ISpeechRecognizerFactory<T>::Create(Windows::Globalization::Language const & language) const
{
	Windows::Media::SpeechRecognition::SpeechRecognizer recognizer = nullptr;
	check_hresult(shim()->abi_Create(get(language), put(recognizer)));
	return recognizer;
}

template <typename T> Windows::Globalization::Language impl_ISpeechRecognizerStatics<T>::SystemSpeechLanguage() const
{
	Windows::Globalization::Language language = nullptr;
	check_hresult(shim()->get_SystemSpeechLanguage(put(language)));
	return language;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> impl_ISpeechRecognizerStatics<T>::SupportedTopicLanguages() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> languages;
	check_hresult(shim()->get_SupportedTopicLanguages(put(languages)));
	return languages;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> impl_ISpeechRecognizerStatics<T>::SupportedGrammarLanguages() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> languages;
	check_hresult(shim()->get_SupportedGrammarLanguages(put(languages)));
	return languages;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession impl_ISpeechRecognizer2<T>::ContinuousRecognitionSession() const
{
	Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession value = nullptr;
	check_hresult(shim()->get_ContinuousRecognitionSession(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognizerState impl_ISpeechRecognizer2<T>::State() const
{
	Windows::Media::SpeechRecognition::SpeechRecognizerState value = {};
	check_hresult(shim()->get_State(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISpeechRecognizer2<T>::StopRecognitionAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_StopRecognitionAsync(put(value)));
	return value;
}

template <typename T> long long impl_ISpeechRecognizer2<T>::HypothesisGenerated(Windows::Foundation::ITypedEventHandler<Windows::Media::SpeechRecognition::SpeechRecognizer, Windows::Media::SpeechRecognition::SpeechRecognitionHypothesisGeneratedEventArgs> const & value) const
{
	long long returnValue = {};
	check_hresult(shim()->add_HypothesisGenerated(get(value), &returnValue));
	return returnValue;
}

template <typename T> template <typename F> long long impl_ISpeechRecognizer2<T>::HypothesisGenerated(F value) const
{
	return HypothesisGenerated(Windows::Foundation::TypedEventHandler<Windows::Media::SpeechRecognition::SpeechRecognizer, Windows::Media::SpeechRecognition::SpeechRecognitionHypothesisGeneratedEventArgs>(value));
}

template <typename T> void impl_ISpeechRecognizer2<T>::HypothesisGenerated(long long const value) const
{
	check_hresult(shim()->remove_HypothesisGenerated(value));
}

template <typename T> String impl_ISpeechRecognitionHypothesis<T>::Text() const
{
	String value;
	check_hresult(shim()->get_Text(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionHypothesis impl_ISpeechRecognitionHypothesisGeneratedEventArgs<T>::Hypothesis() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionHypothesis value = nullptr;
	check_hresult(shim()->get_Hypothesis(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_ISpeechContinuousRecognitionSession<T>::AutoStopSilenceTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_AutoStopSilenceTimeout(&value));
	return value;
}

template <typename T> void impl_ISpeechContinuousRecognitionSession<T>::AutoStopSilenceTimeout(Windows::Foundation::TimeSpan const & value) const
{
	check_hresult(shim()->put_AutoStopSilenceTimeout(value));
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISpeechContinuousRecognitionSession<T>::StartAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_StartAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISpeechContinuousRecognitionSession<T>::StartAsync(Windows::Media::SpeechRecognition::SpeechContinuousRecognitionMode const mode) const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_StartWithModeAsync(mode, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISpeechContinuousRecognitionSession<T>::StopAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_StopAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISpeechContinuousRecognitionSession<T>::CancelAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_CancelAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISpeechContinuousRecognitionSession<T>::PauseAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_PauseAsync(put(value)));
	return value;
}

template <typename T> void impl_ISpeechContinuousRecognitionSession<T>::Resume() const
{
	check_hresult(shim()->abi_Resume());
}

template <typename T> long long impl_ISpeechContinuousRecognitionSession<T>::Completed(Windows::Foundation::ITypedEventHandler<Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession, Windows::Media::SpeechRecognition::SpeechContinuousRecognitionCompletedEventArgs> const & value) const
{
	long long returnValue = {};
	check_hresult(shim()->add_Completed(get(value), &returnValue));
	return returnValue;
}

template <typename T> template <typename F> long long impl_ISpeechContinuousRecognitionSession<T>::Completed(F value) const
{
	return Completed(Windows::Foundation::TypedEventHandler<Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession, Windows::Media::SpeechRecognition::SpeechContinuousRecognitionCompletedEventArgs>(value));
}

template <typename T> void impl_ISpeechContinuousRecognitionSession<T>::Completed(long long const value) const
{
	check_hresult(shim()->remove_Completed(value));
}

template <typename T> long long impl_ISpeechContinuousRecognitionSession<T>::ResultGenerated(Windows::Foundation::ITypedEventHandler<Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession, Windows::Media::SpeechRecognition::SpeechContinuousRecognitionResultGeneratedEventArgs> const & value) const
{
	long long returnValue = {};
	check_hresult(shim()->add_ResultGenerated(get(value), &returnValue));
	return returnValue;
}

template <typename T> template <typename F> long long impl_ISpeechContinuousRecognitionSession<T>::ResultGenerated(F value) const
{
	return ResultGenerated(Windows::Foundation::TypedEventHandler<Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession, Windows::Media::SpeechRecognition::SpeechContinuousRecognitionResultGeneratedEventArgs>(value));
}

template <typename T> void impl_ISpeechContinuousRecognitionSession<T>::ResultGenerated(long long const value) const
{
	check_hresult(shim()->remove_ResultGenerated(value));
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionResultStatus impl_ISpeechContinuousRecognitionCompletedEventArgs<T>::Status() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionResultStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionResult impl_ISpeechContinuousRecognitionResultGeneratedEventArgs<T>::Result() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionResult value = nullptr;
	check_hresult(shim()->get_Result(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Networking {

template <typename T> int impl_IHostNameStatics<T>::Compare(StringReference const & value1, StringReference const & value2) const
{
	int result = {};
	check_hresult(shim()->abi_Compare(get(value1), get(value2), &result));
	return result;
}

template <typename T> Windows::Networking::Connectivity::IPInformation impl_IHostName<T>::IPInformation() const
{
	Windows::Networking::Connectivity::IPInformation value = nullptr;
	check_hresult(shim()->get_IPInformation(put(value)));
	return value;
}

template <typename T> String impl_IHostName<T>::RawName() const
{
	String value;
	check_hresult(shim()->get_RawName(put(value)));
	return value;
}

template <typename T> String impl_IHostName<T>::DisplayName() const
{
	String value;
	check_hresult(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IHostName<T>::CanonicalName() const
{
	String value;
	check_hresult(shim()->get_CanonicalName(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostNameType impl_IHostName<T>::Type() const
{
	Windows::Networking::HostNameType value = {};
	check_hresult(shim()->get_Type(&value));
	return value;
}

template <typename T> bool impl_IHostName<T>::IsEqual(Windows::Networking::HostName const & hostName) const
{
	bool isEqual = {};
	check_hresult(shim()->abi_IsEqual(get(hostName), put(isEqual)));
	return isEqual;
}

template <typename T> Windows::Networking::HostName impl_IHostNameFactory<T>::CreateHostName(StringReference const & hostName) const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->abi_CreateHostName(get(hostName), put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IEndpointPair<T>::LocalHostName() const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->get_LocalHostName(put(value)));
	return value;
}

template <typename T> void impl_IEndpointPair<T>::LocalHostName(Windows::Networking::HostName const & value) const
{
	check_hresult(shim()->put_LocalHostName(get(value)));
}

template <typename T> String impl_IEndpointPair<T>::LocalServiceName() const
{
	String value;
	check_hresult(shim()->get_LocalServiceName(put(value)));
	return value;
}

template <typename T> void impl_IEndpointPair<T>::LocalServiceName(StringReference const & value) const
{
	check_hresult(shim()->put_LocalServiceName(get(value)));
}

template <typename T> Windows::Networking::HostName impl_IEndpointPair<T>::RemoteHostName() const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->get_RemoteHostName(put(value)));
	return value;
}

template <typename T> void impl_IEndpointPair<T>::RemoteHostName(Windows::Networking::HostName const & value) const
{
	check_hresult(shim()->put_RemoteHostName(get(value)));
}

template <typename T> String impl_IEndpointPair<T>::RemoteServiceName() const
{
	String value;
	check_hresult(shim()->get_RemoteServiceName(put(value)));
	return value;
}

template <typename T> void impl_IEndpointPair<T>::RemoteServiceName(StringReference const & value) const
{
	check_hresult(shim()->put_RemoteServiceName(get(value)));
}

template <typename T> Windows::Networking::EndpointPair impl_IEndpointPairFactory<T>::CreateEndpointPair(Windows::Networking::HostName const & localHostName, StringReference const & localServiceName, Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName) const
{
	Windows::Networking::EndpointPair value = nullptr;
	check_hresult(shim()->abi_CreateEndpointPair(get(localHostName), get(localServiceName), get(remoteHostName), get(remoteServiceName), put(value)));
	return value;
}

}}}

namespace winrt { namespace Windows { namespace Networking { namespace Connectivity {

template <typename T> void impl_INetworkStatusChangedEventHandler<T>::Invoke(IInspectable const & sender) const
{
	check_hresult(shim()->abi_Invoke(get(sender)));
}

template <typename T> unsigned long long impl_IDataUsage<T>::BytesSent() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_BytesSent(&value));
	return value;
}

template <typename T> unsigned long long impl_IDataUsage<T>::BytesReceived() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_BytesReceived(&value));
	return value;
}

template <typename T> unsigned impl_IDataPlanUsage<T>::MegabytesUsed() const
{
	unsigned value = {};
	check_hresult(shim()->get_MegabytesUsed(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IDataPlanUsage<T>::LastSyncTime() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_LastSyncTime(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::DataPlanUsage impl_IDataPlanStatus<T>::DataPlanUsage() const
{
	Windows::Networking::Connectivity::DataPlanUsage value = nullptr;
	check_hresult(shim()->get_DataPlanUsage(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IDataPlanStatus<T>::DataLimitInMegabytes() const
{
	Windows::Foundation::IReference<unsigned> value;
	check_hresult(shim()->get_DataLimitInMegabytes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IDataPlanStatus<T>::InboundBitsPerSecond() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check_hresult(shim()->get_InboundBitsPerSecond(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IDataPlanStatus<T>::OutboundBitsPerSecond() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check_hresult(shim()->get_OutboundBitsPerSecond(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IDataPlanStatus<T>::NextBillingCycle() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check_hresult(shim()->get_NextBillingCycle(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IDataPlanStatus<T>::MaxTransferSizeInMegabytes() const
{
	Windows::Foundation::IReference<unsigned> value;
	check_hresult(shim()->get_MaxTransferSizeInMegabytes(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkCostType impl_IConnectionCost<T>::NetworkCostType() const
{
	Windows::Networking::Connectivity::NetworkCostType value = {};
	check_hresult(shim()->get_NetworkCostType(&value));
	return value;
}

template <typename T> bool impl_IConnectionCost<T>::Roaming() const
{
	bool value = {};
	check_hresult(shim()->get_Roaming(put(value)));
	return value;
}

template <typename T> bool impl_IConnectionCost<T>::OverDataLimit() const
{
	bool value = {};
	check_hresult(shim()->get_OverDataLimit(put(value)));
	return value;
}

template <typename T> bool impl_IConnectionCost<T>::ApproachingDataLimit() const
{
	bool value = {};
	check_hresult(shim()->get_ApproachingDataLimit(put(value)));
	return value;
}

template <typename T> bool impl_IConnectionCost2<T>::BackgroundDataUsageRestricted() const
{
	bool value = {};
	check_hresult(shim()->get_BackgroundDataUsageRestricted(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkAuthenticationType impl_INetworkSecuritySettings<T>::NetworkAuthenticationType() const
{
	Windows::Networking::Connectivity::NetworkAuthenticationType value = {};
	check_hresult(shim()->get_NetworkAuthenticationType(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkEncryptionType impl_INetworkSecuritySettings<T>::NetworkEncryptionType() const
{
	Windows::Networking::Connectivity::NetworkEncryptionType value = {};
	check_hresult(shim()->get_NetworkEncryptionType(&value));
	return value;
}

template <typename T> String impl_IConnectionProfile<T>::ProfileName() const
{
	String value;
	check_hresult(shim()->get_ProfileName(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkConnectivityLevel impl_IConnectionProfile<T>::GetNetworkConnectivityLevel() const
{
	Windows::Networking::Connectivity::NetworkConnectivityLevel value = {};
	check_hresult(shim()->abi_GetNetworkConnectivityLevel(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IConnectionProfile<T>::GetNetworkNames() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->abi_GetNetworkNames(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::ConnectionCost impl_IConnectionProfile<T>::GetConnectionCost() const
{
	Windows::Networking::Connectivity::ConnectionCost value = nullptr;
	check_hresult(shim()->abi_GetConnectionCost(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::DataPlanStatus impl_IConnectionProfile<T>::GetDataPlanStatus() const
{
	Windows::Networking::Connectivity::DataPlanStatus value = nullptr;
	check_hresult(shim()->abi_GetDataPlanStatus(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkAdapter impl_IConnectionProfile<T>::NetworkAdapter() const
{
	Windows::Networking::Connectivity::NetworkAdapter value = nullptr;
	check_hresult(shim()->get_NetworkAdapter(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::DataUsage impl_IConnectionProfile<T>::GetLocalUsage(Windows::Foundation::DateTime const & StartTime, Windows::Foundation::DateTime const & EndTime) const
{
	Windows::Networking::Connectivity::DataUsage value = nullptr;
	check_hresult(shim()->abi_GetLocalUsage(StartTime, EndTime, put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::DataUsage impl_IConnectionProfile<T>::GetLocalUsage(Windows::Foundation::DateTime const & StartTime, Windows::Foundation::DateTime const & EndTime, Windows::Networking::Connectivity::RoamingStates const States) const
{
	Windows::Networking::Connectivity::DataUsage value = nullptr;
	check_hresult(shim()->abi_GetLocalUsagePerRoamingStates(StartTime, EndTime, States, put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkSecuritySettings impl_IConnectionProfile<T>::NetworkSecuritySettings() const
{
	Windows::Networking::Connectivity::NetworkSecuritySettings value = nullptr;
	check_hresult(shim()->get_NetworkSecuritySettings(put(value)));
	return value;
}

template <typename T> String impl_IWwanConnectionProfileDetails<T>::HomeProviderId() const
{
	String value;
	check_hresult(shim()->get_HomeProviderId(put(value)));
	return value;
}

template <typename T> String impl_IWwanConnectionProfileDetails<T>::AccessPointName() const
{
	String value;
	check_hresult(shim()->get_AccessPointName(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::WwanNetworkRegistrationState impl_IWwanConnectionProfileDetails<T>::GetNetworkRegistrationState() const
{
	Windows::Networking::Connectivity::WwanNetworkRegistrationState value = {};
	check_hresult(shim()->abi_GetNetworkRegistrationState(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::WwanDataClass impl_IWwanConnectionProfileDetails<T>::GetCurrentDataClass() const
{
	Windows::Networking::Connectivity::WwanDataClass value = {};
	check_hresult(shim()->abi_GetCurrentDataClass(&value));
	return value;
}

template <typename T> String impl_IWlanConnectionProfileDetails<T>::GetConnectedSsid() const
{
	String value;
	check_hresult(shim()->abi_GetConnectedSsid(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IConnectivityInterval<T>::StartTime() const
{
	Windows::Foundation::DateTime startTime = {};
	check_hresult(shim()->get_StartTime(&startTime));
	return startTime;
}

template <typename T> Windows::Foundation::TimeSpan impl_IConnectivityInterval<T>::ConnectionDuration() const
{
	Windows::Foundation::TimeSpan duration = {};
	check_hresult(shim()->get_ConnectionDuration(&duration));
	return duration;
}

template <typename T> unsigned long long impl_INetworkUsage<T>::BytesSent() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_BytesSent(&value));
	return value;
}

template <typename T> unsigned long long impl_INetworkUsage<T>::BytesReceived() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_BytesReceived(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_INetworkUsage<T>::ConnectionDuration() const
{
	Windows::Foundation::TimeSpan duration = {};
	check_hresult(shim()->get_ConnectionDuration(&duration));
	return duration;
}

template <typename T> bool impl_IConnectionProfile2<T>::IsWwanConnectionProfile() const
{
	bool value = {};
	check_hresult(shim()->get_IsWwanConnectionProfile(put(value)));
	return value;
}

template <typename T> bool impl_IConnectionProfile2<T>::IsWlanConnectionProfile() const
{
	bool value = {};
	check_hresult(shim()->get_IsWlanConnectionProfile(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::WwanConnectionProfileDetails impl_IConnectionProfile2<T>::WwanConnectionProfileDetails() const
{
	Windows::Networking::Connectivity::WwanConnectionProfileDetails value = nullptr;
	check_hresult(shim()->get_WwanConnectionProfileDetails(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::WlanConnectionProfileDetails impl_IConnectionProfile2<T>::WlanConnectionProfileDetails() const
{
	Windows::Networking::Connectivity::WlanConnectionProfileDetails value = nullptr;
	check_hresult(shim()->get_WlanConnectionProfileDetails(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<GUID> impl_IConnectionProfile2<T>::ServiceProviderGuid() const
{
	Windows::Foundation::IReference<GUID> value;
	check_hresult(shim()->get_ServiceProviderGuid(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<byte> impl_IConnectionProfile2<T>::GetSignalBars() const
{
	Windows::Foundation::IReference<byte> value;
	check_hresult(shim()->abi_GetSignalBars(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::DomainConnectivityLevel impl_IConnectionProfile2<T>::GetDomainConnectivityLevel() const
{
	Windows::Networking::Connectivity::DomainConnectivityLevel value = {};
	check_hresult(shim()->abi_GetDomainConnectivityLevel(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage>> impl_IConnectionProfile2<T>::GetNetworkUsageAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::DateTime const & endTime, Windows::Networking::Connectivity::DataUsageGranularity const granularity, Windows::Networking::Connectivity::NetworkUsageStates const & states) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage>> value;
	check_hresult(shim()->abi_GetNetworkUsageAsync(startTime, endTime, granularity, states, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval>> impl_IConnectionProfile2<T>::GetConnectivityIntervalsAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::DateTime const & endTime, Windows::Networking::Connectivity::NetworkUsageStates const & states) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval>> value;
	check_hresult(shim()->abi_GetConnectivityIntervalsAsync(startTime, endTime, states, put(value)));
	return value;
}

template <typename T> unsigned impl_ILanIdentifierData<T>::Type() const
{
	unsigned value = {};
	check_hresult(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<byte> impl_ILanIdentifierData<T>::Value() const
{
	Windows::Foundation::Collections::IVectorView<byte> value;
	check_hresult(shim()->get_Value(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::LanIdentifierData impl_ILanIdentifier<T>::InfrastructureId() const
{
	Windows::Networking::Connectivity::LanIdentifierData value = nullptr;
	check_hresult(shim()->get_InfrastructureId(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::LanIdentifierData impl_ILanIdentifier<T>::PortId() const
{
	Windows::Networking::Connectivity::LanIdentifierData value = nullptr;
	check_hresult(shim()->get_PortId(put(value)));
	return value;
}

template <typename T> GUID impl_ILanIdentifier<T>::NetworkAdapterId() const
{
	GUID value = {};
	check_hresult(shim()->get_NetworkAdapterId(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> impl_INetworkInformationStatics<T>::GetConnectionProfiles() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> value;
	check_hresult(shim()->abi_GetConnectionProfiles(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::ConnectionProfile impl_INetworkInformationStatics<T>::GetInternetConnectionProfile() const
{
	Windows::Networking::Connectivity::ConnectionProfile value = nullptr;
	check_hresult(shim()->abi_GetInternetConnectionProfile(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::LanIdentifier> impl_INetworkInformationStatics<T>::GetLanIdentifiers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::LanIdentifier> value;
	check_hresult(shim()->abi_GetLanIdentifiers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> impl_INetworkInformationStatics<T>::GetHostNames() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> value;
	check_hresult(shim()->abi_GetHostNames(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration> impl_INetworkInformationStatics<T>::GetProxyConfigurationAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration> value;
	check_hresult(shim()->abi_GetProxyConfigurationAsync(get(uri), put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> impl_INetworkInformationStatics<T>::GetSortedEndpointPairs(Windows::Foundation::Collections::IIterable<Windows::Networking::EndpointPair> const & destinationList, Windows::Networking::HostNameSortOptions const sortOptions) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> value;
	check_hresult(shim()->abi_GetSortedEndpointPairs(get(destinationList), sortOptions, put(value)));
	return value;
}

template <typename T> long long impl_INetworkInformationStatics<T>::NetworkStatusChanged(Windows::Networking::Connectivity::INetworkStatusChangedEventHandler const & networkStatusHandler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_NetworkStatusChanged(get(networkStatusHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_INetworkInformationStatics<T>::NetworkStatusChanged(F networkStatusHandler) const
{
	return NetworkStatusChanged(Windows::Networking::Connectivity::NetworkStatusChangedEventHandler(networkStatusHandler));
}

template <typename T> void impl_INetworkInformationStatics<T>::NetworkStatusChanged(long long const eventCookie) const
{
	check_hresult(shim()->remove_NetworkStatusChanged(eventCookie));
}

template <typename T> void impl_IConnectionProfileFilter<T>::IsConnected(bool const value) const
{
	check_hresult(shim()->put_IsConnected(value));
}

template <typename T> bool impl_IConnectionProfileFilter<T>::IsConnected() const
{
	bool value = {};
	check_hresult(shim()->get_IsConnected(put(value)));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter<T>::IsWwanConnectionProfile(bool const value) const
{
	check_hresult(shim()->put_IsWwanConnectionProfile(value));
}

template <typename T> bool impl_IConnectionProfileFilter<T>::IsWwanConnectionProfile() const
{
	bool value = {};
	check_hresult(shim()->get_IsWwanConnectionProfile(put(value)));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter<T>::IsWlanConnectionProfile(bool const value) const
{
	check_hresult(shim()->put_IsWlanConnectionProfile(value));
}

template <typename T> bool impl_IConnectionProfileFilter<T>::IsWlanConnectionProfile() const
{
	bool value = {};
	check_hresult(shim()->get_IsWlanConnectionProfile(put(value)));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter<T>::NetworkCostType(Windows::Networking::Connectivity::NetworkCostType const value) const
{
	check_hresult(shim()->put_NetworkCostType(value));
}

template <typename T> Windows::Networking::Connectivity::NetworkCostType impl_IConnectionProfileFilter<T>::NetworkCostType() const
{
	Windows::Networking::Connectivity::NetworkCostType value = {};
	check_hresult(shim()->get_NetworkCostType(&value));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter<T>::ServiceProviderGuid(Windows::Foundation::IReference<GUID> const & value) const
{
	check_hresult(shim()->put_ServiceProviderGuid(get(value)));
}

template <typename T> Windows::Foundation::IReference<GUID> impl_IConnectionProfileFilter<T>::ServiceProviderGuid() const
{
	Windows::Foundation::IReference<GUID> value;
	check_hresult(shim()->get_ServiceProviderGuid(put(value)));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter2<T>::IsRoaming(Windows::Foundation::IReference<bool> const & value) const
{
	check_hresult(shim()->put_IsRoaming(get(value)));
}

template <typename T> Windows::Foundation::IReference<bool> impl_IConnectionProfileFilter2<T>::IsRoaming() const
{
	Windows::Foundation::IReference<bool> value;
	check_hresult(shim()->get_IsRoaming(put(value)));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter2<T>::IsOverDataLimit(Windows::Foundation::IReference<bool> const & value) const
{
	check_hresult(shim()->put_IsOverDataLimit(get(value)));
}

template <typename T> Windows::Foundation::IReference<bool> impl_IConnectionProfileFilter2<T>::IsOverDataLimit() const
{
	Windows::Foundation::IReference<bool> value;
	check_hresult(shim()->get_IsOverDataLimit(put(value)));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter2<T>::IsBackgroundDataUsageRestricted(Windows::Foundation::IReference<bool> const & value) const
{
	check_hresult(shim()->put_IsBackgroundDataUsageRestricted(get(value)));
}

template <typename T> Windows::Foundation::IReference<bool> impl_IConnectionProfileFilter2<T>::IsBackgroundDataUsageRestricted() const
{
	Windows::Foundation::IReference<bool> value;
	check_hresult(shim()->get_IsBackgroundDataUsageRestricted(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IConnectionProfileFilter2<T>::RawData() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_RawData(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile>> impl_INetworkInformationStatics2<T>::FindConnectionProfilesAsync(Windows::Networking::Connectivity::ConnectionProfileFilter const & pProfileFilter) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile>> value;
	check_hresult(shim()->abi_FindConnectionProfilesAsync(get(pProfileFilter), put(value)));
	return value;
}

template <typename T> GUID impl_INetworkItem<T>::NetworkId() const
{
	GUID value = {};
	check_hresult(shim()->get_NetworkId(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkTypes impl_INetworkItem<T>::GetNetworkTypes() const
{
	Windows::Networking::Connectivity::NetworkTypes value = {};
	check_hresult(shim()->abi_GetNetworkTypes(&value));
	return value;
}

template <typename T> unsigned long long impl_INetworkAdapter<T>::OutboundMaxBitsPerSecond() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_OutboundMaxBitsPerSecond(&value));
	return value;
}

template <typename T> unsigned long long impl_INetworkAdapter<T>::InboundMaxBitsPerSecond() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_InboundMaxBitsPerSecond(&value));
	return value;
}

template <typename T> unsigned impl_INetworkAdapter<T>::IanaInterfaceType() const
{
	unsigned value = {};
	check_hresult(shim()->get_IanaInterfaceType(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkItem impl_INetworkAdapter<T>::NetworkItem() const
{
	Windows::Networking::Connectivity::NetworkItem value = nullptr;
	check_hresult(shim()->get_NetworkItem(put(value)));
	return value;
}

template <typename T> GUID impl_INetworkAdapter<T>::NetworkAdapterId() const
{
	GUID value = {};
	check_hresult(shim()->get_NetworkAdapterId(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile> impl_INetworkAdapter<T>::GetConnectedProfileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile> value;
	check_hresult(shim()->abi_GetConnectedProfileAsync(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkAdapter impl_IIPInformation<T>::NetworkAdapter() const
{
	Windows::Networking::Connectivity::NetworkAdapter value = nullptr;
	check_hresult(shim()->get_NetworkAdapter(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<byte> impl_IIPInformation<T>::PrefixLength() const
{
	Windows::Foundation::IReference<byte> value;
	check_hresult(shim()->get_PrefixLength(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Foundation::Uri> impl_IProxyConfiguration<T>::ProxyUris() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Foundation::Uri> value;
	check_hresult(shim()->get_ProxyUris(put(value)));
	return value;
}

template <typename T> bool impl_IProxyConfiguration<T>::CanConnectDirectly() const
{
	bool value = {};
	check_hresult(shim()->get_CanConnectDirectly(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::ConnectionProfile impl_IConnectionSession<T>::ConnectionProfile() const
{
	Windows::Networking::Connectivity::ConnectionProfile value = nullptr;
	check_hresult(shim()->get_ConnectionProfile(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::ConnectionProfile impl_IRoutePolicy<T>::ConnectionProfile() const
{
	Windows::Networking::Connectivity::ConnectionProfile value = nullptr;
	check_hresult(shim()->get_ConnectionProfile(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IRoutePolicy<T>::HostName() const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->get_HostName(put(value)));
	return value;
}

template <typename T> Windows::Networking::DomainNameType impl_IRoutePolicy<T>::HostNameType() const
{
	Windows::Networking::DomainNameType value = {};
	check_hresult(shim()->get_HostNameType(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::RoutePolicy impl_IRoutePolicyFactory<T>::CreateRoutePolicy(Windows::Networking::Connectivity::ConnectionProfile const & connectionProfile, Windows::Networking::HostName const & hostName, Windows::Networking::DomainNameType const type) const
{
	Windows::Networking::Connectivity::RoutePolicy routePolicy = nullptr;
	check_hresult(shim()->abi_CreateRoutePolicy(get(connectionProfile), get(hostName), type, put(routePolicy)));
	return routePolicy;
}

template <typename T> String impl_ICellularApnContext<T>::ProviderId() const
{
	String value;
	check_hresult(shim()->get_ProviderId(put(value)));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::ProviderId(StringReference const & value) const
{
	check_hresult(shim()->put_ProviderId(get(value)));
}

template <typename T> String impl_ICellularApnContext<T>::AccessPointName() const
{
	String value;
	check_hresult(shim()->get_AccessPointName(put(value)));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::AccessPointName(StringReference const & value) const
{
	check_hresult(shim()->put_AccessPointName(get(value)));
}

template <typename T> String impl_ICellularApnContext<T>::UserName() const
{
	String value;
	check_hresult(shim()->get_UserName(put(value)));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::UserName(StringReference const & value) const
{
	check_hresult(shim()->put_UserName(get(value)));
}

template <typename T> String impl_ICellularApnContext<T>::Password() const
{
	String value;
	check_hresult(shim()->get_Password(put(value)));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::Password(StringReference const & value) const
{
	check_hresult(shim()->put_Password(get(value)));
}

template <typename T> bool impl_ICellularApnContext<T>::IsCompressionEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_IsCompressionEnabled(put(value)));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::IsCompressionEnabled(bool const value) const
{
	check_hresult(shim()->put_IsCompressionEnabled(value));
}

template <typename T> Windows::Networking::Connectivity::CellularApnAuthenticationType impl_ICellularApnContext<T>::AuthenticationType() const
{
	Windows::Networking::Connectivity::CellularApnAuthenticationType value = {};
	check_hresult(shim()->get_AuthenticationType(&value));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::AuthenticationType(Windows::Networking::Connectivity::CellularApnAuthenticationType const value) const
{
	check_hresult(shim()->put_AuthenticationType(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession> impl_IConnectivityManagerStatics<T>::AcquireConnectionAsync(Windows::Networking::Connectivity::CellularApnContext const & cellularApnContext) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession> operation;
	check_hresult(shim()->abi_AcquireConnectionAsync(get(cellularApnContext), put(operation)));
	return operation;
}

template <typename T> void impl_IConnectivityManagerStatics<T>::AddHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy) const
{
	check_hresult(shim()->abi_AddHttpRoutePolicy(get(routePolicy)));
}

template <typename T> void impl_IConnectivityManagerStatics<T>::RemoveHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy) const
{
	check_hresult(shim()->abi_RemoveHttpRoutePolicy(get(routePolicy)));
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewInternetConnectionProfile() const
{
	bool value = {};
	check_hresult(shim()->get_HasNewInternetConnectionProfile(put(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewConnectionCost() const
{
	bool value = {};
	check_hresult(shim()->get_HasNewConnectionCost(put(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewNetworkConnectivityLevel() const
{
	bool value = {};
	check_hresult(shim()->get_HasNewNetworkConnectivityLevel(put(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewDomainConnectivityLevel() const
{
	bool value = {};
	check_hresult(shim()->get_HasNewDomainConnectivityLevel(put(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewHostNameList() const
{
	bool value = {};
	check_hresult(shim()->get_HasNewHostNameList(put(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewWwanRegistrationState() const
{
	bool value = {};
	check_hresult(shim()->get_HasNewWwanRegistrationState(put(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails2<T>::HasNewTetheringOperationalState() const
{
	bool value = {};
	check_hresult(shim()->get_HasNewTetheringOperationalState(put(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails2<T>::HasNewTetheringClientCount() const
{
	bool value = {};
	check_hresult(shim()->get_HasNewTetheringClientCount(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Sockets {

template <typename T> String impl_IControlChannelTrigger<T>::ControlChannelTriggerId() const
{
	String value;
	check_hresult(shim()->get_ControlChannelTriggerId(put(value)));
	return value;
}

template <typename T> unsigned impl_IControlChannelTrigger<T>::ServerKeepAliveIntervalInMinutes() const
{
	unsigned value = {};
	check_hresult(shim()->get_ServerKeepAliveIntervalInMinutes(&value));
	return value;
}

template <typename T> void impl_IControlChannelTrigger<T>::ServerKeepAliveIntervalInMinutes(unsigned const value) const
{
	check_hresult(shim()->put_ServerKeepAliveIntervalInMinutes(value));
}

template <typename T> unsigned impl_IControlChannelTrigger<T>::CurrentKeepAliveIntervalInMinutes() const
{
	unsigned value = {};
	check_hresult(shim()->get_CurrentKeepAliveIntervalInMinutes(&value));
	return value;
}

template <typename T> IInspectable impl_IControlChannelTrigger<T>::TransportObject() const
{
	IInspectable value;
	check_hresult(shim()->get_TransportObject(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::IBackgroundTrigger impl_IControlChannelTrigger<T>::KeepAliveTrigger() const
{
	Windows::ApplicationModel::Background::IBackgroundTrigger trigger;
	check_hresult(shim()->get_KeepAliveTrigger(put(trigger)));
	return trigger;
}

template <typename T> Windows::ApplicationModel::Background::IBackgroundTrigger impl_IControlChannelTrigger<T>::PushNotificationTrigger() const
{
	Windows::ApplicationModel::Background::IBackgroundTrigger trigger;
	check_hresult(shim()->get_PushNotificationTrigger(put(trigger)));
	return trigger;
}

template <typename T> void impl_IControlChannelTrigger<T>::UsingTransport(IInspectable const & transport) const
{
	check_hresult(shim()->abi_UsingTransport(get(transport)));
}

template <typename T> Windows::Networking::Sockets::ControlChannelTriggerStatus impl_IControlChannelTrigger<T>::WaitForPushEnabled() const
{
	Windows::Networking::Sockets::ControlChannelTriggerStatus channelTriggerStatus = {};
	check_hresult(shim()->abi_WaitForPushEnabled(&channelTriggerStatus));
	return channelTriggerStatus;
}

template <typename T> void impl_IControlChannelTrigger<T>::DecreaseNetworkKeepAliveInterval() const
{
	check_hresult(shim()->abi_DecreaseNetworkKeepAliveInterval());
}

template <typename T> void impl_IControlChannelTrigger<T>::FlushTransport() const
{
	check_hresult(shim()->abi_FlushTransport());
}

template <typename T> Windows::Networking::Sockets::ControlChannelTrigger impl_IControlChannelTriggerFactory<T>::CreateControlChannelTrigger(StringReference const & channelId, unsigned const serverKeepAliveIntervalInMinutes) const
{
	Windows::Networking::Sockets::ControlChannelTrigger notificationChannel = nullptr;
	check_hresult(shim()->abi_CreateControlChannelTrigger(get(channelId), serverKeepAliveIntervalInMinutes, put(notificationChannel)));
	return notificationChannel;
}

template <typename T> Windows::Networking::Sockets::ControlChannelTrigger impl_IControlChannelTriggerFactory<T>::CreateControlChannelTriggerEx(StringReference const & channelId, unsigned const serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType const resourceRequestType) const
{
	Windows::Networking::Sockets::ControlChannelTrigger notificationChannel = nullptr;
	check_hresult(shim()->abi_CreateControlChannelTriggerEx(get(channelId), serverKeepAliveIntervalInMinutes, resourceRequestType, put(notificationChannel)));
	return notificationChannel;
}

template <typename T> Windows::Networking::Sockets::ControlChannelTrigger impl_IControlChannelTriggerEventDetails<T>::ControlChannelTrigger() const
{
	Windows::Networking::Sockets::ControlChannelTrigger value = nullptr;
	check_hresult(shim()->get_ControlChannelTrigger(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::ControlChannelTriggerResetReason impl_IControlChannelTriggerResetEventDetails<T>::ResetReason() const
{
	Windows::Networking::Sockets::ControlChannelTriggerResetReason value = {};
	check_hresult(shim()->get_ResetReason(&value));
	return value;
}

template <typename T> bool impl_IControlChannelTriggerResetEventDetails<T>::HardwareSlotReset() const
{
	bool value = {};
	check_hresult(shim()->get_HardwareSlotReset(put(value)));
	return value;
}

template <typename T> bool impl_IControlChannelTriggerResetEventDetails<T>::SoftwareSlotReset() const
{
	bool value = {};
	check_hresult(shim()->get_SoftwareSlotReset(put(value)));
	return value;
}

template <typename T> GUID impl_ISocketActivityInformation<T>::TaskId() const
{
	GUID value = {};
	check_hresult(shim()->get_TaskId(&value));
	return value;
}

template <typename T> String impl_ISocketActivityInformation<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketActivityKind impl_ISocketActivityInformation<T>::SocketKind() const
{
	Windows::Networking::Sockets::SocketActivityKind value = {};
	check_hresult(shim()->get_SocketKind(&value));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketActivityContext impl_ISocketActivityInformation<T>::Context() const
{
	Windows::Networking::Sockets::SocketActivityContext value = nullptr;
	check_hresult(shim()->get_Context(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::DatagramSocket impl_ISocketActivityInformation<T>::DatagramSocket() const
{
	Windows::Networking::Sockets::DatagramSocket value = nullptr;
	check_hresult(shim()->get_DatagramSocket(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocket impl_ISocketActivityInformation<T>::StreamSocket() const
{
	Windows::Networking::Sockets::StreamSocket value = nullptr;
	check_hresult(shim()->get_StreamSocket(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocketListener impl_ISocketActivityInformation<T>::StreamSocketListener() const
{
	Windows::Networking::Sockets::StreamSocketListener value = nullptr;
	check_hresult(shim()->get_StreamSocketListener(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketActivityTriggerReason impl_ISocketActivityTriggerDetails<T>::Reason() const
{
	Windows::Networking::Sockets::SocketActivityTriggerReason value = {};
	check_hresult(shim()->get_Reason(&value));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketActivityInformation impl_ISocketActivityTriggerDetails<T>::SocketInformation() const
{
	Windows::Networking::Sockets::SocketActivityInformation value = nullptr;
	check_hresult(shim()->get_SocketInformation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::Networking::Sockets::SocketActivityInformation> impl_ISocketActivityInformationStatics<T>::AllSockets() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::Networking::Sockets::SocketActivityInformation> sockets;
	check_hresult(shim()->get_AllSockets(put(sockets)));
	return sockets;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ISocketActivityContext<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_Data(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketActivityContext impl_ISocketActivityContextFactory<T>::Create(Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Networking::Sockets::SocketActivityContext context = nullptr;
	check_hresult(shim()->abi_Create(get(data), put(context)));
	return context;
}

template <typename T> Windows::Networking::HostName impl_IDatagramSocketMessageReceivedEventArgs<T>::RemoteAddress() const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->get_RemoteAddress(put(value)));
	return value;
}

template <typename T> String impl_IDatagramSocketMessageReceivedEventArgs<T>::RemotePort() const
{
	String value;
	check_hresult(shim()->get_RemotePort(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IDatagramSocketMessageReceivedEventArgs<T>::LocalAddress() const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->get_LocalAddress(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::DataReader impl_IDatagramSocketMessageReceivedEventArgs<T>::GetDataReader() const
{
	Windows::Storage::Streams::DataReader dataReader = nullptr;
	check_hresult(shim()->abi_GetDataReader(put(dataReader)));
	return dataReader;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IDatagramSocketMessageReceivedEventArgs<T>::GetDataStream() const
{
	Windows::Storage::Streams::IInputStream inputStream;
	check_hresult(shim()->abi_GetDataStream(put(inputStream)));
	return inputStream;
}

template <typename T> Windows::Networking::Sockets::SocketMessageType impl_IMessageWebSocketMessageReceivedEventArgs<T>::MessageType() const
{
	Windows::Networking::Sockets::SocketMessageType value = {};
	check_hresult(shim()->get_MessageType(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::DataReader impl_IMessageWebSocketMessageReceivedEventArgs<T>::GetDataReader() const
{
	Windows::Storage::Streams::DataReader dataReader = nullptr;
	check_hresult(shim()->abi_GetDataReader(put(dataReader)));
	return dataReader;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IMessageWebSocketMessageReceivedEventArgs<T>::GetDataStream() const
{
	Windows::Storage::Streams::IInputStream inputStream;
	check_hresult(shim()->abi_GetDataStream(put(inputStream)));
	return inputStream;
}

template <typename T> unsigned short impl_IWebSocketClosedEventArgs<T>::Code() const
{
	unsigned short value = {};
	check_hresult(shim()->get_Code(&value));
	return value;
}

template <typename T> String impl_IWebSocketClosedEventArgs<T>::Reason() const
{
	String value;
	check_hresult(shim()->get_Reason(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IDatagramSocketInformation<T>::LocalAddress() const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->get_LocalAddress(put(value)));
	return value;
}

template <typename T> String impl_IDatagramSocketInformation<T>::LocalPort() const
{
	String value;
	check_hresult(shim()->get_LocalPort(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IDatagramSocketInformation<T>::RemoteAddress() const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->get_RemoteAddress(put(value)));
	return value;
}

template <typename T> String impl_IDatagramSocketInformation<T>::RemotePort() const
{
	String value;
	check_hresult(shim()->get_RemotePort(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketQualityOfService impl_IDatagramSocketControl<T>::QualityOfService() const
{
	Windows::Networking::Sockets::SocketQualityOfService value = {};
	check_hresult(shim()->get_QualityOfService(&value));
	return value;
}

template <typename T> void impl_IDatagramSocketControl<T>::QualityOfService(Windows::Networking::Sockets::SocketQualityOfService const value) const
{
	check_hresult(shim()->put_QualityOfService(value));
}

template <typename T> byte impl_IDatagramSocketControl<T>::OutboundUnicastHopLimit() const
{
	byte value = {};
	check_hresult(shim()->get_OutboundUnicastHopLimit(&value));
	return value;
}

template <typename T> void impl_IDatagramSocketControl<T>::OutboundUnicastHopLimit(byte const value) const
{
	check_hresult(shim()->put_OutboundUnicastHopLimit(value));
}

template <typename T> unsigned impl_IDatagramSocketControl2<T>::InboundBufferSizeInBytes() const
{
	unsigned value = {};
	check_hresult(shim()->get_InboundBufferSizeInBytes(&value));
	return value;
}

template <typename T> void impl_IDatagramSocketControl2<T>::InboundBufferSizeInBytes(unsigned const value) const
{
	check_hresult(shim()->put_InboundBufferSizeInBytes(value));
}

template <typename T> bool impl_IDatagramSocketControl2<T>::DontFragment() const
{
	bool value = {};
	check_hresult(shim()->get_DontFragment(put(value)));
	return value;
}

template <typename T> void impl_IDatagramSocketControl2<T>::DontFragment(bool const value) const
{
	check_hresult(shim()->put_DontFragment(value));
}

template <typename T> bool impl_IDatagramSocketControl3<T>::MulticastOnly() const
{
	bool value = {};
	check_hresult(shim()->get_MulticastOnly(put(value)));
	return value;
}

template <typename T> void impl_IDatagramSocketControl3<T>::MulticastOnly(bool const value) const
{
	check_hresult(shim()->put_MulticastOnly(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> impl_IDatagramSocketStatics<T>::GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> operation;
	check_hresult(shim()->abi_GetEndpointPairsAsync(get(remoteHostName), get(remoteServiceName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> impl_IDatagramSocketStatics<T>::GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName, Windows::Networking::HostNameSortOptions const sortOptions) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> operation;
	check_hresult(shim()->abi_GetEndpointPairsWithSortOptionsAsync(get(remoteHostName), get(remoteServiceName), sortOptions, put(operation)));
	return operation;
}

template <typename T> Windows::Networking::Sockets::DatagramSocketControl impl_IDatagramSocket<T>::Control() const
{
	Windows::Networking::Sockets::DatagramSocketControl value = nullptr;
	check_hresult(shim()->get_Control(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::DatagramSocketInformation impl_IDatagramSocket<T>::Information() const
{
	Windows::Networking::Sockets::DatagramSocketInformation value = nullptr;
	check_hresult(shim()->get_Information(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IDatagramSocket<T>::OutputStream() const
{
	Windows::Storage::Streams::IOutputStream value;
	check_hresult(shim()->get_OutputStream(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket<T>::ConnectAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_ConnectAsync(get(remoteHostName), get(remoteServiceName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket<T>::ConnectAsync(Windows::Networking::EndpointPair const & endpointPair) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_ConnectWithEndpointPairAsync(get(endpointPair), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket<T>::BindServiceNameAsync(StringReference const & localServiceName) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_BindServiceNameAsync(get(localServiceName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket<T>::BindEndpointAsync(Windows::Networking::HostName const & localHostName, StringReference const & localServiceName) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_BindEndpointAsync(get(localHostName), get(localServiceName), put(operation)));
	return operation;
}

template <typename T> void impl_IDatagramSocket<T>::JoinMulticastGroup(Windows::Networking::HostName const & host) const
{
	check_hresult(shim()->abi_JoinMulticastGroup(get(host)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> impl_IDatagramSocket<T>::GetOutputStreamAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> value;
	check_hresult(shim()->abi_GetOutputStreamAsync(get(remoteHostName), get(remoteServiceName), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> impl_IDatagramSocket<T>::GetOutputStreamAsync(Windows::Networking::EndpointPair const & endpointPair) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> value;
	check_hresult(shim()->abi_GetOutputStreamWithEndpointPairAsync(get(endpointPair), put(value)));
	return value;
}

template <typename T> long long impl_IDatagramSocket<T>::MessageReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::DatagramSocket, Windows::Networking::Sockets::DatagramSocketMessageReceivedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_MessageReceived(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IDatagramSocket<T>::MessageReceived(F eventHandler) const
{
	return MessageReceived(Windows::Foundation::TypedEventHandler<Windows::Networking::Sockets::DatagramSocket, Windows::Networking::Sockets::DatagramSocketMessageReceivedEventArgs>(eventHandler));
}

template <typename T> void impl_IDatagramSocket<T>::MessageReceived(long long const eventCookie) const
{
	check_hresult(shim()->remove_MessageReceived(eventCookie));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket2<T>::BindServiceNameAsync(StringReference const & localServiceName, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_BindServiceNameAndAdapterAsync(get(localServiceName), get(adapter), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket3<T>::CancelIOAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_CancelIOAsync(put(operation)));
	return operation;
}

template <typename T> void impl_IDatagramSocket3<T>::EnableTransferOwnership(GUID const taskId) const
{
	check_hresult(shim()->abi_EnableTransferOwnership(taskId));
}

template <typename T> void impl_IDatagramSocket3<T>::EnableTransferOwnership(GUID const taskId, Windows::Networking::Sockets::SocketActivityConnectedStandbyAction const connectedStandbyAction) const
{
	check_hresult(shim()->abi_EnableTransferOwnershipWithConnectedStandbyAction(taskId, connectedStandbyAction));
}

template <typename T> void impl_IDatagramSocket3<T>::TransferOwnership(StringReference const & socketId) const
{
	check_hresult(shim()->abi_TransferOwnership(get(socketId)));
}

template <typename T> void impl_IDatagramSocket3<T>::TransferOwnership(StringReference const & socketId, Windows::Networking::Sockets::SocketActivityContext const & data) const
{
	check_hresult(shim()->abi_TransferOwnershipWithContext(get(socketId), get(data)));
}

template <typename T> void impl_IDatagramSocket3<T>::TransferOwnership(StringReference const & socketId, Windows::Networking::Sockets::SocketActivityContext const & data, Windows::Foundation::TimeSpan const & keepAliveTime) const
{
	check_hresult(shim()->abi_TransferOwnershipWithContextAndKeepAliveTime(get(socketId), get(data), keepAliveTime));
}

template <typename T> Windows::Networking::HostName impl_IStreamSocketInformation<T>::LocalAddress() const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->get_LocalAddress(put(value)));
	return value;
}

template <typename T> String impl_IStreamSocketInformation<T>::LocalPort() const
{
	String value;
	check_hresult(shim()->get_LocalPort(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IStreamSocketInformation<T>::RemoteHostName() const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->get_RemoteHostName(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IStreamSocketInformation<T>::RemoteAddress() const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->get_RemoteAddress(put(value)));
	return value;
}

template <typename T> String impl_IStreamSocketInformation<T>::RemoteServiceName() const
{
	String value;
	check_hresult(shim()->get_RemoteServiceName(put(value)));
	return value;
}

template <typename T> String impl_IStreamSocketInformation<T>::RemotePort() const
{
	String value;
	check_hresult(shim()->get_RemotePort(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::RoundTripTimeStatistics impl_IStreamSocketInformation<T>::RoundTripTimeStatistics() const
{
	Windows::Networking::Sockets::RoundTripTimeStatistics value = {};
	check_hresult(shim()->get_RoundTripTimeStatistics(&value));
	return value;
}

template <typename T> Windows::Networking::Sockets::BandwidthStatistics impl_IStreamSocketInformation<T>::BandwidthStatistics() const
{
	Windows::Networking::Sockets::BandwidthStatistics value = {};
	check_hresult(shim()->get_BandwidthStatistics(&value));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketProtectionLevel impl_IStreamSocketInformation<T>::ProtectionLevel() const
{
	Windows::Networking::Sockets::SocketProtectionLevel value = {};
	check_hresult(shim()->get_ProtectionLevel(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IStreamSocketInformation<T>::SessionKey() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_SessionKey(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketSslErrorSeverity impl_IStreamSocketInformation2<T>::ServerCertificateErrorSeverity() const
{
	Windows::Networking::Sockets::SocketSslErrorSeverity value = {};
	check_hresult(shim()->get_ServerCertificateErrorSeverity(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> impl_IStreamSocketInformation2<T>::ServerCertificateErrors() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> value;
	check_hresult(shim()->get_ServerCertificateErrors(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_IStreamSocketInformation2<T>::ServerCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check_hresult(shim()->get_ServerCertificate(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_IStreamSocketInformation2<T>::ServerIntermediateCertificates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value;
	check_hresult(shim()->get_ServerIntermediateCertificates(put(value)));
	return value;
}

template <typename T> bool impl_IStreamSocketControl<T>::NoDelay() const
{
	bool value = {};
	check_hresult(shim()->get_NoDelay(put(value)));
	return value;
}

template <typename T> void impl_IStreamSocketControl<T>::NoDelay(bool const value) const
{
	check_hresult(shim()->put_NoDelay(value));
}

template <typename T> bool impl_IStreamSocketControl<T>::KeepAlive() const
{
	bool value = {};
	check_hresult(shim()->get_KeepAlive(put(value)));
	return value;
}

template <typename T> void impl_IStreamSocketControl<T>::KeepAlive(bool const value) const
{
	check_hresult(shim()->put_KeepAlive(value));
}

template <typename T> unsigned impl_IStreamSocketControl<T>::OutboundBufferSizeInBytes() const
{
	unsigned value = {};
	check_hresult(shim()->get_OutboundBufferSizeInBytes(&value));
	return value;
}

template <typename T> void impl_IStreamSocketControl<T>::OutboundBufferSizeInBytes(unsigned const value) const
{
	check_hresult(shim()->put_OutboundBufferSizeInBytes(value));
}

template <typename T> Windows::Networking::Sockets::SocketQualityOfService impl_IStreamSocketControl<T>::QualityOfService() const
{
	Windows::Networking::Sockets::SocketQualityOfService value = {};
	check_hresult(shim()->get_QualityOfService(&value));
	return value;
}

template <typename T> void impl_IStreamSocketControl<T>::QualityOfService(Windows::Networking::Sockets::SocketQualityOfService const value) const
{
	check_hresult(shim()->put_QualityOfService(value));
}

template <typename T> byte impl_IStreamSocketControl<T>::OutboundUnicastHopLimit() const
{
	byte value = {};
	check_hresult(shim()->get_OutboundUnicastHopLimit(&value));
	return value;
}

template <typename T> void impl_IStreamSocketControl<T>::OutboundUnicastHopLimit(byte const value) const
{
	check_hresult(shim()->put_OutboundUnicastHopLimit(value));
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> impl_IStreamSocketControl2<T>::IgnorableServerCertificateErrors() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> value;
	check_hresult(shim()->get_IgnorableServerCertificateErrors(put(value)));
	return value;
}

template <typename T> bool impl_IStreamSocketControl3<T>::SerializeConnectionAttempts() const
{
	bool value = {};
	check_hresult(shim()->get_SerializeConnectionAttempts(put(value)));
	return value;
}

template <typename T> void impl_IStreamSocketControl3<T>::SerializeConnectionAttempts(bool const value) const
{
	check_hresult(shim()->put_SerializeConnectionAttempts(value));
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_IStreamSocketControl3<T>::ClientCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check_hresult(shim()->get_ClientCertificate(put(value)));
	return value;
}

template <typename T> void impl_IStreamSocketControl3<T>::ClientCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const
{
	check_hresult(shim()->put_ClientCertificate(get(value)));
}

template <typename T> Windows::Networking::Sockets::StreamSocketControl impl_IStreamSocket<T>::Control() const
{
	Windows::Networking::Sockets::StreamSocketControl value = nullptr;
	check_hresult(shim()->get_Control(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocketInformation impl_IStreamSocket<T>::Information() const
{
	Windows::Networking::Sockets::StreamSocketInformation value = nullptr;
	check_hresult(shim()->get_Information(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IStreamSocket<T>::InputStream() const
{
	Windows::Storage::Streams::IInputStream value;
	check_hresult(shim()->get_InputStream(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IStreamSocket<T>::OutputStream() const
{
	Windows::Storage::Streams::IOutputStream value;
	check_hresult(shim()->get_OutputStream(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::ConnectAsync(Windows::Networking::EndpointPair const & endpointPair) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_ConnectWithEndpointPairAsync(get(endpointPair), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::ConnectAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_ConnectAsync(get(remoteHostName), get(remoteServiceName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::ConnectAsync(Windows::Networking::EndpointPair const & endpointPair, Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_ConnectWithEndpointPairAndProtectionLevelAsync(get(endpointPair), protectionLevel, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::ConnectAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName, Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_ConnectWithProtectionLevelAsync(get(remoteHostName), get(remoteServiceName), protectionLevel, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::UpgradeToSslAsync(Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel, Windows::Networking::HostName const & validationHostName) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_UpgradeToSslAsync(protectionLevel, get(validationHostName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket2<T>::ConnectAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName, Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_ConnectWithProtectionLevelAndAdapterAsync(get(remoteHostName), get(remoteServiceName), protectionLevel, get(adapter), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket3<T>::CancelIOAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_CancelIOAsync(put(operation)));
	return operation;
}

template <typename T> void impl_IStreamSocket3<T>::EnableTransferOwnership(GUID const taskId) const
{
	check_hresult(shim()->abi_EnableTransferOwnership(taskId));
}

template <typename T> void impl_IStreamSocket3<T>::EnableTransferOwnership(GUID const taskId, Windows::Networking::Sockets::SocketActivityConnectedStandbyAction const connectedStandbyAction) const
{
	check_hresult(shim()->abi_EnableTransferOwnershipWithConnectedStandbyAction(taskId, connectedStandbyAction));
}

template <typename T> void impl_IStreamSocket3<T>::TransferOwnership(StringReference const & socketId) const
{
	check_hresult(shim()->abi_TransferOwnership(get(socketId)));
}

template <typename T> void impl_IStreamSocket3<T>::TransferOwnership(StringReference const & socketId, Windows::Networking::Sockets::SocketActivityContext const & data) const
{
	check_hresult(shim()->abi_TransferOwnershipWithContext(get(socketId), get(data)));
}

template <typename T> void impl_IStreamSocket3<T>::TransferOwnership(StringReference const & socketId, Windows::Networking::Sockets::SocketActivityContext const & data, Windows::Foundation::TimeSpan const & keepAliveTime) const
{
	check_hresult(shim()->abi_TransferOwnershipWithContextAndKeepAliveTime(get(socketId), get(data), keepAliveTime));
}

template <typename T> Windows::Networking::Sockets::SocketQualityOfService impl_IStreamSocketListenerControl<T>::QualityOfService() const
{
	Windows::Networking::Sockets::SocketQualityOfService value = {};
	check_hresult(shim()->get_QualityOfService(&value));
	return value;
}

template <typename T> void impl_IStreamSocketListenerControl<T>::QualityOfService(Windows::Networking::Sockets::SocketQualityOfService const value) const
{
	check_hresult(shim()->put_QualityOfService(value));
}

template <typename T> bool impl_IStreamSocketListenerControl2<T>::NoDelay() const
{
	bool value = {};
	check_hresult(shim()->get_NoDelay(put(value)));
	return value;
}

template <typename T> void impl_IStreamSocketListenerControl2<T>::NoDelay(bool const value) const
{
	check_hresult(shim()->put_NoDelay(value));
}

template <typename T> bool impl_IStreamSocketListenerControl2<T>::KeepAlive() const
{
	bool value = {};
	check_hresult(shim()->get_KeepAlive(put(value)));
	return value;
}

template <typename T> void impl_IStreamSocketListenerControl2<T>::KeepAlive(bool const value) const
{
	check_hresult(shim()->put_KeepAlive(value));
}

template <typename T> unsigned impl_IStreamSocketListenerControl2<T>::OutboundBufferSizeInBytes() const
{
	unsigned value = {};
	check_hresult(shim()->get_OutboundBufferSizeInBytes(&value));
	return value;
}

template <typename T> void impl_IStreamSocketListenerControl2<T>::OutboundBufferSizeInBytes(unsigned const value) const
{
	check_hresult(shim()->put_OutboundBufferSizeInBytes(value));
}

template <typename T> byte impl_IStreamSocketListenerControl2<T>::OutboundUnicastHopLimit() const
{
	byte value = {};
	check_hresult(shim()->get_OutboundUnicastHopLimit(&value));
	return value;
}

template <typename T> void impl_IStreamSocketListenerControl2<T>::OutboundUnicastHopLimit(byte const value) const
{
	check_hresult(shim()->put_OutboundUnicastHopLimit(value));
}

template <typename T> String impl_IStreamSocketListenerInformation<T>::LocalPort() const
{
	String value;
	check_hresult(shim()->get_LocalPort(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocket impl_IStreamSocketListenerConnectionReceivedEventArgs<T>::Socket() const
{
	Windows::Networking::Sockets::StreamSocket value = nullptr;
	check_hresult(shim()->get_Socket(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocketListenerControl impl_IStreamSocketListener<T>::Control() const
{
	Windows::Networking::Sockets::StreamSocketListenerControl value = nullptr;
	check_hresult(shim()->get_Control(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocketListenerInformation impl_IStreamSocketListener<T>::Information() const
{
	Windows::Networking::Sockets::StreamSocketListenerInformation value = nullptr;
	check_hresult(shim()->get_Information(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocketListener<T>::BindServiceNameAsync(StringReference const & localServiceName) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_BindServiceNameAsync(get(localServiceName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocketListener<T>::BindEndpointAsync(Windows::Networking::HostName const & localHostName, StringReference const & localServiceName) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_BindEndpointAsync(get(localHostName), get(localServiceName), put(operation)));
	return operation;
}

template <typename T> long long impl_IStreamSocketListener<T>::ConnectionReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::StreamSocketListener, Windows::Networking::Sockets::StreamSocketListenerConnectionReceivedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_ConnectionReceived(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IStreamSocketListener<T>::ConnectionReceived(F eventHandler) const
{
	return ConnectionReceived(Windows::Foundation::TypedEventHandler<Windows::Networking::Sockets::StreamSocketListener, Windows::Networking::Sockets::StreamSocketListenerConnectionReceivedEventArgs>(eventHandler));
}

template <typename T> void impl_IStreamSocketListener<T>::ConnectionReceived(long long const eventCookie) const
{
	check_hresult(shim()->remove_ConnectionReceived(eventCookie));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocketListener2<T>::BindServiceNameAsync(StringReference const & localServiceName, Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_BindServiceNameWithProtectionLevelAsync(get(localServiceName), protectionLevel, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocketListener2<T>::BindServiceNameAsync(StringReference const & localServiceName, Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_BindServiceNameWithProtectionLevelAndAdapterAsync(get(localServiceName), protectionLevel, get(adapter), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocketListener3<T>::CancelIOAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_CancelIOAsync(put(operation)));
	return operation;
}

template <typename T> void impl_IStreamSocketListener3<T>::EnableTransferOwnership(GUID const taskId) const
{
	check_hresult(shim()->abi_EnableTransferOwnership(taskId));
}

template <typename T> void impl_IStreamSocketListener3<T>::EnableTransferOwnership(GUID const taskId, Windows::Networking::Sockets::SocketActivityConnectedStandbyAction const connectedStandbyAction) const
{
	check_hresult(shim()->abi_EnableTransferOwnershipWithConnectedStandbyAction(taskId, connectedStandbyAction));
}

template <typename T> void impl_IStreamSocketListener3<T>::TransferOwnership(StringReference const & socketId) const
{
	check_hresult(shim()->abi_TransferOwnership(get(socketId)));
}

template <typename T> void impl_IStreamSocketListener3<T>::TransferOwnership(StringReference const & socketId, Windows::Networking::Sockets::SocketActivityContext const & data) const
{
	check_hresult(shim()->abi_TransferOwnershipWithContext(get(socketId), get(data)));
}

template <typename T> unsigned impl_IWebSocketControl<T>::OutboundBufferSizeInBytes() const
{
	unsigned value = {};
	check_hresult(shim()->get_OutboundBufferSizeInBytes(&value));
	return value;
}

template <typename T> void impl_IWebSocketControl<T>::OutboundBufferSizeInBytes(unsigned const value) const
{
	check_hresult(shim()->put_OutboundBufferSizeInBytes(value));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IWebSocketControl<T>::ServerCredential() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check_hresult(shim()->get_ServerCredential(put(value)));
	return value;
}

template <typename T> void impl_IWebSocketControl<T>::ServerCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check_hresult(shim()->put_ServerCredential(get(value)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IWebSocketControl<T>::ProxyCredential() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check_hresult(shim()->get_ProxyCredential(put(value)));
	return value;
}

template <typename T> void impl_IWebSocketControl<T>::ProxyCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check_hresult(shim()->put_ProxyCredential(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IWebSocketControl<T>::SupportedProtocols() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_SupportedProtocols(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IWebSocketInformation<T>::LocalAddress() const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->get_LocalAddress(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::BandwidthStatistics impl_IWebSocketInformation<T>::BandwidthStatistics() const
{
	Windows::Networking::Sockets::BandwidthStatistics value = {};
	check_hresult(shim()->get_BandwidthStatistics(&value));
	return value;
}

template <typename T> String impl_IWebSocketInformation<T>::Protocol() const
{
	String value;
	check_hresult(shim()->get_Protocol(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IWebSocket<T>::OutputStream() const
{
	Windows::Storage::Streams::IOutputStream value;
	check_hresult(shim()->get_OutputStream(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebSocket<T>::ConnectAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_ConnectAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> void impl_IWebSocket<T>::SetRequestHeader(StringReference const & headerName, StringReference const & headerValue) const
{
	check_hresult(shim()->abi_SetRequestHeader(get(headerName), get(headerValue)));
}

template <typename T> long long impl_IWebSocket<T>::Closed(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::IWebSocket, Windows::Networking::Sockets::WebSocketClosedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_Closed(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IWebSocket<T>::Closed(F eventHandler) const
{
	return Closed(Windows::Foundation::TypedEventHandler<Windows::Networking::Sockets::IWebSocket, Windows::Networking::Sockets::WebSocketClosedEventArgs>(eventHandler));
}

template <typename T> void impl_IWebSocket<T>::Closed(long long const eventCookie) const
{
	check_hresult(shim()->remove_Closed(eventCookie));
}

template <typename T> void impl_IWebSocket<T>::Close(unsigned short const code, StringReference const & reason) const
{
	check_hresult(shim()->abi_CloseWithStatus(code, get(reason)));
}

template <typename T> unsigned impl_IMessageWebSocketControl<T>::MaxMessageSize() const
{
	unsigned value = {};
	check_hresult(shim()->get_MaxMessageSize(&value));
	return value;
}

template <typename T> void impl_IMessageWebSocketControl<T>::MaxMessageSize(unsigned const value) const
{
	check_hresult(shim()->put_MaxMessageSize(value));
}

template <typename T> Windows::Networking::Sockets::SocketMessageType impl_IMessageWebSocketControl<T>::MessageType() const
{
	Windows::Networking::Sockets::SocketMessageType value = {};
	check_hresult(shim()->get_MessageType(&value));
	return value;
}

template <typename T> void impl_IMessageWebSocketControl<T>::MessageType(Windows::Networking::Sockets::SocketMessageType const value) const
{
	check_hresult(shim()->put_MessageType(value));
}

template <typename T> Windows::Networking::Sockets::MessageWebSocketControl impl_IMessageWebSocket<T>::Control() const
{
	Windows::Networking::Sockets::MessageWebSocketControl value = nullptr;
	check_hresult(shim()->get_Control(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::MessageWebSocketInformation impl_IMessageWebSocket<T>::Information() const
{
	Windows::Networking::Sockets::MessageWebSocketInformation value = nullptr;
	check_hresult(shim()->get_Information(put(value)));
	return value;
}

template <typename T> long long impl_IMessageWebSocket<T>::MessageReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::MessageWebSocket, Windows::Networking::Sockets::MessageWebSocketMessageReceivedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_MessageReceived(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IMessageWebSocket<T>::MessageReceived(F eventHandler) const
{
	return MessageReceived(Windows::Foundation::TypedEventHandler<Windows::Networking::Sockets::MessageWebSocket, Windows::Networking::Sockets::MessageWebSocketMessageReceivedEventArgs>(eventHandler));
}

template <typename T> void impl_IMessageWebSocket<T>::MessageReceived(long long const eventCookie) const
{
	check_hresult(shim()->remove_MessageReceived(eventCookie));
}

template <typename T> bool impl_IStreamWebSocketControl<T>::NoDelay() const
{
	bool value = {};
	check_hresult(shim()->get_NoDelay(put(value)));
	return value;
}

template <typename T> void impl_IStreamWebSocketControl<T>::NoDelay(bool const value) const
{
	check_hresult(shim()->put_NoDelay(value));
}

template <typename T> Windows::Networking::Sockets::StreamWebSocketControl impl_IStreamWebSocket<T>::Control() const
{
	Windows::Networking::Sockets::StreamWebSocketControl value = nullptr;
	check_hresult(shim()->get_Control(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamWebSocketInformation impl_IStreamWebSocket<T>::Information() const
{
	Windows::Networking::Sockets::StreamWebSocketInformation value = nullptr;
	check_hresult(shim()->get_Information(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IStreamWebSocket<T>::InputStream() const
{
	Windows::Storage::Streams::IInputStream value;
	check_hresult(shim()->get_InputStream(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketErrorStatus impl_ISocketErrorStatics<T>::GetStatus(int const hresult) const
{
	Windows::Networking::Sockets::SocketErrorStatus status = {};
	check_hresult(shim()->abi_GetStatus(hresult, &status));
	return status;
}

template <typename T> Windows::Web::WebErrorStatus impl_IWebSocketErrorStatics<T>::GetStatus(int const hresult) const
{
	Windows::Web::WebErrorStatus status = {};
	check_hresult(shim()->abi_GetStatus(hresult, &status));
	return status;
}

}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web {

template <typename T> String impl_IWebAuthenticationResult<T>::ResponseData() const
{
	String value;
	check_hresult(shim()->get_ResponseData(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::WebAuthenticationStatus impl_IWebAuthenticationResult<T>::ResponseStatus() const
{
	Windows::Security::Authentication::Web::WebAuthenticationStatus value = {};
	check_hresult(shim()->get_ResponseStatus(&value));
	return value;
}

template <typename T> unsigned impl_IWebAuthenticationResult<T>::ResponseErrorDetail() const
{
	unsigned value = {};
	check_hresult(shim()->get_ResponseErrorDetail(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> impl_IWebAuthenticationBrokerStatics<T>::AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions const options, Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> asyncInfo;
	check_hresult(shim()->abi_AuthenticateWithCallbackUriAsync(options, get(requestUri), get(callbackUri), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> impl_IWebAuthenticationBrokerStatics<T>::AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions const options, Windows::Foundation::Uri const & requestUri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> asyncInfo;
	check_hresult(shim()->abi_AuthenticateWithoutCallbackUriAsync(options, get(requestUri), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::Uri impl_IWebAuthenticationBrokerStatics<T>::GetCurrentApplicationCallbackUri() const
{
	Windows::Foundation::Uri callbackUri = nullptr;
	check_hresult(shim()->abi_GetCurrentApplicationCallbackUri(put(callbackUri)));
	return callbackUri;
}

template <typename T> void impl_IWebAuthenticationBrokerStatics2<T>::AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri) const
{
	check_hresult(shim()->abi_AuthenticateAndContinue(get(requestUri)));
}

template <typename T> void impl_IWebAuthenticationBrokerStatics2<T>::AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri) const
{
	check_hresult(shim()->abi_AuthenticateWithCallbackUriAndContinue(get(requestUri), get(callbackUri)));
}

template <typename T> void impl_IWebAuthenticationBrokerStatics2<T>::AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri, Windows::Foundation::Collections::ValueSet const & continuationData, Windows::Security::Authentication::Web::WebAuthenticationOptions const options) const
{
	check_hresult(shim()->abi_AuthenticateWithCallbackUriContinuationDataAndOptionsAndContinue(get(requestUri), get(callbackUri), get(continuationData), options));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> impl_IWebAuthenticationBrokerStatics2<T>::AuthenticateSilentlyAsync(Windows::Foundation::Uri const & requestUri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> asyncInfo;
	check_hresult(shim()->abi_AuthenticateSilentlyAsync(get(requestUri), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> impl_IWebAuthenticationBrokerStatics2<T>::AuthenticateSilentlyAsync(Windows::Foundation::Uri const & requestUri, Windows::Security::Authentication::Web::WebAuthenticationOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> asyncInfo;
	check_hresult(shim()->abi_AuthenticateSilentlyWithOptionsAsync(get(requestUri), options, put(asyncInfo)));
	return asyncInfo;
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Core {

template <typename T> Windows::Security::Credentials::WebAccountProvider impl_IWebTokenRequest<T>::WebAccountProvider() const
{
	Windows::Security::Credentials::WebAccountProvider value = nullptr;
	check_hresult(shim()->get_WebAccountProvider(put(value)));
	return value;
}

template <typename T> String impl_IWebTokenRequest<T>::Scope() const
{
	String value;
	check_hresult(shim()->get_Scope(put(value)));
	return value;
}

template <typename T> String impl_IWebTokenRequest<T>::ClientId() const
{
	String value;
	check_hresult(shim()->get_ClientId(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenRequestPromptType impl_IWebTokenRequest<T>::PromptType() const
{
	Windows::Security::Authentication::Web::Core::WebTokenRequestPromptType value = {};
	check_hresult(shim()->get_PromptType(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IWebTokenRequest<T>::Properties() const
{
	Windows::Foundation::Collections::IMap<String, String> requestProperties;
	check_hresult(shim()->get_Properties(put(requestProperties)));
	return requestProperties;
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IWebTokenRequest2<T>::AppProperties() const
{
	Windows::Foundation::Collections::IMap<String, String> requestProperties;
	check_hresult(shim()->get_AppProperties(put(requestProperties)));
	return requestProperties;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenRequest impl_IWebTokenRequestFactory<T>::Create(Windows::Security::Credentials::WebAccountProvider const & provider, StringReference const & scope, StringReference const & clientId) const
{
	Windows::Security::Authentication::Web::Core::WebTokenRequest webTokenRequest = nullptr;
	check_hresult(shim()->abi_Create(get(provider), get(scope), get(clientId), put(webTokenRequest)));
	return webTokenRequest;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenRequest impl_IWebTokenRequestFactory<T>::CreateWithPromptType(Windows::Security::Credentials::WebAccountProvider const & provider, StringReference const & scope, StringReference const & clientId, Windows::Security::Authentication::Web::Core::WebTokenRequestPromptType const promptType) const
{
	Windows::Security::Authentication::Web::Core::WebTokenRequest webTokenRequest = nullptr;
	check_hresult(shim()->abi_CreateWithPromptType(get(provider), get(scope), get(clientId), promptType, put(webTokenRequest)));
	return webTokenRequest;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenRequest impl_IWebTokenRequestFactory<T>::CreateWithProvider(Windows::Security::Credentials::WebAccountProvider const & provider) const
{
	Windows::Security::Authentication::Web::Core::WebTokenRequest webTokenRequest = nullptr;
	check_hresult(shim()->abi_CreateWithProvider(get(provider), put(webTokenRequest)));
	return webTokenRequest;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenRequest impl_IWebTokenRequestFactory<T>::CreateWithScope(Windows::Security::Credentials::WebAccountProvider const & provider, StringReference const & scope) const
{
	Windows::Security::Authentication::Web::Core::WebTokenRequest webTokenRequest = nullptr;
	check_hresult(shim()->abi_CreateWithScope(get(provider), get(scope), put(webTokenRequest)));
	return webTokenRequest;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> impl_IWebAuthenticationCoreManagerStatics<T>::GetTokenSilentlyAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> asyncInfo;
	check_hresult(shim()->abi_GetTokenSilentlyAsync(get(request), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> impl_IWebAuthenticationCoreManagerStatics<T>::GetTokenSilentlyAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request, Windows::Security::Credentials::WebAccount const & webAccount) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> asyncInfo;
	check_hresult(shim()->abi_GetTokenSilentlyWithWebAccountAsync(get(request), get(webAccount), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> impl_IWebAuthenticationCoreManagerStatics<T>::RequestTokenAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> asyncInfo;
	check_hresult(shim()->abi_RequestTokenAsync(get(request), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> impl_IWebAuthenticationCoreManagerStatics<T>::RequestTokenAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request, Windows::Security::Credentials::WebAccount const & webAccount) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> asyncInfo;
	check_hresult(shim()->abi_RequestTokenWithWebAccountAsync(get(request), get(webAccount), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> impl_IWebAuthenticationCoreManagerStatics<T>::FindAccountAsync(Windows::Security::Credentials::WebAccountProvider const & provider, StringReference const & webAccountId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> asyncInfo;
	check_hresult(shim()->abi_FindAccountAsync(get(provider), get(webAccountId), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> impl_IWebAuthenticationCoreManagerStatics<T>::FindAccountProviderAsync(StringReference const & webAccountProviderId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> asyncInfo;
	check_hresult(shim()->abi_FindAccountProviderAsync(get(webAccountProviderId), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> impl_IWebAuthenticationCoreManagerStatics<T>::FindAccountProviderAsync(StringReference const & webAccountProviderId, StringReference const & authority) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> asyncInfo;
	check_hresult(shim()->abi_FindAccountProviderWithAuthorityAsync(get(webAccountProviderId), get(authority), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> impl_IWebAuthenticationCoreManagerStatics2<T>::FindAccountProviderAsync(StringReference const & webAccountProviderId, StringReference const & authority, Windows::System::User const & user) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> asyncInfo;
	check_hresult(shim()->abi_FindAccountProviderWithAuthorityForUserAsync(get(webAccountProviderId), get(authority), get(user), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> unsigned impl_IWebProviderError<T>::ErrorCode() const
{
	unsigned value = {};
	check_hresult(shim()->get_ErrorCode(&value));
	return value;
}

template <typename T> String impl_IWebProviderError<T>::ErrorMessage() const
{
	String value;
	check_hresult(shim()->get_ErrorMessage(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IWebProviderError<T>::Properties() const
{
	Windows::Foundation::Collections::IMap<String, String> value;
	check_hresult(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebProviderError impl_IWebProviderErrorFactory<T>::Create(unsigned const errorCode, StringReference const & errorMessage) const
{
	Windows::Security::Authentication::Web::Core::WebProviderError webProviderError = nullptr;
	check_hresult(shim()->abi_Create(errorCode, get(errorMessage), put(webProviderError)));
	return webProviderError;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::Web::Core::WebTokenResponse> impl_IWebTokenRequestResult<T>::ResponseData() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::Web::Core::WebTokenResponse> value;
	check_hresult(shim()->get_ResponseData(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenRequestStatus impl_IWebTokenRequestResult<T>::ResponseStatus() const
{
	Windows::Security::Authentication::Web::Core::WebTokenRequestStatus value = {};
	check_hresult(shim()->get_ResponseStatus(&value));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebProviderError impl_IWebTokenRequestResult<T>::ResponseError() const
{
	Windows::Security::Authentication::Web::Core::WebProviderError value = nullptr;
	check_hresult(shim()->get_ResponseError(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebTokenRequestResult<T>::InvalidateCacheAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check_hresult(shim()->abi_InvalidateCacheAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> String impl_IWebTokenResponse<T>::Token() const
{
	String value;
	check_hresult(shim()->get_Token(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebProviderError impl_IWebTokenResponse<T>::ProviderError() const
{
	Windows::Security::Authentication::Web::Core::WebProviderError value = nullptr;
	check_hresult(shim()->get_ProviderError(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::WebAccount impl_IWebTokenResponse<T>::WebAccount() const
{
	Windows::Security::Credentials::WebAccount value = nullptr;
	check_hresult(shim()->get_WebAccount(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IWebTokenResponse<T>::Properties() const
{
	Windows::Foundation::Collections::IMap<String, String> value;
	check_hresult(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenResponse impl_IWebTokenResponseFactory<T>::CreateWithToken(StringReference const & token) const
{
	Windows::Security::Authentication::Web::Core::WebTokenResponse webTokenResponse = nullptr;
	check_hresult(shim()->abi_CreateWithToken(get(token), put(webTokenResponse)));
	return webTokenResponse;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenResponse impl_IWebTokenResponseFactory<T>::CreateWithTokenAndAccount(StringReference const & token, Windows::Security::Credentials::WebAccount const & webAccount) const
{
	Windows::Security::Authentication::Web::Core::WebTokenResponse webTokenResponse = nullptr;
	check_hresult(shim()->abi_CreateWithTokenAndAccount(get(token), get(webAccount), put(webTokenResponse)));
	return webTokenResponse;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenResponse impl_IWebTokenResponseFactory<T>::CreateWithTokenAccountAndError(StringReference const & token, Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Core::WebProviderError const & error) const
{
	Windows::Security::Authentication::Web::Core::WebTokenResponse webTokenResponse = nullptr;
	check_hresult(shim()->abi_CreateWithTokenAccountAndError(get(token), get(webAccount), get(error), put(webTokenResponse)));
	return webTokenResponse;
}

}}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Provider {

template <typename T> Windows::Security::Authentication::Web::Provider::WebAccountProviderOperationKind impl_IWebAccountProviderOperation<T>::Kind() const
{
	Windows::Security::Authentication::Web::Provider::WebAccountProviderOperationKind value = {};
	check_hresult(shim()->get_Kind(&value));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenRequest impl_IWebProviderTokenRequest<T>::ClientRequest() const
{
	Windows::Security::Authentication::Web::Core::WebTokenRequest value = nullptr;
	check_hresult(shim()->get_ClientRequest(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount> impl_IWebProviderTokenRequest<T>::WebAccounts() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount> value;
	check_hresult(shim()->get_WebAccounts(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Provider::WebAccountSelectionOptions impl_IWebProviderTokenRequest<T>::WebAccountSelectionOptions() const
{
	Windows::Security::Authentication::Web::Provider::WebAccountSelectionOptions value = {};
	check_hresult(shim()->get_WebAccountSelectionOptions(&value));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IWebProviderTokenRequest<T>::ApplicationCallbackUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_ApplicationCallbackUri(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> impl_IWebProviderTokenRequest<T>::GetApplicationTokenBindingKeyAsync(Windows::Security::Authentication::Web::TokenBindingKeyType const keyType, Windows::Foundation::Uri const & target) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> asyncInfo;
	check_hresult(shim()->abi_GetApplicationTokenBindingKeyAsync(keyType, get(target), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenResponse impl_IWebProviderTokenResponse<T>::ClientResponse() const
{
	Windows::Security::Authentication::Web::Core::WebTokenResponse value = nullptr;
	check_hresult(shim()->get_ClientResponse(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse impl_IWebProviderTokenResponseFactory<T>::Create(Windows::Security::Authentication::Web::Core::WebTokenResponse const & webTokenResponse) const
{
	Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse webProviderTokenResponse = nullptr;
	check_hresult(shim()->abi_Create(get(webTokenResponse), put(webProviderTokenResponse)));
	return webProviderTokenResponse;
}

template <typename T> Windows::Foundation::Uri impl_IWebAccountClientView<T>::ApplicationCallbackUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_ApplicationCallbackUri(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Provider::WebAccountClientViewType impl_IWebAccountClientView<T>::Type() const
{
	Windows::Security::Authentication::Web::Provider::WebAccountClientViewType value = {};
	check_hresult(shim()->get_Type(&value));
	return value;
}

template <typename T> String impl_IWebAccountClientView<T>::AccountPairwiseId() const
{
	String value;
	check_hresult(shim()->get_AccountPairwiseId(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Provider::WebAccountClientView impl_IWebAccountClientViewFactory<T>::Create(Windows::Security::Authentication::Web::Provider::WebAccountClientViewType const viewType, Windows::Foundation::Uri const & applicationCallbackUri) const
{
	Windows::Security::Authentication::Web::Provider::WebAccountClientView view = nullptr;
	check_hresult(shim()->abi_Create(viewType, get(applicationCallbackUri), put(view)));
	return view;
}

template <typename T> Windows::Security::Authentication::Web::Provider::WebAccountClientView impl_IWebAccountClientViewFactory<T>::CreateWithPairwiseId(Windows::Security::Authentication::Web::Provider::WebAccountClientViewType const viewType, Windows::Foundation::Uri const & applicationCallbackUri, StringReference const & accountPairwiseId) const
{
	Windows::Security::Authentication::Web::Provider::WebAccountClientView view = nullptr;
	check_hresult(shim()->abi_CreateWithPairwiseId(viewType, get(applicationCallbackUri), get(accountPairwiseId), put(view)));
	return view;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountManagerStatics<T>::UpdateWebAccountPropertiesAsync(Windows::Security::Credentials::WebAccount const & webAccount, StringReference const & webAccountUserName, Windows::Foundation::Collections::IMapView<String, String> const & additionalProperties) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check_hresult(shim()->abi_UpdateWebAccountPropertiesAsync(get(webAccount), get(webAccountUserName), get(additionalProperties), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> impl_IWebAccountManagerStatics<T>::AddWebAccountAsync(StringReference const & webAccountId, StringReference const & webAccountUserName, Windows::Foundation::Collections::IMapView<String, String> const & props) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> asyncInfo;
	check_hresult(shim()->abi_AddWebAccountAsync(get(webAccountId), get(webAccountUserName), get(props), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountManagerStatics<T>::DeleteWebAccountAsync(Windows::Security::Credentials::WebAccount const & webAccount) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check_hresult(shim()->abi_DeleteWebAccountAsync(get(webAccount), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount>> impl_IWebAccountManagerStatics<T>::FindAllProviderWebAccountsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount>> asyncInfo;
	check_hresult(shim()->abi_FindAllProviderWebAccountsAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountManagerStatics<T>::PushCookiesAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IVectorView<Windows::Web::Http::HttpCookie> const & cookies) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check_hresult(shim()->abi_PushCookiesAsync(get(uri), get(cookies), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountManagerStatics<T>::SetViewAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Provider::WebAccountClientView const & view) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check_hresult(shim()->abi_SetViewAsync(get(webAccount), get(view), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountManagerStatics<T>::ClearViewAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Foundation::Uri const & applicationCallbackUri) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check_hresult(shim()->abi_ClearViewAsync(get(webAccount), get(applicationCallbackUri), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::Web::Provider::WebAccountClientView>> impl_IWebAccountManagerStatics<T>::GetViewsAsync(Windows::Security::Credentials::WebAccount const & webAccount) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::Web::Provider::WebAccountClientView>> asyncInfo;
	check_hresult(shim()->abi_GetViewsAsync(get(webAccount), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountManagerStatics<T>::SetWebAccountPictureAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Storage::Streams::IRandomAccessStream const & webAccountPicture) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check_hresult(shim()->abi_SetWebAccountPictureAsync(get(webAccount), get(webAccountPicture), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountManagerStatics<T>::ClearWebAccountPictureAsync(Windows::Security::Credentials::WebAccount const & webAccount) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check_hresult(shim()->abi_ClearWebAccountPictureAsync(get(webAccount), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountManagerStatics2<T>::PullCookiesAsync(StringReference const & uriString, StringReference const & callerPFN) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check_hresult(shim()->abi_PullCookiesAsync(get(uriString), get(callerPFN), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> impl_IWebAccountScopeManagerStatics<T>::AddWebAccountAsync(StringReference const & webAccountId, StringReference const & webAccountUserName, Windows::Foundation::Collections::IMapView<String, String> const & props, Windows::Security::Authentication::Web::Provider::WebAccountScope const scope) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> asyncInfo;
	check_hresult(shim()->abi_AddWebAccountWithScopeAsync(get(webAccountId), get(webAccountUserName), get(props), scope, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountScopeManagerStatics<T>::SetScopeAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Provider::WebAccountScope const scope) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check_hresult(shim()->abi_SetScopeAsync(get(webAccount), scope, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Security::Authentication::Web::Provider::WebAccountScope impl_IWebAccountScopeManagerStatics<T>::GetScope(Windows::Security::Credentials::WebAccount const & webAccount) const
{
	Windows::Security::Authentication::Web::Provider::WebAccountScope scope = {};
	check_hresult(shim()->abi_GetScope(get(webAccount), &scope));
	return scope;
}

template <typename T> void impl_IWebAccountProviderBaseReportOperation<T>::ReportCompleted() const
{
	check_hresult(shim()->abi_ReportCompleted());
}

template <typename T> void impl_IWebAccountProviderBaseReportOperation<T>::ReportError(Windows::Security::Authentication::Web::Core::WebProviderError const & value) const
{
	check_hresult(shim()->abi_ReportError(get(value)));
}

template <typename T> void impl_IWebAccountProviderUIReportOperation<T>::ReportUserCanceled() const
{
	check_hresult(shim()->abi_ReportUserCanceled());
}

template <typename T> void impl_IWebAccountProviderSilentReportOperation<T>::ReportUserInteractionRequired() const
{
	check_hresult(shim()->abi_ReportUserInteractionRequired());
}

template <typename T> void impl_IWebAccountProviderSilentReportOperation<T>::ReportUserInteractionRequired(Windows::Security::Authentication::Web::Core::WebProviderError const & value) const
{
	check_hresult(shim()->abi_ReportUserInteractionRequiredWithError(get(value)));
}

template <typename T> Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest impl_IWebAccountProviderTokenOperation<T>::ProviderRequest() const
{
	Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest webTokenRequest = nullptr;
	check_hresult(shim()->get_ProviderRequest(put(webTokenRequest)));
	return webTokenRequest;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse> impl_IWebAccountProviderTokenOperation<T>::ProviderResponses() const
{
	Windows::Foundation::Collections::IVector<Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse> value;
	check_hresult(shim()->get_ProviderResponses(put(value)));
	return value;
}

template <typename T> void impl_IWebAccountProviderTokenOperation<T>::CacheExpirationTime(Windows::Foundation::DateTime const & value) const
{
	check_hresult(shim()->put_CacheExpirationTime(value));
}

template <typename T> Windows::Foundation::DateTime impl_IWebAccountProviderTokenOperation<T>::CacheExpirationTime() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_CacheExpirationTime(&value));
	return value;
}

template <typename T> void impl_IWebAccountProviderAddAccountOperation<T>::ReportCompleted() const
{
	check_hresult(shim()->abi_ReportCompleted());
}

template <typename T> Windows::Security::Credentials::WebAccount impl_IWebAccountProviderManageAccountOperation<T>::WebAccount() const
{
	Windows::Security::Credentials::WebAccount value = nullptr;
	check_hresult(shim()->get_WebAccount(put(value)));
	return value;
}

template <typename T> void impl_IWebAccountProviderManageAccountOperation<T>::ReportCompleted() const
{
	check_hresult(shim()->abi_ReportCompleted());
}

template <typename T> Windows::Security::Credentials::WebAccount impl_IWebAccountProviderDeleteAccountOperation<T>::WebAccount() const
{
	Windows::Security::Credentials::WebAccount value = nullptr;
	check_hresult(shim()->get_WebAccount(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::WebAccount impl_IWebAccountProviderSignOutAccountOperation<T>::WebAccount() const
{
	Windows::Security::Credentials::WebAccount value = nullptr;
	check_hresult(shim()->get_WebAccount(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IWebAccountProviderSignOutAccountOperation<T>::ApplicationCallbackUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_ApplicationCallbackUri(put(value)));
	return value;
}

template <typename T> String impl_IWebAccountProviderSignOutAccountOperation<T>::ClientId() const
{
	String value;
	check_hresult(shim()->get_ClientId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IWebAccountProviderRetrieveCookiesOperation<T>::Context() const
{
	Windows::Foundation::Uri webCookieRequestContext = nullptr;
	check_hresult(shim()->get_Context(put(webCookieRequestContext)));
	return webCookieRequestContext;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::HttpCookie> impl_IWebAccountProviderRetrieveCookiesOperation<T>::Cookies() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::HttpCookie> cookies;
	check_hresult(shim()->get_Cookies(put(cookies)));
	return cookies;
}

template <typename T> void impl_IWebAccountProviderRetrieveCookiesOperation<T>::Uri(Windows::Foundation::Uri const & uri) const
{
	check_hresult(shim()->put_Uri(get(uri)));
}

template <typename T> Windows::Foundation::Uri impl_IWebAccountProviderRetrieveCookiesOperation<T>::Uri() const
{
	Windows::Foundation::Uri uri = nullptr;
	check_hresult(shim()->get_Uri(put(uri)));
	return uri;
}

template <typename T> Windows::Foundation::Uri impl_IWebAccountProviderRetrieveCookiesOperation<T>::ApplicationCallbackUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_ApplicationCallbackUri(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation impl_IWebAccountProviderTokenObjects<T>::Operation() const
{
	Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation value;
	check_hresult(shim()->get_Operation(put(value)));
	return value;
}

}}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Credentials {

template <typename T> Windows::Security::Credentials::WebAccount impl_IWebAccountFactory<T>::CreateWebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, StringReference const & userName, Windows::Security::Credentials::WebAccountState const state) const
{
	Windows::Security::Credentials::WebAccount instance = nullptr;
	check_hresult(shim()->abi_CreateWebAccount(get(webAccountProvider), get(userName), state, put(instance)));
	return instance;
}

template <typename T> Windows::Security::Credentials::WebAccountProvider impl_IWebAccount<T>::WebAccountProvider() const
{
	Windows::Security::Credentials::WebAccountProvider value = nullptr;
	check_hresult(shim()->get_WebAccountProvider(put(value)));
	return value;
}

template <typename T> String impl_IWebAccount<T>::UserName() const
{
	String value;
	check_hresult(shim()->get_UserName(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::WebAccountState impl_IWebAccount<T>::State() const
{
	Windows::Security::Credentials::WebAccountState value = {};
	check_hresult(shim()->get_State(&value));
	return value;
}

template <typename T> String impl_IWebAccount2<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, String> impl_IWebAccount2<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, String> value;
	check_hresult(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> impl_IWebAccount2<T>::GetPictureAsync(Windows::Security::Credentials::WebAccountPictureSize const desizedSize) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> asyncInfo;
	check_hresult(shim()->abi_GetPictureAsync(desizedSize, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccount2<T>::SignOutAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check_hresult(shim()->abi_SignOutAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccount2<T>::SignOutAsync(StringReference const & clientId) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check_hresult(shim()->abi_SignOutWithClientIdAsync(get(clientId), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Security::Credentials::WebAccountProvider impl_IWebAccountProviderFactory<T>::CreateWebAccountProvider(StringReference const & id, StringReference const & displayName, Windows::Foundation::Uri const & iconUri) const
{
	Windows::Security::Credentials::WebAccountProvider instance = nullptr;
	check_hresult(shim()->abi_CreateWebAccountProvider(get(id), get(displayName), get(iconUri), put(instance)));
	return instance;
}

template <typename T> String impl_IWebAccountProvider<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IWebAccountProvider<T>::DisplayName() const
{
	String value;
	check_hresult(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IWebAccountProvider<T>::IconUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_IconUri(put(value)));
	return value;
}

template <typename T> String impl_IWebAccountProvider2<T>::DisplayPurpose() const
{
	String value;
	check_hresult(shim()->get_DisplayPurpose(put(value)));
	return value;
}

template <typename T> String impl_IWebAccountProvider2<T>::Authority() const
{
	String value;
	check_hresult(shim()->get_Authority(put(value)));
	return value;
}

template <typename T> Windows::System::User impl_IWebAccountProvider3<T>::User() const
{
	Windows::System::User user = nullptr;
	check_hresult(shim()->get_User(put(user)));
	return user;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IKeyCredentialManagerStatics<T>::IsSupportedAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> value;
	check_hresult(shim()->abi_IsSupportedAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IKeyCredentialManagerStatics<T>::RenewAttestationAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_RenewAttestationAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialRetrievalResult> impl_IKeyCredentialManagerStatics<T>::RequestCreateAsync(StringReference const & name, Windows::Security::Credentials::KeyCredentialCreationOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialRetrievalResult> value;
	check_hresult(shim()->abi_RequestCreateAsync(get(name), option, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialRetrievalResult> impl_IKeyCredentialManagerStatics<T>::OpenAsync(StringReference const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialRetrievalResult> value;
	check_hresult(shim()->abi_OpenAsync(get(name), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IKeyCredentialManagerStatics<T>::DeleteAsync(StringReference const & name) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_DeleteAsync(get(name), put(operation)));
	return operation;
}

template <typename T> String impl_IKeyCredential<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IKeyCredential<T>::RetrievePublicKey() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->abi_RetrievePublicKeyWithDefaultBlobType(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IKeyCredential<T>::RetrievePublicKey(Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType const blobType) const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->abi_RetrievePublicKeyWithBlobType(blobType, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialOperationResult> impl_IKeyCredential<T>::RequestSignAsync(Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialOperationResult> value;
	check_hresult(shim()->abi_RequestSignAsync(get(data), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialAttestationResult> impl_IKeyCredential<T>::GetAttestationAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialAttestationResult> value;
	check_hresult(shim()->abi_GetAttestationAsync(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::KeyCredential impl_IKeyCredentialRetrievalResult<T>::Credential() const
{
	Windows::Security::Credentials::KeyCredential value = nullptr;
	check_hresult(shim()->get_Credential(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::KeyCredentialStatus impl_IKeyCredentialRetrievalResult<T>::Status() const
{
	Windows::Security::Credentials::KeyCredentialStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IKeyCredentialOperationResult<T>::Result() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_Result(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::KeyCredentialStatus impl_IKeyCredentialOperationResult<T>::Status() const
{
	Windows::Security::Credentials::KeyCredentialStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IKeyCredentialAttestationResult<T>::CertificateChainBuffer() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_CertificateChainBuffer(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IKeyCredentialAttestationResult<T>::AttestationBuffer() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_AttestationBuffer(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::KeyCredentialAttestationStatus impl_IKeyCredentialAttestationResult<T>::Status() const
{
	Windows::Security::Credentials::KeyCredentialAttestationStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> String impl_IPasswordCredential<T>::Resource() const
{
	String resource;
	check_hresult(shim()->get_Resource(put(resource)));
	return resource;
}

template <typename T> void impl_IPasswordCredential<T>::Resource(StringReference const & resource) const
{
	check_hresult(shim()->put_Resource(get(resource)));
}

template <typename T> String impl_IPasswordCredential<T>::UserName() const
{
	String userName;
	check_hresult(shim()->get_UserName(put(userName)));
	return userName;
}

template <typename T> void impl_IPasswordCredential<T>::UserName(StringReference const & userName) const
{
	check_hresult(shim()->put_UserName(get(userName)));
}

template <typename T> String impl_IPasswordCredential<T>::Password() const
{
	String password;
	check_hresult(shim()->get_Password(put(password)));
	return password;
}

template <typename T> void impl_IPasswordCredential<T>::Password(StringReference const & password) const
{
	check_hresult(shim()->put_Password(get(password)));
}

template <typename T> void impl_IPasswordCredential<T>::RetrievePassword() const
{
	check_hresult(shim()->abi_RetrievePassword());
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IPasswordCredential<T>::Properties() const
{
	Windows::Foundation::Collections::IPropertySet props;
	check_hresult(shim()->get_Properties(put(props)));
	return props;
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_ICredentialFactory<T>::CreatePasswordCredential(StringReference const & resource, StringReference const & userName, StringReference const & password) const
{
	Windows::Security::Credentials::PasswordCredential credential = nullptr;
	check_hresult(shim()->abi_CreatePasswordCredential(get(resource), get(userName), get(password), put(credential)));
	return credential;
}

template <typename T> void impl_IPasswordVault<T>::Add(Windows::Security::Credentials::PasswordCredential const & credential) const
{
	check_hresult(shim()->abi_Add(get(credential)));
}

template <typename T> void impl_IPasswordVault<T>::Remove(Windows::Security::Credentials::PasswordCredential const & credential) const
{
	check_hresult(shim()->abi_Remove(get(credential)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IPasswordVault<T>::Retrieve(StringReference const & resource, StringReference const & userName) const
{
	Windows::Security::Credentials::PasswordCredential credential = nullptr;
	check_hresult(shim()->abi_Retrieve(get(resource), get(userName), put(credential)));
	return credential;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> impl_IPasswordVault<T>::FindAllByResource(StringReference const & resource) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> credentials;
	check_hresult(shim()->abi_FindAllByResource(get(resource), put(credentials)));
	return credentials;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> impl_IPasswordVault<T>::FindAllByUserName(StringReference const & userName) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> credentials;
	check_hresult(shim()->abi_FindAllByUserName(get(userName), put(credentials)));
	return credentials;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> impl_IPasswordVault<T>::RetrieveAll() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> credentials;
	check_hresult(shim()->abi_RetrieveAll(put(credentials)));
	return credentials;
}

}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

template <typename T> String impl_ICertificateRequestProperties<T>::Subject() const
{
	String value;
	check_hresult(shim()->get_Subject(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::Subject(StringReference const & value) const
{
	check_hresult(shim()->put_Subject(get(value)));
}

template <typename T> String impl_ICertificateRequestProperties<T>::KeyAlgorithmName() const
{
	String value;
	check_hresult(shim()->get_KeyAlgorithmName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::KeyAlgorithmName(StringReference const & value) const
{
	check_hresult(shim()->put_KeyAlgorithmName(get(value)));
}

template <typename T> unsigned impl_ICertificateRequestProperties<T>::KeySize() const
{
	unsigned value = {};
	check_hresult(shim()->get_KeySize(&value));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::KeySize(unsigned const value) const
{
	check_hresult(shim()->put_KeySize(value));
}

template <typename T> String impl_ICertificateRequestProperties<T>::FriendlyName() const
{
	String value;
	check_hresult(shim()->get_FriendlyName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::FriendlyName(StringReference const & value) const
{
	check_hresult(shim()->put_FriendlyName(get(value)));
}

template <typename T> String impl_ICertificateRequestProperties<T>::HashAlgorithmName() const
{
	String value;
	check_hresult(shim()->get_HashAlgorithmName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::HashAlgorithmName(StringReference const & value) const
{
	check_hresult(shim()->put_HashAlgorithmName(get(value)));
}

template <typename T> Windows::Security::Cryptography::Certificates::ExportOption impl_ICertificateRequestProperties<T>::Exportable() const
{
	Windows::Security::Cryptography::Certificates::ExportOption value = {};
	check_hresult(shim()->get_Exportable(&value));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::Exportable(Windows::Security::Cryptography::Certificates::ExportOption const value) const
{
	check_hresult(shim()->put_Exportable(value));
}

template <typename T> Windows::Security::Cryptography::Certificates::EnrollKeyUsages impl_ICertificateRequestProperties<T>::KeyUsages() const
{
	Windows::Security::Cryptography::Certificates::EnrollKeyUsages value = {};
	check_hresult(shim()->get_KeyUsages(&value));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::KeyUsages(Windows::Security::Cryptography::Certificates::EnrollKeyUsages const value) const
{
	check_hresult(shim()->put_KeyUsages(value));
}

template <typename T> Windows::Security::Cryptography::Certificates::KeyProtectionLevel impl_ICertificateRequestProperties<T>::KeyProtectionLevel() const
{
	Windows::Security::Cryptography::Certificates::KeyProtectionLevel value = {};
	check_hresult(shim()->get_KeyProtectionLevel(&value));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::KeyProtectionLevel(Windows::Security::Cryptography::Certificates::KeyProtectionLevel const value) const
{
	check_hresult(shim()->put_KeyProtectionLevel(value));
}

template <typename T> String impl_ICertificateRequestProperties<T>::KeyStorageProviderName() const
{
	String value;
	check_hresult(shim()->get_KeyStorageProviderName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::KeyStorageProviderName(StringReference const & value) const
{
	check_hresult(shim()->put_KeyStorageProviderName(get(value)));
}

template <typename T> String impl_ICertificateRequestProperties2<T>::SmartcardReaderName() const
{
	String value;
	check_hresult(shim()->get_SmartcardReaderName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties2<T>::SmartcardReaderName(StringReference const & value) const
{
	check_hresult(shim()->put_SmartcardReaderName(get(value)));
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_ICertificateRequestProperties2<T>::SigningCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check_hresult(shim()->get_SigningCertificate(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties2<T>::SigningCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const
{
	check_hresult(shim()->put_SigningCertificate(get(value)));
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_ICertificateRequestProperties2<T>::AttestationCredentialCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check_hresult(shim()->get_AttestationCredentialCertificate(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties2<T>::AttestationCredentialCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const
{
	check_hresult(shim()->put_AttestationCredentialCertificate(get(value)));
}

template <typename T> String impl_ICertificateRequestProperties3<T>::CurveName() const
{
	String value;
	check_hresult(shim()->get_CurveName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties3<T>::CurveName(StringReference const & value) const
{
	check_hresult(shim()->put_CurveName(get(value)));
}

template <typename T> String impl_ICertificateRequestProperties3<T>::ContainerNamePrefix() const
{
	String value;
	check_hresult(shim()->get_ContainerNamePrefix(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties3<T>::ContainerNamePrefix(StringReference const & value) const
{
	check_hresult(shim()->put_ContainerNamePrefix(get(value)));
}

template <typename T> String impl_ICertificateRequestProperties3<T>::ContainerName() const
{
	String value;
	check_hresult(shim()->get_ContainerName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties3<T>::ContainerName(StringReference const & value) const
{
	check_hresult(shim()->put_ContainerName(get(value)));
}

template <typename T> bool impl_ICertificateRequestProperties3<T>::UseExistingKey() const
{
	bool value = {};
	check_hresult(shim()->get_UseExistingKey(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties3<T>::UseExistingKey(bool const value) const
{
	check_hresult(shim()->put_UseExistingKey(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICertificateEnrollmentManagerStatics<T>::CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request) const
{
	Windows::Foundation::IAsyncOperation<String> value;
	check_hresult(shim()->abi_CreateRequestAsync(get(request), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICertificateEnrollmentManagerStatics<T>::InstallCertificateAsync(StringReference const & certificate, Windows::Security::Cryptography::Certificates::InstallOptions const installOption) const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_InstallCertificateAsync(get(certificate), installOption, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICertificateEnrollmentManagerStatics<T>::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, StringReference const & friendlyName) const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_ImportPfxDataAsync(get(pfxData), get(password), exportable, keyProtectionLevel, installOption, get(friendlyName), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager impl_ICertificateEnrollmentManagerStatics2<T>::UserCertificateEnrollmentManager() const
{
	Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager value = nullptr;
	check_hresult(shim()->get_UserCertificateEnrollmentManager(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICertificateEnrollmentManagerStatics2<T>::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, StringReference const & friendlyName, StringReference const & keyStorageProvider) const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_ImportPfxDataToKspAsync(get(pfxData), get(password), exportable, keyProtectionLevel, installOption, get(friendlyName), get(keyStorageProvider), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICertificateEnrollmentManagerStatics3<T>::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::PfxImportParameters const & pfxImportParameters) const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_ImportPfxDataToKspWithParametersAsync(get(pfxData), get(password), get(pfxImportParameters), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IKeyAttestationHelperStatics<T>::DecryptTpmAttestationCredentialAsync(StringReference const & credential) const
{
	Windows::Foundation::IAsyncOperation<String> value;
	check_hresult(shim()->abi_DecryptTpmAttestationCredentialAsync(get(credential), put(value)));
	return value;
}

template <typename T> String impl_IKeyAttestationHelperStatics<T>::GetTpmAttestationCredentialId(StringReference const & credential) const
{
	String value;
	check_hresult(shim()->abi_GetTpmAttestationCredentialId(get(credential), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IKeyAttestationHelperStatics2<T>::DecryptTpmAttestationCredentialAsync(StringReference const & credential, StringReference const & containerName) const
{
	Windows::Foundation::IAsyncOperation<String> value;
	check_hresult(shim()->abi_DecryptTpmAttestationCredentialWithContainerNameAsync(get(credential), get(containerName), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> impl_ICertificateStoresStatics<T>::FindAllAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> value;
	check_hresult(shim()->abi_FindAllAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> impl_ICertificateStoresStatics<T>::FindAllAsync(Windows::Security::Cryptography::Certificates::CertificateQuery const & query) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> value;
	check_hresult(shim()->abi_FindAllWithQueryAsync(get(query), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CertificateStore impl_ICertificateStoresStatics<T>::TrustedRootCertificationAuthorities() const
{
	Windows::Security::Cryptography::Certificates::CertificateStore value = nullptr;
	check_hresult(shim()->get_TrustedRootCertificationAuthorities(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CertificateStore impl_ICertificateStoresStatics<T>::IntermediateCertificationAuthorities() const
{
	Windows::Security::Cryptography::Certificates::CertificateStore value = nullptr;
	check_hresult(shim()->get_IntermediateCertificationAuthorities(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CertificateStore impl_ICertificateStoresStatics<T>::GetStoreByName(StringReference const & storeName) const
{
	Windows::Security::Cryptography::Certificates::CertificateStore value = nullptr;
	check_hresult(shim()->abi_GetStoreByName(get(storeName), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IUserCertificateEnrollmentManager<T>::CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request) const
{
	Windows::Foundation::IAsyncOperation<String> value;
	check_hresult(shim()->abi_CreateRequestAsync(get(request), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUserCertificateEnrollmentManager<T>::InstallCertificateAsync(StringReference const & certificate, Windows::Security::Cryptography::Certificates::InstallOptions const installOption) const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_InstallCertificateAsync(get(certificate), installOption, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUserCertificateEnrollmentManager<T>::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, StringReference const & friendlyName) const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_ImportPfxDataAsync(get(pfxData), get(password), exportable, keyProtectionLevel, installOption, get(friendlyName), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUserCertificateEnrollmentManager<T>::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, StringReference const & friendlyName, StringReference const & keyStorageProvider) const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_ImportPfxDataToKspAsync(get(pfxData), get(password), exportable, keyProtectionLevel, installOption, get(friendlyName), get(keyStorageProvider), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUserCertificateEnrollmentManager2<T>::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::PfxImportParameters const & pfxImportParameters) const
{
	Windows::Foundation::IAsyncAction value;
	check_hresult(shim()->abi_ImportPfxDataToKspWithParametersAsync(get(pfxData), get(password), get(pfxImportParameters), put(value)));
	return value;
}

template <typename T> void impl_ICertificateStore<T>::Add(Windows::Security::Cryptography::Certificates::Certificate const & certificate) const
{
	check_hresult(shim()->abi_Add(get(certificate)));
}

template <typename T> void impl_ICertificateStore<T>::Delete(Windows::Security::Cryptography::Certificates::Certificate const & certificate) const
{
	check_hresult(shim()->abi_Delete(get(certificate)));
}

template <typename T> String impl_ICertificateStore2<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Rsa() const
{
	String value;
	check_hresult(shim()->get_Rsa(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Dsa() const
{
	String value;
	check_hresult(shim()->get_Dsa(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdh256() const
{
	String value;
	check_hresult(shim()->get_Ecdh256(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdh384() const
{
	String value;
	check_hresult(shim()->get_Ecdh384(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdh521() const
{
	String value;
	check_hresult(shim()->get_Ecdh521(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdsa256() const
{
	String value;
	check_hresult(shim()->get_Ecdsa256(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdsa384() const
{
	String value;
	check_hresult(shim()->get_Ecdsa384(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdsa521() const
{
	String value;
	check_hresult(shim()->get_Ecdsa521(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics2<T>::Ecdsa() const
{
	String value;
	check_hresult(shim()->get_Ecdsa(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics2<T>::Ecdh() const
{
	String value;
	check_hresult(shim()->get_Ecdh(put(value)));
	return value;
}

template <typename T> String impl_IKeyStorageProviderNamesStatics<T>::SoftwareKeyStorageProvider() const
{
	String value;
	check_hresult(shim()->get_SoftwareKeyStorageProvider(put(value)));
	return value;
}

template <typename T> String impl_IKeyStorageProviderNamesStatics<T>::SmartcardKeyStorageProvider() const
{
	String value;
	check_hresult(shim()->get_SmartcardKeyStorageProvider(put(value)));
	return value;
}

template <typename T> String impl_IKeyStorageProviderNamesStatics<T>::PlatformKeyStorageProvider() const
{
	String value;
	check_hresult(shim()->get_PlatformKeyStorageProvider(put(value)));
	return value;
}

template <typename T> String impl_IKeyStorageProviderNamesStatics2<T>::PassportKeyStorageProvider() const
{
	String value;
	check_hresult(shim()->get_PassportKeyStorageProvider(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IChainBuildingParameters<T>::EnhancedKeyUsages() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_EnhancedKeyUsages(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IChainBuildingParameters<T>::ValidationTimestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_ValidationTimestamp(&value));
	return value;
}

template <typename T> void impl_IChainBuildingParameters<T>::ValidationTimestamp(Windows::Foundation::DateTime const & value) const
{
	check_hresult(shim()->put_ValidationTimestamp(value));
}

template <typename T> bool impl_IChainBuildingParameters<T>::RevocationCheckEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_RevocationCheckEnabled(put(value)));
	return value;
}

template <typename T> void impl_IChainBuildingParameters<T>::RevocationCheckEnabled(bool const value) const
{
	check_hresult(shim()->put_RevocationCheckEnabled(value));
}

template <typename T> bool impl_IChainBuildingParameters<T>::NetworkRetrievalEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_NetworkRetrievalEnabled(put(value)));
	return value;
}

template <typename T> void impl_IChainBuildingParameters<T>::NetworkRetrievalEnabled(bool const value) const
{
	check_hresult(shim()->put_NetworkRetrievalEnabled(value));
}

template <typename T> bool impl_IChainBuildingParameters<T>::AuthorityInformationAccessEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_AuthorityInformationAccessEnabled(put(value)));
	return value;
}

template <typename T> void impl_IChainBuildingParameters<T>::AuthorityInformationAccessEnabled(bool const value) const
{
	check_hresult(shim()->put_AuthorityInformationAccessEnabled(value));
}

template <typename T> bool impl_IChainBuildingParameters<T>::CurrentTimeValidationEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_CurrentTimeValidationEnabled(put(value)));
	return value;
}

template <typename T> void impl_IChainBuildingParameters<T>::CurrentTimeValidationEnabled(bool const value) const
{
	check_hresult(shim()->put_CurrentTimeValidationEnabled(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Security::Cryptography::Certificates::Certificate> impl_IChainBuildingParameters<T>::ExclusiveTrustRoots() const
{
	Windows::Foundation::Collections::IVector<Windows::Security::Cryptography::Certificates::Certificate> certificates;
	check_hresult(shim()->get_ExclusiveTrustRoots(put(certificates)));
	return certificates;
}

template <typename T> Windows::Security::Cryptography::Certificates::CertificateChainPolicy impl_IChainValidationParameters<T>::CertificateChainPolicy() const
{
	Windows::Security::Cryptography::Certificates::CertificateChainPolicy value = {};
	check_hresult(shim()->get_CertificateChainPolicy(&value));
	return value;
}

template <typename T> void impl_IChainValidationParameters<T>::CertificateChainPolicy(Windows::Security::Cryptography::Certificates::CertificateChainPolicy const value) const
{
	check_hresult(shim()->put_CertificateChainPolicy(value));
}

template <typename T> Windows::Networking::HostName impl_IChainValidationParameters<T>::ServerDnsName() const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->get_ServerDnsName(put(value)));
	return value;
}

template <typename T> void impl_IChainValidationParameters<T>::ServerDnsName(Windows::Networking::HostName const & value) const
{
	check_hresult(shim()->put_ServerDnsName(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ICertificateQuery<T>::EnhancedKeyUsages() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_EnhancedKeyUsages(put(value)));
	return value;
}

template <typename T> String impl_ICertificateQuery<T>::IssuerName() const
{
	String value;
	check_hresult(shim()->get_IssuerName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateQuery<T>::IssuerName(StringReference const & value) const
{
	check_hresult(shim()->put_IssuerName(get(value)));
}

template <typename T> String impl_ICertificateQuery<T>::FriendlyName() const
{
	String value;
	check_hresult(shim()->get_FriendlyName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateQuery<T>::FriendlyName(StringReference const & value) const
{
	check_hresult(shim()->put_FriendlyName(get(value)));
}

template <typename T> bool impl_ICertificateQuery<T>::HardwareOnly() const
{
	bool value = {};
	check_hresult(shim()->get_HardwareOnly(put(value)));
	return value;
}

template <typename T> void impl_ICertificateQuery<T>::HardwareOnly(bool const value) const
{
	check_hresult(shim()->put_HardwareOnly(value));
}

template <typename T> bool impl_ICertificateQuery2<T>::IncludeDuplicates() const
{
	bool value = {};
	check_hresult(shim()->get_IncludeDuplicates(put(value)));
	return value;
}

template <typename T> void impl_ICertificateQuery2<T>::IncludeDuplicates(bool const value) const
{
	check_hresult(shim()->put_IncludeDuplicates(value));
}

template <typename T> bool impl_ICertificateQuery2<T>::IncludeExpiredCertificates() const
{
	bool value = {};
	check_hresult(shim()->get_IncludeExpiredCertificates(put(value)));
	return value;
}

template <typename T> void impl_ICertificateQuery2<T>::IncludeExpiredCertificates(bool const value) const
{
	check_hresult(shim()->put_IncludeExpiredCertificates(value));
}

template <typename T> String impl_ICertificateQuery2<T>::StoreName() const
{
	String value;
	check_hresult(shim()->get_StoreName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateQuery2<T>::StoreName(StringReference const & value) const
{
	check_hresult(shim()->put_StoreName(get(value)));
}

template <typename T> Windows::Security::Cryptography::Certificates::ChainValidationResult impl_ICertificateChain<T>::Validate() const
{
	Windows::Security::Cryptography::Certificates::ChainValidationResult status = {};
	check_hresult(shim()->abi_Validate(&status));
	return status;
}

template <typename T> Windows::Security::Cryptography::Certificates::ChainValidationResult impl_ICertificateChain<T>::Validate(Windows::Security::Cryptography::Certificates::ChainValidationParameters const & parameter) const
{
	Windows::Security::Cryptography::Certificates::ChainValidationResult status = {};
	check_hresult(shim()->abi_ValidateWithParameters(get(parameter), &status));
	return status;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_ICertificateChain<T>::GetCertificates(bool const includeRoot) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> certificates;
	check_hresult(shim()->abi_GetCertificates(includeRoot, put(certificates)));
	return certificates;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> impl_ICertificate<T>::BuildChainAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> value;
	check_hresult(shim()->abi_BuildChainAsync(get(certificates), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> impl_ICertificate<T>::BuildChainAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates, Windows::Security::Cryptography::Certificates::ChainBuildingParameters const & parameters) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> value;
	check_hresult(shim()->abi_BuildChainWithParametersAsync(get(certificates), get(parameters), put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICertificate<T>::GetCertificateBlob() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->abi_GetCertificateBlob(put(value)));
	return value;
}

template <typename T> String impl_ICertificate<T>::Subject() const
{
	String value;
	check_hresult(shim()->get_Subject(put(value)));
	return value;
}

template <typename T> String impl_ICertificate<T>::Issuer() const
{
	String value;
	check_hresult(shim()->get_Issuer(put(value)));
	return value;
}

template <typename T> bool impl_ICertificate<T>::HasPrivateKey() const
{
	bool value = {};
	check_hresult(shim()->get_HasPrivateKey(put(value)));
	return value;
}

template <typename T> bool impl_ICertificate<T>::IsStronglyProtected() const
{
	bool value = {};
	check_hresult(shim()->get_IsStronglyProtected(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ICertificate<T>::ValidFrom() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_ValidFrom(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ICertificate<T>::ValidTo() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_ValidTo(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ICertificate<T>::EnhancedKeyUsages() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_EnhancedKeyUsages(put(value)));
	return value;
}

template <typename T> void impl_ICertificate<T>::FriendlyName(StringReference const & value) const
{
	check_hresult(shim()->put_FriendlyName(get(value)));
}

template <typename T> String impl_ICertificate<T>::FriendlyName() const
{
	String value;
	check_hresult(shim()->get_FriendlyName(put(value)));
	return value;
}

template <typename T> bool impl_ICertificate2<T>::IsSecurityDeviceBound() const
{
	bool value = {};
	check_hresult(shim()->get_IsSecurityDeviceBound(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CertificateKeyUsages impl_ICertificate2<T>::KeyUsages() const
{
	Windows::Security::Cryptography::Certificates::CertificateKeyUsages value = nullptr;
	check_hresult(shim()->get_KeyUsages(put(value)));
	return value;
}

template <typename T> String impl_ICertificate2<T>::KeyAlgorithmName() const
{
	String value;
	check_hresult(shim()->get_KeyAlgorithmName(put(value)));
	return value;
}

template <typename T> String impl_ICertificate2<T>::SignatureAlgorithmName() const
{
	String value;
	check_hresult(shim()->get_SignatureAlgorithmName(put(value)));
	return value;
}

template <typename T> String impl_ICertificate2<T>::SignatureHashAlgorithmName() const
{
	String value;
	check_hresult(shim()->get_SignatureHashAlgorithmName(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::SubjectAlternativeNameInfo impl_ICertificate2<T>::SubjectAlternativeName() const
{
	Windows::Security::Cryptography::Certificates::SubjectAlternativeNameInfo value = nullptr;
	check_hresult(shim()->get_SubjectAlternativeName(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_ICertificateFactory<T>::CreateCertificate(Windows::Storage::Streams::IBuffer const & certBlob) const
{
	Windows::Security::Cryptography::Certificates::Certificate certificate = nullptr;
	check_hresult(shim()->abi_CreateCertificate(get(certBlob), put(certificate)));
	return certificate;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_ICmsTimestampInfo<T>::SigningCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check_hresult(shim()->get_SigningCertificate(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_ICmsTimestampInfo<T>::Certificates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value;
	check_hresult(shim()->get_Certificates(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ICmsTimestampInfo<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_ICmsSignerInfo<T>::Certificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check_hresult(shim()->get_Certificate(put(value)));
	return value;
}

template <typename T> void impl_ICmsSignerInfo<T>::Certificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const
{
	check_hresult(shim()->put_Certificate(get(value)));
}

template <typename T> String impl_ICmsSignerInfo<T>::HashAlgorithmName() const
{
	String value;
	check_hresult(shim()->get_HashAlgorithmName(put(value)));
	return value;
}

template <typename T> void impl_ICmsSignerInfo<T>::HashAlgorithmName(StringReference const & value) const
{
	check_hresult(shim()->put_HashAlgorithmName(get(value)));
}

template <typename T> Windows::Security::Cryptography::Certificates::CmsTimestampInfo impl_ICmsSignerInfo<T>::TimestampInfo() const
{
	Windows::Security::Cryptography::Certificates::CmsTimestampInfo value = nullptr;
	check_hresult(shim()->get_TimestampInfo(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISubjectAlternativeNameInfo<T>::EmailName() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_EmailName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISubjectAlternativeNameInfo<T>::IPAddress() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_IPAddress(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISubjectAlternativeNameInfo<T>::Url() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_Url(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISubjectAlternativeNameInfo<T>::DnsName() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_DnsName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISubjectAlternativeNameInfo<T>::DistinguishedName() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_DistinguishedName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISubjectAlternativeNameInfo<T>::PrincipalName() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_PrincipalName(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::ExportOption impl_IPfxImportParameters<T>::Exportable() const
{
	Windows::Security::Cryptography::Certificates::ExportOption value = {};
	check_hresult(shim()->get_Exportable(&value));
	return value;
}

template <typename T> void impl_IPfxImportParameters<T>::Exportable(Windows::Security::Cryptography::Certificates::ExportOption const value) const
{
	check_hresult(shim()->put_Exportable(value));
}

template <typename T> Windows::Security::Cryptography::Certificates::KeyProtectionLevel impl_IPfxImportParameters<T>::KeyProtectionLevel() const
{
	Windows::Security::Cryptography::Certificates::KeyProtectionLevel value = {};
	check_hresult(shim()->get_KeyProtectionLevel(&value));
	return value;
}

template <typename T> void impl_IPfxImportParameters<T>::KeyProtectionLevel(Windows::Security::Cryptography::Certificates::KeyProtectionLevel const value) const
{
	check_hresult(shim()->put_KeyProtectionLevel(value));
}

template <typename T> Windows::Security::Cryptography::Certificates::InstallOptions impl_IPfxImportParameters<T>::InstallOptions() const
{
	Windows::Security::Cryptography::Certificates::InstallOptions value = {};
	check_hresult(shim()->get_InstallOptions(&value));
	return value;
}

template <typename T> void impl_IPfxImportParameters<T>::InstallOptions(Windows::Security::Cryptography::Certificates::InstallOptions const value) const
{
	check_hresult(shim()->put_InstallOptions(value));
}

template <typename T> String impl_IPfxImportParameters<T>::FriendlyName() const
{
	String value;
	check_hresult(shim()->get_FriendlyName(put(value)));
	return value;
}

template <typename T> void impl_IPfxImportParameters<T>::FriendlyName(StringReference const & value) const
{
	check_hresult(shim()->put_FriendlyName(get(value)));
}

template <typename T> String impl_IPfxImportParameters<T>::KeyStorageProviderName() const
{
	String value;
	check_hresult(shim()->get_KeyStorageProviderName(put(value)));
	return value;
}

template <typename T> void impl_IPfxImportParameters<T>::KeyStorageProviderName(StringReference const & value) const
{
	check_hresult(shim()->put_KeyStorageProviderName(get(value)));
}

template <typename T> String impl_IPfxImportParameters<T>::ContainerNamePrefix() const
{
	String value;
	check_hresult(shim()->get_ContainerNamePrefix(put(value)));
	return value;
}

template <typename T> void impl_IPfxImportParameters<T>::ContainerNamePrefix(StringReference const & value) const
{
	check_hresult(shim()->put_ContainerNamePrefix(get(value)));
}

template <typename T> String impl_IPfxImportParameters<T>::ReaderName() const
{
	String value;
	check_hresult(shim()->get_ReaderName(put(value)));
	return value;
}

template <typename T> void impl_IPfxImportParameters<T>::ReaderName(StringReference const & value) const
{
	check_hresult(shim()->put_ReaderName(get(value)));
}

template <typename T> bool impl_ICertificateKeyUsages<T>::EncipherOnly() const
{
	bool value = {};
	check_hresult(shim()->get_EncipherOnly(put(value)));
	return value;
}

template <typename T> void impl_ICertificateKeyUsages<T>::EncipherOnly(bool const value) const
{
	check_hresult(shim()->put_EncipherOnly(value));
}

template <typename T> bool impl_ICertificateKeyUsages<T>::CrlSign() const
{
	bool value = {};
	check_hresult(shim()->get_CrlSign(put(value)));
	return value;
}

template <typename T> void impl_ICertificateKeyUsages<T>::CrlSign(bool const value) const
{
	check_hresult(shim()->put_CrlSign(value));
}

template <typename T> bool impl_ICertificateKeyUsages<T>::KeyCertificateSign() const
{
	bool value = {};
	check_hresult(shim()->get_KeyCertificateSign(put(value)));
	return value;
}

template <typename T> void impl_ICertificateKeyUsages<T>::KeyCertificateSign(bool const value) const
{
	check_hresult(shim()->put_KeyCertificateSign(value));
}

template <typename T> bool impl_ICertificateKeyUsages<T>::KeyAgreement() const
{
	bool value = {};
	check_hresult(shim()->get_KeyAgreement(put(value)));
	return value;
}

template <typename T> void impl_ICertificateKeyUsages<T>::KeyAgreement(bool const value) const
{
	check_hresult(shim()->put_KeyAgreement(value));
}

template <typename T> bool impl_ICertificateKeyUsages<T>::DataEncipherment() const
{
	bool value = {};
	check_hresult(shim()->get_DataEncipherment(put(value)));
	return value;
}

template <typename T> void impl_ICertificateKeyUsages<T>::DataEncipherment(bool const value) const
{
	check_hresult(shim()->put_DataEncipherment(value));
}

template <typename T> bool impl_ICertificateKeyUsages<T>::KeyEncipherment() const
{
	bool value = {};
	check_hresult(shim()->get_KeyEncipherment(put(value)));
	return value;
}

template <typename T> void impl_ICertificateKeyUsages<T>::KeyEncipherment(bool const value) const
{
	check_hresult(shim()->put_KeyEncipherment(value));
}

template <typename T> bool impl_ICertificateKeyUsages<T>::NonRepudiation() const
{
	bool value = {};
	check_hresult(shim()->get_NonRepudiation(put(value)));
	return value;
}

template <typename T> void impl_ICertificateKeyUsages<T>::NonRepudiation(bool const value) const
{
	check_hresult(shim()->put_NonRepudiation(value));
}

template <typename T> bool impl_ICertificateKeyUsages<T>::DigitalSignature() const
{
	bool value = {};
	check_hresult(shim()->get_DigitalSignature(put(value)));
	return value;
}

template <typename T> void impl_ICertificateKeyUsages<T>::DigitalSignature(bool const value) const
{
	check_hresult(shim()->put_DigitalSignature(value));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_ICmsAttachedSignature<T>::Certificates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value;
	check_hresult(shim()->get_Certificates(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> impl_ICmsAttachedSignature<T>::Signers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> value;
	check_hresult(shim()->get_Signers(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::SignatureValidationResult impl_ICmsAttachedSignature<T>::VerifySignature() const
{
	Windows::Security::Cryptography::Certificates::SignatureValidationResult value = {};
	check_hresult(shim()->abi_VerifySignature(&value));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CmsAttachedSignature impl_ICmsAttachedSignatureFactory<T>::CreateCmsAttachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) const
{
	Windows::Security::Cryptography::Certificates::CmsAttachedSignature cmsSignedData = nullptr;
	check_hresult(shim()->abi_CreateCmsAttachedSignature(get(inputBlob), put(cmsSignedData)));
	return cmsSignedData;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ICmsAttachedSignatureStatics<T>::GenerateSignatureAsync(Windows::Storage::Streams::IBuffer const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> outputBlob;
	check_hresult(shim()->abi_GenerateSignatureAsync(get(data), get(signers), get(certificates), put(outputBlob)));
	return outputBlob;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_ICmsDetachedSignature<T>::Certificates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value;
	check_hresult(shim()->get_Certificates(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> impl_ICmsDetachedSignature<T>::Signers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> value;
	check_hresult(shim()->get_Signers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Security::Cryptography::Certificates::SignatureValidationResult> impl_ICmsDetachedSignature<T>::VerifySignatureAsync(Windows::Storage::Streams::IInputStream const & data) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::Cryptography::Certificates::SignatureValidationResult> value;
	check_hresult(shim()->abi_VerifySignatureAsync(get(data), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CmsDetachedSignature impl_ICmsDetachedSignatureFactory<T>::CreateCmsDetachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) const
{
	Windows::Security::Cryptography::Certificates::CmsDetachedSignature cmsSignedData = nullptr;
	check_hresult(shim()->abi_CreateCmsDetachedSignature(get(inputBlob), put(cmsSignedData)));
	return cmsSignedData;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ICmsDetachedSignatureStatics<T>::GenerateSignatureAsync(Windows::Storage::Streams::IInputStream const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> outputBlob;
	check_hresult(shim()->abi_GenerateSignatureAsync(get(data), get(signers), get(certificates), put(outputBlob)));
	return outputBlob;
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

template <typename T> Windows::Storage::Streams::IBuffer impl_IKeyDerivationParameters<T>::KdfGenericBinary() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_KdfGenericBinary(put(value)));
	return value;
}

template <typename T> void impl_IKeyDerivationParameters<T>::KdfGenericBinary(Windows::Storage::Streams::IBuffer const & value) const
{
	check_hresult(shim()->put_KdfGenericBinary(get(value)));
}

template <typename T> unsigned impl_IKeyDerivationParameters<T>::IterationCount() const
{
	unsigned value = {};
	check_hresult(shim()->get_IterationCount(&value));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm impl_IKeyDerivationParameters2<T>::Capi1KdfTargetAlgorithm() const
{
	Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm value = {};
	check_hresult(shim()->get_Capi1KdfTargetAlgorithm(&value));
	return value;
}

template <typename T> void impl_IKeyDerivationParameters2<T>::Capi1KdfTargetAlgorithm(Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm const value) const
{
	check_hresult(shim()->put_Capi1KdfTargetAlgorithm(value));
}

template <typename T> Windows::Security::Cryptography::Core::KeyDerivationParameters impl_IKeyDerivationParametersStatics<T>::BuildForPbkdf2(Windows::Storage::Streams::IBuffer const & pbkdf2Salt, unsigned const iterationCount) const
{
	Windows::Security::Cryptography::Core::KeyDerivationParameters value = nullptr;
	check_hresult(shim()->abi_BuildForPbkdf2(get(pbkdf2Salt), iterationCount, put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::KeyDerivationParameters impl_IKeyDerivationParametersStatics<T>::BuildForSP800108(Windows::Storage::Streams::IBuffer const & label, Windows::Storage::Streams::IBuffer const & context) const
{
	Windows::Security::Cryptography::Core::KeyDerivationParameters value = nullptr;
	check_hresult(shim()->abi_BuildForSP800108(get(label), get(context), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::KeyDerivationParameters impl_IKeyDerivationParametersStatics<T>::BuildForSP80056a(Windows::Storage::Streams::IBuffer const & algorithmId, Windows::Storage::Streams::IBuffer const & partyUInfo, Windows::Storage::Streams::IBuffer const & partyVInfo, Windows::Storage::Streams::IBuffer const & suppPubInfo, Windows::Storage::Streams::IBuffer const & suppPrivInfo) const
{
	Windows::Security::Cryptography::Core::KeyDerivationParameters value = nullptr;
	check_hresult(shim()->abi_BuildForSP80056a(get(algorithmId), get(partyUInfo), get(partyVInfo), get(suppPubInfo), get(suppPrivInfo), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::KeyDerivationParameters impl_IKeyDerivationParametersStatics2<T>::BuildForCapi1Kdf(Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm const capi1KdfTargetAlgorithm) const
{
	Windows::Security::Cryptography::Core::KeyDerivationParameters value = nullptr;
	check_hresult(shim()->abi_BuildForCapi1Kdf(capi1KdfTargetAlgorithm, put(value)));
	return value;
}

template <typename T> unsigned impl_ICryptographicKey<T>::KeySize() const
{
	unsigned value = {};
	check_hresult(shim()->get_KeySize(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicKey<T>::Export() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->abi_ExportDefaultPrivateKeyBlobType(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicKey<T>::Export(Windows::Security::Cryptography::Core::CryptographicPrivateKeyBlobType const BlobType) const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->abi_ExportPrivateKeyWithBlobType(BlobType, put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicKey<T>::ExportPublicKey() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->abi_ExportDefaultPublicKeyBlobType(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicKey<T>::ExportPublicKey(Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType const BlobType) const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->abi_ExportPublicKeyWithBlobType(BlobType, put(value)));
	return value;
}

template <typename T> void impl_IHashComputation<T>::Append(Windows::Storage::Streams::IBuffer const & data) const
{
	check_hresult(shim()->abi_Append(get(data)));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHashComputation<T>::GetValueAndReset() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->abi_GetValueAndReset(put(value)));
	return value;
}

template <typename T> String impl_IHashAlgorithmProvider<T>::AlgorithmName() const
{
	String value;
	check_hresult(shim()->get_AlgorithmName(put(value)));
	return value;
}

template <typename T> unsigned impl_IHashAlgorithmProvider<T>::HashLength() const
{
	unsigned value = {};
	check_hresult(shim()->get_HashLength(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHashAlgorithmProvider<T>::HashData(Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->abi_HashData(get(data), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicHash impl_IHashAlgorithmProvider<T>::CreateHash() const
{
	Windows::Security::Cryptography::Core::CryptographicHash Value = nullptr;
	check_hresult(shim()->abi_CreateHash(put(Value)));
	return Value;
}

template <typename T> String impl_IMacAlgorithmProvider<T>::AlgorithmName() const
{
	String value;
	check_hresult(shim()->get_AlgorithmName(put(value)));
	return value;
}

template <typename T> unsigned impl_IMacAlgorithmProvider<T>::MacLength() const
{
	unsigned value = {};
	check_hresult(shim()->get_MacLength(&value));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IMacAlgorithmProvider<T>::CreateKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const
{
	Windows::Security::Cryptography::Core::CryptographicKey macKey = nullptr;
	check_hresult(shim()->abi_CreateKey(get(keyMaterial), put(macKey)));
	return macKey;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicHash impl_IMacAlgorithmProvider2<T>::CreateHash(Windows::Storage::Streams::IBuffer const & keyMaterial) const
{
	Windows::Security::Cryptography::Core::CryptographicHash value = nullptr;
	check_hresult(shim()->abi_CreateHash(get(keyMaterial), put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmProvider<T>::AlgorithmName() const
{
	String value;
	check_hresult(shim()->get_AlgorithmName(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IKeyDerivationAlgorithmProvider<T>::CreateKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check_hresult(shim()->abi_CreateKey(get(keyMaterial), put(key)));
	return key;
}

template <typename T> String impl_ISymmetricKeyAlgorithmProvider<T>::AlgorithmName() const
{
	String value;
	check_hresult(shim()->get_AlgorithmName(put(value)));
	return value;
}

template <typename T> unsigned impl_ISymmetricKeyAlgorithmProvider<T>::BlockLength() const
{
	unsigned value = {};
	check_hresult(shim()->get_BlockLength(&value));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_ISymmetricKeyAlgorithmProvider<T>::CreateSymmetricKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check_hresult(shim()->abi_CreateSymmetricKey(get(keyMaterial), put(key)));
	return key;
}

template <typename T> String impl_IAsymmetricKeyAlgorithmProvider<T>::AlgorithmName() const
{
	String value;
	check_hresult(shim()->get_AlgorithmName(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider<T>::CreateKeyPair(unsigned const keySize) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check_hresult(shim()->abi_CreateKeyPair(keySize, put(key)));
	return key;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider<T>::ImportKeyPair(Windows::Storage::Streams::IBuffer const & keyBlob) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check_hresult(shim()->abi_ImportDefaultPrivateKeyBlob(get(keyBlob), put(key)));
	return key;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider<T>::ImportKeyPair(Windows::Storage::Streams::IBuffer const & keyBlob, Windows::Security::Cryptography::Core::CryptographicPrivateKeyBlobType const BlobType) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check_hresult(shim()->abi_ImportKeyPairWithBlobType(get(keyBlob), BlobType, put(key)));
	return key;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider<T>::ImportPublicKey(Windows::Storage::Streams::IBuffer const & keyBlob) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check_hresult(shim()->abi_ImportDefaultPublicKeyBlob(get(keyBlob), put(key)));
	return key;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider<T>::ImportPublicKey(Windows::Storage::Streams::IBuffer const & keyBlob, Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType const BlobType) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check_hresult(shim()->abi_ImportPublicKeyWithBlobType(get(keyBlob), BlobType, put(key)));
	return key;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider2<T>::CreateKeyPairWithCurveName(StringReference const & curveName) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check_hresult(shim()->abi_CreateKeyPairWithCurveName(get(curveName), put(key)));
	return key;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> impl_IPersistedKeyProviderStatics<T>::OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, StringReference const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding const padding) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> operation;
	check_hresult(shim()->abi_OpenKeyPairFromCertificateAsync(get(certificate), get(hashAlgorithmName), padding, put(operation)));
	return operation;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IPersistedKeyProviderStatics<T>::OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, StringReference const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding const padding) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check_hresult(shim()->abi_OpenPublicKeyFromCertificate(get(certificate), get(hashAlgorithmName), padding, put(key)));
	return key;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IEncryptedAndAuthenticatedData<T>::EncryptedData() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_EncryptedData(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IEncryptedAndAuthenticatedData<T>::AuthenticationTag() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_AuthenticationTag(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics<T>::Encrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->abi_Encrypt(get(key), get(data), get(iv), put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics<T>::Decrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->abi_Decrypt(get(key), get(data), get(iv), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData impl_ICryptographicEngineStatics<T>::EncryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticatedData) const
{
	Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData value = nullptr;
	check_hresult(shim()->abi_EncryptAndAuthenticate(get(key), get(data), get(nonce), get(authenticatedData), put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics<T>::DecryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticationTag, Windows::Storage::Streams::IBuffer const & authenticatedData) const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->abi_DecryptAndAuthenticate(get(key), get(data), get(nonce), get(authenticationTag), get(authenticatedData), put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics<T>::Sign(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->abi_Sign(get(key), get(data), put(value)));
	return value;
}

template <typename T> bool impl_ICryptographicEngineStatics<T>::VerifySignature(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature) const
{
	bool isAuthenticated = {};
	check_hresult(shim()->abi_VerifySignature(get(key), get(data), get(signature), put(isAuthenticated)));
	return isAuthenticated;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics<T>::DeriveKeyMaterial(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Security::Cryptography::Core::KeyDerivationParameters const & parameters, unsigned const desiredKeySize) const
{
	Windows::Storage::Streams::IBuffer keyMaterial;
	check_hresult(shim()->abi_DeriveKeyMaterial(get(key), get(parameters), desiredKeySize, put(keyMaterial)));
	return keyMaterial;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics2<T>::SignHashedData(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->abi_SignHashedData(get(key), get(data), put(value)));
	return value;
}

template <typename T> bool impl_ICryptographicEngineStatics2<T>::VerifySignatureWithHashInput(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature) const
{
	bool isAuthenticated = {};
	check_hresult(shim()->abi_VerifySignatureWithHashInput(get(key), get(data), get(signature), put(isAuthenticated)));
	return isAuthenticated;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ICryptographicEngineStatics2<T>::DecryptAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> value;
	check_hresult(shim()->abi_DecryptAsync(get(key), get(data), get(iv), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ICryptographicEngineStatics2<T>::SignAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> value;
	check_hresult(shim()->abi_SignAsync(get(key), get(data), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ICryptographicEngineStatics2<T>::SignHashedDataAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> value;
	check_hresult(shim()->abi_SignHashedDataAsync(get(key), get(data), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::HashAlgorithmProvider impl_IHashAlgorithmProviderStatics<T>::OpenAlgorithm(StringReference const & algorithm) const
{
	Windows::Security::Cryptography::Core::HashAlgorithmProvider provider = nullptr;
	check_hresult(shim()->abi_OpenAlgorithm(get(algorithm), put(provider)));
	return provider;
}

template <typename T> Windows::Security::Cryptography::Core::MacAlgorithmProvider impl_IMacAlgorithmProviderStatics<T>::OpenAlgorithm(StringReference const & algorithm) const
{
	Windows::Security::Cryptography::Core::MacAlgorithmProvider provider = nullptr;
	check_hresult(shim()->abi_OpenAlgorithm(get(algorithm), put(provider)));
	return provider;
}

template <typename T> Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider impl_IKeyDerivationAlgorithmProviderStatics<T>::OpenAlgorithm(StringReference const & algorithm) const
{
	Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider provider = nullptr;
	check_hresult(shim()->abi_OpenAlgorithm(get(algorithm), put(provider)));
	return provider;
}

template <typename T> Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider impl_ISymmetricKeyAlgorithmProviderStatics<T>::OpenAlgorithm(StringReference const & algorithm) const
{
	Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider provider = nullptr;
	check_hresult(shim()->abi_OpenAlgorithm(get(algorithm), put(provider)));
	return provider;
}

template <typename T> Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider impl_IAsymmetricKeyAlgorithmProviderStatics<T>::OpenAlgorithm(StringReference const & algorithm) const
{
	Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider provider = nullptr;
	check_hresult(shim()->abi_OpenAlgorithm(get(algorithm), put(provider)));
	return provider;
}

template <typename T> String impl_IHashAlgorithmNamesStatics<T>::Md5() const
{
	String value;
	check_hresult(shim()->get_Md5(put(value)));
	return value;
}

template <typename T> String impl_IHashAlgorithmNamesStatics<T>::Sha1() const
{
	String value;
	check_hresult(shim()->get_Sha1(put(value)));
	return value;
}

template <typename T> String impl_IHashAlgorithmNamesStatics<T>::Sha256() const
{
	String value;
	check_hresult(shim()->get_Sha256(put(value)));
	return value;
}

template <typename T> String impl_IHashAlgorithmNamesStatics<T>::Sha384() const
{
	String value;
	check_hresult(shim()->get_Sha384(put(value)));
	return value;
}

template <typename T> String impl_IHashAlgorithmNamesStatics<T>::Sha512() const
{
	String value;
	check_hresult(shim()->get_Sha512(put(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::HmacMd5() const
{
	String value;
	check_hresult(shim()->get_HmacMd5(put(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::HmacSha1() const
{
	String value;
	check_hresult(shim()->get_HmacSha1(put(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::HmacSha256() const
{
	String value;
	check_hresult(shim()->get_HmacSha256(put(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::HmacSha384() const
{
	String value;
	check_hresult(shim()->get_HmacSha384(put(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::HmacSha512() const
{
	String value;
	check_hresult(shim()->get_HmacSha512(put(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::AesCmac() const
{
	String value;
	check_hresult(shim()->get_AesCmac(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::DesCbc() const
{
	String value;
	check_hresult(shim()->get_DesCbc(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::DesEcb() const
{
	String value;
	check_hresult(shim()->get_DesEcb(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::TripleDesCbc() const
{
	String value;
	check_hresult(shim()->get_TripleDesCbc(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::TripleDesEcb() const
{
	String value;
	check_hresult(shim()->get_TripleDesEcb(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::Rc2Cbc() const
{
	String value;
	check_hresult(shim()->get_Rc2Cbc(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::Rc2Ecb() const
{
	String value;
	check_hresult(shim()->get_Rc2Ecb(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesCbc() const
{
	String value;
	check_hresult(shim()->get_AesCbc(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesEcb() const
{
	String value;
	check_hresult(shim()->get_AesEcb(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesGcm() const
{
	String value;
	check_hresult(shim()->get_AesGcm(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesCcm() const
{
	String value;
	check_hresult(shim()->get_AesCcm(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesCbcPkcs7() const
{
	String value;
	check_hresult(shim()->get_AesCbcPkcs7(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesEcbPkcs7() const
{
	String value;
	check_hresult(shim()->get_AesEcbPkcs7(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::DesCbcPkcs7() const
{
	String value;
	check_hresult(shim()->get_DesCbcPkcs7(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::DesEcbPkcs7() const
{
	String value;
	check_hresult(shim()->get_DesEcbPkcs7(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::TripleDesCbcPkcs7() const
{
	String value;
	check_hresult(shim()->get_TripleDesCbcPkcs7(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::TripleDesEcbPkcs7() const
{
	String value;
	check_hresult(shim()->get_TripleDesEcbPkcs7(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::Rc2CbcPkcs7() const
{
	String value;
	check_hresult(shim()->get_Rc2CbcPkcs7(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::Rc2EcbPkcs7() const
{
	String value;
	check_hresult(shim()->get_Rc2EcbPkcs7(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::Rc4() const
{
	String value;
	check_hresult(shim()->get_Rc4(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaPkcs1() const
{
	String value;
	check_hresult(shim()->get_RsaPkcs1(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaOaepSha1() const
{
	String value;
	check_hresult(shim()->get_RsaOaepSha1(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaOaepSha256() const
{
	String value;
	check_hresult(shim()->get_RsaOaepSha256(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaOaepSha384() const
{
	String value;
	check_hresult(shim()->get_RsaOaepSha384(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaOaepSha512() const
{
	String value;
	check_hresult(shim()->get_RsaOaepSha512(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::EcdsaP256Sha256() const
{
	String value;
	check_hresult(shim()->get_EcdsaP256Sha256(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::EcdsaP384Sha384() const
{
	String value;
	check_hresult(shim()->get_EcdsaP384Sha384(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::EcdsaP521Sha512() const
{
	String value;
	check_hresult(shim()->get_EcdsaP521Sha512(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::DsaSha1() const
{
	String value;
	check_hresult(shim()->get_DsaSha1(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::DsaSha256() const
{
	String value;
	check_hresult(shim()->get_DsaSha256(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPkcs1Sha1() const
{
	String value;
	check_hresult(shim()->get_RsaSignPkcs1Sha1(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPkcs1Sha256() const
{
	String value;
	check_hresult(shim()->get_RsaSignPkcs1Sha256(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPkcs1Sha384() const
{
	String value;
	check_hresult(shim()->get_RsaSignPkcs1Sha384(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPkcs1Sha512() const
{
	String value;
	check_hresult(shim()->get_RsaSignPkcs1Sha512(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPssSha1() const
{
	String value;
	check_hresult(shim()->get_RsaSignPssSha1(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPssSha256() const
{
	String value;
	check_hresult(shim()->get_RsaSignPssSha256(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPssSha384() const
{
	String value;
	check_hresult(shim()->get_RsaSignPssSha384(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPssSha512() const
{
	String value;
	check_hresult(shim()->get_RsaSignPssSha512(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics2<T>::EcdsaSha256() const
{
	String value;
	check_hresult(shim()->get_EcdsaSha256(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics2<T>::EcdsaSha384() const
{
	String value;
	check_hresult(shim()->get_EcdsaSha384(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics2<T>::EcdsaSha512() const
{
	String value;
	check_hresult(shim()->get_EcdsaSha512(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP160r1() const
{
	String value;
	check_hresult(shim()->get_BrainpoolP160r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP160t1() const
{
	String value;
	check_hresult(shim()->get_BrainpoolP160t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP192r1() const
{
	String value;
	check_hresult(shim()->get_BrainpoolP192r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP192t1() const
{
	String value;
	check_hresult(shim()->get_BrainpoolP192t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP224r1() const
{
	String value;
	check_hresult(shim()->get_BrainpoolP224r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP224t1() const
{
	String value;
	check_hresult(shim()->get_BrainpoolP224t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP256r1() const
{
	String value;
	check_hresult(shim()->get_BrainpoolP256r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP256t1() const
{
	String value;
	check_hresult(shim()->get_BrainpoolP256t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP320r1() const
{
	String value;
	check_hresult(shim()->get_BrainpoolP320r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP320t1() const
{
	String value;
	check_hresult(shim()->get_BrainpoolP320t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP384r1() const
{
	String value;
	check_hresult(shim()->get_BrainpoolP384r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP384t1() const
{
	String value;
	check_hresult(shim()->get_BrainpoolP384t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP512r1() const
{
	String value;
	check_hresult(shim()->get_BrainpoolP512r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP512t1() const
{
	String value;
	check_hresult(shim()->get_BrainpoolP512t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::Curve25519() const
{
	String value;
	check_hresult(shim()->get_Curve25519(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::Ec192wapi() const
{
	String value;
	check_hresult(shim()->get_Ec192wapi(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::NistP192() const
{
	String value;
	check_hresult(shim()->get_NistP192(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::NistP224() const
{
	String value;
	check_hresult(shim()->get_NistP224(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::NistP256() const
{
	String value;
	check_hresult(shim()->get_NistP256(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::NistP384() const
{
	String value;
	check_hresult(shim()->get_NistP384(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::NistP521() const
{
	String value;
	check_hresult(shim()->get_NistP521(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::NumsP256t1() const
{
	String value;
	check_hresult(shim()->get_NumsP256t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::NumsP384t1() const
{
	String value;
	check_hresult(shim()->get_NumsP384t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::NumsP512t1() const
{
	String value;
	check_hresult(shim()->get_NumsP512t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP160k1() const
{
	String value;
	check_hresult(shim()->get_SecP160k1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP160r1() const
{
	String value;
	check_hresult(shim()->get_SecP160r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP160r2() const
{
	String value;
	check_hresult(shim()->get_SecP160r2(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP192k1() const
{
	String value;
	check_hresult(shim()->get_SecP192k1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP192r1() const
{
	String value;
	check_hresult(shim()->get_SecP192r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP224k1() const
{
	String value;
	check_hresult(shim()->get_SecP224k1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP224r1() const
{
	String value;
	check_hresult(shim()->get_SecP224r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP256k1() const
{
	String value;
	check_hresult(shim()->get_SecP256k1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP256r1() const
{
	String value;
	check_hresult(shim()->get_SecP256r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP384r1() const
{
	String value;
	check_hresult(shim()->get_SecP384r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP521r1() const
{
	String value;
	check_hresult(shim()->get_SecP521r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::Wtls7() const
{
	String value;
	check_hresult(shim()->get_Wtls7(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::Wtls9() const
{
	String value;
	check_hresult(shim()->get_Wtls9(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::Wtls12() const
{
	String value;
	check_hresult(shim()->get_Wtls12(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::X962P192v1() const
{
	String value;
	check_hresult(shim()->get_X962P192v1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::X962P192v2() const
{
	String value;
	check_hresult(shim()->get_X962P192v2(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::X962P192v3() const
{
	String value;
	check_hresult(shim()->get_X962P192v3(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::X962P239v1() const
{
	String value;
	check_hresult(shim()->get_X962P239v1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::X962P239v2() const
{
	String value;
	check_hresult(shim()->get_X962P239v2(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::X962P239v3() const
{
	String value;
	check_hresult(shim()->get_X962P239v3(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::X962P256v1() const
{
	String value;
	check_hresult(shim()->get_X962P256v1(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IEccCurveNamesStatics<T>::AllEccCurveNames() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_AllEccCurveNames(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Pbkdf2Md5() const
{
	String value;
	check_hresult(shim()->get_Pbkdf2Md5(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Pbkdf2Sha1() const
{
	String value;
	check_hresult(shim()->get_Pbkdf2Sha1(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Pbkdf2Sha256() const
{
	String value;
	check_hresult(shim()->get_Pbkdf2Sha256(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Pbkdf2Sha384() const
{
	String value;
	check_hresult(shim()->get_Pbkdf2Sha384(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Pbkdf2Sha512() const
{
	String value;
	check_hresult(shim()->get_Pbkdf2Sha512(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp800108CtrHmacMd5() const
{
	String value;
	check_hresult(shim()->get_Sp800108CtrHmacMd5(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp800108CtrHmacSha1() const
{
	String value;
	check_hresult(shim()->get_Sp800108CtrHmacSha1(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp800108CtrHmacSha256() const
{
	String value;
	check_hresult(shim()->get_Sp800108CtrHmacSha256(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp800108CtrHmacSha384() const
{
	String value;
	check_hresult(shim()->get_Sp800108CtrHmacSha384(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp800108CtrHmacSha512() const
{
	String value;
	check_hresult(shim()->get_Sp800108CtrHmacSha512(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp80056aConcatMd5() const
{
	String value;
	check_hresult(shim()->get_Sp80056aConcatMd5(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp80056aConcatSha1() const
{
	String value;
	check_hresult(shim()->get_Sp80056aConcatSha1(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp80056aConcatSha256() const
{
	String value;
	check_hresult(shim()->get_Sp80056aConcatSha256(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp80056aConcatSha384() const
{
	String value;
	check_hresult(shim()->get_Sp80056aConcatSha384(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp80056aConcatSha512() const
{
	String value;
	check_hresult(shim()->get_Sp80056aConcatSha512(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics2<T>::CapiKdfMd5() const
{
	String value;
	check_hresult(shim()->get_CapiKdfMd5(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics2<T>::CapiKdfSha1() const
{
	String value;
	check_hresult(shim()->get_CapiKdfSha1(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics2<T>::CapiKdfSha256() const
{
	String value;
	check_hresult(shim()->get_CapiKdfSha256(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics2<T>::CapiKdfSha384() const
{
	String value;
	check_hresult(shim()->get_CapiKdfSha384(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics2<T>::CapiKdfSha512() const
{
	String value;
	check_hresult(shim()->get_CapiKdfSha512(put(value)));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace EnterpriseData {

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::FileProtectionStatus> impl_IFileRevocationManagerStatics<T>::ProtectAsync(Windows::Storage::IStorageItem const & storageItem, StringReference const & enterpriseIdentity) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::FileProtectionStatus> result;
	check_hresult(shim()->abi_ProtectAsync(get(storageItem), get(enterpriseIdentity), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IFileRevocationManagerStatics<T>::CopyProtectionAsync(Windows::Storage::IStorageItem const & sourceStorageItem, Windows::Storage::IStorageItem const & targetStorageItem) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check_hresult(shim()->abi_CopyProtectionAsync(get(sourceStorageItem), get(targetStorageItem), put(result)));
	return result;
}

template <typename T> void impl_IFileRevocationManagerStatics<T>::Revoke(StringReference const & enterpriseIdentity) const
{
	check_hresult(shim()->abi_Revoke(get(enterpriseIdentity)));
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::FileProtectionStatus> impl_IFileRevocationManagerStatics<T>::GetStatusAsync(Windows::Storage::IStorageItem const & storageItem) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::FileProtectionStatus> result;
	check_hresult(shim()->abi_GetStatusAsync(get(storageItem), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::FileProtectionInfo> impl_IFileProtectionManagerStatics<T>::ProtectAsync(Windows::Storage::IStorageItem const & target, StringReference const & identity) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::FileProtectionInfo> result;
	check_hresult(shim()->abi_ProtectAsync(get(target), get(identity), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IFileProtectionManagerStatics<T>::CopyProtectionAsync(Windows::Storage::IStorageItem const & source, Windows::Storage::IStorageItem const & target) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check_hresult(shim()->abi_CopyProtectionAsync(get(source), get(target), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::FileProtectionInfo> impl_IFileProtectionManagerStatics<T>::GetProtectionInfoAsync(Windows::Storage::IStorageItem const & source) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::FileProtectionInfo> result;
	check_hresult(shim()->abi_GetProtectionInfoAsync(get(source), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerExportResult> impl_IFileProtectionManagerStatics<T>::SaveFileAsContainerAsync(Windows::Storage::IStorageFile const & protectedFile) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerExportResult> result;
	check_hresult(shim()->abi_SaveFileAsContainerAsync(get(protectedFile), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> impl_IFileProtectionManagerStatics<T>::LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> result;
	check_hresult(shim()->abi_LoadFileFromContainerAsync(get(containerFile), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> impl_IFileProtectionManagerStatics<T>::LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile, Windows::Storage::IStorageItem const & target) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> result;
	check_hresult(shim()->abi_LoadFileFromContainerWithTargetAsync(get(containerFile), get(target), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedFileCreateResult> impl_IFileProtectionManagerStatics<T>::CreateProtectedAndOpenAsync(Windows::Storage::IStorageFolder const & parentFolder, StringReference const & desiredName, StringReference const & identity, Windows::Storage::CreationCollisionOption const collisionOption) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedFileCreateResult> result;
	check_hresult(shim()->abi_CreateProtectedAndOpenAsync(get(parentFolder), get(desiredName), get(identity), collisionOption, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IFileProtectionManagerStatics2<T>::IsContainerAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check_hresult(shim()->abi_IsContainerAsync(get(file), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> impl_IFileProtectionManagerStatics2<T>::LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile, Windows::Storage::IStorageItem const & target, Windows::Storage::NameCollisionOption const collisionOption) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> result;
	check_hresult(shim()->abi_LoadFileFromContainerWithTargetAndNameCollisionOptionAsync(get(containerFile), get(target), collisionOption, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerExportResult> impl_IFileProtectionManagerStatics2<T>::SaveFileAsContainerAsync(Windows::Storage::IStorageFile const & protectedFile, Windows::Foundation::Collections::IIterable<String> const & sharedWithIdentities) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerExportResult> result;
	check_hresult(shim()->abi_SaveFileAsContainerWithSharingAsync(get(protectedFile), get(sharedWithIdentities), put(result)));
	return result;
}

template <typename T> Windows::Storage::StorageFile impl_IProtectedFileCreateResult<T>::File() const
{
	Windows::Storage::StorageFile value = nullptr;
	check_hresult(shim()->get_File(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_IProtectedFileCreateResult<T>::Stream() const
{
	Windows::Storage::Streams::IRandomAccessStream value;
	check_hresult(shim()->get_Stream(put(value)));
	return value;
}

template <typename T> Windows::Security::EnterpriseData::FileProtectionInfo impl_IProtectedFileCreateResult<T>::ProtectionInfo() const
{
	Windows::Security::EnterpriseData::FileProtectionInfo value = nullptr;
	check_hresult(shim()->get_ProtectionInfo(put(value)));
	return value;
}

template <typename T> Windows::Security::EnterpriseData::FileProtectionStatus impl_IFileProtectionInfo<T>::Status() const
{
	Windows::Security::EnterpriseData::FileProtectionStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> bool impl_IFileProtectionInfo<T>::IsRoamable() const
{
	bool value = {};
	check_hresult(shim()->get_IsRoamable(put(value)));
	return value;
}

template <typename T> String impl_IFileProtectionInfo<T>::Identity() const
{
	String value;
	check_hresult(shim()->get_Identity(put(value)));
	return value;
}

template <typename T> Windows::Security::EnterpriseData::ProtectedImportExportStatus impl_IProtectedContainerExportResult<T>::Status() const
{
	Windows::Security::EnterpriseData::ProtectedImportExportStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Storage::StorageFile impl_IProtectedContainerExportResult<T>::File() const
{
	Windows::Storage::StorageFile value = nullptr;
	check_hresult(shim()->get_File(put(value)));
	return value;
}

template <typename T> Windows::Security::EnterpriseData::ProtectedImportExportStatus impl_IProtectedContainerImportResult<T>::Status() const
{
	Windows::Security::EnterpriseData::ProtectedImportExportStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Storage::StorageFile impl_IProtectedContainerImportResult<T>::File() const
{
	Windows::Storage::StorageFile value = nullptr;
	check_hresult(shim()->get_File(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::BufferProtectUnprotectResult> impl_IDataProtectionManagerStatics<T>::ProtectAsync(Windows::Storage::Streams::IBuffer const & data, StringReference const & identity) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::BufferProtectUnprotectResult> result;
	check_hresult(shim()->abi_ProtectAsync(get(data), get(identity), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::BufferProtectUnprotectResult> impl_IDataProtectionManagerStatics<T>::UnprotectAsync(Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::BufferProtectUnprotectResult> result;
	check_hresult(shim()->abi_UnprotectAsync(get(data), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> impl_IDataProtectionManagerStatics<T>::ProtectStreamAsync(Windows::Storage::Streams::IInputStream const & unprotectedStream, StringReference const & identity, Windows::Storage::Streams::IOutputStream const & protectedStream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> result;
	check_hresult(shim()->abi_ProtectStreamAsync(get(unprotectedStream), get(identity), get(protectedStream), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> impl_IDataProtectionManagerStatics<T>::UnprotectStreamAsync(Windows::Storage::Streams::IInputStream const & protectedStream, Windows::Storage::Streams::IOutputStream const & unprotectedStream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> result;
	check_hresult(shim()->abi_UnprotectStreamAsync(get(protectedStream), get(unprotectedStream), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> impl_IDataProtectionManagerStatics<T>::GetProtectionInfoAsync(Windows::Storage::Streams::IBuffer const & protectedData) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> result;
	check_hresult(shim()->abi_GetProtectionInfoAsync(get(protectedData), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> impl_IDataProtectionManagerStatics<T>::GetStreamProtectionInfoAsync(Windows::Storage::Streams::IInputStream const & protectedStream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> result;
	check_hresult(shim()->abi_GetStreamProtectionInfoAsync(get(protectedStream), put(result)));
	return result;
}

template <typename T> Windows::Security::EnterpriseData::DataProtectionStatus impl_IDataProtectionInfo<T>::Status() const
{
	Windows::Security::EnterpriseData::DataProtectionStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> String impl_IDataProtectionInfo<T>::Identity() const
{
	String value;
	check_hresult(shim()->get_Identity(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IBufferProtectUnprotectResult<T>::Buffer() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_Buffer(put(value)));
	return value;
}

template <typename T> Windows::Security::EnterpriseData::DataProtectionInfo impl_IBufferProtectUnprotectResult<T>::ProtectionInfo() const
{
	Windows::Security::EnterpriseData::DataProtectionInfo value = nullptr;
	check_hresult(shim()->get_ProtectionInfo(put(value)));
	return value;
}

template <typename T> void impl_IProtectionPolicyManager<T>::Identity(StringReference const & value) const
{
	check_hresult(shim()->put_Identity(get(value)));
}

template <typename T> String impl_IProtectionPolicyManager<T>::Identity() const
{
	String value;
	check_hresult(shim()->get_Identity(put(value)));
	return value;
}

template <typename T> bool impl_IProtectionPolicyManagerStatics<T>::IsIdentityManaged(StringReference const & identity) const
{
	bool result = {};
	check_hresult(shim()->abi_IsIdentityManaged(get(identity), put(result)));
	return result;
}

template <typename T> bool impl_IProtectionPolicyManagerStatics<T>::TryApplyProcessUIPolicy(StringReference const & identity) const
{
	bool result = {};
	check_hresult(shim()->abi_TryApplyProcessUIPolicy(get(identity), put(result)));
	return result;
}

template <typename T> void impl_IProtectionPolicyManagerStatics<T>::ClearProcessUIPolicy() const
{
	check_hresult(shim()->abi_ClearProcessUIPolicy());
}

template <typename T> Windows::Security::EnterpriseData::ThreadNetworkContext impl_IProtectionPolicyManagerStatics<T>::CreateCurrentThreadNetworkContext(StringReference const & identity) const
{
	Windows::Security::EnterpriseData::ThreadNetworkContext result = nullptr;
	check_hresult(shim()->abi_CreateCurrentThreadNetworkContext(get(identity), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IProtectionPolicyManagerStatics<T>::GetPrimaryManagedIdentityForNetworkEndpointAsync(Windows::Networking::HostName const & endpointHost) const
{
	Windows::Foundation::IAsyncOperation<String> result;
	check_hresult(shim()->abi_GetPrimaryManagedIdentityForNetworkEndpointAsync(get(endpointHost), put(result)));
	return result;
}

template <typename T> void impl_IProtectionPolicyManagerStatics<T>::RevokeContent(StringReference const & identity) const
{
	check_hresult(shim()->abi_RevokeContent(get(identity)));
}

template <typename T> Windows::Security::EnterpriseData::ProtectionPolicyManager impl_IProtectionPolicyManagerStatics<T>::GetForCurrentView() const
{
	Windows::Security::EnterpriseData::ProtectionPolicyManager result = nullptr;
	check_hresult(shim()->abi_GetForCurrentView(put(result)));
	return result;
}

template <typename T> long long impl_IProtectionPolicyManagerStatics<T>::ProtectedAccessSuspending(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ProtectedAccessSuspending(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IProtectionPolicyManagerStatics<T>::ProtectedAccessSuspending(F handler) const
{
	return ProtectedAccessSuspending(Windows::Foundation::EventHandler<Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs>(handler));
}

template <typename T> void impl_IProtectionPolicyManagerStatics<T>::ProtectedAccessSuspending(long long const token) const
{
	check_hresult(shim()->remove_ProtectedAccessSuspending(token));
}

template <typename T> long long impl_IProtectionPolicyManagerStatics<T>::ProtectedAccessResumed(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ProtectedAccessResumed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IProtectionPolicyManagerStatics<T>::ProtectedAccessResumed(F handler) const
{
	return ProtectedAccessResumed(Windows::Foundation::EventHandler<Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs>(handler));
}

template <typename T> void impl_IProtectionPolicyManagerStatics<T>::ProtectedAccessResumed(long long const token) const
{
	check_hresult(shim()->remove_ProtectedAccessResumed(token));
}

template <typename T> long long impl_IProtectionPolicyManagerStatics<T>::ProtectedContentRevoked(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ProtectedContentRevoked(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IProtectionPolicyManagerStatics<T>::ProtectedContentRevoked(F handler) const
{
	return ProtectedContentRevoked(Windows::Foundation::EventHandler<Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs>(handler));
}

template <typename T> void impl_IProtectionPolicyManagerStatics<T>::ProtectedContentRevoked(long long const token) const
{
	check_hresult(shim()->remove_ProtectedContentRevoked(token));
}

template <typename T> Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult impl_IProtectionPolicyManagerStatics<T>::CheckAccess(StringReference const & sourceIdentity, StringReference const & targetIdentity) const
{
	Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult result = {};
	check_hresult(shim()->abi_CheckAccess(get(sourceIdentity), get(targetIdentity), &result));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> impl_IProtectionPolicyManagerStatics<T>::RequestAccessAsync(StringReference const & sourceIdentity, StringReference const & targetIdentity) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> result;
	check_hresult(shim()->abi_RequestAccessAsync(get(sourceIdentity), get(targetIdentity), put(result)));
	return result;
}

template <typename T> bool impl_IProtectionPolicyManagerStatics2<T>::HasContentBeenRevokedSince(StringReference const & identity, Windows::Foundation::DateTime const & since) const
{
	bool result = {};
	check_hresult(shim()->abi_HasContentBeenRevokedSince(get(identity), since, put(result)));
	return result;
}

template <typename T> Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult impl_IProtectionPolicyManagerStatics2<T>::CheckAccessForApp(StringReference const & sourceIdentity, StringReference const & appPackageFamilyName) const
{
	Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult result = {};
	check_hresult(shim()->abi_CheckAccessForApp(get(sourceIdentity), get(appPackageFamilyName), &result));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> impl_IProtectionPolicyManagerStatics2<T>::RequestAccessForAppAsync(StringReference const & sourceIdentity, StringReference const & appPackageFamilyName) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> result;
	check_hresult(shim()->abi_RequestAccessForAppAsync(get(sourceIdentity), get(appPackageFamilyName), put(result)));
	return result;
}

template <typename T> Windows::Security::EnterpriseData::EnforcementLevel impl_IProtectionPolicyManagerStatics2<T>::GetEnforcementLevel(StringReference const & identity) const
{
	Windows::Security::EnterpriseData::EnforcementLevel value = {};
	check_hresult(shim()->abi_GetEnforcementLevel(get(identity), &value));
	return value;
}

template <typename T> bool impl_IProtectionPolicyManagerStatics2<T>::IsUserDecryptionAllowed(StringReference const & identity) const
{
	bool value = {};
	check_hresult(shim()->abi_IsUserDecryptionAllowed(get(identity), put(value)));
	return value;
}

template <typename T> bool impl_IProtectionPolicyManagerStatics2<T>::IsProtectionUnderLockRequired(StringReference const & identity) const
{
	bool value = {};
	check_hresult(shim()->abi_IsProtectionUnderLockRequired(get(identity), put(value)));
	return value;
}

template <typename T> long long impl_IProtectionPolicyManagerStatics2<T>::PolicyChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_PolicyChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IProtectionPolicyManagerStatics2<T>::PolicyChanged(F handler) const
{
	return PolicyChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IProtectionPolicyManagerStatics2<T>::PolicyChanged(long long const token) const
{
	check_hresult(shim()->remove_PolicyChanged(token));
}

template <typename T> bool impl_IProtectionPolicyManagerStatics2<T>::IsProtectionEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_IsProtectionEnabled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IProtectedAccessSuspendingEventArgs<T>::Identities() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_Identities(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IProtectedAccessSuspendingEventArgs<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Deadline(&value));
	return value;
}

template <typename T> Windows::Foundation::Deferral impl_IProtectedAccessSuspendingEventArgs<T>::GetDeferral() const
{
	Windows::Foundation::Deferral result = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IProtectedAccessResumedEventArgs<T>::Identities() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_Identities(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IProtectedContentRevokedEventArgs<T>::Identities() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_Identities(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Storage {

template <typename T> void impl_IStreamedFileDataRequestedHandler<T>::Invoke(Windows::Storage::StreamedFileDataRequest const & stream) const
{
	check_hresult(shim()->abi_Invoke(get(stream)));
}

template <typename T> void impl_IApplicationDataSetVersionHandler<T>::Invoke(Windows::Storage::SetVersionRequest const & setVersionRequest) const
{
	check_hresult(shim()->abi_Invoke(get(setVersionRequest)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> impl_IStorageLibraryStatics<T>::GetLibraryAsync(Windows::Storage::KnownLibraryId const libraryId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> operation;
	check_hresult(shim()->abi_GetLibraryAsync(libraryId, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> impl_IStorageLibraryStatics2<T>::GetLibraryForUserAsync(Windows::System::User const & user, Windows::Storage::KnownLibraryId const libraryId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> operation;
	check_hresult(shim()->abi_GetLibraryForUserAsync(get(user), libraryId, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageLibrary<T>::RequestAddFolderAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check_hresult(shim()->abi_RequestAddFolderAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IStorageLibrary<T>::RequestRemoveFolderAsync(Windows::Storage::StorageFolder const & folder) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_RequestRemoveFolderAsync(get(folder), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::IObservableVector<Windows::Storage::StorageFolder> impl_IStorageLibrary<T>::Folders() const
{
	Windows::Foundation::Collections::IObservableVector<Windows::Storage::StorageFolder> value;
	check_hresult(shim()->get_Folders(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IStorageLibrary<T>::SaveFolder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_SaveFolder(put(value)));
	return value;
}

template <typename T> long long impl_IStorageLibrary<T>::DefinitionChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::StorageLibrary, IInspectable> const & handler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_DefinitionChanged(get(handler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IStorageLibrary<T>::DefinitionChanged(F handler) const
{
	return DefinitionChanged(Windows::Foundation::TypedEventHandler<Windows::Storage::StorageLibrary, IInspectable>(handler));
}

template <typename T> void impl_IStorageLibrary<T>::DefinitionChanged(long long const eventCookie) const
{
	check_hresult(shim()->remove_DefinitionChanged(eventCookie));
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::MusicLibrary() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_MusicLibrary(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::PicturesLibrary() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_PicturesLibrary(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::VideosLibrary() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_VideosLibrary(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::DocumentsLibrary() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_DocumentsLibrary(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::HomeGroup() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_HomeGroup(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::RemovableDevices() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_RemovableDevices(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::MediaServerDevices() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_MediaServerDevices(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics2<T>::Objects3D() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_Objects3D(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics2<T>::AppCaptures() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_AppCaptures(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics2<T>::RecordedCalls() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_RecordedCalls(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IKnownFoldersStatics3<T>::GetFolderForUserAsync(Windows::System::User const & user, Windows::Storage::KnownFolderId const folderId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check_hresult(shim()->abi_GetFolderForUserAsync(get(user), folderId, put(operation)));
	return operation;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersPlaylistsStatics<T>::Playlists() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_Playlists(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersCameraRollStatics<T>::CameraRoll() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_CameraRoll(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersSavedPicturesStatics<T>::SavedPictures() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_SavedPictures(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IDownloadsFolderStatics<T>::CreateFileAsync(StringReference const & desiredName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_CreateFileAsync(get(desiredName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IDownloadsFolderStatics<T>::CreateFolderAsync(StringReference const & desiredName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check_hresult(shim()->abi_CreateFolderAsync(get(desiredName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IDownloadsFolderStatics<T>::CreateFileAsync(StringReference const & desiredName, Windows::Storage::CreationCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_CreateFileWithCollisionOptionAsync(get(desiredName), option, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IDownloadsFolderStatics<T>::CreateFolderAsync(StringReference const & desiredName, Windows::Storage::CreationCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check_hresult(shim()->abi_CreateFolderWithCollisionOptionAsync(get(desiredName), option, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IDownloadsFolderStatics2<T>::CreateFileForUserAsync(Windows::System::User const & user, StringReference const & desiredName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_CreateFileForUserAsync(get(user), get(desiredName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IDownloadsFolderStatics2<T>::CreateFolderForUserAsync(Windows::System::User const & user, StringReference const & desiredName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check_hresult(shim()->abi_CreateFolderForUserAsync(get(user), get(desiredName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IDownloadsFolderStatics2<T>::CreateFileForUserAsync(Windows::System::User const & user, StringReference const & desiredName, Windows::Storage::CreationCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_CreateFileForUserWithCollisionOptionAsync(get(user), get(desiredName), option, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IDownloadsFolderStatics2<T>::CreateFolderForUserAsync(Windows::System::User const & user, StringReference const & desiredName, Windows::Storage::CreationCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check_hresult(shim()->abi_CreateFolderForUserWithCollisionOptionAsync(get(user), get(desiredName), option, put(operation)));
	return operation;
}

template <typename T> void impl_IStreamedFileDataRequest<T>::FailAndClose(Windows::Storage::StreamedFileFailureMode const failureMode) const
{
	check_hresult(shim()->abi_FailAndClose(failureMode));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::GetFileFromPathAsync(StringReference const & path) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_GetFileFromPathAsync(get(path), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::GetFileFromApplicationUriAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_GetFileFromApplicationUriAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::CreateStreamedFileAsync(StringReference const & displayNameWithExtension, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_CreateStreamedFileAsync(get(displayNameWithExtension), get(dataRequested), get(thumbnail), put(operation)));
	return operation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::CreateStreamedFileAsync(StringReference const & displayNameWithExtension, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	return CreateStreamedFileAsync(displayNameWithExtension, Windows::Storage::StreamedFileDataRequestedHandler(dataRequested), thumbnail);
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_ReplaceWithStreamedFileAsync(get(fileToReplace), get(dataRequested), get(thumbnail), put(operation)));
	return operation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	return ReplaceWithStreamedFileAsync(fileToReplace, Windows::Storage::StreamedFileDataRequestedHandler(dataRequested), thumbnail);
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::CreateStreamedFileFromUriAsync(StringReference const & displayNameWithExtension, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_CreateStreamedFileFromUriAsync(get(displayNameWithExtension), get(uri), get(thumbnail), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::ReplaceWithStreamedFileFromUriAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_ReplaceWithStreamedFileFromUriAsync(get(fileToReplace), get(uri), get(thumbnail), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItem<T>::RenameAsync(StringReference const & desiredName) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_RenameAsyncOverloadDefaultOptions(get(desiredName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItem<T>::RenameAsync(StringReference const & desiredName, Windows::Storage::NameCollisionOption const option) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_RenameAsync(get(desiredName), option, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItem<T>::DeleteAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_DeleteAsyncOverloadDefaultOptions(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItem<T>::DeleteAsync(Windows::Storage::StorageDeleteOption const option) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_DeleteAsync(option, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::BasicProperties> impl_IStorageItem<T>::GetBasicPropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::BasicProperties> operation;
	check_hresult(shim()->abi_GetBasicPropertiesAsync(put(operation)));
	return operation;
}

template <typename T> String impl_IStorageItem<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IStorageItem<T>::Path() const
{
	String value;
	check_hresult(shim()->get_Path(put(value)));
	return value;
}

template <typename T> Windows::Storage::FileAttributes impl_IStorageItem<T>::Attributes() const
{
	Windows::Storage::FileAttributes value = {};
	check_hresult(shim()->get_Attributes(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IStorageItem<T>::DateCreated() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_DateCreated(&value));
	return value;
}

template <typename T> bool impl_IStorageItem<T>::IsOfType(Windows::Storage::StorageItemTypes const type) const
{
	bool value = {};
	check_hresult(shim()->abi_IsOfType(type, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFolder<T>::CreateFileAsync(StringReference const & desiredName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_CreateFileAsyncOverloadDefaultOptions(get(desiredName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFolder<T>::CreateFileAsync(StringReference const & desiredName, Windows::Storage::CreationCollisionOption const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_CreateFileAsync(get(desiredName), options, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageFolder<T>::CreateFolderAsync(StringReference const & desiredName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check_hresult(shim()->abi_CreateFolderAsyncOverloadDefaultOptions(get(desiredName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageFolder<T>::CreateFolderAsync(StringReference const & desiredName, Windows::Storage::CreationCollisionOption const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check_hresult(shim()->abi_CreateFolderAsync(get(desiredName), options, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFolder<T>::GetFileAsync(StringReference const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_GetFileAsync(get(name), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageFolder<T>::GetFolderAsync(StringReference const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check_hresult(shim()->abi_GetFolderAsync(get(name), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> impl_IStorageFolder<T>::GetItemAsync(StringReference const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> operation;
	check_hresult(shim()->abi_GetItemAsync(get(name), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IStorageFolder<T>::GetFilesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> operation;
	check_hresult(shim()->abi_GetFilesAsyncOverloadDefaultOptionsStartAndCount(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> impl_IStorageFolder<T>::GetFoldersAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> operation;
	check_hresult(shim()->abi_GetFoldersAsyncOverloadDefaultOptionsStartAndCount(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> impl_IStorageFolder<T>::GetItemsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> operation;
	check_hresult(shim()->abi_GetItemsAsyncOverloadDefaultStartAndCount(put(operation)));
	return operation;
}

template <typename T> String impl_IStorageFile<T>::FileType() const
{
	String value;
	check_hresult(shim()->get_FileType(put(value)));
	return value;
}

template <typename T> String impl_IStorageFile<T>::ContentType() const
{
	String value;
	check_hresult(shim()->get_ContentType(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> impl_IStorageFile<T>::OpenAsync(Windows::Storage::FileAccessMode const accessMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> operation;
	check_hresult(shim()->abi_OpenAsync(accessMode, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageStreamTransaction> impl_IStorageFile<T>::OpenTransactedWriteAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageStreamTransaction> operation;
	check_hresult(shim()->abi_OpenTransactedWriteAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFile<T>::CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_CopyOverloadDefaultNameAndOptions(get(destinationFolder), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFile<T>::CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, StringReference const & desiredNewName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_CopyOverloadDefaultOptions(get(destinationFolder), get(desiredNewName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFile<T>::CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, StringReference const & desiredNewName, Windows::Storage::NameCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check_hresult(shim()->abi_CopyOverload(get(destinationFolder), get(desiredNewName), option, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::CopyAndReplaceAsync(Windows::Storage::IStorageFile const & fileToReplace) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_CopyAndReplaceAsync(get(fileToReplace), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_MoveOverloadDefaultNameAndOptions(get(destinationFolder), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, StringReference const & desiredNewName) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_MoveOverloadDefaultOptions(get(destinationFolder), get(desiredNewName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, StringReference const & desiredNewName, Windows::Storage::NameCollisionOption const option) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_MoveOverload(get(destinationFolder), get(desiredNewName), option, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::MoveAndReplaceAsync(Windows::Storage::IStorageFile const & fileToReplace) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_MoveAndReplaceAsync(get(fileToReplace), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageFolderStatics<T>::GetFolderFromPathAsync(StringReference const & path) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check_hresult(shim()->abi_GetFolderFromPathAsync(get(path), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageItem2<T>::GetParentAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check_hresult(shim()->abi_GetParentAsync(put(operation)));
	return operation;
}

template <typename T> bool impl_IStorageItem2<T>::IsEqual(Windows::Storage::IStorageItem const & item) const
{
	bool value = {};
	check_hresult(shim()->abi_IsEqual(get(item), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties<T>::GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation;
	check_hresult(shim()->abi_GetThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties<T>::GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedSize) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation;
	check_hresult(shim()->abi_GetThumbnailAsyncOverloadDefaultOptions(mode, requestedSize, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties<T>::GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedSize, Windows::Storage::FileProperties::ThumbnailOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation;
	check_hresult(shim()->abi_GetThumbnailAsync(mode, requestedSize, options, put(operation)));
	return operation;
}

template <typename T> String impl_IStorageItemProperties<T>::DisplayName() const
{
	String value;
	check_hresult(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IStorageItemProperties<T>::DisplayType() const
{
	String value;
	check_hresult(shim()->get_DisplayType(put(value)));
	return value;
}

template <typename T> String impl_IStorageItemProperties<T>::FolderRelativeId() const
{
	String value;
	check_hresult(shim()->get_FolderRelativeId(put(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::StorageItemContentProperties impl_IStorageItemProperties<T>::Properties() const
{
	Windows::Storage::FileProperties::StorageItemContentProperties value = nullptr;
	check_hresult(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties2<T>::GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation;
	check_hresult(shim()->abi_GetScaledImageAsThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties2<T>::GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedSize) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation;
	check_hresult(shim()->abi_GetScaledImageAsThumbnailAsyncOverloadDefaultOptions(mode, requestedSize, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties2<T>::GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedSize, Windows::Storage::FileProperties::ThumbnailOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation;
	check_hresult(shim()->abi_GetScaledImageAsThumbnailAsync(mode, requestedSize, options, put(operation)));
	return operation;
}

template <typename T> Windows::Storage::StorageProvider impl_IStorageItemPropertiesWithProvider<T>::Provider() const
{
	Windows::Storage::StorageProvider value = nullptr;
	check_hresult(shim()->get_Provider(put(value)));
	return value;
}

template <typename T> bool impl_IStorageFilePropertiesWithAvailability<T>::IsAvailable() const
{
	bool value = {};
	check_hresult(shim()->get_IsAvailable(put(value)));
	return value;
}

template <typename T> String impl_IStorageProvider<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IStorageProvider<T>::DisplayName() const
{
	String value;
	check_hresult(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> impl_IStorageFolder2<T>::TryGetItemAsync(StringReference const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> operation;
	check_hresult(shim()->abi_TryGetItemAsync(get(name), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> impl_IStorageFile2<T>::OpenAsync(Windows::Storage::FileAccessMode const accessMode, Windows::Storage::StorageOpenOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> operation;
	check_hresult(shim()->abi_OpenWithOptionsAsync(accessMode, options, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageStreamTransaction> impl_IStorageFile2<T>::OpenTransactedWriteAsync(Windows::Storage::StorageOpenOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageStreamTransaction> operation;
	check_hresult(shim()->abi_OpenTransactedWriteWithOptionsAsync(options, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IFileIOStatics<T>::ReadTextAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<String> textOperation;
	check_hresult(shim()->abi_ReadTextAsync(get(file), put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IFileIOStatics<T>::ReadTextAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncOperation<String> textOperation;
	check_hresult(shim()->abi_ReadTextWithEncodingAsync(get(file), encoding, put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteTextAsync(Windows::Storage::IStorageFile const & file, StringReference const & contents) const
{
	Windows::Foundation::IAsyncAction textOperation;
	check_hresult(shim()->abi_WriteTextAsync(get(file), get(contents), put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteTextAsync(Windows::Storage::IStorageFile const & file, StringReference const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction textOperation;
	check_hresult(shim()->abi_WriteTextWithEncodingAsync(get(file), get(contents), encoding, put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::AppendTextAsync(Windows::Storage::IStorageFile const & file, StringReference const & contents) const
{
	Windows::Foundation::IAsyncAction textOperation;
	check_hresult(shim()->abi_AppendTextAsync(get(file), get(contents), put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::AppendTextAsync(Windows::Storage::IStorageFile const & file, StringReference const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction textOperation;
	check_hresult(shim()->abi_AppendTextWithEncodingAsync(get(file), get(contents), encoding, put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> impl_IFileIOStatics<T>::ReadLinesAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> linesOperation;
	check_hresult(shim()->abi_ReadLinesAsync(get(file), put(linesOperation)));
	return linesOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> impl_IFileIOStatics<T>::ReadLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> linesOperation;
	check_hresult(shim()->abi_ReadLinesWithEncodingAsync(get(file), encoding, put(linesOperation)));
	return linesOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_WriteLinesAsync(get(file), get(lines), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_WriteLinesWithEncodingAsync(get(file), get(lines), encoding, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_AppendLinesAsync(get(file), get(lines), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_AppendLinesWithEncodingAsync(get(file), get(lines), encoding, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IFileIOStatics<T>::ReadBufferAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation;
	check_hresult(shim()->abi_ReadBufferAsync(get(file), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteBufferAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_WriteBufferAsync(get(file), get(buffer), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IPathIOStatics<T>::ReadTextAsync(StringReference const & absolutePath) const
{
	Windows::Foundation::IAsyncOperation<String> textOperation;
	check_hresult(shim()->abi_ReadTextAsync(get(absolutePath), put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IPathIOStatics<T>::ReadTextAsync(StringReference const & absolutePath, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncOperation<String> textOperation;
	check_hresult(shim()->abi_ReadTextWithEncodingAsync(get(absolutePath), encoding, put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteTextAsync(StringReference const & absolutePath, StringReference const & contents) const
{
	Windows::Foundation::IAsyncAction textOperation;
	check_hresult(shim()->abi_WriteTextAsync(get(absolutePath), get(contents), put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteTextAsync(StringReference const & absolutePath, StringReference const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction textOperation;
	check_hresult(shim()->abi_WriteTextWithEncodingAsync(get(absolutePath), get(contents), encoding, put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::AppendTextAsync(StringReference const & absolutePath, StringReference const & contents) const
{
	Windows::Foundation::IAsyncAction textOperation;
	check_hresult(shim()->abi_AppendTextAsync(get(absolutePath), get(contents), put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::AppendTextAsync(StringReference const & absolutePath, StringReference const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction textOperation;
	check_hresult(shim()->abi_AppendTextWithEncodingAsync(get(absolutePath), get(contents), encoding, put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> impl_IPathIOStatics<T>::ReadLinesAsync(StringReference const & absolutePath) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> linesOperation;
	check_hresult(shim()->abi_ReadLinesAsync(get(absolutePath), put(linesOperation)));
	return linesOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> impl_IPathIOStatics<T>::ReadLinesAsync(StringReference const & absolutePath, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> linesOperation;
	check_hresult(shim()->abi_ReadLinesWithEncodingAsync(get(absolutePath), encoding, put(linesOperation)));
	return linesOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteLinesAsync(StringReference const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_WriteLinesAsync(get(absolutePath), get(lines), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteLinesAsync(StringReference const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_WriteLinesWithEncodingAsync(get(absolutePath), get(lines), encoding, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::AppendLinesAsync(StringReference const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_AppendLinesAsync(get(absolutePath), get(lines), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::AppendLinesAsync(StringReference const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_AppendLinesWithEncodingAsync(get(absolutePath), get(lines), encoding, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IPathIOStatics<T>::ReadBufferAsync(StringReference const & absolutePath) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation;
	check_hresult(shim()->abi_ReadBufferAsync(get(absolutePath), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteBufferAsync(StringReference const & absolutePath, Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_WriteBufferAsync(get(absolutePath), get(buffer), put(operation)));
	return operation;
}

template <typename T> void impl_ICachedFileManagerStatics<T>::DeferUpdates(Windows::Storage::IStorageFile const & file) const
{
	check_hresult(shim()->abi_DeferUpdates(get(file)));
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Provider::FileUpdateStatus> impl_ICachedFileManagerStatics<T>::CompleteUpdatesAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Provider::FileUpdateStatus> operation;
	check_hresult(shim()->abi_CompleteUpdatesAsync(get(file), put(operation)));
	return operation;
}

template <typename T> String impl_ISystemAudioProperties<T>::EncodingBitrate() const
{
	String value;
	check_hresult(shim()->get_EncodingBitrate(put(value)));
	return value;
}

template <typename T> String impl_ISystemGPSProperties<T>::LatitudeDecimal() const
{
	String value;
	check_hresult(shim()->get_LatitudeDecimal(put(value)));
	return value;
}

template <typename T> String impl_ISystemGPSProperties<T>::LongitudeDecimal() const
{
	String value;
	check_hresult(shim()->get_LongitudeDecimal(put(value)));
	return value;
}

template <typename T> String impl_ISystemImageProperties<T>::HorizontalSize() const
{
	String value;
	check_hresult(shim()->get_HorizontalSize(put(value)));
	return value;
}

template <typename T> String impl_ISystemImageProperties<T>::VerticalSize() const
{
	String value;
	check_hresult(shim()->get_VerticalSize(put(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::Duration() const
{
	String value;
	check_hresult(shim()->get_Duration(put(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::Producer() const
{
	String value;
	check_hresult(shim()->get_Producer(put(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::Publisher() const
{
	String value;
	check_hresult(shim()->get_Publisher(put(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::SubTitle() const
{
	String value;
	check_hresult(shim()->get_SubTitle(put(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::Writer() const
{
	String value;
	check_hresult(shim()->get_Writer(put(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::Year() const
{
	String value;
	check_hresult(shim()->get_Year(put(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::AlbumArtist() const
{
	String value;
	check_hresult(shim()->get_AlbumArtist(put(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::AlbumTitle() const
{
	String value;
	check_hresult(shim()->get_AlbumTitle(put(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::Artist() const
{
	String value;
	check_hresult(shim()->get_Artist(put(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::Composer() const
{
	String value;
	check_hresult(shim()->get_Composer(put(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::Conductor() const
{
	String value;
	check_hresult(shim()->get_Conductor(put(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::DisplayArtist() const
{
	String value;
	check_hresult(shim()->get_DisplayArtist(put(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::Genre() const
{
	String value;
	check_hresult(shim()->get_Genre(put(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::TrackNumber() const
{
	String value;
	check_hresult(shim()->get_TrackNumber(put(value)));
	return value;
}

template <typename T> String impl_ISystemPhotoProperties<T>::CameraManufacturer() const
{
	String value;
	check_hresult(shim()->get_CameraManufacturer(put(value)));
	return value;
}

template <typename T> String impl_ISystemPhotoProperties<T>::CameraModel() const
{
	String value;
	check_hresult(shim()->get_CameraModel(put(value)));
	return value;
}

template <typename T> String impl_ISystemPhotoProperties<T>::DateTaken() const
{
	String value;
	check_hresult(shim()->get_DateTaken(put(value)));
	return value;
}

template <typename T> String impl_ISystemPhotoProperties<T>::Orientation() const
{
	String value;
	check_hresult(shim()->get_Orientation(put(value)));
	return value;
}

template <typename T> String impl_ISystemPhotoProperties<T>::PeopleNames() const
{
	String value;
	check_hresult(shim()->get_PeopleNames(put(value)));
	return value;
}

template <typename T> String impl_ISystemVideoProperties<T>::Director() const
{
	String value;
	check_hresult(shim()->get_Director(put(value)));
	return value;
}

template <typename T> String impl_ISystemVideoProperties<T>::FrameHeight() const
{
	String value;
	check_hresult(shim()->get_FrameHeight(put(value)));
	return value;
}

template <typename T> String impl_ISystemVideoProperties<T>::FrameWidth() const
{
	String value;
	check_hresult(shim()->get_FrameWidth(put(value)));
	return value;
}

template <typename T> String impl_ISystemVideoProperties<T>::Orientation() const
{
	String value;
	check_hresult(shim()->get_Orientation(put(value)));
	return value;
}

template <typename T> String impl_ISystemVideoProperties<T>::TotalBitrate() const
{
	String value;
	check_hresult(shim()->get_TotalBitrate(put(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::Author() const
{
	String value;
	check_hresult(shim()->get_Author(put(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::Comment() const
{
	String value;
	check_hresult(shim()->get_Comment(put(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::ItemNameDisplay() const
{
	String value;
	check_hresult(shim()->get_ItemNameDisplay(put(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::Keywords() const
{
	String value;
	check_hresult(shim()->get_Keywords(put(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::Rating() const
{
	String value;
	check_hresult(shim()->get_Rating(put(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> Windows::Storage::SystemAudioProperties impl_ISystemProperties<T>::Audio() const
{
	Windows::Storage::SystemAudioProperties value = nullptr;
	check_hresult(shim()->get_Audio(put(value)));
	return value;
}

template <typename T> Windows::Storage::SystemGPSProperties impl_ISystemProperties<T>::GPS() const
{
	Windows::Storage::SystemGPSProperties value = nullptr;
	check_hresult(shim()->get_GPS(put(value)));
	return value;
}

template <typename T> Windows::Storage::SystemMediaProperties impl_ISystemProperties<T>::Media() const
{
	Windows::Storage::SystemMediaProperties value = nullptr;
	check_hresult(shim()->get_Media(put(value)));
	return value;
}

template <typename T> Windows::Storage::SystemMusicProperties impl_ISystemProperties<T>::Music() const
{
	Windows::Storage::SystemMusicProperties value = nullptr;
	check_hresult(shim()->get_Music(put(value)));
	return value;
}

template <typename T> Windows::Storage::SystemPhotoProperties impl_ISystemProperties<T>::Photo() const
{
	Windows::Storage::SystemPhotoProperties value = nullptr;
	check_hresult(shim()->get_Photo(put(value)));
	return value;
}

template <typename T> Windows::Storage::SystemVideoProperties impl_ISystemProperties<T>::Video() const
{
	Windows::Storage::SystemVideoProperties value = nullptr;
	check_hresult(shim()->get_Video(put(value)));
	return value;
}

template <typename T> Windows::Storage::SystemImageProperties impl_ISystemProperties<T>::Image() const
{
	Windows::Storage::SystemImageProperties value = nullptr;
	check_hresult(shim()->get_Image(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_IStorageStreamTransaction<T>::Stream() const
{
	Windows::Storage::Streams::IRandomAccessStream value;
	check_hresult(shim()->get_Stream(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageStreamTransaction<T>::CommitAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_CommitAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Storage::ApplicationData impl_IApplicationDataStatics<T>::Current() const
{
	Windows::Storage::ApplicationData value = nullptr;
	check_hresult(shim()->get_Current(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::ApplicationData> impl_IApplicationDataStatics2<T>::GetForUserAsync(Windows::System::User const & user) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::ApplicationData> getForUserOperation;
	check_hresult(shim()->abi_GetForUserAsync(get(user), put(getForUserOperation)));
	return getForUserOperation;
}

template <typename T> unsigned impl_IApplicationData<T>::Version() const
{
	unsigned value = {};
	check_hresult(shim()->get_Version(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationData<T>::SetVersionAsync(unsigned const desiredVersion, Windows::Storage::IApplicationDataSetVersionHandler const & handler) const
{
	Windows::Foundation::IAsyncAction setVersionOperation;
	check_hresult(shim()->abi_SetVersionAsync(desiredVersion, get(handler), put(setVersionOperation)));
	return setVersionOperation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncAction impl_IApplicationData<T>::SetVersionAsync(unsigned const desiredVersion, F handler) const
{
	return SetVersionAsync(desiredVersion, Windows::Storage::ApplicationDataSetVersionHandler(handler));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationData<T>::ClearAsync() const
{
	Windows::Foundation::IAsyncAction clearOperation;
	check_hresult(shim()->abi_ClearAllAsync(put(clearOperation)));
	return clearOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationData<T>::ClearAsync(Windows::Storage::ApplicationDataLocality const locality) const
{
	Windows::Foundation::IAsyncAction clearOperation;
	check_hresult(shim()->abi_ClearAsync(locality, put(clearOperation)));
	return clearOperation;
}

template <typename T> Windows::Storage::ApplicationDataContainer impl_IApplicationData<T>::LocalSettings() const
{
	Windows::Storage::ApplicationDataContainer value = nullptr;
	check_hresult(shim()->get_LocalSettings(put(value)));
	return value;
}

template <typename T> Windows::Storage::ApplicationDataContainer impl_IApplicationData<T>::RoamingSettings() const
{
	Windows::Storage::ApplicationDataContainer value = nullptr;
	check_hresult(shim()->get_RoamingSettings(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IApplicationData<T>::LocalFolder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_LocalFolder(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IApplicationData<T>::RoamingFolder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_RoamingFolder(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IApplicationData<T>::TemporaryFolder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_TemporaryFolder(put(value)));
	return value;
}

template <typename T> long long impl_IApplicationData<T>::DataChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::ApplicationData, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_DataChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IApplicationData<T>::DataChanged(F handler) const
{
	return DataChanged(Windows::Foundation::TypedEventHandler<Windows::Storage::ApplicationData, IInspectable>(handler));
}

template <typename T> void impl_IApplicationData<T>::DataChanged(long long const token) const
{
	check_hresult(shim()->remove_DataChanged(token));
}

template <typename T> void impl_IApplicationData<T>::SignalDataChanged() const
{
	check_hresult(shim()->abi_SignalDataChanged());
}

template <typename T> unsigned long long impl_IApplicationData<T>::RoamingStorageQuota() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_RoamingStorageQuota(&value));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IApplicationData2<T>::LocalCacheFolder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_LocalCacheFolder(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IApplicationData3<T>::GetPublisherCacheFolder(StringReference const & folderName) const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->abi_GetPublisherCacheFolder(get(folderName), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationData3<T>::ClearPublisherCacheFolderAsync(StringReference const & folderName) const
{
	Windows::Foundation::IAsyncAction clearOperation;
	check_hresult(shim()->abi_ClearPublisherCacheFolderAsync(get(folderName), put(clearOperation)));
	return clearOperation;
}

template <typename T> Windows::Storage::StorageFolder impl_IApplicationData3<T>::SharedLocalFolder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_SharedLocalFolder(put(value)));
	return value;
}

template <typename T> unsigned impl_ISetVersionRequest<T>::CurrentVersion() const
{
	unsigned currentVersion = {};
	check_hresult(shim()->get_CurrentVersion(&currentVersion));
	return currentVersion;
}

template <typename T> unsigned impl_ISetVersionRequest<T>::DesiredVersion() const
{
	unsigned desiredVersion = {};
	check_hresult(shim()->get_DesiredVersion(&desiredVersion));
	return desiredVersion;
}

template <typename T> Windows::Storage::SetVersionDeferral impl_ISetVersionRequest<T>::GetDeferral() const
{
	Windows::Storage::SetVersionDeferral deferral = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> void impl_ISetVersionDeferral<T>::Complete() const
{
	check_hresult(shim()->abi_Complete());
}

template <typename T> String impl_IApplicationDataContainer<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Storage::ApplicationDataLocality impl_IApplicationDataContainer<T>::Locality() const
{
	Windows::Storage::ApplicationDataLocality value = {};
	check_hresult(shim()->get_Locality(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IApplicationDataContainer<T>::Values() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check_hresult(shim()->get_Values(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::Storage::ApplicationDataContainer> impl_IApplicationDataContainer<T>::Containers() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::Storage::ApplicationDataContainer> value;
	check_hresult(shim()->get_Containers(put(value)));
	return value;
}

template <typename T> Windows::Storage::ApplicationDataContainer impl_IApplicationDataContainer<T>::CreateContainer(StringReference const & name, Windows::Storage::ApplicationDataCreateDisposition const disposition) const
{
	Windows::Storage::ApplicationDataContainer container = nullptr;
	check_hresult(shim()->abi_CreateContainer(get(name), disposition, put(container)));
	return container;
}

template <typename T> void impl_IApplicationDataContainer<T>::DeleteContainer(StringReference const & name) const
{
	check_hresult(shim()->abi_DeleteContainer(get(name)));
}

}}}

namespace winrt { namespace Windows { namespace Storage { namespace FileProperties {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geopoint> impl_IGeotagHelperStatics<T>::GetGeotagAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geopoint> operation;
	check_hresult(shim()->abi_GetGeotagAsync(get(file), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IGeotagHelperStatics<T>::SetGeotagFromGeolocatorAsync(Windows::Storage::IStorageFile const & file, Windows::Devices::Geolocation::Geolocator const & geolocator) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_SetGeotagFromGeolocatorAsync(get(file), get(geolocator), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IGeotagHelperStatics<T>::SetGeotagAsync(Windows::Storage::IStorageFile const & file, Windows::Devices::Geolocation::Geopoint const & geopoint) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_SetGeotagAsync(get(file), get(geopoint), put(operation)));
	return operation;
}

template <typename T> unsigned impl_IThumbnailProperties<T>::OriginalWidth() const
{
	unsigned value = {};
	check_hresult(shim()->get_OriginalWidth(&value));
	return value;
}

template <typename T> unsigned impl_IThumbnailProperties<T>::OriginalHeight() const
{
	unsigned value = {};
	check_hresult(shim()->get_OriginalHeight(&value));
	return value;
}

template <typename T> bool impl_IThumbnailProperties<T>::ReturnedSmallerCachedSize() const
{
	bool value = {};
	check_hresult(shim()->get_ReturnedSmallerCachedSize(put(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::ThumbnailType impl_IThumbnailProperties<T>::Type() const
{
	Windows::Storage::FileProperties::ThumbnailType value = {};
	check_hresult(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<String, IInspectable>> impl_IStorageItemExtraProperties<T>::RetrievePropertiesAsync(Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<String, IInspectable>> operation;
	check_hresult(shim()->abi_RetrievePropertiesAsync(get(propertiesToRetrieve), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItemExtraProperties<T>::SavePropertiesAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, IInspectable>> const & propertiesToSave) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_SavePropertiesAsync(get(propertiesToSave), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItemExtraProperties<T>::SavePropertiesAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_SavePropertiesAsyncOverloadDefault(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::MusicProperties> impl_IStorageItemContentProperties<T>::GetMusicPropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::MusicProperties> operation;
	check_hresult(shim()->abi_GetMusicPropertiesAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::VideoProperties> impl_IStorageItemContentProperties<T>::GetVideoPropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::VideoProperties> operation;
	check_hresult(shim()->abi_GetVideoPropertiesAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::ImageProperties> impl_IStorageItemContentProperties<T>::GetImagePropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::ImageProperties> operation;
	check_hresult(shim()->abi_GetImagePropertiesAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::DocumentProperties> impl_IStorageItemContentProperties<T>::GetDocumentPropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::DocumentProperties> operation;
	check_hresult(shim()->abi_GetDocumentPropertiesAsync(put(operation)));
	return operation;
}

template <typename T> String impl_IMusicProperties<T>::Album() const
{
	String value;
	check_hresult(shim()->get_Album(put(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Album(StringReference const & value) const
{
	check_hresult(shim()->put_Album(get(value)));
}

template <typename T> String impl_IMusicProperties<T>::Artist() const
{
	String value;
	check_hresult(shim()->get_Artist(put(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Artist(StringReference const & value) const
{
	check_hresult(shim()->put_Artist(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IMusicProperties<T>::Genre() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_Genre(put(value)));
	return value;
}

template <typename T> unsigned impl_IMusicProperties<T>::TrackNumber() const
{
	unsigned value = {};
	check_hresult(shim()->get_TrackNumber(&value));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::TrackNumber(unsigned const value) const
{
	check_hresult(shim()->put_TrackNumber(value));
}

template <typename T> String impl_IMusicProperties<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Title(StringReference const & value) const
{
	check_hresult(shim()->put_Title(get(value)));
}

template <typename T> unsigned impl_IMusicProperties<T>::Rating() const
{
	unsigned value = {};
	check_hresult(shim()->get_Rating(&value));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Rating(unsigned const value) const
{
	check_hresult(shim()->put_Rating(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMusicProperties<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_Duration(&value));
	return value;
}

template <typename T> unsigned impl_IMusicProperties<T>::Bitrate() const
{
	unsigned value = {};
	check_hresult(shim()->get_Bitrate(&value));
	return value;
}

template <typename T> String impl_IMusicProperties<T>::AlbumArtist() const
{
	String value;
	check_hresult(shim()->get_AlbumArtist(put(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::AlbumArtist(StringReference const & value) const
{
	check_hresult(shim()->put_AlbumArtist(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IMusicProperties<T>::Composers() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_Composers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IMusicProperties<T>::Conductors() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_Conductors(put(value)));
	return value;
}

template <typename T> String impl_IMusicProperties<T>::Subtitle() const
{
	String value;
	check_hresult(shim()->get_Subtitle(put(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Subtitle(StringReference const & value) const
{
	check_hresult(shim()->put_Subtitle(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IMusicProperties<T>::Producers() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_Producers(put(value)));
	return value;
}

template <typename T> String impl_IMusicProperties<T>::Publisher() const
{
	String value;
	check_hresult(shim()->get_Publisher(put(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Publisher(StringReference const & value) const
{
	check_hresult(shim()->put_Publisher(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IMusicProperties<T>::Writers() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_Writers(put(value)));
	return value;
}

template <typename T> unsigned impl_IMusicProperties<T>::Year() const
{
	unsigned value = {};
	check_hresult(shim()->get_Year(&value));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Year(unsigned const value) const
{
	check_hresult(shim()->put_Year(value));
}

template <typename T> unsigned impl_IImageProperties<T>::Rating() const
{
	unsigned value = {};
	check_hresult(shim()->get_Rating(&value));
	return value;
}

template <typename T> void impl_IImageProperties<T>::Rating(unsigned const value) const
{
	check_hresult(shim()->put_Rating(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IImageProperties<T>::Keywords() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_Keywords(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IImageProperties<T>::DateTaken() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_DateTaken(&value));
	return value;
}

template <typename T> void impl_IImageProperties<T>::DateTaken(Windows::Foundation::DateTime const & value) const
{
	check_hresult(shim()->put_DateTaken(value));
}

template <typename T> unsigned impl_IImageProperties<T>::Width() const
{
	unsigned value = {};
	check_hresult(shim()->get_Width(&value));
	return value;
}

template <typename T> unsigned impl_IImageProperties<T>::Height() const
{
	unsigned value = {};
	check_hresult(shim()->get_Height(&value));
	return value;
}

template <typename T> String impl_IImageProperties<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IImageProperties<T>::Title(StringReference const & value) const
{
	check_hresult(shim()->put_Title(get(value)));
}

template <typename T> Windows::Foundation::IReference<double> impl_IImageProperties<T>::Latitude() const
{
	Windows::Foundation::IReference<double> value;
	check_hresult(shim()->get_Latitude(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IImageProperties<T>::Longitude() const
{
	Windows::Foundation::IReference<double> value;
	check_hresult(shim()->get_Longitude(put(value)));
	return value;
}

template <typename T> String impl_IImageProperties<T>::CameraManufacturer() const
{
	String value;
	check_hresult(shim()->get_CameraManufacturer(put(value)));
	return value;
}

template <typename T> void impl_IImageProperties<T>::CameraManufacturer(StringReference const & value) const
{
	check_hresult(shim()->put_CameraManufacturer(get(value)));
}

template <typename T> String impl_IImageProperties<T>::CameraModel() const
{
	String value;
	check_hresult(shim()->get_CameraModel(put(value)));
	return value;
}

template <typename T> void impl_IImageProperties<T>::CameraModel(StringReference const & value) const
{
	check_hresult(shim()->put_CameraModel(get(value)));
}

template <typename T> Windows::Storage::FileProperties::PhotoOrientation impl_IImageProperties<T>::Orientation() const
{
	Windows::Storage::FileProperties::PhotoOrientation value = {};
	check_hresult(shim()->get_Orientation(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IImageProperties<T>::PeopleNames() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_PeopleNames(put(value)));
	return value;
}

template <typename T> unsigned impl_IVideoProperties<T>::Rating() const
{
	unsigned value = {};
	check_hresult(shim()->get_Rating(&value));
	return value;
}

template <typename T> void impl_IVideoProperties<T>::Rating(unsigned const value) const
{
	check_hresult(shim()->put_Rating(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVideoProperties<T>::Keywords() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_Keywords(put(value)));
	return value;
}

template <typename T> unsigned impl_IVideoProperties<T>::Width() const
{
	unsigned value = {};
	check_hresult(shim()->get_Width(&value));
	return value;
}

template <typename T> unsigned impl_IVideoProperties<T>::Height() const
{
	unsigned value = {};
	check_hresult(shim()->get_Height(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IVideoProperties<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->get_Duration(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IVideoProperties<T>::Latitude() const
{
	Windows::Foundation::IReference<double> value;
	check_hresult(shim()->get_Latitude(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IVideoProperties<T>::Longitude() const
{
	Windows::Foundation::IReference<double> value;
	check_hresult(shim()->get_Longitude(put(value)));
	return value;
}

template <typename T> String impl_IVideoProperties<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IVideoProperties<T>::Title(StringReference const & value) const
{
	check_hresult(shim()->put_Title(get(value)));
}

template <typename T> String impl_IVideoProperties<T>::Subtitle() const
{
	String value;
	check_hresult(shim()->get_Subtitle(put(value)));
	return value;
}

template <typename T> void impl_IVideoProperties<T>::Subtitle(StringReference const & value) const
{
	check_hresult(shim()->put_Subtitle(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVideoProperties<T>::Producers() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_Producers(put(value)));
	return value;
}

template <typename T> String impl_IVideoProperties<T>::Publisher() const
{
	String value;
	check_hresult(shim()->get_Publisher(put(value)));
	return value;
}

template <typename T> void impl_IVideoProperties<T>::Publisher(StringReference const & value) const
{
	check_hresult(shim()->put_Publisher(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVideoProperties<T>::Writers() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_Writers(put(value)));
	return value;
}

template <typename T> unsigned impl_IVideoProperties<T>::Year() const
{
	unsigned value = {};
	check_hresult(shim()->get_Year(&value));
	return value;
}

template <typename T> void impl_IVideoProperties<T>::Year(unsigned const value) const
{
	check_hresult(shim()->put_Year(value));
}

template <typename T> unsigned impl_IVideoProperties<T>::Bitrate() const
{
	unsigned value = {};
	check_hresult(shim()->get_Bitrate(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVideoProperties<T>::Directors() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_Directors(put(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::VideoOrientation impl_IVideoProperties<T>::Orientation() const
{
	Windows::Storage::FileProperties::VideoOrientation value = {};
	check_hresult(shim()->get_Orientation(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IDocumentProperties<T>::Author() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_Author(put(value)));
	return value;
}

template <typename T> String impl_IDocumentProperties<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IDocumentProperties<T>::Title(StringReference const & value) const
{
	check_hresult(shim()->put_Title(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IDocumentProperties<T>::Keywords() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_Keywords(put(value)));
	return value;
}

template <typename T> String impl_IDocumentProperties<T>::Comment() const
{
	String value;
	check_hresult(shim()->get_Comment(put(value)));
	return value;
}

template <typename T> void impl_IDocumentProperties<T>::Comment(StringReference const & value) const
{
	check_hresult(shim()->put_Comment(get(value)));
}

template <typename T> unsigned long long impl_IBasicProperties<T>::Size() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_Size(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IBasicProperties<T>::DateModified() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_DateModified(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IBasicProperties<T>::ItemDate() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_ItemDate(&value));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

template <typename T> String impl_IFileRemovedEventArgs<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::AddFileResult impl_IFileOpenPickerUI<T>::AddFile(StringReference const & id, Windows::Storage::IStorageFile const & file) const
{
	Windows::Storage::Pickers::Provider::AddFileResult addResult = {};
	check_hresult(shim()->abi_AddFile(get(id), get(file), &addResult));
	return addResult;
}

template <typename T> void impl_IFileOpenPickerUI<T>::RemoveFile(StringReference const & id) const
{
	check_hresult(shim()->abi_RemoveFile(get(id)));
}

template <typename T> bool impl_IFileOpenPickerUI<T>::ContainsFile(StringReference const & id) const
{
	bool isContained = {};
	check_hresult(shim()->abi_ContainsFile(get(id), put(isContained)));
	return isContained;
}

template <typename T> bool impl_IFileOpenPickerUI<T>::CanAddFile(Windows::Storage::IStorageFile const & file) const
{
	bool canAdd = {};
	check_hresult(shim()->abi_CanAddFile(get(file), put(canAdd)));
	return canAdd;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IFileOpenPickerUI<T>::AllowedFileTypes() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_AllowedFileTypes(put(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::FileSelectionMode impl_IFileOpenPickerUI<T>::SelectionMode() const
{
	Windows::Storage::Pickers::Provider::FileSelectionMode value = {};
	check_hresult(shim()->get_SelectionMode(&value));
	return value;
}

template <typename T> String impl_IFileOpenPickerUI<T>::SettingsIdentifier() const
{
	String value;
	check_hresult(shim()->get_SettingsIdentifier(put(value)));
	return value;
}

template <typename T> String impl_IFileOpenPickerUI<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IFileOpenPickerUI<T>::Title(StringReference const & value) const
{
	check_hresult(shim()->put_Title(get(value)));
}

template <typename T> long long impl_IFileOpenPickerUI<T>::FileRemoved(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::FileRemovedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_FileRemoved(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IFileOpenPickerUI<T>::FileRemoved(F handler) const
{
	return FileRemoved(Windows::Foundation::TypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::FileRemovedEventArgs>(handler));
}

template <typename T> void impl_IFileOpenPickerUI<T>::FileRemoved(long long const token) const
{
	check_hresult(shim()->remove_FileRemoved(token));
}

template <typename T> long long impl_IFileOpenPickerUI<T>::Closing(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::PickerClosingEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Closing(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IFileOpenPickerUI<T>::Closing(F handler) const
{
	return Closing(Windows::Foundation::TypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::PickerClosingEventArgs>(handler));
}

template <typename T> void impl_IFileOpenPickerUI<T>::Closing(long long const token) const
{
	check_hresult(shim()->remove_Closing(token));
}

template <typename T> Windows::Storage::Pickers::Provider::PickerClosingOperation impl_IPickerClosingEventArgs<T>::ClosingOperation() const
{
	Windows::Storage::Pickers::Provider::PickerClosingOperation value = nullptr;
	check_hresult(shim()->get_ClosingOperation(put(value)));
	return value;
}

template <typename T> bool impl_IPickerClosingEventArgs<T>::IsCanceled() const
{
	bool value = {};
	check_hresult(shim()->get_IsCanceled(put(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::PickerClosingDeferral impl_IPickerClosingOperation<T>::GetDeferral() const
{
	Windows::Storage::Pickers::Provider::PickerClosingDeferral value = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPickerClosingOperation<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->get_Deadline(&value));
	return value;
}

template <typename T> void impl_IPickerClosingDeferral<T>::Complete() const
{
	check_hresult(shim()->abi_Complete());
}

template <typename T> String impl_IFileSavePickerUI<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IFileSavePickerUI<T>::Title(StringReference const & value) const
{
	check_hresult(shim()->put_Title(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IFileSavePickerUI<T>::AllowedFileTypes() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check_hresult(shim()->get_AllowedFileTypes(put(value)));
	return value;
}

template <typename T> String impl_IFileSavePickerUI<T>::SettingsIdentifier() const
{
	String value;
	check_hresult(shim()->get_SettingsIdentifier(put(value)));
	return value;
}

template <typename T> String impl_IFileSavePickerUI<T>::FileName() const
{
	String value;
	check_hresult(shim()->get_FileName(put(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::SetFileNameResult impl_IFileSavePickerUI<T>::TrySetFileName(StringReference const & value) const
{
	Windows::Storage::Pickers::Provider::SetFileNameResult result = {};
	check_hresult(shim()->abi_TrySetFileName(get(value), &result));
	return result;
}

template <typename T> long long impl_IFileSavePickerUI<T>::FileNameChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_FileNameChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IFileSavePickerUI<T>::FileNameChanged(F handler) const
{
	return FileNameChanged(Windows::Foundation::TypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, IInspectable>(handler));
}

template <typename T> void impl_IFileSavePickerUI<T>::FileNameChanged(long long const token) const
{
	check_hresult(shim()->remove_FileNameChanged(token));
}

template <typename T> long long impl_IFileSavePickerUI<T>::TargetFileRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_TargetFileRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IFileSavePickerUI<T>::TargetFileRequested(F handler) const
{
	return TargetFileRequested(Windows::Foundation::TypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs>(handler));
}

template <typename T> void impl_IFileSavePickerUI<T>::TargetFileRequested(long long const token) const
{
	check_hresult(shim()->remove_TargetFileRequested(token));
}

template <typename T> Windows::Storage::Pickers::Provider::TargetFileRequest impl_ITargetFileRequestedEventArgs<T>::Request() const
{
	Windows::Storage::Pickers::Provider::TargetFileRequest value = nullptr;
	check_hresult(shim()->get_Request(put(value)));
	return value;
}

template <typename T> Windows::Storage::IStorageFile impl_ITargetFileRequest<T>::TargetFile() const
{
	Windows::Storage::IStorageFile value;
	check_hresult(shim()->get_TargetFile(put(value)));
	return value;
}

template <typename T> void impl_ITargetFileRequest<T>::TargetFile(Windows::Storage::IStorageFile const & value) const
{
	check_hresult(shim()->put_TargetFile(get(value)));
}

template <typename T> Windows::Storage::Pickers::Provider::TargetFileRequestDeferral impl_ITargetFileRequest<T>::GetDeferral() const
{
	Windows::Storage::Pickers::Provider::TargetFileRequestDeferral value = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> void impl_ITargetFileRequestDeferral<T>::Complete() const
{
	check_hresult(shim()->abi_Complete());
}

}}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Provider {

template <typename T> String impl_ICachedFileUpdaterUI<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_ICachedFileUpdaterUI<T>::Title(StringReference const & value) const
{
	check_hresult(shim()->put_Title(get(value)));
}

template <typename T> Windows::Storage::Provider::CachedFileTarget impl_ICachedFileUpdaterUI<T>::UpdateTarget() const
{
	Windows::Storage::Provider::CachedFileTarget value = {};
	check_hresult(shim()->get_UpdateTarget(&value));
	return value;
}

template <typename T> long long impl_ICachedFileUpdaterUI<T>::FileUpdateRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, Windows::Storage::Provider::FileUpdateRequestedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_FileUpdateRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICachedFileUpdaterUI<T>::FileUpdateRequested(F handler) const
{
	return FileUpdateRequested(Windows::Foundation::TypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, Windows::Storage::Provider::FileUpdateRequestedEventArgs>(handler));
}

template <typename T> void impl_ICachedFileUpdaterUI<T>::FileUpdateRequested(long long const token) const
{
	check_hresult(shim()->remove_FileUpdateRequested(token));
}

template <typename T> long long impl_ICachedFileUpdaterUI<T>::UIRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_UIRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICachedFileUpdaterUI<T>::UIRequested(F handler) const
{
	return UIRequested(Windows::Foundation::TypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, IInspectable>(handler));
}

template <typename T> void impl_ICachedFileUpdaterUI<T>::UIRequested(long long const token) const
{
	check_hresult(shim()->remove_UIRequested(token));
}

template <typename T> Windows::Storage::Provider::UIStatus impl_ICachedFileUpdaterUI<T>::UIStatus() const
{
	Windows::Storage::Provider::UIStatus value = {};
	check_hresult(shim()->get_UIStatus(&value));
	return value;
}

template <typename T> Windows::Storage::Provider::FileUpdateRequest impl_IFileUpdateRequestedEventArgs<T>::Request() const
{
	Windows::Storage::Provider::FileUpdateRequest value = nullptr;
	check_hresult(shim()->get_Request(put(value)));
	return value;
}

template <typename T> String impl_IFileUpdateRequest<T>::ContentId() const
{
	String value;
	check_hresult(shim()->get_ContentId(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFile impl_IFileUpdateRequest<T>::File() const
{
	Windows::Storage::StorageFile value = nullptr;
	check_hresult(shim()->get_File(put(value)));
	return value;
}

template <typename T> Windows::Storage::Provider::FileUpdateStatus impl_IFileUpdateRequest<T>::Status() const
{
	Windows::Storage::Provider::FileUpdateStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> void impl_IFileUpdateRequest<T>::Status(Windows::Storage::Provider::FileUpdateStatus const value) const
{
	check_hresult(shim()->put_Status(value));
}

template <typename T> Windows::Storage::Provider::FileUpdateRequestDeferral impl_IFileUpdateRequest<T>::GetDeferral() const
{
	Windows::Storage::Provider::FileUpdateRequestDeferral value = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> void impl_IFileUpdateRequest<T>::UpdateLocalFile(Windows::Storage::IStorageFile const & value) const
{
	check_hresult(shim()->abi_UpdateLocalFile(get(value)));
}

template <typename T> void impl_IFileUpdateRequestDeferral<T>::Complete() const
{
	check_hresult(shim()->abi_Complete());
}

template <typename T> Windows::Storage::Provider::FileUpdateRequest impl_ICachedFileUpdaterUI2<T>::UpdateRequest() const
{
	Windows::Storage::Provider::FileUpdateRequest value = nullptr;
	check_hresult(shim()->get_UpdateRequest(put(value)));
	return value;
}

template <typename T> Windows::Storage::Provider::FileUpdateRequestDeferral impl_ICachedFileUpdaterUI2<T>::GetDeferral() const
{
	Windows::Storage::Provider::FileUpdateRequestDeferral value = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> String impl_IFileUpdateRequest2<T>::UserInputNeededMessage() const
{
	String value;
	check_hresult(shim()->get_UserInputNeededMessage(put(value)));
	return value;
}

template <typename T> void impl_IFileUpdateRequest2<T>::UserInputNeededMessage(StringReference const & value) const
{
	check_hresult(shim()->put_UserInputNeededMessage(get(value)));
}

template <typename T> void impl_ICachedFileUpdaterStatics<T>::SetUpdateInformation(Windows::Storage::IStorageFile const & file, StringReference const & contentId, Windows::Storage::Provider::ReadActivationMode const readMode, Windows::Storage::Provider::WriteActivationMode const writeMode, Windows::Storage::Provider::CachedFileOptions const options) const
{
	check_hresult(shim()->abi_SetUpdateInformation(get(file), get(contentId), readMode, writeMode, options));
}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Search {

template <typename T> Windows::Storage::Search::ContentIndexer impl_IContentIndexerStatics<T>::GetIndexer(StringReference const & indexName) const
{
	Windows::Storage::Search::ContentIndexer index = nullptr;
	check_hresult(shim()->abi_GetIndexerWithName(get(indexName), put(index)));
	return index;
}

template <typename T> Windows::Storage::Search::ContentIndexer impl_IContentIndexerStatics<T>::GetIndexer() const
{
	Windows::Storage::Search::ContentIndexer index = nullptr;
	check_hresult(shim()->abi_GetIndexer(put(index)));
	return index;
}

template <typename T> String impl_IIndexableContent<T>::Id() const
{
	String value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_IIndexableContent<T>::Id(StringReference const & value) const
{
	check_hresult(shim()->put_Id(get(value)));
}

template <typename T> Windows::Foundation::Collections::IMap<String, IInspectable> impl_IIndexableContent<T>::Properties() const
{
	Windows::Foundation::Collections::IMap<String, IInspectable> value;
	check_hresult(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_IIndexableContent<T>::Stream() const
{
	Windows::Storage::Streams::IRandomAccessStream value;
	check_hresult(shim()->get_Stream(put(value)));
	return value;
}

template <typename T> void impl_IIndexableContent<T>::Stream(Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	check_hresult(shim()->put_Stream(get(value)));
}

template <typename T> String impl_IIndexableContent<T>::StreamContentType() const
{
	String value;
	check_hresult(shim()->get_StreamContentType(put(value)));
	return value;
}

template <typename T> void impl_IIndexableContent<T>::StreamContentType(StringReference const & value) const
{
	check_hresult(shim()->put_StreamContentType(get(value)));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContentIndexer<T>::AddAsync(Windows::Storage::Search::IIndexableContent const & indexableContent) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_AddAsync(get(indexableContent), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContentIndexer<T>::UpdateAsync(Windows::Storage::Search::IIndexableContent const & indexableContent) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_UpdateAsync(get(indexableContent), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContentIndexer<T>::DeleteAsync(StringReference const & contentId) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_DeleteAsync(get(contentId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContentIndexer<T>::DeleteMultipleAsync(Windows::Foundation::Collections::IIterable<String> const & contentIds) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_DeleteMultipleAsync(get(contentIds), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContentIndexer<T>::DeleteAllAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_DeleteAllAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, IInspectable>> impl_IContentIndexer<T>::RetrievePropertiesAsync(StringReference const & contentId, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, IInspectable>> operation;
	check_hresult(shim()->abi_RetrievePropertiesAsync(get(contentId), get(propertiesToRetrieve), put(operation)));
	return operation;
}

template <typename T> unsigned long long impl_IContentIndexer<T>::Revision() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_Revision(&value));
	return value;
}

template <typename T> String impl_IValueAndLanguage<T>::Language() const
{
	String value;
	check_hresult(shim()->get_Language(put(value)));
	return value;
}

template <typename T> void impl_IValueAndLanguage<T>::Language(StringReference const & value) const
{
	check_hresult(shim()->put_Language(get(value)));
}

template <typename T> IInspectable impl_IValueAndLanguage<T>::Value() const
{
	IInspectable value;
	check_hresult(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IValueAndLanguage<T>::Value(IInspectable const & value) const
{
	check_hresult(shim()->put_Value(get(value)));
}

template <typename T> Windows::Storage::Search::ContentIndexerQuery impl_IContentIndexerQueryOperations<T>::CreateQuery(StringReference const & searchFilter, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<winrt::Windows::Storage::Search::SortEntry> const & sortOrder, StringReference const & searchFilterLanguage) const
{
	Windows::Storage::Search::ContentIndexerQuery query = nullptr;
	check_hresult(shim()->abi_CreateQueryWithSortOrderAndLanguage(get(searchFilter), get(propertiesToRetrieve), get(sortOrder), get(searchFilterLanguage), put(query)));
	return query;
}

template <typename T> Windows::Storage::Search::ContentIndexerQuery impl_IContentIndexerQueryOperations<T>::CreateQuery(StringReference const & searchFilter, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<winrt::Windows::Storage::Search::SortEntry> const & sortOrder) const
{
	Windows::Storage::Search::ContentIndexerQuery query = nullptr;
	check_hresult(shim()->abi_CreateQueryWithSortOrder(get(searchFilter), get(propertiesToRetrieve), get(sortOrder), put(query)));
	return query;
}

template <typename T> Windows::Storage::Search::ContentIndexerQuery impl_IContentIndexerQueryOperations<T>::CreateQuery(StringReference const & searchFilter, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const
{
	Windows::Storage::Search::ContentIndexerQuery query = nullptr;
	check_hresult(shim()->abi_CreateQuery(get(searchFilter), get(propertiesToRetrieve), put(query)));
	return query;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IContentIndexerQuery<T>::GetCountAsync() const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation;
	check_hresult(shim()->abi_GetCountAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<String, IInspectable>>> impl_IContentIndexerQuery<T>::GetPropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<String, IInspectable>>> operation;
	check_hresult(shim()->abi_GetPropertiesAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<String, IInspectable>>> impl_IContentIndexerQuery<T>::GetPropertiesAsync(unsigned const startIndex, unsigned const maxItems) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<String, IInspectable>>> operation;
	check_hresult(shim()->abi_GetPropertiesRangeAsync(startIndex, maxItems, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> impl_IContentIndexerQuery<T>::GetAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> operation;
	check_hresult(shim()->abi_GetAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> impl_IContentIndexerQuery<T>::GetAsync(unsigned const startIndex, unsigned const maxItems) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> operation;
	check_hresult(shim()->abi_GetRangeAsync(startIndex, maxItems, put(operation)));
	return operation;
}

template <typename T> Windows::Storage::StorageFolder impl_IContentIndexerQuery<T>::QueryFolder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_QueryFolder(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IQueryOptions<T>::FileTypeFilter() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_FileTypeFilter(put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::FolderDepth impl_IQueryOptions<T>::FolderDepth() const
{
	Windows::Storage::Search::FolderDepth value = {};
	check_hresult(shim()->get_FolderDepth(&value));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::FolderDepth(Windows::Storage::Search::FolderDepth const value) const
{
	check_hresult(shim()->put_FolderDepth(value));
}

template <typename T> String impl_IQueryOptions<T>::ApplicationSearchFilter() const
{
	String value;
	check_hresult(shim()->get_ApplicationSearchFilter(put(value)));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::ApplicationSearchFilter(StringReference const & value) const
{
	check_hresult(shim()->put_ApplicationSearchFilter(get(value)));
}

template <typename T> String impl_IQueryOptions<T>::UserSearchFilter() const
{
	String value;
	check_hresult(shim()->get_UserSearchFilter(put(value)));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::UserSearchFilter(StringReference const & value) const
{
	check_hresult(shim()->put_UserSearchFilter(get(value)));
}

template <typename T> String impl_IQueryOptions<T>::Language() const
{
	String value;
	check_hresult(shim()->get_Language(put(value)));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::Language(StringReference const & value) const
{
	check_hresult(shim()->put_Language(get(value)));
}

template <typename T> Windows::Storage::Search::IndexerOption impl_IQueryOptions<T>::IndexerOption() const
{
	Windows::Storage::Search::IndexerOption value = {};
	check_hresult(shim()->get_IndexerOption(&value));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::IndexerOption(Windows::Storage::Search::IndexerOption const value) const
{
	check_hresult(shim()->put_IndexerOption(value));
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Storage::Search::SortEntry> impl_IQueryOptions<T>::SortOrder() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Storage::Search::SortEntry> value;
	check_hresult(shim()->get_SortOrder(put(value)));
	return value;
}

template <typename T> String impl_IQueryOptions<T>::GroupPropertyName() const
{
	String value;
	check_hresult(shim()->get_GroupPropertyName(put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::DateStackOption impl_IQueryOptions<T>::DateStackOption() const
{
	Windows::Storage::Search::DateStackOption value = {};
	check_hresult(shim()->get_DateStackOption(&value));
	return value;
}

template <typename T> String impl_IQueryOptions<T>::SaveToString() const
{
	String value;
	check_hresult(shim()->abi_SaveToString(put(value)));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::LoadFromString(StringReference const & value) const
{
	check_hresult(shim()->abi_LoadFromString(get(value)));
}

template <typename T> void impl_IQueryOptions<T>::SetThumbnailPrefetch(Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedSize, Windows::Storage::FileProperties::ThumbnailOptions const options) const
{
	check_hresult(shim()->abi_SetThumbnailPrefetch(mode, requestedSize, options));
}

template <typename T> void impl_IQueryOptions<T>::SetPropertyPrefetch(Windows::Storage::FileProperties::PropertyPrefetchOptions const options, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const
{
	check_hresult(shim()->abi_SetPropertyPrefetch(options, get(propertiesToRetrieve)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IQueryOptionsWithProviderFilter<T>::StorageProviderIdFilter() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check_hresult(shim()->get_StorageProviderIdFilter(put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::QueryOptions impl_IQueryOptionsFactory<T>::CreateCommonFileQuery(Windows::Storage::Search::CommonFileQuery const query, Windows::Foundation::Collections::IIterable<String> const & fileTypeFilter) const
{
	Windows::Storage::Search::QueryOptions queryOptions = nullptr;
	check_hresult(shim()->abi_CreateCommonFileQuery(query, get(fileTypeFilter), put(queryOptions)));
	return queryOptions;
}

template <typename T> Windows::Storage::Search::QueryOptions impl_IQueryOptionsFactory<T>::CreateCommonFolderQuery(Windows::Storage::Search::CommonFolderQuery const query) const
{
	Windows::Storage::Search::QueryOptions queryOptions = nullptr;
	check_hresult(shim()->abi_CreateCommonFolderQuery(query, put(queryOptions)));
	return queryOptions;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IStorageQueryResultBase<T>::GetItemCountAsync() const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation;
	check_hresult(shim()->abi_GetItemCountAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Storage::StorageFolder impl_IStorageQueryResultBase<T>::Folder() const
{
	Windows::Storage::StorageFolder container = nullptr;
	check_hresult(shim()->get_Folder(put(container)));
	return container;
}

template <typename T> long long impl_IStorageQueryResultBase<T>::ContentsChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable> const & handler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_ContentsChanged(get(handler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IStorageQueryResultBase<T>::ContentsChanged(F handler) const
{
	return ContentsChanged(Windows::Foundation::TypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable>(handler));
}

template <typename T> void impl_IStorageQueryResultBase<T>::ContentsChanged(long long const eventCookie) const
{
	check_hresult(shim()->remove_ContentsChanged(eventCookie));
}

template <typename T> long long impl_IStorageQueryResultBase<T>::OptionsChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable> const & changedHandler) const
{
	long long eventCookie = {};
	check_hresult(shim()->add_OptionsChanged(get(changedHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IStorageQueryResultBase<T>::OptionsChanged(F changedHandler) const
{
	return OptionsChanged(Windows::Foundation::TypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable>(changedHandler));
}

template <typename T> void impl_IStorageQueryResultBase<T>::OptionsChanged(long long const eventCookie) const
{
	check_hresult(shim()->remove_OptionsChanged(eventCookie));
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IStorageQueryResultBase<T>::FindStartIndexAsync(IInspectable const & value) const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation;
	check_hresult(shim()->abi_FindStartIndexAsync(get(value), put(operation)));
	return operation;
}

template <typename T> Windows::Storage::Search::QueryOptions impl_IStorageQueryResultBase<T>::GetCurrentQueryOptions() const
{
	Windows::Storage::Search::QueryOptions value = nullptr;
	check_hresult(shim()->abi_GetCurrentQueryOptions(put(value)));
	return value;
}

template <typename T> void impl_IStorageQueryResultBase<T>::ApplyNewQueryOptions(Windows::Storage::Search::QueryOptions const & newQueryOptions) const
{
	check_hresult(shim()->abi_ApplyNewQueryOptions(get(newQueryOptions)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IStorageFileQueryResult<T>::GetFilesAsync(unsigned const startIndex, unsigned const maxNumberOfItems) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> operation;
	check_hresult(shim()->abi_GetFilesAsync(startIndex, maxNumberOfItems, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IStorageFileQueryResult<T>::GetFilesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> operation;
	check_hresult(shim()->abi_GetFilesAsyncDefaultStartAndCount(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment>> impl_IStorageFileQueryResult2<T>::GetMatchingPropertiesWithRanges(Windows::Storage::StorageFile const & file) const
{
	Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment>> result;
	check_hresult(shim()->abi_GetMatchingPropertiesWithRanges(get(file), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> impl_IStorageFolderQueryResult<T>::GetFoldersAsync(unsigned const startIndex, unsigned const maxNumberOfItems) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> operation;
	check_hresult(shim()->abi_GetFoldersAsync(startIndex, maxNumberOfItems, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> impl_IStorageFolderQueryResult<T>::GetFoldersAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> operation;
	check_hresult(shim()->abi_GetFoldersAsyncDefaultStartAndCount(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> impl_IStorageItemQueryResult<T>::GetItemsAsync(unsigned const startIndex, unsigned const maxNumberOfItems) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> operation;
	check_hresult(shim()->abi_GetItemsAsync(startIndex, maxNumberOfItems, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> impl_IStorageItemQueryResult<T>::GetItemsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> operation;
	check_hresult(shim()->abi_GetItemsAsyncDefaultStartAndCount(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Search::IndexedState> impl_IStorageFolderQueryOperations<T>::GetIndexedStateAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Search::IndexedState> operation;
	check_hresult(shim()->abi_GetIndexedStateAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Storage::Search::StorageFileQueryResult impl_IStorageFolderQueryOperations<T>::CreateFileQuery() const
{
	Windows::Storage::Search::StorageFileQueryResult value = nullptr;
	check_hresult(shim()->abi_CreateFileQueryOverloadDefault(put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFileQueryResult impl_IStorageFolderQueryOperations<T>::CreateFileQuery(Windows::Storage::Search::CommonFileQuery const query) const
{
	Windows::Storage::Search::StorageFileQueryResult value = nullptr;
	check_hresult(shim()->abi_CreateFileQuery(query, put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFileQueryResult impl_IStorageFolderQueryOperations<T>::CreateFileQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const
{
	Windows::Storage::Search::StorageFileQueryResult value = nullptr;
	check_hresult(shim()->abi_CreateFileQueryWithOptions(get(queryOptions), put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFolderQueryResult impl_IStorageFolderQueryOperations<T>::CreateFolderQuery() const
{
	Windows::Storage::Search::StorageFolderQueryResult value = nullptr;
	check_hresult(shim()->abi_CreateFolderQueryOverloadDefault(put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFolderQueryResult impl_IStorageFolderQueryOperations<T>::CreateFolderQuery(Windows::Storage::Search::CommonFolderQuery const query) const
{
	Windows::Storage::Search::StorageFolderQueryResult value = nullptr;
	check_hresult(shim()->abi_CreateFolderQuery(query, put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFolderQueryResult impl_IStorageFolderQueryOperations<T>::CreateFolderQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const
{
	Windows::Storage::Search::StorageFolderQueryResult value = nullptr;
	check_hresult(shim()->abi_CreateFolderQueryWithOptions(get(queryOptions), put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageItemQueryResult impl_IStorageFolderQueryOperations<T>::CreateItemQuery() const
{
	Windows::Storage::Search::StorageItemQueryResult value = nullptr;
	check_hresult(shim()->abi_CreateItemQuery(put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageItemQueryResult impl_IStorageFolderQueryOperations<T>::CreateItemQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const
{
	Windows::Storage::Search::StorageItemQueryResult value = nullptr;
	check_hresult(shim()->abi_CreateItemQueryWithOptions(get(queryOptions), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IStorageFolderQueryOperations<T>::GetFilesAsync(Windows::Storage::Search::CommonFileQuery const query, unsigned const startIndex, unsigned const maxItemsToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> operation;
	check_hresult(shim()->abi_GetFilesAsync(query, startIndex, maxItemsToRetrieve, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IStorageFolderQueryOperations<T>::GetFilesAsync(Windows::Storage::Search::CommonFileQuery const query) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> operation;
	check_hresult(shim()->abi_GetFilesAsyncOverloadDefaultStartAndCount(query, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> impl_IStorageFolderQueryOperations<T>::GetFoldersAsync(Windows::Storage::Search::CommonFolderQuery const query, unsigned const startIndex, unsigned const maxItemsToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> operation;
	check_hresult(shim()->abi_GetFoldersAsync(query, startIndex, maxItemsToRetrieve, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> impl_IStorageFolderQueryOperations<T>::GetFoldersAsync(Windows::Storage::Search::CommonFolderQuery const query) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> operation;
	check_hresult(shim()->abi_GetFoldersAsyncOverloadDefaultStartAndCount(query, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> impl_IStorageFolderQueryOperations<T>::GetItemsAsync(unsigned const startIndex, unsigned const maxItemsToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> operation;
	check_hresult(shim()->abi_GetItemsAsync(startIndex, maxItemsToRetrieve, put(operation)));
	return operation;
}

template <typename T> bool impl_IStorageFolderQueryOperations<T>::AreQueryOptionsSupported(Windows::Storage::Search::QueryOptions const & queryOptions) const
{
	bool value = {};
	check_hresult(shim()->abi_AreQueryOptionsSupported(get(queryOptions), put(value)));
	return value;
}

template <typename T> bool impl_IStorageFolderQueryOperations<T>::IsCommonFolderQuerySupported(Windows::Storage::Search::CommonFolderQuery const query) const
{
	bool value = {};
	check_hresult(shim()->abi_IsCommonFolderQuerySupported(query, put(value)));
	return value;
}

template <typename T> bool impl_IStorageFolderQueryOperations<T>::IsCommonFileQuerySupported(Windows::Storage::Search::CommonFileQuery const query) const
{
	bool value = {};
	check_hresult(shim()->abi_IsCommonFileQuerySupported(query, put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IStorageLibraryContentChangedTriggerDetails<T>::Folder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check_hresult(shim()->get_Folder(put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageItemQueryResult impl_IStorageLibraryContentChangedTriggerDetails<T>::CreateModifiedSinceQuery(Windows::Foundation::DateTime const & lastQueryTime) const
{
	Windows::Storage::Search::StorageItemQueryResult result = nullptr;
	check_hresult(shim()->abi_CreateModifiedSinceQuery(lastQueryTime, put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Streams {

template <typename T> unsigned impl_IDataReader<T>::UnconsumedBufferLength() const
{
	unsigned value = {};
	check_hresult(shim()->get_UnconsumedBufferLength(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::UnicodeEncoding impl_IDataReader<T>::UnicodeEncoding() const
{
	Windows::Storage::Streams::UnicodeEncoding value = {};
	check_hresult(shim()->get_UnicodeEncoding(&value));
	return value;
}

template <typename T> void impl_IDataReader<T>::UnicodeEncoding(Windows::Storage::Streams::UnicodeEncoding const value) const
{
	check_hresult(shim()->put_UnicodeEncoding(value));
}

template <typename T> Windows::Storage::Streams::ByteOrder impl_IDataReader<T>::ByteOrder() const
{
	Windows::Storage::Streams::ByteOrder value = {};
	check_hresult(shim()->get_ByteOrder(&value));
	return value;
}

template <typename T> void impl_IDataReader<T>::ByteOrder(Windows::Storage::Streams::ByteOrder const value) const
{
	check_hresult(shim()->put_ByteOrder(value));
}

template <typename T> Windows::Storage::Streams::InputStreamOptions impl_IDataReader<T>::InputStreamOptions() const
{
	Windows::Storage::Streams::InputStreamOptions value = {};
	check_hresult(shim()->get_InputStreamOptions(&value));
	return value;
}

template <typename T> void impl_IDataReader<T>::InputStreamOptions(Windows::Storage::Streams::InputStreamOptions const value) const
{
	check_hresult(shim()->put_InputStreamOptions(value));
}

template <typename T> byte impl_IDataReader<T>::ReadByte() const
{
	byte value = {};
	check_hresult(shim()->abi_ReadByte(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IDataReader<T>::ReadBuffer(unsigned const length) const
{
	Windows::Storage::Streams::IBuffer buffer;
	check_hresult(shim()->abi_ReadBuffer(length, put(buffer)));
	return buffer;
}

template <typename T> bool impl_IDataReader<T>::ReadBoolean() const
{
	bool value = {};
	check_hresult(shim()->abi_ReadBoolean(put(value)));
	return value;
}

template <typename T> GUID impl_IDataReader<T>::ReadGuid() const
{
	GUID value = {};
	check_hresult(shim()->abi_ReadGuid(&value));
	return value;
}

template <typename T> short impl_IDataReader<T>::ReadInt16() const
{
	short value = {};
	check_hresult(shim()->abi_ReadInt16(&value));
	return value;
}

template <typename T> int impl_IDataReader<T>::ReadInt32() const
{
	int value = {};
	check_hresult(shim()->abi_ReadInt32(&value));
	return value;
}

template <typename T> long long impl_IDataReader<T>::ReadInt64() const
{
	long long value = {};
	check_hresult(shim()->abi_ReadInt64(&value));
	return value;
}

template <typename T> unsigned short impl_IDataReader<T>::ReadUInt16() const
{
	unsigned short value = {};
	check_hresult(shim()->abi_ReadUInt16(&value));
	return value;
}

template <typename T> unsigned impl_IDataReader<T>::ReadUInt32() const
{
	unsigned value = {};
	check_hresult(shim()->abi_ReadUInt32(&value));
	return value;
}

template <typename T> unsigned long long impl_IDataReader<T>::ReadUInt64() const
{
	unsigned long long value = {};
	check_hresult(shim()->abi_ReadUInt64(&value));
	return value;
}

template <typename T> float impl_IDataReader<T>::ReadSingle() const
{
	float value = {};
	check_hresult(shim()->abi_ReadSingle(&value));
	return value;
}

template <typename T> double impl_IDataReader<T>::ReadDouble() const
{
	double value = {};
	check_hresult(shim()->abi_ReadDouble(&value));
	return value;
}

template <typename T> String impl_IDataReader<T>::ReadString(unsigned const codeUnitCount) const
{
	String value;
	check_hresult(shim()->abi_ReadString(codeUnitCount, put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IDataReader<T>::ReadDateTime() const
{
	Windows::Foundation::DateTime value = {};
	check_hresult(shim()->abi_ReadDateTime(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IDataReader<T>::ReadTimeSpan() const
{
	Windows::Foundation::TimeSpan value = {};
	check_hresult(shim()->abi_ReadTimeSpan(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::DataReaderLoadOperation impl_IDataReader<T>::LoadAsync(unsigned const count) const
{
	Windows::Storage::Streams::DataReaderLoadOperation operation = nullptr;
	check_hresult(shim()->abi_LoadAsync(count, put(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IDataReader<T>::DetachBuffer() const
{
	Windows::Storage::Streams::IBuffer buffer;
	check_hresult(shim()->abi_DetachBuffer(put(buffer)));
	return buffer;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IDataReader<T>::DetachStream() const
{
	Windows::Storage::Streams::IInputStream stream;
	check_hresult(shim()->abi_DetachStream(put(stream)));
	return stream;
}

template <typename T> Windows::Storage::Streams::DataReader impl_IDataReaderFactory<T>::CreateDataReader(Windows::Storage::Streams::IInputStream const & inputStream) const
{
	Windows::Storage::Streams::DataReader dataReader = nullptr;
	check_hresult(shim()->abi_CreateDataReader(get(inputStream), put(dataReader)));
	return dataReader;
}

template <typename T> Windows::Storage::Streams::DataReader impl_IDataReaderStatics<T>::FromBuffer(Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Storage::Streams::DataReader dataReader = nullptr;
	check_hresult(shim()->abi_FromBuffer(get(buffer), put(dataReader)));
	return dataReader;
}

template <typename T> unsigned impl_IDataWriter<T>::UnstoredBufferLength() const
{
	unsigned value = {};
	check_hresult(shim()->get_UnstoredBufferLength(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::UnicodeEncoding impl_IDataWriter<T>::UnicodeEncoding() const
{
	Windows::Storage::Streams::UnicodeEncoding value = {};
	check_hresult(shim()->get_UnicodeEncoding(&value));
	return value;
}

template <typename T> void impl_IDataWriter<T>::UnicodeEncoding(Windows::Storage::Streams::UnicodeEncoding const value) const
{
	check_hresult(shim()->put_UnicodeEncoding(value));
}

template <typename T> Windows::Storage::Streams::ByteOrder impl_IDataWriter<T>::ByteOrder() const
{
	Windows::Storage::Streams::ByteOrder value = {};
	check_hresult(shim()->get_ByteOrder(&value));
	return value;
}

template <typename T> void impl_IDataWriter<T>::ByteOrder(Windows::Storage::Streams::ByteOrder const value) const
{
	check_hresult(shim()->put_ByteOrder(value));
}

template <typename T> void impl_IDataWriter<T>::WriteByte(byte const value) const
{
	check_hresult(shim()->abi_WriteByte(value));
}

template <typename T> void impl_IDataWriter<T>::WriteBuffer(Windows::Storage::Streams::IBuffer const & buffer) const
{
	check_hresult(shim()->abi_WriteBuffer(get(buffer)));
}

template <typename T> void impl_IDataWriter<T>::WriteBuffer(Windows::Storage::Streams::IBuffer const & buffer, unsigned const start, unsigned const count) const
{
	check_hresult(shim()->abi_WriteBufferRange(get(buffer), start, count));
}

template <typename T> void impl_IDataWriter<T>::WriteBoolean(bool const value) const
{
	check_hresult(shim()->abi_WriteBoolean(value));
}

template <typename T> void impl_IDataWriter<T>::WriteGuid(GUID const value) const
{
	check_hresult(shim()->abi_WriteGuid(value));
}

template <typename T> void impl_IDataWriter<T>::WriteInt16(short const value) const
{
	check_hresult(shim()->abi_WriteInt16(value));
}

template <typename T> void impl_IDataWriter<T>::WriteInt32(int const value) const
{
	check_hresult(shim()->abi_WriteInt32(value));
}

template <typename T> void impl_IDataWriter<T>::WriteInt64(long long const value) const
{
	check_hresult(shim()->abi_WriteInt64(value));
}

template <typename T> void impl_IDataWriter<T>::WriteUInt16(unsigned short const value) const
{
	check_hresult(shim()->abi_WriteUInt16(value));
}

template <typename T> void impl_IDataWriter<T>::WriteUInt32(unsigned const value) const
{
	check_hresult(shim()->abi_WriteUInt32(value));
}

template <typename T> void impl_IDataWriter<T>::WriteUInt64(unsigned long long const value) const
{
	check_hresult(shim()->abi_WriteUInt64(value));
}

template <typename T> void impl_IDataWriter<T>::WriteSingle(float const value) const
{
	check_hresult(shim()->abi_WriteSingle(value));
}

template <typename T> void impl_IDataWriter<T>::WriteDouble(double const value) const
{
	check_hresult(shim()->abi_WriteDouble(value));
}

template <typename T> void impl_IDataWriter<T>::WriteDateTime(Windows::Foundation::DateTime const & value) const
{
	check_hresult(shim()->abi_WriteDateTime(value));
}

template <typename T> void impl_IDataWriter<T>::WriteTimeSpan(Windows::Foundation::TimeSpan const & value) const
{
	check_hresult(shim()->abi_WriteTimeSpan(value));
}

template <typename T> unsigned impl_IDataWriter<T>::WriteString(StringReference const & value) const
{
	unsigned codeUnitCount = {};
	check_hresult(shim()->abi_WriteString(get(value), &codeUnitCount));
	return codeUnitCount;
}

template <typename T> unsigned impl_IDataWriter<T>::MeasureString(StringReference const & value) const
{
	unsigned codeUnitCount = {};
	check_hresult(shim()->abi_MeasureString(get(value), &codeUnitCount));
	return codeUnitCount;
}

template <typename T> Windows::Storage::Streams::DataWriterStoreOperation impl_IDataWriter<T>::StoreAsync() const
{
	Windows::Storage::Streams::DataWriterStoreOperation operation = nullptr;
	check_hresult(shim()->abi_StoreAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IDataWriter<T>::FlushAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_FlushAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IDataWriter<T>::DetachBuffer() const
{
	Windows::Storage::Streams::IBuffer buffer;
	check_hresult(shim()->abi_DetachBuffer(put(buffer)));
	return buffer;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IDataWriter<T>::DetachStream() const
{
	Windows::Storage::Streams::IOutputStream outputStream;
	check_hresult(shim()->abi_DetachStream(put(outputStream)));
	return outputStream;
}

template <typename T> Windows::Storage::Streams::DataWriter impl_IDataWriterFactory<T>::CreateDataWriter(Windows::Storage::Streams::IOutputStream const & outputStream) const
{
	Windows::Storage::Streams::DataWriter dataWriter = nullptr;
	check_hresult(shim()->abi_CreateDataWriter(get(outputStream), put(dataWriter)));
	return dataWriter;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> impl_IRandomAccessStreamReference<T>::OpenReadAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> operation;
	check_hresult(shim()->abi_OpenReadAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> impl_IRandomAccessStreamStatics<T>::CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> operation;
	check_hresult(shim()->abi_CopyAsync(get(source), get(destination), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> impl_IRandomAccessStreamStatics<T>::CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination, unsigned long long const bytesToCopy) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> operation;
	check_hresult(shim()->abi_CopySizeAsync(get(source), get(destination), bytesToCopy, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> impl_IRandomAccessStreamStatics<T>::CopyAndCloseAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> operation;
	check_hresult(shim()->abi_CopyAndCloseAsync(get(source), get(destination), put(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::Buffer impl_IBufferFactory<T>::Create(unsigned const capacity) const
{
	Windows::Storage::Streams::Buffer value = nullptr;
	check_hresult(shim()->abi_Create(capacity, put(value)));
	return value;
}

template <typename T> unsigned impl_IBuffer<T>::Capacity() const
{
	unsigned value = {};
	check_hresult(shim()->get_Capacity(&value));
	return value;
}

template <typename T> unsigned impl_IBuffer<T>::Length() const
{
	unsigned value = {};
	check_hresult(shim()->get_Length(&value));
	return value;
}

template <typename T> void impl_IBuffer<T>::Length(unsigned const value) const
{
	check_hresult(shim()->put_Length(value));
}

template <typename T> Windows::Storage::Streams::Buffer impl_IBufferStatics<T>::CreateCopyFromMemoryBuffer(Windows::Foundation::IMemoryBuffer const & input) const
{
	Windows::Storage::Streams::Buffer value = nullptr;
	check_hresult(shim()->abi_CreateCopyFromMemoryBuffer(get(input), put(value)));
	return value;
}

template <typename T> Windows::Foundation::MemoryBuffer impl_IBufferStatics<T>::CreateMemoryBufferOverIBuffer(Windows::Storage::Streams::IBuffer const & input) const
{
	Windows::Foundation::MemoryBuffer value = nullptr;
	check_hresult(shim()->abi_CreateMemoryBufferOverIBuffer(get(input), put(value)));
	return value;
}

template <typename T> String impl_IContentTypeProvider<T>::ContentType() const
{
	String value;
	check_hresult(shim()->get_ContentType(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> impl_IInputStreamReference<T>::OpenSequentialReadAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> operation;
	check_hresult(shim()->abi_OpenSequentialReadAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IRandomAccessStreamReferenceStatics<T>::CreateFromFile(Windows::Storage::IStorageFile const & file) const
{
	Windows::Storage::Streams::RandomAccessStreamReference streamReference = nullptr;
	check_hresult(shim()->abi_CreateFromFile(get(file), put(streamReference)));
	return streamReference;
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IRandomAccessStreamReferenceStatics<T>::CreateFromUri(Windows::Foundation::Uri const & uri) const
{
	Windows::Storage::Streams::RandomAccessStreamReference streamReference = nullptr;
	check_hresult(shim()->abi_CreateFromUri(get(uri), put(streamReference)));
	return streamReference;
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IRandomAccessStreamReferenceStatics<T>::CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Storage::Streams::RandomAccessStreamReference streamReference = nullptr;
	check_hresult(shim()->abi_CreateFromStream(get(stream), put(streamReference)));
	return streamReference;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned> impl_IInputStream<T>::ReadAsync(Windows::Storage::Streams::IBuffer const & buffer, unsigned const count, Windows::Storage::Streams::InputStreamOptions const options) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned> operation;
	check_hresult(shim()->abi_ReadAsync(get(buffer), count, options, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> impl_IOutputStream<T>::WriteAsync(Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> operation;
	check_hresult(shim()->abi_WriteAsync(get(buffer), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IOutputStream<T>::FlushAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_FlushAsync(put(operation)));
	return operation;
}

template <typename T> unsigned long long impl_IRandomAccessStream<T>::Size() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_Size(&value));
	return value;
}

template <typename T> void impl_IRandomAccessStream<T>::Size(unsigned long long const value) const
{
	check_hresult(shim()->put_Size(value));
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IRandomAccessStream<T>::GetInputStreamAt(unsigned long long const position) const
{
	Windows::Storage::Streams::IInputStream stream;
	check_hresult(shim()->abi_GetInputStreamAt(position, put(stream)));
	return stream;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IRandomAccessStream<T>::GetOutputStreamAt(unsigned long long const position) const
{
	Windows::Storage::Streams::IOutputStream stream;
	check_hresult(shim()->abi_GetOutputStreamAt(position, put(stream)));
	return stream;
}

template <typename T> unsigned long long impl_IRandomAccessStream<T>::Position() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_Position(&value));
	return value;
}

template <typename T> void impl_IRandomAccessStream<T>::Seek(unsigned long long const position) const
{
	check_hresult(shim()->abi_Seek(position));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_IRandomAccessStream<T>::CloneStream() const
{
	Windows::Storage::Streams::IRandomAccessStream stream;
	check_hresult(shim()->abi_CloneStream(put(stream)));
	return stream;
}

template <typename T> bool impl_IRandomAccessStream<T>::CanRead() const
{
	bool value = {};
	check_hresult(shim()->get_CanRead(put(value)));
	return value;
}

template <typename T> bool impl_IRandomAccessStream<T>::CanWrite() const
{
	bool value = {};
	check_hresult(shim()->get_CanWrite(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace System {

template <typename T> unsigned long long impl_IAppMemoryReport<T>::PrivateCommitUsage() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_PrivateCommitUsage(&value));
	return value;
}

template <typename T> unsigned long long impl_IAppMemoryReport<T>::PeakPrivateCommitUsage() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_PeakPrivateCommitUsage(&value));
	return value;
}

template <typename T> unsigned long long impl_IAppMemoryReport<T>::TotalCommitUsage() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_TotalCommitUsage(&value));
	return value;
}

template <typename T> unsigned long long impl_IAppMemoryReport<T>::TotalCommitLimit() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_TotalCommitLimit(&value));
	return value;
}

template <typename T> unsigned long long impl_IProcessMemoryReport<T>::PrivateWorkingSetUsage() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_PrivateWorkingSetUsage(&value));
	return value;
}

template <typename T> unsigned long long impl_IProcessMemoryReport<T>::TotalWorkingSetUsage() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_TotalWorkingSetUsage(&value));
	return value;
}

template <typename T> unsigned long long impl_IAppMemoryUsageLimitChangingEventArgs<T>::OldLimit() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_OldLimit(&value));
	return value;
}

template <typename T> unsigned long long impl_IAppMemoryUsageLimitChangingEventArgs<T>::NewLimit() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_NewLimit(&value));
	return value;
}

template <typename T> unsigned long long impl_IMemoryManagerStatics<T>::AppMemoryUsage() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_AppMemoryUsage(&value));
	return value;
}

template <typename T> unsigned long long impl_IMemoryManagerStatics<T>::AppMemoryUsageLimit() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_AppMemoryUsageLimit(&value));
	return value;
}

template <typename T> Windows::System::AppMemoryUsageLevel impl_IMemoryManagerStatics<T>::AppMemoryUsageLevel() const
{
	Windows::System::AppMemoryUsageLevel value = {};
	check_hresult(shim()->get_AppMemoryUsageLevel(&value));
	return value;
}

template <typename T> long long impl_IMemoryManagerStatics<T>::AppMemoryUsageIncreased(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_AppMemoryUsageIncreased(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMemoryManagerStatics<T>::AppMemoryUsageIncreased(F handler) const
{
	return AppMemoryUsageIncreased(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IMemoryManagerStatics<T>::AppMemoryUsageIncreased(long long const token) const
{
	check_hresult(shim()->remove_AppMemoryUsageIncreased(token));
}

template <typename T> long long impl_IMemoryManagerStatics<T>::AppMemoryUsageDecreased(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_AppMemoryUsageDecreased(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMemoryManagerStatics<T>::AppMemoryUsageDecreased(F handler) const
{
	return AppMemoryUsageDecreased(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IMemoryManagerStatics<T>::AppMemoryUsageDecreased(long long const token) const
{
	check_hresult(shim()->remove_AppMemoryUsageDecreased(token));
}

template <typename T> long long impl_IMemoryManagerStatics<T>::AppMemoryUsageLimitChanging(Windows::Foundation::IEventHandler<Windows::System::AppMemoryUsageLimitChangingEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_AppMemoryUsageLimitChanging(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMemoryManagerStatics<T>::AppMemoryUsageLimitChanging(F handler) const
{
	return AppMemoryUsageLimitChanging(Windows::Foundation::EventHandler<Windows::System::AppMemoryUsageLimitChangingEventArgs>(handler));
}

template <typename T> void impl_IMemoryManagerStatics<T>::AppMemoryUsageLimitChanging(long long const token) const
{
	check_hresult(shim()->remove_AppMemoryUsageLimitChanging(token));
}

template <typename T> Windows::System::AppMemoryReport impl_IMemoryManagerStatics2<T>::GetAppMemoryReport() const
{
	Windows::System::AppMemoryReport memoryReport = nullptr;
	check_hresult(shim()->abi_GetAppMemoryReport(put(memoryReport)));
	return memoryReport;
}

template <typename T> Windows::System::ProcessMemoryReport impl_IMemoryManagerStatics2<T>::GetProcessMemoryReport() const
{
	Windows::System::ProcessMemoryReport memoryReport = nullptr;
	check_hresult(shim()->abi_GetProcessMemoryReport(put(memoryReport)));
	return memoryReport;
}

template <typename T> bool impl_IMemoryManagerStatics3<T>::TrySetAppMemoryUsageLimit(unsigned long long const value) const
{
	bool result = {};
	check_hresult(shim()->abi_TrySetAppMemoryUsageLimit(value, put(result)));
	return result;
}

template <typename T> void impl_IProtocolForResultsOperation<T>::ReportCompleted(Windows::Foundation::Collections::ValueSet const & data) const
{
	check_hresult(shim()->abi_ReportCompleted(get(data)));
}

template <typename T> String impl_IUser<T>::NonRoamableId() const
{
	String value;
	check_hresult(shim()->get_NonRoamableId(put(value)));
	return value;
}

template <typename T> Windows::System::UserAuthenticationStatus impl_IUser<T>::AuthenticationStatus() const
{
	Windows::System::UserAuthenticationStatus value = {};
	check_hresult(shim()->get_AuthenticationStatus(&value));
	return value;
}

template <typename T> Windows::System::UserType impl_IUser<T>::Type() const
{
	Windows::System::UserType value = {};
	check_hresult(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<IInspectable> impl_IUser<T>::GetPropertyAsync(StringReference const & value) const
{
	Windows::Foundation::IAsyncOperation<IInspectable> operation;
	check_hresult(shim()->abi_GetPropertyAsync(get(value), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IPropertySet> impl_IUser<T>::GetPropertiesAsync(Windows::Foundation::Collections::IVectorView<String> const & values) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IPropertySet> operation;
	check_hresult(shim()->abi_GetPropertiesAsync(get(values), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamReference> impl_IUser<T>::GetPictureAsync(Windows::System::UserPictureSize const desiredSize) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamReference> operation;
	check_hresult(shim()->abi_GetPictureAsync(desiredSize, put(operation)));
	return operation;
}

template <typename T> Windows::System::UserWatcher impl_IUserStatics<T>::CreateWatcher() const
{
	Windows::System::UserWatcher watcher = nullptr;
	check_hresult(shim()->abi_CreateWatcher(put(watcher)));
	return watcher;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> impl_IUserStatics<T>::FindAllAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> operation;
	check_hresult(shim()->abi_FindAllAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> impl_IUserStatics<T>::FindAllAsync(Windows::System::UserType const type) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> operation;
	check_hresult(shim()->abi_FindAllAsyncByType(type, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> impl_IUserStatics<T>::FindAllAsync(Windows::System::UserType const type, Windows::System::UserAuthenticationStatus const status) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> operation;
	check_hresult(shim()->abi_FindAllAsyncByTypeAndStatus(type, status, put(operation)));
	return operation;
}

template <typename T> Windows::System::User impl_IUserStatics<T>::GetFromId(StringReference const & nonRoamableId) const
{
	Windows::System::User value = nullptr;
	check_hresult(shim()->abi_GetFromId(get(nonRoamableId), put(value)));
	return value;
}

template <typename T> Windows::System::UserWatcherStatus impl_IUserWatcher<T>::Status() const
{
	Windows::System::UserWatcherStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> void impl_IUserWatcher<T>::Start() const
{
	check_hresult(shim()->abi_Start());
}

template <typename T> void impl_IUserWatcher<T>::Stop() const
{
	check_hresult(shim()->abi_Stop());
}

template <typename T> long long impl_IUserWatcher<T>::Added(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Added(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IUserWatcher<T>::Added(F handler) const
{
	return Added(Windows::Foundation::TypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs>(handler));
}

template <typename T> void impl_IUserWatcher<T>::Added(long long const token) const
{
	check_hresult(shim()->remove_Added(token));
}

template <typename T> long long impl_IUserWatcher<T>::Removed(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Removed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IUserWatcher<T>::Removed(F handler) const
{
	return Removed(Windows::Foundation::TypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs>(handler));
}

template <typename T> void impl_IUserWatcher<T>::Removed(long long const token) const
{
	check_hresult(shim()->remove_Removed(token));
}

template <typename T> long long impl_IUserWatcher<T>::Updated(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Updated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IUserWatcher<T>::Updated(F handler) const
{
	return Updated(Windows::Foundation::TypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs>(handler));
}

template <typename T> void impl_IUserWatcher<T>::Updated(long long const token) const
{
	check_hresult(shim()->remove_Updated(token));
}

template <typename T> long long impl_IUserWatcher<T>::AuthenticationStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_AuthenticationStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IUserWatcher<T>::AuthenticationStatusChanged(F handler) const
{
	return AuthenticationStatusChanged(Windows::Foundation::TypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs>(handler));
}

template <typename T> void impl_IUserWatcher<T>::AuthenticationStatusChanged(long long const token) const
{
	check_hresult(shim()->remove_AuthenticationStatusChanged(token));
}

template <typename T> long long impl_IUserWatcher<T>::AuthenticationStatusChanging(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, Windows::System::UserAuthenticationStatusChangingEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_AuthenticationStatusChanging(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IUserWatcher<T>::AuthenticationStatusChanging(F handler) const
{
	return AuthenticationStatusChanging(Windows::Foundation::TypedEventHandler<Windows::System::UserWatcher, Windows::System::UserAuthenticationStatusChangingEventArgs>(handler));
}

template <typename T> void impl_IUserWatcher<T>::AuthenticationStatusChanging(long long const token) const
{
	check_hresult(shim()->remove_AuthenticationStatusChanging(token));
}

template <typename T> long long impl_IUserWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_EnumerationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IUserWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::System::UserWatcher, IInspectable>(handler));
}

template <typename T> void impl_IUserWatcher<T>::EnumerationCompleted(long long const token) const
{
	check_hresult(shim()->remove_EnumerationCompleted(token));
}

template <typename T> long long impl_IUserWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IUserWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::System::UserWatcher, IInspectable>(handler));
}

template <typename T> void impl_IUserWatcher<T>::Stopped(long long const token) const
{
	check_hresult(shim()->remove_Stopped(token));
}

template <typename T> Windows::System::User impl_IUserChangedEventArgs<T>::User() const
{
	Windows::System::User value = nullptr;
	check_hresult(shim()->get_User(put(value)));
	return value;
}

template <typename T> void impl_IUserAuthenticationStatusChangeDeferral<T>::Complete() const
{
	check_hresult(shim()->abi_Complete());
}

template <typename T> Windows::System::UserAuthenticationStatusChangeDeferral impl_IUserAuthenticationStatusChangingEventArgs<T>::GetDeferral() const
{
	Windows::System::UserAuthenticationStatusChangeDeferral deferral = nullptr;
	check_hresult(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> Windows::System::User impl_IUserAuthenticationStatusChangingEventArgs<T>::User() const
{
	Windows::System::User value = nullptr;
	check_hresult(shim()->get_User(put(value)));
	return value;
}

template <typename T> Windows::System::UserAuthenticationStatus impl_IUserAuthenticationStatusChangingEventArgs<T>::NewStatus() const
{
	Windows::System::UserAuthenticationStatus value = {};
	check_hresult(shim()->get_NewStatus(&value));
	return value;
}

template <typename T> Windows::System::UserAuthenticationStatus impl_IUserAuthenticationStatusChangingEventArgs<T>::CurrentStatus() const
{
	Windows::System::UserAuthenticationStatus value = {};
	check_hresult(shim()->get_CurrentStatus(&value));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::DisplayName() const
{
	String value;
	check_hresult(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::FirstName() const
{
	String value;
	check_hresult(shim()->get_FirstName(put(value)));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::LastName() const
{
	String value;
	check_hresult(shim()->get_LastName(put(value)));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::ProviderName() const
{
	String value;
	check_hresult(shim()->get_ProviderName(put(value)));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::AccountName() const
{
	String value;
	check_hresult(shim()->get_AccountName(put(value)));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::GuestHost() const
{
	String value;
	check_hresult(shim()->get_GuestHost(put(value)));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::PrincipalName() const
{
	String value;
	check_hresult(shim()->get_PrincipalName(put(value)));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::DomainName() const
{
	String value;
	check_hresult(shim()->get_DomainName(put(value)));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::SessionInitiationProtocolUri() const
{
	String value;
	check_hresult(shim()->get_SessionInitiationProtocolUri(put(value)));
	return value;
}

template <typename T> Windows::System::LaunchUriStatus impl_ILaunchUriResult<T>::Status() const
{
	Windows::System::LaunchUriStatus value = {};
	check_hresult(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_ILaunchUriResult<T>::Result() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check_hresult(shim()->get_Result(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::Point> impl_ILauncherUIOptions<T>::InvocationPoint() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::Point> value;
	check_hresult(shim()->get_InvocationPoint(put(value)));
	return value;
}

template <typename T> void impl_ILauncherUIOptions<T>::InvocationPoint(Windows::Foundation::IReference<winrt::Windows::Foundation::Point> const & value) const
{
	check_hresult(shim()->put_InvocationPoint(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::Rect> impl_ILauncherUIOptions<T>::SelectionRect() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::Rect> value;
	check_hresult(shim()->get_SelectionRect(put(value)));
	return value;
}

template <typename T> void impl_ILauncherUIOptions<T>::SelectionRect(Windows::Foundation::IReference<winrt::Windows::Foundation::Rect> const & value) const
{
	check_hresult(shim()->put_SelectionRect(get(value)));
}

template <typename T> Windows::UI::Popups::Placement impl_ILauncherUIOptions<T>::PreferredPlacement() const
{
	Windows::UI::Popups::Placement value = {};
	check_hresult(shim()->get_PreferredPlacement(&value));
	return value;
}

template <typename T> void impl_ILauncherUIOptions<T>::PreferredPlacement(Windows::UI::Popups::Placement const value) const
{
	check_hresult(shim()->put_PreferredPlacement(value));
}

template <typename T> bool impl_ILauncherOptions<T>::TreatAsUntrusted() const
{
	bool value = {};
	check_hresult(shim()->get_TreatAsUntrusted(put(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::TreatAsUntrusted(bool const value) const
{
	check_hresult(shim()->put_TreatAsUntrusted(value));
}

template <typename T> bool impl_ILauncherOptions<T>::DisplayApplicationPicker() const
{
	bool value = {};
	check_hresult(shim()->get_DisplayApplicationPicker(put(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::DisplayApplicationPicker(bool const value) const
{
	check_hresult(shim()->put_DisplayApplicationPicker(value));
}

template <typename T> Windows::System::LauncherUIOptions impl_ILauncherOptions<T>::UI() const
{
	Windows::System::LauncherUIOptions value = nullptr;
	check_hresult(shim()->get_UI(put(value)));
	return value;
}

template <typename T> String impl_ILauncherOptions<T>::PreferredApplicationPackageFamilyName() const
{
	String value;
	check_hresult(shim()->get_PreferredApplicationPackageFamilyName(put(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::PreferredApplicationPackageFamilyName(StringReference const & value) const
{
	check_hresult(shim()->put_PreferredApplicationPackageFamilyName(get(value)));
}

template <typename T> String impl_ILauncherOptions<T>::PreferredApplicationDisplayName() const
{
	String value;
	check_hresult(shim()->get_PreferredApplicationDisplayName(put(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::PreferredApplicationDisplayName(StringReference const & value) const
{
	check_hresult(shim()->put_PreferredApplicationDisplayName(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ILauncherOptions<T>::FallbackUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_FallbackUri(put(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::FallbackUri(Windows::Foundation::Uri const & value) const
{
	check_hresult(shim()->put_FallbackUri(get(value)));
}

template <typename T> String impl_ILauncherOptions<T>::ContentType() const
{
	String value;
	check_hresult(shim()->get_ContentType(put(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::ContentType(StringReference const & value) const
{
	check_hresult(shim()->put_ContentType(get(value)));
}

template <typename T> String impl_ILauncherOptions2<T>::TargetApplicationPackageFamilyName() const
{
	String value;
	check_hresult(shim()->get_TargetApplicationPackageFamilyName(put(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions2<T>::TargetApplicationPackageFamilyName(StringReference const & value) const
{
	check_hresult(shim()->put_TargetApplicationPackageFamilyName(get(value)));
}

template <typename T> Windows::Storage::Search::StorageFileQueryResult impl_ILauncherOptions2<T>::NeighboringFilesQuery() const
{
	Windows::Storage::Search::StorageFileQueryResult value = nullptr;
	check_hresult(shim()->get_NeighboringFilesQuery(put(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions2<T>::NeighboringFilesQuery(Windows::Storage::Search::StorageFileQueryResult const & value) const
{
	check_hresult(shim()->put_NeighboringFilesQuery(get(value)));
}

template <typename T> Windows::UI::ViewManagement::ViewSizePreference impl_ILauncherViewOptions<T>::DesiredRemainingView() const
{
	Windows::UI::ViewManagement::ViewSizePreference value = {};
	check_hresult(shim()->get_DesiredRemainingView(&value));
	return value;
}

template <typename T> void impl_ILauncherViewOptions<T>::DesiredRemainingView(Windows::UI::ViewManagement::ViewSizePreference const value) const
{
	check_hresult(shim()->put_DesiredRemainingView(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Storage::IStorageItem> impl_IFolderLauncherOptions<T>::ItemsToSelect() const
{
	Windows::Foundation::Collections::IVector<Windows::Storage::IStorageItem> value;
	check_hresult(shim()->get_ItemsToSelect(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics<T>::LaunchFileAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_LaunchFileAsync(get(file), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics<T>::LaunchFileAsync(Windows::Storage::IStorageFile const & file, Windows::System::LauncherOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_LaunchFileWithOptionsAsync(get(file), get(options), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics<T>::LaunchUriAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_LaunchUriAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics<T>::LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_LaunchUriWithOptionsAsync(get(uri), get(options), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::System::LaunchUriResult> impl_ILauncherStatics2<T>::LaunchUriForResultsAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<Windows::System::LaunchUriResult> operation;
	check_hresult(shim()->abi_LaunchUriForResultsAsync(get(uri), get(options), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::System::LaunchUriResult> impl_ILauncherStatics2<T>::LaunchUriForResultsAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options, Windows::Foundation::Collections::ValueSet const & inputData) const
{
	Windows::Foundation::IAsyncOperation<Windows::System::LaunchUriResult> operation;
	check_hresult(shim()->abi_LaunchUriForResultsWithDataAsync(get(uri), get(options), get(inputData), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics2<T>::LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options, Windows::Foundation::Collections::ValueSet const & inputData) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_LaunchUriWithDataAsync(get(uri), get(options), get(inputData), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> impl_ILauncherStatics2<T>::QueryUriSupportAsync(Windows::Foundation::Uri const & uri, Windows::System::LaunchQuerySupportType const launchQuerySupportType) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> operation;
	check_hresult(shim()->abi_QueryUriSupportAsync(get(uri), launchQuerySupportType, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> impl_ILauncherStatics2<T>::QueryUriSupportAsync(Windows::Foundation::Uri const & uri, Windows::System::LaunchQuerySupportType const launchQuerySupportType, StringReference const & packageFamilyName) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> operation;
	check_hresult(shim()->abi_QueryUriSupportWithPackageFamilyNameAsync(get(uri), launchQuerySupportType, get(packageFamilyName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> impl_ILauncherStatics2<T>::QueryFileSupportAsync(Windows::Storage::StorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> operation;
	check_hresult(shim()->abi_QueryFileSupportAsync(get(file), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> impl_ILauncherStatics2<T>::QueryFileSupportAsync(Windows::Storage::StorageFile const & file, StringReference const & packageFamilyName) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> operation;
	check_hresult(shim()->abi_QueryFileSupportWithPackageFamilyNameAsync(get(file), get(packageFamilyName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> impl_ILauncherStatics2<T>::FindUriSchemeHandlersAsync(StringReference const & scheme) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> operation;
	check_hresult(shim()->abi_FindUriSchemeHandlersAsync(get(scheme), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> impl_ILauncherStatics2<T>::FindUriSchemeHandlersAsync(StringReference const & scheme, Windows::System::LaunchQuerySupportType const launchQuerySupportType) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> operation;
	check_hresult(shim()->abi_FindUriSchemeHandlersWithLaunchUriTypeAsync(get(scheme), launchQuerySupportType, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> impl_ILauncherStatics2<T>::FindFileHandlersAsync(StringReference const & extension) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> operation;
	check_hresult(shim()->abi_FindFileHandlersAsync(get(extension), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics3<T>::LaunchFolderAsync(Windows::Storage::IStorageFolder const & folder) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_LaunchFolderAsync(get(folder), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics3<T>::LaunchFolderAsync(Windows::Storage::IStorageFolder const & folder, Windows::System::FolderLauncherOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_LaunchFolderWithOptionsAsync(get(folder), get(options), put(operation)));
	return operation;
}

}}}

namespace winrt { namespace Windows { namespace UI {

template <typename T> Windows::UI::Color impl_IColorHelperStatics<T>::FromArgb(byte const a, byte const r, byte const g, byte const b) const
{
	Windows::UI::Color returnValue = {};
	check_hresult(shim()->abi_FromArgb(a, r, g, b, &returnValue));
	return returnValue;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::AliceBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_AliceBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::AntiqueWhite() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_AntiqueWhite(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Aqua() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Aqua(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Aquamarine() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Aquamarine(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Azure() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Azure(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Beige() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Beige(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Bisque() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Bisque(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Black() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Black(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::BlanchedAlmond() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_BlanchedAlmond(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Blue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Blue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::BlueViolet() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_BlueViolet(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Brown() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Brown(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::BurlyWood() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_BurlyWood(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::CadetBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_CadetBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Chartreuse() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Chartreuse(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Chocolate() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Chocolate(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Coral() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Coral(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::CornflowerBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_CornflowerBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Cornsilk() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Cornsilk(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Crimson() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Crimson(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Cyan() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Cyan(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkCyan() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkCyan(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkGoldenrod() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkGoldenrod(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkGray() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkGreen() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkKhaki() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkKhaki(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkMagenta() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkMagenta(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkOliveGreen() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkOliveGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkOrange() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkOrange(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkOrchid() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkOrchid(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkRed() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkRed(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkSalmon() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkSalmon(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkSeaGreen() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkSeaGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkSlateBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkSlateBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkSlateGray() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkSlateGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkTurquoise() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkTurquoise(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkViolet() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DarkViolet(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DeepPink() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DeepPink(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DeepSkyBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DeepSkyBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DimGray() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DimGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DodgerBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_DodgerBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Firebrick() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Firebrick(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::FloralWhite() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_FloralWhite(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::ForestGreen() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_ForestGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Fuchsia() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Fuchsia(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Gainsboro() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Gainsboro(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::GhostWhite() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_GhostWhite(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Gold() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Gold(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Goldenrod() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Goldenrod(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Gray() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Gray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Green() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Green(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::GreenYellow() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_GreenYellow(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Honeydew() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Honeydew(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::HotPink() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_HotPink(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::IndianRed() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_IndianRed(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Indigo() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Indigo(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Ivory() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Ivory(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Khaki() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Khaki(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Lavender() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Lavender(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LavenderBlush() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LavenderBlush(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LawnGreen() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LawnGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LemonChiffon() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LemonChiffon(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LightBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightCoral() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LightCoral(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightCyan() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LightCyan(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightGoldenrodYellow() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LightGoldenrodYellow(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightGreen() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LightGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightGray() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LightGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightPink() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LightPink(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightSalmon() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LightSalmon(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightSeaGreen() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LightSeaGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightSkyBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LightSkyBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightSlateGray() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LightSlateGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightSteelBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LightSteelBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightYellow() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LightYellow(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Lime() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Lime(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LimeGreen() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_LimeGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Linen() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Linen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Magenta() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Magenta(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Maroon() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Maroon(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumAquamarine() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_MediumAquamarine(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_MediumBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumOrchid() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_MediumOrchid(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumPurple() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_MediumPurple(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumSeaGreen() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_MediumSeaGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumSlateBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_MediumSlateBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumSpringGreen() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_MediumSpringGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumTurquoise() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_MediumTurquoise(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumVioletRed() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_MediumVioletRed(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MidnightBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_MidnightBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MintCream() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_MintCream(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MistyRose() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_MistyRose(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Moccasin() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Moccasin(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::NavajoWhite() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_NavajoWhite(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Navy() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Navy(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::OldLace() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_OldLace(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Olive() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Olive(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::OliveDrab() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_OliveDrab(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Orange() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Orange(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::OrangeRed() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_OrangeRed(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Orchid() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Orchid(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PaleGoldenrod() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_PaleGoldenrod(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PaleGreen() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_PaleGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PaleTurquoise() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_PaleTurquoise(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PaleVioletRed() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_PaleVioletRed(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PapayaWhip() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_PapayaWhip(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PeachPuff() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_PeachPuff(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Peru() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Peru(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Pink() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Pink(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Plum() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Plum(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PowderBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_PowderBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Purple() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Purple(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Red() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Red(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::RosyBrown() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_RosyBrown(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::RoyalBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_RoyalBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SaddleBrown() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_SaddleBrown(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Salmon() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Salmon(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SandyBrown() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_SandyBrown(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SeaGreen() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_SeaGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SeaShell() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_SeaShell(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Sienna() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Sienna(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Silver() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Silver(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SkyBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_SkyBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SlateBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_SlateBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SlateGray() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_SlateGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Snow() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Snow(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SpringGreen() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_SpringGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SteelBlue() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_SteelBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Tan() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Tan(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Teal() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Teal(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Thistle() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Thistle(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Tomato() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Tomato(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Transparent() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Transparent(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Turquoise() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Turquoise(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Violet() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Violet(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Wheat() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Wheat(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::White() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_White(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::WhiteSmoke() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_WhiteSmoke(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Yellow() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Yellow(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::YellowGreen() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_YellowGreen(&value));
	return value;
}

}}}

namespace winrt { namespace Windows { namespace UI { namespace Core {

template <typename T> void impl_IDispatchedHandler<T>::Invoke() const
{
	check_hresult(shim()->abi_Invoke());
}

template <typename T> void impl_IIdleDispatchedHandler<T>::Invoke(Windows::UI::Core::IdleDispatchedHandlerArgs const & e) const
{
	check_hresult(shim()->abi_Invoke(get(e)));
}

template <typename T> bool impl_ICoreWindowEventArgs<T>::Handled() const
{
	bool value = {};
	check_hresult(shim()->get_Handled(put(value)));
	return value;
}

template <typename T> void impl_ICoreWindowEventArgs<T>::Handled(bool const value) const
{
	check_hresult(shim()->put_Handled(value));
}

template <typename T> IInspectable impl_IAutomationProviderRequestedEventArgs<T>::AutomationProvider() const
{
	IInspectable value;
	check_hresult(shim()->get_AutomationProvider(put(value)));
	return value;
}

template <typename T> void impl_IAutomationProviderRequestedEventArgs<T>::AutomationProvider(IInspectable const & value) const
{
	check_hresult(shim()->put_AutomationProvider(get(value)));
}

template <typename T> unsigned impl_ICharacterReceivedEventArgs<T>::KeyCode() const
{
	unsigned value = {};
	check_hresult(shim()->get_KeyCode(&value));
	return value;
}

template <typename T> Windows::UI::Core::CorePhysicalKeyStatus impl_ICharacterReceivedEventArgs<T>::KeyStatus() const
{
	Windows::UI::Core::CorePhysicalKeyStatus value = {};
	check_hresult(shim()->get_KeyStatus(&value));
	return value;
}

template <typename T> bool impl_IInputEnabledEventArgs<T>::InputEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_InputEnabled(put(value)));
	return value;
}

template <typename T> Windows::System::VirtualKey impl_IKeyEventArgs<T>::VirtualKey() const
{
	Windows::System::VirtualKey value = {};
	check_hresult(shim()->get_VirtualKey(&value));
	return value;
}

template <typename T> Windows::UI::Core::CorePhysicalKeyStatus impl_IKeyEventArgs<T>::KeyStatus() const
{
	Windows::UI::Core::CorePhysicalKeyStatus value = {};
	check_hresult(shim()->get_KeyStatus(&value));
	return value;
}

template <typename T> Windows::UI::Input::PointerPoint impl_IPointerEventArgs<T>::CurrentPoint() const
{
	Windows::UI::Input::PointerPoint value = nullptr;
	check_hresult(shim()->get_CurrentPoint(put(value)));
	return value;
}

template <typename T> Windows::System::VirtualKeyModifiers impl_IPointerEventArgs<T>::KeyModifiers() const
{
	Windows::System::VirtualKeyModifiers value = {};
	check_hresult(shim()->get_KeyModifiers(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> impl_IPointerEventArgs<T>::GetIntermediatePoints() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> value;
	check_hresult(shim()->abi_GetIntermediatePoints(put(value)));
	return value;
}

template <typename T> Windows::UI::Core::CoreProximityEvaluation impl_ITouchHitTestingEventArgs<T>::ProximityEvaluation() const
{
	Windows::UI::Core::CoreProximityEvaluation value = {};
	check_hresult(shim()->get_ProximityEvaluation(&value));
	return value;
}

template <typename T> void impl_ITouchHitTestingEventArgs<T>::ProximityEvaluation(Windows::UI::Core::CoreProximityEvaluation const & value) const
{
	check_hresult(shim()->put_ProximityEvaluation(value));
}

template <typename T> Windows::Foundation::Point impl_ITouchHitTestingEventArgs<T>::Point() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_Point(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_ITouchHitTestingEventArgs<T>::BoundingBox() const
{
	Windows::Foundation::Rect value = {};
	check_hresult(shim()->get_BoundingBox(&value));
	return value;
}

template <typename T> Windows::UI::Core::CoreProximityEvaluation impl_ITouchHitTestingEventArgs<T>::EvaluateProximity(Windows::Foundation::Rect const & controlBoundingBox) const
{
	Windows::UI::Core::CoreProximityEvaluation proximityEvaluation = {};
	check_hresult(shim()->abi_EvaluateProximityToRect(controlBoundingBox, &proximityEvaluation));
	return proximityEvaluation;
}

template <typename T> Windows::UI::Core::CoreWindowActivationState impl_IWindowActivatedEventArgs<T>::WindowActivationState() const
{
	Windows::UI::Core::CoreWindowActivationState value = {};
	check_hresult(shim()->get_WindowActivationState(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IWindowSizeChangedEventArgs<T>::Size() const
{
	Windows::Foundation::Size value = {};
	check_hresult(shim()->get_Size(&value));
	return value;
}

template <typename T> bool impl_IVisibilityChangedEventArgs<T>::Visible() const
{
	bool value = {};
	check_hresult(shim()->get_Visible(put(value)));
	return value;
}

template <typename T> IInspectable impl_ICoreWindow<T>::AutomationHostProvider() const
{
	IInspectable value;
	check_hresult(shim()->get_AutomationHostProvider(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_ICoreWindow<T>::Bounds() const
{
	Windows::Foundation::Rect value = {};
	check_hresult(shim()->get_Bounds(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_ICoreWindow<T>::CustomProperties() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check_hresult(shim()->get_CustomProperties(put(value)));
	return value;
}

template <typename T> Windows::UI::Core::CoreDispatcher impl_ICoreWindow<T>::Dispatcher() const
{
	Windows::UI::Core::CoreDispatcher value = nullptr;
	check_hresult(shim()->get_Dispatcher(put(value)));
	return value;
}

template <typename T> Windows::UI::Core::CoreWindowFlowDirection impl_ICoreWindow<T>::FlowDirection() const
{
	Windows::UI::Core::CoreWindowFlowDirection value = {};
	check_hresult(shim()->get_FlowDirection(&value));
	return value;
}

template <typename T> void impl_ICoreWindow<T>::FlowDirection(Windows::UI::Core::CoreWindowFlowDirection const value) const
{
	check_hresult(shim()->put_FlowDirection(value));
}

template <typename T> bool impl_ICoreWindow<T>::IsInputEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_IsInputEnabled(put(value)));
	return value;
}

template <typename T> void impl_ICoreWindow<T>::IsInputEnabled(bool const value) const
{
	check_hresult(shim()->put_IsInputEnabled(value));
}

template <typename T> Windows::UI::Core::CoreCursor impl_ICoreWindow<T>::PointerCursor() const
{
	Windows::UI::Core::CoreCursor value = nullptr;
	check_hresult(shim()->get_PointerCursor(put(value)));
	return value;
}

template <typename T> void impl_ICoreWindow<T>::PointerCursor(Windows::UI::Core::CoreCursor const & value) const
{
	check_hresult(shim()->put_PointerCursor(get(value)));
}

template <typename T> Windows::Foundation::Point impl_ICoreWindow<T>::PointerPosition() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_PointerPosition(&value));
	return value;
}

template <typename T> bool impl_ICoreWindow<T>::Visible() const
{
	bool value = {};
	check_hresult(shim()->get_Visible(put(value)));
	return value;
}

template <typename T> void impl_ICoreWindow<T>::Activate() const
{
	check_hresult(shim()->abi_Activate());
}

template <typename T> void impl_ICoreWindow<T>::Close() const
{
	check_hresult(shim()->abi_Close());
}

template <typename T> Windows::UI::Core::CoreVirtualKeyStates impl_ICoreWindow<T>::GetAsyncKeyState(Windows::System::VirtualKey const virtualKey) const
{
	Windows::UI::Core::CoreVirtualKeyStates KeyState = {};
	check_hresult(shim()->abi_GetAsyncKeyState(virtualKey, &KeyState));
	return KeyState;
}

template <typename T> Windows::UI::Core::CoreVirtualKeyStates impl_ICoreWindow<T>::GetKeyState(Windows::System::VirtualKey const virtualKey) const
{
	Windows::UI::Core::CoreVirtualKeyStates KeyState = {};
	check_hresult(shim()->abi_GetKeyState(virtualKey, &KeyState));
	return KeyState;
}

template <typename T> void impl_ICoreWindow<T>::ReleasePointerCapture() const
{
	check_hresult(shim()->abi_ReleasePointerCapture());
}

template <typename T> void impl_ICoreWindow<T>::SetPointerCapture() const
{
	check_hresult(shim()->abi_SetPointerCapture());
}

template <typename T> long long impl_ICoreWindow<T>::Activated(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowActivatedEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_Activated(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::Activated(F handler) const
{
	return Activated(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowActivatedEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::Activated(long long const cookie) const
{
	check_hresult(shim()->remove_Activated(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::AutomationProviderRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::AutomationProviderRequestedEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_AutomationProviderRequested(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::AutomationProviderRequested(F handler) const
{
	return AutomationProviderRequested(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::AutomationProviderRequestedEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::AutomationProviderRequested(long long const cookie) const
{
	check_hresult(shim()->remove_AutomationProviderRequested(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::CharacterReceived(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CharacterReceivedEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_CharacterReceived(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::CharacterReceived(F handler) const
{
	return CharacterReceived(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CharacterReceivedEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::CharacterReceived(long long const cookie) const
{
	check_hresult(shim()->remove_CharacterReceived(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::Closed(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_Closed(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::Closed(F handler) const
{
	return Closed(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::Closed(long long const cookie) const
{
	check_hresult(shim()->remove_Closed(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::InputEnabled(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::InputEnabledEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_InputEnabled(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::InputEnabled(F handler) const
{
	return InputEnabled(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::InputEnabledEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::InputEnabled(long long const cookie) const
{
	check_hresult(shim()->remove_InputEnabled(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::KeyDown(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_KeyDown(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::KeyDown(F handler) const
{
	return KeyDown(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::KeyDown(long long const cookie) const
{
	check_hresult(shim()->remove_KeyDown(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::KeyUp(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_KeyUp(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::KeyUp(F handler) const
{
	return KeyUp(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::KeyUp(long long const cookie) const
{
	check_hresult(shim()->remove_KeyUp(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::PointerCaptureLost(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerCaptureLost(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::PointerCaptureLost(F handler) const
{
	return PointerCaptureLost(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerCaptureLost(long long const cookie) const
{
	check_hresult(shim()->remove_PointerCaptureLost(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::PointerEntered(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerEntered(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::PointerEntered(F handler) const
{
	return PointerEntered(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerEntered(long long const cookie) const
{
	check_hresult(shim()->remove_PointerEntered(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::PointerExited(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerExited(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::PointerExited(F handler) const
{
	return PointerExited(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerExited(long long const cookie) const
{
	check_hresult(shim()->remove_PointerExited(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::PointerMoved(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerMoved(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::PointerMoved(F handler) const
{
	return PointerMoved(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerMoved(long long const cookie) const
{
	check_hresult(shim()->remove_PointerMoved(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::PointerPressed(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::PointerPressed(F handler) const
{
	return PointerPressed(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerPressed(long long const cookie) const
{
	check_hresult(shim()->remove_PointerPressed(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::PointerReleased(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerReleased(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::PointerReleased(F handler) const
{
	return PointerReleased(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerReleased(long long const cookie) const
{
	check_hresult(shim()->remove_PointerReleased(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::TouchHitTesting(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::TouchHitTestingEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_TouchHitTesting(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::TouchHitTesting(F handler) const
{
	return TouchHitTesting(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::TouchHitTestingEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::TouchHitTesting(long long const cookie) const
{
	check_hresult(shim()->remove_TouchHitTesting(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::PointerWheelChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerWheelChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::PointerWheelChanged(F handler) const
{
	return PointerWheelChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerWheelChanged(long long const cookie) const
{
	check_hresult(shim()->remove_PointerWheelChanged(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::SizeChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowSizeChangedEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_SizeChanged(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::SizeChanged(F handler) const
{
	return SizeChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowSizeChangedEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::SizeChanged(long long const cookie) const
{
	check_hresult(shim()->remove_SizeChanged(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::VisibilityChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::VisibilityChangedEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_VisibilityChanged(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::VisibilityChanged(F handler) const
{
	return VisibilityChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::VisibilityChangedEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::VisibilityChanged(long long const cookie) const
{
	check_hresult(shim()->remove_VisibilityChanged(cookie));
}

template <typename T> void impl_ICoreWindow2<T>::PointerPosition(Windows::Foundation::Point const & value) const
{
	check_hresult(shim()->put_PointerPosition(value));
}

template <typename T> Windows::UI::Core::CoreWindow impl_ICoreWindowStatic<T>::GetForCurrentThread() const
{
	Windows::UI::Core::CoreWindow ppWindow = nullptr;
	check_hresult(shim()->abi_GetForCurrentThread(put(ppWindow)));
	return ppWindow;
}

template <typename T> Windows::UI::Core::CoreAcceleratorKeyEventType impl_IAcceleratorKeyEventArgs<T>::EventType() const
{
	Windows::UI::Core::CoreAcceleratorKeyEventType value = {};
	check_hresult(shim()->get_EventType(&value));
	return value;
}

template <typename T> Windows::System::VirtualKey impl_IAcceleratorKeyEventArgs<T>::VirtualKey() const
{
	Windows::System::VirtualKey value = {};
	check_hresult(shim()->get_VirtualKey(&value));
	return value;
}

template <typename T> Windows::UI::Core::CorePhysicalKeyStatus impl_IAcceleratorKeyEventArgs<T>::KeyStatus() const
{
	Windows::UI::Core::CorePhysicalKeyStatus value = {};
	check_hresult(shim()->get_KeyStatus(&value));
	return value;
}

template <typename T> long long impl_ICoreAcceleratorKeys<T>::AcceleratorKeyActivated(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreDispatcher, Windows::UI::Core::AcceleratorKeyEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_AcceleratorKeyActivated(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreAcceleratorKeys<T>::AcceleratorKeyActivated(F handler) const
{
	return AcceleratorKeyActivated(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreDispatcher, Windows::UI::Core::AcceleratorKeyEventArgs>(handler));
}

template <typename T> void impl_ICoreAcceleratorKeys<T>::AcceleratorKeyActivated(long long const cookie) const
{
	check_hresult(shim()->remove_AcceleratorKeyActivated(cookie));
}

template <typename T> bool impl_ICoreDispatcher<T>::HasThreadAccess() const
{
	bool value = {};
	check_hresult(shim()->get_HasThreadAccess(put(value)));
	return value;
}

template <typename T> void impl_ICoreDispatcher<T>::ProcessEvents(Windows::UI::Core::CoreProcessEventsOption const options) const
{
	check_hresult(shim()->abi_ProcessEvents(options));
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICoreDispatcher<T>::RunAsync(Windows::UI::Core::CoreDispatcherPriority const priority, Windows::UI::Core::IDispatchedHandler const & agileCallback) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check_hresult(shim()->abi_RunAsync(priority, get(agileCallback), put(asyncAction)));
	return asyncAction;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncAction impl_ICoreDispatcher<T>::RunAsync(Windows::UI::Core::CoreDispatcherPriority const priority, F agileCallback) const
{
	return RunAsync(priority, Windows::UI::Core::DispatchedHandler(agileCallback));
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICoreDispatcher<T>::RunIdleAsync(Windows::UI::Core::IIdleDispatchedHandler const & agileCallback) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check_hresult(shim()->abi_RunIdleAsync(get(agileCallback), put(asyncAction)));
	return asyncAction;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncAction impl_ICoreDispatcher<T>::RunIdleAsync(F agileCallback) const
{
	return RunIdleAsync(Windows::UI::Core::IdleDispatchedHandler(agileCallback));
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ICoreDispatcher2<T>::TryRunAsync(Windows::UI::Core::CoreDispatcherPriority const priority, Windows::UI::Core::IDispatchedHandler const & agileCallback) const
{
	Windows::Foundation::IAsyncOperation<bool> asyncOperation;
	check_hresult(shim()->abi_TryRunAsync(priority, get(agileCallback), put(asyncOperation)));
	return asyncOperation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncOperation<bool> impl_ICoreDispatcher2<T>::TryRunAsync(Windows::UI::Core::CoreDispatcherPriority const priority, F agileCallback) const
{
	return TryRunAsync(priority, Windows::UI::Core::DispatchedHandler(agileCallback));
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ICoreDispatcher2<T>::TryRunIdleAsync(Windows::UI::Core::IIdleDispatchedHandler const & agileCallback) const
{
	Windows::Foundation::IAsyncOperation<bool> asyncOperation;
	check_hresult(shim()->abi_TryRunIdleAsync(get(agileCallback), put(asyncOperation)));
	return asyncOperation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncOperation<bool> impl_ICoreDispatcher2<T>::TryRunIdleAsync(F agileCallback) const
{
	return TryRunIdleAsync(Windows::UI::Core::IdleDispatchedHandler(agileCallback));
}

template <typename T> Windows::UI::Core::CoreDispatcherPriority impl_ICoreDispatcherWithTaskPriority<T>::CurrentPriority() const
{
	Windows::UI::Core::CoreDispatcherPriority value = {};
	check_hresult(shim()->get_CurrentPriority(&value));
	return value;
}

template <typename T> void impl_ICoreDispatcherWithTaskPriority<T>::CurrentPriority(Windows::UI::Core::CoreDispatcherPriority const value) const
{
	check_hresult(shim()->put_CurrentPriority(value));
}

template <typename T> bool impl_ICoreDispatcherWithTaskPriority<T>::ShouldYield() const
{
	bool value = {};
	check_hresult(shim()->abi_ShouldYield(put(value)));
	return value;
}

template <typename T> bool impl_ICoreDispatcherWithTaskPriority<T>::ShouldYield(Windows::UI::Core::CoreDispatcherPriority const priority) const
{
	bool value = {};
	check_hresult(shim()->abi_ShouldYieldToPriority(priority, put(value)));
	return value;
}

template <typename T> void impl_ICoreDispatcherWithTaskPriority<T>::StopProcessEvents() const
{
	check_hresult(shim()->abi_StopProcessEvents());
}

template <typename T> bool impl_IIdleDispatchedHandlerArgs<T>::IsDispatcherIdle() const
{
	bool value = {};
	check_hresult(shim()->get_IsDispatcherIdle(put(value)));
	return value;
}

template <typename T> unsigned impl_ICoreCursor<T>::Id() const
{
	unsigned value = {};
	check_hresult(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::UI::Core::CoreCursorType impl_ICoreCursor<T>::Type() const
{
	Windows::UI::Core::CoreCursorType value = {};
	check_hresult(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::UI::Core::CoreCursor impl_ICoreCursorFactory<T>::CreateCursor(Windows::UI::Core::CoreCursorType const type, unsigned const id) const
{
	Windows::UI::Core::CoreCursor cursor = nullptr;
	check_hresult(shim()->abi_CreateCursor(type, id, put(cursor)));
	return cursor;
}

template <typename T> void impl_IInitializeWithCoreWindow<T>::Initialize(Windows::UI::Core::CoreWindow const & window) const
{
	check_hresult(shim()->abi_Initialize(get(window)));
}

template <typename T> void impl_ICoreWindowResizeManager<T>::NotifyLayoutCompleted() const
{
	check_hresult(shim()->abi_NotifyLayoutCompleted());
}

template <typename T> void impl_ICoreWindowResizeManagerLayoutCapability<T>::ShouldWaitForLayoutCompletion(bool const value) const
{
	check_hresult(shim()->put_ShouldWaitForLayoutCompletion(value));
}

template <typename T> bool impl_ICoreWindowResizeManagerLayoutCapability<T>::ShouldWaitForLayoutCompletion() const
{
	bool value = {};
	check_hresult(shim()->get_ShouldWaitForLayoutCompletion(put(value)));
	return value;
}

template <typename T> Windows::UI::Core::CoreWindowResizeManager impl_ICoreWindowResizeManagerStatics<T>::GetForCurrentView() const
{
	Windows::UI::Core::CoreWindowResizeManager CoreWindowResizeManager = nullptr;
	check_hresult(shim()->abi_GetForCurrentView(put(CoreWindowResizeManager)));
	return CoreWindowResizeManager;
}

template <typename T> Windows::UI::Core::CoreDispatcher impl_ICoreInputSourceBase<T>::Dispatcher() const
{
	Windows::UI::Core::CoreDispatcher value = nullptr;
	check_hresult(shim()->get_Dispatcher(put(value)));
	return value;
}

template <typename T> bool impl_ICoreInputSourceBase<T>::IsInputEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_IsInputEnabled(put(value)));
	return value;
}

template <typename T> void impl_ICoreInputSourceBase<T>::IsInputEnabled(bool const value) const
{
	check_hresult(shim()->put_IsInputEnabled(value));
}

template <typename T> long long impl_ICoreInputSourceBase<T>::InputEnabled(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::InputEnabledEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_InputEnabled(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreInputSourceBase<T>::InputEnabled(F handler) const
{
	return InputEnabled(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::InputEnabledEventArgs>(handler));
}

template <typename T> void impl_ICoreInputSourceBase<T>::InputEnabled(long long const cookie) const
{
	check_hresult(shim()->remove_InputEnabled(cookie));
}

template <typename T> void impl_ICorePointerInputSource<T>::ReleasePointerCapture() const
{
	check_hresult(shim()->abi_ReleasePointerCapture());
}

template <typename T> void impl_ICorePointerInputSource<T>::SetPointerCapture() const
{
	check_hresult(shim()->abi_SetPointerCapture());
}

template <typename T> bool impl_ICorePointerInputSource<T>::HasCapture() const
{
	bool value = {};
	check_hresult(shim()->get_HasCapture(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Point impl_ICorePointerInputSource<T>::PointerPosition() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_PointerPosition(&value));
	return value;
}

template <typename T> Windows::UI::Core::CoreCursor impl_ICorePointerInputSource<T>::PointerCursor() const
{
	Windows::UI::Core::CoreCursor value = nullptr;
	check_hresult(shim()->get_PointerCursor(put(value)));
	return value;
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerCursor(Windows::UI::Core::CoreCursor const & value) const
{
	check_hresult(shim()->put_PointerCursor(get(value)));
}

template <typename T> long long impl_ICorePointerInputSource<T>::PointerCaptureLost(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerCaptureLost(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerInputSource<T>::PointerCaptureLost(F handler) const
{
	return PointerCaptureLost(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerCaptureLost(long long const cookie) const
{
	check_hresult(shim()->remove_PointerCaptureLost(cookie));
}

template <typename T> long long impl_ICorePointerInputSource<T>::PointerEntered(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerEntered(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerInputSource<T>::PointerEntered(F handler) const
{
	return PointerEntered(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerEntered(long long const cookie) const
{
	check_hresult(shim()->remove_PointerEntered(cookie));
}

template <typename T> long long impl_ICorePointerInputSource<T>::PointerExited(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerExited(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerInputSource<T>::PointerExited(F handler) const
{
	return PointerExited(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerExited(long long const cookie) const
{
	check_hresult(shim()->remove_PointerExited(cookie));
}

template <typename T> long long impl_ICorePointerInputSource<T>::PointerMoved(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerMoved(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerInputSource<T>::PointerMoved(F handler) const
{
	return PointerMoved(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerMoved(long long const cookie) const
{
	check_hresult(shim()->remove_PointerMoved(cookie));
}

template <typename T> long long impl_ICorePointerInputSource<T>::PointerPressed(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerInputSource<T>::PointerPressed(F handler) const
{
	return PointerPressed(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerPressed(long long const cookie) const
{
	check_hresult(shim()->remove_PointerPressed(cookie));
}

template <typename T> long long impl_ICorePointerInputSource<T>::PointerReleased(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerReleased(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerInputSource<T>::PointerReleased(F handler) const
{
	return PointerReleased(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerReleased(long long const cookie) const
{
	check_hresult(shim()->remove_PointerReleased(cookie));
}

template <typename T> long long impl_ICorePointerInputSource<T>::PointerWheelChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerWheelChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerInputSource<T>::PointerWheelChanged(F handler) const
{
	return PointerWheelChanged(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerWheelChanged(long long const cookie) const
{
	check_hresult(shim()->remove_PointerWheelChanged(cookie));
}

template <typename T> Windows::UI::Core::CoreVirtualKeyStates impl_ICoreKeyboardInputSource<T>::GetCurrentKeyState(Windows::System::VirtualKey const virtualKey) const
{
	Windows::UI::Core::CoreVirtualKeyStates KeyState = {};
	check_hresult(shim()->abi_GetCurrentKeyState(virtualKey, &KeyState));
	return KeyState;
}

template <typename T> long long impl_ICoreKeyboardInputSource<T>::CharacterReceived(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CharacterReceivedEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_CharacterReceived(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreKeyboardInputSource<T>::CharacterReceived(F handler) const
{
	return CharacterReceived(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::CharacterReceivedEventArgs>(handler));
}

template <typename T> void impl_ICoreKeyboardInputSource<T>::CharacterReceived(long long const cookie) const
{
	check_hresult(shim()->remove_CharacterReceived(cookie));
}

template <typename T> long long impl_ICoreKeyboardInputSource<T>::KeyDown(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_KeyDown(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreKeyboardInputSource<T>::KeyDown(F handler) const
{
	return KeyDown(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs>(handler));
}

template <typename T> void impl_ICoreKeyboardInputSource<T>::KeyDown(long long const cookie) const
{
	check_hresult(shim()->remove_KeyDown(cookie));
}

template <typename T> long long impl_ICoreKeyboardInputSource<T>::KeyUp(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_KeyUp(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreKeyboardInputSource<T>::KeyUp(F handler) const
{
	return KeyUp(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs>(handler));
}

template <typename T> void impl_ICoreKeyboardInputSource<T>::KeyUp(long long const cookie) const
{
	check_hresult(shim()->remove_KeyUp(cookie));
}

template <typename T> bool impl_ICoreComponentFocusable<T>::HasFocus() const
{
	bool value = {};
	check_hresult(shim()->get_HasFocus(put(value)));
	return value;
}

template <typename T> long long impl_ICoreComponentFocusable<T>::GotFocus(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_GotFocus(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreComponentFocusable<T>::GotFocus(F handler) const
{
	return GotFocus(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs>(handler));
}

template <typename T> void impl_ICoreComponentFocusable<T>::GotFocus(long long const cookie) const
{
	check_hresult(shim()->remove_GotFocus(cookie));
}

template <typename T> long long impl_ICoreComponentFocusable<T>::LostFocus(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_LostFocus(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreComponentFocusable<T>::LostFocus(F handler) const
{
	return LostFocus(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs>(handler));
}

template <typename T> void impl_ICoreComponentFocusable<T>::LostFocus(long long const cookie) const
{
	check_hresult(shim()->remove_LostFocus(cookie));
}

template <typename T> long long impl_ICoreTouchHitTesting<T>::TouchHitTesting(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::TouchHitTestingEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_TouchHitTesting(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreTouchHitTesting<T>::TouchHitTesting(F handler) const
{
	return TouchHitTesting(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::TouchHitTestingEventArgs>(handler));
}

template <typename T> void impl_ICoreTouchHitTesting<T>::TouchHitTesting(long long const cookie) const
{
	check_hresult(shim()->remove_TouchHitTesting(cookie));
}

template <typename T> long long impl_ICorePointerRedirector<T>::PointerRoutedAway(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::ICorePointerRedirector, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerRoutedAway(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerRedirector<T>::PointerRoutedAway(F handler) const
{
	return PointerRoutedAway(Windows::Foundation::TypedEventHandler<Windows::UI::Core::ICorePointerRedirector, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerRedirector<T>::PointerRoutedAway(long long const cookie) const
{
	check_hresult(shim()->remove_PointerRoutedAway(cookie));
}

template <typename T> long long impl_ICorePointerRedirector<T>::PointerRoutedTo(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::ICorePointerRedirector, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerRoutedTo(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerRedirector<T>::PointerRoutedTo(F handler) const
{
	return PointerRoutedTo(Windows::Foundation::TypedEventHandler<Windows::UI::Core::ICorePointerRedirector, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerRedirector<T>::PointerRoutedTo(long long const cookie) const
{
	check_hresult(shim()->remove_PointerRoutedTo(cookie));
}

template <typename T> long long impl_ICorePointerRedirector<T>::PointerRoutedReleased(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::ICorePointerRedirector, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerRoutedReleased(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerRedirector<T>::PointerRoutedReleased(F handler) const
{
	return PointerRoutedReleased(Windows::Foundation::TypedEventHandler<Windows::UI::Core::ICorePointerRedirector, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerRedirector<T>::PointerRoutedReleased(long long const cookie) const
{
	check_hresult(shim()->remove_PointerRoutedReleased(cookie));
}

template <typename T> void impl_ICoreWindowPopupShowingEventArgs<T>::SetDesiredSize(Windows::Foundation::Size const & value) const
{
	check_hresult(shim()->abi_SetDesiredSize(value));
}

template <typename T> long long impl_ICoreWindowDialog<T>::Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_Showing(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindowDialog<T>::Showing(F handler) const
{
	return Showing(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs>(handler));
}

template <typename T> void impl_ICoreWindowDialog<T>::Showing(long long const cookie) const
{
	check_hresult(shim()->remove_Showing(cookie));
}

template <typename T> Windows::Foundation::Size impl_ICoreWindowDialog<T>::MaxSize() const
{
	Windows::Foundation::Size value = {};
	check_hresult(shim()->get_MaxSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_ICoreWindowDialog<T>::MinSize() const
{
	Windows::Foundation::Size value = {};
	check_hresult(shim()->get_MinSize(&value));
	return value;
}

template <typename T> String impl_ICoreWindowDialog<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_ICoreWindowDialog<T>::Title(StringReference const & value) const
{
	check_hresult(shim()->put_Title(get(value)));
}

template <typename T> int impl_ICoreWindowDialog<T>::IsInteractionDelayed() const
{
	int value = {};
	check_hresult(shim()->get_IsInteractionDelayed(&value));
	return value;
}

template <typename T> void impl_ICoreWindowDialog<T>::IsInteractionDelayed(int const value) const
{
	check_hresult(shim()->put_IsInteractionDelayed(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> impl_ICoreWindowDialog<T>::Commands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> value;
	check_hresult(shim()->get_Commands(put(value)));
	return value;
}

template <typename T> unsigned impl_ICoreWindowDialog<T>::DefaultCommandIndex() const
{
	unsigned value = {};
	check_hresult(shim()->get_DefaultCommandIndex(&value));
	return value;
}

template <typename T> void impl_ICoreWindowDialog<T>::DefaultCommandIndex(unsigned const value) const
{
	check_hresult(shim()->put_DefaultCommandIndex(value));
}

template <typename T> unsigned impl_ICoreWindowDialog<T>::CancelCommandIndex() const
{
	unsigned value = {};
	check_hresult(shim()->get_CancelCommandIndex(&value));
	return value;
}

template <typename T> void impl_ICoreWindowDialog<T>::CancelCommandIndex(unsigned const value) const
{
	check_hresult(shim()->put_CancelCommandIndex(value));
}

template <typename T> Windows::UI::Popups::IUICommandInvokedHandler impl_ICoreWindowDialog<T>::BackButtonCommand() const
{
	Windows::UI::Popups::IUICommandInvokedHandler value = {};
	check_hresult(shim()->get_BackButtonCommand(put(value)));
	return value;
}

template <typename T> void impl_ICoreWindowDialog<T>::BackButtonCommand(Windows::UI::Popups::IUICommandInvokedHandler const & value) const
{
	check_hresult(shim()->put_BackButtonCommand(get(value)));
}

template <typename T> template <typename F> void impl_ICoreWindowDialog<T>::BackButtonCommand(F value) const
{
	BackButtonCommand(Windows::UI::Popups::UICommandInvokedHandler(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_ICoreWindowDialog<T>::ShowAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> asyncInfo;
	check_hresult(shim()->abi_ShowAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::UI::Core::CoreWindowDialog impl_ICoreWindowDialogFactory<T>::CreateWithTitle(StringReference const & title) const
{
	Windows::UI::Core::CoreWindowDialog coreWindowDialog = nullptr;
	check_hresult(shim()->abi_CreateWithTitle(get(title), put(coreWindowDialog)));
	return coreWindowDialog;
}

template <typename T> long long impl_ICoreWindowFlyout<T>::Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_Showing(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindowFlyout<T>::Showing(F handler) const
{
	return Showing(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs>(handler));
}

template <typename T> void impl_ICoreWindowFlyout<T>::Showing(long long const cookie) const
{
	check_hresult(shim()->remove_Showing(cookie));
}

template <typename T> Windows::Foundation::Size impl_ICoreWindowFlyout<T>::MaxSize() const
{
	Windows::Foundation::Size value = {};
	check_hresult(shim()->get_MaxSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_ICoreWindowFlyout<T>::MinSize() const
{
	Windows::Foundation::Size value = {};
	check_hresult(shim()->get_MinSize(&value));
	return value;
}

template <typename T> String impl_ICoreWindowFlyout<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_ICoreWindowFlyout<T>::Title(StringReference const & value) const
{
	check_hresult(shim()->put_Title(get(value)));
}

template <typename T> int impl_ICoreWindowFlyout<T>::IsInteractionDelayed() const
{
	int value = {};
	check_hresult(shim()->get_IsInteractionDelayed(&value));
	return value;
}

template <typename T> void impl_ICoreWindowFlyout<T>::IsInteractionDelayed(int const value) const
{
	check_hresult(shim()->put_IsInteractionDelayed(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> impl_ICoreWindowFlyout<T>::Commands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> value;
	check_hresult(shim()->get_Commands(put(value)));
	return value;
}

template <typename T> unsigned impl_ICoreWindowFlyout<T>::DefaultCommandIndex() const
{
	unsigned value = {};
	check_hresult(shim()->get_DefaultCommandIndex(&value));
	return value;
}

template <typename T> void impl_ICoreWindowFlyout<T>::DefaultCommandIndex(unsigned const value) const
{
	check_hresult(shim()->put_DefaultCommandIndex(value));
}

template <typename T> Windows::UI::Popups::IUICommandInvokedHandler impl_ICoreWindowFlyout<T>::BackButtonCommand() const
{
	Windows::UI::Popups::IUICommandInvokedHandler value = {};
	check_hresult(shim()->get_BackButtonCommand(put(value)));
	return value;
}

template <typename T> void impl_ICoreWindowFlyout<T>::BackButtonCommand(Windows::UI::Popups::IUICommandInvokedHandler const & value) const
{
	check_hresult(shim()->put_BackButtonCommand(get(value)));
}

template <typename T> template <typename F> void impl_ICoreWindowFlyout<T>::BackButtonCommand(F value) const
{
	BackButtonCommand(Windows::UI::Popups::UICommandInvokedHandler(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_ICoreWindowFlyout<T>::ShowAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> asyncInfo;
	check_hresult(shim()->abi_ShowAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::UI::Core::CoreWindowFlyout impl_ICoreWindowFlyoutFactory<T>::Create(Windows::Foundation::Point const & position) const
{
	Windows::UI::Core::CoreWindowFlyout coreWindowFlyout = nullptr;
	check_hresult(shim()->abi_Create(position, put(coreWindowFlyout)));
	return coreWindowFlyout;
}

template <typename T> Windows::UI::Core::CoreWindowFlyout impl_ICoreWindowFlyoutFactory<T>::CreateWithTitle(Windows::Foundation::Point const & position, StringReference const & title) const
{
	Windows::UI::Core::CoreWindowFlyout coreWindowFlyout = nullptr;
	check_hresult(shim()->abi_CreateWithTitle(position, get(title), put(coreWindowFlyout)));
	return coreWindowFlyout;
}

template <typename T> long long impl_ISystemNavigationManager<T>::BackRequested(Windows::Foundation::IEventHandler<Windows::UI::Core::BackRequestedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_BackRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISystemNavigationManager<T>::BackRequested(F handler) const
{
	return BackRequested(Windows::Foundation::EventHandler<Windows::UI::Core::BackRequestedEventArgs>(handler));
}

template <typename T> void impl_ISystemNavigationManager<T>::BackRequested(long long const token) const
{
	check_hresult(shim()->remove_BackRequested(token));
}

template <typename T> Windows::UI::Core::AppViewBackButtonVisibility impl_ISystemNavigationManager2<T>::AppViewBackButtonVisibility() const
{
	Windows::UI::Core::AppViewBackButtonVisibility value = {};
	check_hresult(shim()->get_AppViewBackButtonVisibility(&value));
	return value;
}

template <typename T> void impl_ISystemNavigationManager2<T>::AppViewBackButtonVisibility(Windows::UI::Core::AppViewBackButtonVisibility const value) const
{
	check_hresult(shim()->put_AppViewBackButtonVisibility(value));
}

template <typename T> Windows::UI::Core::SystemNavigationManager impl_ISystemNavigationManagerStatics<T>::GetForCurrentView() const
{
	Windows::UI::Core::SystemNavigationManager loader = nullptr;
	check_hresult(shim()->abi_GetForCurrentView(put(loader)));
	return loader;
}

template <typename T> bool impl_IBackRequestedEventArgs<T>::Handled() const
{
	bool value = {};
	check_hresult(shim()->get_Handled(put(value)));
	return value;
}

template <typename T> void impl_IBackRequestedEventArgs<T>::Handled(bool const value) const
{
	check_hresult(shim()->put_Handled(value));
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input {

template <typename T> Windows::UI::Input::EdgeGestureKind impl_IEdgeGestureEventArgs<T>::Kind() const
{
	Windows::UI::Input::EdgeGestureKind value = {};
	check_hresult(shim()->get_Kind(&value));
	return value;
}

template <typename T> Windows::UI::Input::EdgeGesture impl_IEdgeGestureStatics<T>::GetForCurrentView() const
{
	Windows::UI::Input::EdgeGesture current = nullptr;
	check_hresult(shim()->abi_GetForCurrentView(put(current)));
	return current;
}

template <typename T> long long impl_IEdgeGesture<T>::Starting(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Starting(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IEdgeGesture<T>::Starting(F handler) const
{
	return Starting(Windows::Foundation::TypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs>(handler));
}

template <typename T> void impl_IEdgeGesture<T>::Starting(long long const token) const
{
	check_hresult(shim()->remove_Starting(token));
}

template <typename T> long long impl_IEdgeGesture<T>::Completed(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Completed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IEdgeGesture<T>::Completed(F handler) const
{
	return Completed(Windows::Foundation::TypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs>(handler));
}

template <typename T> void impl_IEdgeGesture<T>::Completed(long long const token) const
{
	check_hresult(shim()->remove_Completed(token));
}

template <typename T> long long impl_IEdgeGesture<T>::Canceled(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Canceled(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IEdgeGesture<T>::Canceled(F handler) const
{
	return Canceled(Windows::Foundation::TypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs>(handler));
}

template <typename T> void impl_IEdgeGesture<T>::Canceled(long long const token) const
{
	check_hresult(shim()->remove_Canceled(token));
}

template <typename T> bool impl_IKeyboardDeliveryInterceptor<T>::IsInterceptionEnabledWhenInForeground() const
{
	bool value = {};
	check_hresult(shim()->get_IsInterceptionEnabledWhenInForeground(put(value)));
	return value;
}

template <typename T> void impl_IKeyboardDeliveryInterceptor<T>::IsInterceptionEnabledWhenInForeground(bool const value) const
{
	check_hresult(shim()->put_IsInterceptionEnabledWhenInForeground(value));
}

template <typename T> long long impl_IKeyboardDeliveryInterceptor<T>::KeyDown(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::KeyboardDeliveryInterceptor, Windows::UI::Core::KeyEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_KeyDown(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IKeyboardDeliveryInterceptor<T>::KeyDown(F handler) const
{
	return KeyDown(Windows::Foundation::TypedEventHandler<Windows::UI::Input::KeyboardDeliveryInterceptor, Windows::UI::Core::KeyEventArgs>(handler));
}

template <typename T> void impl_IKeyboardDeliveryInterceptor<T>::KeyDown(long long const token) const
{
	check_hresult(shim()->remove_KeyDown(token));
}

template <typename T> long long impl_IKeyboardDeliveryInterceptor<T>::KeyUp(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::KeyboardDeliveryInterceptor, Windows::UI::Core::KeyEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_KeyUp(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IKeyboardDeliveryInterceptor<T>::KeyUp(F handler) const
{
	return KeyUp(Windows::Foundation::TypedEventHandler<Windows::UI::Input::KeyboardDeliveryInterceptor, Windows::UI::Core::KeyEventArgs>(handler));
}

template <typename T> void impl_IKeyboardDeliveryInterceptor<T>::KeyUp(long long const token) const
{
	check_hresult(shim()->remove_KeyUp(token));
}

template <typename T> Windows::UI::Input::KeyboardDeliveryInterceptor impl_IKeyboardDeliveryInterceptorStatics<T>::GetForCurrentView() const
{
	Windows::UI::Input::KeyboardDeliveryInterceptor keyboardDeliverySettings = nullptr;
	check_hresult(shim()->abi_GetForCurrentView(put(keyboardDeliverySettings)));
	return keyboardDeliverySettings;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_ITappedEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check_hresult(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_ITappedEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_Position(&value));
	return value;
}

template <typename T> unsigned impl_ITappedEventArgs<T>::TapCount() const
{
	unsigned value = {};
	check_hresult(shim()->get_TapCount(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IRightTappedEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check_hresult(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IRightTappedEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IHoldingEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check_hresult(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IHoldingEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::HoldingState impl_IHoldingEventArgs<T>::HoldingState() const
{
	Windows::UI::Input::HoldingState value = {};
	check_hresult(shim()->get_HoldingState(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IDraggingEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check_hresult(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IDraggingEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::DraggingState impl_IDraggingEventArgs<T>::DraggingState() const
{
	Windows::UI::Input::DraggingState value = {};
	check_hresult(shim()->get_DraggingState(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IManipulationStartedEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check_hresult(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IManipulationStartedEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationStartedEventArgs<T>::Cumulative() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check_hresult(shim()->get_Cumulative(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IManipulationUpdatedEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check_hresult(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IManipulationUpdatedEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationUpdatedEventArgs<T>::Delta() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check_hresult(shim()->get_Delta(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationUpdatedEventArgs<T>::Cumulative() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check_hresult(shim()->get_Cumulative(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationVelocities impl_IManipulationUpdatedEventArgs<T>::Velocities() const
{
	Windows::UI::Input::ManipulationVelocities value = {};
	check_hresult(shim()->get_Velocities(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IManipulationInertiaStartingEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check_hresult(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IManipulationInertiaStartingEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationInertiaStartingEventArgs<T>::Delta() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check_hresult(shim()->get_Delta(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationInertiaStartingEventArgs<T>::Cumulative() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check_hresult(shim()->get_Cumulative(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationVelocities impl_IManipulationInertiaStartingEventArgs<T>::Velocities() const
{
	Windows::UI::Input::ManipulationVelocities value = {};
	check_hresult(shim()->get_Velocities(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IManipulationCompletedEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check_hresult(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IManipulationCompletedEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationCompletedEventArgs<T>::Cumulative() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check_hresult(shim()->get_Cumulative(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationVelocities impl_IManipulationCompletedEventArgs<T>::Velocities() const
{
	Windows::UI::Input::ManipulationVelocities value = {};
	check_hresult(shim()->get_Velocities(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_ICrossSlidingEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check_hresult(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_ICrossSlidingEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::CrossSlidingState impl_ICrossSlidingEventArgs<T>::CrossSlidingState() const
{
	Windows::UI::Input::CrossSlidingState value = {};
	check_hresult(shim()->get_CrossSlidingState(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IMouseWheelParameters<T>::CharTranslation() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_CharTranslation(&value));
	return value;
}

template <typename T> void impl_IMouseWheelParameters<T>::CharTranslation(Windows::Foundation::Point const & value) const
{
	check_hresult(shim()->put_CharTranslation(value));
}

template <typename T> float impl_IMouseWheelParameters<T>::DeltaScale() const
{
	float value = {};
	check_hresult(shim()->get_DeltaScale(&value));
	return value;
}

template <typename T> void impl_IMouseWheelParameters<T>::DeltaScale(float const value) const
{
	check_hresult(shim()->put_DeltaScale(value));
}

template <typename T> float impl_IMouseWheelParameters<T>::DeltaRotationAngle() const
{
	float value = {};
	check_hresult(shim()->get_DeltaRotationAngle(&value));
	return value;
}

template <typename T> void impl_IMouseWheelParameters<T>::DeltaRotationAngle(float const value) const
{
	check_hresult(shim()->put_DeltaRotationAngle(value));
}

template <typename T> Windows::Foundation::Point impl_IMouseWheelParameters<T>::PageTranslation() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_PageTranslation(&value));
	return value;
}

template <typename T> void impl_IMouseWheelParameters<T>::PageTranslation(Windows::Foundation::Point const & value) const
{
	check_hresult(shim()->put_PageTranslation(value));
}

template <typename T> Windows::UI::Input::GestureSettings impl_IGestureRecognizer<T>::GestureSettings() const
{
	Windows::UI::Input::GestureSettings value = {};
	check_hresult(shim()->get_GestureSettings(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::GestureSettings(Windows::UI::Input::GestureSettings const value) const
{
	check_hresult(shim()->put_GestureSettings(value));
}

template <typename T> bool impl_IGestureRecognizer<T>::IsInertial() const
{
	bool value = {};
	check_hresult(shim()->get_IsInertial(put(value)));
	return value;
}

template <typename T> bool impl_IGestureRecognizer<T>::IsActive() const
{
	bool value = {};
	check_hresult(shim()->get_IsActive(put(value)));
	return value;
}

template <typename T> bool impl_IGestureRecognizer<T>::ShowGestureFeedback() const
{
	bool value = {};
	check_hresult(shim()->get_ShowGestureFeedback(put(value)));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::ShowGestureFeedback(bool const value) const
{
	check_hresult(shim()->put_ShowGestureFeedback(value));
}

template <typename T> Windows::Foundation::Point impl_IGestureRecognizer<T>::PivotCenter() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_PivotCenter(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::PivotCenter(Windows::Foundation::Point const & value) const
{
	check_hresult(shim()->put_PivotCenter(value));
}

template <typename T> float impl_IGestureRecognizer<T>::PivotRadius() const
{
	float value = {};
	check_hresult(shim()->get_PivotRadius(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::PivotRadius(float const value) const
{
	check_hresult(shim()->put_PivotRadius(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaTranslationDeceleration() const
{
	float value = {};
	check_hresult(shim()->get_InertiaTranslationDeceleration(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaTranslationDeceleration(float const value) const
{
	check_hresult(shim()->put_InertiaTranslationDeceleration(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaRotationDeceleration() const
{
	float value = {};
	check_hresult(shim()->get_InertiaRotationDeceleration(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaRotationDeceleration(float const value) const
{
	check_hresult(shim()->put_InertiaRotationDeceleration(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaExpansionDeceleration() const
{
	float value = {};
	check_hresult(shim()->get_InertiaExpansionDeceleration(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaExpansionDeceleration(float const value) const
{
	check_hresult(shim()->put_InertiaExpansionDeceleration(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaTranslationDisplacement() const
{
	float value = {};
	check_hresult(shim()->get_InertiaTranslationDisplacement(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaTranslationDisplacement(float const value) const
{
	check_hresult(shim()->put_InertiaTranslationDisplacement(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaRotationAngle() const
{
	float value = {};
	check_hresult(shim()->get_InertiaRotationAngle(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaRotationAngle(float const value) const
{
	check_hresult(shim()->put_InertiaRotationAngle(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaExpansion() const
{
	float value = {};
	check_hresult(shim()->get_InertiaExpansion(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaExpansion(float const value) const
{
	check_hresult(shim()->put_InertiaExpansion(value));
}

template <typename T> bool impl_IGestureRecognizer<T>::ManipulationExact() const
{
	bool value = {};
	check_hresult(shim()->get_ManipulationExact(put(value)));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::ManipulationExact(bool const value) const
{
	check_hresult(shim()->put_ManipulationExact(value));
}

template <typename T> Windows::UI::Input::CrossSlideThresholds impl_IGestureRecognizer<T>::CrossSlideThresholds() const
{
	Windows::UI::Input::CrossSlideThresholds value = {};
	check_hresult(shim()->get_CrossSlideThresholds(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::CrossSlideThresholds(Windows::UI::Input::CrossSlideThresholds const & value) const
{
	check_hresult(shim()->put_CrossSlideThresholds(value));
}

template <typename T> bool impl_IGestureRecognizer<T>::CrossSlideHorizontally() const
{
	bool value = {};
	check_hresult(shim()->get_CrossSlideHorizontally(put(value)));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::CrossSlideHorizontally(bool const value) const
{
	check_hresult(shim()->put_CrossSlideHorizontally(value));
}

template <typename T> bool impl_IGestureRecognizer<T>::CrossSlideExact() const
{
	bool value = {};
	check_hresult(shim()->get_CrossSlideExact(put(value)));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::CrossSlideExact(bool const value) const
{
	check_hresult(shim()->put_CrossSlideExact(value));
}

template <typename T> bool impl_IGestureRecognizer<T>::AutoProcessInertia() const
{
	bool value = {};
	check_hresult(shim()->get_AutoProcessInertia(put(value)));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::AutoProcessInertia(bool const value) const
{
	check_hresult(shim()->put_AutoProcessInertia(value));
}

template <typename T> Windows::UI::Input::MouseWheelParameters impl_IGestureRecognizer<T>::MouseWheelParameters() const
{
	Windows::UI::Input::MouseWheelParameters value = nullptr;
	check_hresult(shim()->get_MouseWheelParameters(put(value)));
	return value;
}

template <typename T> bool impl_IGestureRecognizer<T>::CanBeDoubleTap(Windows::UI::Input::PointerPoint const & value) const
{
	bool canBeDoubleTap = {};
	check_hresult(shim()->abi_CanBeDoubleTap(get(value), put(canBeDoubleTap)));
	return canBeDoubleTap;
}

template <typename T> void impl_IGestureRecognizer<T>::ProcessDownEvent(Windows::UI::Input::PointerPoint const & value) const
{
	check_hresult(shim()->abi_ProcessDownEvent(get(value)));
}

template <typename T> void impl_IGestureRecognizer<T>::ProcessMoveEvents(Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> const & value) const
{
	check_hresult(shim()->abi_ProcessMoveEvents(get(value)));
}

template <typename T> void impl_IGestureRecognizer<T>::ProcessUpEvent(Windows::UI::Input::PointerPoint const & value) const
{
	check_hresult(shim()->abi_ProcessUpEvent(get(value)));
}

template <typename T> void impl_IGestureRecognizer<T>::ProcessMouseWheelEvent(Windows::UI::Input::PointerPoint const & value, bool const isShiftKeyDown, bool const isControlKeyDown) const
{
	check_hresult(shim()->abi_ProcessMouseWheelEvent(get(value), isShiftKeyDown, isControlKeyDown));
}

template <typename T> void impl_IGestureRecognizer<T>::ProcessInertia() const
{
	check_hresult(shim()->abi_ProcessInertia());
}

template <typename T> void impl_IGestureRecognizer<T>::CompleteGesture() const
{
	check_hresult(shim()->abi_CompleteGesture());
}

template <typename T> long long impl_IGestureRecognizer<T>::Tapped(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::TappedEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_Tapped(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::Tapped(F handler) const
{
	return Tapped(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::TappedEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::Tapped(long long const cookie) const
{
	check_hresult(shim()->remove_Tapped(cookie));
}

template <typename T> long long impl_IGestureRecognizer<T>::RightTapped(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::RightTappedEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_RightTapped(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::RightTapped(F handler) const
{
	return RightTapped(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::RightTappedEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::RightTapped(long long const cookie) const
{
	check_hresult(shim()->remove_RightTapped(cookie));
}

template <typename T> long long impl_IGestureRecognizer<T>::Holding(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::HoldingEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_Holding(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::Holding(F handler) const
{
	return Holding(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::HoldingEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::Holding(long long const cookie) const
{
	check_hresult(shim()->remove_Holding(cookie));
}

template <typename T> long long impl_IGestureRecognizer<T>::Dragging(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::DraggingEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_Dragging(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::Dragging(F handler) const
{
	return Dragging(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::DraggingEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::Dragging(long long const cookie) const
{
	check_hresult(shim()->remove_Dragging(cookie));
}

template <typename T> long long impl_IGestureRecognizer<T>::ManipulationStarted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationStartedEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_ManipulationStarted(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::ManipulationStarted(F handler) const
{
	return ManipulationStarted(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationStartedEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::ManipulationStarted(long long const cookie) const
{
	check_hresult(shim()->remove_ManipulationStarted(cookie));
}

template <typename T> long long impl_IGestureRecognizer<T>::ManipulationUpdated(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationUpdatedEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_ManipulationUpdated(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::ManipulationUpdated(F handler) const
{
	return ManipulationUpdated(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationUpdatedEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::ManipulationUpdated(long long const cookie) const
{
	check_hresult(shim()->remove_ManipulationUpdated(cookie));
}

template <typename T> long long impl_IGestureRecognizer<T>::ManipulationInertiaStarting(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationInertiaStartingEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_ManipulationInertiaStarting(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::ManipulationInertiaStarting(F handler) const
{
	return ManipulationInertiaStarting(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationInertiaStartingEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::ManipulationInertiaStarting(long long const cookie) const
{
	check_hresult(shim()->remove_ManipulationInertiaStarting(cookie));
}

template <typename T> long long impl_IGestureRecognizer<T>::ManipulationCompleted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationCompletedEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_ManipulationCompleted(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::ManipulationCompleted(F handler) const
{
	return ManipulationCompleted(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationCompletedEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::ManipulationCompleted(long long const cookie) const
{
	check_hresult(shim()->remove_ManipulationCompleted(cookie));
}

template <typename T> long long impl_IGestureRecognizer<T>::CrossSliding(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::CrossSlidingEventArgs> const & handler) const
{
	long long pCookie = {};
	check_hresult(shim()->add_CrossSliding(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::CrossSliding(F handler) const
{
	return CrossSliding(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::CrossSlidingEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::CrossSliding(long long const cookie) const
{
	check_hresult(shim()->remove_CrossSliding(cookie));
}

template <typename T> Windows::UI::Input::PointerPoint impl_IPointerPointStatics<T>::GetCurrentPoint(unsigned const pointerId) const
{
	Windows::UI::Input::PointerPoint pointerPoint = nullptr;
	check_hresult(shim()->abi_GetCurrentPoint(pointerId, put(pointerPoint)));
	return pointerPoint;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> impl_IPointerPointStatics<T>::GetIntermediatePoints(unsigned const pointerId) const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> pointerPoints;
	check_hresult(shim()->abi_GetIntermediatePoints(pointerId, put(pointerPoints)));
	return pointerPoints;
}

template <typename T> Windows::UI::Input::PointerPoint impl_IPointerPointStatics<T>::GetCurrentPoint(unsigned const pointerId, Windows::UI::Input::IPointerPointTransform const & transform) const
{
	Windows::UI::Input::PointerPoint pointerPoint = nullptr;
	check_hresult(shim()->abi_GetCurrentPointTransformed(pointerId, get(transform), put(pointerPoint)));
	return pointerPoint;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> impl_IPointerPointStatics<T>::GetIntermediatePoints(unsigned const pointerId, Windows::UI::Input::IPointerPointTransform const & transform) const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> pointerPoints;
	check_hresult(shim()->abi_GetIntermediatePointsTransformed(pointerId, get(transform), put(pointerPoints)));
	return pointerPoints;
}

template <typename T> Windows::UI::Input::IPointerPointTransform impl_IPointerPointTransform<T>::Inverse() const
{
	Windows::UI::Input::IPointerPointTransform value;
	check_hresult(shim()->get_Inverse(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointTransform<T>::TryTransform(Windows::Foundation::Point const & inPoint, Windows::Foundation::Point & outPoint) const
{
	bool returnValue = {};
	check_hresult(shim()->abi_TryTransform(inPoint, &outPoint, put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Foundation::Rect impl_IPointerPointTransform<T>::TransformBounds(Windows::Foundation::Rect const & rect) const
{
	Windows::Foundation::Rect returnValue = {};
	check_hresult(shim()->abi_TransformBounds(rect, &returnValue));
	return returnValue;
}

template <typename T> Windows::Devices::Input::PointerDevice impl_IPointerPoint<T>::PointerDevice() const
{
	Windows::Devices::Input::PointerDevice value = nullptr;
	check_hresult(shim()->get_PointerDevice(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IPointerPoint<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IPointerPoint<T>::RawPosition() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_RawPosition(&value));
	return value;
}

template <typename T> unsigned impl_IPointerPoint<T>::PointerId() const
{
	unsigned value = {};
	check_hresult(shim()->get_PointerId(&value));
	return value;
}

template <typename T> unsigned impl_IPointerPoint<T>::FrameId() const
{
	unsigned value = {};
	check_hresult(shim()->get_FrameId(&value));
	return value;
}

template <typename T> unsigned long long impl_IPointerPoint<T>::Timestamp() const
{
	unsigned long long value = {};
	check_hresult(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> bool impl_IPointerPoint<T>::IsInContact() const
{
	bool value = {};
	check_hresult(shim()->get_IsInContact(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::PointerPointProperties impl_IPointerPoint<T>::Properties() const
{
	Windows::UI::Input::PointerPointProperties value = nullptr;
	check_hresult(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> float impl_IPointerPointProperties<T>::Pressure() const
{
	float value = {};
	check_hresult(shim()->get_Pressure(&value));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsInverted() const
{
	bool value = {};
	check_hresult(shim()->get_IsInverted(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsEraser() const
{
	bool value = {};
	check_hresult(shim()->get_IsEraser(put(value)));
	return value;
}

template <typename T> float impl_IPointerPointProperties<T>::Orientation() const
{
	float value = {};
	check_hresult(shim()->get_Orientation(&value));
	return value;
}

template <typename T> float impl_IPointerPointProperties<T>::XTilt() const
{
	float value = {};
	check_hresult(shim()->get_XTilt(&value));
	return value;
}

template <typename T> float impl_IPointerPointProperties<T>::YTilt() const
{
	float value = {};
	check_hresult(shim()->get_YTilt(&value));
	return value;
}

template <typename T> float impl_IPointerPointProperties<T>::Twist() const
{
	float value = {};
	check_hresult(shim()->get_Twist(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPointerPointProperties<T>::ContactRect() const
{
	Windows::Foundation::Rect value = {};
	check_hresult(shim()->get_ContactRect(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPointerPointProperties<T>::ContactRectRaw() const
{
	Windows::Foundation::Rect value = {};
	check_hresult(shim()->get_ContactRectRaw(&value));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::TouchConfidence() const
{
	bool value = {};
	check_hresult(shim()->get_TouchConfidence(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsLeftButtonPressed() const
{
	bool value = {};
	check_hresult(shim()->get_IsLeftButtonPressed(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsRightButtonPressed() const
{
	bool value = {};
	check_hresult(shim()->get_IsRightButtonPressed(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsMiddleButtonPressed() const
{
	bool value = {};
	check_hresult(shim()->get_IsMiddleButtonPressed(put(value)));
	return value;
}

template <typename T> int impl_IPointerPointProperties<T>::MouseWheelDelta() const
{
	int value = {};
	check_hresult(shim()->get_MouseWheelDelta(&value));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsHorizontalMouseWheel() const
{
	bool value = {};
	check_hresult(shim()->get_IsHorizontalMouseWheel(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsPrimary() const
{
	bool value = {};
	check_hresult(shim()->get_IsPrimary(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsInRange() const
{
	bool value = {};
	check_hresult(shim()->get_IsInRange(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsCanceled() const
{
	bool value = {};
	check_hresult(shim()->get_IsCanceled(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsBarrelButtonPressed() const
{
	bool value = {};
	check_hresult(shim()->get_IsBarrelButtonPressed(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsXButton1Pressed() const
{
	bool value = {};
	check_hresult(shim()->get_IsXButton1Pressed(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsXButton2Pressed() const
{
	bool value = {};
	check_hresult(shim()->get_IsXButton2Pressed(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::PointerUpdateKind impl_IPointerPointProperties<T>::PointerUpdateKind() const
{
	Windows::UI::Input::PointerUpdateKind value = {};
	check_hresult(shim()->get_PointerUpdateKind(&value));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::HasUsage(unsigned const usagePage, unsigned const usageId) const
{
	bool value = {};
	check_hresult(shim()->abi_HasUsage(usagePage, usageId, put(value)));
	return value;
}

template <typename T> int impl_IPointerPointProperties<T>::GetUsageValue(unsigned const usagePage, unsigned const usageId) const
{
	int value = {};
	check_hresult(shim()->abi_GetUsageValue(usagePage, usageId, &value));
	return value;
}

template <typename T> void impl_IPointerVisualizationSettings<T>::IsContactFeedbackEnabled(bool const value) const
{
	check_hresult(shim()->put_IsContactFeedbackEnabled(value));
}

template <typename T> bool impl_IPointerVisualizationSettings<T>::IsContactFeedbackEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_IsContactFeedbackEnabled(put(value)));
	return value;
}

template <typename T> void impl_IPointerVisualizationSettings<T>::IsBarrelButtonFeedbackEnabled(bool const value) const
{
	check_hresult(shim()->put_IsBarrelButtonFeedbackEnabled(value));
}

template <typename T> bool impl_IPointerVisualizationSettings<T>::IsBarrelButtonFeedbackEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_IsBarrelButtonFeedbackEnabled(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::PointerVisualizationSettings impl_IPointerVisualizationSettingsStatics<T>::GetForCurrentView() const
{
	Windows::UI::Input::PointerVisualizationSettings visualizationSettings = nullptr;
	check_hresult(shim()->abi_GetForCurrentView(put(visualizationSettings)));
	return visualizationSettings;
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Inking {

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> impl_IInkStrokesCollectedEventArgs<T>::Strokes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> value;
	check_hresult(shim()->get_Strokes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> impl_IInkStrokesErasedEventArgs<T>::Strokes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> value;
	check_hresult(shim()->get_Strokes(put(value)));
	return value;
}

template <typename T> bool impl_IInkPresenter<T>::IsInputEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_IsInputEnabled(put(value)));
	return value;
}

template <typename T> void impl_IInkPresenter<T>::IsInputEnabled(bool const value) const
{
	check_hresult(shim()->put_IsInputEnabled(value));
}

template <typename T> Windows::UI::Core::CoreInputDeviceTypes impl_IInkPresenter<T>::InputDeviceTypes() const
{
	Windows::UI::Core::CoreInputDeviceTypes value = {};
	check_hresult(shim()->get_InputDeviceTypes(&value));
	return value;
}

template <typename T> void impl_IInkPresenter<T>::InputDeviceTypes(Windows::UI::Core::CoreInputDeviceTypes const value) const
{
	check_hresult(shim()->put_InputDeviceTypes(value));
}

template <typename T> Windows::UI::Input::Inking::InkUnprocessedInput impl_IInkPresenter<T>::UnprocessedInput() const
{
	Windows::UI::Input::Inking::InkUnprocessedInput value = nullptr;
	check_hresult(shim()->get_UnprocessedInput(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Inking::InkStrokeInput impl_IInkPresenter<T>::StrokeInput() const
{
	Windows::UI::Input::Inking::InkStrokeInput value = nullptr;
	check_hresult(shim()->get_StrokeInput(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Inking::InkInputProcessingConfiguration impl_IInkPresenter<T>::InputProcessingConfiguration() const
{
	Windows::UI::Input::Inking::InkInputProcessingConfiguration value = nullptr;
	check_hresult(shim()->get_InputProcessingConfiguration(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Inking::InkStrokeContainer impl_IInkPresenter<T>::StrokeContainer() const
{
	Windows::UI::Input::Inking::InkStrokeContainer value = nullptr;
	check_hresult(shim()->get_StrokeContainer(put(value)));
	return value;
}

template <typename T> void impl_IInkPresenter<T>::StrokeContainer(Windows::UI::Input::Inking::InkStrokeContainer const & value) const
{
	check_hresult(shim()->put_StrokeContainer(get(value)));
}

template <typename T> Windows::UI::Input::Inking::InkDrawingAttributes impl_IInkPresenter<T>::CopyDefaultDrawingAttributes() const
{
	Windows::UI::Input::Inking::InkDrawingAttributes value = nullptr;
	check_hresult(shim()->abi_CopyDefaultDrawingAttributes(put(value)));
	return value;
}

template <typename T> void impl_IInkPresenter<T>::UpdateDefaultDrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & value) const
{
	check_hresult(shim()->abi_UpdateDefaultDrawingAttributes(get(value)));
}

template <typename T> Windows::UI::Input::Inking::InkSynchronizer impl_IInkPresenter<T>::ActivateCustomDrying() const
{
	Windows::UI::Input::Inking::InkSynchronizer inkSynchronizer = nullptr;
	check_hresult(shim()->abi_ActivateCustomDrying(put(inkSynchronizer)));
	return inkSynchronizer;
}

template <typename T> void impl_IInkPresenter<T>::SetPredefinedConfiguration(Windows::UI::Input::Inking::InkPresenterPredefinedConfiguration const value) const
{
	check_hresult(shim()->abi_SetPredefinedConfiguration(value));
}

template <typename T> long long impl_IInkPresenter<T>::StrokesCollected(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkPresenter, Windows::UI::Input::Inking::InkStrokesCollectedEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_StrokesCollected(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkPresenter<T>::StrokesCollected(F handler) const
{
	return StrokesCollected(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkPresenter, Windows::UI::Input::Inking::InkStrokesCollectedEventArgs>(handler));
}

template <typename T> void impl_IInkPresenter<T>::StrokesCollected(long long const cookie) const
{
	check_hresult(shim()->remove_StrokesCollected(cookie));
}

template <typename T> long long impl_IInkPresenter<T>::StrokesErased(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkPresenter, Windows::UI::Input::Inking::InkStrokesErasedEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_StrokesErased(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkPresenter<T>::StrokesErased(F handler) const
{
	return StrokesErased(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkPresenter, Windows::UI::Input::Inking::InkStrokesErasedEventArgs>(handler));
}

template <typename T> void impl_IInkPresenter<T>::StrokesErased(long long const cookie) const
{
	check_hresult(shim()->remove_StrokesErased(cookie));
}

template <typename T> Windows::UI::Input::Inking::InkInputProcessingMode impl_IInkInputProcessingConfiguration<T>::Mode() const
{
	Windows::UI::Input::Inking::InkInputProcessingMode value = {};
	check_hresult(shim()->get_Mode(&value));
	return value;
}

template <typename T> void impl_IInkInputProcessingConfiguration<T>::Mode(Windows::UI::Input::Inking::InkInputProcessingMode const value) const
{
	check_hresult(shim()->put_Mode(value));
}

template <typename T> Windows::UI::Input::Inking::InkInputRightDragAction impl_IInkInputProcessingConfiguration<T>::RightDragAction() const
{
	Windows::UI::Input::Inking::InkInputRightDragAction value = {};
	check_hresult(shim()->get_RightDragAction(&value));
	return value;
}

template <typename T> void impl_IInkInputProcessingConfiguration<T>::RightDragAction(Windows::UI::Input::Inking::InkInputRightDragAction const value) const
{
	check_hresult(shim()->put_RightDragAction(value));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> impl_IInkSynchronizer<T>::BeginDry() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> inkStrokes;
	check_hresult(shim()->abi_BeginDry(put(inkStrokes)));
	return inkStrokes;
}

template <typename T> void impl_IInkSynchronizer<T>::EndDry() const
{
	check_hresult(shim()->abi_EndDry());
}

template <typename T> long long impl_IInkUnprocessedInput<T>::PointerEntered(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerEntered(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkUnprocessedInput<T>::PointerEntered(F handler) const
{
	return PointerEntered(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkUnprocessedInput<T>::PointerEntered(long long const cookie) const
{
	check_hresult(shim()->remove_PointerEntered(cookie));
}

template <typename T> long long impl_IInkUnprocessedInput<T>::PointerHovered(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerHovered(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkUnprocessedInput<T>::PointerHovered(F handler) const
{
	return PointerHovered(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkUnprocessedInput<T>::PointerHovered(long long const cookie) const
{
	check_hresult(shim()->remove_PointerHovered(cookie));
}

template <typename T> long long impl_IInkUnprocessedInput<T>::PointerExited(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerExited(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkUnprocessedInput<T>::PointerExited(F handler) const
{
	return PointerExited(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkUnprocessedInput<T>::PointerExited(long long const cookie) const
{
	check_hresult(shim()->remove_PointerExited(cookie));
}

template <typename T> long long impl_IInkUnprocessedInput<T>::PointerPressed(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkUnprocessedInput<T>::PointerPressed(F handler) const
{
	return PointerPressed(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkUnprocessedInput<T>::PointerPressed(long long const cookie) const
{
	check_hresult(shim()->remove_PointerPressed(cookie));
}

template <typename T> long long impl_IInkUnprocessedInput<T>::PointerMoved(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerMoved(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkUnprocessedInput<T>::PointerMoved(F handler) const
{
	return PointerMoved(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkUnprocessedInput<T>::PointerMoved(long long const cookie) const
{
	check_hresult(shim()->remove_PointerMoved(cookie));
}

template <typename T> long long impl_IInkUnprocessedInput<T>::PointerReleased(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerReleased(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkUnprocessedInput<T>::PointerReleased(F handler) const
{
	return PointerReleased(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkUnprocessedInput<T>::PointerReleased(long long const cookie) const
{
	check_hresult(shim()->remove_PointerReleased(cookie));
}

template <typename T> long long impl_IInkUnprocessedInput<T>::PointerLost(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerLost(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkUnprocessedInput<T>::PointerLost(F handler) const
{
	return PointerLost(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkUnprocessedInput<T>::PointerLost(long long const cookie) const
{
	check_hresult(shim()->remove_PointerLost(cookie));
}

template <typename T> Windows::UI::Input::Inking::InkPresenter impl_IInkUnprocessedInput<T>::InkPresenter() const
{
	Windows::UI::Input::Inking::InkPresenter value = nullptr;
	check_hresult(shim()->get_InkPresenter(put(value)));
	return value;
}

template <typename T> long long impl_IInkStrokeInput<T>::StrokeStarted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_StrokeStarted(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkStrokeInput<T>::StrokeStarted(F handler) const
{
	return StrokeStarted(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkStrokeInput<T>::StrokeStarted(long long const cookie) const
{
	check_hresult(shim()->remove_StrokeStarted(cookie));
}

template <typename T> long long impl_IInkStrokeInput<T>::StrokeContinued(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_StrokeContinued(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkStrokeInput<T>::StrokeContinued(F handler) const
{
	return StrokeContinued(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkStrokeInput<T>::StrokeContinued(long long const cookie) const
{
	check_hresult(shim()->remove_StrokeContinued(cookie));
}

template <typename T> long long impl_IInkStrokeInput<T>::StrokeEnded(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_StrokeEnded(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkStrokeInput<T>::StrokeEnded(F handler) const
{
	return StrokeEnded(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkStrokeInput<T>::StrokeEnded(long long const cookie) const
{
	check_hresult(shim()->remove_StrokeEnded(cookie));
}

template <typename T> long long impl_IInkStrokeInput<T>::StrokeCanceled(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_StrokeCanceled(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkStrokeInput<T>::StrokeCanceled(F handler) const
{
	return StrokeCanceled(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkStrokeInput<T>::StrokeCanceled(long long const cookie) const
{
	check_hresult(shim()->remove_StrokeCanceled(cookie));
}

template <typename T> Windows::UI::Input::Inking::InkPresenter impl_IInkStrokeInput<T>::InkPresenter() const
{
	Windows::UI::Input::Inking::InkPresenter value = nullptr;
	check_hresult(shim()->get_InkPresenter(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IInkPoint<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_Position(&value));
	return value;
}

template <typename T> float impl_IInkPoint<T>::Pressure() const
{
	float value = {};
	check_hresult(shim()->get_Pressure(&value));
	return value;
}

template <typename T> Windows::UI::Input::Inking::InkPoint impl_IInkPointFactory<T>::CreateInkPoint(Windows::Foundation::Point const & position, float const pressure) const
{
	Windows::UI::Input::Inking::InkPoint result = nullptr;
	check_hresult(shim()->abi_CreateInkPoint(position, pressure, put(result)));
	return result;
}

template <typename T> Windows::UI::Color impl_IInkDrawingAttributes<T>::Color() const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->get_Color(&value));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes<T>::Color(Windows::UI::Color const & value) const
{
	check_hresult(shim()->put_Color(value));
}

template <typename T> Windows::UI::Input::Inking::PenTipShape impl_IInkDrawingAttributes<T>::PenTip() const
{
	Windows::UI::Input::Inking::PenTipShape value = {};
	check_hresult(shim()->get_PenTip(&value));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes<T>::PenTip(Windows::UI::Input::Inking::PenTipShape const value) const
{
	check_hresult(shim()->put_PenTip(value));
}

template <typename T> Windows::Foundation::Size impl_IInkDrawingAttributes<T>::Size() const
{
	Windows::Foundation::Size value = {};
	check_hresult(shim()->get_Size(&value));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes<T>::Size(Windows::Foundation::Size const & value) const
{
	check_hresult(shim()->put_Size(value));
}

template <typename T> bool impl_IInkDrawingAttributes<T>::IgnorePressure() const
{
	bool value = {};
	check_hresult(shim()->get_IgnorePressure(put(value)));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes<T>::IgnorePressure(bool const value) const
{
	check_hresult(shim()->put_IgnorePressure(value));
}

template <typename T> bool impl_IInkDrawingAttributes<T>::FitToCurve() const
{
	bool value = {};
	check_hresult(shim()->get_FitToCurve(put(value)));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes<T>::FitToCurve(bool const value) const
{
	check_hresult(shim()->put_FitToCurve(value));
}

template <typename T> Windows::Foundation::Numerics::Matrix3x2 impl_IInkDrawingAttributes2<T>::PenTipTransform() const
{
	Windows::Foundation::Numerics::Matrix3x2 value = {};
	check_hresult(shim()->get_PenTipTransform(&value));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes2<T>::PenTipTransform(Windows::Foundation::Numerics::Matrix3x2 const & value) const
{
	check_hresult(shim()->put_PenTipTransform(value));
}

template <typename T> bool impl_IInkDrawingAttributes2<T>::DrawAsHighlighter() const
{
	bool value = {};
	check_hresult(shim()->get_DrawAsHighlighter(put(value)));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes2<T>::DrawAsHighlighter(bool const value) const
{
	check_hresult(shim()->put_DrawAsHighlighter(value));
}

template <typename T> Windows::Foundation::Point impl_IInkStrokeRenderingSegment<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IInkStrokeRenderingSegment<T>::BezierControlPoint1() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_BezierControlPoint1(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IInkStrokeRenderingSegment<T>::BezierControlPoint2() const
{
	Windows::Foundation::Point value = {};
	check_hresult(shim()->get_BezierControlPoint2(&value));
	return value;
}

template <typename T> float impl_IInkStrokeRenderingSegment<T>::Pressure() const
{
	float value = {};
	check_hresult(shim()->get_Pressure(&value));
	return value;
}

template <typename T> float impl_IInkStrokeRenderingSegment<T>::TiltX() const
{
	float value = {};
	check_hresult(shim()->get_TiltX(&value));
	return value;
}

template <typename T> float impl_IInkStrokeRenderingSegment<T>::TiltY() const
{
	float value = {};
	check_hresult(shim()->get_TiltY(&value));
	return value;
}

template <typename T> float impl_IInkStrokeRenderingSegment<T>::Twist() const
{
	float value = {};
	check_hresult(shim()->get_Twist(&value));
	return value;
}

template <typename T> Windows::UI::Input::Inking::InkDrawingAttributes impl_IInkStroke<T>::DrawingAttributes() const
{
	Windows::UI::Input::Inking::InkDrawingAttributes value = nullptr;
	check_hresult(shim()->get_DrawingAttributes(put(value)));
	return value;
}

template <typename T> void impl_IInkStroke<T>::DrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & value) const
{
	check_hresult(shim()->put_DrawingAttributes(get(value)));
}

template <typename T> Windows::Foundation::Rect impl_IInkStroke<T>::BoundingRect() const
{
	Windows::Foundation::Rect value = {};
	check_hresult(shim()->get_BoundingRect(&value));
	return value;
}

template <typename T> bool impl_IInkStroke<T>::Selected() const
{
	bool value = {};
	check_hresult(shim()->get_Selected(put(value)));
	return value;
}

template <typename T> void impl_IInkStroke<T>::Selected(bool const value) const
{
	check_hresult(shim()->put_Selected(value));
}

template <typename T> bool impl_IInkStroke<T>::Recognized() const
{
	bool value = {};
	check_hresult(shim()->get_Recognized(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStrokeRenderingSegment> impl_IInkStroke<T>::GetRenderingSegments() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStrokeRenderingSegment> renderingSegments;
	check_hresult(shim()->abi_GetRenderingSegments(put(renderingSegments)));
	return renderingSegments;
}

template <typename T> Windows::UI::Input::Inking::InkStroke impl_IInkStroke<T>::Clone() const
{
	Windows::UI::Input::Inking::InkStroke clonedStroke = nullptr;
	check_hresult(shim()->abi_Clone(put(clonedStroke)));
	return clonedStroke;
}

template <typename T> Windows::Foundation::Numerics::Matrix3x2 impl_IInkStroke2<T>::PointTransform() const
{
	Windows::Foundation::Numerics::Matrix3x2 value = {};
	check_hresult(shim()->get_PointTransform(&value));
	return value;
}

template <typename T> void impl_IInkStroke2<T>::PointTransform(Windows::Foundation::Numerics::Matrix3x2 const & value) const
{
	check_hresult(shim()->put_PointTransform(value));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkPoint> impl_IInkStroke2<T>::GetInkPoints() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkPoint> inkPoints;
	check_hresult(shim()->abi_GetInkPoints(put(inkPoints)));
	return inkPoints;
}

template <typename T> void impl_IInkStrokeBuilder<T>::BeginStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	check_hresult(shim()->abi_BeginStroke(get(pointerPoint)));
}

template <typename T> Windows::UI::Input::PointerPoint impl_IInkStrokeBuilder<T>::AppendToStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	Windows::UI::Input::PointerPoint previousPointerPoint = nullptr;
	check_hresult(shim()->abi_AppendToStroke(get(pointerPoint), put(previousPointerPoint)));
	return previousPointerPoint;
}

template <typename T> Windows::UI::Input::Inking::InkStroke impl_IInkStrokeBuilder<T>::EndStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	Windows::UI::Input::Inking::InkStroke stroke = nullptr;
	check_hresult(shim()->abi_EndStroke(get(pointerPoint), put(stroke)));
	return stroke;
}

template <typename T> Windows::UI::Input::Inking::InkStroke impl_IInkStrokeBuilder<T>::CreateStroke(Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Point> const & points) const
{
	Windows::UI::Input::Inking::InkStroke stroke = nullptr;
	check_hresult(shim()->abi_CreateStroke(get(points), put(stroke)));
	return stroke;
}

template <typename T> void impl_IInkStrokeBuilder<T>::SetDefaultDrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & drawingAttributes) const
{
	check_hresult(shim()->abi_SetDefaultDrawingAttributes(get(drawingAttributes)));
}

template <typename T> Windows::UI::Input::Inking::InkStroke impl_IInkStrokeBuilder2<T>::CreateStrokeFromInkPoints(Windows::Foundation::Collections::IIterable<Windows::UI::Input::Inking::InkPoint> const & inkPoints, Windows::Foundation::Numerics::Matrix3x2 const & transform) const
{
	Windows::UI::Input::Inking::InkStroke result = nullptr;
	check_hresult(shim()->abi_CreateStrokeFromInkPoints(get(inkPoints), transform, put(result)));
	return result;
}

template <typename T> Windows::Foundation::Rect impl_IInkRecognitionResult<T>::BoundingRect() const
{
	Windows::Foundation::Rect boundingRect = {};
	check_hresult(shim()->get_BoundingRect(&boundingRect));
	return boundingRect;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IInkRecognitionResult<T>::GetTextCandidates() const
{
	Windows::Foundation::Collections::IVectorView<String> textCandidates;
	check_hresult(shim()->abi_GetTextCandidates(put(textCandidates)));
	return textCandidates;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> impl_IInkRecognitionResult<T>::GetStrokes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> strokes;
	check_hresult(shim()->abi_GetStrokes(put(strokes)));
	return strokes;
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::BoundingRect() const
{
	Windows::Foundation::Rect value = {};
	check_hresult(shim()->get_BoundingRect(&value));
	return value;
}

template <typename T> void impl_IInkStrokeContainer<T>::AddStroke(Windows::UI::Input::Inking::InkStroke const & stroke) const
{
	check_hresult(shim()->abi_AddStroke(get(stroke)));
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::DeleteSelected() const
{
	Windows::Foundation::Rect invalidatedRect = {};
	check_hresult(shim()->abi_DeleteSelected(&invalidatedRect));
	return invalidatedRect;
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::MoveSelected(Windows::Foundation::Point const & translation) const
{
	Windows::Foundation::Rect invalidatedRectangle = {};
	check_hresult(shim()->abi_MoveSelected(translation, &invalidatedRectangle));
	return invalidatedRectangle;
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::SelectWithPolyLine(Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Point> const & polyline) const
{
	Windows::Foundation::Rect invalidatedRectangle = {};
	check_hresult(shim()->abi_SelectWithPolyLine(get(polyline), &invalidatedRectangle));
	return invalidatedRectangle;
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::SelectWithLine(Windows::Foundation::Point const & from, Windows::Foundation::Point const & to) const
{
	Windows::Foundation::Rect invalidatedRectangle = {};
	check_hresult(shim()->abi_SelectWithLine(from, to, &invalidatedRectangle));
	return invalidatedRectangle;
}

template <typename T> void impl_IInkStrokeContainer<T>::CopySelectedToClipboard() const
{
	check_hresult(shim()->abi_CopySelectedToClipboard());
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::PasteFromClipboard(Windows::Foundation::Point const & position) const
{
	Windows::Foundation::Rect invalidatedRectangle = {};
	check_hresult(shim()->abi_PasteFromClipboard(position, &invalidatedRectangle));
	return invalidatedRectangle;
}

template <typename T> bool impl_IInkStrokeContainer<T>::CanPasteFromClipboard() const
{
	bool canPaste = {};
	check_hresult(shim()->abi_CanPasteFromClipboard(put(canPaste)));
	return canPaste;
}

template <typename T> Windows::Foundation::IAsyncActionWithProgress<unsigned long long> impl_IInkStrokeContainer<T>::LoadAsync(Windows::Storage::Streams::IInputStream const & inputStream) const
{
	Windows::Foundation::IAsyncActionWithProgress<unsigned long long> loadAction;
	check_hresult(shim()->abi_LoadAsync(get(inputStream), put(loadAction)));
	return loadAction;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> impl_IInkStrokeContainer<T>::SaveAsync(Windows::Storage::Streams::IOutputStream const & outputStream) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> outputStreamOperation;
	check_hresult(shim()->abi_SaveAsync(get(outputStream), put(outputStreamOperation)));
	return outputStreamOperation;
}

template <typename T> void impl_IInkStrokeContainer<T>::UpdateRecognitionResults(Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult> const & recognitionResults) const
{
	check_hresult(shim()->abi_UpdateRecognitionResults(get(recognitionResults)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> impl_IInkStrokeContainer<T>::GetStrokes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> strokeView;
	check_hresult(shim()->abi_GetStrokes(put(strokeView)));
	return strokeView;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult> impl_IInkStrokeContainer<T>::GetRecognitionResults() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult> recognitionResults;
	check_hresult(shim()->abi_GetRecognitionResults(put(recognitionResults)));
	return recognitionResults;
}

template <typename T> void impl_IInkStrokeContainer2<T>::AddStrokes(Windows::Foundation::Collections::IIterable<Windows::UI::Input::Inking::InkStroke> const & strokes) const
{
	check_hresult(shim()->abi_AddStrokes(get(strokes)));
}

template <typename T> void impl_IInkStrokeContainer2<T>::Clear() const
{
	check_hresult(shim()->abi_Clear());
}

template <typename T> String impl_IInkRecognizer<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IInkRecognizerContainer<T>::SetDefaultRecognizer(Windows::UI::Input::Inking::InkRecognizer const & recognizer) const
{
	check_hresult(shim()->abi_SetDefaultRecognizer(get(recognizer)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> impl_IInkRecognizerContainer<T>::RecognizeAsync(Windows::UI::Input::Inking::InkStrokeContainer const & strokeCollection, Windows::UI::Input::Inking::InkRecognitionTarget const recognitionTarget) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> recognitionResults;
	check_hresult(shim()->abi_RecognizeAsync(get(strokeCollection), recognitionTarget, put(recognitionResults)));
	return recognitionResults;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognizer> impl_IInkRecognizerContainer<T>::GetRecognizers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognizer> recognizerView;
	check_hresult(shim()->abi_GetRecognizers(put(recognizerView)));
	return recognizerView;
}

template <typename T> Windows::UI::Input::Inking::InkManipulationMode impl_IInkManager<T>::Mode() const
{
	Windows::UI::Input::Inking::InkManipulationMode value = {};
	check_hresult(shim()->get_Mode(&value));
	return value;
}

template <typename T> void impl_IInkManager<T>::Mode(Windows::UI::Input::Inking::InkManipulationMode const value) const
{
	check_hresult(shim()->put_Mode(value));
}

template <typename T> void impl_IInkManager<T>::ProcessPointerDown(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	check_hresult(shim()->abi_ProcessPointerDown(get(pointerPoint)));
}

template <typename T> IInspectable impl_IInkManager<T>::ProcessPointerUpdate(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	IInspectable updateInformation;
	check_hresult(shim()->abi_ProcessPointerUpdate(get(pointerPoint), put(updateInformation)));
	return updateInformation;
}

template <typename T> Windows::Foundation::Rect impl_IInkManager<T>::ProcessPointerUp(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	Windows::Foundation::Rect updateRectangle = {};
	check_hresult(shim()->abi_ProcessPointerUp(get(pointerPoint), &updateRectangle));
	return updateRectangle;
}

template <typename T> void impl_IInkManager<T>::SetDefaultDrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & drawingAttributes) const
{
	check_hresult(shim()->abi_SetDefaultDrawingAttributes(get(drawingAttributes)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> impl_IInkManager<T>::RecognizeAsync(Windows::UI::Input::Inking::InkRecognitionTarget const recognitionTarget) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> recognitionResults;
	check_hresult(shim()->abi_RecognizeAsync2(recognitionTarget, put(recognitionResults)));
	return recognitionResults;
}

}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Inking { namespace Core {

template <typename T> long long impl_ICoreInkIndependentInputSource<T>::PointerEntering(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerEntering(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreInkIndependentInputSource<T>::PointerEntering(F handler) const
{
	return PointerEntering(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreInkIndependentInputSource<T>::PointerEntering(long long const cookie) const
{
	check_hresult(shim()->remove_PointerEntering(cookie));
}

template <typename T> long long impl_ICoreInkIndependentInputSource<T>::PointerHovering(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerHovering(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreInkIndependentInputSource<T>::PointerHovering(F handler) const
{
	return PointerHovering(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreInkIndependentInputSource<T>::PointerHovering(long long const cookie) const
{
	check_hresult(shim()->remove_PointerHovering(cookie));
}

template <typename T> long long impl_ICoreInkIndependentInputSource<T>::PointerExiting(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerExiting(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreInkIndependentInputSource<T>::PointerExiting(F handler) const
{
	return PointerExiting(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreInkIndependentInputSource<T>::PointerExiting(long long const cookie) const
{
	check_hresult(shim()->remove_PointerExiting(cookie));
}

template <typename T> long long impl_ICoreInkIndependentInputSource<T>::PointerPressing(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerPressing(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreInkIndependentInputSource<T>::PointerPressing(F handler) const
{
	return PointerPressing(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreInkIndependentInputSource<T>::PointerPressing(long long const cookie) const
{
	check_hresult(shim()->remove_PointerPressing(cookie));
}

template <typename T> long long impl_ICoreInkIndependentInputSource<T>::PointerMoving(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerMoving(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreInkIndependentInputSource<T>::PointerMoving(F handler) const
{
	return PointerMoving(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreInkIndependentInputSource<T>::PointerMoving(long long const cookie) const
{
	check_hresult(shim()->remove_PointerMoving(cookie));
}

template <typename T> long long impl_ICoreInkIndependentInputSource<T>::PointerReleasing(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerReleasing(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreInkIndependentInputSource<T>::PointerReleasing(F handler) const
{
	return PointerReleasing(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreInkIndependentInputSource<T>::PointerReleasing(long long const cookie) const
{
	check_hresult(shim()->remove_PointerReleasing(cookie));
}

template <typename T> long long impl_ICoreInkIndependentInputSource<T>::PointerLost(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_PointerLost(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreInkIndependentInputSource<T>::PointerLost(F handler) const
{
	return PointerLost(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreInkIndependentInputSource<T>::PointerLost(long long const cookie) const
{
	check_hresult(shim()->remove_PointerLost(cookie));
}

template <typename T> Windows::UI::Input::Inking::InkPresenter impl_ICoreInkIndependentInputSource<T>::InkPresenter() const
{
	Windows::UI::Input::Inking::InkPresenter value = nullptr;
	check_hresult(shim()->get_InkPresenter(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource impl_ICoreInkIndependentInputSourceStatics<T>::Create(Windows::UI::Input::Inking::InkPresenter const & inkPresenter) const
{
	Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource inkIndependentInputSource = nullptr;
	check_hresult(shim()->abi_Create(get(inkPresenter), put(inkIndependentInputSource)));
	return inkIndependentInputSource;
}

}}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Popups {

template <typename T> void impl_IUICommandInvokedHandler<T>::Invoke(Windows::UI::Popups::IUICommand const & command) const
{
	check_hresult(shim()->abi_Invoke(get(command)));
}

template <typename T> String impl_IMessageDialog<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IMessageDialog<T>::Title(StringReference const & value) const
{
	check_hresult(shim()->put_Title(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> impl_IMessageDialog<T>::Commands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> value;
	check_hresult(shim()->get_Commands(put(value)));
	return value;
}

template <typename T> unsigned impl_IMessageDialog<T>::DefaultCommandIndex() const
{
	unsigned value = {};
	check_hresult(shim()->get_DefaultCommandIndex(&value));
	return value;
}

template <typename T> void impl_IMessageDialog<T>::DefaultCommandIndex(unsigned const value) const
{
	check_hresult(shim()->put_DefaultCommandIndex(value));
}

template <typename T> unsigned impl_IMessageDialog<T>::CancelCommandIndex() const
{
	unsigned value = {};
	check_hresult(shim()->get_CancelCommandIndex(&value));
	return value;
}

template <typename T> void impl_IMessageDialog<T>::CancelCommandIndex(unsigned const value) const
{
	check_hresult(shim()->put_CancelCommandIndex(value));
}

template <typename T> String impl_IMessageDialog<T>::Content() const
{
	String value;
	check_hresult(shim()->get_Content(put(value)));
	return value;
}

template <typename T> void impl_IMessageDialog<T>::Content(StringReference const & value) const
{
	check_hresult(shim()->put_Content(get(value)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_IMessageDialog<T>::ShowAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> messageDialogAsyncOperation;
	check_hresult(shim()->abi_ShowAsync(put(messageDialogAsyncOperation)));
	return messageDialogAsyncOperation;
}

template <typename T> Windows::UI::Popups::MessageDialogOptions impl_IMessageDialog<T>::Options() const
{
	Windows::UI::Popups::MessageDialogOptions value = {};
	check_hresult(shim()->get_Options(&value));
	return value;
}

template <typename T> void impl_IMessageDialog<T>::Options(Windows::UI::Popups::MessageDialogOptions const value) const
{
	check_hresult(shim()->put_Options(value));
}

template <typename T> Windows::UI::Popups::MessageDialog impl_IMessageDialogFactory<T>::Create(StringReference const & content) const
{
	Windows::UI::Popups::MessageDialog messageDialog = nullptr;
	check_hresult(shim()->abi_Create(get(content), put(messageDialog)));
	return messageDialog;
}

template <typename T> Windows::UI::Popups::MessageDialog impl_IMessageDialogFactory<T>::CreateWithTitle(StringReference const & content, StringReference const & title) const
{
	Windows::UI::Popups::MessageDialog messageDialog = nullptr;
	check_hresult(shim()->abi_CreateWithTitle(get(content), get(title), put(messageDialog)));
	return messageDialog;
}

template <typename T> String impl_IUICommand<T>::Label() const
{
	String value;
	check_hresult(shim()->get_Label(put(value)));
	return value;
}

template <typename T> void impl_IUICommand<T>::Label(StringReference const & value) const
{
	check_hresult(shim()->put_Label(get(value)));
}

template <typename T> Windows::UI::Popups::IUICommandInvokedHandler impl_IUICommand<T>::Invoked() const
{
	Windows::UI::Popups::IUICommandInvokedHandler value = {};
	check_hresult(shim()->get_Invoked(put(value)));
	return value;
}

template <typename T> void impl_IUICommand<T>::Invoked(Windows::UI::Popups::IUICommandInvokedHandler const & value) const
{
	check_hresult(shim()->put_Invoked(get(value)));
}

template <typename T> template <typename F> void impl_IUICommand<T>::Invoked(F value) const
{
	Invoked(Windows::UI::Popups::UICommandInvokedHandler(value));
}

template <typename T> IInspectable impl_IUICommand<T>::Id() const
{
	IInspectable value;
	check_hresult(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_IUICommand<T>::Id(IInspectable const & value) const
{
	check_hresult(shim()->put_Id(get(value)));
}

template <typename T> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::Create(StringReference const & label) const
{
	Windows::UI::Popups::UICommand instance = nullptr;
	check_hresult(shim()->abi_Create(get(label), put(instance)));
	return instance;
}

template <typename T> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::CreateWithHandler(StringReference const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action) const
{
	Windows::UI::Popups::UICommand instance = nullptr;
	check_hresult(shim()->abi_CreateWithHandler(get(label), get(action), put(instance)));
	return instance;
}

template <typename T> template <typename F> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::CreateWithHandler(StringReference const & label, F action) const
{
	return CreateWithHandler(label, Windows::UI::Popups::UICommandInvokedHandler(action));
}

template <typename T> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::CreateWithHandlerAndId(StringReference const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId) const
{
	Windows::UI::Popups::UICommand instance = nullptr;
	check_hresult(shim()->abi_CreateWithHandlerAndId(get(label), get(action), get(commandId), put(instance)));
	return instance;
}

template <typename T> template <typename F> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::CreateWithHandlerAndId(StringReference const & label, F action, IInspectable const & commandId) const
{
	return CreateWithHandlerAndId(label, Windows::UI::Popups::UICommandInvokedHandler(action), commandId);
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> impl_IPopupMenu<T>::Commands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> value;
	check_hresult(shim()->get_Commands(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_IPopupMenu<T>::ShowAsync(Windows::Foundation::Point const & invocationPoint) const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> asyncOperation;
	check_hresult(shim()->abi_ShowAsync(invocationPoint, put(asyncOperation)));
	return asyncOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_IPopupMenu<T>::ShowForSelectionAsync(Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> asyncOperation;
	check_hresult(shim()->abi_ShowAsyncWithRect(selection, put(asyncOperation)));
	return asyncOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_IPopupMenu<T>::ShowForSelectionAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> asyncOperation;
	check_hresult(shim()->abi_ShowAsyncWithRectAndPlacement(selection, preferredPlacement, put(asyncOperation)));
	return asyncOperation;
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace ViewManagement {

template <typename T> void impl_IApplicationViewSwitcherStatics<T>::DisableShowingMainViewOnActivation() const
{
	check_hresult(shim()->abi_DisableShowingMainViewOnActivation());
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IApplicationViewSwitcherStatics<T>::TryShowAsStandaloneAsync(int const viewId) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_TryShowAsStandaloneAsync(viewId, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IApplicationViewSwitcherStatics<T>::TryShowAsStandaloneAsync(int const viewId, Windows::UI::ViewManagement::ViewSizePreference const sizePreference) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_TryShowAsStandaloneWithSizePreferenceAsync(viewId, sizePreference, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IApplicationViewSwitcherStatics<T>::TryShowAsStandaloneAsync(int const viewId, Windows::UI::ViewManagement::ViewSizePreference const sizePreference, int const anchorViewId, Windows::UI::ViewManagement::ViewSizePreference const anchorSizePreference) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_TryShowAsStandaloneWithAnchorViewAndSizePreferenceAsync(viewId, sizePreference, anchorViewId, anchorSizePreference, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationViewSwitcherStatics<T>::SwitchAsync(int const viewId) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_SwitchAsync(viewId, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationViewSwitcherStatics<T>::SwitchAsync(int const toViewId, int const fromViewId) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_SwitchFromViewAsync(toViewId, fromViewId, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationViewSwitcherStatics<T>::SwitchAsync(int const toViewId, int const fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions const options) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_SwitchFromViewWithOptionsAsync(toViewId, fromViewId, options, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IApplicationViewSwitcherStatics<T>::PrepareForCustomAnimatedSwitchAsync(int const toViewId, int const fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions const options) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_PrepareForCustomAnimatedSwitchAsync(toViewId, fromViewId, options, put(operation)));
	return operation;
}

template <typename T> void impl_IApplicationViewSwitcherStatics2<T>::DisableSystemViewActivationPolicy() const
{
	check_hresult(shim()->abi_DisableSystemViewActivationPolicy());
}

template <typename T> int impl_IApplicationViewInteropStatics<T>::GetApplicationViewIdForWindow(Windows::UI::Core::ICoreWindow const & window) const
{
	int id = {};
	check_hresult(shim()->abi_GetApplicationViewIdForWindow(get(window), &id));
	return id;
}

template <typename T> Windows::UI::ViewManagement::ApplicationViewState impl_IApplicationViewStatics<T>::Value() const
{
	Windows::UI::ViewManagement::ApplicationViewState value = {};
	check_hresult(shim()->get_Value(&value));
	return value;
}

template <typename T> bool impl_IApplicationViewStatics<T>::TryUnsnap() const
{
	bool success = {};
	check_hresult(shim()->abi_TryUnsnap(put(success)));
	return success;
}

template <typename T> Windows::UI::ViewManagement::ApplicationView impl_IApplicationViewStatics2<T>::GetForCurrentView() const
{
	Windows::UI::ViewManagement::ApplicationView current = nullptr;
	check_hresult(shim()->abi_GetForCurrentView(put(current)));
	return current;
}

template <typename T> bool impl_IApplicationViewStatics2<T>::TerminateAppOnFinalViewClose() const
{
	bool value = {};
	check_hresult(shim()->get_TerminateAppOnFinalViewClose(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewStatics2<T>::TerminateAppOnFinalViewClose(bool const value) const
{
	check_hresult(shim()->put_TerminateAppOnFinalViewClose(value));
}

template <typename T> Windows::UI::ViewManagement::ApplicationViewWindowingMode impl_IApplicationViewStatics3<T>::PreferredLaunchWindowingMode() const
{
	Windows::UI::ViewManagement::ApplicationViewWindowingMode value = {};
	check_hresult(shim()->get_PreferredLaunchWindowingMode(&value));
	return value;
}

template <typename T> void impl_IApplicationViewStatics3<T>::PreferredLaunchWindowingMode(Windows::UI::ViewManagement::ApplicationViewWindowingMode const value) const
{
	check_hresult(shim()->put_PreferredLaunchWindowingMode(value));
}

template <typename T> Windows::Foundation::Size impl_IApplicationViewStatics3<T>::PreferredLaunchViewSize() const
{
	Windows::Foundation::Size value = {};
	check_hresult(shim()->get_PreferredLaunchViewSize(&value));
	return value;
}

template <typename T> void impl_IApplicationViewStatics3<T>::PreferredLaunchViewSize(Windows::Foundation::Size const & value) const
{
	check_hresult(shim()->put_PreferredLaunchViewSize(value));
}

template <typename T> Windows::UI::ViewManagement::ApplicationViewOrientation impl_IApplicationView<T>::Orientation() const
{
	Windows::UI::ViewManagement::ApplicationViewOrientation value = {};
	check_hresult(shim()->get_Orientation(&value));
	return value;
}

template <typename T> bool impl_IApplicationView<T>::AdjacentToLeftDisplayEdge() const
{
	bool value = {};
	check_hresult(shim()->get_AdjacentToLeftDisplayEdge(put(value)));
	return value;
}

template <typename T> bool impl_IApplicationView<T>::AdjacentToRightDisplayEdge() const
{
	bool value = {};
	check_hresult(shim()->get_AdjacentToRightDisplayEdge(put(value)));
	return value;
}

template <typename T> bool impl_IApplicationView<T>::IsFullScreen() const
{
	bool value = {};
	check_hresult(shim()->get_IsFullScreen(put(value)));
	return value;
}

template <typename T> bool impl_IApplicationView<T>::IsOnLockScreen() const
{
	bool value = {};
	check_hresult(shim()->get_IsOnLockScreen(put(value)));
	return value;
}

template <typename T> bool impl_IApplicationView<T>::IsScreenCaptureEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_IsScreenCaptureEnabled(put(value)));
	return value;
}

template <typename T> void impl_IApplicationView<T>::IsScreenCaptureEnabled(bool const value) const
{
	check_hresult(shim()->put_IsScreenCaptureEnabled(value));
}

template <typename T> void impl_IApplicationView<T>::Title(StringReference const & value) const
{
	check_hresult(shim()->put_Title(get(value)));
}

template <typename T> String impl_IApplicationView<T>::Title() const
{
	String value;
	check_hresult(shim()->get_Title(put(value)));
	return value;
}

template <typename T> int impl_IApplicationView<T>::Id() const
{
	int value = {};
	check_hresult(shim()->get_Id(&value));
	return value;
}

template <typename T> long long impl_IApplicationView<T>::Consolidated(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::ApplicationView, Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Consolidated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IApplicationView<T>::Consolidated(F handler) const
{
	return Consolidated(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::ApplicationView, Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs>(handler));
}

template <typename T> void impl_IApplicationView<T>::Consolidated(long long const token) const
{
	check_hresult(shim()->remove_Consolidated(token));
}

template <typename T> bool impl_IApplicationView2<T>::SuppressSystemOverlays() const
{
	bool value = {};
	check_hresult(shim()->get_SuppressSystemOverlays(put(value)));
	return value;
}

template <typename T> void impl_IApplicationView2<T>::SuppressSystemOverlays(bool const value) const
{
	check_hresult(shim()->put_SuppressSystemOverlays(value));
}

template <typename T> Windows::Foundation::Rect impl_IApplicationView2<T>::VisibleBounds() const
{
	Windows::Foundation::Rect value = {};
	check_hresult(shim()->get_VisibleBounds(&value));
	return value;
}

template <typename T> long long impl_IApplicationView2<T>::VisibleBoundsChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::ApplicationView, IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_VisibleBoundsChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IApplicationView2<T>::VisibleBoundsChanged(F handler) const
{
	return VisibleBoundsChanged(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::ApplicationView, IInspectable>(handler));
}

template <typename T> void impl_IApplicationView2<T>::VisibleBoundsChanged(long long const token) const
{
	check_hresult(shim()->remove_VisibleBoundsChanged(token));
}

template <typename T> bool impl_IApplicationView2<T>::SetDesiredBoundsMode(Windows::UI::ViewManagement::ApplicationViewBoundsMode const boundsMode) const
{
	bool success = {};
	check_hresult(shim()->abi_SetDesiredBoundsMode(boundsMode, put(success)));
	return success;
}

template <typename T> Windows::UI::ViewManagement::ApplicationViewBoundsMode impl_IApplicationView2<T>::DesiredBoundsMode() const
{
	Windows::UI::ViewManagement::ApplicationViewBoundsMode value = {};
	check_hresult(shim()->get_DesiredBoundsMode(&value));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check_hresult(shim()->put_ForegroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ForegroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check_hresult(shim()->get_ForegroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::BackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check_hresult(shim()->put_BackgroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::BackgroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check_hresult(shim()->get_BackgroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ButtonForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check_hresult(shim()->put_ButtonForegroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ButtonForegroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check_hresult(shim()->get_ButtonForegroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ButtonBackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check_hresult(shim()->put_ButtonBackgroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ButtonBackgroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check_hresult(shim()->get_ButtonBackgroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ButtonHoverForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check_hresult(shim()->put_ButtonHoverForegroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ButtonHoverForegroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check_hresult(shim()->get_ButtonHoverForegroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ButtonHoverBackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check_hresult(shim()->put_ButtonHoverBackgroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ButtonHoverBackgroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check_hresult(shim()->get_ButtonHoverBackgroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ButtonPressedForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check_hresult(shim()->put_ButtonPressedForegroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ButtonPressedForegroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check_hresult(shim()->get_ButtonPressedForegroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ButtonPressedBackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check_hresult(shim()->put_ButtonPressedBackgroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ButtonPressedBackgroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check_hresult(shim()->get_ButtonPressedBackgroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::InactiveForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check_hresult(shim()->put_InactiveForegroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::InactiveForegroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check_hresult(shim()->get_InactiveForegroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::InactiveBackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check_hresult(shim()->put_InactiveBackgroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::InactiveBackgroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check_hresult(shim()->get_InactiveBackgroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ButtonInactiveForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check_hresult(shim()->put_ButtonInactiveForegroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ButtonInactiveForegroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check_hresult(shim()->get_ButtonInactiveForegroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ButtonInactiveBackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check_hresult(shim()->put_ButtonInactiveBackgroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ButtonInactiveBackgroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check_hresult(shim()->get_ButtonInactiveBackgroundColor(put(value)));
	return value;
}

template <typename T> Windows::UI::ViewManagement::ApplicationViewTitleBar impl_IApplicationView3<T>::TitleBar() const
{
	Windows::UI::ViewManagement::ApplicationViewTitleBar value = nullptr;
	check_hresult(shim()->get_TitleBar(put(value)));
	return value;
}

template <typename T> Windows::UI::ViewManagement::FullScreenSystemOverlayMode impl_IApplicationView3<T>::FullScreenSystemOverlayMode() const
{
	Windows::UI::ViewManagement::FullScreenSystemOverlayMode value = {};
	check_hresult(shim()->get_FullScreenSystemOverlayMode(&value));
	return value;
}

template <typename T> void impl_IApplicationView3<T>::FullScreenSystemOverlayMode(Windows::UI::ViewManagement::FullScreenSystemOverlayMode const value) const
{
	check_hresult(shim()->put_FullScreenSystemOverlayMode(value));
}

template <typename T> bool impl_IApplicationView3<T>::IsFullScreenMode() const
{
	bool value = {};
	check_hresult(shim()->get_IsFullScreenMode(put(value)));
	return value;
}

template <typename T> bool impl_IApplicationView3<T>::TryEnterFullScreenMode() const
{
	bool success = {};
	check_hresult(shim()->abi_TryEnterFullScreenMode(put(success)));
	return success;
}

template <typename T> void impl_IApplicationView3<T>::ExitFullScreenMode() const
{
	check_hresult(shim()->abi_ExitFullScreenMode());
}

template <typename T> void impl_IApplicationView3<T>::ShowStandardSystemOverlays() const
{
	check_hresult(shim()->abi_ShowStandardSystemOverlays());
}

template <typename T> bool impl_IApplicationView3<T>::TryResizeView(Windows::Foundation::Size const & value) const
{
	bool success = {};
	check_hresult(shim()->abi_TryResizeView(value, put(success)));
	return success;
}

template <typename T> void impl_IApplicationView3<T>::SetPreferredMinSize(Windows::Foundation::Size const & minSize) const
{
	check_hresult(shim()->abi_SetPreferredMinSize(minSize));
}

template <typename T> bool impl_IApplicationViewFullscreenStatics<T>::TryUnsnapToFullscreen() const
{
	bool success = {};
	check_hresult(shim()->abi_TryUnsnapToFullscreen(put(success)));
	return success;
}

template <typename T> bool impl_IApplicationViewConsolidatedEventArgs<T>::IsUserInitiated() const
{
	bool value = {};
	check_hresult(shim()->get_IsUserInitiated(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IActivationViewSwitcher<T>::ShowAsStandaloneAsync(int const viewId) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_ShowAsStandaloneAsync(viewId, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IActivationViewSwitcher<T>::ShowAsStandaloneAsync(int const viewId, Windows::UI::ViewManagement::ViewSizePreference const sizePreference) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_ShowAsStandaloneWithSizePreferenceAsync(viewId, sizePreference, put(operation)));
	return operation;
}

template <typename T> bool impl_IActivationViewSwitcher<T>::IsViewPresentedOnActivationVirtualDesktop(int const viewId) const
{
	bool value = {};
	check_hresult(shim()->abi_IsViewPresentedOnActivationVirtualDesktop(viewId, put(value)));
	return value;
}

template <typename T> int impl_IApplicationViewTransferContext<T>::ViewId() const
{
	int value = {};
	check_hresult(shim()->get_ViewId(&value));
	return value;
}

template <typename T> void impl_IApplicationViewTransferContext<T>::ViewId(int const value) const
{
	check_hresult(shim()->put_ViewId(value));
}

template <typename T> String impl_IApplicationViewTransferContextStatics<T>::DataPackageFormatId() const
{
	String value;
	check_hresult(shim()->get_DataPackageFormatId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IInputPaneVisibilityEventArgs<T>::OccludedRect() const
{
	Windows::Foundation::Rect value = {};
	check_hresult(shim()->get_OccludedRect(&value));
	return value;
}

template <typename T> void impl_IInputPaneVisibilityEventArgs<T>::EnsuredFocusedElementInView(bool const value) const
{
	check_hresult(shim()->put_EnsuredFocusedElementInView(value));
}

template <typename T> bool impl_IInputPaneVisibilityEventArgs<T>::EnsuredFocusedElementInView() const
{
	bool value = {};
	check_hresult(shim()->get_EnsuredFocusedElementInView(put(value)));
	return value;
}

template <typename T> long long impl_IInputPane<T>::Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Showing(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IInputPane<T>::Showing(F handler) const
{
	return Showing(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs>(handler));
}

template <typename T> void impl_IInputPane<T>::Showing(long long const token) const
{
	check_hresult(shim()->remove_Showing(token));
}

template <typename T> long long impl_IInputPane<T>::Hiding(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_Hiding(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IInputPane<T>::Hiding(F handler) const
{
	return Hiding(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs>(handler));
}

template <typename T> void impl_IInputPane<T>::Hiding(long long const token) const
{
	check_hresult(shim()->remove_Hiding(token));
}

template <typename T> Windows::Foundation::Rect impl_IInputPane<T>::OccludedRect() const
{
	Windows::Foundation::Rect value = {};
	check_hresult(shim()->get_OccludedRect(&value));
	return value;
}

template <typename T> bool impl_IInputPane2<T>::TryShow() const
{
	bool result = {};
	check_hresult(shim()->abi_TryShow(put(result)));
	return result;
}

template <typename T> bool impl_IInputPane2<T>::TryHide() const
{
	bool result = {};
	check_hresult(shim()->abi_TryHide(put(result)));
	return result;
}

template <typename T> bool impl_IInputPaneControl<T>::Visible() const
{
	bool value = {};
	check_hresult(shim()->get_Visible(put(value)));
	return value;
}

template <typename T> void impl_IInputPaneControl<T>::Visible(bool const value) const
{
	check_hresult(shim()->put_Visible(value));
}

template <typename T> Windows::UI::ViewManagement::InputPane impl_IInputPaneStatics<T>::GetForCurrentView() const
{
	Windows::UI::ViewManagement::InputPane inputPane = nullptr;
	check_hresult(shim()->abi_GetForCurrentView(put(inputPane)));
	return inputPane;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IProjectionManagerStatics<T>::StartProjectingAsync(int const projectionViewId, int const anchorViewId) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_StartProjectingAsync(projectionViewId, anchorViewId, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IProjectionManagerStatics<T>::SwapDisplaysForViewsAsync(int const projectionViewId, int const anchorViewId) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_SwapDisplaysForViewsAsync(projectionViewId, anchorViewId, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IProjectionManagerStatics<T>::StopProjectingAsync(int const projectionViewId, int const anchorViewId) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_StopProjectingAsync(projectionViewId, anchorViewId, put(operation)));
	return operation;
}

template <typename T> bool impl_IProjectionManagerStatics<T>::ProjectionDisplayAvailable() const
{
	bool value = {};
	check_hresult(shim()->get_ProjectionDisplayAvailable(put(value)));
	return value;
}

template <typename T> long long impl_IProjectionManagerStatics<T>::ProjectionDisplayAvailableChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check_hresult(shim()->add_ProjectionDisplayAvailableChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IProjectionManagerStatics<T>::ProjectionDisplayAvailableChanged(F handler) const
{
	return ProjectionDisplayAvailableChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IProjectionManagerStatics<T>::ProjectionDisplayAvailableChanged(long long const token) const
{
	check_hresult(shim()->remove_ProjectionDisplayAvailableChanged(token));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IProjectionManagerStatics2<T>::StartProjectingAsync(int const projectionViewId, int const anchorViewId, Windows::Devices::Enumeration::DeviceInformation const & displayDeviceInfo) const
{
	Windows::Foundation::IAsyncAction operation;
	check_hresult(shim()->abi_StartProjectingWithDeviceInfoAsync(projectionViewId, anchorViewId, get(displayDeviceInfo), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IProjectionManagerStatics2<T>::RequestStartProjectingAsync(int const projectionViewId, int const anchorViewId, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_RequestStartProjectingAsync(projectionViewId, anchorViewId, selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IProjectionManagerStatics2<T>::RequestStartProjectingAsync(int const projectionViewId, int const anchorViewId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const prefferedPlacement) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check_hresult(shim()->abi_RequestStartProjectingWithPlacementAsync(projectionViewId, anchorViewId, selection, prefferedPlacement, put(operation)));
	return operation;
}

template <typename T> String impl_IProjectionManagerStatics2<T>::GetDeviceSelector() const
{
	String selector;
	check_hresult(shim()->abi_GetDeviceSelector(put(selector)));
	return selector;
}

template <typename T> Windows::UI::ViewManagement::UserInteractionMode impl_IUIViewSettings<T>::UserInteractionMode() const
{
	Windows::UI::ViewManagement::UserInteractionMode value = {};
	check_hresult(shim()->get_UserInteractionMode(&value));
	return value;
}

template <typename T> Windows::UI::ViewManagement::UIViewSettings impl_IUIViewSettingsStatics<T>::GetForCurrentView() const
{
	Windows::UI::ViewManagement::UIViewSettings current = nullptr;
	check_hresult(shim()->abi_GetForCurrentView(put(current)));
	return current;
}

template <typename T> bool impl_IAccessibilitySettings<T>::HighContrast() const
{
	bool value = {};
	check_hresult(shim()->get_HighContrast(put(value)));
	return value;
}

template <typename T> String impl_IAccessibilitySettings<T>::HighContrastScheme() const
{
	String value;
	check_hresult(shim()->get_HighContrastScheme(put(value)));
	return value;
}

template <typename T> long long impl_IAccessibilitySettings<T>::HighContrastChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::AccessibilitySettings, IInspectable> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_HighContrastChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IAccessibilitySettings<T>::HighContrastChanged(F handler) const
{
	return HighContrastChanged(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::AccessibilitySettings, IInspectable>(handler));
}

template <typename T> void impl_IAccessibilitySettings<T>::HighContrastChanged(long long const cookie) const
{
	check_hresult(shim()->remove_HighContrastChanged(cookie));
}

template <typename T> Windows::UI::ViewManagement::HandPreference impl_IUISettings<T>::HandPreference() const
{
	Windows::UI::ViewManagement::HandPreference value = {};
	check_hresult(shim()->get_HandPreference(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IUISettings<T>::CursorSize() const
{
	Windows::Foundation::Size value = {};
	check_hresult(shim()->get_CursorSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IUISettings<T>::ScrollBarSize() const
{
	Windows::Foundation::Size value = {};
	check_hresult(shim()->get_ScrollBarSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IUISettings<T>::ScrollBarArrowSize() const
{
	Windows::Foundation::Size value = {};
	check_hresult(shim()->get_ScrollBarArrowSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IUISettings<T>::ScrollBarThumbBoxSize() const
{
	Windows::Foundation::Size value = {};
	check_hresult(shim()->get_ScrollBarThumbBoxSize(&value));
	return value;
}

template <typename T> unsigned impl_IUISettings<T>::MessageDuration() const
{
	unsigned value = {};
	check_hresult(shim()->get_MessageDuration(&value));
	return value;
}

template <typename T> bool impl_IUISettings<T>::AnimationsEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_AnimationsEnabled(put(value)));
	return value;
}

template <typename T> bool impl_IUISettings<T>::CaretBrowsingEnabled() const
{
	bool value = {};
	check_hresult(shim()->get_CaretBrowsingEnabled(put(value)));
	return value;
}

template <typename T> unsigned impl_IUISettings<T>::CaretBlinkRate() const
{
	unsigned value = {};
	check_hresult(shim()->get_CaretBlinkRate(&value));
	return value;
}

template <typename T> unsigned impl_IUISettings<T>::CaretWidth() const
{
	unsigned value = {};
	check_hresult(shim()->get_CaretWidth(&value));
	return value;
}

template <typename T> unsigned impl_IUISettings<T>::DoubleClickTime() const
{
	unsigned value = {};
	check_hresult(shim()->get_DoubleClickTime(&value));
	return value;
}

template <typename T> unsigned impl_IUISettings<T>::MouseHoverTime() const
{
	unsigned value = {};
	check_hresult(shim()->get_MouseHoverTime(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IUISettings<T>::UIElementColor(Windows::UI::ViewManagement::UIElementType const desiredElement) const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->abi_UIElementColor(desiredElement, &value));
	return value;
}

template <typename T> double impl_IUISettings2<T>::TextScaleFactor() const
{
	double value = {};
	check_hresult(shim()->get_TextScaleFactor(&value));
	return value;
}

template <typename T> long long impl_IUISettings2<T>::TextScaleFactorChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::UISettings, IInspectable> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_TextScaleFactorChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IUISettings2<T>::TextScaleFactorChanged(F handler) const
{
	return TextScaleFactorChanged(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::UISettings, IInspectable>(handler));
}

template <typename T> void impl_IUISettings2<T>::TextScaleFactorChanged(long long const cookie) const
{
	check_hresult(shim()->remove_TextScaleFactorChanged(cookie));
}

template <typename T> Windows::UI::Color impl_IUISettings3<T>::GetColorValue(Windows::UI::ViewManagement::UIColorType const desiredColor) const
{
	Windows::UI::Color value = {};
	check_hresult(shim()->abi_GetColorValue(desiredColor, &value));
	return value;
}

template <typename T> long long impl_IUISettings3<T>::ColorValuesChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::UISettings, IInspectable> const & handler) const
{
	long long cookie = {};
	check_hresult(shim()->add_ColorValuesChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IUISettings3<T>::ColorValuesChanged(F handler) const
{
	return ColorValuesChanged(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::UISettings, IInspectable>(handler));
}

template <typename T> void impl_IUISettings3<T>::ColorValuesChanged(long long const cookie) const
{
	check_hresult(shim()->remove_ColorValuesChanged(cookie));
}

template <typename T> bool impl_IApplicationViewScalingStatics<T>::DisableLayoutScaling() const
{
	bool value = {};
	check_hresult(shim()->get_DisableLayoutScaling(put(value)));
	return value;
}

template <typename T> bool impl_IApplicationViewScalingStatics<T>::TrySetDisableLayoutScaling(bool const disableLayoutScaling) const
{
	bool success = {};
	check_hresult(shim()->abi_TrySetDisableLayoutScaling(disableLayoutScaling, put(success)));
	return success;
}

}}}}

namespace winrt { namespace Windows { namespace Web {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> impl_IUriToStreamResolver<T>::UriToStreamAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> operation;
	check_hresult(shim()->abi_UriToStreamAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Web::WebErrorStatus impl_IWebErrorStatics<T>::GetStatus(int const hresult) const
{
	Windows::Web::WebErrorStatus status = {};
	check_hresult(shim()->abi_GetStatus(hresult, &status));
	return status;
}

}}}

namespace winrt { namespace Windows { namespace Web { namespace Http {

template <typename T> Windows::Web::Http::HttpClient impl_IHttpClientFactory<T>::Create(Windows::Web::Http::Filters::IHttpFilter const & filter) const
{
	Windows::Web::Http::HttpClient client = nullptr;
	check_hresult(shim()->abi_Create(get(filter), put(client)));
	return client;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::DeleteAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> operation;
	check_hresult(shim()->abi_DeleteAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::GetAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> operation;
	check_hresult(shim()->abi_GetAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::GetAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::HttpCompletionOption const completionOption) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> operation;
	check_hresult(shim()->abi_GetWithOptionAsync(get(uri), completionOption, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::GetBufferAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, winrt::Windows::Web::Http::HttpProgress> operation;
	check_hresult(shim()->abi_GetBufferAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::GetInputStreamAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, winrt::Windows::Web::Http::HttpProgress> operation;
	check_hresult(shim()->abi_GetInputStreamAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<String, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::GetStringAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<String, winrt::Windows::Web::Http::HttpProgress> operation;
	check_hresult(shim()->abi_GetStringAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::PostAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::IHttpContent const & content) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> operation;
	check_hresult(shim()->abi_PostAsync(get(uri), get(content), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::PutAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::IHttpContent const & content) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> operation;
	check_hresult(shim()->abi_PutAsync(get(uri), get(content), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> operation;
	check_hresult(shim()->abi_SendRequestAsync(get(request), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request, Windows::Web::Http::HttpCompletionOption const completionOption) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> operation;
	check_hresult(shim()->abi_SendRequestWithOptionAsync(get(request), completionOption, put(operation)));
	return operation;
}

template <typename T> Windows::Web::Http::Headers::HttpRequestHeaderCollection impl_IHttpClient<T>::DefaultRequestHeaders() const
{
	Windows::Web::Http::Headers::HttpRequestHeaderCollection value = nullptr;
	check_hresult(shim()->get_DefaultRequestHeaders(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpContentHeaderCollection impl_IHttpContent<T>::Headers() const
{
	Windows::Web::Http::Headers::HttpContentHeaderCollection value = nullptr;
	check_hresult(shim()->get_Headers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> impl_IHttpContent<T>::BufferAllAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> operation;
	check_hresult(shim()->abi_BufferAllAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned long long> impl_IHttpContent<T>::ReadAsBufferAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned long long> operation;
	check_hresult(shim()->abi_ReadAsBufferAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, unsigned long long> impl_IHttpContent<T>::ReadAsInputStreamAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, unsigned long long> operation;
	check_hresult(shim()->abi_ReadAsInputStreamAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<String, unsigned long long> impl_IHttpContent<T>::ReadAsStringAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<String, unsigned long long> operation;
	check_hresult(shim()->abi_ReadAsStringAsync(put(operation)));
	return operation;
}

template <typename T> bool impl_IHttpContent<T>::TryComputeLength(unsigned long long & length) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryComputeLength(&length, put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> impl_IHttpContent<T>::WriteToStreamAsync(Windows::Storage::Streams::IOutputStream const & outputStream) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> operation;
	check_hresult(shim()->abi_WriteToStreamAsync(get(outputStream), put(operation)));
	return operation;
}

template <typename T> bool impl_IHttpCookieManager<T>::SetCookie(Windows::Web::Http::HttpCookie const & cookie) const
{
	bool replaced = {};
	check_hresult(shim()->abi_SetCookie(get(cookie), put(replaced)));
	return replaced;
}

template <typename T> bool impl_IHttpCookieManager<T>::SetCookie(Windows::Web::Http::HttpCookie const & cookie, bool const thirdParty) const
{
	bool replaced = {};
	check_hresult(shim()->abi_SetCookieWithThirdParty(get(cookie), thirdParty, put(replaced)));
	return replaced;
}

template <typename T> void impl_IHttpCookieManager<T>::DeleteCookie(Windows::Web::Http::HttpCookie const & cookie) const
{
	check_hresult(shim()->abi_DeleteCookie(get(cookie)));
}

template <typename T> Windows::Web::Http::HttpCookieCollection impl_IHttpCookieManager<T>::GetCookies(Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Http::HttpCookieCollection value = nullptr;
	check_hresult(shim()->abi_GetCookies(get(uri), put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpCookie impl_IHttpCookieFactory<T>::Create(StringReference const & name, StringReference const & domain, StringReference const & path) const
{
	Windows::Web::Http::HttpCookie cookie = nullptr;
	check_hresult(shim()->abi_Create(get(name), get(domain), get(path), put(cookie)));
	return cookie;
}

template <typename T> String impl_IHttpCookie<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IHttpCookie<T>::Domain() const
{
	String value;
	check_hresult(shim()->get_Domain(put(value)));
	return value;
}

template <typename T> String impl_IHttpCookie<T>::Path() const
{
	String value;
	check_hresult(shim()->get_Path(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IHttpCookie<T>::Expires() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check_hresult(shim()->get_Expires(put(value)));
	return value;
}

template <typename T> void impl_IHttpCookie<T>::Expires(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check_hresult(shim()->put_Expires(get(value)));
}

template <typename T> bool impl_IHttpCookie<T>::HttpOnly() const
{
	bool value = {};
	check_hresult(shim()->get_HttpOnly(put(value)));
	return value;
}

template <typename T> void impl_IHttpCookie<T>::HttpOnly(bool const value) const
{
	check_hresult(shim()->put_HttpOnly(value));
}

template <typename T> bool impl_IHttpCookie<T>::Secure() const
{
	bool value = {};
	check_hresult(shim()->get_Secure(put(value)));
	return value;
}

template <typename T> void impl_IHttpCookie<T>::Secure(bool const value) const
{
	check_hresult(shim()->put_Secure(value));
}

template <typename T> String impl_IHttpCookie<T>::Value() const
{
	String value;
	check_hresult(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IHttpCookie<T>::Value(StringReference const & value) const
{
	check_hresult(shim()->put_Value(get(value)));
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Delete() const
{
	Windows::Web::Http::HttpMethod value = nullptr;
	check_hresult(shim()->get_Delete(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Get() const
{
	Windows::Web::Http::HttpMethod value = nullptr;
	check_hresult(shim()->get_Get(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Head() const
{
	Windows::Web::Http::HttpMethod value = nullptr;
	check_hresult(shim()->get_Head(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Options() const
{
	Windows::Web::Http::HttpMethod value = nullptr;
	check_hresult(shim()->get_Options(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Patch() const
{
	Windows::Web::Http::HttpMethod value = nullptr;
	check_hresult(shim()->get_Patch(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Post() const
{
	Windows::Web::Http::HttpMethod value = nullptr;
	check_hresult(shim()->get_Post(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Put() const
{
	Windows::Web::Http::HttpMethod value = nullptr;
	check_hresult(shim()->get_Put(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodFactory<T>::Create(StringReference const & method) const
{
	Windows::Web::Http::HttpMethod httpMethod = nullptr;
	check_hresult(shim()->abi_Create(get(method), put(httpMethod)));
	return httpMethod;
}

template <typename T> String impl_IHttpMethod<T>::Method() const
{
	String value;
	check_hresult(shim()->get_Method(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_IHttpTransportInformation<T>::ServerCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check_hresult(shim()->get_ServerCertificate(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketSslErrorSeverity impl_IHttpTransportInformation<T>::ServerCertificateErrorSeverity() const
{
	Windows::Networking::Sockets::SocketSslErrorSeverity value = {};
	check_hresult(shim()->get_ServerCertificateErrorSeverity(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> impl_IHttpTransportInformation<T>::ServerCertificateErrors() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> value;
	check_hresult(shim()->get_ServerCertificateErrors(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_IHttpTransportInformation<T>::ServerIntermediateCertificates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value;
	check_hresult(shim()->get_ServerIntermediateCertificates(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpRequestMessage impl_IHttpRequestMessageFactory<T>::Create(Windows::Web::Http::HttpMethod const & method, Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Http::HttpRequestMessage httpRequestMessage = nullptr;
	check_hresult(shim()->abi_Create(get(method), get(uri), put(httpRequestMessage)));
	return httpRequestMessage;
}

template <typename T> Windows::Web::Http::IHttpContent impl_IHttpRequestMessage<T>::Content() const
{
	Windows::Web::Http::IHttpContent value;
	check_hresult(shim()->get_Content(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestMessage<T>::Content(Windows::Web::Http::IHttpContent const & value) const
{
	check_hresult(shim()->put_Content(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpRequestHeaderCollection impl_IHttpRequestMessage<T>::Headers() const
{
	Windows::Web::Http::Headers::HttpRequestHeaderCollection value = nullptr;
	check_hresult(shim()->get_Headers(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpRequestMessage<T>::Method() const
{
	Windows::Web::Http::HttpMethod value = nullptr;
	check_hresult(shim()->get_Method(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestMessage<T>::Method(Windows::Web::Http::HttpMethod const & value) const
{
	check_hresult(shim()->put_Method(get(value)));
}

template <typename T> Windows::Foundation::Collections::IMap<String, IInspectable> impl_IHttpRequestMessage<T>::Properties() const
{
	Windows::Foundation::Collections::IMap<String, IInspectable> value;
	check_hresult(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IHttpRequestMessage<T>::RequestUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_RequestUri(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestMessage<T>::RequestUri(Windows::Foundation::Uri const & value) const
{
	check_hresult(shim()->put_RequestUri(get(value)));
}

template <typename T> Windows::Web::Http::HttpTransportInformation impl_IHttpRequestMessage<T>::TransportInformation() const
{
	Windows::Web::Http::HttpTransportInformation value = nullptr;
	check_hresult(shim()->get_TransportInformation(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpResponseMessage impl_IHttpResponseMessageFactory<T>::Create(Windows::Web::Http::HttpStatusCode const statusCode) const
{
	Windows::Web::Http::HttpResponseMessage httpResponseMessage = nullptr;
	check_hresult(shim()->abi_Create(statusCode, put(httpResponseMessage)));
	return httpResponseMessage;
}

template <typename T> Windows::Web::Http::IHttpContent impl_IHttpResponseMessage<T>::Content() const
{
	Windows::Web::Http::IHttpContent value;
	check_hresult(shim()->get_Content(put(value)));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::Content(Windows::Web::Http::IHttpContent const & value) const
{
	check_hresult(shim()->put_Content(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpResponseHeaderCollection impl_IHttpResponseMessage<T>::Headers() const
{
	Windows::Web::Http::Headers::HttpResponseHeaderCollection value = nullptr;
	check_hresult(shim()->get_Headers(put(value)));
	return value;
}

template <typename T> bool impl_IHttpResponseMessage<T>::IsSuccessStatusCode() const
{
	bool value = {};
	check_hresult(shim()->get_IsSuccessStatusCode(put(value)));
	return value;
}

template <typename T> String impl_IHttpResponseMessage<T>::ReasonPhrase() const
{
	String value;
	check_hresult(shim()->get_ReasonPhrase(put(value)));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::ReasonPhrase(StringReference const & value) const
{
	check_hresult(shim()->put_ReasonPhrase(get(value)));
}

template <typename T> Windows::Web::Http::HttpRequestMessage impl_IHttpResponseMessage<T>::RequestMessage() const
{
	Windows::Web::Http::HttpRequestMessage value = nullptr;
	check_hresult(shim()->get_RequestMessage(put(value)));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::RequestMessage(Windows::Web::Http::HttpRequestMessage const & value) const
{
	check_hresult(shim()->put_RequestMessage(get(value)));
}

template <typename T> Windows::Web::Http::HttpResponseMessageSource impl_IHttpResponseMessage<T>::Source() const
{
	Windows::Web::Http::HttpResponseMessageSource value = {};
	check_hresult(shim()->get_Source(&value));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::Source(Windows::Web::Http::HttpResponseMessageSource const value) const
{
	check_hresult(shim()->put_Source(value));
}

template <typename T> Windows::Web::Http::HttpStatusCode impl_IHttpResponseMessage<T>::StatusCode() const
{
	Windows::Web::Http::HttpStatusCode value = {};
	check_hresult(shim()->get_StatusCode(&value));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::StatusCode(Windows::Web::Http::HttpStatusCode const value) const
{
	check_hresult(shim()->put_StatusCode(value));
}

template <typename T> Windows::Web::Http::HttpVersion impl_IHttpResponseMessage<T>::Version() const
{
	Windows::Web::Http::HttpVersion value = {};
	check_hresult(shim()->get_Version(&value));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::Version(Windows::Web::Http::HttpVersion const value) const
{
	check_hresult(shim()->put_Version(value));
}

template <typename T> Windows::Web::Http::HttpResponseMessage impl_IHttpResponseMessage<T>::EnsureSuccessStatusCode() const
{
	Windows::Web::Http::HttpResponseMessage httpResponseMessage = nullptr;
	check_hresult(shim()->abi_EnsureSuccessStatusCode(put(httpResponseMessage)));
	return httpResponseMessage;
}

template <typename T> Windows::Web::Http::HttpStringContent impl_IHttpStringContentFactory<T>::CreateFromString(StringReference const & content) const
{
	Windows::Web::Http::HttpStringContent stringContent = nullptr;
	check_hresult(shim()->abi_CreateFromString(get(content), put(stringContent)));
	return stringContent;
}

template <typename T> Windows::Web::Http::HttpStringContent impl_IHttpStringContentFactory<T>::CreateFromStringWithEncoding(StringReference const & content, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Web::Http::HttpStringContent stringContent = nullptr;
	check_hresult(shim()->abi_CreateFromStringWithEncoding(get(content), encoding, put(stringContent)));
	return stringContent;
}

template <typename T> Windows::Web::Http::HttpStringContent impl_IHttpStringContentFactory<T>::CreateFromStringWithEncodingAndMediaType(StringReference const & content, Windows::Storage::Streams::UnicodeEncoding const encoding, StringReference const & mediaType) const
{
	Windows::Web::Http::HttpStringContent stringContent = nullptr;
	check_hresult(shim()->abi_CreateFromStringWithEncodingAndMediaType(get(content), encoding, get(mediaType), put(stringContent)));
	return stringContent;
}

template <typename T> Windows::Web::Http::HttpBufferContent impl_IHttpBufferContentFactory<T>::CreateFromBuffer(Windows::Storage::Streams::IBuffer const & content) const
{
	Windows::Web::Http::HttpBufferContent bufferContent = nullptr;
	check_hresult(shim()->abi_CreateFromBuffer(get(content), put(bufferContent)));
	return bufferContent;
}

template <typename T> Windows::Web::Http::HttpBufferContent impl_IHttpBufferContentFactory<T>::CreateFromBufferWithOffset(Windows::Storage::Streams::IBuffer const & content, unsigned const offset, unsigned const count) const
{
	Windows::Web::Http::HttpBufferContent bufferContent = nullptr;
	check_hresult(shim()->abi_CreateFromBufferWithOffset(get(content), offset, count, put(bufferContent)));
	return bufferContent;
}

template <typename T> Windows::Web::Http::HttpStreamContent impl_IHttpStreamContentFactory<T>::CreateFromInputStream(Windows::Storage::Streams::IInputStream const & content) const
{
	Windows::Web::Http::HttpStreamContent streamContent = nullptr;
	check_hresult(shim()->abi_CreateFromInputStream(get(content), put(streamContent)));
	return streamContent;
}

template <typename T> Windows::Web::Http::HttpFormUrlEncodedContent impl_IHttpFormUrlEncodedContentFactory<T>::Create(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & content) const
{
	Windows::Web::Http::HttpFormUrlEncodedContent formUrlEncodedContent = nullptr;
	check_hresult(shim()->abi_Create(get(content), put(formUrlEncodedContent)));
	return formUrlEncodedContent;
}

template <typename T> Windows::Web::Http::HttpMultipartContent impl_IHttpMultipartContentFactory<T>::CreateWithSubtype(StringReference const & subtype) const
{
	Windows::Web::Http::HttpMultipartContent multipartContent = nullptr;
	check_hresult(shim()->abi_CreateWithSubtype(get(subtype), put(multipartContent)));
	return multipartContent;
}

template <typename T> Windows::Web::Http::HttpMultipartContent impl_IHttpMultipartContentFactory<T>::CreateWithSubtypeAndBoundary(StringReference const & subtype, StringReference const & boundary) const
{
	Windows::Web::Http::HttpMultipartContent multipartContent = nullptr;
	check_hresult(shim()->abi_CreateWithSubtypeAndBoundary(get(subtype), get(boundary), put(multipartContent)));
	return multipartContent;
}

template <typename T> void impl_IHttpMultipartContent<T>::Add(Windows::Web::Http::IHttpContent const & content) const
{
	check_hresult(shim()->abi_Add(get(content)));
}

template <typename T> Windows::Web::Http::HttpMultipartFormDataContent impl_IHttpMultipartFormDataContentFactory<T>::CreateWithBoundary(StringReference const & boundary) const
{
	Windows::Web::Http::HttpMultipartFormDataContent multipartFormDataContent = nullptr;
	check_hresult(shim()->abi_CreateWithBoundary(get(boundary), put(multipartFormDataContent)));
	return multipartFormDataContent;
}

template <typename T> void impl_IHttpMultipartFormDataContent<T>::Add(Windows::Web::Http::IHttpContent const & content) const
{
	check_hresult(shim()->abi_Add(get(content)));
}

template <typename T> void impl_IHttpMultipartFormDataContent<T>::Add(Windows::Web::Http::IHttpContent const & content, StringReference const & name) const
{
	check_hresult(shim()->abi_AddWithName(get(content), get(name)));
}

template <typename T> void impl_IHttpMultipartFormDataContent<T>::Add(Windows::Web::Http::IHttpContent const & content, StringReference const & name, StringReference const & fileName) const
{
	check_hresult(shim()->abi_AddWithNameAndFileName(get(content), get(name), get(fileName)));
}

}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http { namespace Filters {

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> impl_IHttpFilter<T>::SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> operation;
	check_hresult(shim()->abi_SendRequestAsync(get(request), put(operation)));
	return operation;
}

template <typename T> Windows::Web::Http::Filters::HttpCacheReadBehavior impl_IHttpCacheControl<T>::ReadBehavior() const
{
	Windows::Web::Http::Filters::HttpCacheReadBehavior value = {};
	check_hresult(shim()->get_ReadBehavior(&value));
	return value;
}

template <typename T> void impl_IHttpCacheControl<T>::ReadBehavior(Windows::Web::Http::Filters::HttpCacheReadBehavior const value) const
{
	check_hresult(shim()->put_ReadBehavior(value));
}

template <typename T> Windows::Web::Http::Filters::HttpCacheWriteBehavior impl_IHttpCacheControl<T>::WriteBehavior() const
{
	Windows::Web::Http::Filters::HttpCacheWriteBehavior value = {};
	check_hresult(shim()->get_WriteBehavior(&value));
	return value;
}

template <typename T> void impl_IHttpCacheControl<T>::WriteBehavior(Windows::Web::Http::Filters::HttpCacheWriteBehavior const value) const
{
	check_hresult(shim()->put_WriteBehavior(value));
}

template <typename T> bool impl_IHttpBaseProtocolFilter<T>::AllowAutoRedirect() const
{
	bool value = {};
	check_hresult(shim()->get_AllowAutoRedirect(put(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::AllowAutoRedirect(bool const value) const
{
	check_hresult(shim()->put_AllowAutoRedirect(value));
}

template <typename T> bool impl_IHttpBaseProtocolFilter<T>::AllowUI() const
{
	bool value = {};
	check_hresult(shim()->get_AllowUI(put(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::AllowUI(bool const value) const
{
	check_hresult(shim()->put_AllowUI(value));
}

template <typename T> bool impl_IHttpBaseProtocolFilter<T>::AutomaticDecompression() const
{
	bool value = {};
	check_hresult(shim()->get_AutomaticDecompression(put(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::AutomaticDecompression(bool const value) const
{
	check_hresult(shim()->put_AutomaticDecompression(value));
}

template <typename T> Windows::Web::Http::Filters::HttpCacheControl impl_IHttpBaseProtocolFilter<T>::CacheControl() const
{
	Windows::Web::Http::Filters::HttpCacheControl value = nullptr;
	check_hresult(shim()->get_CacheControl(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpCookieManager impl_IHttpBaseProtocolFilter<T>::CookieManager() const
{
	Windows::Web::Http::HttpCookieManager value = nullptr;
	check_hresult(shim()->get_CookieManager(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_IHttpBaseProtocolFilter<T>::ClientCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check_hresult(shim()->get_ClientCertificate(put(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::ClientCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const
{
	check_hresult(shim()->put_ClientCertificate(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> impl_IHttpBaseProtocolFilter<T>::IgnorableServerCertificateErrors() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> value;
	check_hresult(shim()->get_IgnorableServerCertificateErrors(put(value)));
	return value;
}

template <typename T> unsigned impl_IHttpBaseProtocolFilter<T>::MaxConnectionsPerServer() const
{
	unsigned value = {};
	check_hresult(shim()->get_MaxConnectionsPerServer(&value));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::MaxConnectionsPerServer(unsigned const value) const
{
	check_hresult(shim()->put_MaxConnectionsPerServer(value));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IHttpBaseProtocolFilter<T>::ProxyCredential() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check_hresult(shim()->get_ProxyCredential(put(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::ProxyCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check_hresult(shim()->put_ProxyCredential(get(value)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IHttpBaseProtocolFilter<T>::ServerCredential() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check_hresult(shim()->get_ServerCredential(put(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::ServerCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check_hresult(shim()->put_ServerCredential(get(value)));
}

template <typename T> bool impl_IHttpBaseProtocolFilter<T>::UseProxy() const
{
	bool value = {};
	check_hresult(shim()->get_UseProxy(put(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::UseProxy(bool const value) const
{
	check_hresult(shim()->put_UseProxy(value));
}

template <typename T> Windows::Web::Http::HttpVersion impl_IHttpBaseProtocolFilter2<T>::MaxVersion() const
{
	Windows::Web::Http::HttpVersion value = {};
	check_hresult(shim()->get_MaxVersion(&value));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter2<T>::MaxVersion(Windows::Web::Http::HttpVersion const value) const
{
	check_hresult(shim()->put_MaxVersion(value));
}

template <typename T> Windows::Web::Http::Filters::HttpCookieUsageBehavior impl_IHttpBaseProtocolFilter3<T>::CookieUsageBehavior() const
{
	Windows::Web::Http::Filters::HttpCookieUsageBehavior value = {};
	check_hresult(shim()->get_CookieUsageBehavior(&value));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter3<T>::CookieUsageBehavior(Windows::Web::Http::Filters::HttpCookieUsageBehavior const value) const
{
	check_hresult(shim()->put_CookieUsageBehavior(value));
}

}}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http { namespace Headers {

template <typename T> Windows::Web::Http::Headers::HttpContentDispositionHeaderValue impl_IHttpContentHeaderCollection<T>::ContentDisposition() const
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue value = nullptr;
	check_hresult(shim()->get_ContentDisposition(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentDisposition(Windows::Web::Http::Headers::HttpContentDispositionHeaderValue const & value) const
{
	check_hresult(shim()->put_ContentDisposition(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingHeaderValueCollection impl_IHttpContentHeaderCollection<T>::ContentEncoding() const
{
	Windows::Web::Http::Headers::HttpContentCodingHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_ContentEncoding(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpLanguageHeaderValueCollection impl_IHttpContentHeaderCollection<T>::ContentLanguage() const
{
	Windows::Web::Http::Headers::HttpLanguageHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_ContentLanguage(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IHttpContentHeaderCollection<T>::ContentLength() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check_hresult(shim()->get_ContentLength(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentLength(Windows::Foundation::IReference<unsigned long long> const & value) const
{
	check_hresult(shim()->put_ContentLength(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IHttpContentHeaderCollection<T>::ContentLocation() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_ContentLocation(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentLocation(Windows::Foundation::Uri const & value) const
{
	check_hresult(shim()->put_ContentLocation(get(value)));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHttpContentHeaderCollection<T>::ContentMD5() const
{
	Windows::Storage::Streams::IBuffer value;
	check_hresult(shim()->get_ContentMD5(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentMD5(Windows::Storage::Streams::IBuffer const & value) const
{
	check_hresult(shim()->put_ContentMD5(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpContentRangeHeaderValue impl_IHttpContentHeaderCollection<T>::ContentRange() const
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue value = nullptr;
	check_hresult(shim()->get_ContentRange(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentRange(Windows::Web::Http::Headers::HttpContentRangeHeaderValue const & value) const
{
	check_hresult(shim()->put_ContentRange(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeHeaderValue impl_IHttpContentHeaderCollection<T>::ContentType() const
{
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue value = nullptr;
	check_hresult(shim()->get_ContentType(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentType(Windows::Web::Http::Headers::HttpMediaTypeHeaderValue const & value) const
{
	check_hresult(shim()->put_ContentType(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IHttpContentHeaderCollection<T>::Expires() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check_hresult(shim()->get_Expires(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::Expires(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check_hresult(shim()->put_Expires(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IHttpContentHeaderCollection<T>::LastModified() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check_hresult(shim()->get_LastModified(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::LastModified(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check_hresult(shim()->put_LastModified(get(value)));
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::Append(StringReference const & name, StringReference const & value) const
{
	check_hresult(shim()->abi_Append(get(name), get(value)));
}

template <typename T> bool impl_IHttpContentHeaderCollection<T>::TryAppendWithoutValidation(StringReference const & name, StringReference const & value) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryAppendWithoutValidation(get(name), get(value), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::Accept() const
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_Accept(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::AcceptEncoding() const
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_AcceptEncoding(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::AcceptLanguage() const
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_AcceptLanguage(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpRequestHeaderCollection<T>::Authorization() const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue value = nullptr;
	check_hresult(shim()->get_Authorization(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::Authorization(Windows::Web::Http::Headers::HttpCredentialsHeaderValue const & value) const
{
	check_hresult(shim()->put_Authorization(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::CacheControl() const
{
	Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_CacheControl(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::Connection() const
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_Connection(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpCookiePairHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::Cookie() const
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_Cookie(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IHttpRequestHeaderCollection<T>::Date() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check_hresult(shim()->get_Date(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::Date(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check_hresult(shim()->put_Date(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpExpectationHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::Expect() const
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_Expect(put(value)));
	return value;
}

template <typename T> String impl_IHttpRequestHeaderCollection<T>::From() const
{
	String value;
	check_hresult(shim()->get_From(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::From(StringReference const & value) const
{
	check_hresult(shim()->put_From(get(value)));
}

template <typename T> Windows::Networking::HostName impl_IHttpRequestHeaderCollection<T>::Host() const
{
	Windows::Networking::HostName value = nullptr;
	check_hresult(shim()->get_Host(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::Host(Windows::Networking::HostName const & value) const
{
	check_hresult(shim()->put_Host(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IHttpRequestHeaderCollection<T>::IfModifiedSince() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check_hresult(shim()->get_IfModifiedSince(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::IfModifiedSince(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check_hresult(shim()->put_IfModifiedSince(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IHttpRequestHeaderCollection<T>::IfUnmodifiedSince() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check_hresult(shim()->get_IfUnmodifiedSince(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::IfUnmodifiedSince(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check_hresult(shim()->put_IfUnmodifiedSince(get(value)));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IHttpRequestHeaderCollection<T>::MaxForwards() const
{
	Windows::Foundation::IReference<unsigned> value;
	check_hresult(shim()->get_MaxForwards(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::MaxForwards(Windows::Foundation::IReference<unsigned> const & value) const
{
	check_hresult(shim()->put_MaxForwards(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpRequestHeaderCollection<T>::ProxyAuthorization() const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue value = nullptr;
	check_hresult(shim()->get_ProxyAuthorization(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::ProxyAuthorization(Windows::Web::Http::Headers::HttpCredentialsHeaderValue const & value) const
{
	check_hresult(shim()->put_ProxyAuthorization(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IHttpRequestHeaderCollection<T>::Referer() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_Referer(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::Referer(Windows::Foundation::Uri const & value) const
{
	check_hresult(shim()->put_Referer(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::TransferEncoding() const
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_TransferEncoding(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpProductInfoHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::UserAgent() const
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_UserAgent(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::Append(StringReference const & name, StringReference const & value) const
{
	check_hresult(shim()->abi_Append(get(name), get(value)));
}

template <typename T> bool impl_IHttpRequestHeaderCollection<T>::TryAppendWithoutValidation(StringReference const & name, StringReference const & value) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryAppendWithoutValidation(get(name), get(value), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IHttpResponseHeaderCollection<T>::Age() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check_hresult(shim()->get_Age(put(value)));
	return value;
}

template <typename T> void impl_IHttpResponseHeaderCollection<T>::Age(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check_hresult(shim()->put_Age(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpMethodHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::Allow() const
{
	Windows::Web::Http::Headers::HttpMethodHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_Allow(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::CacheControl() const
{
	Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_CacheControl(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::Connection() const
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_Connection(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IHttpResponseHeaderCollection<T>::Date() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check_hresult(shim()->get_Date(put(value)));
	return value;
}

template <typename T> void impl_IHttpResponseHeaderCollection<T>::Date(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check_hresult(shim()->put_Date(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IHttpResponseHeaderCollection<T>::Location() const
{
	Windows::Foundation::Uri value = nullptr;
	check_hresult(shim()->get_Location(put(value)));
	return value;
}

template <typename T> void impl_IHttpResponseHeaderCollection<T>::Location(Windows::Foundation::Uri const & value) const
{
	check_hresult(shim()->put_Location(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::ProxyAuthenticate() const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_ProxyAuthenticate(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue impl_IHttpResponseHeaderCollection<T>::RetryAfter() const
{
	Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue value = nullptr;
	check_hresult(shim()->get_RetryAfter(put(value)));
	return value;
}

template <typename T> void impl_IHttpResponseHeaderCollection<T>::RetryAfter(Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue const & value) const
{
	check_hresult(shim()->put_RetryAfter(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::TransferEncoding() const
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_TransferEncoding(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::WwwAuthenticate() const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection value = nullptr;
	check_hresult(shim()->get_WwwAuthenticate(put(value)));
	return value;
}

template <typename T> void impl_IHttpResponseHeaderCollection<T>::Append(StringReference const & name, StringReference const & value) const
{
	check_hresult(shim()->abi_Append(get(name), get(value)));
}

template <typename T> bool impl_IHttpResponseHeaderCollection<T>::TryAppendWithoutValidation(StringReference const & name, StringReference const & value) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryAppendWithoutValidation(get(name), get(value), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IHttpCacheDirectiveHeaderValueCollection<T>::MaxAge() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check_hresult(shim()->get_MaxAge(put(value)));
	return value;
}

template <typename T> void impl_IHttpCacheDirectiveHeaderValueCollection<T>::MaxAge(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check_hresult(shim()->put_MaxAge(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IHttpCacheDirectiveHeaderValueCollection<T>::MaxStale() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check_hresult(shim()->get_MaxStale(put(value)));
	return value;
}

template <typename T> void impl_IHttpCacheDirectiveHeaderValueCollection<T>::MaxStale(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check_hresult(shim()->put_MaxStale(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IHttpCacheDirectiveHeaderValueCollection<T>::MinFresh() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check_hresult(shim()->get_MinFresh(put(value)));
	return value;
}

template <typename T> void impl_IHttpCacheDirectiveHeaderValueCollection<T>::MinFresh(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check_hresult(shim()->put_MinFresh(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IHttpCacheDirectiveHeaderValueCollection<T>::SharedMaxAge() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check_hresult(shim()->get_SharedMaxAge(put(value)));
	return value;
}

template <typename T> void impl_IHttpCacheDirectiveHeaderValueCollection<T>::SharedMaxAge(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check_hresult(shim()->put_SharedMaxAge(get(value)));
}

template <typename T> void impl_IHttpCacheDirectiveHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check_hresult(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpCacheDirectiveHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpChallengeHeaderValue impl_IHttpChallengeHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValue challengeHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(challengeHeaderValue)));
	return challengeHeaderValue;
}

template <typename T> bool impl_IHttpChallengeHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(challengeHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpChallengeHeaderValue impl_IHttpChallengeHeaderValueFactory<T>::CreateFromScheme(StringReference const & scheme) const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValue challengeHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromScheme(get(scheme), put(challengeHeaderValue)));
	return challengeHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpChallengeHeaderValue impl_IHttpChallengeHeaderValueFactory<T>::CreateFromSchemeWithToken(StringReference const & scheme, StringReference const & token) const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValue challengeHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromSchemeWithToken(get(scheme), get(token), put(challengeHeaderValue)));
	return challengeHeaderValue;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpChallengeHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value;
	check_hresult(shim()->get_Parameters(put(value)));
	return value;
}

template <typename T> String impl_IHttpChallengeHeaderValue<T>::Scheme() const
{
	String value;
	check_hresult(shim()->get_Scheme(put(value)));
	return value;
}

template <typename T> String impl_IHttpChallengeHeaderValue<T>::Token() const
{
	String value;
	check_hresult(shim()->get_Token(put(value)));
	return value;
}

template <typename T> void impl_IHttpChallengeHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check_hresult(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpChallengeHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpCredentialsHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue credentialsHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(credentialsHeaderValue)));
	return credentialsHeaderValue;
}

template <typename T> bool impl_IHttpCredentialsHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(credentialsHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpCredentialsHeaderValueFactory<T>::CreateFromScheme(StringReference const & scheme) const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue credentialsHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromScheme(get(scheme), put(credentialsHeaderValue)));
	return credentialsHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpCredentialsHeaderValueFactory<T>::CreateFromSchemeWithToken(StringReference const & scheme, StringReference const & token) const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue credentialsHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromSchemeWithToken(get(scheme), get(token), put(credentialsHeaderValue)));
	return credentialsHeaderValue;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpCredentialsHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value;
	check_hresult(shim()->get_Parameters(put(value)));
	return value;
}

template <typename T> String impl_IHttpCredentialsHeaderValue<T>::Scheme() const
{
	String value;
	check_hresult(shim()->get_Scheme(put(value)));
	return value;
}

template <typename T> String impl_IHttpCredentialsHeaderValue<T>::Token() const
{
	String value;
	check_hresult(shim()->get_Token(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue impl_IHttpConnectionOptionHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue connectionOptionHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(connectionOptionHeaderValue)));
	return connectionOptionHeaderValue;
}

template <typename T> bool impl_IHttpConnectionOptionHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(connectionOptionHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue impl_IHttpConnectionOptionHeaderValueFactory<T>::Create(StringReference const & token) const
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue connectionOptionHeaderValue = nullptr;
	check_hresult(shim()->abi_Create(get(token), put(connectionOptionHeaderValue)));
	return connectionOptionHeaderValue;
}

template <typename T> String impl_IHttpConnectionOptionHeaderValue<T>::Token() const
{
	String value;
	check_hresult(shim()->get_Token(put(value)));
	return value;
}

template <typename T> void impl_IHttpConnectionOptionHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check_hresult(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpConnectionOptionHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingHeaderValue impl_IHttpContentCodingHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpContentCodingHeaderValue contentCodingHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(contentCodingHeaderValue)));
	return contentCodingHeaderValue;
}

template <typename T> bool impl_IHttpContentCodingHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(contentCodingHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingHeaderValue impl_IHttpContentCodingHeaderValueFactory<T>::Create(StringReference const & contentCoding) const
{
	Windows::Web::Http::Headers::HttpContentCodingHeaderValue contentCodingHeaderValue = nullptr;
	check_hresult(shim()->abi_Create(get(contentCoding), put(contentCodingHeaderValue)));
	return contentCodingHeaderValue;
}

template <typename T> String impl_IHttpContentCodingHeaderValue<T>::ContentCoding() const
{
	String value;
	check_hresult(shim()->get_ContentCoding(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentCodingHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check_hresult(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpContentCodingHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentDispositionHeaderValue impl_IHttpContentDispositionHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue contentDispositionHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(contentDispositionHeaderValue)));
	return contentDispositionHeaderValue;
}

template <typename T> bool impl_IHttpContentDispositionHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(contentDispositionHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentDispositionHeaderValue impl_IHttpContentDispositionHeaderValueFactory<T>::Create(StringReference const & dispositionType) const
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue contentDispositionHeaderValue = nullptr;
	check_hresult(shim()->abi_Create(get(dispositionType), put(contentDispositionHeaderValue)));
	return contentDispositionHeaderValue;
}

template <typename T> String impl_IHttpContentDispositionHeaderValue<T>::DispositionType() const
{
	String value;
	check_hresult(shim()->get_DispositionType(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentDispositionHeaderValue<T>::DispositionType(StringReference const & value) const
{
	check_hresult(shim()->put_DispositionType(get(value)));
}

template <typename T> String impl_IHttpContentDispositionHeaderValue<T>::FileName() const
{
	String value;
	check_hresult(shim()->get_FileName(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentDispositionHeaderValue<T>::FileName(StringReference const & value) const
{
	check_hresult(shim()->put_FileName(get(value)));
}

template <typename T> String impl_IHttpContentDispositionHeaderValue<T>::FileNameStar() const
{
	String value;
	check_hresult(shim()->get_FileNameStar(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentDispositionHeaderValue<T>::FileNameStar(StringReference const & value) const
{
	check_hresult(shim()->put_FileNameStar(get(value)));
}

template <typename T> String impl_IHttpContentDispositionHeaderValue<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentDispositionHeaderValue<T>::Name(StringReference const & value) const
{
	check_hresult(shim()->put_Name(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpContentDispositionHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value;
	check_hresult(shim()->get_Parameters(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IHttpContentDispositionHeaderValue<T>::Size() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check_hresult(shim()->get_Size(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentDispositionHeaderValue<T>::Size(Windows::Foundation::IReference<unsigned long long> const & value) const
{
	check_hresult(shim()->put_Size(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpContentRangeHeaderValue impl_IHttpContentRangeHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue contentRangeHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(contentRangeHeaderValue)));
	return contentRangeHeaderValue;
}

template <typename T> bool impl_IHttpContentRangeHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(contentRangeHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentRangeHeaderValue impl_IHttpContentRangeHeaderValueFactory<T>::CreateFromLength(unsigned long long const length) const
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue contentRangeHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromLength(length, put(contentRangeHeaderValue)));
	return contentRangeHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpContentRangeHeaderValue impl_IHttpContentRangeHeaderValueFactory<T>::CreateFromRange(unsigned long long const from, unsigned long long const to) const
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue contentRangeHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromRange(from, to, put(contentRangeHeaderValue)));
	return contentRangeHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpContentRangeHeaderValue impl_IHttpContentRangeHeaderValueFactory<T>::CreateFromRangeWithLength(unsigned long long const from, unsigned long long const to, unsigned long long const length) const
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue contentRangeHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromRangeWithLength(from, to, length, put(contentRangeHeaderValue)));
	return contentRangeHeaderValue;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IHttpContentRangeHeaderValue<T>::FirstBytePosition() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check_hresult(shim()->get_FirstBytePosition(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IHttpContentRangeHeaderValue<T>::LastBytePosition() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check_hresult(shim()->get_LastBytePosition(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IHttpContentRangeHeaderValue<T>::Length() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check_hresult(shim()->get_Length(put(value)));
	return value;
}

template <typename T> String impl_IHttpContentRangeHeaderValue<T>::Unit() const
{
	String value;
	check_hresult(shim()->get_Unit(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentRangeHeaderValue<T>::Unit(StringReference const & value) const
{
	check_hresult(shim()->put_Unit(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpCookiePairHeaderValue impl_IHttpCookiePairHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue cookiePairHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(cookiePairHeaderValue)));
	return cookiePairHeaderValue;
}

template <typename T> bool impl_IHttpCookiePairHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(cookiePairHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpCookiePairHeaderValue impl_IHttpCookiePairHeaderValueFactory<T>::CreateFromName(StringReference const & name) const
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue cookiePairHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromName(get(name), put(cookiePairHeaderValue)));
	return cookiePairHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpCookiePairHeaderValue impl_IHttpCookiePairHeaderValueFactory<T>::CreateFromNameWithValue(StringReference const & name, StringReference const & value) const
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue cookiePairHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromNameWithValue(get(name), get(value), put(cookiePairHeaderValue)));
	return cookiePairHeaderValue;
}

template <typename T> String impl_IHttpCookiePairHeaderValue<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IHttpCookiePairHeaderValue<T>::Value() const
{
	String value;
	check_hresult(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IHttpCookiePairHeaderValue<T>::Value(StringReference const & value) const
{
	check_hresult(shim()->put_Value(get(value)));
}

template <typename T> void impl_IHttpCookiePairHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check_hresult(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpCookiePairHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue impl_IHttpDateOrDeltaHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue dateOrDeltaHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(dateOrDeltaHeaderValue)));
	return dateOrDeltaHeaderValue;
}

template <typename T> bool impl_IHttpDateOrDeltaHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(dateOrDeltaHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IHttpDateOrDeltaHeaderValue<T>::Date() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check_hresult(shim()->get_Date(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IHttpDateOrDeltaHeaderValue<T>::Delta() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check_hresult(shim()->get_Delta(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpExpectationHeaderValue impl_IHttpExpectationHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValue expectationHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(expectationHeaderValue)));
	return expectationHeaderValue;
}

template <typename T> bool impl_IHttpExpectationHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(expectationHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpExpectationHeaderValue impl_IHttpExpectationHeaderValueFactory<T>::CreateFromName(StringReference const & name) const
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValue expectationHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromName(get(name), put(expectationHeaderValue)));
	return expectationHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpExpectationHeaderValue impl_IHttpExpectationHeaderValueFactory<T>::CreateFromNameWithValue(StringReference const & name, StringReference const & value) const
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValue expectationHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromNameWithValue(get(name), get(value), put(expectationHeaderValue)));
	return expectationHeaderValue;
}

template <typename T> String impl_IHttpExpectationHeaderValue<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IHttpExpectationHeaderValue<T>::Value() const
{
	String value;
	check_hresult(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IHttpExpectationHeaderValue<T>::Value(StringReference const & value) const
{
	check_hresult(shim()->put_Value(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpExpectationHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value;
	check_hresult(shim()->get_Parameters(put(value)));
	return value;
}

template <typename T> void impl_IHttpExpectationHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check_hresult(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpExpectationHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> void impl_IHttpLanguageHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check_hresult(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpLanguageHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue impl_IHttpLanguageRangeWithQualityHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue languageRangeWithQualityHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(languageRangeWithQualityHeaderValue)));
	return languageRangeWithQualityHeaderValue;
}

template <typename T> bool impl_IHttpLanguageRangeWithQualityHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(languageRangeWithQualityHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue impl_IHttpLanguageRangeWithQualityHeaderValueFactory<T>::CreateFromLanguageRange(StringReference const & languageRange) const
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue languageRangeWithQualityHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromLanguageRange(get(languageRange), put(languageRangeWithQualityHeaderValue)));
	return languageRangeWithQualityHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue impl_IHttpLanguageRangeWithQualityHeaderValueFactory<T>::CreateFromLanguageRangeWithQuality(StringReference const & languageRange, double const quality) const
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue languageRangeWithQualityHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromLanguageRangeWithQuality(get(languageRange), quality, put(languageRangeWithQualityHeaderValue)));
	return languageRangeWithQualityHeaderValue;
}

template <typename T> String impl_IHttpLanguageRangeWithQualityHeaderValue<T>::LanguageRange() const
{
	String languageRange;
	check_hresult(shim()->get_LanguageRange(put(languageRange)));
	return languageRange;
}

template <typename T> Windows::Foundation::IReference<double> impl_IHttpLanguageRangeWithQualityHeaderValue<T>::Quality() const
{
	Windows::Foundation::IReference<double> value;
	check_hresult(shim()->get_Quality(put(value)));
	return value;
}

template <typename T> void impl_IHttpLanguageRangeWithQualityHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check_hresult(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpLanguageRangeWithQualityHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeHeaderValue impl_IHttpMediaTypeHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue mediaTypeHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(mediaTypeHeaderValue)));
	return mediaTypeHeaderValue;
}

template <typename T> bool impl_IHttpMediaTypeHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(mediaTypeHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeHeaderValue impl_IHttpMediaTypeHeaderValueFactory<T>::Create(StringReference const & mediaType) const
{
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue mediaTypeHeaderValue = nullptr;
	check_hresult(shim()->abi_Create(get(mediaType), put(mediaTypeHeaderValue)));
	return mediaTypeHeaderValue;
}

template <typename T> String impl_IHttpMediaTypeHeaderValue<T>::CharSet() const
{
	String value;
	check_hresult(shim()->get_CharSet(put(value)));
	return value;
}

template <typename T> void impl_IHttpMediaTypeHeaderValue<T>::CharSet(StringReference const & value) const
{
	check_hresult(shim()->put_CharSet(get(value)));
}

template <typename T> String impl_IHttpMediaTypeHeaderValue<T>::MediaType() const
{
	String value;
	check_hresult(shim()->get_MediaType(put(value)));
	return value;
}

template <typename T> void impl_IHttpMediaTypeHeaderValue<T>::MediaType(StringReference const & value) const
{
	check_hresult(shim()->put_MediaType(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpMediaTypeHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value;
	check_hresult(shim()->get_Parameters(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue impl_IHttpMediaTypeWithQualityHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue mediaTypeWithQualityHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(mediaTypeWithQualityHeaderValue)));
	return mediaTypeWithQualityHeaderValue;
}

template <typename T> bool impl_IHttpMediaTypeWithQualityHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(mediaTypeWithQualityHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue impl_IHttpMediaTypeWithQualityHeaderValueFactory<T>::CreateFromMediaType(StringReference const & mediaType) const
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue mediaTypeWithQualityHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromMediaType(get(mediaType), put(mediaTypeWithQualityHeaderValue)));
	return mediaTypeWithQualityHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue impl_IHttpMediaTypeWithQualityHeaderValueFactory<T>::CreateFromMediaTypeWithQuality(StringReference const & mediaType, double const quality) const
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue mediaTypeWithQualityHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromMediaTypeWithQuality(get(mediaType), quality, put(mediaTypeWithQualityHeaderValue)));
	return mediaTypeWithQualityHeaderValue;
}

template <typename T> String impl_IHttpMediaTypeWithQualityHeaderValue<T>::CharSet() const
{
	String value;
	check_hresult(shim()->get_CharSet(put(value)));
	return value;
}

template <typename T> void impl_IHttpMediaTypeWithQualityHeaderValue<T>::CharSet(StringReference const & value) const
{
	check_hresult(shim()->put_CharSet(get(value)));
}

template <typename T> String impl_IHttpMediaTypeWithQualityHeaderValue<T>::MediaType() const
{
	String value;
	check_hresult(shim()->get_MediaType(put(value)));
	return value;
}

template <typename T> void impl_IHttpMediaTypeWithQualityHeaderValue<T>::MediaType(StringReference const & value) const
{
	check_hresult(shim()->put_MediaType(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpMediaTypeWithQualityHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value;
	check_hresult(shim()->get_Parameters(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IHttpMediaTypeWithQualityHeaderValue<T>::Quality() const
{
	Windows::Foundation::IReference<double> value;
	check_hresult(shim()->get_Quality(put(value)));
	return value;
}

template <typename T> void impl_IHttpMediaTypeWithQualityHeaderValue<T>::Quality(Windows::Foundation::IReference<double> const & value) const
{
	check_hresult(shim()->put_Quality(get(value)));
}

template <typename T> void impl_IHttpMediaTypeWithQualityHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check_hresult(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpMediaTypeWithQualityHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> void impl_IHttpMethodHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check_hresult(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpMethodHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpNameValueHeaderValue impl_IHttpNameValueHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpNameValueHeaderValue nameValueHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(nameValueHeaderValue)));
	return nameValueHeaderValue;
}

template <typename T> bool impl_IHttpNameValueHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(nameValueHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpNameValueHeaderValue impl_IHttpNameValueHeaderValueFactory<T>::CreateFromName(StringReference const & name) const
{
	Windows::Web::Http::Headers::HttpNameValueHeaderValue nameValueHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromName(get(name), put(nameValueHeaderValue)));
	return nameValueHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpNameValueHeaderValue impl_IHttpNameValueHeaderValueFactory<T>::CreateFromNameWithValue(StringReference const & name, StringReference const & value) const
{
	Windows::Web::Http::Headers::HttpNameValueHeaderValue nameValueHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromNameWithValue(get(name), get(value), put(nameValueHeaderValue)));
	return nameValueHeaderValue;
}

template <typename T> String impl_IHttpNameValueHeaderValue<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IHttpNameValueHeaderValue<T>::Value() const
{
	String value;
	check_hresult(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IHttpNameValueHeaderValue<T>::Value(StringReference const & value) const
{
	check_hresult(shim()->put_Value(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpProductHeaderValue impl_IHttpProductHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpProductHeaderValue productHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(productHeaderValue)));
	return productHeaderValue;
}

template <typename T> bool impl_IHttpProductHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(productHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpProductHeaderValue impl_IHttpProductHeaderValueFactory<T>::CreateFromName(StringReference const & productName) const
{
	Windows::Web::Http::Headers::HttpProductHeaderValue productHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromName(get(productName), put(productHeaderValue)));
	return productHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpProductHeaderValue impl_IHttpProductHeaderValueFactory<T>::CreateFromNameWithVersion(StringReference const & productName, StringReference const & productVersion) const
{
	Windows::Web::Http::Headers::HttpProductHeaderValue productHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromNameWithVersion(get(productName), get(productVersion), put(productHeaderValue)));
	return productHeaderValue;
}

template <typename T> String impl_IHttpProductHeaderValue<T>::Name() const
{
	String value;
	check_hresult(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IHttpProductHeaderValue<T>::Version() const
{
	String value;
	check_hresult(shim()->get_Version(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpProductInfoHeaderValue impl_IHttpProductInfoHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue productInfoHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(productInfoHeaderValue)));
	return productInfoHeaderValue;
}

template <typename T> bool impl_IHttpProductInfoHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(productInfoHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpProductInfoHeaderValue impl_IHttpProductInfoHeaderValueFactory<T>::CreateFromComment(StringReference const & productComment) const
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue productInfoHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromComment(get(productComment), put(productInfoHeaderValue)));
	return productInfoHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpProductInfoHeaderValue impl_IHttpProductInfoHeaderValueFactory<T>::CreateFromNameWithVersion(StringReference const & productName, StringReference const & productVersion) const
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue productInfoHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromNameWithVersion(get(productName), get(productVersion), put(productInfoHeaderValue)));
	return productInfoHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpProductHeaderValue impl_IHttpProductInfoHeaderValue<T>::Product() const
{
	Windows::Web::Http::Headers::HttpProductHeaderValue value = nullptr;
	check_hresult(shim()->get_Product(put(value)));
	return value;
}

template <typename T> String impl_IHttpProductInfoHeaderValue<T>::Comment() const
{
	String value;
	check_hresult(shim()->get_Comment(put(value)));
	return value;
}

template <typename T> void impl_IHttpProductInfoHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check_hresult(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpProductInfoHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue impl_IHttpContentCodingWithQualityHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue contentCodingWithQualityHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(contentCodingWithQualityHeaderValue)));
	return contentCodingWithQualityHeaderValue;
}

template <typename T> bool impl_IHttpContentCodingWithQualityHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(contentCodingWithQualityHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue impl_IHttpContentCodingWithQualityHeaderValueFactory<T>::CreateFromValue(StringReference const & contentCoding) const
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue contentCodingWithQualityHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromValue(get(contentCoding), put(contentCodingWithQualityHeaderValue)));
	return contentCodingWithQualityHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue impl_IHttpContentCodingWithQualityHeaderValueFactory<T>::CreateFromValueWithQuality(StringReference const & contentCoding, double const quality) const
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue contentCodingWithQualityHeaderValue = nullptr;
	check_hresult(shim()->abi_CreateFromValueWithQuality(get(contentCoding), quality, put(contentCodingWithQualityHeaderValue)));
	return contentCodingWithQualityHeaderValue;
}

template <typename T> String impl_IHttpContentCodingWithQualityHeaderValue<T>::ContentCoding() const
{
	String value;
	check_hresult(shim()->get_ContentCoding(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IHttpContentCodingWithQualityHeaderValue<T>::Quality() const
{
	Windows::Foundation::IReference<double> value;
	check_hresult(shim()->get_Quality(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentCodingWithQualityHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check_hresult(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpContentCodingWithQualityHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpTransferCodingHeaderValue impl_IHttpTransferCodingHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValue transferCodingHeaderValue = nullptr;
	check_hresult(shim()->abi_Parse(get(input), put(transferCodingHeaderValue)));
	return transferCodingHeaderValue;
}

template <typename T> bool impl_IHttpTransferCodingHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParse(get(input), put(transferCodingHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpTransferCodingHeaderValue impl_IHttpTransferCodingHeaderValueFactory<T>::Create(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValue transferCodingHeaderValue = nullptr;
	check_hresult(shim()->abi_Create(get(input), put(transferCodingHeaderValue)));
	return transferCodingHeaderValue;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpTransferCodingHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value;
	check_hresult(shim()->get_Parameters(put(value)));
	return value;
}

template <typename T> String impl_IHttpTransferCodingHeaderValue<T>::Value() const
{
	String value;
	check_hresult(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IHttpTransferCodingHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check_hresult(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpTransferCodingHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check_hresult(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel {

inline Windows::ApplicationModel::Package Package::Current()
{
	return GetActivationFactory<Package, IPackageStatics>().Current();
}

inline bool DesignMode::DesignModeEnabled()
{
	return GetActivationFactory<DesignMode, IDesignModeStatics>().DesignModeEnabled();
}

}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Activation {

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Appointments {

inline Appointment::Appointment() :
	Appointment(ActivateInstance<Appointment>())
{}

inline AppointmentOrganizer::AppointmentOrganizer() :
	AppointmentOrganizer(ActivateInstance<AppointmentOrganizer>())
{}

inline AppointmentInvitee::AppointmentInvitee() :
	AppointmentInvitee(ActivateInstance<AppointmentInvitee>())
{}

inline AppointmentRecurrence::AppointmentRecurrence() :
	AppointmentRecurrence(ActivateInstance<AppointmentRecurrence>())
{}

inline Windows::Foundation::IAsyncAction AppointmentManager::ShowAppointmentDetailsAsync(StringReference const & appointmentId)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics2>().ShowAppointmentDetailsAsync(appointmentId);
}

inline Windows::Foundation::IAsyncAction AppointmentManager::ShowAppointmentDetailsAsync(StringReference const & appointmentId, Windows::Foundation::DateTime const & instanceStartDate)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics2>().ShowAppointmentDetailsAsync(appointmentId, instanceStartDate);
}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowEditNewAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics2>().ShowEditNewAppointmentAsync(appointment);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentStore> AppointmentManager::RequestStoreAsync(Windows::ApplicationModel::Appointments::AppointmentStoreAccessType const options)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics2>().RequestStoreAsync(options);
}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowAddAppointmentAsync(appointment, selection);
}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowAddAppointmentAsync(appointment, selection, preferredPlacement);
}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowReplaceAppointmentAsync(StringReference const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowReplaceAppointmentAsync(appointmentId, appointment, selection);
}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowReplaceAppointmentAsync(StringReference const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowReplaceAppointmentAsync(appointmentId, appointment, selection, preferredPlacement);
}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowReplaceAppointmentAsync(StringReference const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowReplaceAppointmentAsync(appointmentId, appointment, selection, preferredPlacement, instanceStartDate);
}

inline Windows::Foundation::IAsyncOperation<bool> AppointmentManager::ShowRemoveAppointmentAsync(StringReference const & appointmentId, Windows::Foundation::Rect const & selection)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowRemoveAppointmentAsync(appointmentId, selection);
}

inline Windows::Foundation::IAsyncOperation<bool> AppointmentManager::ShowRemoveAppointmentAsync(StringReference const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowRemoveAppointmentAsync(appointmentId, selection, preferredPlacement);
}

inline Windows::Foundation::IAsyncOperation<bool> AppointmentManager::ShowRemoveAppointmentAsync(StringReference const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowRemoveAppointmentAsync(appointmentId, selection, preferredPlacement, instanceStartDate);
}

inline Windows::Foundation::IAsyncAction AppointmentManager::ShowTimeFrameAsync(Windows::Foundation::DateTime const & timeToShow, Windows::Foundation::TimeSpan const & duration)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowTimeFrameAsync(timeToShow, duration);
}

inline FindAppointmentsOptions::FindAppointmentsOptions() :
	FindAppointmentsOptions(ActivateInstance<FindAppointmentsOptions>())
{}

inline String AppointmentProperties::ChangeNumber()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics2>().ChangeNumber();
}

inline String AppointmentProperties::RemoteChangeNumber()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics2>().RemoteChangeNumber();
}

inline String AppointmentProperties::DetailsKind()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics2>().DetailsKind();
}

inline String AppointmentProperties::Subject()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Subject();
}

inline String AppointmentProperties::Location()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Location();
}

inline String AppointmentProperties::StartTime()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().StartTime();
}

inline String AppointmentProperties::Duration()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Duration();
}

inline String AppointmentProperties::Reminder()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Reminder();
}

inline String AppointmentProperties::BusyStatus()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().BusyStatus();
}

inline String AppointmentProperties::Sensitivity()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Sensitivity();
}

inline String AppointmentProperties::OriginalStartTime()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().OriginalStartTime();
}

inline String AppointmentProperties::IsResponseRequested()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().IsResponseRequested();
}

inline String AppointmentProperties::AllowNewTimeProposal()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().AllowNewTimeProposal();
}

inline String AppointmentProperties::AllDay()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().AllDay();
}

inline String AppointmentProperties::Details()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Details();
}

inline String AppointmentProperties::OnlineMeetingLink()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().OnlineMeetingLink();
}

inline String AppointmentProperties::ReplyTime()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().ReplyTime();
}

inline String AppointmentProperties::Organizer()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Organizer();
}

inline String AppointmentProperties::UserResponse()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().UserResponse();
}

inline String AppointmentProperties::HasInvitees()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().HasInvitees();
}

inline String AppointmentProperties::IsCanceledMeeting()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().IsCanceledMeeting();
}

inline String AppointmentProperties::IsOrganizedByUser()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().IsOrganizedByUser();
}

inline String AppointmentProperties::Recurrence()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Recurrence();
}

inline String AppointmentProperties::Uri()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Uri();
}

inline String AppointmentProperties::Invitees()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Invitees();
}

inline Windows::Foundation::Collections::IVector<String> AppointmentProperties::DefaultProperties()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().DefaultProperties();
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

inline String AppointmentsProviderLaunchActionVerbs::AddAppointment()
{
	return GetActivationFactory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics>().AddAppointment();
}

inline String AppointmentsProviderLaunchActionVerbs::ReplaceAppointment()
{
	return GetActivationFactory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics>().ReplaceAppointment();
}

inline String AppointmentsProviderLaunchActionVerbs::RemoveAppointment()
{
	return GetActivationFactory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics>().RemoveAppointment();
}

inline String AppointmentsProviderLaunchActionVerbs::ShowTimeFrame()
{
	return GetActivationFactory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics>().ShowTimeFrame();
}

inline String AppointmentsProviderLaunchActionVerbs::ShowAppointmentDetails()
{
	return GetActivationFactory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics2>().ShowAppointmentDetails();
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Background {

inline Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::AlarmAccessStatus> AlarmApplicationManager::RequestAccessAsync()
{
	return GetActivationFactory<AlarmApplicationManager, IAlarmApplicationManagerStatics>().RequestAccessAsync();
}

inline Windows::ApplicationModel::Background::AlarmAccessStatus AlarmApplicationManager::GetAccessStatus()
{
	return GetActivationFactory<AlarmApplicationManager, IAlarmApplicationManagerStatics>().GetAccessStatus();
}

inline AppointmentStoreNotificationTrigger::AppointmentStoreNotificationTrigger() :
	AppointmentStoreNotificationTrigger(ActivateInstance<AppointmentStoreNotificationTrigger>())
{}

inline ApplicationTrigger::ApplicationTrigger() :
	ApplicationTrigger(ActivateInstance<ApplicationTrigger>())
{}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::BackgroundAccessStatus> BackgroundExecutionManager::RequestAccessAsync()
{
	return GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().RequestAccessAsync();
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::BackgroundAccessStatus> BackgroundExecutionManager::RequestAccessAsync(StringReference const & applicationId)
{
	return GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().RequestAccessAsync(applicationId);
}

inline void BackgroundExecutionManager::RemoveAccess()
{
	GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().RemoveAccess();
}

inline void BackgroundExecutionManager::RemoveAccess(StringReference const & applicationId)
{
	GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().RemoveAccess(applicationId);
}

inline Windows::ApplicationModel::Background::BackgroundAccessStatus BackgroundExecutionManager::GetAccessStatus()
{
	return GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().GetAccessStatus();
}

inline Windows::ApplicationModel::Background::BackgroundAccessStatus BackgroundExecutionManager::GetAccessStatus(StringReference const & applicationId)
{
	return GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().GetAccessStatus(applicationId);
}

inline MediaProcessingTrigger::MediaProcessingTrigger() :
	MediaProcessingTrigger(ActivateInstance<MediaProcessingTrigger>())
{}

inline Windows::Foundation::Collections::IMapView<GUID, Windows::ApplicationModel::Background::IBackgroundTaskRegistration> BackgroundTaskRegistration::AllTasks()
{
	return GetActivationFactory<BackgroundTaskRegistration, IBackgroundTaskRegistrationStatics>().AllTasks();
}

inline BackgroundTaskBuilder::BackgroundTaskBuilder() :
	BackgroundTaskBuilder(ActivateInstance<BackgroundTaskBuilder>())
{}

inline Windows::ApplicationModel::Background::BackgroundWorkCostValue BackgroundWorkCost::CurrentBackgroundWorkCost()
{
	return GetActivationFactory<BackgroundWorkCost, IBackgroundWorkCostStatics>().CurrentBackgroundWorkCost();
}

inline ChatMessageNotificationTrigger::ChatMessageNotificationTrigger() :
	ChatMessageNotificationTrigger(ActivateInstance<ChatMessageNotificationTrigger>())
{}

inline ChatMessageReceivedNotificationTrigger::ChatMessageReceivedNotificationTrigger() :
	ChatMessageReceivedNotificationTrigger(ActivateInstance<ChatMessageReceivedNotificationTrigger>())
{}

inline RcsEndUserMessageAvailableTrigger::RcsEndUserMessageAvailableTrigger() :
	RcsEndUserMessageAvailableTrigger(ActivateInstance<RcsEndUserMessageAvailableTrigger>())
{}

inline ContactStoreNotificationTrigger::ContactStoreNotificationTrigger() :
	ContactStoreNotificationTrigger(ActivateInstance<ContactStoreNotificationTrigger>())
{}

inline ContentPrefetchTrigger::ContentPrefetchTrigger() :
	ContentPrefetchTrigger(ActivateInstance<ContentPrefetchTrigger>())
{}

inline ContentPrefetchTrigger::ContentPrefetchTrigger(Windows::Foundation::TimeSpan const & waitInterval) :
	ContentPrefetchTrigger(GetActivationFactory<ContentPrefetchTrigger, IContentPrefetchTriggerFactory>().Create(waitInterval))
{}

inline EmailStoreNotificationTrigger::EmailStoreNotificationTrigger() :
	EmailStoreNotificationTrigger(ActivateInstance<EmailStoreNotificationTrigger>())
{}

inline MobileBroadbandRegistrationStateChangeTrigger::MobileBroadbandRegistrationStateChangeTrigger() :
	MobileBroadbandRegistrationStateChangeTrigger(ActivateInstance<MobileBroadbandRegistrationStateChangeTrigger>())
{}

inline MobileBroadbandRadioStateChangeTrigger::MobileBroadbandRadioStateChangeTrigger() :
	MobileBroadbandRadioStateChangeTrigger(ActivateInstance<MobileBroadbandRadioStateChangeTrigger>())
{}

inline MobileBroadbandPinLockStateChangeTrigger::MobileBroadbandPinLockStateChangeTrigger() :
	MobileBroadbandPinLockStateChangeTrigger(ActivateInstance<MobileBroadbandPinLockStateChangeTrigger>())
{}

inline MobileBroadbandDeviceServiceNotificationTrigger::MobileBroadbandDeviceServiceNotificationTrigger() :
	MobileBroadbandDeviceServiceNotificationTrigger(ActivateInstance<MobileBroadbandDeviceServiceNotificationTrigger>())
{}

inline SmsMessageReceivedTrigger::SmsMessageReceivedTrigger(Windows::Devices::Sms::SmsFilterRules const & filterRules) :
	SmsMessageReceivedTrigger(GetActivationFactory<SmsMessageReceivedTrigger, ISmsMessageReceivedTriggerFactory>().Create(filterRules))
{}

inline Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger StorageLibraryContentChangedTrigger::Create(Windows::Storage::StorageLibrary const & storageLibrary)
{
	return GetActivationFactory<StorageLibraryContentChangedTrigger, IStorageLibraryContentChangedTriggerStatics>().Create(storageLibrary);
}

inline Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger StorageLibraryContentChangedTrigger::CreateFromLibraries(Windows::Foundation::Collections::IIterable<Windows::Storage::StorageLibrary> const & storageLibraries)
{
	return GetActivationFactory<StorageLibraryContentChangedTrigger, IStorageLibraryContentChangedTriggerStatics>().CreateFromLibraries(storageLibraries);
}

inline SystemTrigger::SystemTrigger(Windows::ApplicationModel::Background::SystemTriggerType const triggerType, bool const oneShot) :
	SystemTrigger(GetActivationFactory<SystemTrigger, ISystemTriggerFactory>().Create(triggerType, oneShot))
{}

inline SystemCondition::SystemCondition(Windows::ApplicationModel::Background::SystemConditionType const conditionType) :
	SystemCondition(GetActivationFactory<SystemCondition, ISystemConditionFactory>().Create(conditionType))
{}

inline NetworkOperatorNotificationTrigger::NetworkOperatorNotificationTrigger(StringReference const & networkAccountId) :
	NetworkOperatorNotificationTrigger(GetActivationFactory<NetworkOperatorNotificationTrigger, INetworkOperatorNotificationTriggerFactory>().Create(networkAccountId))
{}

inline CachedFileUpdaterTrigger::CachedFileUpdaterTrigger() :
	CachedFileUpdaterTrigger(ActivateInstance<CachedFileUpdaterTrigger>())
{}

inline TimeTrigger::TimeTrigger(unsigned const freshnessTime, bool const oneShot) :
	TimeTrigger(GetActivationFactory<TimeTrigger, ITimeTriggerFactory>().Create(freshnessTime, oneShot))
{}

inline MaintenanceTrigger::MaintenanceTrigger(unsigned const freshnessTime, bool const oneShot) :
	MaintenanceTrigger(GetActivationFactory<MaintenanceTrigger, IMaintenanceTriggerFactory>().Create(freshnessTime, oneShot))
{}

inline PhoneTrigger::PhoneTrigger(Windows::ApplicationModel::Calls::Background::PhoneTriggerType const type, bool const oneShot) :
	PhoneTrigger(GetActivationFactory<PhoneTrigger, IPhoneTriggerFactory>().Create(type, oneShot))
{}

inline DeviceUseTrigger::DeviceUseTrigger() :
	DeviceUseTrigger(ActivateInstance<DeviceUseTrigger>())
{}

inline DeviceServicingTrigger::DeviceServicingTrigger() :
	DeviceServicingTrigger(ActivateInstance<DeviceServicingTrigger>())
{}

inline RfcommConnectionTrigger::RfcommConnectionTrigger() :
	RfcommConnectionTrigger(ActivateInstance<RfcommConnectionTrigger>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Background::DeviceConnectionChangeTrigger> DeviceConnectionChangeTrigger::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<DeviceConnectionChangeTrigger, IDeviceConnectionChangeTriggerStatics>().FromIdAsync(deviceId);
}

inline GattCharacteristicNotificationTrigger::GattCharacteristicNotificationTrigger(Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic const & characteristic) :
	GattCharacteristicNotificationTrigger(GetActivationFactory<GattCharacteristicNotificationTrigger, IGattCharacteristicNotificationTriggerFactory>().Create(characteristic))
{}

inline BluetoothLEAdvertisementWatcherTrigger::BluetoothLEAdvertisementWatcherTrigger() :
	BluetoothLEAdvertisementWatcherTrigger(ActivateInstance<BluetoothLEAdvertisementWatcherTrigger>())
{}

inline BluetoothLEAdvertisementPublisherTrigger::BluetoothLEAdvertisementPublisherTrigger() :
	BluetoothLEAdvertisementPublisherTrigger(ActivateInstance<BluetoothLEAdvertisementPublisherTrigger>())
{}

inline LocationTrigger::LocationTrigger(Windows::ApplicationModel::Background::LocationTriggerType const triggerType) :
	LocationTrigger(GetActivationFactory<LocationTrigger, ILocationTriggerFactory>().Create(triggerType))
{}

inline ActivitySensorTrigger::ActivitySensorTrigger(unsigned const reportIntervalInMilliseconds) :
	ActivitySensorTrigger(GetActivationFactory<ActivitySensorTrigger, IActivitySensorTriggerFactory>().Create(reportIntervalInMilliseconds))
{}

inline SensorDataThresholdTrigger::SensorDataThresholdTrigger(Windows::Devices::Sensors::ISensorDataThreshold const & threshold) :
	SensorDataThresholdTrigger(GetActivationFactory<SensorDataThresholdTrigger, ISensorDataThresholdTriggerFactory>().Create(threshold))
{}

inline NetworkOperatorHotspotAuthenticationTrigger::NetworkOperatorHotspotAuthenticationTrigger() :
	NetworkOperatorHotspotAuthenticationTrigger(ActivateInstance<NetworkOperatorHotspotAuthenticationTrigger>())
{}

inline SocketActivityTrigger::SocketActivityTrigger() :
	SocketActivityTrigger(ActivateInstance<SocketActivityTrigger>())
{}

inline PushNotificationTrigger::PushNotificationTrigger() :
	PushNotificationTrigger(ActivateInstance<PushNotificationTrigger>())
{}

inline PushNotificationTrigger::PushNotificationTrigger(StringReference const & applicationId) :
	PushNotificationTrigger(GetActivationFactory<PushNotificationTrigger, IPushNotificationTriggerFactory>().Create(applicationId))
{}

inline ToastNotificationHistoryChangedTrigger::ToastNotificationHistoryChangedTrigger() :
	ToastNotificationHistoryChangedTrigger(ActivateInstance<ToastNotificationHistoryChangedTrigger>())
{}

inline ToastNotificationHistoryChangedTrigger::ToastNotificationHistoryChangedTrigger(StringReference const & applicationId) :
	ToastNotificationHistoryChangedTrigger(GetActivationFactory<ToastNotificationHistoryChangedTrigger, IToastNotificationHistoryChangedTriggerFactory>().Create(applicationId))
{}

inline ToastNotificationActionTrigger::ToastNotificationActionTrigger() :
	ToastNotificationActionTrigger(ActivateInstance<ToastNotificationActionTrigger>())
{}

inline ToastNotificationActionTrigger::ToastNotificationActionTrigger(StringReference const & applicationId) :
	ToastNotificationActionTrigger(GetActivationFactory<ToastNotificationActionTrigger, IToastNotificationActionTriggerFactory>().Create(applicationId))
{}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls {

inline PhoneCallHistoryEntryAddress::PhoneCallHistoryEntryAddress() :
	PhoneCallHistoryEntryAddress(ActivateInstance<PhoneCallHistoryEntryAddress>())
{}

inline PhoneCallHistoryEntryAddress::PhoneCallHistoryEntryAddress(StringReference const & rawAddress, Windows::ApplicationModel::Calls::PhoneCallHistoryEntryRawAddressKind const rawAddressKind) :
	PhoneCallHistoryEntryAddress(GetActivationFactory<PhoneCallHistoryEntryAddress, IPhoneCallHistoryEntryAddressFactory>().Create(rawAddress, rawAddressKind))
{}

inline PhoneCallHistoryEntry::PhoneCallHistoryEntry() :
	PhoneCallHistoryEntry(ActivateInstance<PhoneCallHistoryEntry>())
{}

inline PhoneCallHistoryEntryQueryOptions::PhoneCallHistoryEntryQueryOptions() :
	PhoneCallHistoryEntryQueryOptions(ActivateInstance<PhoneCallHistoryEntryQueryOptions>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallHistoryStore> PhoneCallHistoryManager::RequestStoreAsync(Windows::ApplicationModel::Calls::PhoneCallHistoryStoreAccessType const accessType)
{
	return GetActivationFactory<PhoneCallHistoryManager, IPhoneCallHistoryManagerStatics>().RequestStoreAsync(accessType);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneLine> PhoneLine::FromIdAsync(GUID const lineId)
{
	return GetActivationFactory<PhoneLine, IPhoneLineStatics>().FromIdAsync(lineId);
}

inline PhoneDialOptions::PhoneDialOptions() :
	PhoneDialOptions(ActivateInstance<PhoneDialOptions>())
{}

inline long long PhoneCallManager::CallStateChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<PhoneCallManager, IPhoneCallManagerStatics2>().CallStateChanged(handler);
}

template <typename F> long long PhoneCallManager::CallStateChanged(F handler)
{
	return GetActivationFactory<PhoneCallManager, IPhoneCallManagerStatics2>().CallStateChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void PhoneCallManager::CallStateChanged(long long const token)
{
	GetActivationFactory<PhoneCallManager, IPhoneCallManagerStatics2>().CallStateChanged(token);
}

inline bool PhoneCallManager::IsCallActive()
{
	return GetActivationFactory<PhoneCallManager, IPhoneCallManagerStatics2>().IsCallActive();
}

inline bool PhoneCallManager::IsCallIncoming()
{
	return GetActivationFactory<PhoneCallManager, IPhoneCallManagerStatics2>().IsCallIncoming();
}

inline void PhoneCallManager::ShowPhoneCallSettingsUI()
{
	GetActivationFactory<PhoneCallManager, IPhoneCallManagerStatics2>().ShowPhoneCallSettingsUI();
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallStore> PhoneCallManager::RequestStoreAsync()
{
	return GetActivationFactory<PhoneCallManager, IPhoneCallManagerStatics2>().RequestStoreAsync();
}

inline void PhoneCallManager::ShowPhoneCallUI(StringReference const & phoneNumber, StringReference const & displayName)
{
	GetActivationFactory<PhoneCallManager, IPhoneCallManagerStatics>().ShowPhoneCallUI(phoneNumber, displayName);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallVideoCapabilities> PhoneCallVideoCapabilitiesManager::GetCapabilitiesAsync(StringReference const & phoneNumber)
{
	return GetActivationFactory<PhoneCallVideoCapabilitiesManager, IPhoneCallVideoCapabilitiesManagerStatics>().GetCapabilitiesAsync(phoneNumber);
}

inline bool PhoneCallBlocking::BlockUnknownNumbers()
{
	return GetActivationFactory<PhoneCallBlocking, IPhoneCallBlockingStatics>().BlockUnknownNumbers();
}

inline void PhoneCallBlocking::BlockUnknownNumbers(bool const value)
{
	GetActivationFactory<PhoneCallBlocking, IPhoneCallBlockingStatics>().BlockUnknownNumbers(value);
}

inline bool PhoneCallBlocking::BlockPrivateNumbers()
{
	return GetActivationFactory<PhoneCallBlocking, IPhoneCallBlockingStatics>().BlockPrivateNumbers();
}

inline void PhoneCallBlocking::BlockPrivateNumbers(bool const value)
{
	GetActivationFactory<PhoneCallBlocking, IPhoneCallBlockingStatics>().BlockPrivateNumbers(value);
}

inline Windows::Foundation::IAsyncOperation<bool> PhoneCallBlocking::SetCallBlockingListAsync(Windows::Foundation::Collections::IIterable<String> const & phoneNumberList)
{
	return GetActivationFactory<PhoneCallBlocking, IPhoneCallBlockingStatics>().SetCallBlockingListAsync(phoneNumberList);
}

inline Windows::ApplicationModel::Calls::VoipCallCoordinator VoipCallCoordinator::GetDefault()
{
	return GetActivationFactory<VoipCallCoordinator, IVoipCallCoordinatorStatics>().GetDefault();
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls { namespace Background {

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Contacts {

inline Contact::Contact() :
	Contact(ActivateInstance<Contact>())
{}

inline ContactCardOptions::ContactCardOptions() :
	ContactCardOptions(ActivateInstance<ContactCardOptions>())
{}

inline FullContactCardOptions::FullContactCardOptions() :
	FullContactCardOptions(ActivateInstance<FullContactCardOptions>())
{}

inline ContactAnnotation::ContactAnnotation() :
	ContactAnnotation(ActivateInstance<ContactAnnotation>())
{}

inline ContactQueryOptions::ContactQueryOptions() :
	ContactQueryOptions(ActivateInstance<ContactQueryOptions>())
{}

inline ContactQueryOptions::ContactQueryOptions(StringReference const & text) :
	ContactQueryOptions(GetActivationFactory<ContactQueryOptions, IContactQueryOptionsFactory>().CreateWithText(text))
{}

inline ContactQueryOptions::ContactQueryOptions(StringReference const & text, Windows::ApplicationModel::Contacts::ContactQuerySearchFields const fields) :
	ContactQueryOptions(GetActivationFactory<ContactQueryOptions, IContactQueryOptionsFactory>().CreateWithTextAndFields(text, fields))
{}

inline ContactPhone::ContactPhone() :
	ContactPhone(ActivateInstance<ContactPhone>())
{}

inline ContactEmail::ContactEmail() :
	ContactEmail(ActivateInstance<ContactEmail>())
{}

inline ContactAddress::ContactAddress() :
	ContactAddress(ActivateInstance<ContactAddress>())
{}

inline ContactConnectedServiceAccount::ContactConnectedServiceAccount() :
	ContactConnectedServiceAccount(ActivateInstance<ContactConnectedServiceAccount>())
{}

inline ContactDate::ContactDate() :
	ContactDate(ActivateInstance<ContactDate>())
{}

inline ContactJobInfo::ContactJobInfo() :
	ContactJobInfo(ActivateInstance<ContactJobInfo>())
{}

inline ContactSignificantOther::ContactSignificantOther() :
	ContactSignificantOther(ActivateInstance<ContactSignificantOther>())
{}

inline ContactWebsite::ContactWebsite() :
	ContactWebsite(ActivateInstance<ContactWebsite>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactStore> ContactManager::RequestStoreAsync()
{
	return GetActivationFactory<ContactManager, IContactManagerStatics2>().RequestStoreAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> ContactManager::ConvertContactToVCardAsync(Windows::ApplicationModel::Contacts::Contact const & contact)
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().ConvertContactToVCardAsync(contact);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> ContactManager::ConvertContactToVCardAsync(Windows::ApplicationModel::Contacts::Contact const & contact, unsigned const maxBytes)
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().ConvertContactToVCardAsync(contact, maxBytes);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> ContactManager::ConvertVCardToContactAsync(Windows::Storage::Streams::IRandomAccessStreamReference const & vCard)
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().ConvertVCardToContactAsync(vCard);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactStore> ContactManager::RequestStoreAsync(Windows::ApplicationModel::Contacts::ContactStoreAccessType const accessType)
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().RequestStoreAsync(accessType);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationStore> ContactManager::RequestAnnotationStoreAsync(Windows::ApplicationModel::Contacts::ContactAnnotationStoreAccessType const accessType)
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().RequestAnnotationStoreAsync(accessType);
}

inline bool ContactManager::IsShowContactCardSupported()
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().IsShowContactCardSupported();
}

inline void ContactManager::ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::ApplicationModel::Contacts::ContactCardOptions const & contactCardOptions)
{
	GetActivationFactory<ContactManager, IContactManagerStatics3>().ShowContactCard(contact, selection, preferredPlacement, contactCardOptions);
}

inline bool ContactManager::IsShowDelayLoadedContactCardSupported()
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().IsShowDelayLoadedContactCardSupported();
}

inline Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader ContactManager::ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::ApplicationModel::Contacts::ContactCardOptions const & contactCardOptions)
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().ShowDelayLoadedContactCard(contact, selection, preferredPlacement, contactCardOptions);
}

inline void ContactManager::ShowFullContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::ApplicationModel::Contacts::FullContactCardOptions const & fullContactCardOptions)
{
	GetActivationFactory<ContactManager, IContactManagerStatics3>().ShowFullContactCard(contact, fullContactCardOptions);
}

inline Windows::ApplicationModel::Contacts::ContactNameOrder ContactManager::SystemDisplayNameOrder()
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().SystemDisplayNameOrder();
}

inline void ContactManager::SystemDisplayNameOrder(Windows::ApplicationModel::Contacts::ContactNameOrder const value)
{
	GetActivationFactory<ContactManager, IContactManagerStatics3>().SystemDisplayNameOrder(value);
}

inline Windows::ApplicationModel::Contacts::ContactNameOrder ContactManager::SystemSortOrder()
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().SystemSortOrder();
}

inline void ContactManager::SystemSortOrder(Windows::ApplicationModel::Contacts::ContactNameOrder const value)
{
	GetActivationFactory<ContactManager, IContactManagerStatics3>().SystemSortOrder(value);
}

inline void ContactManager::ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection)
{
	GetActivationFactory<ContactManager, IContactManagerStatics>().ShowContactCard(contact, selection);
}

inline void ContactManager::ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	GetActivationFactory<ContactManager, IContactManagerStatics>().ShowContactCard(contact, selection, preferredPlacement);
}

inline Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader ContactManager::ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	return GetActivationFactory<ContactManager, IContactManagerStatics>().ShowDelayLoadedContactCard(contact, selection, preferredPlacement);
}

inline String ContactLaunchActionVerbs::Call()
{
	return GetActivationFactory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>().Call();
}

inline String ContactLaunchActionVerbs::Message()
{
	return GetActivationFactory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>().Message();
}

inline String ContactLaunchActionVerbs::Map()
{
	return GetActivationFactory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>().Map();
}

inline String ContactLaunchActionVerbs::Post()
{
	return GetActivationFactory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>().Post();
}

inline String ContactLaunchActionVerbs::VideoCall()
{
	return GetActivationFactory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>().VideoCall();
}

inline ContactField::ContactField(StringReference const & value, Windows::ApplicationModel::Contacts::ContactFieldType const type) :
	ContactField(GetActivationFactory<ContactField, IContactFieldFactory>().CreateField(value, type))
{}

inline ContactField::ContactField(StringReference const & value, Windows::ApplicationModel::Contacts::ContactFieldType const type, Windows::ApplicationModel::Contacts::ContactFieldCategory const category) :
	ContactField(GetActivationFactory<ContactField, IContactFieldFactory>().CreateField(value, type, category))
{}

inline ContactField::ContactField(StringReference const & name, StringReference const & value, Windows::ApplicationModel::Contacts::ContactFieldType const type, Windows::ApplicationModel::Contacts::ContactFieldCategory const category) :
	ContactField(GetActivationFactory<ContactField, IContactFieldFactory>().CreateField(name, value, type, category))
{}

inline ContactLocationField::ContactLocationField(StringReference const & unstructuredAddress) :
	ContactLocationField(GetActivationFactory<ContactLocationField, IContactLocationFieldFactory>().CreateLocation(unstructuredAddress))
{}

inline ContactLocationField::ContactLocationField(StringReference const & unstructuredAddress, Windows::ApplicationModel::Contacts::ContactFieldCategory const category) :
	ContactLocationField(GetActivationFactory<ContactLocationField, IContactLocationFieldFactory>().CreateLocation(unstructuredAddress, category))
{}

inline ContactLocationField::ContactLocationField(StringReference const & unstructuredAddress, Windows::ApplicationModel::Contacts::ContactFieldCategory const category, StringReference const & street, StringReference const & city, StringReference const & region, StringReference const & country, StringReference const & postalCode) :
	ContactLocationField(GetActivationFactory<ContactLocationField, IContactLocationFieldFactory>().CreateLocation(unstructuredAddress, category, street, city, region, country, postalCode))
{}

inline ContactInstantMessageField::ContactInstantMessageField(StringReference const & userName) :
	ContactInstantMessageField(GetActivationFactory<ContactInstantMessageField, IContactInstantMessageFieldFactory>().CreateInstantMessage(userName))
{}

inline ContactInstantMessageField::ContactInstantMessageField(StringReference const & userName, Windows::ApplicationModel::Contacts::ContactFieldCategory const category) :
	ContactInstantMessageField(GetActivationFactory<ContactInstantMessageField, IContactInstantMessageFieldFactory>().CreateInstantMessage(userName, category))
{}

inline ContactInstantMessageField::ContactInstantMessageField(StringReference const & userName, Windows::ApplicationModel::Contacts::ContactFieldCategory const category, StringReference const & service, StringReference const & displayText, Windows::Foundation::Uri const & verb) :
	ContactInstantMessageField(GetActivationFactory<ContactInstantMessageField, IContactInstantMessageFieldFactory>().CreateInstantMessage(userName, category, service, displayText, verb))
{}

inline String KnownContactField::Email()
{
	return GetActivationFactory<KnownContactField, IKnownContactFieldStatics>().Email();
}

inline String KnownContactField::PhoneNumber()
{
	return GetActivationFactory<KnownContactField, IKnownContactFieldStatics>().PhoneNumber();
}

inline String KnownContactField::Location()
{
	return GetActivationFactory<KnownContactField, IKnownContactFieldStatics>().Location();
}

inline String KnownContactField::InstantMessage()
{
	return GetActivationFactory<KnownContactField, IKnownContactFieldStatics>().InstantMessage();
}

inline Windows::ApplicationModel::Contacts::ContactFieldType KnownContactField::ConvertNameToType(StringReference const & name)
{
	return GetActivationFactory<KnownContactField, IKnownContactFieldStatics>().ConvertNameToType(name);
}

inline String KnownContactField::ConvertTypeToName(Windows::ApplicationModel::Contacts::ContactFieldType const type)
{
	return GetActivationFactory<KnownContactField, IKnownContactFieldStatics>().ConvertTypeToName(type);
}

inline ContactFieldFactory::ContactFieldFactory() :
	ContactFieldFactory(ActivateInstance<ContactFieldFactory>())
{}

inline ContactPicker::ContactPicker() :
	ContactPicker(ActivateInstance<ContactPicker>())
{}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Core {

inline void CoreApplication::IncrementApplicationUseCount()
{
	GetActivationFactory<CoreApplication, ICoreApplicationUseCount>().IncrementApplicationUseCount();
}

inline void CoreApplication::DecrementApplicationUseCount()
{
	GetActivationFactory<CoreApplication, ICoreApplicationUseCount>().DecrementApplicationUseCount();
}

inline Windows::ApplicationModel::Core::CoreApplicationView CoreApplication::CreateNewView(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource)
{
	return GetActivationFactory<CoreApplication, ICoreImmersiveApplication3>().CreateNewView(viewSource);
}

inline String CoreApplication::Id()
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Id();
}

inline long long CoreApplication::Suspending(Windows::Foundation::IEventHandler<Windows::ApplicationModel::SuspendingEventArgs> const & handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Suspending(handler);
}

template <typename F> long long CoreApplication::Suspending(F handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Suspending(Windows::Foundation::EventHandler<Windows::ApplicationModel::SuspendingEventArgs>(handler));
}

inline void CoreApplication::Suspending(long long const token)
{
	GetActivationFactory<CoreApplication, ICoreApplication>().Suspending(token);
}

inline long long CoreApplication::Resuming(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Resuming(handler);
}

template <typename F> long long CoreApplication::Resuming(F handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Resuming(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void CoreApplication::Resuming(long long const token)
{
	GetActivationFactory<CoreApplication, ICoreApplication>().Resuming(token);
}

inline Windows::Foundation::Collections::IPropertySet CoreApplication::Properties()
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Properties();
}

inline Windows::ApplicationModel::Core::CoreApplicationView CoreApplication::GetCurrentView()
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().GetCurrentView();
}

inline void CoreApplication::Run(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource)
{
	GetActivationFactory<CoreApplication, ICoreApplication>().Run(viewSource);
}

inline void CoreApplication::RunWithActivationFactories(Windows::Foundation::IGetActivationFactory const & activationFactoryCallback)
{
	GetActivationFactory<CoreApplication, ICoreApplication>().RunWithActivationFactories(activationFactoryCallback);
}

inline void CoreApplication::Exit()
{
	GetActivationFactory<CoreApplication, ICoreApplicationExit>().Exit();
}

inline long long CoreApplication::Exiting(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplicationExit>().Exiting(handler);
}

template <typename F> long long CoreApplication::Exiting(F handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplicationExit>().Exiting(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void CoreApplication::Exiting(long long const token)
{
	GetActivationFactory<CoreApplication, ICoreApplicationExit>().Exiting(token);
}

inline Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::CoreApplicationView> CoreApplication::Views()
{
	return GetActivationFactory<CoreApplication, ICoreImmersiveApplication>().Views();
}

inline Windows::ApplicationModel::Core::CoreApplicationView CoreApplication::CreateNewView(StringReference const & runtimeType, StringReference const & entryPoint)
{
	return GetActivationFactory<CoreApplication, ICoreImmersiveApplication>().CreateNewView(runtimeType, entryPoint);
}

inline Windows::ApplicationModel::Core::CoreApplicationView CoreApplication::MainView()
{
	return GetActivationFactory<CoreApplication, ICoreImmersiveApplication>().MainView();
}

inline long long CoreApplication::UnhandledErrorDetected(Windows::Foundation::IEventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs> const & handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplicationUnhandledError>().UnhandledErrorDetected(handler);
}

template <typename F> long long CoreApplication::UnhandledErrorDetected(F handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplicationUnhandledError>().UnhandledErrorDetected(Windows::Foundation::EventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>(handler));
}

inline void CoreApplication::UnhandledErrorDetected(long long const token)
{
	GetActivationFactory<CoreApplication, ICoreApplicationUnhandledError>().UnhandledErrorDetected(token);
}

inline Windows::ApplicationModel::Core::CoreApplicationView CoreApplication::CreateNewView()
{
	return GetActivationFactory<CoreApplication, ICoreImmersiveApplication2>().CreateNewView();
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

inline String StandardDataFormats::WebLink()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics2>().WebLink();
}

inline String StandardDataFormats::ApplicationLink()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics2>().ApplicationLink();
}

inline String StandardDataFormats::Text()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().Text();
}

inline String StandardDataFormats::Uri()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().Uri();
}

inline String StandardDataFormats::Html()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().Html();
}

inline String StandardDataFormats::Rtf()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().Rtf();
}

inline String StandardDataFormats::Bitmap()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().Bitmap();
}

inline String StandardDataFormats::StorageItems()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().StorageItems();
}

inline DataPackage::DataPackage() :
	DataPackage(ActivateInstance<DataPackage>())
{}

inline String HtmlFormatHelper::GetStaticFragment(StringReference const & htmlFormat)
{
	return GetActivationFactory<HtmlFormatHelper, IHtmlFormatHelperStatics>().GetStaticFragment(htmlFormat);
}

inline String HtmlFormatHelper::CreateHtmlFormat(StringReference const & htmlFragment)
{
	return GetActivationFactory<HtmlFormatHelper, IHtmlFormatHelperStatics>().CreateHtmlFormat(htmlFragment);
}

inline Windows::ApplicationModel::DataTransfer::DataPackageView Clipboard::GetContent()
{
	return GetActivationFactory<Clipboard, IClipboardStatics>().GetContent();
}

inline void Clipboard::SetContent(Windows::ApplicationModel::DataTransfer::DataPackage const & content)
{
	GetActivationFactory<Clipboard, IClipboardStatics>().SetContent(content);
}

inline void Clipboard::Flush()
{
	GetActivationFactory<Clipboard, IClipboardStatics>().Flush();
}

inline void Clipboard::Clear()
{
	GetActivationFactory<Clipboard, IClipboardStatics>().Clear();
}

inline long long Clipboard::ContentChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler)
{
	return GetActivationFactory<Clipboard, IClipboardStatics>().ContentChanged(changeHandler);
}

template <typename F> long long Clipboard::ContentChanged(F changeHandler)
{
	return GetActivationFactory<Clipboard, IClipboardStatics>().ContentChanged(Windows::Foundation::EventHandler<IInspectable>(changeHandler));
}

inline void Clipboard::ContentChanged(long long const token)
{
	GetActivationFactory<Clipboard, IClipboardStatics>().ContentChanged(token);
}

inline void DataTransferManager::ShowShareUI()
{
	GetActivationFactory<DataTransferManager, IDataTransferManagerStatics>().ShowShareUI();
}

inline Windows::ApplicationModel::DataTransfer::DataTransferManager DataTransferManager::GetForCurrentView()
{
	return GetActivationFactory<DataTransferManager, IDataTransferManagerStatics>().GetForCurrentView();
}

inline String SharedStorageAccessManager::AddFile(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<SharedStorageAccessManager, ISharedStorageAccessManagerStatics>().AddFile(file);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> SharedStorageAccessManager::RedeemTokenForFileAsync(StringReference const & token)
{
	return GetActivationFactory<SharedStorageAccessManager, ISharedStorageAccessManagerStatics>().RedeemTokenForFileAsync(token);
}

inline void SharedStorageAccessManager::RemoveFile(StringReference const & token)
{
	GetActivationFactory<SharedStorageAccessManager, ISharedStorageAccessManagerStatics>().RemoveFile(token);
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

inline QuickLink::QuickLink() :
	QuickLink(ActivateInstance<QuickLink>())
{}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Search {

inline LocalContentSuggestionSettings::LocalContentSuggestionSettings() :
	LocalContentSuggestionSettings(ActivateInstance<LocalContentSuggestionSettings>())
{}

inline void SearchPane::HideThisApplication()
{
	GetActivationFactory<SearchPane, ISearchPaneStaticsWithHideThisApplication>().HideThisApplication();
}

inline Windows::ApplicationModel::Search::SearchPane SearchPane::GetForCurrentView()
{
	return GetActivationFactory<SearchPane, ISearchPaneStatics>().GetForCurrentView();
}

inline SearchQueryLinguisticDetails::SearchQueryLinguisticDetails(Windows::Foundation::Collections::IIterable<String> const & queryTextAlternatives, unsigned const queryTextCompositionStart, unsigned const queryTextCompositionLength) :
	SearchQueryLinguisticDetails(GetActivationFactory<SearchQueryLinguisticDetails, ISearchQueryLinguisticDetailsFactory>().CreateInstance(queryTextAlternatives, queryTextCompositionStart, queryTextCompositionLength))
{}

}}}}

namespace winrt { namespace Windows { namespace Data { namespace Text {

inline SemanticTextQuery::SemanticTextQuery(StringReference const & aqsFilter) :
	SemanticTextQuery(GetActivationFactory<SemanticTextQuery, ISemanticTextQueryFactory>().Create(aqsFilter))
{}

inline SemanticTextQuery::SemanticTextQuery(StringReference const & aqsFilter, StringReference const & filterLanguage) :
	SemanticTextQuery(GetActivationFactory<SemanticTextQuery, ISemanticTextQueryFactory>().CreateWithLanguage(aqsFilter, filterLanguage))
{}

inline unsigned UnicodeCharacters::GetCodepointFromSurrogatePair(unsigned const highSurrogate, unsigned const lowSurrogate)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().GetCodepointFromSurrogatePair(highSurrogate, lowSurrogate);
}

inline void UnicodeCharacters::GetSurrogatePairFromCodepoint(unsigned const codepoint, wchar_t & highSurrogate, wchar_t & lowSurrogate)
{
	GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().GetSurrogatePairFromCodepoint(codepoint, highSurrogate, lowSurrogate);
}

inline bool UnicodeCharacters::IsHighSurrogate(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsHighSurrogate(codepoint);
}

inline bool UnicodeCharacters::IsLowSurrogate(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsLowSurrogate(codepoint);
}

inline bool UnicodeCharacters::IsSupplementary(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsSupplementary(codepoint);
}

inline bool UnicodeCharacters::IsNoncharacter(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsNoncharacter(codepoint);
}

inline bool UnicodeCharacters::IsWhitespace(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsWhitespace(codepoint);
}

inline bool UnicodeCharacters::IsAlphabetic(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsAlphabetic(codepoint);
}

inline bool UnicodeCharacters::IsCased(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsCased(codepoint);
}

inline bool UnicodeCharacters::IsUppercase(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsUppercase(codepoint);
}

inline bool UnicodeCharacters::IsLowercase(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsLowercase(codepoint);
}

inline bool UnicodeCharacters::IsIdStart(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsIdStart(codepoint);
}

inline bool UnicodeCharacters::IsIdContinue(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsIdContinue(codepoint);
}

inline bool UnicodeCharacters::IsGraphemeBase(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsGraphemeBase(codepoint);
}

inline bool UnicodeCharacters::IsGraphemeExtend(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsGraphemeExtend(codepoint);
}

inline Windows::Data::Text::UnicodeNumericType UnicodeCharacters::GetNumericType(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().GetNumericType(codepoint);
}

inline Windows::Data::Text::UnicodeGeneralCategory UnicodeCharacters::GetGeneralCategory(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().GetGeneralCategory(codepoint);
}

inline WordsSegmenter::WordsSegmenter(StringReference const & language) :
	WordsSegmenter(GetActivationFactory<WordsSegmenter, IWordsSegmenterFactory>().CreateWithLanguage(language))
{}

inline SelectableWordsSegmenter::SelectableWordsSegmenter(StringReference const & language) :
	SelectableWordsSegmenter(GetActivationFactory<SelectableWordsSegmenter, ISelectableWordsSegmenterFactory>().CreateWithLanguage(language))
{}

inline TextPredictionGenerator::TextPredictionGenerator(StringReference const & languageTag) :
	TextPredictionGenerator(GetActivationFactory<TextPredictionGenerator, ITextPredictionGeneratorFactory>().Create(languageTag))
{}

inline TextConversionGenerator::TextConversionGenerator(StringReference const & languageTag) :
	TextConversionGenerator(GetActivationFactory<TextConversionGenerator, ITextConversionGeneratorFactory>().Create(languageTag))
{}

inline TextReverseConversionGenerator::TextReverseConversionGenerator(StringReference const & languageTag) :
	TextReverseConversionGenerator(GetActivationFactory<TextReverseConversionGenerator, ITextReverseConversionGeneratorFactory>().Create(languageTag))
{}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth {

inline String BluetoothLEDevice::GetDeviceSelectorFromPairingState(bool const pairingState)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>().GetDeviceSelectorFromPairingState(pairingState);
}

inline String BluetoothLEDevice::GetDeviceSelectorFromConnectionStatus(Windows::Devices::Bluetooth::BluetoothConnectionStatus const connectionStatus)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>().GetDeviceSelectorFromConnectionStatus(connectionStatus);
}

inline String BluetoothLEDevice::GetDeviceSelectorFromDeviceName(StringReference const & deviceName)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>().GetDeviceSelectorFromDeviceName(deviceName);
}

inline String BluetoothLEDevice::GetDeviceSelectorFromBluetoothAddress(unsigned long long const bluetoothAddress)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>().GetDeviceSelectorFromBluetoothAddress(bluetoothAddress);
}

inline String BluetoothLEDevice::GetDeviceSelectorFromBluetoothAddress(unsigned long long const bluetoothAddress, Windows::Devices::Bluetooth::BluetoothAddressType const bluetoothAddressType)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>().GetDeviceSelectorFromBluetoothAddress(bluetoothAddress, bluetoothAddressType);
}

inline String BluetoothLEDevice::GetDeviceSelectorFromAppearance(Windows::Devices::Bluetooth::BluetoothLEAppearance const & appearance)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>().GetDeviceSelectorFromAppearance(appearance);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> BluetoothLEDevice::FromBluetoothAddressAsync(unsigned long long const bluetoothAddress, Windows::Devices::Bluetooth::BluetoothAddressType const bluetoothAddressType)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>().FromBluetoothAddressAsync(bluetoothAddress, bluetoothAddressType);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> BluetoothLEDevice::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics>().FromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> BluetoothLEDevice::FromBluetoothAddressAsync(unsigned long long const bluetoothAddress)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics>().FromBluetoothAddressAsync(bluetoothAddress);
}

inline String BluetoothLEDevice::GetDeviceSelector()
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> BluetoothDevice::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics>().FromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> BluetoothDevice::FromHostNameAsync(Windows::Networking::HostName const & hostName)
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics>().FromHostNameAsync(hostName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> BluetoothDevice::FromBluetoothAddressAsync(unsigned long long const address)
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics>().FromBluetoothAddressAsync(address);
}

inline String BluetoothDevice::GetDeviceSelector()
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics>().GetDeviceSelector();
}

inline String BluetoothDevice::GetDeviceSelectorFromPairingState(bool const pairingState)
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics2>().GetDeviceSelectorFromPairingState(pairingState);
}

inline String BluetoothDevice::GetDeviceSelectorFromConnectionStatus(Windows::Devices::Bluetooth::BluetoothConnectionStatus const connectionStatus)
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics2>().GetDeviceSelectorFromConnectionStatus(connectionStatus);
}

inline String BluetoothDevice::GetDeviceSelectorFromDeviceName(StringReference const & deviceName)
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics2>().GetDeviceSelectorFromDeviceName(deviceName);
}

inline String BluetoothDevice::GetDeviceSelectorFromBluetoothAddress(unsigned long long const bluetoothAddress)
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics2>().GetDeviceSelectorFromBluetoothAddress(bluetoothAddress);
}

inline String BluetoothDevice::GetDeviceSelectorFromClassOfDevice(Windows::Devices::Bluetooth::BluetoothClassOfDevice const & classOfDevice)
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics2>().GetDeviceSelectorFromClassOfDevice(classOfDevice);
}

inline Windows::Devices::Bluetooth::BluetoothClassOfDevice BluetoothClassOfDevice::FromRawValue(unsigned const rawValue)
{
	return GetActivationFactory<BluetoothClassOfDevice, IBluetoothClassOfDeviceStatics>().FromRawValue(rawValue);
}

inline Windows::Devices::Bluetooth::BluetoothClassOfDevice BluetoothClassOfDevice::FromParts(Windows::Devices::Bluetooth::BluetoothMajorClass const majorClass, Windows::Devices::Bluetooth::BluetoothMinorClass const minorClass, Windows::Devices::Bluetooth::BluetoothServiceCapabilities const serviceCapabilities)
{
	return GetActivationFactory<BluetoothClassOfDevice, IBluetoothClassOfDeviceStatics>().FromParts(majorClass, minorClass, serviceCapabilities);
}

inline unsigned short BluetoothLEAppearanceCategories::Uncategorized()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Uncategorized();
}

inline unsigned short BluetoothLEAppearanceCategories::Phone()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Phone();
}

inline unsigned short BluetoothLEAppearanceCategories::Computer()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Computer();
}

inline unsigned short BluetoothLEAppearanceCategories::Watch()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Watch();
}

inline unsigned short BluetoothLEAppearanceCategories::Clock()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Clock();
}

inline unsigned short BluetoothLEAppearanceCategories::Display()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Display();
}

inline unsigned short BluetoothLEAppearanceCategories::RemoteControl()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().RemoteControl();
}

inline unsigned short BluetoothLEAppearanceCategories::EyeGlasses()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().EyeGlasses();
}

inline unsigned short BluetoothLEAppearanceCategories::Tag()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Tag();
}

inline unsigned short BluetoothLEAppearanceCategories::Keyring()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Keyring();
}

inline unsigned short BluetoothLEAppearanceCategories::MediaPlayer()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().MediaPlayer();
}

inline unsigned short BluetoothLEAppearanceCategories::BarcodeScanner()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().BarcodeScanner();
}

inline unsigned short BluetoothLEAppearanceCategories::Thermometer()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Thermometer();
}

inline unsigned short BluetoothLEAppearanceCategories::HeartRate()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().HeartRate();
}

inline unsigned short BluetoothLEAppearanceCategories::BloodPressure()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().BloodPressure();
}

inline unsigned short BluetoothLEAppearanceCategories::HumanInterfaceDevice()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().HumanInterfaceDevice();
}

inline unsigned short BluetoothLEAppearanceCategories::GlucoseMeter()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().GlucoseMeter();
}

inline unsigned short BluetoothLEAppearanceCategories::RunningWalking()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().RunningWalking();
}

inline unsigned short BluetoothLEAppearanceCategories::Cycling()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Cycling();
}

inline unsigned short BluetoothLEAppearanceCategories::PulseOximeter()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().PulseOximeter();
}

inline unsigned short BluetoothLEAppearanceCategories::WeightScale()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().WeightScale();
}

inline unsigned short BluetoothLEAppearanceCategories::OutdoorSportActivity()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().OutdoorSportActivity();
}

inline unsigned short BluetoothLEAppearanceSubcategories::Generic()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().Generic();
}

inline unsigned short BluetoothLEAppearanceSubcategories::SportsWatch()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().SportsWatch();
}

inline unsigned short BluetoothLEAppearanceSubcategories::ThermometerEar()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().ThermometerEar();
}

inline unsigned short BluetoothLEAppearanceSubcategories::HeartRateBelt()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().HeartRateBelt();
}

inline unsigned short BluetoothLEAppearanceSubcategories::BloodPressureArm()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().BloodPressureArm();
}

inline unsigned short BluetoothLEAppearanceSubcategories::BloodPressureWrist()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().BloodPressureWrist();
}

inline unsigned short BluetoothLEAppearanceSubcategories::Keyboard()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().Keyboard();
}

inline unsigned short BluetoothLEAppearanceSubcategories::Mouse()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().Mouse();
}

inline unsigned short BluetoothLEAppearanceSubcategories::Joystick()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().Joystick();
}

inline unsigned short BluetoothLEAppearanceSubcategories::Gamepad()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().Gamepad();
}

inline unsigned short BluetoothLEAppearanceSubcategories::DigitizerTablet()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().DigitizerTablet();
}

inline unsigned short BluetoothLEAppearanceSubcategories::CardReader()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().CardReader();
}

inline unsigned short BluetoothLEAppearanceSubcategories::DigitalPen()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().DigitalPen();
}

inline unsigned short BluetoothLEAppearanceSubcategories::BarcodeScanner()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().BarcodeScanner();
}

inline unsigned short BluetoothLEAppearanceSubcategories::RunningWalkingInShoe()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().RunningWalkingInShoe();
}

inline unsigned short BluetoothLEAppearanceSubcategories::RunningWalkingOnShoe()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().RunningWalkingOnShoe();
}

inline unsigned short BluetoothLEAppearanceSubcategories::RunningWalkingOnHip()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().RunningWalkingOnHip();
}

inline unsigned short BluetoothLEAppearanceSubcategories::CyclingComputer()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().CyclingComputer();
}

inline unsigned short BluetoothLEAppearanceSubcategories::CyclingSpeedSensor()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().CyclingSpeedSensor();
}

inline unsigned short BluetoothLEAppearanceSubcategories::CyclingCadenceSensor()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().CyclingCadenceSensor();
}

inline unsigned short BluetoothLEAppearanceSubcategories::CyclingPowerSensor()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().CyclingPowerSensor();
}

inline unsigned short BluetoothLEAppearanceSubcategories::CyclingSpeedCadenceSensor()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().CyclingSpeedCadenceSensor();
}

inline unsigned short BluetoothLEAppearanceSubcategories::OximeterFingertip()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().OximeterFingertip();
}

inline unsigned short BluetoothLEAppearanceSubcategories::OximeterWristWorn()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().OximeterWristWorn();
}

inline unsigned short BluetoothLEAppearanceSubcategories::LocationDisplay()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().LocationDisplay();
}

inline unsigned short BluetoothLEAppearanceSubcategories::LocationNavigationDisplay()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().LocationNavigationDisplay();
}

inline unsigned short BluetoothLEAppearanceSubcategories::LocationPod()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().LocationPod();
}

inline unsigned short BluetoothLEAppearanceSubcategories::LocationNavigationPod()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().LocationNavigationPod();
}

inline Windows::Devices::Bluetooth::BluetoothLEAppearance BluetoothLEAppearance::FromRawValue(unsigned short const rawValue)
{
	return GetActivationFactory<BluetoothLEAppearance, IBluetoothLEAppearanceStatics>().FromRawValue(rawValue);
}

inline Windows::Devices::Bluetooth::BluetoothLEAppearance BluetoothLEAppearance::FromParts(unsigned short const appearanceCategory, unsigned short const appearanceSubCategory)
{
	return GetActivationFactory<BluetoothLEAppearance, IBluetoothLEAppearanceStatics>().FromParts(appearanceCategory, appearanceSubCategory);
}

inline BluetoothSignalStrengthFilter::BluetoothSignalStrengthFilter() :
	BluetoothSignalStrengthFilter(ActivateInstance<BluetoothSignalStrengthFilter>())
{}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Advertisement {

inline BluetoothLEManufacturerData::BluetoothLEManufacturerData() :
	BluetoothLEManufacturerData(ActivateInstance<BluetoothLEManufacturerData>())
{}

inline BluetoothLEManufacturerData::BluetoothLEManufacturerData(unsigned short const companyId, Windows::Storage::Streams::IBuffer const & data) :
	BluetoothLEManufacturerData(GetActivationFactory<BluetoothLEManufacturerData, IBluetoothLEManufacturerDataFactory>().Create(companyId, data))
{}

inline BluetoothLEAdvertisementDataSection::BluetoothLEAdvertisementDataSection() :
	BluetoothLEAdvertisementDataSection(ActivateInstance<BluetoothLEAdvertisementDataSection>())
{}

inline BluetoothLEAdvertisementDataSection::BluetoothLEAdvertisementDataSection(byte const dataType, Windows::Storage::Streams::IBuffer const & data) :
	BluetoothLEAdvertisementDataSection(GetActivationFactory<BluetoothLEAdvertisementDataSection, IBluetoothLEAdvertisementDataSectionFactory>().Create(dataType, data))
{}

inline BluetoothLEAdvertisement::BluetoothLEAdvertisement() :
	BluetoothLEAdvertisement(ActivateInstance<BluetoothLEAdvertisement>())
{}

inline BluetoothLEAdvertisementBytePattern::BluetoothLEAdvertisementBytePattern() :
	BluetoothLEAdvertisementBytePattern(ActivateInstance<BluetoothLEAdvertisementBytePattern>())
{}

inline BluetoothLEAdvertisementBytePattern::BluetoothLEAdvertisementBytePattern(byte const dataType, short const offset, Windows::Storage::Streams::IBuffer const & data) :
	BluetoothLEAdvertisementBytePattern(GetActivationFactory<BluetoothLEAdvertisementBytePattern, IBluetoothLEAdvertisementBytePatternFactory>().Create(dataType, offset, data))
{}

inline BluetoothLEAdvertisementFilter::BluetoothLEAdvertisementFilter() :
	BluetoothLEAdvertisementFilter(ActivateInstance<BluetoothLEAdvertisementFilter>())
{}

inline BluetoothLEAdvertisementWatcher::BluetoothLEAdvertisementWatcher() :
	BluetoothLEAdvertisementWatcher(ActivateInstance<BluetoothLEAdvertisementWatcher>())
{}

inline BluetoothLEAdvertisementWatcher::BluetoothLEAdvertisementWatcher(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter const & advertisementFilter) :
	BluetoothLEAdvertisementWatcher(GetActivationFactory<BluetoothLEAdvertisementWatcher, IBluetoothLEAdvertisementWatcherFactory>().Create(advertisementFilter))
{}

inline byte BluetoothLEAdvertisementDataTypes::Flags()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().Flags();
}

inline byte BluetoothLEAdvertisementDataTypes::IncompleteService16BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().IncompleteService16BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::CompleteService16BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().CompleteService16BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::IncompleteService32BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().IncompleteService32BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::CompleteService32BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().CompleteService32BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::IncompleteService128BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().IncompleteService128BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::CompleteService128BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().CompleteService128BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::ShortenedLocalName()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().ShortenedLocalName();
}

inline byte BluetoothLEAdvertisementDataTypes::CompleteLocalName()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().CompleteLocalName();
}

inline byte BluetoothLEAdvertisementDataTypes::TxPowerLevel()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().TxPowerLevel();
}

inline byte BluetoothLEAdvertisementDataTypes::SlaveConnectionIntervalRange()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().SlaveConnectionIntervalRange();
}

inline byte BluetoothLEAdvertisementDataTypes::ServiceSolicitation16BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().ServiceSolicitation16BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::ServiceSolicitation32BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().ServiceSolicitation32BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::ServiceSolicitation128BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().ServiceSolicitation128BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::ServiceData16BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().ServiceData16BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::ServiceData32BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().ServiceData32BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::ServiceData128BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().ServiceData128BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::PublicTargetAddress()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().PublicTargetAddress();
}

inline byte BluetoothLEAdvertisementDataTypes::RandomTargetAddress()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().RandomTargetAddress();
}

inline byte BluetoothLEAdvertisementDataTypes::Appearance()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().Appearance();
}

inline byte BluetoothLEAdvertisementDataTypes::AdvertisingInterval()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().AdvertisingInterval();
}

inline byte BluetoothLEAdvertisementDataTypes::ManufacturerSpecificData()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().ManufacturerSpecificData();
}

inline BluetoothLEAdvertisementPublisher::BluetoothLEAdvertisementPublisher() :
	BluetoothLEAdvertisementPublisher(ActivateInstance<BluetoothLEAdvertisementPublisher>())
{}

inline BluetoothLEAdvertisementPublisher::BluetoothLEAdvertisementPublisher(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement const & advertisement) :
	BluetoothLEAdvertisementPublisher(GetActivationFactory<BluetoothLEAdvertisementPublisher, IBluetoothLEAdvertisementPublisherFactory>().Create(advertisement))
{}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Background {

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace GenericAttributeProfile {

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> GattDeviceService::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<GattDeviceService, IGattDeviceServiceStatics>().FromIdAsync(deviceId);
}

inline String GattDeviceService::GetDeviceSelectorFromUuid(GUID const serviceUuid)
{
	return GetActivationFactory<GattDeviceService, IGattDeviceServiceStatics>().GetDeviceSelectorFromUuid(serviceUuid);
}

inline String GattDeviceService::GetDeviceSelectorFromShortId(unsigned short const serviceShortId)
{
	return GetActivationFactory<GattDeviceService, IGattDeviceServiceStatics>().GetDeviceSelectorFromShortId(serviceShortId);
}

inline GUID GattDeviceService::ConvertShortIdToUuid(unsigned short const shortId)
{
	return GetActivationFactory<GattDeviceService, IGattDeviceServiceStatics>().ConvertShortIdToUuid(shortId);
}

inline GUID GattCharacteristic::ConvertShortIdToUuid(unsigned short const shortId)
{
	return GetActivationFactory<GattCharacteristic, IGattCharacteristicStatics>().ConvertShortIdToUuid(shortId);
}

inline GUID GattDescriptor::ConvertShortIdToUuid(unsigned short const shortId)
{
	return GetActivationFactory<GattDescriptor, IGattDescriptorStatics>().ConvertShortIdToUuid(shortId);
}

inline byte GattPresentationFormat::BluetoothSigAssignedNumbers()
{
	return GetActivationFactory<GattPresentationFormat, IGattPresentationFormatStatics>().BluetoothSigAssignedNumbers();
}

inline GUID GattServiceUuids::AlertNotification()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().AlertNotification();
}

inline GUID GattServiceUuids::CurrentTime()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().CurrentTime();
}

inline GUID GattServiceUuids::CyclingPower()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().CyclingPower();
}

inline GUID GattServiceUuids::DeviceInformation()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().DeviceInformation();
}

inline GUID GattServiceUuids::HumanInterfaceDevice()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().HumanInterfaceDevice();
}

inline GUID GattServiceUuids::ImmediateAlert()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().ImmediateAlert();
}

inline GUID GattServiceUuids::LinkLoss()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().LinkLoss();
}

inline GUID GattServiceUuids::LocationAndNavigation()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().LocationAndNavigation();
}

inline GUID GattServiceUuids::NextDstChange()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().NextDstChange();
}

inline GUID GattServiceUuids::PhoneAlertStatus()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().PhoneAlertStatus();
}

inline GUID GattServiceUuids::ReferenceTimeUpdate()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().ReferenceTimeUpdate();
}

inline GUID GattServiceUuids::ScanParameters()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().ScanParameters();
}

inline GUID GattServiceUuids::TxPower()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().TxPower();
}

inline GUID GattServiceUuids::Battery()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().Battery();
}

inline GUID GattServiceUuids::BloodPressure()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().BloodPressure();
}

inline GUID GattServiceUuids::CyclingSpeedAndCadence()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().CyclingSpeedAndCadence();
}

inline GUID GattServiceUuids::GenericAccess()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().GenericAccess();
}

inline GUID GattServiceUuids::GenericAttribute()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().GenericAttribute();
}

inline GUID GattServiceUuids::Glucose()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().Glucose();
}

inline GUID GattServiceUuids::HealthThermometer()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().HealthThermometer();
}

inline GUID GattServiceUuids::HeartRate()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().HeartRate();
}

inline GUID GattServiceUuids::RunningSpeedAndCadence()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().RunningSpeedAndCadence();
}

inline GUID GattCharacteristicUuids::AlertCategoryId()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().AlertCategoryId();
}

inline GUID GattCharacteristicUuids::AlertCategoryIdBitMask()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().AlertCategoryIdBitMask();
}

inline GUID GattCharacteristicUuids::AlertLevel()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().AlertLevel();
}

inline GUID GattCharacteristicUuids::AlertNotificationControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().AlertNotificationControlPoint();
}

inline GUID GattCharacteristicUuids::AlertStatus()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().AlertStatus();
}

inline GUID GattCharacteristicUuids::GapAppearance()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().GapAppearance();
}

inline GUID GattCharacteristicUuids::BootKeyboardInputReport()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().BootKeyboardInputReport();
}

inline GUID GattCharacteristicUuids::BootKeyboardOutputReport()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().BootKeyboardOutputReport();
}

inline GUID GattCharacteristicUuids::BootMouseInputReport()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().BootMouseInputReport();
}

inline GUID GattCharacteristicUuids::CurrentTime()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().CurrentTime();
}

inline GUID GattCharacteristicUuids::CyclingPowerControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().CyclingPowerControlPoint();
}

inline GUID GattCharacteristicUuids::CyclingPowerFeature()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().CyclingPowerFeature();
}

inline GUID GattCharacteristicUuids::CyclingPowerMeasurement()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().CyclingPowerMeasurement();
}

inline GUID GattCharacteristicUuids::CyclingPowerVector()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().CyclingPowerVector();
}

inline GUID GattCharacteristicUuids::DateTime()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().DateTime();
}

inline GUID GattCharacteristicUuids::DayDateTime()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().DayDateTime();
}

inline GUID GattCharacteristicUuids::DayOfWeek()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().DayOfWeek();
}

inline GUID GattCharacteristicUuids::GapDeviceName()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().GapDeviceName();
}

inline GUID GattCharacteristicUuids::DstOffset()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().DstOffset();
}

inline GUID GattCharacteristicUuids::ExactTime256()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().ExactTime256();
}

inline GUID GattCharacteristicUuids::FirmwareRevisionString()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().FirmwareRevisionString();
}

inline GUID GattCharacteristicUuids::HardwareRevisionString()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().HardwareRevisionString();
}

inline GUID GattCharacteristicUuids::HidControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().HidControlPoint();
}

inline GUID GattCharacteristicUuids::HidInformation()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().HidInformation();
}

inline GUID GattCharacteristicUuids::Ieee1107320601RegulatoryCertificationDataList()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().Ieee1107320601RegulatoryCertificationDataList();
}

inline GUID GattCharacteristicUuids::LnControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().LnControlPoint();
}

inline GUID GattCharacteristicUuids::LnFeature()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().LnFeature();
}

inline GUID GattCharacteristicUuids::LocalTimeInformation()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().LocalTimeInformation();
}

inline GUID GattCharacteristicUuids::LocationAndSpeed()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().LocationAndSpeed();
}

inline GUID GattCharacteristicUuids::ManufacturerNameString()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().ManufacturerNameString();
}

inline GUID GattCharacteristicUuids::ModelNumberString()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().ModelNumberString();
}

inline GUID GattCharacteristicUuids::Navigation()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().Navigation();
}

inline GUID GattCharacteristicUuids::NewAlert()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().NewAlert();
}

inline GUID GattCharacteristicUuids::GapPeripheralPreferredConnectionParameters()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().GapPeripheralPreferredConnectionParameters();
}

inline GUID GattCharacteristicUuids::GapPeripheralPrivacyFlag()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().GapPeripheralPrivacyFlag();
}

inline GUID GattCharacteristicUuids::PnpId()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().PnpId();
}

inline GUID GattCharacteristicUuids::PositionQuality()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().PositionQuality();
}

inline GUID GattCharacteristicUuids::ProtocolMode()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().ProtocolMode();
}

inline GUID GattCharacteristicUuids::GapReconnectionAddress()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().GapReconnectionAddress();
}

inline GUID GattCharacteristicUuids::ReferenceTimeInformation()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().ReferenceTimeInformation();
}

inline GUID GattCharacteristicUuids::Report()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().Report();
}

inline GUID GattCharacteristicUuids::ReportMap()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().ReportMap();
}

inline GUID GattCharacteristicUuids::RingerControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().RingerControlPoint();
}

inline GUID GattCharacteristicUuids::RingerSetting()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().RingerSetting();
}

inline GUID GattCharacteristicUuids::ScanIntervalWindow()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().ScanIntervalWindow();
}

inline GUID GattCharacteristicUuids::ScanRefresh()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().ScanRefresh();
}

inline GUID GattCharacteristicUuids::SerialNumberString()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().SerialNumberString();
}

inline GUID GattCharacteristicUuids::GattServiceChanged()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().GattServiceChanged();
}

inline GUID GattCharacteristicUuids::SoftwareRevisionString()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().SoftwareRevisionString();
}

inline GUID GattCharacteristicUuids::SupportedNewAlertCategory()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().SupportedNewAlertCategory();
}

inline GUID GattCharacteristicUuids::SupportUnreadAlertCategory()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().SupportUnreadAlertCategory();
}

inline GUID GattCharacteristicUuids::SystemId()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().SystemId();
}

inline GUID GattCharacteristicUuids::TimeAccuracy()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().TimeAccuracy();
}

inline GUID GattCharacteristicUuids::TimeSource()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().TimeSource();
}

inline GUID GattCharacteristicUuids::TimeUpdateControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().TimeUpdateControlPoint();
}

inline GUID GattCharacteristicUuids::TimeUpdateState()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().TimeUpdateState();
}

inline GUID GattCharacteristicUuids::TimeWithDst()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().TimeWithDst();
}

inline GUID GattCharacteristicUuids::TimeZone()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().TimeZone();
}

inline GUID GattCharacteristicUuids::TxPowerLevel()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().TxPowerLevel();
}

inline GUID GattCharacteristicUuids::UnreadAlertStatus()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().UnreadAlertStatus();
}

inline GUID GattCharacteristicUuids::BatteryLevel()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().BatteryLevel();
}

inline GUID GattCharacteristicUuids::BloodPressureFeature()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().BloodPressureFeature();
}

inline GUID GattCharacteristicUuids::BloodPressureMeasurement()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().BloodPressureMeasurement();
}

inline GUID GattCharacteristicUuids::BodySensorLocation()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().BodySensorLocation();
}

inline GUID GattCharacteristicUuids::CscFeature()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().CscFeature();
}

inline GUID GattCharacteristicUuids::CscMeasurement()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().CscMeasurement();
}

inline GUID GattCharacteristicUuids::GlucoseFeature()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().GlucoseFeature();
}

inline GUID GattCharacteristicUuids::GlucoseMeasurement()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().GlucoseMeasurement();
}

inline GUID GattCharacteristicUuids::GlucoseMeasurementContext()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().GlucoseMeasurementContext();
}

inline GUID GattCharacteristicUuids::HeartRateControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().HeartRateControlPoint();
}

inline GUID GattCharacteristicUuids::HeartRateMeasurement()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().HeartRateMeasurement();
}

inline GUID GattCharacteristicUuids::IntermediateCuffPressure()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().IntermediateCuffPressure();
}

inline GUID GattCharacteristicUuids::IntermediateTemperature()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().IntermediateTemperature();
}

inline GUID GattCharacteristicUuids::MeasurementInterval()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().MeasurementInterval();
}

inline GUID GattCharacteristicUuids::RecordAccessControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().RecordAccessControlPoint();
}

inline GUID GattCharacteristicUuids::RscFeature()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().RscFeature();
}

inline GUID GattCharacteristicUuids::RscMeasurement()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().RscMeasurement();
}

inline GUID GattCharacteristicUuids::SCControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().SCControlPoint();
}

inline GUID GattCharacteristicUuids::SensorLocation()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().SensorLocation();
}

inline GUID GattCharacteristicUuids::TemperatureMeasurement()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().TemperatureMeasurement();
}

inline GUID GattCharacteristicUuids::TemperatureType()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().TemperatureType();
}

inline GUID GattDescriptorUuids::CharacteristicAggregateFormat()
{
	return GetActivationFactory<GattDescriptorUuids, IGattDescriptorUuidsStatics>().CharacteristicAggregateFormat();
}

inline GUID GattDescriptorUuids::CharacteristicExtendedProperties()
{
	return GetActivationFactory<GattDescriptorUuids, IGattDescriptorUuidsStatics>().CharacteristicExtendedProperties();
}

inline GUID GattDescriptorUuids::CharacteristicPresentationFormat()
{
	return GetActivationFactory<GattDescriptorUuids, IGattDescriptorUuidsStatics>().CharacteristicPresentationFormat();
}

inline GUID GattDescriptorUuids::CharacteristicUserDescription()
{
	return GetActivationFactory<GattDescriptorUuids, IGattDescriptorUuidsStatics>().CharacteristicUserDescription();
}

inline GUID GattDescriptorUuids::ClientCharacteristicConfiguration()
{
	return GetActivationFactory<GattDescriptorUuids, IGattDescriptorUuidsStatics>().ClientCharacteristicConfiguration();
}

inline GUID GattDescriptorUuids::ServerCharacteristicConfiguration()
{
	return GetActivationFactory<GattDescriptorUuids, IGattDescriptorUuidsStatics>().ServerCharacteristicConfiguration();
}

inline GattReliableWriteTransaction::GattReliableWriteTransaction() :
	GattReliableWriteTransaction(ActivateInstance<GattReliableWriteTransaction>())
{}

inline byte GattPresentationFormatTypes::Boolean()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Boolean();
}

inline byte GattPresentationFormatTypes::Bit2()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Bit2();
}

inline byte GattPresentationFormatTypes::Nibble()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Nibble();
}

inline byte GattPresentationFormatTypes::UInt8()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().UInt8();
}

inline byte GattPresentationFormatTypes::UInt12()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().UInt12();
}

inline byte GattPresentationFormatTypes::UInt16()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().UInt16();
}

inline byte GattPresentationFormatTypes::UInt24()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().UInt24();
}

inline byte GattPresentationFormatTypes::UInt32()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().UInt32();
}

inline byte GattPresentationFormatTypes::UInt48()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().UInt48();
}

inline byte GattPresentationFormatTypes::UInt64()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().UInt64();
}

inline byte GattPresentationFormatTypes::UInt128()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().UInt128();
}

inline byte GattPresentationFormatTypes::SInt8()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SInt8();
}

inline byte GattPresentationFormatTypes::SInt12()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SInt12();
}

inline byte GattPresentationFormatTypes::SInt16()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SInt16();
}

inline byte GattPresentationFormatTypes::SInt24()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SInt24();
}

inline byte GattPresentationFormatTypes::SInt32()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SInt32();
}

inline byte GattPresentationFormatTypes::SInt48()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SInt48();
}

inline byte GattPresentationFormatTypes::SInt64()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SInt64();
}

inline byte GattPresentationFormatTypes::SInt128()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SInt128();
}

inline byte GattPresentationFormatTypes::Float32()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Float32();
}

inline byte GattPresentationFormatTypes::Float64()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Float64();
}

inline byte GattPresentationFormatTypes::SFloat()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SFloat();
}

inline byte GattPresentationFormatTypes::Float()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Float();
}

inline byte GattPresentationFormatTypes::DUInt16()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().DUInt16();
}

inline byte GattPresentationFormatTypes::Utf8()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Utf8();
}

inline byte GattPresentationFormatTypes::Utf16()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Utf16();
}

inline byte GattPresentationFormatTypes::Struct()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Struct();
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Rfcomm {

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService> RfcommDeviceService::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<RfcommDeviceService, IRfcommDeviceServiceStatics>().FromIdAsync(deviceId);
}

inline String RfcommDeviceService::GetDeviceSelector(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & serviceId)
{
	return GetActivationFactory<RfcommDeviceService, IRfcommDeviceServiceStatics>().GetDeviceSelector(serviceId);
}

inline Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RfcommServiceId::FromUuid(GUID const uuid)
{
	return GetActivationFactory<RfcommServiceId, IRfcommServiceIdStatics>().FromUuid(uuid);
}

inline Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RfcommServiceId::FromShortId(unsigned const shortId)
{
	return GetActivationFactory<RfcommServiceId, IRfcommServiceIdStatics>().FromShortId(shortId);
}

inline Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RfcommServiceId::SerialPort()
{
	return GetActivationFactory<RfcommServiceId, IRfcommServiceIdStatics>().SerialPort();
}

inline Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RfcommServiceId::ObexObjectPush()
{
	return GetActivationFactory<RfcommServiceId, IRfcommServiceIdStatics>().ObexObjectPush();
}

inline Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RfcommServiceId::ObexFileTransfer()
{
	return GetActivationFactory<RfcommServiceId, IRfcommServiceIdStatics>().ObexFileTransfer();
}

inline Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RfcommServiceId::PhoneBookAccessPce()
{
	return GetActivationFactory<RfcommServiceId, IRfcommServiceIdStatics>().PhoneBookAccessPce();
}

inline Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RfcommServiceId::PhoneBookAccessPse()
{
	return GetActivationFactory<RfcommServiceId, IRfcommServiceIdStatics>().PhoneBookAccessPse();
}

inline Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RfcommServiceId::GenericFileTransfer()
{
	return GetActivationFactory<RfcommServiceId, IRfcommServiceIdStatics>().GenericFileTransfer();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider> RfcommServiceProvider::CreateAsync(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & serviceId)
{
	return GetActivationFactory<RfcommServiceProvider, IRfcommServiceProviderStatics>().CreateAsync(serviceId);
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Enumeration {

inline String DeviceInformation::GetAqsFilterFromDeviceClass(Windows::Devices::Enumeration::DeviceClass const deviceClass)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics2>().GetAqsFilterFromDeviceClass(deviceClass);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> DeviceInformation::CreateFromIdAsync(StringReference const & deviceId, Windows::Foundation::Collections::IIterable<String> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind const kind)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics2>().CreateFromIdAsync(deviceId, additionalProperties, kind);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> DeviceInformation::FindAllAsync(StringReference const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind const kind)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics2>().FindAllAsync(aqsFilter, additionalProperties, kind);
}

inline Windows::Devices::Enumeration::DeviceWatcher DeviceInformation::CreateWatcher(StringReference const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind const kind)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics2>().CreateWatcher(aqsFilter, additionalProperties, kind);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> DeviceInformation::CreateFromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateFromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> DeviceInformation::CreateFromIdAsync(StringReference const & deviceId, Windows::Foundation::Collections::IIterable<String> const & additionalProperties)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateFromIdAsync(deviceId, additionalProperties);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> DeviceInformation::FindAllAsync()
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().FindAllAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> DeviceInformation::FindAllAsync(Windows::Devices::Enumeration::DeviceClass const deviceClass)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().FindAllAsync(deviceClass);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> DeviceInformation::FindAllAsync(StringReference const & aqsFilter)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().FindAllAsync(aqsFilter);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> DeviceInformation::FindAllAsync(StringReference const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().FindAllAsync(aqsFilter, additionalProperties);
}

inline Windows::Devices::Enumeration::DeviceWatcher DeviceInformation::CreateWatcher()
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateWatcher();
}

inline Windows::Devices::Enumeration::DeviceWatcher DeviceInformation::CreateWatcher(Windows::Devices::Enumeration::DeviceClass const deviceClass)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateWatcher(deviceClass);
}

inline Windows::Devices::Enumeration::DeviceWatcher DeviceInformation::CreateWatcher(StringReference const & aqsFilter)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateWatcher(aqsFilter);
}

inline Windows::Devices::Enumeration::DeviceWatcher DeviceInformation::CreateWatcher(StringReference const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateWatcher(aqsFilter, additionalProperties);
}

inline DevicePicker::DevicePicker() :
	DevicePicker(ActivateInstance<DevicePicker>())
{}

inline bool DeviceInformationPairing::TryRegisterForAllInboundPairingRequests(Windows::Devices::Enumeration::DevicePairingKinds const pairingKindsSupported)
{
	return GetActivationFactory<DeviceInformationPairing, IDeviceInformationPairingStatics>().TryRegisterForAllInboundPairingRequests(pairingKindsSupported);
}

inline Windows::Devices::Enumeration::DeviceAccessInformation DeviceAccessInformation::CreateFromId(StringReference const & deviceId)
{
	return GetActivationFactory<DeviceAccessInformation, IDeviceAccessInformationStatics>().CreateFromId(deviceId);
}

inline Windows::Devices::Enumeration::DeviceAccessInformation DeviceAccessInformation::CreateFromDeviceClassId(GUID const deviceClassId)
{
	return GetActivationFactory<DeviceAccessInformation, IDeviceAccessInformationStatics>().CreateFromDeviceClassId(deviceClassId);
}

inline Windows::Devices::Enumeration::DeviceAccessInformation DeviceAccessInformation::CreateFromDeviceClass(Windows::Devices::Enumeration::DeviceClass const deviceClass)
{
	return GetActivationFactory<DeviceAccessInformation, IDeviceAccessInformationStatics>().CreateFromDeviceClass(deviceClass);
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Geolocation {

inline Geopoint::Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position) :
	Geopoint(GetActivationFactory<Geopoint, IGeopointFactory>().Create(position))
{}

inline Geopoint::Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) :
	Geopoint(GetActivationFactory<Geopoint, IGeopointFactory>().CreateWithAltitudeReferenceSystem(position, altitudeReferenceSystem))
{}

inline Geopoint::Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) :
	Geopoint(GetActivationFactory<Geopoint, IGeopointFactory>().CreateWithAltitudeReferenceSystemAndSpatialReferenceId(position, altitudeReferenceSystem, spatialReferenceId))
{}

inline Geopath::Geopath(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions) :
	Geopath(GetActivationFactory<Geopath, IGeopathFactory>().Create(positions))
{}

inline Geopath::Geopath(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) :
	Geopath(GetActivationFactory<Geopath, IGeopathFactory>().CreateWithAltitudeReference(positions, altitudeReferenceSystem))
{}

inline Geopath::Geopath(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) :
	Geopath(GetActivationFactory<Geopath, IGeopathFactory>().CreateWithAltitudeReferenceAndSpatialReference(positions, altitudeReferenceSystem, spatialReferenceId))
{}

inline GeoboundingBox::GeoboundingBox(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner) :
	GeoboundingBox(GetActivationFactory<GeoboundingBox, IGeoboundingBoxFactory>().Create(northwestCorner, southeastCorner))
{}

inline GeoboundingBox::GeoboundingBox(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) :
	GeoboundingBox(GetActivationFactory<GeoboundingBox, IGeoboundingBoxFactory>().CreateWithAltitudeReference(northwestCorner, southeastCorner, altitudeReferenceSystem))
{}

inline GeoboundingBox::GeoboundingBox(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) :
	GeoboundingBox(GetActivationFactory<GeoboundingBox, IGeoboundingBoxFactory>().CreateWithAltitudeReferenceAndSpatialReference(northwestCorner, southeastCorner, altitudeReferenceSystem, spatialReferenceId))
{}

inline Windows::Devices::Geolocation::GeoboundingBox GeoboundingBox::TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions)
{
	return GetActivationFactory<GeoboundingBox, IGeoboundingBoxStatics>().TryCompute(positions);
}

inline Windows::Devices::Geolocation::GeoboundingBox GeoboundingBox::TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeRefSystem)
{
	return GetActivationFactory<GeoboundingBox, IGeoboundingBoxStatics>().TryCompute(positions, altitudeRefSystem);
}

inline Windows::Devices::Geolocation::GeoboundingBox GeoboundingBox::TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeRefSystem, unsigned const spatialReferenceId)
{
	return GetActivationFactory<GeoboundingBox, IGeoboundingBoxStatics>().TryCompute(positions, altitudeRefSystem, spatialReferenceId);
}

inline Geolocator::Geolocator() :
	Geolocator(ActivateInstance<Geolocator>())
{}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Geolocation::GeolocationAccessStatus> Geolocator::RequestAccessAsync()
{
	return GetActivationFactory<Geolocator, IGeolocatorStatics>().RequestAccessAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geoposition>> Geolocator::GetGeopositionHistoryAsync(Windows::Foundation::DateTime const & startTime)
{
	return GetActivationFactory<Geolocator, IGeolocatorStatics>().GetGeopositionHistoryAsync(startTime);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geoposition>> Geolocator::GetGeopositionHistoryAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration)
{
	return GetActivationFactory<Geolocator, IGeolocatorStatics>().GetGeopositionHistoryAsync(startTime, duration);
}

inline Geocircle::Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius) :
	Geocircle(GetActivationFactory<Geocircle, IGeocircleFactory>().Create(position, radius))
{}

inline Geocircle::Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) :
	Geocircle(GetActivationFactory<Geocircle, IGeocircleFactory>().CreateWithAltitudeReferenceSystem(position, radius, altitudeReferenceSystem))
{}

inline Geocircle::Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) :
	Geocircle(GetActivationFactory<Geocircle, IGeocircleFactory>().CreateWithAltitudeReferenceSystemAndSpatialReferenceId(position, radius, altitudeReferenceSystem, spatialReferenceId))
{}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Input {

inline Windows::Devices::Input::PointerDevice PointerDevice::GetPointerDevice(unsigned const pointerId)
{
	return GetActivationFactory<PointerDevice, IPointerDeviceStatics>().GetPointerDevice(pointerId);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Devices::Input::PointerDevice> PointerDevice::GetPointerDevices()
{
	return GetActivationFactory<PointerDevice, IPointerDeviceStatics>().GetPointerDevices();
}

inline Windows::Devices::Input::MouseDevice MouseDevice::GetForCurrentView()
{
	return GetActivationFactory<MouseDevice, IMouseDeviceStatics>().GetForCurrentView();
}

inline MouseCapabilities::MouseCapabilities() :
	MouseCapabilities(ActivateInstance<MouseCapabilities>())
{}

inline KeyboardCapabilities::KeyboardCapabilities() :
	KeyboardCapabilities(ActivateInstance<KeyboardCapabilities>())
{}

inline TouchCapabilities::TouchCapabilities() :
	TouchCapabilities(ActivateInstance<TouchCapabilities>())
{}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

inline IInspectable PrintExtensionContext::FromDeviceId(StringReference const & deviceId)
{
	return GetActivationFactory<PrintExtensionContext, IPrintExtensionContextStatic>().FromDeviceId(deviceId);
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sensors {

inline Windows::Devices::Sensors::Accelerometer Accelerometer::GetDefault()
{
	return GetActivationFactory<Accelerometer, IAccelerometerStatics>().GetDefault();
}

inline Windows::Devices::Sensors::Inclinometer Inclinometer::GetDefault()
{
	return GetActivationFactory<Inclinometer, IInclinometerStatics>().GetDefault();
}

inline Windows::Devices::Sensors::Inclinometer Inclinometer::GetDefaultForRelativeReadings()
{
	return GetActivationFactory<Inclinometer, IInclinometerStatics2>().GetDefaultForRelativeReadings();
}

inline Windows::Devices::Sensors::Gyrometer Gyrometer::GetDefault()
{
	return GetActivationFactory<Gyrometer, IGyrometerStatics>().GetDefault();
}

inline Windows::Devices::Sensors::Compass Compass::GetDefault()
{
	return GetActivationFactory<Compass, ICompassStatics>().GetDefault();
}

inline Windows::Devices::Sensors::LightSensor LightSensor::GetDefault()
{
	return GetActivationFactory<LightSensor, ILightSensorStatics>().GetDefault();
}

inline Windows::Devices::Sensors::OrientationSensor OrientationSensor::GetDefault()
{
	return GetActivationFactory<OrientationSensor, IOrientationSensorStatics>().GetDefault();
}

inline Windows::Devices::Sensors::OrientationSensor OrientationSensor::GetDefaultForRelativeReadings()
{
	return GetActivationFactory<OrientationSensor, IOrientationSensorStatics2>().GetDefaultForRelativeReadings();
}

inline Windows::Devices::Sensors::SimpleOrientationSensor SimpleOrientationSensor::GetDefault()
{
	return GetActivationFactory<SimpleOrientationSensor, ISimpleOrientationSensorStatics>().GetDefault();
}

inline Windows::Devices::Sensors::Magnetometer Magnetometer::GetDefault()
{
	return GetActivationFactory<Magnetometer, IMagnetometerStatics>().GetDefault();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensor> ActivitySensor::GetDefaultAsync()
{
	return GetActivationFactory<ActivitySensor, IActivitySensorStatics>().GetDefaultAsync();
}

inline String ActivitySensor::GetDeviceSelector()
{
	return GetActivationFactory<ActivitySensor, IActivitySensorStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensor> ActivitySensor::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<ActivitySensor, IActivitySensorStatics>().FromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReading>> ActivitySensor::GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime)
{
	return GetActivationFactory<ActivitySensor, IActivitySensorStatics>().GetSystemHistoryAsync(fromTime);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReading>> ActivitySensor::GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime, Windows::Foundation::TimeSpan const & duration)
{
	return GetActivationFactory<ActivitySensor, IActivitySensorStatics>().GetSystemHistoryAsync(fromTime, duration);
}

inline Windows::Devices::Sensors::Barometer Barometer::GetDefault()
{
	return GetActivationFactory<Barometer, IBarometerStatics>().GetDefault();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::Pedometer> Pedometer::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<Pedometer, IPedometerStatics>().FromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::Pedometer> Pedometer::GetDefaultAsync()
{
	return GetActivationFactory<Pedometer, IPedometerStatics>().GetDefaultAsync();
}

inline String Pedometer::GetDeviceSelector()
{
	return GetActivationFactory<Pedometer, IPedometerStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading>> Pedometer::GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime)
{
	return GetActivationFactory<Pedometer, IPedometerStatics>().GetSystemHistoryAsync(fromTime);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading>> Pedometer::GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime, Windows::Foundation::TimeSpan const & duration)
{
	return GetActivationFactory<Pedometer, IPedometerStatics>().GetSystemHistoryAsync(fromTime, duration);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading> Pedometer::GetReadingsFromTriggerDetails(Windows::Devices::Sensors::SensorDataThresholdTriggerDetails const & triggerDetails)
{
	return GetActivationFactory<Pedometer, IPedometerStatics2>().GetReadingsFromTriggerDetails(triggerDetails);
}

inline PedometerDataThreshold::PedometerDataThreshold(Windows::Devices::Sensors::Pedometer const & sensor, int const stepGoal) :
	PedometerDataThreshold(GetActivationFactory<PedometerDataThreshold, IPedometerDataThresholdFactory>().Create(sensor, stepGoal))
{}

inline Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ProximitySensorReading> ProximitySensor::GetReadingsFromTriggerDetails(Windows::Devices::Sensors::SensorDataThresholdTriggerDetails const & triggerDetails)
{
	return GetActivationFactory<ProximitySensor, IProximitySensorStatics2>().GetReadingsFromTriggerDetails(triggerDetails);
}

inline String ProximitySensor::GetDeviceSelector()
{
	return GetActivationFactory<ProximitySensor, IProximitySensorStatics>().GetDeviceSelector();
}

inline Windows::Devices::Sensors::ProximitySensor ProximitySensor::FromId(StringReference const & sensorId)
{
	return GetActivationFactory<ProximitySensor, IProximitySensorStatics>().FromId(sensorId);
}

inline ProximitySensorDataThreshold::ProximitySensorDataThreshold(Windows::Devices::Sensors::ProximitySensor const & sensor) :
	ProximitySensorDataThreshold(GetActivationFactory<ProximitySensorDataThreshold, IProximitySensorDataThresholdFactory>().Create(sensor))
{}

inline Windows::Devices::Sensors::Altimeter Altimeter::GetDefault()
{
	return GetActivationFactory<Altimeter, IAltimeterStatics>().GetDefault();
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sms {

inline SmsBinaryMessage::SmsBinaryMessage() :
	SmsBinaryMessage(ActivateInstance<SmsBinaryMessage>())
{}

inline SmsTextMessage::SmsTextMessage() :
	SmsTextMessage(ActivateInstance<SmsTextMessage>())
{}

inline Windows::Devices::Sms::SmsTextMessage SmsTextMessage::FromBinaryMessage(Windows::Devices::Sms::SmsBinaryMessage const & binaryMessage)
{
	return GetActivationFactory<SmsTextMessage, ISmsTextMessageStatics>().FromBinaryMessage(binaryMessage);
}

inline SmsTextMessage2::SmsTextMessage2() :
	SmsTextMessage2(ActivateInstance<SmsTextMessage2>())
{}

inline SmsAppMessage::SmsAppMessage() :
	SmsAppMessage(ActivateInstance<SmsAppMessage>())
{}

inline String SmsDevice::GetDeviceSelector()
{
	return GetActivationFactory<SmsDevice, ISmsDeviceStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> SmsDevice::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<SmsDevice, ISmsDeviceStatics>().FromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> SmsDevice::GetDefaultAsync()
{
	return GetActivationFactory<SmsDevice, ISmsDeviceStatics>().GetDefaultAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> SmsDevice::FromNetworkAccountIdAsync(StringReference const & networkAccountId)
{
	return GetActivationFactory<SmsDevice, ISmsDeviceStatics2>().FromNetworkAccountIdAsync(networkAccountId);
}

inline String SmsDevice2::GetDeviceSelector()
{
	return GetActivationFactory<SmsDevice2, ISmsDevice2Statics>().GetDeviceSelector();
}

inline Windows::Devices::Sms::SmsDevice2 SmsDevice2::FromId(StringReference const & deviceId)
{
	return GetActivationFactory<SmsDevice2, ISmsDevice2Statics>().FromId(deviceId);
}

inline Windows::Devices::Sms::SmsDevice2 SmsDevice2::GetDefault()
{
	return GetActivationFactory<SmsDevice2, ISmsDevice2Statics>().GetDefault();
}

inline Windows::Devices::Sms::SmsDevice2 SmsDevice2::FromParentId(StringReference const & parentDeviceId)
{
	return GetActivationFactory<SmsDevice2, ISmsDevice2Statics>().FromParentId(parentDeviceId);
}

inline SmsFilterRule::SmsFilterRule(Windows::Devices::Sms::SmsMessageType const messageType) :
	SmsFilterRule(GetActivationFactory<SmsFilterRule, ISmsFilterRuleFactory>().CreateFilterRule(messageType))
{}

inline SmsFilterRules::SmsFilterRules(Windows::Devices::Sms::SmsFilterActionType const actionType) :
	SmsFilterRules(GetActivationFactory<SmsFilterRules, ISmsFilterRulesFactory>().CreateFilterRules(actionType))
{}

inline Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::SmsMessageRegistration> SmsMessageRegistration::AllRegistrations()
{
	return GetActivationFactory<SmsMessageRegistration, ISmsMessageRegistrationStatics>().AllRegistrations();
}

inline Windows::Devices::Sms::SmsMessageRegistration SmsMessageRegistration::Register(StringReference const & id, Windows::Devices::Sms::SmsFilterRules const & filterRules)
{
	return GetActivationFactory<SmsMessageRegistration, ISmsMessageRegistrationStatics>().Register(id, filterRules);
}

}}}}

namespace winrt { namespace Windows { namespace Foundation {

inline WwwFormUrlDecoder::WwwFormUrlDecoder(StringReference const & query) :
	WwwFormUrlDecoder(GetActivationFactory<WwwFormUrlDecoder, IWwwFormUrlDecoderRuntimeClassFactory>().CreateWwwFormUrlDecoder(query))
{}

inline Uri::Uri(StringReference const & uri) :
	Uri(GetActivationFactory<Uri, IUriRuntimeClassFactory>().CreateUri(uri))
{}

inline Uri::Uri(StringReference const & baseUri, StringReference const & relativeUri) :
	Uri(GetActivationFactory<Uri, IUriRuntimeClassFactory>().CreateWithRelativeUri(baseUri, relativeUri))
{}

inline String Uri::UnescapeComponent(StringReference const & toUnescape)
{
	return GetActivationFactory<Uri, IUriEscapeStatics>().UnescapeComponent(toUnescape);
}

inline String Uri::EscapeComponent(StringReference const & toEscape)
{
	return GetActivationFactory<Uri, IUriEscapeStatics>().EscapeComponent(toEscape);
}

inline IInspectable PropertyValue::CreateEmpty()
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateEmpty();
}

inline IInspectable PropertyValue::CreateUInt8(byte const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateUInt8(value);
}

inline IInspectable PropertyValue::CreateInt16(short const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateInt16(value);
}

inline IInspectable PropertyValue::CreateUInt16(unsigned short const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateUInt16(value);
}

inline IInspectable PropertyValue::CreateInt32(int const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateInt32(value);
}

inline IInspectable PropertyValue::CreateUInt32(unsigned const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateUInt32(value);
}

inline IInspectable PropertyValue::CreateInt64(long long const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateInt64(value);
}

inline IInspectable PropertyValue::CreateUInt64(unsigned long long const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateUInt64(value);
}

inline IInspectable PropertyValue::CreateSingle(float const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateSingle(value);
}

inline IInspectable PropertyValue::CreateDouble(double const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateDouble(value);
}

inline IInspectable PropertyValue::CreateChar16(wchar_t const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateChar16(value);
}

inline IInspectable PropertyValue::CreateBoolean(bool const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateBoolean(value);
}

inline IInspectable PropertyValue::CreateString(StringReference const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateString(value);
}

inline IInspectable PropertyValue::CreateInspectable(IInspectable const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateInspectable(value);
}

inline IInspectable PropertyValue::CreateGuid(GUID const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateGuid(value);
}

inline IInspectable PropertyValue::CreateDateTime(Windows::Foundation::DateTime const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateDateTime(value);
}

inline IInspectable PropertyValue::CreateTimeSpan(Windows::Foundation::TimeSpan const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateTimeSpan(value);
}

inline IInspectable PropertyValue::CreatePoint(Windows::Foundation::Point const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreatePoint(value);
}

inline IInspectable PropertyValue::CreateSize(Windows::Foundation::Size const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateSize(value);
}

inline IInspectable PropertyValue::CreateRect(Windows::Foundation::Rect const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateRect(value);
}

inline Deferral::Deferral(Windows::Foundation::IDeferralCompletedHandler const & handler) :
	Deferral(GetActivationFactory<Deferral, IDeferralFactory>().Create(handler))
{}

template <typename F> Deferral::Deferral(F handler) :
	Deferral(GetActivationFactory<Deferral, IDeferralFactory>().Create(Windows::Foundation::DeferralCompletedHandler(handler)))
{}

inline MemoryBuffer::MemoryBuffer(unsigned const capacity) :
	MemoryBuffer(GetActivationFactory<MemoryBuffer, IMemoryBufferFactory>().Create(capacity))
{}

}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Collections {

inline PropertySet::PropertySet() :
	PropertySet(ActivateInstance<PropertySet>())
{}

inline ValueSet::ValueSet() :
	ValueSet(ActivateInstance<ValueSet>())
{}

inline StringMap::StringMap() :
	StringMap(ActivateInstance<StringMap>())
{}

}}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Diagnostics {

inline void AsyncCausalityTracer::TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, StringReference const & operationName, unsigned long long const relatedContext)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TraceOperationCreation(traceLevel, source, platformId, operationId, operationName, relatedContext);
}

inline void AsyncCausalityTracer::TraceOperationCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, AsyncStatus const status)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TraceOperationCompletion(traceLevel, source, platformId, operationId, status);
}

inline void AsyncCausalityTracer::TraceOperationRelation(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, Windows::Foundation::Diagnostics::CausalityRelation const relation)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TraceOperationRelation(traceLevel, source, platformId, operationId, relation);
}

inline void AsyncCausalityTracer::TraceSynchronousWorkStart(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, Windows::Foundation::Diagnostics::CausalitySynchronousWork const work)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TraceSynchronousWorkStart(traceLevel, source, platformId, operationId, work);
}

inline void AsyncCausalityTracer::TraceSynchronousWorkCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, Windows::Foundation::Diagnostics::CausalitySynchronousWork const work)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TraceSynchronousWorkCompletion(traceLevel, source, work);
}

inline long long AsyncCausalityTracer::TracingStatusChanged(Windows::Foundation::IEventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs> const & handler)
{
	return GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TracingStatusChanged(handler);
}

template <typename F> long long AsyncCausalityTracer::TracingStatusChanged(F handler)
{
	return GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TracingStatusChanged(Windows::Foundation::EventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs>(handler));
}

inline void AsyncCausalityTracer::TracingStatusChanged(long long const cookie)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TracingStatusChanged(cookie);
}

inline RuntimeBrokerErrorSettings::RuntimeBrokerErrorSettings() :
	RuntimeBrokerErrorSettings(ActivateInstance<RuntimeBrokerErrorSettings>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Diagnostics::ErrorDetails> ErrorDetails::CreateFromHResultAsync(int const errorCode)
{
	return GetActivationFactory<ErrorDetails, IErrorDetailsStatics>().CreateFromHResultAsync(errorCode);
}

inline LoggingOptions::LoggingOptions() :
	LoggingOptions(ActivateInstance<LoggingOptions>())
{}

inline LoggingOptions::LoggingOptions(long long const keywords) :
	LoggingOptions(GetActivationFactory<LoggingOptions, ILoggingOptionsFactory>().CreateWithKeywords(keywords))
{}

inline LoggingChannelOptions::LoggingChannelOptions() :
	LoggingChannelOptions(ActivateInstance<LoggingChannelOptions>())
{}

inline LoggingChannelOptions::LoggingChannelOptions(GUID const group) :
	LoggingChannelOptions(GetActivationFactory<LoggingChannelOptions, ILoggingChannelOptionsFactory>().Create(group))
{}

inline LoggingFields::LoggingFields() :
	LoggingFields(ActivateInstance<LoggingFields>())
{}

inline LoggingActivity::LoggingActivity(StringReference const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) :
	LoggingActivity(GetActivationFactory<LoggingActivity, ILoggingActivityFactory>().CreateLoggingActivity(activityName, loggingChannel))
{}

inline LoggingActivity::LoggingActivity(StringReference const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel const level) :
	LoggingActivity(GetActivationFactory<LoggingActivity, ILoggingActivityFactory>().CreateLoggingActivityWithLevel(activityName, loggingChannel, level))
{}

inline LoggingChannel::LoggingChannel(StringReference const & name) :
	LoggingChannel(GetActivationFactory<LoggingChannel, ILoggingChannelFactory>().Create(name))
{}

inline LoggingChannel::LoggingChannel(StringReference const & name, Windows::Foundation::Diagnostics::LoggingChannelOptions const & options) :
	LoggingChannel(GetActivationFactory<LoggingChannel, ILoggingChannelFactory2>().CreateWithOptions(name, options))
{}

inline LoggingChannel::LoggingChannel(StringReference const & name, Windows::Foundation::Diagnostics::LoggingChannelOptions const & options, GUID const id) :
	LoggingChannel(GetActivationFactory<LoggingChannel, ILoggingChannelFactory2>().CreateWithOptionsAndId(name, options, id))
{}

inline LoggingSession::LoggingSession(StringReference const & name) :
	LoggingSession(GetActivationFactory<LoggingSession, ILoggingSessionFactory>().Create(name))
{}

inline FileLoggingSession::FileLoggingSession(StringReference const & name) :
	FileLoggingSession(GetActivationFactory<FileLoggingSession, IFileLoggingSessionFactory>().Create(name))
{}

}}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Metadata {

inline bool ApiInformation::IsTypePresent(StringReference const & typeName)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsTypePresent(typeName);
}

inline bool ApiInformation::IsMethodPresent(StringReference const & typeName, StringReference const & methodName)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsMethodPresent(typeName, methodName);
}

inline bool ApiInformation::IsMethodPresent(StringReference const & typeName, StringReference const & methodName, unsigned const inputParameterCount)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsMethodPresent(typeName, methodName, inputParameterCount);
}

inline bool ApiInformation::IsEventPresent(StringReference const & typeName, StringReference const & eventName)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsEventPresent(typeName, eventName);
}

inline bool ApiInformation::IsPropertyPresent(StringReference const & typeName, StringReference const & propertyName)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsPropertyPresent(typeName, propertyName);
}

inline bool ApiInformation::IsReadOnlyPropertyPresent(StringReference const & typeName, StringReference const & propertyName)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsReadOnlyPropertyPresent(typeName, propertyName);
}

inline bool ApiInformation::IsWriteablePropertyPresent(StringReference const & typeName, StringReference const & propertyName)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsWriteablePropertyPresent(typeName, propertyName);
}

inline bool ApiInformation::IsEnumNamedValuePresent(StringReference const & enumTypeName, StringReference const & valueName)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsEnumNamedValuePresent(enumTypeName, valueName);
}

inline bool ApiInformation::IsApiContractPresent(StringReference const & contractName, unsigned short const majorVersion)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsApiContractPresent(contractName, majorVersion);
}

inline bool ApiInformation::IsApiContractPresent(StringReference const & contractName, unsigned short const majorVersion, unsigned short const minorVersion)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsApiContractPresent(contractName, majorVersion, minorVersion);
}

}}}}

namespace winrt { namespace Windows { namespace Gaming { namespace Input {

inline long long Gamepad::GamepadAdded(Windows::Foundation::IEventHandler<Windows::Gaming::Input::Gamepad> const & value)
{
	return GetActivationFactory<Gamepad, IGamepadStatics>().GamepadAdded(value);
}

template <typename F> long long Gamepad::GamepadAdded(F value)
{
	return GetActivationFactory<Gamepad, IGamepadStatics>().GamepadAdded(Windows::Foundation::EventHandler<Windows::Gaming::Input::Gamepad>(value));
}

inline void Gamepad::GamepadAdded(long long const token)
{
	GetActivationFactory<Gamepad, IGamepadStatics>().GamepadAdded(token);
}

inline long long Gamepad::GamepadRemoved(Windows::Foundation::IEventHandler<Windows::Gaming::Input::Gamepad> const & value)
{
	return GetActivationFactory<Gamepad, IGamepadStatics>().GamepadRemoved(value);
}

template <typename F> long long Gamepad::GamepadRemoved(F value)
{
	return GetActivationFactory<Gamepad, IGamepadStatics>().GamepadRemoved(Windows::Foundation::EventHandler<Windows::Gaming::Input::Gamepad>(value));
}

inline void Gamepad::GamepadRemoved(long long const token)
{
	GetActivationFactory<Gamepad, IGamepadStatics>().GamepadRemoved(token);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Gaming::Input::Gamepad> Gamepad::Gamepads()
{
	return GetActivationFactory<Gamepad, IGamepadStatics>().Gamepads();
}

}}}}

namespace winrt { namespace Windows { namespace Globalization {

inline Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> JapanesePhoneticAnalyzer::GetWords(StringReference const & input)
{
	return GetActivationFactory<JapanesePhoneticAnalyzer, IJapanesePhoneticAnalyzerStatics>().GetWords(input);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> JapanesePhoneticAnalyzer::GetWords(StringReference const & input, bool const monoRuby)
{
	return GetActivationFactory<JapanesePhoneticAnalyzer, IJapanesePhoneticAnalyzerStatics>().GetWords(input, monoRuby);
}

inline String CalendarIdentifiers::Gregorian()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Gregorian();
}

inline String CalendarIdentifiers::Hebrew()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Hebrew();
}

inline String CalendarIdentifiers::Hijri()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Hijri();
}

inline String CalendarIdentifiers::Japanese()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Japanese();
}

inline String CalendarIdentifiers::Julian()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Julian();
}

inline String CalendarIdentifiers::Korean()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Korean();
}

inline String CalendarIdentifiers::Taiwan()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Taiwan();
}

inline String CalendarIdentifiers::Thai()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Thai();
}

inline String CalendarIdentifiers::UmAlQura()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().UmAlQura();
}

inline String CalendarIdentifiers::Persian()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics2>().Persian();
}

inline String ClockIdentifiers::TwelveHour()
{
	return GetActivationFactory<ClockIdentifiers, IClockIdentifiersStatics>().TwelveHour();
}

inline String ClockIdentifiers::TwentyFourHour()
{
	return GetActivationFactory<ClockIdentifiers, IClockIdentifiersStatics>().TwentyFourHour();
}

inline String NumeralSystemIdentifiers::Arab()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Arab();
}

inline String NumeralSystemIdentifiers::ArabExt()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().ArabExt();
}

inline String NumeralSystemIdentifiers::Bali()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Bali();
}

inline String NumeralSystemIdentifiers::Beng()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Beng();
}

inline String NumeralSystemIdentifiers::Cham()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Cham();
}

inline String NumeralSystemIdentifiers::Deva()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Deva();
}

inline String NumeralSystemIdentifiers::FullWide()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().FullWide();
}

inline String NumeralSystemIdentifiers::Gujr()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Gujr();
}

inline String NumeralSystemIdentifiers::Guru()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Guru();
}

inline String NumeralSystemIdentifiers::HaniDec()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().HaniDec();
}

inline String NumeralSystemIdentifiers::Java()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Java();
}

inline String NumeralSystemIdentifiers::Kali()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Kali();
}

inline String NumeralSystemIdentifiers::Khmr()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Khmr();
}

inline String NumeralSystemIdentifiers::Knda()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Knda();
}

inline String NumeralSystemIdentifiers::Lana()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Lana();
}

inline String NumeralSystemIdentifiers::LanaTham()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().LanaTham();
}

inline String NumeralSystemIdentifiers::Laoo()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Laoo();
}

inline String NumeralSystemIdentifiers::Latn()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Latn();
}

inline String NumeralSystemIdentifiers::Lepc()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Lepc();
}

inline String NumeralSystemIdentifiers::Limb()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Limb();
}

inline String NumeralSystemIdentifiers::Mlym()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Mlym();
}

inline String NumeralSystemIdentifiers::Mong()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Mong();
}

inline String NumeralSystemIdentifiers::Mtei()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Mtei();
}

inline String NumeralSystemIdentifiers::Mymr()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Mymr();
}

inline String NumeralSystemIdentifiers::MymrShan()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().MymrShan();
}

inline String NumeralSystemIdentifiers::Nkoo()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Nkoo();
}

inline String NumeralSystemIdentifiers::Olck()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Olck();
}

inline String NumeralSystemIdentifiers::Orya()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Orya();
}

inline String NumeralSystemIdentifiers::Saur()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Saur();
}

inline String NumeralSystemIdentifiers::Sund()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Sund();
}

inline String NumeralSystemIdentifiers::Talu()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Talu();
}

inline String NumeralSystemIdentifiers::TamlDec()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().TamlDec();
}

inline String NumeralSystemIdentifiers::Telu()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Telu();
}

inline String NumeralSystemIdentifiers::Thai()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Thai();
}

inline String NumeralSystemIdentifiers::Tibt()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Tibt();
}

inline String NumeralSystemIdentifiers::Vaii()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Vaii();
}

inline String NumeralSystemIdentifiers::Brah()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().Brah();
}

inline String NumeralSystemIdentifiers::Osma()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().Osma();
}

inline String NumeralSystemIdentifiers::MathBold()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().MathBold();
}

inline String NumeralSystemIdentifiers::MathDbl()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().MathDbl();
}

inline String NumeralSystemIdentifiers::MathSans()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().MathSans();
}

inline String NumeralSystemIdentifiers::MathSanb()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().MathSanb();
}

inline String NumeralSystemIdentifiers::MathMono()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().MathMono();
}

inline String NumeralSystemIdentifiers::ZmthBold()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().ZmthBold();
}

inline String NumeralSystemIdentifiers::ZmthDbl()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().ZmthDbl();
}

inline String NumeralSystemIdentifiers::ZmthSans()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().ZmthSans();
}

inline String NumeralSystemIdentifiers::ZmthSanb()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().ZmthSanb();
}

inline String NumeralSystemIdentifiers::ZmthMono()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().ZmthMono();
}

inline String CurrencyIdentifiers::AED()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AED();
}

inline String CurrencyIdentifiers::AFN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AFN();
}

inline String CurrencyIdentifiers::ALL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ALL();
}

inline String CurrencyIdentifiers::AMD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AMD();
}

inline String CurrencyIdentifiers::ANG()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ANG();
}

inline String CurrencyIdentifiers::AOA()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AOA();
}

inline String CurrencyIdentifiers::ARS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ARS();
}

inline String CurrencyIdentifiers::AUD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AUD();
}

inline String CurrencyIdentifiers::AWG()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AWG();
}

inline String CurrencyIdentifiers::AZN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AZN();
}

inline String CurrencyIdentifiers::BAM()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BAM();
}

inline String CurrencyIdentifiers::BBD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BBD();
}

inline String CurrencyIdentifiers::BDT()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BDT();
}

inline String CurrencyIdentifiers::BGN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BGN();
}

inline String CurrencyIdentifiers::BHD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BHD();
}

inline String CurrencyIdentifiers::BIF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BIF();
}

inline String CurrencyIdentifiers::BMD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BMD();
}

inline String CurrencyIdentifiers::BND()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BND();
}

inline String CurrencyIdentifiers::BOB()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BOB();
}

inline String CurrencyIdentifiers::BRL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BRL();
}

inline String CurrencyIdentifiers::BSD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BSD();
}

inline String CurrencyIdentifiers::BTN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BTN();
}

inline String CurrencyIdentifiers::BWP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BWP();
}

inline String CurrencyIdentifiers::BYR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BYR();
}

inline String CurrencyIdentifiers::BZD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BZD();
}

inline String CurrencyIdentifiers::CAD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CAD();
}

inline String CurrencyIdentifiers::CDF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CDF();
}

inline String CurrencyIdentifiers::CHF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CHF();
}

inline String CurrencyIdentifiers::CLP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CLP();
}

inline String CurrencyIdentifiers::CNY()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CNY();
}

inline String CurrencyIdentifiers::COP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().COP();
}

inline String CurrencyIdentifiers::CRC()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CRC();
}

inline String CurrencyIdentifiers::CUP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CUP();
}

inline String CurrencyIdentifiers::CVE()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CVE();
}

inline String CurrencyIdentifiers::CZK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CZK();
}

inline String CurrencyIdentifiers::DJF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().DJF();
}

inline String CurrencyIdentifiers::DKK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().DKK();
}

inline String CurrencyIdentifiers::DOP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().DOP();
}

inline String CurrencyIdentifiers::DZD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().DZD();
}

inline String CurrencyIdentifiers::EGP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().EGP();
}

inline String CurrencyIdentifiers::ERN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ERN();
}

inline String CurrencyIdentifiers::ETB()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ETB();
}

inline String CurrencyIdentifiers::EUR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().EUR();
}

inline String CurrencyIdentifiers::FJD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().FJD();
}

inline String CurrencyIdentifiers::FKP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().FKP();
}

inline String CurrencyIdentifiers::GBP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GBP();
}

inline String CurrencyIdentifiers::GEL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GEL();
}

inline String CurrencyIdentifiers::GHS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GHS();
}

inline String CurrencyIdentifiers::GIP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GIP();
}

inline String CurrencyIdentifiers::GMD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GMD();
}

inline String CurrencyIdentifiers::GNF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GNF();
}

inline String CurrencyIdentifiers::GTQ()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GTQ();
}

inline String CurrencyIdentifiers::GYD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GYD();
}

inline String CurrencyIdentifiers::HKD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().HKD();
}

inline String CurrencyIdentifiers::HNL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().HNL();
}

inline String CurrencyIdentifiers::HRK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().HRK();
}

inline String CurrencyIdentifiers::HTG()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().HTG();
}

inline String CurrencyIdentifiers::HUF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().HUF();
}

inline String CurrencyIdentifiers::IDR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().IDR();
}

inline String CurrencyIdentifiers::ILS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ILS();
}

inline String CurrencyIdentifiers::INR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().INR();
}

inline String CurrencyIdentifiers::IQD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().IQD();
}

inline String CurrencyIdentifiers::IRR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().IRR();
}

inline String CurrencyIdentifiers::ISK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ISK();
}

inline String CurrencyIdentifiers::JMD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().JMD();
}

inline String CurrencyIdentifiers::JOD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().JOD();
}

inline String CurrencyIdentifiers::JPY()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().JPY();
}

inline String CurrencyIdentifiers::KES()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KES();
}

inline String CurrencyIdentifiers::KGS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KGS();
}

inline String CurrencyIdentifiers::KHR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KHR();
}

inline String CurrencyIdentifiers::KMF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KMF();
}

inline String CurrencyIdentifiers::KPW()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KPW();
}

inline String CurrencyIdentifiers::KRW()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KRW();
}

inline String CurrencyIdentifiers::KWD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KWD();
}

inline String CurrencyIdentifiers::KYD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KYD();
}

inline String CurrencyIdentifiers::KZT()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KZT();
}

inline String CurrencyIdentifiers::LAK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LAK();
}

inline String CurrencyIdentifiers::LBP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LBP();
}

inline String CurrencyIdentifiers::LKR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LKR();
}

inline String CurrencyIdentifiers::LRD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LRD();
}

inline String CurrencyIdentifiers::LSL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LSL();
}

inline String CurrencyIdentifiers::LTL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LTL();
}

inline String CurrencyIdentifiers::LVL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LVL();
}

inline String CurrencyIdentifiers::LYD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LYD();
}

inline String CurrencyIdentifiers::MAD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MAD();
}

inline String CurrencyIdentifiers::MDL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MDL();
}

inline String CurrencyIdentifiers::MGA()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MGA();
}

inline String CurrencyIdentifiers::MKD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MKD();
}

inline String CurrencyIdentifiers::MMK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MMK();
}

inline String CurrencyIdentifiers::MNT()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MNT();
}

inline String CurrencyIdentifiers::MOP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MOP();
}

inline String CurrencyIdentifiers::MRO()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MRO();
}

inline String CurrencyIdentifiers::MUR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MUR();
}

inline String CurrencyIdentifiers::MVR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MVR();
}

inline String CurrencyIdentifiers::MWK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MWK();
}

inline String CurrencyIdentifiers::MXN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MXN();
}

inline String CurrencyIdentifiers::MYR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MYR();
}

inline String CurrencyIdentifiers::MZN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MZN();
}

inline String CurrencyIdentifiers::NAD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NAD();
}

inline String CurrencyIdentifiers::NGN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NGN();
}

inline String CurrencyIdentifiers::NIO()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NIO();
}

inline String CurrencyIdentifiers::NOK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NOK();
}

inline String CurrencyIdentifiers::NPR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NPR();
}

inline String CurrencyIdentifiers::NZD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NZD();
}

inline String CurrencyIdentifiers::OMR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().OMR();
}

inline String CurrencyIdentifiers::PAB()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PAB();
}

inline String CurrencyIdentifiers::PEN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PEN();
}

inline String CurrencyIdentifiers::PGK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PGK();
}

inline String CurrencyIdentifiers::PHP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PHP();
}

inline String CurrencyIdentifiers::PKR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PKR();
}

inline String CurrencyIdentifiers::PLN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PLN();
}

inline String CurrencyIdentifiers::PYG()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PYG();
}

inline String CurrencyIdentifiers::QAR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().QAR();
}

inline String CurrencyIdentifiers::RON()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().RON();
}

inline String CurrencyIdentifiers::RSD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().RSD();
}

inline String CurrencyIdentifiers::RUB()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().RUB();
}

inline String CurrencyIdentifiers::RWF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().RWF();
}

inline String CurrencyIdentifiers::SAR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SAR();
}

inline String CurrencyIdentifiers::SBD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SBD();
}

inline String CurrencyIdentifiers::SCR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SCR();
}

inline String CurrencyIdentifiers::SDG()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SDG();
}

inline String CurrencyIdentifiers::SEK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SEK();
}

inline String CurrencyIdentifiers::SGD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SGD();
}

inline String CurrencyIdentifiers::SHP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SHP();
}

inline String CurrencyIdentifiers::SLL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SLL();
}

inline String CurrencyIdentifiers::SOS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SOS();
}

inline String CurrencyIdentifiers::SRD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SRD();
}

inline String CurrencyIdentifiers::STD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().STD();
}

inline String CurrencyIdentifiers::SYP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SYP();
}

inline String CurrencyIdentifiers::SZL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SZL();
}

inline String CurrencyIdentifiers::THB()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().THB();
}

inline String CurrencyIdentifiers::TJS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TJS();
}

inline String CurrencyIdentifiers::TMT()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TMT();
}

inline String CurrencyIdentifiers::TND()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TND();
}

inline String CurrencyIdentifiers::TOP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TOP();
}

inline String CurrencyIdentifiers::TRY()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TRY();
}

inline String CurrencyIdentifiers::TTD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TTD();
}

inline String CurrencyIdentifiers::TWD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TWD();
}

inline String CurrencyIdentifiers::TZS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TZS();
}

inline String CurrencyIdentifiers::UAH()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().UAH();
}

inline String CurrencyIdentifiers::UGX()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().UGX();
}

inline String CurrencyIdentifiers::USD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().USD();
}

inline String CurrencyIdentifiers::UYU()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().UYU();
}

inline String CurrencyIdentifiers::UZS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().UZS();
}

inline String CurrencyIdentifiers::VEF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().VEF();
}

inline String CurrencyIdentifiers::VND()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().VND();
}

inline String CurrencyIdentifiers::VUV()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().VUV();
}

inline String CurrencyIdentifiers::WST()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().WST();
}

inline String CurrencyIdentifiers::XAF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().XAF();
}

inline String CurrencyIdentifiers::XCD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().XCD();
}

inline String CurrencyIdentifiers::XOF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().XOF();
}

inline String CurrencyIdentifiers::XPF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().XPF();
}

inline String CurrencyIdentifiers::XXX()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().XXX();
}

inline String CurrencyIdentifiers::YER()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().YER();
}

inline String CurrencyIdentifiers::ZAR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ZAR();
}

inline String CurrencyIdentifiers::ZMW()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ZMW();
}

inline String CurrencyIdentifiers::ZWL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ZWL();
}

inline GeographicRegion::GeographicRegion() :
	GeographicRegion(ActivateInstance<GeographicRegion>())
{}

inline GeographicRegion::GeographicRegion(StringReference const & geographicRegionCode) :
	GeographicRegion(GetActivationFactory<GeographicRegion, IGeographicRegionFactory>().CreateGeographicRegion(geographicRegionCode))
{}

inline bool GeographicRegion::IsSupported(StringReference const & geographicRegionCode)
{
	return GetActivationFactory<GeographicRegion, IGeographicRegionStatics>().IsSupported(geographicRegionCode);
}

inline Language::Language(StringReference const & languageTag) :
	Language(GetActivationFactory<Language, ILanguageFactory>().CreateLanguage(languageTag))
{}

inline bool Language::TrySetInputMethodLanguageTag(StringReference const & languageTag)
{
	return GetActivationFactory<Language, ILanguageStatics2>().TrySetInputMethodLanguageTag(languageTag);
}

inline bool Language::IsWellFormed(StringReference const & languageTag)
{
	return GetActivationFactory<Language, ILanguageStatics>().IsWellFormed(languageTag);
}

inline String Language::CurrentInputMethodLanguageTag()
{
	return GetActivationFactory<Language, ILanguageStatics>().CurrentInputMethodLanguageTag();
}

inline Calendar::Calendar() :
	Calendar(ActivateInstance<Calendar>())
{}

inline Calendar::Calendar(Windows::Foundation::Collections::IIterable<String> const & languages) :
	Calendar(GetActivationFactory<Calendar, ICalendarFactory>().CreateCalendarDefaultCalendarAndClock(languages))
{}

inline Calendar::Calendar(Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & calendar, StringReference const & clock) :
	Calendar(GetActivationFactory<Calendar, ICalendarFactory>().CreateCalendar(languages, calendar, clock))
{}

inline Calendar::Calendar(Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & calendar, StringReference const & clock, StringReference const & timeZoneId) :
	Calendar(GetActivationFactory<Calendar, ICalendarFactory2>().CreateCalendarWithTimeZone(languages, calendar, clock, timeZoneId))
{}

inline String ApplicationLanguages::PrimaryLanguageOverride()
{
	return GetActivationFactory<ApplicationLanguages, IApplicationLanguagesStatics>().PrimaryLanguageOverride();
}

inline void ApplicationLanguages::PrimaryLanguageOverride(StringReference const & value)
{
	GetActivationFactory<ApplicationLanguages, IApplicationLanguagesStatics>().PrimaryLanguageOverride(value);
}

inline Windows::Foundation::Collections::IVectorView<String> ApplicationLanguages::Languages()
{
	return GetActivationFactory<ApplicationLanguages, IApplicationLanguagesStatics>().Languages();
}

inline Windows::Foundation::Collections::IVectorView<String> ApplicationLanguages::ManifestLanguages()
{
	return GetActivationFactory<ApplicationLanguages, IApplicationLanguagesStatics>().ManifestLanguages();
}

}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Display {

inline Windows::Graphics::Display::DisplayInformation DisplayInformation::GetForCurrentView()
{
	return GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().GetForCurrentView();
}

inline Windows::Graphics::Display::DisplayOrientations DisplayInformation::AutoRotationPreferences()
{
	return GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().AutoRotationPreferences();
}

inline void DisplayInformation::AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations const value)
{
	GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().AutoRotationPreferences(value);
}

inline long long DisplayInformation::DisplayContentsInvalidated(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler)
{
	return GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().DisplayContentsInvalidated(handler);
}

template <typename F> long long DisplayInformation::DisplayContentsInvalidated(F handler)
{
	return GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().DisplayContentsInvalidated(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

inline void DisplayInformation::DisplayContentsInvalidated(long long const token)
{
	GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().DisplayContentsInvalidated(token);
}

inline Windows::Graphics::Display::DisplayOrientations DisplayProperties::CurrentOrientation()
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().CurrentOrientation();
}

inline Windows::Graphics::Display::DisplayOrientations DisplayProperties::NativeOrientation()
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().NativeOrientation();
}

inline Windows::Graphics::Display::DisplayOrientations DisplayProperties::AutoRotationPreferences()
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().AutoRotationPreferences();
}

inline void DisplayProperties::AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations const value)
{
	GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().AutoRotationPreferences(value);
}

inline long long DisplayProperties::OrientationChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().OrientationChanged(handler);
}

template <typename F> long long DisplayProperties::OrientationChanged(F handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().OrientationChanged(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

inline void DisplayProperties::OrientationChanged(long long const token)
{
	GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().OrientationChanged(token);
}

inline Windows::Graphics::Display::ResolutionScale DisplayProperties::ResolutionScale()
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().ResolutionScale();
}

inline float DisplayProperties::LogicalDpi()
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().LogicalDpi();
}

inline long long DisplayProperties::LogicalDpiChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().LogicalDpiChanged(handler);
}

template <typename F> long long DisplayProperties::LogicalDpiChanged(F handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().LogicalDpiChanged(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

inline void DisplayProperties::LogicalDpiChanged(long long const token)
{
	GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().LogicalDpiChanged(token);
}

inline bool DisplayProperties::StereoEnabled()
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().StereoEnabled();
}

inline long long DisplayProperties::StereoEnabledChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().StereoEnabledChanged(handler);
}

template <typename F> long long DisplayProperties::StereoEnabledChanged(F handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().StereoEnabledChanged(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

inline void DisplayProperties::StereoEnabledChanged(long long const token)
{
	GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().StereoEnabledChanged(token);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> DisplayProperties::GetColorProfileAsync()
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().GetColorProfileAsync();
}

inline long long DisplayProperties::ColorProfileChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().ColorProfileChanged(handler);
}

template <typename F> long long DisplayProperties::ColorProfileChanged(F handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().ColorProfileChanged(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

inline void DisplayProperties::ColorProfileChanged(long long const token)
{
	GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().ColorProfileChanged(token);
}

inline long long DisplayProperties::DisplayContentsInvalidated(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().DisplayContentsInvalidated(handler);
}

template <typename F> long long DisplayProperties::DisplayContentsInvalidated(F handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().DisplayContentsInvalidated(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

inline void DisplayProperties::DisplayContentsInvalidated(long long const token)
{
	GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().DisplayContentsInvalidated(token);
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace SpeechRecognition {

inline SpeechRecognitionTopicConstraint::SpeechRecognitionTopicConstraint(Windows::Media::SpeechRecognition::SpeechRecognitionScenario const scenario, StringReference const & topicHint) :
	SpeechRecognitionTopicConstraint(GetActivationFactory<SpeechRecognitionTopicConstraint, ISpeechRecognitionTopicConstraintFactory>().Create(scenario, topicHint))
{}

inline SpeechRecognitionTopicConstraint::SpeechRecognitionTopicConstraint(Windows::Media::SpeechRecognition::SpeechRecognitionScenario const scenario, StringReference const & topicHint, StringReference const & tag) :
	SpeechRecognitionTopicConstraint(GetActivationFactory<SpeechRecognitionTopicConstraint, ISpeechRecognitionTopicConstraintFactory>().CreateWithTag(scenario, topicHint, tag))
{}

inline SpeechRecognitionListConstraint::SpeechRecognitionListConstraint(Windows::Foundation::Collections::IIterable<String> const & commands) :
	SpeechRecognitionListConstraint(GetActivationFactory<SpeechRecognitionListConstraint, ISpeechRecognitionListConstraintFactory>().Create(commands))
{}

inline SpeechRecognitionListConstraint::SpeechRecognitionListConstraint(Windows::Foundation::Collections::IIterable<String> const & commands, StringReference const & tag) :
	SpeechRecognitionListConstraint(GetActivationFactory<SpeechRecognitionListConstraint, ISpeechRecognitionListConstraintFactory>().CreateWithTag(commands, tag))
{}

inline SpeechRecognitionGrammarFileConstraint::SpeechRecognitionGrammarFileConstraint(Windows::Storage::StorageFile const & file) :
	SpeechRecognitionGrammarFileConstraint(GetActivationFactory<SpeechRecognitionGrammarFileConstraint, ISpeechRecognitionGrammarFileConstraintFactory>().Create(file))
{}

inline SpeechRecognitionGrammarFileConstraint::SpeechRecognitionGrammarFileConstraint(Windows::Storage::StorageFile const & file, StringReference const & tag) :
	SpeechRecognitionGrammarFileConstraint(GetActivationFactory<SpeechRecognitionGrammarFileConstraint, ISpeechRecognitionGrammarFileConstraintFactory>().CreateWithTag(file, tag))
{}

inline SpeechRecognizer::SpeechRecognizer() :
	SpeechRecognizer(ActivateInstance<SpeechRecognizer>())
{}

inline SpeechRecognizer::SpeechRecognizer(Windows::Globalization::Language const & language) :
	SpeechRecognizer(GetActivationFactory<SpeechRecognizer, ISpeechRecognizerFactory>().Create(language))
{}

inline Windows::Globalization::Language SpeechRecognizer::SystemSpeechLanguage()
{
	return GetActivationFactory<SpeechRecognizer, ISpeechRecognizerStatics>().SystemSpeechLanguage();
}

inline Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> SpeechRecognizer::SupportedTopicLanguages()
{
	return GetActivationFactory<SpeechRecognizer, ISpeechRecognizerStatics>().SupportedTopicLanguages();
}

inline Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> SpeechRecognizer::SupportedGrammarLanguages()
{
	return GetActivationFactory<SpeechRecognizer, ISpeechRecognizerStatics>().SupportedGrammarLanguages();
}

}}}}

namespace winrt { namespace Windows { namespace Networking {

inline EndpointPair::EndpointPair(Windows::Networking::HostName const & localHostName, StringReference const & localServiceName, Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName) :
	EndpointPair(GetActivationFactory<EndpointPair, IEndpointPairFactory>().CreateEndpointPair(localHostName, localServiceName, remoteHostName, remoteServiceName))
{}

inline HostName::HostName(StringReference const & hostName) :
	HostName(GetActivationFactory<HostName, IHostNameFactory>().CreateHostName(hostName))
{}

inline int HostName::Compare(StringReference const & value1, StringReference const & value2)
{
	return GetActivationFactory<HostName, IHostNameStatics>().Compare(value1, value2);
}

}}}

namespace winrt { namespace Windows { namespace Networking { namespace Connectivity {

inline ConnectionProfileFilter::ConnectionProfileFilter() :
	ConnectionProfileFilter(ActivateInstance<ConnectionProfileFilter>())
{}

inline RoutePolicy::RoutePolicy(Windows::Networking::Connectivity::ConnectionProfile const & connectionProfile, Windows::Networking::HostName const & hostName, Windows::Networking::DomainNameType const type) :
	RoutePolicy(GetActivationFactory<RoutePolicy, IRoutePolicyFactory>().CreateRoutePolicy(connectionProfile, hostName, type))
{}

inline CellularApnContext::CellularApnContext() :
	CellularApnContext(ActivateInstance<CellularApnContext>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile>> NetworkInformation::FindConnectionProfilesAsync(Windows::Networking::Connectivity::ConnectionProfileFilter const & pProfileFilter)
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics2>().FindConnectionProfilesAsync(pProfileFilter);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> NetworkInformation::GetConnectionProfiles()
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetConnectionProfiles();
}

inline Windows::Networking::Connectivity::ConnectionProfile NetworkInformation::GetInternetConnectionProfile()
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetInternetConnectionProfile();
}

inline Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::LanIdentifier> NetworkInformation::GetLanIdentifiers()
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetLanIdentifiers();
}

inline Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> NetworkInformation::GetHostNames()
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetHostNames();
}

inline Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration> NetworkInformation::GetProxyConfigurationAsync(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetProxyConfigurationAsync(uri);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> NetworkInformation::GetSortedEndpointPairs(Windows::Foundation::Collections::IIterable<Windows::Networking::EndpointPair> const & destinationList, Windows::Networking::HostNameSortOptions const sortOptions)
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetSortedEndpointPairs(destinationList, sortOptions);
}

inline long long NetworkInformation::NetworkStatusChanged(Windows::Networking::Connectivity::INetworkStatusChangedEventHandler const & networkStatusHandler)
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().NetworkStatusChanged(networkStatusHandler);
}

template <typename F> long long NetworkInformation::NetworkStatusChanged(F networkStatusHandler)
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().NetworkStatusChanged(Windows::Networking::Connectivity::NetworkStatusChangedEventHandler(networkStatusHandler));
}

inline void NetworkInformation::NetworkStatusChanged(long long const eventCookie)
{
	GetActivationFactory<NetworkInformation, INetworkInformationStatics>().NetworkStatusChanged(eventCookie);
}

inline Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession> ConnectivityManager::AcquireConnectionAsync(Windows::Networking::Connectivity::CellularApnContext const & cellularApnContext)
{
	return GetActivationFactory<ConnectivityManager, IConnectivityManagerStatics>().AcquireConnectionAsync(cellularApnContext);
}

inline void ConnectivityManager::AddHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy)
{
	GetActivationFactory<ConnectivityManager, IConnectivityManagerStatics>().AddHttpRoutePolicy(routePolicy);
}

inline void ConnectivityManager::RemoveHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy)
{
	GetActivationFactory<ConnectivityManager, IConnectivityManagerStatics>().RemoveHttpRoutePolicy(routePolicy);
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Sockets {

inline ControlChannelTrigger::ControlChannelTrigger(StringReference const & channelId, unsigned const serverKeepAliveIntervalInMinutes) :
	ControlChannelTrigger(GetActivationFactory<ControlChannelTrigger, IControlChannelTriggerFactory>().CreateControlChannelTrigger(channelId, serverKeepAliveIntervalInMinutes))
{}

inline ControlChannelTrigger::ControlChannelTrigger(StringReference const & channelId, unsigned const serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType const resourceRequestType) :
	ControlChannelTrigger(GetActivationFactory<ControlChannelTrigger, IControlChannelTriggerFactory>().CreateControlChannelTriggerEx(channelId, serverKeepAliveIntervalInMinutes, resourceRequestType))
{}

inline SocketActivityContext::SocketActivityContext(Windows::Storage::Streams::IBuffer const & data) :
	SocketActivityContext(GetActivationFactory<SocketActivityContext, ISocketActivityContextFactory>().Create(data))
{}

inline DatagramSocket::DatagramSocket() :
	DatagramSocket(ActivateInstance<DatagramSocket>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> DatagramSocket::GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName)
{
	return GetActivationFactory<DatagramSocket, IDatagramSocketStatics>().GetEndpointPairsAsync(remoteHostName, remoteServiceName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> DatagramSocket::GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName, Windows::Networking::HostNameSortOptions const sortOptions)
{
	return GetActivationFactory<DatagramSocket, IDatagramSocketStatics>().GetEndpointPairsAsync(remoteHostName, remoteServiceName, sortOptions);
}

inline StreamSocket::StreamSocket() :
	StreamSocket(ActivateInstance<StreamSocket>())
{}

inline StreamSocketListener::StreamSocketListener() :
	StreamSocketListener(ActivateInstance<StreamSocketListener>())
{}

inline Windows::Foundation::Collections::IMapView<String, Windows::Networking::Sockets::SocketActivityInformation> SocketActivityInformation::AllSockets()
{
	return GetActivationFactory<SocketActivityInformation, ISocketActivityInformationStatics>().AllSockets();
}

inline MessageWebSocket::MessageWebSocket() :
	MessageWebSocket(ActivateInstance<MessageWebSocket>())
{}

inline StreamWebSocket::StreamWebSocket() :
	StreamWebSocket(ActivateInstance<StreamWebSocket>())
{}

inline WebSocketKeepAlive::WebSocketKeepAlive() :
	WebSocketKeepAlive(ActivateInstance<WebSocketKeepAlive>())
{}

inline Windows::Networking::Sockets::SocketErrorStatus SocketError::GetStatus(int const hresult)
{
	return GetActivationFactory<SocketError, ISocketErrorStatics>().GetStatus(hresult);
}

inline Windows::Web::WebErrorStatus WebSocketError::GetStatus(int const hresult)
{
	return GetActivationFactory<WebSocketError, IWebSocketErrorStatics>().GetStatus(hresult);
}

}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web {

inline void WebAuthenticationBroker::AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri)
{
	GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics2>().AuthenticateAndContinue(requestUri);
}

inline void WebAuthenticationBroker::AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri)
{
	GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics2>().AuthenticateAndContinue(requestUri, callbackUri);
}

inline void WebAuthenticationBroker::AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri, Windows::Foundation::Collections::ValueSet const & continuationData, Windows::Security::Authentication::Web::WebAuthenticationOptions const options)
{
	GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics2>().AuthenticateAndContinue(requestUri, callbackUri, continuationData, options);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> WebAuthenticationBroker::AuthenticateSilentlyAsync(Windows::Foundation::Uri const & requestUri)
{
	return GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics2>().AuthenticateSilentlyAsync(requestUri);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> WebAuthenticationBroker::AuthenticateSilentlyAsync(Windows::Foundation::Uri const & requestUri, Windows::Security::Authentication::Web::WebAuthenticationOptions const options)
{
	return GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics2>().AuthenticateSilentlyAsync(requestUri, options);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> WebAuthenticationBroker::AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions const options, Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri)
{
	return GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics>().AuthenticateAsync(options, requestUri, callbackUri);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> WebAuthenticationBroker::AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions const options, Windows::Foundation::Uri const & requestUri)
{
	return GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics>().AuthenticateAsync(options, requestUri);
}

inline Windows::Foundation::Uri WebAuthenticationBroker::GetCurrentApplicationCallbackUri()
{
	return GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics>().GetCurrentApplicationCallbackUri();
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Core {

inline WebTokenRequest::WebTokenRequest(Windows::Security::Credentials::WebAccountProvider const & provider, StringReference const & scope, StringReference const & clientId) :
	WebTokenRequest(GetActivationFactory<WebTokenRequest, IWebTokenRequestFactory>().Create(provider, scope, clientId))
{}

inline WebTokenRequest::WebTokenRequest(Windows::Security::Credentials::WebAccountProvider const & provider, StringReference const & scope, StringReference const & clientId, Windows::Security::Authentication::Web::Core::WebTokenRequestPromptType const promptType) :
	WebTokenRequest(GetActivationFactory<WebTokenRequest, IWebTokenRequestFactory>().CreateWithPromptType(provider, scope, clientId, promptType))
{}

inline WebTokenRequest::WebTokenRequest(Windows::Security::Credentials::WebAccountProvider const & provider) :
	WebTokenRequest(GetActivationFactory<WebTokenRequest, IWebTokenRequestFactory>().CreateWithProvider(provider))
{}

inline WebTokenRequest::WebTokenRequest(Windows::Security::Credentials::WebAccountProvider const & provider, StringReference const & scope) :
	WebTokenRequest(GetActivationFactory<WebTokenRequest, IWebTokenRequestFactory>().CreateWithScope(provider, scope))
{}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> WebAuthenticationCoreManager::GetTokenSilentlyAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request)
{
	return GetActivationFactory<WebAuthenticationCoreManager, IWebAuthenticationCoreManagerStatics>().GetTokenSilentlyAsync(request);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> WebAuthenticationCoreManager::GetTokenSilentlyAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request, Windows::Security::Credentials::WebAccount const & webAccount)
{
	return GetActivationFactory<WebAuthenticationCoreManager, IWebAuthenticationCoreManagerStatics>().GetTokenSilentlyAsync(request, webAccount);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> WebAuthenticationCoreManager::RequestTokenAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request)
{
	return GetActivationFactory<WebAuthenticationCoreManager, IWebAuthenticationCoreManagerStatics>().RequestTokenAsync(request);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> WebAuthenticationCoreManager::RequestTokenAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request, Windows::Security::Credentials::WebAccount const & webAccount)
{
	return GetActivationFactory<WebAuthenticationCoreManager, IWebAuthenticationCoreManagerStatics>().RequestTokenAsync(request, webAccount);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> WebAuthenticationCoreManager::FindAccountAsync(Windows::Security::Credentials::WebAccountProvider const & provider, StringReference const & webAccountId)
{
	return GetActivationFactory<WebAuthenticationCoreManager, IWebAuthenticationCoreManagerStatics>().FindAccountAsync(provider, webAccountId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> WebAuthenticationCoreManager::FindAccountProviderAsync(StringReference const & webAccountProviderId)
{
	return GetActivationFactory<WebAuthenticationCoreManager, IWebAuthenticationCoreManagerStatics>().FindAccountProviderAsync(webAccountProviderId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> WebAuthenticationCoreManager::FindAccountProviderAsync(StringReference const & webAccountProviderId, StringReference const & authority)
{
	return GetActivationFactory<WebAuthenticationCoreManager, IWebAuthenticationCoreManagerStatics>().FindAccountProviderAsync(webAccountProviderId, authority);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> WebAuthenticationCoreManager::FindAccountProviderAsync(StringReference const & webAccountProviderId, StringReference const & authority, Windows::System::User const & user)
{
	return GetActivationFactory<WebAuthenticationCoreManager, IWebAuthenticationCoreManagerStatics2>().FindAccountProviderAsync(webAccountProviderId, authority, user);
}

inline WebProviderError::WebProviderError(unsigned const errorCode, StringReference const & errorMessage) :
	WebProviderError(GetActivationFactory<WebProviderError, IWebProviderErrorFactory>().Create(errorCode, errorMessage))
{}

inline WebTokenResponse::WebTokenResponse() :
	WebTokenResponse(ActivateInstance<WebTokenResponse>())
{}

inline WebTokenResponse::WebTokenResponse(StringReference const & token) :
	WebTokenResponse(GetActivationFactory<WebTokenResponse, IWebTokenResponseFactory>().CreateWithToken(token))
{}

inline WebTokenResponse::WebTokenResponse(StringReference const & token, Windows::Security::Credentials::WebAccount const & webAccount) :
	WebTokenResponse(GetActivationFactory<WebTokenResponse, IWebTokenResponseFactory>().CreateWithTokenAndAccount(token, webAccount))
{}

inline WebTokenResponse::WebTokenResponse(StringReference const & token, Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Core::WebProviderError const & error) :
	WebTokenResponse(GetActivationFactory<WebTokenResponse, IWebTokenResponseFactory>().CreateWithTokenAccountAndError(token, webAccount, error))
{}

}}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Provider {

inline WebProviderTokenResponse::WebProviderTokenResponse(Windows::Security::Authentication::Web::Core::WebTokenResponse const & webTokenResponse) :
	WebProviderTokenResponse(GetActivationFactory<WebProviderTokenResponse, IWebProviderTokenResponseFactory>().Create(webTokenResponse))
{}

inline WebAccountClientView::WebAccountClientView(Windows::Security::Authentication::Web::Provider::WebAccountClientViewType const viewType, Windows::Foundation::Uri const & applicationCallbackUri) :
	WebAccountClientView(GetActivationFactory<WebAccountClientView, IWebAccountClientViewFactory>().Create(viewType, applicationCallbackUri))
{}

inline WebAccountClientView::WebAccountClientView(Windows::Security::Authentication::Web::Provider::WebAccountClientViewType const viewType, Windows::Foundation::Uri const & applicationCallbackUri, StringReference const & accountPairwiseId) :
	WebAccountClientView(GetActivationFactory<WebAccountClientView, IWebAccountClientViewFactory>().CreateWithPairwiseId(viewType, applicationCallbackUri, accountPairwiseId))
{}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> WebAccountManager::AddWebAccountAsync(StringReference const & webAccountId, StringReference const & webAccountUserName, Windows::Foundation::Collections::IMapView<String, String> const & props, Windows::Security::Authentication::Web::Provider::WebAccountScope const scope)
{
	return GetActivationFactory<WebAccountManager, IWebAccountScopeManagerStatics>().AddWebAccountAsync(webAccountId, webAccountUserName, props, scope);
}

inline Windows::Foundation::IAsyncAction WebAccountManager::SetScopeAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Provider::WebAccountScope const scope)
{
	return GetActivationFactory<WebAccountManager, IWebAccountScopeManagerStatics>().SetScopeAsync(webAccount, scope);
}

inline Windows::Security::Authentication::Web::Provider::WebAccountScope WebAccountManager::GetScope(Windows::Security::Credentials::WebAccount const & webAccount)
{
	return GetActivationFactory<WebAccountManager, IWebAccountScopeManagerStatics>().GetScope(webAccount);
}

inline Windows::Foundation::IAsyncAction WebAccountManager::PullCookiesAsync(StringReference const & uriString, StringReference const & callerPFN)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics2>().PullCookiesAsync(uriString, callerPFN);
}

inline Windows::Foundation::IAsyncAction WebAccountManager::UpdateWebAccountPropertiesAsync(Windows::Security::Credentials::WebAccount const & webAccount, StringReference const & webAccountUserName, Windows::Foundation::Collections::IMapView<String, String> const & additionalProperties)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().UpdateWebAccountPropertiesAsync(webAccount, webAccountUserName, additionalProperties);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> WebAccountManager::AddWebAccountAsync(StringReference const & webAccountId, StringReference const & webAccountUserName, Windows::Foundation::Collections::IMapView<String, String> const & props)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().AddWebAccountAsync(webAccountId, webAccountUserName, props);
}

inline Windows::Foundation::IAsyncAction WebAccountManager::DeleteWebAccountAsync(Windows::Security::Credentials::WebAccount const & webAccount)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().DeleteWebAccountAsync(webAccount);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount>> WebAccountManager::FindAllProviderWebAccountsAsync()
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().FindAllProviderWebAccountsAsync();
}

inline Windows::Foundation::IAsyncAction WebAccountManager::PushCookiesAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IVectorView<Windows::Web::Http::HttpCookie> const & cookies)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().PushCookiesAsync(uri, cookies);
}

inline Windows::Foundation::IAsyncAction WebAccountManager::SetViewAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Provider::WebAccountClientView const & view)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().SetViewAsync(webAccount, view);
}

inline Windows::Foundation::IAsyncAction WebAccountManager::ClearViewAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Foundation::Uri const & applicationCallbackUri)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().ClearViewAsync(webAccount, applicationCallbackUri);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::Web::Provider::WebAccountClientView>> WebAccountManager::GetViewsAsync(Windows::Security::Credentials::WebAccount const & webAccount)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().GetViewsAsync(webAccount);
}

inline Windows::Foundation::IAsyncAction WebAccountManager::SetWebAccountPictureAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Storage::Streams::IRandomAccessStream const & webAccountPicture)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().SetWebAccountPictureAsync(webAccount, webAccountPicture);
}

inline Windows::Foundation::IAsyncAction WebAccountManager::ClearWebAccountPictureAsync(Windows::Security::Credentials::WebAccount const & webAccount)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().ClearWebAccountPictureAsync(webAccount);
}

}}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Credentials {

inline WebAccountProvider::WebAccountProvider(StringReference const & id, StringReference const & displayName, Windows::Foundation::Uri const & iconUri) :
	WebAccountProvider(GetActivationFactory<WebAccountProvider, IWebAccountProviderFactory>().CreateWebAccountProvider(id, displayName, iconUri))
{}

inline WebAccount::WebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, StringReference const & userName, Windows::Security::Credentials::WebAccountState const state) :
	WebAccount(GetActivationFactory<WebAccount, IWebAccountFactory>().CreateWebAccount(webAccountProvider, userName, state))
{}

inline Windows::Foundation::IAsyncOperation<bool> KeyCredentialManager::IsSupportedAsync()
{
	return GetActivationFactory<KeyCredentialManager, IKeyCredentialManagerStatics>().IsSupportedAsync();
}

inline Windows::Foundation::IAsyncAction KeyCredentialManager::RenewAttestationAsync()
{
	return GetActivationFactory<KeyCredentialManager, IKeyCredentialManagerStatics>().RenewAttestationAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialRetrievalResult> KeyCredentialManager::RequestCreateAsync(StringReference const & name, Windows::Security::Credentials::KeyCredentialCreationOption const option)
{
	return GetActivationFactory<KeyCredentialManager, IKeyCredentialManagerStatics>().RequestCreateAsync(name, option);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialRetrievalResult> KeyCredentialManager::OpenAsync(StringReference const & name)
{
	return GetActivationFactory<KeyCredentialManager, IKeyCredentialManagerStatics>().OpenAsync(name);
}

inline Windows::Foundation::IAsyncAction KeyCredentialManager::DeleteAsync(StringReference const & name)
{
	return GetActivationFactory<KeyCredentialManager, IKeyCredentialManagerStatics>().DeleteAsync(name);
}

inline PasswordCredential::PasswordCredential() :
	PasswordCredential(ActivateInstance<PasswordCredential>())
{}

inline PasswordCredential::PasswordCredential(StringReference const & resource, StringReference const & userName, StringReference const & password) :
	PasswordCredential(GetActivationFactory<PasswordCredential, ICredentialFactory>().CreatePasswordCredential(resource, userName, password))
{}

inline PasswordVault::PasswordVault() :
	PasswordVault(ActivateInstance<PasswordVault>())
{}

inline PasswordCredentialPropertyStore::PasswordCredentialPropertyStore() :
	PasswordCredentialPropertyStore(ActivateInstance<PasswordCredentialPropertyStore>())
{}

}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

inline Certificate::Certificate(Windows::Storage::Streams::IBuffer const & certBlob) :
	Certificate(GetActivationFactory<Certificate, ICertificateFactory>().CreateCertificate(certBlob))
{}

inline CertificateRequestProperties::CertificateRequestProperties() :
	CertificateRequestProperties(ActivateInstance<CertificateRequestProperties>())
{}

inline PfxImportParameters::PfxImportParameters() :
	PfxImportParameters(ActivateInstance<PfxImportParameters>())
{}

inline Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager CertificateEnrollmentManager::UserCertificateEnrollmentManager()
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics2>().UserCertificateEnrollmentManager();
}

inline Windows::Foundation::IAsyncAction CertificateEnrollmentManager::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, StringReference const & friendlyName, StringReference const & keyStorageProvider)
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics2>().ImportPfxDataAsync(pfxData, password, exportable, keyProtectionLevel, installOption, friendlyName, keyStorageProvider);
}

inline Windows::Foundation::IAsyncAction CertificateEnrollmentManager::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::PfxImportParameters const & pfxImportParameters)
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics3>().ImportPfxDataAsync(pfxData, password, pfxImportParameters);
}

inline Windows::Foundation::IAsyncOperation<String> CertificateEnrollmentManager::CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request)
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics>().CreateRequestAsync(request);
}

inline Windows::Foundation::IAsyncAction CertificateEnrollmentManager::InstallCertificateAsync(StringReference const & certificate, Windows::Security::Cryptography::Certificates::InstallOptions const installOption)
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics>().InstallCertificateAsync(certificate, installOption);
}

inline Windows::Foundation::IAsyncAction CertificateEnrollmentManager::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, StringReference const & friendlyName)
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics>().ImportPfxDataAsync(pfxData, password, exportable, keyProtectionLevel, installOption, friendlyName);
}

inline Windows::Foundation::IAsyncOperation<String> KeyAttestationHelper::DecryptTpmAttestationCredentialAsync(StringReference const & credential, StringReference const & containerName)
{
	return GetActivationFactory<KeyAttestationHelper, IKeyAttestationHelperStatics2>().DecryptTpmAttestationCredentialAsync(credential, containerName);
}

inline Windows::Foundation::IAsyncOperation<String> KeyAttestationHelper::DecryptTpmAttestationCredentialAsync(StringReference const & credential)
{
	return GetActivationFactory<KeyAttestationHelper, IKeyAttestationHelperStatics>().DecryptTpmAttestationCredentialAsync(credential);
}

inline String KeyAttestationHelper::GetTpmAttestationCredentialId(StringReference const & credential)
{
	return GetActivationFactory<KeyAttestationHelper, IKeyAttestationHelperStatics>().GetTpmAttestationCredentialId(credential);
}

inline CertificateQuery::CertificateQuery() :
	CertificateQuery(ActivateInstance<CertificateQuery>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> CertificateStores::FindAllAsync()
{
	return GetActivationFactory<CertificateStores, ICertificateStoresStatics>().FindAllAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> CertificateStores::FindAllAsync(Windows::Security::Cryptography::Certificates::CertificateQuery const & query)
{
	return GetActivationFactory<CertificateStores, ICertificateStoresStatics>().FindAllAsync(query);
}

inline Windows::Security::Cryptography::Certificates::CertificateStore CertificateStores::TrustedRootCertificationAuthorities()
{
	return GetActivationFactory<CertificateStores, ICertificateStoresStatics>().TrustedRootCertificationAuthorities();
}

inline Windows::Security::Cryptography::Certificates::CertificateStore CertificateStores::IntermediateCertificationAuthorities()
{
	return GetActivationFactory<CertificateStores, ICertificateStoresStatics>().IntermediateCertificationAuthorities();
}

inline Windows::Security::Cryptography::Certificates::CertificateStore CertificateStores::GetStoreByName(StringReference const & storeName)
{
	return GetActivationFactory<CertificateStores, ICertificateStoresStatics>().GetStoreByName(storeName);
}

inline String KeyAlgorithmNames::Ecdsa()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics2>().Ecdsa();
}

inline String KeyAlgorithmNames::Ecdh()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics2>().Ecdh();
}

inline String KeyAlgorithmNames::Rsa()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Rsa();
}

inline String KeyAlgorithmNames::Dsa()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Dsa();
}

inline String KeyAlgorithmNames::Ecdh256()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdh256();
}

inline String KeyAlgorithmNames::Ecdh384()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdh384();
}

inline String KeyAlgorithmNames::Ecdh521()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdh521();
}

inline String KeyAlgorithmNames::Ecdsa256()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdsa256();
}

inline String KeyAlgorithmNames::Ecdsa384()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdsa384();
}

inline String KeyAlgorithmNames::Ecdsa521()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdsa521();
}

inline String KeyStorageProviderNames::PassportKeyStorageProvider()
{
	return GetActivationFactory<KeyStorageProviderNames, IKeyStorageProviderNamesStatics2>().PassportKeyStorageProvider();
}

inline String KeyStorageProviderNames::SoftwareKeyStorageProvider()
{
	return GetActivationFactory<KeyStorageProviderNames, IKeyStorageProviderNamesStatics>().SoftwareKeyStorageProvider();
}

inline String KeyStorageProviderNames::SmartcardKeyStorageProvider()
{
	return GetActivationFactory<KeyStorageProviderNames, IKeyStorageProviderNamesStatics>().SmartcardKeyStorageProvider();
}

inline String KeyStorageProviderNames::PlatformKeyStorageProvider()
{
	return GetActivationFactory<KeyStorageProviderNames, IKeyStorageProviderNamesStatics>().PlatformKeyStorageProvider();
}

inline ChainBuildingParameters::ChainBuildingParameters() :
	ChainBuildingParameters(ActivateInstance<ChainBuildingParameters>())
{}

inline ChainValidationParameters::ChainValidationParameters() :
	ChainValidationParameters(ActivateInstance<ChainValidationParameters>())
{}

inline CertificateKeyUsages::CertificateKeyUsages() :
	CertificateKeyUsages(ActivateInstance<CertificateKeyUsages>())
{}

inline SubjectAlternativeNameInfo::SubjectAlternativeNameInfo() :
	SubjectAlternativeNameInfo(ActivateInstance<SubjectAlternativeNameInfo>())
{}

inline CmsSignerInfo::CmsSignerInfo() :
	CmsSignerInfo(ActivateInstance<CmsSignerInfo>())
{}

inline CmsAttachedSignature::CmsAttachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) :
	CmsAttachedSignature(GetActivationFactory<CmsAttachedSignature, ICmsAttachedSignatureFactory>().CreateCmsAttachedSignature(inputBlob))
{}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> CmsAttachedSignature::GenerateSignatureAsync(Windows::Storage::Streams::IBuffer const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates)
{
	return GetActivationFactory<CmsAttachedSignature, ICmsAttachedSignatureStatics>().GenerateSignatureAsync(data, signers, certificates);
}

inline CmsDetachedSignature::CmsDetachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) :
	CmsDetachedSignature(GetActivationFactory<CmsDetachedSignature, ICmsDetachedSignatureFactory>().CreateCmsDetachedSignature(inputBlob))
{}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> CmsDetachedSignature::GenerateSignatureAsync(Windows::Storage::Streams::IInputStream const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates)
{
	return GetActivationFactory<CmsDetachedSignature, ICmsDetachedSignatureStatics>().GenerateSignatureAsync(data, signers, certificates);
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

inline Windows::Security::Cryptography::Core::KeyDerivationParameters KeyDerivationParameters::BuildForPbkdf2(Windows::Storage::Streams::IBuffer const & pbkdf2Salt, unsigned const iterationCount)
{
	return GetActivationFactory<KeyDerivationParameters, IKeyDerivationParametersStatics>().BuildForPbkdf2(pbkdf2Salt, iterationCount);
}

inline Windows::Security::Cryptography::Core::KeyDerivationParameters KeyDerivationParameters::BuildForSP800108(Windows::Storage::Streams::IBuffer const & label, Windows::Storage::Streams::IBuffer const & context)
{
	return GetActivationFactory<KeyDerivationParameters, IKeyDerivationParametersStatics>().BuildForSP800108(label, context);
}

inline Windows::Security::Cryptography::Core::KeyDerivationParameters KeyDerivationParameters::BuildForSP80056a(Windows::Storage::Streams::IBuffer const & algorithmId, Windows::Storage::Streams::IBuffer const & partyUInfo, Windows::Storage::Streams::IBuffer const & partyVInfo, Windows::Storage::Streams::IBuffer const & suppPubInfo, Windows::Storage::Streams::IBuffer const & suppPrivInfo)
{
	return GetActivationFactory<KeyDerivationParameters, IKeyDerivationParametersStatics>().BuildForSP80056a(algorithmId, partyUInfo, partyVInfo, suppPubInfo, suppPrivInfo);
}

inline Windows::Security::Cryptography::Core::KeyDerivationParameters KeyDerivationParameters::BuildForCapi1Kdf(Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm const capi1KdfTargetAlgorithm)
{
	return GetActivationFactory<KeyDerivationParameters, IKeyDerivationParametersStatics2>().BuildForCapi1Kdf(capi1KdfTargetAlgorithm);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> PersistedKeyProvider::OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, StringReference const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding const padding)
{
	return GetActivationFactory<PersistedKeyProvider, IPersistedKeyProviderStatics>().OpenKeyPairFromCertificateAsync(certificate, hashAlgorithmName, padding);
}

inline Windows::Security::Cryptography::Core::CryptographicKey PersistedKeyProvider::OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, StringReference const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding const padding)
{
	return GetActivationFactory<PersistedKeyProvider, IPersistedKeyProviderStatics>().OpenPublicKeyFromCertificate(certificate, hashAlgorithmName, padding);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::Encrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().Encrypt(key, data, iv);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::Decrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().Decrypt(key, data, iv);
}

inline Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData CryptographicEngine::EncryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticatedData)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().EncryptAndAuthenticate(key, data, nonce, authenticatedData);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::DecryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticationTag, Windows::Storage::Streams::IBuffer const & authenticatedData)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().DecryptAndAuthenticate(key, data, nonce, authenticationTag, authenticatedData);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::Sign(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().Sign(key, data);
}

inline bool CryptographicEngine::VerifySignature(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().VerifySignature(key, data, signature);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::DeriveKeyMaterial(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Security::Cryptography::Core::KeyDerivationParameters const & parameters, unsigned const desiredKeySize)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().DeriveKeyMaterial(key, parameters, desiredKeySize);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::SignHashedData(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics2>().SignHashedData(key, data);
}

inline bool CryptographicEngine::VerifySignatureWithHashInput(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics2>().VerifySignatureWithHashInput(key, data, signature);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> CryptographicEngine::DecryptAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics2>().DecryptAsync(key, data, iv);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> CryptographicEngine::SignAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics2>().SignAsync(key, data);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> CryptographicEngine::SignHashedDataAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics2>().SignHashedDataAsync(key, data);
}

inline Windows::Security::Cryptography::Core::HashAlgorithmProvider HashAlgorithmProvider::OpenAlgorithm(StringReference const & algorithm)
{
	return GetActivationFactory<HashAlgorithmProvider, IHashAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

inline Windows::Security::Cryptography::Core::MacAlgorithmProvider MacAlgorithmProvider::OpenAlgorithm(StringReference const & algorithm)
{
	return GetActivationFactory<MacAlgorithmProvider, IMacAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

inline Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider KeyDerivationAlgorithmProvider::OpenAlgorithm(StringReference const & algorithm)
{
	return GetActivationFactory<KeyDerivationAlgorithmProvider, IKeyDerivationAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

inline Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider SymmetricKeyAlgorithmProvider::OpenAlgorithm(StringReference const & algorithm)
{
	return GetActivationFactory<SymmetricKeyAlgorithmProvider, ISymmetricKeyAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

inline Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider AsymmetricKeyAlgorithmProvider::OpenAlgorithm(StringReference const & algorithm)
{
	return GetActivationFactory<AsymmetricKeyAlgorithmProvider, IAsymmetricKeyAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

inline String HashAlgorithmNames::Md5()
{
	return GetActivationFactory<HashAlgorithmNames, IHashAlgorithmNamesStatics>().Md5();
}

inline String HashAlgorithmNames::Sha1()
{
	return GetActivationFactory<HashAlgorithmNames, IHashAlgorithmNamesStatics>().Sha1();
}

inline String HashAlgorithmNames::Sha256()
{
	return GetActivationFactory<HashAlgorithmNames, IHashAlgorithmNamesStatics>().Sha256();
}

inline String HashAlgorithmNames::Sha384()
{
	return GetActivationFactory<HashAlgorithmNames, IHashAlgorithmNamesStatics>().Sha384();
}

inline String HashAlgorithmNames::Sha512()
{
	return GetActivationFactory<HashAlgorithmNames, IHashAlgorithmNamesStatics>().Sha512();
}

inline String MacAlgorithmNames::HmacMd5()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().HmacMd5();
}

inline String MacAlgorithmNames::HmacSha1()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().HmacSha1();
}

inline String MacAlgorithmNames::HmacSha256()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().HmacSha256();
}

inline String MacAlgorithmNames::HmacSha384()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().HmacSha384();
}

inline String MacAlgorithmNames::HmacSha512()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().HmacSha512();
}

inline String MacAlgorithmNames::AesCmac()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().AesCmac();
}

inline String SymmetricAlgorithmNames::DesCbc()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().DesCbc();
}

inline String SymmetricAlgorithmNames::DesEcb()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().DesEcb();
}

inline String SymmetricAlgorithmNames::TripleDesCbc()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().TripleDesCbc();
}

inline String SymmetricAlgorithmNames::TripleDesEcb()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().TripleDesEcb();
}

inline String SymmetricAlgorithmNames::Rc2Cbc()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().Rc2Cbc();
}

inline String SymmetricAlgorithmNames::Rc2Ecb()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().Rc2Ecb();
}

inline String SymmetricAlgorithmNames::AesCbc()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesCbc();
}

inline String SymmetricAlgorithmNames::AesEcb()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesEcb();
}

inline String SymmetricAlgorithmNames::AesGcm()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesGcm();
}

inline String SymmetricAlgorithmNames::AesCcm()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesCcm();
}

inline String SymmetricAlgorithmNames::AesCbcPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesCbcPkcs7();
}

inline String SymmetricAlgorithmNames::AesEcbPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesEcbPkcs7();
}

inline String SymmetricAlgorithmNames::DesCbcPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().DesCbcPkcs7();
}

inline String SymmetricAlgorithmNames::DesEcbPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().DesEcbPkcs7();
}

inline String SymmetricAlgorithmNames::TripleDesCbcPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().TripleDesCbcPkcs7();
}

inline String SymmetricAlgorithmNames::TripleDesEcbPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().TripleDesEcbPkcs7();
}

inline String SymmetricAlgorithmNames::Rc2CbcPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().Rc2CbcPkcs7();
}

inline String SymmetricAlgorithmNames::Rc2EcbPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().Rc2EcbPkcs7();
}

inline String SymmetricAlgorithmNames::Rc4()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().Rc4();
}

inline String AsymmetricAlgorithmNames::EcdsaSha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics2>().EcdsaSha256();
}

inline String AsymmetricAlgorithmNames::EcdsaSha384()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics2>().EcdsaSha384();
}

inline String AsymmetricAlgorithmNames::EcdsaSha512()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics2>().EcdsaSha512();
}

inline String AsymmetricAlgorithmNames::RsaPkcs1()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaPkcs1();
}

inline String AsymmetricAlgorithmNames::RsaOaepSha1()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaOaepSha1();
}

inline String AsymmetricAlgorithmNames::RsaOaepSha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaOaepSha256();
}

inline String AsymmetricAlgorithmNames::RsaOaepSha384()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaOaepSha384();
}

inline String AsymmetricAlgorithmNames::RsaOaepSha512()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaOaepSha512();
}

inline String AsymmetricAlgorithmNames::EcdsaP256Sha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().EcdsaP256Sha256();
}

inline String AsymmetricAlgorithmNames::EcdsaP384Sha384()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().EcdsaP384Sha384();
}

inline String AsymmetricAlgorithmNames::EcdsaP521Sha512()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().EcdsaP521Sha512();
}

inline String AsymmetricAlgorithmNames::DsaSha1()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().DsaSha1();
}

inline String AsymmetricAlgorithmNames::DsaSha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().DsaSha256();
}

inline String AsymmetricAlgorithmNames::RsaSignPkcs1Sha1()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPkcs1Sha1();
}

inline String AsymmetricAlgorithmNames::RsaSignPkcs1Sha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPkcs1Sha256();
}

inline String AsymmetricAlgorithmNames::RsaSignPkcs1Sha384()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPkcs1Sha384();
}

inline String AsymmetricAlgorithmNames::RsaSignPkcs1Sha512()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPkcs1Sha512();
}

inline String AsymmetricAlgorithmNames::RsaSignPssSha1()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPssSha1();
}

inline String AsymmetricAlgorithmNames::RsaSignPssSha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPssSha256();
}

inline String AsymmetricAlgorithmNames::RsaSignPssSha384()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPssSha384();
}

inline String AsymmetricAlgorithmNames::RsaSignPssSha512()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPssSha512();
}

inline String EccCurveNames::BrainpoolP160r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP160r1();
}

inline String EccCurveNames::BrainpoolP160t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP160t1();
}

inline String EccCurveNames::BrainpoolP192r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP192r1();
}

inline String EccCurveNames::BrainpoolP192t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP192t1();
}

inline String EccCurveNames::BrainpoolP224r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP224r1();
}

inline String EccCurveNames::BrainpoolP224t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP224t1();
}

inline String EccCurveNames::BrainpoolP256r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP256r1();
}

inline String EccCurveNames::BrainpoolP256t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP256t1();
}

inline String EccCurveNames::BrainpoolP320r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP320r1();
}

inline String EccCurveNames::BrainpoolP320t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP320t1();
}

inline String EccCurveNames::BrainpoolP384r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP384r1();
}

inline String EccCurveNames::BrainpoolP384t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP384t1();
}

inline String EccCurveNames::BrainpoolP512r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP512r1();
}

inline String EccCurveNames::BrainpoolP512t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP512t1();
}

inline String EccCurveNames::Curve25519()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().Curve25519();
}

inline String EccCurveNames::Ec192wapi()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().Ec192wapi();
}

inline String EccCurveNames::NistP192()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().NistP192();
}

inline String EccCurveNames::NistP224()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().NistP224();
}

inline String EccCurveNames::NistP256()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().NistP256();
}

inline String EccCurveNames::NistP384()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().NistP384();
}

inline String EccCurveNames::NistP521()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().NistP521();
}

inline String EccCurveNames::NumsP256t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().NumsP256t1();
}

inline String EccCurveNames::NumsP384t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().NumsP384t1();
}

inline String EccCurveNames::NumsP512t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().NumsP512t1();
}

inline String EccCurveNames::SecP160k1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP160k1();
}

inline String EccCurveNames::SecP160r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP160r1();
}

inline String EccCurveNames::SecP160r2()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP160r2();
}

inline String EccCurveNames::SecP192k1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP192k1();
}

inline String EccCurveNames::SecP192r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP192r1();
}

inline String EccCurveNames::SecP224k1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP224k1();
}

inline String EccCurveNames::SecP224r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP224r1();
}

inline String EccCurveNames::SecP256k1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP256k1();
}

inline String EccCurveNames::SecP256r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP256r1();
}

inline String EccCurveNames::SecP384r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP384r1();
}

inline String EccCurveNames::SecP521r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP521r1();
}

inline String EccCurveNames::Wtls7()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().Wtls7();
}

inline String EccCurveNames::Wtls9()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().Wtls9();
}

inline String EccCurveNames::Wtls12()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().Wtls12();
}

inline String EccCurveNames::X962P192v1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().X962P192v1();
}

inline String EccCurveNames::X962P192v2()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().X962P192v2();
}

inline String EccCurveNames::X962P192v3()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().X962P192v3();
}

inline String EccCurveNames::X962P239v1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().X962P239v1();
}

inline String EccCurveNames::X962P239v2()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().X962P239v2();
}

inline String EccCurveNames::X962P239v3()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().X962P239v3();
}

inline String EccCurveNames::X962P256v1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().X962P256v1();
}

inline Windows::Foundation::Collections::IVectorView<String> EccCurveNames::AllEccCurveNames()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().AllEccCurveNames();
}

inline String KeyDerivationAlgorithmNames::CapiKdfMd5()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics2>().CapiKdfMd5();
}

inline String KeyDerivationAlgorithmNames::CapiKdfSha1()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics2>().CapiKdfSha1();
}

inline String KeyDerivationAlgorithmNames::CapiKdfSha256()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics2>().CapiKdfSha256();
}

inline String KeyDerivationAlgorithmNames::CapiKdfSha384()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics2>().CapiKdfSha384();
}

inline String KeyDerivationAlgorithmNames::CapiKdfSha512()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics2>().CapiKdfSha512();
}

inline String KeyDerivationAlgorithmNames::Pbkdf2Md5()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Pbkdf2Md5();
}

inline String KeyDerivationAlgorithmNames::Pbkdf2Sha1()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Pbkdf2Sha1();
}

inline String KeyDerivationAlgorithmNames::Pbkdf2Sha256()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Pbkdf2Sha256();
}

inline String KeyDerivationAlgorithmNames::Pbkdf2Sha384()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Pbkdf2Sha384();
}

inline String KeyDerivationAlgorithmNames::Pbkdf2Sha512()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Pbkdf2Sha512();
}

inline String KeyDerivationAlgorithmNames::Sp800108CtrHmacMd5()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp800108CtrHmacMd5();
}

inline String KeyDerivationAlgorithmNames::Sp800108CtrHmacSha1()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp800108CtrHmacSha1();
}

inline String KeyDerivationAlgorithmNames::Sp800108CtrHmacSha256()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp800108CtrHmacSha256();
}

inline String KeyDerivationAlgorithmNames::Sp800108CtrHmacSha384()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp800108CtrHmacSha384();
}

inline String KeyDerivationAlgorithmNames::Sp800108CtrHmacSha512()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp800108CtrHmacSha512();
}

inline String KeyDerivationAlgorithmNames::Sp80056aConcatMd5()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp80056aConcatMd5();
}

inline String KeyDerivationAlgorithmNames::Sp80056aConcatSha1()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp80056aConcatSha1();
}

inline String KeyDerivationAlgorithmNames::Sp80056aConcatSha256()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp80056aConcatSha256();
}

inline String KeyDerivationAlgorithmNames::Sp80056aConcatSha384()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp80056aConcatSha384();
}

inline String KeyDerivationAlgorithmNames::Sp80056aConcatSha512()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp80056aConcatSha512();
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace EnterpriseData {

inline bool ProtectionPolicyManager::HasContentBeenRevokedSince(StringReference const & identity, Windows::Foundation::DateTime const & since)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().HasContentBeenRevokedSince(identity, since);
}

inline Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult ProtectionPolicyManager::CheckAccessForApp(StringReference const & sourceIdentity, StringReference const & appPackageFamilyName)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().CheckAccessForApp(sourceIdentity, appPackageFamilyName);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> ProtectionPolicyManager::RequestAccessForAppAsync(StringReference const & sourceIdentity, StringReference const & appPackageFamilyName)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().RequestAccessForAppAsync(sourceIdentity, appPackageFamilyName);
}

inline Windows::Security::EnterpriseData::EnforcementLevel ProtectionPolicyManager::GetEnforcementLevel(StringReference const & identity)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().GetEnforcementLevel(identity);
}

inline bool ProtectionPolicyManager::IsUserDecryptionAllowed(StringReference const & identity)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().IsUserDecryptionAllowed(identity);
}

inline bool ProtectionPolicyManager::IsProtectionUnderLockRequired(StringReference const & identity)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().IsProtectionUnderLockRequired(identity);
}

inline long long ProtectionPolicyManager::PolicyChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().PolicyChanged(handler);
}

template <typename F> long long ProtectionPolicyManager::PolicyChanged(F handler)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().PolicyChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void ProtectionPolicyManager::PolicyChanged(long long const token)
{
	GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().PolicyChanged(token);
}

inline bool ProtectionPolicyManager::IsProtectionEnabled()
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().IsProtectionEnabled();
}

inline bool ProtectionPolicyManager::IsIdentityManaged(StringReference const & identity)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().IsIdentityManaged(identity);
}

inline bool ProtectionPolicyManager::TryApplyProcessUIPolicy(StringReference const & identity)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().TryApplyProcessUIPolicy(identity);
}

inline void ProtectionPolicyManager::ClearProcessUIPolicy()
{
	GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ClearProcessUIPolicy();
}

inline Windows::Security::EnterpriseData::ThreadNetworkContext ProtectionPolicyManager::CreateCurrentThreadNetworkContext(StringReference const & identity)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().CreateCurrentThreadNetworkContext(identity);
}

inline Windows::Foundation::IAsyncOperation<String> ProtectionPolicyManager::GetPrimaryManagedIdentityForNetworkEndpointAsync(Windows::Networking::HostName const & endpointHost)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().GetPrimaryManagedIdentityForNetworkEndpointAsync(endpointHost);
}

inline void ProtectionPolicyManager::RevokeContent(StringReference const & identity)
{
	GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().RevokeContent(identity);
}

inline Windows::Security::EnterpriseData::ProtectionPolicyManager ProtectionPolicyManager::GetForCurrentView()
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().GetForCurrentView();
}

inline long long ProtectionPolicyManager::ProtectedAccessSuspending(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs> const & handler)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedAccessSuspending(handler);
}

template <typename F> long long ProtectionPolicyManager::ProtectedAccessSuspending(F handler)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedAccessSuspending(Windows::Foundation::EventHandler<Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs>(handler));
}

inline void ProtectionPolicyManager::ProtectedAccessSuspending(long long const token)
{
	GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedAccessSuspending(token);
}

inline long long ProtectionPolicyManager::ProtectedAccessResumed(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs> const & handler)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedAccessResumed(handler);
}

template <typename F> long long ProtectionPolicyManager::ProtectedAccessResumed(F handler)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedAccessResumed(Windows::Foundation::EventHandler<Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs>(handler));
}

inline void ProtectionPolicyManager::ProtectedAccessResumed(long long const token)
{
	GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedAccessResumed(token);
}

inline long long ProtectionPolicyManager::ProtectedContentRevoked(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs> const & handler)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedContentRevoked(handler);
}

template <typename F> long long ProtectionPolicyManager::ProtectedContentRevoked(F handler)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedContentRevoked(Windows::Foundation::EventHandler<Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs>(handler));
}

inline void ProtectionPolicyManager::ProtectedContentRevoked(long long const token)
{
	GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedContentRevoked(token);
}

inline Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult ProtectionPolicyManager::CheckAccess(StringReference const & sourceIdentity, StringReference const & targetIdentity)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().CheckAccess(sourceIdentity, targetIdentity);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> ProtectionPolicyManager::RequestAccessAsync(StringReference const & sourceIdentity, StringReference const & targetIdentity)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().RequestAccessAsync(sourceIdentity, targetIdentity);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::FileProtectionStatus> FileRevocationManager::ProtectAsync(Windows::Storage::IStorageItem const & storageItem, StringReference const & enterpriseIdentity)
{
	return GetActivationFactory<FileRevocationManager, IFileRevocationManagerStatics>().ProtectAsync(storageItem, enterpriseIdentity);
}

inline Windows::Foundation::IAsyncOperation<bool> FileRevocationManager::CopyProtectionAsync(Windows::Storage::IStorageItem const & sourceStorageItem, Windows::Storage::IStorageItem const & targetStorageItem)
{
	return GetActivationFactory<FileRevocationManager, IFileRevocationManagerStatics>().CopyProtectionAsync(sourceStorageItem, targetStorageItem);
}

inline void FileRevocationManager::Revoke(StringReference const & enterpriseIdentity)
{
	GetActivationFactory<FileRevocationManager, IFileRevocationManagerStatics>().Revoke(enterpriseIdentity);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::FileProtectionStatus> FileRevocationManager::GetStatusAsync(Windows::Storage::IStorageItem const & storageItem)
{
	return GetActivationFactory<FileRevocationManager, IFileRevocationManagerStatics>().GetStatusAsync(storageItem);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::FileProtectionInfo> FileProtectionManager::ProtectAsync(Windows::Storage::IStorageItem const & target, StringReference const & identity)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics>().ProtectAsync(target, identity);
}

inline Windows::Foundation::IAsyncOperation<bool> FileProtectionManager::CopyProtectionAsync(Windows::Storage::IStorageItem const & source, Windows::Storage::IStorageItem const & target)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics>().CopyProtectionAsync(source, target);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::FileProtectionInfo> FileProtectionManager::GetProtectionInfoAsync(Windows::Storage::IStorageItem const & source)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics>().GetProtectionInfoAsync(source);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerExportResult> FileProtectionManager::SaveFileAsContainerAsync(Windows::Storage::IStorageFile const & protectedFile)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics>().SaveFileAsContainerAsync(protectedFile);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> FileProtectionManager::LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics>().LoadFileFromContainerAsync(containerFile);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> FileProtectionManager::LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile, Windows::Storage::IStorageItem const & target)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics>().LoadFileFromContainerAsync(containerFile, target);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedFileCreateResult> FileProtectionManager::CreateProtectedAndOpenAsync(Windows::Storage::IStorageFolder const & parentFolder, StringReference const & desiredName, StringReference const & identity, Windows::Storage::CreationCollisionOption const collisionOption)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics>().CreateProtectedAndOpenAsync(parentFolder, desiredName, identity, collisionOption);
}

inline Windows::Foundation::IAsyncOperation<bool> FileProtectionManager::IsContainerAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics2>().IsContainerAsync(file);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> FileProtectionManager::LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile, Windows::Storage::IStorageItem const & target, Windows::Storage::NameCollisionOption const collisionOption)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics2>().LoadFileFromContainerAsync(containerFile, target, collisionOption);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerExportResult> FileProtectionManager::SaveFileAsContainerAsync(Windows::Storage::IStorageFile const & protectedFile, Windows::Foundation::Collections::IIterable<String> const & sharedWithIdentities)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics2>().SaveFileAsContainerAsync(protectedFile, sharedWithIdentities);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::BufferProtectUnprotectResult> DataProtectionManager::ProtectAsync(Windows::Storage::Streams::IBuffer const & data, StringReference const & identity)
{
	return GetActivationFactory<DataProtectionManager, IDataProtectionManagerStatics>().ProtectAsync(data, identity);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::BufferProtectUnprotectResult> DataProtectionManager::UnprotectAsync(Windows::Storage::Streams::IBuffer const & data)
{
	return GetActivationFactory<DataProtectionManager, IDataProtectionManagerStatics>().UnprotectAsync(data);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> DataProtectionManager::ProtectStreamAsync(Windows::Storage::Streams::IInputStream const & unprotectedStream, StringReference const & identity, Windows::Storage::Streams::IOutputStream const & protectedStream)
{
	return GetActivationFactory<DataProtectionManager, IDataProtectionManagerStatics>().ProtectStreamAsync(unprotectedStream, identity, protectedStream);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> DataProtectionManager::UnprotectStreamAsync(Windows::Storage::Streams::IInputStream const & protectedStream, Windows::Storage::Streams::IOutputStream const & unprotectedStream)
{
	return GetActivationFactory<DataProtectionManager, IDataProtectionManagerStatics>().UnprotectStreamAsync(protectedStream, unprotectedStream);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> DataProtectionManager::GetProtectionInfoAsync(Windows::Storage::Streams::IBuffer const & protectedData)
{
	return GetActivationFactory<DataProtectionManager, IDataProtectionManagerStatics>().GetProtectionInfoAsync(protectedData);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> DataProtectionManager::GetStreamProtectionInfoAsync(Windows::Storage::Streams::IInputStream const & protectedStream)
{
	return GetActivationFactory<DataProtectionManager, IDataProtectionManagerStatics>().GetStreamProtectionInfoAsync(protectedStream);
}

}}}}

namespace winrt { namespace Windows { namespace Storage {

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::GetFileFromPathAsync(StringReference const & path)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().GetFileFromPathAsync(path);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::GetFileFromApplicationUriAsync(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().GetFileFromApplicationUriAsync(uri);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::CreateStreamedFileAsync(StringReference const & displayNameWithExtension, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().CreateStreamedFileAsync(displayNameWithExtension, dataRequested, thumbnail);
}

template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::CreateStreamedFileAsync(StringReference const & displayNameWithExtension, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().CreateStreamedFileAsync(displayNameWithExtension, Windows::Storage::StreamedFileDataRequestedHandler(dataRequested), thumbnail);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().ReplaceWithStreamedFileAsync(fileToReplace, dataRequested, thumbnail);
}

template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().ReplaceWithStreamedFileAsync(fileToReplace, Windows::Storage::StreamedFileDataRequestedHandler(dataRequested), thumbnail);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::CreateStreamedFileFromUriAsync(StringReference const & displayNameWithExtension, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().CreateStreamedFileFromUriAsync(displayNameWithExtension, uri, thumbnail);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::ReplaceWithStreamedFileFromUriAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().ReplaceWithStreamedFileFromUriAsync(fileToReplace, uri, thumbnail);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> StorageFolder::GetFolderFromPathAsync(StringReference const & path)
{
	return GetActivationFactory<StorageFolder, IStorageFolderStatics>().GetFolderFromPathAsync(path);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> StorageLibrary::GetLibraryAsync(Windows::Storage::KnownLibraryId const libraryId)
{
	return GetActivationFactory<StorageLibrary, IStorageLibraryStatics>().GetLibraryAsync(libraryId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> StorageLibrary::GetLibraryForUserAsync(Windows::System::User const & user, Windows::Storage::KnownLibraryId const libraryId)
{
	return GetActivationFactory<StorageLibrary, IStorageLibraryStatics2>().GetLibraryForUserAsync(user, libraryId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> KnownFolders::GetFolderForUserAsync(Windows::System::User const & user, Windows::Storage::KnownFolderId const folderId)
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics3>().GetFolderForUserAsync(user, folderId);
}

inline Windows::Storage::StorageFolder KnownFolders::Objects3D()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics2>().Objects3D();
}

inline Windows::Storage::StorageFolder KnownFolders::AppCaptures()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics2>().AppCaptures();
}

inline Windows::Storage::StorageFolder KnownFolders::RecordedCalls()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics2>().RecordedCalls();
}

inline Windows::Storage::StorageFolder KnownFolders::SavedPictures()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersSavedPicturesStatics>().SavedPictures();
}

inline Windows::Storage::StorageFolder KnownFolders::CameraRoll()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersCameraRollStatics>().CameraRoll();
}

inline Windows::Storage::StorageFolder KnownFolders::MusicLibrary()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().MusicLibrary();
}

inline Windows::Storage::StorageFolder KnownFolders::PicturesLibrary()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().PicturesLibrary();
}

inline Windows::Storage::StorageFolder KnownFolders::VideosLibrary()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().VideosLibrary();
}

inline Windows::Storage::StorageFolder KnownFolders::DocumentsLibrary()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().DocumentsLibrary();
}

inline Windows::Storage::StorageFolder KnownFolders::HomeGroup()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().HomeGroup();
}

inline Windows::Storage::StorageFolder KnownFolders::RemovableDevices()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().RemovableDevices();
}

inline Windows::Storage::StorageFolder KnownFolders::MediaServerDevices()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().MediaServerDevices();
}

inline Windows::Storage::StorageFolder KnownFolders::Playlists()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersPlaylistsStatics>().Playlists();
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> DownloadsFolder::CreateFileAsync(StringReference const & desiredName)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics>().CreateFileAsync(desiredName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> DownloadsFolder::CreateFolderAsync(StringReference const & desiredName)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics>().CreateFolderAsync(desiredName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> DownloadsFolder::CreateFileAsync(StringReference const & desiredName, Windows::Storage::CreationCollisionOption const option)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics>().CreateFileAsync(desiredName, option);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> DownloadsFolder::CreateFolderAsync(StringReference const & desiredName, Windows::Storage::CreationCollisionOption const option)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics>().CreateFolderAsync(desiredName, option);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> DownloadsFolder::CreateFileForUserAsync(Windows::System::User const & user, StringReference const & desiredName)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics2>().CreateFileForUserAsync(user, desiredName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> DownloadsFolder::CreateFolderForUserAsync(Windows::System::User const & user, StringReference const & desiredName)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics2>().CreateFolderForUserAsync(user, desiredName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> DownloadsFolder::CreateFileForUserAsync(Windows::System::User const & user, StringReference const & desiredName, Windows::Storage::CreationCollisionOption const option)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics2>().CreateFileForUserAsync(user, desiredName, option);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> DownloadsFolder::CreateFolderForUserAsync(Windows::System::User const & user, StringReference const & desiredName, Windows::Storage::CreationCollisionOption const option)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics2>().CreateFolderForUserAsync(user, desiredName, option);
}

inline Windows::Foundation::IAsyncOperation<String> FileIO::ReadTextAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().ReadTextAsync(file);
}

inline Windows::Foundation::IAsyncOperation<String> FileIO::ReadTextAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().ReadTextAsync(file, encoding);
}

inline Windows::Foundation::IAsyncAction FileIO::WriteTextAsync(Windows::Storage::IStorageFile const & file, StringReference const & contents)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteTextAsync(file, contents);
}

inline Windows::Foundation::IAsyncAction FileIO::WriteTextAsync(Windows::Storage::IStorageFile const & file, StringReference const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteTextAsync(file, contents, encoding);
}

inline Windows::Foundation::IAsyncAction FileIO::AppendTextAsync(Windows::Storage::IStorageFile const & file, StringReference const & contents)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().AppendTextAsync(file, contents);
}

inline Windows::Foundation::IAsyncAction FileIO::AppendTextAsync(Windows::Storage::IStorageFile const & file, StringReference const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().AppendTextAsync(file, contents, encoding);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> FileIO::ReadLinesAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().ReadLinesAsync(file);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> FileIO::ReadLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().ReadLinesAsync(file, encoding);
}

inline Windows::Foundation::IAsyncAction FileIO::WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteLinesAsync(file, lines);
}

inline Windows::Foundation::IAsyncAction FileIO::WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteLinesAsync(file, lines, encoding);
}

inline Windows::Foundation::IAsyncAction FileIO::AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().AppendLinesAsync(file, lines);
}

inline Windows::Foundation::IAsyncAction FileIO::AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().AppendLinesAsync(file, lines, encoding);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> FileIO::ReadBufferAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().ReadBufferAsync(file);
}

inline Windows::Foundation::IAsyncAction FileIO::WriteBufferAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteBufferAsync(file, buffer);
}

inline Windows::Foundation::IAsyncOperation<String> PathIO::ReadTextAsync(StringReference const & absolutePath)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadTextAsync(absolutePath);
}

inline Windows::Foundation::IAsyncOperation<String> PathIO::ReadTextAsync(StringReference const & absolutePath, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadTextAsync(absolutePath, encoding);
}

inline Windows::Foundation::IAsyncAction PathIO::WriteTextAsync(StringReference const & absolutePath, StringReference const & contents)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteTextAsync(absolutePath, contents);
}

inline Windows::Foundation::IAsyncAction PathIO::WriteTextAsync(StringReference const & absolutePath, StringReference const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteTextAsync(absolutePath, contents, encoding);
}

inline Windows::Foundation::IAsyncAction PathIO::AppendTextAsync(StringReference const & absolutePath, StringReference const & contents)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().AppendTextAsync(absolutePath, contents);
}

inline Windows::Foundation::IAsyncAction PathIO::AppendTextAsync(StringReference const & absolutePath, StringReference const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().AppendTextAsync(absolutePath, contents, encoding);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> PathIO::ReadLinesAsync(StringReference const & absolutePath)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadLinesAsync(absolutePath);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> PathIO::ReadLinesAsync(StringReference const & absolutePath, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadLinesAsync(absolutePath, encoding);
}

inline Windows::Foundation::IAsyncAction PathIO::WriteLinesAsync(StringReference const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteLinesAsync(absolutePath, lines);
}

inline Windows::Foundation::IAsyncAction PathIO::WriteLinesAsync(StringReference const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteLinesAsync(absolutePath, lines, encoding);
}

inline Windows::Foundation::IAsyncAction PathIO::AppendLinesAsync(StringReference const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().AppendLinesAsync(absolutePath, lines);
}

inline Windows::Foundation::IAsyncAction PathIO::AppendLinesAsync(StringReference const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().AppendLinesAsync(absolutePath, lines, encoding);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> PathIO::ReadBufferAsync(StringReference const & absolutePath)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadBufferAsync(absolutePath);
}

inline Windows::Foundation::IAsyncAction PathIO::WriteBufferAsync(StringReference const & absolutePath, Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteBufferAsync(absolutePath, buffer);
}

inline void CachedFileManager::DeferUpdates(Windows::Storage::IStorageFile const & file)
{
	GetActivationFactory<CachedFileManager, ICachedFileManagerStatics>().DeferUpdates(file);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Provider::FileUpdateStatus> CachedFileManager::CompleteUpdatesAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<CachedFileManager, ICachedFileManagerStatics>().CompleteUpdatesAsync(file);
}

inline String SystemProperties::Author()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Author();
}

inline String SystemProperties::Comment()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Comment();
}

inline String SystemProperties::ItemNameDisplay()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().ItemNameDisplay();
}

inline String SystemProperties::Keywords()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Keywords();
}

inline String SystemProperties::Rating()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Rating();
}

inline String SystemProperties::Title()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Title();
}

inline Windows::Storage::SystemAudioProperties SystemProperties::Audio()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Audio();
}

inline Windows::Storage::SystemGPSProperties SystemProperties::GPS()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().GPS();
}

inline Windows::Storage::SystemMediaProperties SystemProperties::Media()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Media();
}

inline Windows::Storage::SystemMusicProperties SystemProperties::Music()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Music();
}

inline Windows::Storage::SystemPhotoProperties SystemProperties::Photo()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Photo();
}

inline Windows::Storage::SystemVideoProperties SystemProperties::Video()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Video();
}

inline Windows::Storage::SystemImageProperties SystemProperties::Image()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Image();
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::ApplicationData> ApplicationData::GetForUserAsync(Windows::System::User const & user)
{
	return GetActivationFactory<ApplicationData, IApplicationDataStatics2>().GetForUserAsync(user);
}

inline Windows::Storage::ApplicationData ApplicationData::Current()
{
	return GetActivationFactory<ApplicationData, IApplicationDataStatics>().Current();
}

inline ApplicationDataCompositeValue::ApplicationDataCompositeValue() :
	ApplicationDataCompositeValue(ActivateInstance<ApplicationDataCompositeValue>())
{}

}}}

namespace winrt { namespace Windows { namespace Storage { namespace FileProperties {

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geopoint> GeotagHelper::GetGeotagAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<GeotagHelper, IGeotagHelperStatics>().GetGeotagAsync(file);
}

inline Windows::Foundation::IAsyncAction GeotagHelper::SetGeotagFromGeolocatorAsync(Windows::Storage::IStorageFile const & file, Windows::Devices::Geolocation::Geolocator const & geolocator)
{
	return GetActivationFactory<GeotagHelper, IGeotagHelperStatics>().SetGeotagFromGeolocatorAsync(file, geolocator);
}

inline Windows::Foundation::IAsyncAction GeotagHelper::SetGeotagAsync(Windows::Storage::IStorageFile const & file, Windows::Devices::Geolocation::Geopoint const & geopoint)
{
	return GetActivationFactory<GeotagHelper, IGeotagHelperStatics>().SetGeotagAsync(file, geopoint);
}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

}}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Provider {

inline void CachedFileUpdater::SetUpdateInformation(Windows::Storage::IStorageFile const & file, StringReference const & contentId, Windows::Storage::Provider::ReadActivationMode const readMode, Windows::Storage::Provider::WriteActivationMode const writeMode, Windows::Storage::Provider::CachedFileOptions const options)
{
	GetActivationFactory<CachedFileUpdater, ICachedFileUpdaterStatics>().SetUpdateInformation(file, contentId, readMode, writeMode, options);
}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Search {

inline Windows::Storage::Search::ContentIndexer ContentIndexer::GetIndexer(StringReference const & indexName)
{
	return GetActivationFactory<ContentIndexer, IContentIndexerStatics>().GetIndexer(indexName);
}

inline Windows::Storage::Search::ContentIndexer ContentIndexer::GetIndexer()
{
	return GetActivationFactory<ContentIndexer, IContentIndexerStatics>().GetIndexer();
}

inline ValueAndLanguage::ValueAndLanguage() :
	ValueAndLanguage(ActivateInstance<ValueAndLanguage>())
{}

inline IndexableContent::IndexableContent() :
	IndexableContent(ActivateInstance<IndexableContent>())
{}

inline QueryOptions::QueryOptions() :
	QueryOptions(ActivateInstance<QueryOptions>())
{}

inline QueryOptions::QueryOptions(Windows::Storage::Search::CommonFileQuery const query, Windows::Foundation::Collections::IIterable<String> const & fileTypeFilter) :
	QueryOptions(GetActivationFactory<QueryOptions, IQueryOptionsFactory>().CreateCommonFileQuery(query, fileTypeFilter))
{}

inline QueryOptions::QueryOptions(Windows::Storage::Search::CommonFolderQuery const query) :
	QueryOptions(GetActivationFactory<QueryOptions, IQueryOptionsFactory>().CreateCommonFolderQuery(query))
{}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Streams {

inline DataReader::DataReader(Windows::Storage::Streams::IInputStream const & inputStream) :
	DataReader(GetActivationFactory<DataReader, IDataReaderFactory>().CreateDataReader(inputStream))
{}

inline Windows::Storage::Streams::DataReader DataReader::FromBuffer(Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<DataReader, IDataReaderStatics>().FromBuffer(buffer);
}

inline DataWriter::DataWriter() :
	DataWriter(ActivateInstance<DataWriter>())
{}

inline DataWriter::DataWriter(Windows::Storage::Streams::IOutputStream const & outputStream) :
	DataWriter(GetActivationFactory<DataWriter, IDataWriterFactory>().CreateDataWriter(outputStream))
{}

inline Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> RandomAccessStream::CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination)
{
	return GetActivationFactory<RandomAccessStream, IRandomAccessStreamStatics>().CopyAsync(source, destination);
}

inline Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> RandomAccessStream::CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination, unsigned long long const bytesToCopy)
{
	return GetActivationFactory<RandomAccessStream, IRandomAccessStreamStatics>().CopyAsync(source, destination, bytesToCopy);
}

inline Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> RandomAccessStream::CopyAndCloseAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination)
{
	return GetActivationFactory<RandomAccessStream, IRandomAccessStreamStatics>().CopyAndCloseAsync(source, destination);
}

inline Buffer::Buffer(unsigned const capacity) :
	Buffer(GetActivationFactory<Buffer, IBufferFactory>().Create(capacity))
{}

inline Windows::Storage::Streams::Buffer Buffer::CreateCopyFromMemoryBuffer(Windows::Foundation::IMemoryBuffer const & input)
{
	return GetActivationFactory<Buffer, IBufferStatics>().CreateCopyFromMemoryBuffer(input);
}

inline Windows::Foundation::MemoryBuffer Buffer::CreateMemoryBufferOverIBuffer(Windows::Storage::Streams::IBuffer const & input)
{
	return GetActivationFactory<Buffer, IBufferStatics>().CreateMemoryBufferOverIBuffer(input);
}

inline Windows::Storage::Streams::RandomAccessStreamReference RandomAccessStreamReference::CreateFromFile(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<RandomAccessStreamReference, IRandomAccessStreamReferenceStatics>().CreateFromFile(file);
}

inline Windows::Storage::Streams::RandomAccessStreamReference RandomAccessStreamReference::CreateFromUri(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<RandomAccessStreamReference, IRandomAccessStreamReferenceStatics>().CreateFromUri(uri);
}

inline Windows::Storage::Streams::RandomAccessStreamReference RandomAccessStreamReference::CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream)
{
	return GetActivationFactory<RandomAccessStreamReference, IRandomAccessStreamReferenceStatics>().CreateFromStream(stream);
}

inline InMemoryRandomAccessStream::InMemoryRandomAccessStream() :
	InMemoryRandomAccessStream(ActivateInstance<InMemoryRandomAccessStream>())
{}

}}}}

namespace winrt { namespace Windows { namespace System {

inline Windows::System::UserWatcher User::CreateWatcher()
{
	return GetActivationFactory<User, IUserStatics>().CreateWatcher();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> User::FindAllAsync()
{
	return GetActivationFactory<User, IUserStatics>().FindAllAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> User::FindAllAsync(Windows::System::UserType const type)
{
	return GetActivationFactory<User, IUserStatics>().FindAllAsync(type);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> User::FindAllAsync(Windows::System::UserType const type, Windows::System::UserAuthenticationStatus const status)
{
	return GetActivationFactory<User, IUserStatics>().FindAllAsync(type, status);
}

inline Windows::System::User User::GetFromId(StringReference const & nonRoamableId)
{
	return GetActivationFactory<User, IUserStatics>().GetFromId(nonRoamableId);
}

inline bool MemoryManager::TrySetAppMemoryUsageLimit(unsigned long long const value)
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics3>().TrySetAppMemoryUsageLimit(value);
}

inline Windows::System::AppMemoryReport MemoryManager::GetAppMemoryReport()
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics2>().GetAppMemoryReport();
}

inline Windows::System::ProcessMemoryReport MemoryManager::GetProcessMemoryReport()
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics2>().GetProcessMemoryReport();
}

inline unsigned long long MemoryManager::AppMemoryUsage()
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsage();
}

inline unsigned long long MemoryManager::AppMemoryUsageLimit()
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageLimit();
}

inline Windows::System::AppMemoryUsageLevel MemoryManager::AppMemoryUsageLevel()
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageLevel();
}

inline long long MemoryManager::AppMemoryUsageIncreased(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageIncreased(handler);
}

template <typename F> long long MemoryManager::AppMemoryUsageIncreased(F handler)
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageIncreased(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void MemoryManager::AppMemoryUsageIncreased(long long const token)
{
	GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageIncreased(token);
}

inline long long MemoryManager::AppMemoryUsageDecreased(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageDecreased(handler);
}

template <typename F> long long MemoryManager::AppMemoryUsageDecreased(F handler)
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageDecreased(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void MemoryManager::AppMemoryUsageDecreased(long long const token)
{
	GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageDecreased(token);
}

inline long long MemoryManager::AppMemoryUsageLimitChanging(Windows::Foundation::IEventHandler<Windows::System::AppMemoryUsageLimitChangingEventArgs> const & handler)
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageLimitChanging(handler);
}

template <typename F> long long MemoryManager::AppMemoryUsageLimitChanging(F handler)
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageLimitChanging(Windows::Foundation::EventHandler<Windows::System::AppMemoryUsageLimitChangingEventArgs>(handler));
}

inline void MemoryManager::AppMemoryUsageLimitChanging(long long const token)
{
	GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageLimitChanging(token);
}

inline String KnownUserProperties::DisplayName()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().DisplayName();
}

inline String KnownUserProperties::FirstName()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().FirstName();
}

inline String KnownUserProperties::LastName()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().LastName();
}

inline String KnownUserProperties::ProviderName()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().ProviderName();
}

inline String KnownUserProperties::AccountName()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().AccountName();
}

inline String KnownUserProperties::GuestHost()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().GuestHost();
}

inline String KnownUserProperties::PrincipalName()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().PrincipalName();
}

inline String KnownUserProperties::DomainName()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().DomainName();
}

inline String KnownUserProperties::SessionInitiationProtocolUri()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().SessionInitiationProtocolUri();
}

inline LauncherOptions::LauncherOptions() :
	LauncherOptions(ActivateInstance<LauncherOptions>())
{}

inline FolderLauncherOptions::FolderLauncherOptions() :
	FolderLauncherOptions(ActivateInstance<FolderLauncherOptions>())
{}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchFileAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<Launcher, ILauncherStatics>().LaunchFileAsync(file);
}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchFileAsync(Windows::Storage::IStorageFile const & file, Windows::System::LauncherOptions const & options)
{
	return GetActivationFactory<Launcher, ILauncherStatics>().LaunchFileAsync(file, options);
}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchUriAsync(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<Launcher, ILauncherStatics>().LaunchUriAsync(uri);
}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options)
{
	return GetActivationFactory<Launcher, ILauncherStatics>().LaunchUriAsync(uri, options);
}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchFolderAsync(Windows::Storage::IStorageFolder const & folder)
{
	return GetActivationFactory<Launcher, ILauncherStatics3>().LaunchFolderAsync(folder);
}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchFolderAsync(Windows::Storage::IStorageFolder const & folder, Windows::System::FolderLauncherOptions const & options)
{
	return GetActivationFactory<Launcher, ILauncherStatics3>().LaunchFolderAsync(folder, options);
}

inline Windows::Foundation::IAsyncOperation<Windows::System::LaunchUriResult> Launcher::LaunchUriForResultsAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().LaunchUriForResultsAsync(uri, options);
}

inline Windows::Foundation::IAsyncOperation<Windows::System::LaunchUriResult> Launcher::LaunchUriForResultsAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options, Windows::Foundation::Collections::ValueSet const & inputData)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().LaunchUriForResultsAsync(uri, options, inputData);
}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options, Windows::Foundation::Collections::ValueSet const & inputData)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().LaunchUriAsync(uri, options, inputData);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> Launcher::QueryUriSupportAsync(Windows::Foundation::Uri const & uri, Windows::System::LaunchQuerySupportType const launchQuerySupportType)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().QueryUriSupportAsync(uri, launchQuerySupportType);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> Launcher::QueryUriSupportAsync(Windows::Foundation::Uri const & uri, Windows::System::LaunchQuerySupportType const launchQuerySupportType, StringReference const & packageFamilyName)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().QueryUriSupportAsync(uri, launchQuerySupportType, packageFamilyName);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> Launcher::QueryFileSupportAsync(Windows::Storage::StorageFile const & file)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().QueryFileSupportAsync(file);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> Launcher::QueryFileSupportAsync(Windows::Storage::StorageFile const & file, StringReference const & packageFamilyName)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().QueryFileSupportAsync(file, packageFamilyName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> Launcher::FindUriSchemeHandlersAsync(StringReference const & scheme)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().FindUriSchemeHandlersAsync(scheme);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> Launcher::FindUriSchemeHandlersAsync(StringReference const & scheme, Windows::System::LaunchQuerySupportType const launchQuerySupportType)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().FindUriSchemeHandlersAsync(scheme, launchQuerySupportType);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> Launcher::FindFileHandlersAsync(StringReference const & extension)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().FindFileHandlersAsync(extension);
}

}}}

namespace winrt { namespace Windows { namespace UI {

inline Windows::UI::Color ColorHelper::FromArgb(byte const a, byte const r, byte const g, byte const b)
{
	return GetActivationFactory<ColorHelper, IColorHelperStatics>().FromArgb(a, r, g, b);
}

inline Windows::UI::Color Colors::AliceBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().AliceBlue();
}

inline Windows::UI::Color Colors::AntiqueWhite()
{
	return GetActivationFactory<Colors, IColorsStatics>().AntiqueWhite();
}

inline Windows::UI::Color Colors::Aqua()
{
	return GetActivationFactory<Colors, IColorsStatics>().Aqua();
}

inline Windows::UI::Color Colors::Aquamarine()
{
	return GetActivationFactory<Colors, IColorsStatics>().Aquamarine();
}

inline Windows::UI::Color Colors::Azure()
{
	return GetActivationFactory<Colors, IColorsStatics>().Azure();
}

inline Windows::UI::Color Colors::Beige()
{
	return GetActivationFactory<Colors, IColorsStatics>().Beige();
}

inline Windows::UI::Color Colors::Bisque()
{
	return GetActivationFactory<Colors, IColorsStatics>().Bisque();
}

inline Windows::UI::Color Colors::Black()
{
	return GetActivationFactory<Colors, IColorsStatics>().Black();
}

inline Windows::UI::Color Colors::BlanchedAlmond()
{
	return GetActivationFactory<Colors, IColorsStatics>().BlanchedAlmond();
}

inline Windows::UI::Color Colors::Blue()
{
	return GetActivationFactory<Colors, IColorsStatics>().Blue();
}

inline Windows::UI::Color Colors::BlueViolet()
{
	return GetActivationFactory<Colors, IColorsStatics>().BlueViolet();
}

inline Windows::UI::Color Colors::Brown()
{
	return GetActivationFactory<Colors, IColorsStatics>().Brown();
}

inline Windows::UI::Color Colors::BurlyWood()
{
	return GetActivationFactory<Colors, IColorsStatics>().BurlyWood();
}

inline Windows::UI::Color Colors::CadetBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().CadetBlue();
}

inline Windows::UI::Color Colors::Chartreuse()
{
	return GetActivationFactory<Colors, IColorsStatics>().Chartreuse();
}

inline Windows::UI::Color Colors::Chocolate()
{
	return GetActivationFactory<Colors, IColorsStatics>().Chocolate();
}

inline Windows::UI::Color Colors::Coral()
{
	return GetActivationFactory<Colors, IColorsStatics>().Coral();
}

inline Windows::UI::Color Colors::CornflowerBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().CornflowerBlue();
}

inline Windows::UI::Color Colors::Cornsilk()
{
	return GetActivationFactory<Colors, IColorsStatics>().Cornsilk();
}

inline Windows::UI::Color Colors::Crimson()
{
	return GetActivationFactory<Colors, IColorsStatics>().Crimson();
}

inline Windows::UI::Color Colors::Cyan()
{
	return GetActivationFactory<Colors, IColorsStatics>().Cyan();
}

inline Windows::UI::Color Colors::DarkBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkBlue();
}

inline Windows::UI::Color Colors::DarkCyan()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkCyan();
}

inline Windows::UI::Color Colors::DarkGoldenrod()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkGoldenrod();
}

inline Windows::UI::Color Colors::DarkGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkGray();
}

inline Windows::UI::Color Colors::DarkGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkGreen();
}

inline Windows::UI::Color Colors::DarkKhaki()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkKhaki();
}

inline Windows::UI::Color Colors::DarkMagenta()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkMagenta();
}

inline Windows::UI::Color Colors::DarkOliveGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkOliveGreen();
}

inline Windows::UI::Color Colors::DarkOrange()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkOrange();
}

inline Windows::UI::Color Colors::DarkOrchid()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkOrchid();
}

inline Windows::UI::Color Colors::DarkRed()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkRed();
}

inline Windows::UI::Color Colors::DarkSalmon()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkSalmon();
}

inline Windows::UI::Color Colors::DarkSeaGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkSeaGreen();
}

inline Windows::UI::Color Colors::DarkSlateBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkSlateBlue();
}

inline Windows::UI::Color Colors::DarkSlateGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkSlateGray();
}

inline Windows::UI::Color Colors::DarkTurquoise()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkTurquoise();
}

inline Windows::UI::Color Colors::DarkViolet()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkViolet();
}

inline Windows::UI::Color Colors::DeepPink()
{
	return GetActivationFactory<Colors, IColorsStatics>().DeepPink();
}

inline Windows::UI::Color Colors::DeepSkyBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().DeepSkyBlue();
}

inline Windows::UI::Color Colors::DimGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().DimGray();
}

inline Windows::UI::Color Colors::DodgerBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().DodgerBlue();
}

inline Windows::UI::Color Colors::Firebrick()
{
	return GetActivationFactory<Colors, IColorsStatics>().Firebrick();
}

inline Windows::UI::Color Colors::FloralWhite()
{
	return GetActivationFactory<Colors, IColorsStatics>().FloralWhite();
}

inline Windows::UI::Color Colors::ForestGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().ForestGreen();
}

inline Windows::UI::Color Colors::Fuchsia()
{
	return GetActivationFactory<Colors, IColorsStatics>().Fuchsia();
}

inline Windows::UI::Color Colors::Gainsboro()
{
	return GetActivationFactory<Colors, IColorsStatics>().Gainsboro();
}

inline Windows::UI::Color Colors::GhostWhite()
{
	return GetActivationFactory<Colors, IColorsStatics>().GhostWhite();
}

inline Windows::UI::Color Colors::Gold()
{
	return GetActivationFactory<Colors, IColorsStatics>().Gold();
}

inline Windows::UI::Color Colors::Goldenrod()
{
	return GetActivationFactory<Colors, IColorsStatics>().Goldenrod();
}

inline Windows::UI::Color Colors::Gray()
{
	return GetActivationFactory<Colors, IColorsStatics>().Gray();
}

inline Windows::UI::Color Colors::Green()
{
	return GetActivationFactory<Colors, IColorsStatics>().Green();
}

inline Windows::UI::Color Colors::GreenYellow()
{
	return GetActivationFactory<Colors, IColorsStatics>().GreenYellow();
}

inline Windows::UI::Color Colors::Honeydew()
{
	return GetActivationFactory<Colors, IColorsStatics>().Honeydew();
}

inline Windows::UI::Color Colors::HotPink()
{
	return GetActivationFactory<Colors, IColorsStatics>().HotPink();
}

inline Windows::UI::Color Colors::IndianRed()
{
	return GetActivationFactory<Colors, IColorsStatics>().IndianRed();
}

inline Windows::UI::Color Colors::Indigo()
{
	return GetActivationFactory<Colors, IColorsStatics>().Indigo();
}

inline Windows::UI::Color Colors::Ivory()
{
	return GetActivationFactory<Colors, IColorsStatics>().Ivory();
}

inline Windows::UI::Color Colors::Khaki()
{
	return GetActivationFactory<Colors, IColorsStatics>().Khaki();
}

inline Windows::UI::Color Colors::Lavender()
{
	return GetActivationFactory<Colors, IColorsStatics>().Lavender();
}

inline Windows::UI::Color Colors::LavenderBlush()
{
	return GetActivationFactory<Colors, IColorsStatics>().LavenderBlush();
}

inline Windows::UI::Color Colors::LawnGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().LawnGreen();
}

inline Windows::UI::Color Colors::LemonChiffon()
{
	return GetActivationFactory<Colors, IColorsStatics>().LemonChiffon();
}

inline Windows::UI::Color Colors::LightBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightBlue();
}

inline Windows::UI::Color Colors::LightCoral()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightCoral();
}

inline Windows::UI::Color Colors::LightCyan()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightCyan();
}

inline Windows::UI::Color Colors::LightGoldenrodYellow()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightGoldenrodYellow();
}

inline Windows::UI::Color Colors::LightGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightGreen();
}

inline Windows::UI::Color Colors::LightGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightGray();
}

inline Windows::UI::Color Colors::LightPink()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightPink();
}

inline Windows::UI::Color Colors::LightSalmon()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightSalmon();
}

inline Windows::UI::Color Colors::LightSeaGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightSeaGreen();
}

inline Windows::UI::Color Colors::LightSkyBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightSkyBlue();
}

inline Windows::UI::Color Colors::LightSlateGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightSlateGray();
}

inline Windows::UI::Color Colors::LightSteelBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightSteelBlue();
}

inline Windows::UI::Color Colors::LightYellow()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightYellow();
}

inline Windows::UI::Color Colors::Lime()
{
	return GetActivationFactory<Colors, IColorsStatics>().Lime();
}

inline Windows::UI::Color Colors::LimeGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().LimeGreen();
}

inline Windows::UI::Color Colors::Linen()
{
	return GetActivationFactory<Colors, IColorsStatics>().Linen();
}

inline Windows::UI::Color Colors::Magenta()
{
	return GetActivationFactory<Colors, IColorsStatics>().Magenta();
}

inline Windows::UI::Color Colors::Maroon()
{
	return GetActivationFactory<Colors, IColorsStatics>().Maroon();
}

inline Windows::UI::Color Colors::MediumAquamarine()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumAquamarine();
}

inline Windows::UI::Color Colors::MediumBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumBlue();
}

inline Windows::UI::Color Colors::MediumOrchid()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumOrchid();
}

inline Windows::UI::Color Colors::MediumPurple()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumPurple();
}

inline Windows::UI::Color Colors::MediumSeaGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumSeaGreen();
}

inline Windows::UI::Color Colors::MediumSlateBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumSlateBlue();
}

inline Windows::UI::Color Colors::MediumSpringGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumSpringGreen();
}

inline Windows::UI::Color Colors::MediumTurquoise()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumTurquoise();
}

inline Windows::UI::Color Colors::MediumVioletRed()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumVioletRed();
}

inline Windows::UI::Color Colors::MidnightBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().MidnightBlue();
}

inline Windows::UI::Color Colors::MintCream()
{
	return GetActivationFactory<Colors, IColorsStatics>().MintCream();
}

inline Windows::UI::Color Colors::MistyRose()
{
	return GetActivationFactory<Colors, IColorsStatics>().MistyRose();
}

inline Windows::UI::Color Colors::Moccasin()
{
	return GetActivationFactory<Colors, IColorsStatics>().Moccasin();
}

inline Windows::UI::Color Colors::NavajoWhite()
{
	return GetActivationFactory<Colors, IColorsStatics>().NavajoWhite();
}

inline Windows::UI::Color Colors::Navy()
{
	return GetActivationFactory<Colors, IColorsStatics>().Navy();
}

inline Windows::UI::Color Colors::OldLace()
{
	return GetActivationFactory<Colors, IColorsStatics>().OldLace();
}

inline Windows::UI::Color Colors::Olive()
{
	return GetActivationFactory<Colors, IColorsStatics>().Olive();
}

inline Windows::UI::Color Colors::OliveDrab()
{
	return GetActivationFactory<Colors, IColorsStatics>().OliveDrab();
}

inline Windows::UI::Color Colors::Orange()
{
	return GetActivationFactory<Colors, IColorsStatics>().Orange();
}

inline Windows::UI::Color Colors::OrangeRed()
{
	return GetActivationFactory<Colors, IColorsStatics>().OrangeRed();
}

inline Windows::UI::Color Colors::Orchid()
{
	return GetActivationFactory<Colors, IColorsStatics>().Orchid();
}

inline Windows::UI::Color Colors::PaleGoldenrod()
{
	return GetActivationFactory<Colors, IColorsStatics>().PaleGoldenrod();
}

inline Windows::UI::Color Colors::PaleGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().PaleGreen();
}

inline Windows::UI::Color Colors::PaleTurquoise()
{
	return GetActivationFactory<Colors, IColorsStatics>().PaleTurquoise();
}

inline Windows::UI::Color Colors::PaleVioletRed()
{
	return GetActivationFactory<Colors, IColorsStatics>().PaleVioletRed();
}

inline Windows::UI::Color Colors::PapayaWhip()
{
	return GetActivationFactory<Colors, IColorsStatics>().PapayaWhip();
}

inline Windows::UI::Color Colors::PeachPuff()
{
	return GetActivationFactory<Colors, IColorsStatics>().PeachPuff();
}

inline Windows::UI::Color Colors::Peru()
{
	return GetActivationFactory<Colors, IColorsStatics>().Peru();
}

inline Windows::UI::Color Colors::Pink()
{
	return GetActivationFactory<Colors, IColorsStatics>().Pink();
}

inline Windows::UI::Color Colors::Plum()
{
	return GetActivationFactory<Colors, IColorsStatics>().Plum();
}

inline Windows::UI::Color Colors::PowderBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().PowderBlue();
}

inline Windows::UI::Color Colors::Purple()
{
	return GetActivationFactory<Colors, IColorsStatics>().Purple();
}

inline Windows::UI::Color Colors::Red()
{
	return GetActivationFactory<Colors, IColorsStatics>().Red();
}

inline Windows::UI::Color Colors::RosyBrown()
{
	return GetActivationFactory<Colors, IColorsStatics>().RosyBrown();
}

inline Windows::UI::Color Colors::RoyalBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().RoyalBlue();
}

inline Windows::UI::Color Colors::SaddleBrown()
{
	return GetActivationFactory<Colors, IColorsStatics>().SaddleBrown();
}

inline Windows::UI::Color Colors::Salmon()
{
	return GetActivationFactory<Colors, IColorsStatics>().Salmon();
}

inline Windows::UI::Color Colors::SandyBrown()
{
	return GetActivationFactory<Colors, IColorsStatics>().SandyBrown();
}

inline Windows::UI::Color Colors::SeaGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().SeaGreen();
}

inline Windows::UI::Color Colors::SeaShell()
{
	return GetActivationFactory<Colors, IColorsStatics>().SeaShell();
}

inline Windows::UI::Color Colors::Sienna()
{
	return GetActivationFactory<Colors, IColorsStatics>().Sienna();
}

inline Windows::UI::Color Colors::Silver()
{
	return GetActivationFactory<Colors, IColorsStatics>().Silver();
}

inline Windows::UI::Color Colors::SkyBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().SkyBlue();
}

inline Windows::UI::Color Colors::SlateBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().SlateBlue();
}

inline Windows::UI::Color Colors::SlateGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().SlateGray();
}

inline Windows::UI::Color Colors::Snow()
{
	return GetActivationFactory<Colors, IColorsStatics>().Snow();
}

inline Windows::UI::Color Colors::SpringGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().SpringGreen();
}

inline Windows::UI::Color Colors::SteelBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().SteelBlue();
}

inline Windows::UI::Color Colors::Tan()
{
	return GetActivationFactory<Colors, IColorsStatics>().Tan();
}

inline Windows::UI::Color Colors::Teal()
{
	return GetActivationFactory<Colors, IColorsStatics>().Teal();
}

inline Windows::UI::Color Colors::Thistle()
{
	return GetActivationFactory<Colors, IColorsStatics>().Thistle();
}

inline Windows::UI::Color Colors::Tomato()
{
	return GetActivationFactory<Colors, IColorsStatics>().Tomato();
}

inline Windows::UI::Color Colors::Transparent()
{
	return GetActivationFactory<Colors, IColorsStatics>().Transparent();
}

inline Windows::UI::Color Colors::Turquoise()
{
	return GetActivationFactory<Colors, IColorsStatics>().Turquoise();
}

inline Windows::UI::Color Colors::Violet()
{
	return GetActivationFactory<Colors, IColorsStatics>().Violet();
}

inline Windows::UI::Color Colors::Wheat()
{
	return GetActivationFactory<Colors, IColorsStatics>().Wheat();
}

inline Windows::UI::Color Colors::White()
{
	return GetActivationFactory<Colors, IColorsStatics>().White();
}

inline Windows::UI::Color Colors::WhiteSmoke()
{
	return GetActivationFactory<Colors, IColorsStatics>().WhiteSmoke();
}

inline Windows::UI::Color Colors::Yellow()
{
	return GetActivationFactory<Colors, IColorsStatics>().Yellow();
}

inline Windows::UI::Color Colors::YellowGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().YellowGreen();
}

}}}

namespace winrt { namespace Windows { namespace UI { namespace Core {

inline CoreCursor::CoreCursor(Windows::UI::Core::CoreCursorType const type, unsigned const id) :
	CoreCursor(GetActivationFactory<CoreCursor, ICoreCursorFactory>().CreateCursor(type, id))
{}

inline Windows::UI::Core::CoreWindow CoreWindow::GetForCurrentThread()
{
	return GetActivationFactory<CoreWindow, ICoreWindowStatic>().GetForCurrentThread();
}

inline Windows::UI::Core::CoreWindowResizeManager CoreWindowResizeManager::GetForCurrentView()
{
	return GetActivationFactory<CoreWindowResizeManager, ICoreWindowResizeManagerStatics>().GetForCurrentView();
}

inline CoreWindowDialog::CoreWindowDialog() :
	CoreWindowDialog(ActivateInstance<CoreWindowDialog>())
{}

inline CoreWindowDialog::CoreWindowDialog(StringReference const & title) :
	CoreWindowDialog(GetActivationFactory<CoreWindowDialog, ICoreWindowDialogFactory>().CreateWithTitle(title))
{}

inline CoreWindowFlyout::CoreWindowFlyout(Windows::Foundation::Point const & position) :
	CoreWindowFlyout(GetActivationFactory<CoreWindowFlyout, ICoreWindowFlyoutFactory>().Create(position))
{}

inline CoreWindowFlyout::CoreWindowFlyout(Windows::Foundation::Point const & position, StringReference const & title) :
	CoreWindowFlyout(GetActivationFactory<CoreWindowFlyout, ICoreWindowFlyoutFactory>().CreateWithTitle(position, title))
{}

inline Windows::UI::Core::SystemNavigationManager SystemNavigationManager::GetForCurrentView()
{
	return GetActivationFactory<SystemNavigationManager, ISystemNavigationManagerStatics>().GetForCurrentView();
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input {

inline Windows::UI::Input::EdgeGesture EdgeGesture::GetForCurrentView()
{
	return GetActivationFactory<EdgeGesture, IEdgeGestureStatics>().GetForCurrentView();
}

inline Windows::UI::Input::KeyboardDeliveryInterceptor KeyboardDeliveryInterceptor::GetForCurrentView()
{
	return GetActivationFactory<KeyboardDeliveryInterceptor, IKeyboardDeliveryInterceptorStatics>().GetForCurrentView();
}

inline GestureRecognizer::GestureRecognizer() :
	GestureRecognizer(ActivateInstance<GestureRecognizer>())
{}

inline Windows::UI::Input::PointerPoint PointerPoint::GetCurrentPoint(unsigned const pointerId)
{
	return GetActivationFactory<PointerPoint, IPointerPointStatics>().GetCurrentPoint(pointerId);
}

inline Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> PointerPoint::GetIntermediatePoints(unsigned const pointerId)
{
	return GetActivationFactory<PointerPoint, IPointerPointStatics>().GetIntermediatePoints(pointerId);
}

inline Windows::UI::Input::PointerPoint PointerPoint::GetCurrentPoint(unsigned const pointerId, Windows::UI::Input::IPointerPointTransform const & transform)
{
	return GetActivationFactory<PointerPoint, IPointerPointStatics>().GetCurrentPoint(pointerId, transform);
}

inline Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> PointerPoint::GetIntermediatePoints(unsigned const pointerId, Windows::UI::Input::IPointerPointTransform const & transform)
{
	return GetActivationFactory<PointerPoint, IPointerPointStatics>().GetIntermediatePoints(pointerId, transform);
}

inline Windows::UI::Input::PointerVisualizationSettings PointerVisualizationSettings::GetForCurrentView()
{
	return GetActivationFactory<PointerVisualizationSettings, IPointerVisualizationSettingsStatics>().GetForCurrentView();
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Inking {

inline InkPoint::InkPoint(Windows::Foundation::Point const & position, float const pressure) :
	InkPoint(GetActivationFactory<InkPoint, IInkPointFactory>().CreateInkPoint(position, pressure))
{}

inline InkDrawingAttributes::InkDrawingAttributes() :
	InkDrawingAttributes(ActivateInstance<InkDrawingAttributes>())
{}

inline InkStrokeBuilder::InkStrokeBuilder() :
	InkStrokeBuilder(ActivateInstance<InkStrokeBuilder>())
{}

inline InkStrokeContainer::InkStrokeContainer() :
	InkStrokeContainer(ActivateInstance<InkStrokeContainer>())
{}

inline InkRecognizerContainer::InkRecognizerContainer() :
	InkRecognizerContainer(ActivateInstance<InkRecognizerContainer>())
{}

inline InkManager::InkManager() :
	InkManager(ActivateInstance<InkManager>())
{}

}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Inking { namespace Core {

inline Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource CoreInkIndependentInputSource::Create(Windows::UI::Input::Inking::InkPresenter const & inkPresenter)
{
	return GetActivationFactory<CoreInkIndependentInputSource, ICoreInkIndependentInputSourceStatics>().Create(inkPresenter);
}

}}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Popups {

inline MessageDialog::MessageDialog(StringReference const & content) :
	MessageDialog(GetActivationFactory<MessageDialog, IMessageDialogFactory>().Create(content))
{}

inline MessageDialog::MessageDialog(StringReference const & content, StringReference const & title) :
	MessageDialog(GetActivationFactory<MessageDialog, IMessageDialogFactory>().CreateWithTitle(content, title))
{}

inline UICommand::UICommand() :
	UICommand(ActivateInstance<UICommand>())
{}

inline UICommand::UICommand(StringReference const & label) :
	UICommand(GetActivationFactory<UICommand, IUICommandFactory>().Create(label))
{}

inline UICommand::UICommand(StringReference const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action) :
	UICommand(GetActivationFactory<UICommand, IUICommandFactory>().CreateWithHandler(label, action))
{}

template <typename F> UICommand::UICommand(StringReference const & label, F action) :
	UICommand(GetActivationFactory<UICommand, IUICommandFactory>().CreateWithHandler(label, Windows::UI::Popups::UICommandInvokedHandler(action)))
{}

inline UICommand::UICommand(StringReference const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId) :
	UICommand(GetActivationFactory<UICommand, IUICommandFactory>().CreateWithHandlerAndId(label, action, commandId))
{}

template <typename F> UICommand::UICommand(StringReference const & label, F action, IInspectable const & commandId) :
	UICommand(GetActivationFactory<UICommand, IUICommandFactory>().CreateWithHandlerAndId(label, Windows::UI::Popups::UICommandInvokedHandler(action), commandId))
{}

inline UICommandSeparator::UICommandSeparator() :
	UICommandSeparator(ActivateInstance<UICommandSeparator>())
{}

inline PopupMenu::PopupMenu() :
	PopupMenu(ActivateInstance<PopupMenu>())
{}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace ViewManagement {

inline int ApplicationView::GetApplicationViewIdForWindow(Windows::UI::Core::ICoreWindow const & window)
{
	return GetActivationFactory<ApplicationView, IApplicationViewInteropStatics>().GetApplicationViewIdForWindow(window);
}

inline Windows::UI::ViewManagement::ApplicationView ApplicationView::GetForCurrentView()
{
	return GetActivationFactory<ApplicationView, IApplicationViewStatics2>().GetForCurrentView();
}

inline bool ApplicationView::TerminateAppOnFinalViewClose()
{
	return GetActivationFactory<ApplicationView, IApplicationViewStatics2>().TerminateAppOnFinalViewClose();
}

inline void ApplicationView::TerminateAppOnFinalViewClose(bool const value)
{
	GetActivationFactory<ApplicationView, IApplicationViewStatics2>().TerminateAppOnFinalViewClose(value);
}

inline bool ApplicationView::TryUnsnapToFullscreen()
{
	return GetActivationFactory<ApplicationView, IApplicationViewFullscreenStatics>().TryUnsnapToFullscreen();
}

inline Windows::UI::ViewManagement::ApplicationViewWindowingMode ApplicationView::PreferredLaunchWindowingMode()
{
	return GetActivationFactory<ApplicationView, IApplicationViewStatics3>().PreferredLaunchWindowingMode();
}

inline void ApplicationView::PreferredLaunchWindowingMode(Windows::UI::ViewManagement::ApplicationViewWindowingMode const value)
{
	GetActivationFactory<ApplicationView, IApplicationViewStatics3>().PreferredLaunchWindowingMode(value);
}

inline Windows::Foundation::Size ApplicationView::PreferredLaunchViewSize()
{
	return GetActivationFactory<ApplicationView, IApplicationViewStatics3>().PreferredLaunchViewSize();
}

inline void ApplicationView::PreferredLaunchViewSize(Windows::Foundation::Size const & value)
{
	GetActivationFactory<ApplicationView, IApplicationViewStatics3>().PreferredLaunchViewSize(value);
}

inline Windows::UI::ViewManagement::ApplicationViewState ApplicationView::Value()
{
	return GetActivationFactory<ApplicationView, IApplicationViewStatics>().Value();
}

inline bool ApplicationView::TryUnsnap()
{
	return GetActivationFactory<ApplicationView, IApplicationViewStatics>().TryUnsnap();
}

inline void ApplicationViewSwitcher::DisableSystemViewActivationPolicy()
{
	GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics2>().DisableSystemViewActivationPolicy();
}

inline void ApplicationViewSwitcher::DisableShowingMainViewOnActivation()
{
	GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().DisableShowingMainViewOnActivation();
}

inline Windows::Foundation::IAsyncOperation<bool> ApplicationViewSwitcher::TryShowAsStandaloneAsync(int const viewId)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().TryShowAsStandaloneAsync(viewId);
}

inline Windows::Foundation::IAsyncOperation<bool> ApplicationViewSwitcher::TryShowAsStandaloneAsync(int const viewId, Windows::UI::ViewManagement::ViewSizePreference const sizePreference)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().TryShowAsStandaloneAsync(viewId, sizePreference);
}

inline Windows::Foundation::IAsyncOperation<bool> ApplicationViewSwitcher::TryShowAsStandaloneAsync(int const viewId, Windows::UI::ViewManagement::ViewSizePreference const sizePreference, int const anchorViewId, Windows::UI::ViewManagement::ViewSizePreference const anchorSizePreference)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().TryShowAsStandaloneAsync(viewId, sizePreference, anchorViewId, anchorSizePreference);
}

inline Windows::Foundation::IAsyncAction ApplicationViewSwitcher::SwitchAsync(int const viewId)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().SwitchAsync(viewId);
}

inline Windows::Foundation::IAsyncAction ApplicationViewSwitcher::SwitchAsync(int const toViewId, int const fromViewId)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().SwitchAsync(toViewId, fromViewId);
}

inline Windows::Foundation::IAsyncAction ApplicationViewSwitcher::SwitchAsync(int const toViewId, int const fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions const options)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().SwitchAsync(toViewId, fromViewId, options);
}

inline Windows::Foundation::IAsyncOperation<bool> ApplicationViewSwitcher::PrepareForCustomAnimatedSwitchAsync(int const toViewId, int const fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions const options)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().PrepareForCustomAnimatedSwitchAsync(toViewId, fromViewId, options);
}

inline ApplicationViewTransferContext::ApplicationViewTransferContext() :
	ApplicationViewTransferContext(ActivateInstance<ApplicationViewTransferContext>())
{}

inline String ApplicationViewTransferContext::DataPackageFormatId()
{
	return GetActivationFactory<ApplicationViewTransferContext, IApplicationViewTransferContextStatics>().DataPackageFormatId();
}

inline Windows::UI::ViewManagement::InputPane InputPane::GetForCurrentView()
{
	return GetActivationFactory<InputPane, IInputPaneStatics>().GetForCurrentView();
}

inline Windows::Foundation::IAsyncAction ProjectionManager::StartProjectingAsync(int const projectionViewId, int const anchorViewId, Windows::Devices::Enumeration::DeviceInformation const & displayDeviceInfo)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics2>().StartProjectingAsync(projectionViewId, anchorViewId, displayDeviceInfo);
}

inline Windows::Foundation::IAsyncOperation<bool> ProjectionManager::RequestStartProjectingAsync(int const projectionViewId, int const anchorViewId, Windows::Foundation::Rect const & selection)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics2>().RequestStartProjectingAsync(projectionViewId, anchorViewId, selection);
}

inline Windows::Foundation::IAsyncOperation<bool> ProjectionManager::RequestStartProjectingAsync(int const projectionViewId, int const anchorViewId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const prefferedPlacement)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics2>().RequestStartProjectingAsync(projectionViewId, anchorViewId, selection, prefferedPlacement);
}

inline String ProjectionManager::GetDeviceSelector()
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics2>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncAction ProjectionManager::StartProjectingAsync(int const projectionViewId, int const anchorViewId)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().StartProjectingAsync(projectionViewId, anchorViewId);
}

inline Windows::Foundation::IAsyncAction ProjectionManager::SwapDisplaysForViewsAsync(int const projectionViewId, int const anchorViewId)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().SwapDisplaysForViewsAsync(projectionViewId, anchorViewId);
}

inline Windows::Foundation::IAsyncAction ProjectionManager::StopProjectingAsync(int const projectionViewId, int const anchorViewId)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().StopProjectingAsync(projectionViewId, anchorViewId);
}

inline bool ProjectionManager::ProjectionDisplayAvailable()
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().ProjectionDisplayAvailable();
}

inline long long ProjectionManager::ProjectionDisplayAvailableChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().ProjectionDisplayAvailableChanged(handler);
}

template <typename F> long long ProjectionManager::ProjectionDisplayAvailableChanged(F handler)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().ProjectionDisplayAvailableChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void ProjectionManager::ProjectionDisplayAvailableChanged(long long const token)
{
	GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().ProjectionDisplayAvailableChanged(token);
}

inline Windows::UI::ViewManagement::UIViewSettings UIViewSettings::GetForCurrentView()
{
	return GetActivationFactory<UIViewSettings, IUIViewSettingsStatics>().GetForCurrentView();
}

inline AccessibilitySettings::AccessibilitySettings() :
	AccessibilitySettings(ActivateInstance<AccessibilitySettings>())
{}

inline UISettings::UISettings() :
	UISettings(ActivateInstance<UISettings>())
{}

inline bool ApplicationViewScaling::DisableLayoutScaling()
{
	return GetActivationFactory<ApplicationViewScaling, IApplicationViewScalingStatics>().DisableLayoutScaling();
}

inline bool ApplicationViewScaling::TrySetDisableLayoutScaling(bool const disableLayoutScaling)
{
	return GetActivationFactory<ApplicationViewScaling, IApplicationViewScalingStatics>().TrySetDisableLayoutScaling(disableLayoutScaling);
}

}}}}

namespace winrt { namespace Windows { namespace Web {

inline Windows::Web::WebErrorStatus WebError::GetStatus(int const hresult)
{
	return GetActivationFactory<WebError, IWebErrorStatics>().GetStatus(hresult);
}

}}}

namespace winrt { namespace Windows { namespace Web { namespace Http {

inline HttpRequestMessage::HttpRequestMessage() :
	HttpRequestMessage(ActivateInstance<HttpRequestMessage>())
{}

inline HttpRequestMessage::HttpRequestMessage(Windows::Web::Http::HttpMethod const & method, Windows::Foundation::Uri const & uri) :
	HttpRequestMessage(GetActivationFactory<HttpRequestMessage, IHttpRequestMessageFactory>().Create(method, uri))
{}

inline HttpResponseMessage::HttpResponseMessage() :
	HttpResponseMessage(ActivateInstance<HttpResponseMessage>())
{}

inline HttpResponseMessage::HttpResponseMessage(Windows::Web::Http::HttpStatusCode const statusCode) :
	HttpResponseMessage(GetActivationFactory<HttpResponseMessage, IHttpResponseMessageFactory>().Create(statusCode))
{}

inline HttpMethod::HttpMethod(StringReference const & method) :
	HttpMethod(GetActivationFactory<HttpMethod, IHttpMethodFactory>().Create(method))
{}

inline Windows::Web::Http::HttpMethod HttpMethod::Delete()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Delete();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Get()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Get();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Head()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Head();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Options()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Options();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Patch()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Patch();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Post()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Post();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Put()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Put();
}

inline HttpClient::HttpClient() :
	HttpClient(ActivateInstance<HttpClient>())
{}

inline HttpClient::HttpClient(Windows::Web::Http::Filters::IHttpFilter const & filter) :
	HttpClient(GetActivationFactory<HttpClient, IHttpClientFactory>().Create(filter))
{}

inline HttpCookie::HttpCookie(StringReference const & name, StringReference const & domain, StringReference const & path) :
	HttpCookie(GetActivationFactory<HttpCookie, IHttpCookieFactory>().Create(name, domain, path))
{}

inline HttpStringContent::HttpStringContent(StringReference const & content) :
	HttpStringContent(GetActivationFactory<HttpStringContent, IHttpStringContentFactory>().CreateFromString(content))
{}

inline HttpStringContent::HttpStringContent(StringReference const & content, Windows::Storage::Streams::UnicodeEncoding const encoding) :
	HttpStringContent(GetActivationFactory<HttpStringContent, IHttpStringContentFactory>().CreateFromStringWithEncoding(content, encoding))
{}

inline HttpStringContent::HttpStringContent(StringReference const & content, Windows::Storage::Streams::UnicodeEncoding const encoding, StringReference const & mediaType) :
	HttpStringContent(GetActivationFactory<HttpStringContent, IHttpStringContentFactory>().CreateFromStringWithEncodingAndMediaType(content, encoding, mediaType))
{}

inline HttpBufferContent::HttpBufferContent(Windows::Storage::Streams::IBuffer const & content) :
	HttpBufferContent(GetActivationFactory<HttpBufferContent, IHttpBufferContentFactory>().CreateFromBuffer(content))
{}

inline HttpBufferContent::HttpBufferContent(Windows::Storage::Streams::IBuffer const & content, unsigned const offset, unsigned const count) :
	HttpBufferContent(GetActivationFactory<HttpBufferContent, IHttpBufferContentFactory>().CreateFromBufferWithOffset(content, offset, count))
{}

inline HttpStreamContent::HttpStreamContent(Windows::Storage::Streams::IInputStream const & content) :
	HttpStreamContent(GetActivationFactory<HttpStreamContent, IHttpStreamContentFactory>().CreateFromInputStream(content))
{}

inline HttpFormUrlEncodedContent::HttpFormUrlEncodedContent(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & content) :
	HttpFormUrlEncodedContent(GetActivationFactory<HttpFormUrlEncodedContent, IHttpFormUrlEncodedContentFactory>().Create(content))
{}

inline HttpMultipartContent::HttpMultipartContent() :
	HttpMultipartContent(ActivateInstance<HttpMultipartContent>())
{}

inline HttpMultipartContent::HttpMultipartContent(StringReference const & subtype) :
	HttpMultipartContent(GetActivationFactory<HttpMultipartContent, IHttpMultipartContentFactory>().CreateWithSubtype(subtype))
{}

inline HttpMultipartContent::HttpMultipartContent(StringReference const & subtype, StringReference const & boundary) :
	HttpMultipartContent(GetActivationFactory<HttpMultipartContent, IHttpMultipartContentFactory>().CreateWithSubtypeAndBoundary(subtype, boundary))
{}

inline HttpMultipartFormDataContent::HttpMultipartFormDataContent() :
	HttpMultipartFormDataContent(ActivateInstance<HttpMultipartFormDataContent>())
{}

inline HttpMultipartFormDataContent::HttpMultipartFormDataContent(StringReference const & boundary) :
	HttpMultipartFormDataContent(GetActivationFactory<HttpMultipartFormDataContent, IHttpMultipartFormDataContentFactory>().CreateWithBoundary(boundary))
{}

}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http { namespace Filters {

inline HttpBaseProtocolFilter::HttpBaseProtocolFilter() :
	HttpBaseProtocolFilter(ActivateInstance<HttpBaseProtocolFilter>())
{}

}}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http { namespace Headers {

inline HttpContentHeaderCollection::HttpContentHeaderCollection() :
	HttpContentHeaderCollection(ActivateInstance<HttpContentHeaderCollection>())
{}

inline HttpContentDispositionHeaderValue::HttpContentDispositionHeaderValue(StringReference const & dispositionType) :
	HttpContentDispositionHeaderValue(GetActivationFactory<HttpContentDispositionHeaderValue, IHttpContentDispositionHeaderValueFactory>().Create(dispositionType))
{}

inline Windows::Web::Http::Headers::HttpContentDispositionHeaderValue HttpContentDispositionHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpContentDispositionHeaderValue, IHttpContentDispositionHeaderValueStatics>().Parse(input);
}

inline bool HttpContentDispositionHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue)
{
	return GetActivationFactory<HttpContentDispositionHeaderValue, IHttpContentDispositionHeaderValueStatics>().TryParse(input, contentDispositionHeaderValue);
}

inline HttpContentRangeHeaderValue::HttpContentRangeHeaderValue(unsigned long long const length) :
	HttpContentRangeHeaderValue(GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueFactory>().CreateFromLength(length))
{}

inline HttpContentRangeHeaderValue::HttpContentRangeHeaderValue(unsigned long long const from, unsigned long long const to) :
	HttpContentRangeHeaderValue(GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueFactory>().CreateFromRange(from, to))
{}

inline HttpContentRangeHeaderValue::HttpContentRangeHeaderValue(unsigned long long const from, unsigned long long const to, unsigned long long const length) :
	HttpContentRangeHeaderValue(GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueFactory>().CreateFromRangeWithLength(from, to, length))
{}

inline Windows::Web::Http::Headers::HttpContentRangeHeaderValue HttpContentRangeHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueStatics>().Parse(input);
}

inline bool HttpContentRangeHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue)
{
	return GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueStatics>().TryParse(input, contentRangeHeaderValue);
}

inline HttpMediaTypeHeaderValue::HttpMediaTypeHeaderValue(StringReference const & mediaType) :
	HttpMediaTypeHeaderValue(GetActivationFactory<HttpMediaTypeHeaderValue, IHttpMediaTypeHeaderValueFactory>().Create(mediaType))
{}

inline Windows::Web::Http::Headers::HttpMediaTypeHeaderValue HttpMediaTypeHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpMediaTypeHeaderValue, IHttpMediaTypeHeaderValueStatics>().Parse(input);
}

inline bool HttpMediaTypeHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue)
{
	return GetActivationFactory<HttpMediaTypeHeaderValue, IHttpMediaTypeHeaderValueStatics>().TryParse(input, mediaTypeHeaderValue);
}

inline HttpCredentialsHeaderValue::HttpCredentialsHeaderValue(StringReference const & scheme) :
	HttpCredentialsHeaderValue(GetActivationFactory<HttpCredentialsHeaderValue, IHttpCredentialsHeaderValueFactory>().CreateFromScheme(scheme))
{}

inline HttpCredentialsHeaderValue::HttpCredentialsHeaderValue(StringReference const & scheme, StringReference const & token) :
	HttpCredentialsHeaderValue(GetActivationFactory<HttpCredentialsHeaderValue, IHttpCredentialsHeaderValueFactory>().CreateFromSchemeWithToken(scheme, token))
{}

inline Windows::Web::Http::Headers::HttpCredentialsHeaderValue HttpCredentialsHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpCredentialsHeaderValue, IHttpCredentialsHeaderValueStatics>().Parse(input);
}

inline bool HttpCredentialsHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue)
{
	return GetActivationFactory<HttpCredentialsHeaderValue, IHttpCredentialsHeaderValueStatics>().TryParse(input, credentialsHeaderValue);
}

inline Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue HttpDateOrDeltaHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpDateOrDeltaHeaderValue, IHttpDateOrDeltaHeaderValueStatics>().Parse(input);
}

inline bool HttpDateOrDeltaHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue)
{
	return GetActivationFactory<HttpDateOrDeltaHeaderValue, IHttpDateOrDeltaHeaderValueStatics>().TryParse(input, dateOrDeltaHeaderValue);
}

inline HttpNameValueHeaderValue::HttpNameValueHeaderValue(StringReference const & name) :
	HttpNameValueHeaderValue(GetActivationFactory<HttpNameValueHeaderValue, IHttpNameValueHeaderValueFactory>().CreateFromName(name))
{}

inline HttpNameValueHeaderValue::HttpNameValueHeaderValue(StringReference const & name, StringReference const & value) :
	HttpNameValueHeaderValue(GetActivationFactory<HttpNameValueHeaderValue, IHttpNameValueHeaderValueFactory>().CreateFromNameWithValue(name, value))
{}

inline Windows::Web::Http::Headers::HttpNameValueHeaderValue HttpNameValueHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpNameValueHeaderValue, IHttpNameValueHeaderValueStatics>().Parse(input);
}

inline bool HttpNameValueHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue)
{
	return GetActivationFactory<HttpNameValueHeaderValue, IHttpNameValueHeaderValueStatics>().TryParse(input, nameValueHeaderValue);
}

inline HttpChallengeHeaderValue::HttpChallengeHeaderValue(StringReference const & scheme) :
	HttpChallengeHeaderValue(GetActivationFactory<HttpChallengeHeaderValue, IHttpChallengeHeaderValueFactory>().CreateFromScheme(scheme))
{}

inline HttpChallengeHeaderValue::HttpChallengeHeaderValue(StringReference const & scheme, StringReference const & token) :
	HttpChallengeHeaderValue(GetActivationFactory<HttpChallengeHeaderValue, IHttpChallengeHeaderValueFactory>().CreateFromSchemeWithToken(scheme, token))
{}

inline Windows::Web::Http::Headers::HttpChallengeHeaderValue HttpChallengeHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpChallengeHeaderValue, IHttpChallengeHeaderValueStatics>().Parse(input);
}

inline bool HttpChallengeHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue)
{
	return GetActivationFactory<HttpChallengeHeaderValue, IHttpChallengeHeaderValueStatics>().TryParse(input, challengeHeaderValue);
}

inline HttpConnectionOptionHeaderValue::HttpConnectionOptionHeaderValue(StringReference const & token) :
	HttpConnectionOptionHeaderValue(GetActivationFactory<HttpConnectionOptionHeaderValue, IHttpConnectionOptionHeaderValueFactory>().Create(token))
{}

inline Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue HttpConnectionOptionHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpConnectionOptionHeaderValue, IHttpConnectionOptionHeaderValueStatics>().Parse(input);
}

inline bool HttpConnectionOptionHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue)
{
	return GetActivationFactory<HttpConnectionOptionHeaderValue, IHttpConnectionOptionHeaderValueStatics>().TryParse(input, connectionOptionHeaderValue);
}

inline HttpContentCodingHeaderValue::HttpContentCodingHeaderValue(StringReference const & contentCoding) :
	HttpContentCodingHeaderValue(GetActivationFactory<HttpContentCodingHeaderValue, IHttpContentCodingHeaderValueFactory>().Create(contentCoding))
{}

inline Windows::Web::Http::Headers::HttpContentCodingHeaderValue HttpContentCodingHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpContentCodingHeaderValue, IHttpContentCodingHeaderValueStatics>().Parse(input);
}

inline bool HttpContentCodingHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue)
{
	return GetActivationFactory<HttpContentCodingHeaderValue, IHttpContentCodingHeaderValueStatics>().TryParse(input, contentCodingHeaderValue);
}

inline HttpCookiePairHeaderValue::HttpCookiePairHeaderValue(StringReference const & name) :
	HttpCookiePairHeaderValue(GetActivationFactory<HttpCookiePairHeaderValue, IHttpCookiePairHeaderValueFactory>().CreateFromName(name))
{}

inline HttpCookiePairHeaderValue::HttpCookiePairHeaderValue(StringReference const & name, StringReference const & value) :
	HttpCookiePairHeaderValue(GetActivationFactory<HttpCookiePairHeaderValue, IHttpCookiePairHeaderValueFactory>().CreateFromNameWithValue(name, value))
{}

inline Windows::Web::Http::Headers::HttpCookiePairHeaderValue HttpCookiePairHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpCookiePairHeaderValue, IHttpCookiePairHeaderValueStatics>().Parse(input);
}

inline bool HttpCookiePairHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue)
{
	return GetActivationFactory<HttpCookiePairHeaderValue, IHttpCookiePairHeaderValueStatics>().TryParse(input, cookiePairHeaderValue);
}

inline HttpExpectationHeaderValue::HttpExpectationHeaderValue(StringReference const & name) :
	HttpExpectationHeaderValue(GetActivationFactory<HttpExpectationHeaderValue, IHttpExpectationHeaderValueFactory>().CreateFromName(name))
{}

inline HttpExpectationHeaderValue::HttpExpectationHeaderValue(StringReference const & name, StringReference const & value) :
	HttpExpectationHeaderValue(GetActivationFactory<HttpExpectationHeaderValue, IHttpExpectationHeaderValueFactory>().CreateFromNameWithValue(name, value))
{}

inline Windows::Web::Http::Headers::HttpExpectationHeaderValue HttpExpectationHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpExpectationHeaderValue, IHttpExpectationHeaderValueStatics>().Parse(input);
}

inline bool HttpExpectationHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue)
{
	return GetActivationFactory<HttpExpectationHeaderValue, IHttpExpectationHeaderValueStatics>().TryParse(input, expectationHeaderValue);
}

inline HttpLanguageRangeWithQualityHeaderValue::HttpLanguageRangeWithQualityHeaderValue(StringReference const & languageRange) :
	HttpLanguageRangeWithQualityHeaderValue(GetActivationFactory<HttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValueFactory>().CreateFromLanguageRange(languageRange))
{}

inline HttpLanguageRangeWithQualityHeaderValue::HttpLanguageRangeWithQualityHeaderValue(StringReference const & languageRange, double const quality) :
	HttpLanguageRangeWithQualityHeaderValue(GetActivationFactory<HttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValueFactory>().CreateFromLanguageRangeWithQuality(languageRange, quality))
{}

inline Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue HttpLanguageRangeWithQualityHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValueStatics>().Parse(input);
}

inline bool HttpLanguageRangeWithQualityHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue)
{
	return GetActivationFactory<HttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValueStatics>().TryParse(input, languageRangeWithQualityHeaderValue);
}

inline HttpMediaTypeWithQualityHeaderValue::HttpMediaTypeWithQualityHeaderValue(StringReference const & mediaType) :
	HttpMediaTypeWithQualityHeaderValue(GetActivationFactory<HttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValueFactory>().CreateFromMediaType(mediaType))
{}

inline HttpMediaTypeWithQualityHeaderValue::HttpMediaTypeWithQualityHeaderValue(StringReference const & mediaType, double const quality) :
	HttpMediaTypeWithQualityHeaderValue(GetActivationFactory<HttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValueFactory>().CreateFromMediaTypeWithQuality(mediaType, quality))
{}

inline Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue HttpMediaTypeWithQualityHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValueStatics>().Parse(input);
}

inline bool HttpMediaTypeWithQualityHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue)
{
	return GetActivationFactory<HttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValueStatics>().TryParse(input, mediaTypeWithQualityHeaderValue);
}

inline HttpProductHeaderValue::HttpProductHeaderValue(StringReference const & productName) :
	HttpProductHeaderValue(GetActivationFactory<HttpProductHeaderValue, IHttpProductHeaderValueFactory>().CreateFromName(productName))
{}

inline HttpProductHeaderValue::HttpProductHeaderValue(StringReference const & productName, StringReference const & productVersion) :
	HttpProductHeaderValue(GetActivationFactory<HttpProductHeaderValue, IHttpProductHeaderValueFactory>().CreateFromNameWithVersion(productName, productVersion))
{}

inline Windows::Web::Http::Headers::HttpProductHeaderValue HttpProductHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpProductHeaderValue, IHttpProductHeaderValueStatics>().Parse(input);
}

inline bool HttpProductHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue)
{
	return GetActivationFactory<HttpProductHeaderValue, IHttpProductHeaderValueStatics>().TryParse(input, productHeaderValue);
}

inline HttpProductInfoHeaderValue::HttpProductInfoHeaderValue(StringReference const & productComment) :
	HttpProductInfoHeaderValue(GetActivationFactory<HttpProductInfoHeaderValue, IHttpProductInfoHeaderValueFactory>().CreateFromComment(productComment))
{}

inline HttpProductInfoHeaderValue::HttpProductInfoHeaderValue(StringReference const & productName, StringReference const & productVersion) :
	HttpProductInfoHeaderValue(GetActivationFactory<HttpProductInfoHeaderValue, IHttpProductInfoHeaderValueFactory>().CreateFromNameWithVersion(productName, productVersion))
{}

inline Windows::Web::Http::Headers::HttpProductInfoHeaderValue HttpProductInfoHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpProductInfoHeaderValue, IHttpProductInfoHeaderValueStatics>().Parse(input);
}

inline bool HttpProductInfoHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue)
{
	return GetActivationFactory<HttpProductInfoHeaderValue, IHttpProductInfoHeaderValueStatics>().TryParse(input, productInfoHeaderValue);
}

inline HttpContentCodingWithQualityHeaderValue::HttpContentCodingWithQualityHeaderValue(StringReference const & contentCoding) :
	HttpContentCodingWithQualityHeaderValue(GetActivationFactory<HttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValueFactory>().CreateFromValue(contentCoding))
{}

inline HttpContentCodingWithQualityHeaderValue::HttpContentCodingWithQualityHeaderValue(StringReference const & contentCoding, double const quality) :
	HttpContentCodingWithQualityHeaderValue(GetActivationFactory<HttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValueFactory>().CreateFromValueWithQuality(contentCoding, quality))
{}

inline Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue HttpContentCodingWithQualityHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValueStatics>().Parse(input);
}

inline bool HttpContentCodingWithQualityHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue)
{
	return GetActivationFactory<HttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValueStatics>().TryParse(input, contentCodingWithQualityHeaderValue);
}

inline HttpTransferCodingHeaderValue::HttpTransferCodingHeaderValue(StringReference const & input) :
	HttpTransferCodingHeaderValue(GetActivationFactory<HttpTransferCodingHeaderValue, IHttpTransferCodingHeaderValueFactory>().Create(input))
{}

inline Windows::Web::Http::Headers::HttpTransferCodingHeaderValue HttpTransferCodingHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpTransferCodingHeaderValue, IHttpTransferCodingHeaderValueStatics>().Parse(input);
}

inline bool HttpTransferCodingHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue)
{
	return GetActivationFactory<HttpTransferCodingHeaderValue, IHttpTransferCodingHeaderValueStatics>().TryParse(input, transferCodingHeaderValue);
}

}}}}}
