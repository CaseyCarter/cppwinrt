#include <sdkddkver.h>

import "oaidl.idl";
import "ocidl.idl";

import "windows.foundation.idl";

namespace Modern.Test
{

[contract(Windows.Foundation.UniversalApiContract, 1)]
typedef struct Struct1
{
    UINT32 BytesRetrieved;
} Struct1;

runtimeclass Bar1;

//
// The below tests that we properly parse all the inner interfaces of a generic interface
// Inner ones should come first
//

[uuid(1C6CD845-C9E7-45F5-947D-9CFADD47A1B1)]
[contract(Windows.Foundation.UniversalApiContract, 1)]
interface IFoo2 : IInspectable
{
    HRESULT Do(Windows.Foundation.Collections.IIterator<Windows.Foundation.Collections.IIterator<Bar1>*>* col);
}

//
// The following test is about generating the generic interfaces in the right order needed
// for the projection where the inner most needs to come first.
// This specific case is for when
// 1. a generic interface has a parameter that is a runtimeclass AND 
// 2. the runtimeclass default interface is a generic interface
// For that case, the runtimeclass generic interface should come first, even when in the metadata is comes second.
//
// The trick in this case to force the out of order is to use forward declares.
// This is done in a nested way to make sure that we handle that case.
//
runtimeclass Bar2;

[activatable(Windows.Foundation.UniversalApiContract, 1)]
[contract(Windows.Foundation.UniversalApiContract, 1)]
runtimeclass Bar1
{
    [default] interface Windows.Foundation.Collections.IIterator<Bar2>;
}

runtimeclass Bar3;

[contract(Windows.Foundation.UniversalApiContract, 1)]
runtimeclass Bar2
{
    [default] interface Windows.Foundation.Collections.IIterator<Bar3>;
}

[contract(Windows.Foundation.UniversalApiContract, 1)]
runtimeclass Bar3
{
    [default] interface Windows.Foundation.Collections.IIterator<Struct1>;
}

}