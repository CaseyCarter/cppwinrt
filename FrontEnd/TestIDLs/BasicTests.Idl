import "Windows.Foundation.Idl";

namespace SimpleInterface
{
    [contractversion(1)]
    apicontract TestContract {}


    //  Caroline is marked for MBM,
    //  ConeyIslandBaby is not.

    ////[metadata_marshal]
    [contract(TestContract, 1)]
    [uuid(c894475e-487c-47be-ac5e-1c11b87d06fd)]
    interface Caroline : IInspectable
    {
        HRESULT TestMethod();
    }

    [contract(TestContract, 1)]
    [uuid(6d43309e-0af2-4a41-b4ba-06bead9fd926)]
    interface ConeyIslandBaby : IInspectable
    {
        HRESULT TestMethod();
    }
}

namespace SimpleRuntimeClass
{
    [contractversion(1)]
    apicontract TestContract {}


    [contract(TestContract, 1)]
    [uuid(b727321d-787a-4fd9-9893-10e9fa825f99)]
    interface FromTheFirstHello : IInspectable
    {
        HRESULT TestMethod();
    }

    runtimeclass ConeyIslandBaby;

    [contract(TestContract, 1)]
    [uuid(a72aa165-82f7-468f-9006-74b34402ab06)]
    [exclusiveto(ConeyIslandBaby)]
    interface IConeyIslandBabyFactory : IInspectable
    {
        HRESULT CreateConeyIsland([in] DWORD countOfBabies, [out, retval]ConeyIslandBaby **newBaby);
    }


    ////[metadata_marshal]
    [contract(TestContract, 1)]
    [activatable(IConeyIslandBabyFactory, TestContract, 1)]
    runtimeclass ConeyIslandBaby
    {
        [default]interface FromTheFirstHello;
    }
}

namespace MultipleRuntimeClass
{
    [contractversion(1)]
    apicontract TestContract {}


    [contract(TestContract, 1)]
    [uuid(7ca6fa47-a028-4362-8aff-601e174e385f)]
    interface FromTheFirstHello : IInspectable
    {
        HRESULT TestMethod();
    }

    [contract(TestContract, 1)]
    [uuid(8404179c-c0b2-43ac-af4d-15376a089649)]
    interface LidaRose : IInspectable
    {
        HRESULT DreamOfMe();
    }

    ////[metadata_marshal]
    [contract(TestContract, 1)]
    runtimeclass ConeyIslandBaby
    {
        [default]interface FromTheFirstHello;
        interface LidaRose;
    }
}

namespace RuntimeClassWithSimplePInterface
{
    [contractversion(1)]
    apicontract TestContract {}


    [contract(TestContract, 1)]
    typedef enum SongType
    {
        Ballad,
        UpTune,
        Rhythm
    } SongType;

    [contract(TestContract, 1)]
    [flags]
    typedef enum Tempo
    {
        CutTime = 0x00001,
        Presto = 0x0002,
        Largo = 0x0004,
    } Tempo;

    [contract(TestContract, 1)]
    typedef struct SongStructure
    {
        HSTRING Intro;
        INT Verse;
        Windows.Foundation.IReference<Tempo> *Refrain;
        float Chorus;
        SongType Tag;
    } SongStructure;


    [contract(TestContract, 1)]
    [uuid(7dda47c5-d758-47bb-9ae4-ce03b61203a8)]
    interface FromTheFirstHello : IInspectable
    {
        HRESULT TestMethod();
    }

    [contract(TestContract, 1)]
    [uuid(65f7b223-bd65-42cc-8708-b660bcb18092)]
    interface LidaRose : IInspectable
    {
        HRESULT DreamOfMe();
    }

    ////[metadata_marshal]
    [contract(TestContract, 1)]
    runtimeclass ConeyIslandBaby
    {
        [default]interface FromTheFirstHello;
        interface IVector<SongType>;
    }

    [contract(TestContract, 1)]
    ////[metadata_marshal]
    runtimeclass DarknessOnTheDelta
    {
        interface FromTheFirstHello;
        [default]interface IVector<SongType>;
    }

    ////[metadata_marshal]
    [contract(TestContract, 1)]
    runtimeclass Caroline
    {
        interface FromTheFirstHello;
        [default]interface IVector<DarknessOnTheDelta>;
    }


    //  Even though MyWildIrishRose is marked as metadata_marshal, it only references system types
    //  so it will not be included in the discovered type list.
    ////[metadata_marshal]
    [contract(TestContract, 1)]
    runtimeclass MyWildIrishRose
    {
        interface IIterator<HSTRING>;
    }

    ////[metadata_marshal]
    [contract(TestContract, 1)]
    runtimeclass LetMeCallYouSweetheart
    {
        interface IVector<SongStructure>;
    }


    declare
    {
        interface Windows.Foundation.EventHandler<LidaRose>;
        interface Windows.Foundation.TypedEventHandler<Tempo, SongType>;
        interface IVector<Windows.Foundation.TypedEventHandler<Tempo, SongType>*>;
        interface IVector<ConeyIslandBaby>;
        interface IIterable<SongStructure>;
        interface IVector<Caroline>;  // A vector of runtime classes with pinterface defaults whose default interface has a pinterface default.
    }
}

namespace InterfaceMethodInspections
{
    [contractversion(1)]
    apicontract TestContract {}


    [contract(TestContract, 1)]
    [flags]
    typedef enum Tempo2
    {
        CutTime = 0x00001,
        Presto = 0x0002,
        Largo = 0x0004,
    } Tempo2;


    [contract(TestContract, 1)]
    typedef enum SongType2
    {
        Ballad,
        UpTune,
        Rhythm
    } SongType2;

    [contract(TestContract, 1)]
    typedef struct SongStructure2
    {
        HSTRING Intro;
        INT Verse;
        Windows.Foundation.IReference<Tempo2> *Refrain;
        float Chorus;
        SongType2 Tag;
    } SongStructure2;

    [contract(TestContract, 1)]
    [uuid(c47b05ba-ff7d-4f66-b6fc-c0997a67296d)]
    //[metadata_marshal]
    interface ICaroline : IInspectable
    {
        HRESULT Method1(HSTRING param1);
    }   

    //  This interface won't be included in the output set because it is not directly referenced by
    //  any RC types (it is indirectly referenced by ISweetAndLovely.
    [contract(TestContract, 1)]
    [uuid(b76b41d3-decf-4b53-80ad-3889e59ce3ed)]
    //[metadata_marshal]
    interface IDownOurWay : IInspectable
    {
    }   

    [contract(TestContract, 1)]
    [uuid(3311b42f-0050-4fee-9627-1705a72b31eb)]
    interface ISweetAndLovely : IInspectable
    {
    HRESULT TestMethod1([in]IDownOurWay *downOurWay);
    HRESULT TestMethod2([in]SongStructure2 songStructure);
    }

    [contract(TestContract, 1)]
    //[metadata_marshal]
    runtimeclass SweetAndLovely
    {
        [default]interface ISweetAndLovely;
    }


    [contract(TestContract, 1)]
    //[metadata_marshal]
    [uuid(cdc09d1b-33dc-4ea3-9ac0-5a4f83fa5226)]
    interface IAfterYouveGone : IInspectable
    {
        HRESULT TestMap(int param1, [in] SweetAndLovely *sal, [out, retval]Windows.Foundation.Collections.IMap<SongType2, SongStructure2> **returnValue);
        HRESULT TestMethod1(int param1, [in] ICaroline *caroline);
        HRESULT TestMethod2(int param1, [in] SweetAndLovely *sal);
        HRESULT TestAsyncMethod(int param1, [in] SweetAndLovely *sal, [out, retval]Windows.Foundation.IAsyncOperationWithProgress<IDownOurWay *, SongStructure2> **returnValue);
//        HRESULT TestMap(int param1, [in] SweetAndLovely *sal, [out, retval]Windows.Foundation.Collections.IMap<SongType2, SongStructure2> **returnValue);
    }

}