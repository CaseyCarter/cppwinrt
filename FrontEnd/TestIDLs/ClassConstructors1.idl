#include <sdkddkver.h>

import "oaidl.idl";
import "ocidl.idl";

import "windows.foundation.idl";

/*
create table ClassConstructors
(
	ClassId,
	Interface,
	Composable,
	Protected
);
*/

namespace Modern.Test
{

// First, use the Activatable attribute to have a constructor that is not Composable neither protected (which only applies to Composable ones)

[uuid(35392C38-CDED-4D4C-9637-05F15C1C9406)]
[contract(Windows.Foundation.UniversalApiContract, 1)]
interface IFoo1 : IInspectable
{
    HRESULT Do();
}

[activatable(Windows.Foundation.UniversalApiContract, 1)]
[contract(Windows.Foundation.UniversalApiContract, 1)]
runtimeclass Bar1
{
    [default] interface IFoo1;
}

runtimeclass Bar2;

[uuid(9C6CD845-C9E7-45F5-947D-9CFADD47A1B1)]
[contract(Windows.Foundation.UniversalApiContract, 1)]
interface IFoo2Factory : IInspectable
{
    HRESULT Create([in] HSTRING name, [out, retval] Bar2** instance);
}

[activatable(IFoo2Factory, Windows.Foundation.UniversalApiContract, 1)]
[contract(Windows.Foundation.UniversalApiContract, 1)]
runtimeclass Bar2
{
    [default] interface IFoo1;
}

// Now the composable cases

runtimeclass Bar3;
runtimeclass Bar4;

[uuid(EEB85F0F-B4D5-4B9B-A799-8D4C2F25876B)]
[exclusiveto(Bar3)]
[contract(Windows.Foundation.UniversalApiContract, 1)]
interface IFoo3 : IInspectable
{
    HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out, retval] Bar3** instance);
}

[uuid(D59225A2-020B-42A7-8FE4-A59D123B9A35)]
[exclusiveto(Bar4)]
[contract(Windows.Foundation.UniversalApiContract, 1)]
interface IFoo4 : IInspectable
{
    HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out, retval] Bar4** instance);
}

[marshaling_behavior(agile)] // needed to get composable
[threading(both)] // needed to get composable
[composable(IFoo3, public, Windows.Foundation.UniversalApiContract, 1)]
[contract(Windows.Foundation.UniversalApiContract, 1)]
runtimeclass Bar3
{
    [default] interface IFoo1;
}

[marshaling_behavior(agile)] // needed to get composable
[threading(both)] // needed to get composable
[composable(IFoo4, protected, Windows.Foundation.UniversalApiContract, 1)]
[contract(Windows.Foundation.UniversalApiContract, 1)]
runtimeclass Bar4
{
    [default] interface IFoo1;
}

}