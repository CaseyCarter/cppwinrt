// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.170906.1

#pragma once

#include "module.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/Windows.Foundation.h"

namespace winrt::Windows::Foundation::implementation {

template <typename D, typename ... I>
struct Uri_base : impl::module_lock, implements<D, Windows::Foundation::IUriRuntimeClass, Windows::Foundation::IStringable, Windows::Foundation::IUriRuntimeClassWithAbsoluteCanonicalUri, I ...>
{
    using class_type = Windows::Foundation::Uri;

    operator class_type() const noexcept
    {
        class_type result{ nullptr };
        attach_abi(result, detach_abi(static_cast<typename D::first_interface>(*this)));
        return result;
    }

    hstring GetRuntimeClassName() const
    {
        return L"Windows.Foundation.Uri";
    }
};

}

namespace winrt::Windows::Foundation::factory_implementation {

template <typename D, typename T, typename ... I>
struct UriT : impl::module_lock, implements<D, Windows::Foundation::IActivationFactory, Windows::Foundation::IUriEscapeStatics, Windows::Foundation::IUriRuntimeClassFactory, I ...>
{
    hstring GetRuntimeClassName() const
    {
        return L"Windows.Foundation.Uri";
    }

    Windows::Foundation::IInspectable ActivateInstance() const
    {
        throw hresult_not_implemented();
    }

    Windows::Foundation::IUriRuntimeClass CreateUri(hstring const& uri)
    {
        return make<T>(uri);
    }

    Windows::Foundation::IUriRuntimeClass CreateWithRelativeUri(hstring const& baseUri, hstring const& relativeUri)
    {
        return make<T>(baseUri, relativeUri);
    }

    hstring UnescapeComponent(hstring const& toUnescape)
    {
        return T::UnescapeComponent(toUnescape);
    }

    hstring EscapeComponent(hstring const& toEscape)
    {
        return T::EscapeComponent(toEscape);
    }
};

}

#if defined(WINRT_FORCE_INCLUDE_URI_XAML_G_H) || __has_include("Windows.Foundation.Uri.xaml.g.h")

#include "Windows.Foundation.Uri.xaml.g.h"

#else

namespace winrt::Windows::Foundation::implementation
{
    template <typename D, typename ... I>
    using UriT = Uri_base<D, I ...>;
}

#endif
