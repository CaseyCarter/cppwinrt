// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.170906.1

#pragma once

#include "module.h"
#include "winrt/Complex.Authoring.Composability.Closed.h"
#include "Composability.Closed.Base.h"

namespace winrt::Complex::Authoring::Composability::Closed::implementation {

template <typename D, typename ... I>
struct Derived_base : implements<D, Complex::Authoring::Composability::Closed::implementation::Base, Complex::Authoring::Composability::Closed::IDerived, I ...>
{
    using class_type = Complex::Authoring::Composability::Closed::Derived;

    operator class_type() const noexcept
    {
        class_type result{ nullptr };
        attach_abi(result, detach_abi(static_cast<typename D::first_interface>(*this)));
        return result;
    }

    hstring GetRuntimeClassName() const
    {
        return L"Complex.Authoring.Composability.Closed.Derived";
    }
};

}

#if defined(WINRT_FORCE_INCLUDE_DERIVED_XAML_G_H) || __has_include("Composability.Closed.Derived.xaml.g.h")

#include "Composability.Closed.Derived.xaml.g.h"

#else

namespace winrt::Complex::Authoring::Composability::Closed::implementation
{
    template <typename D, typename ... I>
    using DerivedT = Derived_base<D, I ...>;
}

#endif
