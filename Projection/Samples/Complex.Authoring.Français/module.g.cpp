// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.171215.3

#include "pch.h"
#include "module.g.h"

#ifndef WINRT_SUPPRESS_MODULE_EXPORTS

#include "Language.h"
#include "Simple.h"
#include "Static.h"
#include "Structs.h"
#include "Composability.Open.Base.h"
#include "Composability.Open.Derived.h"
#include "Factory.Simple.h"
#include "Factory.SimpleFactory.h"
#include "Factory.Static.h"
#include "Factory.StaticFactory.h"
#include "Nested.Simple.h"
#include "Windows.Foundation.Uri.h"


HRESULT __stdcall WINRT_CanUnloadNow()
{
#ifdef _WRL_MODULE_H_
    if (!::Microsoft::WRL::Module<::Microsoft::WRL::InProc>::GetModule().Terminate())
    {
        return S_FALSE;
    }
#endif

    if (winrt::get_module_lock())
    {
        return S_FALSE;
    }

    winrt::clear_factory_cache();
    return S_OK;
}

HRESULT __stdcall WINRT_GetActivationFactory(HSTRING classId, void** factory)
{
    try
    {
        *factory = nullptr;
        wchar_t const* const name = WindowsGetStringRawBuffer(classId, nullptr);

        if (0 == wcscmp(name, L"Complex.Authoring.Language"))
        {
            *factory = winrt::detach_abi(winrt::make<winrt::Complex::Authoring::factory_implementation::Language>());
            return S_OK;
        }

        if (0 == wcscmp(name, L"Complex.Authoring.Simple"))
        {
            *factory = winrt::detach_abi(winrt::make<winrt::Complex::Authoring::factory_implementation::Simple>());
            return S_OK;
        }

        if (0 == wcscmp(name, L"Complex.Authoring.Static"))
        {
            *factory = winrt::detach_abi(winrt::make<winrt::Complex::Authoring::factory_implementation::Static>());
            return S_OK;
        }

        if (0 == wcscmp(name, L"Complex.Authoring.Structs"))
        {
            *factory = winrt::detach_abi(winrt::make<winrt::Complex::Authoring::factory_implementation::Structs>());
            return S_OK;
        }

        if (0 == wcscmp(name, L"Complex.Authoring.Composability.Open.Base"))
        {
            *factory = winrt::detach_abi(winrt::make<winrt::Complex::Authoring::Composability::Open::factory_implementation::Base>());
            return S_OK;
        }

        if (0 == wcscmp(name, L"Complex.Authoring.Composability.Open.Derived"))
        {
            *factory = winrt::detach_abi(winrt::make<winrt::Complex::Authoring::Composability::Open::factory_implementation::Derived>());
            return S_OK;
        }

        if (0 == wcscmp(name, L"Complex.Authoring.Factory.Simple"))
        {
            *factory = winrt::detach_abi(winrt::make<winrt::Complex::Authoring::Factory::factory_implementation::Simple>());
            return S_OK;
        }

        if (0 == wcscmp(name, L"Complex.Authoring.Factory.SimpleFactory"))
        {
            *factory = winrt::detach_abi(winrt::make<winrt::Complex::Authoring::Factory::factory_implementation::SimpleFactory>());
            return S_OK;
        }

        if (0 == wcscmp(name, L"Complex.Authoring.Factory.Static"))
        {
            *factory = winrt::detach_abi(winrt::make<winrt::Complex::Authoring::Factory::factory_implementation::Static>());
            return S_OK;
        }

        if (0 == wcscmp(name, L"Complex.Authoring.Factory.StaticFactory"))
        {
            *factory = winrt::detach_abi(winrt::make<winrt::Complex::Authoring::Factory::factory_implementation::StaticFactory>());
            return S_OK;
        }

        if (0 == wcscmp(name, L"Complex.Authoring.Nested.Simple"))
        {
            *factory = winrt::detach_abi(winrt::make<winrt::Complex::Authoring::Nested::factory_implementation::Simple>());
            return S_OK;
        }

        if (0 == wcscmp(name, L"Windows.Foundation.Uri"))
        {
            *factory = winrt::detach_abi(winrt::make<winrt::Windows::Foundation::factory_implementation::Uri>());
            return S_OK;
        }

#ifdef _WRL_MODULE_H_
        return ::Microsoft::WRL::Module<::Microsoft::WRL::InProc>::GetModule().GetActivationFactory(classId, reinterpret_cast<::IActivationFactory**>(factory));
#else
        return winrt::hresult_class_not_available().to_abi();
#endif
    }
    catch (...)
    {
        return winrt::to_hresult();
    }
}

#endif
