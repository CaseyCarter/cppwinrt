// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.1.private

#pragma once
#include "winrt/base.h"

namespace winrt {

namespace Farm::Animals {

struct IHen;
struct Hen;

}

namespace impl {

template <> struct category<Farm::Animals::IHen>{ using type = interface_category; };
template <> struct category<Farm::Animals::Hen>{ using type = class_category; };
template <> struct name<Farm::Animals::IHen>{ static constexpr auto & value{ L"Farm.Animals.IHen" }; };
template <> struct name<Farm::Animals::Hen>{ static constexpr auto & value{ L"Farm.Animals.Hen" }; };
template <> struct guid<Farm::Animals::IHen>{ static constexpr GUID value{ 0xD81C56DE,0x8304,0x46EB,{ 0xAD,0xAD,0x23,0x82,0x33,0x6B,0x69,0xDF } }; };
template <> struct default_interface<Farm::Animals::Hen>{ using type = Farm::Animals::IHen; };

template <typename D>
struct consume_Farm_Animals_IHen
{
    hstring Français() const;
    Windows::Foundation::IAsyncOperationWithProgress<hstring, uint32_t> LayEggAsync() const;
};
template <> struct consume<Farm::Animals::IHen> { template <typename D> using type = consume_Farm_Animals_IHen<D>; };

template <> struct abi<Farm::Animals::IHen>{ struct type : ::IInspectable
{
    virtual HRESULT __stdcall get_Français(HSTRING* value) = 0;
    virtual HRESULT __stdcall LayEggAsync(::IUnknown** operation) = 0;
};};

}

namespace Farm::Animals {

struct IHen :
    Windows::Foundation::IInspectable,
    impl::consume_t<IHen>
{
    IHen(std::nullptr_t = nullptr) noexcept {}
};

struct Hen :
    Farm::Animals::IHen
{
    Hen(std::nullptr_t) noexcept {}
    Hen();
};

}

namespace impl {

template <typename D> hstring consume_Farm_Animals_IHen<D>::Français() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Farm::Animals::IHen)->get_Français(put_abi(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperationWithProgress<hstring, uint32_t> consume_Farm_Animals_IHen<D>::LayEggAsync() const
{
    Windows::Foundation::IAsyncOperationWithProgress<hstring, uint32_t> operation{ nullptr };
    check_hresult(WINRT_SHIM(Farm::Animals::IHen)->LayEggAsync(put_abi(operation)));
    return operation;
}

template <typename D>
struct produce<D, Farm::Animals::IHen> : produce_base<D, Farm::Animals::IHen>
{
    HRESULT __stdcall get_Français(HSTRING* value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Français());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall LayEggAsync(::IUnknown** operation) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *operation = detach_abi(this->shim().LayEggAsync());
            return S_OK;
        }
        catch (...)
        {
            *operation = nullptr;
            return impl::to_hresult();
        }
    }
};

}

namespace Farm::Animals {

inline Hen::Hen() :
    Hen(activate_instance<Hen>())
{}

}

}

namespace std {

template<> struct hash<winrt::Farm::Animals::IHen> : 
    winrt::impl::impl_hash_unknown<winrt::Farm::Animals::IHen> {};

template<> struct hash<winrt::Farm::Animals::Hen> : 
    winrt::impl::impl_hash_unknown<winrt::Farm::Animals::Hen> {};

}
