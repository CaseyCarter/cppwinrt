// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.170906.1

#pragma once

#include "module.h"

namespace winrt::Composable::Outer::implementation {

template <typename D, typename ... I>
struct Foo_base : impl::module_lock, implements<D, Composable::Outer::IFoo, Composable::Base::IRootOverrides, composing, I ...>,
    Composable::Base::IRootOverridesT<D>
{
    using class_type = Composable::Outer::Foo;

    operator class_type() const noexcept
    {
        class_type result{ nullptr };
        attach_abi(result, detach_abi(static_cast<typename D::first_interface>(*this)));
        return result;
    }

    hstring GetRuntimeClassName() const
    {
        return L"Composable.Outer.Foo";
    }
    Foo_base()
    {
        get_activation_factory<Composable::Base::Root, Composable::Base::IRootFactory>().CreateInstance(*this, this->m_inner);
    }
protected:
    using dispatch = impl::dispatch_to_super<D, Composable::Base::IRootOverrides>;
    auto super() noexcept { return dispatch::super(static_cast<D&>(*this)); }
};

}

namespace winrt::Composable::Outer::factory_implementation {

template <typename D, typename T, typename ... I>
struct FooT : impl::module_lock, implements<D, Windows::Foundation::IActivationFactory, I ...>
{
    hstring GetRuntimeClassName() const
    {
        return L"Composable.Outer.Foo";
    }

    Windows::Foundation::IInspectable ActivateInstance() const
    {
        return make<T>();
    }
};

}

#pragma warning(suppress: 4067)
#if defined(WINRT_FORCE_INCLUDE_FOO_XAML_G_H) || __has_include("Foo.xaml.g.h")

#include "Foo.xaml.g.h"

#else

namespace winrt::Composable::Outer::implementation
{
    template <typename D, typename ... I>
    using FooT = Foo_base<D, I ...>;
}

#endif
