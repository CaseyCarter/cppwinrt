// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.171207.1

#include "pch.h"
#include "module.g.h"

namespace winrt::impl
{
    namespace
    {
        std::atomic<uint32_t> s_module_lock{};
    }

    module_lock::module_lock()
    {
        ++s_module_lock;
    }

    module_lock::~module_lock()
    {
        --s_module_lock;
    }
}

#ifndef WINRT_SUPPRESS_MODULE_EXPORTS

#include "Foo.h"

using namespace winrt;

HRESULT __stdcall WINRT_CanUnloadNow()
{
    if (impl::s_module_lock)
    {
        return S_FALSE;
    }

    clear_factory_cache();
    return S_OK;
}

HRESULT __stdcall WINRT_GetActivationFactory(HSTRING classId, void** factory)
{
    try
    {
        *factory = nullptr;
        wchar_t const* const name = WindowsGetStringRawBuffer(classId, nullptr);

        if (0 == wcscmp(name, L"Composable.Outer.Foo"))
        {
            *factory = detach_abi(make<Composable::Outer::factory_implementation::Foo>());
            return S_OK;
        }

        return hresult_class_not_available().to_abi();
    }
    catch (...)
    {
        return to_hresult();
    }
}

#endif
