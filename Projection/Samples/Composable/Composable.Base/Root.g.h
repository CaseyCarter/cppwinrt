// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.170906.1

#pragma once

#include "module.h"
#include "winrt/Composable.Base.h"

namespace winrt::Composable::Base::implementation {

template <typename D, typename ... I>
struct WINRT_EBO Root_base : impl::module_lock, implements<D, Composable::Base::IRoot, Composable::Base::IRootOverrides, composable, I ...>
{
    using class_type = Composable::Base::Root;
    
    operator class_type() const noexcept
    {
        static_assert(std::is_same_v<typename D::first_interface, impl::default_interface_t<class_type>>);
        class_type result{ nullptr };
        attach_abi(result, detach_abi(static_cast<impl::default_interface_t<class_type>>(*this)));
        return result;
    }

    hstring GetRuntimeClassName() const
    {
        return L"Composable.Base.Root";
    }
protected:
    using dispatch = impl::dispatch_to_super<D, Composable::Base::IRootOverrides>;
    auto super() noexcept { return dispatch::super(static_cast<D&>(*this)); }
};

}

namespace winrt::Composable::Base::factory_implementation {

template <typename D, typename T, typename ... I>
struct WINRT_EBO RootT : impl::module_lock, implements<D, Windows::Foundation::IActivationFactory, Composable::Base::IRootFactory, I ...>
{
    hstring GetRuntimeClassName() const
    {
        return L"Composable.Base.Root";
    }

    Windows::Foundation::IInspectable ActivateInstance() const
    {
        throw hresult_not_implemented();
    }

    Composable::Base::IRoot CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner)
    {
        return impl::composable_factory<T>::template CreateInstance<Composable::Base::IRoot>(outer, inner);
    }
};

}

#if defined(WINRT_FORCE_INCLUDE_ROOT_XAML_G_H) || __has_include("Root.xaml.g.h")

#include "Root.xaml.g.h"

#else

namespace winrt::Composable::Base::implementation
{
    template <typename D, typename ... I>
    using RootT = Root_base<D, I ...>;
}

#endif
