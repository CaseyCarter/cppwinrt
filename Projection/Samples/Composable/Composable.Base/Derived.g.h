// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.1.private

#pragma once

#include "module.h"

namespace winrt {

namespace Composable::Base::implementation {

template <typename D, typename ... I>
struct DerivedBase
    : implements<D, Composable::Base::IDerived, Composable::Base::IDerivedOverrides, composable, I ...>
{
    hstring GetRuntimeClassName() const
    {
        return L"Composable.Base.Derived";
    }
protected:
    using dispatch = impl::dispatch_to_super<D, Composable::Base::IDerivedOverrides, Composable::Base::IRootOverrides>;
    auto super() noexcept { return dispatch::super(static_cast<D&>(*this)); }
};

template <typename D, typename T, typename ... I>
struct DerivedFactoryBase : impl::module_lock, implements<D, Windows::Foundation::IActivationFactory, Composable::Base::IDerivedFactory, I ...>
{
    hstring GetRuntimeClassName() const
    {
        return L"Composable.Base.Derived";
    }

    Windows::Foundation::IInspectable ActivateInstance() const
    {
        throw hresult_not_implemented();
    }

    Composable::Base::IDerived CreateInstance(Windows::Foundation::IInspectable const& outer, Windows::Foundation::IInspectable& inner)
    {
        return impl::composable_factory<T>::template CreateInstance<Composable::Base::IDerived>(outer, inner);
    }
};

#if defined(WINRT_FORCE_INCLUDE_DERIVED_X_H) || __has_include("Derived.x.h")

#include "Derived.x.h"

#else

template <typename D, typename ... I>
using DerivedT = DerivedBase<D, I ...>;

template <typename D, typename T, typename ... I>
using DerivedFactoryT = DerivedFactoryBase<D, T, I ...>;

#endif

}

}
