// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.1.private

#pragma once

namespace winrt {

namespace Microsoft::SDKSamples::Kitchen {

struct Bread;
struct BreadBakedEventArgs;
struct Dimensions;
struct IAppliance;
struct IBread;
struct IBreakBakedEventArgs;
struct IOven;
struct IOvenFactory;
struct Oven;

enum class OvenTemperature
{
    Low = 0,
    Medium = 1,
    High = 2,
};

}

namespace impl {

template <> struct category<Microsoft::SDKSamples::Kitchen::Bread>{ using type = class_category; };
template <> struct category<Microsoft::SDKSamples::Kitchen::BreadBakedEventArgs>{ using type = class_category; };
template <> struct category<Microsoft::SDKSamples::Kitchen::Dimensions>{ using type = struct_category<double,double,double>; };
template <> struct category<Microsoft::SDKSamples::Kitchen::IAppliance>{ using type = interface_category; };
template <> struct category<Microsoft::SDKSamples::Kitchen::IBread>{ using type = interface_category; };
template <> struct category<Microsoft::SDKSamples::Kitchen::IBreakBakedEventArgs>{ using type = interface_category; };
template <> struct category<Microsoft::SDKSamples::Kitchen::IOven>{ using type = interface_category; };
template <> struct category<Microsoft::SDKSamples::Kitchen::IOvenFactory>{ using type = interface_category; };
template <> struct category<Microsoft::SDKSamples::Kitchen::Oven>{ using type = class_category; };
template <> struct category<Microsoft::SDKSamples::Kitchen::OvenTemperature>{ using type = enum_category; };
template <> struct name<Microsoft::SDKSamples::Kitchen::Bread>{ static constexpr auto & value{ L"Microsoft.SDKSamples.Kitchen.Bread" }; };
template <> struct name<Microsoft::SDKSamples::Kitchen::BreadBakedEventArgs>{ static constexpr auto & value{ L"Microsoft.SDKSamples.Kitchen.BreadBakedEventArgs" }; };
template <> struct name<Microsoft::SDKSamples::Kitchen::Dimensions>{ static constexpr auto & value{ L"Microsoft.SDKSamples.Kitchen.Dimensions" }; };
template <> struct name<Microsoft::SDKSamples::Kitchen::IAppliance>{ static constexpr auto & value{ L"Microsoft.SDKSamples.Kitchen.IAppliance" }; };
template <> struct name<Microsoft::SDKSamples::Kitchen::IBread>{ static constexpr auto & value{ L"Microsoft.SDKSamples.Kitchen.IBread" }; };
template <> struct name<Microsoft::SDKSamples::Kitchen::IBreakBakedEventArgs>{ static constexpr auto & value{ L"Microsoft.SDKSamples.Kitchen.IBreakBakedEventArgs" }; };
template <> struct name<Microsoft::SDKSamples::Kitchen::IOven>{ static constexpr auto & value{ L"Microsoft.SDKSamples.Kitchen.IOven" }; };
template <> struct name<Microsoft::SDKSamples::Kitchen::IOvenFactory>{ static constexpr auto & value{ L"Microsoft.SDKSamples.Kitchen.IOvenFactory" }; };
template <> struct name<Microsoft::SDKSamples::Kitchen::Oven>{ static constexpr auto & value{ L"Microsoft.SDKSamples.Kitchen.Oven" }; };
template <> struct name<Microsoft::SDKSamples::Kitchen::OvenTemperature>{ static constexpr auto & value{ L"Microsoft.SDKSamples.Kitchen.OvenTemperature" }; };
template <> struct guid<Microsoft::SDKSamples::Kitchen::IAppliance>{ static constexpr GUID value{ 0x332FD2F1,0x1C69,0x4C91,{ 0x94,0x9E,0x4B,0xB6,0x7A,0x85,0xBD,0xC5 } }; };
template <> struct guid<Microsoft::SDKSamples::Kitchen::IBread>{ static constexpr GUID value{ 0xF13EA3D5,0x7B24,0x4CDE,{ 0x9E,0x5F,0x57,0xAF,0x30,0xF0,0x73,0x3C } }; };
template <> struct guid<Microsoft::SDKSamples::Kitchen::IBreakBakedEventArgs>{ static constexpr GUID value{ 0x699B1394,0x3CEB,0x4A14,{ 0xAE,0x23,0xEF,0xEC,0x51,0x8B,0x08,0x8B } }; };
template <> struct guid<Microsoft::SDKSamples::Kitchen::IOven>{ static constexpr GUID value{ 0x6A112353,0x4F87,0x4460,{ 0xA9,0x08,0x29,0x44,0xE9,0x26,0x86,0xF3 } }; };
template <> struct guid<Microsoft::SDKSamples::Kitchen::IOvenFactory>{ static constexpr GUID value{ 0xF36C2A21,0xF4E3,0x4C39,{ 0x94,0xCE,0xEB,0x91,0x90,0xAF,0xDA,0xB3 } }; };
template <> struct default_interface<Microsoft::SDKSamples::Kitchen::Bread>{ using type = Microsoft::SDKSamples::Kitchen::IBread; };
template <> struct default_interface<Microsoft::SDKSamples::Kitchen::BreadBakedEventArgs>{ using type = Microsoft::SDKSamples::Kitchen::IBreakBakedEventArgs; };
template <> struct default_interface<Microsoft::SDKSamples::Kitchen::Oven>{ using type = Microsoft::SDKSamples::Kitchen::IOven; };

template <typename D>
struct consume_Microsoft_SDKSamples_Kitchen_IAppliance
{
    double Volume() const;
};
template <> struct consume<Microsoft::SDKSamples::Kitchen::IAppliance> { template <typename D> using type = consume_Microsoft_SDKSamples_Kitchen_IAppliance<D>; };

template <typename D>
struct consume_Microsoft_SDKSamples_Kitchen_IBread
{
    hstring Flavor() const;
};
template <> struct consume<Microsoft::SDKSamples::Kitchen::IBread> { template <typename D> using type = consume_Microsoft_SDKSamples_Kitchen_IBread<D>; };

template <typename D>
struct consume_Microsoft_SDKSamples_Kitchen_IBreakBakedEventArgs
{
    Microsoft::SDKSamples::Kitchen::Bread Bread() const;
};
template <> struct consume<Microsoft::SDKSamples::Kitchen::IBreakBakedEventArgs> { template <typename D> using type = consume_Microsoft_SDKSamples_Kitchen_IBreakBakedEventArgs<D>; };

template <typename D>
struct consume_Microsoft_SDKSamples_Kitchen_IOven
{
    void ConfigurePreheatTemperature(Microsoft::SDKSamples::Kitchen::OvenTemperature const& temperature) const;
    void BakeBread(hstring_view flavor) const;
    event_token BreadBaked(Windows::Foundation::TypedEventHandler<Microsoft::SDKSamples::Kitchen::Oven, Microsoft::SDKSamples::Kitchen::BreadBakedEventArgs> const& handler) const;
    using BreadBaked_revoker = event_revoker<Microsoft::SDKSamples::Kitchen::IOven>;
    BreadBaked_revoker BreadBaked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::SDKSamples::Kitchen::Oven, Microsoft::SDKSamples::Kitchen::BreadBakedEventArgs> const& handler) const;
    void BreadBaked(event_token const& token) const;
};
template <> struct consume<Microsoft::SDKSamples::Kitchen::IOven> { template <typename D> using type = consume_Microsoft_SDKSamples_Kitchen_IOven<D>; };

template <typename D>
struct consume_Microsoft_SDKSamples_Kitchen_IOvenFactory
{
    Microsoft::SDKSamples::Kitchen::Oven CreateOven(Microsoft::SDKSamples::Kitchen::Dimensions const& dimensions) const;
};
template <> struct consume<Microsoft::SDKSamples::Kitchen::IOvenFactory> { template <typename D> using type = consume_Microsoft_SDKSamples_Kitchen_IOvenFactory<D>; };

template <> struct abi<Microsoft::SDKSamples::Kitchen::IAppliance>{ struct type : ::IInspectable
{
    virtual HRESULT __stdcall get_Volume(double* value) = 0;
};};

template <> struct abi<Microsoft::SDKSamples::Kitchen::IBread>{ struct type : ::IInspectable
{
    virtual HRESULT __stdcall get_Flavor(HSTRING* value) = 0;
};};

template <> struct abi<Microsoft::SDKSamples::Kitchen::IBreakBakedEventArgs>{ struct type : ::IInspectable
{
    virtual HRESULT __stdcall get_Bread(::IUnknown** value) = 0;
};};

template <> struct abi<Microsoft::SDKSamples::Kitchen::IOven>{ struct type : ::IInspectable
{
    virtual HRESULT __stdcall ConfigurePreheatTemperature(abi_t<Microsoft::SDKSamples::Kitchen::OvenTemperature> temperature) = 0;
    virtual HRESULT __stdcall BakeBread(HSTRING flavor) = 0;
    virtual HRESULT __stdcall add_BreadBaked(::IUnknown* handler, abi_t<event_token>* token) = 0;
    virtual HRESULT __stdcall remove_BreadBaked(abi_t<event_token> token) = 0;
};};

template <> struct abi<Microsoft::SDKSamples::Kitchen::IOvenFactory>{ struct type : ::IInspectable
{
    virtual HRESULT __stdcall CreateOven(abi_t<Microsoft::SDKSamples::Kitchen::Dimensions> dimensions, ::IUnknown** result) = 0;
};};

}

namespace Microsoft::SDKSamples::Kitchen {

struct IAppliance :
    Windows::Foundation::IInspectable,
    impl::consume_t<IAppliance>
{
    IAppliance(std::nullptr_t = nullptr) noexcept {}
};

struct IBread :
    Windows::Foundation::IInspectable,
    impl::consume_t<IBread>
{
    IBread(std::nullptr_t = nullptr) noexcept {}
};

struct IBreakBakedEventArgs :
    Windows::Foundation::IInspectable,
    impl::consume_t<IBreakBakedEventArgs>
{
    IBreakBakedEventArgs(std::nullptr_t = nullptr) noexcept {}
};

struct IOven :
    Windows::Foundation::IInspectable,
    impl::consume_t<IOven>,
    impl::require<IOven, Microsoft::SDKSamples::Kitchen::IAppliance>
{
    IOven(std::nullptr_t = nullptr) noexcept {}
};

struct IOvenFactory :
    Windows::Foundation::IInspectable,
    impl::consume_t<IOvenFactory>
{
    IOvenFactory(std::nullptr_t = nullptr) noexcept {}
};

struct Dimensions
{
    double Depth;
    double Height;
    double Width;
};

struct Bread :
    Microsoft::SDKSamples::Kitchen::IBread
{
    Bread(std::nullptr_t) noexcept {}
};

struct BreadBakedEventArgs :
    Microsoft::SDKSamples::Kitchen::IBreakBakedEventArgs
{
    BreadBakedEventArgs(std::nullptr_t) noexcept {}
};

struct Oven :
    Microsoft::SDKSamples::Kitchen::IOven
{
    Oven(std::nullptr_t) noexcept {}
    Oven(Microsoft::SDKSamples::Kitchen::Dimensions const& dimensions);
    Oven();
};

}

namespace impl {

template <typename D> double consume_Microsoft_SDKSamples_Kitchen_IAppliance<D>::Volume() const
{
    double value{};
    check_hresult(WINRT_SHIM(Microsoft::SDKSamples::Kitchen::IAppliance)->get_Volume(&value));
    return value;
}

template <typename D> hstring consume_Microsoft_SDKSamples_Kitchen_IBread<D>::Flavor() const
{
    hstring value{};
    check_hresult(WINRT_SHIM(Microsoft::SDKSamples::Kitchen::IBread)->get_Flavor(put_abi(value)));
    return value;
}

template <typename D> Microsoft::SDKSamples::Kitchen::Bread consume_Microsoft_SDKSamples_Kitchen_IBreakBakedEventArgs<D>::Bread() const
{
    Microsoft::SDKSamples::Kitchen::Bread value{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::SDKSamples::Kitchen::IBreakBakedEventArgs)->get_Bread(put_abi(value)));
    return value;
}

template <typename D> void consume_Microsoft_SDKSamples_Kitchen_IOven<D>::ConfigurePreheatTemperature(Microsoft::SDKSamples::Kitchen::OvenTemperature const& temperature) const
{
    check_hresult(WINRT_SHIM(Microsoft::SDKSamples::Kitchen::IOven)->ConfigurePreheatTemperature(get_abi(temperature)));
}

template <typename D> void consume_Microsoft_SDKSamples_Kitchen_IOven<D>::BakeBread(hstring_view flavor) const
{
    check_hresult(WINRT_SHIM(Microsoft::SDKSamples::Kitchen::IOven)->BakeBread(get_abi(flavor)));
}

template <typename D> event_token consume_Microsoft_SDKSamples_Kitchen_IOven<D>::BreadBaked(Windows::Foundation::TypedEventHandler<Microsoft::SDKSamples::Kitchen::Oven, Microsoft::SDKSamples::Kitchen::BreadBakedEventArgs> const& handler) const
{
    event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::SDKSamples::Kitchen::IOven)->add_BreadBaked(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> event_revoker<Microsoft::SDKSamples::Kitchen::IOven> consume_Microsoft_SDKSamples_Kitchen_IOven<D>::BreadBaked(auto_revoke_t, Windows::Foundation::TypedEventHandler<Microsoft::SDKSamples::Kitchen::Oven, Microsoft::SDKSamples::Kitchen::BreadBakedEventArgs> const& handler) const
{
    return impl::make_event_revoker<D, Microsoft::SDKSamples::Kitchen::IOven>(this, &abi_t<Microsoft::SDKSamples::Kitchen::IOven>::remove_BreadBaked, BreadBaked(handler));
}

template <typename D> void consume_Microsoft_SDKSamples_Kitchen_IOven<D>::BreadBaked(event_token const& token) const
{
    check_hresult(WINRT_SHIM(Microsoft::SDKSamples::Kitchen::IOven)->remove_BreadBaked(get_abi(token)));
}

template <typename D> Microsoft::SDKSamples::Kitchen::Oven consume_Microsoft_SDKSamples_Kitchen_IOvenFactory<D>::CreateOven(Microsoft::SDKSamples::Kitchen::Dimensions const& dimensions) const
{
    Microsoft::SDKSamples::Kitchen::Oven result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::SDKSamples::Kitchen::IOvenFactory)->CreateOven(get_abi(dimensions), put_abi(result)));
    return result;
}

template <typename D>
struct produce<D, Microsoft::SDKSamples::Kitchen::IAppliance> : produce_base<D, Microsoft::SDKSamples::Kitchen::IAppliance>
{
    HRESULT __stdcall get_Volume(double* value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Volume());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::SDKSamples::Kitchen::IBread> : produce_base<D, Microsoft::SDKSamples::Kitchen::IBread>
{
    HRESULT __stdcall get_Flavor(HSTRING* value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Flavor());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::SDKSamples::Kitchen::IBreakBakedEventArgs> : produce_base<D, Microsoft::SDKSamples::Kitchen::IBreakBakedEventArgs>
{
    HRESULT __stdcall get_Bread(::IUnknown** value) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_abi(this->shim().Bread());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::SDKSamples::Kitchen::IOven> : produce_base<D, Microsoft::SDKSamples::Kitchen::IOven>
{
    HRESULT __stdcall ConfigurePreheatTemperature(abi_t<Microsoft::SDKSamples::Kitchen::OvenTemperature> temperature) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ConfigurePreheatTemperature(*reinterpret_cast<Microsoft::SDKSamples::Kitchen::OvenTemperature const*>(&temperature));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall BakeBread(HSTRING flavor) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BakeBread(*reinterpret_cast<hstring const*>(&flavor));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_BreadBaked(::IUnknown* handler, abi_t<event_token>* token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_abi(this->shim().BreadBaked(*reinterpret_cast<Windows::Foundation::TypedEventHandler<Microsoft::SDKSamples::Kitchen::Oven, Microsoft::SDKSamples::Kitchen::BreadBakedEventArgs> const*>(&handler)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_BreadBaked(abi_t<event_token> token) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BreadBaked(*reinterpret_cast<event_token const*>(&token));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::SDKSamples::Kitchen::IOvenFactory> : produce_base<D, Microsoft::SDKSamples::Kitchen::IOvenFactory>
{
    HRESULT __stdcall CreateOven(abi_t<Microsoft::SDKSamples::Kitchen::Dimensions> dimensions, ::IUnknown** result) noexcept override
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_abi(this->shim().CreateOven(*reinterpret_cast<Microsoft::SDKSamples::Kitchen::Dimensions const*>(&dimensions)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

}

namespace Microsoft::SDKSamples::Kitchen {

inline Oven::Oven(Microsoft::SDKSamples::Kitchen::Dimensions const& dimensions) :
    Oven(get_activation_factory<Oven, Microsoft::SDKSamples::Kitchen::IOvenFactory>().CreateOven(dimensions))
{}

inline Oven::Oven() :
    Oven(activate_instance<Oven>())
{}

}

}
