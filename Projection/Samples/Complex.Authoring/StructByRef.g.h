// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.1.private

#pragma once

#include "module.h"

namespace winrt {

namespace Complex::Authoring::implementation {

template <typename D, typename ... I>
struct StructByRefBase : impl::module_lock, implements<D, Complex::Authoring::IStructByRef, I ...>
{
    using class_type = Complex::Authoring::StructByRef;

    operator class_type() const noexcept
    {
        class_type result{ nullptr };
        attach_abi(result, detach_abi(static_cast<typename D::first_interface>(*this)));
        return result;
    }

    hstring GetRuntimeClassName() const
    {
        return L"Complex.Authoring.StructByRef";
    }
};

template <typename D, typename T, typename ... I>
struct StructByRefFactoryBase : impl::module_lock, implements<D, Windows::Foundation::IActivationFactory, I ...>
{
    hstring GetRuntimeClassName() const
    {
        return L"Complex.Authoring.StructByRef";
    }

    Windows::Foundation::IInspectable ActivateInstance() const
    {
        return make<T>();
    }
};

#pragma warning(suppress: 4067)
#if defined(WINRT_FORCE_INCLUDE_STRUCTBYREF_X_H) || __has_include("StructByRef.x.h")

#include "StructByRef.x.h"

#else

template <typename D, typename ... I>
using StructByRefT = StructByRefBase<D, I ...>;

template <typename D, typename T, typename ... I>
using StructByRefFactoryT = StructByRefFactoryBase<D, T, I ...>;

#endif

}

}
