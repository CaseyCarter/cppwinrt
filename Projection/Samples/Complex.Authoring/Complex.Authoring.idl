import "Windows.Foundation.idl";

namespace Complex.Authoring
{
    //
    // The simplest of classes.
    //

    [version(1.0), uuid(09839e70-b064-4287-a473-78656719bada)]
    interface ISimple : IInspectable
    {
        [propget] HRESULT Name([out, retval] HSTRING* value);
    };

    [version(1.0), activatable(1.0)]
    runtimeclass Simple
    {
        [default] interface ISimple;
    }

    //
    // This class illustrates support for UTF-8.
    //

    [version(1.0), uuid(c242f075-4be5-4000-b77e-5634bc87547f)]
    interface ILanguage : IInspectable
    {
        [propget] HRESULT Français([out, retval] HSTRING* value);
    };

    [version(1.0), activatable(1.0)]
    runtimeclass Language
    {
        [default] interface ILanguage;
    }

    //
    // This class illustrates support for passing structs by reference.
    //

    [version(1.0), uuid(24ec9145-7f4b-4515-8910-ef499b267c06)]
    interface IStructByRef : IInspectable
    {
        HRESULT CopyByValue([in] Windows.Foundation.Rect byValue, [out, retval] Windows.Foundation.Rect* result);
        HRESULT CopyByRef([in] Windows.Foundation.Rect const* byRef, [out, retval] Windows.Foundation.Rect* result);
    };

    [version(1.0), activatable(1.0)]
    runtimeclass StructByRef
    {
        [default] interface IStructByRef;
    }

    //
    // This class illustrates support for nested types (with the same class name).
    //

    namespace Nested
    {
        [version(1.0), uuid(34b0d9cc-0dbb-421c-ba71-7e40d0966804)]
        interface ISimple : IInspectable
        {
            [propget] HRESULT Name([out, retval] HSTRING* value);
        };

        [version(1.0), activatable(1.0)]
        runtimeclass Simple
        {
            [default] interface ISimple;
        }
    }

    //
    // This class illustrates support for static classes.
    //

    [version(1.0), uuid(c242f075-4be5-4000-b77e-5634bc87547f)]
    interface IStatic : IInspectable
    {
        [propget] HRESULT Bounds([out, retval] Windows.Foundation.Rect* value);
    };

    [version(1.0), static(IStatic, 1.0)]
    runtimeclass Static
    {
    }

    //
    // These classes illustrate an issue with runtime class name mangling
    // when authoring types with C++/WinRT, specifically when the class name
    // ends with -Factory.
    //

    namespace Factory
    {
        [version(1.0), uuid(68504fd7-f10e-4e7b-b2c5-2a890670b39b)]
        interface ISimple : IInspectable
        {
        };

        [version(1.0), activatable(1.0)]
        runtimeclass Simple
        {
            [default] interface ISimple;
        }

        [version(1.0), uuid(3590e075-41f5-4dbd-a5ea-30dd2994f884)]
        interface ISimpleFactory : IInspectable
        {
        };

        [version(1.0), activatable(1.0)]
        runtimeclass SimpleFactory
        {
            [default] interface ISimpleFactory;
        }

        [version(1.0), uuid(9987fdea-6a97-41ad-9b9f-0f274ce077d9)]
        interface IStatic : IInspectable
        {
            HRESULT StaticMethod();
        };

        [version(1.0), static(IStatic, 1.0)]
        runtimeclass Static
        {
        }

        [version(1.0), uuid(bfa00357-1f74-48c2-9ba2-37ad825a639c)]
        interface IStaticFactory : IInspectable
        {
            HRESULT StaticMethod();
        };

        [version(1.0), static(IStaticFactory, 1.0)]
        runtimeclass StaticFactory
        {
        }
    }

    //
    // These classes illustrate support for closed composbility
    // with implementation inheritance (e.g. Windows.UI.Composition).
    //

    namespace Composability
    {
        namespace Closed
        {
            runtimeclass Base;

            [version(1.0)]
            [exclusiveto(Base)]
            [uuid(1c24df03-c99e-41e2-8414-34924d3cfde3)]
            interface IBase : IInspectable
            {
                HRESULT MethodOnBase();
            }

            [version(1.0)]
            [exclusiveto(Base)]
            [uuid(21e466e7-1b63-42c2-aa85-3974e442b4b2)]
            interface IBaseFactory : IInspectable
            {
            }

            [composable(IBaseFactory, protected, 1.0)]
            [version(1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass Base
            {
                [default] interface IBase;
            }

            runtimeclass Derived;

            [version(1.0)]
            [exclusiveto(Derived)]
            [uuid(3ac15533-bd69-468c-bbd1-383e2f8cd984)]
            interface IDerived : IInspectable
            {
                HRESULT MethodOnDerived();
            }

            [version(1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass Derived : Base
            {
                [default] interface IDerived;
            }
        }

        //
        // These classes illustrate support for open composbility
        // with binary inheritance (e.g. Windows.UI.Xaml).
        //

        namespace Open
        {
            runtimeclass Base;

            [version(1.0)]
            [exclusiveto(Base)]
            [uuid(1c24df03-c99e-41e2-8414-34924d3cfde3)]
            interface IBase : IInspectable
            {
                HRESULT MethodOnBase();
            }

            [version(1.0)]
            [exclusiveto(Base)]
            [uuid(21e466e7-1b63-42c2-aa85-3974e442b4b2)]
            interface IBaseFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out][retval] Base** instance);
            }

            [composable(IBaseFactory, protected, 1.0)]
            [version(1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass Base
            {
                [default] interface IBase;
            }

            runtimeclass Derived;

            [version(1.0)]
            [exclusiveto(Derived)]
            [uuid(3ac15533-bd69-468c-bbd1-383e2f8cd984)]
            interface IDerived : IInspectable
            {
                HRESULT MethodOnDerived();
            }

            [version(1.0)]
            [exclusiveto(Derived)]
            [uuid(f950a4db-dc20-47cb-96cf-6f7d895e53e6)]
            interface IDerivedFactory : IInspectable
            {
                HRESULT CreateInstance([in] IInspectable* outer, [out] IInspectable** inner, [out][retval] Derived** instance);
            }

            [composable(IDerivedFactory, public, 1.0)]
            [version(1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass Derived : Base
            {
                [default] interface IDerived;
            }
        }
    }
}
