// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.1.private

#pragma once

#include "module.h"

namespace winrt {

namespace Complex::Authoring::implementation {

template <typename D, typename T, typename ... I>
struct StaticFactoryBase : impl::module_lock, implements<D, Windows::Foundation::IActivationFactory, Complex::Authoring::IStatic, I ...>
{
    hstring GetRuntimeClassName() const
    {
        return L"Complex.Authoring.Static";
    }

    Windows::Foundation::IInspectable ActivateInstance() const
    {
        throw hresult_not_implemented();
    }

    Windows::Foundation::Rect Bounds()
    {
        return T::Bounds();
    }
};

template <typename D, typename T, typename ... I>
using StaticFactoryT = StaticFactoryBase<D, T, I ...>;

}

}
