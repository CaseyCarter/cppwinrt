// C++ for the Windows Runtime v1.29 - http://moderncpp.com
// Copyright (c) 2015 Microsoft Corporation

#pragma once

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Background {

template <typename T> struct impl_BackgroundTaskCanceledEventHandler : impl::implements<IBackgroundTaskCanceledEventHandler>, T
{
	impl_BackgroundTaskCanceledEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::ApplicationModel::Background::IBackgroundTaskInstance> sender, Windows::ApplicationModel::Background::BackgroundTaskCancellationReason reason) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::ApplicationModel::Background::IBackgroundTaskInstance>(sender), reason); });
	}
};

template <typename T> IBackgroundTaskCanceledEventHandler BackgroundTaskCanceledEventHandler(T handler)
{
	return make<impl_BackgroundTaskCanceledEventHandler<T>>(handler);
}

template <typename T> struct impl_BackgroundTaskProgressEventHandler : impl::implements<IBackgroundTaskProgressEventHandler>, T
{
	impl_BackgroundTaskProgressEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::ApplicationModel::Background::IBackgroundTaskRegistration> sender, abi_arg_in<Windows::ApplicationModel::Background::IBackgroundTaskProgressEventArgs> args) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::ApplicationModel::Background::BackgroundTaskRegistration>(sender), impl::forward<Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs>(args)); });
	}
};

template <typename T> IBackgroundTaskProgressEventHandler BackgroundTaskProgressEventHandler(T handler)
{
	return make<impl_BackgroundTaskProgressEventHandler<T>>(handler);
}

template <typename T> struct impl_BackgroundTaskCompletedEventHandler : impl::implements<IBackgroundTaskCompletedEventHandler>, T
{
	impl_BackgroundTaskCompletedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::ApplicationModel::Background::IBackgroundTaskRegistration> sender, abi_arg_in<Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventArgs> args) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::ApplicationModel::Background::BackgroundTaskRegistration>(sender), impl::forward<Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs>(args)); });
	}
};

template <typename T> IBackgroundTaskCompletedEventHandler BackgroundTaskCompletedEventHandler(T handler)
{
	return make<impl_BackgroundTaskCompletedEventHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

template <typename T> struct impl_DataProviderHandler : impl::implements<IDataProviderHandler>, T
{
	impl_DataProviderHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::ApplicationModel::DataTransfer::IDataProviderRequest> request) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::ApplicationModel::DataTransfer::DataProviderRequest>(request)); });
	}
};

template <typename T> IDataProviderHandler DataProviderHandler(T handler)
{
	return make<impl_DataProviderHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Store {

template <typename T> struct impl_LicenseChangedEventHandler : impl::implements<ILicenseChangedEventHandler>, T
{
	impl_LicenseChangedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke() noexcept override
	{
		return call([&]{ (*this)(); });
	}
};

template <typename T> ILicenseChangedEventHandler LicenseChangedEventHandler(T handler)
{
	return make<impl_LicenseChangedEventHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Data { namespace Text {

template <typename T> struct impl_WordSegmentsTokenizingHandler : impl::implements<IWordSegmentsTokenizingHandler>, T
{
	impl_WordSegmentsTokenizingHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment>> precedingWords, abi_arg_in<Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment>> words) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment>>(precedingWords), impl::forward<Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment>>(words)); });
	}
};

template <typename T> IWordSegmentsTokenizingHandler WordSegmentsTokenizingHandler(T handler)
{
	return make<impl_WordSegmentsTokenizingHandler<T>>(handler);
}

template <typename T> struct impl_SelectableWordSegmentsTokenizingHandler : impl::implements<ISelectableWordSegmentsTokenizingHandler>, T
{
	impl_SelectableWordSegmentsTokenizingHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment>> precedingWords, abi_arg_in<Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment>> words) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment>>(precedingWords), impl::forward<Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment>>(words)); });
	}
};

template <typename T> ISelectableWordSegmentsTokenizingHandler SelectableWordSegmentsTokenizingHandler(T handler)
{
	return make<impl_SelectableWordSegmentsTokenizingHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Perception { namespace Provider {

template <typename T> struct impl_PerceptionStartFaceAuthenticationHandler : impl::implements<IPerceptionStartFaceAuthenticationHandler>, T
{
	impl_PerceptionStartFaceAuthenticationHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Devices::Perception::Provider::IPerceptionFaceAuthenticationGroup> sender, bool * result) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Devices::Perception::Provider::PerceptionFaceAuthenticationGroup>(sender)); });
	}
};

template <typename T> IPerceptionStartFaceAuthenticationHandler PerceptionStartFaceAuthenticationHandler(T handler)
{
	return make<impl_PerceptionStartFaceAuthenticationHandler<T>>(handler);
}

template <typename T> struct impl_PerceptionStopFaceAuthenticationHandler : impl::implements<IPerceptionStopFaceAuthenticationHandler>, T
{
	impl_PerceptionStopFaceAuthenticationHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Devices::Perception::Provider::IPerceptionFaceAuthenticationGroup> sender) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Devices::Perception::Provider::PerceptionFaceAuthenticationGroup>(sender)); });
	}
};

template <typename T> IPerceptionStopFaceAuthenticationHandler PerceptionStopFaceAuthenticationHandler(T handler)
{
	return make<impl_PerceptionStopFaceAuthenticationHandler<T>>(handler);
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace SmartCards {

template <typename T> struct impl_SmartCardPinResetHandler : impl::implements<ISmartCardPinResetHandler>, T
{
	impl_SmartCardPinResetHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Devices::SmartCards::ISmartCardProvisioning> sender, abi_arg_in<Windows::Devices::SmartCards::ISmartCardPinResetRequest> request) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Devices::SmartCards::SmartCardProvisioning>(sender), impl::forward<Windows::Devices::SmartCards::SmartCardPinResetRequest>(request)); });
	}
};

template <typename T> ISmartCardPinResetHandler SmartCardPinResetHandler(T handler)
{
	return make<impl_SmartCardPinResetHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sms {

template <typename T> struct impl_SmsMessageReceivedEventHandler : impl::implements<ISmsMessageReceivedEventHandler>, T
{
	impl_SmsMessageReceivedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Devices::Sms::ISmsDevice> sender, abi_arg_in<Windows::Devices::Sms::ISmsMessageReceivedEventArgs> e) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Devices::Sms::SmsDevice>(sender), impl::forward<Windows::Devices::Sms::SmsMessageReceivedEventArgs>(e)); });
	}
};

template <typename T> ISmsMessageReceivedEventHandler SmsMessageReceivedEventHandler(T handler)
{
	return make<impl_SmsMessageReceivedEventHandler<T>>(handler);
}

template <typename T> struct impl_SmsDeviceStatusChangedEventHandler : impl::implements<ISmsDeviceStatusChangedEventHandler>, T
{
	impl_SmsDeviceStatusChangedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Devices::Sms::ISmsDevice> sender) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Devices::Sms::SmsDevice>(sender)); });
	}
};

template <typename T> ISmsDeviceStatusChangedEventHandler SmsDeviceStatusChangedEventHandler(T handler)
{
	return make<impl_SmsDeviceStatusChangedEventHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Foundation {

template <typename T> struct impl_AsyncActionCompletedHandler : impl::implements<IAsyncActionCompletedHandler>, T
{
	impl_AsyncActionCompletedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Foundation::IAsyncAction> asyncInfo, AsyncStatus asyncStatus) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Foundation::IAsyncAction>(asyncInfo), asyncStatus); });
	}
};

template <typename T> IAsyncActionCompletedHandler AsyncActionCompletedHandler(T handler)
{
	return make<impl_AsyncActionCompletedHandler<T>>(handler);
}

template <typename T> struct impl_DeferralCompletedHandler : impl::implements<IDeferralCompletedHandler>, T
{
	impl_DeferralCompletedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke() noexcept override
	{
		return call([&]{ (*this)(); });
	}
};

template <typename T> IDeferralCompletedHandler DeferralCompletedHandler(T handler)
{
	return make<impl_DeferralCompletedHandler<T>>(handler);
}

}}}

namespace winrt { namespace Windows { namespace Gaming { namespace Preview { namespace GamesEnumeration {

template <typename T> struct impl_GameListChangedEventHandler : impl::implements<IGameListChangedEventHandler>, T
{
	impl_GameListChangedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Gaming::Preview::GamesEnumeration::IGameListEntry> game) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Gaming::Preview::GamesEnumeration::GameListEntry>(game)); });
	}
};

template <typename T> IGameListChangedEventHandler GameListChangedEventHandler(T handler)
{
	return make<impl_GameListChangedEventHandler<T>>(handler);
}

template <typename T> struct impl_GameListRemovedEventHandler : impl::implements<IGameListRemovedEventHandler>, T
{
	impl_GameListRemovedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(HSTRING identifier) noexcept override
	{
		return call([&]{ (*this)(impl::forward<String>(identifier)); });
	}
};

template <typename T> IGameListRemovedEventHandler GameListRemovedEventHandler(T handler)
{
	return make<impl_GameListRemovedEventHandler<T>>(handler);
}

}}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Display {

template <typename T> struct impl_DisplayPropertiesEventHandler : impl::implements<IDisplayPropertiesEventHandler>, T
{
	impl_DisplayPropertiesEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<IInspectable> sender) noexcept override
	{
		return call([&]{ (*this)(impl::forward<IInspectable>(sender)); });
	}
};

template <typename T> IDisplayPropertiesEventHandler DisplayPropertiesEventHandler(T handler)
{
	return make<impl_DisplayPropertiesEventHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Printing {

template <typename T> struct impl_PrintTaskSourceRequestedHandler : impl::implements<IPrintTaskSourceRequestedHandler>, T
{
	impl_PrintTaskSourceRequestedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Graphics::Printing::IPrintTaskSourceRequestedArgs> args) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Graphics::Printing::PrintTaskSourceRequestedArgs>(args)); });
	}
};

template <typename T> IPrintTaskSourceRequestedHandler PrintTaskSourceRequestedHandler(T handler)
{
	return make<impl_PrintTaskSourceRequestedHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Printing3D {

template <typename T> struct impl_Print3DTaskSourceRequestedHandler : impl::implements<IPrint3DTaskSourceRequestedHandler>, T
{
	impl_Print3DTaskSourceRequestedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Graphics::Printing3D::IPrint3DTaskSourceRequestedArgs> args) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Graphics::Printing3D::Print3DTaskSourceRequestedArgs>(args)); });
	}
};

template <typename T> IPrint3DTaskSourceRequestedHandler Print3DTaskSourceRequestedHandler(T handler)
{
	return make<impl_Print3DTaskSourceRequestedHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Capture {

template <typename T> struct impl_MediaCaptureFailedEventHandler : impl::implements<IMediaCaptureFailedEventHandler>, T
{
	impl_MediaCaptureFailedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Media::Capture::IMediaCapture> sender, abi_arg_in<Windows::Media::Capture::IMediaCaptureFailedEventArgs> errorEventArgs) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Media::Capture::MediaCapture>(sender), impl::forward<Windows::Media::Capture::MediaCaptureFailedEventArgs>(errorEventArgs)); });
	}
};

template <typename T> IMediaCaptureFailedEventHandler MediaCaptureFailedEventHandler(T handler)
{
	return make<impl_MediaCaptureFailedEventHandler<T>>(handler);
}

template <typename T> struct impl_RecordLimitationExceededEventHandler : impl::implements<IRecordLimitationExceededEventHandler>, T
{
	impl_RecordLimitationExceededEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Media::Capture::IMediaCapture> sender) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Media::Capture::MediaCapture>(sender)); });
	}
};

template <typename T> IRecordLimitationExceededEventHandler RecordLimitationExceededEventHandler(T handler)
{
	return make<impl_RecordLimitationExceededEventHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Devices {

template <typename T> struct impl_CallControlEventHandler : impl::implements<ICallControlEventHandler>, T
{
	impl_CallControlEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Media::Devices::ICallControl> sender) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Media::Devices::CallControl>(sender)); });
	}
};

template <typename T> ICallControlEventHandler CallControlEventHandler(T handler)
{
	return make<impl_CallControlEventHandler<T>>(handler);
}

template <typename T> struct impl_DialRequestedEventHandler : impl::implements<IDialRequestedEventHandler>, T
{
	impl_DialRequestedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Media::Devices::ICallControl> sender, abi_arg_in<Windows::Media::Devices::IDialRequestedEventArgs> e) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Media::Devices::CallControl>(sender), impl::forward<Windows::Media::Devices::DialRequestedEventArgs>(e)); });
	}
};

template <typename T> IDialRequestedEventHandler DialRequestedEventHandler(T handler)
{
	return make<impl_DialRequestedEventHandler<T>>(handler);
}

template <typename T> struct impl_RedialRequestedEventHandler : impl::implements<IRedialRequestedEventHandler>, T
{
	impl_RedialRequestedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Media::Devices::ICallControl> sender, abi_arg_in<Windows::Media::Devices::IRedialRequestedEventArgs> e) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Media::Devices::CallControl>(sender), impl::forward<Windows::Media::Devices::RedialRequestedEventArgs>(e)); });
	}
};

template <typename T> IRedialRequestedEventHandler RedialRequestedEventHandler(T handler)
{
	return make<impl_RedialRequestedEventHandler<T>>(handler);
}

template <typename T> struct impl_KeypadPressedEventHandler : impl::implements<IKeypadPressedEventHandler>, T
{
	impl_KeypadPressedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Media::Devices::ICallControl> sender, abi_arg_in<Windows::Media::Devices::IKeypadPressedEventArgs> e) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Media::Devices::CallControl>(sender), impl::forward<Windows::Media::Devices::KeypadPressedEventArgs>(e)); });
	}
};

template <typename T> IKeypadPressedEventHandler KeypadPressedEventHandler(T handler)
{
	return make<impl_KeypadPressedEventHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Protection {

template <typename T> struct impl_ServiceRequestedEventHandler : impl::implements<IServiceRequestedEventHandler>, T
{
	impl_ServiceRequestedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Media::Protection::IMediaProtectionManager> sender, abi_arg_in<Windows::Media::Protection::IServiceRequestedEventArgs> e) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Media::Protection::MediaProtectionManager>(sender), impl::forward<Windows::Media::Protection::ServiceRequestedEventArgs>(e)); });
	}
};

template <typename T> IServiceRequestedEventHandler ServiceRequestedEventHandler(T handler)
{
	return make<impl_ServiceRequestedEventHandler<T>>(handler);
}

template <typename T> struct impl_RebootNeededEventHandler : impl::implements<IRebootNeededEventHandler>, T
{
	impl_RebootNeededEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Media::Protection::IMediaProtectionManager> sender) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Media::Protection::MediaProtectionManager>(sender)); });
	}
};

template <typename T> IRebootNeededEventHandler RebootNeededEventHandler(T handler)
{
	return make<impl_RebootNeededEventHandler<T>>(handler);
}

template <typename T> struct impl_ComponentLoadFailedEventHandler : impl::implements<IComponentLoadFailedEventHandler>, T
{
	impl_ComponentLoadFailedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Media::Protection::IMediaProtectionManager> sender, abi_arg_in<Windows::Media::Protection::IComponentLoadFailedEventArgs> e) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Media::Protection::MediaProtectionManager>(sender), impl::forward<Windows::Media::Protection::ComponentLoadFailedEventArgs>(e)); });
	}
};

template <typename T> IComponentLoadFailedEventHandler ComponentLoadFailedEventHandler(T handler)
{
	return make<impl_ComponentLoadFailedEventHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Streaming {

template <typename T> struct impl_DeviceControllerFinderHandler : impl::implements<IDeviceControllerFinderHandler>, T
{
	impl_DeviceControllerFinderHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Media::Streaming::IDeviceController> sender, HSTRING uniqueDeviceName, abi_arg_in<Windows::Media::Streaming::IBasicDevice> device) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Media::Streaming::IDeviceController>(sender), impl::forward<String>(uniqueDeviceName), impl::forward<Windows::Media::Streaming::IBasicDevice>(device)); });
	}
};

template <typename T> IDeviceControllerFinderHandler DeviceControllerFinderHandler(T handler)
{
	return make<impl_DeviceControllerFinderHandler<T>>(handler);
}

template <typename T> struct impl_ConnectionStatusHandler : impl::implements<IConnectionStatusHandler>, T
{
	impl_ConnectionStatusHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Media::Streaming::IBasicDevice> sender, Windows::Media::Streaming::ConnectionStatus arg) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Media::Streaming::IBasicDevice>(sender), arg); });
	}
};

template <typename T> IConnectionStatusHandler ConnectionStatusHandler(T handler)
{
	return make<impl_ConnectionStatusHandler<T>>(handler);
}

template <typename T> struct impl_TransportParametersUpdateHandler : impl::implements<ITransportParametersUpdateHandler>, T
{
	impl_TransportParametersUpdateHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Media::Streaming::IMediaRenderer> sender, abi_arg_in<Windows::Media::Streaming::ITransportParameters> arg) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Media::Streaming::IMediaRenderer>(sender), impl::forward<Windows::Media::Streaming::ITransportParameters>(arg)); });
	}
};

template <typename T> ITransportParametersUpdateHandler TransportParametersUpdateHandler(T handler)
{
	return make<impl_TransportParametersUpdateHandler<T>>(handler);
}

template <typename T> struct impl_RenderingParametersUpdateHandler : impl::implements<IRenderingParametersUpdateHandler>, T
{
	impl_RenderingParametersUpdateHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Media::Streaming::IMediaRenderer> sender, Windows::Media::Streaming::RenderingParameters arg) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Media::Streaming::IMediaRenderer>(sender), arg); });
	}
};

template <typename T> IRenderingParametersUpdateHandler RenderingParametersUpdateHandler(T handler)
{
	return make<impl_RenderingParametersUpdateHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Connectivity {

template <typename T> struct impl_NetworkStatusChangedEventHandler : impl::implements<INetworkStatusChangedEventHandler>, T
{
	impl_NetworkStatusChangedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<IInspectable> sender) noexcept override
	{
		return call([&]{ (*this)(impl::forward<IInspectable>(sender)); });
	}
};

template <typename T> INetworkStatusChangedEventHandler NetworkStatusChangedEventHandler(T handler)
{
	return make<impl_NetworkStatusChangedEventHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Proximity {

template <typename T> struct impl_MessageReceivedHandler : impl::implements<IMessageReceivedHandler>, T
{
	impl_MessageReceivedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Networking::Proximity::IProximityDevice> sender, abi_arg_in<Windows::Networking::Proximity::IProximityMessage> message) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Networking::Proximity::ProximityDevice>(sender), impl::forward<Windows::Networking::Proximity::ProximityMessage>(message)); });
	}
};

template <typename T> IMessageReceivedHandler MessageReceivedHandler(T handler)
{
	return make<impl_MessageReceivedHandler<T>>(handler);
}

template <typename T> struct impl_MessageTransmittedHandler : impl::implements<IMessageTransmittedHandler>, T
{
	impl_MessageTransmittedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Networking::Proximity::IProximityDevice> sender, long long messageId) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Networking::Proximity::ProximityDevice>(sender), messageId); });
	}
};

template <typename T> IMessageTransmittedHandler MessageTransmittedHandler(T handler)
{
	return make<impl_MessageTransmittedHandler<T>>(handler);
}

template <typename T> struct impl_DeviceArrivedEventHandler : impl::implements<IDeviceArrivedEventHandler>, T
{
	impl_DeviceArrivedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Networking::Proximity::IProximityDevice> sender) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Networking::Proximity::ProximityDevice>(sender)); });
	}
};

template <typename T> IDeviceArrivedEventHandler DeviceArrivedEventHandler(T handler)
{
	return make<impl_DeviceArrivedEventHandler<T>>(handler);
}

template <typename T> struct impl_DeviceDepartedEventHandler : impl::implements<IDeviceDepartedEventHandler>, T
{
	impl_DeviceDepartedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Networking::Proximity::IProximityDevice> sender) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Networking::Proximity::ProximityDevice>(sender)); });
	}
};

template <typename T> IDeviceDepartedEventHandler DeviceDepartedEventHandler(T handler)
{
	return make<impl_DeviceDepartedEventHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace Storage {

template <typename T> struct impl_StreamedFileDataRequestedHandler : impl::implements<IStreamedFileDataRequestedHandler>, T
{
	impl_StreamedFileDataRequestedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Storage::Streams::IOutputStream> stream) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Storage::StreamedFileDataRequest>(stream)); });
	}
};

template <typename T> IStreamedFileDataRequestedHandler StreamedFileDataRequestedHandler(T handler)
{
	return make<impl_StreamedFileDataRequestedHandler<T>>(handler);
}

template <typename T> struct impl_ApplicationDataSetVersionHandler : impl::implements<IApplicationDataSetVersionHandler>, T
{
	impl_ApplicationDataSetVersionHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Storage::ISetVersionRequest> setVersionRequest) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Storage::SetVersionRequest>(setVersionRequest)); });
	}
};

template <typename T> IApplicationDataSetVersionHandler ApplicationDataSetVersionHandler(T handler)
{
	return make<impl_ApplicationDataSetVersionHandler<T>>(handler);
}

}}}

namespace winrt { namespace Windows { namespace System { namespace Threading {

template <typename T> struct impl_TimerElapsedHandler : impl::implements<ITimerElapsedHandler>, T
{
	impl_TimerElapsedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::System::Threading::IThreadPoolTimer> timer) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::System::Threading::ThreadPoolTimer>(timer)); });
	}
};

template <typename T> ITimerElapsedHandler TimerElapsedHandler(T handler)
{
	return make<impl_TimerElapsedHandler<T>>(handler);
}

template <typename T> struct impl_TimerDestroyedHandler : impl::implements<ITimerDestroyedHandler>, T
{
	impl_TimerDestroyedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::System::Threading::IThreadPoolTimer> timer) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::System::Threading::ThreadPoolTimer>(timer)); });
	}
};

template <typename T> ITimerDestroyedHandler TimerDestroyedHandler(T handler)
{
	return make<impl_TimerDestroyedHandler<T>>(handler);
}

template <typename T> struct impl_WorkItemHandler : impl::implements<IWorkItemHandler>, T
{
	impl_WorkItemHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::Foundation::IAsyncAction> operation) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::Foundation::IAsyncAction>(operation)); });
	}
};

template <typename T> IWorkItemHandler WorkItemHandler(T handler)
{
	return make<impl_WorkItemHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace System { namespace Threading { namespace Core {

template <typename T> struct impl_SignalHandler : impl::implements<ISignalHandler>, T
{
	impl_SignalHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::System::Threading::Core::ISignalNotifier> signalNotifier, bool timedOut) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::System::Threading::Core::SignalNotifier>(signalNotifier), timedOut); });
	}
};

template <typename T> ISignalHandler SignalHandler(T handler)
{
	return make<impl_SignalHandler<T>>(handler);
}

}}}}}

namespace winrt { namespace Windows { namespace UI { namespace ApplicationSettings {

template <typename T> struct impl_WebAccountProviderCommandInvokedHandler : impl::implements<IWebAccountProviderCommandInvokedHandler>, T
{
	impl_WebAccountProviderCommandInvokedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::UI::ApplicationSettings::IWebAccountProviderCommand> command) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::UI::ApplicationSettings::WebAccountProviderCommand>(command)); });
	}
};

template <typename T> IWebAccountProviderCommandInvokedHandler WebAccountProviderCommandInvokedHandler(T handler)
{
	return make<impl_WebAccountProviderCommandInvokedHandler<T>>(handler);
}

template <typename T> struct impl_WebAccountCommandInvokedHandler : impl::implements<IWebAccountCommandInvokedHandler>, T
{
	impl_WebAccountCommandInvokedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::UI::ApplicationSettings::IWebAccountCommand> command, abi_arg_in<Windows::UI::ApplicationSettings::IWebAccountInvokedArgs> args) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::UI::ApplicationSettings::WebAccountCommand>(command), impl::forward<Windows::UI::ApplicationSettings::WebAccountInvokedArgs>(args)); });
	}
};

template <typename T> IWebAccountCommandInvokedHandler WebAccountCommandInvokedHandler(T handler)
{
	return make<impl_WebAccountCommandInvokedHandler<T>>(handler);
}

template <typename T> struct impl_CredentialCommandCredentialDeletedHandler : impl::implements<ICredentialCommandCredentialDeletedHandler>, T
{
	impl_CredentialCommandCredentialDeletedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::UI::ApplicationSettings::ICredentialCommand> command) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::UI::ApplicationSettings::CredentialCommand>(command)); });
	}
};

template <typename T> ICredentialCommandCredentialDeletedHandler CredentialCommandCredentialDeletedHandler(T handler)
{
	return make<impl_CredentialCommandCredentialDeletedHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Core {

template <typename T> struct impl_DispatchedHandler : impl::implements<IDispatchedHandler>, T
{
	impl_DispatchedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke() noexcept override
	{
		return call([&]{ (*this)(); });
	}
};

template <typename T> IDispatchedHandler DispatchedHandler(T handler)
{
	return make<impl_DispatchedHandler<T>>(handler);
}

template <typename T> struct impl_IdleDispatchedHandler : impl::implements<IIdleDispatchedHandler>, T
{
	impl_IdleDispatchedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::UI::Core::IIdleDispatchedHandlerArgs> e) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::UI::Core::IdleDispatchedHandlerArgs>(e)); });
	}
};

template <typename T> IIdleDispatchedHandler IdleDispatchedHandler(T handler)
{
	return make<impl_IdleDispatchedHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Popups {

template <typename T> struct impl_UICommandInvokedHandler : impl::implements<IUICommandInvokedHandler>, T
{
	impl_UICommandInvokedHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<Windows::UI::Popups::IUICommand> command) noexcept override
	{
		return call([&]{ (*this)(impl::forward<Windows::UI::Popups::IUICommand>(command)); });
	}
};

template <typename T> IUICommandInvokedHandler UICommandInvokedHandler(T handler)
{
	return make<impl_UICommandInvokedHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace WebUI {

template <typename T> struct impl_ActivatedEventHandler : impl::implements<IActivatedEventHandler>, T
{
	impl_ActivatedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<IInspectable> sender, abi_arg_in<Windows::ApplicationModel::Activation::IActivatedEventArgs> eventArgs) noexcept override
	{
		return call([&]{ (*this)(impl::forward<IInspectable>(sender), impl::forward<Windows::ApplicationModel::Activation::IActivatedEventArgs>(eventArgs)); });
	}
};

template <typename T> IActivatedEventHandler ActivatedEventHandler(T handler)
{
	return make<impl_ActivatedEventHandler<T>>(handler);
}

template <typename T> struct impl_ResumingEventHandler : impl::implements<IResumingEventHandler>, T
{
	impl_ResumingEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<IInspectable> sender) noexcept override
	{
		return call([&]{ (*this)(impl::forward<IInspectable>(sender)); });
	}
};

template <typename T> IResumingEventHandler ResumingEventHandler(T handler)
{
	return make<impl_ResumingEventHandler<T>>(handler);
}

template <typename T> struct impl_SuspendingEventHandler : impl::implements<ISuspendingEventHandler>, T
{
	impl_SuspendingEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<IInspectable> sender, abi_arg_in<Windows::ApplicationModel::ISuspendingEventArgs> e) noexcept override
	{
		return call([&]{ (*this)(impl::forward<IInspectable>(sender), impl::forward<Windows::ApplicationModel::ISuspendingEventArgs>(e)); });
	}
};

template <typename T> ISuspendingEventHandler SuspendingEventHandler(T handler)
{
	return make<impl_SuspendingEventHandler<T>>(handler);
}

template <typename T> struct impl_NavigatedEventHandler : impl::implements<INavigatedEventHandler>, T
{
	impl_NavigatedEventHandler(T handler) : T(handler) {}

	virtual HRESULT __stdcall abi_Invoke(abi_arg_in<IInspectable> sender, abi_arg_in<Windows::UI::WebUI::IWebUINavigatedEventArgs> e) noexcept override
	{
		return call([&]{ (*this)(impl::forward<IInspectable>(sender), impl::forward<Windows::UI::WebUI::IWebUINavigatedEventArgs>(e)); });
	}
};

template <typename T> INavigatedEventHandler NavigatedEventHandler(T handler)
{
	return make<impl_NavigatedEventHandler<T>>(handler);
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel {

template <typename T> String impl_IAppDisplayInfo<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IAppDisplayInfo<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IAppDisplayInfo<T>::GetLogo(Windows::Foundation::Size const & size) const
{
	Windows::Storage::Streams::RandomAccessStreamReference value = nullptr;
	check(shim()->abi_GetLogo(size, put(value)));
	return value;
}

template <typename T> String impl_IAppInfo<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IAppInfo<T>::AppUserModelId() const
{
	String value;
	check(shim()->get_AppUserModelId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::AppDisplayInfo impl_IAppInfo<T>::DisplayInfo() const
{
	Windows::ApplicationModel::AppDisplayInfo value = nullptr;
	check(shim()->get_DisplayInfo(put(value)));
	return value;
}

template <typename T> String impl_IAppInfo<T>::PackageFamilyName() const
{
	String value;
	check(shim()->get_PackageFamilyName(put(value)));
	return value;
}

template <typename T> void impl_ISuspendingDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::ApplicationModel::SuspendingDeferral impl_ISuspendingOperation<T>::GetDeferral() const
{
	Windows::ApplicationModel::SuspendingDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> Windows::Foundation::DateTime impl_ISuspendingOperation<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Deadline(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::SuspendingOperation impl_ISuspendingEventArgs<T>::SuspendingOperation() const
{
	Windows::ApplicationModel::SuspendingOperation value = nullptr;
	check(shim()->get_SuspendingOperation(put(value)));
	return value;
}

template <typename T> String impl_IPackageIdWithMetadata<T>::ProductId() const
{
	String value;
	check(shim()->get_ProductId(put(value)));
	return value;
}

template <typename T> String impl_IPackageIdWithMetadata<T>::Author() const
{
	String value;
	check(shim()->get_Author(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPackageWithMetadata<T>::InstallDate() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_InstallDate(&value));
	return value;
}

template <typename T> String impl_IPackageWithMetadata<T>::GetThumbnailToken() const
{
	String value;
	check(shim()->abi_GetThumbnailToken(put(value)));
	return value;
}

template <typename T> void impl_IPackageWithMetadata<T>::Launch(StringReference const & parameters) const
{
	check(shim()->abi_Launch(get(parameters)));
}

template <typename T> bool impl_IPackageStatus<T>::VerifyIsOK() const
{
	bool value = {};
	check(shim()->abi_VerifyIsOK(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::NotAvailable() const
{
	bool value = {};
	check(shim()->get_NotAvailable(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::PackageOffline() const
{
	bool value = {};
	check(shim()->get_PackageOffline(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::DataOffline() const
{
	bool value = {};
	check(shim()->get_DataOffline(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::Disabled() const
{
	bool value = {};
	check(shim()->get_Disabled(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::NeedsRemediation() const
{
	bool value = {};
	check(shim()->get_NeedsRemediation(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::LicenseIssue() const
{
	bool value = {};
	check(shim()->get_LicenseIssue(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::Modified() const
{
	bool value = {};
	check(shim()->get_Modified(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::Tampered() const
{
	bool value = {};
	check(shim()->get_Tampered(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::DependencyIssue() const
{
	bool value = {};
	check(shim()->get_DependencyIssue(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::Servicing() const
{
	bool value = {};
	check(shim()->get_Servicing(put(value)));
	return value;
}

template <typename T> bool impl_IPackageStatus<T>::DeploymentInProgress() const
{
	bool value = {};
	check(shim()->get_DeploymentInProgress(put(value)));
	return value;
}

template <typename T> String impl_IPackageId<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::PackageVersion impl_IPackageId<T>::Version() const
{
	Windows::ApplicationModel::PackageVersion value = {};
	check(shim()->get_Version(&value));
	return value;
}

template <typename T> Windows::System::ProcessorArchitecture impl_IPackageId<T>::Architecture() const
{
	Windows::System::ProcessorArchitecture value = {};
	check(shim()->get_Architecture(&value));
	return value;
}

template <typename T> String impl_IPackageId<T>::ResourceId() const
{
	String value;
	check(shim()->get_ResourceId(put(value)));
	return value;
}

template <typename T> String impl_IPackageId<T>::Publisher() const
{
	String value;
	check(shim()->get_Publisher(put(value)));
	return value;
}

template <typename T> String impl_IPackageId<T>::PublisherId() const
{
	String value;
	check(shim()->get_PublisherId(put(value)));
	return value;
}

template <typename T> String impl_IPackageId<T>::FullName() const
{
	String value;
	check(shim()->get_FullName(put(value)));
	return value;
}

template <typename T> String impl_IPackageId<T>::FamilyName() const
{
	String value;
	check(shim()->get_FamilyName(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::PackageId impl_IPackage<T>::Id() const
{
	Windows::ApplicationModel::PackageId value = nullptr;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IPackage<T>::InstalledLocation() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_InstalledLocation(put(value)));
	return value;
}

template <typename T> bool impl_IPackage<T>::IsFramework() const
{
	bool value = {};
	check(shim()->get_IsFramework(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Package> impl_IPackage<T>::Dependencies() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Package> value;
	check(shim()->get_Dependencies(put(value)));
	return value;
}

template <typename T> String impl_IPackage2<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IPackage2<T>::PublisherDisplayName() const
{
	String value;
	check(shim()->get_PublisherDisplayName(put(value)));
	return value;
}

template <typename T> String impl_IPackage2<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IPackage2<T>::Logo() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Logo(put(value)));
	return value;
}

template <typename T> bool impl_IPackage2<T>::IsResourcePackage() const
{
	bool value = {};
	check(shim()->get_IsResourcePackage(put(value)));
	return value;
}

template <typename T> bool impl_IPackage2<T>::IsBundle() const
{
	bool value = {};
	check(shim()->get_IsBundle(put(value)));
	return value;
}

template <typename T> bool impl_IPackage2<T>::IsDevelopmentMode() const
{
	bool value = {};
	check(shim()->get_IsDevelopmentMode(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::PackageStatus impl_IPackage3<T>::Status() const
{
	Windows::ApplicationModel::PackageStatus value = nullptr;
	check(shim()->get_Status(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPackage3<T>::InstalledDate() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_InstalledDate(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::AppListEntry>> impl_IPackage3<T>::GetAppListEntriesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::AppListEntry>> operation;
	check(shim()->abi_GetAppListEntriesAsync(put(operation)));
	return operation;
}

template <typename T> Windows::ApplicationModel::Package impl_IPackageStatics<T>::Current() const
{
	Windows::ApplicationModel::Package value = nullptr;
	check(shim()->get_Current(put(value)));
	return value;
}

template <typename T> bool impl_IDesignModeStatics<T>::DesignModeEnabled() const
{
	bool value = {};
	check(shim()->get_DesignModeEnabled(put(value)));
	return value;
}

}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Activation {

template <typename T> Windows::Foundation::Rect impl_ISplashScreen<T>::ImageLocation() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_ImageLocation(&value));
	return value;
}

template <typename T> long long impl_ISplashScreen<T>::Dismissed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen, IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_Dismissed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ISplashScreen<T>::Dismissed(F handler) const
{
	return Dismissed(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Activation::SplashScreen, IInspectable>(handler));
}

template <typename T> void impl_ISplashScreen<T>::Dismissed(long long const cookie) const
{
	check(shim()->remove_Dismissed(cookie));
}

template <typename T> Windows::ApplicationModel::Activation::ActivationKind impl_IActivatedEventArgs<T>::Kind() const
{
	Windows::ApplicationModel::Activation::ActivationKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Activation::ApplicationExecutionState impl_IActivatedEventArgs<T>::PreviousExecutionState() const
{
	Windows::ApplicationModel::Activation::ApplicationExecutionState value = {};
	check(shim()->get_PreviousExecutionState(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Activation::SplashScreen impl_IActivatedEventArgs<T>::SplashScreen() const
{
	Windows::ApplicationModel::Activation::SplashScreen value = nullptr;
	check(shim()->get_SplashScreen(put(value)));
	return value;
}

template <typename T> int impl_IApplicationViewActivatedEventArgs<T>::CurrentlyShownApplicationViewId() const
{
	int value = {};
	check(shim()->get_CurrentlyShownApplicationViewId(&value));
	return value;
}

template <typename T> Windows::UI::ViewManagement::ActivationViewSwitcher impl_IViewSwitcherProvider<T>::ViewSwitcher() const
{
	Windows::UI::ViewManagement::ActivationViewSwitcher value = nullptr;
	check(shim()->get_ViewSwitcher(put(value)));
	return value;
}

template <typename T> bool impl_IPrelaunchActivatedEventArgs<T>::PrelaunchActivated() const
{
	bool value = {};
	check(shim()->get_PrelaunchActivated(put(value)));
	return value;
}

template <typename T> String impl_ILaunchActivatedEventArgs<T>::Arguments() const
{
	String value;
	check(shim()->get_Arguments(put(value)));
	return value;
}

template <typename T> String impl_ILaunchActivatedEventArgs<T>::TileId() const
{
	String value;
	check(shim()->get_TileId(put(value)));
	return value;
}

template <typename T> String impl_ISearchActivatedEventArgs<T>::QueryText() const
{
	String value;
	check(shim()->get_QueryText(put(value)));
	return value;
}

template <typename T> String impl_ISearchActivatedEventArgs<T>::Language() const
{
	String value;
	check(shim()->get_Language(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails impl_ISearchActivatedEventArgsWithLinguisticDetails<T>::LinguisticDetails() const
{
	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails value = nullptr;
	check(shim()->get_LinguisticDetails(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::ShareTarget::ShareOperation impl_IShareTargetActivatedEventArgs<T>::ShareOperation() const
{
	Windows::ApplicationModel::DataTransfer::ShareTarget::ShareOperation value = nullptr;
	check(shim()->get_ShareOperation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem> impl_IFileActivatedEventArgs<T>::Files() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem> value;
	check(shim()->get_Files(put(value)));
	return value;
}

template <typename T> String impl_IFileActivatedEventArgs<T>::Verb() const
{
	String value;
	check(shim()->get_Verb(put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFileQueryResult impl_IFileActivatedEventArgsWithNeighboringFiles<T>::NeighboringFilesQuery() const
{
	Windows::Storage::Search::StorageFileQueryResult value = nullptr;
	check(shim()->get_NeighboringFilesQuery(put(value)));
	return value;
}

template <typename T> String impl_IFileActivatedEventArgsWithCallerPackageFamilyName<T>::CallerPackageFamilyName() const
{
	String value;
	check(shim()->get_CallerPackageFamilyName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IProtocolActivatedEventArgs<T>::Uri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> String impl_IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData<T>::CallerPackageFamilyName() const
{
	String value;
	check(shim()->get_CallerPackageFamilyName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_IProtocolActivatedEventArgsWithCallerPackageFamilyNameAndData<T>::Data() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> Windows::System::ProtocolForResultsOperation impl_IProtocolForResultsActivatedEventArgs<T>::ProtocolForResultsOperation() const
{
	Windows::System::ProtocolForResultsOperation value = nullptr;
	check(shim()->get_ProtocolForResultsOperation(put(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::FileOpenPickerUI impl_IFileOpenPickerActivatedEventArgs<T>::FileOpenPickerUI() const
{
	Windows::Storage::Pickers::Provider::FileOpenPickerUI value = nullptr;
	check(shim()->get_FileOpenPickerUI(put(value)));
	return value;
}

template <typename T> String impl_IFileOpenPickerActivatedEventArgs2<T>::CallerPackageFamilyName() const
{
	String value;
	check(shim()->get_CallerPackageFamilyName(put(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::FileSavePickerUI impl_IFileSavePickerActivatedEventArgs<T>::FileSavePickerUI() const
{
	Windows::Storage::Pickers::Provider::FileSavePickerUI value = nullptr;
	check(shim()->get_FileSavePickerUI(put(value)));
	return value;
}

template <typename T> String impl_IFileSavePickerActivatedEventArgs2<T>::CallerPackageFamilyName() const
{
	String value;
	check(shim()->get_CallerPackageFamilyName(put(value)));
	return value;
}

template <typename T> String impl_IFileSavePickerActivatedEventArgs2<T>::EnterpriseId() const
{
	String value;
	check(shim()->get_EnterpriseId(put(value)));
	return value;
}

template <typename T> Windows::Storage::Provider::CachedFileUpdaterUI impl_ICachedFileUpdaterActivatedEventArgs<T>::CachedFileUpdaterUI() const
{
	Windows::Storage::Provider::CachedFileUpdaterUI value = nullptr;
	check(shim()->get_CachedFileUpdaterUI(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Provider::ContactPickerUI impl_IContactPickerActivatedEventArgs<T>::ContactPickerUI() const
{
	Windows::ApplicationModel::Contacts::Provider::ContactPickerUI value = nullptr;
	check(shim()->get_ContactPickerUI(put(value)));
	return value;
}

template <typename T> String impl_IDeviceActivatedEventArgs<T>::DeviceInformationId() const
{
	String value;
	check(shim()->get_DeviceInformationId(put(value)));
	return value;
}

template <typename T> String impl_IDeviceActivatedEventArgs<T>::Verb() const
{
	String value;
	check(shim()->get_Verb(put(value)));
	return value;
}

template <typename T> Windows::Devices::Printers::Extensions::PrintTaskConfiguration impl_IPrintTaskSettingsActivatedEventArgs<T>::Configuration() const
{
	Windows::Devices::Printers::Extensions::PrintTaskConfiguration value = nullptr;
	check(shim()->get_Configuration(put(value)));
	return value;
}

template <typename T> Windows::Devices::Printers::Extensions::Print3DWorkflow impl_IPrint3DWorkflowActivatedEventArgs<T>::Workflow() const
{
	Windows::Devices::Printers::Extensions::Print3DWorkflow value = nullptr;
	check(shim()->get_Workflow(put(value)));
	return value;
}

template <typename T> IInspectable impl_ICameraSettingsActivatedEventArgs<T>::VideoDeviceController() const
{
	IInspectable value;
	check(shim()->get_VideoDeviceController(put(value)));
	return value;
}

template <typename T> IInspectable impl_ICameraSettingsActivatedEventArgs<T>::VideoDeviceExtension() const
{
	IInspectable value;
	check(shim()->get_VideoDeviceExtension(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderActivatedEventArgs<T>::Verb() const
{
	String value;
	check(shim()->get_Verb(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentsProvider::AddAppointmentOperation impl_IAppointmentsProviderAddAppointmentActivatedEventArgs<T>::AddAppointmentOperation() const
{
	Windows::ApplicationModel::Appointments::AppointmentsProvider::AddAppointmentOperation value = nullptr;
	check(shim()->get_AddAppointmentOperation(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentsProvider::ReplaceAppointmentOperation impl_IAppointmentsProviderReplaceAppointmentActivatedEventArgs<T>::ReplaceAppointmentOperation() const
{
	Windows::ApplicationModel::Appointments::AppointmentsProvider::ReplaceAppointmentOperation value = nullptr;
	check(shim()->get_ReplaceAppointmentOperation(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentsProvider::RemoveAppointmentOperation impl_IAppointmentsProviderRemoveAppointmentActivatedEventArgs<T>::RemoveAppointmentOperation() const
{
	Windows::ApplicationModel::Appointments::AppointmentsProvider::RemoveAppointmentOperation value = nullptr;
	check(shim()->get_RemoveAppointmentOperation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs<T>::InstanceStartDate() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_InstanceStartDate(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs<T>::LocalId() const
{
	String value;
	check(shim()->get_LocalId(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderShowAppointmentDetailsActivatedEventArgs<T>::RoamingId() const
{
	String value;
	check(shim()->get_RoamingId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IAppointmentsProviderShowTimeFrameActivatedEventArgs<T>::TimeToShow() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_TimeToShow(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IAppointmentsProviderShowTimeFrameActivatedEventArgs<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Duration(&value));
	return value;
}

template <typename T> String impl_IContactActivatedEventArgs<T>::Verb() const
{
	String value;
	check(shim()->get_Verb(put(value)));
	return value;
}

template <typename T> String impl_IContactCallActivatedEventArgs<T>::ServiceId() const
{
	String value;
	check(shim()->get_ServiceId(put(value)));
	return value;
}

template <typename T> String impl_IContactCallActivatedEventArgs<T>::ServiceUserId() const
{
	String value;
	check(shim()->get_ServiceUserId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactCallActivatedEventArgs<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value = nullptr;
	check(shim()->get_Contact(put(value)));
	return value;
}

template <typename T> String impl_IContactMessageActivatedEventArgs<T>::ServiceId() const
{
	String value;
	check(shim()->get_ServiceId(put(value)));
	return value;
}

template <typename T> String impl_IContactMessageActivatedEventArgs<T>::ServiceUserId() const
{
	String value;
	check(shim()->get_ServiceUserId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactMessageActivatedEventArgs<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value = nullptr;
	check(shim()->get_Contact(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactAddress impl_IContactMapActivatedEventArgs<T>::Address() const
{
	Windows::ApplicationModel::Contacts::ContactAddress value = nullptr;
	check(shim()->get_Address(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactMapActivatedEventArgs<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value = nullptr;
	check(shim()->get_Contact(put(value)));
	return value;
}

template <typename T> String impl_IContactPostActivatedEventArgs<T>::ServiceId() const
{
	String value;
	check(shim()->get_ServiceId(put(value)));
	return value;
}

template <typename T> String impl_IContactPostActivatedEventArgs<T>::ServiceUserId() const
{
	String value;
	check(shim()->get_ServiceUserId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactPostActivatedEventArgs<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value = nullptr;
	check(shim()->get_Contact(put(value)));
	return value;
}

template <typename T> String impl_IContactVideoCallActivatedEventArgs<T>::ServiceId() const
{
	String value;
	check(shim()->get_ServiceId(put(value)));
	return value;
}

template <typename T> String impl_IContactVideoCallActivatedEventArgs<T>::ServiceUserId() const
{
	String value;
	check(shim()->get_ServiceUserId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactVideoCallActivatedEventArgs<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value = nullptr;
	check(shim()->get_Contact(put(value)));
	return value;
}

template <typename T> String impl_IContactsProviderActivatedEventArgs<T>::Verb() const
{
	String value;
	check(shim()->get_Verb(put(value)));
	return value;
}

template <typename T> IInspectable impl_IRestrictedLaunchActivatedEventArgs<T>::SharedContext() const
{
	IInspectable value;
	check(shim()->get_SharedContext(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::LockScreenCallUI impl_ILockScreenCallActivatedEventArgs<T>::CallUI() const
{
	Windows::ApplicationModel::Calls::LockScreenCallUI value = nullptr;
	check(shim()->get_CallUI(put(value)));
	return value;
}

template <typename T> IInspectable impl_ILockScreenActivatedEventArgs<T>::Info() const
{
	IInspectable value;
	check(shim()->get_Info(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_IContinuationActivatedEventArgs<T>::ContinuationData() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check(shim()->get_ContinuationData(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile> impl_IFileOpenPickerContinuationEventArgs<T>::Files() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile> value;
	check(shim()->get_Files(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFile impl_IFileSavePickerContinuationEventArgs<T>::File() const
{
	Windows::Storage::StorageFile value = nullptr;
	check(shim()->get_File(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IFolderPickerContinuationEventArgs<T>::Folder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_Folder(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation impl_IWebAccountProviderActivatedEventArgs<T>::Operation() const
{
	Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation value;
	check(shim()->get_Operation(put(value)));
	return value;
}

template <typename T> String impl_IToastNotificationActivatedEventArgs<T>::Argument() const
{
	String argument;
	check(shim()->get_Argument(put(argument)));
	return argument;
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_IToastNotificationActivatedEventArgs<T>::UserInput() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check(shim()->get_UserInput(put(value)));
	return value;
}

template <typename T> String impl_IDialReceiverActivatedEventArgs<T>::AppName() const
{
	String value;
	check(shim()->get_AppName(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IDevicePairingActivatedEventArgs<T>::DeviceInformation() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check(shim()->get_DeviceInformation(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionResult impl_IVoiceCommandActivatedEventArgs<T>::Result() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionResult value = nullptr;
	check(shim()->get_Result(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace AppService {

template <typename T> void impl_IAppServiceDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::ApplicationModel::AppService::AppServiceClosedStatus impl_IAppServiceClosedEventArgs<T>::Status() const
{
	Windows::ApplicationModel::AppService::AppServiceClosedStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::AppService::AppServiceRequest impl_IAppServiceRequestReceivedEventArgs<T>::Request() const
{
	Windows::ApplicationModel::AppService::AppServiceRequest value = nullptr;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::AppService::AppServiceDeferral impl_IAppServiceRequestReceivedEventArgs<T>::GetDeferral() const
{
	Windows::ApplicationModel::AppService::AppServiceDeferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> String impl_IAppServiceTriggerDetails<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IAppServiceTriggerDetails<T>::CallerPackageFamilyName() const
{
	String value;
	check(shim()->get_CallerPackageFamilyName(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::AppService::AppServiceConnection impl_IAppServiceTriggerDetails<T>::AppServiceConnection() const
{
	Windows::ApplicationModel::AppService::AppServiceConnection value = nullptr;
	check(shim()->get_AppServiceConnection(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_IAppServiceRequest<T>::Message() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check(shim()->get_Message(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::AppService::AppServiceResponseStatus> impl_IAppServiceRequest<T>::SendResponseAsync(Windows::Foundation::Collections::ValueSet const & message) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::AppService::AppServiceResponseStatus> operation;
	check(shim()->abi_SendResponseAsync(get(message), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_IAppServiceResponse<T>::Message() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check(shim()->get_Message(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::AppService::AppServiceResponseStatus impl_IAppServiceResponse<T>::Status() const
{
	Windows::ApplicationModel::AppService::AppServiceResponseStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> impl_IAppServiceCatalogStatics<T>::FindAppServiceProvidersAsync(StringReference const & appServiceName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> operation;
	check(shim()->abi_FindAppServiceProvidersAsync(get(appServiceName), put(operation)));
	return operation;
}

template <typename T> String impl_IAppServiceConnection<T>::AppServiceName() const
{
	String value;
	check(shim()->get_AppServiceName(put(value)));
	return value;
}

template <typename T> void impl_IAppServiceConnection<T>::AppServiceName(StringReference const & value) const
{
	check(shim()->put_AppServiceName(get(value)));
}

template <typename T> String impl_IAppServiceConnection<T>::PackageFamilyName() const
{
	String value;
	check(shim()->get_PackageFamilyName(put(value)));
	return value;
}

template <typename T> void impl_IAppServiceConnection<T>::PackageFamilyName(StringReference const & value) const
{
	check(shim()->put_PackageFamilyName(get(value)));
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::AppService::AppServiceConnectionStatus> impl_IAppServiceConnection<T>::OpenAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::AppService::AppServiceConnectionStatus> operation;
	check(shim()->abi_OpenAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::AppService::AppServiceResponse> impl_IAppServiceConnection<T>::SendMessageAsync(Windows::Foundation::Collections::ValueSet const & message) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::AppService::AppServiceResponse> operation;
	check(shim()->abi_SendMessageAsync(get(message), put(operation)));
	return operation;
}

template <typename T> long long impl_IAppServiceConnection<T>::RequestReceived(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::AppService::AppServiceConnection, Windows::ApplicationModel::AppService::AppServiceRequestReceivedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_RequestReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAppServiceConnection<T>::RequestReceived(F handler) const
{
	return RequestReceived(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::AppService::AppServiceConnection, Windows::ApplicationModel::AppService::AppServiceRequestReceivedEventArgs>(handler));
}

template <typename T> void impl_IAppServiceConnection<T>::RequestReceived(long long const token) const
{
	check(shim()->remove_RequestReceived(token));
}

template <typename T> long long impl_IAppServiceConnection<T>::ServiceClosed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::AppService::AppServiceConnection, Windows::ApplicationModel::AppService::AppServiceClosedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ServiceClosed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAppServiceConnection<T>::ServiceClosed(F handler) const
{
	return ServiceClosed(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::AppService::AppServiceConnection, Windows::ApplicationModel::AppService::AppServiceClosedEventArgs>(handler));
}

template <typename T> void impl_IAppServiceConnection<T>::ServiceClosed(long long const token) const
{
	check(shim()->remove_ServiceClosed(token));
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Appointments {

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_ShowAddAppointmentAsync(get(appointment), selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_ShowAddAppointmentWithPlacementAsync(get(appointment), selection, preferredPlacement, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowReplaceAppointmentAsync(StringReference const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_ShowReplaceAppointmentAsync(get(appointmentId), get(appointment), selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowReplaceAppointmentAsync(StringReference const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_ShowReplaceAppointmentWithPlacementAsync(get(appointmentId), get(appointment), selection, preferredPlacement, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics<T>::ShowReplaceAppointmentAsync(StringReference const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_ShowReplaceAppointmentWithPlacementAndDateAsync(get(appointmentId), get(appointment), selection, preferredPlacement, instanceStartDate, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentManagerStatics<T>::ShowRemoveAppointmentAsync(StringReference const & appointmentId, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_ShowRemoveAppointmentAsync(get(appointmentId), selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentManagerStatics<T>::ShowRemoveAppointmentAsync(StringReference const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_ShowRemoveAppointmentWithPlacementAsync(get(appointmentId), selection, preferredPlacement, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentManagerStatics<T>::ShowRemoveAppointmentAsync(StringReference const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_ShowRemoveAppointmentWithPlacementAndDateAsync(get(appointmentId), selection, preferredPlacement, instanceStartDate, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentManagerStatics<T>::ShowTimeFrameAsync(Windows::Foundation::DateTime const & timeToShow, Windows::Foundation::TimeSpan const & duration) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check(shim()->abi_ShowTimeFrameAsync(timeToShow, duration, put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentManagerStatics2<T>::ShowAppointmentDetailsAsync(StringReference const & appointmentId) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check(shim()->abi_ShowAppointmentDetailsAsync(get(appointmentId), put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentManagerStatics2<T>::ShowAppointmentDetailsAsync(StringReference const & appointmentId, Windows::Foundation::DateTime const & instanceStartDate) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check(shim()->abi_ShowAppointmentDetailsWithDateAsync(get(appointmentId), instanceStartDate, put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentManagerStatics2<T>::ShowEditNewAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_ShowEditNewAppointmentAsync(get(appointment), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentStore> impl_IAppointmentManagerStatics2<T>::RequestStoreAsync(Windows::ApplicationModel::Appointments::AppointmentStoreAccessType const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentStore> operation;
	check(shim()->abi_RequestStoreAsync(options, put(operation)));
	return operation;
}

template <typename T> String impl_IAppointmentParticipant<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentParticipant<T>::DisplayName(StringReference const & value) const
{
	check(shim()->put_DisplayName(get(value)));
}

template <typename T> String impl_IAppointmentParticipant<T>::Address() const
{
	String value;
	check(shim()->get_Address(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentParticipant<T>::Address(StringReference const & value) const
{
	check(shim()->put_Address(get(value)));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentParticipantRole impl_IAppointmentInvitee<T>::Role() const
{
	Windows::ApplicationModel::Appointments::AppointmentParticipantRole value = {};
	check(shim()->get_Role(&value));
	return value;
}

template <typename T> void impl_IAppointmentInvitee<T>::Role(Windows::ApplicationModel::Appointments::AppointmentParticipantRole const value) const
{
	check(shim()->put_Role(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentParticipantResponse impl_IAppointmentInvitee<T>::Response() const
{
	Windows::ApplicationModel::Appointments::AppointmentParticipantResponse value = {};
	check(shim()->get_Response(&value));
	return value;
}

template <typename T> void impl_IAppointmentInvitee<T>::Response(Windows::ApplicationModel::Appointments::AppointmentParticipantResponse const value) const
{
	check(shim()->put_Response(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentRecurrenceUnit impl_IAppointmentRecurrence<T>::Unit() const
{
	Windows::ApplicationModel::Appointments::AppointmentRecurrenceUnit value = {};
	check(shim()->get_Unit(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Unit(Windows::ApplicationModel::Appointments::AppointmentRecurrenceUnit const value) const
{
	check(shim()->put_Unit(value));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IAppointmentRecurrence<T>::Occurrences() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_Occurrences(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Occurrences(Windows::Foundation::IReference<unsigned> const & value) const
{
	check(shim()->put_Occurrences(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IAppointmentRecurrence<T>::Until() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_Until(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Until(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_Until(get(value)));
}

template <typename T> unsigned impl_IAppointmentRecurrence<T>::Interval() const
{
	unsigned value = {};
	check(shim()->get_Interval(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Interval(unsigned const value) const
{
	check(shim()->put_Interval(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentDaysOfWeek impl_IAppointmentRecurrence<T>::DaysOfWeek() const
{
	Windows::ApplicationModel::Appointments::AppointmentDaysOfWeek value = {};
	check(shim()->get_DaysOfWeek(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::DaysOfWeek(Windows::ApplicationModel::Appointments::AppointmentDaysOfWeek const value) const
{
	check(shim()->put_DaysOfWeek(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentWeekOfMonth impl_IAppointmentRecurrence<T>::WeekOfMonth() const
{
	Windows::ApplicationModel::Appointments::AppointmentWeekOfMonth value = {};
	check(shim()->get_WeekOfMonth(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::WeekOfMonth(Windows::ApplicationModel::Appointments::AppointmentWeekOfMonth const value) const
{
	check(shim()->put_WeekOfMonth(value));
}

template <typename T> unsigned impl_IAppointmentRecurrence<T>::Month() const
{
	unsigned value = {};
	check(shim()->get_Month(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Month(unsigned const value) const
{
	check(shim()->put_Month(value));
}

template <typename T> unsigned impl_IAppointmentRecurrence<T>::Day() const
{
	unsigned value = {};
	check(shim()->get_Day(&value));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence<T>::Day(unsigned const value) const
{
	check(shim()->put_Day(value));
}

template <typename T> Windows::ApplicationModel::Appointments::RecurrenceType impl_IAppointmentRecurrence2<T>::RecurrenceType() const
{
	Windows::ApplicationModel::Appointments::RecurrenceType value = {};
	check(shim()->get_RecurrenceType(&value));
	return value;
}

template <typename T> String impl_IAppointmentRecurrence2<T>::TimeZone() const
{
	String value;
	check(shim()->get_TimeZone(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentRecurrence2<T>::TimeZone(StringReference const & value) const
{
	check(shim()->put_TimeZone(get(value)));
}

template <typename T> String impl_IAppointmentRecurrence3<T>::CalendarIdentifier() const
{
	String value;
	check(shim()->get_CalendarIdentifier(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IAppointment<T>::StartTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_StartTime(&value));
	return value;
}

template <typename T> void impl_IAppointment<T>::StartTime(Windows::Foundation::DateTime const & value) const
{
	check(shim()->put_StartTime(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IAppointment<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Duration(&value));
	return value;
}

template <typename T> void impl_IAppointment<T>::Duration(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_Duration(value));
}

template <typename T> String impl_IAppointment<T>::Location() const
{
	String value;
	check(shim()->get_Location(put(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Location(StringReference const & value) const
{
	check(shim()->put_Location(get(value)));
}

template <typename T> String impl_IAppointment<T>::Subject() const
{
	String value;
	check(shim()->get_Subject(put(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Subject(StringReference const & value) const
{
	check(shim()->put_Subject(get(value)));
}

template <typename T> String impl_IAppointment<T>::Details() const
{
	String value;
	check(shim()->get_Details(put(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Details(StringReference const & value) const
{
	check(shim()->put_Details(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IAppointment<T>::Reminder() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_Reminder(put(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Reminder(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_Reminder(get(value)));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentOrganizer impl_IAppointment<T>::Organizer() const
{
	Windows::ApplicationModel::Appointments::AppointmentOrganizer value = nullptr;
	check(shim()->get_Organizer(put(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Organizer(Windows::ApplicationModel::Appointments::AppointmentOrganizer const & value) const
{
	check(shim()->put_Organizer(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Appointments::AppointmentInvitee> impl_IAppointment<T>::Invitees() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Appointments::AppointmentInvitee> value;
	check(shim()->get_Invitees(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentRecurrence impl_IAppointment<T>::Recurrence() const
{
	Windows::ApplicationModel::Appointments::AppointmentRecurrence value = nullptr;
	check(shim()->get_Recurrence(put(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Recurrence(Windows::ApplicationModel::Appointments::AppointmentRecurrence const & value) const
{
	check(shim()->put_Recurrence(get(value)));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentBusyStatus impl_IAppointment<T>::BusyStatus() const
{
	Windows::ApplicationModel::Appointments::AppointmentBusyStatus value = {};
	check(shim()->get_BusyStatus(&value));
	return value;
}

template <typename T> void impl_IAppointment<T>::BusyStatus(Windows::ApplicationModel::Appointments::AppointmentBusyStatus const value) const
{
	check(shim()->put_BusyStatus(value));
}

template <typename T> bool impl_IAppointment<T>::AllDay() const
{
	bool value = {};
	check(shim()->get_AllDay(put(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::AllDay(bool const value) const
{
	check(shim()->put_AllDay(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentSensitivity impl_IAppointment<T>::Sensitivity() const
{
	Windows::ApplicationModel::Appointments::AppointmentSensitivity value = {};
	check(shim()->get_Sensitivity(&value));
	return value;
}

template <typename T> void impl_IAppointment<T>::Sensitivity(Windows::ApplicationModel::Appointments::AppointmentSensitivity const value) const
{
	check(shim()->put_Sensitivity(value));
}

template <typename T> Windows::Foundation::Uri impl_IAppointment<T>::Uri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> void impl_IAppointment<T>::Uri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Uri(get(value)));
}

template <typename T> String impl_IAppointment2<T>::LocalId() const
{
	String value;
	check(shim()->get_LocalId(put(value)));
	return value;
}

template <typename T> String impl_IAppointment2<T>::CalendarId() const
{
	String value;
	check(shim()->get_CalendarId(put(value)));
	return value;
}

template <typename T> String impl_IAppointment2<T>::RoamingId() const
{
	String value;
	check(shim()->get_RoamingId(put(value)));
	return value;
}

template <typename T> void impl_IAppointment2<T>::RoamingId(StringReference const & value) const
{
	check(shim()->put_RoamingId(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IAppointment2<T>::OriginalStartTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_OriginalStartTime(put(value)));
	return value;
}

template <typename T> bool impl_IAppointment2<T>::IsResponseRequested() const
{
	bool value = {};
	check(shim()->get_IsResponseRequested(put(value)));
	return value;
}

template <typename T> void impl_IAppointment2<T>::IsResponseRequested(bool const value) const
{
	check(shim()->put_IsResponseRequested(value));
}

template <typename T> bool impl_IAppointment2<T>::AllowNewTimeProposal() const
{
	bool value = {};
	check(shim()->get_AllowNewTimeProposal(put(value)));
	return value;
}

template <typename T> void impl_IAppointment2<T>::AllowNewTimeProposal(bool const value) const
{
	check(shim()->put_AllowNewTimeProposal(value));
}

template <typename T> String impl_IAppointment2<T>::OnlineMeetingLink() const
{
	String value;
	check(shim()->get_OnlineMeetingLink(put(value)));
	return value;
}

template <typename T> void impl_IAppointment2<T>::OnlineMeetingLink(StringReference const & value) const
{
	check(shim()->put_OnlineMeetingLink(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IAppointment2<T>::ReplyTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_ReplyTime(put(value)));
	return value;
}

template <typename T> void impl_IAppointment2<T>::ReplyTime(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_ReplyTime(get(value)));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentParticipantResponse impl_IAppointment2<T>::UserResponse() const
{
	Windows::ApplicationModel::Appointments::AppointmentParticipantResponse value = {};
	check(shim()->get_UserResponse(&value));
	return value;
}

template <typename T> void impl_IAppointment2<T>::UserResponse(Windows::ApplicationModel::Appointments::AppointmentParticipantResponse const value) const
{
	check(shim()->put_UserResponse(value));
}

template <typename T> bool impl_IAppointment2<T>::HasInvitees() const
{
	bool value = {};
	check(shim()->get_HasInvitees(put(value)));
	return value;
}

template <typename T> bool impl_IAppointment2<T>::IsCanceledMeeting() const
{
	bool value = {};
	check(shim()->get_IsCanceledMeeting(put(value)));
	return value;
}

template <typename T> void impl_IAppointment2<T>::IsCanceledMeeting(bool const value) const
{
	check(shim()->put_IsCanceledMeeting(value));
}

template <typename T> bool impl_IAppointment2<T>::IsOrganizedByUser() const
{
	bool value = {};
	check(shim()->get_IsOrganizedByUser(put(value)));
	return value;
}

template <typename T> void impl_IAppointment2<T>::IsOrganizedByUser(bool const value) const
{
	check(shim()->put_IsOrganizedByUser(value));
}

template <typename T> unsigned long long impl_IAppointment3<T>::ChangeNumber() const
{
	unsigned long long value = {};
	check(shim()->get_ChangeNumber(&value));
	return value;
}

template <typename T> unsigned long long impl_IAppointment3<T>::RemoteChangeNumber() const
{
	unsigned long long value = {};
	check(shim()->get_RemoteChangeNumber(&value));
	return value;
}

template <typename T> void impl_IAppointment3<T>::RemoteChangeNumber(unsigned long long const value) const
{
	check(shim()->put_RemoteChangeNumber(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentDetailsKind impl_IAppointment3<T>::DetailsKind() const
{
	Windows::ApplicationModel::Appointments::AppointmentDetailsKind value = {};
	check(shim()->get_DetailsKind(&value));
	return value;
}

template <typename T> void impl_IAppointment3<T>::DetailsKind(Windows::ApplicationModel::Appointments::AppointmentDetailsKind const value) const
{
	check(shim()->put_DetailsKind(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IFindAppointmentsOptions<T>::CalendarIds() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_CalendarIds(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IFindAppointmentsOptions<T>::FetchProperties() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_FetchProperties(put(value)));
	return value;
}

template <typename T> bool impl_IFindAppointmentsOptions<T>::IncludeHidden() const
{
	bool value = {};
	check(shim()->get_IncludeHidden(put(value)));
	return value;
}

template <typename T> void impl_IFindAppointmentsOptions<T>::IncludeHidden(bool const value) const
{
	check(shim()->put_IncludeHidden(value));
}

template <typename T> unsigned impl_IFindAppointmentsOptions<T>::MaxCount() const
{
	unsigned value = {};
	check(shim()->get_MaxCount(&value));
	return value;
}

template <typename T> void impl_IFindAppointmentsOptions<T>::MaxCount(unsigned const value) const
{
	check(shim()->put_MaxCount(value));
}

template <typename T> Windows::UI::Color impl_IAppointmentCalendar<T>::DisplayColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DisplayColor(&value));
	return value;
}

template <typename T> String impl_IAppointmentCalendar<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar<T>::DisplayName(StringReference const & value) const
{
	check(shim()->put_DisplayName(get(value)));
}

template <typename T> String impl_IAppointmentCalendar<T>::LocalId() const
{
	String value;
	check(shim()->get_LocalId(put(value)));
	return value;
}

template <typename T> bool impl_IAppointmentCalendar<T>::IsHidden() const
{
	bool value = {};
	check(shim()->get_IsHidden(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppReadAccess impl_IAppointmentCalendar<T>::OtherAppReadAccess() const
{
	Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppReadAccess value = {};
	check(shim()->get_OtherAppReadAccess(&value));
	return value;
}

template <typename T> void impl_IAppointmentCalendar<T>::OtherAppReadAccess(Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppReadAccess const value) const
{
	check(shim()->put_OtherAppReadAccess(value));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppWriteAccess impl_IAppointmentCalendar<T>::OtherAppWriteAccess() const
{
	Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppWriteAccess value = {};
	check(shim()->get_OtherAppWriteAccess(&value));
	return value;
}

template <typename T> void impl_IAppointmentCalendar<T>::OtherAppWriteAccess(Windows::ApplicationModel::Appointments::AppointmentCalendarOtherAppWriteAccess const value) const
{
	check(shim()->put_OtherAppWriteAccess(value));
}

template <typename T> String impl_IAppointmentCalendar<T>::SourceDisplayName() const
{
	String value;
	check(shim()->get_SourceDisplayName(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentSummaryCardView impl_IAppointmentCalendar<T>::SummaryCardView() const
{
	Windows::ApplicationModel::Appointments::AppointmentSummaryCardView value = {};
	check(shim()->get_SummaryCardView(&value));
	return value;
}

template <typename T> void impl_IAppointmentCalendar<T>::SummaryCardView(Windows::ApplicationModel::Appointments::AppointmentSummaryCardView const value) const
{
	check(shim()->put_SummaryCardView(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> impl_IAppointmentCalendar<T>::FindAppointmentsAsync(Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> result;
	check(shim()->abi_FindAppointmentsAsync(rangeStart, rangeLength, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> impl_IAppointmentCalendar<T>::FindAppointmentsAsync(Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength, Windows::ApplicationModel::Appointments::FindAppointmentsOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> result;
	check(shim()->abi_FindAppointmentsAsyncWithOptions(rangeStart, rangeLength, get(options), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentException>> impl_IAppointmentCalendar<T>::FindExceptionsFromMasterAsync(StringReference const & masterLocalId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentException>> value;
	check(shim()->abi_FindExceptionsFromMasterAsync(get(masterLocalId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> impl_IAppointmentCalendar<T>::FindAllInstancesAsync(StringReference const & masterLocalId, Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> value;
	check(shim()->abi_FindAllInstancesAsync(get(masterLocalId), rangeStart, rangeLength, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> impl_IAppointmentCalendar<T>::FindAllInstancesAsync(StringReference const & masterLocalId, Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength, Windows::ApplicationModel::Appointments::FindAppointmentsOptions const & pOptions) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> value;
	check(shim()->abi_FindAllInstancesAsyncWithOptions(get(masterLocalId), rangeStart, rangeLength, get(pOptions), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> impl_IAppointmentCalendar<T>::GetAppointmentAsync(StringReference const & localId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> result;
	check(shim()->abi_GetAppointmentAsync(get(localId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> impl_IAppointmentCalendar<T>::GetAppointmentInstanceAsync(StringReference const & localId, Windows::Foundation::DateTime const & instanceStartTime) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> result;
	check(shim()->abi_GetAppointmentInstanceAsync(get(localId), instanceStartTime, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> impl_IAppointmentCalendar<T>::FindUnexpandedAppointmentsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> result;
	check(shim()->abi_FindUnexpandedAppointmentsAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> impl_IAppointmentCalendar<T>::FindUnexpandedAppointmentsAsync(Windows::ApplicationModel::Appointments::FindAppointmentsOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> result;
	check(shim()->abi_FindUnexpandedAppointmentsAsyncWithOptions(get(options), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentCalendar<T>::DeleteAsync() const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check(shim()->abi_DeleteAsync(put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentCalendar<T>::SaveAsync() const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check(shim()->abi_SaveAsync(put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentCalendar<T>::DeleteAppointmentAsync(StringReference const & localId) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check(shim()->abi_DeleteAppointmentAsync(get(localId), put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentCalendar<T>::DeleteAppointmentInstanceAsync(StringReference const & localId, Windows::Foundation::DateTime const & instanceStartTime) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check(shim()->abi_DeleteAppointmentInstanceAsync(get(localId), instanceStartTime, put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentCalendar<T>::SaveAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & pAppointment) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check(shim()->abi_SaveAppointmentAsync(get(pAppointment), put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentCalendarSyncManager impl_IAppointmentCalendar2<T>::SyncManager() const
{
	Windows::ApplicationModel::Appointments::AppointmentCalendarSyncManager value = nullptr;
	check(shim()->get_SyncManager(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentCalendar2<T>::RemoteId() const
{
	String value;
	check(shim()->get_RemoteId(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar2<T>::RemoteId(StringReference const & value) const
{
	check(shim()->put_RemoteId(get(value)));
}

template <typename T> void impl_IAppointmentCalendar2<T>::DisplayColor(Windows::UI::Color const & value) const
{
	check(shim()->put_DisplayColor(value));
}

template <typename T> void impl_IAppointmentCalendar2<T>::IsHidden(bool const value) const
{
	check(shim()->put_IsHidden(value));
}

template <typename T> String impl_IAppointmentCalendar2<T>::UserDataAccountId() const
{
	String value;
	check(shim()->get_UserDataAccountId(put(value)));
	return value;
}

template <typename T> bool impl_IAppointmentCalendar2<T>::CanCreateOrUpdateAppointments() const
{
	bool value = {};
	check(shim()->get_CanCreateOrUpdateAppointments(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar2<T>::CanCreateOrUpdateAppointments(bool const value) const
{
	check(shim()->put_CanCreateOrUpdateAppointments(value));
}

template <typename T> bool impl_IAppointmentCalendar2<T>::CanCancelMeetings() const
{
	bool value = {};
	check(shim()->get_CanCancelMeetings(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar2<T>::CanCancelMeetings(bool const value) const
{
	check(shim()->put_CanCancelMeetings(value));
}

template <typename T> bool impl_IAppointmentCalendar2<T>::CanForwardMeetings() const
{
	bool value = {};
	check(shim()->get_CanForwardMeetings(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar2<T>::CanForwardMeetings(bool const value) const
{
	check(shim()->put_CanForwardMeetings(value));
}

template <typename T> bool impl_IAppointmentCalendar2<T>::CanProposeNewTimeForMeetings() const
{
	bool value = {};
	check(shim()->get_CanProposeNewTimeForMeetings(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar2<T>::CanProposeNewTimeForMeetings(bool const value) const
{
	check(shim()->put_CanProposeNewTimeForMeetings(value));
}

template <typename T> bool impl_IAppointmentCalendar2<T>::CanUpdateMeetingResponses() const
{
	bool value = {};
	check(shim()->get_CanUpdateMeetingResponses(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar2<T>::CanUpdateMeetingResponses(bool const value) const
{
	check(shim()->put_CanUpdateMeetingResponses(value));
}

template <typename T> bool impl_IAppointmentCalendar2<T>::CanNotifyInvitees() const
{
	bool value = {};
	check(shim()->get_CanNotifyInvitees(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar2<T>::CanNotifyInvitees(bool const value) const
{
	check(shim()->put_CanNotifyInvitees(value));
}

template <typename T> bool impl_IAppointmentCalendar2<T>::MustNofityInvitees() const
{
	bool value = {};
	check(shim()->get_MustNofityInvitees(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentCalendar2<T>::MustNofityInvitees(bool const value) const
{
	check(shim()->put_MustNofityInvitees(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentCalendar2<T>::TryCreateOrUpdateAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, bool const notifyInvitees) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TryCreateOrUpdateAppointmentAsync(get(appointment), notifyInvitees, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentCalendar2<T>::TryCancelMeetingAsync(Windows::ApplicationModel::Appointments::Appointment const & meeting, StringReference const & subject, StringReference const & comment, bool const notifyInvitees) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TryCancelMeetingAsync(get(meeting), get(subject), get(comment), notifyInvitees, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentCalendar2<T>::TryForwardMeetingAsync(Windows::ApplicationModel::Appointments::Appointment const & meeting, Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Appointments::AppointmentInvitee> const & invitees, StringReference const & subject, StringReference const & forwardHeader, StringReference const & comment) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TryForwardMeetingAsync(get(meeting), get(invitees), get(subject), get(forwardHeader), get(comment), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentCalendar2<T>::TryProposeNewTimeForMeetingAsync(Windows::ApplicationModel::Appointments::Appointment const & meeting, Windows::Foundation::DateTime const & newStartTime, Windows::Foundation::TimeSpan const & newDuration, StringReference const & subject, StringReference const & comment) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TryProposeNewTimeForMeetingAsync(get(meeting), newStartTime, newDuration, get(subject), get(comment), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentCalendar2<T>::TryUpdateMeetingResponseAsync(Windows::ApplicationModel::Appointments::Appointment const & meeting, Windows::ApplicationModel::Appointments::AppointmentParticipantResponse const response, StringReference const & subject, StringReference const & comment, bool const sendUpdate) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TryUpdateMeetingResponseAsync(get(meeting), response, get(subject), get(comment), sendUpdate, put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentCalendarSyncStatus impl_IAppointmentCalendarSyncManager<T>::Status() const
{
	Windows::ApplicationModel::Appointments::AppointmentCalendarSyncStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IAppointmentCalendarSyncManager<T>::LastSuccessfulSyncTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_LastSuccessfulSyncTime(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IAppointmentCalendarSyncManager<T>::LastAttemptedSyncTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_LastAttemptedSyncTime(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentCalendarSyncManager<T>::SyncAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_SyncAsync(put(result)));
	return result;
}

template <typename T> long long impl_IAppointmentCalendarSyncManager<T>::SyncStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Appointments::AppointmentCalendarSyncManager, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_SyncStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAppointmentCalendarSyncManager<T>::SyncStatusChanged(F handler) const
{
	return SyncStatusChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Appointments::AppointmentCalendarSyncManager, IInspectable>(handler));
}

template <typename T> void impl_IAppointmentCalendarSyncManager<T>::SyncStatusChanged(long long const token) const
{
	check(shim()->remove_SyncStatusChanged(token));
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Subject() const
{
	String value;
	check(shim()->get_Subject(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Location() const
{
	String value;
	check(shim()->get_Location(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::StartTime() const
{
	String value;
	check(shim()->get_StartTime(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Duration() const
{
	String value;
	check(shim()->get_Duration(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Reminder() const
{
	String value;
	check(shim()->get_Reminder(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::BusyStatus() const
{
	String value;
	check(shim()->get_BusyStatus(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Sensitivity() const
{
	String value;
	check(shim()->get_Sensitivity(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::OriginalStartTime() const
{
	String value;
	check(shim()->get_OriginalStartTime(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::IsResponseRequested() const
{
	String value;
	check(shim()->get_IsResponseRequested(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::AllowNewTimeProposal() const
{
	String value;
	check(shim()->get_AllowNewTimeProposal(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::AllDay() const
{
	String value;
	check(shim()->get_AllDay(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Details() const
{
	String value;
	check(shim()->get_Details(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::OnlineMeetingLink() const
{
	String value;
	check(shim()->get_OnlineMeetingLink(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::ReplyTime() const
{
	String value;
	check(shim()->get_ReplyTime(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Organizer() const
{
	String value;
	check(shim()->get_Organizer(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::UserResponse() const
{
	String value;
	check(shim()->get_UserResponse(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::HasInvitees() const
{
	String value;
	check(shim()->get_HasInvitees(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::IsCanceledMeeting() const
{
	String value;
	check(shim()->get_IsCanceledMeeting(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::IsOrganizedByUser() const
{
	String value;
	check(shim()->get_IsOrganizedByUser(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Recurrence() const
{
	String value;
	check(shim()->get_Recurrence(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Uri() const
{
	String value;
	check(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics<T>::Invitees() const
{
	String value;
	check(shim()->get_Invitees(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IAppointmentPropertiesStatics<T>::DefaultProperties() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_DefaultProperties(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics2<T>::ChangeNumber() const
{
	String value;
	check(shim()->get_ChangeNumber(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics2<T>::RemoteChangeNumber() const
{
	String value;
	check(shim()->get_RemoteChangeNumber(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentPropertiesStatics2<T>::DetailsKind() const
{
	String value;
	check(shim()->get_DetailsKind(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentConflictType impl_IAppointmentConflictResult<T>::Type() const
{
	Windows::ApplicationModel::Appointments::AppointmentConflictType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IAppointmentConflictResult<T>::Date() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Date(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::Appointment impl_IAppointmentStoreChange<T>::Appointment() const
{
	Windows::ApplicationModel::Appointments::Appointment value = nullptr;
	check(shim()->get_Appointment(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentStoreChangeType impl_IAppointmentStoreChange<T>::ChangeType() const
{
	Windows::ApplicationModel::Appointments::AppointmentStoreChangeType value = {};
	check(shim()->get_ChangeType(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentCalendar impl_IAppointmentStoreChange2<T>::AppointmentCalendar() const
{
	Windows::ApplicationModel::Appointments::AppointmentCalendar value = nullptr;
	check(shim()->get_AppointmentCalendar(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentStoreChange>> impl_IAppointmentStoreChangeReader<T>::ReadBatchAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentStoreChange>> result;
	check(shim()->abi_ReadBatchAsync(put(result)));
	return result;
}

template <typename T> void impl_IAppointmentStoreChangeReader<T>::AcceptChanges() const
{
	check(shim()->abi_AcceptChanges());
}

template <typename T> void impl_IAppointmentStoreChangeReader<T>::AcceptChangesThrough(Windows::ApplicationModel::Appointments::AppointmentStoreChange const & lastChangeToAccept) const
{
	check(shim()->abi_AcceptChangesThrough(get(lastChangeToAccept)));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentStoreChangeReader impl_IAppointmentStoreChangeTracker<T>::GetChangeReader() const
{
	Windows::ApplicationModel::Appointments::AppointmentStoreChangeReader value = nullptr;
	check(shim()->abi_GetChangeReader(put(value)));
	return value;
}

template <typename T> void impl_IAppointmentStoreChangeTracker<T>::Enable() const
{
	check(shim()->abi_Enable());
}

template <typename T> void impl_IAppointmentStoreChangeTracker<T>::Reset() const
{
	check(shim()->abi_Reset());
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentStoreChangedDeferral impl_IAppointmentStoreChangedEventArgs<T>::GetDeferral() const
{
	Windows::ApplicationModel::Appointments::AppointmentStoreChangedDeferral result = nullptr;
	check(shim()->abi_GetDeferral(put(result)));
	return result;
}

template <typename T> void impl_IAppointmentStoreChangedDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentStoreChangeTracker impl_IAppointmentStore<T>::ChangeTracker() const
{
	Windows::ApplicationModel::Appointments::AppointmentStoreChangeTracker value = nullptr;
	check(shim()->get_ChangeTracker(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentCalendar> impl_IAppointmentStore<T>::CreateAppointmentCalendarAsync(StringReference const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentCalendar> operation;
	check(shim()->abi_CreateAppointmentCalendarAsync(get(name), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentCalendar> impl_IAppointmentStore<T>::GetAppointmentCalendarAsync(StringReference const & calendarId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentCalendar> result;
	check(shim()->abi_GetAppointmentCalendarAsync(get(calendarId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> impl_IAppointmentStore<T>::GetAppointmentAsync(StringReference const & localId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> result;
	check(shim()->abi_GetAppointmentAsync(get(localId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> impl_IAppointmentStore<T>::GetAppointmentInstanceAsync(StringReference const & localId, Windows::Foundation::DateTime const & instanceStartTime) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::Appointment> result;
	check(shim()->abi_GetAppointmentInstanceAsync(get(localId), instanceStartTime, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentCalendar>> impl_IAppointmentStore<T>::FindAppointmentCalendarsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentCalendar>> result;
	check(shim()->abi_FindAppointmentCalendarsAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentCalendar>> impl_IAppointmentStore<T>::FindAppointmentCalendarsAsync(Windows::ApplicationModel::Appointments::FindAppointmentCalendarsOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentCalendar>> result;
	check(shim()->abi_FindAppointmentCalendarsAsyncWithOptions(options, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> impl_IAppointmentStore<T>::FindAppointmentsAsync(Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> result;
	check(shim()->abi_FindAppointmentsAsync(rangeStart, rangeLength, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> impl_IAppointmentStore<T>::FindAppointmentsAsync(Windows::Foundation::DateTime const & rangeStart, Windows::Foundation::TimeSpan const & rangeLength, Windows::ApplicationModel::Appointments::FindAppointmentsOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::Appointment>> result;
	check(shim()->abi_FindAppointmentsAsyncWithOptions(rangeStart, rangeLength, get(options), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentConflictResult> impl_IAppointmentStore<T>::FindConflictAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentConflictResult> result;
	check(shim()->abi_FindConflictAsync(get(appointment), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentConflictResult> impl_IAppointmentStore<T>::FindConflictAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::DateTime const & instanceStartTime) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentConflictResult> result;
	check(shim()->abi_FindConflictAsyncWithInstanceStart(get(appointment), instanceStartTime, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentStore<T>::MoveAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::ApplicationModel::Appointments::AppointmentCalendar const & destinationCalendar) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check(shim()->abi_MoveAppointmentAsync(get(appointment), get(destinationCalendar), put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentStore<T>::ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_ShowAddAppointmentAsync(get(appointment), selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentStore<T>::ShowReplaceAppointmentAsync(StringReference const & localId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_ShowReplaceAppointmentAsync(get(localId), get(appointment), selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentStore<T>::ShowReplaceAppointmentAsync(StringReference const & localId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_ShowReplaceAppointmentWithPlacementAndDateAsync(get(localId), get(appointment), selection, preferredPlacement, instanceStartDate, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentStore<T>::ShowRemoveAppointmentAsync(StringReference const & localId, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_ShowRemoveAppointmentAsync(get(localId), selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppointmentStore<T>::ShowRemoveAppointmentAsync(StringReference const & localId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_ShowRemoveAppointmentWithPlacementAndDateAsync(get(localId), selection, preferredPlacement, instanceStartDate, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentStore<T>::ShowAppointmentDetailsAsync(StringReference const & localId) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check(shim()->abi_ShowAppointmentDetailsAsync(get(localId), put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAppointmentStore<T>::ShowAppointmentDetailsAsync(StringReference const & localId, Windows::Foundation::DateTime const & instanceStartDate) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check(shim()->abi_ShowAppointmentDetailsWithDateAsync(get(localId), instanceStartDate, put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IAppointmentStore<T>::ShowEditNewAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_ShowEditNewAppointmentAsync(get(appointment), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> impl_IAppointmentStore<T>::FindLocalIdsFromRoamingIdAsync(StringReference const & roamingId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> operation;
	check(shim()->abi_FindLocalIdsFromRoamingIdAsync(get(roamingId), put(operation)));
	return operation;
}

template <typename T> long long impl_IAppointmentStore2<T>::StoreChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Appointments::AppointmentStore, Windows::ApplicationModel::Appointments::AppointmentStoreChangedEventArgs> const & pHandler) const
{
	long long pToken = {};
	check(shim()->add_StoreChanged(get(pHandler), &pToken));
	return pToken;
}

template <typename T> template <typename F> long long impl_IAppointmentStore2<T>::StoreChanged(F pHandler) const
{
	return StoreChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Appointments::AppointmentStore, Windows::ApplicationModel::Appointments::AppointmentStoreChangedEventArgs>(pHandler));
}

template <typename T> void impl_IAppointmentStore2<T>::StoreChanged(long long const token) const
{
	check(shim()->remove_StoreChanged(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentCalendar> impl_IAppointmentStore2<T>::CreateAppointmentCalendarAsync(StringReference const & name, StringReference const & userDataAccountId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentCalendar> operation;
	check(shim()->abi_CreateAppointmentCalendarInAccountAsync(get(name), get(userDataAccountId), put(operation)));
	return operation;
}

template <typename T> Windows::ApplicationModel::Appointments::Appointment impl_IAppointmentException<T>::Appointment() const
{
	Windows::ApplicationModel::Appointments::Appointment value = nullptr;
	check(shim()->get_Appointment(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IAppointmentException<T>::ExceptionProperties() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_ExceptionProperties(put(value)));
	return value;
}

template <typename T> bool impl_IAppointmentException<T>::IsDeleted() const
{
	bool value = {};
	check(shim()->get_IsDeleted(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

template <typename T> String impl_IAppointmentsProviderLaunchActionVerbsStatics<T>::AddAppointment() const
{
	String value;
	check(shim()->get_AddAppointment(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderLaunchActionVerbsStatics<T>::ReplaceAppointment() const
{
	String value;
	check(shim()->get_ReplaceAppointment(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderLaunchActionVerbsStatics<T>::RemoveAppointment() const
{
	String value;
	check(shim()->get_RemoveAppointment(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderLaunchActionVerbsStatics<T>::ShowTimeFrame() const
{
	String value;
	check(shim()->get_ShowTimeFrame(put(value)));
	return value;
}

template <typename T> String impl_IAppointmentsProviderLaunchActionVerbsStatics2<T>::ShowAppointmentDetails() const
{
	String value;
	check(shim()->get_ShowAppointmentDetails(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::Appointment impl_IAddAppointmentOperation<T>::AppointmentInformation() const
{
	Windows::ApplicationModel::Appointments::Appointment value = nullptr;
	check(shim()->get_AppointmentInformation(put(value)));
	return value;
}

template <typename T> String impl_IAddAppointmentOperation<T>::SourcePackageFamilyName() const
{
	String value;
	check(shim()->get_SourcePackageFamilyName(put(value)));
	return value;
}

template <typename T> void impl_IAddAppointmentOperation<T>::ReportCompleted(StringReference const & itemId) const
{
	check(shim()->abi_ReportCompleted(get(itemId)));
}

template <typename T> void impl_IAddAppointmentOperation<T>::ReportCanceled() const
{
	check(shim()->abi_ReportCanceled());
}

template <typename T> void impl_IAddAppointmentOperation<T>::ReportError(StringReference const & value) const
{
	check(shim()->abi_ReportError(get(value)));
}

template <typename T> void impl_IAddAppointmentOperation<T>::DismissUI() const
{
	check(shim()->abi_DismissUI());
}

template <typename T> String impl_IReplaceAppointmentOperation<T>::AppointmentId() const
{
	String value;
	check(shim()->get_AppointmentId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Appointments::Appointment impl_IReplaceAppointmentOperation<T>::AppointmentInformation() const
{
	Windows::ApplicationModel::Appointments::Appointment value = nullptr;
	check(shim()->get_AppointmentInformation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IReplaceAppointmentOperation<T>::InstanceStartDate() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_InstanceStartDate(put(value)));
	return value;
}

template <typename T> String impl_IReplaceAppointmentOperation<T>::SourcePackageFamilyName() const
{
	String value;
	check(shim()->get_SourcePackageFamilyName(put(value)));
	return value;
}

template <typename T> void impl_IReplaceAppointmentOperation<T>::ReportCompleted(StringReference const & itemId) const
{
	check(shim()->abi_ReportCompleted(get(itemId)));
}

template <typename T> void impl_IReplaceAppointmentOperation<T>::ReportCanceled() const
{
	check(shim()->abi_ReportCanceled());
}

template <typename T> void impl_IReplaceAppointmentOperation<T>::ReportError(StringReference const & value) const
{
	check(shim()->abi_ReportError(get(value)));
}

template <typename T> void impl_IReplaceAppointmentOperation<T>::DismissUI() const
{
	check(shim()->abi_DismissUI());
}

template <typename T> String impl_IRemoveAppointmentOperation<T>::AppointmentId() const
{
	String value;
	check(shim()->get_AppointmentId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IRemoveAppointmentOperation<T>::InstanceStartDate() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_InstanceStartDate(put(value)));
	return value;
}

template <typename T> String impl_IRemoveAppointmentOperation<T>::SourcePackageFamilyName() const
{
	String value;
	check(shim()->get_SourcePackageFamilyName(put(value)));
	return value;
}

template <typename T> void impl_IRemoveAppointmentOperation<T>::ReportCompleted() const
{
	check(shim()->abi_ReportCompleted());
}

template <typename T> void impl_IRemoveAppointmentOperation<T>::ReportCanceled() const
{
	check(shim()->abi_ReportCanceled());
}

template <typename T> void impl_IRemoveAppointmentOperation<T>::ReportError(StringReference const & value) const
{
	check(shim()->abi_ReportError(get(value)));
}

template <typename T> void impl_IRemoveAppointmentOperation<T>::DismissUI() const
{
	check(shim()->abi_DismissUI());
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Background {

template <typename T> void impl_IBackgroundTaskCanceledEventHandler<T>::Invoke(Windows::ApplicationModel::Background::IBackgroundTaskInstance const & sender, Windows::ApplicationModel::Background::BackgroundTaskCancellationReason const reason) const
{
	check(shim()->abi_Invoke(get(sender), reason));
}

template <typename T> void impl_IBackgroundTaskProgressEventHandler<T>::Invoke(Windows::ApplicationModel::Background::BackgroundTaskRegistration const & sender, Windows::ApplicationModel::Background::BackgroundTaskProgressEventArgs const & args) const
{
	check(shim()->abi_Invoke(get(sender), get(args)));
}

template <typename T> void impl_IBackgroundTaskCompletedEventHandler<T>::Invoke(Windows::ApplicationModel::Background::BackgroundTaskRegistration const & sender, Windows::ApplicationModel::Background::BackgroundTaskCompletedEventArgs const & args) const
{
	check(shim()->abi_Invoke(get(sender), get(args)));
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::AlarmAccessStatus> impl_IAlarmApplicationManagerStatics<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::AlarmAccessStatus> operation;
	check(shim()->abi_RequestAccessAsync(put(operation)));
	return operation;
}

template <typename T> Windows::ApplicationModel::Background::AlarmAccessStatus impl_IAlarmApplicationManagerStatics<T>::GetAccessStatus() const
{
	Windows::ApplicationModel::Background::AlarmAccessStatus status = {};
	check(shim()->abi_GetAccessStatus(&status));
	return status;
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_IApplicationTriggerDetails<T>::Arguments() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check(shim()->get_Arguments(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::BackgroundAccessStatus> impl_IBackgroundExecutionManagerStatics<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::BackgroundAccessStatus> operation;
	check(shim()->abi_RequestAccessAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::BackgroundAccessStatus> impl_IBackgroundExecutionManagerStatics<T>::RequestAccessAsync(StringReference const & applicationId) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::BackgroundAccessStatus> operation;
	check(shim()->abi_RequestAccessForApplicationAsync(get(applicationId), put(operation)));
	return operation;
}

template <typename T> void impl_IBackgroundExecutionManagerStatics<T>::RemoveAccess() const
{
	check(shim()->abi_RemoveAccess());
}

template <typename T> void impl_IBackgroundExecutionManagerStatics<T>::RemoveAccess(StringReference const & applicationId) const
{
	check(shim()->abi_RemoveAccessForApplication(get(applicationId)));
}

template <typename T> Windows::ApplicationModel::Background::BackgroundAccessStatus impl_IBackgroundExecutionManagerStatics<T>::GetAccessStatus() const
{
	Windows::ApplicationModel::Background::BackgroundAccessStatus status = {};
	check(shim()->abi_GetAccessStatus(&status));
	return status;
}

template <typename T> Windows::ApplicationModel::Background::BackgroundAccessStatus impl_IBackgroundExecutionManagerStatics<T>::GetAccessStatus(StringReference const & applicationId) const
{
	Windows::ApplicationModel::Background::BackgroundAccessStatus status = {};
	check(shim()->abi_GetAccessStatusForApplication(get(applicationId), &status));
	return status;
}

template <typename T> GUID impl_IBackgroundTaskInstance<T>::InstanceId() const
{
	GUID value = {};
	check(shim()->get_InstanceId(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::BackgroundTaskRegistration impl_IBackgroundTaskInstance<T>::Task() const
{
	Windows::ApplicationModel::Background::BackgroundTaskRegistration task = nullptr;
	check(shim()->get_Task(put(task)));
	return task;
}

template <typename T> unsigned impl_IBackgroundTaskInstance<T>::Progress() const
{
	unsigned value = {};
	check(shim()->get_Progress(&value));
	return value;
}

template <typename T> void impl_IBackgroundTaskInstance<T>::Progress(unsigned const value) const
{
	check(shim()->put_Progress(value));
}

template <typename T> IInspectable impl_IBackgroundTaskInstance<T>::TriggerDetails() const
{
	IInspectable triggerDetails;
	check(shim()->get_TriggerDetails(put(triggerDetails)));
	return triggerDetails;
}

template <typename T> long long impl_IBackgroundTaskInstance<T>::Canceled(Windows::ApplicationModel::Background::IBackgroundTaskCanceledEventHandler const & cancelHandler) const
{
	long long cookie = {};
	check(shim()->add_Canceled(get(cancelHandler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IBackgroundTaskInstance<T>::Canceled(F cancelHandler) const
{
	return Canceled(Windows::ApplicationModel::Background::BackgroundTaskCanceledEventHandler(cancelHandler));
}

template <typename T> void impl_IBackgroundTaskInstance<T>::Canceled(long long const cookie) const
{
	check(shim()->remove_Canceled(cookie));
}

template <typename T> unsigned impl_IBackgroundTaskInstance<T>::SuspendedCount() const
{
	unsigned value = {};
	check(shim()->get_SuspendedCount(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::BackgroundTaskDeferral impl_IBackgroundTaskInstance<T>::GetDeferral() const
{
	Windows::ApplicationModel::Background::BackgroundTaskDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> Windows::ApplicationModel::Background::BackgroundWorkCostValue impl_IBackgroundWorkCostStatics<T>::CurrentBackgroundWorkCost() const
{
	Windows::ApplicationModel::Background::BackgroundWorkCostValue value = {};
	check(shim()->get_CurrentBackgroundWorkCost(&value));
	return value;
}

template <typename T> void impl_IBackgroundTaskDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> unsigned impl_IBackgroundTaskInstance2<T>::GetThrottleCount(Windows::ApplicationModel::Background::BackgroundTaskThrottleCounter const counter) const
{
	unsigned value = {};
	check(shim()->abi_GetThrottleCount(counter, &value));
	return value;
}

template <typename T> void impl_IBackgroundTask<T>::Run(Windows::ApplicationModel::Background::IBackgroundTaskInstance const & taskInstance) const
{
	check(shim()->abi_Run(get(taskInstance)));
}

template <typename T> GUID impl_IBackgroundTaskRegistration<T>::TaskId() const
{
	GUID value = {};
	check(shim()->get_TaskId(&value));
	return value;
}

template <typename T> String impl_IBackgroundTaskRegistration<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> long long impl_IBackgroundTaskRegistration<T>::Progress(Windows::ApplicationModel::Background::IBackgroundTaskProgressEventHandler const & handler) const
{
	long long cookie = {};
	check(shim()->add_Progress(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IBackgroundTaskRegistration<T>::Progress(F handler) const
{
	return Progress(Windows::ApplicationModel::Background::BackgroundTaskProgressEventHandler(handler));
}

template <typename T> void impl_IBackgroundTaskRegistration<T>::Progress(long long const cookie) const
{
	check(shim()->remove_Progress(cookie));
}

template <typename T> long long impl_IBackgroundTaskRegistration<T>::Completed(Windows::ApplicationModel::Background::IBackgroundTaskCompletedEventHandler const & handler) const
{
	long long cookie = {};
	check(shim()->add_Completed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IBackgroundTaskRegistration<T>::Completed(F handler) const
{
	return Completed(Windows::ApplicationModel::Background::BackgroundTaskCompletedEventHandler(handler));
}

template <typename T> void impl_IBackgroundTaskRegistration<T>::Completed(long long const cookie) const
{
	check(shim()->remove_Completed(cookie));
}

template <typename T> void impl_IBackgroundTaskRegistration<T>::Unregister(bool const cancelTask) const
{
	check(shim()->abi_Unregister(cancelTask));
}

template <typename T> Windows::ApplicationModel::Background::IBackgroundTrigger impl_IBackgroundTaskRegistration2<T>::Trigger() const
{
	Windows::ApplicationModel::Background::IBackgroundTrigger value;
	check(shim()->get_Trigger(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::ApplicationTriggerResult> impl_IApplicationTrigger<T>::RequestAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::ApplicationTriggerResult> result;
	check(shim()->abi_RequestAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::ApplicationTriggerResult> impl_IApplicationTrigger<T>::RequestAsync(Windows::Foundation::Collections::ValueSet const & arguments) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::ApplicationTriggerResult> result;
	check(shim()->abi_RequestAsyncWithArguments(get(arguments), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::MediaProcessingTriggerResult> impl_IMediaProcessingTrigger<T>::RequestAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::MediaProcessingTriggerResult> result;
	check(shim()->abi_RequestAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::MediaProcessingTriggerResult> impl_IMediaProcessingTrigger<T>::RequestAsync(Windows::Foundation::Collections::ValueSet const & arguments) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::MediaProcessingTriggerResult> result;
	check(shim()->abi_RequestAsyncWithArguments(get(arguments), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IMapView<GUID, Windows::ApplicationModel::Background::IBackgroundTaskRegistration> impl_IBackgroundTaskRegistrationStatics<T>::AllTasks() const
{
	Windows::Foundation::Collections::IMapView<GUID, Windows::ApplicationModel::Background::IBackgroundTaskRegistration> tasks;
	check(shim()->get_AllTasks(put(tasks)));
	return tasks;
}

template <typename T> void impl_IBackgroundTaskBuilder<T>::TaskEntryPoint(StringReference const & value) const
{
	check(shim()->put_TaskEntryPoint(get(value)));
}

template <typename T> String impl_IBackgroundTaskBuilder<T>::TaskEntryPoint() const
{
	String value;
	check(shim()->get_TaskEntryPoint(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundTaskBuilder<T>::SetTrigger(Windows::ApplicationModel::Background::IBackgroundTrigger const & trigger) const
{
	check(shim()->abi_SetTrigger(get(trigger)));
}

template <typename T> void impl_IBackgroundTaskBuilder<T>::AddCondition(Windows::ApplicationModel::Background::IBackgroundCondition const & condition) const
{
	check(shim()->abi_AddCondition(get(condition)));
}

template <typename T> void impl_IBackgroundTaskBuilder<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> String impl_IBackgroundTaskBuilder<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::BackgroundTaskRegistration impl_IBackgroundTaskBuilder<T>::Register() const
{
	Windows::ApplicationModel::Background::BackgroundTaskRegistration task = nullptr;
	check(shim()->abi_Register(put(task)));
	return task;
}

template <typename T> void impl_IBackgroundTaskBuilder2<T>::CancelOnConditionLoss(bool const value) const
{
	check(shim()->put_CancelOnConditionLoss(value));
}

template <typename T> bool impl_IBackgroundTaskBuilder2<T>::CancelOnConditionLoss() const
{
	bool value = {};
	check(shim()->get_CancelOnConditionLoss(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundTaskBuilder3<T>::IsNetworkRequested(bool const value) const
{
	check(shim()->put_IsNetworkRequested(value));
}

template <typename T> bool impl_IBackgroundTaskBuilder3<T>::IsNetworkRequested() const
{
	bool value = {};
	check(shim()->get_IsNetworkRequested(put(value)));
	return value;
}

template <typename T> GUID impl_IBackgroundTaskCompletedEventArgs<T>::InstanceId() const
{
	GUID value = {};
	check(shim()->get_InstanceId(&value));
	return value;
}

template <typename T> void impl_IBackgroundTaskCompletedEventArgs<T>::CheckResult() const
{
	check(shim()->abi_CheckResult());
}

template <typename T> GUID impl_IBackgroundTaskProgressEventArgs<T>::InstanceId() const
{
	GUID value = {};
	check(shim()->get_InstanceId(&value));
	return value;
}

template <typename T> unsigned impl_IBackgroundTaskProgressEventArgs<T>::Progress() const
{
	unsigned value = {};
	check(shim()->get_Progress(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IContentPrefetchTrigger<T>::WaitInterval() const
{
	Windows::Foundation::TimeSpan waitInterval = {};
	check(shim()->get_WaitInterval(&waitInterval));
	return waitInterval;
}

template <typename T> Windows::ApplicationModel::Background::ContentPrefetchTrigger impl_IContentPrefetchTriggerFactory<T>::Create(Windows::Foundation::TimeSpan const & waitInterval) const
{
	Windows::ApplicationModel::Background::ContentPrefetchTrigger trigger = nullptr;
	check(shim()->abi_Create(waitInterval, put(trigger)));
	return trigger;
}

template <typename T> Windows::ApplicationModel::Background::SmsMessageReceivedTrigger impl_ISmsMessageReceivedTriggerFactory<T>::Create(Windows::Devices::Sms::SmsFilterRules const & filterRules) const
{
	Windows::ApplicationModel::Background::SmsMessageReceivedTrigger value = nullptr;
	check(shim()->abi_Create(get(filterRules), put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger impl_IStorageLibraryContentChangedTriggerStatics<T>::Create(Windows::Storage::StorageLibrary const & storageLibrary) const
{
	Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger result = nullptr;
	check(shim()->abi_Create(get(storageLibrary), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger impl_IStorageLibraryContentChangedTriggerStatics<T>::CreateFromLibraries(Windows::Foundation::Collections::IIterable<Windows::Storage::StorageLibrary> const & storageLibraries) const
{
	Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger result = nullptr;
	check(shim()->abi_CreateFromLibraries(get(storageLibraries), put(result)));
	return result;
}

template <typename T> bool impl_ISystemTrigger<T>::OneShot() const
{
	bool oneShot = {};
	check(shim()->get_OneShot(put(oneShot)));
	return oneShot;
}

template <typename T> Windows::ApplicationModel::Background::SystemTriggerType impl_ISystemTrigger<T>::TriggerType() const
{
	Windows::ApplicationModel::Background::SystemTriggerType triggerType = {};
	check(shim()->get_TriggerType(&triggerType));
	return triggerType;
}

template <typename T> Windows::ApplicationModel::Background::SystemTrigger impl_ISystemTriggerFactory<T>::Create(Windows::ApplicationModel::Background::SystemTriggerType const triggerType, bool const oneShot) const
{
	Windows::ApplicationModel::Background::SystemTrigger trigger = nullptr;
	check(shim()->abi_Create(triggerType, oneShot, put(trigger)));
	return trigger;
}

template <typename T> Windows::ApplicationModel::Background::SystemConditionType impl_ISystemCondition<T>::ConditionType() const
{
	Windows::ApplicationModel::Background::SystemConditionType conditionType = {};
	check(shim()->get_ConditionType(&conditionType));
	return conditionType;
}

template <typename T> Windows::ApplicationModel::Background::SystemCondition impl_ISystemConditionFactory<T>::Create(Windows::ApplicationModel::Background::SystemConditionType const conditionType) const
{
	Windows::ApplicationModel::Background::SystemCondition condition = nullptr;
	check(shim()->abi_Create(conditionType, put(condition)));
	return condition;
}

template <typename T> String impl_INetworkOperatorNotificationTrigger<T>::NetworkAccountId() const
{
	String value;
	check(shim()->get_NetworkAccountId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger impl_INetworkOperatorNotificationTriggerFactory<T>::Create(StringReference const & networkAccountId) const
{
	Windows::ApplicationModel::Background::NetworkOperatorNotificationTrigger trigger = nullptr;
	check(shim()->abi_Create(get(networkAccountId), put(trigger)));
	return trigger;
}

template <typename T> Windows::Storage::Provider::CachedFileTarget impl_ICachedFileUpdaterTriggerDetails<T>::UpdateTarget() const
{
	Windows::Storage::Provider::CachedFileTarget value = {};
	check(shim()->get_UpdateTarget(&value));
	return value;
}

template <typename T> Windows::Storage::Provider::FileUpdateRequest impl_ICachedFileUpdaterTriggerDetails<T>::UpdateRequest() const
{
	Windows::Storage::Provider::FileUpdateRequest value = nullptr;
	check(shim()->get_UpdateRequest(put(value)));
	return value;
}

template <typename T> bool impl_ICachedFileUpdaterTriggerDetails<T>::CanRequestUserInput() const
{
	bool value = {};
	check(shim()->get_CanRequestUserInput(put(value)));
	return value;
}

template <typename T> unsigned impl_ITimeTrigger<T>::FreshnessTime() const
{
	unsigned freshnessTime = {};
	check(shim()->get_FreshnessTime(&freshnessTime));
	return freshnessTime;
}

template <typename T> bool impl_ITimeTrigger<T>::OneShot() const
{
	bool oneShot = {};
	check(shim()->get_OneShot(put(oneShot)));
	return oneShot;
}

template <typename T> Windows::ApplicationModel::Background::TimeTrigger impl_ITimeTriggerFactory<T>::Create(unsigned const freshnessTime, bool const oneShot) const
{
	Windows::ApplicationModel::Background::TimeTrigger trigger = nullptr;
	check(shim()->abi_Create(freshnessTime, oneShot, put(trigger)));
	return trigger;
}

template <typename T> unsigned impl_IMaintenanceTrigger<T>::FreshnessTime() const
{
	unsigned freshnessTime = {};
	check(shim()->get_FreshnessTime(&freshnessTime));
	return freshnessTime;
}

template <typename T> bool impl_IMaintenanceTrigger<T>::OneShot() const
{
	bool oneShot = {};
	check(shim()->get_OneShot(put(oneShot)));
	return oneShot;
}

template <typename T> Windows::ApplicationModel::Background::MaintenanceTrigger impl_IMaintenanceTriggerFactory<T>::Create(unsigned const freshnessTime, bool const oneShot) const
{
	Windows::ApplicationModel::Background::MaintenanceTrigger trigger = nullptr;
	check(shim()->abi_Create(freshnessTime, oneShot, put(trigger)));
	return trigger;
}

template <typename T> bool impl_IPhoneTrigger<T>::OneShot() const
{
	bool value = {};
	check(shim()->get_OneShot(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::Background::PhoneTriggerType impl_IPhoneTrigger<T>::TriggerType() const
{
	Windows::ApplicationModel::Calls::Background::PhoneTriggerType result = {};
	check(shim()->get_TriggerType(&result));
	return result;
}

template <typename T> Windows::ApplicationModel::Background::PhoneTrigger impl_IPhoneTriggerFactory<T>::Create(Windows::ApplicationModel::Calls::Background::PhoneTriggerType const type, bool const oneShot) const
{
	Windows::ApplicationModel::Background::PhoneTrigger result = nullptr;
	check(shim()->abi_Create(type, oneShot, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> impl_IDeviceUseTrigger<T>::RequestAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> result;
	check(shim()->abi_RequestAsyncSimple(get(deviceId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> impl_IDeviceUseTrigger<T>::RequestAsync(StringReference const & deviceId, StringReference const & arguments) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> result;
	check(shim()->abi_RequestAsyncWithArguments(get(deviceId), get(arguments), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> impl_IDeviceServicingTrigger<T>::RequestAsync(StringReference const & deviceId, Windows::Foundation::TimeSpan const & expectedDuration) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> result;
	check(shim()->abi_RequestAsyncSimple(get(deviceId), expectedDuration, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> impl_IDeviceServicingTrigger<T>::RequestAsync(StringReference const & deviceId, Windows::Foundation::TimeSpan const & expectedDuration, StringReference const & arguments) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::DeviceTriggerResult> result;
	check(shim()->abi_RequestAsyncWithArguments(get(deviceId), expectedDuration, get(arguments), put(result)));
	return result;
}

template <typename T> Windows::Devices::Bluetooth::Background::RfcommInboundConnectionInformation impl_IRfcommConnectionTrigger<T>::InboundConnection() const
{
	Windows::Devices::Bluetooth::Background::RfcommInboundConnectionInformation value = nullptr;
	check(shim()->get_InboundConnection(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Background::RfcommOutboundConnectionInformation impl_IRfcommConnectionTrigger<T>::OutboundConnection() const
{
	Windows::Devices::Bluetooth::Background::RfcommOutboundConnectionInformation value = nullptr;
	check(shim()->get_OutboundConnection(put(value)));
	return value;
}

template <typename T> bool impl_IRfcommConnectionTrigger<T>::AllowMultipleConnections() const
{
	bool value = {};
	check(shim()->get_AllowMultipleConnections(put(value)));
	return value;
}

template <typename T> void impl_IRfcommConnectionTrigger<T>::AllowMultipleConnections(bool const value) const
{
	check(shim()->put_AllowMultipleConnections(value));
}

template <typename T> Windows::Networking::Sockets::SocketProtectionLevel impl_IRfcommConnectionTrigger<T>::ProtectionLevel() const
{
	Windows::Networking::Sockets::SocketProtectionLevel value = {};
	check(shim()->get_ProtectionLevel(&value));
	return value;
}

template <typename T> void impl_IRfcommConnectionTrigger<T>::ProtectionLevel(Windows::Networking::Sockets::SocketProtectionLevel const value) const
{
	check(shim()->put_ProtectionLevel(value));
}

template <typename T> Windows::Networking::HostName impl_IRfcommConnectionTrigger<T>::RemoteHostName() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_RemoteHostName(put(value)));
	return value;
}

template <typename T> void impl_IRfcommConnectionTrigger<T>::RemoteHostName(Windows::Networking::HostName const & value) const
{
	check(shim()->put_RemoteHostName(get(value)));
}

template <typename T> String impl_IDeviceConnectionChangeTrigger<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> bool impl_IDeviceConnectionChangeTrigger<T>::CanMaintainConnection() const
{
	bool value = {};
	check(shim()->get_CanMaintainConnection(put(value)));
	return value;
}

template <typename T> bool impl_IDeviceConnectionChangeTrigger<T>::MaintainConnection() const
{
	bool value = {};
	check(shim()->get_MaintainConnection(put(value)));
	return value;
}

template <typename T> void impl_IDeviceConnectionChangeTrigger<T>::MaintainConnection(bool const value) const
{
	check(shim()->put_MaintainConnection(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Background::DeviceConnectionChangeTrigger> impl_IDeviceConnectionChangeTriggerStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Background::DeviceConnectionChangeTrigger> deviceChangeTrigger;
	check(shim()->abi_FromIdAsync(get(deviceId), put(deviceChangeTrigger)));
	return deviceChangeTrigger;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic impl_IGattCharacteristicNotificationTrigger<T>::Characteristic() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic value = nullptr;
	check(shim()->get_Characteristic(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::GattCharacteristicNotificationTrigger impl_IGattCharacteristicNotificationTriggerFactory<T>::Create(Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic const & characteristic) const
{
	Windows::ApplicationModel::Background::GattCharacteristicNotificationTrigger gattCharacteristicNotificationTrigger = nullptr;
	check(shim()->abi_Create(get(characteristic), put(gattCharacteristicNotificationTrigger)));
	return gattCharacteristicNotificationTrigger;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBluetoothLEAdvertisementWatcherTrigger<T>::MinSamplingInterval() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_MinSamplingInterval(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBluetoothLEAdvertisementWatcherTrigger<T>::MaxSamplingInterval() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_MaxSamplingInterval(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBluetoothLEAdvertisementWatcherTrigger<T>::MinOutOfRangeTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_MinOutOfRangeTimeout(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBluetoothLEAdvertisementWatcherTrigger<T>::MaxOutOfRangeTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_MaxOutOfRangeTimeout(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter impl_IBluetoothLEAdvertisementWatcherTrigger<T>::SignalStrengthFilter() const
{
	Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter value = nullptr;
	check(shim()->get_SignalStrengthFilter(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcherTrigger<T>::SignalStrengthFilter(Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter const & value) const
{
	check(shim()->put_SignalStrengthFilter(get(value)));
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter impl_IBluetoothLEAdvertisementWatcherTrigger<T>::AdvertisementFilter() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter value = nullptr;
	check(shim()->get_AdvertisementFilter(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcherTrigger<T>::AdvertisementFilter(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter const & value) const
{
	check(shim()->put_AdvertisementFilter(get(value)));
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement impl_IBluetoothLEAdvertisementPublisherTrigger<T>::Advertisement() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement value = nullptr;
	check(shim()->get_Advertisement(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::LocationTriggerType impl_ILocationTrigger<T>::TriggerType() const
{
	Windows::ApplicationModel::Background::LocationTriggerType triggerType = {};
	check(shim()->get_TriggerType(&triggerType));
	return triggerType;
}

template <typename T> Windows::ApplicationModel::Background::LocationTrigger impl_ILocationTriggerFactory<T>::Create(Windows::ApplicationModel::Background::LocationTriggerType const triggerType) const
{
	Windows::ApplicationModel::Background::LocationTrigger locationTrigger = nullptr;
	check(shim()->abi_Create(triggerType, put(locationTrigger)));
	return locationTrigger;
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Sensors::ActivityType> impl_IActivitySensorTrigger<T>::SubscribedActivities() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Sensors::ActivityType> value;
	check(shim()->get_SubscribedActivities(put(value)));
	return value;
}

template <typename T> unsigned impl_IActivitySensorTrigger<T>::ReportInterval() const
{
	unsigned value = {};
	check(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Sensors::ActivityType> impl_IActivitySensorTrigger<T>::SupportedActivities() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Sensors::ActivityType> value;
	check(shim()->get_SupportedActivities(put(value)));
	return value;
}

template <typename T> unsigned impl_IActivitySensorTrigger<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::ActivitySensorTrigger impl_IActivitySensorTriggerFactory<T>::Create(unsigned const reportIntervalInMilliseconds) const
{
	Windows::ApplicationModel::Background::ActivitySensorTrigger activityTrigger = nullptr;
	check(shim()->abi_Create(reportIntervalInMilliseconds, put(activityTrigger)));
	return activityTrigger;
}

template <typename T> Windows::ApplicationModel::Background::SensorDataThresholdTrigger impl_ISensorDataThresholdTriggerFactory<T>::Create(Windows::Devices::Sensors::ISensorDataThreshold const & threshold) const
{
	Windows::ApplicationModel::Background::SensorDataThresholdTrigger trigger = nullptr;
	check(shim()->abi_Create(get(threshold), put(trigger)));
	return trigger;
}

template <typename T> Windows::ApplicationModel::Background::PushNotificationTrigger impl_IPushNotificationTriggerFactory<T>::Create(StringReference const & applicationId) const
{
	Windows::ApplicationModel::Background::PushNotificationTrigger trigger = nullptr;
	check(shim()->abi_Create(get(applicationId), put(trigger)));
	return trigger;
}

template <typename T> Windows::ApplicationModel::Background::ToastNotificationHistoryChangedTrigger impl_IToastNotificationHistoryChangedTriggerFactory<T>::Create(StringReference const & applicationId) const
{
	Windows::ApplicationModel::Background::ToastNotificationHistoryChangedTrigger trigger = nullptr;
	check(shim()->abi_Create(get(applicationId), put(trigger)));
	return trigger;
}

template <typename T> Windows::ApplicationModel::Background::ToastNotificationActionTrigger impl_IToastNotificationActionTriggerFactory<T>::Create(StringReference const & applicationId) const
{
	Windows::ApplicationModel::Background::ToastNotificationActionTrigger trigger = nullptr;
	check(shim()->abi_Create(get(applicationId), put(trigger)));
	return trigger;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls {

template <typename T> String impl_IPhoneCallHistoryEntry<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress impl_IPhoneCallHistoryEntry<T>::Address() const
{
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress value = nullptr;
	check(shim()->get_Address(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::Address(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress const & value) const
{
	check(shim()->put_Address(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IPhoneCallHistoryEntry<T>::Duration() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_Duration(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::Duration(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_Duration(get(value)));
}

template <typename T> bool impl_IPhoneCallHistoryEntry<T>::IsCallerIdBlocked() const
{
	bool value = {};
	check(shim()->get_IsCallerIdBlocked(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::IsCallerIdBlocked(bool const value) const
{
	check(shim()->put_IsCallerIdBlocked(value));
}

template <typename T> bool impl_IPhoneCallHistoryEntry<T>::IsEmergency() const
{
	bool value = {};
	check(shim()->get_IsEmergency(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::IsEmergency(bool const value) const
{
	check(shim()->put_IsEmergency(value));
}

template <typename T> bool impl_IPhoneCallHistoryEntry<T>::IsIncoming() const
{
	bool value = {};
	check(shim()->get_IsIncoming(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::IsIncoming(bool const value) const
{
	check(shim()->put_IsIncoming(value));
}

template <typename T> bool impl_IPhoneCallHistoryEntry<T>::IsMissed() const
{
	bool value = {};
	check(shim()->get_IsMissed(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::IsMissed(bool const value) const
{
	check(shim()->put_IsMissed(value));
}

template <typename T> bool impl_IPhoneCallHistoryEntry<T>::IsRinging() const
{
	bool value = {};
	check(shim()->get_IsRinging(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::IsRinging(bool const value) const
{
	check(shim()->put_IsRinging(value));
}

template <typename T> bool impl_IPhoneCallHistoryEntry<T>::IsSeen() const
{
	bool value = {};
	check(shim()->get_IsSeen(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::IsSeen(bool const value) const
{
	check(shim()->put_IsSeen(value));
}

template <typename T> bool impl_IPhoneCallHistoryEntry<T>::IsSuppressed() const
{
	bool value = {};
	check(shim()->get_IsSuppressed(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::IsSuppressed(bool const value) const
{
	check(shim()->put_IsSuppressed(value));
}

template <typename T> bool impl_IPhoneCallHistoryEntry<T>::IsVoicemail() const
{
	bool value = {};
	check(shim()->get_IsVoicemail(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::IsVoicemail(bool const value) const
{
	check(shim()->put_IsVoicemail(value));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistoryEntryMedia impl_IPhoneCallHistoryEntry<T>::Media() const
{
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryMedia value = {};
	check(shim()->get_Media(&value));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::Media(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryMedia const value) const
{
	check(shim()->put_Media(value));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistoryEntryOtherAppReadAccess impl_IPhoneCallHistoryEntry<T>::OtherAppReadAccess() const
{
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryOtherAppReadAccess value = {};
	check(shim()->get_OtherAppReadAccess(&value));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::OtherAppReadAccess(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryOtherAppReadAccess const value) const
{
	check(shim()->put_OtherAppReadAccess(value));
}

template <typename T> String impl_IPhoneCallHistoryEntry<T>::RemoteId() const
{
	String value;
	check(shim()->get_RemoteId(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::RemoteId(StringReference const & value) const
{
	check(shim()->put_RemoteId(get(value)));
}

template <typename T> String impl_IPhoneCallHistoryEntry<T>::SourceDisplayName() const
{
	String value;
	check(shim()->get_SourceDisplayName(put(value)));
	return value;
}

template <typename T> String impl_IPhoneCallHistoryEntry<T>::SourceId() const
{
	String value;
	check(shim()->get_SourceId(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::SourceId(StringReference const & value) const
{
	check(shim()->put_SourceId(get(value)));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistorySourceIdKind impl_IPhoneCallHistoryEntry<T>::SourceIdKind() const
{
	Windows::ApplicationModel::Calls::PhoneCallHistorySourceIdKind value = {};
	check(shim()->get_SourceIdKind(&value));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::SourceIdKind(Windows::ApplicationModel::Calls::PhoneCallHistorySourceIdKind const value) const
{
	check(shim()->put_SourceIdKind(value));
}

template <typename T> Windows::Foundation::DateTime impl_IPhoneCallHistoryEntry<T>::StartTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_StartTime(&value));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntry<T>::StartTime(Windows::Foundation::DateTime const & value) const
{
	check(shim()->put_StartTime(value));
}

template <typename T> String impl_IPhoneCallHistoryEntryAddress<T>::ContactId() const
{
	String value;
	check(shim()->get_ContactId(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntryAddress<T>::ContactId(StringReference const & value) const
{
	check(shim()->put_ContactId(get(value)));
}

template <typename T> String impl_IPhoneCallHistoryEntryAddress<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntryAddress<T>::DisplayName(StringReference const & value) const
{
	check(shim()->put_DisplayName(get(value)));
}

template <typename T> String impl_IPhoneCallHistoryEntryAddress<T>::RawAddress() const
{
	String value;
	check(shim()->get_RawAddress(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntryAddress<T>::RawAddress(StringReference const & value) const
{
	check(shim()->put_RawAddress(get(value)));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistoryEntryRawAddressKind impl_IPhoneCallHistoryEntryAddress<T>::RawAddressKind() const
{
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryRawAddressKind value = {};
	check(shim()->get_RawAddressKind(&value));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntryAddress<T>::RawAddressKind(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryRawAddressKind const value) const
{
	check(shim()->put_RawAddressKind(value));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress impl_IPhoneCallHistoryEntryAddressFactory<T>::Create(StringReference const & rawAddress, Windows::ApplicationModel::Calls::PhoneCallHistoryEntryRawAddressKind const rawAddressKind) const
{
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryAddress result = nullptr;
	check(shim()->abi_Create(get(rawAddress), rawAddressKind, put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistoryEntryQueryDesiredMedia impl_IPhoneCallHistoryEntryQueryOptions<T>::DesiredMedia() const
{
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryQueryDesiredMedia value = {};
	check(shim()->get_DesiredMedia(&value));
	return value;
}

template <typename T> void impl_IPhoneCallHistoryEntryQueryOptions<T>::DesiredMedia(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryQueryDesiredMedia const value) const
{
	check(shim()->put_DesiredMedia(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IPhoneCallHistoryEntryQueryOptions<T>::SourceIds() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_SourceIds(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry>> impl_IPhoneCallHistoryEntryReader<T>::ReadBatchAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry>> result;
	check(shim()->abi_ReadBatchAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry> impl_IPhoneCallHistoryStore<T>::GetEntryAsync(StringReference const & callHistoryEntryId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry> result;
	check(shim()->abi_GetEntryAsync(get(callHistoryEntryId), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistoryEntryReader impl_IPhoneCallHistoryStore<T>::GetEntryReader() const
{
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryReader result = nullptr;
	check(shim()->abi_GetEntryReader(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallHistoryEntryReader impl_IPhoneCallHistoryStore<T>::GetEntryReader(Windows::ApplicationModel::Calls::PhoneCallHistoryEntryQueryOptions const & queryOptions) const
{
	Windows::ApplicationModel::Calls::PhoneCallHistoryEntryReader result = nullptr;
	check(shim()->abi_GetEntryReaderWithOptions(get(queryOptions), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhoneCallHistoryStore<T>::SaveEntryAsync(Windows::ApplicationModel::Calls::PhoneCallHistoryEntry const & callHistoryEntry) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_SaveEntryAsync(get(callHistoryEntry), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhoneCallHistoryStore<T>::DeleteEntryAsync(Windows::ApplicationModel::Calls::PhoneCallHistoryEntry const & callHistoryEntry) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_DeleteEntryAsync(get(callHistoryEntry), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhoneCallHistoryStore<T>::DeleteEntriesAsync(Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry> const & callHistoryEntries) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_DeleteEntriesAsync(get(callHistoryEntries), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhoneCallHistoryStore<T>::MarkEntryAsSeenAsync(Windows::ApplicationModel::Calls::PhoneCallHistoryEntry const & callHistoryEntry) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_MarkEntryAsSeenAsync(get(callHistoryEntry), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhoneCallHistoryStore<T>::MarkEntriesAsSeenAsync(Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Calls::PhoneCallHistoryEntry> const & callHistoryEntries) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_MarkEntriesAsSeenAsync(get(callHistoryEntries), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IPhoneCallHistoryStore<T>::GetUnseenCountAsync() const
{
	Windows::Foundation::IAsyncOperation<unsigned> result;
	check(shim()->abi_GetUnseenCountAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhoneCallHistoryStore<T>::MarkAllAsSeenAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_MarkAllAsSeenAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IPhoneCallHistoryStore<T>::GetSourcesUnseenCountAsync(Windows::Foundation::Collections::IIterable<String> const & sourceIds) const
{
	Windows::Foundation::IAsyncOperation<unsigned> result;
	check(shim()->abi_GetSourcesUnseenCountAsync(get(sourceIds), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhoneCallHistoryStore<T>::MarkSourcesAsSeenAsync(Windows::Foundation::Collections::IIterable<String> const & sourceIds) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_MarkSourcesAsSeenAsync(get(sourceIds), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallHistoryStore> impl_IPhoneCallHistoryManagerStatics<T>::RequestStoreAsync(Windows::ApplicationModel::Calls::PhoneCallHistoryStoreAccessType const accessType) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallHistoryStore> result;
	check(shim()->abi_RequestStoreAsync(accessType, put(result)));
	return result;
}

template <typename T> String impl_IPhoneVoicemail<T>::Number() const
{
	String value;
	check(shim()->get_Number(put(value)));
	return value;
}

template <typename T> int impl_IPhoneVoicemail<T>::MessageCount() const
{
	int value = {};
	check(shim()->get_MessageCount(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneVoicemailType impl_IPhoneVoicemail<T>::Type() const
{
	Windows::ApplicationModel::Calls::PhoneVoicemailType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhoneVoicemail<T>::DialVoicemailAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_DialVoicemailAsync(put(result)));
	return result;
}

template <typename T> String impl_IPhoneDialOptions<T>::Number() const
{
	String value;
	check(shim()->get_Number(put(value)));
	return value;
}

template <typename T> void impl_IPhoneDialOptions<T>::Number(StringReference const & value) const
{
	check(shim()->put_Number(get(value)));
}

template <typename T> String impl_IPhoneDialOptions<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IPhoneDialOptions<T>::DisplayName(StringReference const & value) const
{
	check(shim()->put_DisplayName(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IPhoneDialOptions<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value = nullptr;
	check(shim()->get_Contact(put(value)));
	return value;
}

template <typename T> void impl_IPhoneDialOptions<T>::Contact(Windows::ApplicationModel::Contacts::Contact const & value) const
{
	check(shim()->put_Contact(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactPhone impl_IPhoneDialOptions<T>::ContactPhone() const
{
	Windows::ApplicationModel::Contacts::ContactPhone value = nullptr;
	check(shim()->get_ContactPhone(put(value)));
	return value;
}

template <typename T> void impl_IPhoneDialOptions<T>::ContactPhone(Windows::ApplicationModel::Contacts::ContactPhone const & value) const
{
	check(shim()->put_ContactPhone(get(value)));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallMedia impl_IPhoneDialOptions<T>::Media() const
{
	Windows::ApplicationModel::Calls::PhoneCallMedia value = {};
	check(shim()->get_Media(&value));
	return value;
}

template <typename T> void impl_IPhoneDialOptions<T>::Media(Windows::ApplicationModel::Calls::PhoneCallMedia const value) const
{
	check(shim()->put_Media(value));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneAudioRoutingEndpoint impl_IPhoneDialOptions<T>::AudioEndpoint() const
{
	Windows::ApplicationModel::Calls::PhoneAudioRoutingEndpoint value = {};
	check(shim()->get_AudioEndpoint(&value));
	return value;
}

template <typename T> void impl_IPhoneDialOptions<T>::AudioEndpoint(Windows::ApplicationModel::Calls::PhoneAudioRoutingEndpoint const value) const
{
	check(shim()->put_AudioEndpoint(value));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneSimState impl_IPhoneLineCellularDetails<T>::SimState() const
{
	Windows::ApplicationModel::Calls::PhoneSimState value = {};
	check(shim()->get_SimState(&value));
	return value;
}

template <typename T> int impl_IPhoneLineCellularDetails<T>::SimSlotIndex() const
{
	int value = {};
	check(shim()->get_SimSlotIndex(&value));
	return value;
}

template <typename T> bool impl_IPhoneLineCellularDetails<T>::IsModemOn() const
{
	bool value = {};
	check(shim()->get_IsModemOn(put(value)));
	return value;
}

template <typename T> int impl_IPhoneLineCellularDetails<T>::RegistrationRejectCode() const
{
	int value = {};
	check(shim()->get_RegistrationRejectCode(&value));
	return value;
}

template <typename T> String impl_IPhoneLineCellularDetails<T>::GetNetworkOperatorDisplayText(Windows::ApplicationModel::Calls::PhoneLineNetworkOperatorDisplayTextLocation const location) const
{
	String value;
	check(shim()->abi_GetNetworkOperatorDisplayText(location, put(value)));
	return value;
}

template <typename T> long long impl_IPhoneLine<T>::LineChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLine, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_LineChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPhoneLine<T>::LineChanged(F handler) const
{
	return LineChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::PhoneLine, IInspectable>(handler));
}

template <typename T> void impl_IPhoneLine<T>::LineChanged(long long const token) const
{
	check(shim()->remove_LineChanged(token));
}

template <typename T> GUID impl_IPhoneLine<T>::Id() const
{
	GUID value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IPhoneLine<T>::DisplayColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DisplayColor(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneNetworkState impl_IPhoneLine<T>::NetworkState() const
{
	Windows::ApplicationModel::Calls::PhoneNetworkState value = {};
	check(shim()->get_NetworkState(&value));
	return value;
}

template <typename T> String impl_IPhoneLine<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneVoicemail impl_IPhoneLine<T>::Voicemail() const
{
	Windows::ApplicationModel::Calls::PhoneVoicemail value = nullptr;
	check(shim()->get_Voicemail(put(value)));
	return value;
}

template <typename T> String impl_IPhoneLine<T>::NetworkName() const
{
	String value;
	check(shim()->get_NetworkName(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneLineCellularDetails impl_IPhoneLine<T>::CellularDetails() const
{
	Windows::ApplicationModel::Calls::PhoneLineCellularDetails value = nullptr;
	check(shim()->get_CellularDetails(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneLineTransport impl_IPhoneLine<T>::Transport() const
{
	Windows::ApplicationModel::Calls::PhoneLineTransport value = {};
	check(shim()->get_Transport(&value));
	return value;
}

template <typename T> bool impl_IPhoneLine<T>::CanDial() const
{
	bool value = {};
	check(shim()->get_CanDial(put(value)));
	return value;
}

template <typename T> bool impl_IPhoneLine<T>::SupportsTile() const
{
	bool value = {};
	check(shim()->get_SupportsTile(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneCallVideoCapabilities impl_IPhoneLine<T>::VideoCallingCapabilities() const
{
	Windows::ApplicationModel::Calls::PhoneCallVideoCapabilities value = nullptr;
	check(shim()->get_VideoCallingCapabilities(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneLineConfiguration impl_IPhoneLine<T>::LineConfiguration() const
{
	Windows::ApplicationModel::Calls::PhoneLineConfiguration value = nullptr;
	check(shim()->get_LineConfiguration(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IPhoneLine<T>::IsImmediateDialNumberAsync(StringReference const & number) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_IsImmediateDialNumberAsync(get(number), put(result)));
	return result;
}

template <typename T> void impl_IPhoneLine<T>::Dial(StringReference const & number, StringReference const & displayName) const
{
	check(shim()->abi_Dial(get(number), get(displayName)));
}

template <typename T> void impl_IPhoneLine<T>::DialWithOptions(Windows::ApplicationModel::Calls::PhoneDialOptions const & options) const
{
	check(shim()->abi_DialWithOptions(get(options)));
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IPhoneCallStore<T>::IsEmergencyPhoneNumberAsync(StringReference const & number) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_IsEmergencyPhoneNumberAsync(get(number), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<GUID> impl_IPhoneCallStore<T>::GetDefaultLineAsync() const
{
	Windows::Foundation::IAsyncOperation<GUID> result;
	check(shim()->abi_GetDefaultLineAsync(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Calls::PhoneLineWatcher impl_IPhoneCallStore<T>::RequestLineWatcher() const
{
	Windows::ApplicationModel::Calls::PhoneLineWatcher result = nullptr;
	check(shim()->abi_RequestLineWatcher(put(result)));
	return result;
}

template <typename T> bool impl_IPhoneLineConfiguration<T>::IsVideoCallingEnabled() const
{
	bool value = {};
	check(shim()->get_IsVideoCallingEnabled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IPhoneLineConfiguration<T>::ExtendedProperties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value;
	check(shim()->get_ExtendedProperties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneLine> impl_IPhoneLineStatics<T>::FromIdAsync(GUID const lineId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneLine> result;
	check(shim()->abi_FromIdAsync(lineId, put(result)));
	return result;
}

template <typename T> void impl_IPhoneLineWatcher<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IPhoneLineWatcher<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> long long impl_IPhoneLineWatcher<T>::LineAdded(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_LineAdded(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPhoneLineWatcher<T>::LineAdded(F handler) const
{
	return LineAdded(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs>(handler));
}

template <typename T> void impl_IPhoneLineWatcher<T>::LineAdded(long long const token) const
{
	check(shim()->remove_LineAdded(token));
}

template <typename T> long long impl_IPhoneLineWatcher<T>::LineRemoved(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_LineRemoved(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPhoneLineWatcher<T>::LineRemoved(F handler) const
{
	return LineRemoved(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs>(handler));
}

template <typename T> void impl_IPhoneLineWatcher<T>::LineRemoved(long long const token) const
{
	check(shim()->remove_LineRemoved(token));
}

template <typename T> long long impl_IPhoneLineWatcher<T>::LineUpdated(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_LineUpdated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPhoneLineWatcher<T>::LineUpdated(F handler) const
{
	return LineUpdated(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, Windows::ApplicationModel::Calls::PhoneLineWatcherEventArgs>(handler));
}

template <typename T> void impl_IPhoneLineWatcher<T>::LineUpdated(long long const token) const
{
	check(shim()->remove_LineUpdated(token));
}

template <typename T> long long impl_IPhoneLineWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_EnumerationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPhoneLineWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPhoneLineWatcher<T>::EnumerationCompleted(long long const token) const
{
	check(shim()->remove_EnumerationCompleted(token));
}

template <typename T> long long impl_IPhoneLineWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPhoneLineWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::PhoneLineWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPhoneLineWatcher<T>::Stopped(long long const token) const
{
	check(shim()->remove_Stopped(token));
}

template <typename T> Windows::ApplicationModel::Calls::PhoneLineWatcherStatus impl_IPhoneLineWatcher<T>::Status() const
{
	Windows::ApplicationModel::Calls::PhoneLineWatcherStatus status = {};
	check(shim()->get_Status(&status));
	return status;
}

template <typename T> GUID impl_IPhoneLineWatcherEventArgs<T>::LineId() const
{
	GUID value = {};
	check(shim()->get_LineId(&value));
	return value;
}

template <typename T> void impl_IPhoneCallManagerStatics<T>::ShowPhoneCallUI(StringReference const & phoneNumber, StringReference const & displayName) const
{
	check(shim()->abi_ShowPhoneCallUI(get(phoneNumber), get(displayName)));
}

template <typename T> long long impl_IPhoneCallManagerStatics2<T>::CallStateChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_CallStateChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPhoneCallManagerStatics2<T>::CallStateChanged(F handler) const
{
	return CallStateChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IPhoneCallManagerStatics2<T>::CallStateChanged(long long const token) const
{
	check(shim()->remove_CallStateChanged(token));
}

template <typename T> bool impl_IPhoneCallManagerStatics2<T>::IsCallActive() const
{
	bool value = {};
	check(shim()->get_IsCallActive(put(value)));
	return value;
}

template <typename T> bool impl_IPhoneCallManagerStatics2<T>::IsCallIncoming() const
{
	bool value = {};
	check(shim()->get_IsCallIncoming(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallManagerStatics2<T>::ShowPhoneCallSettingsUI() const
{
	check(shim()->abi_ShowPhoneCallSettingsUI());
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallStore> impl_IPhoneCallManagerStatics2<T>::RequestStoreAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallStore> result;
	check(shim()->abi_RequestStoreAsync(put(result)));
	return result;
}

template <typename T> bool impl_IPhoneCallVideoCapabilities<T>::IsVideoCallingCapable() const
{
	bool pValue = {};
	check(shim()->get_IsVideoCallingCapable(put(pValue)));
	return pValue;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallVideoCapabilities> impl_IPhoneCallVideoCapabilitiesManagerStatics<T>::GetCapabilitiesAsync(StringReference const & phoneNumber) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallVideoCapabilities> result;
	check(shim()->abi_GetCapabilitiesAsync(get(phoneNumber), put(result)));
	return result;
}

template <typename T> bool impl_IPhoneCallBlockingStatics<T>::BlockUnknownNumbers() const
{
	bool value = {};
	check(shim()->get_BlockUnknownNumbers(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallBlockingStatics<T>::BlockUnknownNumbers(bool const value) const
{
	check(shim()->put_BlockUnknownNumbers(value));
}

template <typename T> bool impl_IPhoneCallBlockingStatics<T>::BlockPrivateNumbers() const
{
	bool value = {};
	check(shim()->get_BlockPrivateNumbers(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallBlockingStatics<T>::BlockPrivateNumbers(bool const value) const
{
	check(shim()->put_BlockPrivateNumbers(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IPhoneCallBlockingStatics<T>::SetCallBlockingListAsync(Windows::Foundation::Collections::IIterable<String> const & phoneNumberList) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_SetCallBlockingListAsync(get(phoneNumberList), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Calls::VoipPhoneCallState impl_ICallStateChangeEventArgs<T>::State() const
{
	Windows::ApplicationModel::Calls::VoipPhoneCallState value = {};
	check(shim()->get_State(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::VoipPhoneCallMedia impl_ICallAnswerEventArgs<T>::AcceptedMedia() const
{
	Windows::ApplicationModel::Calls::VoipPhoneCallMedia value = {};
	check(shim()->get_AcceptedMedia(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::VoipPhoneCallRejectReason impl_ICallRejectEventArgs<T>::RejectReason() const
{
	Windows::ApplicationModel::Calls::VoipPhoneCallRejectReason value = {};
	check(shim()->get_RejectReason(&value));
	return value;
}

template <typename T> long long impl_IVoipPhoneCall<T>::EndRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallStateChangeEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_EndRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVoipPhoneCall<T>::EndRequested(F handler) const
{
	return EndRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallStateChangeEventArgs>(handler));
}

template <typename T> void impl_IVoipPhoneCall<T>::EndRequested(long long const token) const
{
	check(shim()->remove_EndRequested(token));
}

template <typename T> long long impl_IVoipPhoneCall<T>::HoldRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallStateChangeEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_HoldRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVoipPhoneCall<T>::HoldRequested(F handler) const
{
	return HoldRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallStateChangeEventArgs>(handler));
}

template <typename T> void impl_IVoipPhoneCall<T>::HoldRequested(long long const token) const
{
	check(shim()->remove_HoldRequested(token));
}

template <typename T> long long impl_IVoipPhoneCall<T>::ResumeRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallStateChangeEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ResumeRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVoipPhoneCall<T>::ResumeRequested(F handler) const
{
	return ResumeRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallStateChangeEventArgs>(handler));
}

template <typename T> void impl_IVoipPhoneCall<T>::ResumeRequested(long long const token) const
{
	check(shim()->remove_ResumeRequested(token));
}

template <typename T> long long impl_IVoipPhoneCall<T>::AnswerRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallAnswerEventArgs> const & acceptHandler) const
{
	long long token = {};
	check(shim()->add_AnswerRequested(get(acceptHandler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVoipPhoneCall<T>::AnswerRequested(F acceptHandler) const
{
	return AnswerRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallAnswerEventArgs>(acceptHandler));
}

template <typename T> void impl_IVoipPhoneCall<T>::AnswerRequested(long long const token) const
{
	check(shim()->remove_AnswerRequested(token));
}

template <typename T> long long impl_IVoipPhoneCall<T>::RejectRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallRejectEventArgs> const & rejectHandler) const
{
	long long token = {};
	check(shim()->add_RejectRequested(get(rejectHandler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVoipPhoneCall<T>::RejectRequested(F rejectHandler) const
{
	return RejectRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::VoipPhoneCall, Windows::ApplicationModel::Calls::CallRejectEventArgs>(rejectHandler));
}

template <typename T> void impl_IVoipPhoneCall<T>::RejectRequested(long long const token) const
{
	check(shim()->remove_RejectRequested(token));
}

template <typename T> void impl_IVoipPhoneCall<T>::NotifyCallHeld() const
{
	check(shim()->abi_NotifyCallHeld());
}

template <typename T> void impl_IVoipPhoneCall<T>::NotifyCallActive() const
{
	check(shim()->abi_NotifyCallActive());
}

template <typename T> void impl_IVoipPhoneCall<T>::NotifyCallEnded() const
{
	check(shim()->abi_NotifyCallEnded());
}

template <typename T> String impl_IVoipPhoneCall<T>::ContactName() const
{
	String value;
	check(shim()->get_ContactName(put(value)));
	return value;
}

template <typename T> void impl_IVoipPhoneCall<T>::ContactName(StringReference const & value) const
{
	check(shim()->put_ContactName(get(value)));
}

template <typename T> Windows::Foundation::DateTime impl_IVoipPhoneCall<T>::StartTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_StartTime(&value));
	return value;
}

template <typename T> void impl_IVoipPhoneCall<T>::StartTime(Windows::Foundation::DateTime const & value) const
{
	check(shim()->put_StartTime(value));
}

template <typename T> Windows::ApplicationModel::Calls::VoipPhoneCallMedia impl_IVoipPhoneCall<T>::CallMedia() const
{
	Windows::ApplicationModel::Calls::VoipPhoneCallMedia value = {};
	check(shim()->get_CallMedia(&value));
	return value;
}

template <typename T> void impl_IVoipPhoneCall<T>::CallMedia(Windows::ApplicationModel::Calls::VoipPhoneCallMedia const value) const
{
	check(shim()->put_CallMedia(value));
}

template <typename T> void impl_IVoipPhoneCall<T>::NotifyCallReady() const
{
	check(shim()->abi_NotifyCallReady());
}

template <typename T> bool impl_IMuteChangeEventArgs<T>::Muted() const
{
	bool value = {};
	check(shim()->get_Muted(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Calls::VoipPhoneCallResourceReservationStatus> impl_IVoipCallCoordinator<T>::ReserveCallResourcesAsync(StringReference const & taskEntryPoint) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Calls::VoipPhoneCallResourceReservationStatus> operation;
	check(shim()->abi_ReserveCallResourcesAsync(get(taskEntryPoint), put(operation)));
	return operation;
}

template <typename T> long long impl_IVoipCallCoordinator<T>::MuteStateChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::VoipCallCoordinator, Windows::ApplicationModel::Calls::MuteChangeEventArgs> const & muteChangeHandler) const
{
	long long token = {};
	check(shim()->add_MuteStateChanged(get(muteChangeHandler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVoipCallCoordinator<T>::MuteStateChanged(F muteChangeHandler) const
{
	return MuteStateChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::VoipCallCoordinator, Windows::ApplicationModel::Calls::MuteChangeEventArgs>(muteChangeHandler));
}

template <typename T> void impl_IVoipCallCoordinator<T>::MuteStateChanged(long long const token) const
{
	check(shim()->remove_MuteStateChanged(token));
}

template <typename T> Windows::ApplicationModel::Calls::VoipPhoneCall impl_IVoipCallCoordinator<T>::RequestNewIncomingCall(StringReference const & context, StringReference const & contactName, StringReference const & contactNumber, Windows::Foundation::Uri const & contactImage, StringReference const & serviceName, Windows::Foundation::Uri const & brandingImage, StringReference const & callDetails, Windows::Foundation::Uri const & ringtone, Windows::ApplicationModel::Calls::VoipPhoneCallMedia const media, Windows::Foundation::TimeSpan const & ringTimeout) const
{
	Windows::ApplicationModel::Calls::VoipPhoneCall call = nullptr;
	check(shim()->abi_RequestNewIncomingCall(get(context), get(contactName), get(contactNumber), get(contactImage), get(serviceName), get(brandingImage), get(callDetails), get(ringtone), media, ringTimeout, put(call)));
	return call;
}

template <typename T> Windows::ApplicationModel::Calls::VoipPhoneCall impl_IVoipCallCoordinator<T>::RequestNewOutgoingCall(StringReference const & context, StringReference const & contactName, StringReference const & serviceName, Windows::ApplicationModel::Calls::VoipPhoneCallMedia const media) const
{
	Windows::ApplicationModel::Calls::VoipPhoneCall call = nullptr;
	check(shim()->abi_RequestNewOutgoingCall(get(context), get(contactName), get(serviceName), media, put(call)));
	return call;
}

template <typename T> void impl_IVoipCallCoordinator<T>::NotifyMuted() const
{
	check(shim()->abi_NotifyMuted());
}

template <typename T> void impl_IVoipCallCoordinator<T>::NotifyUnmuted() const
{
	check(shim()->abi_NotifyUnmuted());
}

template <typename T> Windows::ApplicationModel::Calls::VoipPhoneCall impl_IVoipCallCoordinator<T>::RequestOutgoingUpgradeToVideoCall(GUID const callUpgradeGuid, StringReference const & context, StringReference const & contactName, StringReference const & serviceName) const
{
	Windows::ApplicationModel::Calls::VoipPhoneCall call = nullptr;
	check(shim()->abi_RequestOutgoingUpgradeToVideoCall(callUpgradeGuid, get(context), get(contactName), get(serviceName), put(call)));
	return call;
}

template <typename T> Windows::ApplicationModel::Calls::VoipPhoneCall impl_IVoipCallCoordinator<T>::RequestIncomingUpgradeToVideoCall(StringReference const & context, StringReference const & contactName, StringReference const & contactNumber, Windows::Foundation::Uri const & contactImage, StringReference const & serviceName, Windows::Foundation::Uri const & brandingImage, StringReference const & callDetails, Windows::Foundation::Uri const & ringtone, Windows::Foundation::TimeSpan const & ringTimeout) const
{
	Windows::ApplicationModel::Calls::VoipPhoneCall call = nullptr;
	check(shim()->abi_RequestIncomingUpgradeToVideoCall(get(context), get(contactName), get(contactNumber), get(contactImage), get(serviceName), get(brandingImage), get(callDetails), get(ringtone), ringTimeout, put(call)));
	return call;
}

template <typename T> void impl_IVoipCallCoordinator<T>::TerminateCellularCall(GUID const callUpgradeGuid) const
{
	check(shim()->abi_TerminateCellularCall(callUpgradeGuid));
}

template <typename T> void impl_IVoipCallCoordinator<T>::CancelUpgrade(GUID const callUpgradeGuid) const
{
	check(shim()->abi_CancelUpgrade(callUpgradeGuid));
}

template <typename T> Windows::ApplicationModel::Calls::VoipCallCoordinator impl_IVoipCallCoordinatorStatics<T>::GetDefault() const
{
	Windows::ApplicationModel::Calls::VoipCallCoordinator coordinator = nullptr;
	check(shim()->abi_GetDefault(put(coordinator)));
	return coordinator;
}

template <typename T> void impl_ILockScreenCallEndCallDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::ApplicationModel::Calls::LockScreenCallEndCallDeferral impl_ILockScreenCallEndRequestedEventArgs<T>::GetDeferral() const
{
	Windows::ApplicationModel::Calls::LockScreenCallEndCallDeferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ILockScreenCallEndRequestedEventArgs<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Deadline(&value));
	return value;
}

template <typename T> void impl_ILockScreenCallUI<T>::Dismiss() const
{
	check(shim()->abi_Dismiss());
}

template <typename T> long long impl_ILockScreenCallUI<T>::EndRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, Windows::ApplicationModel::Calls::LockScreenCallEndRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_EndRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ILockScreenCallUI<T>::EndRequested(F handler) const
{
	return EndRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, Windows::ApplicationModel::Calls::LockScreenCallEndRequestedEventArgs>(handler));
}

template <typename T> void impl_ILockScreenCallUI<T>::EndRequested(long long const token) const
{
	check(shim()->remove_EndRequested(token));
}

template <typename T> long long impl_ILockScreenCallUI<T>::Closed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Closed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ILockScreenCallUI<T>::Closed(F handler) const
{
	return Closed(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Calls::LockScreenCallUI, IInspectable>(handler));
}

template <typename T> void impl_ILockScreenCallUI<T>::Closed(long long const token) const
{
	check(shim()->remove_Closed(token));
}

template <typename T> String impl_ILockScreenCallUI<T>::CallTitle() const
{
	String value;
	check(shim()->get_CallTitle(put(value)));
	return value;
}

template <typename T> void impl_ILockScreenCallUI<T>::CallTitle(StringReference const & value) const
{
	check(shim()->put_CallTitle(get(value)));
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls { namespace Background {

template <typename T> String impl_IPhoneCallBlockedTriggerDetails<T>::PhoneNumber() const
{
	String value;
	check(shim()->get_PhoneNumber(put(value)));
	return value;
}

template <typename T> GUID impl_IPhoneCallBlockedTriggerDetails<T>::LineId() const
{
	GUID value = {};
	check(shim()->get_LineId(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Calls::Background::PhoneCallBlockedReason impl_IPhoneCallBlockedTriggerDetails<T>::CallBlockedReason() const
{
	Windows::ApplicationModel::Calls::Background::PhoneCallBlockedReason value = {};
	check(shim()->get_CallBlockedReason(&value));
	return value;
}

template <typename T> GUID impl_IPhoneCallOriginDataRequestTriggerDetails<T>::RequestId() const
{
	GUID result = {};
	check(shim()->get_RequestId(&result));
	return result;
}

template <typename T> String impl_IPhoneCallOriginDataRequestTriggerDetails<T>::PhoneNumber() const
{
	String result;
	check(shim()->get_PhoneNumber(put(result)));
	return result;
}

template <typename T> GUID impl_IPhoneNewVoicemailMessageTriggerDetails<T>::LineId() const
{
	GUID result = {};
	check(shim()->get_LineId(&result));
	return result;
}

template <typename T> int impl_IPhoneNewVoicemailMessageTriggerDetails<T>::VoicemailCount() const
{
	int result = {};
	check(shim()->get_VoicemailCount(&result));
	return result;
}

template <typename T> String impl_IPhoneNewVoicemailMessageTriggerDetails<T>::OperatorMessage() const
{
	String result;
	check(shim()->get_OperatorMessage(put(result)));
	return result;
}

template <typename T> GUID impl_IPhoneLineChangedTriggerDetails<T>::LineId() const
{
	GUID result = {};
	check(shim()->get_LineId(&result));
	return result;
}

template <typename T> Windows::ApplicationModel::Calls::Background::PhoneLineChangeKind impl_IPhoneLineChangedTriggerDetails<T>::ChangeType() const
{
	Windows::ApplicationModel::Calls::Background::PhoneLineChangeKind result = {};
	check(shim()->get_ChangeType(&result));
	return result;
}

template <typename T> bool impl_IPhoneLineChangedTriggerDetails<T>::HasLinePropertyChanged(Windows::ApplicationModel::Calls::Background::PhoneLineProperties const lineProperty) const
{
	bool result = {};
	check(shim()->abi_HasLinePropertyChanged(lineProperty, put(result)));
	return result;
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls { namespace Provider {

template <typename T> String impl_IPhoneCallOrigin<T>::Category() const
{
	String value;
	check(shim()->get_Category(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallOrigin<T>::Category(StringReference const & value) const
{
	check(shim()->put_Category(get(value)));
}

template <typename T> String impl_IPhoneCallOrigin<T>::CategoryDescription() const
{
	String value;
	check(shim()->get_CategoryDescription(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallOrigin<T>::CategoryDescription(StringReference const & value) const
{
	check(shim()->put_CategoryDescription(get(value)));
}

template <typename T> String impl_IPhoneCallOrigin<T>::Location() const
{
	String value;
	check(shim()->get_Location(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallOrigin<T>::Location(StringReference const & value) const
{
	check(shim()->put_Location(get(value)));
}

template <typename T> String impl_IPhoneCallOrigin2<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallOrigin2<T>::DisplayName(StringReference const & value) const
{
	check(shim()->put_DisplayName(get(value)));
}

template <typename T> bool impl_IPhoneCallOriginManagerStatics<T>::IsCurrentAppActiveCallOriginApp() const
{
	bool value = {};
	check(shim()->get_IsCurrentAppActiveCallOriginApp(put(value)));
	return value;
}

template <typename T> void impl_IPhoneCallOriginManagerStatics<T>::ShowPhoneCallOriginSettingsUI() const
{
	check(shim()->abi_ShowPhoneCallOriginSettingsUI());
}

template <typename T> void impl_IPhoneCallOriginManagerStatics<T>::SetCallOrigin(GUID const requestId, Windows::ApplicationModel::Calls::Provider::PhoneCallOrigin const & callOrigin) const
{
	check(shim()->abi_SetCallOrigin(requestId, get(callOrigin)));
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Chat {

template <typename T> bool impl_IChatMessageTransport<T>::IsAppSetAsNotificationProvider() const
{
	bool value = {};
	check(shim()->get_IsAppSetAsNotificationProvider(put(value)));
	return value;
}

template <typename T> bool impl_IChatMessageTransport<T>::IsActive() const
{
	bool value = {};
	check(shim()->get_IsActive(put(value)));
	return value;
}

template <typename T> String impl_IChatMessageTransport<T>::TransportFriendlyName() const
{
	String value;
	check(shim()->get_TransportFriendlyName(put(value)));
	return value;
}

template <typename T> String impl_IChatMessageTransport<T>::TransportId() const
{
	String value;
	check(shim()->get_TransportId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IChatMessageTransport<T>::RequestSetAsNotificationProviderAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_RequestSetAsNotificationProviderAsync(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessageTransportConfiguration impl_IChatMessageTransport2<T>::Configuration() const
{
	Windows::ApplicationModel::Chat::ChatMessageTransportConfiguration result = nullptr;
	check(shim()->get_Configuration(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessageTransportKind impl_IChatMessageTransport2<T>::TransportKind() const
{
	Windows::ApplicationModel::Chat::ChatMessageTransportKind result = {};
	check(shim()->get_TransportKind(&result));
	return result;
}

template <typename T> int impl_IChatMessageTransportConfiguration<T>::MaxAttachmentCount() const
{
	int result = {};
	check(shim()->get_MaxAttachmentCount(&result));
	return result;
}

template <typename T> int impl_IChatMessageTransportConfiguration<T>::MaxMessageSizeInKilobytes() const
{
	int result = {};
	check(shim()->get_MaxMessageSizeInKilobytes(&result));
	return result;
}

template <typename T> int impl_IChatMessageTransportConfiguration<T>::MaxRecipientCount() const
{
	int result = {};
	check(shim()->get_MaxRecipientCount(&result));
	return result;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IChatMessageTransportConfiguration<T>::SupportedVideoFormat() const
{
	Windows::Media::MediaProperties::MediaEncodingProfile result = nullptr;
	check(shim()->get_SupportedVideoFormat(put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IChatMessageTransportConfiguration<T>::ExtendedProperties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> result;
	check(shim()->get_ExtendedProperties(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessageChangeType impl_IChatMessageChange<T>::ChangeType() const
{
	Windows::ApplicationModel::Chat::ChatMessageChangeType value = {};
	check(shim()->get_ChangeType(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessage impl_IChatMessageChange<T>::Message() const
{
	Windows::ApplicationModel::Chat::ChatMessage value = nullptr;
	check(shim()->get_Message(put(value)));
	return value;
}

template <typename T> void impl_IChatMessageChangeReader<T>::AcceptChanges() const
{
	check(shim()->abi_AcceptChanges());
}

template <typename T> void impl_IChatMessageChangeReader<T>::AcceptChangesThrough(Windows::ApplicationModel::Chat::ChatMessageChange const & lastChangeToAcknowledge) const
{
	check(shim()->abi_AcceptChangesThrough(get(lastChangeToAcknowledge)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::ChatMessageChange>> impl_IChatMessageChangeReader<T>::ReadBatchAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::ChatMessageChange>> value;
	check(shim()->abi_ReadBatchAsync(put(value)));
	return value;
}

template <typename T> void impl_IChatMessageChangeTracker<T>::Enable() const
{
	check(shim()->abi_Enable());
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessageChangeReader impl_IChatMessageChangeTracker<T>::GetChangeReader() const
{
	Windows::ApplicationModel::Chat::ChatMessageChangeReader value = nullptr;
	check(shim()->abi_GetChangeReader(put(value)));
	return value;
}

template <typename T> void impl_IChatMessageChangeTracker<T>::Reset() const
{
	check(shim()->abi_Reset());
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IChatMessageValidationResult<T>::MaxPartCount() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_MaxPartCount(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IChatMessageValidationResult<T>::PartCount() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_PartCount(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IChatMessageValidationResult<T>::RemainingCharacterCountInPart() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_RemainingCharacterCountInPart(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessageValidationStatus impl_IChatMessageValidationResult<T>::Status() const
{
	Windows::ApplicationModel::Chat::ChatMessageValidationStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Chat::ChatMessageAttachment> impl_IChatMessage<T>::Attachments() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Chat::ChatMessageAttachment> value;
	check(shim()->get_Attachments(put(value)));
	return value;
}

template <typename T> String impl_IChatMessage<T>::Body() const
{
	String value;
	check(shim()->get_Body(put(value)));
	return value;
}

template <typename T> void impl_IChatMessage<T>::Body(StringReference const & value) const
{
	check(shim()->put_Body(get(value)));
}

template <typename T> String impl_IChatMessage<T>::From() const
{
	String value;
	check(shim()->get_From(put(value)));
	return value;
}

template <typename T> String impl_IChatMessage<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> bool impl_IChatMessage<T>::IsForwardingDisabled() const
{
	bool value = {};
	check(shim()->get_IsForwardingDisabled(put(value)));
	return value;
}

template <typename T> bool impl_IChatMessage<T>::IsIncoming() const
{
	bool value = {};
	check(shim()->get_IsIncoming(put(value)));
	return value;
}

template <typename T> bool impl_IChatMessage<T>::IsRead() const
{
	bool value = {};
	check(shim()->get_IsRead(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IChatMessage<T>::LocalTimestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_LocalTimestamp(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IChatMessage<T>::NetworkTimestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_NetworkTimestamp(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IChatMessage<T>::Recipients() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Recipients(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, winrt::Windows::ApplicationModel::Chat::ChatMessageStatus> impl_IChatMessage<T>::RecipientSendStatuses() const
{
	Windows::Foundation::Collections::IMapView<String, winrt::Windows::ApplicationModel::Chat::ChatMessageStatus> value;
	check(shim()->get_RecipientSendStatuses(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessageStatus impl_IChatMessage<T>::Status() const
{
	Windows::ApplicationModel::Chat::ChatMessageStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> String impl_IChatMessage<T>::Subject() const
{
	String value;
	check(shim()->get_Subject(put(value)));
	return value;
}

template <typename T> String impl_IChatMessage<T>::TransportFriendlyName() const
{
	String value;
	check(shim()->get_TransportFriendlyName(put(value)));
	return value;
}

template <typename T> String impl_IChatMessage<T>::TransportId() const
{
	String value;
	check(shim()->get_TransportId(put(value)));
	return value;
}

template <typename T> void impl_IChatMessage<T>::TransportId(StringReference const & value) const
{
	check(shim()->put_TransportId(get(value)));
}

template <typename T> String impl_IChatMessage3<T>::RemoteId() const
{
	String value;
	check(shim()->get_RemoteId(put(value)));
	return value;
}

template <typename T> unsigned long long impl_IChatMessage2<T>::EstimatedDownloadSize() const
{
	unsigned long long result = {};
	check(shim()->get_EstimatedDownloadSize(&result));
	return result;
}

template <typename T> void impl_IChatMessage2<T>::EstimatedDownloadSize(unsigned long long const value) const
{
	check(shim()->put_EstimatedDownloadSize(value));
}

template <typename T> void impl_IChatMessage2<T>::From(StringReference const & value) const
{
	check(shim()->put_From(get(value)));
}

template <typename T> bool impl_IChatMessage2<T>::IsAutoReply() const
{
	bool result = {};
	check(shim()->get_IsAutoReply(put(result)));
	return result;
}

template <typename T> void impl_IChatMessage2<T>::IsAutoReply(bool const value) const
{
	check(shim()->put_IsAutoReply(value));
}

template <typename T> void impl_IChatMessage2<T>::IsForwardingDisabled(bool const value) const
{
	check(shim()->put_IsForwardingDisabled(value));
}

template <typename T> bool impl_IChatMessage2<T>::IsReplyDisabled() const
{
	bool result = {};
	check(shim()->get_IsReplyDisabled(put(result)));
	return result;
}

template <typename T> void impl_IChatMessage2<T>::IsIncoming(bool const value) const
{
	check(shim()->put_IsIncoming(value));
}

template <typename T> void impl_IChatMessage2<T>::IsRead(bool const value) const
{
	check(shim()->put_IsRead(value));
}

template <typename T> bool impl_IChatMessage2<T>::IsSeen() const
{
	bool result = {};
	check(shim()->get_IsSeen(put(result)));
	return result;
}

template <typename T> void impl_IChatMessage2<T>::IsSeen(bool const value) const
{
	check(shim()->put_IsSeen(value));
}

template <typename T> bool impl_IChatMessage2<T>::IsSimMessage() const
{
	bool result = {};
	check(shim()->get_IsSimMessage(put(result)));
	return result;
}

template <typename T> void impl_IChatMessage2<T>::LocalTimestamp(Windows::Foundation::DateTime const & value) const
{
	check(shim()->put_LocalTimestamp(value));
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessageKind impl_IChatMessage2<T>::MessageKind() const
{
	Windows::ApplicationModel::Chat::ChatMessageKind result = {};
	check(shim()->get_MessageKind(&result));
	return result;
}

template <typename T> void impl_IChatMessage2<T>::MessageKind(Windows::ApplicationModel::Chat::ChatMessageKind const value) const
{
	check(shim()->put_MessageKind(value));
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessageOperatorKind impl_IChatMessage2<T>::MessageOperatorKind() const
{
	Windows::ApplicationModel::Chat::ChatMessageOperatorKind result = {};
	check(shim()->get_MessageOperatorKind(&result));
	return result;
}

template <typename T> void impl_IChatMessage2<T>::MessageOperatorKind(Windows::ApplicationModel::Chat::ChatMessageOperatorKind const value) const
{
	check(shim()->put_MessageOperatorKind(value));
}

template <typename T> void impl_IChatMessage2<T>::NetworkTimestamp(Windows::Foundation::DateTime const & value) const
{
	check(shim()->put_NetworkTimestamp(value));
}

template <typename T> bool impl_IChatMessage2<T>::IsReceivedDuringQuietHours() const
{
	bool result = {};
	check(shim()->get_IsReceivedDuringQuietHours(put(result)));
	return result;
}

template <typename T> void impl_IChatMessage2<T>::IsReceivedDuringQuietHours(bool const value) const
{
	check(shim()->put_IsReceivedDuringQuietHours(value));
}

template <typename T> void impl_IChatMessage2<T>::RemoteId(StringReference const & value) const
{
	check(shim()->put_RemoteId(get(value)));
}

template <typename T> void impl_IChatMessage2<T>::Status(Windows::ApplicationModel::Chat::ChatMessageStatus const value) const
{
	check(shim()->put_Status(value));
}

template <typename T> void impl_IChatMessage2<T>::Subject(StringReference const & value) const
{
	check(shim()->put_Subject(get(value)));
}

template <typename T> bool impl_IChatMessage2<T>::ShouldSuppressNotification() const
{
	bool result = {};
	check(shim()->get_ShouldSuppressNotification(put(result)));
	return result;
}

template <typename T> void impl_IChatMessage2<T>::ShouldSuppressNotification(bool const value) const
{
	check(shim()->put_ShouldSuppressNotification(value));
}

template <typename T> Windows::ApplicationModel::Chat::ChatConversationThreadingInfo impl_IChatMessage2<T>::ThreadingInfo() const
{
	Windows::ApplicationModel::Chat::ChatConversationThreadingInfo result = nullptr;
	check(shim()->get_ThreadingInfo(put(result)));
	return result;
}

template <typename T> void impl_IChatMessage2<T>::ThreadingInfo(Windows::ApplicationModel::Chat::ChatConversationThreadingInfo const & value) const
{
	check(shim()->put_ThreadingInfo(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Chat::ChatRecipientDeliveryInfo> impl_IChatMessage2<T>::RecipientsDeliveryInfos() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Chat::ChatRecipientDeliveryInfo> result;
	check(shim()->get_RecipientsDeliveryInfos(put(result)));
	return result;
}

template <typename T> String impl_IChatQueryOptions<T>::SearchString() const
{
	String result;
	check(shim()->get_SearchString(put(result)));
	return result;
}

template <typename T> void impl_IChatQueryOptions<T>::SearchString(StringReference const & value) const
{
	check(shim()->put_SearchString(get(value)));
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessageChangeTracker impl_IChatMessageStore<T>::ChangeTracker() const
{
	Windows::ApplicationModel::Chat::ChatMessageChangeTracker value = nullptr;
	check(shim()->get_ChangeTracker(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IChatMessageStore<T>::DeleteMessageAsync(StringReference const & localMessageId) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_DeleteMessageAsync(get(localMessageId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IChatMessageStore<T>::DownloadMessageAsync(StringReference const & localChatMessageId) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_DownloadMessageAsync(get(localChatMessageId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatMessage> impl_IChatMessageStore<T>::GetMessageAsync(StringReference const & localChatMessageId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatMessage> value;
	check(shim()->abi_GetMessageAsync(get(localChatMessageId), put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessageReader impl_IChatMessageStore<T>::GetMessageReader() const
{
	Windows::ApplicationModel::Chat::ChatMessageReader value = nullptr;
	check(shim()->abi_GetMessageReader1(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessageReader impl_IChatMessageStore<T>::GetMessageReader(Windows::Foundation::TimeSpan const & recentTimeLimit) const
{
	Windows::ApplicationModel::Chat::ChatMessageReader value = nullptr;
	check(shim()->abi_GetMessageReader2(recentTimeLimit, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IChatMessageStore<T>::MarkMessageReadAsync(StringReference const & localChatMessageId) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_MarkMessageReadAsync(get(localChatMessageId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IChatMessageStore<T>::RetrySendMessageAsync(StringReference const & localChatMessageId) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_RetrySendMessageAsync(get(localChatMessageId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IChatMessageStore<T>::SendMessageAsync(Windows::ApplicationModel::Chat::ChatMessage const & chatMessage) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_SendMessageAsync(get(chatMessage), put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessageValidationResult impl_IChatMessageStore<T>::ValidateMessage(Windows::ApplicationModel::Chat::ChatMessage const & chatMessage) const
{
	Windows::ApplicationModel::Chat::ChatMessageValidationResult value = nullptr;
	check(shim()->abi_ValidateMessage(get(chatMessage), put(value)));
	return value;
}

template <typename T> long long impl_IChatMessageStore<T>::MessageChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Chat::ChatMessageStore, Windows::ApplicationModel::Chat::ChatMessageChangedEventArgs> const & value) const
{
	long long returnValue = {};
	check(shim()->add_MessageChanged(get(value), &returnValue));
	return returnValue;
}

template <typename T> template <typename F> long long impl_IChatMessageStore<T>::MessageChanged(F value) const
{
	return MessageChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Chat::ChatMessageStore, Windows::ApplicationModel::Chat::ChatMessageChangedEventArgs>(value));
}

template <typename T> void impl_IChatMessageStore<T>::MessageChanged(long long const value) const
{
	check(shim()->remove_MessageChanged(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatMessage> impl_IChatMessageStore2<T>::ForwardMessageAsync(StringReference const & localChatMessageId, Windows::Foundation::Collections::IIterable<String> const & addresses) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatMessage> result;
	check(shim()->abi_ForwardMessageAsync(get(localChatMessageId), get(addresses), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatConversation> impl_IChatMessageStore2<T>::GetConversationAsync(StringReference const & conversationId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatConversation> result;
	check(shim()->abi_GetConversationAsync(get(conversationId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatConversation> impl_IChatMessageStore2<T>::GetConversationAsync(StringReference const & conversationId, Windows::Foundation::Collections::IIterable<String> const & transportIds) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatConversation> result;
	check(shim()->abi_GetConversationForTransportsAsync(get(conversationId), get(transportIds), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatConversation> impl_IChatMessageStore2<T>::GetConversationFromThreadingInfoAsync(Windows::ApplicationModel::Chat::ChatConversationThreadingInfo const & threadingInfo) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatConversation> result;
	check(shim()->abi_GetConversationFromThreadingInfoAsync(get(threadingInfo), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Chat::ChatConversationReader impl_IChatMessageStore2<T>::GetConversationReader() const
{
	Windows::ApplicationModel::Chat::ChatConversationReader result = nullptr;
	check(shim()->abi_GetConversationReader(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Chat::ChatConversationReader impl_IChatMessageStore2<T>::GetConversationReader(Windows::Foundation::Collections::IIterable<String> const & transportIds) const
{
	Windows::ApplicationModel::Chat::ChatConversationReader result = nullptr;
	check(shim()->abi_GetConversationForTransportsReader(get(transportIds), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatMessage> impl_IChatMessageStore2<T>::GetMessageByRemoteIdAsync(StringReference const & transportId, StringReference const & remoteId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatMessage> result;
	check(shim()->abi_GetMessageByRemoteIdAsync(get(transportId), get(remoteId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<int> impl_IChatMessageStore2<T>::GetUnseenCountAsync() const
{
	Windows::Foundation::IAsyncOperation<int> result;
	check(shim()->abi_GetUnseenCountAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<int> impl_IChatMessageStore2<T>::GetUnseenCountAsync(Windows::Foundation::Collections::IIterable<String> const & transportIds) const
{
	Windows::Foundation::IAsyncOperation<int> result;
	check(shim()->abi_GetUnseenCountForTransportsReaderAsync(get(transportIds), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IChatMessageStore2<T>::MarkAsSeenAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_MarkAsSeenAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IChatMessageStore2<T>::MarkAsSeenAsync(Windows::Foundation::Collections::IIterable<String> const & transportIds) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_MarkAsSeenForTransportsAsync(get(transportIds), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Chat::ChatSearchReader impl_IChatMessageStore2<T>::GetSearchReader(Windows::ApplicationModel::Chat::ChatQueryOptions const & value) const
{
	Windows::ApplicationModel::Chat::ChatSearchReader result = nullptr;
	check(shim()->abi_GetSearchReader(get(value), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IChatMessageStore2<T>::SaveMessageAsync(Windows::ApplicationModel::Chat::ChatMessage const & chatMessage) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_SaveMessageAsync(get(chatMessage), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IChatMessageStore2<T>::TryCancelDownloadMessageAsync(StringReference const & localChatMessageId) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TryCancelDownloadMessageAsync(get(localChatMessageId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IChatMessageStore2<T>::TryCancelSendMessageAsync(StringReference const & localChatMessageId) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TryCancelSendMessageAsync(get(localChatMessageId), put(result)));
	return result;
}

template <typename T> long long impl_IChatMessageStore2<T>::StoreChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Chat::ChatMessageStore, Windows::ApplicationModel::Chat::ChatMessageStoreChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_StoreChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IChatMessageStore2<T>::StoreChanged(F handler) const
{
	return StoreChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Chat::ChatMessageStore, Windows::ApplicationModel::Chat::ChatMessageStoreChangedEventArgs>(handler));
}

template <typename T> void impl_IChatMessageStore2<T>::StoreChanged(long long const token) const
{
	check(shim()->remove_StoreChanged(token));
}

template <typename T> String impl_IChatMessageStoreChangedEventArgs<T>::Id() const
{
	String result;
	check(shim()->get_Id(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Chat::ChatStoreChangedEventKind impl_IChatMessageStoreChangedEventArgs<T>::Kind() const
{
	Windows::ApplicationModel::Chat::ChatStoreChangedEventKind result = {};
	check(shim()->get_Kind(&result));
	return result;
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessageChangedDeferral impl_IChatMessageChangedEventArgs<T>::GetDeferral() const
{
	Windows::ApplicationModel::Chat::ChatMessageChangedDeferral result = nullptr;
	check(shim()->abi_GetDeferral(put(result)));
	return result;
}

template <typename T> void impl_IChatMessageChangedDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::Foundation::IAsyncAction impl_IChatMessageBlockingStatic<T>::MarkMessageAsBlockedAsync(StringReference const & localChatMessageId, bool const blocked) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_MarkMessageAsBlockedAsync(get(localChatMessageId), blocked, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::ChatMessageTransport>> impl_IChatMessageManagerStatic<T>::GetTransportsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::ChatMessageTransport>> value;
	check(shim()->abi_GetTransportsAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatMessageStore> impl_IChatMessageManagerStatic<T>::RequestStoreAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatMessageStore> value;
	check(shim()->abi_RequestStoreAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IChatMessageManagerStatic<T>::ShowComposeSmsMessageAsync(Windows::ApplicationModel::Chat::ChatMessage const & message) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_ShowComposeSmsMessageAsync(get(message), put(value)));
	return value;
}

template <typename T> void impl_IChatMessageManagerStatic<T>::ShowSmsSettings() const
{
	check(shim()->abi_ShowSmsSettings());
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IChatMessageManager2Statics<T>::RegisterTransportAsync() const
{
	Windows::Foundation::IAsyncOperation<String> result;
	check(shim()->abi_RegisterTransportAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatMessageTransport> impl_IChatMessageManager2Statics<T>::GetTransportAsync(StringReference const & transportId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatMessageTransport> result;
	check(shim()->abi_GetTransportAsync(get(transportId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::ChatMessage>> impl_IChatMessageReader<T>::ReadBatchAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::ChatMessage>> value;
	check(shim()->abi_ReadBatchAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::ChatMessage>> impl_IChatMessageReader2<T>::ReadBatchAsync(int const count) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::ChatMessage>> result;
	check(shim()->abi_ReadBatchWithCountAsync(count, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::IChatItem>> impl_IChatSearchReader<T>::ReadBatchAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::IChatItem>> result;
	check(shim()->abi_ReadBatchAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::IChatItem>> impl_IChatSearchReader<T>::ReadBatchAsync(int const count) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::IChatItem>> result;
	check(shim()->abi_ReadBatchWithCountAsync(count, put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Chat::ChatItemKind impl_IChatItem<T>::ItemKind() const
{
	Windows::ApplicationModel::Chat::ChatItemKind result = {};
	check(shim()->get_ItemKind(&result));
	return result;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IChatMessageAttachment<T>::DataStreamReference() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_DataStreamReference(put(value)));
	return value;
}

template <typename T> void impl_IChatMessageAttachment<T>::DataStreamReference(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_DataStreamReference(get(value)));
}

template <typename T> unsigned impl_IChatMessageAttachment<T>::GroupId() const
{
	unsigned value = {};
	check(shim()->get_GroupId(&value));
	return value;
}

template <typename T> void impl_IChatMessageAttachment<T>::GroupId(unsigned const value) const
{
	check(shim()->put_GroupId(value));
}

template <typename T> String impl_IChatMessageAttachment<T>::MimeType() const
{
	String value;
	check(shim()->get_MimeType(put(value)));
	return value;
}

template <typename T> void impl_IChatMessageAttachment<T>::MimeType(StringReference const & value) const
{
	check(shim()->put_MimeType(get(value)));
}

template <typename T> String impl_IChatMessageAttachment<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> void impl_IChatMessageAttachment<T>::Text(StringReference const & value) const
{
	check(shim()->put_Text(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IChatMessageAttachment2<T>::Thumbnail() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference result;
	check(shim()->get_Thumbnail(put(result)));
	return result;
}

template <typename T> void impl_IChatMessageAttachment2<T>::Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_Thumbnail(get(value)));
}

template <typename T> double impl_IChatMessageAttachment2<T>::TransferProgress() const
{
	double result = {};
	check(shim()->get_TransferProgress(&result));
	return result;
}

template <typename T> void impl_IChatMessageAttachment2<T>::TransferProgress(double const value) const
{
	check(shim()->put_TransferProgress(value));
}

template <typename T> String impl_IChatMessageAttachment2<T>::OriginalFileName() const
{
	String result;
	check(shim()->get_OriginalFileName(put(result)));
	return result;
}

template <typename T> void impl_IChatMessageAttachment2<T>::OriginalFileName(StringReference const & value) const
{
	check(shim()->put_OriginalFileName(get(value)));
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessageAttachment impl_IChatMessageAttachmentFactory<T>::CreateChatMessageAttachment(StringReference const & mimeType, Windows::Storage::Streams::IRandomAccessStreamReference const & dataStreamReference) const
{
	Windows::ApplicationModel::Chat::ChatMessageAttachment value = nullptr;
	check(shim()->abi_CreateChatMessageAttachment(get(mimeType), get(dataStreamReference), put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessage impl_IChatMessageNotificationTriggerDetails<T>::ChatMessage() const
{
	Windows::ApplicationModel::Chat::ChatMessage value = nullptr;
	check(shim()->get_ChatMessage(put(value)));
	return value;
}

template <typename T> bool impl_IChatMessageNotificationTriggerDetails2<T>::ShouldDisplayToast() const
{
	bool result = {};
	check(shim()->get_ShouldDisplayToast(put(result)));
	return result;
}

template <typename T> bool impl_IChatMessageNotificationTriggerDetails2<T>::ShouldUpdateDetailText() const
{
	bool result = {};
	check(shim()->get_ShouldUpdateDetailText(put(result)));
	return result;
}

template <typename T> bool impl_IChatMessageNotificationTriggerDetails2<T>::ShouldUpdateBadge() const
{
	bool result = {};
	check(shim()->get_ShouldUpdateBadge(put(result)));
	return result;
}

template <typename T> bool impl_IChatMessageNotificationTriggerDetails2<T>::ShouldUpdateActionCenter() const
{
	bool result = {};
	check(shim()->get_ShouldUpdateActionCenter(put(result)));
	return result;
}

template <typename T> bool impl_IChatCapabilities<T>::IsOnline() const
{
	bool result = {};
	check(shim()->get_IsOnline(put(result)));
	return result;
}

template <typename T> bool impl_IChatCapabilities<T>::IsChatCapable() const
{
	bool result = {};
	check(shim()->get_IsChatCapable(put(result)));
	return result;
}

template <typename T> bool impl_IChatCapabilities<T>::IsFileTransferCapable() const
{
	bool result = {};
	check(shim()->get_IsFileTransferCapable(put(result)));
	return result;
}

template <typename T> bool impl_IChatCapabilities<T>::IsGeoLocationPushCapable() const
{
	bool result = {};
	check(shim()->get_IsGeoLocationPushCapable(put(result)));
	return result;
}

template <typename T> bool impl_IChatCapabilities<T>::IsIntegratedMessagingCapable() const
{
	bool result = {};
	check(shim()->get_IsIntegratedMessagingCapable(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatCapabilities> impl_IChatCapabilitiesManagerStatics<T>::GetCachedCapabilitiesAsync(StringReference const & address) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatCapabilities> result;
	check(shim()->abi_GetCachedCapabilitiesAsync(get(address), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatCapabilities> impl_IChatCapabilitiesManagerStatics<T>::GetCapabilitiesFromNetworkAsync(StringReference const & address) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatCapabilities> result;
	check(shim()->abi_GetCapabilitiesFromNetworkAsync(get(address), put(result)));
	return result;
}

template <typename T> String impl_IChatRecipientDeliveryInfo<T>::TransportAddress() const
{
	String result;
	check(shim()->get_TransportAddress(put(result)));
	return result;
}

template <typename T> void impl_IChatRecipientDeliveryInfo<T>::TransportAddress(StringReference const & value) const
{
	check(shim()->put_TransportAddress(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IChatRecipientDeliveryInfo<T>::DeliveryTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> result;
	check(shim()->get_DeliveryTime(put(result)));
	return result;
}

template <typename T> void impl_IChatRecipientDeliveryInfo<T>::DeliveryTime(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_DeliveryTime(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IChatRecipientDeliveryInfo<T>::ReadTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> result;
	check(shim()->get_ReadTime(put(result)));
	return result;
}

template <typename T> void impl_IChatRecipientDeliveryInfo<T>::ReadTime(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_ReadTime(get(value)));
}

template <typename T> Windows::ApplicationModel::Chat::ChatTransportErrorCodeCategory impl_IChatRecipientDeliveryInfo<T>::TransportErrorCodeCategory() const
{
	Windows::ApplicationModel::Chat::ChatTransportErrorCodeCategory result = {};
	check(shim()->get_TransportErrorCodeCategory(&result));
	return result;
}

template <typename T> Windows::ApplicationModel::Chat::ChatTransportInterpretedErrorCode impl_IChatRecipientDeliveryInfo<T>::TransportInterpretedErrorCode() const
{
	Windows::ApplicationModel::Chat::ChatTransportInterpretedErrorCode result = {};
	check(shim()->get_TransportInterpretedErrorCode(&result));
	return result;
}

template <typename T> int impl_IChatRecipientDeliveryInfo<T>::TransportErrorCode() const
{
	int result = {};
	check(shim()->get_TransportErrorCode(&result));
	return result;
}

template <typename T> bool impl_IChatRecipientDeliveryInfo<T>::IsErrorPermanent() const
{
	bool result = {};
	check(shim()->get_IsErrorPermanent(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessageStatus impl_IChatRecipientDeliveryInfo<T>::Status() const
{
	Windows::ApplicationModel::Chat::ChatMessageStatus result = {};
	check(shim()->get_Status(&result));
	return result;
}

template <typename T> String impl_IChatConversationThreadingInfo<T>::ContactId() const
{
	String result;
	check(shim()->get_ContactId(put(result)));
	return result;
}

template <typename T> void impl_IChatConversationThreadingInfo<T>::ContactId(StringReference const & value) const
{
	check(shim()->put_ContactId(get(value)));
}

template <typename T> String impl_IChatConversationThreadingInfo<T>::Custom() const
{
	String result;
	check(shim()->get_Custom(put(result)));
	return result;
}

template <typename T> void impl_IChatConversationThreadingInfo<T>::Custom(StringReference const & value) const
{
	check(shim()->put_Custom(get(value)));
}

template <typename T> String impl_IChatConversationThreadingInfo<T>::ConversationId() const
{
	String result;
	check(shim()->get_ConversationId(put(result)));
	return result;
}

template <typename T> void impl_IChatConversationThreadingInfo<T>::ConversationId(StringReference const & value) const
{
	check(shim()->put_ConversationId(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IChatConversationThreadingInfo<T>::Participants() const
{
	Windows::Foundation::Collections::IVector<String> result;
	check(shim()->get_Participants(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Chat::ChatConversationThreadingKind impl_IChatConversationThreadingInfo<T>::Kind() const
{
	Windows::ApplicationModel::Chat::ChatConversationThreadingKind result = {};
	check(shim()->get_Kind(&result));
	return result;
}

template <typename T> void impl_IChatConversationThreadingInfo<T>::Kind(Windows::ApplicationModel::Chat::ChatConversationThreadingKind const value) const
{
	check(shim()->put_Kind(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::ChatConversation>> impl_IChatConversationReader<T>::ReadBatchAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::ChatConversation>> result;
	check(shim()->abi_ReadBatchAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::ChatConversation>> impl_IChatConversationReader<T>::ReadBatchAsync(int const count) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::ChatConversation>> result;
	check(shim()->abi_ReadBatchWithCountAsync(count, put(result)));
	return result;
}

template <typename T> bool impl_IChatConversation<T>::HasUnreadMessages() const
{
	bool result = {};
	check(shim()->get_HasUnreadMessages(put(result)));
	return result;
}

template <typename T> String impl_IChatConversation<T>::Id() const
{
	String result;
	check(shim()->get_Id(put(result)));
	return result;
}

template <typename T> String impl_IChatConversation<T>::Subject() const
{
	String result;
	check(shim()->get_Subject(put(result)));
	return result;
}

template <typename T> void impl_IChatConversation<T>::Subject(StringReference const & value) const
{
	check(shim()->put_Subject(get(value)));
}

template <typename T> bool impl_IChatConversation<T>::IsConversationMuted() const
{
	bool result = {};
	check(shim()->get_IsConversationMuted(put(result)));
	return result;
}

template <typename T> void impl_IChatConversation<T>::IsConversationMuted(bool const value) const
{
	check(shim()->put_IsConversationMuted(value));
}

template <typename T> String impl_IChatConversation<T>::MostRecentMessageId() const
{
	String result;
	check(shim()->get_MostRecentMessageId(put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IChatConversation<T>::Participants() const
{
	Windows::Foundation::Collections::IVector<String> result;
	check(shim()->get_Participants(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Chat::ChatConversationThreadingInfo impl_IChatConversation<T>::ThreadingInfo() const
{
	Windows::ApplicationModel::Chat::ChatConversationThreadingInfo result = nullptr;
	check(shim()->get_ThreadingInfo(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IChatConversation<T>::DeleteAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_DeleteAsync(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Chat::ChatMessageReader impl_IChatConversation<T>::GetMessageReader() const
{
	Windows::ApplicationModel::Chat::ChatMessageReader result = nullptr;
	check(shim()->abi_GetMessageReader(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IChatConversation<T>::MarkMessagesAsReadAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_MarkAllMessagesAsReadAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IChatConversation<T>::MarkMessagesAsReadAsync(Windows::Foundation::DateTime const & value) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_MarkMessagesAsReadAsync(value, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IChatConversation<T>::SaveAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_SaveAsync(put(result)));
	return result;
}

template <typename T> void impl_IChatConversation<T>::NotifyLocalParticipantComposing(StringReference const & transportId, StringReference const & participantAddress, bool const isComposing) const
{
	check(shim()->abi_NotifyLocalParticipantComposing(get(transportId), get(participantAddress), isComposing));
}

template <typename T> void impl_IChatConversation<T>::NotifyRemoteParticipantComposing(StringReference const & transportId, StringReference const & participantAddress, bool const isComposing) const
{
	check(shim()->abi_NotifyRemoteParticipantComposing(get(transportId), get(participantAddress), isComposing));
}

template <typename T> long long impl_IChatConversation<T>::RemoteParticipantComposingChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Chat::ChatConversation, Windows::ApplicationModel::Chat::RemoteParticipantComposingChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_RemoteParticipantComposingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IChatConversation<T>::RemoteParticipantComposingChanged(F handler) const
{
	return RemoteParticipantComposingChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Chat::ChatConversation, Windows::ApplicationModel::Chat::RemoteParticipantComposingChangedEventArgs>(handler));
}

template <typename T> void impl_IChatConversation<T>::RemoteParticipantComposingChanged(long long const token) const
{
	check(shim()->remove_RemoteParticipantComposingChanged(token));
}

template <typename T> bool impl_IChatConversation2<T>::CanModifyParticipants() const
{
	bool result = {};
	check(shim()->get_CanModifyParticipants(put(result)));
	return result;
}

template <typename T> void impl_IChatConversation2<T>::CanModifyParticipants(bool const value) const
{
	check(shim()->put_CanModifyParticipants(value));
}

template <typename T> String impl_IRemoteParticipantComposingChangedEventArgs<T>::TransportId() const
{
	String result;
	check(shim()->get_TransportId(put(result)));
	return result;
}

template <typename T> String impl_IRemoteParticipantComposingChangedEventArgs<T>::ParticipantAddress() const
{
	String result;
	check(shim()->get_ParticipantAddress(put(result)));
	return result;
}

template <typename T> bool impl_IRemoteParticipantComposingChangedEventArgs<T>::IsComposing() const
{
	bool result = {};
	check(shim()->get_IsComposing(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Chat::RcsServiceKind impl_IRcsServiceKindSupportedChangedEventArgs<T>::ServiceKind() const
{
	Windows::ApplicationModel::Chat::RcsServiceKind result = {};
	check(shim()->get_ServiceKind(&result));
	return result;
}

template <typename T> Windows::ApplicationModel::Chat::RcsEndUserMessageManager impl_IRcsManagerStatics<T>::GetEndUserMessageManager() const
{
	Windows::ApplicationModel::Chat::RcsEndUserMessageManager result = nullptr;
	check(shim()->abi_GetEndUserMessageManager(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::RcsTransport>> impl_IRcsManagerStatics<T>::GetTransportsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::RcsTransport>> value;
	check(shim()->abi_GetTransportsAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::RcsTransport> impl_IRcsManagerStatics<T>::GetTransportAsync(StringReference const & transportId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::RcsTransport> result;
	check(shim()->abi_GetTransportAsync(get(transportId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IRcsManagerStatics<T>::LeaveConversationAsync(Windows::ApplicationModel::Chat::ChatConversation const & conversation) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_LeaveConversationAsync(get(conversation), put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IRcsTransport<T>::ExtendedProperties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value;
	check(shim()->get_ExtendedProperties(put(value)));
	return value;
}

template <typename T> bool impl_IRcsTransport<T>::IsActive() const
{
	bool value = {};
	check(shim()->get_IsActive(put(value)));
	return value;
}

template <typename T> String impl_IRcsTransport<T>::TransportFriendlyName() const
{
	String value;
	check(shim()->get_TransportFriendlyName(put(value)));
	return value;
}

template <typename T> String impl_IRcsTransport<T>::TransportId() const
{
	String value;
	check(shim()->get_TransportId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Chat::RcsTransportConfiguration impl_IRcsTransport<T>::Configuration() const
{
	Windows::ApplicationModel::Chat::RcsTransportConfiguration result = nullptr;
	check(shim()->get_Configuration(put(result)));
	return result;
}

template <typename T> bool impl_IRcsTransport<T>::IsStoreAndForwardEnabled(Windows::ApplicationModel::Chat::RcsServiceKind const serviceKind) const
{
	bool result = {};
	check(shim()->abi_IsStoreAndForwardEnabled(serviceKind, put(result)));
	return result;
}

template <typename T> bool impl_IRcsTransport<T>::IsServiceKindSupported(Windows::ApplicationModel::Chat::RcsServiceKind const serviceKind) const
{
	bool result = {};
	check(shim()->abi_IsServiceKindSupported(serviceKind, put(result)));
	return result;
}

template <typename T> long long impl_IRcsTransport<T>::ServiceKindSupportedChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Chat::RcsTransport, Windows::ApplicationModel::Chat::RcsServiceKindSupportedChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ServiceKindSupportedChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IRcsTransport<T>::ServiceKindSupportedChanged(F handler) const
{
	return ServiceKindSupportedChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Chat::RcsTransport, Windows::ApplicationModel::Chat::RcsServiceKindSupportedChangedEventArgs>(handler));
}

template <typename T> void impl_IRcsTransport<T>::ServiceKindSupportedChanged(long long const token) const
{
	check(shim()->remove_ServiceKindSupportedChanged(token));
}

template <typename T> int impl_IRcsTransportConfiguration<T>::MaxAttachmentCount() const
{
	int result = {};
	check(shim()->get_MaxAttachmentCount(&result));
	return result;
}

template <typename T> int impl_IRcsTransportConfiguration<T>::MaxMessageSizeInKilobytes() const
{
	int result = {};
	check(shim()->get_MaxMessageSizeInKilobytes(&result));
	return result;
}

template <typename T> int impl_IRcsTransportConfiguration<T>::MaxGroupMessageSizeInKilobytes() const
{
	int result = {};
	check(shim()->get_MaxGroupMessageSizeInKilobytes(&result));
	return result;
}

template <typename T> int impl_IRcsTransportConfiguration<T>::MaxRecipientCount() const
{
	int result = {};
	check(shim()->get_MaxRecipientCount(&result));
	return result;
}

template <typename T> int impl_IRcsTransportConfiguration<T>::MaxFileSizeInKilobytes() const
{
	int result = {};
	check(shim()->get_MaxFileSizeInKilobytes(&result));
	return result;
}

template <typename T> int impl_IRcsTransportConfiguration<T>::WarningFileSizeInKilobytes() const
{
	int result = {};
	check(shim()->get_WarningFileSizeInKilobytes(&result));
	return result;
}

template <typename T> long long impl_IRcsEndUserMessageManager<T>::MessageAvailableChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Chat::RcsEndUserMessageManager, Windows::ApplicationModel::Chat::RcsEndUserMessageAvailableEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_MessageAvailableChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IRcsEndUserMessageManager<T>::MessageAvailableChanged(F handler) const
{
	return MessageAvailableChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Chat::RcsEndUserMessageManager, Windows::ApplicationModel::Chat::RcsEndUserMessageAvailableEventArgs>(handler));
}

template <typename T> void impl_IRcsEndUserMessageManager<T>::MessageAvailableChanged(long long const token) const
{
	check(shim()->remove_MessageAvailableChanged(token));
}

template <typename T> String impl_IRcsEndUserMessageAction<T>::Label() const
{
	String result;
	check(shim()->get_Label(put(result)));
	return result;
}

template <typename T> String impl_IRcsEndUserMessage<T>::TransportId() const
{
	String result;
	check(shim()->get_TransportId(put(result)));
	return result;
}

template <typename T> String impl_IRcsEndUserMessage<T>::Title() const
{
	String result;
	check(shim()->get_Title(put(result)));
	return result;
}

template <typename T> String impl_IRcsEndUserMessage<T>::Text() const
{
	String result;
	check(shim()->get_Text(put(result)));
	return result;
}

template <typename T> bool impl_IRcsEndUserMessage<T>::IsPinRequired() const
{
	bool result = {};
	check(shim()->get_IsPinRequired(put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::RcsEndUserMessageAction> impl_IRcsEndUserMessage<T>::Actions() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::RcsEndUserMessageAction> result;
	check(shim()->get_Actions(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IRcsEndUserMessage<T>::SendResponseAsync(Windows::ApplicationModel::Chat::RcsEndUserMessageAction const & action) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_SendResponseAsync(get(action), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IRcsEndUserMessage<T>::SendResponseWithPinAsync(Windows::ApplicationModel::Chat::RcsEndUserMessageAction const & action, StringReference const & pin) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_SendResponseWithPinAsync(get(action), get(pin), put(result)));
	return result;
}

template <typename T> bool impl_IRcsEndUserMessageAvailableEventArgs<T>::IsMessageAvailable() const
{
	bool result = {};
	check(shim()->get_IsMessageAvailable(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Chat::RcsEndUserMessage impl_IRcsEndUserMessageAvailableEventArgs<T>::Message() const
{
	Windows::ApplicationModel::Chat::RcsEndUserMessage result = nullptr;
	check(shim()->get_Message(put(result)));
	return result;
}

template <typename T> String impl_IRcsEndUserMessageAvailableTriggerDetails<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> String impl_IRcsEndUserMessageAvailableTriggerDetails<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Contacts {

template <typename T> Windows::ApplicationModel::Contacts::ContactCardHeaderKind impl_IContactCardOptions<T>::HeaderKind() const
{
	Windows::ApplicationModel::Contacts::ContactCardHeaderKind value = {};
	check(shim()->get_HeaderKind(&value));
	return value;
}

template <typename T> void impl_IContactCardOptions<T>::HeaderKind(Windows::ApplicationModel::Contacts::ContactCardHeaderKind const value) const
{
	check(shim()->put_HeaderKind(value));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactCardTabKind impl_IContactCardOptions<T>::InitialTabKind() const
{
	Windows::ApplicationModel::Contacts::ContactCardTabKind value = {};
	check(shim()->get_InitialTabKind(&value));
	return value;
}

template <typename T> void impl_IContactCardOptions<T>::InitialTabKind(Windows::ApplicationModel::Contacts::ContactCardTabKind const value) const
{
	check(shim()->put_InitialTabKind(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IContactCardOptions2<T>::ServerSearchContactListIds() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_ServerSearchContactListIds(put(value)));
	return value;
}

template <typename T> Windows::UI::ViewManagement::ViewSizePreference impl_IFullContactCardOptions<T>::DesiredRemainingView() const
{
	Windows::UI::ViewManagement::ViewSizePreference value = {};
	check(shim()->get_DesiredRemainingView(&value));
	return value;
}

template <typename T> void impl_IFullContactCardOptions<T>::DesiredRemainingView(Windows::UI::ViewManagement::ViewSizePreference const value) const
{
	check(shim()->put_DesiredRemainingView(value));
}

template <typename T> void impl_IContactManagerStatics<T>::ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection) const
{
	check(shim()->abi_ShowContactCard(get(contact), selection));
}

template <typename T> void impl_IContactManagerStatics<T>::ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	check(shim()->abi_ShowContactCardWithPlacement(get(contact), selection, preferredPlacement));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader impl_IContactManagerStatics<T>::ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader dataLoader = nullptr;
	check(shim()->abi_ShowDelayLoadedContactCard(get(contact), selection, preferredPlacement, put(dataLoader)));
	return dataLoader;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactStore> impl_IContactManagerStatics2<T>::RequestStoreAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactStore> store;
	check(shim()->abi_RequestStoreAsync(put(store)));
	return store;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> impl_IContactManagerStatics3<T>::ConvertContactToVCardAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> vCard;
	check(shim()->abi_ConvertContactToVCardAsync(get(contact), put(vCard)));
	return vCard;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> impl_IContactManagerStatics3<T>::ConvertContactToVCardAsync(Windows::ApplicationModel::Contacts::Contact const & contact, unsigned const maxBytes) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> vCard;
	check(shim()->abi_ConvertContactToVCardAsyncWithMaxBytes(get(contact), maxBytes, put(vCard)));
	return vCard;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IContactManagerStatics3<T>::ConvertVCardToContactAsync(Windows::Storage::Streams::IRandomAccessStreamReference const & vCard) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> contact;
	check(shim()->abi_ConvertVCardToContactAsync(get(vCard), put(contact)));
	return contact;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactStore> impl_IContactManagerStatics3<T>::RequestStoreAsync(Windows::ApplicationModel::Contacts::ContactStoreAccessType const accessType) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactStore> store;
	check(shim()->abi_RequestStoreAsyncWithAccessType(accessType, put(store)));
	return store;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationStore> impl_IContactManagerStatics3<T>::RequestAnnotationStoreAsync(Windows::ApplicationModel::Contacts::ContactAnnotationStoreAccessType const accessType) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationStore> store;
	check(shim()->abi_RequestAnnotationStoreAsync(accessType, put(store)));
	return store;
}

template <typename T> bool impl_IContactManagerStatics3<T>::IsShowContactCardSupported() const
{
	bool result = {};
	check(shim()->abi_IsShowContactCardSupported(put(result)));
	return result;
}

template <typename T> void impl_IContactManagerStatics3<T>::ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::ApplicationModel::Contacts::ContactCardOptions const & contactCardOptions) const
{
	check(shim()->abi_ShowContactCardWithOptions(get(contact), selection, preferredPlacement, get(contactCardOptions)));
}

template <typename T> bool impl_IContactManagerStatics3<T>::IsShowDelayLoadedContactCardSupported() const
{
	bool result = {};
	check(shim()->abi_IsShowDelayLoadedContactCardSupported(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader impl_IContactManagerStatics3<T>::ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::ApplicationModel::Contacts::ContactCardOptions const & contactCardOptions) const
{
	Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader dataLoader = nullptr;
	check(shim()->abi_ShowDelayLoadedContactCardWithOptions(get(contact), selection, preferredPlacement, get(contactCardOptions), put(dataLoader)));
	return dataLoader;
}

template <typename T> void impl_IContactManagerStatics3<T>::ShowFullContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::ApplicationModel::Contacts::FullContactCardOptions const & fullContactCardOptions) const
{
	check(shim()->abi_ShowFullContactCard(get(contact), get(fullContactCardOptions)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactNameOrder impl_IContactManagerStatics3<T>::SystemDisplayNameOrder() const
{
	Windows::ApplicationModel::Contacts::ContactNameOrder value = {};
	check(shim()->get_SystemDisplayNameOrder(&value));
	return value;
}

template <typename T> void impl_IContactManagerStatics3<T>::SystemDisplayNameOrder(Windows::ApplicationModel::Contacts::ContactNameOrder const value) const
{
	check(shim()->put_SystemDisplayNameOrder(value));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactNameOrder impl_IContactManagerStatics3<T>::SystemSortOrder() const
{
	Windows::ApplicationModel::Contacts::ContactNameOrder value = {};
	check(shim()->get_SystemSortOrder(&value));
	return value;
}

template <typename T> void impl_IContactManagerStatics3<T>::SystemSortOrder(Windows::ApplicationModel::Contacts::ContactNameOrder const value) const
{
	check(shim()->put_SystemSortOrder(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact>> impl_IAggregateContactManager<T>::FindRawContactsAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact>> value;
	check(shim()->abi_FindRawContactsAsync(get(contact), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IAggregateContactManager<T>::TryLinkContactsAsync(Windows::ApplicationModel::Contacts::Contact const & primaryContact, Windows::ApplicationModel::Contacts::Contact const & secondaryContact) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> contact;
	check(shim()->abi_TryLinkContactsAsync(get(primaryContact), get(secondaryContact), put(contact)));
	return contact;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAggregateContactManager<T>::UnlinkRawContactAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_UnlinkRawContactAsync(get(contact), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAggregateContactManager<T>::TrySetPreferredSourceForPictureAsync(Windows::ApplicationModel::Contacts::Contact const & aggregateContact, Windows::ApplicationModel::Contacts::Contact const & rawContact) const
{
	Windows::Foundation::IAsyncOperation<bool> value;
	check(shim()->abi_TrySetPreferredSourceForPictureAsync(get(aggregateContact), get(rawContact), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> impl_IContactAnnotationStore<T>::FindContactIdsByEmailAsync(StringReference const & emailAddress) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> contactIds;
	check(shim()->abi_FindContactIdsByEmailAsync(get(emailAddress), put(contactIds)));
	return contactIds;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> impl_IContactAnnotationStore<T>::FindContactIdsByPhoneNumberAsync(StringReference const & phoneNumber) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> contactIds;
	check(shim()->abi_FindContactIdsByPhoneNumberAsync(get(phoneNumber), put(contactIds)));
	return contactIds;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotation>> impl_IContactAnnotationStore<T>::FindAnnotationsForContactAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotation>> annotations;
	check(shim()->abi_FindAnnotationsForContactAsync(get(contact), put(annotations)));
	return annotations;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContactAnnotationStore<T>::DisableAnnotationAsync(Windows::ApplicationModel::Contacts::ContactAnnotation const & annotation) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_DisableAnnotationAsync(get(annotation), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationList> impl_IContactAnnotationStore<T>::CreateAnnotationListAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationList> value;
	check(shim()->abi_CreateAnnotationListAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationList> impl_IContactAnnotationStore<T>::CreateAnnotationListAsync(StringReference const & userDataAccountId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationList> value;
	check(shim()->abi_CreateAnnotationListInAccountAsync(get(userDataAccountId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationList> impl_IContactAnnotationStore<T>::GetAnnotationListAsync(StringReference const & annotationListId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationList> value;
	check(shim()->abi_GetAnnotationListAsync(get(annotationListId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotationList>> impl_IContactAnnotationStore<T>::FindAnnotationListsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotationList>> lists;
	check(shim()->abi_FindAnnotationListsAsync(put(lists)));
	return lists;
}

template <typename T> String impl_IContactAnnotationList<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IContactAnnotationList<T>::ProviderPackageFamilyName() const
{
	String value;
	check(shim()->get_ProviderPackageFamilyName(put(value)));
	return value;
}

template <typename T> String impl_IContactAnnotationList<T>::UserDataAccountId() const
{
	String value;
	check(shim()->get_UserDataAccountId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContactAnnotationList<T>::DeleteAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_DeleteAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IContactAnnotationList<T>::TrySaveAnnotationAsync(Windows::ApplicationModel::Contacts::ContactAnnotation const & annotation) const
{
	Windows::Foundation::IAsyncOperation<bool> ppResult;
	check(shim()->abi_TrySaveAnnotationAsync(get(annotation), put(ppResult)));
	return ppResult;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotation> impl_IContactAnnotationList<T>::GetAnnotationAsync(StringReference const & annotationId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotation> annotation;
	check(shim()->abi_GetAnnotationAsync(get(annotationId), put(annotation)));
	return annotation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotation>> impl_IContactAnnotationList<T>::FindAnnotationsByRemoteIdAsync(StringReference const & remoteId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotation>> annotations;
	check(shim()->abi_FindAnnotationsByRemoteIdAsync(get(remoteId), put(annotations)));
	return annotations;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotation>> impl_IContactAnnotationList<T>::FindAnnotationsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotation>> annotations;
	check(shim()->abi_FindAnnotationsAsync(put(annotations)));
	return annotations;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContactAnnotationList<T>::DeleteAnnotationAsync(Windows::ApplicationModel::Contacts::ContactAnnotation const & annotation) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_DeleteAnnotationAsync(get(annotation), put(value)));
	return value;
}

template <typename T> String impl_IContactAnnotation<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IContactAnnotation<T>::AnnotationListId() const
{
	String value;
	check(shim()->get_AnnotationListId(put(value)));
	return value;
}

template <typename T> String impl_IContactAnnotation<T>::ContactId() const
{
	String value;
	check(shim()->get_ContactId(put(value)));
	return value;
}

template <typename T> void impl_IContactAnnotation<T>::ContactId(StringReference const & value) const
{
	check(shim()->put_ContactId(get(value)));
}

template <typename T> String impl_IContactAnnotation<T>::RemoteId() const
{
	String value;
	check(shim()->get_RemoteId(put(value)));
	return value;
}

template <typename T> void impl_IContactAnnotation<T>::RemoteId(StringReference const & value) const
{
	check(shim()->put_RemoteId(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactAnnotationOperations impl_IContactAnnotation<T>::SupportedOperations() const
{
	Windows::ApplicationModel::Contacts::ContactAnnotationOperations value = {};
	check(shim()->get_SupportedOperations(&value));
	return value;
}

template <typename T> void impl_IContactAnnotation<T>::SupportedOperations(Windows::ApplicationModel::Contacts::ContactAnnotationOperations const value) const
{
	check(shim()->put_SupportedOperations(value));
}

template <typename T> bool impl_IContactAnnotation<T>::IsDisabled() const
{
	bool value = {};
	check(shim()->get_IsDisabled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_IContactAnnotation<T>::ProviderProperties() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check(shim()->get_ProviderProperties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact>> impl_IContactStore<T>::FindContactsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact>> contacts;
	check(shim()->abi_FindContactsAsync(put(contacts)));
	return contacts;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact>> impl_IContactStore<T>::FindContactsAsync(StringReference const & searchText) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact>> contacts;
	check(shim()->abi_FindContactsWithSearchTextAsync(get(searchText), put(contacts)));
	return contacts;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IContactStore<T>::GetContactAsync(StringReference const & contactId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> contacts;
	check(shim()->abi_GetContactAsync(get(contactId), put(contacts)));
	return contacts;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactChangeTracker impl_IContactStore2<T>::ChangeTracker() const
{
	Windows::ApplicationModel::Contacts::ContactChangeTracker value = nullptr;
	check(shim()->get_ChangeTracker(put(value)));
	return value;
}

template <typename T> long long impl_IContactStore2<T>::ContactChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Contacts::ContactStore, Windows::ApplicationModel::Contacts::ContactChangedEventArgs> const & value) const
{
	long long returnValue = {};
	check(shim()->add_ContactChanged(get(value), &returnValue));
	return returnValue;
}

template <typename T> template <typename F> long long impl_IContactStore2<T>::ContactChanged(F value) const
{
	return ContactChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Contacts::ContactStore, Windows::ApplicationModel::Contacts::ContactChangedEventArgs>(value));
}

template <typename T> void impl_IContactStore2<T>::ContactChanged(long long const value) const
{
	check(shim()->remove_ContactChanged(value));
}

template <typename T> Windows::ApplicationModel::Contacts::AggregateContactManager impl_IContactStore2<T>::AggregateContactManager() const
{
	Windows::ApplicationModel::Contacts::AggregateContactManager value = nullptr;
	check(shim()->get_AggregateContactManager(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactList>> impl_IContactStore2<T>::FindContactListsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactList>> value;
	check(shim()->abi_FindContactListsAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactList> impl_IContactStore2<T>::GetContactListAsync(StringReference const & contactListId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactList> value;
	check(shim()->abi_GetContactListAsync(get(contactListId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactList> impl_IContactStore2<T>::CreateContactListAsync(StringReference const & displayName) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactList> value;
	check(shim()->abi_CreateContactListAsync(get(displayName), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IContactStore2<T>::GetMeContactAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> meContact;
	check(shim()->abi_GetMeContactAsync(put(meContact)));
	return meContact;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactReader impl_IContactStore2<T>::GetContactReader() const
{
	Windows::ApplicationModel::Contacts::ContactReader value = nullptr;
	check(shim()->abi_GetContactReader(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactReader impl_IContactStore2<T>::GetContactReader(Windows::ApplicationModel::Contacts::ContactQueryOptions const & options) const
{
	Windows::ApplicationModel::Contacts::ContactReader value = nullptr;
	check(shim()->abi_GetContactReaderWithOptions(get(options), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactList> impl_IContactStore2<T>::CreateContactListAsync(StringReference const & displayName, StringReference const & userDataAccountId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactList> value;
	check(shim()->abi_CreateContactListInAccountAsync(get(displayName), get(userDataAccountId), put(value)));
	return value;
}

template <typename T> String impl_IContactList<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IContactList<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IContactList<T>::DisplayName(StringReference const & value) const
{
	check(shim()->put_DisplayName(get(value)));
}

template <typename T> String impl_IContactList<T>::SourceDisplayName() const
{
	String value;
	check(shim()->get_SourceDisplayName(put(value)));
	return value;
}

template <typename T> bool impl_IContactList<T>::IsHidden() const
{
	bool value = {};
	check(shim()->get_IsHidden(put(value)));
	return value;
}

template <typename T> void impl_IContactList<T>::IsHidden(bool const value) const
{
	check(shim()->put_IsHidden(value));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactListOtherAppReadAccess impl_IContactList<T>::OtherAppReadAccess() const
{
	Windows::ApplicationModel::Contacts::ContactListOtherAppReadAccess value = {};
	check(shim()->get_OtherAppReadAccess(&value));
	return value;
}

template <typename T> void impl_IContactList<T>::OtherAppReadAccess(Windows::ApplicationModel::Contacts::ContactListOtherAppReadAccess const value) const
{
	check(shim()->put_OtherAppReadAccess(value));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactListOtherAppWriteAccess impl_IContactList<T>::OtherAppWriteAccess() const
{
	Windows::ApplicationModel::Contacts::ContactListOtherAppWriteAccess value = {};
	check(shim()->get_OtherAppWriteAccess(&value));
	return value;
}

template <typename T> void impl_IContactList<T>::OtherAppWriteAccess(Windows::ApplicationModel::Contacts::ContactListOtherAppWriteAccess const value) const
{
	check(shim()->put_OtherAppWriteAccess(value));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactChangeTracker impl_IContactList<T>::ChangeTracker() const
{
	Windows::ApplicationModel::Contacts::ContactChangeTracker value = nullptr;
	check(shim()->get_ChangeTracker(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactListSyncManager impl_IContactList<T>::SyncManager() const
{
	Windows::ApplicationModel::Contacts::ContactListSyncManager value = nullptr;
	check(shim()->get_SyncManager(put(value)));
	return value;
}

template <typename T> bool impl_IContactList<T>::SupportsServerSearch() const
{
	bool value = {};
	check(shim()->get_SupportsServerSearch(put(value)));
	return value;
}

template <typename T> String impl_IContactList<T>::UserDataAccountId() const
{
	String value;
	check(shim()->get_UserDataAccountId(put(value)));
	return value;
}

template <typename T> long long impl_IContactList<T>::ContactChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Contacts::ContactList, Windows::ApplicationModel::Contacts::ContactChangedEventArgs> const & value) const
{
	long long returnValue = {};
	check(shim()->add_ContactChanged(get(value), &returnValue));
	return returnValue;
}

template <typename T> template <typename F> long long impl_IContactList<T>::ContactChanged(F value) const
{
	return ContactChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Contacts::ContactList, Windows::ApplicationModel::Contacts::ContactChangedEventArgs>(value));
}

template <typename T> void impl_IContactList<T>::ContactChanged(long long const value) const
{
	check(shim()->remove_ContactChanged(value));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContactList<T>::SaveAsync() const
{
	Windows::Foundation::IAsyncAction returnValue;
	check(shim()->abi_SaveAsync(put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContactList<T>::DeleteAsync() const
{
	Windows::Foundation::IAsyncAction returnValue;
	check(shim()->abi_DeleteAsync(put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IContactList<T>::GetContactFromRemoteIdAsync(StringReference const & remoteId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> contact;
	check(shim()->abi_GetContactFromRemoteIdAsync(get(remoteId), put(contact)));
	return contact;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IContactList<T>::GetMeContactAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> meContact;
	check(shim()->abi_GetMeContactAsync(put(meContact)));
	return meContact;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactReader impl_IContactList<T>::GetContactReader() const
{
	Windows::ApplicationModel::Contacts::ContactReader value = nullptr;
	check(shim()->abi_GetContactReader(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactReader impl_IContactList<T>::GetContactReader(Windows::ApplicationModel::Contacts::ContactQueryOptions const & options) const
{
	Windows::ApplicationModel::Contacts::ContactReader value = nullptr;
	check(shim()->abi_GetContactReaderWithOptions(get(options), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContactList<T>::SaveContactAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_SaveContactAsync(get(contact), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContactList<T>::DeleteContactAsync(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_DeleteContactAsync(get(contact), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IContactList<T>::GetContactAsync(StringReference const & contactId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> contacts;
	check(shim()->abi_GetContactAsync(get(contactId), put(contacts)));
	return contacts;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactListSyncStatus impl_IContactListSyncManager<T>::Status() const
{
	Windows::ApplicationModel::Contacts::ContactListSyncStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IContactListSyncManager<T>::LastSuccessfulSyncTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_LastSuccessfulSyncTime(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IContactListSyncManager<T>::LastAttemptedSyncTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_LastAttemptedSyncTime(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IContactListSyncManager<T>::SyncAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_SyncAsync(put(result)));
	return result;
}

template <typename T> long long impl_IContactListSyncManager<T>::SyncStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Contacts::ContactListSyncManager, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_SyncStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IContactListSyncManager<T>::SyncStatusChanged(F handler) const
{
	return SyncStatusChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Contacts::ContactListSyncManager, IInspectable>(handler));
}

template <typename T> void impl_IContactListSyncManager<T>::SyncStatusChanged(long long const token) const
{
	check(shim()->remove_SyncStatusChanged(token));
}

template <typename T> String impl_IContactConnectedServiceAccount<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_IContactConnectedServiceAccount<T>::Id(StringReference const & value) const
{
	check(shim()->put_Id(get(value)));
}

template <typename T> String impl_IContactConnectedServiceAccount<T>::ServiceName() const
{
	String value;
	check(shim()->get_ServiceName(put(value)));
	return value;
}

template <typename T> void impl_IContactConnectedServiceAccount<T>::ServiceName(StringReference const & value) const
{
	check(shim()->put_ServiceName(get(value)));
}

template <typename T> String impl_IContactSignificantOther<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IContactSignificantOther<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> String impl_IContactSignificantOther<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IContactSignificantOther<T>::Description(StringReference const & value) const
{
	check(shim()->put_Description(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactRelationship impl_IContactSignificantOther2<T>::Relationship() const
{
	Windows::ApplicationModel::Contacts::ContactRelationship value = {};
	check(shim()->get_Relationship(&value));
	return value;
}

template <typename T> void impl_IContactSignificantOther2<T>::Relationship(Windows::ApplicationModel::Contacts::ContactRelationship const value) const
{
	check(shim()->put_Relationship(value));
}

template <typename T> Windows::Foundation::Uri impl_IContactWebsite<T>::Uri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> void impl_IContactWebsite<T>::Uri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Uri(get(value)));
}

template <typename T> String impl_IContactWebsite<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IContactWebsite<T>::Description(StringReference const & value) const
{
	check(shim()->put_Description(get(value)));
}

template <typename T> String impl_IContactWebsite2<T>::RawValue() const
{
	String value;
	check(shim()->get_RawValue(put(value)));
	return value;
}

template <typename T> void impl_IContactWebsite2<T>::RawValue(StringReference const & value) const
{
	check(shim()->put_RawValue(get(value)));
}

template <typename T> String impl_IContactEmail<T>::Address() const
{
	String value;
	check(shim()->get_Address(put(value)));
	return value;
}

template <typename T> void impl_IContactEmail<T>::Address(StringReference const & value) const
{
	check(shim()->put_Address(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactEmailKind impl_IContactEmail<T>::Kind() const
{
	Windows::ApplicationModel::Contacts::ContactEmailKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> void impl_IContactEmail<T>::Kind(Windows::ApplicationModel::Contacts::ContactEmailKind const value) const
{
	check(shim()->put_Kind(value));
}

template <typename T> String impl_IContactEmail<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IContactEmail<T>::Description(StringReference const & value) const
{
	check(shim()->put_Description(get(value)));
}

template <typename T> String impl_IContactPhone<T>::Number() const
{
	String value;
	check(shim()->get_Number(put(value)));
	return value;
}

template <typename T> void impl_IContactPhone<T>::Number(StringReference const & value) const
{
	check(shim()->put_Number(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactPhoneKind impl_IContactPhone<T>::Kind() const
{
	Windows::ApplicationModel::Contacts::ContactPhoneKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> void impl_IContactPhone<T>::Kind(Windows::ApplicationModel::Contacts::ContactPhoneKind const value) const
{
	check(shim()->put_Kind(value));
}

template <typename T> String impl_IContactPhone<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IContactPhone<T>::Description(StringReference const & value) const
{
	check(shim()->put_Description(get(value)));
}

template <typename T> String impl_IContactAddress<T>::StreetAddress() const
{
	String value;
	check(shim()->get_StreetAddress(put(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::StreetAddress(StringReference const & value) const
{
	check(shim()->put_StreetAddress(get(value)));
}

template <typename T> String impl_IContactAddress<T>::Locality() const
{
	String value;
	check(shim()->get_Locality(put(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::Locality(StringReference const & value) const
{
	check(shim()->put_Locality(get(value)));
}

template <typename T> String impl_IContactAddress<T>::Region() const
{
	String value;
	check(shim()->get_Region(put(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::Region(StringReference const & value) const
{
	check(shim()->put_Region(get(value)));
}

template <typename T> String impl_IContactAddress<T>::Country() const
{
	String value;
	check(shim()->get_Country(put(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::Country(StringReference const & value) const
{
	check(shim()->put_Country(get(value)));
}

template <typename T> String impl_IContactAddress<T>::PostalCode() const
{
	String value;
	check(shim()->get_PostalCode(put(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::PostalCode(StringReference const & value) const
{
	check(shim()->put_PostalCode(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactAddressKind impl_IContactAddress<T>::Kind() const
{
	Windows::ApplicationModel::Contacts::ContactAddressKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> void impl_IContactAddress<T>::Kind(Windows::ApplicationModel::Contacts::ContactAddressKind const value) const
{
	check(shim()->put_Kind(value));
}

template <typename T> String impl_IContactAddress<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IContactAddress<T>::Description(StringReference const & value) const
{
	check(shim()->put_Description(get(value)));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IContactDate<T>::Day() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_Day(put(value)));
	return value;
}

template <typename T> void impl_IContactDate<T>::Day(Windows::Foundation::IReference<unsigned> const & value) const
{
	check(shim()->put_Day(get(value)));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IContactDate<T>::Month() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_Month(put(value)));
	return value;
}

template <typename T> void impl_IContactDate<T>::Month(Windows::Foundation::IReference<unsigned> const & value) const
{
	check(shim()->put_Month(get(value)));
}

template <typename T> Windows::Foundation::IReference<int> impl_IContactDate<T>::Year() const
{
	Windows::Foundation::IReference<int> value;
	check(shim()->get_Year(put(value)));
	return value;
}

template <typename T> void impl_IContactDate<T>::Year(Windows::Foundation::IReference<int> const & value) const
{
	check(shim()->put_Year(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactDateKind impl_IContactDate<T>::Kind() const
{
	Windows::ApplicationModel::Contacts::ContactDateKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> void impl_IContactDate<T>::Kind(Windows::ApplicationModel::Contacts::ContactDateKind const value) const
{
	check(shim()->put_Kind(value));
}

template <typename T> String impl_IContactDate<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IContactDate<T>::Description(StringReference const & value) const
{
	check(shim()->put_Description(get(value)));
}

template <typename T> String impl_IContactJobInfo<T>::CompanyName() const
{
	String value;
	check(shim()->get_CompanyName(put(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::CompanyName(StringReference const & value) const
{
	check(shim()->put_CompanyName(get(value)));
}

template <typename T> String impl_IContactJobInfo<T>::CompanyYomiName() const
{
	String value;
	check(shim()->get_CompanyYomiName(put(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::CompanyYomiName(StringReference const & value) const
{
	check(shim()->put_CompanyYomiName(get(value)));
}

template <typename T> String impl_IContactJobInfo<T>::Department() const
{
	String value;
	check(shim()->get_Department(put(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::Department(StringReference const & value) const
{
	check(shim()->put_Department(get(value)));
}

template <typename T> String impl_IContactJobInfo<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> String impl_IContactJobInfo<T>::Manager() const
{
	String value;
	check(shim()->get_Manager(put(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::Manager(StringReference const & value) const
{
	check(shim()->put_Manager(get(value)));
}

template <typename T> String impl_IContactJobInfo<T>::Office() const
{
	String value;
	check(shim()->get_Office(put(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::Office(StringReference const & value) const
{
	check(shim()->put_Office(get(value)));
}

template <typename T> String impl_IContactJobInfo<T>::CompanyAddress() const
{
	String value;
	check(shim()->get_CompanyAddress(put(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::CompanyAddress(StringReference const & value) const
{
	check(shim()->put_CompanyAddress(get(value)));
}

template <typename T> String impl_IContactJobInfo<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IContactJobInfo<T>::Description(StringReference const & value) const
{
	check(shim()->put_Description(get(value)));
}

template <typename T> String impl_IContact<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IContact<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IContact<T>::Thumbnail() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> void impl_IContact<T>::Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_Thumbnail(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::IContactField> impl_IContact<T>::Fields() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::IContactField> value;
	check(shim()->get_Fields(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactFieldType impl_IContactField<T>::Type() const
{
	Windows::ApplicationModel::Contacts::ContactFieldType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactFieldCategory impl_IContactField<T>::Category() const
{
	Windows::ApplicationModel::Contacts::ContactFieldCategory value = {};
	check(shim()->get_Category(&value));
	return value;
}

template <typename T> String impl_IContactField<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IContactField<T>::Value() const
{
	String value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> String impl_IContactName<T>::FirstName() const
{
	String value;
	check(shim()->get_FirstName(put(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::FirstName(StringReference const & value) const
{
	check(shim()->put_FirstName(get(value)));
}

template <typename T> String impl_IContactName<T>::LastName() const
{
	String value;
	check(shim()->get_LastName(put(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::LastName(StringReference const & value) const
{
	check(shim()->put_LastName(get(value)));
}

template <typename T> String impl_IContactName<T>::MiddleName() const
{
	String value;
	check(shim()->get_MiddleName(put(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::MiddleName(StringReference const & value) const
{
	check(shim()->put_MiddleName(get(value)));
}

template <typename T> String impl_IContactName<T>::YomiGivenName() const
{
	String value;
	check(shim()->get_YomiGivenName(put(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::YomiGivenName(StringReference const & value) const
{
	check(shim()->put_YomiGivenName(get(value)));
}

template <typename T> String impl_IContactName<T>::YomiFamilyName() const
{
	String value;
	check(shim()->get_YomiFamilyName(put(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::YomiFamilyName(StringReference const & value) const
{
	check(shim()->put_YomiFamilyName(get(value)));
}

template <typename T> String impl_IContactName<T>::HonorificNameSuffix() const
{
	String value;
	check(shim()->get_HonorificNameSuffix(put(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::HonorificNameSuffix(StringReference const & value) const
{
	check(shim()->put_HonorificNameSuffix(get(value)));
}

template <typename T> String impl_IContactName<T>::HonorificNamePrefix() const
{
	String value;
	check(shim()->get_HonorificNamePrefix(put(value)));
	return value;
}

template <typename T> void impl_IContactName<T>::HonorificNamePrefix(StringReference const & value) const
{
	check(shim()->put_HonorificNamePrefix(get(value)));
}

template <typename T> String impl_IContactName<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IContactName<T>::YomiDisplayName() const
{
	String value;
	check(shim()->get_YomiDisplayName(put(value)));
	return value;
}

template <typename T> String impl_IContact2<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_IContact2<T>::Id(StringReference const & value) const
{
	check(shim()->put_Id(get(value)));
}

template <typename T> String impl_IContact2<T>::Notes() const
{
	String value;
	check(shim()->get_Notes(put(value)));
	return value;
}

template <typename T> void impl_IContact2<T>::Notes(StringReference const & value) const
{
	check(shim()->put_Notes(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactPhone> impl_IContact2<T>::Phones() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactPhone> value;
	check(shim()->get_Phones(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactEmail> impl_IContact2<T>::Emails() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactEmail> value;
	check(shim()->get_Emails(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactAddress> impl_IContact2<T>::Addresses() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactAddress> value;
	check(shim()->get_Addresses(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount> impl_IContact2<T>::ConnectedServiceAccounts() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactConnectedServiceAccount> value;
	check(shim()->get_ConnectedServiceAccounts(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactDate> impl_IContact2<T>::ImportantDates() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactDate> value;
	check(shim()->get_ImportantDates(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IContact2<T>::DataSuppliers() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_DataSuppliers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactJobInfo> impl_IContact2<T>::JobInfo() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactJobInfo> value;
	check(shim()->get_JobInfo(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactSignificantOther> impl_IContact2<T>::SignificantOthers() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactSignificantOther> value;
	check(shim()->get_SignificantOthers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactWebsite> impl_IContact2<T>::Websites() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::ContactWebsite> value;
	check(shim()->get_Websites(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IContact2<T>::ProviderProperties() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check(shim()->get_ProviderProperties(put(value)));
	return value;
}

template <typename T> String impl_IContact3<T>::ContactListId() const
{
	String value;
	check(shim()->get_ContactListId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IContact3<T>::DisplayPictureUserUpdateTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_DisplayPictureUserUpdateTime(&value));
	return value;
}

template <typename T> void impl_IContact3<T>::DisplayPictureUserUpdateTime(Windows::Foundation::DateTime const & value) const
{
	check(shim()->put_DisplayPictureUserUpdateTime(value));
}

template <typename T> bool impl_IContact3<T>::IsMe() const
{
	bool value = {};
	check(shim()->get_IsMe(put(value)));
	return value;
}

template <typename T> String impl_IContact3<T>::AggregateId() const
{
	String value;
	check(shim()->get_AggregateId(put(value)));
	return value;
}

template <typename T> String impl_IContact3<T>::RemoteId() const
{
	String value;
	check(shim()->get_RemoteId(put(value)));
	return value;
}

template <typename T> void impl_IContact3<T>::RemoteId(StringReference const & value) const
{
	check(shim()->put_RemoteId(get(value)));
}

template <typename T> String impl_IContact3<T>::RingToneToken() const
{
	String value;
	check(shim()->get_RingToneToken(put(value)));
	return value;
}

template <typename T> void impl_IContact3<T>::RingToneToken(StringReference const & value) const
{
	check(shim()->put_RingToneToken(get(value)));
}

template <typename T> bool impl_IContact3<T>::IsDisplayPictureManuallySet() const
{
	bool value = {};
	check(shim()->get_IsDisplayPictureManuallySet(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IContact3<T>::LargeDisplayPicture() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_LargeDisplayPicture(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IContact3<T>::SmallDisplayPicture() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_SmallDisplayPicture(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IContact3<T>::SourceDisplayPicture() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_SourceDisplayPicture(put(value)));
	return value;
}

template <typename T> void impl_IContact3<T>::SourceDisplayPicture(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_SourceDisplayPicture(get(value)));
}

template <typename T> String impl_IContact3<T>::TextToneToken() const
{
	String value;
	check(shim()->get_TextToneToken(put(value)));
	return value;
}

template <typename T> void impl_IContact3<T>::TextToneToken(StringReference const & value) const
{
	check(shim()->put_TextToneToken(get(value)));
}

template <typename T> bool impl_IContact3<T>::IsAggregate() const
{
	bool value = {};
	check(shim()->get_IsAggregate(put(value)));
	return value;
}

template <typename T> String impl_IContact3<T>::FullName() const
{
	String value;
	check(shim()->get_FullName(put(value)));
	return value;
}

template <typename T> String impl_IContact3<T>::DisplayNameOverride() const
{
	String value;
	check(shim()->get_DisplayNameOverride(put(value)));
	return value;
}

template <typename T> void impl_IContact3<T>::DisplayNameOverride(StringReference const & value) const
{
	check(shim()->put_DisplayNameOverride(get(value)));
}

template <typename T> String impl_IContact3<T>::Nickname() const
{
	String value;
	check(shim()->get_Nickname(put(value)));
	return value;
}

template <typename T> void impl_IContact3<T>::Nickname(StringReference const & value) const
{
	check(shim()->put_Nickname(get(value)));
}

template <typename T> String impl_IContact3<T>::SortName() const
{
	String value;
	check(shim()->get_SortName(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactChangeType impl_IContactChange<T>::ChangeType() const
{
	Windows::ApplicationModel::Contacts::ContactChangeType value = {};
	check(shim()->get_ChangeType(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Contact impl_IContactChange<T>::Contact() const
{
	Windows::ApplicationModel::Contacts::Contact value = nullptr;
	check(shim()->get_Contact(put(value)));
	return value;
}

template <typename T> void impl_IContactChangedDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::ApplicationModel::Contacts::ContactChangedDeferral impl_IContactChangedEventArgs<T>::GetDeferral() const
{
	Windows::ApplicationModel::Contacts::ContactChangedDeferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> void impl_IContactChangeReader<T>::AcceptChanges() const
{
	check(shim()->abi_AcceptChanges());
}

template <typename T> void impl_IContactChangeReader<T>::AcceptChangesThrough(Windows::ApplicationModel::Contacts::ContactChange const & lastChangeToAccept) const
{
	check(shim()->abi_AcceptChangesThrough(get(lastChangeToAccept)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactChange>> impl_IContactChangeReader<T>::ReadBatchAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactChange>> value;
	check(shim()->abi_ReadBatchAsync(put(value)));
	return value;
}

template <typename T> void impl_IContactChangeTracker<T>::Enable() const
{
	check(shim()->abi_Enable());
}

template <typename T> Windows::ApplicationModel::Contacts::ContactChangeReader impl_IContactChangeTracker<T>::GetChangeReader() const
{
	Windows::ApplicationModel::Contacts::ContactChangeReader value = nullptr;
	check(shim()->abi_GetChangeReader(put(value)));
	return value;
}

template <typename T> void impl_IContactChangeTracker<T>::Reset() const
{
	check(shim()->abi_Reset());
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactBatch> impl_IContactReader<T>::ReadBatchAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactBatch> value;
	check(shim()->abi_ReadBatchAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactMatchReason> impl_IContactReader<T>::GetMatchingPropertiesWithMatchReason(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactMatchReason> ppRetVal;
	check(shim()->abi_GetMatchingPropertiesWithMatchReason(get(contact), put(ppRetVal)));
	return ppRetVal;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactQuerySearchFields impl_IContactQueryTextSearch<T>::Fields() const
{
	Windows::ApplicationModel::Contacts::ContactQuerySearchFields value = {};
	check(shim()->get_Fields(&value));
	return value;
}

template <typename T> void impl_IContactQueryTextSearch<T>::Fields(Windows::ApplicationModel::Contacts::ContactQuerySearchFields const value) const
{
	check(shim()->put_Fields(value));
}

template <typename T> String impl_IContactQueryTextSearch<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> void impl_IContactQueryTextSearch<T>::Text(StringReference const & value) const
{
	check(shim()->put_Text(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactQuerySearchScope impl_IContactQueryTextSearch<T>::SearchScope() const
{
	Windows::ApplicationModel::Contacts::ContactQuerySearchScope value = {};
	check(shim()->get_SearchScope(&value));
	return value;
}

template <typename T> void impl_IContactQueryTextSearch<T>::SearchScope(Windows::ApplicationModel::Contacts::ContactQuerySearchScope const value) const
{
	check(shim()->put_SearchScope(value));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactQueryOptions impl_IContactQueryOptionsFactory<T>::CreateWithText(StringReference const & text) const
{
	Windows::ApplicationModel::Contacts::ContactQueryOptions result = nullptr;
	check(shim()->abi_CreateWithText(get(text), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactQueryOptions impl_IContactQueryOptionsFactory<T>::CreateWithTextAndFields(StringReference const & text, Windows::ApplicationModel::Contacts::ContactQuerySearchFields const fields) const
{
	Windows::ApplicationModel::Contacts::ContactQueryOptions result = nullptr;
	check(shim()->abi_CreateWithTextAndFields(get(text), fields, put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactQueryTextSearch impl_IContactQueryOptions<T>::TextSearch() const
{
	Windows::ApplicationModel::Contacts::ContactQueryTextSearch value = nullptr;
	check(shim()->get_TextSearch(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IContactQueryOptions<T>::ContactListIds() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_ContactListIds(put(value)));
	return value;
}

template <typename T> bool impl_IContactQueryOptions<T>::IncludeContactsFromHiddenLists() const
{
	bool value = {};
	check(shim()->get_IncludeContactsFromHiddenLists(put(value)));
	return value;
}

template <typename T> void impl_IContactQueryOptions<T>::IncludeContactsFromHiddenLists(bool const value) const
{
	check(shim()->put_IncludeContactsFromHiddenLists(value));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactQueryDesiredFields impl_IContactQueryOptions<T>::DesiredFields() const
{
	Windows::ApplicationModel::Contacts::ContactQueryDesiredFields value = {};
	check(shim()->get_DesiredFields(&value));
	return value;
}

template <typename T> void impl_IContactQueryOptions<T>::DesiredFields(Windows::ApplicationModel::Contacts::ContactQueryDesiredFields const value) const
{
	check(shim()->put_DesiredFields(value));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactAnnotationOperations impl_IContactQueryOptions<T>::DesiredOperations() const
{
	Windows::ApplicationModel::Contacts::ContactAnnotationOperations value = {};
	check(shim()->get_DesiredOperations(&value));
	return value;
}

template <typename T> void impl_IContactQueryOptions<T>::DesiredOperations(Windows::ApplicationModel::Contacts::ContactAnnotationOperations const value) const
{
	check(shim()->put_DesiredOperations(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IContactQueryOptions<T>::AnnotationListIds() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_AnnotationListIds(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact> impl_IContactBatch<T>::Contacts() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::Contact> value;
	check(shim()->get_Contacts(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactBatchStatus impl_IContactBatch<T>::Status() const
{
	Windows::ApplicationModel::Contacts::ContactBatchStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactMatchReasonKind impl_IContactMatchReason<T>::Field() const
{
	Windows::ApplicationModel::Contacts::ContactMatchReasonKind value = {};
	check(shim()->get_Field(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment> impl_IContactMatchReason<T>::Segments() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment> value;
	check(shim()->get_Segments(put(value)));
	return value;
}

template <typename T> String impl_IContactMatchReason<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> String impl_IContactLaunchActionVerbsStatics<T>::Call() const
{
	String value;
	check(shim()->get_Call(put(value)));
	return value;
}

template <typename T> String impl_IContactLaunchActionVerbsStatics<T>::Message() const
{
	String value;
	check(shim()->get_Message(put(value)));
	return value;
}

template <typename T> String impl_IContactLaunchActionVerbsStatics<T>::Map() const
{
	String value;
	check(shim()->get_Map(put(value)));
	return value;
}

template <typename T> String impl_IContactLaunchActionVerbsStatics<T>::Post() const
{
	String value;
	check(shim()->get_Post(put(value)));
	return value;
}

template <typename T> String impl_IContactLaunchActionVerbsStatics<T>::VideoCall() const
{
	String value;
	check(shim()->get_VideoCall(put(value)));
	return value;
}

template <typename T> String impl_IContactLocationField<T>::UnstructuredAddress() const
{
	String value;
	check(shim()->get_UnstructuredAddress(put(value)));
	return value;
}

template <typename T> String impl_IContactLocationField<T>::Street() const
{
	String value;
	check(shim()->get_Street(put(value)));
	return value;
}

template <typename T> String impl_IContactLocationField<T>::City() const
{
	String value;
	check(shim()->get_City(put(value)));
	return value;
}

template <typename T> String impl_IContactLocationField<T>::Region() const
{
	String value;
	check(shim()->get_Region(put(value)));
	return value;
}

template <typename T> String impl_IContactLocationField<T>::Country() const
{
	String value;
	check(shim()->get_Country(put(value)));
	return value;
}

template <typename T> String impl_IContactLocationField<T>::PostalCode() const
{
	String value;
	check(shim()->get_PostalCode(put(value)));
	return value;
}

template <typename T> String impl_IContactInstantMessageField<T>::UserName() const
{
	String value;
	check(shim()->get_UserName(put(value)));
	return value;
}

template <typename T> String impl_IContactInstantMessageField<T>::Service() const
{
	String value;
	check(shim()->get_Service(put(value)));
	return value;
}

template <typename T> String impl_IContactInstantMessageField<T>::DisplayText() const
{
	String value;
	check(shim()->get_DisplayText(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IContactInstantMessageField<T>::LaunchUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_LaunchUri(put(value)));
	return value;
}

template <typename T> String impl_IKnownContactFieldStatics<T>::Email() const
{
	String value;
	check(shim()->get_Email(put(value)));
	return value;
}

template <typename T> String impl_IKnownContactFieldStatics<T>::PhoneNumber() const
{
	String value;
	check(shim()->get_PhoneNumber(put(value)));
	return value;
}

template <typename T> String impl_IKnownContactFieldStatics<T>::Location() const
{
	String value;
	check(shim()->get_Location(put(value)));
	return value;
}

template <typename T> String impl_IKnownContactFieldStatics<T>::InstantMessage() const
{
	String value;
	check(shim()->get_InstantMessage(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactFieldType impl_IKnownContactFieldStatics<T>::ConvertNameToType(StringReference const & name) const
{
	Windows::ApplicationModel::Contacts::ContactFieldType type = {};
	check(shim()->abi_ConvertNameToType(get(name), &type));
	return type;
}

template <typename T> String impl_IKnownContactFieldStatics<T>::ConvertTypeToName(Windows::ApplicationModel::Contacts::ContactFieldType const type) const
{
	String name;
	check(shim()->abi_ConvertTypeToName(type, put(name)));
	return name;
}

template <typename T> String impl_IContactInformation<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> impl_IContactInformation<T>::GetThumbnailAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> operation;
	check(shim()->abi_GetThumbnailAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> impl_IContactInformation<T>::Emails() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> value;
	check(shim()->get_Emails(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> impl_IContactInformation<T>::PhoneNumbers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> value;
	check(shim()->get_PhoneNumbers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactLocationField> impl_IContactInformation<T>::Locations() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactLocationField> value;
	check(shim()->get_Locations(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactInstantMessageField> impl_IContactInformation<T>::InstantMessages() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactInstantMessageField> value;
	check(shim()->get_InstantMessages(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> impl_IContactInformation<T>::CustomFields() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> value;
	check(shim()->get_CustomFields(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> impl_IContactInformation<T>::QueryCustomFields(StringReference const & customName) const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactField> value;
	check(shim()->abi_QueryCustomFields(get(customName), put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactField impl_IContactFieldFactory<T>::CreateField(StringReference const & value, Windows::ApplicationModel::Contacts::ContactFieldType const type) const
{
	Windows::ApplicationModel::Contacts::ContactField field = nullptr;
	check(shim()->abi_CreateField_Default(get(value), type, put(field)));
	return field;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactField impl_IContactFieldFactory<T>::CreateField(StringReference const & value, Windows::ApplicationModel::Contacts::ContactFieldType const type, Windows::ApplicationModel::Contacts::ContactFieldCategory const category) const
{
	Windows::ApplicationModel::Contacts::ContactField field = nullptr;
	check(shim()->abi_CreateField_Category(get(value), type, category, put(field)));
	return field;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactField impl_IContactFieldFactory<T>::CreateField(StringReference const & name, StringReference const & value, Windows::ApplicationModel::Contacts::ContactFieldType const type, Windows::ApplicationModel::Contacts::ContactFieldCategory const category) const
{
	Windows::ApplicationModel::Contacts::ContactField field = nullptr;
	check(shim()->abi_CreateField_Custom(get(name), get(value), type, category, put(field)));
	return field;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactLocationField impl_IContactLocationFieldFactory<T>::CreateLocation(StringReference const & unstructuredAddress) const
{
	Windows::ApplicationModel::Contacts::ContactLocationField field = nullptr;
	check(shim()->abi_CreateLocation_Default(get(unstructuredAddress), put(field)));
	return field;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactLocationField impl_IContactLocationFieldFactory<T>::CreateLocation(StringReference const & unstructuredAddress, Windows::ApplicationModel::Contacts::ContactFieldCategory const category) const
{
	Windows::ApplicationModel::Contacts::ContactLocationField field = nullptr;
	check(shim()->abi_CreateLocation_Category(get(unstructuredAddress), category, put(field)));
	return field;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactLocationField impl_IContactLocationFieldFactory<T>::CreateLocation(StringReference const & unstructuredAddress, Windows::ApplicationModel::Contacts::ContactFieldCategory const category, StringReference const & street, StringReference const & city, StringReference const & region, StringReference const & country, StringReference const & postalCode) const
{
	Windows::ApplicationModel::Contacts::ContactLocationField field = nullptr;
	check(shim()->abi_CreateLocation_All(get(unstructuredAddress), category, get(street), get(city), get(region), get(country), get(postalCode), put(field)));
	return field;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactInstantMessageField impl_IContactInstantMessageFieldFactory<T>::CreateInstantMessage(StringReference const & userName) const
{
	Windows::ApplicationModel::Contacts::ContactInstantMessageField field = nullptr;
	check(shim()->abi_CreateInstantMessage_Default(get(userName), put(field)));
	return field;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactInstantMessageField impl_IContactInstantMessageFieldFactory<T>::CreateInstantMessage(StringReference const & userName, Windows::ApplicationModel::Contacts::ContactFieldCategory const category) const
{
	Windows::ApplicationModel::Contacts::ContactInstantMessageField field = nullptr;
	check(shim()->abi_CreateInstantMessage_Category(get(userName), category, put(field)));
	return field;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactInstantMessageField impl_IContactInstantMessageFieldFactory<T>::CreateInstantMessage(StringReference const & userName, Windows::ApplicationModel::Contacts::ContactFieldCategory const category, StringReference const & service, StringReference const & displayText, Windows::Foundation::Uri const & verb) const
{
	Windows::ApplicationModel::Contacts::ContactInstantMessageField field = nullptr;
	check(shim()->abi_CreateInstantMessage_All(get(userName), category, get(service), get(displayText), get(verb), put(field)));
	return field;
}

template <typename T> String impl_IContactPicker<T>::CommitButtonText() const
{
	String value;
	check(shim()->get_CommitButtonText(put(value)));
	return value;
}

template <typename T> void impl_IContactPicker<T>::CommitButtonText(StringReference const & value) const
{
	check(shim()->put_CommitButtonText(get(value)));
}

template <typename T> Windows::ApplicationModel::Contacts::ContactSelectionMode impl_IContactPicker<T>::SelectionMode() const
{
	Windows::ApplicationModel::Contacts::ContactSelectionMode value = {};
	check(shim()->get_SelectionMode(&value));
	return value;
}

template <typename T> void impl_IContactPicker<T>::SelectionMode(Windows::ApplicationModel::Contacts::ContactSelectionMode const value) const
{
	check(shim()->put_SelectionMode(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IContactPicker<T>::DesiredFields() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_DesiredFields(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactInformation> impl_IContactPicker<T>::PickSingleContactAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactInformation> result;
	check(shim()->abi_PickSingleContactAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactInformation>> impl_IContactPicker<T>::PickMultipleContactsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactInformation>> result;
	check(shim()->abi_PickMultipleContactsAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::ApplicationModel::Contacts::ContactFieldType> impl_IContactPicker2<T>::DesiredFieldsWithContactFieldType() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::ApplicationModel::Contacts::ContactFieldType> value;
	check(shim()->get_DesiredFieldsWithContactFieldType(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> impl_IContactPicker2<T>::PickContactAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> result;
	check(shim()->abi_PickContactAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Contact>> impl_IContactPicker2<T>::PickContactsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Contacts::Contact>> result;
	check(shim()->abi_PickContactsAsync(put(result)));
	return result;
}

template <typename T> void impl_IContactCardDelayedDataLoader<T>::SetData(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	check(shim()->abi_SetData(get(contact)));
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

template <typename T> String impl_IContactRemovedEventArgs<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::Provider::AddContactResult impl_IContactPickerUI<T>::AddContact(StringReference const & id, Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::ApplicationModel::Contacts::Provider::AddContactResult result = {};
	check(shim()->abi_AddContact(get(id), get(contact), &result));
	return result;
}

template <typename T> void impl_IContactPickerUI<T>::RemoveContact(StringReference const & id) const
{
	check(shim()->abi_RemoveContact(get(id)));
}

template <typename T> bool impl_IContactPickerUI<T>::ContainsContact(StringReference const & id) const
{
	bool isContained = {};
	check(shim()->abi_ContainsContact(get(id), put(isContained)));
	return isContained;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IContactPickerUI<T>::DesiredFields() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_DesiredFields(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Contacts::ContactSelectionMode impl_IContactPickerUI<T>::SelectionMode() const
{
	Windows::ApplicationModel::Contacts::ContactSelectionMode value = {};
	check(shim()->get_SelectionMode(&value));
	return value;
}

template <typename T> long long impl_IContactPickerUI<T>::ContactRemoved(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Contacts::Provider::ContactPickerUI, Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ContactRemoved(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IContactPickerUI<T>::ContactRemoved(F handler) const
{
	return ContactRemoved(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Contacts::Provider::ContactPickerUI, Windows::ApplicationModel::Contacts::Provider::ContactRemovedEventArgs>(handler));
}

template <typename T> void impl_IContactPickerUI<T>::ContactRemoved(long long const token) const
{
	check(shim()->remove_ContactRemoved(token));
}

template <typename T> Windows::ApplicationModel::Contacts::Provider::AddContactResult impl_IContactPickerUI2<T>::AddContact(Windows::ApplicationModel::Contacts::Contact const & contact) const
{
	Windows::ApplicationModel::Contacts::Provider::AddContactResult result = {};
	check(shim()->abi_AddContact(get(contact), &result));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::ApplicationModel::Contacts::ContactFieldType> impl_IContactPickerUI2<T>::DesiredFieldsWithContactFieldType() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::ApplicationModel::Contacts::ContactFieldType> value;
	check(shim()->get_DesiredFieldsWithContactFieldType(put(value)));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Core {

template <typename T> Windows::ApplicationModel::AppDisplayInfo impl_IAppListEntry<T>::DisplayInfo() const
{
	Windows::ApplicationModel::AppDisplayInfo value = nullptr;
	check(shim()->get_DisplayInfo(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IAppListEntry<T>::LaunchAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_LaunchAsync(put(operation)));
	return operation;
}

template <typename T> void impl_IFrameworkView<T>::Initialize(Windows::ApplicationModel::Core::CoreApplicationView const & applicationView) const
{
	check(shim()->abi_Initialize(get(applicationView)));
}

template <typename T> void impl_IFrameworkView<T>::SetWindow(Windows::UI::Core::CoreWindow const & window) const
{
	check(shim()->abi_SetWindow(get(window)));
}

template <typename T> void impl_IFrameworkView<T>::Load(StringReference const & entryPoint) const
{
	check(shim()->abi_Load(get(entryPoint)));
}

template <typename T> void impl_IFrameworkView<T>::Run() const
{
	check(shim()->abi_Run());
}

template <typename T> void impl_IFrameworkView<T>::Uninitialize() const
{
	check(shim()->abi_Uninitialize());
}

template <typename T> Windows::ApplicationModel::Core::IFrameworkView impl_IFrameworkViewSource<T>::CreateView() const
{
	Windows::ApplicationModel::Core::IFrameworkView viewProvider;
	check(shim()->abi_CreateView(put(viewProvider)));
	return viewProvider;
}

template <typename T> String impl_ICoreApplication<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> long long impl_ICoreApplication<T>::Suspending(Windows::Foundation::IEventHandler<Windows::ApplicationModel::SuspendingEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Suspending(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICoreApplication<T>::Suspending(F handler) const
{
	return Suspending(Windows::Foundation::EventHandler<Windows::ApplicationModel::SuspendingEventArgs>(handler));
}

template <typename T> void impl_ICoreApplication<T>::Suspending(long long const token) const
{
	check(shim()->remove_Suspending(token));
}

template <typename T> long long impl_ICoreApplication<T>::Resuming(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Resuming(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICoreApplication<T>::Resuming(F handler) const
{
	return Resuming(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_ICoreApplication<T>::Resuming(long long const token) const
{
	check(shim()->remove_Resuming(token));
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_ICoreApplication<T>::Properties() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Core::CoreApplicationView impl_ICoreApplication<T>::GetCurrentView() const
{
	Windows::ApplicationModel::Core::CoreApplicationView value = nullptr;
	check(shim()->abi_GetCurrentView(put(value)));
	return value;
}

template <typename T> void impl_ICoreApplication<T>::Run(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource) const
{
	check(shim()->abi_Run(get(viewSource)));
}

template <typename T> void impl_ICoreApplication<T>::RunWithActivationFactories(Windows::Foundation::IGetActivationFactory const & activationFactoryCallback) const
{
	check(shim()->abi_RunWithActivationFactories(get(activationFactoryCallback)));
}

template <typename T> void impl_ICoreApplicationUseCount<T>::IncrementApplicationUseCount() const
{
	check(shim()->abi_IncrementApplicationUseCount());
}

template <typename T> void impl_ICoreApplicationUseCount<T>::DecrementApplicationUseCount() const
{
	check(shim()->abi_DecrementApplicationUseCount());
}

template <typename T> void impl_ICoreApplicationExit<T>::Exit() const
{
	check(shim()->abi_Exit());
}

template <typename T> long long impl_ICoreApplicationExit<T>::Exiting(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Exiting(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICoreApplicationExit<T>::Exiting(F handler) const
{
	return Exiting(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_ICoreApplicationExit<T>::Exiting(long long const token) const
{
	check(shim()->remove_Exiting(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::CoreApplicationView> impl_ICoreImmersiveApplication<T>::Views() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::CoreApplicationView> value;
	check(shim()->get_Views(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Core::CoreApplicationView impl_ICoreImmersiveApplication<T>::CreateNewView(StringReference const & runtimeType, StringReference const & entryPoint) const
{
	Windows::ApplicationModel::Core::CoreApplicationView view = nullptr;
	check(shim()->abi_CreateNewView(get(runtimeType), get(entryPoint), put(view)));
	return view;
}

template <typename T> Windows::ApplicationModel::Core::CoreApplicationView impl_ICoreImmersiveApplication<T>::MainView() const
{
	Windows::ApplicationModel::Core::CoreApplicationView value = nullptr;
	check(shim()->get_MainView(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Core::CoreApplicationView impl_ICoreImmersiveApplication2<T>::CreateNewView() const
{
	Windows::ApplicationModel::Core::CoreApplicationView view = nullptr;
	check(shim()->abi_CreateNewViewFromMainView(put(view)));
	return view;
}

template <typename T> Windows::ApplicationModel::Core::CoreApplicationView impl_ICoreImmersiveApplication3<T>::CreateNewView(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource) const
{
	Windows::ApplicationModel::Core::CoreApplicationView view = nullptr;
	check(shim()->abi_CreateNewViewWithViewSource(get(viewSource), put(view)));
	return view;
}

template <typename T> long long impl_ICoreApplicationUnhandledError<T>::UnhandledErrorDetected(Windows::Foundation::IEventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_UnhandledErrorDetected(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICoreApplicationUnhandledError<T>::UnhandledErrorDetected(F handler) const
{
	return UnhandledErrorDetected(Windows::Foundation::EventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>(handler));
}

template <typename T> void impl_ICoreApplicationUnhandledError<T>::UnhandledErrorDetected(long long const token) const
{
	check(shim()->remove_UnhandledErrorDetected(token));
}

template <typename T> Windows::UI::Core::CoreWindow impl_ICoreApplicationView<T>::CoreWindow() const
{
	Windows::UI::Core::CoreWindow value = nullptr;
	check(shim()->get_CoreWindow(put(value)));
	return value;
}

template <typename T> long long impl_ICoreApplicationView<T>::Activated(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationView, Windows::ApplicationModel::Activation::IActivatedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Activated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICoreApplicationView<T>::Activated(F handler) const
{
	return Activated(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationView, Windows::ApplicationModel::Activation::IActivatedEventArgs>(handler));
}

template <typename T> void impl_ICoreApplicationView<T>::Activated(long long const token) const
{
	check(shim()->remove_Activated(token));
}

template <typename T> bool impl_ICoreApplicationView<T>::IsMain() const
{
	bool value = {};
	check(shim()->get_IsMain(put(value)));
	return value;
}

template <typename T> bool impl_ICoreApplicationView<T>::IsHosted() const
{
	bool value = {};
	check(shim()->get_IsHosted(put(value)));
	return value;
}

template <typename T> Windows::UI::Core::CoreDispatcher impl_ICoreApplicationView2<T>::Dispatcher() const
{
	Windows::UI::Core::CoreDispatcher value = nullptr;
	check(shim()->get_Dispatcher(put(value)));
	return value;
}

template <typename T> bool impl_ICoreApplicationView3<T>::IsComponent() const
{
	bool value = {};
	check(shim()->get_IsComponent(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Core::CoreApplicationViewTitleBar impl_ICoreApplicationView3<T>::TitleBar() const
{
	Windows::ApplicationModel::Core::CoreApplicationViewTitleBar value = nullptr;
	check(shim()->get_TitleBar(put(value)));
	return value;
}

template <typename T> long long impl_ICoreApplicationView3<T>::HostedViewClosing(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationView, Windows::ApplicationModel::Core::HostedViewClosingEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_HostedViewClosing(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICoreApplicationView3<T>::HostedViewClosing(F handler) const
{
	return HostedViewClosing(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationView, Windows::ApplicationModel::Core::HostedViewClosingEventArgs>(handler));
}

template <typename T> void impl_ICoreApplicationView3<T>::HostedViewClosing(long long const token) const
{
	check(shim()->remove_HostedViewClosing(token));
}

template <typename T> Windows::Foundation::Deferral impl_IHostedViewClosingEventArgs<T>::GetDeferral() const
{
	Windows::Foundation::Deferral result = nullptr;
	check(shim()->abi_GetDeferral(put(result)));
	return result;
}

template <typename T> void impl_ICoreApplicationViewTitleBar<T>::ExtendViewIntoTitleBar(bool const value) const
{
	check(shim()->put_ExtendViewIntoTitleBar(value));
}

template <typename T> bool impl_ICoreApplicationViewTitleBar<T>::ExtendViewIntoTitleBar() const
{
	bool value = {};
	check(shim()->get_ExtendViewIntoTitleBar(put(value)));
	return value;
}

template <typename T> double impl_ICoreApplicationViewTitleBar<T>::SystemOverlayLeftInset() const
{
	double value = {};
	check(shim()->get_SystemOverlayLeftInset(&value));
	return value;
}

template <typename T> double impl_ICoreApplicationViewTitleBar<T>::SystemOverlayRightInset() const
{
	double value = {};
	check(shim()->get_SystemOverlayRightInset(&value));
	return value;
}

template <typename T> double impl_ICoreApplicationViewTitleBar<T>::Height() const
{
	double value = {};
	check(shim()->get_Height(&value));
	return value;
}

template <typename T> long long impl_ICoreApplicationViewTitleBar<T>::LayoutMetricsChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationViewTitleBar, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_LayoutMetricsChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICoreApplicationViewTitleBar<T>::LayoutMetricsChanged(F handler) const
{
	return LayoutMetricsChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationViewTitleBar, IInspectable>(handler));
}

template <typename T> void impl_ICoreApplicationViewTitleBar<T>::LayoutMetricsChanged(long long const token) const
{
	check(shim()->remove_LayoutMetricsChanged(token));
}

template <typename T> bool impl_ICoreApplicationViewTitleBar<T>::IsVisible() const
{
	bool value = {};
	check(shim()->get_IsVisible(put(value)));
	return value;
}

template <typename T> long long impl_ICoreApplicationViewTitleBar<T>::IsVisibleChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationViewTitleBar, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_IsVisibleChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICoreApplicationViewTitleBar<T>::IsVisibleChanged(F handler) const
{
	return IsVisibleChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Core::CoreApplicationViewTitleBar, IInspectable>(handler));
}

template <typename T> void impl_ICoreApplicationViewTitleBar<T>::IsVisibleChanged(long long const token) const
{
	check(shim()->remove_IsVisibleChanged(token));
}

template <typename T> Windows::ApplicationModel::Core::UnhandledError impl_IUnhandledErrorDetectedEventArgs<T>::UnhandledError() const
{
	Windows::ApplicationModel::Core::UnhandledError value = nullptr;
	check(shim()->get_UnhandledError(put(value)));
	return value;
}

template <typename T> bool impl_IUnhandledError<T>::Handled() const
{
	bool value = {};
	check(shim()->get_Handled(put(value)));
	return value;
}

template <typename T> void impl_IUnhandledError<T>::Propagate() const
{
	check(shim()->abi_Propagate());
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

template <typename T> void impl_IDataProviderHandler<T>::Invoke(Windows::ApplicationModel::DataTransfer::DataProviderRequest const & request) const
{
	check(shim()->abi_Invoke(get(request)));
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::Uri() const
{
	String value;
	check(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::Html() const
{
	String value;
	check(shim()->get_Html(put(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::Rtf() const
{
	String value;
	check(shim()->get_Rtf(put(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::Bitmap() const
{
	String value;
	check(shim()->get_Bitmap(put(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics<T>::StorageItems() const
{
	String value;
	check(shim()->get_StorageItems(put(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics2<T>::WebLink() const
{
	String value;
	check(shim()->get_WebLink(put(value)));
	return value;
}

template <typename T> String impl_IStandardDataFormatsStatics2<T>::ApplicationLink() const
{
	String value;
	check(shim()->get_ApplicationLink(put(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySetView<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySetView<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IDataPackagePropertySetView<T>::Thumbnail() const
{
	Windows::Storage::Streams::RandomAccessStreamReference value = nullptr;
	check(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IDataPackagePropertySetView<T>::FileTypes() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_FileTypes(put(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySetView<T>::ApplicationName() const
{
	String value;
	check(shim()->get_ApplicationName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySetView<T>::ApplicationListingUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ApplicationListingUri(put(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySetView2<T>::PackageFamilyName() const
{
	String value;
	check(shim()->get_PackageFamilyName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySetView2<T>::ContentSourceWebLink() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ContentSourceWebLink(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySetView2<T>::ContentSourceApplicationLink() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ContentSourceApplicationLink(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IDataPackagePropertySetView2<T>::Square30x30Logo() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_Square30x30Logo(put(value)));
	return value;
}

template <typename T> Windows::UI::Color impl_IDataPackagePropertySetView2<T>::LogoBackgroundColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LogoBackgroundColor(&value));
	return value;
}

template <typename T> String impl_IDataPackagePropertySetView3<T>::EnterpriseId() const
{
	String value;
	check(shim()->get_EnterpriseId(put(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySet<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> String impl_IDataPackagePropertySet<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet<T>::Description(StringReference const & value) const
{
	check(shim()->put_Description(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IDataPackagePropertySet<T>::Thumbnail() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet<T>::Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_Thumbnail(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IDataPackagePropertySet<T>::FileTypes() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_FileTypes(put(value)));
	return value;
}

template <typename T> String impl_IDataPackagePropertySet<T>::ApplicationName() const
{
	String value;
	check(shim()->get_ApplicationName(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet<T>::ApplicationName(StringReference const & value) const
{
	check(shim()->put_ApplicationName(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySet<T>::ApplicationListingUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ApplicationListingUri(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet<T>::ApplicationListingUri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_ApplicationListingUri(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySet2<T>::ContentSourceWebLink() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ContentSourceWebLink(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet2<T>::ContentSourceWebLink(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_ContentSourceWebLink(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IDataPackagePropertySet2<T>::ContentSourceApplicationLink() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ContentSourceApplicationLink(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet2<T>::ContentSourceApplicationLink(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_ContentSourceApplicationLink(get(value)));
}

template <typename T> String impl_IDataPackagePropertySet2<T>::PackageFamilyName() const
{
	String value;
	check(shim()->get_PackageFamilyName(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet2<T>::PackageFamilyName(StringReference const & value) const
{
	check(shim()->put_PackageFamilyName(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IDataPackagePropertySet2<T>::Square30x30Logo() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_Square30x30Logo(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet2<T>::Square30x30Logo(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_Square30x30Logo(get(value)));
}

template <typename T> Windows::UI::Color impl_IDataPackagePropertySet2<T>::LogoBackgroundColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LogoBackgroundColor(&value));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet2<T>::LogoBackgroundColor(Windows::UI::Color const & value) const
{
	check(shim()->put_LogoBackgroundColor(value));
}

template <typename T> String impl_IDataPackagePropertySet3<T>::EnterpriseId() const
{
	String value;
	check(shim()->get_EnterpriseId(put(value)));
	return value;
}

template <typename T> void impl_IDataPackagePropertySet3<T>::EnterpriseId(StringReference const & value) const
{
	check(shim()->put_EnterpriseId(get(value)));
}

template <typename T> void impl_IDataProviderDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> String impl_IDataProviderRequest<T>::FormatId() const
{
	String value;
	check(shim()->get_FormatId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IDataProviderRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Deadline(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataProviderDeferral impl_IDataProviderRequest<T>::GetDeferral() const
{
	Windows::ApplicationModel::DataTransfer::DataProviderDeferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> void impl_IDataProviderRequest<T>::SetData(IInspectable const & value) const
{
	check(shim()->abi_SetData(get(value)));
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageOperation impl_IOperationCompletedEventArgs<T>::Operation() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageOperation value = {};
	check(shim()->get_Operation(&value));
	return value;
}

template <typename T> String impl_IOperationCompletedEventArgs2<T>::AcceptedFormatId() const
{
	String value;
	check(shim()->get_AcceptedFormatId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackagePropertySetView impl_IDataPackageView<T>::Properties() const
{
	Windows::ApplicationModel::DataTransfer::DataPackagePropertySetView value = nullptr;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageOperation impl_IDataPackageView<T>::RequestedOperation() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageOperation value = {};
	check(shim()->get_RequestedOperation(&value));
	return value;
}

template <typename T> void impl_IDataPackageView<T>::ReportOperationCompleted(Windows::ApplicationModel::DataTransfer::DataPackageOperation const value) const
{
	check(shim()->abi_ReportOperationCompleted(value));
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IDataPackageView<T>::AvailableFormats() const
{
	Windows::Foundation::Collections::IVectorView<String> formatIds;
	check(shim()->get_AvailableFormats(put(formatIds)));
	return formatIds;
}

template <typename T> bool impl_IDataPackageView<T>::Contains(StringReference const & formatId) const
{
	bool value = {};
	check(shim()->abi_Contains(get(formatId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<IInspectable> impl_IDataPackageView<T>::GetDataAsync(StringReference const & formatId) const
{
	Windows::Foundation::IAsyncOperation<IInspectable> operation;
	check(shim()->abi_GetDataAsync(get(formatId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IDataPackageView<T>::GetTextAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_GetTextAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IDataPackageView<T>::GetTextAsync(StringReference const & formatId) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_GetCustomTextAsync(get(formatId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> impl_IDataPackageView<T>::GetUriAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> operation;
	check(shim()->abi_GetUriAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IDataPackageView<T>::GetHtmlFormatAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_GetHtmlFormatAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, Windows::Storage::Streams::RandomAccessStreamReference>> impl_IDataPackageView<T>::GetResourceMapAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, Windows::Storage::Streams::RandomAccessStreamReference>> operation;
	check(shim()->abi_GetResourceMapAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IDataPackageView<T>::GetRtfAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_GetRtfAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> impl_IDataPackageView<T>::GetBitmapAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> operation;
	check(shim()->abi_GetBitmapAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> impl_IDataPackageView<T>::GetStorageItemsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> operation;
	check(shim()->abi_GetStorageItemsAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> impl_IDataPackageView2<T>::GetApplicationLinkAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> operation;
	check(shim()->abi_GetApplicationLinkAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> impl_IDataPackageView2<T>::GetWebLinkAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> operation;
	check(shim()->abi_GetWebLinkAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> impl_IDataPackageView3<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> operation;
	check(shim()->abi_RequestAccessAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> impl_IDataPackageView3<T>::RequestAccessAsync(StringReference const & enterpriseId) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> operation;
	check(shim()->abi_RequestAccessWithEnterpriseIdAsync(get(enterpriseId), put(operation)));
	return operation;
}

template <typename T> Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult impl_IDataPackageView3<T>::UnlockAndAssumeEnterpriseIdentity() const
{
	Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult result = {};
	check(shim()->abi_UnlockAndAssumeEnterpriseIdentity(&result));
	return result;
}

template <typename T> void impl_IDataPackageView4<T>::SetAcceptedFormatId(StringReference const & formatId) const
{
	check(shim()->abi_SetAcceptedFormatId(get(formatId)));
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageView impl_IDataPackage<T>::GetView() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageView value = nullptr;
	check(shim()->abi_GetView(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackagePropertySet impl_IDataPackage<T>::Properties() const
{
	Windows::ApplicationModel::DataTransfer::DataPackagePropertySet value = nullptr;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageOperation impl_IDataPackage<T>::RequestedOperation() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageOperation value = {};
	check(shim()->get_RequestedOperation(&value));
	return value;
}

template <typename T> void impl_IDataPackage<T>::RequestedOperation(Windows::ApplicationModel::DataTransfer::DataPackageOperation const value) const
{
	check(shim()->put_RequestedOperation(value));
}

template <typename T> long long impl_IDataPackage<T>::OperationCompleted(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, Windows::ApplicationModel::DataTransfer::OperationCompletedEventArgs> const & handler) const
{
	long long eventCookie = {};
	check(shim()->add_OperationCompleted(get(handler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IDataPackage<T>::OperationCompleted(F handler) const
{
	return OperationCompleted(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, Windows::ApplicationModel::DataTransfer::OperationCompletedEventArgs>(handler));
}

template <typename T> void impl_IDataPackage<T>::OperationCompleted(long long const eventCookie) const
{
	check(shim()->remove_OperationCompleted(eventCookie));
}

template <typename T> long long impl_IDataPackage<T>::Destroyed(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, IInspectable> const & handler) const
{
	long long eventCookie = {};
	check(shim()->add_Destroyed(get(handler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IDataPackage<T>::Destroyed(F handler) const
{
	return Destroyed(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::DataTransfer::DataPackage, IInspectable>(handler));
}

template <typename T> void impl_IDataPackage<T>::Destroyed(long long const eventCookie) const
{
	check(shim()->remove_Destroyed(eventCookie));
}

template <typename T> void impl_IDataPackage<T>::SetData(StringReference const & formatId, IInspectable const & value) const
{
	check(shim()->abi_SetData(get(formatId), get(value)));
}

template <typename T> void impl_IDataPackage<T>::SetDataProvider(StringReference const & formatId, Windows::ApplicationModel::DataTransfer::IDataProviderHandler const & delayRenderer) const
{
	check(shim()->abi_SetDataProvider(get(formatId), get(delayRenderer)));
}

template <typename T> template <typename F> void impl_IDataPackage<T>::SetDataProvider(StringReference const & formatId, F delayRenderer) const
{
	SetDataProvider(formatId, Windows::ApplicationModel::DataTransfer::DataProviderHandler(delayRenderer));
}

template <typename T> void impl_IDataPackage<T>::SetText(StringReference const & value) const
{
	check(shim()->abi_SetText(get(value)));
}

template <typename T> void impl_IDataPackage<T>::SetUri(Windows::Foundation::Uri const & value) const
{
	check(shim()->abi_SetUri(get(value)));
}

template <typename T> void impl_IDataPackage<T>::SetHtmlFormat(StringReference const & value) const
{
	check(shim()->abi_SetHtmlFormat(get(value)));
}

template <typename T> Windows::Foundation::Collections::IMap<String, Windows::Storage::Streams::RandomAccessStreamReference> impl_IDataPackage<T>::ResourceMap() const
{
	Windows::Foundation::Collections::IMap<String, Windows::Storage::Streams::RandomAccessStreamReference> value;
	check(shim()->get_ResourceMap(put(value)));
	return value;
}

template <typename T> void impl_IDataPackage<T>::SetRtf(StringReference const & value) const
{
	check(shim()->abi_SetRtf(get(value)));
}

template <typename T> void impl_IDataPackage<T>::SetBitmap(Windows::Storage::Streams::RandomAccessStreamReference const & value) const
{
	check(shim()->abi_SetBitmap(get(value)));
}

template <typename T> void impl_IDataPackage<T>::SetStorageItems(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem> const & value) const
{
	check(shim()->abi_SetStorageItemsReadOnly(get(value)));
}

template <typename T> void impl_IDataPackage<T>::SetStorageItems(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageItem> const & value, bool const readOnly) const
{
	check(shim()->abi_SetStorageItems(get(value), readOnly));
}

template <typename T> void impl_IDataPackage2<T>::SetApplicationLink(Windows::Foundation::Uri const & value) const
{
	check(shim()->abi_SetApplicationLink(get(value)));
}

template <typename T> void impl_IDataPackage2<T>::SetWebLink(Windows::Foundation::Uri const & value) const
{
	check(shim()->abi_SetWebLink(get(value)));
}

template <typename T> String impl_IHtmlFormatHelperStatics<T>::GetStaticFragment(StringReference const & htmlFormat) const
{
	String htmlFragment;
	check(shim()->abi_GetStaticFragment(get(htmlFormat), put(htmlFragment)));
	return htmlFragment;
}

template <typename T> String impl_IHtmlFormatHelperStatics<T>::CreateHtmlFormat(StringReference const & htmlFragment) const
{
	String htmlFormat;
	check(shim()->abi_CreateHtmlFormat(get(htmlFragment), put(htmlFormat)));
	return htmlFormat;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageView impl_IClipboardStatics<T>::GetContent() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageView content = nullptr;
	check(shim()->abi_GetContent(put(content)));
	return content;
}

template <typename T> void impl_IClipboardStatics<T>::SetContent(Windows::ApplicationModel::DataTransfer::DataPackage const & content) const
{
	check(shim()->abi_SetContent(get(content)));
}

template <typename T> void impl_IClipboardStatics<T>::Flush() const
{
	check(shim()->abi_Flush());
}

template <typename T> void impl_IClipboardStatics<T>::Clear() const
{
	check(shim()->abi_Clear());
}

template <typename T> long long impl_IClipboardStatics<T>::ContentChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler) const
{
	long long token = {};
	check(shim()->add_ContentChanged(get(changeHandler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IClipboardStatics<T>::ContentChanged(F changeHandler) const
{
	return ContentChanged(Windows::Foundation::EventHandler<IInspectable>(changeHandler));
}

template <typename T> void impl_IClipboardStatics<T>::ContentChanged(long long const token) const
{
	check(shim()->remove_ContentChanged(token));
}

template <typename T> void impl_IDataRequestDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackage impl_IDataRequest<T>::Data() const
{
	Windows::ApplicationModel::DataTransfer::DataPackage value = nullptr;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> void impl_IDataRequest<T>::Data(Windows::ApplicationModel::DataTransfer::DataPackage const & value) const
{
	check(shim()->put_Data(get(value)));
}

template <typename T> Windows::Foundation::DateTime impl_IDataRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Deadline(&value));
	return value;
}

template <typename T> void impl_IDataRequest<T>::FailWithDisplayText(StringReference const & value) const
{
	check(shim()->abi_FailWithDisplayText(get(value)));
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataRequestDeferral impl_IDataRequest<T>::GetDeferral() const
{
	Windows::ApplicationModel::DataTransfer::DataRequestDeferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataRequest impl_IDataRequestedEventArgs<T>::Request() const
{
	Windows::ApplicationModel::DataTransfer::DataRequest value = nullptr;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> String impl_ITargetApplicationChosenEventArgs<T>::ApplicationName() const
{
	String value;
	check(shim()->get_ApplicationName(put(value)));
	return value;
}

template <typename T> long long impl_IDataTransferManager<T>::DataRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::DataRequestedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_DataRequested(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IDataTransferManager<T>::DataRequested(F eventHandler) const
{
	return DataRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::DataRequestedEventArgs>(eventHandler));
}

template <typename T> void impl_IDataTransferManager<T>::DataRequested(long long const eventCookie) const
{
	check(shim()->remove_DataRequested(eventCookie));
}

template <typename T> long long impl_IDataTransferManager<T>::TargetApplicationChosen(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::TargetApplicationChosenEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_TargetApplicationChosen(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IDataTransferManager<T>::TargetApplicationChosen(F eventHandler) const
{
	return TargetApplicationChosen(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::DataTransfer::DataTransferManager, Windows::ApplicationModel::DataTransfer::TargetApplicationChosenEventArgs>(eventHandler));
}

template <typename T> void impl_IDataTransferManager<T>::TargetApplicationChosen(long long const eventCookie) const
{
	check(shim()->remove_TargetApplicationChosen(eventCookie));
}

template <typename T> void impl_IDataTransferManagerStatics<T>::ShowShareUI() const
{
	check(shim()->abi_ShowShareUI());
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataTransferManager impl_IDataTransferManagerStatics<T>::GetForCurrentView() const
{
	Windows::ApplicationModel::DataTransfer::DataTransferManager value = nullptr;
	check(shim()->abi_GetForCurrentView(put(value)));
	return value;
}

template <typename T> String impl_ISharedStorageAccessManagerStatics<T>::AddFile(Windows::Storage::IStorageFile const & file) const
{
	String outToken;
	check(shim()->abi_AddFile(get(file), put(outToken)));
	return outToken;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_ISharedStorageAccessManagerStatics<T>::RedeemTokenForFileAsync(StringReference const & token) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_RedeemTokenForFileAsync(get(token), put(operation)));
	return operation;
}

template <typename T> void impl_ISharedStorageAccessManagerStatics<T>::RemoveFile(StringReference const & token) const
{
	check(shim()->abi_RemoveFile(get(token)));
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace DragDrop { namespace Core {

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageView impl_ICoreDragInfo<T>::Data() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageView value = nullptr;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DragDrop::DragDropModifiers impl_ICoreDragInfo<T>::Modifiers() const
{
	Windows::ApplicationModel::DataTransfer::DragDrop::DragDropModifiers value = {};
	check(shim()->get_Modifiers(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_ICoreDragInfo<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageOperation impl_ICoreDragInfo2<T>::AllowedOperations() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageOperation value = {};
	check(shim()->get_AllowedOperations(&value));
	return value;
}

template <typename T> void impl_ICoreDragUIOverride<T>::SetContentFromSoftwareBitmap(Windows::Graphics::Imaging::SoftwareBitmap const & softwareBitmap) const
{
	check(shim()->abi_SetContentFromSoftwareBitmap(get(softwareBitmap)));
}

template <typename T> void impl_ICoreDragUIOverride<T>::SetContentFromSoftwareBitmap(Windows::Graphics::Imaging::SoftwareBitmap const & softwareBitmap, Windows::Foundation::Point const & anchorPoint) const
{
	check(shim()->abi_SetContentFromSoftwareBitmapWithAnchorPoint(get(softwareBitmap), anchorPoint));
}

template <typename T> bool impl_ICoreDragUIOverride<T>::IsContentVisible() const
{
	bool value = {};
	check(shim()->get_IsContentVisible(put(value)));
	return value;
}

template <typename T> void impl_ICoreDragUIOverride<T>::IsContentVisible(bool const value) const
{
	check(shim()->put_IsContentVisible(value));
}

template <typename T> String impl_ICoreDragUIOverride<T>::Caption() const
{
	String value;
	check(shim()->get_Caption(put(value)));
	return value;
}

template <typename T> void impl_ICoreDragUIOverride<T>::Caption(StringReference const & value) const
{
	check(shim()->put_Caption(get(value)));
}

template <typename T> bool impl_ICoreDragUIOverride<T>::IsCaptionVisible() const
{
	bool value = {};
	check(shim()->get_IsCaptionVisible(put(value)));
	return value;
}

template <typename T> void impl_ICoreDragUIOverride<T>::IsCaptionVisible(bool const value) const
{
	check(shim()->put_IsCaptionVisible(value));
}

template <typename T> bool impl_ICoreDragUIOverride<T>::IsGlyphVisible() const
{
	bool value = {};
	check(shim()->get_IsGlyphVisible(put(value)));
	return value;
}

template <typename T> void impl_ICoreDragUIOverride<T>::IsGlyphVisible(bool const value) const
{
	check(shim()->put_IsGlyphVisible(value));
}

template <typename T> void impl_ICoreDragUIOverride<T>::Clear() const
{
	check(shim()->abi_Clear());
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::DataTransfer::DataPackageOperation> impl_ICoreDropOperationTarget<T>::EnterAsync(Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo const & dragInfo, Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride const & dragUIOverride) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::DataTransfer::DataPackageOperation> returnValue;
	check(shim()->abi_EnterAsync(get(dragInfo), get(dragUIOverride), put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::DataTransfer::DataPackageOperation> impl_ICoreDropOperationTarget<T>::OverAsync(Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo const & dragInfo, Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIOverride const & dragUIOverride) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::DataTransfer::DataPackageOperation> returnValue;
	check(shim()->abi_OverAsync(get(dragInfo), get(dragUIOverride), put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICoreDropOperationTarget<T>::LeaveAsync(Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo const & dragInfo) const
{
	Windows::Foundation::IAsyncAction returnValue;
	check(shim()->abi_LeaveAsync(get(dragInfo), put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::DataTransfer::DataPackageOperation> impl_ICoreDropOperationTarget<T>::DropAsync(Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragInfo const & dragInfo) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::DataTransfer::DataPackageOperation> returnValue;
	check(shim()->abi_DropAsync(get(dragInfo), put(returnValue)));
	return returnValue;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackage impl_ICoreDragOperation<T>::Data() const
{
	Windows::ApplicationModel::DataTransfer::DataPackage value = nullptr;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> void impl_ICoreDragOperation<T>::SetPointerId(unsigned const pointerId) const
{
	check(shim()->abi_SetPointerId(pointerId));
}

template <typename T> void impl_ICoreDragOperation<T>::SetDragUIContentFromSoftwareBitmap(Windows::Graphics::Imaging::SoftwareBitmap const & softwareBitmap) const
{
	check(shim()->abi_SetDragUIContentFromSoftwareBitmap(get(softwareBitmap)));
}

template <typename T> void impl_ICoreDragOperation<T>::SetDragUIContentFromSoftwareBitmap(Windows::Graphics::Imaging::SoftwareBitmap const & softwareBitmap, Windows::Foundation::Point const & anchorPoint) const
{
	check(shim()->abi_SetDragUIContentFromSoftwareBitmapWithAnchorPoint(get(softwareBitmap), anchorPoint));
}

template <typename T> Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIContentMode impl_ICoreDragOperation<T>::DragUIContentMode() const
{
	Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIContentMode value = {};
	check(shim()->get_DragUIContentMode(&value));
	return value;
}

template <typename T> void impl_ICoreDragOperation<T>::DragUIContentMode(Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragUIContentMode const value) const
{
	check(shim()->put_DragUIContentMode(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::DataTransfer::DataPackageOperation> impl_ICoreDragOperation<T>::StartAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::DataTransfer::DataPackageOperation> value;
	check(shim()->abi_StartAsync(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageOperation impl_ICoreDragOperation2<T>::AllowedOperations() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageOperation value = {};
	check(shim()->get_AllowedOperations(&value));
	return value;
}

template <typename T> void impl_ICoreDragOperation2<T>::AllowedOperations(Windows::ApplicationModel::DataTransfer::DataPackageOperation const value) const
{
	check(shim()->put_AllowedOperations(value));
}

template <typename T> Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager impl_ICoreDragDropManagerStatics<T>::GetForCurrentView() const
{
	Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager value = nullptr;
	check(shim()->abi_GetForCurrentView(put(value)));
	return value;
}

template <typename T> long long impl_ICoreDragDropManager<T>::TargetRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager, Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDropOperationTargetRequestedEventArgs> const & value) const
{
	long long returnValue = {};
	check(shim()->add_TargetRequested(get(value), &returnValue));
	return returnValue;
}

template <typename T> template <typename F> long long impl_ICoreDragDropManager<T>::TargetRequested(F value) const
{
	return TargetRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager, Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDropOperationTargetRequestedEventArgs>(value));
}

template <typename T> void impl_ICoreDragDropManager<T>::TargetRequested(long long const value) const
{
	check(shim()->remove_TargetRequested(value));
}

template <typename T> bool impl_ICoreDragDropManager<T>::AreConcurrentOperationsEnabled() const
{
	bool value = {};
	check(shim()->get_AreConcurrentOperationsEnabled(put(value)));
	return value;
}

template <typename T> void impl_ICoreDragDropManager<T>::AreConcurrentOperationsEnabled(bool const value) const
{
	check(shim()->put_AreConcurrentOperationsEnabled(value));
}

template <typename T> void impl_ICoreDropOperationTargetRequestedEventArgs<T>::SetTarget(Windows::ApplicationModel::DataTransfer::DragDrop::Core::ICoreDropOperationTarget const & target) const
{
	check(shim()->abi_SetTarget(get(target)));
}

}}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

template <typename T> String impl_IQuickLink<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IQuickLink<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IQuickLink<T>::Thumbnail() const
{
	Windows::Storage::Streams::RandomAccessStreamReference value = nullptr;
	check(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> void impl_IQuickLink<T>::Thumbnail(Windows::Storage::Streams::RandomAccessStreamReference const & value) const
{
	check(shim()->put_Thumbnail(get(value)));
}

template <typename T> String impl_IQuickLink<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_IQuickLink<T>::Id(StringReference const & value) const
{
	check(shim()->put_Id(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IQuickLink<T>::SupportedDataFormats() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_SupportedDataFormats(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IQuickLink<T>::SupportedFileTypes() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_SupportedFileTypes(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackageView impl_IShareOperation<T>::Data() const
{
	Windows::ApplicationModel::DataTransfer::DataPackageView value = nullptr;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> String impl_IShareOperation<T>::QuickLinkId() const
{
	String value;
	check(shim()->get_QuickLinkId(put(value)));
	return value;
}

template <typename T> void impl_IShareOperation<T>::RemoveThisQuickLink() const
{
	check(shim()->abi_RemoveThisQuickLink());
}

template <typename T> void impl_IShareOperation<T>::ReportStarted() const
{
	check(shim()->abi_ReportStarted());
}

template <typename T> void impl_IShareOperation<T>::ReportDataRetrieved() const
{
	check(shim()->abi_ReportDataRetrieved());
}

template <typename T> void impl_IShareOperation<T>::ReportSubmittedBackgroundTask() const
{
	check(shim()->abi_ReportSubmittedBackgroundTask());
}

template <typename T> void impl_IShareOperation<T>::ReportCompleted(Windows::ApplicationModel::DataTransfer::ShareTarget::QuickLink const & quicklink) const
{
	check(shim()->abi_ReportCompletedWithQuickLink(get(quicklink)));
}

template <typename T> void impl_IShareOperation<T>::ReportCompleted() const
{
	check(shim()->abi_ReportCompleted());
}

template <typename T> void impl_IShareOperation<T>::ReportError(StringReference const & value) const
{
	check(shim()->abi_ReportError(get(value)));
}

template <typename T> void impl_IShareOperation2<T>::DismissUI() const
{
	check(shim()->abi_DismissUI());
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Email {

template <typename T> Windows::Foundation::IAsyncAction impl_IEmailManagerStatics<T>::ShowComposeNewEmailAsync(Windows::ApplicationModel::Email::EmailMessage const & message) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check(shim()->abi_ShowComposeNewEmailAsync(get(message), put(asyncAction)));
	return asyncAction;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailStore> impl_IEmailManagerStatics2<T>::RequestStoreAsync(Windows::ApplicationModel::Email::EmailStoreAccessType const accessType) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailStore> result;
	check(shim()->abi_RequestStoreAsync(accessType, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailMailbox>> impl_IEmailStore<T>::FindMailboxesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailMailbox>> result;
	check(shim()->abi_FindMailboxesAsync(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailConversationReader impl_IEmailStore<T>::GetConversationReader() const
{
	Windows::ApplicationModel::Email::EmailConversationReader result = nullptr;
	check(shim()->abi_GetConversationReader(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailConversationReader impl_IEmailStore<T>::GetConversationReader(Windows::ApplicationModel::Email::EmailQueryOptions const & options) const
{
	Windows::ApplicationModel::Email::EmailConversationReader result = nullptr;
	check(shim()->abi_GetConversationReaderWithOptions(get(options), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailMessageReader impl_IEmailStore<T>::GetMessageReader() const
{
	Windows::ApplicationModel::Email::EmailMessageReader result = nullptr;
	check(shim()->abi_GetMessageReader(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailMessageReader impl_IEmailStore<T>::GetMessageReader(Windows::ApplicationModel::Email::EmailQueryOptions const & options) const
{
	Windows::ApplicationModel::Email::EmailMessageReader result = nullptr;
	check(shim()->abi_GetMessageReaderWithOptions(get(options), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMailbox> impl_IEmailStore<T>::GetMailboxAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMailbox> result;
	check(shim()->abi_GetMailboxAsync(get(id), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailConversation> impl_IEmailStore<T>::GetConversationAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailConversation> result;
	check(shim()->abi_GetConversationAsync(get(id), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailFolder> impl_IEmailStore<T>::GetFolderAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailFolder> result;
	check(shim()->abi_GetFolderAsync(get(id), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMessage> impl_IEmailStore<T>::GetMessageAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMessage> result;
	check(shim()->abi_GetMessageAsync(get(id), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMailbox> impl_IEmailStore<T>::CreateMailboxAsync(StringReference const & accountName, StringReference const & accountAddress) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMailbox> result;
	check(shim()->abi_CreateMailboxAsync(get(accountName), get(accountAddress), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMailbox> impl_IEmailStore<T>::CreateMailboxAsync(StringReference const & accountName, StringReference const & accountAddress, StringReference const & userDataAccountId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMailbox> result;
	check(shim()->abi_CreateMailboxInAccountAsync(get(accountName), get(accountAddress), get(userDataAccountId), put(result)));
	return result;
}

template <typename T> String impl_IEmailRecipient<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IEmailRecipient<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> String impl_IEmailRecipient<T>::Address() const
{
	String value;
	check(shim()->get_Address(put(value)));
	return value;
}

template <typename T> void impl_IEmailRecipient<T>::Address(StringReference const & value) const
{
	check(shim()->put_Address(get(value)));
}

template <typename T> Windows::ApplicationModel::Email::EmailRecipient impl_IEmailRecipientFactory<T>::Create(StringReference const & address) const
{
	Windows::ApplicationModel::Email::EmailRecipient result = nullptr;
	check(shim()->abi_Create(get(address), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailRecipient impl_IEmailRecipientFactory<T>::CreateWithName(StringReference const & address, StringReference const & name) const
{
	Windows::ApplicationModel::Email::EmailRecipient result = nullptr;
	check(shim()->abi_CreateWithName(get(address), get(name), put(result)));
	return result;
}

template <typename T> String impl_IEmailIrmTemplate<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_IEmailIrmTemplate<T>::Id(StringReference const & value) const
{
	check(shim()->put_Id(get(value)));
}

template <typename T> String impl_IEmailIrmTemplate<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IEmailIrmTemplate<T>::Description(StringReference const & value) const
{
	check(shim()->put_Description(get(value)));
}

template <typename T> String impl_IEmailIrmTemplate<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IEmailIrmTemplate<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> Windows::ApplicationModel::Email::EmailIrmTemplate impl_IEmailIrmTemplateFactory<T>::Create(StringReference const & id, StringReference const & name, StringReference const & description) const
{
	Windows::ApplicationModel::Email::EmailIrmTemplate result = nullptr;
	check(shim()->abi_Create(get(id), get(name), get(description), put(result)));
	return result;
}

template <typename T> bool impl_IEmailIrmInfo<T>::CanEdit() const
{
	bool value = {};
	check(shim()->get_CanEdit(put(value)));
	return value;
}

template <typename T> void impl_IEmailIrmInfo<T>::CanEdit(bool const value) const
{
	check(shim()->put_CanEdit(value));
}

template <typename T> bool impl_IEmailIrmInfo<T>::CanExtractData() const
{
	bool value = {};
	check(shim()->get_CanExtractData(put(value)));
	return value;
}

template <typename T> void impl_IEmailIrmInfo<T>::CanExtractData(bool const value) const
{
	check(shim()->put_CanExtractData(value));
}

template <typename T> bool impl_IEmailIrmInfo<T>::CanForward() const
{
	bool value = {};
	check(shim()->get_CanForward(put(value)));
	return value;
}

template <typename T> void impl_IEmailIrmInfo<T>::CanForward(bool const value) const
{
	check(shim()->put_CanForward(value));
}

template <typename T> bool impl_IEmailIrmInfo<T>::CanModifyRecipientsOnResponse() const
{
	bool value = {};
	check(shim()->get_CanModifyRecipientsOnResponse(put(value)));
	return value;
}

template <typename T> void impl_IEmailIrmInfo<T>::CanModifyRecipientsOnResponse(bool const value) const
{
	check(shim()->put_CanModifyRecipientsOnResponse(value));
}

template <typename T> bool impl_IEmailIrmInfo<T>::CanPrintData() const
{
	bool value = {};
	check(shim()->get_CanPrintData(put(value)));
	return value;
}

template <typename T> void impl_IEmailIrmInfo<T>::CanPrintData(bool const value) const
{
	check(shim()->put_CanPrintData(value));
}

template <typename T> bool impl_IEmailIrmInfo<T>::CanRemoveIrmOnResponse() const
{
	bool value = {};
	check(shim()->get_CanRemoveIrmOnResponse(put(value)));
	return value;
}

template <typename T> void impl_IEmailIrmInfo<T>::CanRemoveIrmOnResponse(bool const value) const
{
	check(shim()->put_CanRemoveIrmOnResponse(value));
}

template <typename T> bool impl_IEmailIrmInfo<T>::CanReply() const
{
	bool value = {};
	check(shim()->get_CanReply(put(value)));
	return value;
}

template <typename T> void impl_IEmailIrmInfo<T>::CanReply(bool const value) const
{
	check(shim()->put_CanReply(value));
}

template <typename T> bool impl_IEmailIrmInfo<T>::CanReplyAll() const
{
	bool value = {};
	check(shim()->get_CanReplyAll(put(value)));
	return value;
}

template <typename T> void impl_IEmailIrmInfo<T>::CanReplyAll(bool const value) const
{
	check(shim()->put_CanReplyAll(value));
}

template <typename T> Windows::Foundation::DateTime impl_IEmailIrmInfo<T>::ExpirationDate() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_ExpirationDate(&value));
	return value;
}

template <typename T> void impl_IEmailIrmInfo<T>::ExpirationDate(Windows::Foundation::DateTime const & value) const
{
	check(shim()->put_ExpirationDate(value));
}

template <typename T> bool impl_IEmailIrmInfo<T>::IsIrmOriginator() const
{
	bool value = {};
	check(shim()->get_IsIrmOriginator(put(value)));
	return value;
}

template <typename T> void impl_IEmailIrmInfo<T>::IsIrmOriginator(bool const value) const
{
	check(shim()->put_IsIrmOriginator(value));
}

template <typename T> bool impl_IEmailIrmInfo<T>::IsProgramaticAccessAllowed() const
{
	bool value = {};
	check(shim()->get_IsProgramaticAccessAllowed(put(value)));
	return value;
}

template <typename T> void impl_IEmailIrmInfo<T>::IsProgramaticAccessAllowed(bool const value) const
{
	check(shim()->put_IsProgramaticAccessAllowed(value));
}

template <typename T> Windows::ApplicationModel::Email::EmailIrmTemplate impl_IEmailIrmInfo<T>::Template() const
{
	Windows::ApplicationModel::Email::EmailIrmTemplate value = nullptr;
	check(shim()->get_Template(put(value)));
	return value;
}

template <typename T> void impl_IEmailIrmInfo<T>::Template(Windows::ApplicationModel::Email::EmailIrmTemplate const & value) const
{
	check(shim()->put_Template(get(value)));
}

template <typename T> Windows::ApplicationModel::Email::EmailIrmInfo impl_IEmailIrmInfoFactory<T>::Create(Windows::Foundation::DateTime const & expiration, Windows::ApplicationModel::Email::EmailIrmTemplate const & irmTemplate) const
{
	Windows::ApplicationModel::Email::EmailIrmInfo result = nullptr;
	check(shim()->abi_Create(expiration, get(irmTemplate), put(result)));
	return result;
}

template <typename T> String impl_IEmailMessage<T>::Subject() const
{
	String value;
	check(shim()->get_Subject(put(value)));
	return value;
}

template <typename T> void impl_IEmailMessage<T>::Subject(StringReference const & value) const
{
	check(shim()->put_Subject(get(value)));
}

template <typename T> String impl_IEmailMessage<T>::Body() const
{
	String value;
	check(shim()->get_Body(put(value)));
	return value;
}

template <typename T> void impl_IEmailMessage<T>::Body(StringReference const & value) const
{
	check(shim()->put_Body(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Email::EmailRecipient> impl_IEmailMessage<T>::To() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Email::EmailRecipient> value;
	check(shim()->get_To(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Email::EmailRecipient> impl_IEmailMessage<T>::CC() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Email::EmailRecipient> value;
	check(shim()->get_CC(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Email::EmailRecipient> impl_IEmailMessage<T>::Bcc() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Email::EmailRecipient> value;
	check(shim()->get_Bcc(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Email::EmailAttachment> impl_IEmailMessage<T>::Attachments() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Email::EmailAttachment> value;
	check(shim()->get_Attachments(put(value)));
	return value;
}

template <typename T> String impl_IEmailMessage2<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IEmailMessage2<T>::RemoteId() const
{
	String value;
	check(shim()->get_RemoteId(put(value)));
	return value;
}

template <typename T> void impl_IEmailMessage2<T>::RemoteId(StringReference const & value) const
{
	check(shim()->put_RemoteId(get(value)));
}

template <typename T> String impl_IEmailMessage2<T>::MailboxId() const
{
	String value;
	check(shim()->get_MailboxId(put(value)));
	return value;
}

template <typename T> String impl_IEmailMessage2<T>::ConversationId() const
{
	String value;
	check(shim()->get_ConversationId(put(value)));
	return value;
}

template <typename T> String impl_IEmailMessage2<T>::FolderId() const
{
	String value;
	check(shim()->get_FolderId(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMessage2<T>::AllowInternetImages() const
{
	bool value = {};
	check(shim()->get_AllowInternetImages(put(value)));
	return value;
}

template <typename T> void impl_IEmailMessage2<T>::AllowInternetImages(bool const value) const
{
	check(shim()->put_AllowInternetImages(value));
}

template <typename T> unsigned long long impl_IEmailMessage2<T>::ChangeNumber() const
{
	unsigned long long value = {};
	check(shim()->get_ChangeNumber(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailMessageDownloadState impl_IEmailMessage2<T>::DownloadState() const
{
	Windows::ApplicationModel::Email::EmailMessageDownloadState value = {};
	check(shim()->get_DownloadState(&value));
	return value;
}

template <typename T> void impl_IEmailMessage2<T>::DownloadState(Windows::ApplicationModel::Email::EmailMessageDownloadState const value) const
{
	check(shim()->put_DownloadState(value));
}

template <typename T> unsigned impl_IEmailMessage2<T>::EstimatedDownloadSizeInBytes() const
{
	unsigned value = {};
	check(shim()->get_EstimatedDownloadSizeInBytes(&value));
	return value;
}

template <typename T> void impl_IEmailMessage2<T>::EstimatedDownloadSizeInBytes(unsigned const value) const
{
	check(shim()->put_EstimatedDownloadSizeInBytes(value));
}

template <typename T> Windows::ApplicationModel::Email::EmailFlagState impl_IEmailMessage2<T>::FlagState() const
{
	Windows::ApplicationModel::Email::EmailFlagState value = {};
	check(shim()->get_FlagState(&value));
	return value;
}

template <typename T> void impl_IEmailMessage2<T>::FlagState(Windows::ApplicationModel::Email::EmailFlagState const value) const
{
	check(shim()->put_FlagState(value));
}

template <typename T> bool impl_IEmailMessage2<T>::HasPartialBodies() const
{
	bool value = {};
	check(shim()->get_HasPartialBodies(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailImportance impl_IEmailMessage2<T>::Importance() const
{
	Windows::ApplicationModel::Email::EmailImportance value = {};
	check(shim()->get_Importance(&value));
	return value;
}

template <typename T> void impl_IEmailMessage2<T>::Importance(Windows::ApplicationModel::Email::EmailImportance const value) const
{
	check(shim()->put_Importance(value));
}

template <typename T> String impl_IEmailMessage2<T>::InResponseToMessageId() const
{
	String value;
	check(shim()->get_InResponseToMessageId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailIrmInfo impl_IEmailMessage2<T>::IrmInfo() const
{
	Windows::ApplicationModel::Email::EmailIrmInfo value = nullptr;
	check(shim()->get_IrmInfo(put(value)));
	return value;
}

template <typename T> void impl_IEmailMessage2<T>::IrmInfo(Windows::ApplicationModel::Email::EmailIrmInfo const & value) const
{
	check(shim()->put_IrmInfo(get(value)));
}

template <typename T> bool impl_IEmailMessage2<T>::IsDraftMessage() const
{
	bool value = {};
	check(shim()->get_IsDraftMessage(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMessage2<T>::IsRead() const
{
	bool value = {};
	check(shim()->get_IsRead(put(value)));
	return value;
}

template <typename T> void impl_IEmailMessage2<T>::IsRead(bool const value) const
{
	check(shim()->put_IsRead(value));
}

template <typename T> bool impl_IEmailMessage2<T>::IsSeen() const
{
	bool value = {};
	check(shim()->get_IsSeen(put(value)));
	return value;
}

template <typename T> void impl_IEmailMessage2<T>::IsSeen(bool const value) const
{
	check(shim()->put_IsSeen(value));
}

template <typename T> bool impl_IEmailMessage2<T>::IsServerSearchMessage() const
{
	bool value = {};
	check(shim()->get_IsServerSearchMessage(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMessage2<T>::IsSmartSendable() const
{
	bool value = {};
	check(shim()->get_IsSmartSendable(put(value)));
	return value;
}

template <typename T> String impl_IEmailMessage2<T>::MessageClass() const
{
	String value;
	check(shim()->get_MessageClass(put(value)));
	return value;
}

template <typename T> void impl_IEmailMessage2<T>::MessageClass(StringReference const & value) const
{
	check(shim()->put_MessageClass(get(value)));
}

template <typename T> String impl_IEmailMessage2<T>::NormalizedSubject() const
{
	String value;
	check(shim()->get_NormalizedSubject(put(value)));
	return value;
}

template <typename T> int impl_IEmailMessage2<T>::OriginalCodePage() const
{
	int value = {};
	check(shim()->get_OriginalCodePage(&value));
	return value;
}

template <typename T> void impl_IEmailMessage2<T>::OriginalCodePage(int const value) const
{
	check(shim()->put_OriginalCodePage(value));
}

template <typename T> String impl_IEmailMessage2<T>::Preview() const
{
	String value;
	check(shim()->get_Preview(put(value)));
	return value;
}

template <typename T> void impl_IEmailMessage2<T>::Preview(StringReference const & value) const
{
	check(shim()->put_Preview(get(value)));
}

template <typename T> Windows::ApplicationModel::Email::EmailMessageResponseKind impl_IEmailMessage2<T>::LastResponseKind() const
{
	Windows::ApplicationModel::Email::EmailMessageResponseKind value = {};
	check(shim()->get_LastResponseKind(&value));
	return value;
}

template <typename T> void impl_IEmailMessage2<T>::LastResponseKind(Windows::ApplicationModel::Email::EmailMessageResponseKind const value) const
{
	check(shim()->put_LastResponseKind(value));
}

template <typename T> Windows::ApplicationModel::Email::EmailRecipient impl_IEmailMessage2<T>::Sender() const
{
	Windows::ApplicationModel::Email::EmailRecipient value = nullptr;
	check(shim()->get_Sender(put(value)));
	return value;
}

template <typename T> void impl_IEmailMessage2<T>::Sender(Windows::ApplicationModel::Email::EmailRecipient const & value) const
{
	check(shim()->put_Sender(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IEmailMessage2<T>::SentTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_SentTime(put(value)));
	return value;
}

template <typename T> void impl_IEmailMessage2<T>::SentTime(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_SentTime(get(value)));
}

template <typename T> Windows::ApplicationModel::Email::EmailMeetingInfo impl_IEmailMessage2<T>::MeetingInfo() const
{
	Windows::ApplicationModel::Email::EmailMeetingInfo value = nullptr;
	check(shim()->get_MeetingInfo(put(value)));
	return value;
}

template <typename T> void impl_IEmailMessage2<T>::MeetingInfo(Windows::ApplicationModel::Email::EmailMeetingInfo const & value) const
{
	check(shim()->put_MeetingInfo(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IEmailMessage2<T>::GetBodyStream(Windows::ApplicationModel::Email::EmailMessageBodyKind const type) const
{
	Windows::Storage::Streams::IRandomAccessStreamReference result;
	check(shim()->abi_GetBodyStream(type, put(result)));
	return result;
}

template <typename T> void impl_IEmailMessage2<T>::SetBodyStream(Windows::ApplicationModel::Email::EmailMessageBodyKind const type, Windows::Storage::Streams::IRandomAccessStreamReference const & stream) const
{
	check(shim()->abi_SetBodyStream(type, get(stream)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IEmailMessage3<T>::SmimeData() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_SmimeData(put(value)));
	return value;
}

template <typename T> void impl_IEmailMessage3<T>::SmimeData(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_SmimeData(get(value)));
}

template <typename T> Windows::ApplicationModel::Email::EmailMessageSmimeKind impl_IEmailMessage3<T>::SmimeKind() const
{
	Windows::ApplicationModel::Email::EmailMessageSmimeKind value = {};
	check(shim()->get_SmimeKind(&value));
	return value;
}

template <typename T> void impl_IEmailMessage3<T>::SmimeKind(Windows::ApplicationModel::Email::EmailMessageSmimeKind const value) const
{
	check(shim()->put_SmimeKind(value));
}

template <typename T> String impl_IEmailAttachment<T>::FileName() const
{
	String value;
	check(shim()->get_FileName(put(value)));
	return value;
}

template <typename T> void impl_IEmailAttachment<T>::FileName(StringReference const & value) const
{
	check(shim()->put_FileName(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IEmailAttachment<T>::Data() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> void impl_IEmailAttachment<T>::Data(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_Data(get(value)));
}

template <typename T> String impl_IEmailAttachment2<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IEmailAttachment2<T>::ContentId() const
{
	String value;
	check(shim()->get_ContentId(put(value)));
	return value;
}

template <typename T> void impl_IEmailAttachment2<T>::ContentId(StringReference const & value) const
{
	check(shim()->put_ContentId(get(value)));
}

template <typename T> String impl_IEmailAttachment2<T>::ContentLocation() const
{
	String value;
	check(shim()->get_ContentLocation(put(value)));
	return value;
}

template <typename T> void impl_IEmailAttachment2<T>::ContentLocation(StringReference const & value) const
{
	check(shim()->put_ContentLocation(get(value)));
}

template <typename T> Windows::ApplicationModel::Email::EmailAttachmentDownloadState impl_IEmailAttachment2<T>::DownloadState() const
{
	Windows::ApplicationModel::Email::EmailAttachmentDownloadState value = {};
	check(shim()->get_DownloadState(&value));
	return value;
}

template <typename T> void impl_IEmailAttachment2<T>::DownloadState(Windows::ApplicationModel::Email::EmailAttachmentDownloadState const value) const
{
	check(shim()->put_DownloadState(value));
}

template <typename T> unsigned long long impl_IEmailAttachment2<T>::EstimatedDownloadSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_EstimatedDownloadSizeInBytes(&value));
	return value;
}

template <typename T> void impl_IEmailAttachment2<T>::EstimatedDownloadSizeInBytes(unsigned long long const value) const
{
	check(shim()->put_EstimatedDownloadSizeInBytes(value));
}

template <typename T> bool impl_IEmailAttachment2<T>::IsFromBaseMessage() const
{
	bool value = {};
	check(shim()->get_IsFromBaseMessage(put(value)));
	return value;
}

template <typename T> bool impl_IEmailAttachment2<T>::IsInline() const
{
	bool value = {};
	check(shim()->get_IsInline(put(value)));
	return value;
}

template <typename T> void impl_IEmailAttachment2<T>::IsInline(bool const value) const
{
	check(shim()->put_IsInline(value));
}

template <typename T> String impl_IEmailAttachment2<T>::MimeType() const
{
	String value;
	check(shim()->get_MimeType(put(value)));
	return value;
}

template <typename T> void impl_IEmailAttachment2<T>::MimeType(StringReference const & value) const
{
	check(shim()->put_MimeType(get(value)));
}

template <typename T> Windows::ApplicationModel::Email::EmailAttachment impl_IEmailAttachmentFactory<T>::Create(StringReference const & fileName, Windows::Storage::Streams::IRandomAccessStreamReference const & data) const
{
	Windows::ApplicationModel::Email::EmailAttachment result = nullptr;
	check(shim()->abi_Create(get(fileName), get(data), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailAttachment impl_IEmailAttachmentFactory2<T>::Create(StringReference const & fileName, Windows::Storage::Streams::IRandomAccessStreamReference const & data, StringReference const & mimeType) const
{
	Windows::ApplicationModel::Email::EmailAttachment result = nullptr;
	check(shim()->abi_Create(get(fileName), get(data), get(mimeType), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxChangedDeferral impl_IEmailMailboxChangedEventArgs<T>::GetDeferral() const
{
	Windows::ApplicationModel::Email::EmailMailboxChangedDeferral result = nullptr;
	check(shim()->abi_GetDeferral(put(result)));
	return result;
}

template <typename T> void impl_IEmailMailboxChangedDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxAllowedSmimeEncryptionAlgorithmNegotiation impl_IEmailMailboxPolicies<T>::AllowedSmimeEncryptionAlgorithmNegotiation() const
{
	Windows::ApplicationModel::Email::EmailMailboxAllowedSmimeEncryptionAlgorithmNegotiation value = {};
	check(shim()->get_AllowedSmimeEncryptionAlgorithmNegotiation(&value));
	return value;
}

template <typename T> bool impl_IEmailMailboxPolicies<T>::AllowSmimeSoftCertificates() const
{
	bool value = {};
	check(shim()->get_AllowSmimeSoftCertificates(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::ApplicationModel::Email::EmailMailboxSmimeEncryptionAlgorithm> impl_IEmailMailboxPolicies<T>::RequiredSmimeEncryptionAlgorithm() const
{
	Windows::Foundation::IReference<winrt::Windows::ApplicationModel::Email::EmailMailboxSmimeEncryptionAlgorithm> value;
	check(shim()->get_RequiredSmimeEncryptionAlgorithm(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::ApplicationModel::Email::EmailMailboxSmimeSigningAlgorithm> impl_IEmailMailboxPolicies<T>::RequiredSmimeSigningAlgorithm() const
{
	Windows::Foundation::IReference<winrt::Windows::ApplicationModel::Email::EmailMailboxSmimeSigningAlgorithm> value;
	check(shim()->get_RequiredSmimeSigningAlgorithm(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxPolicies2<T>::MustEncryptSmimeMessages() const
{
	bool value = {};
	check(shim()->get_MustEncryptSmimeMessages(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxPolicies2<T>::MustSignSmimeMessages() const
{
	bool value = {};
	check(shim()->get_MustSignSmimeMessages(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxCapabilities<T>::CanForwardMeetings() const
{
	bool value = {};
	check(shim()->get_CanForwardMeetings(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxCapabilities<T>::CanGetAndSetExternalAutoReplies() const
{
	bool value = {};
	check(shim()->get_CanGetAndSetExternalAutoReplies(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxCapabilities<T>::CanGetAndSetInternalAutoReplies() const
{
	bool value = {};
	check(shim()->get_CanGetAndSetInternalAutoReplies(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxCapabilities<T>::CanUpdateMeetingResponses() const
{
	bool value = {};
	check(shim()->get_CanUpdateMeetingResponses(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxCapabilities<T>::CanServerSearchFolders() const
{
	bool value = {};
	check(shim()->get_CanServerSearchFolders(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxCapabilities<T>::CanServerSearchMailbox() const
{
	bool value = {};
	check(shim()->get_CanServerSearchMailbox(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxCapabilities<T>::CanProposeNewTimeForMeetings() const
{
	bool value = {};
	check(shim()->get_CanProposeNewTimeForMeetings(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxCapabilities<T>::CanSmartSend() const
{
	bool value = {};
	check(shim()->get_CanSmartSend(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxCapabilities2<T>::CanResolveRecipients() const
{
	bool value = {};
	check(shim()->get_CanResolveRecipients(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxCapabilities2<T>::CanValidateCertificates() const
{
	bool value = {};
	check(shim()->get_CanValidateCertificates(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxCapabilities2<T>::CanEmptyFolder() const
{
	bool value = {};
	check(shim()->get_CanEmptyFolder(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxCapabilities2<T>::CanCreateFolder() const
{
	bool value = {};
	check(shim()->get_CanCreateFolder(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxCapabilities2<T>::CanDeleteFolder() const
{
	bool value = {};
	check(shim()->get_CanDeleteFolder(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxCapabilities2<T>::CanMoveFolder() const
{
	bool value = {};
	check(shim()->get_CanMoveFolder(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxCapabilities impl_IEmailMailbox<T>::Capabilities() const
{
	Windows::ApplicationModel::Email::EmailMailboxCapabilities value = nullptr;
	check(shim()->get_Capabilities(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxChangeTracker impl_IEmailMailbox<T>::ChangeTracker() const
{
	Windows::ApplicationModel::Email::EmailMailboxChangeTracker value = nullptr;
	check(shim()->get_ChangeTracker(put(value)));
	return value;
}

template <typename T> String impl_IEmailMailbox<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IEmailMailbox<T>::DisplayName(StringReference const & value) const
{
	check(shim()->put_DisplayName(get(value)));
}

template <typename T> String impl_IEmailMailbox<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailbox<T>::IsOwnedByCurrentApp() const
{
	bool value = {};
	check(shim()->get_IsOwnedByCurrentApp(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailbox<T>::IsDataEncryptedUnderLock() const
{
	bool value = {};
	check(shim()->get_IsDataEncryptedUnderLock(put(value)));
	return value;
}

template <typename T> String impl_IEmailMailbox<T>::MailAddress() const
{
	String value;
	check(shim()->get_MailAddress(put(value)));
	return value;
}

template <typename T> void impl_IEmailMailbox<T>::MailAddress(StringReference const & value) const
{
	check(shim()->put_MailAddress(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IEmailMailbox<T>::MailAddressAliases() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_MailAddressAliases(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxOtherAppReadAccess impl_IEmailMailbox<T>::OtherAppReadAccess() const
{
	Windows::ApplicationModel::Email::EmailMailboxOtherAppReadAccess value = {};
	check(shim()->get_OtherAppReadAccess(&value));
	return value;
}

template <typename T> void impl_IEmailMailbox<T>::OtherAppReadAccess(Windows::ApplicationModel::Email::EmailMailboxOtherAppReadAccess const value) const
{
	check(shim()->put_OtherAppReadAccess(value));
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxOtherAppWriteAccess impl_IEmailMailbox<T>::OtherAppWriteAccess() const
{
	Windows::ApplicationModel::Email::EmailMailboxOtherAppWriteAccess value = {};
	check(shim()->get_OtherAppWriteAccess(&value));
	return value;
}

template <typename T> void impl_IEmailMailbox<T>::OtherAppWriteAccess(Windows::ApplicationModel::Email::EmailMailboxOtherAppWriteAccess const value) const
{
	check(shim()->put_OtherAppWriteAccess(value));
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxPolicies impl_IEmailMailbox<T>::Policies() const
{
	Windows::ApplicationModel::Email::EmailMailboxPolicies value = nullptr;
	check(shim()->get_Policies(put(value)));
	return value;
}

template <typename T> String impl_IEmailMailbox<T>::SourceDisplayName() const
{
	String value;
	check(shim()->get_SourceDisplayName(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxSyncManager impl_IEmailMailbox<T>::SyncManager() const
{
	Windows::ApplicationModel::Email::EmailMailboxSyncManager value = nullptr;
	check(shim()->get_SyncManager(put(value)));
	return value;
}

template <typename T> String impl_IEmailMailbox<T>::UserDataAccountId() const
{
	String value;
	check(shim()->get_UserDataAccountId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailConversationReader impl_IEmailMailbox<T>::GetConversationReader() const
{
	Windows::ApplicationModel::Email::EmailConversationReader result = nullptr;
	check(shim()->abi_GetConversationReader(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailConversationReader impl_IEmailMailbox<T>::GetConversationReader(Windows::ApplicationModel::Email::EmailQueryOptions const & options) const
{
	Windows::ApplicationModel::Email::EmailConversationReader result = nullptr;
	check(shim()->abi_GetConversationReaderWithOptions(get(options), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailMessageReader impl_IEmailMailbox<T>::GetMessageReader() const
{
	Windows::ApplicationModel::Email::EmailMessageReader result = nullptr;
	check(shim()->abi_GetMessageReader(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailMessageReader impl_IEmailMailbox<T>::GetMessageReader(Windows::ApplicationModel::Email::EmailQueryOptions const & options) const
{
	Windows::ApplicationModel::Email::EmailMessageReader result = nullptr;
	check(shim()->abi_GetMessageReaderWithOptions(get(options), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IEmailMailbox<T>::DeleteAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_DeleteAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailConversation> impl_IEmailMailbox<T>::GetConversationAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailConversation> result;
	check(shim()->abi_GetConversationAsync(get(id), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailFolder> impl_IEmailMailbox<T>::GetFolderAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailFolder> result;
	check(shim()->abi_GetFolderAsync(get(id), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMessage> impl_IEmailMailbox<T>::GetMessageAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMessage> result;
	check(shim()->abi_GetMessageAsync(get(id), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailFolder> impl_IEmailMailbox<T>::GetSpecialFolderAsync(Windows::ApplicationModel::Email::EmailSpecialFolderKind const folderType) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailFolder> result;
	check(shim()->abi_GetSpecialFolderAsync(folderType, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IEmailMailbox<T>::SaveAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_SaveAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IEmailMailbox<T>::MarkMessageAsSeenAsync(StringReference const & messageId) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_MarkMessageAsSeenAsync(get(messageId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IEmailMailbox<T>::MarkFolderAsSeenAsync(StringReference const & folderId) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_MarkFolderAsSeenAsync(get(folderId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IEmailMailbox<T>::MarkMessageReadAsync(StringReference const & messageId, bool const isRead) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_MarkMessageReadAsync(get(messageId), isRead, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IEmailMailbox<T>::ChangeMessageFlagStateAsync(StringReference const & messageId, Windows::ApplicationModel::Email::EmailFlagState const flagState) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_ChangeMessageFlagStateAsync(get(messageId), flagState, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IEmailMailbox<T>::TryMoveMessageAsync(StringReference const & messageId, StringReference const & newParentFolderId) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TryMoveMessageAsync(get(messageId), get(newParentFolderId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IEmailMailbox<T>::TryMoveFolderAsync(StringReference const & folderId, StringReference const & newParentFolderId) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TryMoveFolderAsync(get(folderId), get(newParentFolderId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IEmailMailbox<T>::TryMoveFolderAsync(StringReference const & folderId, StringReference const & newParentFolderId, StringReference const & newFolderName) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TryMoveFolderWithNewNameAsync(get(folderId), get(newParentFolderId), get(newFolderName), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IEmailMailbox<T>::DeleteMessageAsync(StringReference const & messageId) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_DeleteMessageAsync(get(messageId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IEmailMailbox<T>::MarkFolderSyncEnabledAsync(StringReference const & folderId, bool const isSyncEnabled) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_MarkFolderSyncEnabledAsync(get(folderId), isSyncEnabled, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IEmailMailbox<T>::SendMessageAsync(Windows::ApplicationModel::Email::EmailMessage const & message) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_SendMessageAsync(get(message), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IEmailMailbox<T>::SaveDraftAsync(Windows::ApplicationModel::Email::EmailMessage const & message) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_SaveDraftAsync(get(message), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IEmailMailbox<T>::DownloadMessageAsync(StringReference const & messageId) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_DownloadMessageAsync(get(messageId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IEmailMailbox<T>::DownloadAttachmentAsync(StringReference const & attachmentId) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_DownloadAttachmentAsync(get(attachmentId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMessage> impl_IEmailMailbox<T>::CreateResponseMessageAsync(StringReference const & messageId, Windows::ApplicationModel::Email::EmailMessageResponseKind const responseType, StringReference const & subject, Windows::ApplicationModel::Email::EmailMessageBodyKind const responseHeaderType, StringReference const & responseHeader) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMessage> result;
	check(shim()->abi_CreateResponseMessageAsync(get(messageId), responseType, get(subject), responseHeaderType, get(responseHeader), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IEmailMailbox<T>::TryUpdateMeetingResponseAsync(Windows::ApplicationModel::Email::EmailMessage const & meeting, Windows::ApplicationModel::Email::EmailMeetingResponseType const response, StringReference const & subject, StringReference const & comment, bool const sendUpdate) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TryUpdateMeetingResponseAsync(get(meeting), response, get(subject), get(comment), sendUpdate, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IEmailMailbox<T>::TryForwardMeetingAsync(Windows::ApplicationModel::Email::EmailMessage const & meeting, Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Email::EmailRecipient> const & recipients, StringReference const & subject, Windows::ApplicationModel::Email::EmailMessageBodyKind const forwardHeaderType, StringReference const & forwardHeader, StringReference const & comment) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TryForwardMeetingAsync(get(meeting), get(recipients), get(subject), forwardHeaderType, get(forwardHeader), get(comment), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IEmailMailbox<T>::TryProposeNewTimeForMeetingAsync(Windows::ApplicationModel::Email::EmailMessage const & meeting, Windows::Foundation::DateTime const & newStartTime, Windows::Foundation::TimeSpan const & newDuration, StringReference const & subject, StringReference const & comment) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TryProposeNewTimeForMeetingAsync(get(meeting), newStartTime, newDuration, get(subject), get(comment), put(result)));
	return result;
}

template <typename T> long long impl_IEmailMailbox<T>::MailboxChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Email::EmailMailbox, Windows::ApplicationModel::Email::EmailMailboxChangedEventArgs> const & pHandler) const
{
	long long pToken = {};
	check(shim()->add_MailboxChanged(get(pHandler), &pToken));
	return pToken;
}

template <typename T> template <typename F> long long impl_IEmailMailbox<T>::MailboxChanged(F pHandler) const
{
	return MailboxChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Email::EmailMailbox, Windows::ApplicationModel::Email::EmailMailboxChangedEventArgs>(pHandler));
}

template <typename T> void impl_IEmailMailbox<T>::MailboxChanged(long long const token) const
{
	check(shim()->remove_MailboxChanged(token));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IEmailMailbox<T>::SendMessageAsync(Windows::ApplicationModel::Email::EmailMessage const & message, bool const smartSend) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_SmartSendMessageAsync(get(message), smartSend, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IEmailMailbox<T>::TrySetAutoReplySettingsAsync(Windows::ApplicationModel::Email::EmailMailboxAutoReplySettings const & autoReplySettings) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TrySetAutoReplySettingsAsync(get(autoReplySettings), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMailboxAutoReplySettings> impl_IEmailMailbox<T>::TryGetAutoReplySettingsAsync(Windows::ApplicationModel::Email::EmailMailboxAutoReplyMessageResponseKind const requestedFormat) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMailboxAutoReplySettings> autoReplySettings;
	check(shim()->abi_TryGetAutoReplySettingsAsync(requestedFormat, put(autoReplySettings)));
	return autoReplySettings;
}

template <typename T> String impl_IEmailMailbox2<T>::LinkedMailboxId() const
{
	String value;
	check(shim()->get_LinkedMailboxId(put(value)));
	return value;
}

template <typename T> String impl_IEmailMailbox2<T>::NetworkAccountId() const
{
	String value;
	check(shim()->get_NetworkAccountId(put(value)));
	return value;
}

template <typename T> String impl_IEmailMailbox2<T>::NetworkId() const
{
	String value;
	check(shim()->get_NetworkId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailRecipientResolutionResult>> impl_IEmailMailbox3<T>::ResolveRecipientsAsync(Windows::Foundation::Collections::IIterable<String> const & recipients) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailRecipientResolutionResult>> result;
	check(shim()->abi_ResolveRecipientsAsync(get(recipients), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<winrt::Windows::ApplicationModel::Email::EmailCertificateValidationStatus>> impl_IEmailMailbox3<T>::ValidateCertificatesAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<winrt::Windows::ApplicationModel::Email::EmailCertificateValidationStatus>> result;
	check(shim()->abi_ValidateCertificatesAsync(get(certificates), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Email::EmailMailboxEmptyFolderStatus> impl_IEmailMailbox3<T>::TryEmptyFolderAsync(StringReference const & folderId) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Email::EmailMailboxEmptyFolderStatus> result;
	check(shim()->abi_TryEmptyFolderAsync(get(folderId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMailboxCreateFolderResult> impl_IEmailMailbox3<T>::TryCreateFolderAsync(StringReference const & parentFolderId, StringReference const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMailboxCreateFolderResult> result;
	check(shim()->abi_TryCreateFolderAsync(get(parentFolderId), get(name), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Email::EmailMailboxDeleteFolderStatus> impl_IEmailMailbox3<T>::TryDeleteFolderAsync(StringReference const & folderId) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Email::EmailMailboxDeleteFolderStatus> result;
	check(shim()->abi_TryDeleteFolderAsync(get(folderId), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailRecipientResolutionStatus impl_IEmailRecipientResolutionResult<T>::Status() const
{
	Windows::ApplicationModel::Email::EmailRecipientResolutionStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_IEmailRecipientResolutionResult<T>::PublicKeys() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value;
	check(shim()->get_PublicKeys(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxCreateFolderStatus impl_IEmailMailboxCreateFolderResult<T>::Status() const
{
	Windows::ApplicationModel::Email::EmailMailboxCreateFolderStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailFolder impl_IEmailMailboxCreateFolderResult<T>::Folder() const
{
	Windows::ApplicationModel::Email::EmailFolder value = nullptr;
	check(shim()->get_Folder(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxAutoReplySettings<T>::IsEnabled() const
{
	bool value = {};
	check(shim()->get_IsEnabled(put(value)));
	return value;
}

template <typename T> void impl_IEmailMailboxAutoReplySettings<T>::IsEnabled(bool const value) const
{
	check(shim()->put_IsEnabled(value));
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxAutoReplyMessageResponseKind impl_IEmailMailboxAutoReplySettings<T>::ResponseKind() const
{
	Windows::ApplicationModel::Email::EmailMailboxAutoReplyMessageResponseKind value = {};
	check(shim()->get_ResponseKind(&value));
	return value;
}

template <typename T> void impl_IEmailMailboxAutoReplySettings<T>::ResponseKind(Windows::ApplicationModel::Email::EmailMailboxAutoReplyMessageResponseKind const value) const
{
	check(shim()->put_ResponseKind(value));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IEmailMailboxAutoReplySettings<T>::StartTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_StartTime(put(value)));
	return value;
}

template <typename T> void impl_IEmailMailboxAutoReplySettings<T>::StartTime(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_StartTime(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IEmailMailboxAutoReplySettings<T>::EndTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_EndTime(put(value)));
	return value;
}

template <typename T> void impl_IEmailMailboxAutoReplySettings<T>::EndTime(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_EndTime(get(value)));
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxAutoReply impl_IEmailMailboxAutoReplySettings<T>::InternalReply() const
{
	Windows::ApplicationModel::Email::EmailMailboxAutoReply value = nullptr;
	check(shim()->get_InternalReply(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxAutoReply impl_IEmailMailboxAutoReplySettings<T>::KnownExternalReply() const
{
	Windows::ApplicationModel::Email::EmailMailboxAutoReply value = nullptr;
	check(shim()->get_KnownExternalReply(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxAutoReply impl_IEmailMailboxAutoReplySettings<T>::UnknownExternalReply() const
{
	Windows::ApplicationModel::Email::EmailMailboxAutoReply value = nullptr;
	check(shim()->get_UnknownExternalReply(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxAutoReply<T>::IsEnabled() const
{
	bool value = {};
	check(shim()->get_IsEnabled(put(value)));
	return value;
}

template <typename T> void impl_IEmailMailboxAutoReply<T>::IsEnabled(bool const value) const
{
	check(shim()->put_IsEnabled(value));
}

template <typename T> String impl_IEmailMailboxAutoReply<T>::Response() const
{
	String value;
	check(shim()->get_Response(put(value)));
	return value;
}

template <typename T> void impl_IEmailMailboxAutoReply<T>::Response(StringReference const & value) const
{
	check(shim()->put_Response(get(value)));
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxSyncStatus impl_IEmailMailboxSyncManager<T>::Status() const
{
	Windows::ApplicationModel::Email::EmailMailboxSyncStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IEmailMailboxSyncManager<T>::LastSuccessfulSyncTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_LastSuccessfulSyncTime(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IEmailMailboxSyncManager<T>::LastAttemptedSyncTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_LastAttemptedSyncTime(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IEmailMailboxSyncManager<T>::SyncAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_SyncAsync(put(result)));
	return result;
}

template <typename T> long long impl_IEmailMailboxSyncManager<T>::SyncStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Email::EmailMailboxSyncManager, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_SyncStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IEmailMailboxSyncManager<T>::SyncStatusChanged(F handler) const
{
	return SyncStatusChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Email::EmailMailboxSyncManager, IInspectable>(handler));
}

template <typename T> void impl_IEmailMailboxSyncManager<T>::SyncStatusChanged(long long const token) const
{
	check(shim()->remove_SyncStatusChanged(token));
}

template <typename T> String impl_IEmailFolder<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IEmailFolder<T>::RemoteId() const
{
	String value;
	check(shim()->get_RemoteId(put(value)));
	return value;
}

template <typename T> void impl_IEmailFolder<T>::RemoteId(StringReference const & value) const
{
	check(shim()->put_RemoteId(get(value)));
}

template <typename T> String impl_IEmailFolder<T>::MailboxId() const
{
	String value;
	check(shim()->get_MailboxId(put(value)));
	return value;
}

template <typename T> String impl_IEmailFolder<T>::ParentFolderId() const
{
	String value;
	check(shim()->get_ParentFolderId(put(value)));
	return value;
}

template <typename T> String impl_IEmailFolder<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IEmailFolder<T>::DisplayName(StringReference const & value) const
{
	check(shim()->put_DisplayName(get(value)));
}

template <typename T> bool impl_IEmailFolder<T>::IsSyncEnabled() const
{
	bool value = {};
	check(shim()->get_IsSyncEnabled(put(value)));
	return value;
}

template <typename T> void impl_IEmailFolder<T>::IsSyncEnabled(bool const value) const
{
	check(shim()->put_IsSyncEnabled(value));
}

template <typename T> Windows::Foundation::DateTime impl_IEmailFolder<T>::LastSuccessfulSyncTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_LastSuccessfulSyncTime(&value));
	return value;
}

template <typename T> void impl_IEmailFolder<T>::LastSuccessfulSyncTime(Windows::Foundation::DateTime const & value) const
{
	check(shim()->put_LastSuccessfulSyncTime(value));
}

template <typename T> Windows::ApplicationModel::Email::EmailSpecialFolderKind impl_IEmailFolder<T>::Kind() const
{
	Windows::ApplicationModel::Email::EmailSpecialFolderKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailFolder> impl_IEmailFolder<T>::CreateFolderAsync(StringReference const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailFolder> result;
	check(shim()->abi_CreateFolderAsync(get(name), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IEmailFolder<T>::DeleteAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_DeleteAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailFolder>> impl_IEmailFolder<T>::FindChildFoldersAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailFolder>> result;
	check(shim()->abi_FindChildFoldersAsync(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailConversationReader impl_IEmailFolder<T>::GetConversationReader() const
{
	Windows::ApplicationModel::Email::EmailConversationReader result = nullptr;
	check(shim()->abi_GetConversationReader(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailConversationReader impl_IEmailFolder<T>::GetConversationReader(Windows::ApplicationModel::Email::EmailQueryOptions const & options) const
{
	Windows::ApplicationModel::Email::EmailConversationReader result = nullptr;
	check(shim()->abi_GetConversationReaderWithOptions(get(options), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMessage> impl_IEmailFolder<T>::GetMessageAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMessage> result;
	check(shim()->abi_GetMessageAsync(get(id), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailMessageReader impl_IEmailFolder<T>::GetMessageReader() const
{
	Windows::ApplicationModel::Email::EmailMessageReader result = nullptr;
	check(shim()->abi_GetMessageReader(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailMessageReader impl_IEmailFolder<T>::GetMessageReader(Windows::ApplicationModel::Email::EmailQueryOptions const & options) const
{
	Windows::ApplicationModel::Email::EmailMessageReader result = nullptr;
	check(shim()->abi_GetMessageReaderWithOptions(get(options), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailItemCounts> impl_IEmailFolder<T>::GetMessageCountsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailItemCounts> result;
	check(shim()->abi_GetMessageCountsAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IEmailFolder<T>::TryMoveAsync(Windows::ApplicationModel::Email::EmailFolder const & newParentFolder) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TryMoveAsync(get(newParentFolder), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IEmailFolder<T>::TryMoveAsync(Windows::ApplicationModel::Email::EmailFolder const & newParentFolder, StringReference const & newFolderName) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TryMoveWithNewNameAsync(get(newParentFolder), get(newFolderName), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IEmailFolder<T>::TrySaveAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_TrySaveAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IEmailFolder<T>::SaveMessageAsync(Windows::ApplicationModel::Email::EmailMessage const & message) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_SaveMessageAsync(get(message), put(result)));
	return result;
}

template <typename T> String impl_IEmailConversation<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IEmailConversation<T>::MailboxId() const
{
	String value;
	check(shim()->get_MailboxId(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailFlagState impl_IEmailConversation<T>::FlagState() const
{
	Windows::ApplicationModel::Email::EmailFlagState value = {};
	check(shim()->get_FlagState(&value));
	return value;
}

template <typename T> bool impl_IEmailConversation<T>::HasAttachment() const
{
	bool value = {};
	check(shim()->get_HasAttachment(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailImportance impl_IEmailConversation<T>::Importance() const
{
	Windows::ApplicationModel::Email::EmailImportance value = {};
	check(shim()->get_Importance(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailMessageResponseKind impl_IEmailConversation<T>::LastEmailResponseKind() const
{
	Windows::ApplicationModel::Email::EmailMessageResponseKind value = {};
	check(shim()->get_LastEmailResponseKind(&value));
	return value;
}

template <typename T> unsigned impl_IEmailConversation<T>::MessageCount() const
{
	unsigned value = {};
	check(shim()->get_MessageCount(&value));
	return value;
}

template <typename T> String impl_IEmailConversation<T>::MostRecentMessageId() const
{
	String value;
	check(shim()->get_MostRecentMessageId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IEmailConversation<T>::MostRecentMessageTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_MostRecentMessageTime(&value));
	return value;
}

template <typename T> String impl_IEmailConversation<T>::Preview() const
{
	String value;
	check(shim()->get_Preview(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailRecipient impl_IEmailConversation<T>::LatestSender() const
{
	Windows::ApplicationModel::Email::EmailRecipient value = nullptr;
	check(shim()->get_LatestSender(put(value)));
	return value;
}

template <typename T> String impl_IEmailConversation<T>::Subject() const
{
	String value;
	check(shim()->get_Subject(put(value)));
	return value;
}

template <typename T> unsigned impl_IEmailConversation<T>::UnreadMessageCount() const
{
	unsigned value = {};
	check(shim()->get_UnreadMessageCount(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailMessage>> impl_IEmailConversation<T>::FindMessagesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailMessage>> result;
	check(shim()->abi_FindMessagesAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailMessage>> impl_IEmailConversation<T>::FindMessagesAsync(unsigned const count) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailMessage>> result;
	check(shim()->abi_FindMessagesWithCountAsync(count, put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxActionKind impl_IEmailMailboxAction<T>::Kind() const
{
	Windows::ApplicationModel::Email::EmailMailboxActionKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> unsigned long long impl_IEmailMailboxAction<T>::ChangeNumber() const
{
	unsigned long long value = {};
	check(shim()->get_ChangeNumber(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailQuerySearchFields impl_IEmailQueryTextSearch<T>::Fields() const
{
	Windows::ApplicationModel::Email::EmailQuerySearchFields value = {};
	check(shim()->get_Fields(&value));
	return value;
}

template <typename T> void impl_IEmailQueryTextSearch<T>::Fields(Windows::ApplicationModel::Email::EmailQuerySearchFields const value) const
{
	check(shim()->put_Fields(value));
}

template <typename T> Windows::ApplicationModel::Email::EmailQuerySearchScope impl_IEmailQueryTextSearch<T>::SearchScope() const
{
	Windows::ApplicationModel::Email::EmailQuerySearchScope value = {};
	check(shim()->get_SearchScope(&value));
	return value;
}

template <typename T> void impl_IEmailQueryTextSearch<T>::SearchScope(Windows::ApplicationModel::Email::EmailQuerySearchScope const value) const
{
	check(shim()->put_SearchScope(value));
}

template <typename T> String impl_IEmailQueryTextSearch<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> void impl_IEmailQueryTextSearch<T>::Text(StringReference const & value) const
{
	check(shim()->put_Text(get(value)));
}

template <typename T> Windows::ApplicationModel::Email::EmailQueryOptions impl_IEmailQueryOptionsFactory<T>::CreateWithText(StringReference const & text) const
{
	Windows::ApplicationModel::Email::EmailQueryOptions result = nullptr;
	check(shim()->abi_CreateWithText(get(text), put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailQueryOptions impl_IEmailQueryOptionsFactory<T>::CreateWithTextAndFields(StringReference const & text, Windows::ApplicationModel::Email::EmailQuerySearchFields const fields) const
{
	Windows::ApplicationModel::Email::EmailQueryOptions result = nullptr;
	check(shim()->abi_CreateWithTextAndFields(get(text), fields, put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailQueryTextSearch impl_IEmailQueryOptions<T>::TextSearch() const
{
	Windows::ApplicationModel::Email::EmailQueryTextSearch value = nullptr;
	check(shim()->get_TextSearch(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailQuerySortDirection impl_IEmailQueryOptions<T>::SortDirection() const
{
	Windows::ApplicationModel::Email::EmailQuerySortDirection value = {};
	check(shim()->get_SortDirection(&value));
	return value;
}

template <typename T> void impl_IEmailQueryOptions<T>::SortDirection(Windows::ApplicationModel::Email::EmailQuerySortDirection const value) const
{
	check(shim()->put_SortDirection(value));
}

template <typename T> Windows::ApplicationModel::Email::EmailQuerySortProperty impl_IEmailQueryOptions<T>::SortProperty() const
{
	Windows::ApplicationModel::Email::EmailQuerySortProperty value = {};
	check(shim()->get_SortProperty(&value));
	return value;
}

template <typename T> void impl_IEmailQueryOptions<T>::SortProperty(Windows::ApplicationModel::Email::EmailQuerySortProperty const value) const
{
	check(shim()->put_SortProperty(value));
}

template <typename T> Windows::ApplicationModel::Email::EmailQueryKind impl_IEmailQueryOptions<T>::Kind() const
{
	Windows::ApplicationModel::Email::EmailQueryKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> void impl_IEmailQueryOptions<T>::Kind(Windows::ApplicationModel::Email::EmailQueryKind const value) const
{
	check(shim()->put_Kind(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IEmailQueryOptions<T>::FolderIds() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_FolderIds(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailConversation> impl_IEmailConversationBatch<T>::Conversations() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailConversation> value;
	check(shim()->get_Conversations(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailBatchStatus impl_IEmailConversationBatch<T>::Status() const
{
	Windows::ApplicationModel::Email::EmailBatchStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailConversationBatch> impl_IEmailConversationReader<T>::ReadBatchAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailConversationBatch> result;
	check(shim()->abi_ReadBatchAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailMessage> impl_IEmailMessageBatch<T>::Messages() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailMessage> value;
	check(shim()->get_Messages(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailBatchStatus impl_IEmailMessageBatch<T>::Status() const
{
	Windows::ApplicationModel::Email::EmailBatchStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMessageBatch> impl_IEmailMessageReader<T>::ReadBatchAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailMessageBatch> result;
	check(shim()->abi_ReadBatchAsync(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxChangeType impl_IEmailMailboxChange<T>::ChangeType() const
{
	Windows::ApplicationModel::Email::EmailMailboxChangeType value = {};
	check(shim()->get_ChangeType(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Email::EmailMailboxAction> impl_IEmailMailboxChange<T>::MailboxActions() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Email::EmailMailboxAction> value;
	check(shim()->get_MailboxActions(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailMessage impl_IEmailMailboxChange<T>::Message() const
{
	Windows::ApplicationModel::Email::EmailMessage value = nullptr;
	check(shim()->get_Message(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Email::EmailFolder impl_IEmailMailboxChange<T>::Folder() const
{
	Windows::ApplicationModel::Email::EmailFolder value = nullptr;
	check(shim()->get_Folder(put(value)));
	return value;
}

template <typename T> void impl_IEmailMailboxChangeReader<T>::AcceptChanges() const
{
	check(shim()->abi_AcceptChanges());
}

template <typename T> void impl_IEmailMailboxChangeReader<T>::AcceptChangesThrough(Windows::ApplicationModel::Email::EmailMailboxChange const & lastChangeToAcknowledge) const
{
	check(shim()->abi_AcceptChangesThrough(get(lastChangeToAcknowledge)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailMailboxChange>> impl_IEmailMailboxChangeReader<T>::ReadBatchAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailMailboxChange>> value;
	check(shim()->abi_ReadBatchAsync(put(value)));
	return value;
}

template <typename T> bool impl_IEmailMailboxChangeTracker<T>::IsTracking() const
{
	bool value = {};
	check(shim()->get_IsTracking(put(value)));
	return value;
}

template <typename T> void impl_IEmailMailboxChangeTracker<T>::Enable() const
{
	check(shim()->abi_Enable());
}

template <typename T> Windows::ApplicationModel::Email::EmailMailboxChangeReader impl_IEmailMailboxChangeTracker<T>::GetChangeReader() const
{
	Windows::ApplicationModel::Email::EmailMailboxChangeReader value = nullptr;
	check(shim()->abi_GetChangeReader(put(value)));
	return value;
}

template <typename T> void impl_IEmailMailboxChangeTracker<T>::Reset() const
{
	check(shim()->abi_Reset());
}

template <typename T> bool impl_IEmailMeetingInfo<T>::AllowNewTimeProposal() const
{
	bool value = {};
	check(shim()->get_AllowNewTimeProposal(put(value)));
	return value;
}

template <typename T> void impl_IEmailMeetingInfo<T>::AllowNewTimeProposal(bool const value) const
{
	check(shim()->put_AllowNewTimeProposal(value));
}

template <typename T> String impl_IEmailMeetingInfo<T>::AppointmentRoamingId() const
{
	String value;
	check(shim()->get_AppointmentRoamingId(put(value)));
	return value;
}

template <typename T> void impl_IEmailMeetingInfo<T>::AppointmentRoamingId(StringReference const & value) const
{
	check(shim()->put_AppointmentRoamingId(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IEmailMeetingInfo<T>::AppointmentOriginalStartTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_AppointmentOriginalStartTime(put(value)));
	return value;
}

template <typename T> void impl_IEmailMeetingInfo<T>::AppointmentOriginalStartTime(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_AppointmentOriginalStartTime(get(value)));
}

template <typename T> Windows::Foundation::TimeSpan impl_IEmailMeetingInfo<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Duration(&value));
	return value;
}

template <typename T> void impl_IEmailMeetingInfo<T>::Duration(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_Duration(value));
}

template <typename T> bool impl_IEmailMeetingInfo<T>::IsAllDay() const
{
	bool value = {};
	check(shim()->get_IsAllDay(put(value)));
	return value;
}

template <typename T> void impl_IEmailMeetingInfo<T>::IsAllDay(bool const value) const
{
	check(shim()->put_IsAllDay(value));
}

template <typename T> bool impl_IEmailMeetingInfo<T>::IsResponseRequested() const
{
	bool value = {};
	check(shim()->get_IsResponseRequested(put(value)));
	return value;
}

template <typename T> void impl_IEmailMeetingInfo<T>::IsResponseRequested(bool const value) const
{
	check(shim()->put_IsResponseRequested(value));
}

template <typename T> String impl_IEmailMeetingInfo<T>::Location() const
{
	String value;
	check(shim()->get_Location(put(value)));
	return value;
}

template <typename T> void impl_IEmailMeetingInfo<T>::Location(StringReference const & value) const
{
	check(shim()->put_Location(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IEmailMeetingInfo<T>::ProposedStartTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> proposedStartTime;
	check(shim()->get_ProposedStartTime(put(proposedStartTime)));
	return proposedStartTime;
}

template <typename T> void impl_IEmailMeetingInfo<T>::ProposedStartTime(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & proposedStartTime) const
{
	check(shim()->put_ProposedStartTime(get(proposedStartTime)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IEmailMeetingInfo<T>::ProposedDuration() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> duration;
	check(shim()->get_ProposedDuration(put(duration)));
	return duration;
}

template <typename T> void impl_IEmailMeetingInfo<T>::ProposedDuration(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & duration) const
{
	check(shim()->put_ProposedDuration(get(duration)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IEmailMeetingInfo<T>::RecurrenceStartTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_RecurrenceStartTime(put(value)));
	return value;
}

template <typename T> void impl_IEmailMeetingInfo<T>::RecurrenceStartTime(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_RecurrenceStartTime(get(value)));
}

template <typename T> Windows::ApplicationModel::Appointments::AppointmentRecurrence impl_IEmailMeetingInfo<T>::Recurrence() const
{
	Windows::ApplicationModel::Appointments::AppointmentRecurrence value = nullptr;
	check(shim()->get_Recurrence(put(value)));
	return value;
}

template <typename T> void impl_IEmailMeetingInfo<T>::Recurrence(Windows::ApplicationModel::Appointments::AppointmentRecurrence const & value) const
{
	check(shim()->put_Recurrence(get(value)));
}

template <typename T> unsigned long long impl_IEmailMeetingInfo<T>::RemoteChangeNumber() const
{
	unsigned long long value = {};
	check(shim()->get_RemoteChangeNumber(&value));
	return value;
}

template <typename T> void impl_IEmailMeetingInfo<T>::RemoteChangeNumber(unsigned long long const value) const
{
	check(shim()->put_RemoteChangeNumber(value));
}

template <typename T> Windows::Foundation::DateTime impl_IEmailMeetingInfo<T>::StartTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_StartTime(&value));
	return value;
}

template <typename T> void impl_IEmailMeetingInfo<T>::StartTime(Windows::Foundation::DateTime const & value) const
{
	check(shim()->put_StartTime(value));
}

template <typename T> bool impl_IEmailMeetingInfo2<T>::IsReportedOutOfDateByServer() const
{
	bool value = {};
	check(shim()->get_IsReportedOutOfDateByServer(put(value)));
	return value;
}

template <typename T> unsigned impl_IEmailItemCounts<T>::Flagged() const
{
	unsigned value = {};
	check(shim()->get_Flagged(&value));
	return value;
}

template <typename T> unsigned impl_IEmailItemCounts<T>::Important() const
{
	unsigned value = {};
	check(shim()->get_Important(&value));
	return value;
}

template <typename T> unsigned impl_IEmailItemCounts<T>::Total() const
{
	unsigned value = {};
	check(shim()->get_Total(&value));
	return value;
}

template <typename T> unsigned impl_IEmailItemCounts<T>::Unread() const
{
	unsigned value = {};
	check(shim()->get_Unread(&value));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace ExtendedExecution {

template <typename T> Windows::ApplicationModel::ExtendedExecution::ExtendedExecutionRevokedReason impl_IExtendedExecutionRevokedEventArgs<T>::Reason() const
{
	Windows::ApplicationModel::ExtendedExecution::ExtendedExecutionRevokedReason value = {};
	check(shim()->get_Reason(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::ExtendedExecution::ExtendedExecutionReason impl_IExtendedExecutionSession<T>::Reason() const
{
	Windows::ApplicationModel::ExtendedExecution::ExtendedExecutionReason value = {};
	check(shim()->get_Reason(&value));
	return value;
}

template <typename T> void impl_IExtendedExecutionSession<T>::Reason(Windows::ApplicationModel::ExtendedExecution::ExtendedExecutionReason const value) const
{
	check(shim()->put_Reason(value));
}

template <typename T> String impl_IExtendedExecutionSession<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IExtendedExecutionSession<T>::Description(StringReference const & value) const
{
	check(shim()->put_Description(get(value)));
}

template <typename T> unsigned impl_IExtendedExecutionSession<T>::PercentProgress() const
{
	unsigned value = {};
	check(shim()->get_PercentProgress(&value));
	return value;
}

template <typename T> void impl_IExtendedExecutionSession<T>::PercentProgress(unsigned const value) const
{
	check(shim()->put_PercentProgress(value));
}

template <typename T> long long impl_IExtendedExecutionSession<T>::Revoked(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::ApplicationModel::ExtendedExecution::ExtendedExecutionRevokedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Revoked(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IExtendedExecutionSession<T>::Revoked(F handler) const
{
	return Revoked(Windows::Foundation::TypedEventHandler<IInspectable, Windows::ApplicationModel::ExtendedExecution::ExtendedExecutionRevokedEventArgs>(handler));
}

template <typename T> void impl_IExtendedExecutionSession<T>::Revoked(long long const token) const
{
	check(shim()->remove_Revoked(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::ExtendedExecution::ExtendedExecutionResult> impl_IExtendedExecutionSession<T>::RequestExtensionAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::ExtendedExecution::ExtendedExecutionResult> operation;
	check(shim()->abi_RequestExtensionAsync(put(operation)));
	return operation;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace ExtendedExecution { namespace Foreground {

template <typename T> Windows::ApplicationModel::ExtendedExecution::Foreground::ExtendedExecutionForegroundRevokedReason impl_IExtendedExecutionForegroundRevokedEventArgs<T>::Reason() const
{
	Windows::ApplicationModel::ExtendedExecution::Foreground::ExtendedExecutionForegroundRevokedReason value = {};
	check(shim()->get_Reason(&value));
	return value;
}

template <typename T> String impl_IExtendedExecutionForegroundSession<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IExtendedExecutionForegroundSession<T>::Description(StringReference const & value) const
{
	check(shim()->put_Description(get(value)));
}

template <typename T> long long impl_IExtendedExecutionForegroundSession<T>::Revoked(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::ApplicationModel::ExtendedExecution::Foreground::ExtendedExecutionForegroundRevokedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Revoked(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IExtendedExecutionForegroundSession<T>::Revoked(F handler) const
{
	return Revoked(Windows::Foundation::TypedEventHandler<IInspectable, Windows::ApplicationModel::ExtendedExecution::Foreground::ExtendedExecutionForegroundRevokedEventArgs>(handler));
}

template <typename T> void impl_IExtendedExecutionForegroundSession<T>::Revoked(long long const token) const
{
	check(shim()->remove_Revoked(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::ExtendedExecution::Foreground::ExtendedExecutionForegroundResult> impl_IExtendedExecutionForegroundSession<T>::RequestExtensionAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::ExtendedExecution::Foreground::ExtendedExecutionForegroundResult> operation;
	check(shim()->abi_RequestExtensionAsync(put(operation)));
	return operation;
}

template <typename T> Windows::ApplicationModel::ExtendedExecution::Foreground::ExtendedExecutionForegroundReason impl_IExtendedExecutionForegroundSession<T>::Reason() const
{
	Windows::ApplicationModel::ExtendedExecution::Foreground::ExtendedExecutionForegroundReason value = {};
	check(shim()->get_Reason(&value));
	return value;
}

template <typename T> void impl_IExtendedExecutionForegroundSession<T>::Reason(Windows::ApplicationModel::ExtendedExecution::Foreground::ExtendedExecutionForegroundReason const value) const
{
	check(shim()->put_Reason(value));
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Infrastructure {

template <typename T> Windows::UI::Core::CoreWindow impl_ISetWindowWithWindowFactory<T>::SetWindow(Windows::UI::Core::ICoreWindowFactory const & windowFactory) const
{
	Windows::UI::Core::CoreWindow window = nullptr;
	check(shim()->abi_SetWindow(get(windowFactory), put(window)));
	return window;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace LockScreen {

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_ILockScreenBadge<T>::Logo() const
{
	Windows::Storage::Streams::IRandomAccessStream value;
	check(shim()->get_Logo(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_ILockScreenBadge<T>::Glyph() const
{
	Windows::Storage::Streams::IRandomAccessStream value;
	check(shim()->get_Glyph(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_ILockScreenBadge<T>::Number() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_Number(put(value)));
	return value;
}

template <typename T> String impl_ILockScreenBadge<T>::AutomationName() const
{
	String value;
	check(shim()->get_AutomationName(put(value)));
	return value;
}

template <typename T> void impl_ILockScreenBadge<T>::LaunchApp() const
{
	check(shim()->abi_LaunchApp());
}

template <typename T> long long impl_ILockScreenInfo<T>::LockScreenImageChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::LockScreen::LockScreenInfo, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_LockScreenImageChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ILockScreenInfo<T>::LockScreenImageChanged(F handler) const
{
	return LockScreenImageChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::LockScreen::LockScreenInfo, IInspectable>(handler));
}

template <typename T> void impl_ILockScreenInfo<T>::LockScreenImageChanged(long long const token) const
{
	check(shim()->remove_LockScreenImageChanged(token));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_ILockScreenInfo<T>::LockScreenImage() const
{
	Windows::Storage::Streams::IRandomAccessStream value;
	check(shim()->get_LockScreenImage(put(value)));
	return value;
}

template <typename T> long long impl_ILockScreenInfo<T>::BadgesChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::LockScreen::LockScreenInfo, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_BadgesChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ILockScreenInfo<T>::BadgesChanged(F handler) const
{
	return BadgesChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::LockScreen::LockScreenInfo, IInspectable>(handler));
}

template <typename T> void impl_ILockScreenInfo<T>::BadgesChanged(long long const token) const
{
	check(shim()->remove_BadgesChanged(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::LockScreen::LockScreenBadge> impl_ILockScreenInfo<T>::Badges() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::LockScreen::LockScreenBadge> value;
	check(shim()->get_Badges(put(value)));
	return value;
}

template <typename T> long long impl_ILockScreenInfo<T>::DetailTextChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::LockScreen::LockScreenInfo, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_DetailTextChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ILockScreenInfo<T>::DetailTextChanged(F handler) const
{
	return DetailTextChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::LockScreen::LockScreenInfo, IInspectable>(handler));
}

template <typename T> void impl_ILockScreenInfo<T>::DetailTextChanged(long long const token) const
{
	check(shim()->remove_DetailTextChanged(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ILockScreenInfo<T>::DetailText() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_DetailText(put(value)));
	return value;
}

template <typename T> long long impl_ILockScreenInfo<T>::AlarmIconChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::LockScreen::LockScreenInfo, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_AlarmIconChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ILockScreenInfo<T>::AlarmIconChanged(F handler) const
{
	return AlarmIconChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::LockScreen::LockScreenInfo, IInspectable>(handler));
}

template <typename T> void impl_ILockScreenInfo<T>::AlarmIconChanged(long long const token) const
{
	check(shim()->remove_AlarmIconChanged(token));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_ILockScreenInfo<T>::AlarmIcon() const
{
	Windows::Storage::Streams::IRandomAccessStream value;
	check(shim()->get_AlarmIcon(put(value)));
	return value;
}

template <typename T> void impl_ILockScreenUnlockingDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::ApplicationModel::LockScreen::LockScreenUnlockingDeferral impl_ILockScreenUnlockingEventArgs<T>::GetDeferral() const
{
	Windows::ApplicationModel::LockScreen::LockScreenUnlockingDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> Windows::Foundation::DateTime impl_ILockScreenUnlockingEventArgs<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Deadline(&value));
	return value;
}

template <typename T> void impl_ILockApplicationHost<T>::RequestUnlock() const
{
	check(shim()->abi_RequestUnlock());
}

template <typename T> long long impl_ILockApplicationHost<T>::Unlocking(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::LockScreen::LockApplicationHost, Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Unlocking(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ILockApplicationHost<T>::Unlocking(F handler) const
{
	return Unlocking(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::LockScreen::LockApplicationHost, Windows::ApplicationModel::LockScreen::LockScreenUnlockingEventArgs>(handler));
}

template <typename T> void impl_ILockApplicationHost<T>::Unlocking(long long const token) const
{
	check(shim()->remove_Unlocking(token));
}

template <typename T> Windows::ApplicationModel::LockScreen::LockApplicationHost impl_ILockApplicationHostStatics<T>::GetForCurrentView() const
{
	Windows::ApplicationModel::LockScreen::LockApplicationHost result = nullptr;
	check(shim()->abi_GetForCurrentView(put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Resources {

template <typename T> String impl_IResourceLoader<T>::GetString(StringReference const & resource) const
{
	String value;
	check(shim()->abi_GetString(get(resource), put(value)));
	return value;
}

template <typename T> String impl_IResourceLoader2<T>::GetStringForUri(Windows::Foundation::Uri const & uri) const
{
	String value;
	check(shim()->abi_GetStringForUri(get(uri), put(value)));
	return value;
}

template <typename T> String impl_IResourceLoaderStatics<T>::GetStringForReference(Windows::Foundation::Uri const & uri) const
{
	String value;
	check(shim()->abi_GetStringForReference(get(uri), put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Resources::ResourceLoader impl_IResourceLoaderStatics2<T>::GetForCurrentView() const
{
	Windows::ApplicationModel::Resources::ResourceLoader loader = nullptr;
	check(shim()->abi_GetForCurrentView(put(loader)));
	return loader;
}

template <typename T> Windows::ApplicationModel::Resources::ResourceLoader impl_IResourceLoaderStatics2<T>::GetForCurrentView(StringReference const & name) const
{
	Windows::ApplicationModel::Resources::ResourceLoader loader = nullptr;
	check(shim()->abi_GetForCurrentViewWithName(get(name), put(loader)));
	return loader;
}

template <typename T> Windows::ApplicationModel::Resources::ResourceLoader impl_IResourceLoaderStatics2<T>::GetForViewIndependentUse() const
{
	Windows::ApplicationModel::Resources::ResourceLoader loader = nullptr;
	check(shim()->abi_GetForViewIndependentUse(put(loader)));
	return loader;
}

template <typename T> Windows::ApplicationModel::Resources::ResourceLoader impl_IResourceLoaderStatics2<T>::GetForViewIndependentUse(StringReference const & name) const
{
	Windows::ApplicationModel::Resources::ResourceLoader loader = nullptr;
	check(shim()->abi_GetForViewIndependentUseWithName(get(name), put(loader)));
	return loader;
}

template <typename T> Windows::ApplicationModel::Resources::ResourceLoader impl_IResourceLoaderFactory<T>::CreateResourceLoaderByName(StringReference const & name) const
{
	Windows::ApplicationModel::Resources::ResourceLoader loader = nullptr;
	check(shim()->abi_CreateResourceLoaderByName(get(name), put(loader)));
	return loader;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Core {

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceMap impl_IResourceManager<T>::MainResourceMap() const
{
	Windows::ApplicationModel::Resources::Core::ResourceMap value = nullptr;
	check(shim()->get_MainResourceMap(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Resources::Core::ResourceMap> impl_IResourceManager<T>::AllResourceMaps() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Resources::Core::ResourceMap> maps;
	check(shim()->get_AllResourceMaps(put(maps)));
	return maps;
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceContext impl_IResourceManager<T>::DefaultContext() const
{
	Windows::ApplicationModel::Resources::Core::ResourceContext value = nullptr;
	check(shim()->get_DefaultContext(put(value)));
	return value;
}

template <typename T> void impl_IResourceManager<T>::LoadPriFiles(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageFile> const & files) const
{
	check(shim()->abi_LoadPriFiles(get(files)));
}

template <typename T> void impl_IResourceManager<T>::UnloadPriFiles(Windows::Foundation::Collections::IIterable<Windows::Storage::IStorageFile> const & files) const
{
	check(shim()->abi_UnloadPriFiles(get(files)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::NamedResource> impl_IResourceManager2<T>::GetAllNamedResourcesForPackage(StringReference const & packageName, Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo const & resourceLayoutInfo) const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::NamedResource> table;
	check(shim()->abi_GetAllNamedResourcesForPackage(get(packageName), resourceLayoutInfo, put(table)));
	return table;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceMap> impl_IResourceManager2<T>::GetAllSubtreesForPackage(StringReference const & packageName, Windows::ApplicationModel::Resources::Core::ResourceLayoutInfo const & resourceLayoutInfo) const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceMap> table;
	check(shim()->abi_GetAllSubtreesForPackage(get(packageName), resourceLayoutInfo, put(table)));
	return table;
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceManager impl_IResourceManagerStatics<T>::Current() const
{
	Windows::ApplicationModel::Resources::Core::ResourceManager value = nullptr;
	check(shim()->get_Current(put(value)));
	return value;
}

template <typename T> bool impl_IResourceManagerStatics<T>::IsResourceReference(StringReference const & resourceReference) const
{
	bool isReference = {};
	check(shim()->abi_IsResourceReference(get(resourceReference), put(isReference)));
	return isReference;
}

template <typename T> String impl_IResourceQualifier<T>::QualifierName() const
{
	String value;
	check(shim()->get_QualifierName(put(value)));
	return value;
}

template <typename T> String impl_IResourceQualifier<T>::QualifierValue() const
{
	String value;
	check(shim()->get_QualifierValue(put(value)));
	return value;
}

template <typename T> bool impl_IResourceQualifier<T>::IsDefault() const
{
	bool value = {};
	check(shim()->get_IsDefault(put(value)));
	return value;
}

template <typename T> bool impl_IResourceQualifier<T>::IsMatch() const
{
	bool value = {};
	check(shim()->get_IsMatch(put(value)));
	return value;
}

template <typename T> double impl_IResourceQualifier<T>::Score() const
{
	double value = {};
	check(shim()->get_Score(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IObservableMap<String, String> impl_IResourceContext<T>::QualifierValues() const
{
	Windows::Foundation::Collections::IObservableMap<String, String> value;
	check(shim()->get_QualifierValues(put(value)));
	return value;
}

template <typename T> void impl_IResourceContext<T>::Reset() const
{
	check(shim()->abi_Reset());
}

template <typename T> void impl_IResourceContext<T>::Reset(Windows::Foundation::Collections::IIterable<String> const & qualifierNames) const
{
	check(shim()->abi_ResetQualifierValues(get(qualifierNames)));
}

template <typename T> void impl_IResourceContext<T>::OverrideToMatch(Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Resources::Core::ResourceQualifier> const & result) const
{
	check(shim()->abi_OverrideToMatch(get(result)));
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceContext impl_IResourceContext<T>::Clone() const
{
	Windows::ApplicationModel::Resources::Core::ResourceContext clone = nullptr;
	check(shim()->abi_Clone(put(clone)));
	return clone;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IResourceContext<T>::Languages() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_Languages(put(value)));
	return value;
}

template <typename T> void impl_IResourceContext<T>::Languages(Windows::Foundation::Collections::IVectorView<String> const & languages) const
{
	check(shim()->put_Languages(get(languages)));
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceContext impl_IResourceContextStatics<T>::CreateMatchingContext(Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Resources::Core::ResourceQualifier> const & result) const
{
	Windows::ApplicationModel::Resources::Core::ResourceContext value = nullptr;
	check(shim()->abi_CreateMatchingContext(get(result), put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceContext impl_IResourceContextStatics2<T>::GetForCurrentView() const
{
	Windows::ApplicationModel::Resources::Core::ResourceContext value = nullptr;
	check(shim()->abi_GetForCurrentView(put(value)));
	return value;
}

template <typename T> void impl_IResourceContextStatics2<T>::SetGlobalQualifierValue(StringReference const & key, StringReference const & value) const
{
	check(shim()->abi_SetGlobalQualifierValue(get(key), get(value)));
}

template <typename T> void impl_IResourceContextStatics2<T>::ResetGlobalQualifierValues() const
{
	check(shim()->abi_ResetGlobalQualifierValues());
}

template <typename T> void impl_IResourceContextStatics2<T>::ResetGlobalQualifierValues(Windows::Foundation::Collections::IIterable<String> const & qualifierNames) const
{
	check(shim()->abi_ResetGlobalQualifierValuesForSpecifiedQualifiers(get(qualifierNames)));
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceContext impl_IResourceContextStatics2<T>::GetForViewIndependentUse() const
{
	Windows::ApplicationModel::Resources::Core::ResourceContext loader = nullptr;
	check(shim()->abi_GetForViewIndependentUse(put(loader)));
	return loader;
}

template <typename T> void impl_IResourceContextStatics3<T>::SetGlobalQualifierValue(StringReference const & key, StringReference const & value, Windows::ApplicationModel::Resources::Core::ResourceQualifierPersistence const persistence) const
{
	check(shim()->abi_SetGlobalQualifierValueWithPersistence(get(key), get(value), persistence));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceQualifier> impl_IResourceCandidate<T>::Qualifiers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceQualifier> value;
	check(shim()->get_Qualifiers(put(value)));
	return value;
}

template <typename T> bool impl_IResourceCandidate<T>::IsMatch() const
{
	bool value = {};
	check(shim()->get_IsMatch(put(value)));
	return value;
}

template <typename T> bool impl_IResourceCandidate<T>::IsMatchAsDefault() const
{
	bool value = {};
	check(shim()->get_IsMatchAsDefault(put(value)));
	return value;
}

template <typename T> bool impl_IResourceCandidate<T>::IsDefault() const
{
	bool value = {};
	check(shim()->get_IsDefault(put(value)));
	return value;
}

template <typename T> String impl_IResourceCandidate<T>::ValueAsString() const
{
	String result;
	check(shim()->get_ValueAsString(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IResourceCandidate<T>::GetValueAsFileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_GetValueAsFileAsync(put(operation)));
	return operation;
}

template <typename T> String impl_IResourceCandidate<T>::GetQualifierValue(StringReference const & qualifierName) const
{
	String value;
	check(shim()->abi_GetQualifierValue(get(qualifierName), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> impl_IResourceCandidate2<T>::GetValueAsStreamAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> operation;
	check(shim()->abi_GetValueAsStreamAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Uri impl_INamedResource<T>::Uri() const
{
	Windows::Foundation::Uri uri = nullptr;
	check(shim()->get_Uri(put(uri)));
	return uri;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate> impl_INamedResource<T>::Candidates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate> value;
	check(shim()->get_Candidates(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceCandidate impl_INamedResource<T>::Resolve() const
{
	Windows::ApplicationModel::Resources::Core::ResourceCandidate result = nullptr;
	check(shim()->abi_Resolve(put(result)));
	return result;
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceCandidate impl_INamedResource<T>::Resolve(Windows::ApplicationModel::Resources::Core::ResourceContext const & resourceContext) const
{
	Windows::ApplicationModel::Resources::Core::ResourceCandidate result = nullptr;
	check(shim()->abi_ResolveForContext(get(resourceContext), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate> impl_INamedResource<T>::ResolveAll() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate> result;
	check(shim()->abi_ResolveAll(put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate> impl_INamedResource<T>::ResolveAll(Windows::ApplicationModel::Resources::Core::ResourceContext const & resourceContext) const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Core::ResourceCandidate> instances;
	check(shim()->abi_ResolveAllForContext(get(resourceContext), put(instances)));
	return instances;
}

template <typename T> Windows::Foundation::Uri impl_IResourceMap<T>::Uri() const
{
	Windows::Foundation::Uri uri = nullptr;
	check(shim()->get_Uri(put(uri)));
	return uri;
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceCandidate impl_IResourceMap<T>::GetValue(StringReference const & resource) const
{
	Windows::ApplicationModel::Resources::Core::ResourceCandidate value = nullptr;
	check(shim()->abi_GetValue(get(resource), put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceCandidate impl_IResourceMap<T>::GetValue(StringReference const & resource, Windows::ApplicationModel::Resources::Core::ResourceContext const & context) const
{
	Windows::ApplicationModel::Resources::Core::ResourceCandidate value = nullptr;
	check(shim()->abi_GetValueForContext(get(resource), get(context), put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Resources::Core::ResourceMap impl_IResourceMap<T>::GetSubtree(StringReference const & reference) const
{
	Windows::ApplicationModel::Resources::Core::ResourceMap map = nullptr;
	check(shim()->abi_GetSubtree(get(reference), put(map)));
	return map;
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Management {

template <typename T> Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate impl_IResourceIndexer<T>::IndexFilePath(Windows::Foundation::Uri const & filePath) const
{
	Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate candidate = nullptr;
	check(shim()->abi_IndexFilePath(get(filePath), put(candidate)));
	return candidate;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate>> impl_IResourceIndexer<T>::IndexFileContentsAsync(Windows::Foundation::Uri const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Management::IndexedResourceCandidate>> operation;
	check(shim()->abi_IndexFileContentsAsync(get(file), put(operation)));
	return operation;
}

template <typename T> Windows::ApplicationModel::Resources::Management::ResourceIndexer impl_IResourceIndexerFactory<T>::CreateResourceIndexer(Windows::Foundation::Uri const & projectRoot) const
{
	Windows::ApplicationModel::Resources::Management::ResourceIndexer indexer = nullptr;
	check(shim()->abi_CreateResourceIndexer(get(projectRoot), put(indexer)));
	return indexer;
}

template <typename T> Windows::ApplicationModel::Resources::Management::ResourceIndexer impl_IResourceIndexerFactory2<T>::CreateResourceIndexerWithExtension(Windows::Foundation::Uri const & projectRoot, Windows::Foundation::Uri const & extensionDllPath) const
{
	Windows::ApplicationModel::Resources::Management::ResourceIndexer indexer = nullptr;
	check(shim()->abi_CreateResourceIndexerWithExtension(get(projectRoot), get(extensionDllPath), put(indexer)));
	return indexer;
}

template <typename T> String impl_IIndexedResourceQualifier<T>::QualifierName() const
{
	String value;
	check(shim()->get_QualifierName(put(value)));
	return value;
}

template <typename T> String impl_IIndexedResourceQualifier<T>::QualifierValue() const
{
	String value;
	check(shim()->get_QualifierValue(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Resources::Management::IndexedResourceType impl_IIndexedResourceCandidate<T>::Type() const
{
	Windows::ApplicationModel::Resources::Management::IndexedResourceType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IIndexedResourceCandidate<T>::Uri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, String> impl_IIndexedResourceCandidate<T>::Metadata() const
{
	Windows::Foundation::Collections::IMapView<String, String> value;
	check(shim()->get_Metadata(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Management::IndexedResourceQualifier> impl_IIndexedResourceCandidate<T>::Qualifiers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Resources::Management::IndexedResourceQualifier> value;
	check(shim()->get_Qualifiers(put(value)));
	return value;
}

template <typename T> String impl_IIndexedResourceCandidate<T>::ValueAsString() const
{
	String value;
	check(shim()->get_ValueAsString(put(value)));
	return value;
}

template <typename T> String impl_IIndexedResourceCandidate<T>::GetQualifierValue(StringReference const & qualifierName) const
{
	String qualifierValue;
	check(shim()->abi_GetQualifierValue(get(qualifierName), put(qualifierValue)));
	return qualifierValue;
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Search {

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISearchPaneQueryLinguisticDetails<T>::QueryTextAlternatives() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_QueryTextAlternatives(put(value)));
	return value;
}

template <typename T> unsigned impl_ISearchPaneQueryLinguisticDetails<T>::QueryTextCompositionStart() const
{
	unsigned value = {};
	check(shim()->get_QueryTextCompositionStart(&value));
	return value;
}

template <typename T> unsigned impl_ISearchPaneQueryLinguisticDetails<T>::QueryTextCompositionLength() const
{
	unsigned value = {};
	check(shim()->get_QueryTextCompositionLength(&value));
	return value;
}

template <typename T> bool impl_ISearchPaneVisibilityChangedEventArgs<T>::Visible() const
{
	bool value = {};
	check(shim()->get_Visible(put(value)));
	return value;
}

template <typename T> String impl_ISearchPaneQueryChangedEventArgs<T>::QueryText() const
{
	String value;
	check(shim()->get_QueryText(put(value)));
	return value;
}

template <typename T> String impl_ISearchPaneQueryChangedEventArgs<T>::Language() const
{
	String value;
	check(shim()->get_Language(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails impl_ISearchPaneQueryChangedEventArgs<T>::LinguisticDetails() const
{
	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails value = nullptr;
	check(shim()->get_LinguisticDetails(put(value)));
	return value;
}

template <typename T> String impl_ISearchPaneQuerySubmittedEventArgs<T>::QueryText() const
{
	String value;
	check(shim()->get_QueryText(put(value)));
	return value;
}

template <typename T> String impl_ISearchPaneQuerySubmittedEventArgs<T>::Language() const
{
	String value;
	check(shim()->get_Language(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails impl_ISearchPaneQuerySubmittedEventArgsWithLinguisticDetails<T>::LinguisticDetails() const
{
	Windows::ApplicationModel::Search::SearchPaneQueryLinguisticDetails value = nullptr;
	check(shim()->get_LinguisticDetails(put(value)));
	return value;
}

template <typename T> String impl_ISearchPaneResultSuggestionChosenEventArgs<T>::Tag() const
{
	String value;
	check(shim()->get_Tag(put(value)));
	return value;
}

template <typename T> unsigned impl_ISearchSuggestionCollection<T>::Size() const
{
	unsigned value = {};
	check(shim()->get_Size(&value));
	return value;
}

template <typename T> void impl_ISearchSuggestionCollection<T>::AppendQuerySuggestion(StringReference const & text) const
{
	check(shim()->abi_AppendQuerySuggestion(get(text)));
}

template <typename T> void impl_ISearchSuggestionCollection<T>::AppendQuerySuggestions(Windows::Foundation::Collections::IIterable<String> const & suggestions) const
{
	check(shim()->abi_AppendQuerySuggestions(get(suggestions)));
}

template <typename T> void impl_ISearchSuggestionCollection<T>::AppendResultSuggestion(StringReference const & text, StringReference const & detailText, StringReference const & tag, Windows::Storage::Streams::IRandomAccessStreamReference const & image, StringReference const & imageAlternateText) const
{
	check(shim()->abi_AppendResultSuggestion(get(text), get(detailText), get(tag), get(image), get(imageAlternateText)));
}

template <typename T> void impl_ISearchSuggestionCollection<T>::AppendSearchSeparator(StringReference const & label) const
{
	check(shim()->abi_AppendSearchSeparator(get(label)));
}

template <typename T> void impl_ISearchPaneSuggestionsRequestDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> bool impl_ISearchPaneSuggestionsRequest<T>::IsCanceled() const
{
	bool value = {};
	check(shim()->get_IsCanceled(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchSuggestionCollection impl_ISearchPaneSuggestionsRequest<T>::SearchSuggestionCollection() const
{
	Windows::ApplicationModel::Search::SearchSuggestionCollection collection = nullptr;
	check(shim()->get_SearchSuggestionCollection(put(collection)));
	return collection;
}

template <typename T> Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestDeferral impl_ISearchPaneSuggestionsRequest<T>::GetDeferral() const
{
	Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> Windows::ApplicationModel::Search::SearchPaneSuggestionsRequest impl_ISearchPaneSuggestionsRequestedEventArgs<T>::Request() const
{
	Windows::ApplicationModel::Search::SearchPaneSuggestionsRequest value = nullptr;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> void impl_ILocalContentSuggestionSettings<T>::Enabled(bool const value) const
{
	check(shim()->put_Enabled(value));
}

template <typename T> bool impl_ILocalContentSuggestionSettings<T>::Enabled() const
{
	bool value = {};
	check(shim()->get_Enabled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Storage::StorageFolder> impl_ILocalContentSuggestionSettings<T>::Locations() const
{
	Windows::Foundation::Collections::IVector<Windows::Storage::StorageFolder> value;
	check(shim()->get_Locations(put(value)));
	return value;
}

template <typename T> void impl_ILocalContentSuggestionSettings<T>::AqsFilter(StringReference const & value) const
{
	check(shim()->put_AqsFilter(get(value)));
}

template <typename T> String impl_ILocalContentSuggestionSettings<T>::AqsFilter() const
{
	String value;
	check(shim()->get_AqsFilter(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ILocalContentSuggestionSettings<T>::PropertiesToMatch() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_PropertiesToMatch(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchPane impl_ISearchPaneStatics<T>::GetForCurrentView() const
{
	Windows::ApplicationModel::Search::SearchPane searchPane = nullptr;
	check(shim()->abi_GetForCurrentView(put(searchPane)));
	return searchPane;
}

template <typename T> void impl_ISearchPaneStaticsWithHideThisApplication<T>::HideThisApplication() const
{
	check(shim()->abi_HideThisApplication());
}

template <typename T> void impl_ISearchPane<T>::SearchHistoryEnabled(bool const value) const
{
	check(shim()->put_SearchHistoryEnabled(value));
}

template <typename T> bool impl_ISearchPane<T>::SearchHistoryEnabled() const
{
	bool value = {};
	check(shim()->get_SearchHistoryEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISearchPane<T>::SearchHistoryContext(StringReference const & value) const
{
	check(shim()->put_SearchHistoryContext(get(value)));
}

template <typename T> String impl_ISearchPane<T>::SearchHistoryContext() const
{
	String value;
	check(shim()->get_SearchHistoryContext(put(value)));
	return value;
}

template <typename T> void impl_ISearchPane<T>::PlaceholderText(StringReference const & value) const
{
	check(shim()->put_PlaceholderText(get(value)));
}

template <typename T> String impl_ISearchPane<T>::PlaceholderText() const
{
	String value;
	check(shim()->get_PlaceholderText(put(value)));
	return value;
}

template <typename T> String impl_ISearchPane<T>::QueryText() const
{
	String value;
	check(shim()->get_QueryText(put(value)));
	return value;
}

template <typename T> String impl_ISearchPane<T>::Language() const
{
	String value;
	check(shim()->get_Language(put(value)));
	return value;
}

template <typename T> bool impl_ISearchPane<T>::Visible() const
{
	bool value = {};
	check(shim()->get_Visible(put(value)));
	return value;
}

template <typename T> long long impl_ISearchPane<T>::VisibilityChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneVisibilityChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_VisibilityChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISearchPane<T>::VisibilityChanged(F handler) const
{
	return VisibilityChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneVisibilityChangedEventArgs>(handler));
}

template <typename T> void impl_ISearchPane<T>::VisibilityChanged(long long const token) const
{
	check(shim()->remove_VisibilityChanged(token));
}

template <typename T> long long impl_ISearchPane<T>::QueryChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQueryChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_QueryChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISearchPane<T>::QueryChanged(F handler) const
{
	return QueryChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQueryChangedEventArgs>(handler));
}

template <typename T> void impl_ISearchPane<T>::QueryChanged(long long const token) const
{
	check(shim()->remove_QueryChanged(token));
}

template <typename T> long long impl_ISearchPane<T>::SuggestionsRequested(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SuggestionsRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISearchPane<T>::SuggestionsRequested(F handler) const
{
	return SuggestionsRequested(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneSuggestionsRequestedEventArgs>(handler));
}

template <typename T> void impl_ISearchPane<T>::SuggestionsRequested(long long const token) const
{
	check(shim()->remove_SuggestionsRequested(token));
}

template <typename T> long long impl_ISearchPane<T>::QuerySubmitted(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQuerySubmittedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_QuerySubmitted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISearchPane<T>::QuerySubmitted(F handler) const
{
	return QuerySubmitted(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneQuerySubmittedEventArgs>(handler));
}

template <typename T> void impl_ISearchPane<T>::QuerySubmitted(long long const token) const
{
	check(shim()->remove_QuerySubmitted(token));
}

template <typename T> long long impl_ISearchPane<T>::ResultSuggestionChosen(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneResultSuggestionChosenEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ResultSuggestionChosen(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISearchPane<T>::ResultSuggestionChosen(F handler) const
{
	return ResultSuggestionChosen(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Search::SearchPane, Windows::ApplicationModel::Search::SearchPaneResultSuggestionChosenEventArgs>(handler));
}

template <typename T> void impl_ISearchPane<T>::ResultSuggestionChosen(long long const token) const
{
	check(shim()->remove_ResultSuggestionChosen(token));
}

template <typename T> void impl_ISearchPane<T>::SetLocalContentSuggestionSettings(Windows::ApplicationModel::Search::LocalContentSuggestionSettings const & settings) const
{
	check(shim()->abi_SetLocalContentSuggestionSettings(get(settings)));
}

template <typename T> void impl_ISearchPane<T>::Show() const
{
	check(shim()->abi_ShowOverloadDefault());
}

template <typename T> void impl_ISearchPane<T>::Show(StringReference const & query) const
{
	check(shim()->abi_ShowOverloadWithQuery(get(query)));
}

template <typename T> void impl_ISearchPane<T>::ShowOnKeyboardInput(bool const value) const
{
	check(shim()->put_ShowOnKeyboardInput(value));
}

template <typename T> bool impl_ISearchPane<T>::ShowOnKeyboardInput() const
{
	bool value = {};
	check(shim()->get_ShowOnKeyboardInput(put(value)));
	return value;
}

template <typename T> bool impl_ISearchPane<T>::TrySetQueryText(StringReference const & query) const
{
	bool succeeded = {};
	check(shim()->abi_TrySetQueryText(get(query), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::ApplicationModel::Search::SearchQueryLinguisticDetails impl_ISearchQueryLinguisticDetailsFactory<T>::CreateInstance(Windows::Foundation::Collections::IIterable<String> const & queryTextAlternatives, unsigned const queryTextCompositionStart, unsigned const queryTextCompositionLength) const
{
	Windows::ApplicationModel::Search::SearchQueryLinguisticDetails value = nullptr;
	check(shim()->abi_CreateInstance(get(queryTextAlternatives), queryTextCompositionStart, queryTextCompositionLength, put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISearchQueryLinguisticDetails<T>::QueryTextAlternatives() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_QueryTextAlternatives(put(value)));
	return value;
}

template <typename T> unsigned impl_ISearchQueryLinguisticDetails<T>::QueryTextCompositionStart() const
{
	unsigned value = {};
	check(shim()->get_QueryTextCompositionStart(&value));
	return value;
}

template <typename T> unsigned impl_ISearchQueryLinguisticDetails<T>::QueryTextCompositionLength() const
{
	unsigned value = {};
	check(shim()->get_QueryTextCompositionLength(&value));
	return value;
}

template <typename T> void impl_ISearchSuggestionsRequestDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> bool impl_ISearchSuggestionsRequest<T>::IsCanceled() const
{
	bool value = {};
	check(shim()->get_IsCanceled(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Search::SearchSuggestionCollection impl_ISearchSuggestionsRequest<T>::SearchSuggestionCollection() const
{
	Windows::ApplicationModel::Search::SearchSuggestionCollection collection = nullptr;
	check(shim()->get_SearchSuggestionCollection(put(collection)));
	return collection;
}

template <typename T> Windows::ApplicationModel::Search::SearchSuggestionsRequestDeferral impl_ISearchSuggestionsRequest<T>::GetDeferral() const
{
	Windows::ApplicationModel::Search::SearchSuggestionsRequestDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Store {

template <typename T> void impl_ILicenseChangedEventHandler<T>::Invoke() const
{
	check(shim()->abi_Invoke());
}

template <typename T> Windows::ApplicationModel::Store::LicenseInformation impl_ICurrentApp<T>::LicenseInformation() const
{
	Windows::ApplicationModel::Store::LicenseInformation value = nullptr;
	check(shim()->get_LicenseInformation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_ICurrentApp<T>::LinkUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_LinkUri(put(value)));
	return value;
}

template <typename T> GUID impl_ICurrentApp<T>::AppId() const
{
	GUID value = {};
	check(shim()->get_AppId(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentApp<T>::RequestAppPurchaseAsync(bool const includeReceipt) const
{
	Windows::Foundation::IAsyncOperation<String> requestAppPurchaseOperation;
	check(shim()->abi_RequestAppPurchaseAsync(includeReceipt, put(requestAppPurchaseOperation)));
	return requestAppPurchaseOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentApp<T>::RequestProductPurchaseAsync(StringReference const & productId, bool const includeReceipt) const
{
	Windows::Foundation::IAsyncOperation<String> requestProductPurchaseOperation;
	check(shim()->abi_RequestProductPurchaseAsync(get(productId), includeReceipt, put(requestProductPurchaseOperation)));
	return requestProductPurchaseOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> impl_ICurrentApp<T>::LoadListingInformationAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> loadListingOperation;
	check(shim()->abi_LoadListingInformationAsync(put(loadListingOperation)));
	return loadListingOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentApp<T>::GetAppReceiptAsync() const
{
	Windows::Foundation::IAsyncOperation<String> appReceiptOperation;
	check(shim()->abi_GetAppReceiptAsync(put(appReceiptOperation)));
	return appReceiptOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentApp<T>::GetProductReceiptAsync(StringReference const & productId) const
{
	Windows::Foundation::IAsyncOperation<String> getProductReceiptOperation;
	check(shim()->abi_GetProductReceiptAsync(get(productId), put(getProductReceiptOperation)));
	return getProductReceiptOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Store::FulfillmentResult> impl_ICurrentAppWithConsumables<T>::ReportConsumableFulfillmentAsync(StringReference const & productId, GUID const transactionId) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Store::FulfillmentResult> reportConsumableFulfillmentOperation;
	check(shim()->abi_ReportConsumableFulfillmentAsync(get(productId), transactionId, put(reportConsumableFulfillmentOperation)));
	return reportConsumableFulfillmentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> impl_ICurrentAppWithConsumables<T>::RequestProductPurchaseAsync(StringReference const & productId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> requestProductPurchaseWithResultsOperation;
	check(shim()->abi_RequestProductPurchaseWithResultsAsync(get(productId), put(requestProductPurchaseWithResultsOperation)));
	return requestProductPurchaseWithResultsOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> impl_ICurrentAppWithConsumables<T>::RequestProductPurchaseAsync(StringReference const & productId, StringReference const & offerId, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> requestProductPurchaseWithDisplayPropertiesOperation;
	check(shim()->abi_RequestProductPurchaseWithDisplayPropertiesAsync(get(productId), get(offerId), get(displayProperties), put(requestProductPurchaseWithDisplayPropertiesOperation)));
	return requestProductPurchaseWithDisplayPropertiesOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> impl_ICurrentAppWithConsumables<T>::GetUnfulfilledConsumablesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> getUnfulfilledConsumablesOperation;
	check(shim()->abi_GetUnfulfilledConsumablesAsync(put(getUnfulfilledConsumablesOperation)));
	return getUnfulfilledConsumablesOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentAppWithCampaignId<T>::GetAppPurchaseCampaignIdAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_GetAppPurchaseCampaignIdAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentApp2Statics<T>::GetCustomerPurchaseIdAsync(StringReference const & serviceTicket, StringReference const & publisherUserId) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_GetCustomerPurchaseIdAsync(get(serviceTicket), get(publisherUserId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentApp2Statics<T>::GetCustomerCollectionsIdAsync(StringReference const & serviceTicket, StringReference const & publisherUserId) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_GetCustomerCollectionsIdAsync(get(serviceTicket), get(publisherUserId), put(operation)));
	return operation;
}

template <typename T> Windows::ApplicationModel::Store::LicenseInformation impl_ICurrentAppSimulator<T>::LicenseInformation() const
{
	Windows::ApplicationModel::Store::LicenseInformation value = nullptr;
	check(shim()->get_LicenseInformation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_ICurrentAppSimulator<T>::LinkUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_LinkUri(put(value)));
	return value;
}

template <typename T> GUID impl_ICurrentAppSimulator<T>::AppId() const
{
	GUID value = {};
	check(shim()->get_AppId(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentAppSimulator<T>::RequestAppPurchaseAsync(bool const includeReceipt) const
{
	Windows::Foundation::IAsyncOperation<String> requestAppPurchaseOperation;
	check(shim()->abi_RequestAppPurchaseAsync(includeReceipt, put(requestAppPurchaseOperation)));
	return requestAppPurchaseOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentAppSimulator<T>::RequestProductPurchaseAsync(StringReference const & productId, bool const includeReceipt) const
{
	Windows::Foundation::IAsyncOperation<String> requestProductPurchaseOperation;
	check(shim()->abi_RequestProductPurchaseAsync(get(productId), includeReceipt, put(requestProductPurchaseOperation)));
	return requestProductPurchaseOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> impl_ICurrentAppSimulator<T>::LoadListingInformationAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> loadListingOperation;
	check(shim()->abi_LoadListingInformationAsync(put(loadListingOperation)));
	return loadListingOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentAppSimulator<T>::GetAppReceiptAsync() const
{
	Windows::Foundation::IAsyncOperation<String> appReceiptOperation;
	check(shim()->abi_GetAppReceiptAsync(put(appReceiptOperation)));
	return appReceiptOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentAppSimulator<T>::GetProductReceiptAsync(StringReference const & productId) const
{
	Windows::Foundation::IAsyncOperation<String> getProductReceiptOperation;
	check(shim()->abi_GetProductReceiptAsync(get(productId), put(getProductReceiptOperation)));
	return getProductReceiptOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICurrentAppSimulator<T>::ReloadSimulatorAsync(Windows::Storage::StorageFile const & simulatorSettingsFile) const
{
	Windows::Foundation::IAsyncAction reloadSimulatorOperation;
	check(shim()->abi_ReloadSimulatorAsync(get(simulatorSettingsFile), put(reloadSimulatorOperation)));
	return reloadSimulatorOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICurrentAppSimulatorWithCampaignId<T>::GetAppPurchaseCampaignIdAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_GetAppPurchaseCampaignIdAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Store::FulfillmentResult> impl_ICurrentAppSimulatorWithConsumables<T>::ReportConsumableFulfillmentAsync(StringReference const & productId, GUID const transactionId) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Store::FulfillmentResult> reportConsumableFulfillmentOperation;
	check(shim()->abi_ReportConsumableFulfillmentAsync(get(productId), transactionId, put(reportConsumableFulfillmentOperation)));
	return reportConsumableFulfillmentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> impl_ICurrentAppSimulatorWithConsumables<T>::RequestProductPurchaseAsync(StringReference const & productId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> requestProductPurchaseWithResultsOperation;
	check(shim()->abi_RequestProductPurchaseWithResultsAsync(get(productId), put(requestProductPurchaseWithResultsOperation)));
	return requestProductPurchaseWithResultsOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> impl_ICurrentAppSimulatorWithConsumables<T>::RequestProductPurchaseAsync(StringReference const & productId, StringReference const & offerId, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> requestProductPurchaseWithDisplayPropertiesOperation;
	check(shim()->abi_RequestProductPurchaseWithDisplayPropertiesAsync(get(productId), get(offerId), get(displayProperties), put(requestProductPurchaseWithDisplayPropertiesOperation)));
	return requestProductPurchaseWithDisplayPropertiesOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> impl_ICurrentAppSimulatorWithConsumables<T>::GetUnfulfilledConsumablesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> getUnfulfilledConsumablesOperation;
	check(shim()->abi_GetUnfulfilledConsumablesAsync(put(getUnfulfilledConsumablesOperation)));
	return getUnfulfilledConsumablesOperation;
}

template <typename T> Windows::ApplicationModel::Store::ProductPurchaseStatus impl_IPurchaseResults<T>::Status() const
{
	Windows::ApplicationModel::Store::ProductPurchaseStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> GUID impl_IPurchaseResults<T>::TransactionId() const
{
	GUID value = {};
	check(shim()->get_TransactionId(&value));
	return value;
}

template <typename T> String impl_IPurchaseResults<T>::ReceiptXml() const
{
	String value;
	check(shim()->get_ReceiptXml(put(value)));
	return value;
}

template <typename T> String impl_IPurchaseResults<T>::OfferId() const
{
	String value;
	check(shim()->get_OfferId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Store::ProductLicense> impl_ILicenseInformation<T>::ProductLicenses() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Store::ProductLicense> value;
	check(shim()->get_ProductLicenses(put(value)));
	return value;
}

template <typename T> bool impl_ILicenseInformation<T>::IsActive() const
{
	bool value = {};
	check(shim()->get_IsActive(put(value)));
	return value;
}

template <typename T> bool impl_ILicenseInformation<T>::IsTrial() const
{
	bool value = {};
	check(shim()->get_IsTrial(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ILicenseInformation<T>::ExpirationDate() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_ExpirationDate(&value));
	return value;
}

template <typename T> long long impl_ILicenseInformation<T>::LicenseChanged(Windows::ApplicationModel::Store::ILicenseChangedEventHandler const & handler) const
{
	long long cookie = {};
	check(shim()->add_LicenseChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ILicenseInformation<T>::LicenseChanged(F handler) const
{
	return LicenseChanged(Windows::ApplicationModel::Store::LicenseChangedEventHandler(handler));
}

template <typename T> void impl_ILicenseInformation<T>::LicenseChanged(long long const cookie) const
{
	check(shim()->remove_LicenseChanged(cookie));
}

template <typename T> String impl_IProductLicense<T>::ProductId() const
{
	String value;
	check(shim()->get_ProductId(put(value)));
	return value;
}

template <typename T> bool impl_IProductLicense<T>::IsActive() const
{
	bool value = {};
	check(shim()->get_IsActive(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IProductLicense<T>::ExpirationDate() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_ExpirationDate(&value));
	return value;
}

template <typename T> String impl_IListingInformation<T>::CurrentMarket() const
{
	String value;
	check(shim()->get_CurrentMarket(put(value)));
	return value;
}

template <typename T> String impl_IListingInformation<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Store::ProductListing> impl_IListingInformation<T>::ProductListings() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::Store::ProductListing> value;
	check(shim()->get_ProductListings(put(value)));
	return value;
}

template <typename T> String impl_IListingInformation<T>::FormattedPrice() const
{
	String value;
	check(shim()->get_FormattedPrice(put(value)));
	return value;
}

template <typename T> String impl_IListingInformation<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> unsigned impl_IListingInformation<T>::AgeRating() const
{
	unsigned value = {};
	check(shim()->get_AgeRating(&value));
	return value;
}

template <typename T> String impl_IListingInformation2<T>::FormattedBasePrice() const
{
	String value;
	check(shim()->get_FormattedBasePrice(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IListingInformation2<T>::SaleEndDate() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_SaleEndDate(&value));
	return value;
}

template <typename T> bool impl_IListingInformation2<T>::IsOnSale() const
{
	bool value = {};
	check(shim()->get_IsOnSale(put(value)));
	return value;
}

template <typename T> String impl_IListingInformation2<T>::CurrencyCode() const
{
	String value;
	check(shim()->get_CurrencyCode(put(value)));
	return value;
}

template <typename T> String impl_IProductListing<T>::ProductId() const
{
	String value;
	check(shim()->get_ProductId(put(value)));
	return value;
}

template <typename T> String impl_IProductListing<T>::FormattedPrice() const
{
	String value;
	check(shim()->get_FormattedPrice(put(value)));
	return value;
}

template <typename T> String impl_IProductListing<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Store::ProductType impl_IProductListingWithConsumables<T>::ProductType() const
{
	Windows::ApplicationModel::Store::ProductType value = {};
	check(shim()->get_ProductType(&value));
	return value;
}

template <typename T> String impl_IProductListing2<T>::FormattedBasePrice() const
{
	String value;
	check(shim()->get_FormattedBasePrice(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IProductListing2<T>::SaleEndDate() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_SaleEndDate(&value));
	return value;
}

template <typename T> bool impl_IProductListing2<T>::IsOnSale() const
{
	bool value = {};
	check(shim()->get_IsOnSale(put(value)));
	return value;
}

template <typename T> String impl_IProductListing2<T>::CurrencyCode() const
{
	String value;
	check(shim()->get_CurrencyCode(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> impl_ICurrentAppStaticsWithFiltering<T>::LoadListingInformationByProductIdsAsync(Windows::Foundation::Collections::IIterable<String> const & productIds) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> loadListingOperation;
	check(shim()->abi_LoadListingInformationByProductIdsAsync(get(productIds), put(loadListingOperation)));
	return loadListingOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> impl_ICurrentAppStaticsWithFiltering<T>::LoadListingInformationByKeywordsAsync(Windows::Foundation::Collections::IIterable<String> const & keywords) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> loadListingOperation;
	check(shim()->abi_LoadListingInformationByKeywordsAsync(get(keywords), put(loadListingOperation)));
	return loadListingOperation;
}

template <typename T> void impl_ICurrentAppStaticsWithFiltering<T>::ReportProductFulfillment(StringReference const & productId) const
{
	check(shim()->abi_ReportProductFulfillment(get(productId)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> impl_ICurrentAppSimulatorStaticsWithFiltering<T>::LoadListingInformationByProductIdsAsync(Windows::Foundation::Collections::IIterable<String> const & productIds) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> loadListingOperation;
	check(shim()->abi_LoadListingInformationByProductIdsAsync(get(productIds), put(loadListingOperation)));
	return loadListingOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> impl_ICurrentAppSimulatorStaticsWithFiltering<T>::LoadListingInformationByKeywordsAsync(Windows::Foundation::Collections::IIterable<String> const & keywords) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> loadListingOperation;
	check(shim()->abi_LoadListingInformationByKeywordsAsync(get(keywords), put(loadListingOperation)));
	return loadListingOperation;
}

template <typename T> bool impl_IProductLicenseWithFulfillment<T>::IsConsumable() const
{
	bool value = {};
	check(shim()->get_IsConsumable(put(value)));
	return value;
}

template <typename T> String impl_IProductListingWithMetadata<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IIterable<String> impl_IProductListingWithMetadata<T>::Keywords() const
{
	Windows::Foundation::Collections::IIterable<String> value;
	check(shim()->get_Keywords(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Store::ProductType impl_IProductListingWithMetadata<T>::ProductType() const
{
	Windows::ApplicationModel::Store::ProductType value = {};
	check(shim()->get_ProductType(&value));
	return value;
}

template <typename T> String impl_IProductListingWithMetadata<T>::Tag() const
{
	String value;
	check(shim()->get_Tag(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IProductListingWithMetadata<T>::ImageUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ImageUri(put(value)));
	return value;
}

template <typename T> String impl_IUnfulfilledConsumable<T>::ProductId() const
{
	String value;
	check(shim()->get_ProductId(put(value)));
	return value;
}

template <typename T> GUID impl_IUnfulfilledConsumable<T>::TransactionId() const
{
	GUID value = {};
	check(shim()->get_TransactionId(&value));
	return value;
}

template <typename T> String impl_IUnfulfilledConsumable<T>::OfferId() const
{
	String value;
	check(shim()->get_OfferId(put(value)));
	return value;
}

template <typename T> String impl_IProductPurchaseDisplayProperties<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IProductPurchaseDisplayProperties<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> String impl_IProductPurchaseDisplayProperties<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IProductPurchaseDisplayProperties<T>::Description(StringReference const & value) const
{
	check(shim()->put_Description(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IProductPurchaseDisplayProperties<T>::Image() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Image(put(value)));
	return value;
}

template <typename T> void impl_IProductPurchaseDisplayProperties<T>::Image(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Image(get(value)));
}

template <typename T> Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties impl_IProductPurchaseDisplayPropertiesFactory<T>::CreateProductPurchaseDisplayProperties(StringReference const & name) const
{
	Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties displayProperties = nullptr;
	check(shim()->abi_CreateProductPurchaseDisplayProperties(get(name), put(displayProperties)));
	return displayProperties;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Store { namespace Preview {

template <typename T> String impl_IStorePreviewProductInfo<T>::ProductId() const
{
	String value;
	check(shim()->get_ProductId(put(value)));
	return value;
}

template <typename T> String impl_IStorePreviewProductInfo<T>::ProductType() const
{
	String value;
	check(shim()->get_ProductType(put(value)));
	return value;
}

template <typename T> String impl_IStorePreviewProductInfo<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> String impl_IStorePreviewProductInfo<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo> impl_IStorePreviewProductInfo<T>::SkuInfoList() const
{
	Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::Preview::StorePreviewSkuInfo> value;
	check(shim()->get_SkuInfoList(put(value)));
	return value;
}

template <typename T> String impl_IStorePreviewSkuInfo<T>::ProductId() const
{
	String value;
	check(shim()->get_ProductId(put(value)));
	return value;
}

template <typename T> String impl_IStorePreviewSkuInfo<T>::SkuId() const
{
	String value;
	check(shim()->get_SkuId(put(value)));
	return value;
}

template <typename T> String impl_IStorePreviewSkuInfo<T>::SkuType() const
{
	String value;
	check(shim()->get_SkuType(put(value)));
	return value;
}

template <typename T> String impl_IStorePreviewSkuInfo<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> String impl_IStorePreviewSkuInfo<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> String impl_IStorePreviewSkuInfo<T>::CustomDeveloperData() const
{
	String value;
	check(shim()->get_CustomDeveloperData(put(value)));
	return value;
}

template <typename T> String impl_IStorePreviewSkuInfo<T>::CurrencyCode() const
{
	String value;
	check(shim()->get_CurrencyCode(put(value)));
	return value;
}

template <typename T> String impl_IStorePreviewSkuInfo<T>::FormattedListPrice() const
{
	String value;
	check(shim()->get_FormattedListPrice(put(value)));
	return value;
}

template <typename T> String impl_IStorePreviewSkuInfo<T>::ExtendedData() const
{
	String value;
	check(shim()->get_ExtendedData(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Store::Preview::StorePreviewProductPurchaseStatus impl_IStorePreviewPurchaseResults<T>::ProductPurchaseStatus() const
{
	Windows::ApplicationModel::Store::Preview::StorePreviewProductPurchaseStatus value = {};
	check(shim()->get_ProductPurchaseStatus(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults> impl_IStorePreview<T>::RequestProductPurchaseByProductIdAndSkuIdAsync(StringReference const & productId, StringReference const & skuId) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults> requestPurchaseBySkuIdOperation;
	check(shim()->abi_RequestProductPurchaseByProductIdAndSkuIdAsync(get(productId), get(skuId), put(requestPurchaseBySkuIdOperation)));
	return requestPurchaseBySkuIdOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo>> impl_IStorePreview<T>::LoadAddOnProductInfosAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo>> loadAddOnProductInfosOperation;
	check(shim()->abi_LoadAddOnProductInfosAsync(put(loadAddOnProductInfosOperation)));
	return loadAddOnProductInfosOperation;
}

template <typename T> String impl_IStoreHardwareManufacturerInfo<T>::HardwareManufacturerId() const
{
	String value;
	check(shim()->get_HardwareManufacturerId(put(value)));
	return value;
}

template <typename T> String impl_IStoreHardwareManufacturerInfo<T>::StoreContentModifierId() const
{
	String value;
	check(shim()->get_StoreContentModifierId(put(value)));
	return value;
}

template <typename T> String impl_IStoreHardwareManufacturerInfo<T>::ModelName() const
{
	String value;
	check(shim()->get_ModelName(put(value)));
	return value;
}

template <typename T> String impl_IStoreHardwareManufacturerInfo<T>::ManufacturerName() const
{
	String value;
	check(shim()->get_ManufacturerName(put(value)));
	return value;
}

template <typename T> void impl_IStoreConfigurationStatics<T>::SetSystemConfiguration(StringReference const & catalogHardwareManufacturerId, StringReference const & catalogStoreContentModifierId, Windows::Foundation::DateTime const & systemConfigurationExpiration, StringReference const & catalogHardwareDescriptor) const
{
	check(shim()->abi_SetSystemConfiguration(get(catalogHardwareManufacturerId), get(catalogStoreContentModifierId), systemConfigurationExpiration, get(catalogHardwareDescriptor)));
}

template <typename T> void impl_IStoreConfigurationStatics<T>::SetMobileOperatorConfiguration(StringReference const & mobileOperatorId, unsigned const appDownloadLimitInMegabytes, unsigned const updateDownloadLimitInMegabytes) const
{
	check(shim()->abi_SetMobileOperatorConfiguration(get(mobileOperatorId), appDownloadLimitInMegabytes, updateDownloadLimitInMegabytes));
}

template <typename T> void impl_IStoreConfigurationStatics<T>::SetStoreWebAccountId(StringReference const & webAccountId) const
{
	check(shim()->abi_SetStoreWebAccountId(get(webAccountId)));
}

template <typename T> bool impl_IStoreConfigurationStatics<T>::IsStoreWebAccountId(StringReference const & webAccountId) const
{
	bool value = {};
	check(shim()->abi_IsStoreWebAccountId(get(webAccountId), put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo impl_IStoreConfigurationStatics<T>::HardwareManufacturerInfo() const
{
	Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo value = nullptr;
	check(shim()->get_HardwareManufacturerInfo(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<winrt::Windows::ApplicationModel::Store::Preview::StoreSystemFeature>> impl_IStoreConfigurationStatics<T>::FilterUnsupportedSystemFeaturesAsync(Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::Store::Preview::StoreSystemFeature> const & systemFeatures) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<winrt::Windows::ApplicationModel::Store::Preview::StoreSystemFeature>> operation;
	check(shim()->abi_FilterUnsupportedSystemFeaturesAsync(get(systemFeatures), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IStoreConfigurationStatics2<T>::PurchasePromptingPolicy() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_PurchasePromptingPolicy(put(value)));
	return value;
}

template <typename T> void impl_IStoreConfigurationStatics2<T>::PurchasePromptingPolicy(Windows::Foundation::IReference<unsigned> const & value) const
{
	check(shim()->put_PurchasePromptingPolicy(get(value)));
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace UserDataAccounts {

template <typename T> String impl_IUserDataAccount<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IUserDataAccount<T>::UserDisplayName() const
{
	String value;
	check(shim()->get_UserDisplayName(put(value)));
	return value;
}

template <typename T> void impl_IUserDataAccount<T>::UserDisplayName(StringReference const & value) const
{
	check(shim()->put_UserDisplayName(get(value)));
}

template <typename T> Windows::ApplicationModel::UserDataAccounts::UserDataAccountOtherAppReadAccess impl_IUserDataAccount<T>::OtherAppReadAccess() const
{
	Windows::ApplicationModel::UserDataAccounts::UserDataAccountOtherAppReadAccess value = {};
	check(shim()->get_OtherAppReadAccess(&value));
	return value;
}

template <typename T> void impl_IUserDataAccount<T>::OtherAppReadAccess(Windows::ApplicationModel::UserDataAccounts::UserDataAccountOtherAppReadAccess const value) const
{
	check(shim()->put_OtherAppReadAccess(value));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IUserDataAccount<T>::Icon() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_Icon(put(value)));
	return value;
}

template <typename T> String impl_IUserDataAccount<T>::DeviceAccountTypeId() const
{
	String value;
	check(shim()->get_DeviceAccountTypeId(put(value)));
	return value;
}

template <typename T> String impl_IUserDataAccount<T>::PackageFamilyName() const
{
	String value;
	check(shim()->get_PackageFamilyName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUserDataAccount<T>::SaveAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_SaveAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUserDataAccount<T>::DeleteAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_DeleteAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentCalendar>> impl_IUserDataAccount<T>::FindAppointmentCalendarsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Appointments::AppointmentCalendar>> result;
	check(shim()->abi_FindAppointmentCalendarsAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailMailbox>> impl_IUserDataAccount<T>::FindEmailMailboxesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Email::EmailMailbox>> result;
	check(shim()->abi_FindEmailMailboxesAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactList>> impl_IUserDataAccount<T>::FindContactListsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactList>> result;
	check(shim()->abi_FindContactListsAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotationList>> impl_IUserDataAccount<T>::FindContactAnnotationListsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Contacts::ContactAnnotationList>> result;
	check(shim()->abi_FindContactAnnotationListsAsync(put(result)));
	return result;
}

template <typename T> String impl_IUserDataAccount2<T>::EnterpriseId() const
{
	String value;
	check(shim()->get_EnterpriseId(put(value)));
	return value;
}

template <typename T> bool impl_IUserDataAccount2<T>::IsProtectedUnderLock() const
{
	bool value = {};
	check(shim()->get_IsProtectedUnderLock(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::UserDataAccounts::UserDataAccount>> impl_IUserDataAccountStore<T>::FindAccountsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::UserDataAccounts::UserDataAccount>> result;
	check(shim()->abi_FindAccountsAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::UserDataAccounts::UserDataAccount> impl_IUserDataAccountStore<T>::GetAccountAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::UserDataAccounts::UserDataAccount> result;
	check(shim()->abi_GetAccountAsync(get(id), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::UserDataAccounts::UserDataAccount> impl_IUserDataAccountStore<T>::CreateAccountAsync(StringReference const & userDisplayName) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::UserDataAccounts::UserDataAccount> result;
	check(shim()->abi_CreateAccountAsync(get(userDisplayName), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore> impl_IUserDataAccountManagerStatics<T>::RequestStoreAsync(Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreAccessType const storeAccessType) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore> result;
	check(shim()->abi_RequestStoreAsync(storeAccessType, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IUserDataAccountManagerStatics<T>::ShowAddAccountAsync(Windows::ApplicationModel::UserDataAccounts::UserDataAccountContentKinds const contentKinds) const
{
	Windows::Foundation::IAsyncOperation<String> result;
	check(shim()->abi_ShowAddAccountAsync(contentKinds, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUserDataAccountManagerStatics<T>::ShowAccountSettingsAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_ShowAccountSettingsAsync(get(id), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUserDataAccountManagerStatics<T>::ShowAccountErrorResolverAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_ShowAccountErrorResolverAsync(get(id), put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace VoiceCommands {

template <typename T> Windows::Foundation::IAsyncAction impl_IVoiceCommandDefinitionManagerStatics<T>::InstallCommandDefinitionsFromStorageFileAsync(Windows::Storage::StorageFile const & file) const
{
	Windows::Foundation::IAsyncAction installAction;
	check(shim()->abi_InstallCommandDefinitionsFromStorageFileAsync(get(file), put(installAction)));
	return installAction;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition> impl_IVoiceCommandDefinitionManagerStatics<T>::InstalledCommandDefinitions() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition> voiceCommandDefinitions;
	check(shim()->get_InstalledCommandDefinitions(put(voiceCommandDefinitions)));
	return voiceCommandDefinitions;
}

template <typename T> String impl_IVoiceCommandDefinition<T>::Language() const
{
	String value;
	check(shim()->get_Language(put(value)));
	return value;
}

template <typename T> String impl_IVoiceCommandDefinition<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IVoiceCommandDefinition<T>::SetPhraseListAsync(StringReference const & phraseListName, Windows::Foundation::Collections::IIterable<String> const & phraseList) const
{
	Windows::Foundation::IAsyncAction updateAction;
	check(shim()->abi_SetPhraseListAsync(get(phraseListName), get(phraseList), put(updateAction)));
	return updateAction;
}

template <typename T> String impl_IVoiceCommandContentTile<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IVoiceCommandContentTile<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> String impl_IVoiceCommandContentTile<T>::TextLine1() const
{
	String value;
	check(shim()->get_TextLine1(put(value)));
	return value;
}

template <typename T> void impl_IVoiceCommandContentTile<T>::TextLine1(StringReference const & value) const
{
	check(shim()->put_TextLine1(get(value)));
}

template <typename T> String impl_IVoiceCommandContentTile<T>::TextLine2() const
{
	String value;
	check(shim()->get_TextLine2(put(value)));
	return value;
}

template <typename T> void impl_IVoiceCommandContentTile<T>::TextLine2(StringReference const & value) const
{
	check(shim()->put_TextLine2(get(value)));
}

template <typename T> String impl_IVoiceCommandContentTile<T>::TextLine3() const
{
	String value;
	check(shim()->get_TextLine3(put(value)));
	return value;
}

template <typename T> void impl_IVoiceCommandContentTile<T>::TextLine3(StringReference const & value) const
{
	check(shim()->put_TextLine3(get(value)));
}

template <typename T> Windows::Storage::IStorageFile impl_IVoiceCommandContentTile<T>::Image() const
{
	Windows::Storage::IStorageFile value;
	check(shim()->get_Image(put(value)));
	return value;
}

template <typename T> void impl_IVoiceCommandContentTile<T>::Image(Windows::Storage::IStorageFile const & value) const
{
	check(shim()->put_Image(get(value)));
}

template <typename T> IInspectable impl_IVoiceCommandContentTile<T>::AppContext() const
{
	IInspectable value;
	check(shim()->get_AppContext(put(value)));
	return value;
}

template <typename T> void impl_IVoiceCommandContentTile<T>::AppContext(IInspectable const & value) const
{
	check(shim()->put_AppContext(get(value)));
}

template <typename T> String impl_IVoiceCommandContentTile<T>::AppLaunchArgument() const
{
	String value;
	check(shim()->get_AppLaunchArgument(put(value)));
	return value;
}

template <typename T> void impl_IVoiceCommandContentTile<T>::AppLaunchArgument(StringReference const & value) const
{
	check(shim()->put_AppLaunchArgument(get(value)));
}

template <typename T> Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTileType impl_IVoiceCommandContentTile<T>::ContentTileType() const
{
	Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTileType value = {};
	check(shim()->get_ContentTileType(&value));
	return value;
}

template <typename T> void impl_IVoiceCommandContentTile<T>::ContentTileType(Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTileType const value) const
{
	check(shim()->put_ContentTileType(value));
}

template <typename T> String impl_IVoiceCommandUserMessage<T>::DisplayMessage() const
{
	String value;
	check(shim()->get_DisplayMessage(put(value)));
	return value;
}

template <typename T> void impl_IVoiceCommandUserMessage<T>::DisplayMessage(StringReference const & value) const
{
	check(shim()->put_DisplayMessage(get(value)));
}

template <typename T> String impl_IVoiceCommandUserMessage<T>::SpokenMessage() const
{
	String value;
	check(shim()->get_SpokenMessage(put(value)));
	return value;
}

template <typename T> void impl_IVoiceCommandUserMessage<T>::SpokenMessage(StringReference const & value) const
{
	check(shim()->put_SpokenMessage(get(value)));
}

template <typename T> String impl_IVoiceCommand<T>::CommandName() const
{
	String value;
	check(shim()->get_CommandName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::Foundation::Collections::IVectorView<String>> impl_IVoiceCommand<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::Foundation::Collections::IVectorView<String>> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionResult impl_IVoiceCommand<T>::SpeechRecognitionResult() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionResult value = nullptr;
	check(shim()->get_SpeechRecognitionResult(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletionReason impl_IVoiceCommandCompletedEventArgs<T>::Reason() const
{
	Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletionReason value = {};
	check(shim()->get_Reason(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile impl_IVoiceCommandDisambiguationResult<T>::SelectedItem() const
{
	Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile value = nullptr;
	check(shim()->get_SelectedItem(put(value)));
	return value;
}

template <typename T> bool impl_IVoiceCommandConfirmationResult<T>::Confirmed() const
{
	bool value = {};
	check(shim()->get_Confirmed(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::VoiceCommands::VoiceCommand> impl_IVoiceCommandServiceConnection<T>::GetVoiceCommandAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::VoiceCommands::VoiceCommand> operation;
	check(shim()->abi_GetVoiceCommandAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::VoiceCommands::VoiceCommandConfirmationResult> impl_IVoiceCommandServiceConnection<T>::RequestConfirmationAsync(Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse const & response) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::VoiceCommands::VoiceCommandConfirmationResult> operation;
	check(shim()->abi_RequestConfirmationAsync(get(response), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::VoiceCommands::VoiceCommandDisambiguationResult> impl_IVoiceCommandServiceConnection<T>::RequestDisambiguationAsync(Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse const & response) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::VoiceCommands::VoiceCommandDisambiguationResult> operation;
	check(shim()->abi_RequestDisambiguationAsync(get(response), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IVoiceCommandServiceConnection<T>::ReportProgressAsync(Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse const & response) const
{
	Windows::Foundation::IAsyncAction action;
	check(shim()->abi_ReportProgressAsync(get(response), put(action)));
	return action;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IVoiceCommandServiceConnection<T>::ReportSuccessAsync(Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse const & response) const
{
	Windows::Foundation::IAsyncAction action;
	check(shim()->abi_ReportSuccessAsync(get(response), put(action)));
	return action;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IVoiceCommandServiceConnection<T>::ReportFailureAsync(Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse const & response) const
{
	Windows::Foundation::IAsyncAction action;
	check(shim()->abi_ReportFailureAsync(get(response), put(action)));
	return action;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IVoiceCommandServiceConnection<T>::RequestAppLaunchAsync(Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse const & response) const
{
	Windows::Foundation::IAsyncAction action;
	check(shim()->abi_RequestAppLaunchAsync(get(response), put(action)));
	return action;
}

template <typename T> Windows::Globalization::Language impl_IVoiceCommandServiceConnection<T>::Language() const
{
	Windows::Globalization::Language language = nullptr;
	check(shim()->get_Language(put(language)));
	return language;
}

template <typename T> long long impl_IVoiceCommandServiceConnection<T>::VoiceCommandCompleted(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection, Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_VoiceCommandCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVoiceCommandServiceConnection<T>::VoiceCommandCompleted(F handler) const
{
	return VoiceCommandCompleted(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection, Windows::ApplicationModel::VoiceCommands::VoiceCommandCompletedEventArgs>(handler));
}

template <typename T> void impl_IVoiceCommandServiceConnection<T>::VoiceCommandCompleted(long long const token) const
{
	check(shim()->remove_VoiceCommandCompleted(token));
}

template <typename T> Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection impl_IVoiceCommandServiceConnectionStatics<T>::FromAppServiceTriggerDetails(Windows::ApplicationModel::AppService::AppServiceTriggerDetails const & triggerDetails) const
{
	Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection value = nullptr;
	check(shim()->abi_FromAppServiceTriggerDetails(get(triggerDetails), put(value)));
	return value;
}

template <typename T> unsigned impl_IVoiceCommandResponseStatics<T>::MaxSupportedVoiceCommandContentTiles() const
{
	unsigned value = {};
	check(shim()->get_MaxSupportedVoiceCommandContentTiles(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse impl_IVoiceCommandResponseStatics<T>::CreateResponse(Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage const & userMessage) const
{
	Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse response = nullptr;
	check(shim()->abi_CreateResponse(get(userMessage), put(response)));
	return response;
}

template <typename T> Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse impl_IVoiceCommandResponseStatics<T>::CreateResponse(Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage const & message, Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile> const & contentTiles) const
{
	Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse response = nullptr;
	check(shim()->abi_CreateResponseWithTiles(get(message), get(contentTiles), put(response)));
	return response;
}

template <typename T> Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse impl_IVoiceCommandResponseStatics<T>::CreateResponseForPrompt(Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage const & message, Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage const & repeatMessage) const
{
	Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse response = nullptr;
	check(shim()->abi_CreateResponseForPrompt(get(message), get(repeatMessage), put(response)));
	return response;
}

template <typename T> Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse impl_IVoiceCommandResponseStatics<T>::CreateResponseForPrompt(Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage const & message, Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage const & repeatMessage, Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile> const & contentTiles) const
{
	Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse response = nullptr;
	check(shim()->abi_CreateResponseForPromptWithTiles(get(message), get(repeatMessage), get(contentTiles), put(response)));
	return response;
}

template <typename T> Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage impl_IVoiceCommandResponse<T>::Message() const
{
	Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage value = nullptr;
	check(shim()->get_Message(put(value)));
	return value;
}

template <typename T> void impl_IVoiceCommandResponse<T>::Message(Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage const & value) const
{
	check(shim()->put_Message(get(value)));
}

template <typename T> Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage impl_IVoiceCommandResponse<T>::RepeatMessage() const
{
	Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage value = nullptr;
	check(shim()->get_RepeatMessage(put(value)));
	return value;
}

template <typename T> void impl_IVoiceCommandResponse<T>::RepeatMessage(Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage const & value) const
{
	check(shim()->put_RepeatMessage(get(value)));
}

template <typename T> String impl_IVoiceCommandResponse<T>::AppLaunchArgument() const
{
	String value;
	check(shim()->get_AppLaunchArgument(put(value)));
	return value;
}

template <typename T> void impl_IVoiceCommandResponse<T>::AppLaunchArgument(StringReference const & value) const
{
	check(shim()->put_AppLaunchArgument(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile> impl_IVoiceCommandResponse<T>::VoiceCommandContentTiles() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile> value;
	check(shim()->get_VoiceCommandContentTiles(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Wallet {

template <typename T> Windows::ApplicationModel::Wallet::WalletBarcodeSymbology impl_IWalletBarcode<T>::Symbology() const
{
	Windows::ApplicationModel::Wallet::WalletBarcodeSymbology value = {};
	check(shim()->get_Symbology(&value));
	return value;
}

template <typename T> String impl_IWalletBarcode<T>::Value() const
{
	String value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamReference> impl_IWalletBarcode<T>::GetImageAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamReference> operation;
	check(shim()->abi_GetImageAsync(put(operation)));
	return operation;
}

template <typename T> String impl_IWalletItemCustomProperty<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IWalletItemCustomProperty<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> String impl_IWalletItemCustomProperty<T>::Value() const
{
	String value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IWalletItemCustomProperty<T>::Value(StringReference const & value) const
{
	check(shim()->put_Value(get(value)));
}

template <typename T> bool impl_IWalletItemCustomProperty<T>::AutoDetectLinks() const
{
	bool value = {};
	check(shim()->get_AutoDetectLinks(put(value)));
	return value;
}

template <typename T> void impl_IWalletItemCustomProperty<T>::AutoDetectLinks(bool const value) const
{
	check(shim()->put_AutoDetectLinks(value));
}

template <typename T> Windows::ApplicationModel::Wallet::WalletDetailViewPosition impl_IWalletItemCustomProperty<T>::DetailViewPosition() const
{
	Windows::ApplicationModel::Wallet::WalletDetailViewPosition value = {};
	check(shim()->get_DetailViewPosition(&value));
	return value;
}

template <typename T> void impl_IWalletItemCustomProperty<T>::DetailViewPosition(Windows::ApplicationModel::Wallet::WalletDetailViewPosition const value) const
{
	check(shim()->put_DetailViewPosition(value));
}

template <typename T> Windows::ApplicationModel::Wallet::WalletSummaryViewPosition impl_IWalletItemCustomProperty<T>::SummaryViewPosition() const
{
	Windows::ApplicationModel::Wallet::WalletSummaryViewPosition value = {};
	check(shim()->get_SummaryViewPosition(&value));
	return value;
}

template <typename T> void impl_IWalletItemCustomProperty<T>::SummaryViewPosition(Windows::ApplicationModel::Wallet::WalletSummaryViewPosition const value) const
{
	check(shim()->put_SummaryViewPosition(value));
}

template <typename T> String impl_IWalletVerb<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IWalletVerb<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> String impl_IWalletItem<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::DisplayName(StringReference const & value) const
{
	check(shim()->put_DisplayName(get(value)));
}

template <typename T> String impl_IWalletItem<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> bool impl_IWalletItem<T>::IsAcknowledged() const
{
	bool value = {};
	check(shim()->get_IsAcknowledged(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::IsAcknowledged(bool const value) const
{
	check(shim()->put_IsAcknowledged(value));
}

template <typename T> String impl_IWalletItem<T>::IssuerDisplayName() const
{
	String value;
	check(shim()->get_IssuerDisplayName(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::IssuerDisplayName(StringReference const & value) const
{
	check(shim()->put_IssuerDisplayName(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IWalletItem<T>::LastUpdated() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_LastUpdated(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::LastUpdated(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_LastUpdated(get(value)));
}

template <typename T> Windows::ApplicationModel::Wallet::WalletItemKind impl_IWalletItem<T>::Kind() const
{
	Windows::ApplicationModel::Wallet::WalletItemKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::Wallet::WalletBarcode impl_IWalletItem<T>::Barcode() const
{
	Windows::ApplicationModel::Wallet::WalletBarcode value = nullptr;
	check(shim()->get_Barcode(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::Barcode(Windows::ApplicationModel::Wallet::WalletBarcode const & value) const
{
	check(shim()->put_Barcode(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IWalletItem<T>::ExpirationDate() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_ExpirationDate(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::ExpirationDate(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_ExpirationDate(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IWalletItem<T>::Logo159x159() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_Logo159x159(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::Logo159x159(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_Logo159x159(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IWalletItem<T>::Logo336x336() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_Logo336x336(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::Logo336x336(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_Logo336x336(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IWalletItem<T>::Logo99x99() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_Logo99x99(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::Logo99x99(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_Logo99x99(get(value)));
}

template <typename T> String impl_IWalletItem<T>::DisplayMessage() const
{
	String value;
	check(shim()->get_DisplayMessage(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::DisplayMessage(StringReference const & value) const
{
	check(shim()->put_DisplayMessage(get(value)));
}

template <typename T> bool impl_IWalletItem<T>::IsDisplayMessageLaunchable() const
{
	bool value = {};
	check(shim()->get_IsDisplayMessageLaunchable(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::IsDisplayMessageLaunchable(bool const value) const
{
	check(shim()->put_IsDisplayMessageLaunchable(value));
}

template <typename T> String impl_IWalletItem<T>::LogoText() const
{
	String value;
	check(shim()->get_LogoText(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::LogoText(StringReference const & value) const
{
	check(shim()->put_LogoText(get(value)));
}

template <typename T> Windows::UI::Color impl_IWalletItem<T>::HeaderColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_HeaderColor(&value));
	return value;
}

template <typename T> void impl_IWalletItem<T>::HeaderColor(Windows::UI::Color const & value) const
{
	check(shim()->put_HeaderColor(value));
}

template <typename T> Windows::UI::Color impl_IWalletItem<T>::BodyColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_BodyColor(&value));
	return value;
}

template <typename T> void impl_IWalletItem<T>::BodyColor(Windows::UI::Color const & value) const
{
	check(shim()->put_BodyColor(value));
}

template <typename T> Windows::UI::Color impl_IWalletItem<T>::HeaderFontColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_HeaderFontColor(&value));
	return value;
}

template <typename T> void impl_IWalletItem<T>::HeaderFontColor(Windows::UI::Color const & value) const
{
	check(shim()->put_HeaderFontColor(value));
}

template <typename T> Windows::UI::Color impl_IWalletItem<T>::BodyFontColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_BodyFontColor(&value));
	return value;
}

template <typename T> void impl_IWalletItem<T>::BodyFontColor(Windows::UI::Color const & value) const
{
	check(shim()->put_BodyFontColor(value));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IWalletItem<T>::HeaderBackgroundImage() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_HeaderBackgroundImage(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::HeaderBackgroundImage(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_HeaderBackgroundImage(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IWalletItem<T>::BodyBackgroundImage() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_BodyBackgroundImage(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::BodyBackgroundImage(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_BodyBackgroundImage(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IWalletItem<T>::LogoImage() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_LogoImage(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::LogoImage(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_LogoImage(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IWalletItem<T>::PromotionalImage() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_PromotionalImage(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::PromotionalImage(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_PromotionalImage(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IWalletItem<T>::RelevantDate() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_RelevantDate(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::RelevantDate(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_RelevantDate(get(value)));
}

template <typename T> String impl_IWalletItem<T>::RelevantDateDisplayMessage() const
{
	String value;
	check(shim()->get_RelevantDateDisplayMessage(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::RelevantDateDisplayMessage(StringReference const & value) const
{
	check(shim()->put_RelevantDateDisplayMessage(get(value)));
}

template <typename T> Windows::Foundation::Collections::IMap<String, Windows::ApplicationModel::Wallet::WalletTransaction> impl_IWalletItem<T>::TransactionHistory() const
{
	Windows::Foundation::Collections::IMap<String, Windows::ApplicationModel::Wallet::WalletTransaction> value;
	check(shim()->get_TransactionHistory(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<String, Windows::ApplicationModel::Wallet::WalletRelevantLocation> impl_IWalletItem<T>::RelevantLocations() const
{
	Windows::Foundation::Collections::IMap<String, Windows::ApplicationModel::Wallet::WalletRelevantLocation> value;
	check(shim()->get_RelevantLocations(put(value)));
	return value;
}

template <typename T> bool impl_IWalletItem<T>::IsMoreTransactionHistoryLaunchable() const
{
	bool value = {};
	check(shim()->get_IsMoreTransactionHistoryLaunchable(put(value)));
	return value;
}

template <typename T> void impl_IWalletItem<T>::IsMoreTransactionHistoryLaunchable(bool const value) const
{
	check(shim()->put_IsMoreTransactionHistoryLaunchable(value));
}

template <typename T> Windows::Foundation::Collections::IMap<String, Windows::ApplicationModel::Wallet::WalletItemCustomProperty> impl_IWalletItem<T>::DisplayProperties() const
{
	Windows::Foundation::Collections::IMap<String, Windows::ApplicationModel::Wallet::WalletItemCustomProperty> value;
	check(shim()->get_DisplayProperties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<String, Windows::ApplicationModel::Wallet::WalletVerb> impl_IWalletItem<T>::Verbs() const
{
	Windows::Foundation::Collections::IMap<String, Windows::ApplicationModel::Wallet::WalletVerb> value;
	check(shim()->get_Verbs(put(value)));
	return value;
}

template <typename T> String impl_IWalletTransaction<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IWalletTransaction<T>::Description(StringReference const & value) const
{
	check(shim()->put_Description(get(value)));
}

template <typename T> String impl_IWalletTransaction<T>::DisplayAmount() const
{
	String value;
	check(shim()->get_DisplayAmount(put(value)));
	return value;
}

template <typename T> void impl_IWalletTransaction<T>::DisplayAmount(StringReference const & value) const
{
	check(shim()->put_DisplayAmount(get(value)));
}

template <typename T> bool impl_IWalletTransaction<T>::IgnoreTimeOfDay() const
{
	bool value = {};
	check(shim()->get_IgnoreTimeOfDay(put(value)));
	return value;
}

template <typename T> void impl_IWalletTransaction<T>::IgnoreTimeOfDay(bool const value) const
{
	check(shim()->put_IgnoreTimeOfDay(value));
}

template <typename T> String impl_IWalletTransaction<T>::DisplayLocation() const
{
	String value;
	check(shim()->get_DisplayLocation(put(value)));
	return value;
}

template <typename T> void impl_IWalletTransaction<T>::DisplayLocation(StringReference const & value) const
{
	check(shim()->put_DisplayLocation(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IWalletTransaction<T>::TransactionDate() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_TransactionDate(put(value)));
	return value;
}

template <typename T> void impl_IWalletTransaction<T>::TransactionDate(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_TransactionDate(get(value)));
}

template <typename T> bool impl_IWalletTransaction<T>::IsLaunchable() const
{
	bool value = {};
	check(shim()->get_IsLaunchable(put(value)));
	return value;
}

template <typename T> void impl_IWalletTransaction<T>::IsLaunchable(bool const value) const
{
	check(shim()->put_IsLaunchable(value));
}

template <typename T> Windows::Devices::Geolocation::BasicGeoposition impl_IWalletRelevantLocation<T>::Position() const
{
	Windows::Devices::Geolocation::BasicGeoposition value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> void impl_IWalletRelevantLocation<T>::Position(Windows::Devices::Geolocation::BasicGeoposition const & value) const
{
	check(shim()->put_Position(value));
}

template <typename T> String impl_IWalletRelevantLocation<T>::DisplayMessage() const
{
	String value;
	check(shim()->get_DisplayMessage(put(value)));
	return value;
}

template <typename T> void impl_IWalletRelevantLocation<T>::DisplayMessage(StringReference const & value) const
{
	check(shim()->put_DisplayMessage(get(value)));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWalletItemStore<T>::AddAsync(StringReference const & id, Windows::ApplicationModel::Wallet::WalletItem const & item) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_AddAsync(get(id), get(item), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWalletItemStore<T>::ClearAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ClearAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Wallet::WalletItem> impl_IWalletItemStore<T>::GetWalletItemAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Wallet::WalletItem> operation;
	check(shim()->abi_GetWalletItemAsync(get(id), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Wallet::WalletItem>> impl_IWalletItemStore<T>::GetItemsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Wallet::WalletItem>> operation;
	check(shim()->abi_GetItemsAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Wallet::WalletItem>> impl_IWalletItemStore<T>::GetItemsAsync(Windows::ApplicationModel::Wallet::WalletItemKind const kind) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Wallet::WalletItem>> operation;
	check(shim()->abi_GetItemsWithKindAsync(kind, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Wallet::WalletItem> impl_IWalletItemStore<T>::ImportItemAsync(Windows::Storage::Streams::IRandomAccessStreamReference const & stream) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Wallet::WalletItem> operation;
	check(shim()->abi_ImportItemAsync(get(stream), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWalletItemStore<T>::DeleteAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_DeleteAsync(get(id), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWalletItemStore<T>::ShowAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ShowAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWalletItemStore<T>::ShowAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ShowItemAsync(get(id), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWalletItemStore<T>::UpdateAsync(Windows::ApplicationModel::Wallet::WalletItem const & item) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_UpdateAsync(get(item), put(operation)));
	return operation;
}

template <typename T> long long impl_IWalletItemStore2<T>::ItemsChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Wallet::WalletItemStore, IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_ItemsChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IWalletItemStore2<T>::ItemsChanged(F handler) const
{
	return ItemsChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Wallet::WalletItemStore, IInspectable>(handler));
}

template <typename T> void impl_IWalletItemStore2<T>::ItemsChanged(long long const cookie) const
{
	check(shim()->remove_ItemsChanged(cookie));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Wallet::WalletItemStore> impl_IWalletManagerStatics<T>::RequestStoreAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Wallet::WalletItemStore> operation;
	check(shim()->abi_RequestStoreAsync(put(operation)));
	return operation;
}

template <typename T> Windows::ApplicationModel::Wallet::WalletItemCustomProperty impl_IWalletItemCustomPropertyFactory<T>::CreateWalletItemCustomProperty(StringReference const & name, StringReference const & value) const
{
	Windows::ApplicationModel::Wallet::WalletItemCustomProperty walletItemCustomProperty = nullptr;
	check(shim()->abi_CreateWalletItemCustomProperty(get(name), get(value), put(walletItemCustomProperty)));
	return walletItemCustomProperty;
}

template <typename T> Windows::ApplicationModel::Wallet::WalletVerb impl_IWalletVerbFactory<T>::CreateWalletVerb(StringReference const & name) const
{
	Windows::ApplicationModel::Wallet::WalletVerb WalletVerb = nullptr;
	check(shim()->abi_CreateWalletVerb(get(name), put(WalletVerb)));
	return WalletVerb;
}

template <typename T> Windows::ApplicationModel::Wallet::WalletItem impl_IWalletItemFactory<T>::CreateWalletItem(Windows::ApplicationModel::Wallet::WalletItemKind const kind, StringReference const & displayName) const
{
	Windows::ApplicationModel::Wallet::WalletItem walletItem = nullptr;
	check(shim()->abi_CreateWalletItem(kind, get(displayName), put(walletItem)));
	return walletItem;
}

template <typename T> Windows::ApplicationModel::Wallet::WalletBarcode impl_IWalletBarcodeFactory<T>::CreateWalletBarcode(Windows::ApplicationModel::Wallet::WalletBarcodeSymbology const symbology, StringReference const & value) const
{
	Windows::ApplicationModel::Wallet::WalletBarcode barcode = nullptr;
	check(shim()->abi_CreateWalletBarcode(symbology, get(value), put(barcode)));
	return barcode;
}

template <typename T> Windows::ApplicationModel::Wallet::WalletBarcode impl_IWalletBarcodeFactory<T>::CreateCustomWalletBarcode(Windows::Storage::Streams::IRandomAccessStreamReference const & streamToBarcodeImage) const
{
	Windows::ApplicationModel::Wallet::WalletBarcode barcode = nullptr;
	check(shim()->abi_CreateCustomWalletBarcode(get(streamToBarcodeImage), put(barcode)));
	return barcode;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Wallet { namespace System {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Wallet::WalletItem>> impl_IWalletItemSystemStore<T>::GetItemsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Wallet::WalletItem>> operation;
	check(shim()->abi_GetItemsAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWalletItemSystemStore<T>::DeleteAsync(Windows::ApplicationModel::Wallet::WalletItem const & item) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_DeleteAsync(get(item), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Wallet::WalletItem> impl_IWalletItemSystemStore<T>::ImportItemAsync(Windows::Storage::Streams::IRandomAccessStreamReference const & stream) const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Wallet::WalletItem> operation;
	check(shim()->abi_ImportItemAsync(get(stream), put(operation)));
	return operation;
}

template <typename T> Windows::ApplicationModel::Wallet::System::WalletItemAppAssociation impl_IWalletItemSystemStore<T>::GetAppStatusForItem(Windows::ApplicationModel::Wallet::WalletItem const & item) const
{
	Windows::ApplicationModel::Wallet::System::WalletItemAppAssociation result = {};
	check(shim()->abi_GetAppStatusForItem(get(item), &result));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IWalletItemSystemStore<T>::LaunchAppForItemAsync(Windows::ApplicationModel::Wallet::WalletItem const & item) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_LaunchAppForItemAsync(get(item), put(operation)));
	return operation;
}

template <typename T> long long impl_IWalletItemSystemStore2<T>::ItemsChanged(Windows::Foundation::ITypedEventHandler<Windows::ApplicationModel::Wallet::System::WalletItemSystemStore, IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_ItemsChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IWalletItemSystemStore2<T>::ItemsChanged(F handler) const
{
	return ItemsChanged(Windows::Foundation::TypedEventHandler<Windows::ApplicationModel::Wallet::System::WalletItemSystemStore, IInspectable>(handler));
}

template <typename T> void impl_IWalletItemSystemStore2<T>::ItemsChanged(long long const cookie) const
{
	check(shim()->remove_ItemsChanged(cookie));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Wallet::System::WalletItemSystemStore> impl_IWalletManagerSystemStatics<T>::RequestStoreAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Wallet::System::WalletItemSystemStore> operation;
	check(shim()->abi_RequestStoreAsync(put(operation)));
	return operation;
}

}}}}}

namespace winrt { namespace Windows { namespace Data { namespace Html {

template <typename T> String impl_IHtmlUtilities<T>::ConvertToText(StringReference const & html) const
{
	String text;
	check(shim()->abi_ConvertToText(get(html), put(text)));
	return text;
}

}}}}

namespace winrt { namespace Windows { namespace Data { namespace Json {

template <typename T> Windows::Data::Json::JsonValueType impl_IJsonValue<T>::ValueType() const
{
	Windows::Data::Json::JsonValueType value = {};
	check(shim()->get_ValueType(&value));
	return value;
}

template <typename T> String impl_IJsonValue<T>::Stringify() const
{
	String returnValue;
	check(shim()->abi_Stringify(put(returnValue)));
	return returnValue;
}

template <typename T> String impl_IJsonValue<T>::GetString() const
{
	String returnValue;
	check(shim()->abi_GetString(put(returnValue)));
	return returnValue;
}

template <typename T> double impl_IJsonValue<T>::GetNumber() const
{
	double returnValue = {};
	check(shim()->abi_GetNumber(&returnValue));
	return returnValue;
}

template <typename T> bool impl_IJsonValue<T>::GetBoolean() const
{
	bool returnValue = {};
	check(shim()->abi_GetBoolean(put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonArray impl_IJsonValue<T>::GetArray() const
{
	Windows::Data::Json::JsonArray returnValue = nullptr;
	check(shim()->abi_GetArray(put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonObject impl_IJsonValue<T>::GetObject() const
{
	Windows::Data::Json::JsonObject returnValue = nullptr;
	check(shim()->abi_GetObject(put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonValue impl_IJsonValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Data::Json::JsonValue jsonValue = nullptr;
	check(shim()->abi_Parse(get(input), put(jsonValue)));
	return jsonValue;
}

template <typename T> bool impl_IJsonValueStatics<T>::TryParse(StringReference const & input, Windows::Data::Json::JsonValue & result) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(result), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Data::Json::JsonValue impl_IJsonValueStatics<T>::CreateBooleanValue(bool const input) const
{
	Windows::Data::Json::JsonValue jsonValue = nullptr;
	check(shim()->abi_CreateBooleanValue(input, put(jsonValue)));
	return jsonValue;
}

template <typename T> Windows::Data::Json::JsonValue impl_IJsonValueStatics<T>::CreateNumberValue(double const input) const
{
	Windows::Data::Json::JsonValue jsonValue = nullptr;
	check(shim()->abi_CreateNumberValue(input, put(jsonValue)));
	return jsonValue;
}

template <typename T> Windows::Data::Json::JsonValue impl_IJsonValueStatics<T>::CreateStringValue(StringReference const & input) const
{
	Windows::Data::Json::JsonValue jsonValue = nullptr;
	check(shim()->abi_CreateStringValue(get(input), put(jsonValue)));
	return jsonValue;
}

template <typename T> Windows::Data::Json::JsonValue impl_IJsonValueStatics2<T>::CreateNullValue() const
{
	Windows::Data::Json::JsonValue jsonValue = nullptr;
	check(shim()->abi_CreateNullValue(put(jsonValue)));
	return jsonValue;
}

template <typename T> Windows::Data::Json::JsonValue impl_IJsonObject<T>::GetNamedValue(StringReference const & name) const
{
	Windows::Data::Json::JsonValue returnValue = nullptr;
	check(shim()->abi_GetNamedValue(get(name), put(returnValue)));
	return returnValue;
}

template <typename T> void impl_IJsonObject<T>::SetNamedValue(StringReference const & name, Windows::Data::Json::IJsonValue const & value) const
{
	check(shim()->abi_SetNamedValue(get(name), get(value)));
}

template <typename T> Windows::Data::Json::JsonObject impl_IJsonObject<T>::GetNamedObject(StringReference const & name) const
{
	Windows::Data::Json::JsonObject returnValue = nullptr;
	check(shim()->abi_GetNamedObject(get(name), put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonArray impl_IJsonObject<T>::GetNamedArray(StringReference const & name) const
{
	Windows::Data::Json::JsonArray returnValue = nullptr;
	check(shim()->abi_GetNamedArray(get(name), put(returnValue)));
	return returnValue;
}

template <typename T> String impl_IJsonObject<T>::GetNamedString(StringReference const & name) const
{
	String returnValue;
	check(shim()->abi_GetNamedString(get(name), put(returnValue)));
	return returnValue;
}

template <typename T> double impl_IJsonObject<T>::GetNamedNumber(StringReference const & name) const
{
	double returnValue = {};
	check(shim()->abi_GetNamedNumber(get(name), &returnValue));
	return returnValue;
}

template <typename T> bool impl_IJsonObject<T>::GetNamedBoolean(StringReference const & name) const
{
	bool returnValue = {};
	check(shim()->abi_GetNamedBoolean(get(name), put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonValue impl_IJsonObjectWithDefaultValues<T>::GetNamedValue(StringReference const & name, Windows::Data::Json::JsonValue const & defaultValue) const
{
	Windows::Data::Json::JsonValue returnValue = nullptr;
	check(shim()->abi_GetNamedValueOrDefault(get(name), get(defaultValue), put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonObject impl_IJsonObjectWithDefaultValues<T>::GetNamedObject(StringReference const & name, Windows::Data::Json::JsonObject const & defaultValue) const
{
	Windows::Data::Json::JsonObject returnValue = nullptr;
	check(shim()->abi_GetNamedObjectOrDefault(get(name), get(defaultValue), put(returnValue)));
	return returnValue;
}

template <typename T> String impl_IJsonObjectWithDefaultValues<T>::GetNamedString(StringReference const & name, StringReference const & defaultValue) const
{
	String returnValue;
	check(shim()->abi_GetNamedStringOrDefault(get(name), get(defaultValue), put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonArray impl_IJsonObjectWithDefaultValues<T>::GetNamedArray(StringReference const & name, Windows::Data::Json::JsonArray const & defaultValue) const
{
	Windows::Data::Json::JsonArray returnValue = nullptr;
	check(shim()->abi_GetNamedArrayOrDefault(get(name), get(defaultValue), put(returnValue)));
	return returnValue;
}

template <typename T> double impl_IJsonObjectWithDefaultValues<T>::GetNamedNumber(StringReference const & name, double const defaultValue) const
{
	double returnValue = {};
	check(shim()->abi_GetNamedNumberOrDefault(get(name), defaultValue, &returnValue));
	return returnValue;
}

template <typename T> bool impl_IJsonObjectWithDefaultValues<T>::GetNamedBoolean(StringReference const & name, bool const defaultValue) const
{
	bool returnValue = {};
	check(shim()->abi_GetNamedBooleanOrDefault(get(name), defaultValue, put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonObject impl_IJsonObjectStatics<T>::Parse(StringReference const & input) const
{
	Windows::Data::Json::JsonObject jsonObject = nullptr;
	check(shim()->abi_Parse(get(input), put(jsonObject)));
	return jsonObject;
}

template <typename T> bool impl_IJsonObjectStatics<T>::TryParse(StringReference const & input, Windows::Data::Json::JsonObject & result) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(result), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Data::Json::JsonObject impl_IJsonArray<T>::GetObjectAt(unsigned const index) const
{
	Windows::Data::Json::JsonObject returnValue = nullptr;
	check(shim()->abi_GetObjectAt(index, put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonArray impl_IJsonArray<T>::GetArrayAt(unsigned const index) const
{
	Windows::Data::Json::JsonArray returnValue = nullptr;
	check(shim()->abi_GetArrayAt(index, put(returnValue)));
	return returnValue;
}

template <typename T> String impl_IJsonArray<T>::GetStringAt(unsigned const index) const
{
	String returnValue;
	check(shim()->abi_GetStringAt(index, put(returnValue)));
	return returnValue;
}

template <typename T> double impl_IJsonArray<T>::GetNumberAt(unsigned const index) const
{
	double returnValue = {};
	check(shim()->abi_GetNumberAt(index, &returnValue));
	return returnValue;
}

template <typename T> bool impl_IJsonArray<T>::GetBooleanAt(unsigned const index) const
{
	bool returnValue = {};
	check(shim()->abi_GetBooleanAt(index, put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Data::Json::JsonArray impl_IJsonArrayStatics<T>::Parse(StringReference const & input) const
{
	Windows::Data::Json::JsonArray jsonArray = nullptr;
	check(shim()->abi_Parse(get(input), put(jsonArray)));
	return jsonArray;
}

template <typename T> bool impl_IJsonArrayStatics<T>::TryParse(StringReference const & input, Windows::Data::Json::JsonArray & result) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(result), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Data::Json::JsonErrorStatus impl_IJsonErrorStatics2<T>::GetJsonStatus(int const hresult) const
{
	Windows::Data::Json::JsonErrorStatus status = {};
	check(shim()->abi_GetJsonStatus(hresult, &status));
	return status;
}

}}}}

namespace winrt { namespace Windows { namespace Data { namespace Pdf {

template <typename T> Windows::Foundation::Rect impl_IPdfPageDimensions<T>::MediaBox() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_MediaBox(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPdfPageDimensions<T>::CropBox() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_CropBox(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPdfPageDimensions<T>::BleedBox() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_BleedBox(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPdfPageDimensions<T>::TrimBox() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_TrimBox(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPdfPageDimensions<T>::ArtBox() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_ArtBox(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPdfPageRenderOptions<T>::SourceRect() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_SourceRect(&value));
	return value;
}

template <typename T> void impl_IPdfPageRenderOptions<T>::SourceRect(Windows::Foundation::Rect const & value) const
{
	check(shim()->put_SourceRect(value));
}

template <typename T> unsigned impl_IPdfPageRenderOptions<T>::DestinationWidth() const
{
	unsigned value = {};
	check(shim()->get_DestinationWidth(&value));
	return value;
}

template <typename T> void impl_IPdfPageRenderOptions<T>::DestinationWidth(unsigned const value) const
{
	check(shim()->put_DestinationWidth(value));
}

template <typename T> unsigned impl_IPdfPageRenderOptions<T>::DestinationHeight() const
{
	unsigned value = {};
	check(shim()->get_DestinationHeight(&value));
	return value;
}

template <typename T> void impl_IPdfPageRenderOptions<T>::DestinationHeight(unsigned const value) const
{
	check(shim()->put_DestinationHeight(value));
}

template <typename T> Windows::UI::Color impl_IPdfPageRenderOptions<T>::BackgroundColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_BackgroundColor(&value));
	return value;
}

template <typename T> void impl_IPdfPageRenderOptions<T>::BackgroundColor(Windows::UI::Color const & value) const
{
	check(shim()->put_BackgroundColor(value));
}

template <typename T> bool impl_IPdfPageRenderOptions<T>::IsIgnoringHighContrast() const
{
	bool value = {};
	check(shim()->get_IsIgnoringHighContrast(put(value)));
	return value;
}

template <typename T> void impl_IPdfPageRenderOptions<T>::IsIgnoringHighContrast(bool const value) const
{
	check(shim()->put_IsIgnoringHighContrast(value));
}

template <typename T> GUID impl_IPdfPageRenderOptions<T>::BitmapEncoderId() const
{
	GUID value = {};
	check(shim()->get_BitmapEncoderId(&value));
	return value;
}

template <typename T> void impl_IPdfPageRenderOptions<T>::BitmapEncoderId(GUID const value) const
{
	check(shim()->put_BitmapEncoderId(value));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPdfPage<T>::RenderToStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & outputStream) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_RenderToStreamAsync(get(outputStream), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPdfPage<T>::RenderToStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & outputStream, Windows::Data::Pdf::PdfPageRenderOptions const & options) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_RenderWithOptionsToStreamAsync(get(outputStream), get(options), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPdfPage<T>::PreparePageAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_PreparePageAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> unsigned impl_IPdfPage<T>::Index() const
{
	unsigned value = {};
	check(shim()->get_Index(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IPdfPage<T>::Size() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_Size(&value));
	return value;
}

template <typename T> Windows::Data::Pdf::PdfPageDimensions impl_IPdfPage<T>::Dimensions() const
{
	Windows::Data::Pdf::PdfPageDimensions value = nullptr;
	check(shim()->get_Dimensions(put(value)));
	return value;
}

template <typename T> Windows::Data::Pdf::PdfPageRotation impl_IPdfPage<T>::Rotation() const
{
	Windows::Data::Pdf::PdfPageRotation value = {};
	check(shim()->get_Rotation(&value));
	return value;
}

template <typename T> float impl_IPdfPage<T>::PreferredZoom() const
{
	float value = {};
	check(shim()->get_PreferredZoom(&value));
	return value;
}

template <typename T> Windows::Data::Pdf::PdfPage impl_IPdfDocument<T>::GetPage(unsigned const pageIndex) const
{
	Windows::Data::Pdf::PdfPage pdfPage = nullptr;
	check(shim()->abi_GetPage(pageIndex, put(pdfPage)));
	return pdfPage;
}

template <typename T> unsigned impl_IPdfDocument<T>::PageCount() const
{
	unsigned value = {};
	check(shim()->get_PageCount(&value));
	return value;
}

template <typename T> bool impl_IPdfDocument<T>::IsPasswordProtected() const
{
	bool value = {};
	check(shim()->get_IsPasswordProtected(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> impl_IPdfDocumentStatics<T>::LoadFromFileAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> asyncInfo;
	check(shim()->abi_LoadFromFileAsync(get(file), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> impl_IPdfDocumentStatics<T>::LoadFromFileAsync(Windows::Storage::IStorageFile const & file, StringReference const & password) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> asyncInfo;
	check(shim()->abi_LoadFromFileWithPasswordAsync(get(file), get(password), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> impl_IPdfDocumentStatics<T>::LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> asyncInfo;
	check(shim()->abi_LoadFromStreamAsync(get(inputStream), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> impl_IPdfDocumentStatics<T>::LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream, StringReference const & password) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> asyncInfo;
	check(shim()->abi_LoadFromStreamWithPasswordAsync(get(inputStream), get(password), put(asyncInfo)));
	return asyncInfo;
}

}}}}

namespace winrt { namespace Windows { namespace Data { namespace Text {

template <typename T> void impl_IWordSegmentsTokenizingHandler<T>::Invoke(Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment> const & precedingWords, Windows::Foundation::Collections::IIterable<Windows::Data::Text::WordSegment> const & words) const
{
	check(shim()->abi_Invoke(get(precedingWords), get(words)));
}

template <typename T> void impl_ISelectableWordSegmentsTokenizingHandler<T>::Invoke(Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment> const & precedingWords, Windows::Foundation::Collections::IIterable<Windows::Data::Text::SelectableWordSegment> const & words) const
{
	check(shim()->abi_Invoke(get(precedingWords), get(words)));
}

template <typename T> Windows::Data::Text::SemanticTextQuery impl_ISemanticTextQueryFactory<T>::Create(StringReference const & aqsFilter) const
{
	Windows::Data::Text::SemanticTextQuery result = nullptr;
	check(shim()->abi_Create(get(aqsFilter), put(result)));
	return result;
}

template <typename T> Windows::Data::Text::SemanticTextQuery impl_ISemanticTextQueryFactory<T>::CreateWithLanguage(StringReference const & aqsFilter, StringReference const & filterLanguage) const
{
	Windows::Data::Text::SemanticTextQuery result = nullptr;
	check(shim()->abi_CreateWithLanguage(get(aqsFilter), get(filterLanguage), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment> impl_ISemanticTextQuery<T>::Find(StringReference const & content) const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment> result;
	check(shim()->abi_Find(get(content), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment> impl_ISemanticTextQuery<T>::FindInProperty(StringReference const & propertyContent, StringReference const & propertyName) const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment> result;
	check(shim()->abi_FindInProperty(get(propertyContent), get(propertyName), put(result)));
	return result;
}

template <typename T> unsigned impl_IUnicodeCharactersStatics<T>::GetCodepointFromSurrogatePair(unsigned const highSurrogate, unsigned const lowSurrogate) const
{
	unsigned codepoint = {};
	check(shim()->abi_GetCodepointFromSurrogatePair(highSurrogate, lowSurrogate, &codepoint));
	return codepoint;
}

template <typename T> void impl_IUnicodeCharactersStatics<T>::GetSurrogatePairFromCodepoint(unsigned const codepoint, wchar_t & highSurrogate, wchar_t & lowSurrogate) const
{
	check(shim()->abi_GetSurrogatePairFromCodepoint(codepoint, &highSurrogate, &lowSurrogate));
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsHighSurrogate(unsigned const codepoint) const
{
	bool value = {};
	check(shim()->abi_IsHighSurrogate(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsLowSurrogate(unsigned const codepoint) const
{
	bool value = {};
	check(shim()->abi_IsLowSurrogate(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsSupplementary(unsigned const codepoint) const
{
	bool value = {};
	check(shim()->abi_IsSupplementary(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsNoncharacter(unsigned const codepoint) const
{
	bool value = {};
	check(shim()->abi_IsNoncharacter(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsWhitespace(unsigned const codepoint) const
{
	bool value = {};
	check(shim()->abi_IsWhitespace(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsAlphabetic(unsigned const codepoint) const
{
	bool value = {};
	check(shim()->abi_IsAlphabetic(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsCased(unsigned const codepoint) const
{
	bool value = {};
	check(shim()->abi_IsCased(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsUppercase(unsigned const codepoint) const
{
	bool value = {};
	check(shim()->abi_IsUppercase(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsLowercase(unsigned const codepoint) const
{
	bool value = {};
	check(shim()->abi_IsLowercase(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsIdStart(unsigned const codepoint) const
{
	bool value = {};
	check(shim()->abi_IsIdStart(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsIdContinue(unsigned const codepoint) const
{
	bool value = {};
	check(shim()->abi_IsIdContinue(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsGraphemeBase(unsigned const codepoint) const
{
	bool value = {};
	check(shim()->abi_IsGraphemeBase(codepoint, put(value)));
	return value;
}

template <typename T> bool impl_IUnicodeCharactersStatics<T>::IsGraphemeExtend(unsigned const codepoint) const
{
	bool value = {};
	check(shim()->abi_IsGraphemeExtend(codepoint, put(value)));
	return value;
}

template <typename T> Windows::Data::Text::UnicodeNumericType impl_IUnicodeCharactersStatics<T>::GetNumericType(unsigned const codepoint) const
{
	Windows::Data::Text::UnicodeNumericType value = {};
	check(shim()->abi_GetNumericType(codepoint, &value));
	return value;
}

template <typename T> Windows::Data::Text::UnicodeGeneralCategory impl_IUnicodeCharactersStatics<T>::GetGeneralCategory(unsigned const codepoint) const
{
	Windows::Data::Text::UnicodeGeneralCategory value = {};
	check(shim()->abi_GetGeneralCategory(codepoint, &value));
	return value;
}

template <typename T> Windows::Data::Text::TextSegment impl_IAlternateWordForm<T>::SourceTextSegment() const
{
	Windows::Data::Text::TextSegment value = {};
	check(shim()->get_SourceTextSegment(&value));
	return value;
}

template <typename T> String impl_IAlternateWordForm<T>::AlternateText() const
{
	String value;
	check(shim()->get_AlternateText(put(value)));
	return value;
}

template <typename T> Windows::Data::Text::AlternateNormalizationFormat impl_IAlternateWordForm<T>::NormalizationFormat() const
{
	Windows::Data::Text::AlternateNormalizationFormat value = {};
	check(shim()->get_NormalizationFormat(&value));
	return value;
}

template <typename T> String impl_ISelectableWordSegment<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> Windows::Data::Text::TextSegment impl_ISelectableWordSegment<T>::SourceTextSegment() const
{
	Windows::Data::Text::TextSegment value = {};
	check(shim()->get_SourceTextSegment(&value));
	return value;
}

template <typename T> String impl_IWordSegment<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> Windows::Data::Text::TextSegment impl_IWordSegment<T>::SourceTextSegment() const
{
	Windows::Data::Text::TextSegment value = {};
	check(shim()->get_SourceTextSegment(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Data::Text::AlternateWordForm> impl_IWordSegment<T>::AlternateForms() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::AlternateWordForm> value;
	check(shim()->get_AlternateForms(put(value)));
	return value;
}

template <typename T> String impl_IWordsSegmenter<T>::ResolvedLanguage() const
{
	String value;
	check(shim()->get_ResolvedLanguage(put(value)));
	return value;
}

template <typename T> Windows::Data::Text::WordSegment impl_IWordsSegmenter<T>::GetTokenAt(StringReference const & text, unsigned const startIndex) const
{
	Windows::Data::Text::WordSegment result = nullptr;
	check(shim()->abi_GetTokenAt(get(text), startIndex, put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Data::Text::WordSegment> impl_IWordsSegmenter<T>::GetTokens(StringReference const & text) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::WordSegment> result;
	check(shim()->abi_GetTokens(get(text), put(result)));
	return result;
}

template <typename T> void impl_IWordsSegmenter<T>::Tokenize(StringReference const & text, unsigned const startIndex, Windows::Data::Text::IWordSegmentsTokenizingHandler const & handler) const
{
	check(shim()->abi_Tokenize(get(text), startIndex, get(handler)));
}

template <typename T> template <typename F> void impl_IWordsSegmenter<T>::Tokenize(StringReference const & text, unsigned const startIndex, F handler) const
{
	Tokenize(text, startIndex, Windows::Data::Text::WordSegmentsTokenizingHandler(handler));
}

template <typename T> Windows::Data::Text::WordsSegmenter impl_IWordsSegmenterFactory<T>::CreateWithLanguage(StringReference const & language) const
{
	Windows::Data::Text::WordsSegmenter result = nullptr;
	check(shim()->abi_CreateWithLanguage(get(language), put(result)));
	return result;
}

template <typename T> String impl_ISelectableWordsSegmenter<T>::ResolvedLanguage() const
{
	String value;
	check(shim()->get_ResolvedLanguage(put(value)));
	return value;
}

template <typename T> Windows::Data::Text::SelectableWordSegment impl_ISelectableWordsSegmenter<T>::GetTokenAt(StringReference const & text, unsigned const startIndex) const
{
	Windows::Data::Text::SelectableWordSegment result = nullptr;
	check(shim()->abi_GetTokenAt(get(text), startIndex, put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Data::Text::SelectableWordSegment> impl_ISelectableWordsSegmenter<T>::GetTokens(StringReference const & text) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Data::Text::SelectableWordSegment> result;
	check(shim()->abi_GetTokens(get(text), put(result)));
	return result;
}

template <typename T> void impl_ISelectableWordsSegmenter<T>::Tokenize(StringReference const & text, unsigned const startIndex, Windows::Data::Text::ISelectableWordSegmentsTokenizingHandler const & handler) const
{
	check(shim()->abi_Tokenize(get(text), startIndex, get(handler)));
}

template <typename T> template <typename F> void impl_ISelectableWordsSegmenter<T>::Tokenize(StringReference const & text, unsigned const startIndex, F handler) const
{
	Tokenize(text, startIndex, Windows::Data::Text::SelectableWordSegmentsTokenizingHandler(handler));
}

template <typename T> Windows::Data::Text::SelectableWordsSegmenter impl_ISelectableWordsSegmenterFactory<T>::CreateWithLanguage(StringReference const & language) const
{
	Windows::Data::Text::SelectableWordsSegmenter result = nullptr;
	check(shim()->abi_CreateWithLanguage(get(language), put(result)));
	return result;
}

template <typename T> String impl_ITextPredictionGenerator<T>::ResolvedLanguage() const
{
	String value;
	check(shim()->get_ResolvedLanguage(put(value)));
	return value;
}

template <typename T> bool impl_ITextPredictionGenerator<T>::LanguageAvailableButNotInstalled() const
{
	bool value = {};
	check(shim()->get_LanguageAvailableButNotInstalled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> impl_ITextPredictionGenerator<T>::GetCandidatesAsync(StringReference const & input) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> result;
	check(shim()->abi_GetCandidatesAsync(get(input), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> impl_ITextPredictionGenerator<T>::GetCandidatesAsync(StringReference const & input, unsigned const maxCandidates) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> result;
	check(shim()->abi_GetCandidatesWithMaxCountAsync(get(input), maxCandidates, put(result)));
	return result;
}

template <typename T> Windows::Data::Text::TextPredictionGenerator impl_ITextPredictionGeneratorFactory<T>::Create(StringReference const & languageTag) const
{
	Windows::Data::Text::TextPredictionGenerator result = nullptr;
	check(shim()->abi_Create(get(languageTag), put(result)));
	return result;
}

template <typename T> String impl_ITextConversionGenerator<T>::ResolvedLanguage() const
{
	String value;
	check(shim()->get_ResolvedLanguage(put(value)));
	return value;
}

template <typename T> bool impl_ITextConversionGenerator<T>::LanguageAvailableButNotInstalled() const
{
	bool value = {};
	check(shim()->get_LanguageAvailableButNotInstalled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> impl_ITextConversionGenerator<T>::GetCandidatesAsync(StringReference const & input) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> result;
	check(shim()->abi_GetCandidatesAsync(get(input), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> impl_ITextConversionGenerator<T>::GetCandidatesAsync(StringReference const & input, unsigned const maxCandidates) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<String>> result;
	check(shim()->abi_GetCandidatesWithMaxCountAsync(get(input), maxCandidates, put(result)));
	return result;
}

template <typename T> Windows::Data::Text::TextConversionGenerator impl_ITextConversionGeneratorFactory<T>::Create(StringReference const & languageTag) const
{
	Windows::Data::Text::TextConversionGenerator result = nullptr;
	check(shim()->abi_Create(get(languageTag), put(result)));
	return result;
}

template <typename T> String impl_ITextReverseConversionGenerator<T>::ResolvedLanguage() const
{
	String value;
	check(shim()->get_ResolvedLanguage(put(value)));
	return value;
}

template <typename T> bool impl_ITextReverseConversionGenerator<T>::LanguageAvailableButNotInstalled() const
{
	bool value = {};
	check(shim()->get_LanguageAvailableButNotInstalled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ITextReverseConversionGenerator<T>::ConvertBackAsync(StringReference const & input) const
{
	Windows::Foundation::IAsyncOperation<String> result;
	check(shim()->abi_ConvertBackAsync(get(input), put(result)));
	return result;
}

template <typename T> Windows::Data::Text::TextReverseConversionGenerator impl_ITextReverseConversionGeneratorFactory<T>::Create(StringReference const & languageTag) const
{
	Windows::Data::Text::TextReverseConversionGenerator result = nullptr;
	check(shim()->abi_Create(get(languageTag), put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace Data { namespace Xml { namespace Dom {

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNodeSelector<T>::SelectSingleNode(StringReference const & xpath) const
{
	Windows::Data::Xml::Dom::IXmlNode node;
	check(shim()->abi_SelectSingleNode(get(xpath), put(node)));
	return node;
}

template <typename T> Windows::Data::Xml::Dom::XmlNodeList impl_IXmlNodeSelector<T>::SelectNodes(StringReference const & xpath) const
{
	Windows::Data::Xml::Dom::XmlNodeList nodelist = nullptr;
	check(shim()->abi_SelectNodes(get(xpath), put(nodelist)));
	return nodelist;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNodeSelector<T>::SelectSingleNodeNS(StringReference const & xpath, IInspectable const & namespaces) const
{
	Windows::Data::Xml::Dom::IXmlNode node;
	check(shim()->abi_SelectSingleNodeNS(get(xpath), get(namespaces), put(node)));
	return node;
}

template <typename T> Windows::Data::Xml::Dom::XmlNodeList impl_IXmlNodeSelector<T>::SelectNodesNS(StringReference const & xpath, IInspectable const & namespaces) const
{
	Windows::Data::Xml::Dom::XmlNodeList nodelist = nullptr;
	check(shim()->abi_SelectNodesNS(get(xpath), get(namespaces), put(nodelist)));
	return nodelist;
}

template <typename T> String impl_IXmlNodeSerializer<T>::GetXml() const
{
	String outerXml;
	check(shim()->abi_GetXml(put(outerXml)));
	return outerXml;
}

template <typename T> String impl_IXmlNodeSerializer<T>::InnerText() const
{
	String value;
	check(shim()->get_InnerText(put(value)));
	return value;
}

template <typename T> void impl_IXmlNodeSerializer<T>::InnerText(StringReference const & value) const
{
	check(shim()->put_InnerText(get(value)));
}

template <typename T> IInspectable impl_IXmlNode<T>::NodeValue() const
{
	IInspectable value;
	check(shim()->get_NodeValue(put(value)));
	return value;
}

template <typename T> void impl_IXmlNode<T>::NodeValue(IInspectable const & value) const
{
	check(shim()->put_NodeValue(get(value)));
}

template <typename T> Windows::Data::Xml::Dom::NodeType impl_IXmlNode<T>::NodeType() const
{
	Windows::Data::Xml::Dom::NodeType value = {};
	check(shim()->get_NodeType(&value));
	return value;
}

template <typename T> String impl_IXmlNode<T>::NodeName() const
{
	String value;
	check(shim()->get_NodeName(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::ParentNode() const
{
	Windows::Data::Xml::Dom::IXmlNode value;
	check(shim()->get_ParentNode(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlNodeList impl_IXmlNode<T>::ChildNodes() const
{
	Windows::Data::Xml::Dom::XmlNodeList value = nullptr;
	check(shim()->get_ChildNodes(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::FirstChild() const
{
	Windows::Data::Xml::Dom::IXmlNode value;
	check(shim()->get_FirstChild(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::LastChild() const
{
	Windows::Data::Xml::Dom::IXmlNode value;
	check(shim()->get_LastChild(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::PreviousSibling() const
{
	Windows::Data::Xml::Dom::IXmlNode value;
	check(shim()->get_PreviousSibling(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::NextSibling() const
{
	Windows::Data::Xml::Dom::IXmlNode value;
	check(shim()->get_NextSibling(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlNamedNodeMap impl_IXmlNode<T>::Attributes() const
{
	Windows::Data::Xml::Dom::XmlNamedNodeMap value = nullptr;
	check(shim()->get_Attributes(put(value)));
	return value;
}

template <typename T> bool impl_IXmlNode<T>::HasChildNodes() const
{
	bool value = {};
	check(shim()->abi_HasChildNodes(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IXmlNode<T>::OwnerDocument() const
{
	Windows::Data::Xml::Dom::XmlDocument value = nullptr;
	check(shim()->get_OwnerDocument(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::InsertBefore(Windows::Data::Xml::Dom::IXmlNode const & newChild, Windows::Data::Xml::Dom::IXmlNode const & referenceChild) const
{
	Windows::Data::Xml::Dom::IXmlNode insertedChild;
	check(shim()->abi_InsertBefore(get(newChild), get(referenceChild), put(insertedChild)));
	return insertedChild;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::ReplaceChild(Windows::Data::Xml::Dom::IXmlNode const & newChild, Windows::Data::Xml::Dom::IXmlNode const & referenceChild) const
{
	Windows::Data::Xml::Dom::IXmlNode previousChild;
	check(shim()->abi_ReplaceChild(get(newChild), get(referenceChild), put(previousChild)));
	return previousChild;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::RemoveChild(Windows::Data::Xml::Dom::IXmlNode const & childNode) const
{
	Windows::Data::Xml::Dom::IXmlNode removedChild;
	check(shim()->abi_RemoveChild(get(childNode), put(removedChild)));
	return removedChild;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::AppendChild(Windows::Data::Xml::Dom::IXmlNode const & newChild) const
{
	Windows::Data::Xml::Dom::IXmlNode appendedChild;
	check(shim()->abi_AppendChild(get(newChild), put(appendedChild)));
	return appendedChild;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNode<T>::CloneNode(bool const deep) const
{
	Windows::Data::Xml::Dom::IXmlNode newNode;
	check(shim()->abi_CloneNode(deep, put(newNode)));
	return newNode;
}

template <typename T> IInspectable impl_IXmlNode<T>::NamespaceUri() const
{
	IInspectable value;
	check(shim()->get_NamespaceUri(put(value)));
	return value;
}

template <typename T> IInspectable impl_IXmlNode<T>::LocalName() const
{
	IInspectable value;
	check(shim()->get_LocalName(put(value)));
	return value;
}

template <typename T> IInspectable impl_IXmlNode<T>::Prefix() const
{
	IInspectable value;
	check(shim()->get_Prefix(put(value)));
	return value;
}

template <typename T> void impl_IXmlNode<T>::Normalize() const
{
	check(shim()->abi_Normalize());
}

template <typename T> void impl_IXmlNode<T>::Prefix(IInspectable const & value) const
{
	check(shim()->put_Prefix(get(value)));
}

template <typename T> bool impl_IXmlDomImplementation<T>::HasFeature(StringReference const & feature, IInspectable const & version) const
{
	bool featureSupported = {};
	check(shim()->abi_HasFeature(get(feature), get(version), put(featureSupported)));
	return featureSupported;
}

template <typename T> String impl_IXmlDocumentType<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlNamedNodeMap impl_IXmlDocumentType<T>::Entities() const
{
	Windows::Data::Xml::Dom::XmlNamedNodeMap value = nullptr;
	check(shim()->get_Entities(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlNamedNodeMap impl_IXmlDocumentType<T>::Notations() const
{
	Windows::Data::Xml::Dom::XmlNamedNodeMap value = nullptr;
	check(shim()->get_Notations(put(value)));
	return value;
}

template <typename T> String impl_IXmlAttribute<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> bool impl_IXmlAttribute<T>::Specified() const
{
	bool value = {};
	check(shim()->get_Specified(put(value)));
	return value;
}

template <typename T> String impl_IXmlAttribute<T>::Value() const
{
	String value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IXmlAttribute<T>::Value(StringReference const & value) const
{
	check(shim()->put_Value(get(value)));
}

template <typename T> String impl_IXmlElement<T>::TagName() const
{
	String value;
	check(shim()->get_TagName(put(value)));
	return value;
}

template <typename T> String impl_IXmlElement<T>::GetAttribute(StringReference const & attributeName) const
{
	String attributeValue;
	check(shim()->abi_GetAttribute(get(attributeName), put(attributeValue)));
	return attributeValue;
}

template <typename T> void impl_IXmlElement<T>::SetAttribute(StringReference const & attributeName, StringReference const & attributeValue) const
{
	check(shim()->abi_SetAttribute(get(attributeName), get(attributeValue)));
}

template <typename T> void impl_IXmlElement<T>::RemoveAttribute(StringReference const & attributeName) const
{
	check(shim()->abi_RemoveAttribute(get(attributeName)));
}

template <typename T> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlElement<T>::GetAttributeNode(StringReference const & attributeName) const
{
	Windows::Data::Xml::Dom::XmlAttribute attributeNode = nullptr;
	check(shim()->abi_GetAttributeNode(get(attributeName), put(attributeNode)));
	return attributeNode;
}

template <typename T> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlElement<T>::SetAttributeNode(Windows::Data::Xml::Dom::XmlAttribute const & newAttribute) const
{
	Windows::Data::Xml::Dom::XmlAttribute previousAttribute = nullptr;
	check(shim()->abi_SetAttributeNode(get(newAttribute), put(previousAttribute)));
	return previousAttribute;
}

template <typename T> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlElement<T>::RemoveAttributeNode(Windows::Data::Xml::Dom::XmlAttribute const & attributeNode) const
{
	Windows::Data::Xml::Dom::XmlAttribute removedAttribute = nullptr;
	check(shim()->abi_RemoveAttributeNode(get(attributeNode), put(removedAttribute)));
	return removedAttribute;
}

template <typename T> Windows::Data::Xml::Dom::XmlNodeList impl_IXmlElement<T>::GetElementsByTagName(StringReference const & tagName) const
{
	Windows::Data::Xml::Dom::XmlNodeList elements = nullptr;
	check(shim()->abi_GetElementsByTagName(get(tagName), put(elements)));
	return elements;
}

template <typename T> void impl_IXmlElement<T>::SetAttributeNS(IInspectable const & namespaceUri, StringReference const & qualifiedName, StringReference const & value) const
{
	check(shim()->abi_SetAttributeNS(get(namespaceUri), get(qualifiedName), get(value)));
}

template <typename T> String impl_IXmlElement<T>::GetAttributeNS(IInspectable const & namespaceUri, StringReference const & localName) const
{
	String value;
	check(shim()->abi_GetAttributeNS(get(namespaceUri), get(localName), put(value)));
	return value;
}

template <typename T> void impl_IXmlElement<T>::RemoveAttributeNS(IInspectable const & namespaceUri, StringReference const & localName) const
{
	check(shim()->abi_RemoveAttributeNS(get(namespaceUri), get(localName)));
}

template <typename T> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlElement<T>::SetAttributeNodeNS(Windows::Data::Xml::Dom::XmlAttribute const & newAttribute) const
{
	Windows::Data::Xml::Dom::XmlAttribute previousAttribute = nullptr;
	check(shim()->abi_SetAttributeNodeNS(get(newAttribute), put(previousAttribute)));
	return previousAttribute;
}

template <typename T> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlElement<T>::GetAttributeNodeNS(IInspectable const & namespaceUri, StringReference const & localName) const
{
	Windows::Data::Xml::Dom::XmlAttribute previousAttribute = nullptr;
	check(shim()->abi_GetAttributeNodeNS(get(namespaceUri), get(localName), put(previousAttribute)));
	return previousAttribute;
}

template <typename T> IInspectable impl_IDtdNotation<T>::PublicId() const
{
	IInspectable value;
	check(shim()->get_PublicId(put(value)));
	return value;
}

template <typename T> IInspectable impl_IDtdNotation<T>::SystemId() const
{
	IInspectable value;
	check(shim()->get_SystemId(put(value)));
	return value;
}

template <typename T> IInspectable impl_IDtdEntity<T>::PublicId() const
{
	IInspectable value;
	check(shim()->get_PublicId(put(value)));
	return value;
}

template <typename T> IInspectable impl_IDtdEntity<T>::SystemId() const
{
	IInspectable value;
	check(shim()->get_SystemId(put(value)));
	return value;
}

template <typename T> IInspectable impl_IDtdEntity<T>::NotationName() const
{
	IInspectable value;
	check(shim()->get_NotationName(put(value)));
	return value;
}

template <typename T> String impl_IXmlProcessingInstruction<T>::Target() const
{
	String value;
	check(shim()->get_Target(put(value)));
	return value;
}

template <typename T> String impl_IXmlProcessingInstruction<T>::Data() const
{
	String value;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> void impl_IXmlProcessingInstruction<T>::Data(StringReference const & value) const
{
	check(shim()->put_Data(get(value)));
}

template <typename T> String impl_IXmlCharacterData<T>::Data() const
{
	String value;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> void impl_IXmlCharacterData<T>::Data(StringReference const & value) const
{
	check(shim()->put_Data(get(value)));
}

template <typename T> unsigned impl_IXmlCharacterData<T>::Length() const
{
	unsigned value = {};
	check(shim()->get_Length(&value));
	return value;
}

template <typename T> String impl_IXmlCharacterData<T>::SubstringData(unsigned const offset, unsigned const count) const
{
	String data;
	check(shim()->abi_SubstringData(offset, count, put(data)));
	return data;
}

template <typename T> void impl_IXmlCharacterData<T>::AppendData(StringReference const & data) const
{
	check(shim()->abi_AppendData(get(data)));
}

template <typename T> void impl_IXmlCharacterData<T>::InsertData(unsigned const offset, StringReference const & data) const
{
	check(shim()->abi_InsertData(offset, get(data)));
}

template <typename T> void impl_IXmlCharacterData<T>::DeleteData(unsigned const offset, unsigned const count) const
{
	check(shim()->abi_DeleteData(offset, count));
}

template <typename T> void impl_IXmlCharacterData<T>::ReplaceData(unsigned const offset, unsigned const count, StringReference const & data) const
{
	check(shim()->abi_ReplaceData(offset, count, get(data)));
}

template <typename T> Windows::Data::Xml::Dom::IXmlText impl_IXmlText<T>::SplitText(unsigned const offset) const
{
	Windows::Data::Xml::Dom::IXmlText secondPart;
	check(shim()->abi_SplitText(offset, put(secondPart)));
	return secondPart;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocumentType impl_IXmlDocument<T>::Doctype() const
{
	Windows::Data::Xml::Dom::XmlDocumentType value = nullptr;
	check(shim()->get_Doctype(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlDomImplementation impl_IXmlDocument<T>::Implementation() const
{
	Windows::Data::Xml::Dom::XmlDomImplementation value = nullptr;
	check(shim()->get_Implementation(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlElement impl_IXmlDocument<T>::DocumentElement() const
{
	Windows::Data::Xml::Dom::XmlElement value = nullptr;
	check(shim()->get_DocumentElement(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlElement impl_IXmlDocument<T>::CreateElement(StringReference const & tagName) const
{
	Windows::Data::Xml::Dom::XmlElement newElement = nullptr;
	check(shim()->abi_CreateElement(get(tagName), put(newElement)));
	return newElement;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocumentFragment impl_IXmlDocument<T>::CreateDocumentFragment() const
{
	Windows::Data::Xml::Dom::XmlDocumentFragment newDocumentFragment = nullptr;
	check(shim()->abi_CreateDocumentFragment(put(newDocumentFragment)));
	return newDocumentFragment;
}

template <typename T> Windows::Data::Xml::Dom::XmlText impl_IXmlDocument<T>::CreateTextNode(StringReference const & data) const
{
	Windows::Data::Xml::Dom::XmlText newTextNode = nullptr;
	check(shim()->abi_CreateTextNode(get(data), put(newTextNode)));
	return newTextNode;
}

template <typename T> Windows::Data::Xml::Dom::XmlComment impl_IXmlDocument<T>::CreateComment(StringReference const & data) const
{
	Windows::Data::Xml::Dom::XmlComment newComment = nullptr;
	check(shim()->abi_CreateComment(get(data), put(newComment)));
	return newComment;
}

template <typename T> Windows::Data::Xml::Dom::XmlProcessingInstruction impl_IXmlDocument<T>::CreateProcessingInstruction(StringReference const & target, StringReference const & data) const
{
	Windows::Data::Xml::Dom::XmlProcessingInstruction newProcessingInstruction = nullptr;
	check(shim()->abi_CreateProcessingInstruction(get(target), get(data), put(newProcessingInstruction)));
	return newProcessingInstruction;
}

template <typename T> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlDocument<T>::CreateAttribute(StringReference const & name) const
{
	Windows::Data::Xml::Dom::XmlAttribute newAttribute = nullptr;
	check(shim()->abi_CreateAttribute(get(name), put(newAttribute)));
	return newAttribute;
}

template <typename T> Windows::Data::Xml::Dom::XmlEntityReference impl_IXmlDocument<T>::CreateEntityReference(StringReference const & name) const
{
	Windows::Data::Xml::Dom::XmlEntityReference newEntityReference = nullptr;
	check(shim()->abi_CreateEntityReference(get(name), put(newEntityReference)));
	return newEntityReference;
}

template <typename T> Windows::Data::Xml::Dom::XmlNodeList impl_IXmlDocument<T>::GetElementsByTagName(StringReference const & tagName) const
{
	Windows::Data::Xml::Dom::XmlNodeList elements = nullptr;
	check(shim()->abi_GetElementsByTagName(get(tagName), put(elements)));
	return elements;
}

template <typename T> Windows::Data::Xml::Dom::XmlCDataSection impl_IXmlDocument<T>::CreateCDataSection(StringReference const & data) const
{
	Windows::Data::Xml::Dom::XmlCDataSection newCDataSection = nullptr;
	check(shim()->abi_CreateCDataSection(get(data), put(newCDataSection)));
	return newCDataSection;
}

template <typename T> String impl_IXmlDocument<T>::DocumentUri() const
{
	String value;
	check(shim()->get_DocumentUri(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlAttribute impl_IXmlDocument<T>::CreateAttributeNS(IInspectable const & namespaceUri, StringReference const & qualifiedName) const
{
	Windows::Data::Xml::Dom::XmlAttribute newAttribute = nullptr;
	check(shim()->abi_CreateAttributeNS(get(namespaceUri), get(qualifiedName), put(newAttribute)));
	return newAttribute;
}

template <typename T> Windows::Data::Xml::Dom::XmlElement impl_IXmlDocument<T>::CreateElementNS(IInspectable const & namespaceUri, StringReference const & qualifiedName) const
{
	Windows::Data::Xml::Dom::XmlElement newElement = nullptr;
	check(shim()->abi_CreateElementNS(get(namespaceUri), get(qualifiedName), put(newElement)));
	return newElement;
}

template <typename T> Windows::Data::Xml::Dom::XmlElement impl_IXmlDocument<T>::GetElementById(StringReference const & elementId) const
{
	Windows::Data::Xml::Dom::XmlElement element = nullptr;
	check(shim()->abi_GetElementById(get(elementId), put(element)));
	return element;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlDocument<T>::ImportNode(Windows::Data::Xml::Dom::IXmlNode const & node, bool const deep) const
{
	Windows::Data::Xml::Dom::IXmlNode newNode;
	check(shim()->abi_ImportNode(get(node), deep, put(newNode)));
	return newNode;
}

template <typename T> unsigned impl_IXmlNamedNodeMap<T>::Length() const
{
	unsigned value = {};
	check(shim()->get_Length(&value));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::Item(unsigned const index) const
{
	Windows::Data::Xml::Dom::IXmlNode node;
	check(shim()->abi_Item(index, put(node)));
	return node;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::GetNamedItem(StringReference const & name) const
{
	Windows::Data::Xml::Dom::IXmlNode node;
	check(shim()->abi_GetNamedItem(get(name), put(node)));
	return node;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::SetNamedItem(Windows::Data::Xml::Dom::IXmlNode const & node) const
{
	Windows::Data::Xml::Dom::IXmlNode previousNode;
	check(shim()->abi_SetNamedItem(get(node), put(previousNode)));
	return previousNode;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::RemoveNamedItem(StringReference const & name) const
{
	Windows::Data::Xml::Dom::IXmlNode previousNode;
	check(shim()->abi_RemoveNamedItem(get(name), put(previousNode)));
	return previousNode;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::GetNamedItemNS(IInspectable const & namespaceUri, StringReference const & name) const
{
	Windows::Data::Xml::Dom::IXmlNode node;
	check(shim()->abi_GetNamedItemNS(get(namespaceUri), get(name), put(node)));
	return node;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::RemoveNamedItemNS(IInspectable const & namespaceUri, StringReference const & name) const
{
	Windows::Data::Xml::Dom::IXmlNode previousNode;
	check(shim()->abi_RemoveNamedItemNS(get(namespaceUri), get(name), put(previousNode)));
	return previousNode;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNamedNodeMap<T>::SetNamedItemNS(Windows::Data::Xml::Dom::IXmlNode const & node) const
{
	Windows::Data::Xml::Dom::IXmlNode previousNode;
	check(shim()->abi_SetNamedItemNS(get(node), put(previousNode)));
	return previousNode;
}

template <typename T> unsigned impl_IXmlNodeList<T>::Length() const
{
	unsigned value = {};
	check(shim()->get_Length(&value));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::IXmlNode impl_IXmlNodeList<T>::Item(unsigned const index) const
{
	Windows::Data::Xml::Dom::IXmlNode node;
	check(shim()->abi_Item(index, put(node)));
	return node;
}

template <typename T> unsigned impl_IXmlLoadSettings<T>::MaxElementDepth() const
{
	unsigned value = {};
	check(shim()->get_MaxElementDepth(&value));
	return value;
}

template <typename T> void impl_IXmlLoadSettings<T>::MaxElementDepth(unsigned const value) const
{
	check(shim()->put_MaxElementDepth(value));
}

template <typename T> bool impl_IXmlLoadSettings<T>::ProhibitDtd() const
{
	bool value = {};
	check(shim()->get_ProhibitDtd(put(value)));
	return value;
}

template <typename T> void impl_IXmlLoadSettings<T>::ProhibitDtd(bool const value) const
{
	check(shim()->put_ProhibitDtd(value));
}

template <typename T> bool impl_IXmlLoadSettings<T>::ResolveExternals() const
{
	bool value = {};
	check(shim()->get_ResolveExternals(put(value)));
	return value;
}

template <typename T> void impl_IXmlLoadSettings<T>::ResolveExternals(bool const value) const
{
	check(shim()->put_ResolveExternals(value));
}

template <typename T> bool impl_IXmlLoadSettings<T>::ValidateOnParse() const
{
	bool value = {};
	check(shim()->get_ValidateOnParse(put(value)));
	return value;
}

template <typename T> void impl_IXmlLoadSettings<T>::ValidateOnParse(bool const value) const
{
	check(shim()->put_ValidateOnParse(value));
}

template <typename T> bool impl_IXmlLoadSettings<T>::ElementContentWhiteSpace() const
{
	bool value = {};
	check(shim()->get_ElementContentWhiteSpace(put(value)));
	return value;
}

template <typename T> void impl_IXmlLoadSettings<T>::ElementContentWhiteSpace(bool const value) const
{
	check(shim()->put_ElementContentWhiteSpace(value));
}

template <typename T> void impl_IXmlDocumentIO<T>::LoadXml(StringReference const & xml) const
{
	check(shim()->abi_LoadXml(get(xml)));
}

template <typename T> void impl_IXmlDocumentIO<T>::LoadXml(StringReference const & xml, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings) const
{
	check(shim()->abi_LoadXmlWithSettings(get(xml), get(loadSettings)));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IXmlDocumentIO<T>::SaveToFileAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SaveToFileAsync(get(file), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> void impl_IXmlDocumentIO2<T>::LoadXmlFromBuffer(Windows::Storage::Streams::IBuffer const & buffer) const
{
	check(shim()->abi_LoadXmlFromBuffer(get(buffer)));
}

template <typename T> void impl_IXmlDocumentIO2<T>::LoadXmlFromBuffer(Windows::Storage::Streams::IBuffer const & buffer, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings) const
{
	check(shim()->abi_LoadXmlFromBufferWithSettings(get(buffer), get(loadSettings)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> impl_IXmlDocumentStatics<T>::LoadFromUriAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> asyncInfo;
	check(shim()->abi_LoadFromUriAsync(get(uri), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> impl_IXmlDocumentStatics<T>::LoadFromUriAsync(Windows::Foundation::Uri const & uri, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> asyncInfo;
	check(shim()->abi_LoadFromUriWithSettingsAsync(get(uri), get(loadSettings), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> impl_IXmlDocumentStatics<T>::LoadFromFileAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> asyncInfo;
	check(shim()->abi_LoadFromFileAsync(get(file), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> impl_IXmlDocumentStatics<T>::LoadFromFileAsync(Windows::Storage::IStorageFile const & file, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings) const
{
	Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> asyncInfo;
	check(shim()->abi_LoadFromFileWithSettingsAsync(get(file), get(loadSettings), put(asyncInfo)));
	return asyncInfo;
}

}}}}}

namespace winrt { namespace Windows { namespace Data { namespace Xml { namespace Xsl {

template <typename T> String impl_IXsltProcessor<T>::TransformToString(Windows::Data::Xml::Dom::IXmlNode const & inputNode) const
{
	String output;
	check(shim()->abi_TransformToString(get(inputNode), put(output)));
	return output;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IXsltProcessor2<T>::TransformToDocument(Windows::Data::Xml::Dom::IXmlNode const & inputNode) const
{
	Windows::Data::Xml::Dom::XmlDocument output = nullptr;
	check(shim()->abi_TransformToDocument(get(inputNode), put(output)));
	return output;
}

template <typename T> Windows::Data::Xml::Xsl::XsltProcessor impl_IXsltProcessorFactory<T>::CreateInstance(Windows::Data::Xml::Dom::XmlDocument const & document) const
{
	Windows::Data::Xml::Xsl::XsltProcessor xsltProcessor = nullptr;
	check(shim()->abi_CreateInstance(get(document), put(xsltProcessor)));
	return xsltProcessor;
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace AllJoyn {

template <typename T> int impl_IAllJoynStatusStatics<T>::Ok() const
{
	int value = {};
	check(shim()->get_Ok(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::Fail() const
{
	int value = {};
	check(shim()->get_Fail(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::OperationTimedOut() const
{
	int value = {};
	check(shim()->get_OperationTimedOut(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::OtherEndClosed() const
{
	int value = {};
	check(shim()->get_OtherEndClosed(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::ConnectionRefused() const
{
	int value = {};
	check(shim()->get_ConnectionRefused(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::AuthenticationFailed() const
{
	int value = {};
	check(shim()->get_AuthenticationFailed(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::AuthenticationRejectedByUser() const
{
	int value = {};
	check(shim()->get_AuthenticationRejectedByUser(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::SslConnectFailed() const
{
	int value = {};
	check(shim()->get_SslConnectFailed(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::SslIdentityVerificationFailed() const
{
	int value = {};
	check(shim()->get_SslIdentityVerificationFailed(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::InsufficientSecurity() const
{
	int value = {};
	check(shim()->get_InsufficientSecurity(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::InvalidArgument1() const
{
	int value = {};
	check(shim()->get_InvalidArgument1(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::InvalidArgument2() const
{
	int value = {};
	check(shim()->get_InvalidArgument2(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::InvalidArgument3() const
{
	int value = {};
	check(shim()->get_InvalidArgument3(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::InvalidArgument4() const
{
	int value = {};
	check(shim()->get_InvalidArgument4(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::InvalidArgument5() const
{
	int value = {};
	check(shim()->get_InvalidArgument5(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::InvalidArgument6() const
{
	int value = {};
	check(shim()->get_InvalidArgument6(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::InvalidArgument7() const
{
	int value = {};
	check(shim()->get_InvalidArgument7(&value));
	return value;
}

template <typename T> int impl_IAllJoynStatusStatics<T>::InvalidArgument8() const
{
	int value = {};
	check(shim()->get_InvalidArgument8(&value));
	return value;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynAboutData impl_IAllJoynBusAttachment<T>::AboutData() const
{
	Windows::Devices::AllJoyn::AllJoynAboutData value = nullptr;
	check(shim()->get_AboutData(put(value)));
	return value;
}

template <typename T> String impl_IAllJoynBusAttachment<T>::ConnectionSpecification() const
{
	String value;
	check(shim()->get_ConnectionSpecification(put(value)));
	return value;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynBusAttachmentState impl_IAllJoynBusAttachment<T>::State() const
{
	Windows::Devices::AllJoyn::AllJoynBusAttachmentState value = {};
	check(shim()->get_State(&value));
	return value;
}

template <typename T> String impl_IAllJoynBusAttachment<T>::UniqueName() const
{
	String value;
	check(shim()->get_UniqueName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<int> impl_IAllJoynBusAttachment<T>::PingAsync(StringReference const & uniqueName) const
{
	Windows::Foundation::IAsyncOperation<int> operation;
	check(shim()->abi_PingAsync(get(uniqueName), put(operation)));
	return operation;
}

template <typename T> void impl_IAllJoynBusAttachment<T>::Connect() const
{
	check(shim()->abi_Connect());
}

template <typename T> void impl_IAllJoynBusAttachment<T>::Disconnect() const
{
	check(shim()->abi_Disconnect());
}

template <typename T> long long impl_IAllJoynBusAttachment<T>::StateChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::AllJoyn::AllJoynBusAttachment, Windows::Devices::AllJoyn::AllJoynBusAttachmentStateChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_StateChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAllJoynBusAttachment<T>::StateChanged(F handler) const
{
	return StateChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::AllJoyn::AllJoynBusAttachment, Windows::Devices::AllJoyn::AllJoynBusAttachmentStateChangedEventArgs>(handler));
}

template <typename T> void impl_IAllJoynBusAttachment<T>::StateChanged(long long const token) const
{
	check(shim()->remove_StateChanged(token));
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Devices::AllJoyn::AllJoynAuthenticationMechanism> impl_IAllJoynBusAttachment<T>::AuthenticationMechanisms() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Devices::AllJoyn::AllJoynAuthenticationMechanism> value;
	check(shim()->get_AuthenticationMechanisms(put(value)));
	return value;
}

template <typename T> long long impl_IAllJoynBusAttachment<T>::CredentialsRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::AllJoyn::AllJoynBusAttachment, Windows::Devices::AllJoyn::AllJoynCredentialsRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_CredentialsRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAllJoynBusAttachment<T>::CredentialsRequested(F handler) const
{
	return CredentialsRequested(Windows::Foundation::TypedEventHandler<Windows::Devices::AllJoyn::AllJoynBusAttachment, Windows::Devices::AllJoyn::AllJoynCredentialsRequestedEventArgs>(handler));
}

template <typename T> void impl_IAllJoynBusAttachment<T>::CredentialsRequested(long long const token) const
{
	check(shim()->remove_CredentialsRequested(token));
}

template <typename T> long long impl_IAllJoynBusAttachment<T>::CredentialsVerificationRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::AllJoyn::AllJoynBusAttachment, Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_CredentialsVerificationRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAllJoynBusAttachment<T>::CredentialsVerificationRequested(F handler) const
{
	return CredentialsVerificationRequested(Windows::Foundation::TypedEventHandler<Windows::Devices::AllJoyn::AllJoynBusAttachment, Windows::Devices::AllJoyn::AllJoynCredentialsVerificationRequestedEventArgs>(handler));
}

template <typename T> void impl_IAllJoynBusAttachment<T>::CredentialsVerificationRequested(long long const token) const
{
	check(shim()->remove_CredentialsVerificationRequested(token));
}

template <typename T> long long impl_IAllJoynBusAttachment<T>::AuthenticationComplete(Windows::Foundation::ITypedEventHandler<Windows::Devices::AllJoyn::AllJoynBusAttachment, Windows::Devices::AllJoyn::AllJoynAuthenticationCompleteEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_AuthenticationComplete(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAllJoynBusAttachment<T>::AuthenticationComplete(F handler) const
{
	return AuthenticationComplete(Windows::Foundation::TypedEventHandler<Windows::Devices::AllJoyn::AllJoynBusAttachment, Windows::Devices::AllJoyn::AllJoynAuthenticationCompleteEventArgs>(handler));
}

template <typename T> void impl_IAllJoynBusAttachment<T>::AuthenticationComplete(long long const token) const
{
	check(shim()->remove_AuthenticationComplete(token));
}

template <typename T> Windows::Devices::AllJoyn::AllJoynBusAttachmentState impl_IAllJoynBusAttachmentStateChangedEventArgs<T>::State() const
{
	Windows::Devices::AllJoyn::AllJoynBusAttachmentState value = {};
	check(shim()->get_State(&value));
	return value;
}

template <typename T> int impl_IAllJoynBusAttachmentStateChangedEventArgs<T>::Status() const
{
	int value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynAuthenticationMechanism impl_IAllJoynCredentials<T>::AuthenticationMechanism() const
{
	Windows::Devices::AllJoyn::AllJoynAuthenticationMechanism value = {};
	check(shim()->get_AuthenticationMechanism(&value));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_IAllJoynCredentials<T>::Certificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check(shim()->get_Certificate(put(value)));
	return value;
}

template <typename T> void impl_IAllJoynCredentials<T>::Certificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const
{
	check(shim()->put_Certificate(get(value)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IAllJoynCredentials<T>::PasswordCredential() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check(shim()->get_PasswordCredential(put(value)));
	return value;
}

template <typename T> void impl_IAllJoynCredentials<T>::PasswordCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check(shim()->put_PasswordCredential(get(value)));
}

template <typename T> Windows::Foundation::TimeSpan impl_IAllJoynCredentials<T>::Timeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Timeout(&value));
	return value;
}

template <typename T> void impl_IAllJoynCredentials<T>::Timeout(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_Timeout(value));
}

template <typename T> unsigned short impl_IAllJoynCredentialsRequestedEventArgs<T>::AttemptCount() const
{
	unsigned short value = {};
	check(shim()->get_AttemptCount(&value));
	return value;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynCredentials impl_IAllJoynCredentialsRequestedEventArgs<T>::Credentials() const
{
	Windows::Devices::AllJoyn::AllJoynCredentials value = nullptr;
	check(shim()->get_Credentials(put(value)));
	return value;
}

template <typename T> String impl_IAllJoynCredentialsRequestedEventArgs<T>::PeerUniqueName() const
{
	String value;
	check(shim()->get_PeerUniqueName(put(value)));
	return value;
}

template <typename T> String impl_IAllJoynCredentialsRequestedEventArgs<T>::RequestedUserName() const
{
	String value;
	check(shim()->get_RequestedUserName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Deferral impl_IAllJoynCredentialsRequestedEventArgs<T>::GetDeferral() const
{
	Windows::Foundation::Deferral result = nullptr;
	check(shim()->abi_GetDeferral(put(result)));
	return result;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynAuthenticationMechanism impl_IAllJoynCredentialsVerificationRequestedEventArgs<T>::AuthenticationMechanism() const
{
	Windows::Devices::AllJoyn::AllJoynAuthenticationMechanism value = {};
	check(shim()->get_AuthenticationMechanism(&value));
	return value;
}

template <typename T> String impl_IAllJoynCredentialsVerificationRequestedEventArgs<T>::PeerUniqueName() const
{
	String value;
	check(shim()->get_PeerUniqueName(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_IAllJoynCredentialsVerificationRequestedEventArgs<T>::PeerCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check(shim()->get_PeerCertificate(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketSslErrorSeverity impl_IAllJoynCredentialsVerificationRequestedEventArgs<T>::PeerCertificateErrorSeverity() const
{
	Windows::Networking::Sockets::SocketSslErrorSeverity value = {};
	check(shim()->get_PeerCertificateErrorSeverity(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> impl_IAllJoynCredentialsVerificationRequestedEventArgs<T>::PeerCertificateErrors() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> value;
	check(shim()->get_PeerCertificateErrors(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_IAllJoynCredentialsVerificationRequestedEventArgs<T>::PeerIntermediateCertificates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value;
	check(shim()->get_PeerIntermediateCertificates(put(value)));
	return value;
}

template <typename T> void impl_IAllJoynCredentialsVerificationRequestedEventArgs<T>::Accept() const
{
	check(shim()->abi_Accept());
}

template <typename T> Windows::Foundation::Deferral impl_IAllJoynCredentialsVerificationRequestedEventArgs<T>::GetDeferral() const
{
	Windows::Foundation::Deferral result = nullptr;
	check(shim()->abi_GetDeferral(put(result)));
	return result;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynAuthenticationMechanism impl_IAllJoynAuthenticationCompleteEventArgs<T>::AuthenticationMechanism() const
{
	Windows::Devices::AllJoyn::AllJoynAuthenticationMechanism value = {};
	check(shim()->get_AuthenticationMechanism(&value));
	return value;
}

template <typename T> String impl_IAllJoynAuthenticationCompleteEventArgs<T>::PeerUniqueName() const
{
	String value;
	check(shim()->get_PeerUniqueName(put(value)));
	return value;
}

template <typename T> bool impl_IAllJoynAuthenticationCompleteEventArgs<T>::Succeeded() const
{
	bool value = {};
	check(shim()->get_Succeeded(put(value)));
	return value;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynBusAttachment impl_IAllJoynBusAttachmentFactory<T>::Create(StringReference const & connectionSpecification) const
{
	Windows::Devices::AllJoyn::AllJoynBusAttachment result = nullptr;
	check(shim()->abi_Create(get(connectionSpecification), put(result)));
	return result;
}

template <typename T> String impl_IAllJoynServiceInfo<T>::UniqueName() const
{
	String value;
	check(shim()->get_UniqueName(put(value)));
	return value;
}

template <typename T> String impl_IAllJoynServiceInfo<T>::ObjectPath() const
{
	String value;
	check(shim()->get_ObjectPath(put(value)));
	return value;
}

template <typename T> unsigned short impl_IAllJoynServiceInfo<T>::SessionPort() const
{
	unsigned short value = {};
	check(shim()->get_SessionPort(&value));
	return value;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynServiceInfo impl_IAllJoynServiceInfoFactory<T>::Create(StringReference const & uniqueName, StringReference const & objectPath, unsigned short const sessionPort) const
{
	Windows::Devices::AllJoyn::AllJoynServiceInfo result = nullptr;
	check(shim()->abi_Create(get(uniqueName), get(objectPath), sessionPort, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::AllJoyn::AllJoynAboutDataView> impl_IAllJoynAboutDataViewStatics<T>::GetDataBySessionPortAsync(StringReference const & uniqueName, Windows::Devices::AllJoyn::AllJoynBusAttachment const & busAttachment, unsigned short const sessionPort) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::AllJoyn::AllJoynAboutDataView> operation;
	check(shim()->abi_GetDataBySessionPortAsync(get(uniqueName), get(busAttachment), sessionPort, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::AllJoyn::AllJoynAboutDataView> impl_IAllJoynAboutDataViewStatics<T>::GetDataBySessionPortAsync(StringReference const & uniqueName, Windows::Devices::AllJoyn::AllJoynBusAttachment const & busAttachment, unsigned short const sessionPort, Windows::Globalization::Language const & language) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::AllJoyn::AllJoynAboutDataView> operation;
	check(shim()->abi_GetDataBySessionPortWithLanguageAsync(get(uniqueName), get(busAttachment), sessionPort, get(language), put(operation)));
	return operation;
}

template <typename T> int impl_IAllJoynAboutDataView<T>::Status() const
{
	int value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IAllJoynAboutDataView<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> String impl_IAllJoynAboutDataView<T>::AJSoftwareVersion() const
{
	String value;
	check(shim()->get_AJSoftwareVersion(put(value)));
	return value;
}

template <typename T> GUID impl_IAllJoynAboutDataView<T>::AppId() const
{
	GUID value = {};
	check(shim()->get_AppId(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IAllJoynAboutDataView<T>::DateOfManufacture() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_DateOfManufacture(put(value)));
	return value;
}

template <typename T> Windows::Globalization::Language impl_IAllJoynAboutDataView<T>::DefaultLanguage() const
{
	Windows::Globalization::Language value = nullptr;
	check(shim()->get_DefaultLanguage(put(value)));
	return value;
}

template <typename T> String impl_IAllJoynAboutDataView<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> String impl_IAllJoynAboutDataView<T>::HardwareVersion() const
{
	String value;
	check(shim()->get_HardwareVersion(put(value)));
	return value;
}

template <typename T> String impl_IAllJoynAboutDataView<T>::ModelNumber() const
{
	String value;
	check(shim()->get_ModelNumber(put(value)));
	return value;
}

template <typename T> String impl_IAllJoynAboutDataView<T>::SoftwareVersion() const
{
	String value;
	check(shim()->get_SoftwareVersion(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> impl_IAllJoynAboutDataView<T>::SupportedLanguages() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> value;
	check(shim()->get_SupportedLanguages(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IAllJoynAboutDataView<T>::SupportUrl() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_SupportUrl(put(value)));
	return value;
}

template <typename T> String impl_IAllJoynAboutDataView<T>::AppName() const
{
	String value;
	check(shim()->get_AppName(put(value)));
	return value;
}

template <typename T> String impl_IAllJoynAboutDataView<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> String impl_IAllJoynAboutDataView<T>::DeviceName() const
{
	String value;
	check(shim()->get_DeviceName(put(value)));
	return value;
}

template <typename T> String impl_IAllJoynAboutDataView<T>::Manufacturer() const
{
	String value;
	check(shim()->get_Manufacturer(put(value)));
	return value;
}

template <typename T> bool impl_IAllJoynAboutData<T>::IsEnabled() const
{
	bool value = {};
	check(shim()->get_IsEnabled(put(value)));
	return value;
}

template <typename T> void impl_IAllJoynAboutData<T>::IsEnabled(bool const value) const
{
	check(shim()->put_IsEnabled(value));
}

template <typename T> String impl_IAllJoynAboutData<T>::DefaultAppName() const
{
	String value;
	check(shim()->get_DefaultAppName(put(value)));
	return value;
}

template <typename T> void impl_IAllJoynAboutData<T>::DefaultAppName(StringReference const & value) const
{
	check(shim()->put_DefaultAppName(get(value)));
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IAllJoynAboutData<T>::AppNames() const
{
	Windows::Foundation::Collections::IMap<String, String> value;
	check(shim()->get_AppNames(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IAllJoynAboutData<T>::DateOfManufacture() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_DateOfManufacture(put(value)));
	return value;
}

template <typename T> void impl_IAllJoynAboutData<T>::DateOfManufacture(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_DateOfManufacture(get(value)));
}

template <typename T> String impl_IAllJoynAboutData<T>::DefaultDescription() const
{
	String value;
	check(shim()->get_DefaultDescription(put(value)));
	return value;
}

template <typename T> void impl_IAllJoynAboutData<T>::DefaultDescription(StringReference const & value) const
{
	check(shim()->put_DefaultDescription(get(value)));
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IAllJoynAboutData<T>::Descriptions() const
{
	Windows::Foundation::Collections::IMap<String, String> value;
	check(shim()->get_Descriptions(put(value)));
	return value;
}

template <typename T> String impl_IAllJoynAboutData<T>::DefaultManufacturer() const
{
	String value;
	check(shim()->get_DefaultManufacturer(put(value)));
	return value;
}

template <typename T> void impl_IAllJoynAboutData<T>::DefaultManufacturer(StringReference const & value) const
{
	check(shim()->put_DefaultManufacturer(get(value)));
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IAllJoynAboutData<T>::Manufacturers() const
{
	Windows::Foundation::Collections::IMap<String, String> value;
	check(shim()->get_Manufacturers(put(value)));
	return value;
}

template <typename T> String impl_IAllJoynAboutData<T>::ModelNumber() const
{
	String value;
	check(shim()->get_ModelNumber(put(value)));
	return value;
}

template <typename T> void impl_IAllJoynAboutData<T>::ModelNumber(StringReference const & value) const
{
	check(shim()->put_ModelNumber(get(value)));
}

template <typename T> String impl_IAllJoynAboutData<T>::SoftwareVersion() const
{
	String value;
	check(shim()->get_SoftwareVersion(put(value)));
	return value;
}

template <typename T> void impl_IAllJoynAboutData<T>::SoftwareVersion(StringReference const & value) const
{
	check(shim()->put_SoftwareVersion(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IAllJoynAboutData<T>::SupportUrl() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_SupportUrl(put(value)));
	return value;
}

template <typename T> void impl_IAllJoynAboutData<T>::SupportUrl(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_SupportUrl(get(value)));
}

template <typename T> GUID impl_IAllJoynAboutData<T>::AppId() const
{
	GUID value = {};
	check(shim()->get_AppId(&value));
	return value;
}

template <typename T> void impl_IAllJoynAboutData<T>::AppId(GUID const value) const
{
	check(shim()->put_AppId(value));
}

template <typename T> String impl_IAllJoynAcceptSessionJoinerEventArgs<T>::UniqueName() const
{
	String value;
	check(shim()->get_UniqueName(put(value)));
	return value;
}

template <typename T> unsigned short impl_IAllJoynAcceptSessionJoinerEventArgs<T>::SessionPort() const
{
	unsigned short value = {};
	check(shim()->get_SessionPort(&value));
	return value;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynTrafficType impl_IAllJoynAcceptSessionJoinerEventArgs<T>::TrafficType() const
{
	Windows::Devices::AllJoyn::AllJoynTrafficType value = {};
	check(shim()->get_TrafficType(&value));
	return value;
}

template <typename T> bool impl_IAllJoynAcceptSessionJoinerEventArgs<T>::SamePhysicalNode() const
{
	bool value = {};
	check(shim()->get_SamePhysicalNode(put(value)));
	return value;
}

template <typename T> bool impl_IAllJoynAcceptSessionJoinerEventArgs<T>::SameNetwork() const
{
	bool value = {};
	check(shim()->get_SameNetwork(put(value)));
	return value;
}

template <typename T> void impl_IAllJoynAcceptSessionJoinerEventArgs<T>::Accept() const
{
	check(shim()->abi_Accept());
}

template <typename T> void impl_IAllJoynAcceptSessionJoiner<T>::Accept() const
{
	check(shim()->abi_Accept());
}

template <typename T> Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs impl_IAllJoynAcceptSessionJoinerEventArgsFactory<T>::Create(StringReference const & uniqueName, unsigned short const sessionPort, Windows::Devices::AllJoyn::AllJoynTrafficType const trafficType, byte const proximity, Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoiner const & acceptSessionJoiner) const
{
	Windows::Devices::AllJoyn::AllJoynAcceptSessionJoinerEventArgs result = nullptr;
	check(shim()->abi_Create(get(uniqueName), sessionPort, trafficType, proximity, get(acceptSessionJoiner), put(result)));
	return result;
}

template <typename T> String impl_IAllJoynSessionMemberAddedEventArgs<T>::UniqueName() const
{
	String value;
	check(shim()->get_UniqueName(put(value)));
	return value;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynSessionMemberAddedEventArgs impl_IAllJoynSessionMemberAddedEventArgsFactory<T>::Create(StringReference const & uniqueName) const
{
	Windows::Devices::AllJoyn::AllJoynSessionMemberAddedEventArgs result = nullptr;
	check(shim()->abi_Create(get(uniqueName), put(result)));
	return result;
}

template <typename T> String impl_IAllJoynSessionMemberRemovedEventArgs<T>::UniqueName() const
{
	String value;
	check(shim()->get_UniqueName(put(value)));
	return value;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynSessionMemberRemovedEventArgs impl_IAllJoynSessionMemberRemovedEventArgsFactory<T>::Create(StringReference const & uniqueName) const
{
	Windows::Devices::AllJoyn::AllJoynSessionMemberRemovedEventArgs result = nullptr;
	check(shim()->abi_Create(get(uniqueName), put(result)));
	return result;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynSessionLostReason impl_IAllJoynSessionLostEventArgs<T>::Reason() const
{
	Windows::Devices::AllJoyn::AllJoynSessionLostReason value = {};
	check(shim()->get_Reason(&value));
	return value;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynSessionLostEventArgs impl_IAllJoynSessionLostEventArgsFactory<T>::Create(Windows::Devices::AllJoyn::AllJoynSessionLostReason const reason) const
{
	Windows::Devices::AllJoyn::AllJoynSessionLostEventArgs result = nullptr;
	check(shim()->abi_Create(reason, put(result)));
	return result;
}

template <typename T> int impl_IAllJoynProducerStoppedEventArgs<T>::Status() const
{
	int value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynProducerStoppedEventArgs impl_IAllJoynProducerStoppedEventArgsFactory<T>::Create(int const status) const
{
	Windows::Devices::AllJoyn::AllJoynProducerStoppedEventArgs result = nullptr;
	check(shim()->abi_Create(status, put(result)));
	return result;
}

template <typename T> int impl_IAllJoynWatcherStoppedEventArgs<T>::Status() const
{
	int value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynWatcherStoppedEventArgs impl_IAllJoynWatcherStoppedEventArgsFactory<T>::Create(int const status) const
{
	Windows::Devices::AllJoyn::AllJoynWatcherStoppedEventArgs result = nullptr;
	check(shim()->abi_Create(status, put(result)));
	return result;
}

template <typename T> String impl_IAllJoynServiceInfoRemovedEventArgs<T>::UniqueName() const
{
	String value;
	check(shim()->get_UniqueName(put(value)));
	return value;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynServiceInfoRemovedEventArgs impl_IAllJoynServiceInfoRemovedEventArgsFactory<T>::Create(StringReference const & uniqueName) const
{
	Windows::Devices::AllJoyn::AllJoynServiceInfoRemovedEventArgs result = nullptr;
	check(shim()->abi_Create(get(uniqueName), put(result)));
	return result;
}

template <typename T> String impl_IAllJoynMessageInfo<T>::SenderUniqueName() const
{
	String value;
	check(shim()->get_SenderUniqueName(put(value)));
	return value;
}

template <typename T> Windows::Devices::AllJoyn::AllJoynMessageInfo impl_IAllJoynMessageInfoFactory<T>::Create(StringReference const & senderUniqueName) const
{
	Windows::Devices::AllJoyn::AllJoynMessageInfo result = nullptr;
	check(shim()->abi_Create(get(senderUniqueName), put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Background {

template <typename T> String impl_IDeviceUseDetails<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> String impl_IDeviceUseDetails<T>::Arguments() const
{
	String value;
	check(shim()->get_Arguments(put(value)));
	return value;
}

template <typename T> String impl_IDeviceServicingDetails<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> String impl_IDeviceServicingDetails<T>::Arguments() const
{
	String value;
	check(shim()->get_Arguments(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IDeviceServicingDetails<T>::ExpectedDuration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_ExpectedDuration(&value));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth {

template <typename T> String impl_IBluetoothDevice<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IBluetoothDevice<T>::HostName() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_HostName(put(value)));
	return value;
}

template <typename T> String impl_IBluetoothDevice<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothClassOfDevice impl_IBluetoothDevice<T>::ClassOfDevice() const
{
	Windows::Devices::Bluetooth::BluetoothClassOfDevice value = nullptr;
	check(shim()->get_ClassOfDevice(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Storage::Streams::IBuffer> impl_IBluetoothDevice<T>::SdpRecords() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Storage::Streams::IBuffer> value;
	check(shim()->get_SdpRecords(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService> impl_IBluetoothDevice<T>::RfcommServices() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService> value;
	check(shim()->get_RfcommServices(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothConnectionStatus impl_IBluetoothDevice<T>::ConnectionStatus() const
{
	Windows::Devices::Bluetooth::BluetoothConnectionStatus value = {};
	check(shim()->get_ConnectionStatus(&value));
	return value;
}

template <typename T> unsigned long long impl_IBluetoothDevice<T>::BluetoothAddress() const
{
	unsigned long long value = {};
	check(shim()->get_BluetoothAddress(&value));
	return value;
}

template <typename T> long long impl_IBluetoothDevice<T>::NameChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothDevice, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_NameChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothDevice<T>::NameChanged(F handler) const
{
	return NameChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::BluetoothDevice, IInspectable>(handler));
}

template <typename T> void impl_IBluetoothDevice<T>::NameChanged(long long const token) const
{
	check(shim()->remove_NameChanged(token));
}

template <typename T> long long impl_IBluetoothDevice<T>::SdpRecordsChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothDevice, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_SdpRecordsChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothDevice<T>::SdpRecordsChanged(F handler) const
{
	return SdpRecordsChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::BluetoothDevice, IInspectable>(handler));
}

template <typename T> void impl_IBluetoothDevice<T>::SdpRecordsChanged(long long const token) const
{
	check(shim()->remove_SdpRecordsChanged(token));
}

template <typename T> long long impl_IBluetoothDevice<T>::ConnectionStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothDevice, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_ConnectionStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothDevice<T>::ConnectionStatusChanged(F handler) const
{
	return ConnectionStatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::BluetoothDevice, IInspectable>(handler));
}

template <typename T> void impl_IBluetoothDevice<T>::ConnectionStatusChanged(long long const token) const
{
	check(shim()->remove_ConnectionStatusChanged(token));
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IBluetoothDevice2<T>::DeviceInformation() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check(shim()->get_DeviceInformation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> impl_IBluetoothDeviceStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> operation;
	check(shim()->abi_FromIdAsync(get(deviceId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> impl_IBluetoothDeviceStatics<T>::FromHostNameAsync(Windows::Networking::HostName const & hostName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> operation;
	check(shim()->abi_FromHostNameAsync(get(hostName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> impl_IBluetoothDeviceStatics<T>::FromBluetoothAddressAsync(unsigned long long const address) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> operation;
	check(shim()->abi_FromBluetoothAddressAsync(address, put(operation)));
	return operation;
}

template <typename T> String impl_IBluetoothDeviceStatics<T>::GetDeviceSelector() const
{
	String deviceSelector;
	check(shim()->abi_GetDeviceSelector(put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothDeviceStatics2<T>::GetDeviceSelectorFromPairingState(bool const pairingState) const
{
	String deviceSelector;
	check(shim()->abi_GetDeviceSelectorFromPairingState(pairingState, put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothDeviceStatics2<T>::GetDeviceSelectorFromConnectionStatus(Windows::Devices::Bluetooth::BluetoothConnectionStatus const connectionStatus) const
{
	String deviceSelector;
	check(shim()->abi_GetDeviceSelectorFromConnectionStatus(connectionStatus, put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothDeviceStatics2<T>::GetDeviceSelectorFromDeviceName(StringReference const & deviceName) const
{
	String deviceSelector;
	check(shim()->abi_GetDeviceSelectorFromDeviceName(get(deviceName), put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothDeviceStatics2<T>::GetDeviceSelectorFromBluetoothAddress(unsigned long long const bluetoothAddress) const
{
	String deviceSelector;
	check(shim()->abi_GetDeviceSelectorFromBluetoothAddress(bluetoothAddress, put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothDeviceStatics2<T>::GetDeviceSelectorFromClassOfDevice(Windows::Devices::Bluetooth::BluetoothClassOfDevice const & classOfDevice) const
{
	String deviceSelector;
	check(shim()->abi_GetDeviceSelectorFromClassOfDevice(get(classOfDevice), put(deviceSelector)));
	return deviceSelector;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Uncategorized() const
{
	unsigned short value = {};
	check(shim()->get_Uncategorized(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Phone() const
{
	unsigned short value = {};
	check(shim()->get_Phone(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Computer() const
{
	unsigned short value = {};
	check(shim()->get_Computer(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Watch() const
{
	unsigned short value = {};
	check(shim()->get_Watch(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Clock() const
{
	unsigned short value = {};
	check(shim()->get_Clock(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Display() const
{
	unsigned short value = {};
	check(shim()->get_Display(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::RemoteControl() const
{
	unsigned short value = {};
	check(shim()->get_RemoteControl(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::EyeGlasses() const
{
	unsigned short value = {};
	check(shim()->get_EyeGlasses(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Tag() const
{
	unsigned short value = {};
	check(shim()->get_Tag(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Keyring() const
{
	unsigned short value = {};
	check(shim()->get_Keyring(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::MediaPlayer() const
{
	unsigned short value = {};
	check(shim()->get_MediaPlayer(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::BarcodeScanner() const
{
	unsigned short value = {};
	check(shim()->get_BarcodeScanner(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Thermometer() const
{
	unsigned short value = {};
	check(shim()->get_Thermometer(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::HeartRate() const
{
	unsigned short value = {};
	check(shim()->get_HeartRate(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::BloodPressure() const
{
	unsigned short value = {};
	check(shim()->get_BloodPressure(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::HumanInterfaceDevice() const
{
	unsigned short value = {};
	check(shim()->get_HumanInterfaceDevice(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::GlucoseMeter() const
{
	unsigned short value = {};
	check(shim()->get_GlucoseMeter(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::RunningWalking() const
{
	unsigned short value = {};
	check(shim()->get_RunningWalking(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::Cycling() const
{
	unsigned short value = {};
	check(shim()->get_Cycling(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::PulseOximeter() const
{
	unsigned short value = {};
	check(shim()->get_PulseOximeter(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::WeightScale() const
{
	unsigned short value = {};
	check(shim()->get_WeightScale(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceCategoriesStatics<T>::OutdoorSportActivity() const
{
	unsigned short value = {};
	check(shim()->get_OutdoorSportActivity(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::Generic() const
{
	unsigned short value = {};
	check(shim()->get_Generic(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::SportsWatch() const
{
	unsigned short value = {};
	check(shim()->get_SportsWatch(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::ThermometerEar() const
{
	unsigned short value = {};
	check(shim()->get_ThermometerEar(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::HeartRateBelt() const
{
	unsigned short value = {};
	check(shim()->get_HeartRateBelt(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::BloodPressureArm() const
{
	unsigned short value = {};
	check(shim()->get_BloodPressureArm(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::BloodPressureWrist() const
{
	unsigned short value = {};
	check(shim()->get_BloodPressureWrist(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::Keyboard() const
{
	unsigned short value = {};
	check(shim()->get_Keyboard(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::Mouse() const
{
	unsigned short value = {};
	check(shim()->get_Mouse(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::Joystick() const
{
	unsigned short value = {};
	check(shim()->get_Joystick(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::Gamepad() const
{
	unsigned short value = {};
	check(shim()->get_Gamepad(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::DigitizerTablet() const
{
	unsigned short value = {};
	check(shim()->get_DigitizerTablet(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::CardReader() const
{
	unsigned short value = {};
	check(shim()->get_CardReader(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::DigitalPen() const
{
	unsigned short value = {};
	check(shim()->get_DigitalPen(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::BarcodeScanner() const
{
	unsigned short value = {};
	check(shim()->get_BarcodeScanner(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::RunningWalkingInShoe() const
{
	unsigned short value = {};
	check(shim()->get_RunningWalkingInShoe(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::RunningWalkingOnShoe() const
{
	unsigned short value = {};
	check(shim()->get_RunningWalkingOnShoe(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::RunningWalkingOnHip() const
{
	unsigned short value = {};
	check(shim()->get_RunningWalkingOnHip(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::CyclingComputer() const
{
	unsigned short value = {};
	check(shim()->get_CyclingComputer(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::CyclingSpeedSensor() const
{
	unsigned short value = {};
	check(shim()->get_CyclingSpeedSensor(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::CyclingCadenceSensor() const
{
	unsigned short value = {};
	check(shim()->get_CyclingCadenceSensor(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::CyclingPowerSensor() const
{
	unsigned short value = {};
	check(shim()->get_CyclingPowerSensor(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::CyclingSpeedCadenceSensor() const
{
	unsigned short value = {};
	check(shim()->get_CyclingSpeedCadenceSensor(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::OximeterFingertip() const
{
	unsigned short value = {};
	check(shim()->get_OximeterFingertip(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::OximeterWristWorn() const
{
	unsigned short value = {};
	check(shim()->get_OximeterWristWorn(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::LocationDisplay() const
{
	unsigned short value = {};
	check(shim()->get_LocationDisplay(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::LocationNavigationDisplay() const
{
	unsigned short value = {};
	check(shim()->get_LocationNavigationDisplay(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::LocationPod() const
{
	unsigned short value = {};
	check(shim()->get_LocationPod(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearanceSubcategoriesStatics<T>::LocationNavigationPod() const
{
	unsigned short value = {};
	check(shim()->get_LocationNavigationPod(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearance<T>::RawValue() const
{
	unsigned short value = {};
	check(shim()->get_RawValue(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearance<T>::Category() const
{
	unsigned short value = {};
	check(shim()->get_Category(&value));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEAppearance<T>::SubCategory() const
{
	unsigned short value = {};
	check(shim()->get_SubCategory(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothLEAppearance impl_IBluetoothLEAppearanceStatics<T>::FromRawValue(unsigned short const rawValue) const
{
	Windows::Devices::Bluetooth::BluetoothLEAppearance appearance = nullptr;
	check(shim()->abi_FromRawValue(rawValue, put(appearance)));
	return appearance;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothLEAppearance impl_IBluetoothLEAppearanceStatics<T>::FromParts(unsigned short const appearanceCategory, unsigned short const appearanceSubCategory) const
{
	Windows::Devices::Bluetooth::BluetoothLEAppearance appearance = nullptr;
	check(shim()->abi_FromParts(appearanceCategory, appearanceSubCategory, put(appearance)));
	return appearance;
}

template <typename T> String impl_IBluetoothLEDevice<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> String impl_IBluetoothLEDevice<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> impl_IBluetoothLEDevice<T>::GattServices() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> value;
	check(shim()->get_GattServices(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothConnectionStatus impl_IBluetoothLEDevice<T>::ConnectionStatus() const
{
	Windows::Devices::Bluetooth::BluetoothConnectionStatus value = {};
	check(shim()->get_ConnectionStatus(&value));
	return value;
}

template <typename T> unsigned long long impl_IBluetoothLEDevice<T>::BluetoothAddress() const
{
	unsigned long long value = {};
	check(shim()->get_BluetoothAddress(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService impl_IBluetoothLEDevice<T>::GetGattService(GUID const serviceUuid) const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService service = nullptr;
	check(shim()->abi_GetGattService(serviceUuid, put(service)));
	return service;
}

template <typename T> long long impl_IBluetoothLEDevice<T>::NameChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothLEDevice, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_NameChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothLEDevice<T>::NameChanged(F handler) const
{
	return NameChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::BluetoothLEDevice, IInspectable>(handler));
}

template <typename T> void impl_IBluetoothLEDevice<T>::NameChanged(long long const token) const
{
	check(shim()->remove_NameChanged(token));
}

template <typename T> long long impl_IBluetoothLEDevice<T>::GattServicesChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothLEDevice, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_GattServicesChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothLEDevice<T>::GattServicesChanged(F handler) const
{
	return GattServicesChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::BluetoothLEDevice, IInspectable>(handler));
}

template <typename T> void impl_IBluetoothLEDevice<T>::GattServicesChanged(long long const token) const
{
	check(shim()->remove_GattServicesChanged(token));
}

template <typename T> long long impl_IBluetoothLEDevice<T>::ConnectionStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::BluetoothLEDevice, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_ConnectionStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothLEDevice<T>::ConnectionStatusChanged(F handler) const
{
	return ConnectionStatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::BluetoothLEDevice, IInspectable>(handler));
}

template <typename T> void impl_IBluetoothLEDevice<T>::ConnectionStatusChanged(long long const token) const
{
	check(shim()->remove_ConnectionStatusChanged(token));
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IBluetoothLEDevice2<T>::DeviceInformation() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check(shim()->get_DeviceInformation(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothLEAppearance impl_IBluetoothLEDevice2<T>::Appearance() const
{
	Windows::Devices::Bluetooth::BluetoothLEAppearance value = nullptr;
	check(shim()->get_Appearance(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothAddressType impl_IBluetoothLEDevice2<T>::BluetoothAddressType() const
{
	Windows::Devices::Bluetooth::BluetoothAddressType value = {};
	check(shim()->get_BluetoothAddressType(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> impl_IBluetoothLEDeviceStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> operation;
	check(shim()->abi_FromIdAsync(get(deviceId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> impl_IBluetoothLEDeviceStatics<T>::FromBluetoothAddressAsync(unsigned long long const bluetoothAddress) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> operation;
	check(shim()->abi_FromBluetoothAddressAsync(bluetoothAddress, put(operation)));
	return operation;
}

template <typename T> String impl_IBluetoothLEDeviceStatics<T>::GetDeviceSelector() const
{
	String deviceSelector;
	check(shim()->abi_GetDeviceSelector(put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothLEDeviceStatics2<T>::GetDeviceSelectorFromPairingState(bool const pairingState) const
{
	String deviceSelector;
	check(shim()->abi_GetDeviceSelectorFromPairingState(pairingState, put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothLEDeviceStatics2<T>::GetDeviceSelectorFromConnectionStatus(Windows::Devices::Bluetooth::BluetoothConnectionStatus const connectionStatus) const
{
	String deviceSelector;
	check(shim()->abi_GetDeviceSelectorFromConnectionStatus(connectionStatus, put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothLEDeviceStatics2<T>::GetDeviceSelectorFromDeviceName(StringReference const & deviceName) const
{
	String deviceSelector;
	check(shim()->abi_GetDeviceSelectorFromDeviceName(get(deviceName), put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothLEDeviceStatics2<T>::GetDeviceSelectorFromBluetoothAddress(unsigned long long const bluetoothAddress) const
{
	String deviceSelector;
	check(shim()->abi_GetDeviceSelectorFromBluetoothAddress(bluetoothAddress, put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothLEDeviceStatics2<T>::GetDeviceSelectorFromBluetoothAddress(unsigned long long const bluetoothAddress, Windows::Devices::Bluetooth::BluetoothAddressType const bluetoothAddressType) const
{
	String deviceSelector;
	check(shim()->abi_GetDeviceSelectorFromBluetoothAddressWithBluetoothAddressType(bluetoothAddress, bluetoothAddressType, put(deviceSelector)));
	return deviceSelector;
}

template <typename T> String impl_IBluetoothLEDeviceStatics2<T>::GetDeviceSelectorFromAppearance(Windows::Devices::Bluetooth::BluetoothLEAppearance const & appearance) const
{
	String deviceSelector;
	check(shim()->abi_GetDeviceSelectorFromAppearance(get(appearance), put(deviceSelector)));
	return deviceSelector;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> impl_IBluetoothLEDeviceStatics2<T>::FromBluetoothAddressAsync(unsigned long long const bluetoothAddress, Windows::Devices::Bluetooth::BluetoothAddressType const bluetoothAddressType) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> operation;
	check(shim()->abi_FromBluetoothAddressWithBluetoothAddressTypeAsync(bluetoothAddress, bluetoothAddressType, put(operation)));
	return operation;
}

template <typename T> unsigned impl_IBluetoothClassOfDevice<T>::RawValue() const
{
	unsigned value = {};
	check(shim()->get_RawValue(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothMajorClass impl_IBluetoothClassOfDevice<T>::MajorClass() const
{
	Windows::Devices::Bluetooth::BluetoothMajorClass value = {};
	check(shim()->get_MajorClass(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothMinorClass impl_IBluetoothClassOfDevice<T>::MinorClass() const
{
	Windows::Devices::Bluetooth::BluetoothMinorClass value = {};
	check(shim()->get_MinorClass(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothServiceCapabilities impl_IBluetoothClassOfDevice<T>::ServiceCapabilities() const
{
	Windows::Devices::Bluetooth::BluetoothServiceCapabilities value = {};
	check(shim()->get_ServiceCapabilities(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothClassOfDevice impl_IBluetoothClassOfDeviceStatics<T>::FromRawValue(unsigned const rawValue) const
{
	Windows::Devices::Bluetooth::BluetoothClassOfDevice classOfDevice = nullptr;
	check(shim()->abi_FromRawValue(rawValue, put(classOfDevice)));
	return classOfDevice;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothClassOfDevice impl_IBluetoothClassOfDeviceStatics<T>::FromParts(Windows::Devices::Bluetooth::BluetoothMajorClass const majorClass, Windows::Devices::Bluetooth::BluetoothMinorClass const minorClass, Windows::Devices::Bluetooth::BluetoothServiceCapabilities const serviceCapabilities) const
{
	Windows::Devices::Bluetooth::BluetoothClassOfDevice classOfDevice = nullptr;
	check(shim()->abi_FromParts(majorClass, minorClass, serviceCapabilities, put(classOfDevice)));
	return classOfDevice;
}

template <typename T> Windows::Foundation::IReference<short> impl_IBluetoothSignalStrengthFilter<T>::InRangeThresholdInDBm() const
{
	Windows::Foundation::IReference<short> value;
	check(shim()->get_InRangeThresholdInDBm(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothSignalStrengthFilter<T>::InRangeThresholdInDBm(Windows::Foundation::IReference<short> const & value) const
{
	check(shim()->put_InRangeThresholdInDBm(get(value)));
}

template <typename T> Windows::Foundation::IReference<short> impl_IBluetoothSignalStrengthFilter<T>::OutOfRangeThresholdInDBm() const
{
	Windows::Foundation::IReference<short> value;
	check(shim()->get_OutOfRangeThresholdInDBm(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothSignalStrengthFilter<T>::OutOfRangeThresholdInDBm(Windows::Foundation::IReference<short> const & value) const
{
	check(shim()->put_OutOfRangeThresholdInDBm(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IBluetoothSignalStrengthFilter<T>::OutOfRangeTimeout() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_OutOfRangeTimeout(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothSignalStrengthFilter<T>::OutOfRangeTimeout(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_OutOfRangeTimeout(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IBluetoothSignalStrengthFilter<T>::SamplingInterval() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_SamplingInterval(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothSignalStrengthFilter<T>::SamplingInterval(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_SamplingInterval(get(value)));
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Advertisement {

template <typename T> Windows::Foundation::IReference<winrt::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFlags> impl_IBluetoothLEAdvertisement<T>::Flags() const
{
	Windows::Foundation::IReference<winrt::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFlags> value;
	check(shim()->get_Flags(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisement<T>::Flags(Windows::Foundation::IReference<winrt::Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFlags> const & value) const
{
	check(shim()->put_Flags(get(value)));
}

template <typename T> String impl_IBluetoothLEAdvertisement<T>::LocalName() const
{
	String value;
	check(shim()->get_LocalName(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisement<T>::LocalName(StringReference const & value) const
{
	check(shim()->put_LocalName(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<GUID> impl_IBluetoothLEAdvertisement<T>::ServiceUuids() const
{
	Windows::Foundation::Collections::IVector<GUID> value;
	check(shim()->get_ServiceUuids(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData> impl_IBluetoothLEAdvertisement<T>::ManufacturerData() const
{
	Windows::Foundation::Collections::IVector<Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData> value;
	check(shim()->get_ManufacturerData(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection> impl_IBluetoothLEAdvertisement<T>::DataSections() const
{
	Windows::Foundation::Collections::IVector<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection> value;
	check(shim()->get_DataSections(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData> impl_IBluetoothLEAdvertisement<T>::GetManufacturerDataByCompanyId(unsigned short const companyId) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData> dataList;
	check(shim()->abi_GetManufacturerDataByCompanyId(companyId, put(dataList)));
	return dataList;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection> impl_IBluetoothLEAdvertisement<T>::GetSectionsByType(byte const type) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection> sectionList;
	check(shim()->abi_GetSectionsByType(type, put(sectionList)));
	return sectionList;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement impl_IBluetoothLEAdvertisementFilter<T>::Advertisement() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement value = nullptr;
	check(shim()->get_Advertisement(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementFilter<T>::Advertisement(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement const & value) const
{
	check(shim()->put_Advertisement(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementBytePattern> impl_IBluetoothLEAdvertisementFilter<T>::BytePatterns() const
{
	Windows::Foundation::Collections::IVector<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementBytePattern> value;
	check(shim()->get_BytePatterns(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothError impl_IBluetoothLEAdvertisementWatcherStoppedEventArgs<T>::Error() const
{
	Windows::Devices::Bluetooth::BluetoothError value = {};
	check(shim()->get_Error(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher impl_IBluetoothLEAdvertisementWatcherFactory<T>::Create(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter const & advertisementFilter) const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher value = nullptr;
	check(shim()->abi_Create(get(advertisementFilter), put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBluetoothLEAdvertisementWatcher<T>::MinSamplingInterval() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_MinSamplingInterval(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBluetoothLEAdvertisementWatcher<T>::MaxSamplingInterval() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_MaxSamplingInterval(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBluetoothLEAdvertisementWatcher<T>::MinOutOfRangeTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_MinOutOfRangeTimeout(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBluetoothLEAdvertisementWatcher<T>::MaxOutOfRangeTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_MaxOutOfRangeTimeout(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcherStatus impl_IBluetoothLEAdvertisementWatcher<T>::Status() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcherStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEScanningMode impl_IBluetoothLEAdvertisementWatcher<T>::ScanningMode() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEScanningMode value = {};
	check(shim()->get_ScanningMode(&value));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcher<T>::ScanningMode(Windows::Devices::Bluetooth::Advertisement::BluetoothLEScanningMode const value) const
{
	check(shim()->put_ScanningMode(value));
}

template <typename T> Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter impl_IBluetoothLEAdvertisementWatcher<T>::SignalStrengthFilter() const
{
	Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter value = nullptr;
	check(shim()->get_SignalStrengthFilter(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcher<T>::SignalStrengthFilter(Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter const & value) const
{
	check(shim()->put_SignalStrengthFilter(get(value)));
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter impl_IBluetoothLEAdvertisementWatcher<T>::AdvertisementFilter() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter value = nullptr;
	check(shim()->get_AdvertisementFilter(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcher<T>::AdvertisementFilter(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter const & value) const
{
	check(shim()->put_AdvertisementFilter(get(value)));
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcher<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcher<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> long long impl_IBluetoothLEAdvertisementWatcher<T>::Received(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementReceivedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Received(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothLEAdvertisementWatcher<T>::Received(F handler) const
{
	return Received(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementReceivedEventArgs>(handler));
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcher<T>::Received(long long const token) const
{
	check(shim()->remove_Received(token));
}

template <typename T> long long impl_IBluetoothLEAdvertisementWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcherStoppedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothLEAdvertisementWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcher, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementWatcherStoppedEventArgs>(handler));
}

template <typename T> void impl_IBluetoothLEAdvertisementWatcher<T>::Stopped(long long const token) const
{
	check(shim()->remove_Stopped(token));
}

template <typename T> short impl_IBluetoothLEAdvertisementReceivedEventArgs<T>::RawSignalStrengthInDBm() const
{
	short value = {};
	check(shim()->get_RawSignalStrengthInDBm(&value));
	return value;
}

template <typename T> unsigned long long impl_IBluetoothLEAdvertisementReceivedEventArgs<T>::BluetoothAddress() const
{
	unsigned long long value = {};
	check(shim()->get_BluetoothAddress(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementType impl_IBluetoothLEAdvertisementReceivedEventArgs<T>::AdvertisementType() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementType value = {};
	check(shim()->get_AdvertisementType(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IBluetoothLEAdvertisementReceivedEventArgs<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement impl_IBluetoothLEAdvertisementReceivedEventArgs<T>::Advertisement() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement value = nullptr;
	check(shim()->get_Advertisement(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection impl_IBluetoothLEAdvertisementDataSectionFactory<T>::Create(byte const dataType, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementDataSection value = nullptr;
	check(shim()->abi_Create(dataType, get(data), put(value)));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataSection<T>::DataType() const
{
	byte value = {};
	check(shim()->get_DataType(&value));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementDataSection<T>::DataType(byte const value) const
{
	check(shim()->put_DataType(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IBluetoothLEAdvertisementDataSection<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementDataSection<T>::Data(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_Data(get(value)));
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData impl_IBluetoothLEManufacturerDataFactory<T>::Create(unsigned short const companyId, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEManufacturerData value = nullptr;
	check(shim()->abi_Create(companyId, get(data), put(value)));
	return value;
}

template <typename T> unsigned short impl_IBluetoothLEManufacturerData<T>::CompanyId() const
{
	unsigned short value = {};
	check(shim()->get_CompanyId(&value));
	return value;
}

template <typename T> void impl_IBluetoothLEManufacturerData<T>::CompanyId(unsigned short const value) const
{
	check(shim()->put_CompanyId(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IBluetoothLEManufacturerData<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEManufacturerData<T>::Data(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_Data(get(value)));
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementBytePattern impl_IBluetoothLEAdvertisementBytePatternFactory<T>::Create(byte const dataType, short const offset, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementBytePattern value = nullptr;
	check(shim()->abi_Create(dataType, offset, get(data), put(value)));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementBytePattern<T>::DataType() const
{
	byte value = {};
	check(shim()->get_DataType(&value));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementBytePattern<T>::DataType(byte const value) const
{
	check(shim()->put_DataType(value));
}

template <typename T> short impl_IBluetoothLEAdvertisementBytePattern<T>::Offset() const
{
	short value = {};
	check(shim()->get_Offset(&value));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementBytePattern<T>::Offset(short const value) const
{
	check(shim()->put_Offset(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IBluetoothLEAdvertisementBytePattern<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementBytePattern<T>::Data(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_Data(get(value)));
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::Flags() const
{
	byte value = {};
	check(shim()->get_Flags(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::IncompleteService16BitUuids() const
{
	byte value = {};
	check(shim()->get_IncompleteService16BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::CompleteService16BitUuids() const
{
	byte value = {};
	check(shim()->get_CompleteService16BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::IncompleteService32BitUuids() const
{
	byte value = {};
	check(shim()->get_IncompleteService32BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::CompleteService32BitUuids() const
{
	byte value = {};
	check(shim()->get_CompleteService32BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::IncompleteService128BitUuids() const
{
	byte value = {};
	check(shim()->get_IncompleteService128BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::CompleteService128BitUuids() const
{
	byte value = {};
	check(shim()->get_CompleteService128BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::ShortenedLocalName() const
{
	byte value = {};
	check(shim()->get_ShortenedLocalName(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::CompleteLocalName() const
{
	byte value = {};
	check(shim()->get_CompleteLocalName(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::TxPowerLevel() const
{
	byte value = {};
	check(shim()->get_TxPowerLevel(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::SlaveConnectionIntervalRange() const
{
	byte value = {};
	check(shim()->get_SlaveConnectionIntervalRange(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::ServiceSolicitation16BitUuids() const
{
	byte value = {};
	check(shim()->get_ServiceSolicitation16BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::ServiceSolicitation32BitUuids() const
{
	byte value = {};
	check(shim()->get_ServiceSolicitation32BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::ServiceSolicitation128BitUuids() const
{
	byte value = {};
	check(shim()->get_ServiceSolicitation128BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::ServiceData16BitUuids() const
{
	byte value = {};
	check(shim()->get_ServiceData16BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::ServiceData32BitUuids() const
{
	byte value = {};
	check(shim()->get_ServiceData32BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::ServiceData128BitUuids() const
{
	byte value = {};
	check(shim()->get_ServiceData128BitUuids(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::PublicTargetAddress() const
{
	byte value = {};
	check(shim()->get_PublicTargetAddress(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::RandomTargetAddress() const
{
	byte value = {};
	check(shim()->get_RandomTargetAddress(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::Appearance() const
{
	byte value = {};
	check(shim()->get_Appearance(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::AdvertisingInterval() const
{
	byte value = {};
	check(shim()->get_AdvertisingInterval(&value));
	return value;
}

template <typename T> byte impl_IBluetoothLEAdvertisementDataTypesStatics<T>::ManufacturerSpecificData() const
{
	byte value = {};
	check(shim()->get_ManufacturerSpecificData(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatus impl_IBluetoothLEAdvertisementPublisherStatusChangedEventArgs<T>::Status() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothError impl_IBluetoothLEAdvertisementPublisherStatusChangedEventArgs<T>::Error() const
{
	Windows::Devices::Bluetooth::BluetoothError value = {};
	check(shim()->get_Error(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisher impl_IBluetoothLEAdvertisementPublisherFactory<T>::Create(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement const & advertisement) const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisher value = nullptr;
	check(shim()->abi_Create(get(advertisement), put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatus impl_IBluetoothLEAdvertisementPublisher<T>::Status() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement impl_IBluetoothLEAdvertisementPublisher<T>::Advertisement() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement value = nullptr;
	check(shim()->get_Advertisement(put(value)));
	return value;
}

template <typename T> void impl_IBluetoothLEAdvertisementPublisher<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IBluetoothLEAdvertisementPublisher<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> long long impl_IBluetoothLEAdvertisementPublisher<T>::StatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisher, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatusChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_StatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBluetoothLEAdvertisementPublisher<T>::StatusChanged(F handler) const
{
	return StatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisher, Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatusChangedEventArgs>(handler));
}

template <typename T> void impl_IBluetoothLEAdvertisementPublisher<T>::StatusChanged(long long const token) const
{
	check(shim()->remove_StatusChanged(token));
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Background {

template <typename T> Windows::Storage::Streams::IBuffer impl_IRfcommInboundConnectionInformation<T>::SdpRecord() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_SdpRecord(put(value)));
	return value;
}

template <typename T> void impl_IRfcommInboundConnectionInformation<T>::SdpRecord(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_SdpRecord(get(value)));
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommInboundConnectionInformation<T>::LocalServiceId() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId value = nullptr;
	check(shim()->get_LocalServiceId(put(value)));
	return value;
}

template <typename T> void impl_IRfcommInboundConnectionInformation<T>::LocalServiceId(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & value) const
{
	check(shim()->put_LocalServiceId(get(value)));
}

template <typename T> Windows::Devices::Bluetooth::BluetoothServiceCapabilities impl_IRfcommInboundConnectionInformation<T>::ServiceCapabilities() const
{
	Windows::Devices::Bluetooth::BluetoothServiceCapabilities value = {};
	check(shim()->get_ServiceCapabilities(&value));
	return value;
}

template <typename T> void impl_IRfcommInboundConnectionInformation<T>::ServiceCapabilities(Windows::Devices::Bluetooth::BluetoothServiceCapabilities const value) const
{
	check(shim()->put_ServiceCapabilities(value));
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommOutboundConnectionInformation<T>::RemoteServiceId() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId value = nullptr;
	check(shim()->get_RemoteServiceId(put(value)));
	return value;
}

template <typename T> void impl_IRfcommOutboundConnectionInformation<T>::RemoteServiceId(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & value) const
{
	check(shim()->put_RemoteServiceId(get(value)));
}

template <typename T> Windows::Networking::Sockets::StreamSocket impl_IRfcommConnectionTriggerDetails<T>::Socket() const
{
	Windows::Networking::Sockets::StreamSocket value = nullptr;
	check(shim()->get_Socket(put(value)));
	return value;
}

template <typename T> bool impl_IRfcommConnectionTriggerDetails<T>::Incoming() const
{
	bool value = {};
	check(shim()->get_Incoming(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothDevice impl_IRfcommConnectionTriggerDetails<T>::RemoteDevice() const
{
	Windows::Devices::Bluetooth::BluetoothDevice value = nullptr;
	check(shim()->get_RemoteDevice(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic impl_IGattCharacteristicNotificationTriggerDetails<T>::Characteristic() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic value = nullptr;
	check(shim()->get_Characteristic(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IGattCharacteristicNotificationTriggerDetails<T>::Value() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothError impl_IBluetoothLEAdvertisementWatcherTriggerDetails<T>::Error() const
{
	Windows::Devices::Bluetooth::BluetoothError value = {};
	check(shim()->get_Error(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementReceivedEventArgs> impl_IBluetoothLEAdvertisementWatcherTriggerDetails<T>::Advertisements() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementReceivedEventArgs> value;
	check(shim()->get_Advertisements(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter impl_IBluetoothLEAdvertisementWatcherTriggerDetails<T>::SignalStrengthFilter() const
{
	Windows::Devices::Bluetooth::BluetoothSignalStrengthFilter value = nullptr;
	check(shim()->get_SignalStrengthFilter(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatus impl_IBluetoothLEAdvertisementPublisherTriggerDetails<T>::Status() const
{
	Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementPublisherStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothError impl_IBluetoothLEAdvertisementPublisherTriggerDetails<T>::Error() const
{
	Windows::Devices::Bluetooth::BluetoothError value = {};
	check(shim()->get_Error(&value));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace GenericAttributeProfile {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> impl_IGattDeviceServiceStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> gattDeviceService;
	check(shim()->abi_FromIdAsync(get(deviceId), put(gattDeviceService)));
	return gattDeviceService;
}

template <typename T> String impl_IGattDeviceServiceStatics<T>::GetDeviceSelectorFromUuid(GUID const serviceUuid) const
{
	String selector;
	check(shim()->abi_GetDeviceSelectorFromUuid(serviceUuid, put(selector)));
	return selector;
}

template <typename T> String impl_IGattDeviceServiceStatics<T>::GetDeviceSelectorFromShortId(unsigned short const serviceShortId) const
{
	String selector;
	check(shim()->abi_GetDeviceSelectorFromShortId(serviceShortId, put(selector)));
	return selector;
}

template <typename T> GUID impl_IGattDeviceServiceStatics<T>::ConvertShortIdToUuid(unsigned short const shortId) const
{
	GUID serviceUuid = {};
	check(shim()->abi_ConvertShortIdToUuid(shortId, &serviceUuid));
	return serviceUuid;
}

template <typename T> GUID impl_IGattCharacteristicStatics<T>::ConvertShortIdToUuid(unsigned short const shortId) const
{
	GUID characteristicUuid = {};
	check(shim()->abi_ConvertShortIdToUuid(shortId, &characteristicUuid));
	return characteristicUuid;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDescriptor> impl_IGattCharacteristic<T>::GetDescriptors(GUID const descriptorUuid) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDescriptor> value;
	check(shim()->abi_GetDescriptors(descriptorUuid, put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristicProperties impl_IGattCharacteristic<T>::CharacteristicProperties() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristicProperties value = {};
	check(shim()->get_CharacteristicProperties(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattProtectionLevel impl_IGattCharacteristic<T>::ProtectionLevel() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattProtectionLevel value = {};
	check(shim()->get_ProtectionLevel(&value));
	return value;
}

template <typename T> void impl_IGattCharacteristic<T>::ProtectionLevel(Windows::Devices::Bluetooth::GenericAttributeProfile::GattProtectionLevel const value) const
{
	check(shim()->put_ProtectionLevel(value));
}

template <typename T> String impl_IGattCharacteristic<T>::UserDescription() const
{
	String value;
	check(shim()->get_UserDescription(put(value)));
	return value;
}

template <typename T> GUID impl_IGattCharacteristic<T>::Uuid() const
{
	GUID value = {};
	check(shim()->get_Uuid(&value));
	return value;
}

template <typename T> unsigned short impl_IGattCharacteristic<T>::AttributeHandle() const
{
	unsigned short value = {};
	check(shim()->get_AttributeHandle(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattPresentationFormat> impl_IGattCharacteristic<T>::PresentationFormats() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattPresentationFormat> value;
	check(shim()->get_PresentationFormats(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> impl_IGattCharacteristic<T>::ReadValueAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> value;
	check(shim()->abi_ReadValueAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> impl_IGattCharacteristic<T>::ReadValueAsync(Windows::Devices::Bluetooth::BluetoothCacheMode const cacheMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> value;
	check(shim()->abi_ReadValueWithCacheModeAsync(cacheMode, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> impl_IGattCharacteristic<T>::WriteValueAsync(Windows::Storage::Streams::IBuffer const & value) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> asyncOp;
	check(shim()->abi_WriteValueAsync(get(value), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> impl_IGattCharacteristic<T>::WriteValueAsync(Windows::Storage::Streams::IBuffer const & value, Windows::Devices::Bluetooth::GenericAttributeProfile::GattWriteOption const writeOption) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> asyncOp;
	check(shim()->abi_WriteValueWithOptionAsync(get(value), writeOption, put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadClientCharacteristicConfigurationDescriptorResult> impl_IGattCharacteristic<T>::ReadClientCharacteristicConfigurationDescriptorAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadClientCharacteristicConfigurationDescriptorResult> asyncOp;
	check(shim()->abi_ReadClientCharacteristicConfigurationDescriptorAsync(put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> impl_IGattCharacteristic<T>::WriteClientCharacteristicConfigurationDescriptorAsync(Windows::Devices::Bluetooth::GenericAttributeProfile::GattClientCharacteristicConfigurationDescriptorValue const clientCharacteristicConfigurationDescriptorValue) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> asyncOp;
	check(shim()->abi_WriteClientCharacteristicConfigurationDescriptorAsync(clientCharacteristicConfigurationDescriptorValue, put(asyncOp)));
	return asyncOp;
}

template <typename T> long long impl_IGattCharacteristic<T>::ValueChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic, Windows::Devices::Bluetooth::GenericAttributeProfile::GattValueChangedEventArgs> const & valueChangedHandler) const
{
	long long valueChangedEventCookie = {};
	check(shim()->add_ValueChanged(get(valueChangedHandler), &valueChangedEventCookie));
	return valueChangedEventCookie;
}

template <typename T> template <typename F> long long impl_IGattCharacteristic<T>::ValueChanged(F valueChangedHandler) const
{
	return ValueChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic, Windows::Devices::Bluetooth::GenericAttributeProfile::GattValueChangedEventArgs>(valueChangedHandler));
}

template <typename T> void impl_IGattCharacteristic<T>::ValueChanged(long long const valueChangedEventCookie) const
{
	check(shim()->remove_ValueChanged(valueChangedEventCookie));
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService impl_IGattCharacteristic2<T>::Service() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService value = nullptr;
	check(shim()->get_Service(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDescriptor> impl_IGattCharacteristic2<T>::GetAllDescriptors() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDescriptor> descriptors;
	check(shim()->abi_GetAllDescriptors(put(descriptors)));
	return descriptors;
}

template <typename T> GUID impl_IGattDescriptorStatics<T>::ConvertShortIdToUuid(unsigned short const shortId) const
{
	GUID descriptorUuid = {};
	check(shim()->abi_ConvertShortIdToUuid(shortId, &descriptorUuid));
	return descriptorUuid;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattProtectionLevel impl_IGattDescriptor<T>::ProtectionLevel() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattProtectionLevel value = {};
	check(shim()->get_ProtectionLevel(&value));
	return value;
}

template <typename T> void impl_IGattDescriptor<T>::ProtectionLevel(Windows::Devices::Bluetooth::GenericAttributeProfile::GattProtectionLevel const value) const
{
	check(shim()->put_ProtectionLevel(value));
}

template <typename T> GUID impl_IGattDescriptor<T>::Uuid() const
{
	GUID value = {};
	check(shim()->get_Uuid(&value));
	return value;
}

template <typename T> unsigned short impl_IGattDescriptor<T>::AttributeHandle() const
{
	unsigned short value = {};
	check(shim()->get_AttributeHandle(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> impl_IGattDescriptor<T>::ReadValueAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> value;
	check(shim()->abi_ReadValueAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> impl_IGattDescriptor<T>::ReadValueAsync(Windows::Devices::Bluetooth::BluetoothCacheMode const cacheMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattReadResult> value;
	check(shim()->abi_ReadValueWithCacheModeAsync(cacheMode, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> impl_IGattDescriptor<T>::WriteValueAsync(Windows::Storage::Streams::IBuffer const & value) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> action;
	check(shim()->abi_WriteValueAsync(get(value), put(action)));
	return action;
}

template <typename T> byte impl_IGattPresentationFormatStatics<T>::BluetoothSigAssignedNumbers() const
{
	byte value = {};
	check(shim()->get_BluetoothSigAssignedNumbers(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Boolean() const
{
	byte value = {};
	check(shim()->get_Boolean(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Bit2() const
{
	byte value = {};
	check(shim()->get_Bit2(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Nibble() const
{
	byte value = {};
	check(shim()->get_Nibble(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::UInt8() const
{
	byte value = {};
	check(shim()->get_UInt8(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::UInt12() const
{
	byte value = {};
	check(shim()->get_UInt12(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::UInt16() const
{
	byte value = {};
	check(shim()->get_UInt16(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::UInt24() const
{
	byte value = {};
	check(shim()->get_UInt24(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::UInt32() const
{
	byte value = {};
	check(shim()->get_UInt32(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::UInt48() const
{
	byte value = {};
	check(shim()->get_UInt48(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::UInt64() const
{
	byte value = {};
	check(shim()->get_UInt64(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::UInt128() const
{
	byte value = {};
	check(shim()->get_UInt128(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SInt8() const
{
	byte value = {};
	check(shim()->get_SInt8(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SInt12() const
{
	byte value = {};
	check(shim()->get_SInt12(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SInt16() const
{
	byte value = {};
	check(shim()->get_SInt16(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SInt24() const
{
	byte value = {};
	check(shim()->get_SInt24(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SInt32() const
{
	byte value = {};
	check(shim()->get_SInt32(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SInt48() const
{
	byte value = {};
	check(shim()->get_SInt48(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SInt64() const
{
	byte value = {};
	check(shim()->get_SInt64(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SInt128() const
{
	byte value = {};
	check(shim()->get_SInt128(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Float32() const
{
	byte value = {};
	check(shim()->get_Float32(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Float64() const
{
	byte value = {};
	check(shim()->get_Float64(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::SFloat() const
{
	byte value = {};
	check(shim()->get_SFloat(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Float() const
{
	byte value = {};
	check(shim()->get_Float(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::DUInt16() const
{
	byte value = {};
	check(shim()->get_DUInt16(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Utf8() const
{
	byte value = {};
	check(shim()->get_Utf8(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Utf16() const
{
	byte value = {};
	check(shim()->get_Utf16(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormatTypesStatics<T>::Struct() const
{
	byte value = {};
	check(shim()->get_Struct(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormat<T>::FormatType() const
{
	byte value = {};
	check(shim()->get_FormatType(&value));
	return value;
}

template <typename T> int impl_IGattPresentationFormat<T>::Exponent() const
{
	int value = {};
	check(shim()->get_Exponent(&value));
	return value;
}

template <typename T> unsigned short impl_IGattPresentationFormat<T>::Unit() const
{
	unsigned short value = {};
	check(shim()->get_Unit(&value));
	return value;
}

template <typename T> byte impl_IGattPresentationFormat<T>::Namespace() const
{
	byte value = {};
	check(shim()->get_Namespace(&value));
	return value;
}

template <typename T> unsigned short impl_IGattPresentationFormat<T>::Description() const
{
	unsigned short value = {};
	check(shim()->get_Description(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IGattValueChangedEventArgs<T>::CharacteristicValue() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_CharacteristicValue(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IGattValueChangedEventArgs<T>::Timestamp() const
{
	Windows::Foundation::DateTime timestamp = {};
	check(shim()->get_Timestamp(&timestamp));
	return timestamp;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::Battery() const
{
	GUID value = {};
	check(shim()->get_Battery(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::BloodPressure() const
{
	GUID value = {};
	check(shim()->get_BloodPressure(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::CyclingSpeedAndCadence() const
{
	GUID value = {};
	check(shim()->get_CyclingSpeedAndCadence(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::GenericAccess() const
{
	GUID value = {};
	check(shim()->get_GenericAccess(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::GenericAttribute() const
{
	GUID value = {};
	check(shim()->get_GenericAttribute(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::Glucose() const
{
	GUID value = {};
	check(shim()->get_Glucose(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::HealthThermometer() const
{
	GUID value = {};
	check(shim()->get_HealthThermometer(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::HeartRate() const
{
	GUID value = {};
	check(shim()->get_HeartRate(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics<T>::RunningSpeedAndCadence() const
{
	GUID value = {};
	check(shim()->get_RunningSpeedAndCadence(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::AlertNotification() const
{
	GUID value = {};
	check(shim()->get_AlertNotification(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::CurrentTime() const
{
	GUID value = {};
	check(shim()->get_CurrentTime(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::CyclingPower() const
{
	GUID value = {};
	check(shim()->get_CyclingPower(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::DeviceInformation() const
{
	GUID value = {};
	check(shim()->get_DeviceInformation(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::HumanInterfaceDevice() const
{
	GUID value = {};
	check(shim()->get_HumanInterfaceDevice(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::ImmediateAlert() const
{
	GUID value = {};
	check(shim()->get_ImmediateAlert(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::LinkLoss() const
{
	GUID value = {};
	check(shim()->get_LinkLoss(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::LocationAndNavigation() const
{
	GUID value = {};
	check(shim()->get_LocationAndNavigation(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::NextDstChange() const
{
	GUID value = {};
	check(shim()->get_NextDstChange(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::PhoneAlertStatus() const
{
	GUID value = {};
	check(shim()->get_PhoneAlertStatus(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::ReferenceTimeUpdate() const
{
	GUID value = {};
	check(shim()->get_ReferenceTimeUpdate(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::ScanParameters() const
{
	GUID value = {};
	check(shim()->get_ScanParameters(&value));
	return value;
}

template <typename T> GUID impl_IGattServiceUuidsStatics2<T>::TxPower() const
{
	GUID value = {};
	check(shim()->get_TxPower(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::BatteryLevel() const
{
	GUID value = {};
	check(shim()->get_BatteryLevel(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::BloodPressureFeature() const
{
	GUID value = {};
	check(shim()->get_BloodPressureFeature(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::BloodPressureMeasurement() const
{
	GUID value = {};
	check(shim()->get_BloodPressureMeasurement(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::BodySensorLocation() const
{
	GUID value = {};
	check(shim()->get_BodySensorLocation(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::CscFeature() const
{
	GUID value = {};
	check(shim()->get_CscFeature(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::CscMeasurement() const
{
	GUID value = {};
	check(shim()->get_CscMeasurement(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::GlucoseFeature() const
{
	GUID value = {};
	check(shim()->get_GlucoseFeature(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::GlucoseMeasurement() const
{
	GUID value = {};
	check(shim()->get_GlucoseMeasurement(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::GlucoseMeasurementContext() const
{
	GUID value = {};
	check(shim()->get_GlucoseMeasurementContext(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::HeartRateControlPoint() const
{
	GUID value = {};
	check(shim()->get_HeartRateControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::HeartRateMeasurement() const
{
	GUID value = {};
	check(shim()->get_HeartRateMeasurement(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::IntermediateCuffPressure() const
{
	GUID value = {};
	check(shim()->get_IntermediateCuffPressure(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::IntermediateTemperature() const
{
	GUID value = {};
	check(shim()->get_IntermediateTemperature(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::MeasurementInterval() const
{
	GUID value = {};
	check(shim()->get_MeasurementInterval(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::RecordAccessControlPoint() const
{
	GUID value = {};
	check(shim()->get_RecordAccessControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::RscFeature() const
{
	GUID value = {};
	check(shim()->get_RscFeature(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::RscMeasurement() const
{
	GUID value = {};
	check(shim()->get_RscMeasurement(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::SCControlPoint() const
{
	GUID value = {};
	check(shim()->get_SCControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::SensorLocation() const
{
	GUID value = {};
	check(shim()->get_SensorLocation(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::TemperatureMeasurement() const
{
	GUID value = {};
	check(shim()->get_TemperatureMeasurement(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics<T>::TemperatureType() const
{
	GUID value = {};
	check(shim()->get_TemperatureType(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::AlertCategoryId() const
{
	GUID value = {};
	check(shim()->get_AlertCategoryId(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::AlertCategoryIdBitMask() const
{
	GUID value = {};
	check(shim()->get_AlertCategoryIdBitMask(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::AlertLevel() const
{
	GUID value = {};
	check(shim()->get_AlertLevel(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::AlertNotificationControlPoint() const
{
	GUID value = {};
	check(shim()->get_AlertNotificationControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::AlertStatus() const
{
	GUID value = {};
	check(shim()->get_AlertStatus(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::GapAppearance() const
{
	GUID value = {};
	check(shim()->get_GapAppearance(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::BootKeyboardInputReport() const
{
	GUID value = {};
	check(shim()->get_BootKeyboardInputReport(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::BootKeyboardOutputReport() const
{
	GUID value = {};
	check(shim()->get_BootKeyboardOutputReport(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::BootMouseInputReport() const
{
	GUID value = {};
	check(shim()->get_BootMouseInputReport(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::CurrentTime() const
{
	GUID value = {};
	check(shim()->get_CurrentTime(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::CyclingPowerControlPoint() const
{
	GUID value = {};
	check(shim()->get_CyclingPowerControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::CyclingPowerFeature() const
{
	GUID value = {};
	check(shim()->get_CyclingPowerFeature(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::CyclingPowerMeasurement() const
{
	GUID value = {};
	check(shim()->get_CyclingPowerMeasurement(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::CyclingPowerVector() const
{
	GUID value = {};
	check(shim()->get_CyclingPowerVector(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::DateTime() const
{
	GUID value = {};
	check(shim()->get_DateTime(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::DayDateTime() const
{
	GUID value = {};
	check(shim()->get_DayDateTime(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::DayOfWeek() const
{
	GUID value = {};
	check(shim()->get_DayOfWeek(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::GapDeviceName() const
{
	GUID value = {};
	check(shim()->get_GapDeviceName(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::DstOffset() const
{
	GUID value = {};
	check(shim()->get_DstOffset(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::ExactTime256() const
{
	GUID value = {};
	check(shim()->get_ExactTime256(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::FirmwareRevisionString() const
{
	GUID value = {};
	check(shim()->get_FirmwareRevisionString(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::HardwareRevisionString() const
{
	GUID value = {};
	check(shim()->get_HardwareRevisionString(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::HidControlPoint() const
{
	GUID value = {};
	check(shim()->get_HidControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::HidInformation() const
{
	GUID value = {};
	check(shim()->get_HidInformation(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::Ieee1107320601RegulatoryCertificationDataList() const
{
	GUID value = {};
	check(shim()->get_Ieee1107320601RegulatoryCertificationDataList(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::LnControlPoint() const
{
	GUID value = {};
	check(shim()->get_LnControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::LnFeature() const
{
	GUID value = {};
	check(shim()->get_LnFeature(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::LocalTimeInformation() const
{
	GUID value = {};
	check(shim()->get_LocalTimeInformation(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::LocationAndSpeed() const
{
	GUID value = {};
	check(shim()->get_LocationAndSpeed(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::ManufacturerNameString() const
{
	GUID value = {};
	check(shim()->get_ManufacturerNameString(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::ModelNumberString() const
{
	GUID value = {};
	check(shim()->get_ModelNumberString(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::Navigation() const
{
	GUID value = {};
	check(shim()->get_Navigation(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::NewAlert() const
{
	GUID value = {};
	check(shim()->get_NewAlert(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::GapPeripheralPreferredConnectionParameters() const
{
	GUID value = {};
	check(shim()->get_GapPeripheralPreferredConnectionParameters(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::GapPeripheralPrivacyFlag() const
{
	GUID value = {};
	check(shim()->get_GapPeripheralPrivacyFlag(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::PnpId() const
{
	GUID value = {};
	check(shim()->get_PnpId(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::PositionQuality() const
{
	GUID value = {};
	check(shim()->get_PositionQuality(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::ProtocolMode() const
{
	GUID value = {};
	check(shim()->get_ProtocolMode(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::GapReconnectionAddress() const
{
	GUID value = {};
	check(shim()->get_GapReconnectionAddress(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::ReferenceTimeInformation() const
{
	GUID value = {};
	check(shim()->get_ReferenceTimeInformation(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::Report() const
{
	GUID value = {};
	check(shim()->get_Report(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::ReportMap() const
{
	GUID value = {};
	check(shim()->get_ReportMap(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::RingerControlPoint() const
{
	GUID value = {};
	check(shim()->get_RingerControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::RingerSetting() const
{
	GUID value = {};
	check(shim()->get_RingerSetting(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::ScanIntervalWindow() const
{
	GUID value = {};
	check(shim()->get_ScanIntervalWindow(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::ScanRefresh() const
{
	GUID value = {};
	check(shim()->get_ScanRefresh(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::SerialNumberString() const
{
	GUID value = {};
	check(shim()->get_SerialNumberString(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::GattServiceChanged() const
{
	GUID value = {};
	check(shim()->get_GattServiceChanged(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::SoftwareRevisionString() const
{
	GUID value = {};
	check(shim()->get_SoftwareRevisionString(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::SupportedNewAlertCategory() const
{
	GUID value = {};
	check(shim()->get_SupportedNewAlertCategory(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::SupportUnreadAlertCategory() const
{
	GUID value = {};
	check(shim()->get_SupportUnreadAlertCategory(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::SystemId() const
{
	GUID value = {};
	check(shim()->get_SystemId(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::TimeAccuracy() const
{
	GUID value = {};
	check(shim()->get_TimeAccuracy(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::TimeSource() const
{
	GUID value = {};
	check(shim()->get_TimeSource(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::TimeUpdateControlPoint() const
{
	GUID value = {};
	check(shim()->get_TimeUpdateControlPoint(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::TimeUpdateState() const
{
	GUID value = {};
	check(shim()->get_TimeUpdateState(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::TimeWithDst() const
{
	GUID value = {};
	check(shim()->get_TimeWithDst(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::TimeZone() const
{
	GUID value = {};
	check(shim()->get_TimeZone(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::TxPowerLevel() const
{
	GUID value = {};
	check(shim()->get_TxPowerLevel(&value));
	return value;
}

template <typename T> GUID impl_IGattCharacteristicUuidsStatics2<T>::UnreadAlertStatus() const
{
	GUID value = {};
	check(shim()->get_UnreadAlertStatus(&value));
	return value;
}

template <typename T> GUID impl_IGattDescriptorUuidsStatics<T>::CharacteristicAggregateFormat() const
{
	GUID value = {};
	check(shim()->get_CharacteristicAggregateFormat(&value));
	return value;
}

template <typename T> GUID impl_IGattDescriptorUuidsStatics<T>::CharacteristicExtendedProperties() const
{
	GUID value = {};
	check(shim()->get_CharacteristicExtendedProperties(&value));
	return value;
}

template <typename T> GUID impl_IGattDescriptorUuidsStatics<T>::CharacteristicPresentationFormat() const
{
	GUID value = {};
	check(shim()->get_CharacteristicPresentationFormat(&value));
	return value;
}

template <typename T> GUID impl_IGattDescriptorUuidsStatics<T>::CharacteristicUserDescription() const
{
	GUID value = {};
	check(shim()->get_CharacteristicUserDescription(&value));
	return value;
}

template <typename T> GUID impl_IGattDescriptorUuidsStatics<T>::ClientCharacteristicConfiguration() const
{
	GUID value = {};
	check(shim()->get_ClientCharacteristicConfiguration(&value));
	return value;
}

template <typename T> GUID impl_IGattDescriptorUuidsStatics<T>::ServerCharacteristicConfiguration() const
{
	GUID value = {};
	check(shim()->get_ServerCharacteristicConfiguration(&value));
	return value;
}

template <typename T> void impl_IGattReliableWriteTransaction<T>::WriteValue(Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic const & characteristic, Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->abi_WriteValue(get(characteristic), get(value)));
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> impl_IGattReliableWriteTransaction<T>::CommitAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus> asyncOp;
	check(shim()->abi_CommitAsync(put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus impl_IGattReadResult<T>::Status() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IGattReadResult<T>::Value() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus impl_IGattReadClientCharacteristicConfigurationDescriptorResult<T>::Status() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattCommunicationStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::GenericAttributeProfile::GattClientCharacteristicConfigurationDescriptorValue impl_IGattReadClientCharacteristicConfigurationDescriptorResult<T>::ClientCharacteristicConfigurationDescriptor() const
{
	Windows::Devices::Bluetooth::GenericAttributeProfile::GattClientCharacteristicConfigurationDescriptorValue value = {};
	check(shim()->get_ClientCharacteristicConfigurationDescriptor(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic> impl_IGattDeviceService<T>::GetCharacteristics(GUID const characteristicUuid) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic> value;
	check(shim()->abi_GetCharacteristics(characteristicUuid, put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> impl_IGattDeviceService<T>::GetIncludedServices(GUID const serviceUuid) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> value;
	check(shim()->abi_GetIncludedServices(serviceUuid, put(value)));
	return value;
}

template <typename T> String impl_IGattDeviceService<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> GUID impl_IGattDeviceService<T>::Uuid() const
{
	GUID value = {};
	check(shim()->get_Uuid(&value));
	return value;
}

template <typename T> unsigned short impl_IGattDeviceService<T>::AttributeHandle() const
{
	unsigned short value = {};
	check(shim()->get_AttributeHandle(&value));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothLEDevice impl_IGattDeviceService2<T>::Device() const
{
	Windows::Devices::Bluetooth::BluetoothLEDevice value = nullptr;
	check(shim()->get_Device(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> impl_IGattDeviceService2<T>::ParentServices() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> value;
	check(shim()->get_ParentServices(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic> impl_IGattDeviceService2<T>::GetAllCharacteristics() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic> characteristics;
	check(shim()->abi_GetAllCharacteristics(put(characteristics)));
	return characteristics;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> impl_IGattDeviceService2<T>::GetAllIncludedServices() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> includedServices;
	check(shim()->abi_GetAllIncludedServices(put(includedServices)));
	return includedServices;
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Rfcomm {

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceIdStatics<T>::FromUuid(GUID const uuid) const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId serviceId = nullptr;
	check(shim()->abi_FromUuid(uuid, put(serviceId)));
	return serviceId;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceIdStatics<T>::FromShortId(unsigned const shortId) const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId serviceId = nullptr;
	check(shim()->abi_FromShortId(shortId, put(serviceId)));
	return serviceId;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceIdStatics<T>::SerialPort() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId serviceId = nullptr;
	check(shim()->get_SerialPort(put(serviceId)));
	return serviceId;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceIdStatics<T>::ObexObjectPush() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId serviceId = nullptr;
	check(shim()->get_ObexObjectPush(put(serviceId)));
	return serviceId;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceIdStatics<T>::ObexFileTransfer() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId serviceId = nullptr;
	check(shim()->get_ObexFileTransfer(put(serviceId)));
	return serviceId;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceIdStatics<T>::PhoneBookAccessPce() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId serviceId = nullptr;
	check(shim()->get_PhoneBookAccessPce(put(serviceId)));
	return serviceId;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceIdStatics<T>::PhoneBookAccessPse() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId serviceId = nullptr;
	check(shim()->get_PhoneBookAccessPse(put(serviceId)));
	return serviceId;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceIdStatics<T>::GenericFileTransfer() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId serviceId = nullptr;
	check(shim()->get_GenericFileTransfer(put(serviceId)));
	return serviceId;
}

template <typename T> GUID impl_IRfcommServiceId<T>::Uuid() const
{
	GUID value = {};
	check(shim()->get_Uuid(&value));
	return value;
}

template <typename T> unsigned impl_IRfcommServiceId<T>::AsShortId() const
{
	unsigned shortId = {};
	check(shim()->abi_AsShortId(&shortId));
	return shortId;
}

template <typename T> String impl_IRfcommServiceId<T>::AsString() const
{
	String id;
	check(shim()->abi_AsString(put(id)));
	return id;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService> impl_IRfcommDeviceServiceStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService> asyncOp;
	check(shim()->abi_FromIdAsync(get(deviceId), put(asyncOp)));
	return asyncOp;
}

template <typename T> String impl_IRfcommDeviceServiceStatics<T>::GetDeviceSelector(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & serviceId) const
{
	String selector;
	check(shim()->abi_GetDeviceSelector(get(serviceId), put(selector)));
	return selector;
}

template <typename T> Windows::Networking::HostName impl_IRfcommDeviceService<T>::ConnectionHostName() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_ConnectionHostName(put(value)));
	return value;
}

template <typename T> String impl_IRfcommDeviceService<T>::ConnectionServiceName() const
{
	String value;
	check(shim()->get_ConnectionServiceName(put(value)));
	return value;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommDeviceService<T>::ServiceId() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId value = nullptr;
	check(shim()->get_ServiceId(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketProtectionLevel impl_IRfcommDeviceService<T>::ProtectionLevel() const
{
	Windows::Networking::Sockets::SocketProtectionLevel value = {};
	check(shim()->get_ProtectionLevel(&value));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketProtectionLevel impl_IRfcommDeviceService<T>::MaxProtectionLevel() const
{
	Windows::Networking::Sockets::SocketProtectionLevel value = {};
	check(shim()->get_MaxProtectionLevel(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<unsigned, Windows::Storage::Streams::IBuffer>> impl_IRfcommDeviceService<T>::GetSdpRawAttributesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<unsigned, Windows::Storage::Streams::IBuffer>> asyncOp;
	check(shim()->abi_GetSdpRawAttributesAsync(put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<unsigned, Windows::Storage::Streams::IBuffer>> impl_IRfcommDeviceService<T>::GetSdpRawAttributesAsync(Windows::Devices::Bluetooth::BluetoothCacheMode const cacheMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<unsigned, Windows::Storage::Streams::IBuffer>> asyncOp;
	check(shim()->abi_GetSdpRawAttributesWithCacheModeAsync(cacheMode, put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::Bluetooth::BluetoothDevice impl_IRfcommDeviceService2<T>::Device() const
{
	Windows::Devices::Bluetooth::BluetoothDevice value = nullptr;
	check(shim()->get_Device(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider> impl_IRfcommServiceProviderStatics<T>::CreateAsync(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & serviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider> asyncOp;
	check(shim()->abi_CreateAsync(get(serviceId), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId impl_IRfcommServiceProvider<T>::ServiceId() const
{
	Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId value = nullptr;
	check(shim()->get_ServiceId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<unsigned, Windows::Storage::Streams::IBuffer> impl_IRfcommServiceProvider<T>::SdpRawAttributes() const
{
	Windows::Foundation::Collections::IMap<unsigned, Windows::Storage::Streams::IBuffer> value;
	check(shim()->get_SdpRawAttributes(put(value)));
	return value;
}

template <typename T> void impl_IRfcommServiceProvider<T>::StartAdvertising(Windows::Networking::Sockets::StreamSocketListener const & listener) const
{
	check(shim()->abi_StartAdvertising(get(listener)));
}

template <typename T> void impl_IRfcommServiceProvider<T>::StopAdvertising() const
{
	check(shim()->abi_StopAdvertising());
}

template <typename T> void impl_IRfcommServiceProvider2<T>::StartAdvertising(Windows::Networking::Sockets::StreamSocketListener const & listener, bool const radioDiscoverable) const
{
	check(shim()->abi_StartAdvertisingWithRadioDiscoverability(get(listener), radioDiscoverable));
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Custom {

template <typename T> unsigned short impl_IKnownDeviceTypesStatics<T>::Unknown() const
{
	unsigned short value = {};
	check(shim()->get_Unknown(&value));
	return value;
}

template <typename T> Windows::Devices::Custom::IOControlAccessMode impl_IIOControlCode<T>::AccessMode() const
{
	Windows::Devices::Custom::IOControlAccessMode value = {};
	check(shim()->get_AccessMode(&value));
	return value;
}

template <typename T> Windows::Devices::Custom::IOControlBufferingMethod impl_IIOControlCode<T>::BufferingMethod() const
{
	Windows::Devices::Custom::IOControlBufferingMethod value = {};
	check(shim()->get_BufferingMethod(&value));
	return value;
}

template <typename T> unsigned short impl_IIOControlCode<T>::Function() const
{
	unsigned short value = {};
	check(shim()->get_Function(&value));
	return value;
}

template <typename T> unsigned short impl_IIOControlCode<T>::DeviceType() const
{
	unsigned short value = {};
	check(shim()->get_DeviceType(&value));
	return value;
}

template <typename T> unsigned impl_IIOControlCode<T>::ControlCode() const
{
	unsigned value = {};
	check(shim()->get_ControlCode(&value));
	return value;
}

template <typename T> Windows::Devices::Custom::IOControlCode impl_IIOControlCodeFactory<T>::CreateIOControlCode(unsigned short const deviceType, unsigned short const function, Windows::Devices::Custom::IOControlAccessMode const accessMode, Windows::Devices::Custom::IOControlBufferingMethod const bufferingMethod) const
{
	Windows::Devices::Custom::IOControlCode instance = nullptr;
	check(shim()->abi_CreateIOControlCode(deviceType, function, accessMode, bufferingMethod, put(instance)));
	return instance;
}

template <typename T> String impl_ICustomDeviceStatics<T>::GetDeviceSelector(GUID const classGuid) const
{
	String value;
	check(shim()->abi_GetDeviceSelector(classGuid, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> impl_ICustomDeviceStatics<T>::FromIdAsync(StringReference const & deviceId, Windows::Devices::Custom::DeviceAccessMode const desiredAccess, Windows::Devices::Custom::DeviceSharingMode const sharingMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> operation;
	check(shim()->abi_FromIdAsync(get(deviceId), desiredAccess, sharingMode, put(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_ICustomDevice<T>::InputStream() const
{
	Windows::Storage::Streams::IInputStream value;
	check(shim()->get_InputStream(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_ICustomDevice<T>::OutputStream() const
{
	Windows::Storage::Streams::IOutputStream value;
	check(shim()->get_OutputStream(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_ICustomDevice<T>::SendIOControlAsync(Windows::Devices::Custom::IIOControlCode const & ioControlCode, Windows::Storage::Streams::IBuffer const & inputBuffer, Windows::Storage::Streams::IBuffer const & outputBuffer) const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation;
	check(shim()->abi_SendIOControlAsync(get(ioControlCode), get(inputBuffer), get(outputBuffer), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ICustomDevice<T>::TrySendIOControlAsync(Windows::Devices::Custom::IIOControlCode const & ioControlCode, Windows::Storage::Streams::IBuffer const & inputBuffer, Windows::Storage::Streams::IBuffer const & outputBuffer) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_TrySendIOControlAsync(get(ioControlCode), get(inputBuffer), get(outputBuffer), put(operation)));
	return operation;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Enumeration {

template <typename T> String impl_IDeviceConnectionChangeTriggerDetails<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> String impl_IDevicePickerAppearance<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IDevicePickerAppearance<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> Windows::UI::Color impl_IDevicePickerAppearance<T>::ForegroundColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_ForegroundColor(&value));
	return value;
}

template <typename T> void impl_IDevicePickerAppearance<T>::ForegroundColor(Windows::UI::Color const & value) const
{
	check(shim()->put_ForegroundColor(value));
}

template <typename T> Windows::UI::Color impl_IDevicePickerAppearance<T>::BackgroundColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_BackgroundColor(&value));
	return value;
}

template <typename T> void impl_IDevicePickerAppearance<T>::BackgroundColor(Windows::UI::Color const & value) const
{
	check(shim()->put_BackgroundColor(value));
}

template <typename T> Windows::UI::Color impl_IDevicePickerAppearance<T>::AccentColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_AccentColor(&value));
	return value;
}

template <typename T> void impl_IDevicePickerAppearance<T>::AccentColor(Windows::UI::Color const & value) const
{
	check(shim()->put_AccentColor(value));
}

template <typename T> Windows::UI::Color impl_IDevicePickerAppearance<T>::SelectedForegroundColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_SelectedForegroundColor(&value));
	return value;
}

template <typename T> void impl_IDevicePickerAppearance<T>::SelectedForegroundColor(Windows::UI::Color const & value) const
{
	check(shim()->put_SelectedForegroundColor(value));
}

template <typename T> Windows::UI::Color impl_IDevicePickerAppearance<T>::SelectedBackgroundColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_SelectedBackgroundColor(&value));
	return value;
}

template <typename T> void impl_IDevicePickerAppearance<T>::SelectedBackgroundColor(Windows::UI::Color const & value) const
{
	check(shim()->put_SelectedBackgroundColor(value));
}

template <typename T> Windows::UI::Color impl_IDevicePickerAppearance<T>::SelectedAccentColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_SelectedAccentColor(&value));
	return value;
}

template <typename T> void impl_IDevicePickerAppearance<T>::SelectedAccentColor(Windows::UI::Color const & value) const
{
	check(shim()->put_SelectedAccentColor(value));
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IDeviceSelectedEventArgs<T>::SelectedDevice() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check(shim()->get_SelectedDevice(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IDeviceDisconnectButtonClickedEventArgs<T>::Device() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check(shim()->get_Device(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Enumeration::DeviceClass> impl_IDevicePickerFilter<T>::SupportedDeviceClasses() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Enumeration::DeviceClass> value;
	check(shim()->get_SupportedDeviceClasses(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IDevicePickerFilter<T>::SupportedDeviceSelectors() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_SupportedDeviceSelectors(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DevicePickerFilter impl_IDevicePicker<T>::Filter() const
{
	Windows::Devices::Enumeration::DevicePickerFilter filter = nullptr;
	check(shim()->get_Filter(put(filter)));
	return filter;
}

template <typename T> Windows::Devices::Enumeration::DevicePickerAppearance impl_IDevicePicker<T>::Appearance() const
{
	Windows::Devices::Enumeration::DevicePickerAppearance value = nullptr;
	check(shim()->get_Appearance(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IDevicePicker<T>::RequestedProperties() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_RequestedProperties(put(value)));
	return value;
}

template <typename T> long long impl_IDevicePicker<T>::DeviceSelected(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DevicePicker, Windows::Devices::Enumeration::DeviceSelectedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_DeviceSelected(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDevicePicker<T>::DeviceSelected(F handler) const
{
	return DeviceSelected(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DevicePicker, Windows::Devices::Enumeration::DeviceSelectedEventArgs>(handler));
}

template <typename T> void impl_IDevicePicker<T>::DeviceSelected(long long const token) const
{
	check(shim()->remove_DeviceSelected(token));
}

template <typename T> long long impl_IDevicePicker<T>::DisconnectButtonClicked(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DevicePicker, Windows::Devices::Enumeration::DeviceDisconnectButtonClickedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_DisconnectButtonClicked(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDevicePicker<T>::DisconnectButtonClicked(F handler) const
{
	return DisconnectButtonClicked(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DevicePicker, Windows::Devices::Enumeration::DeviceDisconnectButtonClickedEventArgs>(handler));
}

template <typename T> void impl_IDevicePicker<T>::DisconnectButtonClicked(long long const token) const
{
	check(shim()->remove_DisconnectButtonClicked(token));
}

template <typename T> long long impl_IDevicePicker<T>::DevicePickerDismissed(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DevicePicker, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_DevicePickerDismissed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDevicePicker<T>::DevicePickerDismissed(F handler) const
{
	return DevicePickerDismissed(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DevicePicker, IInspectable>(handler));
}

template <typename T> void impl_IDevicePicker<T>::DevicePickerDismissed(long long const token) const
{
	check(shim()->remove_DevicePickerDismissed(token));
}

template <typename T> void impl_IDevicePicker<T>::Show(Windows::Foundation::Rect const & selection) const
{
	check(shim()->abi_Show(selection));
}

template <typename T> void impl_IDevicePicker<T>::Show(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const placement) const
{
	check(shim()->abi_ShowWithPlacement(selection, placement));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> impl_IDevicePicker<T>::PickSingleDeviceAsync(Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> operation;
	check(shim()->abi_PickSingleDeviceAsync(selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> impl_IDevicePicker<T>::PickSingleDeviceAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const placement) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> operation;
	check(shim()->abi_PickSingleDeviceAsyncWithPlacement(selection, placement, put(operation)));
	return operation;
}

template <typename T> void impl_IDevicePicker<T>::Hide() const
{
	check(shim()->abi_Hide());
}

template <typename T> void impl_IDevicePicker<T>::SetDisplayStatus(Windows::Devices::Enumeration::DeviceInformation const & device, StringReference const & status, Windows::Devices::Enumeration::DevicePickerDisplayStatusOptions const options) const
{
	check(shim()->abi_SetDisplayStatus(get(device), get(status), options));
}

template <typename T> bool impl_IEnclosureLocation<T>::InDock() const
{
	bool value = {};
	check(shim()->get_InDock(put(value)));
	return value;
}

template <typename T> bool impl_IEnclosureLocation<T>::InLid() const
{
	bool value = {};
	check(shim()->get_InLid(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::Panel impl_IEnclosureLocation<T>::Panel() const
{
	Windows::Devices::Enumeration::Panel value = {};
	check(shim()->get_Panel(&value));
	return value;
}

template <typename T> String impl_IDeviceInformationUpdate<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IDeviceInformationUpdate<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformationKind impl_IDeviceInformationUpdate2<T>::Kind() const
{
	Windows::Devices::Enumeration::DeviceInformationKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> long long impl_IDeviceWatcher<T>::Added(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformation> const & handler) const
{
	long long token = {};
	check(shim()->add_Added(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDeviceWatcher<T>::Added(F handler) const
{
	return Added(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformation>(handler));
}

template <typename T> void impl_IDeviceWatcher<T>::Added(long long const token) const
{
	check(shim()->remove_Added(token));
}

template <typename T> long long impl_IDeviceWatcher<T>::Updated(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate> const & handler) const
{
	long long token = {};
	check(shim()->add_Updated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDeviceWatcher<T>::Updated(F handler) const
{
	return Updated(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate>(handler));
}

template <typename T> void impl_IDeviceWatcher<T>::Updated(long long const token) const
{
	check(shim()->remove_Updated(token));
}

template <typename T> long long impl_IDeviceWatcher<T>::Removed(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate> const & handler) const
{
	long long token = {};
	check(shim()->add_Removed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDeviceWatcher<T>::Removed(F handler) const
{
	return Removed(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, Windows::Devices::Enumeration::DeviceInformationUpdate>(handler));
}

template <typename T> void impl_IDeviceWatcher<T>::Removed(long long const token) const
{
	check(shim()->remove_Removed(token));
}

template <typename T> long long impl_IDeviceWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_EnumerationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDeviceWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable>(handler));
}

template <typename T> void impl_IDeviceWatcher<T>::EnumerationCompleted(long long const token) const
{
	check(shim()->remove_EnumerationCompleted(token));
}

template <typename T> long long impl_IDeviceWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDeviceWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceWatcher, IInspectable>(handler));
}

template <typename T> void impl_IDeviceWatcher<T>::Stopped(long long const token) const
{
	check(shim()->remove_Stopped(token));
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcherStatus impl_IDeviceWatcher<T>::Status() const
{
	Windows::Devices::Enumeration::DeviceWatcherStatus status = {};
	check(shim()->get_Status(&status));
	return status;
}

template <typename T> void impl_IDeviceWatcher<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IDeviceWatcher<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> Windows::ApplicationModel::Background::DeviceWatcherTrigger impl_IDeviceWatcher2<T>::GetBackgroundTrigger(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Enumeration::DeviceWatcherEventKind> const & requestedEventKinds) const
{
	Windows::ApplicationModel::Background::DeviceWatcherTrigger trigger = nullptr;
	check(shim()->abi_GetBackgroundTrigger(get(requestedEventKinds), put(trigger)));
	return trigger;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> impl_IDeviceInformationStatics<T>::CreateFromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> asyncOp;
	check(shim()->abi_CreateFromIdAsync(get(deviceId), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> impl_IDeviceInformationStatics<T>::CreateFromIdAsync(StringReference const & deviceId, Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> asyncOp;
	check(shim()->abi_CreateFromIdAsyncAdditionalProperties(get(deviceId), get(additionalProperties), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> impl_IDeviceInformationStatics<T>::FindAllAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> asyncOp;
	check(shim()->abi_FindAllAsync(put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> impl_IDeviceInformationStatics<T>::FindAllAsync(Windows::Devices::Enumeration::DeviceClass const deviceClass) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> asyncOp;
	check(shim()->abi_FindAllAsyncDeviceClass(deviceClass, put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> impl_IDeviceInformationStatics<T>::FindAllAsync(StringReference const & aqsFilter) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> asyncOp;
	check(shim()->abi_FindAllAsyncAqsFilter(get(aqsFilter), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> impl_IDeviceInformationStatics<T>::FindAllAsync(StringReference const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> asyncOp;
	check(shim()->abi_FindAllAsyncAqsFilterAndAdditionalProperties(get(aqsFilter), get(additionalProperties), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcher impl_IDeviceInformationStatics<T>::CreateWatcher() const
{
	Windows::Devices::Enumeration::DeviceWatcher watcher = nullptr;
	check(shim()->abi_CreateWatcher(put(watcher)));
	return watcher;
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcher impl_IDeviceInformationStatics<T>::CreateWatcher(Windows::Devices::Enumeration::DeviceClass const deviceClass) const
{
	Windows::Devices::Enumeration::DeviceWatcher watcher = nullptr;
	check(shim()->abi_CreateWatcherDeviceClass(deviceClass, put(watcher)));
	return watcher;
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcher impl_IDeviceInformationStatics<T>::CreateWatcher(StringReference const & aqsFilter) const
{
	Windows::Devices::Enumeration::DeviceWatcher watcher = nullptr;
	check(shim()->abi_CreateWatcherAqsFilter(get(aqsFilter), put(watcher)));
	return watcher;
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcher impl_IDeviceInformationStatics<T>::CreateWatcher(StringReference const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties) const
{
	Windows::Devices::Enumeration::DeviceWatcher watcher = nullptr;
	check(shim()->abi_CreateWatcherAqsFilterAndAdditionalProperties(get(aqsFilter), get(additionalProperties), put(watcher)));
	return watcher;
}

template <typename T> String impl_IDeviceInformationStatics2<T>::GetAqsFilterFromDeviceClass(Windows::Devices::Enumeration::DeviceClass const deviceClass) const
{
	String aqsFilter;
	check(shim()->abi_GetAqsFilterFromDeviceClass(deviceClass, put(aqsFilter)));
	return aqsFilter;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> impl_IDeviceInformationStatics2<T>::CreateFromIdAsync(StringReference const & deviceId, Windows::Foundation::Collections::IIterable<String> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind const kind) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> asyncOp;
	check(shim()->abi_CreateFromIdAsyncWithKindAndAdditionalProperties(get(deviceId), get(additionalProperties), kind, put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> impl_IDeviceInformationStatics2<T>::FindAllAsync(StringReference const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind const kind) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> asyncOp;
	check(shim()->abi_FindAllAsyncWithKindAqsFilterAndAdditionalProperties(get(aqsFilter), get(additionalProperties), kind, put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcher impl_IDeviceInformationStatics2<T>::CreateWatcher(StringReference const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind const kind) const
{
	Windows::Devices::Enumeration::DeviceWatcher watcher = nullptr;
	check(shim()->abi_CreateWatcherWithKindAqsFilterAndAdditionalProperties(get(aqsFilter), get(additionalProperties), kind, put(watcher)));
	return watcher;
}

template <typename T> String impl_IDeviceInformation<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IDeviceInformation<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> bool impl_IDeviceInformation<T>::IsEnabled() const
{
	bool value = {};
	check(shim()->get_IsEnabled(put(value)));
	return value;
}

template <typename T> bool impl_IDeviceInformation<T>::IsDefault() const
{
	bool value = {};
	check(shim()->get_IsDefault(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::EnclosureLocation impl_IDeviceInformation<T>::EnclosureLocation() const
{
	Windows::Devices::Enumeration::EnclosureLocation value = nullptr;
	check(shim()->get_EnclosureLocation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IDeviceInformation<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> void impl_IDeviceInformation<T>::Update(Windows::Devices::Enumeration::DeviceInformationUpdate const & updateInfo) const
{
	check(shim()->abi_Update(get(updateInfo)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> impl_IDeviceInformation<T>::GetThumbnailAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> asyncOp;
	check(shim()->abi_GetThumbnailAsync(put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> impl_IDeviceInformation<T>::GetGlyphThumbnailAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceThumbnail> asyncOp;
	check(shim()->abi_GetGlyphThumbnailAsync(put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::Enumeration::DevicePairingResultStatus impl_IDevicePairingResult<T>::Status() const
{
	Windows::Devices::Enumeration::DevicePairingResultStatus status = {};
	check(shim()->get_Status(&status));
	return status;
}

template <typename T> Windows::Devices::Enumeration::DevicePairingProtectionLevel impl_IDevicePairingResult<T>::ProtectionLevelUsed() const
{
	Windows::Devices::Enumeration::DevicePairingProtectionLevel value = {};
	check(shim()->get_ProtectionLevelUsed(&value));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceUnpairingResultStatus impl_IDeviceUnpairingResult<T>::Status() const
{
	Windows::Devices::Enumeration::DeviceUnpairingResultStatus status = {};
	check(shim()->get_Status(&status));
	return status;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IDevicePairingRequestedEventArgs<T>::DeviceInformation() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check(shim()->get_DeviceInformation(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DevicePairingKinds impl_IDevicePairingRequestedEventArgs<T>::PairingKind() const
{
	Windows::Devices::Enumeration::DevicePairingKinds value = {};
	check(shim()->get_PairingKind(&value));
	return value;
}

template <typename T> String impl_IDevicePairingRequestedEventArgs<T>::Pin() const
{
	String value;
	check(shim()->get_Pin(put(value)));
	return value;
}

template <typename T> void impl_IDevicePairingRequestedEventArgs<T>::Accept() const
{
	check(shim()->abi_Accept());
}

template <typename T> void impl_IDevicePairingRequestedEventArgs<T>::Accept(StringReference const & pin) const
{
	check(shim()->abi_AcceptWithPin(get(pin)));
}

template <typename T> Windows::Foundation::Deferral impl_IDevicePairingRequestedEventArgs<T>::GetDeferral() const
{
	Windows::Foundation::Deferral result = nullptr;
	check(shim()->abi_GetDeferral(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> impl_IDeviceInformationCustomPairing<T>::PairAsync(Windows::Devices::Enumeration::DevicePairingKinds const pairingKindsSupported) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> result;
	check(shim()->abi_PairAsync(pairingKindsSupported, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> impl_IDeviceInformationCustomPairing<T>::PairAsync(Windows::Devices::Enumeration::DevicePairingKinds const pairingKindsSupported, Windows::Devices::Enumeration::DevicePairingProtectionLevel const minProtectionLevel) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> result;
	check(shim()->abi_PairWithProtectionLevelAsync(pairingKindsSupported, minProtectionLevel, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> impl_IDeviceInformationCustomPairing<T>::PairAsync(Windows::Devices::Enumeration::DevicePairingKinds const pairingKindsSupported, Windows::Devices::Enumeration::DevicePairingProtectionLevel const minProtectionLevel, Windows::Devices::Enumeration::IDevicePairingSettings const & devicePairingSettings) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> result;
	check(shim()->abi_PairWithProtectionLevelAndSettingsAsync(pairingKindsSupported, minProtectionLevel, get(devicePairingSettings), put(result)));
	return result;
}

template <typename T> long long impl_IDeviceInformationCustomPairing<T>::PairingRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceInformationCustomPairing, Windows::Devices::Enumeration::DevicePairingRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_PairingRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDeviceInformationCustomPairing<T>::PairingRequested(F handler) const
{
	return PairingRequested(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceInformationCustomPairing, Windows::Devices::Enumeration::DevicePairingRequestedEventArgs>(handler));
}

template <typename T> void impl_IDeviceInformationCustomPairing<T>::PairingRequested(long long const token) const
{
	check(shim()->remove_PairingRequested(token));
}

template <typename T> bool impl_IDeviceInformationPairing<T>::IsPaired() const
{
	bool value = {};
	check(shim()->get_IsPaired(put(value)));
	return value;
}

template <typename T> bool impl_IDeviceInformationPairing<T>::CanPair() const
{
	bool value = {};
	check(shim()->get_CanPair(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> impl_IDeviceInformationPairing<T>::PairAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> result;
	check(shim()->abi_PairAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> impl_IDeviceInformationPairing<T>::PairAsync(Windows::Devices::Enumeration::DevicePairingProtectionLevel const minProtectionLevel) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> result;
	check(shim()->abi_PairWithProtectionLevelAsync(minProtectionLevel, put(result)));
	return result;
}

template <typename T> Windows::Devices::Enumeration::DevicePairingProtectionLevel impl_IDeviceInformationPairing2<T>::ProtectionLevel() const
{
	Windows::Devices::Enumeration::DevicePairingProtectionLevel value = {};
	check(shim()->get_ProtectionLevel(&value));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformationCustomPairing impl_IDeviceInformationPairing2<T>::Custom() const
{
	Windows::Devices::Enumeration::DeviceInformationCustomPairing value = nullptr;
	check(shim()->get_Custom(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> impl_IDeviceInformationPairing2<T>::PairAsync(Windows::Devices::Enumeration::DevicePairingProtectionLevel const minProtectionLevel, Windows::Devices::Enumeration::IDevicePairingSettings const & devicePairingSettings) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DevicePairingResult> result;
	check(shim()->abi_PairWithProtectionLevelAndSettingsAsync(minProtectionLevel, get(devicePairingSettings), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceUnpairingResult> impl_IDeviceInformationPairing2<T>::UnpairAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceUnpairingResult> result;
	check(shim()->abi_UnpairAsync(put(result)));
	return result;
}

template <typename T> bool impl_IDeviceInformationPairingStatics<T>::TryRegisterForAllInboundPairingRequests(Windows::Devices::Enumeration::DevicePairingKinds const pairingKindsSupported) const
{
	bool result = {};
	check(shim()->abi_TryRegisterForAllInboundPairingRequests(pairingKindsSupported, put(result)));
	return result;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformationKind impl_IDeviceInformation2<T>::Kind() const
{
	Windows::Devices::Enumeration::DeviceInformationKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformationPairing impl_IDeviceInformation2<T>::Pairing() const
{
	Windows::Devices::Enumeration::DeviceInformationPairing value = nullptr;
	check(shim()->get_Pairing(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceAccessStatus impl_IDeviceAccessChangedEventArgs<T>::Status() const
{
	Windows::Devices::Enumeration::DeviceAccessStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> long long impl_IDeviceAccessInformation<T>::AccessChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::DeviceAccessInformation, Windows::Devices::Enumeration::DeviceAccessChangedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_AccessChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IDeviceAccessInformation<T>::AccessChanged(F handler) const
{
	return AccessChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::DeviceAccessInformation, Windows::Devices::Enumeration::DeviceAccessChangedEventArgs>(handler));
}

template <typename T> void impl_IDeviceAccessInformation<T>::AccessChanged(long long const cookie) const
{
	check(shim()->remove_AccessChanged(cookie));
}

template <typename T> Windows::Devices::Enumeration::DeviceAccessStatus impl_IDeviceAccessInformation<T>::CurrentStatus() const
{
	Windows::Devices::Enumeration::DeviceAccessStatus status = {};
	check(shim()->get_CurrentStatus(&status));
	return status;
}

template <typename T> Windows::Devices::Enumeration::DeviceAccessInformation impl_IDeviceAccessInformationStatics<T>::CreateFromId(StringReference const & deviceId) const
{
	Windows::Devices::Enumeration::DeviceAccessInformation value = nullptr;
	check(shim()->abi_CreateFromId(get(deviceId), put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceAccessInformation impl_IDeviceAccessInformationStatics<T>::CreateFromDeviceClassId(GUID const deviceClassId) const
{
	Windows::Devices::Enumeration::DeviceAccessInformation value = nullptr;
	check(shim()->abi_CreateFromDeviceClassId(deviceClassId, put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceAccessInformation impl_IDeviceAccessInformationStatics<T>::CreateFromDeviceClass(Windows::Devices::Enumeration::DeviceClass const deviceClass) const
{
	Windows::Devices::Enumeration::DeviceAccessInformation value = nullptr;
	check(shim()->abi_CreateFromDeviceClass(deviceClass, put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcherEventKind impl_IDeviceWatcherEvent<T>::Kind() const
{
	Windows::Devices::Enumeration::DeviceWatcherEventKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IDeviceWatcherEvent<T>::DeviceInformation() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check(shim()->get_DeviceInformation(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformationUpdate impl_IDeviceWatcherEvent<T>::DeviceInformationUpdate() const
{
	Windows::Devices::Enumeration::DeviceInformationUpdate value = nullptr;
	check(shim()->get_DeviceInformationUpdate(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Enumeration::DeviceWatcherEvent> impl_IDeviceWatcherTriggerDetails<T>::DeviceWatcherEvents() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Enumeration::DeviceWatcherEvent> value;
	check(shim()->get_DeviceWatcherEvents(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Enumeration { namespace Pnp {

template <typename T> Windows::Devices::Enumeration::Pnp::PnpObjectType impl_IPnpObjectUpdate<T>::Type() const
{
	Windows::Devices::Enumeration::Pnp::PnpObjectType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> String impl_IPnpObjectUpdate<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IPnpObjectUpdate<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> long long impl_IPnpObjectWatcher<T>::Added(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObject> const & handler) const
{
	long long token = {};
	check(shim()->add_Added(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPnpObjectWatcher<T>::Added(F handler) const
{
	return Added(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObject>(handler));
}

template <typename T> void impl_IPnpObjectWatcher<T>::Added(long long const token) const
{
	check(shim()->remove_Added(token));
}

template <typename T> long long impl_IPnpObjectWatcher<T>::Updated(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObjectUpdate> const & handler) const
{
	long long token = {};
	check(shim()->add_Updated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPnpObjectWatcher<T>::Updated(F handler) const
{
	return Updated(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObjectUpdate>(handler));
}

template <typename T> void impl_IPnpObjectWatcher<T>::Updated(long long const token) const
{
	check(shim()->remove_Updated(token));
}

template <typename T> long long impl_IPnpObjectWatcher<T>::Removed(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObjectUpdate> const & handler) const
{
	long long token = {};
	check(shim()->add_Removed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPnpObjectWatcher<T>::Removed(F handler) const
{
	return Removed(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, Windows::Devices::Enumeration::Pnp::PnpObjectUpdate>(handler));
}

template <typename T> void impl_IPnpObjectWatcher<T>::Removed(long long const token) const
{
	check(shim()->remove_Removed(token));
}

template <typename T> long long impl_IPnpObjectWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_EnumerationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPnpObjectWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPnpObjectWatcher<T>::EnumerationCompleted(long long const token) const
{
	check(shim()->remove_EnumerationCompleted(token));
}

template <typename T> long long impl_IPnpObjectWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPnpObjectWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::Devices::Enumeration::Pnp::PnpObjectWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPnpObjectWatcher<T>::Stopped(long long const token) const
{
	check(shim()->remove_Stopped(token));
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcherStatus impl_IPnpObjectWatcher<T>::Status() const
{
	Windows::Devices::Enumeration::DeviceWatcherStatus status = {};
	check(shim()->get_Status(&status));
	return status;
}

template <typename T> void impl_IPnpObjectWatcher<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IPnpObjectWatcher<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> impl_IPnpObjectStatics<T>::CreateFromIdAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, StringReference const & id, Windows::Foundation::Collections::IIterable<String> const & requestedProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> asyncOp;
	check(shim()->abi_CreateFromIdAsync(type, get(id), get(requestedProperties), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> impl_IPnpObjectStatics<T>::FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> asyncOp;
	check(shim()->abi_FindAllAsync(type, get(requestedProperties), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> impl_IPnpObjectStatics<T>::FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, StringReference const & aqsFilter) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> asyncOp;
	check(shim()->abi_FindAllAsyncAqsFilter(type, get(requestedProperties), get(aqsFilter), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Devices::Enumeration::Pnp::PnpObjectWatcher impl_IPnpObjectStatics<T>::CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties) const
{
	Windows::Devices::Enumeration::Pnp::PnpObjectWatcher watcher = nullptr;
	check(shim()->abi_CreateWatcher(type, get(requestedProperties), put(watcher)));
	return watcher;
}

template <typename T> Windows::Devices::Enumeration::Pnp::PnpObjectWatcher impl_IPnpObjectStatics<T>::CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, StringReference const & aqsFilter) const
{
	Windows::Devices::Enumeration::Pnp::PnpObjectWatcher watcher = nullptr;
	check(shim()->abi_CreateWatcherAqsFilter(type, get(requestedProperties), get(aqsFilter), put(watcher)));
	return watcher;
}

template <typename T> Windows::Devices::Enumeration::Pnp::PnpObjectType impl_IPnpObject<T>::Type() const
{
	Windows::Devices::Enumeration::Pnp::PnpObjectType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> String impl_IPnpObject<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IPnpObject<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> void impl_IPnpObject<T>::Update(Windows::Devices::Enumeration::Pnp::PnpObjectUpdate const & updateInfo) const
{
	check(shim()->abi_Update(get(updateInfo)));
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Geolocation {

template <typename T> Windows::Devices::Geolocation::GeoshapeType impl_IGeoshape<T>::GeoshapeType() const
{
	Windows::Devices::Geolocation::GeoshapeType value = {};
	check(shim()->get_GeoshapeType(&value));
	return value;
}

template <typename T> unsigned impl_IGeoshape<T>::SpatialReferenceId() const
{
	unsigned value = {};
	check(shim()->get_SpatialReferenceId(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::AltitudeReferenceSystem impl_IGeoshape<T>::AltitudeReferenceSystem() const
{
	Windows::Devices::Geolocation::AltitudeReferenceSystem value = {};
	check(shim()->get_AltitudeReferenceSystem(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::BasicGeoposition impl_IGeopoint<T>::Position() const
{
	Windows::Devices::Geolocation::BasicGeoposition value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_IGeopointFactory<T>::Create(Windows::Devices::Geolocation::BasicGeoposition const & position) const
{
	Windows::Devices::Geolocation::Geopoint value = nullptr;
	check(shim()->abi_Create(position, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_IGeopointFactory<T>::CreateWithAltitudeReferenceSystem(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) const
{
	Windows::Devices::Geolocation::Geopoint value = nullptr;
	check(shim()->abi_CreateWithAltitudeReferenceSystem(position, altitudeReferenceSystem, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_IGeopointFactory<T>::CreateWithAltitudeReferenceSystemAndSpatialReferenceId(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) const
{
	Windows::Devices::Geolocation::Geopoint value = nullptr;
	check(shim()->abi_CreateWithAltitudeReferenceSystemAndSpatialReferenceId(position, altitudeReferenceSystem, spatialReferenceId, put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Geolocation::BasicGeoposition> impl_IGeopath<T>::Positions() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Geolocation::BasicGeoposition> value;
	check(shim()->get_Positions(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopath impl_IGeopathFactory<T>::Create(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions) const
{
	Windows::Devices::Geolocation::Geopath value = nullptr;
	check(shim()->abi_Create(get(positions), put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopath impl_IGeopathFactory<T>::CreateWithAltitudeReference(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) const
{
	Windows::Devices::Geolocation::Geopath value = nullptr;
	check(shim()->abi_CreateWithAltitudeReference(get(positions), altitudeReferenceSystem, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopath impl_IGeopathFactory<T>::CreateWithAltitudeReferenceAndSpatialReference(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) const
{
	Windows::Devices::Geolocation::Geopath value = nullptr;
	check(shim()->abi_CreateWithAltitudeReferenceAndSpatialReference(get(positions), altitudeReferenceSystem, spatialReferenceId, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::BasicGeoposition impl_IGeoboundingBox<T>::NorthwestCorner() const
{
	Windows::Devices::Geolocation::BasicGeoposition value = {};
	check(shim()->get_NorthwestCorner(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::BasicGeoposition impl_IGeoboundingBox<T>::SoutheastCorner() const
{
	Windows::Devices::Geolocation::BasicGeoposition value = {};
	check(shim()->get_SoutheastCorner(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::BasicGeoposition impl_IGeoboundingBox<T>::Center() const
{
	Windows::Devices::Geolocation::BasicGeoposition value = {};
	check(shim()->get_Center(&value));
	return value;
}

template <typename T> double impl_IGeoboundingBox<T>::MinAltitude() const
{
	double value = {};
	check(shim()->get_MinAltitude(&value));
	return value;
}

template <typename T> double impl_IGeoboundingBox<T>::MaxAltitude() const
{
	double value = {};
	check(shim()->get_MaxAltitude(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::GeoboundingBox impl_IGeoboundingBoxFactory<T>::Create(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner) const
{
	Windows::Devices::Geolocation::GeoboundingBox value = nullptr;
	check(shim()->abi_Create(northwestCorner, southeastCorner, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::GeoboundingBox impl_IGeoboundingBoxFactory<T>::CreateWithAltitudeReference(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) const
{
	Windows::Devices::Geolocation::GeoboundingBox value = nullptr;
	check(shim()->abi_CreateWithAltitudeReference(northwestCorner, southeastCorner, altitudeReferenceSystem, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::GeoboundingBox impl_IGeoboundingBoxFactory<T>::CreateWithAltitudeReferenceAndSpatialReference(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) const
{
	Windows::Devices::Geolocation::GeoboundingBox value = nullptr;
	check(shim()->abi_CreateWithAltitudeReferenceAndSpatialReference(northwestCorner, southeastCorner, altitudeReferenceSystem, spatialReferenceId, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::GeoboundingBox impl_IGeoboundingBoxStatics<T>::TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions) const
{
	Windows::Devices::Geolocation::GeoboundingBox value = nullptr;
	check(shim()->abi_TryCompute(get(positions), put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::GeoboundingBox impl_IGeoboundingBoxStatics<T>::TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeRefSystem) const
{
	Windows::Devices::Geolocation::GeoboundingBox value = nullptr;
	check(shim()->abi_TryComputeWithAltitudeReference(get(positions), altitudeRefSystem, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::GeoboundingBox impl_IGeoboundingBoxStatics<T>::TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeRefSystem, unsigned const spatialReferenceId) const
{
	Windows::Devices::Geolocation::GeoboundingBox value = nullptr;
	check(shim()->abi_TryComputeWithAltitudeReferenceAndSpatialReference(get(positions), altitudeRefSystem, spatialReferenceId, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinateSatelliteData<T>::PositionDilutionOfPrecision() const
{
	Windows::Foundation::IReference<double> ppValue;
	check(shim()->get_PositionDilutionOfPrecision(put(ppValue)));
	return ppValue;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinateSatelliteData<T>::HorizontalDilutionOfPrecision() const
{
	Windows::Foundation::IReference<double> ppValue;
	check(shim()->get_HorizontalDilutionOfPrecision(put(ppValue)));
	return ppValue;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinateSatelliteData<T>::VerticalDilutionOfPrecision() const
{
	Windows::Foundation::IReference<double> ppValue;
	check(shim()->get_VerticalDilutionOfPrecision(put(ppValue)));
	return ppValue;
}

template <typename T> String impl_IVenueData<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IVenueData<T>::Level() const
{
	String value;
	check(shim()->get_Level(put(value)));
	return value;
}

template <typename T> double impl_IGeocoordinate<T>::Latitude() const
{
	double value = {};
	check(shim()->get_Latitude(&value));
	return value;
}

template <typename T> double impl_IGeocoordinate<T>::Longitude() const
{
	double value = {};
	check(shim()->get_Longitude(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinate<T>::Altitude() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_Altitude(put(value)));
	return value;
}

template <typename T> double impl_IGeocoordinate<T>::Accuracy() const
{
	double value = {};
	check(shim()->get_Accuracy(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinate<T>::AltitudeAccuracy() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_AltitudeAccuracy(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinate<T>::Heading() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_Heading(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IGeocoordinate<T>::Speed() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_Speed(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IGeocoordinate<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::PositionSource impl_IGeocoordinateWithPositionData<T>::PositionSource() const
{
	Windows::Devices::Geolocation::PositionSource pValue = {};
	check(shim()->get_PositionSource(&pValue));
	return pValue;
}

template <typename T> Windows::Devices::Geolocation::GeocoordinateSatelliteData impl_IGeocoordinateWithPositionData<T>::SatelliteData() const
{
	Windows::Devices::Geolocation::GeocoordinateSatelliteData ppValue = nullptr;
	check(shim()->get_SatelliteData(put(ppValue)));
	return ppValue;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_IGeocoordinateWithPoint<T>::Point() const
{
	Windows::Devices::Geolocation::Geopoint value = nullptr;
	check(shim()->get_Point(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geocoordinate impl_IGeoposition<T>::Coordinate() const
{
	Windows::Devices::Geolocation::Geocoordinate value = nullptr;
	check(shim()->get_Coordinate(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::CivicAddress impl_IGeoposition<T>::CivicAddress() const
{
	Windows::Devices::Geolocation::CivicAddress value = nullptr;
	check(shim()->get_CivicAddress(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::VenueData impl_IGeoposition2<T>::VenueData() const
{
	Windows::Devices::Geolocation::VenueData value = nullptr;
	check(shim()->get_VenueData(put(value)));
	return value;
}

template <typename T> String impl_ICivicAddress<T>::Country() const
{
	String value;
	check(shim()->get_Country(put(value)));
	return value;
}

template <typename T> String impl_ICivicAddress<T>::State() const
{
	String value;
	check(shim()->get_State(put(value)));
	return value;
}

template <typename T> String impl_ICivicAddress<T>::City() const
{
	String value;
	check(shim()->get_City(put(value)));
	return value;
}

template <typename T> String impl_ICivicAddress<T>::PostalCode() const
{
	String value;
	check(shim()->get_PostalCode(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ICivicAddress<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geoposition impl_IPositionChangedEventArgs<T>::Position() const
{
	Windows::Devices::Geolocation::Geoposition value = nullptr;
	check(shim()->get_Position(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::PositionStatus impl_IStatusChangedEventArgs<T>::Status() const
{
	Windows::Devices::Geolocation::PositionStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::PositionAccuracy impl_IGeolocator<T>::DesiredAccuracy() const
{
	Windows::Devices::Geolocation::PositionAccuracy value = {};
	check(shim()->get_DesiredAccuracy(&value));
	return value;
}

template <typename T> void impl_IGeolocator<T>::DesiredAccuracy(Windows::Devices::Geolocation::PositionAccuracy const value) const
{
	check(shim()->put_DesiredAccuracy(value));
}

template <typename T> double impl_IGeolocator<T>::MovementThreshold() const
{
	double value = {};
	check(shim()->get_MovementThreshold(&value));
	return value;
}

template <typename T> void impl_IGeolocator<T>::MovementThreshold(double const value) const
{
	check(shim()->put_MovementThreshold(value));
}

template <typename T> unsigned impl_IGeolocator<T>::ReportInterval() const
{
	unsigned value = {};
	check(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> void impl_IGeolocator<T>::ReportInterval(unsigned const value) const
{
	check(shim()->put_ReportInterval(value));
}

template <typename T> Windows::Devices::Geolocation::PositionStatus impl_IGeolocator<T>::LocationStatus() const
{
	Windows::Devices::Geolocation::PositionStatus value = {};
	check(shim()->get_LocationStatus(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> impl_IGeolocator<T>::GetGeopositionAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> value;
	check(shim()->abi_GetGeopositionAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> impl_IGeolocator<T>::GetGeopositionAsync(Windows::Foundation::TimeSpan const & maximumAge, Windows::Foundation::TimeSpan const & timeout) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geoposition> value;
	check(shim()->abi_GetGeopositionAsyncWithAgeAndTimeout(maximumAge, timeout, put(value)));
	return value;
}

template <typename T> long long impl_IGeolocator<T>::PositionChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::PositionChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_PositionChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGeolocator<T>::PositionChanged(F handler) const
{
	return PositionChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::PositionChangedEventArgs>(handler));
}

template <typename T> void impl_IGeolocator<T>::PositionChanged(long long const token) const
{
	check(shim()->remove_PositionChanged(token));
}

template <typename T> long long impl_IGeolocator<T>::StatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::StatusChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_StatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGeolocator<T>::StatusChanged(F handler) const
{
	return StatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Geolocation::Geolocator, Windows::Devices::Geolocation::StatusChangedEventArgs>(handler));
}

template <typename T> void impl_IGeolocator<T>::StatusChanged(long long const token) const
{
	check(shim()->remove_StatusChanged(token));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IGeolocatorWithScalarAccuracy<T>::DesiredAccuracyInMeters() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_DesiredAccuracyInMeters(put(value)));
	return value;
}

template <typename T> void impl_IGeolocatorWithScalarAccuracy<T>::DesiredAccuracyInMeters(Windows::Foundation::IReference<unsigned> const & value) const
{
	check(shim()->put_DesiredAccuracyInMeters(get(value)));
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Geolocation::GeolocationAccessStatus> impl_IGeolocatorStatics<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Geolocation::GeolocationAccessStatus> result;
	check(shim()->abi_RequestAccessAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geoposition>> impl_IGeolocatorStatics<T>::GetGeopositionHistoryAsync(Windows::Foundation::DateTime const & startTime) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geoposition>> result;
	check(shim()->abi_GetGeopositionHistoryAsync(startTime, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geoposition>> impl_IGeolocatorStatics<T>::GetGeopositionHistoryAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geoposition>> result;
	check(shim()->abi_GetGeopositionHistoryWithDurationAsync(startTime, duration, put(result)));
	return result;
}

template <typename T> Windows::Devices::Geolocation::BasicGeoposition impl_IGeocircle<T>::Center() const
{
	Windows::Devices::Geolocation::BasicGeoposition value = {};
	check(shim()->get_Center(&value));
	return value;
}

template <typename T> double impl_IGeocircle<T>::Radius() const
{
	double value = {};
	check(shim()->get_Radius(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geocircle impl_IGeocircleFactory<T>::Create(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius) const
{
	Windows::Devices::Geolocation::Geocircle value = nullptr;
	check(shim()->abi_Create(position, radius, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geocircle impl_IGeocircleFactory<T>::CreateWithAltitudeReferenceSystem(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) const
{
	Windows::Devices::Geolocation::Geocircle value = nullptr;
	check(shim()->abi_CreateWithAltitudeReferenceSystem(position, radius, altitudeReferenceSystem, put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geocircle impl_IGeocircleFactory<T>::CreateWithAltitudeReferenceSystemAndSpatialReferenceId(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) const
{
	Windows::Devices::Geolocation::Geocircle value = nullptr;
	check(shim()->abi_CreateWithAltitudeReferenceSystemAndSpatialReferenceId(position, radius, altitudeReferenceSystem, spatialReferenceId, put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Geolocation { namespace Geofencing {

template <typename T> Windows::Devices::Geolocation::Geofencing::Geofence impl_IGeofenceFactory<T>::Create(StringReference const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape) const
{
	Windows::Devices::Geolocation::Geofencing::Geofence geofence = nullptr;
	check(shim()->abi_Create(get(id), get(geoshape), put(geofence)));
	return geofence;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::Geofence impl_IGeofenceFactory<T>::CreateWithMonitorStates(StringReference const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse) const
{
	Windows::Devices::Geolocation::Geofencing::Geofence geofence = nullptr;
	check(shim()->abi_CreateWithMonitorStates(get(id), get(geoshape), monitoredStates, singleUse, put(geofence)));
	return geofence;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::Geofence impl_IGeofenceFactory<T>::CreateWithMonitorStatesAndDwellTime(StringReference const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse, Windows::Foundation::TimeSpan const & dwellTime) const
{
	Windows::Devices::Geolocation::Geofencing::Geofence geofence = nullptr;
	check(shim()->abi_CreateWithMonitorStatesAndDwellTime(get(id), get(geoshape), monitoredStates, singleUse, dwellTime, put(geofence)));
	return geofence;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::Geofence impl_IGeofenceFactory<T>::CreateWithMonitorStatesDwellTimeStartTimeAndDuration(StringReference const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse, Windows::Foundation::TimeSpan const & dwellTime, Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration) const
{
	Windows::Devices::Geolocation::Geofencing::Geofence geofence = nullptr;
	check(shim()->abi_CreateWithMonitorStatesDwellTimeStartTimeAndDuration(get(id), get(geoshape), monitoredStates, singleUse, dwellTime, startTime, duration, put(geofence)));
	return geofence;
}

template <typename T> Windows::Foundation::DateTime impl_IGeofence<T>::StartTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_StartTime(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IGeofence<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Duration(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IGeofence<T>::DwellTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_DwellTime(&value));
	return value;
}

template <typename T> String impl_IGeofence<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates impl_IGeofence<T>::MonitoredStates() const
{
	Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates value = {};
	check(shim()->get_MonitoredStates(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::IGeoshape impl_IGeofence<T>::Geoshape() const
{
	Windows::Devices::Geolocation::IGeoshape value;
	check(shim()->get_Geoshape(put(value)));
	return value;
}

template <typename T> bool impl_IGeofence<T>::SingleUse() const
{
	bool value = {};
	check(shim()->get_SingleUse(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::GeofenceState impl_IGeofenceStateChangeReport<T>::NewState() const
{
	Windows::Devices::Geolocation::Geofencing::GeofenceState value = {};
	check(shim()->get_NewState(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::Geofence impl_IGeofenceStateChangeReport<T>::Geofence() const
{
	Windows::Devices::Geolocation::Geofencing::Geofence value = nullptr;
	check(shim()->get_Geofence(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geoposition impl_IGeofenceStateChangeReport<T>::Geoposition() const
{
	Windows::Devices::Geolocation::Geoposition value = nullptr;
	check(shim()->get_Geoposition(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::GeofenceRemovalReason impl_IGeofenceStateChangeReport<T>::RemovalReason() const
{
	Windows::Devices::Geolocation::Geofencing::GeofenceRemovalReason value = {};
	check(shim()->get_RemovalReason(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::GeofenceMonitor impl_IGeofenceMonitorStatics<T>::Current() const
{
	Windows::Devices::Geolocation::Geofencing::GeofenceMonitor value = nullptr;
	check(shim()->get_Current(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geofencing::GeofenceMonitorStatus impl_IGeofenceMonitor<T>::Status() const
{
	Windows::Devices::Geolocation::Geofencing::GeofenceMonitorStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Devices::Geolocation::Geofencing::Geofence> impl_IGeofenceMonitor<T>::Geofences() const
{
	Windows::Foundation::Collections::IVector<Windows::Devices::Geolocation::Geofencing::Geofence> value;
	check(shim()->get_Geofences(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geoposition impl_IGeofenceMonitor<T>::LastKnownGeoposition() const
{
	Windows::Devices::Geolocation::Geoposition value = nullptr;
	check(shim()->get_LastKnownGeoposition(put(value)));
	return value;
}

template <typename T> long long impl_IGeofenceMonitor<T>::GeofenceStateChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geofencing::GeofenceMonitor, IInspectable> const & eventHandler) const
{
	long long token = {};
	check(shim()->add_GeofenceStateChanged(get(eventHandler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGeofenceMonitor<T>::GeofenceStateChanged(F eventHandler) const
{
	return GeofenceStateChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Geolocation::Geofencing::GeofenceMonitor, IInspectable>(eventHandler));
}

template <typename T> void impl_IGeofenceMonitor<T>::GeofenceStateChanged(long long const token) const
{
	check(shim()->remove_GeofenceStateChanged(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport> impl_IGeofenceMonitor<T>::ReadReports() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geofencing::GeofenceStateChangeReport> value;
	check(shim()->abi_ReadReports(put(value)));
	return value;
}

template <typename T> long long impl_IGeofenceMonitor<T>::StatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Geolocation::Geofencing::GeofenceMonitor, IInspectable> const & eventHandler) const
{
	long long token = {};
	check(shim()->add_StatusChanged(get(eventHandler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGeofenceMonitor<T>::StatusChanged(F eventHandler) const
{
	return StatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Geolocation::Geofencing::GeofenceMonitor, IInspectable>(eventHandler));
}

template <typename T> void impl_IGeofenceMonitor<T>::StatusChanged(long long const token) const
{
	check(shim()->remove_StatusChanged(token));
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace HumanInterfaceDevice {

template <typename T> String impl_IHidDeviceStatics<T>::GetDeviceSelector(unsigned short const usagePage, unsigned short const usageId) const
{
	String selector;
	check(shim()->abi_GetDeviceSelector(usagePage, usageId, put(selector)));
	return selector;
}

template <typename T> String impl_IHidDeviceStatics<T>::GetDeviceSelector(unsigned short const usagePage, unsigned short const usageId, unsigned short const vendorId, unsigned short const productId) const
{
	String selector;
	check(shim()->abi_GetDeviceSelectorVidPid(usagePage, usageId, vendorId, productId, put(selector)));
	return selector;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> impl_IHidDeviceStatics<T>::FromIdAsync(StringReference const & deviceId, Windows::Storage::FileAccessMode const accessMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> hidDevice;
	check(shim()->abi_FromIdAsync(get(deviceId), accessMode, put(hidDevice)));
	return hidDevice;
}

template <typename T> unsigned impl_IHidBooleanControlDescription<T>::Id() const
{
	unsigned value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> unsigned short impl_IHidBooleanControlDescription<T>::ReportId() const
{
	unsigned short value = {};
	check(shim()->get_ReportId(&value));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidReportType impl_IHidBooleanControlDescription<T>::ReportType() const
{
	Windows::Devices::HumanInterfaceDevice::HidReportType value = {};
	check(shim()->get_ReportType(&value));
	return value;
}

template <typename T> unsigned short impl_IHidBooleanControlDescription<T>::UsagePage() const
{
	unsigned short value = {};
	check(shim()->get_UsagePage(&value));
	return value;
}

template <typename T> unsigned short impl_IHidBooleanControlDescription<T>::UsageId() const
{
	unsigned short value = {};
	check(shim()->get_UsageId(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidCollection> impl_IHidBooleanControlDescription<T>::ParentCollections() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidCollection> value;
	check(shim()->get_ParentCollections(put(value)));
	return value;
}

template <typename T> unsigned impl_IHidNumericControlDescription<T>::Id() const
{
	unsigned value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> unsigned short impl_IHidNumericControlDescription<T>::ReportId() const
{
	unsigned short value = {};
	check(shim()->get_ReportId(&value));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidReportType impl_IHidNumericControlDescription<T>::ReportType() const
{
	Windows::Devices::HumanInterfaceDevice::HidReportType value = {};
	check(shim()->get_ReportType(&value));
	return value;
}

template <typename T> unsigned impl_IHidNumericControlDescription<T>::ReportSize() const
{
	unsigned value = {};
	check(shim()->get_ReportSize(&value));
	return value;
}

template <typename T> unsigned impl_IHidNumericControlDescription<T>::ReportCount() const
{
	unsigned value = {};
	check(shim()->get_ReportCount(&value));
	return value;
}

template <typename T> unsigned short impl_IHidNumericControlDescription<T>::UsagePage() const
{
	unsigned short value = {};
	check(shim()->get_UsagePage(&value));
	return value;
}

template <typename T> unsigned short impl_IHidNumericControlDescription<T>::UsageId() const
{
	unsigned short value = {};
	check(shim()->get_UsageId(&value));
	return value;
}

template <typename T> int impl_IHidNumericControlDescription<T>::LogicalMinimum() const
{
	int value = {};
	check(shim()->get_LogicalMinimum(&value));
	return value;
}

template <typename T> int impl_IHidNumericControlDescription<T>::LogicalMaximum() const
{
	int value = {};
	check(shim()->get_LogicalMaximum(&value));
	return value;
}

template <typename T> int impl_IHidNumericControlDescription<T>::PhysicalMinimum() const
{
	int value = {};
	check(shim()->get_PhysicalMinimum(&value));
	return value;
}

template <typename T> int impl_IHidNumericControlDescription<T>::PhysicalMaximum() const
{
	int value = {};
	check(shim()->get_PhysicalMaximum(&value));
	return value;
}

template <typename T> unsigned impl_IHidNumericControlDescription<T>::UnitExponent() const
{
	unsigned value = {};
	check(shim()->get_UnitExponent(&value));
	return value;
}

template <typename T> unsigned impl_IHidNumericControlDescription<T>::Unit() const
{
	unsigned value = {};
	check(shim()->get_Unit(&value));
	return value;
}

template <typename T> bool impl_IHidNumericControlDescription<T>::IsAbsolute() const
{
	bool value = {};
	check(shim()->get_IsAbsolute(put(value)));
	return value;
}

template <typename T> bool impl_IHidNumericControlDescription<T>::HasNull() const
{
	bool value = {};
	check(shim()->get_HasNull(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidCollection> impl_IHidNumericControlDescription<T>::ParentCollections() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidCollection> value;
	check(shim()->get_ParentCollections(put(value)));
	return value;
}

template <typename T> unsigned impl_IHidCollection<T>::Id() const
{
	unsigned value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidCollectionType impl_IHidCollection<T>::Type() const
{
	Windows::Devices::HumanInterfaceDevice::HidCollectionType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> unsigned impl_IHidCollection<T>::UsagePage() const
{
	unsigned value = {};
	check(shim()->get_UsagePage(&value));
	return value;
}

template <typename T> unsigned impl_IHidCollection<T>::UsageId() const
{
	unsigned value = {};
	check(shim()->get_UsageId(&value));
	return value;
}

template <typename T> unsigned short impl_IHidInputReport<T>::Id() const
{
	unsigned short value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHidInputReport<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControl> impl_IHidInputReport<T>::ActivatedBooleanControls() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControl> value;
	check(shim()->get_ActivatedBooleanControls(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControl> impl_IHidInputReport<T>::TransitionedBooleanControls() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControl> value;
	check(shim()->get_TransitionedBooleanControls(put(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidBooleanControl impl_IHidInputReport<T>::GetBooleanControl(unsigned short const usagePage, unsigned short const usageId) const
{
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl value = nullptr;
	check(shim()->abi_GetBooleanControl(usagePage, usageId, put(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidBooleanControl impl_IHidInputReport<T>::GetBooleanControlByDescription(Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription const & controlDescription) const
{
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl value = nullptr;
	check(shim()->abi_GetBooleanControlByDescription(get(controlDescription), put(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidNumericControl impl_IHidInputReport<T>::GetNumericControl(unsigned short const usagePage, unsigned short const usageId) const
{
	Windows::Devices::HumanInterfaceDevice::HidNumericControl value = nullptr;
	check(shim()->abi_GetNumericControl(usagePage, usageId, put(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidNumericControl impl_IHidInputReport<T>::GetNumericControlByDescription(Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription const & controlDescription) const
{
	Windows::Devices::HumanInterfaceDevice::HidNumericControl value = nullptr;
	check(shim()->abi_GetNumericControlByDescription(get(controlDescription), put(value)));
	return value;
}

template <typename T> unsigned short impl_IHidOutputReport<T>::Id() const
{
	unsigned short value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHidOutputReport<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> void impl_IHidOutputReport<T>::Data(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_Data(get(value)));
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidBooleanControl impl_IHidOutputReport<T>::GetBooleanControl(unsigned short const usagePage, unsigned short const usageId) const
{
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl value = nullptr;
	check(shim()->abi_GetBooleanControl(usagePage, usageId, put(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidBooleanControl impl_IHidOutputReport<T>::GetBooleanControlByDescription(Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription const & controlDescription) const
{
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl value = nullptr;
	check(shim()->abi_GetBooleanControlByDescription(get(controlDescription), put(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidNumericControl impl_IHidOutputReport<T>::GetNumericControl(unsigned short const usagePage, unsigned short const usageId) const
{
	Windows::Devices::HumanInterfaceDevice::HidNumericControl value = nullptr;
	check(shim()->abi_GetNumericControl(usagePage, usageId, put(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidNumericControl impl_IHidOutputReport<T>::GetNumericControlByDescription(Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription const & controlDescription) const
{
	Windows::Devices::HumanInterfaceDevice::HidNumericControl value = nullptr;
	check(shim()->abi_GetNumericControlByDescription(get(controlDescription), put(value)));
	return value;
}

template <typename T> unsigned short impl_IHidFeatureReport<T>::Id() const
{
	unsigned short value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHidFeatureReport<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> void impl_IHidFeatureReport<T>::Data(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_Data(get(value)));
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidBooleanControl impl_IHidFeatureReport<T>::GetBooleanControl(unsigned short const usagePage, unsigned short const usageId) const
{
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl value = nullptr;
	check(shim()->abi_GetBooleanControl(usagePage, usageId, put(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidBooleanControl impl_IHidFeatureReport<T>::GetBooleanControlByDescription(Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription const & controlDescription) const
{
	Windows::Devices::HumanInterfaceDevice::HidBooleanControl value = nullptr;
	check(shim()->abi_GetBooleanControlByDescription(get(controlDescription), put(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidNumericControl impl_IHidFeatureReport<T>::GetNumericControl(unsigned short const usagePage, unsigned short const usageId) const
{
	Windows::Devices::HumanInterfaceDevice::HidNumericControl value = nullptr;
	check(shim()->abi_GetNumericControl(usagePage, usageId, put(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidNumericControl impl_IHidFeatureReport<T>::GetNumericControlByDescription(Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription const & controlDescription) const
{
	Windows::Devices::HumanInterfaceDevice::HidNumericControl value = nullptr;
	check(shim()->abi_GetNumericControlByDescription(get(controlDescription), put(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidInputReport impl_IHidInputReportReceivedEventArgs<T>::Report() const
{
	Windows::Devices::HumanInterfaceDevice::HidInputReport value = nullptr;
	check(shim()->get_Report(put(value)));
	return value;
}

template <typename T> unsigned impl_IHidBooleanControl<T>::Id() const
{
	unsigned value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> unsigned short impl_IHidBooleanControl<T>::UsagePage() const
{
	unsigned short value = {};
	check(shim()->get_UsagePage(&value));
	return value;
}

template <typename T> unsigned short impl_IHidBooleanControl<T>::UsageId() const
{
	unsigned short value = {};
	check(shim()->get_UsageId(&value));
	return value;
}

template <typename T> bool impl_IHidBooleanControl<T>::IsActive() const
{
	bool value = {};
	check(shim()->get_IsActive(put(value)));
	return value;
}

template <typename T> void impl_IHidBooleanControl<T>::IsActive(bool const value) const
{
	check(shim()->put_IsActive(value));
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription impl_IHidBooleanControl<T>::ControlDescription() const
{
	Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription value = nullptr;
	check(shim()->get_ControlDescription(put(value)));
	return value;
}

template <typename T> unsigned impl_IHidNumericControl<T>::Id() const
{
	unsigned value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> bool impl_IHidNumericControl<T>::IsGrouped() const
{
	bool value = {};
	check(shim()->get_IsGrouped(put(value)));
	return value;
}

template <typename T> unsigned short impl_IHidNumericControl<T>::UsagePage() const
{
	unsigned short value = {};
	check(shim()->get_UsagePage(&value));
	return value;
}

template <typename T> unsigned short impl_IHidNumericControl<T>::UsageId() const
{
	unsigned short value = {};
	check(shim()->get_UsageId(&value));
	return value;
}

template <typename T> long long impl_IHidNumericControl<T>::Value() const
{
	long long value = {};
	check(shim()->get_Value(&value));
	return value;
}

template <typename T> void impl_IHidNumericControl<T>::Value(long long const value) const
{
	check(shim()->put_Value(value));
}

template <typename T> long long impl_IHidNumericControl<T>::ScaledValue() const
{
	long long value = {};
	check(shim()->get_ScaledValue(&value));
	return value;
}

template <typename T> void impl_IHidNumericControl<T>::ScaledValue(long long const value) const
{
	check(shim()->put_ScaledValue(value));
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription impl_IHidNumericControl<T>::ControlDescription() const
{
	Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription value = nullptr;
	check(shim()->get_ControlDescription(put(value)));
	return value;
}

template <typename T> unsigned short impl_IHidDevice<T>::VendorId() const
{
	unsigned short value = {};
	check(shim()->get_VendorId(&value));
	return value;
}

template <typename T> unsigned short impl_IHidDevice<T>::ProductId() const
{
	unsigned short value = {};
	check(shim()->get_ProductId(&value));
	return value;
}

template <typename T> unsigned short impl_IHidDevice<T>::Version() const
{
	unsigned short value = {};
	check(shim()->get_Version(&value));
	return value;
}

template <typename T> unsigned short impl_IHidDevice<T>::UsagePage() const
{
	unsigned short value = {};
	check(shim()->get_UsagePage(&value));
	return value;
}

template <typename T> unsigned short impl_IHidDevice<T>::UsageId() const
{
	unsigned short value = {};
	check(shim()->get_UsageId(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidInputReport> impl_IHidDevice<T>::GetInputReportAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidInputReport> value;
	check(shim()->abi_GetInputReportAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidInputReport> impl_IHidDevice<T>::GetInputReportAsync(unsigned short const reportId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidInputReport> value;
	check(shim()->abi_GetInputReportByIdAsync(reportId, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidFeatureReport> impl_IHidDevice<T>::GetFeatureReportAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidFeatureReport> value;
	check(shim()->abi_GetFeatureReportAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidFeatureReport> impl_IHidDevice<T>::GetFeatureReportAsync(unsigned short const reportId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidFeatureReport> value;
	check(shim()->abi_GetFeatureReportByIdAsync(reportId, put(value)));
	return value;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidOutputReport impl_IHidDevice<T>::CreateOutputReport() const
{
	Windows::Devices::HumanInterfaceDevice::HidOutputReport outputReport = nullptr;
	check(shim()->abi_CreateOutputReport(put(outputReport)));
	return outputReport;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidOutputReport impl_IHidDevice<T>::CreateOutputReport(unsigned short const reportId) const
{
	Windows::Devices::HumanInterfaceDevice::HidOutputReport outputReport = nullptr;
	check(shim()->abi_CreateOutputReportById(reportId, put(outputReport)));
	return outputReport;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidFeatureReport impl_IHidDevice<T>::CreateFeatureReport() const
{
	Windows::Devices::HumanInterfaceDevice::HidFeatureReport featureReport = nullptr;
	check(shim()->abi_CreateFeatureReport(put(featureReport)));
	return featureReport;
}

template <typename T> Windows::Devices::HumanInterfaceDevice::HidFeatureReport impl_IHidDevice<T>::CreateFeatureReport(unsigned short const reportId) const
{
	Windows::Devices::HumanInterfaceDevice::HidFeatureReport featureReport = nullptr;
	check(shim()->abi_CreateFeatureReportById(reportId, put(featureReport)));
	return featureReport;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IHidDevice<T>::SendOutputReportAsync(Windows::Devices::HumanInterfaceDevice::HidOutputReport const & outputReport) const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation;
	check(shim()->abi_SendOutputReportAsync(get(outputReport), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IHidDevice<T>::SendFeatureReportAsync(Windows::Devices::HumanInterfaceDevice::HidFeatureReport const & featureReport) const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation;
	check(shim()->abi_SendFeatureReportAsync(get(featureReport), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription> impl_IHidDevice<T>::GetBooleanControlDescriptions(Windows::Devices::HumanInterfaceDevice::HidReportType const reportType, unsigned short const usagePage, unsigned short const usageId) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidBooleanControlDescription> value;
	check(shim()->abi_GetBooleanControlDescriptions(reportType, usagePage, usageId, put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription> impl_IHidDevice<T>::GetNumericControlDescriptions(Windows::Devices::HumanInterfaceDevice::HidReportType const reportType, unsigned short const usagePage, unsigned short const usageId) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::HumanInterfaceDevice::HidNumericControlDescription> value;
	check(shim()->abi_GetNumericControlDescriptions(reportType, usagePage, usageId, put(value)));
	return value;
}

template <typename T> long long impl_IHidDevice<T>::InputReportReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::HumanInterfaceDevice::HidDevice, Windows::Devices::HumanInterfaceDevice::HidInputReportReceivedEventArgs> const & reportHandler) const
{
	long long token = {};
	check(shim()->add_InputReportReceived(get(reportHandler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IHidDevice<T>::InputReportReceived(F reportHandler) const
{
	return InputReportReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::HumanInterfaceDevice::HidDevice, Windows::Devices::HumanInterfaceDevice::HidInputReportReceivedEventArgs>(reportHandler));
}

template <typename T> void impl_IHidDevice<T>::InputReportReceived(long long const token) const
{
	check(shim()->remove_InputReportReceived(token));
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Input {

template <typename T> int impl_IMouseCapabilities<T>::MousePresent() const
{
	int value = {};
	check(shim()->get_MousePresent(&value));
	return value;
}

template <typename T> int impl_IMouseCapabilities<T>::VerticalWheelPresent() const
{
	int value = {};
	check(shim()->get_VerticalWheelPresent(&value));
	return value;
}

template <typename T> int impl_IMouseCapabilities<T>::HorizontalWheelPresent() const
{
	int value = {};
	check(shim()->get_HorizontalWheelPresent(&value));
	return value;
}

template <typename T> int impl_IMouseCapabilities<T>::SwapButtons() const
{
	int value = {};
	check(shim()->get_SwapButtons(&value));
	return value;
}

template <typename T> unsigned impl_IMouseCapabilities<T>::NumberOfButtons() const
{
	unsigned value = {};
	check(shim()->get_NumberOfButtons(&value));
	return value;
}

template <typename T> int impl_IKeyboardCapabilities<T>::KeyboardPresent() const
{
	int value = {};
	check(shim()->get_KeyboardPresent(&value));
	return value;
}

template <typename T> int impl_ITouchCapabilities<T>::TouchPresent() const
{
	int value = {};
	check(shim()->get_TouchPresent(&value));
	return value;
}

template <typename T> unsigned impl_ITouchCapabilities<T>::Contacts() const
{
	unsigned value = {};
	check(shim()->get_Contacts(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDevice impl_IPointerDeviceStatics<T>::GetPointerDevice(unsigned const pointerId) const
{
	Windows::Devices::Input::PointerDevice pointerDevice = nullptr;
	check(shim()->abi_GetPointerDevice(pointerId, put(pointerDevice)));
	return pointerDevice;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Input::PointerDevice> impl_IPointerDeviceStatics<T>::GetPointerDevices() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Input::PointerDevice> pointerDevices;
	check(shim()->abi_GetPointerDevices(put(pointerDevices)));
	return pointerDevices;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IPointerDevice<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> bool impl_IPointerDevice<T>::IsIntegrated() const
{
	bool value = {};
	check(shim()->get_IsIntegrated(put(value)));
	return value;
}

template <typename T> unsigned impl_IPointerDevice<T>::MaxContacts() const
{
	unsigned value = {};
	check(shim()->get_MaxContacts(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPointerDevice<T>::PhysicalDeviceRect() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_PhysicalDeviceRect(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPointerDevice<T>::ScreenRect() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_ScreenRect(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Input::PointerDeviceUsage> impl_IPointerDevice<T>::SupportedUsages() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Input::PointerDeviceUsage> value;
	check(shim()->get_SupportedUsages(put(value)));
	return value;
}

template <typename T> Windows::Devices::Input::MouseDelta impl_IMouseEventArgs<T>::MouseDelta() const
{
	Windows::Devices::Input::MouseDelta value = {};
	check(shim()->get_MouseDelta(&value));
	return value;
}

template <typename T> long long impl_IMouseDevice<T>::MouseMoved(Windows::Foundation::ITypedEventHandler<Windows::Devices::Input::MouseDevice, Windows::Devices::Input::MouseEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_MouseMoved(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMouseDevice<T>::MouseMoved(F handler) const
{
	return MouseMoved(Windows::Foundation::TypedEventHandler<Windows::Devices::Input::MouseDevice, Windows::Devices::Input::MouseEventArgs>(handler));
}

template <typename T> void impl_IMouseDevice<T>::MouseMoved(long long const cookie) const
{
	check(shim()->remove_MouseMoved(cookie));
}

template <typename T> Windows::Devices::Input::MouseDevice impl_IMouseDeviceStatics<T>::GetForCurrentView() const
{
	Windows::Devices::Input::MouseDevice mouseDevice = nullptr;
	check(shim()->abi_GetForCurrentView(put(mouseDevice)));
	return mouseDevice;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Lights {

template <typename T> String impl_ILampStatics<T>::GetDeviceSelector() const
{
	String value;
	check(shim()->abi_GetDeviceSelector(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Lights::Lamp> impl_ILampStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Lights::Lamp> operation;
	check(shim()->abi_FromIdAsync(get(deviceId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Lights::Lamp> impl_ILampStatics<T>::GetDefaultAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Lights::Lamp> operation;
	check(shim()->abi_GetDefaultAsync(put(operation)));
	return operation;
}

template <typename T> bool impl_ILampAvailabilityChangedEventArgs<T>::IsAvailable() const
{
	bool value = {};
	check(shim()->get_IsAvailable(put(value)));
	return value;
}

template <typename T> String impl_ILamp<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> bool impl_ILamp<T>::IsEnabled() const
{
	bool value = {};
	check(shim()->get_IsEnabled(put(value)));
	return value;
}

template <typename T> void impl_ILamp<T>::IsEnabled(bool const value) const
{
	check(shim()->put_IsEnabled(value));
}

template <typename T> float impl_ILamp<T>::BrightnessLevel() const
{
	float value = {};
	check(shim()->get_BrightnessLevel(&value));
	return value;
}

template <typename T> void impl_ILamp<T>::BrightnessLevel(float const value) const
{
	check(shim()->put_BrightnessLevel(value));
}

template <typename T> bool impl_ILamp<T>::IsColorSettable() const
{
	bool value = {};
	check(shim()->get_IsColorSettable(put(value)));
	return value;
}

template <typename T> Windows::UI::Color impl_ILamp<T>::Color() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Color(&value));
	return value;
}

template <typename T> void impl_ILamp<T>::Color(Windows::UI::Color const & value) const
{
	check(shim()->put_Color(value));
}

template <typename T> long long impl_ILamp<T>::AvailabilityChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Lights::Lamp, Windows::Devices::Lights::LampAvailabilityChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_AvailabilityChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ILamp<T>::AvailabilityChanged(F handler) const
{
	return AvailabilityChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Lights::Lamp, Windows::Devices::Lights::LampAvailabilityChangedEventArgs>(handler));
}

template <typename T> void impl_ILamp<T>::AvailabilityChanged(long long const token) const
{
	check(shim()->remove_AvailabilityChanged(token));
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Midi {

template <typename T> Windows::Foundation::TimeSpan impl_IMidiMessage<T>::Timestamp() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IMidiMessage<T>::RawData() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_RawData(put(value)));
	return value;
}

template <typename T> Windows::Devices::Midi::MidiMessageType impl_IMidiMessage<T>::Type() const
{
	Windows::Devices::Midi::MidiMessageType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> byte impl_IMidiNoteOffMessage<T>::Channel() const
{
	byte value = {};
	check(shim()->get_Channel(&value));
	return value;
}

template <typename T> byte impl_IMidiNoteOffMessage<T>::Note() const
{
	byte value = {};
	check(shim()->get_Note(&value));
	return value;
}

template <typename T> byte impl_IMidiNoteOffMessage<T>::Velocity() const
{
	byte value = {};
	check(shim()->get_Velocity(&value));
	return value;
}

template <typename T> byte impl_IMidiNoteOnMessage<T>::Channel() const
{
	byte value = {};
	check(shim()->get_Channel(&value));
	return value;
}

template <typename T> byte impl_IMidiNoteOnMessage<T>::Note() const
{
	byte value = {};
	check(shim()->get_Note(&value));
	return value;
}

template <typename T> byte impl_IMidiNoteOnMessage<T>::Velocity() const
{
	byte value = {};
	check(shim()->get_Velocity(&value));
	return value;
}

template <typename T> byte impl_IMidiPolyphonicKeyPressureMessage<T>::Channel() const
{
	byte value = {};
	check(shim()->get_Channel(&value));
	return value;
}

template <typename T> byte impl_IMidiPolyphonicKeyPressureMessage<T>::Note() const
{
	byte value = {};
	check(shim()->get_Note(&value));
	return value;
}

template <typename T> byte impl_IMidiPolyphonicKeyPressureMessage<T>::Pressure() const
{
	byte value = {};
	check(shim()->get_Pressure(&value));
	return value;
}

template <typename T> byte impl_IMidiControlChangeMessage<T>::Channel() const
{
	byte value = {};
	check(shim()->get_Channel(&value));
	return value;
}

template <typename T> byte impl_IMidiControlChangeMessage<T>::Controller() const
{
	byte value = {};
	check(shim()->get_Controller(&value));
	return value;
}

template <typename T> byte impl_IMidiControlChangeMessage<T>::ControlValue() const
{
	byte value = {};
	check(shim()->get_ControlValue(&value));
	return value;
}

template <typename T> byte impl_IMidiProgramChangeMessage<T>::Channel() const
{
	byte value = {};
	check(shim()->get_Channel(&value));
	return value;
}

template <typename T> byte impl_IMidiProgramChangeMessage<T>::Program() const
{
	byte value = {};
	check(shim()->get_Program(&value));
	return value;
}

template <typename T> byte impl_IMidiChannelPressureMessage<T>::Channel() const
{
	byte value = {};
	check(shim()->get_Channel(&value));
	return value;
}

template <typename T> byte impl_IMidiChannelPressureMessage<T>::Pressure() const
{
	byte value = {};
	check(shim()->get_Pressure(&value));
	return value;
}

template <typename T> byte impl_IMidiPitchBendChangeMessage<T>::Channel() const
{
	byte value = {};
	check(shim()->get_Channel(&value));
	return value;
}

template <typename T> unsigned short impl_IMidiPitchBendChangeMessage<T>::Bend() const
{
	unsigned short value = {};
	check(shim()->get_Bend(&value));
	return value;
}

template <typename T> byte impl_IMidiTimeCodeMessage<T>::FrameType() const
{
	byte value = {};
	check(shim()->get_FrameType(&value));
	return value;
}

template <typename T> byte impl_IMidiTimeCodeMessage<T>::Values() const
{
	byte value = {};
	check(shim()->get_Values(&value));
	return value;
}

template <typename T> unsigned short impl_IMidiSongPositionPointerMessage<T>::Beats() const
{
	unsigned short value = {};
	check(shim()->get_Beats(&value));
	return value;
}

template <typename T> byte impl_IMidiSongSelectMessage<T>::Song() const
{
	byte value = {};
	check(shim()->get_Song(&value));
	return value;
}

template <typename T> Windows::Devices::Midi::MidiNoteOffMessage impl_IMidiNoteOffMessageFactory<T>::CreateMidiNoteOffMessage(byte const channel, byte const note, byte const velocity) const
{
	Windows::Devices::Midi::MidiNoteOffMessage value = nullptr;
	check(shim()->abi_CreateMidiNoteOffMessage(channel, note, velocity, put(value)));
	return value;
}

template <typename T> Windows::Devices::Midi::MidiNoteOnMessage impl_IMidiNoteOnMessageFactory<T>::CreateMidiNoteOnMessage(byte const channel, byte const note, byte const velocity) const
{
	Windows::Devices::Midi::MidiNoteOnMessage value = nullptr;
	check(shim()->abi_CreateMidiNoteOnMessage(channel, note, velocity, put(value)));
	return value;
}

template <typename T> Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage impl_IMidiPolyphonicKeyPressureMessageFactory<T>::CreateMidiPolyphonicKeyPressureMessage(byte const channel, byte const note, byte const pressure) const
{
	Windows::Devices::Midi::MidiPolyphonicKeyPressureMessage value = nullptr;
	check(shim()->abi_CreateMidiPolyphonicKeyPressureMessage(channel, note, pressure, put(value)));
	return value;
}

template <typename T> Windows::Devices::Midi::MidiControlChangeMessage impl_IMidiControlChangeMessageFactory<T>::CreateMidiControlChangeMessage(byte const channel, byte const controller, byte const controlValue) const
{
	Windows::Devices::Midi::MidiControlChangeMessage value = nullptr;
	check(shim()->abi_CreateMidiControlChangeMessage(channel, controller, controlValue, put(value)));
	return value;
}

template <typename T> Windows::Devices::Midi::MidiProgramChangeMessage impl_IMidiProgramChangeMessageFactory<T>::CreateMidiProgramChangeMessage(byte const channel, byte const program) const
{
	Windows::Devices::Midi::MidiProgramChangeMessage value = nullptr;
	check(shim()->abi_CreateMidiProgramChangeMessage(channel, program, put(value)));
	return value;
}

template <typename T> Windows::Devices::Midi::MidiChannelPressureMessage impl_IMidiChannelPressureMessageFactory<T>::CreateMidiChannelPressureMessage(byte const channel, byte const pressure) const
{
	Windows::Devices::Midi::MidiChannelPressureMessage value = nullptr;
	check(shim()->abi_CreateMidiChannelPressureMessage(channel, pressure, put(value)));
	return value;
}

template <typename T> Windows::Devices::Midi::MidiPitchBendChangeMessage impl_IMidiPitchBendChangeMessageFactory<T>::CreateMidiPitchBendChangeMessage(byte const channel, unsigned short const bend) const
{
	Windows::Devices::Midi::MidiPitchBendChangeMessage value = nullptr;
	check(shim()->abi_CreateMidiPitchBendChangeMessage(channel, bend, put(value)));
	return value;
}

template <typename T> Windows::Devices::Midi::MidiSystemExclusiveMessage impl_IMidiSystemExclusiveMessageFactory<T>::CreateMidiSystemExclusiveMessage(Windows::Storage::Streams::IBuffer const & rawData) const
{
	Windows::Devices::Midi::MidiSystemExclusiveMessage value = nullptr;
	check(shim()->abi_CreateMidiSystemExclusiveMessage(get(rawData), put(value)));
	return value;
}

template <typename T> Windows::Devices::Midi::MidiTimeCodeMessage impl_IMidiTimeCodeMessageFactory<T>::CreateMidiTimeCodeMessage(byte const frameType, byte const values) const
{
	Windows::Devices::Midi::MidiTimeCodeMessage value = nullptr;
	check(shim()->abi_CreateMidiTimeCodeMessage(frameType, values, put(value)));
	return value;
}

template <typename T> Windows::Devices::Midi::MidiSongPositionPointerMessage impl_IMidiSongPositionPointerMessageFactory<T>::CreateMidiSongPositionPointerMessage(unsigned short const beats) const
{
	Windows::Devices::Midi::MidiSongPositionPointerMessage value = nullptr;
	check(shim()->abi_CreateMidiSongPositionPointerMessage(beats, put(value)));
	return value;
}

template <typename T> Windows::Devices::Midi::MidiSongSelectMessage impl_IMidiSongSelectMessageFactory<T>::CreateMidiSongSelectMessage(byte const song) const
{
	Windows::Devices::Midi::MidiSongSelectMessage value = nullptr;
	check(shim()->abi_CreateMidiSongSelectMessage(song, put(value)));
	return value;
}

template <typename T> Windows::Devices::Midi::IMidiMessage impl_IMidiMessageReceivedEventArgs<T>::Message() const
{
	Windows::Devices::Midi::IMidiMessage value;
	check(shim()->get_Message(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Midi::MidiInPort> impl_IMidiInPortStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Midi::MidiInPort> value;
	check(shim()->abi_FromIdAsync(get(deviceId), put(value)));
	return value;
}

template <typename T> String impl_IMidiInPortStatics<T>::GetDeviceSelector() const
{
	String value;
	check(shim()->abi_GetDeviceSelector(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Midi::IMidiOutPort> impl_IMidiOutPortStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Midi::IMidiOutPort> value;
	check(shim()->abi_FromIdAsync(get(deviceId), put(value)));
	return value;
}

template <typename T> String impl_IMidiOutPortStatics<T>::GetDeviceSelector() const
{
	String value;
	check(shim()->abi_GetDeviceSelector(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Midi::MidiSynthesizer> impl_IMidiSynthesizerStatics<T>::CreateAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Midi::MidiSynthesizer> value;
	check(shim()->abi_CreateAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Midi::MidiSynthesizer> impl_IMidiSynthesizerStatics<T>::CreateAsync(Windows::Devices::Enumeration::DeviceInformation const & audioDevice) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Midi::MidiSynthesizer> value;
	check(shim()->abi_CreateFromAudioDeviceAsync(get(audioDevice), put(value)));
	return value;
}

template <typename T> bool impl_IMidiSynthesizerStatics<T>::IsSynthesizer(Windows::Devices::Enumeration::DeviceInformation const & midiDevice) const
{
	bool value = {};
	check(shim()->abi_IsSynthesizer(get(midiDevice), put(value)));
	return value;
}

template <typename T> void impl_IMidiOutPort<T>::SendMessage(Windows::Devices::Midi::IMidiMessage const & midiMessage) const
{
	check(shim()->abi_SendMessage(get(midiMessage)));
}

template <typename T> void impl_IMidiOutPort<T>::SendBuffer(Windows::Storage::Streams::IBuffer const & midiData) const
{
	check(shim()->abi_SendBuffer(get(midiData)));
}

template <typename T> String impl_IMidiOutPort<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> long long impl_IMidiInPort<T>::MessageReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::Midi::MidiInPort, Windows::Devices::Midi::MidiMessageReceivedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_MessageReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMidiInPort<T>::MessageReceived(F handler) const
{
	return MessageReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::Midi::MidiInPort, Windows::Devices::Midi::MidiMessageReceivedEventArgs>(handler));
}

template <typename T> void impl_IMidiInPort<T>::MessageReceived(long long const token) const
{
	check(shim()->remove_MessageReceived(token));
}

template <typename T> String impl_IMidiInPort<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IMidiSynthesizer<T>::AudioDevice() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check(shim()->get_AudioDevice(put(value)));
	return value;
}

template <typename T> double impl_IMidiSynthesizer<T>::Volume() const
{
	double value = {};
	check(shim()->get_Volume(&value));
	return value;
}

template <typename T> void impl_IMidiSynthesizer<T>::Volume(double const value) const
{
	check(shim()->put_Volume(value));
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Perception {

template <typename T> long long impl_IPerceptionColorFrameSourceWatcher<T>::SourceAdded(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSourceWatcher, Windows::Devices::Perception::PerceptionColorFrameSourceAddedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SourceAdded(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionColorFrameSourceWatcher<T>::SourceAdded(F handler) const
{
	return SourceAdded(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSourceWatcher, Windows::Devices::Perception::PerceptionColorFrameSourceAddedEventArgs>(handler));
}

template <typename T> void impl_IPerceptionColorFrameSourceWatcher<T>::SourceAdded(long long const token) const
{
	check(shim()->remove_SourceAdded(token));
}

template <typename T> long long impl_IPerceptionColorFrameSourceWatcher<T>::SourceRemoved(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSourceWatcher, Windows::Devices::Perception::PerceptionColorFrameSourceRemovedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SourceRemoved(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionColorFrameSourceWatcher<T>::SourceRemoved(F handler) const
{
	return SourceRemoved(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSourceWatcher, Windows::Devices::Perception::PerceptionColorFrameSourceRemovedEventArgs>(handler));
}

template <typename T> void impl_IPerceptionColorFrameSourceWatcher<T>::SourceRemoved(long long const token) const
{
	check(shim()->remove_SourceRemoved(token));
}

template <typename T> long long impl_IPerceptionColorFrameSourceWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSourceWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionColorFrameSourceWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSourceWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionColorFrameSourceWatcher<T>::Stopped(long long const token) const
{
	check(shim()->remove_Stopped(token));
}

template <typename T> long long impl_IPerceptionColorFrameSourceWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSourceWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_EnumerationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionColorFrameSourceWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSourceWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionColorFrameSourceWatcher<T>::EnumerationCompleted(long long const token) const
{
	check(shim()->remove_EnumerationCompleted(token));
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcherStatus impl_IPerceptionColorFrameSourceWatcher<T>::Status() const
{
	Windows::Devices::Enumeration::DeviceWatcherStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> void impl_IPerceptionColorFrameSourceWatcher<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IPerceptionColorFrameSourceWatcher<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> long long impl_IPerceptionDepthFrameSourceWatcher<T>::SourceAdded(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher, Windows::Devices::Perception::PerceptionDepthFrameSourceAddedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SourceAdded(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionDepthFrameSourceWatcher<T>::SourceAdded(F handler) const
{
	return SourceAdded(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher, Windows::Devices::Perception::PerceptionDepthFrameSourceAddedEventArgs>(handler));
}

template <typename T> void impl_IPerceptionDepthFrameSourceWatcher<T>::SourceAdded(long long const token) const
{
	check(shim()->remove_SourceAdded(token));
}

template <typename T> long long impl_IPerceptionDepthFrameSourceWatcher<T>::SourceRemoved(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher, Windows::Devices::Perception::PerceptionDepthFrameSourceRemovedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SourceRemoved(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionDepthFrameSourceWatcher<T>::SourceRemoved(F handler) const
{
	return SourceRemoved(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher, Windows::Devices::Perception::PerceptionDepthFrameSourceRemovedEventArgs>(handler));
}

template <typename T> void impl_IPerceptionDepthFrameSourceWatcher<T>::SourceRemoved(long long const token) const
{
	check(shim()->remove_SourceRemoved(token));
}

template <typename T> long long impl_IPerceptionDepthFrameSourceWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionDepthFrameSourceWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionDepthFrameSourceWatcher<T>::Stopped(long long const token) const
{
	check(shim()->remove_Stopped(token));
}

template <typename T> long long impl_IPerceptionDepthFrameSourceWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_EnumerationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionDepthFrameSourceWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionDepthFrameSourceWatcher<T>::EnumerationCompleted(long long const token) const
{
	check(shim()->remove_EnumerationCompleted(token));
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcherStatus impl_IPerceptionDepthFrameSourceWatcher<T>::Status() const
{
	Windows::Devices::Enumeration::DeviceWatcherStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> void impl_IPerceptionDepthFrameSourceWatcher<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IPerceptionDepthFrameSourceWatcher<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> long long impl_IPerceptionInfraredFrameSourceWatcher<T>::SourceAdded(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher, Windows::Devices::Perception::PerceptionInfraredFrameSourceAddedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SourceAdded(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionInfraredFrameSourceWatcher<T>::SourceAdded(F handler) const
{
	return SourceAdded(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher, Windows::Devices::Perception::PerceptionInfraredFrameSourceAddedEventArgs>(handler));
}

template <typename T> void impl_IPerceptionInfraredFrameSourceWatcher<T>::SourceAdded(long long const token) const
{
	check(shim()->remove_SourceAdded(token));
}

template <typename T> long long impl_IPerceptionInfraredFrameSourceWatcher<T>::SourceRemoved(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher, Windows::Devices::Perception::PerceptionInfraredFrameSourceRemovedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SourceRemoved(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionInfraredFrameSourceWatcher<T>::SourceRemoved(F handler) const
{
	return SourceRemoved(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher, Windows::Devices::Perception::PerceptionInfraredFrameSourceRemovedEventArgs>(handler));
}

template <typename T> void impl_IPerceptionInfraredFrameSourceWatcher<T>::SourceRemoved(long long const token) const
{
	check(shim()->remove_SourceRemoved(token));
}

template <typename T> long long impl_IPerceptionInfraredFrameSourceWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionInfraredFrameSourceWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionInfraredFrameSourceWatcher<T>::Stopped(long long const token) const
{
	check(shim()->remove_Stopped(token));
}

template <typename T> long long impl_IPerceptionInfraredFrameSourceWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_EnumerationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionInfraredFrameSourceWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionInfraredFrameSourceWatcher<T>::EnumerationCompleted(long long const token) const
{
	check(shim()->remove_EnumerationCompleted(token));
}

template <typename T> Windows::Devices::Enumeration::DeviceWatcherStatus impl_IPerceptionInfraredFrameSourceWatcher<T>::Status() const
{
	Windows::Devices::Enumeration::DeviceWatcherStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> void impl_IPerceptionInfraredFrameSourceWatcher<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IPerceptionInfraredFrameSourceWatcher<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> Windows::Devices::Perception::PerceptionColorFrameSource impl_IPerceptionColorFrameSourceAddedEventArgs<T>::FrameSource() const
{
	Windows::Devices::Perception::PerceptionColorFrameSource value = nullptr;
	check(shim()->get_FrameSource(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionColorFrameSource impl_IPerceptionColorFrameSourceRemovedEventArgs<T>::FrameSource() const
{
	Windows::Devices::Perception::PerceptionColorFrameSource value = nullptr;
	check(shim()->get_FrameSource(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionDepthFrameSource impl_IPerceptionDepthFrameSourceAddedEventArgs<T>::FrameSource() const
{
	Windows::Devices::Perception::PerceptionDepthFrameSource value = nullptr;
	check(shim()->get_FrameSource(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionDepthFrameSource impl_IPerceptionDepthFrameSourceRemovedEventArgs<T>::FrameSource() const
{
	Windows::Devices::Perception::PerceptionDepthFrameSource value = nullptr;
	check(shim()->get_FrameSource(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionInfraredFrameSource impl_IPerceptionInfraredFrameSourceAddedEventArgs<T>::FrameSource() const
{
	Windows::Devices::Perception::PerceptionInfraredFrameSource value = nullptr;
	check(shim()->get_FrameSource(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionInfraredFrameSource impl_IPerceptionInfraredFrameSourceRemovedEventArgs<T>::FrameSource() const
{
	Windows::Devices::Perception::PerceptionInfraredFrameSource value = nullptr;
	check(shim()->get_FrameSource(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionFrameSourcePropertiesStatics<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionFrameSourcePropertiesStatics<T>::PhysicalDeviceIds() const
{
	String value;
	check(shim()->get_PhysicalDeviceIds(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionFrameSourcePropertiesStatics<T>::FrameKind() const
{
	String value;
	check(shim()->get_FrameKind(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionFrameSourcePropertiesStatics<T>::DeviceModelVersion() const
{
	String value;
	check(shim()->get_DeviceModelVersion(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionFrameSourcePropertiesStatics<T>::EnclosureLocation() const
{
	String value;
	check(shim()->get_EnclosureLocation(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionFrameSourcePropertiesStatics2<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionVideoFrameSourcePropertiesStatics<T>::VideoProfile() const
{
	String value;
	check(shim()->get_VideoProfile(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionVideoFrameSourcePropertiesStatics<T>::SupportedVideoProfiles() const
{
	String value;
	check(shim()->get_SupportedVideoProfiles(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionVideoFrameSourcePropertiesStatics<T>::AvailableVideoProfiles() const
{
	String value;
	check(shim()->get_AvailableVideoProfiles(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionVideoFrameSourcePropertiesStatics<T>::IsMirrored() const
{
	String value;
	check(shim()->get_IsMirrored(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionVideoFrameSourcePropertiesStatics<T>::CameraIntrinsics() const
{
	String value;
	check(shim()->get_CameraIntrinsics(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionInfraredFrameSourcePropertiesStatics<T>::Exposure() const
{
	String value;
	check(shim()->get_Exposure(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionInfraredFrameSourcePropertiesStatics<T>::AutoExposureEnabled() const
{
	String value;
	check(shim()->get_AutoExposureEnabled(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionInfraredFrameSourcePropertiesStatics<T>::ExposureCompensation() const
{
	String value;
	check(shim()->get_ExposureCompensation(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionInfraredFrameSourcePropertiesStatics<T>::ActiveIlluminationEnabled() const
{
	String value;
	check(shim()->get_ActiveIlluminationEnabled(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionInfraredFrameSourcePropertiesStatics<T>::AmbientSubtractionEnabled() const
{
	String value;
	check(shim()->get_AmbientSubtractionEnabled(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionInfraredFrameSourcePropertiesStatics<T>::StructureLightPatternEnabled() const
{
	String value;
	check(shim()->get_StructureLightPatternEnabled(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionInfraredFrameSourcePropertiesStatics<T>::InterleavedIlluminationEnabled() const
{
	String value;
	check(shim()->get_InterleavedIlluminationEnabled(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionDepthFrameSourcePropertiesStatics<T>::MinDepth() const
{
	String value;
	check(shim()->get_MinDepth(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionDepthFrameSourcePropertiesStatics<T>::MaxDepth() const
{
	String value;
	check(shim()->get_MaxDepth(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionColorFrameSourcePropertiesStatics<T>::Exposure() const
{
	String value;
	check(shim()->get_Exposure(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionColorFrameSourcePropertiesStatics<T>::AutoExposureEnabled() const
{
	String value;
	check(shim()->get_AutoExposureEnabled(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionColorFrameSourcePropertiesStatics<T>::ExposureCompensation() const
{
	String value;
	check(shim()->get_ExposureCompensation(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionVideoProfilePropertiesStatics<T>::BitmapPixelFormat() const
{
	String value;
	check(shim()->get_BitmapPixelFormat(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionVideoProfilePropertiesStatics<T>::BitmapAlphaMode() const
{
	String value;
	check(shim()->get_BitmapAlphaMode(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionVideoProfilePropertiesStatics<T>::Width() const
{
	String value;
	check(shim()->get_Width(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionVideoProfilePropertiesStatics<T>::Height() const
{
	String value;
	check(shim()->get_Height(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionVideoProfilePropertiesStatics<T>::FrameDuration() const
{
	String value;
	check(shim()->get_FrameDuration(put(value)));
	return value;
}

template <typename T> String impl_IKnownCameraIntrinsicsPropertiesStatics<T>::FocalLength() const
{
	String value;
	check(shim()->get_FocalLength(put(value)));
	return value;
}

template <typename T> String impl_IKnownCameraIntrinsicsPropertiesStatics<T>::PrincipalPoint() const
{
	String value;
	check(shim()->get_PrincipalPoint(put(value)));
	return value;
}

template <typename T> String impl_IKnownCameraIntrinsicsPropertiesStatics<T>::RadialDistortion() const
{
	String value;
	check(shim()->get_RadialDistortion(put(value)));
	return value;
}

template <typename T> String impl_IKnownCameraIntrinsicsPropertiesStatics<T>::TangentialDistortion() const
{
	String value;
	check(shim()->get_TangentialDistortion(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeStatus impl_IPerceptionFrameSourcePropertyChangeResult<T>::Status() const
{
	Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> IInspectable impl_IPerceptionFrameSourcePropertyChangeResult<T>::NewValue() const
{
	IInspectable value;
	check(shim()->get_NewValue(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::CollectionChange impl_IPerceptionFrameSourcePropertiesChangedEventArgs<T>::CollectionChange() const
{
	Windows::Foundation::Collections::CollectionChange value = {};
	check(shim()->get_CollectionChange(&value));
	return value;
}

template <typename T> String impl_IPerceptionFrameSourcePropertiesChangedEventArgs<T>::Key() const
{
	String value;
	check(shim()->get_Key(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher impl_IPerceptionInfraredFrameSourceStatics<T>::CreateWatcher() const
{
	Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher watcher = nullptr;
	check(shim()->abi_CreateWatcher(put(watcher)));
	return watcher;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionInfraredFrameSource>> impl_IPerceptionInfraredFrameSourceStatics<T>::FindAllAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionInfraredFrameSource>> result;
	check(shim()->abi_FindAllAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionInfraredFrameSource> impl_IPerceptionInfraredFrameSourceStatics<T>::FromIdAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionInfraredFrameSource> result;
	check(shim()->abi_FromIdAsync(get(id), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Perception::PerceptionFrameSourceAccessStatus> impl_IPerceptionInfraredFrameSourceStatics<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Perception::PerceptionFrameSourceAccessStatus> result;
	check(shim()->abi_RequestAccessAsync(put(result)));
	return result;
}

template <typename T> Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher impl_IPerceptionDepthFrameSourceStatics<T>::CreateWatcher() const
{
	Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher watcher = nullptr;
	check(shim()->abi_CreateWatcher(put(watcher)));
	return watcher;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionDepthFrameSource>> impl_IPerceptionDepthFrameSourceStatics<T>::FindAllAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionDepthFrameSource>> result;
	check(shim()->abi_FindAllAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionDepthFrameSource> impl_IPerceptionDepthFrameSourceStatics<T>::FromIdAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionDepthFrameSource> result;
	check(shim()->abi_FromIdAsync(get(id), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Perception::PerceptionFrameSourceAccessStatus> impl_IPerceptionDepthFrameSourceStatics<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Perception::PerceptionFrameSourceAccessStatus> result;
	check(shim()->abi_RequestAccessAsync(put(result)));
	return result;
}

template <typename T> Windows::Devices::Perception::PerceptionColorFrameSourceWatcher impl_IPerceptionColorFrameSourceStatics<T>::CreateWatcher() const
{
	Windows::Devices::Perception::PerceptionColorFrameSourceWatcher watcher = nullptr;
	check(shim()->abi_CreateWatcher(put(watcher)));
	return watcher;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionColorFrameSource>> impl_IPerceptionColorFrameSourceStatics<T>::FindAllAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionColorFrameSource>> result;
	check(shim()->abi_FindAllAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionColorFrameSource> impl_IPerceptionColorFrameSourceStatics<T>::FromIdAsync(StringReference const & id) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionColorFrameSource> result;
	check(shim()->abi_FromIdAsync(get(id), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Perception::PerceptionFrameSourceAccessStatus> impl_IPerceptionColorFrameSourceStatics<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Perception::PerceptionFrameSourceAccessStatus> result;
	check(shim()->abi_RequestAccessAsync(put(result)));
	return result;
}

template <typename T> long long impl_IPerceptionColorFrameSource<T>::AvailableChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSource, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_AvailableChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionColorFrameSource<T>::AvailableChanged(F handler) const
{
	return AvailableChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSource, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionColorFrameSource<T>::AvailableChanged(long long const token) const
{
	check(shim()->remove_AvailableChanged(token));
}

template <typename T> long long impl_IPerceptionColorFrameSource<T>::ActiveChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSource, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_ActiveChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionColorFrameSource<T>::ActiveChanged(F handler) const
{
	return ActiveChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSource, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionColorFrameSource<T>::ActiveChanged(long long const token) const
{
	check(shim()->remove_ActiveChanged(token));
}

template <typename T> long long impl_IPerceptionColorFrameSource<T>::PropertiesChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSource, Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_PropertiesChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionColorFrameSource<T>::PropertiesChanged(F handler) const
{
	return PropertiesChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSource, Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs>(handler));
}

template <typename T> void impl_IPerceptionColorFrameSource<T>::PropertiesChanged(long long const token) const
{
	check(shim()->remove_PropertiesChanged(token));
}

template <typename T> long long impl_IPerceptionColorFrameSource<T>::VideoProfileChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSource, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_VideoProfileChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionColorFrameSource<T>::VideoProfileChanged(F handler) const
{
	return VideoProfileChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSource, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionColorFrameSource<T>::VideoProfileChanged(long long const token) const
{
	check(shim()->remove_VideoProfileChanged(token));
}

template <typename T> long long impl_IPerceptionColorFrameSource<T>::CameraIntrinsicsChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSource, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_CameraIntrinsicsChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionColorFrameSource<T>::CameraIntrinsicsChanged(F handler) const
{
	return CameraIntrinsicsChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameSource, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionColorFrameSource<T>::CameraIntrinsicsChanged(long long const token) const
{
	check(shim()->remove_CameraIntrinsicsChanged(token));
}

template <typename T> String impl_IPerceptionColorFrameSource<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IPerceptionColorFrameSource<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IPerceptionColorFrameSource<T>::DeviceKind() const
{
	String value;
	check(shim()->get_DeviceKind(put(value)));
	return value;
}

template <typename T> bool impl_IPerceptionColorFrameSource<T>::Available() const
{
	bool value = {};
	check(shim()->get_Available(put(value)));
	return value;
}

template <typename T> bool impl_IPerceptionColorFrameSource<T>::Active() const
{
	bool value = {};
	check(shim()->get_Active(put(value)));
	return value;
}

template <typename T> bool impl_IPerceptionColorFrameSource<T>::IsControlled() const
{
	bool value = {};
	check(shim()->get_IsControlled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IPerceptionColorFrameSource<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionVideoProfile> impl_IPerceptionColorFrameSource<T>::SupportedVideoProfiles() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionVideoProfile> value;
	check(shim()->get_SupportedVideoProfiles(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionVideoProfile> impl_IPerceptionColorFrameSource<T>::AvailableVideoProfiles() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionVideoProfile> value;
	check(shim()->get_AvailableVideoProfiles(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionVideoProfile impl_IPerceptionColorFrameSource<T>::VideoProfile() const
{
	Windows::Devices::Perception::PerceptionVideoProfile value = nullptr;
	check(shim()->get_VideoProfile(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::Core::CameraIntrinsics impl_IPerceptionColorFrameSource<T>::CameraIntrinsics() const
{
	Windows::Media::Devices::Core::CameraIntrinsics value = nullptr;
	check(shim()->get_CameraIntrinsics(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionControlSession impl_IPerceptionColorFrameSource<T>::AcquireControlSession() const
{
	Windows::Devices::Perception::PerceptionControlSession value = nullptr;
	check(shim()->abi_AcquireControlSession(put(value)));
	return value;
}

template <typename T> bool impl_IPerceptionColorFrameSource<T>::CanControlIndependentlyFrom(StringReference const & targetId) const
{
	bool result = {};
	check(shim()->abi_CanControlIndependentlyFrom(get(targetId), put(result)));
	return result;
}

template <typename T> bool impl_IPerceptionColorFrameSource<T>::IsCorrelatedWith(StringReference const & targetId) const
{
	bool result = {};
	check(shim()->abi_IsCorrelatedWith(get(targetId), put(result)));
	return result;
}

template <typename T> bool impl_IPerceptionColorFrameSource<T>::TryGetTransformTo(StringReference const & targetId, Windows::Foundation::Numerics::Matrix4x4 & result) const
{
	bool hasResult = {};
	check(shim()->abi_TryGetTransformTo(get(targetId), &result, put(hasResult)));
	return hasResult;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionDepthCorrelatedCameraIntrinsics> impl_IPerceptionColorFrameSource<T>::TryGetDepthCorrelatedCameraIntrinsicsAsync(Windows::Devices::Perception::PerceptionDepthFrameSource const & correlatedDepthFrameSource) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionDepthCorrelatedCameraIntrinsics> result;
	check(shim()->abi_TryGetDepthCorrelatedCameraIntrinsicsAsync(get(correlatedDepthFrameSource), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionDepthCorrelatedCoordinateMapper> impl_IPerceptionColorFrameSource<T>::TryGetDepthCorrelatedCoordinateMapperAsync(StringReference const & targetSourceId, Windows::Devices::Perception::PerceptionDepthFrameSource const & correlatedDepthFrameSource) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionDepthCorrelatedCoordinateMapper> result;
	check(shim()->abi_TryGetDepthCorrelatedCoordinateMapperAsync(get(targetSourceId), get(correlatedDepthFrameSource), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeResult> impl_IPerceptionColorFrameSource<T>::TrySetVideoProfileAsync(Windows::Devices::Perception::PerceptionControlSession const & controlSession, Windows::Devices::Perception::PerceptionVideoProfile const & profile) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeResult> result;
	check(shim()->abi_TrySetVideoProfileAsync(get(controlSession), get(profile), put(result)));
	return result;
}

template <typename T> Windows::Devices::Perception::PerceptionColorFrameReader impl_IPerceptionColorFrameSource<T>::OpenReader() const
{
	Windows::Devices::Perception::PerceptionColorFrameReader result = nullptr;
	check(shim()->abi_OpenReader(put(result)));
	return result;
}

template <typename T> String impl_IPerceptionColorFrameSource2<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> long long impl_IPerceptionDepthFrameSource<T>::AvailableChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSource, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_AvailableChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionDepthFrameSource<T>::AvailableChanged(F handler) const
{
	return AvailableChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSource, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionDepthFrameSource<T>::AvailableChanged(long long const token) const
{
	check(shim()->remove_AvailableChanged(token));
}

template <typename T> long long impl_IPerceptionDepthFrameSource<T>::ActiveChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSource, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_ActiveChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionDepthFrameSource<T>::ActiveChanged(F handler) const
{
	return ActiveChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSource, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionDepthFrameSource<T>::ActiveChanged(long long const token) const
{
	check(shim()->remove_ActiveChanged(token));
}

template <typename T> long long impl_IPerceptionDepthFrameSource<T>::PropertiesChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSource, Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_PropertiesChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionDepthFrameSource<T>::PropertiesChanged(F handler) const
{
	return PropertiesChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSource, Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs>(handler));
}

template <typename T> void impl_IPerceptionDepthFrameSource<T>::PropertiesChanged(long long const token) const
{
	check(shim()->remove_PropertiesChanged(token));
}

template <typename T> long long impl_IPerceptionDepthFrameSource<T>::VideoProfileChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSource, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_VideoProfileChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionDepthFrameSource<T>::VideoProfileChanged(F handler) const
{
	return VideoProfileChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSource, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionDepthFrameSource<T>::VideoProfileChanged(long long const token) const
{
	check(shim()->remove_VideoProfileChanged(token));
}

template <typename T> long long impl_IPerceptionDepthFrameSource<T>::CameraIntrinsicsChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSource, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_CameraIntrinsicsChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionDepthFrameSource<T>::CameraIntrinsicsChanged(F handler) const
{
	return CameraIntrinsicsChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameSource, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionDepthFrameSource<T>::CameraIntrinsicsChanged(long long const token) const
{
	check(shim()->remove_CameraIntrinsicsChanged(token));
}

template <typename T> String impl_IPerceptionDepthFrameSource<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IPerceptionDepthFrameSource<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IPerceptionDepthFrameSource<T>::DeviceKind() const
{
	String value;
	check(shim()->get_DeviceKind(put(value)));
	return value;
}

template <typename T> bool impl_IPerceptionDepthFrameSource<T>::Available() const
{
	bool value = {};
	check(shim()->get_Available(put(value)));
	return value;
}

template <typename T> bool impl_IPerceptionDepthFrameSource<T>::Active() const
{
	bool value = {};
	check(shim()->get_Active(put(value)));
	return value;
}

template <typename T> bool impl_IPerceptionDepthFrameSource<T>::IsControlled() const
{
	bool value = {};
	check(shim()->get_IsControlled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IPerceptionDepthFrameSource<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionVideoProfile> impl_IPerceptionDepthFrameSource<T>::SupportedVideoProfiles() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionVideoProfile> value;
	check(shim()->get_SupportedVideoProfiles(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionVideoProfile> impl_IPerceptionDepthFrameSource<T>::AvailableVideoProfiles() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionVideoProfile> value;
	check(shim()->get_AvailableVideoProfiles(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionVideoProfile impl_IPerceptionDepthFrameSource<T>::VideoProfile() const
{
	Windows::Devices::Perception::PerceptionVideoProfile value = nullptr;
	check(shim()->get_VideoProfile(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::Core::CameraIntrinsics impl_IPerceptionDepthFrameSource<T>::CameraIntrinsics() const
{
	Windows::Media::Devices::Core::CameraIntrinsics value = nullptr;
	check(shim()->get_CameraIntrinsics(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionControlSession impl_IPerceptionDepthFrameSource<T>::AcquireControlSession() const
{
	Windows::Devices::Perception::PerceptionControlSession result = nullptr;
	check(shim()->abi_AcquireControlSession(put(result)));
	return result;
}

template <typename T> bool impl_IPerceptionDepthFrameSource<T>::CanControlIndependentlyFrom(StringReference const & targetId) const
{
	bool result = {};
	check(shim()->abi_CanControlIndependentlyFrom(get(targetId), put(result)));
	return result;
}

template <typename T> bool impl_IPerceptionDepthFrameSource<T>::IsCorrelatedWith(StringReference const & targetId) const
{
	bool result = {};
	check(shim()->abi_IsCorrelatedWith(get(targetId), put(result)));
	return result;
}

template <typename T> bool impl_IPerceptionDepthFrameSource<T>::TryGetTransformTo(StringReference const & targetId, Windows::Foundation::Numerics::Matrix4x4 & result) const
{
	bool hasResult = {};
	check(shim()->abi_TryGetTransformTo(get(targetId), &result, put(hasResult)));
	return hasResult;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionDepthCorrelatedCameraIntrinsics> impl_IPerceptionDepthFrameSource<T>::TryGetDepthCorrelatedCameraIntrinsicsAsync(Windows::Devices::Perception::PerceptionDepthFrameSource const & target) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionDepthCorrelatedCameraIntrinsics> result;
	check(shim()->abi_TryGetDepthCorrelatedCameraIntrinsicsAsync(get(target), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionDepthCorrelatedCoordinateMapper> impl_IPerceptionDepthFrameSource<T>::TryGetDepthCorrelatedCoordinateMapperAsync(StringReference const & targetId, Windows::Devices::Perception::PerceptionDepthFrameSource const & depthFrameSourceToMapWith) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionDepthCorrelatedCoordinateMapper> result;
	check(shim()->abi_TryGetDepthCorrelatedCoordinateMapperAsync(get(targetId), get(depthFrameSourceToMapWith), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeResult> impl_IPerceptionDepthFrameSource<T>::TrySetVideoProfileAsync(Windows::Devices::Perception::PerceptionControlSession const & controlSession, Windows::Devices::Perception::PerceptionVideoProfile const & profile) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeResult> result;
	check(shim()->abi_TrySetVideoProfileAsync(get(controlSession), get(profile), put(result)));
	return result;
}

template <typename T> Windows::Devices::Perception::PerceptionDepthFrameReader impl_IPerceptionDepthFrameSource<T>::OpenReader() const
{
	Windows::Devices::Perception::PerceptionDepthFrameReader result = nullptr;
	check(shim()->abi_OpenReader(put(result)));
	return result;
}

template <typename T> String impl_IPerceptionDepthFrameSource2<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> long long impl_IPerceptionInfraredFrameSource<T>::AvailableChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSource, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_AvailableChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionInfraredFrameSource<T>::AvailableChanged(F handler) const
{
	return AvailableChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSource, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionInfraredFrameSource<T>::AvailableChanged(long long const token) const
{
	check(shim()->remove_AvailableChanged(token));
}

template <typename T> long long impl_IPerceptionInfraredFrameSource<T>::ActiveChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSource, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_ActiveChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionInfraredFrameSource<T>::ActiveChanged(F handler) const
{
	return ActiveChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSource, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionInfraredFrameSource<T>::ActiveChanged(long long const token) const
{
	check(shim()->remove_ActiveChanged(token));
}

template <typename T> long long impl_IPerceptionInfraredFrameSource<T>::PropertiesChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSource, Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_PropertiesChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionInfraredFrameSource<T>::PropertiesChanged(F handler) const
{
	return PropertiesChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSource, Windows::Devices::Perception::PerceptionFrameSourcePropertiesChangedEventArgs>(handler));
}

template <typename T> void impl_IPerceptionInfraredFrameSource<T>::PropertiesChanged(long long const token) const
{
	check(shim()->remove_PropertiesChanged(token));
}

template <typename T> long long impl_IPerceptionInfraredFrameSource<T>::VideoProfileChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSource, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_VideoProfileChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionInfraredFrameSource<T>::VideoProfileChanged(F handler) const
{
	return VideoProfileChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSource, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionInfraredFrameSource<T>::VideoProfileChanged(long long const token) const
{
	check(shim()->remove_VideoProfileChanged(token));
}

template <typename T> long long impl_IPerceptionInfraredFrameSource<T>::CameraIntrinsicsChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSource, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_CameraIntrinsicsChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionInfraredFrameSource<T>::CameraIntrinsicsChanged(F handler) const
{
	return CameraIntrinsicsChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameSource, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionInfraredFrameSource<T>::CameraIntrinsicsChanged(long long const token) const
{
	check(shim()->remove_CameraIntrinsicsChanged(token));
}

template <typename T> String impl_IPerceptionInfraredFrameSource<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IPerceptionInfraredFrameSource<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IPerceptionInfraredFrameSource<T>::DeviceKind() const
{
	String value;
	check(shim()->get_DeviceKind(put(value)));
	return value;
}

template <typename T> bool impl_IPerceptionInfraredFrameSource<T>::Available() const
{
	bool value = {};
	check(shim()->get_Available(put(value)));
	return value;
}

template <typename T> bool impl_IPerceptionInfraredFrameSource<T>::Active() const
{
	bool value = {};
	check(shim()->get_Active(put(value)));
	return value;
}

template <typename T> bool impl_IPerceptionInfraredFrameSource<T>::IsControlled() const
{
	bool value = {};
	check(shim()->get_IsControlled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IPerceptionInfraredFrameSource<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionVideoProfile> impl_IPerceptionInfraredFrameSource<T>::SupportedVideoProfiles() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionVideoProfile> value;
	check(shim()->get_SupportedVideoProfiles(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionVideoProfile> impl_IPerceptionInfraredFrameSource<T>::AvailableVideoProfiles() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionVideoProfile> value;
	check(shim()->get_AvailableVideoProfiles(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionVideoProfile impl_IPerceptionInfraredFrameSource<T>::VideoProfile() const
{
	Windows::Devices::Perception::PerceptionVideoProfile value = nullptr;
	check(shim()->get_VideoProfile(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::Core::CameraIntrinsics impl_IPerceptionInfraredFrameSource<T>::CameraIntrinsics() const
{
	Windows::Media::Devices::Core::CameraIntrinsics value = nullptr;
	check(shim()->get_CameraIntrinsics(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionControlSession impl_IPerceptionInfraredFrameSource<T>::AcquireControlSession() const
{
	Windows::Devices::Perception::PerceptionControlSession result = nullptr;
	check(shim()->abi_AcquireControlSession(put(result)));
	return result;
}

template <typename T> bool impl_IPerceptionInfraredFrameSource<T>::CanControlIndependentlyFrom(StringReference const & targetId) const
{
	bool result = {};
	check(shim()->abi_CanControlIndependentlyFrom(get(targetId), put(result)));
	return result;
}

template <typename T> bool impl_IPerceptionInfraredFrameSource<T>::IsCorrelatedWith(StringReference const & targetId) const
{
	bool result = {};
	check(shim()->abi_IsCorrelatedWith(get(targetId), put(result)));
	return result;
}

template <typename T> bool impl_IPerceptionInfraredFrameSource<T>::TryGetTransformTo(StringReference const & targetId, Windows::Foundation::Numerics::Matrix4x4 & result) const
{
	bool hasResult = {};
	check(shim()->abi_TryGetTransformTo(get(targetId), &result, put(hasResult)));
	return hasResult;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionDepthCorrelatedCameraIntrinsics> impl_IPerceptionInfraredFrameSource<T>::TryGetDepthCorrelatedCameraIntrinsicsAsync(Windows::Devices::Perception::PerceptionDepthFrameSource const & target) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionDepthCorrelatedCameraIntrinsics> result;
	check(shim()->abi_TryGetDepthCorrelatedCameraIntrinsicsAsync(get(target), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionDepthCorrelatedCoordinateMapper> impl_IPerceptionInfraredFrameSource<T>::TryGetDepthCorrelatedCoordinateMapperAsync(StringReference const & targetId, Windows::Devices::Perception::PerceptionDepthFrameSource const & depthFrameSourceToMapWith) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionDepthCorrelatedCoordinateMapper> result;
	check(shim()->abi_TryGetDepthCorrelatedCoordinateMapperAsync(get(targetId), get(depthFrameSourceToMapWith), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeResult> impl_IPerceptionInfraredFrameSource<T>::TrySetVideoProfileAsync(Windows::Devices::Perception::PerceptionControlSession const & controlSession, Windows::Devices::Perception::PerceptionVideoProfile const & profile) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeResult> result;
	check(shim()->abi_TrySetVideoProfileAsync(get(controlSession), get(profile), put(result)));
	return result;
}

template <typename T> Windows::Devices::Perception::PerceptionInfraredFrameReader impl_IPerceptionInfraredFrameSource<T>::OpenReader() const
{
	Windows::Devices::Perception::PerceptionInfraredFrameReader result = nullptr;
	check(shim()->abi_OpenReader(put(result)));
	return result;
}

template <typename T> String impl_IPerceptionInfraredFrameSource2<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapPixelFormat impl_IPerceptionVideoProfile<T>::BitmapPixelFormat() const
{
	Windows::Graphics::Imaging::BitmapPixelFormat value = {};
	check(shim()->get_BitmapPixelFormat(&value));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapAlphaMode impl_IPerceptionVideoProfile<T>::BitmapAlphaMode() const
{
	Windows::Graphics::Imaging::BitmapAlphaMode value = {};
	check(shim()->get_BitmapAlphaMode(&value));
	return value;
}

template <typename T> int impl_IPerceptionVideoProfile<T>::Width() const
{
	int value = {};
	check(shim()->get_Width(&value));
	return value;
}

template <typename T> int impl_IPerceptionVideoProfile<T>::Height() const
{
	int value = {};
	check(shim()->get_Height(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPerceptionVideoProfile<T>::FrameDuration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_FrameDuration(&value));
	return value;
}

template <typename T> bool impl_IPerceptionVideoProfile<T>::IsEqual(Windows::Devices::Perception::PerceptionVideoProfile const & other) const
{
	bool result = {};
	check(shim()->abi_IsEqual(get(other), put(result)));
	return result;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPerceptionColorFrameArrivedEventArgs<T>::RelativeTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_RelativeTime(&value));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionColorFrame impl_IPerceptionColorFrameArrivedEventArgs<T>::TryOpenFrame() const
{
	Windows::Devices::Perception::PerceptionColorFrame result = nullptr;
	check(shim()->abi_TryOpenFrame(put(result)));
	return result;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPerceptionDepthFrameArrivedEventArgs<T>::RelativeTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_RelativeTime(&value));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionDepthFrame impl_IPerceptionDepthFrameArrivedEventArgs<T>::TryOpenFrame() const
{
	Windows::Devices::Perception::PerceptionDepthFrame result = nullptr;
	check(shim()->abi_TryOpenFrame(put(result)));
	return result;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPerceptionInfraredFrameArrivedEventArgs<T>::RelativeTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_RelativeTime(&value));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionInfraredFrame impl_IPerceptionInfraredFrameArrivedEventArgs<T>::TryOpenFrame() const
{
	Windows::Devices::Perception::PerceptionInfraredFrame result = nullptr;
	check(shim()->abi_TryOpenFrame(put(result)));
	return result;
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_IPerceptionDepthCorrelatedCameraIntrinsics<T>::UnprojectPixelAtCorrelatedDepth(Windows::Foundation::Point const & pixelCoordinate, Windows::Devices::Perception::PerceptionDepthFrame const & depthFrame) const
{
	Windows::Foundation::Numerics::Vector3 result = {};
	check(shim()->abi_UnprojectPixelAtCorrelatedDepth(pixelCoordinate, get(depthFrame), &result));
	return result;
}

template <typename T> Windows::Foundation::Point impl_IPerceptionDepthCorrelatedCoordinateMapper<T>::MapPixelToTarget(Windows::Foundation::Point const & sourcePixelCoordinate, Windows::Devices::Perception::PerceptionDepthFrame const & depthFrame) const
{
	Windows::Foundation::Point result = {};
	check(shim()->abi_MapPixelToTarget(sourcePixelCoordinate, get(depthFrame), &result));
	return result;
}

template <typename T> long long impl_IPerceptionControlSession<T>::ControlLost(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionControlSession, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_ControlLost(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionControlSession<T>::ControlLost(F handler) const
{
	return ControlLost(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionControlSession, IInspectable>(handler));
}

template <typename T> void impl_IPerceptionControlSession<T>::ControlLost(long long const token) const
{
	check(shim()->remove_ControlLost(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeResult> impl_IPerceptionControlSession<T>::TrySetPropertyAsync(StringReference const & name, IInspectable const & value) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeResult> result;
	check(shim()->abi_TrySetPropertyAsync(get(name), get(value), put(result)));
	return result;
}

template <typename T> long long impl_IPerceptionColorFrameReader<T>::FrameArrived(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameReader, Windows::Devices::Perception::PerceptionColorFrameArrivedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_FrameArrived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionColorFrameReader<T>::FrameArrived(F handler) const
{
	return FrameArrived(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionColorFrameReader, Windows::Devices::Perception::PerceptionColorFrameArrivedEventArgs>(handler));
}

template <typename T> void impl_IPerceptionColorFrameReader<T>::FrameArrived(long long const token) const
{
	check(shim()->remove_FrameArrived(token));
}

template <typename T> Windows::Devices::Perception::PerceptionColorFrameSource impl_IPerceptionColorFrameReader<T>::Source() const
{
	Windows::Devices::Perception::PerceptionColorFrameSource value = nullptr;
	check(shim()->get_Source(put(value)));
	return value;
}

template <typename T> bool impl_IPerceptionColorFrameReader<T>::IsPaused() const
{
	bool value = {};
	check(shim()->get_IsPaused(put(value)));
	return value;
}

template <typename T> void impl_IPerceptionColorFrameReader<T>::IsPaused(bool const value) const
{
	check(shim()->put_IsPaused(value));
}

template <typename T> Windows::Devices::Perception::PerceptionColorFrame impl_IPerceptionColorFrameReader<T>::TryReadLatestFrame() const
{
	Windows::Devices::Perception::PerceptionColorFrame result = nullptr;
	check(shim()->abi_TryReadLatestFrame(put(result)));
	return result;
}

template <typename T> long long impl_IPerceptionDepthFrameReader<T>::FrameArrived(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameReader, Windows::Devices::Perception::PerceptionDepthFrameArrivedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_FrameArrived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionDepthFrameReader<T>::FrameArrived(F handler) const
{
	return FrameArrived(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionDepthFrameReader, Windows::Devices::Perception::PerceptionDepthFrameArrivedEventArgs>(handler));
}

template <typename T> void impl_IPerceptionDepthFrameReader<T>::FrameArrived(long long const token) const
{
	check(shim()->remove_FrameArrived(token));
}

template <typename T> Windows::Devices::Perception::PerceptionDepthFrameSource impl_IPerceptionDepthFrameReader<T>::Source() const
{
	Windows::Devices::Perception::PerceptionDepthFrameSource value = nullptr;
	check(shim()->get_Source(put(value)));
	return value;
}

template <typename T> bool impl_IPerceptionDepthFrameReader<T>::IsPaused() const
{
	bool value = {};
	check(shim()->get_IsPaused(put(value)));
	return value;
}

template <typename T> void impl_IPerceptionDepthFrameReader<T>::IsPaused(bool const value) const
{
	check(shim()->put_IsPaused(value));
}

template <typename T> Windows::Devices::Perception::PerceptionDepthFrame impl_IPerceptionDepthFrameReader<T>::TryReadLatestFrame() const
{
	Windows::Devices::Perception::PerceptionDepthFrame result = nullptr;
	check(shim()->abi_TryReadLatestFrame(put(result)));
	return result;
}

template <typename T> long long impl_IPerceptionInfraredFrameReader<T>::FrameArrived(Windows::Foundation::ITypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameReader, Windows::Devices::Perception::PerceptionInfraredFrameArrivedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_FrameArrived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPerceptionInfraredFrameReader<T>::FrameArrived(F handler) const
{
	return FrameArrived(Windows::Foundation::TypedEventHandler<Windows::Devices::Perception::PerceptionInfraredFrameReader, Windows::Devices::Perception::PerceptionInfraredFrameArrivedEventArgs>(handler));
}

template <typename T> void impl_IPerceptionInfraredFrameReader<T>::FrameArrived(long long const token) const
{
	check(shim()->remove_FrameArrived(token));
}

template <typename T> Windows::Devices::Perception::PerceptionInfraredFrameSource impl_IPerceptionInfraredFrameReader<T>::Source() const
{
	Windows::Devices::Perception::PerceptionInfraredFrameSource value = nullptr;
	check(shim()->get_Source(put(value)));
	return value;
}

template <typename T> bool impl_IPerceptionInfraredFrameReader<T>::IsPaused() const
{
	bool value = {};
	check(shim()->get_IsPaused(put(value)));
	return value;
}

template <typename T> void impl_IPerceptionInfraredFrameReader<T>::IsPaused(bool const value) const
{
	check(shim()->put_IsPaused(value));
}

template <typename T> Windows::Devices::Perception::PerceptionInfraredFrame impl_IPerceptionInfraredFrameReader<T>::TryReadLatestFrame() const
{
	Windows::Devices::Perception::PerceptionInfraredFrame result = nullptr;
	check(shim()->abi_TryReadLatestFrame(put(result)));
	return result;
}

template <typename T> Windows::Media::VideoFrame impl_IPerceptionColorFrame<T>::VideoFrame() const
{
	Windows::Media::VideoFrame value = nullptr;
	check(shim()->get_VideoFrame(put(value)));
	return value;
}

template <typename T> Windows::Media::VideoFrame impl_IPerceptionDepthFrame<T>::VideoFrame() const
{
	Windows::Media::VideoFrame value = nullptr;
	check(shim()->get_VideoFrame(put(value)));
	return value;
}

template <typename T> Windows::Media::VideoFrame impl_IPerceptionInfraredFrame<T>::VideoFrame() const
{
	Windows::Media::VideoFrame value = nullptr;
	check(shim()->get_VideoFrame(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Perception { namespace Provider {

template <typename T> bool impl_IPerceptionStartFaceAuthenticationHandler<T>::Invoke(Windows::Devices::Perception::Provider::PerceptionFaceAuthenticationGroup const & sender) const
{
	bool result = {};
	check(shim()->abi_Invoke(get(sender), put(result)));
	return result;
}

template <typename T> void impl_IPerceptionStopFaceAuthenticationHandler<T>::Invoke(Windows::Devices::Perception::Provider::PerceptionFaceAuthenticationGroup const & sender) const
{
	check(shim()->abi_Invoke(get(sender)));
}

template <typename T> String impl_IKnownPerceptionFrameKindStatics<T>::Color() const
{
	String value;
	check(shim()->get_Color(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionFrameKindStatics<T>::Depth() const
{
	String value;
	check(shim()->get_Depth(put(value)));
	return value;
}

template <typename T> String impl_IKnownPerceptionFrameKindStatics<T>::Infrared() const
{
	String value;
	check(shim()->get_Infrared(put(value)));
	return value;
}

template <typename T> void impl_IPerceptionFrameProviderManagerServiceStatics<T>::RegisterFrameProviderInfo(Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager const & manager, Windows::Devices::Perception::Provider::PerceptionFrameProviderInfo const & frameProviderInfo) const
{
	check(shim()->abi_RegisterFrameProviderInfo(get(manager), get(frameProviderInfo)));
}

template <typename T> void impl_IPerceptionFrameProviderManagerServiceStatics<T>::UnregisterFrameProviderInfo(Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager const & manager, Windows::Devices::Perception::Provider::PerceptionFrameProviderInfo const & frameProviderInfo) const
{
	check(shim()->abi_UnregisterFrameProviderInfo(get(manager), get(frameProviderInfo)));
}

template <typename T> void impl_IPerceptionFrameProviderManagerServiceStatics<T>::RegisterFaceAuthenticationGroup(Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager const & manager, Windows::Devices::Perception::Provider::PerceptionFaceAuthenticationGroup const & faceAuthenticationGroup) const
{
	check(shim()->abi_RegisterFaceAuthenticationGroup(get(manager), get(faceAuthenticationGroup)));
}

template <typename T> void impl_IPerceptionFrameProviderManagerServiceStatics<T>::UnregisterFaceAuthenticationGroup(Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager const & manager, Windows::Devices::Perception::Provider::PerceptionFaceAuthenticationGroup const & faceAuthenticationGroup) const
{
	check(shim()->abi_UnregisterFaceAuthenticationGroup(get(manager), get(faceAuthenticationGroup)));
}

template <typename T> void impl_IPerceptionFrameProviderManagerServiceStatics<T>::RegisterControlGroup(Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager const & manager, Windows::Devices::Perception::Provider::PerceptionControlGroup const & controlGroup) const
{
	check(shim()->abi_RegisterControlGroup(get(manager), get(controlGroup)));
}

template <typename T> void impl_IPerceptionFrameProviderManagerServiceStatics<T>::UnregisterControlGroup(Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager const & manager, Windows::Devices::Perception::Provider::PerceptionControlGroup const & controlGroup) const
{
	check(shim()->abi_UnregisterControlGroup(get(manager), get(controlGroup)));
}

template <typename T> void impl_IPerceptionFrameProviderManagerServiceStatics<T>::RegisterCorrelationGroup(Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager const & manager, Windows::Devices::Perception::Provider::PerceptionCorrelationGroup const & correlationGroup) const
{
	check(shim()->abi_RegisterCorrelationGroup(get(manager), get(correlationGroup)));
}

template <typename T> void impl_IPerceptionFrameProviderManagerServiceStatics<T>::UnregisterCorrelationGroup(Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager const & manager, Windows::Devices::Perception::Provider::PerceptionCorrelationGroup const & correlationGroup) const
{
	check(shim()->abi_UnregisterCorrelationGroup(get(manager), get(correlationGroup)));
}

template <typename T> void impl_IPerceptionFrameProviderManagerServiceStatics<T>::UpdateAvailabilityForProvider(Windows::Devices::Perception::Provider::IPerceptionFrameProvider const & provider, bool const available) const
{
	check(shim()->abi_UpdateAvailabilityForProvider(get(provider), available));
}

template <typename T> void impl_IPerceptionFrameProviderManagerServiceStatics<T>::PublishFrameForProvider(Windows::Devices::Perception::Provider::IPerceptionFrameProvider const & provider, Windows::Devices::Perception::Provider::PerceptionFrame const & frame) const
{
	check(shim()->abi_PublishFrameForProvider(get(provider), get(frame)));
}

template <typename T> String impl_IPerceptionFrameProviderInfo<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_IPerceptionFrameProviderInfo<T>::Id(StringReference const & value) const
{
	check(shim()->put_Id(get(value)));
}

template <typename T> String impl_IPerceptionFrameProviderInfo<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IPerceptionFrameProviderInfo<T>::DisplayName(StringReference const & value) const
{
	check(shim()->put_DisplayName(get(value)));
}

template <typename T> String impl_IPerceptionFrameProviderInfo<T>::DeviceKind() const
{
	String value;
	check(shim()->get_DeviceKind(put(value)));
	return value;
}

template <typename T> void impl_IPerceptionFrameProviderInfo<T>::DeviceKind(StringReference const & value) const
{
	check(shim()->put_DeviceKind(get(value)));
}

template <typename T> String impl_IPerceptionFrameProviderInfo<T>::FrameKind() const
{
	String value;
	check(shim()->get_FrameKind(put(value)));
	return value;
}

template <typename T> void impl_IPerceptionFrameProviderInfo<T>::FrameKind(StringReference const & value) const
{
	check(shim()->put_FrameKind(get(value)));
}

template <typename T> bool impl_IPerceptionFrameProviderInfo<T>::Hidden() const
{
	bool value = {};
	check(shim()->get_Hidden(put(value)));
	return value;
}

template <typename T> void impl_IPerceptionFrameProviderInfo<T>::Hidden(bool const value) const
{
	check(shim()->put_Hidden(value));
}

template <typename T> Windows::Devices::Perception::Provider::PerceptionControlGroup impl_IPerceptionControlGroupFactory<T>::Create(Windows::Foundation::Collections::IIterable<String> const & ids) const
{
	Windows::Devices::Perception::Provider::PerceptionControlGroup result = nullptr;
	check(shim()->abi_Create(get(ids), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IPerceptionControlGroup<T>::FrameProviderIds() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_FrameProviderIds(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::Provider::PerceptionFaceAuthenticationGroup impl_IPerceptionFaceAuthenticationGroupFactory<T>::Create(Windows::Foundation::Collections::IIterable<String> const & ids, Windows::Devices::Perception::Provider::IPerceptionStartFaceAuthenticationHandler const & startHandler, Windows::Devices::Perception::Provider::IPerceptionStopFaceAuthenticationHandler const & stopHandler) const
{
	Windows::Devices::Perception::Provider::PerceptionFaceAuthenticationGroup result = nullptr;
	check(shim()->abi_Create(get(ids), get(startHandler), get(stopHandler), put(result)));
	return result;
}

template <typename T> template <typename F> Windows::Devices::Perception::Provider::PerceptionFaceAuthenticationGroup impl_IPerceptionFaceAuthenticationGroupFactory<T>::Create(Windows::Foundation::Collections::IIterable<String> const & ids, F startHandler, F stopHandler) const
{
	return Create(ids, Windows::Devices::Perception::Provider::PerceptionStartFaceAuthenticationHandler(startHandler), Windows::Devices::Perception::Provider::PerceptionStopFaceAuthenticationHandler(stopHandler));
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IPerceptionFaceAuthenticationGroup<T>::FrameProviderIds() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_FrameProviderIds(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::Provider::PerceptionCorrelation impl_IPerceptionCorrelationFactory<T>::Create(StringReference const & targetId, Windows::Foundation::Numerics::Vector3 const & position, Windows::Foundation::Numerics::Quaternion const & orientation) const
{
	Windows::Devices::Perception::Provider::PerceptionCorrelation result = nullptr;
	check(shim()->abi_Create(get(targetId), position, orientation, put(result)));
	return result;
}

template <typename T> String impl_IPerceptionCorrelation<T>::TargetId() const
{
	String value;
	check(shim()->get_TargetId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_IPerceptionCorrelation<T>::Position() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Quaternion impl_IPerceptionCorrelation<T>::Orientation() const
{
	Windows::Foundation::Numerics::Quaternion value = {};
	check(shim()->get_Orientation(&value));
	return value;
}

template <typename T> Windows::Devices::Perception::Provider::PerceptionCorrelationGroup impl_IPerceptionCorrelationGroupFactory<T>::Create(Windows::Foundation::Collections::IIterable<Windows::Devices::Perception::Provider::PerceptionCorrelation> const & relativeLocations) const
{
	Windows::Devices::Perception::Provider::PerceptionCorrelationGroup result = nullptr;
	check(shim()->abi_Create(get(relativeLocations), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::Provider::PerceptionCorrelation> impl_IPerceptionCorrelationGroup<T>::RelativeLocations() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::Provider::PerceptionCorrelation> value;
	check(shim()->get_RelativeLocations(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPerceptionFrame<T>::RelativeTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_RelativeTime(&value));
	return value;
}

template <typename T> void impl_IPerceptionFrame<T>::RelativeTime(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_RelativeTime(value));
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_IPerceptionFrame<T>::Properties() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IMemoryBuffer impl_IPerceptionFrame<T>::FrameData() const
{
	Windows::Foundation::IMemoryBuffer value;
	check(shim()->get_FrameData(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::Provider::PerceptionVideoFrameAllocator impl_IPerceptionVideoFrameAllocatorFactory<T>::Create(unsigned const maxOutstandingFrameCountForWrite, Windows::Graphics::Imaging::BitmapPixelFormat const format, Windows::Foundation::Size const & resolution, Windows::Graphics::Imaging::BitmapAlphaMode const alpha) const
{
	Windows::Devices::Perception::Provider::PerceptionVideoFrameAllocator result = nullptr;
	check(shim()->abi_Create(maxOutstandingFrameCountForWrite, format, resolution, alpha, put(result)));
	return result;
}

template <typename T> String impl_IPerceptionPropertyChangeRequest<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> IInspectable impl_IPerceptionPropertyChangeRequest<T>::Value() const
{
	IInspectable value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeStatus impl_IPerceptionPropertyChangeRequest<T>::Status() const
{
	Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> void impl_IPerceptionPropertyChangeRequest<T>::Status(Windows::Devices::Perception::PerceptionFrameSourcePropertyChangeStatus const value) const
{
	check(shim()->put_Status(value));
}

template <typename T> Windows::Foundation::Deferral impl_IPerceptionPropertyChangeRequest<T>::GetDeferral() const
{
	Windows::Foundation::Deferral result = nullptr;
	check(shim()->abi_GetDeferral(put(result)));
	return result;
}

template <typename T> Windows::Devices::Perception::Provider::IPerceptionFrameProvider impl_IPerceptionFrameProviderManager<T>::GetFrameProvider(Windows::Devices::Perception::Provider::PerceptionFrameProviderInfo const & frameProviderInfo) const
{
	Windows::Devices::Perception::Provider::IPerceptionFrameProvider result;
	check(shim()->abi_GetFrameProvider(get(frameProviderInfo), put(result)));
	return result;
}

template <typename T> Windows::Devices::Perception::Provider::PerceptionFrameProviderInfo impl_IPerceptionFrameProvider<T>::FrameProviderInfo() const
{
	Windows::Devices::Perception::Provider::PerceptionFrameProviderInfo result = nullptr;
	check(shim()->get_FrameProviderInfo(put(result)));
	return result;
}

template <typename T> bool impl_IPerceptionFrameProvider<T>::Available() const
{
	bool value = {};
	check(shim()->get_Available(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IPerceptionFrameProvider<T>::Properties() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> void impl_IPerceptionFrameProvider<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IPerceptionFrameProvider<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> void impl_IPerceptionFrameProvider<T>::SetProperty(Windows::Devices::Perception::Provider::PerceptionPropertyChangeRequest const & value) const
{
	check(shim()->abi_SetProperty(get(value)));
}

template <typename T> Windows::Devices::Perception::Provider::PerceptionFrame impl_IPerceptionVideoFrameAllocator<T>::AllocateFrame() const
{
	Windows::Devices::Perception::Provider::PerceptionFrame value = nullptr;
	check(shim()->abi_AllocateFrame(put(value)));
	return value;
}

template <typename T> Windows::Devices::Perception::Provider::PerceptionFrame impl_IPerceptionVideoFrameAllocator<T>::CopyFromVideoFrame(Windows::Media::VideoFrame const & frame) const
{
	Windows::Devices::Perception::Provider::PerceptionFrame value = nullptr;
	check(shim()->abi_CopyFromVideoFrame(get(frame), put(value)));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace PointOfService {

template <typename T> String impl_IUnifiedPosErrorData<T>::Message() const
{
	String value;
	check(shim()->get_Message(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::UnifiedPosErrorSeverity impl_IUnifiedPosErrorData<T>::Severity() const
{
	Windows::Devices::PointOfService::UnifiedPosErrorSeverity value = {};
	check(shim()->get_Severity(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::UnifiedPosErrorReason impl_IUnifiedPosErrorData<T>::Reason() const
{
	Windows::Devices::PointOfService::UnifiedPosErrorReason value = {};
	check(shim()->get_Reason(&value));
	return value;
}

template <typename T> unsigned impl_IUnifiedPosErrorData<T>::ExtendedReason() const
{
	unsigned value = {};
	check(shim()->get_ExtendedReason(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::BarcodeScannerStatus impl_IBarcodeScannerStatusUpdatedEventArgs<T>::Status() const
{
	Windows::Devices::PointOfService::BarcodeScannerStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeScannerStatusUpdatedEventArgs<T>::ExtendedStatus() const
{
	unsigned value = {};
	check(shim()->get_ExtendedStatus(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Unknown() const
{
	unsigned value = {};
	check(shim()->get_Unknown(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean8() const
{
	unsigned value = {};
	check(shim()->get_Ean8(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean8Add2() const
{
	unsigned value = {};
	check(shim()->get_Ean8Add2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean8Add5() const
{
	unsigned value = {};
	check(shim()->get_Ean8Add5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Eanv() const
{
	unsigned value = {};
	check(shim()->get_Eanv(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::EanvAdd2() const
{
	unsigned value = {};
	check(shim()->get_EanvAdd2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::EanvAdd5() const
{
	unsigned value = {};
	check(shim()->get_EanvAdd5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean13() const
{
	unsigned value = {};
	check(shim()->get_Ean13(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean13Add2() const
{
	unsigned value = {};
	check(shim()->get_Ean13Add2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean13Add5() const
{
	unsigned value = {};
	check(shim()->get_Ean13Add5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Isbn() const
{
	unsigned value = {};
	check(shim()->get_Isbn(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::IsbnAdd5() const
{
	unsigned value = {};
	check(shim()->get_IsbnAdd5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ismn() const
{
	unsigned value = {};
	check(shim()->get_Ismn(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::IsmnAdd2() const
{
	unsigned value = {};
	check(shim()->get_IsmnAdd2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::IsmnAdd5() const
{
	unsigned value = {};
	check(shim()->get_IsmnAdd5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Issn() const
{
	unsigned value = {};
	check(shim()->get_Issn(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::IssnAdd2() const
{
	unsigned value = {};
	check(shim()->get_IssnAdd2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::IssnAdd5() const
{
	unsigned value = {};
	check(shim()->get_IssnAdd5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean99() const
{
	unsigned value = {};
	check(shim()->get_Ean99(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean99Add2() const
{
	unsigned value = {};
	check(shim()->get_Ean99Add2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ean99Add5() const
{
	unsigned value = {};
	check(shim()->get_Ean99Add5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Upca() const
{
	unsigned value = {};
	check(shim()->get_Upca(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UpcaAdd2() const
{
	unsigned value = {};
	check(shim()->get_UpcaAdd2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UpcaAdd5() const
{
	unsigned value = {};
	check(shim()->get_UpcaAdd5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Upce() const
{
	unsigned value = {};
	check(shim()->get_Upce(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UpceAdd2() const
{
	unsigned value = {};
	check(shim()->get_UpceAdd2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UpceAdd5() const
{
	unsigned value = {};
	check(shim()->get_UpceAdd5(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UpcCoupon() const
{
	unsigned value = {};
	check(shim()->get_UpcCoupon(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::TfStd() const
{
	unsigned value = {};
	check(shim()->get_TfStd(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::TfDis() const
{
	unsigned value = {};
	check(shim()->get_TfDis(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::TfInt() const
{
	unsigned value = {};
	check(shim()->get_TfInt(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::TfInd() const
{
	unsigned value = {};
	check(shim()->get_TfInd(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::TfMat() const
{
	unsigned value = {};
	check(shim()->get_TfMat(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::TfIata() const
{
	unsigned value = {};
	check(shim()->get_TfIata(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Gs1DatabarType1() const
{
	unsigned value = {};
	check(shim()->get_Gs1DatabarType1(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Gs1DatabarType2() const
{
	unsigned value = {};
	check(shim()->get_Gs1DatabarType2(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Gs1DatabarType3() const
{
	unsigned value = {};
	check(shim()->get_Gs1DatabarType3(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code39() const
{
	unsigned value = {};
	check(shim()->get_Code39(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code39Ex() const
{
	unsigned value = {};
	check(shim()->get_Code39Ex(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Trioptic39() const
{
	unsigned value = {};
	check(shim()->get_Trioptic39(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code32() const
{
	unsigned value = {};
	check(shim()->get_Code32(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Pzn() const
{
	unsigned value = {};
	check(shim()->get_Pzn(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code93() const
{
	unsigned value = {};
	check(shim()->get_Code93(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code93Ex() const
{
	unsigned value = {};
	check(shim()->get_Code93Ex(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code128() const
{
	unsigned value = {};
	check(shim()->get_Code128(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Gs1128() const
{
	unsigned value = {};
	check(shim()->get_Gs1128(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Gs1128Coupon() const
{
	unsigned value = {};
	check(shim()->get_Gs1128Coupon(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UccEan128() const
{
	unsigned value = {};
	check(shim()->get_UccEan128(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Sisac() const
{
	unsigned value = {};
	check(shim()->get_Sisac(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Isbt() const
{
	unsigned value = {};
	check(shim()->get_Isbt(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Codabar() const
{
	unsigned value = {};
	check(shim()->get_Codabar(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code11() const
{
	unsigned value = {};
	check(shim()->get_Code11(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Msi() const
{
	unsigned value = {};
	check(shim()->get_Msi(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Plessey() const
{
	unsigned value = {};
	check(shim()->get_Plessey(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Telepen() const
{
	unsigned value = {};
	check(shim()->get_Telepen(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code16k() const
{
	unsigned value = {};
	check(shim()->get_Code16k(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::CodablockA() const
{
	unsigned value = {};
	check(shim()->get_CodablockA(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::CodablockF() const
{
	unsigned value = {};
	check(shim()->get_CodablockF(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Codablock128() const
{
	unsigned value = {};
	check(shim()->get_Codablock128(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Code49() const
{
	unsigned value = {};
	check(shim()->get_Code49(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Aztec() const
{
	unsigned value = {};
	check(shim()->get_Aztec(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::DataCode() const
{
	unsigned value = {};
	check(shim()->get_DataCode(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::DataMatrix() const
{
	unsigned value = {};
	check(shim()->get_DataMatrix(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::HanXin() const
{
	unsigned value = {};
	check(shim()->get_HanXin(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Maxicode() const
{
	unsigned value = {};
	check(shim()->get_Maxicode(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::MicroPdf417() const
{
	unsigned value = {};
	check(shim()->get_MicroPdf417(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::MicroQr() const
{
	unsigned value = {};
	check(shim()->get_MicroQr(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Pdf417() const
{
	unsigned value = {};
	check(shim()->get_Pdf417(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Qr() const
{
	unsigned value = {};
	check(shim()->get_Qr(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::MsTag() const
{
	unsigned value = {};
	check(shim()->get_MsTag(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ccab() const
{
	unsigned value = {};
	check(shim()->get_Ccab(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Ccc() const
{
	unsigned value = {};
	check(shim()->get_Ccc(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Tlc39() const
{
	unsigned value = {};
	check(shim()->get_Tlc39(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::AusPost() const
{
	unsigned value = {};
	check(shim()->get_AusPost(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::CanPost() const
{
	unsigned value = {};
	check(shim()->get_CanPost(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::ChinaPost() const
{
	unsigned value = {};
	check(shim()->get_ChinaPost(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::DutchKix() const
{
	unsigned value = {};
	check(shim()->get_DutchKix(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::InfoMail() const
{
	unsigned value = {};
	check(shim()->get_InfoMail(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::ItalianPost25() const
{
	unsigned value = {};
	check(shim()->get_ItalianPost25(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::ItalianPost39() const
{
	unsigned value = {};
	check(shim()->get_ItalianPost39(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::JapanPost() const
{
	unsigned value = {};
	check(shim()->get_JapanPost(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::KoreanPost() const
{
	unsigned value = {};
	check(shim()->get_KoreanPost(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::SwedenPost() const
{
	unsigned value = {};
	check(shim()->get_SwedenPost(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UkPost() const
{
	unsigned value = {};
	check(shim()->get_UkPost(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UsIntelligent() const
{
	unsigned value = {};
	check(shim()->get_UsIntelligent(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UsIntelligentPkg() const
{
	unsigned value = {};
	check(shim()->get_UsIntelligentPkg(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UsPlanet() const
{
	unsigned value = {};
	check(shim()->get_UsPlanet(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::UsPostNet() const
{
	unsigned value = {};
	check(shim()->get_UsPostNet(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Us4StateFics() const
{
	unsigned value = {};
	check(shim()->get_Us4StateFics(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::OcrA() const
{
	unsigned value = {};
	check(shim()->get_OcrA(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::OcrB() const
{
	unsigned value = {};
	check(shim()->get_OcrB(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::Micr() const
{
	unsigned value = {};
	check(shim()->get_Micr(&value));
	return value;
}

template <typename T> unsigned impl_IBarcodeSymbologiesStatics<T>::ExtendedBase() const
{
	unsigned value = {};
	check(shim()->get_ExtendedBase(&value));
	return value;
}

template <typename T> String impl_IBarcodeSymbologiesStatics<T>::GetName(unsigned const scanDataType) const
{
	String value;
	check(shim()->abi_GetName(scanDataType, put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::BarcodeScannerReport impl_IBarcodeScannerDataReceivedEventArgs<T>::Report() const
{
	Windows::Devices::PointOfService::BarcodeScannerReport value = nullptr;
	check(shim()->get_Report(put(value)));
	return value;
}

template <typename T> unsigned impl_IBarcodeScannerReport<T>::ScanDataType() const
{
	unsigned value = {};
	check(shim()->get_ScanDataType(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IBarcodeScannerReport<T>::ScanData() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_ScanData(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IBarcodeScannerReport<T>::ScanDataLabel() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_ScanDataLabel(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::BarcodeScannerReport impl_IBarcodeScannerErrorOccurredEventArgs<T>::PartialInputData() const
{
	Windows::Devices::PointOfService::BarcodeScannerReport value = nullptr;
	check(shim()->get_PartialInputData(put(value)));
	return value;
}

template <typename T> bool impl_IBarcodeScannerErrorOccurredEventArgs<T>::IsRetriable() const
{
	bool value = {};
	check(shim()->get_IsRetriable(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::UnifiedPosErrorData impl_IBarcodeScannerErrorOccurredEventArgs<T>::ErrorData() const
{
	Windows::Devices::PointOfService::UnifiedPosErrorData value = nullptr;
	check(shim()->get_ErrorData(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamWithContentType impl_IBarcodeScannerImagePreviewReceivedEventArgs<T>::Preview() const
{
	Windows::Storage::Streams::IRandomAccessStreamWithContentType preview;
	check(shim()->get_Preview(put(preview)));
	return preview;
}

template <typename T> Windows::Devices::PointOfService::UnifiedPosPowerReportingType impl_IBarcodeScannerCapabilities<T>::PowerReportingType() const
{
	Windows::Devices::PointOfService::UnifiedPosPowerReportingType value = {};
	check(shim()->get_PowerReportingType(&value));
	return value;
}

template <typename T> bool impl_IBarcodeScannerCapabilities<T>::IsStatisticsReportingSupported() const
{
	bool value = {};
	check(shim()->get_IsStatisticsReportingSupported(put(value)));
	return value;
}

template <typename T> bool impl_IBarcodeScannerCapabilities<T>::IsStatisticsUpdatingSupported() const
{
	bool value = {};
	check(shim()->get_IsStatisticsUpdatingSupported(put(value)));
	return value;
}

template <typename T> bool impl_IBarcodeScannerCapabilities<T>::IsImagePreviewSupported() const
{
	bool value = {};
	check(shim()->get_IsImagePreviewSupported(put(value)));
	return value;
}

template <typename T> bool impl_IBarcodeScannerCapabilities1<T>::IsSoftwareTriggerSupported() const
{
	bool value = {};
	check(shim()->get_IsSoftwareTriggerSupported(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> impl_IBarcodeScannerStatics<T>::GetDefaultAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> result;
	check(shim()->abi_GetDefaultAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> impl_IBarcodeScannerStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> result;
	check(shim()->abi_FromIdAsync(get(deviceId), put(result)));
	return result;
}

template <typename T> String impl_IBarcodeScannerStatics<T>::GetDeviceSelector() const
{
	String value;
	check(shim()->abi_GetDeviceSelector(put(value)));
	return value;
}

template <typename T> String impl_IBarcodeScanner<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::BarcodeScannerCapabilities impl_IBarcodeScanner<T>::Capabilities() const
{
	Windows::Devices::PointOfService::BarcodeScannerCapabilities value = nullptr;
	check(shim()->get_Capabilities(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::ClaimedBarcodeScanner> impl_IBarcodeScanner<T>::ClaimScannerAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::ClaimedBarcodeScanner> operation;
	check(shim()->abi_ClaimScannerAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IBarcodeScanner<T>::CheckHealthAsync(Windows::Devices::PointOfService::UnifiedPosHealthCheckLevel const level) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_CheckHealthAsync(level, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<unsigned>> impl_IBarcodeScanner<T>::GetSupportedSymbologiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<unsigned>> operation;
	check(shim()->abi_GetSupportedSymbologiesAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IBarcodeScanner<T>::IsSymbologySupportedAsync(unsigned const barcodeSymbology) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_IsSymbologySupportedAsync(barcodeSymbology, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IBarcodeScanner<T>::RetrieveStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation;
	check(shim()->abi_RetrieveStatisticsAsync(get(statisticsCategories), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IBarcodeScanner<T>::GetSupportedProfiles() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->abi_GetSupportedProfiles(put(value)));
	return value;
}

template <typename T> bool impl_IBarcodeScanner<T>::IsProfileSupported(StringReference const & profile) const
{
	bool isSupported = {};
	check(shim()->abi_IsProfileSupported(get(profile), put(isSupported)));
	return isSupported;
}

template <typename T> long long impl_IBarcodeScanner<T>::StatusUpdated(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::BarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerStatusUpdatedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_StatusUpdated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBarcodeScanner<T>::StatusUpdated(F handler) const
{
	return StatusUpdated(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::BarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerStatusUpdatedEventArgs>(handler));
}

template <typename T> void impl_IBarcodeScanner<T>::StatusUpdated(long long const token) const
{
	check(shim()->remove_StatusUpdated(token));
}

template <typename T> unsigned impl_IMagneticStripeReaderEncryptionAlgorithmsStatics<T>::None() const
{
	unsigned value = {};
	check(shim()->get_None(&value));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderEncryptionAlgorithmsStatics<T>::TripleDesDukpt() const
{
	unsigned value = {};
	check(shim()->get_TripleDesDukpt(&value));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderEncryptionAlgorithmsStatics<T>::ExtendedBase() const
{
	unsigned value = {};
	check(shim()->get_ExtendedBase(&value));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderCardTypesStatics<T>::Unknown() const
{
	unsigned value = {};
	check(shim()->get_Unknown(&value));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderCardTypesStatics<T>::Bank() const
{
	unsigned value = {};
	check(shim()->get_Bank(&value));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderCardTypesStatics<T>::Aamva() const
{
	unsigned value = {};
	check(shim()->get_Aamva(&value));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderCardTypesStatics<T>::ExtendedBase() const
{
	unsigned value = {};
	check(shim()->get_ExtendedBase(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IMagneticStripeReaderTrackData<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IMagneticStripeReaderTrackData<T>::DiscretionaryData() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_DiscretionaryData(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IMagneticStripeReaderTrackData<T>::EncryptedData() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_EncryptedData(put(value)));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderReport<T>::CardType() const
{
	unsigned value = {};
	check(shim()->get_CardType(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackData impl_IMagneticStripeReaderReport<T>::Track1() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackData value = nullptr;
	check(shim()->get_Track1(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackData impl_IMagneticStripeReaderReport<T>::Track2() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackData value = nullptr;
	check(shim()->get_Track2(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackData impl_IMagneticStripeReaderReport<T>::Track3() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackData value = nullptr;
	check(shim()->get_Track3(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackData impl_IMagneticStripeReaderReport<T>::Track4() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackData value = nullptr;
	check(shim()->get_Track4(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, String> impl_IMagneticStripeReaderReport<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, String> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IMagneticStripeReaderReport<T>::CardAuthenticationData() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_CardAuthenticationData(put(value)));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderReport<T>::CardAuthenticationDataLength() const
{
	unsigned value = {};
	check(shim()->get_CardAuthenticationDataLength(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IMagneticStripeReaderReport<T>::AdditionalSecurityInformation() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_AdditionalSecurityInformation(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderReport impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::Report() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderReport value = nullptr;
	check(shim()->get_Report(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::AccountNumber() const
{
	String value;
	check(shim()->get_AccountNumber(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::ExpirationDate() const
{
	String value;
	check(shim()->get_ExpirationDate(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::ServiceCode() const
{
	String value;
	check(shim()->get_ServiceCode(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::FirstName() const
{
	String value;
	check(shim()->get_FirstName(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::MiddleInitial() const
{
	String value;
	check(shim()->get_MiddleInitial(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::Surname() const
{
	String value;
	check(shim()->get_Surname(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderBankCardDataReceivedEventArgs<T>::Suffix() const
{
	String value;
	check(shim()->get_Suffix(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderReport impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Report() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderReport value = nullptr;
	check(shim()->get_Report(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::LicenseNumber() const
{
	String value;
	check(shim()->get_LicenseNumber(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::ExpirationDate() const
{
	String value;
	check(shim()->get_ExpirationDate(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Restrictions() const
{
	String value;
	check(shim()->get_Restrictions(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Class() const
{
	String value;
	check(shim()->get_Class(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Endorsements() const
{
	String value;
	check(shim()->get_Endorsements(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::BirthDate() const
{
	String value;
	check(shim()->get_BirthDate(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::FirstName() const
{
	String value;
	check(shim()->get_FirstName(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Surname() const
{
	String value;
	check(shim()->get_Surname(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Suffix() const
{
	String value;
	check(shim()->get_Suffix(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Gender() const
{
	String value;
	check(shim()->get_Gender(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::HairColor() const
{
	String value;
	check(shim()->get_HairColor(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::EyeColor() const
{
	String value;
	check(shim()->get_EyeColor(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Height() const
{
	String value;
	check(shim()->get_Height(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Weight() const
{
	String value;
	check(shim()->get_Weight(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::Address() const
{
	String value;
	check(shim()->get_Address(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::City() const
{
	String value;
	check(shim()->get_City(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::State() const
{
	String value;
	check(shim()->get_State(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderAamvaCardDataReceivedEventArgs<T>::PostalCode() const
{
	String value;
	check(shim()->get_PostalCode(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderReport impl_IMagneticStripeReaderVendorSpecificCardDataReceivedEventArgs<T>::Report() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderReport value = nullptr;
	check(shim()->get_Report(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType impl_IMagneticStripeReaderErrorOccurredEventArgs<T>::Track1Status() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType value = {};
	check(shim()->get_Track1Status(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType impl_IMagneticStripeReaderErrorOccurredEventArgs<T>::Track2Status() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType value = {};
	check(shim()->get_Track2Status(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType impl_IMagneticStripeReaderErrorOccurredEventArgs<T>::Track3Status() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType value = {};
	check(shim()->get_Track3Status(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType impl_IMagneticStripeReaderErrorOccurredEventArgs<T>::Track4Status() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackErrorType value = {};
	check(shim()->get_Track4Status(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::UnifiedPosErrorData impl_IMagneticStripeReaderErrorOccurredEventArgs<T>::ErrorData() const
{
	Windows::Devices::PointOfService::UnifiedPosErrorData value = nullptr;
	check(shim()->get_ErrorData(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderReport impl_IMagneticStripeReaderErrorOccurredEventArgs<T>::PartialInputData() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderReport value = nullptr;
	check(shim()->get_PartialInputData(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderStatus impl_IMagneticStripeReaderStatusUpdatedEventArgs<T>::Status() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderStatusUpdatedEventArgs<T>::ExtendedStatus() const
{
	unsigned value = {};
	check(shim()->get_ExtendedStatus(&value));
	return value;
}

template <typename T> String impl_IMagneticStripeReaderCapabilities<T>::CardAuthentication() const
{
	String value;
	check(shim()->get_CardAuthentication(put(value)));
	return value;
}

template <typename T> unsigned impl_IMagneticStripeReaderCapabilities<T>::SupportedEncryptionAlgorithms() const
{
	unsigned value = {};
	check(shim()->get_SupportedEncryptionAlgorithms(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderAuthenticationLevel impl_IMagneticStripeReaderCapabilities<T>::AuthenticationLevel() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderAuthenticationLevel value = {};
	check(shim()->get_AuthenticationLevel(&value));
	return value;
}

template <typename T> bool impl_IMagneticStripeReaderCapabilities<T>::IsIsoSupported() const
{
	bool value = {};
	check(shim()->get_IsIsoSupported(put(value)));
	return value;
}

template <typename T> bool impl_IMagneticStripeReaderCapabilities<T>::IsJisOneSupported() const
{
	bool value = {};
	check(shim()->get_IsJisOneSupported(put(value)));
	return value;
}

template <typename T> bool impl_IMagneticStripeReaderCapabilities<T>::IsJisTwoSupported() const
{
	bool value = {};
	check(shim()->get_IsJisTwoSupported(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::UnifiedPosPowerReportingType impl_IMagneticStripeReaderCapabilities<T>::PowerReportingType() const
{
	Windows::Devices::PointOfService::UnifiedPosPowerReportingType value = {};
	check(shim()->get_PowerReportingType(&value));
	return value;
}

template <typename T> bool impl_IMagneticStripeReaderCapabilities<T>::IsStatisticsReportingSupported() const
{
	bool value = {};
	check(shim()->get_IsStatisticsReportingSupported(put(value)));
	return value;
}

template <typename T> bool impl_IMagneticStripeReaderCapabilities<T>::IsStatisticsUpdatingSupported() const
{
	bool value = {};
	check(shim()->get_IsStatisticsUpdatingSupported(put(value)));
	return value;
}

template <typename T> bool impl_IMagneticStripeReaderCapabilities<T>::IsTrackDataMaskingSupported() const
{
	bool value = {};
	check(shim()->get_IsTrackDataMaskingSupported(put(value)));
	return value;
}

template <typename T> bool impl_IMagneticStripeReaderCapabilities<T>::IsTransmitSentinelsSupported() const
{
	bool value = {};
	check(shim()->get_IsTransmitSentinelsSupported(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> impl_IMagneticStripeReaderStatics<T>::GetDefaultAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> result;
	check(shim()->abi_GetDefaultAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> impl_IMagneticStripeReaderStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> result;
	check(shim()->abi_FromIdAsync(get(deviceId), put(result)));
	return result;
}

template <typename T> String impl_IMagneticStripeReaderStatics<T>::GetDeviceSelector() const
{
	String value;
	check(shim()->abi_GetDeviceSelector(put(value)));
	return value;
}

template <typename T> String impl_IMagneticStripeReader<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderCapabilities impl_IMagneticStripeReader<T>::Capabilities() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderCapabilities value = nullptr;
	check(shim()->get_Capabilities(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderAuthenticationProtocol impl_IMagneticStripeReader<T>::DeviceAuthenticationProtocol() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderAuthenticationProtocol value = {};
	check(shim()->get_DeviceAuthenticationProtocol(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IMagneticStripeReader<T>::CheckHealthAsync(Windows::Devices::PointOfService::UnifiedPosHealthCheckLevel const level) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_CheckHealthAsync(level, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::ClaimedMagneticStripeReader> impl_IMagneticStripeReader<T>::ClaimReaderAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::ClaimedMagneticStripeReader> operation;
	check(shim()->abi_ClaimReaderAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IMagneticStripeReader<T>::RetrieveStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation;
	check(shim()->abi_RetrieveStatisticsAsync(get(statisticsCategories), put(operation)));
	return operation;
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderErrorReportingType impl_IMagneticStripeReader<T>::GetErrorReportingType() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderErrorReportingType value = {};
	check(shim()->abi_GetErrorReportingType(&value));
	return value;
}

template <typename T> long long impl_IMagneticStripeReader<T>::StatusUpdated(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::MagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderStatusUpdatedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_StatusUpdated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMagneticStripeReader<T>::StatusUpdated(F handler) const
{
	return StatusUpdated(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::MagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderStatusUpdatedEventArgs>(handler));
}

template <typename T> void impl_IMagneticStripeReader<T>::StatusUpdated(long long const token) const
{
	check(shim()->remove_StatusUpdated(token));
}

template <typename T> unsigned impl_IPosPrinterCharacterSetIdsStatics<T>::Utf16LE() const
{
	unsigned value = {};
	check(shim()->get_Utf16LE(&value));
	return value;
}

template <typename T> unsigned impl_IPosPrinterCharacterSetIdsStatics<T>::Ascii() const
{
	unsigned value = {};
	check(shim()->get_Ascii(&value));
	return value;
}

template <typename T> unsigned impl_IPosPrinterCharacterSetIdsStatics<T>::Ansi() const
{
	unsigned value = {};
	check(shim()->get_Ansi(&value));
	return value;
}

template <typename T> bool impl_ICommonPosPrintStationCapabilities<T>::IsPrinterPresent() const
{
	bool value = {};
	check(shim()->get_IsPrinterPresent(put(value)));
	return value;
}

template <typename T> bool impl_ICommonPosPrintStationCapabilities<T>::IsDualColorSupported() const
{
	bool value = {};
	check(shim()->get_IsDualColorSupported(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::PosPrinterColorCapabilities impl_ICommonPosPrintStationCapabilities<T>::ColorCartridgeCapabilities() const
{
	Windows::Devices::PointOfService::PosPrinterColorCapabilities value = {};
	check(shim()->get_ColorCartridgeCapabilities(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::PosPrinterCartridgeSensors impl_ICommonPosPrintStationCapabilities<T>::CartridgeSensors() const
{
	Windows::Devices::PointOfService::PosPrinterCartridgeSensors value = {};
	check(shim()->get_CartridgeSensors(&value));
	return value;
}

template <typename T> bool impl_ICommonPosPrintStationCapabilities<T>::IsBoldSupported() const
{
	bool value = {};
	check(shim()->get_IsBoldSupported(put(value)));
	return value;
}

template <typename T> bool impl_ICommonPosPrintStationCapabilities<T>::IsItalicSupported() const
{
	bool value = {};
	check(shim()->get_IsItalicSupported(put(value)));
	return value;
}

template <typename T> bool impl_ICommonPosPrintStationCapabilities<T>::IsUnderlineSupported() const
{
	bool value = {};
	check(shim()->get_IsUnderlineSupported(put(value)));
	return value;
}

template <typename T> bool impl_ICommonPosPrintStationCapabilities<T>::IsDoubleHighPrintSupported() const
{
	bool value = {};
	check(shim()->get_IsDoubleHighPrintSupported(put(value)));
	return value;
}

template <typename T> bool impl_ICommonPosPrintStationCapabilities<T>::IsDoubleWidePrintSupported() const
{
	bool value = {};
	check(shim()->get_IsDoubleWidePrintSupported(put(value)));
	return value;
}

template <typename T> bool impl_ICommonPosPrintStationCapabilities<T>::IsDoubleHighDoubleWidePrintSupported() const
{
	bool value = {};
	check(shim()->get_IsDoubleHighDoubleWidePrintSupported(put(value)));
	return value;
}

template <typename T> bool impl_ICommonPosPrintStationCapabilities<T>::IsPaperEmptySensorSupported() const
{
	bool value = {};
	check(shim()->get_IsPaperEmptySensorSupported(put(value)));
	return value;
}

template <typename T> bool impl_ICommonPosPrintStationCapabilities<T>::IsPaperNearEndSensorSupported() const
{
	bool value = {};
	check(shim()->get_IsPaperNearEndSensorSupported(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_ICommonPosPrintStationCapabilities<T>::SupportedCharactersPerLine() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_SupportedCharactersPerLine(put(value)));
	return value;
}

template <typename T> bool impl_ICommonReceiptSlipCapabilities<T>::IsBarcodeSupported() const
{
	bool value = {};
	check(shim()->get_IsBarcodeSupported(put(value)));
	return value;
}

template <typename T> bool impl_ICommonReceiptSlipCapabilities<T>::IsBitmapSupported() const
{
	bool value = {};
	check(shim()->get_IsBitmapSupported(put(value)));
	return value;
}

template <typename T> bool impl_ICommonReceiptSlipCapabilities<T>::IsLeft90RotationSupported() const
{
	bool value = {};
	check(shim()->get_IsLeft90RotationSupported(put(value)));
	return value;
}

template <typename T> bool impl_ICommonReceiptSlipCapabilities<T>::IsRight90RotationSupported() const
{
	bool value = {};
	check(shim()->get_IsRight90RotationSupported(put(value)));
	return value;
}

template <typename T> bool impl_ICommonReceiptSlipCapabilities<T>::Is180RotationSupported() const
{
	bool value = {};
	check(shim()->get_Is180RotationSupported(put(value)));
	return value;
}

template <typename T> bool impl_ICommonReceiptSlipCapabilities<T>::IsPrintAreaSupported() const
{
	bool value = {};
	check(shim()->get_IsPrintAreaSupported(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::PosPrinterRuledLineCapabilities impl_ICommonReceiptSlipCapabilities<T>::RuledLineCapabilities() const
{
	Windows::Devices::PointOfService::PosPrinterRuledLineCapabilities value = {};
	check(shim()->get_RuledLineCapabilities(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::PointOfService::PosPrinterRotation> impl_ICommonReceiptSlipCapabilities<T>::SupportedBarcodeRotations() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::PointOfService::PosPrinterRotation> value;
	check(shim()->get_SupportedBarcodeRotations(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::PointOfService::PosPrinterRotation> impl_ICommonReceiptSlipCapabilities<T>::SupportedBitmapRotations() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::PointOfService::PosPrinterRotation> value;
	check(shim()->get_SupportedBitmapRotations(put(value)));
	return value;
}

template <typename T> bool impl_IReceiptPrinterCapabilities<T>::CanCutPaper() const
{
	bool value = {};
	check(shim()->get_CanCutPaper(put(value)));
	return value;
}

template <typename T> bool impl_IReceiptPrinterCapabilities<T>::IsStampSupported() const
{
	bool value = {};
	check(shim()->get_IsStampSupported(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::PosPrinterMarkFeedCapabilities impl_IReceiptPrinterCapabilities<T>::MarkFeedCapabilities() const
{
	Windows::Devices::PointOfService::PosPrinterMarkFeedCapabilities value = {};
	check(shim()->get_MarkFeedCapabilities(&value));
	return value;
}

template <typename T> bool impl_ISlipPrinterCapabilities<T>::IsFullLengthSupported() const
{
	bool value = {};
	check(shim()->get_IsFullLengthSupported(put(value)));
	return value;
}

template <typename T> bool impl_ISlipPrinterCapabilities<T>::IsBothSidesPrintingSupported() const
{
	bool value = {};
	check(shim()->get_IsBothSidesPrintingSupported(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::UnifiedPosPowerReportingType impl_IPosPrinterCapabilities<T>::PowerReportingType() const
{
	Windows::Devices::PointOfService::UnifiedPosPowerReportingType value = {};
	check(shim()->get_PowerReportingType(&value));
	return value;
}

template <typename T> bool impl_IPosPrinterCapabilities<T>::IsStatisticsReportingSupported() const
{
	bool value = {};
	check(shim()->get_IsStatisticsReportingSupported(put(value)));
	return value;
}

template <typename T> bool impl_IPosPrinterCapabilities<T>::IsStatisticsUpdatingSupported() const
{
	bool value = {};
	check(shim()->get_IsStatisticsUpdatingSupported(put(value)));
	return value;
}

template <typename T> unsigned impl_IPosPrinterCapabilities<T>::DefaultCharacterSet() const
{
	unsigned value = {};
	check(shim()->get_DefaultCharacterSet(&value));
	return value;
}

template <typename T> bool impl_IPosPrinterCapabilities<T>::HasCoverSensor() const
{
	bool value = {};
	check(shim()->get_HasCoverSensor(put(value)));
	return value;
}

template <typename T> bool impl_IPosPrinterCapabilities<T>::CanMapCharacterSet() const
{
	bool value = {};
	check(shim()->get_CanMapCharacterSet(put(value)));
	return value;
}

template <typename T> bool impl_IPosPrinterCapabilities<T>::IsTransactionSupported() const
{
	bool value = {};
	check(shim()->get_IsTransactionSupported(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::ReceiptPrinterCapabilities impl_IPosPrinterCapabilities<T>::Receipt() const
{
	Windows::Devices::PointOfService::ReceiptPrinterCapabilities value = nullptr;
	check(shim()->get_Receipt(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::SlipPrinterCapabilities impl_IPosPrinterCapabilities<T>::Slip() const
{
	Windows::Devices::PointOfService::SlipPrinterCapabilities value = nullptr;
	check(shim()->get_Slip(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::JournalPrinterCapabilities impl_IPosPrinterCapabilities<T>::Journal() const
{
	Windows::Devices::PointOfService::JournalPrinterCapabilities value = nullptr;
	check(shim()->get_Journal(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::PosPrinterStatusKind impl_IPosPrinterStatus<T>::StatusKind() const
{
	Windows::Devices::PointOfService::PosPrinterStatusKind value = {};
	check(shim()->get_StatusKind(&value));
	return value;
}

template <typename T> unsigned impl_IPosPrinterStatus<T>::ExtendedStatus() const
{
	unsigned value = {};
	check(shim()->get_ExtendedStatus(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::PosPrinterStatus impl_IPosPrinterStatusUpdatedEventArgs<T>::Status() const
{
	Windows::Devices::PointOfService::PosPrinterStatus value = nullptr;
	check(shim()->get_Status(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::PosPrinter> impl_IPosPrinterStatics<T>::GetDefaultAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::PosPrinter> result;
	check(shim()->abi_GetDefaultAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::PosPrinter> impl_IPosPrinterStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::PosPrinter> result;
	check(shim()->abi_FromIdAsync(get(deviceId), put(result)));
	return result;
}

template <typename T> String impl_IPosPrinterStatics<T>::GetDeviceSelector() const
{
	String value;
	check(shim()->abi_GetDeviceSelector(put(value)));
	return value;
}

template <typename T> String impl_IPosPrinter<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::PosPrinterCapabilities impl_IPosPrinter<T>::Capabilities() const
{
	Windows::Devices::PointOfService::PosPrinterCapabilities value = nullptr;
	check(shim()->get_Capabilities(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IPosPrinter<T>::SupportedCharacterSets() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_SupportedCharacterSets(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IPosPrinter<T>::SupportedTypeFaces() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_SupportedTypeFaces(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::PosPrinterStatus impl_IPosPrinter<T>::Status() const
{
	Windows::Devices::PointOfService::PosPrinterStatus value = nullptr;
	check(shim()->get_Status(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::ClaimedPosPrinter> impl_IPosPrinter<T>::ClaimPrinterAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::ClaimedPosPrinter> operation;
	check(shim()->abi_ClaimPrinterAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IPosPrinter<T>::CheckHealthAsync(Windows::Devices::PointOfService::UnifiedPosHealthCheckLevel const level) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_CheckHealthAsync(level, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IPosPrinter<T>::GetStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_GetStatisticsAsync(get(statisticsCategories), put(operation)));
	return operation;
}

template <typename T> long long impl_IPosPrinter<T>::StatusUpdated(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::PosPrinter, Windows::Devices::PointOfService::PosPrinterStatusUpdatedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_StatusUpdated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPosPrinter<T>::StatusUpdated(F handler) const
{
	return StatusUpdated(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::PosPrinter, Windows::Devices::PointOfService::PosPrinterStatusUpdatedEventArgs>(handler));
}

template <typename T> void impl_IPosPrinter<T>::StatusUpdated(long long const token) const
{
	check(shim()->remove_StatusUpdated(token));
}

template <typename T> void impl_IPosPrinterJob<T>::Print(StringReference const & data) const
{
	check(shim()->abi_Print(get(data)));
}

template <typename T> void impl_IPosPrinterJob<T>::PrintLine(StringReference const & data) const
{
	check(shim()->abi_PrintLine(get(data)));
}

template <typename T> void impl_IPosPrinterJob<T>::PrintLine() const
{
	check(shim()->abi_PrintNewline());
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IPosPrinterJob<T>::ExecuteAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_ExecuteAsync(put(operation)));
	return operation;
}

template <typename T> void impl_IReceiptOrSlipJob<T>::SetBarcodeRotation(Windows::Devices::PointOfService::PosPrinterRotation const value) const
{
	check(shim()->abi_SetBarcodeRotation(value));
}

template <typename T> void impl_IReceiptOrSlipJob<T>::SetPrintRotation(Windows::Devices::PointOfService::PosPrinterRotation const value, bool const includeBitmaps) const
{
	check(shim()->abi_SetPrintRotation(value, includeBitmaps));
}

template <typename T> void impl_IReceiptOrSlipJob<T>::SetPrintArea(Windows::Foundation::Rect const & value) const
{
	check(shim()->abi_SetPrintArea(value));
}

template <typename T> void impl_IReceiptOrSlipJob<T>::SetBitmap(unsigned const bitmapNumber, Windows::Graphics::Imaging::BitmapFrame const & bitmap, Windows::Devices::PointOfService::PosPrinterAlignment const alignment) const
{
	check(shim()->abi_SetBitmap(bitmapNumber, get(bitmap), alignment));
}

template <typename T> void impl_IReceiptOrSlipJob<T>::SetBitmap(unsigned const bitmapNumber, Windows::Graphics::Imaging::BitmapFrame const & bitmap, Windows::Devices::PointOfService::PosPrinterAlignment const alignment, unsigned const width) const
{
	check(shim()->abi_SetBitmapCustomWidthStandardAlign(bitmapNumber, get(bitmap), alignment, width));
}

template <typename T> void impl_IReceiptOrSlipJob<T>::SetCustomAlignedBitmap(unsigned const bitmapNumber, Windows::Graphics::Imaging::BitmapFrame const & bitmap, unsigned const alignmentDistance) const
{
	check(shim()->abi_SetCustomAlignedBitmap(bitmapNumber, get(bitmap), alignmentDistance));
}

template <typename T> void impl_IReceiptOrSlipJob<T>::SetCustomAlignedBitmap(unsigned const bitmapNumber, Windows::Graphics::Imaging::BitmapFrame const & bitmap, unsigned const alignmentDistance, unsigned const width) const
{
	check(shim()->abi_SetBitmapCustomWidthCustomAlign(bitmapNumber, get(bitmap), alignmentDistance, width));
}

template <typename T> void impl_IReceiptOrSlipJob<T>::PrintSavedBitmap(unsigned const bitmapNumber) const
{
	check(shim()->abi_PrintSavedBitmap(bitmapNumber));
}

template <typename T> void impl_IReceiptOrSlipJob<T>::DrawRuledLine(StringReference const & positionList, Windows::Devices::PointOfService::PosPrinterLineDirection const lineDirection, unsigned const lineWidth, Windows::Devices::PointOfService::PosPrinterLineStyle const lineStyle, unsigned const lineColor) const
{
	check(shim()->abi_DrawRuledLine(get(positionList), lineDirection, lineWidth, lineStyle, lineColor));
}

template <typename T> void impl_IReceiptOrSlipJob<T>::PrintBarcode(StringReference const & data, unsigned const symbology, unsigned const height, unsigned const width, Windows::Devices::PointOfService::PosPrinterBarcodeTextPosition const textPosition, Windows::Devices::PointOfService::PosPrinterAlignment const alignment) const
{
	check(shim()->abi_PrintBarcode(get(data), symbology, height, width, textPosition, alignment));
}

template <typename T> void impl_IReceiptOrSlipJob<T>::PrintBarcodeCustomAlign(StringReference const & data, unsigned const symbology, unsigned const height, unsigned const width, Windows::Devices::PointOfService::PosPrinterBarcodeTextPosition const textPosition, unsigned const alignmentDistance) const
{
	check(shim()->abi_PrintBarcodeCustomAlign(get(data), symbology, height, width, textPosition, alignmentDistance));
}

template <typename T> void impl_IReceiptOrSlipJob<T>::PrintBitmap(Windows::Graphics::Imaging::BitmapFrame const & bitmap, Windows::Devices::PointOfService::PosPrinterAlignment const alignment) const
{
	check(shim()->abi_PrintBitmap(get(bitmap), alignment));
}

template <typename T> void impl_IReceiptOrSlipJob<T>::PrintBitmap(Windows::Graphics::Imaging::BitmapFrame const & bitmap, Windows::Devices::PointOfService::PosPrinterAlignment const alignment, unsigned const width) const
{
	check(shim()->abi_PrintBitmapCustomWidthStandardAlign(get(bitmap), alignment, width));
}

template <typename T> void impl_IReceiptOrSlipJob<T>::PrintCustomAlignedBitmap(Windows::Graphics::Imaging::BitmapFrame const & bitmap, unsigned const alignmentDistance) const
{
	check(shim()->abi_PrintCustomAlignedBitmap(get(bitmap), alignmentDistance));
}

template <typename T> void impl_IReceiptOrSlipJob<T>::PrintCustomAlignedBitmap(Windows::Graphics::Imaging::BitmapFrame const & bitmap, unsigned const alignmentDistance, unsigned const width) const
{
	check(shim()->abi_PrintBitmapCustomWidthCustomAlign(get(bitmap), alignmentDistance, width));
}

template <typename T> void impl_IReceiptPrintJob<T>::MarkFeed(Windows::Devices::PointOfService::PosPrinterMarkFeedKind const kind) const
{
	check(shim()->abi_MarkFeed(kind));
}

template <typename T> void impl_IReceiptPrintJob<T>::CutPaper(double const percentage) const
{
	check(shim()->abi_CutPaper(percentage));
}

template <typename T> void impl_IReceiptPrintJob<T>::CutPaper() const
{
	check(shim()->abi_CutPaperDefault());
}

template <typename T> void impl_ICommonClaimedPosPrinterStation<T>::CharactersPerLine(unsigned const value) const
{
	check(shim()->put_CharactersPerLine(value));
}

template <typename T> unsigned impl_ICommonClaimedPosPrinterStation<T>::CharactersPerLine() const
{
	unsigned value = {};
	check(shim()->get_CharactersPerLine(&value));
	return value;
}

template <typename T> void impl_ICommonClaimedPosPrinterStation<T>::LineHeight(unsigned const value) const
{
	check(shim()->put_LineHeight(value));
}

template <typename T> unsigned impl_ICommonClaimedPosPrinterStation<T>::LineHeight() const
{
	unsigned value = {};
	check(shim()->get_LineHeight(&value));
	return value;
}

template <typename T> void impl_ICommonClaimedPosPrinterStation<T>::LineSpacing(unsigned const value) const
{
	check(shim()->put_LineSpacing(value));
}

template <typename T> unsigned impl_ICommonClaimedPosPrinterStation<T>::LineSpacing() const
{
	unsigned value = {};
	check(shim()->get_LineSpacing(&value));
	return value;
}

template <typename T> unsigned impl_ICommonClaimedPosPrinterStation<T>::LineWidth() const
{
	unsigned value = {};
	check(shim()->get_LineWidth(&value));
	return value;
}

template <typename T> void impl_ICommonClaimedPosPrinterStation<T>::IsLetterQuality(bool const value) const
{
	check(shim()->put_IsLetterQuality(value));
}

template <typename T> bool impl_ICommonClaimedPosPrinterStation<T>::IsLetterQuality() const
{
	bool value = {};
	check(shim()->get_IsLetterQuality(put(value)));
	return value;
}

template <typename T> bool impl_ICommonClaimedPosPrinterStation<T>::IsPaperNearEnd() const
{
	bool value = {};
	check(shim()->get_IsPaperNearEnd(put(value)));
	return value;
}

template <typename T> void impl_ICommonClaimedPosPrinterStation<T>::ColorCartridge(Windows::Devices::PointOfService::PosPrinterColorCartridge const value) const
{
	check(shim()->put_ColorCartridge(value));
}

template <typename T> Windows::Devices::PointOfService::PosPrinterColorCartridge impl_ICommonClaimedPosPrinterStation<T>::ColorCartridge() const
{
	Windows::Devices::PointOfService::PosPrinterColorCartridge value = {};
	check(shim()->get_ColorCartridge(&value));
	return value;
}

template <typename T> bool impl_ICommonClaimedPosPrinterStation<T>::IsCoverOpen() const
{
	bool value = {};
	check(shim()->get_IsCoverOpen(put(value)));
	return value;
}

template <typename T> bool impl_ICommonClaimedPosPrinterStation<T>::IsCartridgeRemoved() const
{
	bool value = {};
	check(shim()->get_IsCartridgeRemoved(put(value)));
	return value;
}

template <typename T> bool impl_ICommonClaimedPosPrinterStation<T>::IsCartridgeEmpty() const
{
	bool value = {};
	check(shim()->get_IsCartridgeEmpty(put(value)));
	return value;
}

template <typename T> bool impl_ICommonClaimedPosPrinterStation<T>::IsHeadCleaning() const
{
	bool value = {};
	check(shim()->get_IsHeadCleaning(put(value)));
	return value;
}

template <typename T> bool impl_ICommonClaimedPosPrinterStation<T>::IsPaperEmpty() const
{
	bool value = {};
	check(shim()->get_IsPaperEmpty(put(value)));
	return value;
}

template <typename T> bool impl_ICommonClaimedPosPrinterStation<T>::IsReadyToPrint() const
{
	bool value = {};
	check(shim()->get_IsReadyToPrint(put(value)));
	return value;
}

template <typename T> bool impl_ICommonClaimedPosPrinterStation<T>::ValidateData(StringReference const & data) const
{
	bool result = {};
	check(shim()->abi_ValidateData(get(data), put(result)));
	return result;
}

template <typename T> unsigned impl_IClaimedReceiptPrinter<T>::SidewaysMaxLines() const
{
	unsigned value = {};
	check(shim()->get_SidewaysMaxLines(&value));
	return value;
}

template <typename T> unsigned impl_IClaimedReceiptPrinter<T>::SidewaysMaxChars() const
{
	unsigned value = {};
	check(shim()->get_SidewaysMaxChars(&value));
	return value;
}

template <typename T> unsigned impl_IClaimedReceiptPrinter<T>::LinesToPaperCut() const
{
	unsigned value = {};
	check(shim()->get_LinesToPaperCut(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IClaimedReceiptPrinter<T>::PageSize() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_PageSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IClaimedReceiptPrinter<T>::PrintArea() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_PrintArea(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::ReceiptPrintJob impl_IClaimedReceiptPrinter<T>::CreateJob() const
{
	Windows::Devices::PointOfService::ReceiptPrintJob value = nullptr;
	check(shim()->abi_CreateJob(put(value)));
	return value;
}

template <typename T> unsigned impl_IClaimedSlipPrinter<T>::SidewaysMaxLines() const
{
	unsigned value = {};
	check(shim()->get_SidewaysMaxLines(&value));
	return value;
}

template <typename T> unsigned impl_IClaimedSlipPrinter<T>::SidewaysMaxChars() const
{
	unsigned value = {};
	check(shim()->get_SidewaysMaxChars(&value));
	return value;
}

template <typename T> unsigned impl_IClaimedSlipPrinter<T>::MaxLines() const
{
	unsigned value = {};
	check(shim()->get_MaxLines(&value));
	return value;
}

template <typename T> unsigned impl_IClaimedSlipPrinter<T>::LinesNearEndToEnd() const
{
	unsigned value = {};
	check(shim()->get_LinesNearEndToEnd(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::PosPrinterPrintSide impl_IClaimedSlipPrinter<T>::PrintSide() const
{
	Windows::Devices::PointOfService::PosPrinterPrintSide value = {};
	check(shim()->get_PrintSide(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IClaimedSlipPrinter<T>::PageSize() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_PageSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IClaimedSlipPrinter<T>::PrintArea() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_PrintArea(&value));
	return value;
}

template <typename T> void impl_IClaimedSlipPrinter<T>::OpenJaws() const
{
	check(shim()->abi_OpenJaws());
}

template <typename T> void impl_IClaimedSlipPrinter<T>::CloseJaws() const
{
	check(shim()->abi_CloseJaws());
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IClaimedSlipPrinter<T>::InsertSlipAsync(Windows::Foundation::TimeSpan const & timeout) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_InsertSlipAsync(timeout, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IClaimedSlipPrinter<T>::RemoveSlipAsync(Windows::Foundation::TimeSpan const & timeout) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_RemoveSlipAsync(timeout, put(result)));
	return result;
}

template <typename T> void impl_IClaimedSlipPrinter<T>::ChangePrintSide(Windows::Devices::PointOfService::PosPrinterPrintSide const printSide) const
{
	check(shim()->abi_ChangePrintSide(printSide));
}

template <typename T> Windows::Devices::PointOfService::SlipPrintJob impl_IClaimedSlipPrinter<T>::CreateJob() const
{
	Windows::Devices::PointOfService::SlipPrintJob value = nullptr;
	check(shim()->abi_CreateJob(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::JournalPrintJob impl_IClaimedJournalPrinter<T>::CreateJob() const
{
	Windows::Devices::PointOfService::JournalPrintJob value = nullptr;
	check(shim()->abi_CreateJob(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::CashDrawerStatus impl_ICashDrawerStatusUpdatedEventArgs<T>::Status() const
{
	Windows::Devices::PointOfService::CashDrawerStatus value = nullptr;
	check(shim()->get_Status(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::CashDrawerStatusKind impl_ICashDrawerStatus<T>::StatusKind() const
{
	Windows::Devices::PointOfService::CashDrawerStatusKind value = {};
	check(shim()->get_StatusKind(&value));
	return value;
}

template <typename T> unsigned impl_ICashDrawerStatus<T>::ExtendedStatus() const
{
	unsigned value = {};
	check(shim()->get_ExtendedStatus(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::UnifiedPosPowerReportingType impl_ICashDrawerCapabilities<T>::PowerReportingType() const
{
	Windows::Devices::PointOfService::UnifiedPosPowerReportingType value = {};
	check(shim()->get_PowerReportingType(&value));
	return value;
}

template <typename T> bool impl_ICashDrawerCapabilities<T>::IsStatisticsReportingSupported() const
{
	bool value = {};
	check(shim()->get_IsStatisticsReportingSupported(put(value)));
	return value;
}

template <typename T> bool impl_ICashDrawerCapabilities<T>::IsStatisticsUpdatingSupported() const
{
	bool value = {};
	check(shim()->get_IsStatisticsUpdatingSupported(put(value)));
	return value;
}

template <typename T> bool impl_ICashDrawerCapabilities<T>::IsStatusReportingSupported() const
{
	bool value = {};
	check(shim()->get_IsStatusReportingSupported(put(value)));
	return value;
}

template <typename T> bool impl_ICashDrawerCapabilities<T>::IsStatusMultiDrawerDetectSupported() const
{
	bool value = {};
	check(shim()->get_IsStatusMultiDrawerDetectSupported(put(value)));
	return value;
}

template <typename T> bool impl_ICashDrawerCapabilities<T>::IsDrawerOpenSensorAvailable() const
{
	bool value = {};
	check(shim()->get_IsDrawerOpenSensorAvailable(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::CashDrawer impl_ICashDrawerEventSourceEventArgs<T>::CashDrawer() const
{
	Windows::Devices::PointOfService::CashDrawer drawer = nullptr;
	check(shim()->get_CashDrawer(put(drawer)));
	return drawer;
}

template <typename T> long long impl_ICashDrawerEventSource<T>::DrawerClosed(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::CashDrawerEventSource, Windows::Devices::PointOfService::CashDrawerClosedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_DrawerClosed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICashDrawerEventSource<T>::DrawerClosed(F handler) const
{
	return DrawerClosed(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::CashDrawerEventSource, Windows::Devices::PointOfService::CashDrawerClosedEventArgs>(handler));
}

template <typename T> void impl_ICashDrawerEventSource<T>::DrawerClosed(long long const token) const
{
	check(shim()->remove_DrawerClosed(token));
}

template <typename T> long long impl_ICashDrawerEventSource<T>::DrawerOpened(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::CashDrawerEventSource, Windows::Devices::PointOfService::CashDrawerOpenedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_DrawerOpened(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICashDrawerEventSource<T>::DrawerOpened(F handler) const
{
	return DrawerOpened(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::CashDrawerEventSource, Windows::Devices::PointOfService::CashDrawerOpenedEventArgs>(handler));
}

template <typename T> void impl_ICashDrawerEventSource<T>::DrawerOpened(long long const token) const
{
	check(shim()->remove_DrawerOpened(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::CashDrawer> impl_ICashDrawerStatics<T>::GetDefaultAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::CashDrawer> result;
	check(shim()->abi_GetDefaultAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::CashDrawer> impl_ICashDrawerStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::CashDrawer> result;
	check(shim()->abi_FromIdAsync(get(deviceId), put(result)));
	return result;
}

template <typename T> String impl_ICashDrawerStatics<T>::GetDeviceSelector() const
{
	String value;
	check(shim()->abi_GetDeviceSelector(put(value)));
	return value;
}

template <typename T> String impl_ICashDrawer<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::CashDrawerCapabilities impl_ICashDrawer<T>::Capabilities() const
{
	Windows::Devices::PointOfService::CashDrawerCapabilities value = nullptr;
	check(shim()->get_Capabilities(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::CashDrawerStatus impl_ICashDrawer<T>::Status() const
{
	Windows::Devices::PointOfService::CashDrawerStatus value = nullptr;
	check(shim()->get_Status(put(value)));
	return value;
}

template <typename T> bool impl_ICashDrawer<T>::IsDrawerOpen() const
{
	bool value = {};
	check(shim()->get_IsDrawerOpen(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::CashDrawerEventSource impl_ICashDrawer<T>::DrawerEventSource() const
{
	Windows::Devices::PointOfService::CashDrawerEventSource value = nullptr;
	check(shim()->get_DrawerEventSource(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::ClaimedCashDrawer> impl_ICashDrawer<T>::ClaimDrawerAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::ClaimedCashDrawer> operation;
	check(shim()->abi_ClaimDrawerAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICashDrawer<T>::CheckHealthAsync(Windows::Devices::PointOfService::UnifiedPosHealthCheckLevel const level) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_CheckHealthAsync(level, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICashDrawer<T>::GetStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_GetStatisticsAsync(get(statisticsCategories), put(operation)));
	return operation;
}

template <typename T> long long impl_ICashDrawer<T>::StatusUpdated(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::CashDrawer, Windows::Devices::PointOfService::CashDrawerStatusUpdatedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_StatusUpdated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICashDrawer<T>::StatusUpdated(F handler) const
{
	return StatusUpdated(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::CashDrawer, Windows::Devices::PointOfService::CashDrawerStatusUpdatedEventArgs>(handler));
}

template <typename T> void impl_ICashDrawer<T>::StatusUpdated(long long const token) const
{
	check(shim()->remove_StatusUpdated(token));
}

template <typename T> void impl_ICashDrawerCloseAlarm<T>::AlarmTimeout(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_AlarmTimeout(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_ICashDrawerCloseAlarm<T>::AlarmTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_AlarmTimeout(&value));
	return value;
}

template <typename T> void impl_ICashDrawerCloseAlarm<T>::BeepFrequency(unsigned const value) const
{
	check(shim()->put_BeepFrequency(value));
}

template <typename T> unsigned impl_ICashDrawerCloseAlarm<T>::BeepFrequency() const
{
	unsigned value = {};
	check(shim()->get_BeepFrequency(&value));
	return value;
}

template <typename T> void impl_ICashDrawerCloseAlarm<T>::BeepDuration(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_BeepDuration(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_ICashDrawerCloseAlarm<T>::BeepDuration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_BeepDuration(&value));
	return value;
}

template <typename T> void impl_ICashDrawerCloseAlarm<T>::BeepDelay(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_BeepDelay(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_ICashDrawerCloseAlarm<T>::BeepDelay() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_BeepDelay(&value));
	return value;
}

template <typename T> long long impl_ICashDrawerCloseAlarm<T>::AlarmTimeoutExpired(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::CashDrawerCloseAlarm, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_AlarmTimeoutExpired(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICashDrawerCloseAlarm<T>::AlarmTimeoutExpired(F handler) const
{
	return AlarmTimeoutExpired(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::CashDrawerCloseAlarm, IInspectable>(handler));
}

template <typename T> void impl_ICashDrawerCloseAlarm<T>::AlarmTimeoutExpired(long long const token) const
{
	check(shim()->remove_AlarmTimeoutExpired(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ICashDrawerCloseAlarm<T>::StartAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_StartAsync(put(result)));
	return result;
}

template <typename T> String impl_IClaimedBarcodeScanner<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> bool impl_IClaimedBarcodeScanner<T>::IsEnabled() const
{
	bool value = {};
	check(shim()->get_IsEnabled(put(value)));
	return value;
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::IsDisabledOnDataReceived(bool const value) const
{
	check(shim()->put_IsDisabledOnDataReceived(value));
}

template <typename T> bool impl_IClaimedBarcodeScanner<T>::IsDisabledOnDataReceived() const
{
	bool value = {};
	check(shim()->get_IsDisabledOnDataReceived(put(value)));
	return value;
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::IsDecodeDataEnabled(bool const value) const
{
	check(shim()->put_IsDecodeDataEnabled(value));
}

template <typename T> bool impl_IClaimedBarcodeScanner<T>::IsDecodeDataEnabled() const
{
	bool value = {};
	check(shim()->get_IsDecodeDataEnabled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedBarcodeScanner<T>::EnableAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_EnableAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedBarcodeScanner<T>::DisableAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_DisableAsync(put(result)));
	return result;
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::RetainDevice() const
{
	check(shim()->abi_RetainDevice());
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedBarcodeScanner<T>::SetActiveSymbologiesAsync(Windows::Foundation::Collections::IIterable<unsigned> const & symbologies) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_SetActiveSymbologiesAsync(get(symbologies), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedBarcodeScanner<T>::ResetStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_ResetStatisticsAsync(get(statisticsCategories), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedBarcodeScanner<T>::UpdateStatisticsAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & statistics) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_UpdateStatisticsAsync(get(statistics), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedBarcodeScanner<T>::SetActiveProfileAsync(StringReference const & profile) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_SetActiveProfileAsync(get(profile), put(result)));
	return result;
}

template <typename T> long long impl_IClaimedBarcodeScanner<T>::DataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerDataReceivedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_DataReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IClaimedBarcodeScanner<T>::DataReceived(F handler) const
{
	return DataReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerDataReceivedEventArgs>(handler));
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::DataReceived(long long const token) const
{
	check(shim()->remove_DataReceived(token));
}

template <typename T> long long impl_IClaimedBarcodeScanner<T>::TriggerPressed(Windows::Foundation::IEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner> const & handler) const
{
	long long token = {};
	check(shim()->add_TriggerPressed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IClaimedBarcodeScanner<T>::TriggerPressed(F handler) const
{
	return TriggerPressed(Windows::Foundation::EventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner>(handler));
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::TriggerPressed(long long const token) const
{
	check(shim()->remove_TriggerPressed(token));
}

template <typename T> long long impl_IClaimedBarcodeScanner<T>::TriggerReleased(Windows::Foundation::IEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner> const & handler) const
{
	long long token = {};
	check(shim()->add_TriggerReleased(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IClaimedBarcodeScanner<T>::TriggerReleased(F handler) const
{
	return TriggerReleased(Windows::Foundation::EventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner>(handler));
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::TriggerReleased(long long const token) const
{
	check(shim()->remove_TriggerReleased(token));
}

template <typename T> long long impl_IClaimedBarcodeScanner<T>::ReleaseDeviceRequested(Windows::Foundation::IEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner> const & handler) const
{
	long long token = {};
	check(shim()->add_ReleaseDeviceRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IClaimedBarcodeScanner<T>::ReleaseDeviceRequested(F handler) const
{
	return ReleaseDeviceRequested(Windows::Foundation::EventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner>(handler));
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::ReleaseDeviceRequested(long long const token) const
{
	check(shim()->remove_ReleaseDeviceRequested(token));
}

template <typename T> long long impl_IClaimedBarcodeScanner<T>::ImagePreviewReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerImagePreviewReceivedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ImagePreviewReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IClaimedBarcodeScanner<T>::ImagePreviewReceived(F handler) const
{
	return ImagePreviewReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerImagePreviewReceivedEventArgs>(handler));
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::ImagePreviewReceived(long long const token) const
{
	check(shim()->remove_ImagePreviewReceived(token));
}

template <typename T> long long impl_IClaimedBarcodeScanner<T>::ErrorOccurred(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerErrorOccurredEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ErrorOccurred(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IClaimedBarcodeScanner<T>::ErrorOccurred(F handler) const
{
	return ErrorOccurred(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::ClaimedBarcodeScanner, Windows::Devices::PointOfService::BarcodeScannerErrorOccurredEventArgs>(handler));
}

template <typename T> void impl_IClaimedBarcodeScanner<T>::ErrorOccurred(long long const token) const
{
	check(shim()->remove_ErrorOccurred(token));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedBarcodeScanner1<T>::StartSoftwareTriggerAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_StartSoftwareTriggerAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedBarcodeScanner1<T>::StopSoftwareTriggerAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_StopSoftwareTriggerAsync(put(result)));
	return result;
}

template <typename T> String impl_IClaimedMagneticStripeReader<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> bool impl_IClaimedMagneticStripeReader<T>::IsEnabled() const
{
	bool value = {};
	check(shim()->get_IsEnabled(put(value)));
	return value;
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::IsDisabledOnDataReceived(bool const value) const
{
	check(shim()->put_IsDisabledOnDataReceived(value));
}

template <typename T> bool impl_IClaimedMagneticStripeReader<T>::IsDisabledOnDataReceived() const
{
	bool value = {};
	check(shim()->get_IsDisabledOnDataReceived(put(value)));
	return value;
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::IsDecodeDataEnabled(bool const value) const
{
	check(shim()->put_IsDecodeDataEnabled(value));
}

template <typename T> bool impl_IClaimedMagneticStripeReader<T>::IsDecodeDataEnabled() const
{
	bool value = {};
	check(shim()->get_IsDecodeDataEnabled(put(value)));
	return value;
}

template <typename T> bool impl_IClaimedMagneticStripeReader<T>::IsDeviceAuthenticated() const
{
	bool value = {};
	check(shim()->get_IsDeviceAuthenticated(put(value)));
	return value;
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::DataEncryptionAlgorithm(unsigned const value) const
{
	check(shim()->put_DataEncryptionAlgorithm(value));
}

template <typename T> unsigned impl_IClaimedMagneticStripeReader<T>::DataEncryptionAlgorithm() const
{
	unsigned value = {};
	check(shim()->get_DataEncryptionAlgorithm(&value));
	return value;
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::TracksToRead(Windows::Devices::PointOfService::MagneticStripeReaderTrackIds const value) const
{
	check(shim()->put_TracksToRead(value));
}

template <typename T> Windows::Devices::PointOfService::MagneticStripeReaderTrackIds impl_IClaimedMagneticStripeReader<T>::TracksToRead() const
{
	Windows::Devices::PointOfService::MagneticStripeReaderTrackIds value = {};
	check(shim()->get_TracksToRead(&value));
	return value;
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::IsTransmitSentinelsEnabled(bool const value) const
{
	check(shim()->put_IsTransmitSentinelsEnabled(value));
}

template <typename T> bool impl_IClaimedMagneticStripeReader<T>::IsTransmitSentinelsEnabled() const
{
	bool value = {};
	check(shim()->get_IsTransmitSentinelsEnabled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedMagneticStripeReader<T>::EnableAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_EnableAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedMagneticStripeReader<T>::DisableAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_DisableAsync(put(result)));
	return result;
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::RetainDevice() const
{
	check(shim()->abi_RetainDevice());
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::SetErrorReportingType(Windows::Devices::PointOfService::MagneticStripeReaderErrorReportingType const value) const
{
	check(shim()->abi_SetErrorReportingType(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IClaimedMagneticStripeReader<T>::RetrieveDeviceAuthenticationDataAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation;
	check(shim()->abi_RetrieveDeviceAuthenticationDataAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedMagneticStripeReader<T>::UpdateKeyAsync(StringReference const & key, StringReference const & keyName) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_UpdateKeyAsync(get(key), get(keyName), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedMagneticStripeReader<T>::ResetStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_ResetStatisticsAsync(get(statisticsCategories), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IClaimedMagneticStripeReader<T>::UpdateStatisticsAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & statistics) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_UpdateStatisticsAsync(get(statistics), put(result)));
	return result;
}

template <typename T> long long impl_IClaimedMagneticStripeReader<T>::BankCardDataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderBankCardDataReceivedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_BankCardDataReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IClaimedMagneticStripeReader<T>::BankCardDataReceived(F handler) const
{
	return BankCardDataReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderBankCardDataReceivedEventArgs>(handler));
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::BankCardDataReceived(long long const token) const
{
	check(shim()->remove_BankCardDataReceived(token));
}

template <typename T> long long impl_IClaimedMagneticStripeReader<T>::AamvaCardDataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderAamvaCardDataReceivedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_AamvaCardDataReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IClaimedMagneticStripeReader<T>::AamvaCardDataReceived(F handler) const
{
	return AamvaCardDataReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderAamvaCardDataReceivedEventArgs>(handler));
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::AamvaCardDataReceived(long long const token) const
{
	check(shim()->remove_AamvaCardDataReceived(token));
}

template <typename T> long long impl_IClaimedMagneticStripeReader<T>::VendorSpecificDataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_VendorSpecificDataReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IClaimedMagneticStripeReader<T>::VendorSpecificDataReceived(F handler) const
{
	return VendorSpecificDataReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderVendorSpecificCardDataReceivedEventArgs>(handler));
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::VendorSpecificDataReceived(long long const token) const
{
	check(shim()->remove_VendorSpecificDataReceived(token));
}

template <typename T> long long impl_IClaimedMagneticStripeReader<T>::ReleaseDeviceRequested(Windows::Foundation::IEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader> const & handler) const
{
	long long token = {};
	check(shim()->add_ReleaseDeviceRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IClaimedMagneticStripeReader<T>::ReleaseDeviceRequested(F handler) const
{
	return ReleaseDeviceRequested(Windows::Foundation::EventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader>(handler));
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::ReleaseDeviceRequested(long long const token) const
{
	check(shim()->remove_ReleaseDeviceRequested(token));
}

template <typename T> long long impl_IClaimedMagneticStripeReader<T>::ErrorOccurred(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderErrorOccurredEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ErrorOccurred(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IClaimedMagneticStripeReader<T>::ErrorOccurred(F handler) const
{
	return ErrorOccurred(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::ClaimedMagneticStripeReader, Windows::Devices::PointOfService::MagneticStripeReaderErrorOccurredEventArgs>(handler));
}

template <typename T> void impl_IClaimedMagneticStripeReader<T>::ErrorOccurred(long long const token) const
{
	check(shim()->remove_ErrorOccurred(token));
}

template <typename T> String impl_IClaimedPosPrinter<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> bool impl_IClaimedPosPrinter<T>::IsEnabled() const
{
	bool value = {};
	check(shim()->get_IsEnabled(put(value)));
	return value;
}

template <typename T> void impl_IClaimedPosPrinter<T>::CharacterSet(unsigned const value) const
{
	check(shim()->put_CharacterSet(value));
}

template <typename T> unsigned impl_IClaimedPosPrinter<T>::CharacterSet() const
{
	unsigned value = {};
	check(shim()->get_CharacterSet(&value));
	return value;
}

template <typename T> bool impl_IClaimedPosPrinter<T>::IsCoverOpen() const
{
	bool value = {};
	check(shim()->get_IsCoverOpen(put(value)));
	return value;
}

template <typename T> void impl_IClaimedPosPrinter<T>::IsCharacterSetMappingEnabled(bool const value) const
{
	check(shim()->put_IsCharacterSetMappingEnabled(value));
}

template <typename T> bool impl_IClaimedPosPrinter<T>::IsCharacterSetMappingEnabled() const
{
	bool value = {};
	check(shim()->get_IsCharacterSetMappingEnabled(put(value)));
	return value;
}

template <typename T> void impl_IClaimedPosPrinter<T>::MapMode(Windows::Devices::PointOfService::PosPrinterMapMode const value) const
{
	check(shim()->put_MapMode(value));
}

template <typename T> Windows::Devices::PointOfService::PosPrinterMapMode impl_IClaimedPosPrinter<T>::MapMode() const
{
	Windows::Devices::PointOfService::PosPrinterMapMode value = {};
	check(shim()->get_MapMode(&value));
	return value;
}

template <typename T> Windows::Devices::PointOfService::ClaimedReceiptPrinter impl_IClaimedPosPrinter<T>::Receipt() const
{
	Windows::Devices::PointOfService::ClaimedReceiptPrinter value = nullptr;
	check(shim()->get_Receipt(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::ClaimedSlipPrinter impl_IClaimedPosPrinter<T>::Slip() const
{
	Windows::Devices::PointOfService::ClaimedSlipPrinter value = nullptr;
	check(shim()->get_Slip(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::ClaimedJournalPrinter impl_IClaimedPosPrinter<T>::Journal() const
{
	Windows::Devices::PointOfService::ClaimedJournalPrinter value = nullptr;
	check(shim()->get_Journal(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IClaimedPosPrinter<T>::EnableAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_EnableAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IClaimedPosPrinter<T>::DisableAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_DisableAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IClaimedPosPrinter<T>::RetainDeviceAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_RetainDeviceAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IClaimedPosPrinter<T>::ResetStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_ResetStatisticsAsync(get(statisticsCategories), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IClaimedPosPrinter<T>::UpdateStatisticsAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & statistics) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_UpdateStatisticsAsync(get(statistics), put(result)));
	return result;
}

template <typename T> long long impl_IClaimedPosPrinter<T>::ReleaseDeviceRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedPosPrinter, Windows::Devices::PointOfService::PosPrinterReleaseDeviceRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ReleaseDeviceRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IClaimedPosPrinter<T>::ReleaseDeviceRequested(F handler) const
{
	return ReleaseDeviceRequested(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::ClaimedPosPrinter, Windows::Devices::PointOfService::PosPrinterReleaseDeviceRequestedEventArgs>(handler));
}

template <typename T> void impl_IClaimedPosPrinter<T>::ReleaseDeviceRequested(long long const token) const
{
	check(shim()->remove_ReleaseDeviceRequested(token));
}

template <typename T> String impl_IClaimedCashDrawer<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> bool impl_IClaimedCashDrawer<T>::IsEnabled() const
{
	bool value = {};
	check(shim()->get_IsEnabled(put(value)));
	return value;
}

template <typename T> bool impl_IClaimedCashDrawer<T>::IsDrawerOpen() const
{
	bool value = {};
	check(shim()->get_IsDrawerOpen(put(value)));
	return value;
}

template <typename T> Windows::Devices::PointOfService::CashDrawerCloseAlarm impl_IClaimedCashDrawer<T>::CloseAlarm() const
{
	Windows::Devices::PointOfService::CashDrawerCloseAlarm value = nullptr;
	check(shim()->get_CloseAlarm(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IClaimedCashDrawer<T>::OpenDrawerAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_OpenDrawerAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IClaimedCashDrawer<T>::EnableAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_EnableAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IClaimedCashDrawer<T>::DisableAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_DisableAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IClaimedCashDrawer<T>::RetainDeviceAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_RetainDeviceAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IClaimedCashDrawer<T>::ResetStatisticsAsync(Windows::Foundation::Collections::IIterable<String> const & statisticsCategories) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_ResetStatisticsAsync(get(statisticsCategories), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IClaimedCashDrawer<T>::UpdateStatisticsAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & statistics) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_UpdateStatisticsAsync(get(statistics), put(result)));
	return result;
}

template <typename T> long long impl_IClaimedCashDrawer<T>::ReleaseDeviceRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::PointOfService::ClaimedCashDrawer, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_ReleaseDeviceRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IClaimedCashDrawer<T>::ReleaseDeviceRequested(F handler) const
{
	return ReleaseDeviceRequested(Windows::Foundation::TypedEventHandler<Windows::Devices::PointOfService::ClaimedCashDrawer, IInspectable>(handler));
}

template <typename T> void impl_IClaimedCashDrawer<T>::ReleaseDeviceRequested(long long const token) const
{
	check(shim()->remove_ReleaseDeviceRequested(token));
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Portable {

template <typename T> Windows::Storage::StorageFolder impl_IStorageDeviceStatics<T>::FromId(StringReference const & deviceId) const
{
	Windows::Storage::StorageFolder deviceRoot = nullptr;
	check(shim()->abi_FromId(get(deviceId), put(deviceRoot)));
	return deviceRoot;
}

template <typename T> String impl_IStorageDeviceStatics<T>::GetDeviceSelector() const
{
	String selector;
	check(shim()->abi_GetDeviceSelector(put(selector)));
	return selector;
}

template <typename T> String impl_IServiceDeviceStatics<T>::GetDeviceSelector(Windows::Devices::Portable::ServiceDeviceType const serviceType) const
{
	String selector;
	check(shim()->abi_GetDeviceSelector(serviceType, put(selector)));
	return selector;
}

template <typename T> String impl_IServiceDeviceStatics<T>::GetDeviceSelectorFromServiceId(GUID const serviceId) const
{
	String selector;
	check(shim()->abi_GetDeviceSelectorFromServiceId(serviceId, put(selector)));
	return selector;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Power {

template <typename T> String impl_IBattery<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Power::BatteryReport impl_IBattery<T>::GetReport() const
{
	Windows::Devices::Power::BatteryReport result = nullptr;
	check(shim()->abi_GetReport(put(result)));
	return result;
}

template <typename T> long long impl_IBattery<T>::ReportUpdated(Windows::Foundation::ITypedEventHandler<Windows::Devices::Power::Battery, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_ReportUpdated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBattery<T>::ReportUpdated(F handler) const
{
	return ReportUpdated(Windows::Foundation::TypedEventHandler<Windows::Devices::Power::Battery, IInspectable>(handler));
}

template <typename T> void impl_IBattery<T>::ReportUpdated(long long const token) const
{
	check(shim()->remove_ReportUpdated(token));
}

template <typename T> Windows::Foundation::IReference<int> impl_IBatteryReport<T>::ChargeRateInMilliwatts() const
{
	Windows::Foundation::IReference<int> value;
	check(shim()->get_ChargeRateInMilliwatts(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<int> impl_IBatteryReport<T>::DesignCapacityInMilliwattHours() const
{
	Windows::Foundation::IReference<int> value;
	check(shim()->get_DesignCapacityInMilliwattHours(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<int> impl_IBatteryReport<T>::FullChargeCapacityInMilliwattHours() const
{
	Windows::Foundation::IReference<int> value;
	check(shim()->get_FullChargeCapacityInMilliwattHours(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<int> impl_IBatteryReport<T>::RemainingCapacityInMilliwattHours() const
{
	Windows::Foundation::IReference<int> value;
	check(shim()->get_RemainingCapacityInMilliwattHours(put(value)));
	return value;
}

template <typename T> Windows::System::Power::BatteryStatus impl_IBatteryReport<T>::Status() const
{
	Windows::System::Power::BatteryStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::Power::Battery impl_IBatteryStatics<T>::AggregateBattery() const
{
	Windows::Devices::Power::Battery result = nullptr;
	check(shim()->get_AggregateBattery(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Power::Battery> impl_IBatteryStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Power::Battery> result;
	check(shim()->abi_FromIdAsync(get(deviceId), put(result)));
	return result;
}

template <typename T> String impl_IBatteryStatics<T>::GetDeviceSelector() const
{
	String result;
	check(shim()->abi_GetDeviceSelector(put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Printers {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Printers::Print3DDevice> impl_IPrint3DDeviceStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Printers::Print3DDevice> operation;
	check(shim()->abi_FromIdAsync(get(deviceId), put(operation)));
	return operation;
}

template <typename T> String impl_IPrint3DDeviceStatics<T>::GetDeviceSelector() const
{
	String result;
	check(shim()->abi_GetDeviceSelector(put(result)));
	return result;
}

template <typename T> Windows::Devices::Printers::PrintSchema impl_IPrint3DDevice<T>::PrintSchema() const
{
	Windows::Devices::Printers::PrintSchema value = nullptr;
	check(shim()->get_PrintSchema(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> impl_IPrintSchema<T>::GetDefaultPrintTicketAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> operation;
	check(shim()->abi_GetDefaultPrintTicketAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> impl_IPrintSchema<T>::GetCapabilitiesAsync(Windows::Storage::Streams::IRandomAccessStreamWithContentType const & constrainTicket) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> operation;
	check(shim()->abi_GetCapabilitiesAsync(get(constrainTicket), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> impl_IPrintSchema<T>::MergeAndValidateWithDefaultPrintTicketAsync(Windows::Storage::Streams::IRandomAccessStreamWithContentType const & deltaTicket) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> operation;
	check(shim()->abi_MergeAndValidateWithDefaultPrintTicketAsync(get(deltaTicket), put(operation)));
	return operation;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

template <typename T> void impl_IPrintTaskConfigurationSaveRequestedDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> void impl_IPrintTaskConfigurationSaveRequest<T>::Cancel() const
{
	check(shim()->abi_Cancel());
}

template <typename T> void impl_IPrintTaskConfigurationSaveRequest<T>::Save(IInspectable const & printerExtensionContext) const
{
	check(shim()->abi_Save(get(printerExtensionContext)));
}

template <typename T> Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedDeferral impl_IPrintTaskConfigurationSaveRequest<T>::GetDeferral() const
{
	Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> Windows::Foundation::DateTime impl_IPrintTaskConfigurationSaveRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Deadline(&value));
	return value;
}

template <typename T> Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequest impl_IPrintTaskConfigurationSaveRequestedEventArgs<T>::Request() const
{
	Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequest context = nullptr;
	check(shim()->get_Request(put(context)));
	return context;
}

template <typename T> IInspectable impl_IPrintTaskConfiguration<T>::PrinterExtensionContext() const
{
	IInspectable context;
	check(shim()->get_PrinterExtensionContext(put(context)));
	return context;
}

template <typename T> long long impl_IPrintTaskConfiguration<T>::SaveRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::Printers::Extensions::PrintTaskConfiguration, Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_SaveRequested(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IPrintTaskConfiguration<T>::SaveRequested(F eventHandler) const
{
	return SaveRequested(Windows::Foundation::TypedEventHandler<Windows::Devices::Printers::Extensions::PrintTaskConfiguration, Windows::Devices::Printers::Extensions::PrintTaskConfigurationSaveRequestedEventArgs>(eventHandler));
}

template <typename T> void impl_IPrintTaskConfiguration<T>::SaveRequested(long long const eventCookie) const
{
	check(shim()->remove_SaveRequested(eventCookie));
}

template <typename T> String impl_IPrintNotificationEventDetails<T>::PrinterName() const
{
	String value;
	check(shim()->get_PrinterName(put(value)));
	return value;
}

template <typename T> String impl_IPrintNotificationEventDetails<T>::EventData() const
{
	String value;
	check(shim()->get_EventData(put(value)));
	return value;
}

template <typename T> void impl_IPrintNotificationEventDetails<T>::EventData(StringReference const & value) const
{
	check(shim()->put_EventData(get(value)));
}

template <typename T> IInspectable impl_IPrintExtensionContextStatic<T>::FromDeviceId(StringReference const & deviceId) const
{
	IInspectable context;
	check(shim()->abi_FromDeviceId(get(deviceId), put(context)));
	return context;
}

template <typename T> Windows::Devices::Printers::Extensions::Print3DWorkflowStatus impl_IPrint3DWorkflowPrintRequestedEventArgs<T>::Status() const
{
	Windows::Devices::Printers::Extensions::Print3DWorkflowStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> void impl_IPrint3DWorkflowPrintRequestedEventArgs<T>::SetExtendedStatus(Windows::Devices::Printers::Extensions::Print3DWorkflowDetail const value) const
{
	check(shim()->abi_SetExtendedStatus(value));
}

template <typename T> void impl_IPrint3DWorkflowPrintRequestedEventArgs<T>::SetSource(IInspectable const & source) const
{
	check(shim()->abi_SetSource(get(source)));
}

template <typename T> void impl_IPrint3DWorkflowPrintRequestedEventArgs<T>::SetSourceChanged(bool const value) const
{
	check(shim()->abi_SetSourceChanged(value));
}

template <typename T> String impl_IPrint3DWorkflow<T>::DeviceID() const
{
	String value;
	check(shim()->get_DeviceID(put(value)));
	return value;
}

template <typename T> IInspectable impl_IPrint3DWorkflow<T>::GetPrintModelPackage() const
{
	IInspectable printModelPackage;
	check(shim()->abi_GetPrintModelPackage(put(printModelPackage)));
	return printModelPackage;
}

template <typename T> bool impl_IPrint3DWorkflow<T>::IsPrintReady() const
{
	bool value = {};
	check(shim()->get_IsPrintReady(put(value)));
	return value;
}

template <typename T> void impl_IPrint3DWorkflow<T>::IsPrintReady(bool const value) const
{
	check(shim()->put_IsPrintReady(value));
}

template <typename T> long long impl_IPrint3DWorkflow<T>::PrintRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::Printers::Extensions::Print3DWorkflow, Windows::Devices::Printers::Extensions::Print3DWorkflowPrintRequestedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_PrintRequested(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IPrint3DWorkflow<T>::PrintRequested(F eventHandler) const
{
	return PrintRequested(Windows::Foundation::TypedEventHandler<Windows::Devices::Printers::Extensions::Print3DWorkflow, Windows::Devices::Printers::Extensions::Print3DWorkflowPrintRequestedEventArgs>(eventHandler));
}

template <typename T> void impl_IPrint3DWorkflow<T>::PrintRequested(long long const eventCookie) const
{
	check(shim()->remove_PrintRequested(eventCookie));
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Radios {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Radios::Radio>> impl_IRadioStatics<T>::GetRadiosAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Radios::Radio>> value;
	check(shim()->abi_GetRadiosAsync(put(value)));
	return value;
}

template <typename T> String impl_IRadioStatics<T>::GetDeviceSelector() const
{
	String deviceSelector;
	check(shim()->abi_GetDeviceSelector(put(deviceSelector)));
	return deviceSelector;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Radios::Radio> impl_IRadioStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Radios::Radio> value;
	check(shim()->abi_FromIdAsync(get(deviceId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Radios::RadioAccessStatus> impl_IRadioStatics<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Radios::RadioAccessStatus> value;
	check(shim()->abi_RequestAccessAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Radios::RadioAccessStatus> impl_IRadio<T>::SetStateAsync(Windows::Devices::Radios::RadioState const value) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Radios::RadioAccessStatus> retval;
	check(shim()->abi_SetStateAsync(value, put(retval)));
	return retval;
}

template <typename T> long long impl_IRadio<T>::StateChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Radios::Radio, IInspectable> const & handler) const
{
	long long eventCookie = {};
	check(shim()->add_StateChanged(get(handler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IRadio<T>::StateChanged(F handler) const
{
	return StateChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Radios::Radio, IInspectable>(handler));
}

template <typename T> void impl_IRadio<T>::StateChanged(long long const eventCookie) const
{
	check(shim()->remove_StateChanged(eventCookie));
}

template <typename T> Windows::Devices::Radios::RadioState impl_IRadio<T>::State() const
{
	Windows::Devices::Radios::RadioState value = {};
	check(shim()->get_State(&value));
	return value;
}

template <typename T> String impl_IRadio<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Devices::Radios::RadioKind impl_IRadio<T>::Kind() const
{
	Windows::Devices::Radios::RadioKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Scanners {

template <typename T> Windows::Devices::Scanners::ImageScannerFormat impl_IImageScannerFormatConfiguration<T>::DefaultFormat() const
{
	Windows::Devices::Scanners::ImageScannerFormat value = {};
	check(shim()->get_DefaultFormat(&value));
	return value;
}

template <typename T> Windows::Devices::Scanners::ImageScannerFormat impl_IImageScannerFormatConfiguration<T>::Format() const
{
	Windows::Devices::Scanners::ImageScannerFormat value = {};
	check(shim()->get_Format(&value));
	return value;
}

template <typename T> void impl_IImageScannerFormatConfiguration<T>::Format(Windows::Devices::Scanners::ImageScannerFormat const value) const
{
	check(shim()->put_Format(value));
}

template <typename T> bool impl_IImageScannerFormatConfiguration<T>::IsFormatSupported(Windows::Devices::Scanners::ImageScannerFormat const value) const
{
	bool result = {};
	check(shim()->abi_IsFormatSupported(value, put(result)));
	return result;
}

template <typename T> Windows::Foundation::Size impl_IImageScannerSourceConfiguration<T>::MinScanArea() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_MinScanArea(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IImageScannerSourceConfiguration<T>::MaxScanArea() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_MaxScanArea(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IImageScannerSourceConfiguration<T>::SelectedScanRegion() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_SelectedScanRegion(&value));
	return value;
}

template <typename T> void impl_IImageScannerSourceConfiguration<T>::SelectedScanRegion(Windows::Foundation::Rect const & value) const
{
	check(shim()->put_SelectedScanRegion(value));
}

template <typename T> Windows::Devices::Scanners::ImageScannerAutoCroppingMode impl_IImageScannerSourceConfiguration<T>::AutoCroppingMode() const
{
	Windows::Devices::Scanners::ImageScannerAutoCroppingMode value = {};
	check(shim()->get_AutoCroppingMode(&value));
	return value;
}

template <typename T> void impl_IImageScannerSourceConfiguration<T>::AutoCroppingMode(Windows::Devices::Scanners::ImageScannerAutoCroppingMode const value) const
{
	check(shim()->put_AutoCroppingMode(value));
}

template <typename T> bool impl_IImageScannerSourceConfiguration<T>::IsAutoCroppingModeSupported(Windows::Devices::Scanners::ImageScannerAutoCroppingMode const value) const
{
	bool result = {};
	check(shim()->abi_IsAutoCroppingModeSupported(value, put(result)));
	return result;
}

template <typename T> Windows::Devices::Scanners::ImageScannerResolution impl_IImageScannerSourceConfiguration<T>::MinResolution() const
{
	Windows::Devices::Scanners::ImageScannerResolution value = {};
	check(shim()->get_MinResolution(&value));
	return value;
}

template <typename T> Windows::Devices::Scanners::ImageScannerResolution impl_IImageScannerSourceConfiguration<T>::MaxResolution() const
{
	Windows::Devices::Scanners::ImageScannerResolution value = {};
	check(shim()->get_MaxResolution(&value));
	return value;
}

template <typename T> Windows::Devices::Scanners::ImageScannerResolution impl_IImageScannerSourceConfiguration<T>::OpticalResolution() const
{
	Windows::Devices::Scanners::ImageScannerResolution value = {};
	check(shim()->get_OpticalResolution(&value));
	return value;
}

template <typename T> Windows::Devices::Scanners::ImageScannerResolution impl_IImageScannerSourceConfiguration<T>::DesiredResolution() const
{
	Windows::Devices::Scanners::ImageScannerResolution value = {};
	check(shim()->get_DesiredResolution(&value));
	return value;
}

template <typename T> void impl_IImageScannerSourceConfiguration<T>::DesiredResolution(Windows::Devices::Scanners::ImageScannerResolution const & value) const
{
	check(shim()->put_DesiredResolution(value));
}

template <typename T> Windows::Devices::Scanners::ImageScannerResolution impl_IImageScannerSourceConfiguration<T>::ActualResolution() const
{
	Windows::Devices::Scanners::ImageScannerResolution value = {};
	check(shim()->get_ActualResolution(&value));
	return value;
}

template <typename T> Windows::Devices::Scanners::ImageScannerColorMode impl_IImageScannerSourceConfiguration<T>::DefaultColorMode() const
{
	Windows::Devices::Scanners::ImageScannerColorMode value = {};
	check(shim()->get_DefaultColorMode(&value));
	return value;
}

template <typename T> Windows::Devices::Scanners::ImageScannerColorMode impl_IImageScannerSourceConfiguration<T>::ColorMode() const
{
	Windows::Devices::Scanners::ImageScannerColorMode value = {};
	check(shim()->get_ColorMode(&value));
	return value;
}

template <typename T> void impl_IImageScannerSourceConfiguration<T>::ColorMode(Windows::Devices::Scanners::ImageScannerColorMode const value) const
{
	check(shim()->put_ColorMode(value));
}

template <typename T> bool impl_IImageScannerSourceConfiguration<T>::IsColorModeSupported(Windows::Devices::Scanners::ImageScannerColorMode const value) const
{
	bool result = {};
	check(shim()->abi_IsColorModeSupported(value, put(result)));
	return result;
}

template <typename T> int impl_IImageScannerSourceConfiguration<T>::MinBrightness() const
{
	int value = {};
	check(shim()->get_MinBrightness(&value));
	return value;
}

template <typename T> int impl_IImageScannerSourceConfiguration<T>::MaxBrightness() const
{
	int value = {};
	check(shim()->get_MaxBrightness(&value));
	return value;
}

template <typename T> unsigned impl_IImageScannerSourceConfiguration<T>::BrightnessStep() const
{
	unsigned value = {};
	check(shim()->get_BrightnessStep(&value));
	return value;
}

template <typename T> int impl_IImageScannerSourceConfiguration<T>::DefaultBrightness() const
{
	int value = {};
	check(shim()->get_DefaultBrightness(&value));
	return value;
}

template <typename T> int impl_IImageScannerSourceConfiguration<T>::Brightness() const
{
	int value = {};
	check(shim()->get_Brightness(&value));
	return value;
}

template <typename T> void impl_IImageScannerSourceConfiguration<T>::Brightness(int const value) const
{
	check(shim()->put_Brightness(value));
}

template <typename T> int impl_IImageScannerSourceConfiguration<T>::MinContrast() const
{
	int value = {};
	check(shim()->get_MinContrast(&value));
	return value;
}

template <typename T> int impl_IImageScannerSourceConfiguration<T>::MaxContrast() const
{
	int value = {};
	check(shim()->get_MaxContrast(&value));
	return value;
}

template <typename T> unsigned impl_IImageScannerSourceConfiguration<T>::ContrastStep() const
{
	unsigned value = {};
	check(shim()->get_ContrastStep(&value));
	return value;
}

template <typename T> int impl_IImageScannerSourceConfiguration<T>::DefaultContrast() const
{
	int value = {};
	check(shim()->get_DefaultContrast(&value));
	return value;
}

template <typename T> int impl_IImageScannerSourceConfiguration<T>::Contrast() const
{
	int value = {};
	check(shim()->get_Contrast(&value));
	return value;
}

template <typename T> void impl_IImageScannerSourceConfiguration<T>::Contrast(int const value) const
{
	check(shim()->put_Contrast(value));
}

template <typename T> bool impl_IImageScannerFeederConfiguration<T>::CanAutoDetectPageSize() const
{
	bool value = {};
	check(shim()->get_CanAutoDetectPageSize(put(value)));
	return value;
}

template <typename T> bool impl_IImageScannerFeederConfiguration<T>::AutoDetectPageSize() const
{
	bool value = {};
	check(shim()->get_AutoDetectPageSize(put(value)));
	return value;
}

template <typename T> void impl_IImageScannerFeederConfiguration<T>::AutoDetectPageSize(bool const value) const
{
	check(shim()->put_AutoDetectPageSize(value));
}

template <typename T> Windows::Graphics::Printing::PrintMediaSize impl_IImageScannerFeederConfiguration<T>::PageSize() const
{
	Windows::Graphics::Printing::PrintMediaSize value = {};
	check(shim()->get_PageSize(&value));
	return value;
}

template <typename T> void impl_IImageScannerFeederConfiguration<T>::PageSize(Windows::Graphics::Printing::PrintMediaSize const value) const
{
	check(shim()->put_PageSize(value));
}

template <typename T> Windows::Graphics::Printing::PrintOrientation impl_IImageScannerFeederConfiguration<T>::PageOrientation() const
{
	Windows::Graphics::Printing::PrintOrientation value = {};
	check(shim()->get_PageOrientation(&value));
	return value;
}

template <typename T> void impl_IImageScannerFeederConfiguration<T>::PageOrientation(Windows::Graphics::Printing::PrintOrientation const value) const
{
	check(shim()->put_PageOrientation(value));
}

template <typename T> Windows::Foundation::Size impl_IImageScannerFeederConfiguration<T>::PageSizeDimensions() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_PageSizeDimensions(&value));
	return value;
}

template <typename T> bool impl_IImageScannerFeederConfiguration<T>::IsPageSizeSupported(Windows::Graphics::Printing::PrintMediaSize const pageSize, Windows::Graphics::Printing::PrintOrientation const pageOrientation) const
{
	bool result = {};
	check(shim()->abi_IsPageSizeSupported(pageSize, pageOrientation, put(result)));
	return result;
}

template <typename T> unsigned impl_IImageScannerFeederConfiguration<T>::MaxNumberOfPages() const
{
	unsigned value = {};
	check(shim()->get_MaxNumberOfPages(&value));
	return value;
}

template <typename T> void impl_IImageScannerFeederConfiguration<T>::MaxNumberOfPages(unsigned const value) const
{
	check(shim()->put_MaxNumberOfPages(value));
}

template <typename T> bool impl_IImageScannerFeederConfiguration<T>::CanScanDuplex() const
{
	bool value = {};
	check(shim()->get_CanScanDuplex(put(value)));
	return value;
}

template <typename T> bool impl_IImageScannerFeederConfiguration<T>::Duplex() const
{
	bool value = {};
	check(shim()->get_Duplex(put(value)));
	return value;
}

template <typename T> void impl_IImageScannerFeederConfiguration<T>::Duplex(bool const value) const
{
	check(shim()->put_Duplex(value));
}

template <typename T> bool impl_IImageScannerFeederConfiguration<T>::CanScanAhead() const
{
	bool value = {};
	check(shim()->get_CanScanAhead(put(value)));
	return value;
}

template <typename T> bool impl_IImageScannerFeederConfiguration<T>::ScanAhead() const
{
	bool value = {};
	check(shim()->get_ScanAhead(put(value)));
	return value;
}

template <typename T> void impl_IImageScannerFeederConfiguration<T>::ScanAhead(bool const value) const
{
	check(shim()->put_ScanAhead(value));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile> impl_IImageScannerScanResult<T>::ScannedFiles() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile> value;
	check(shim()->get_ScannedFiles(put(value)));
	return value;
}

template <typename T> bool impl_IImageScannerPreviewResult<T>::Succeeded() const
{
	bool value = {};
	check(shim()->get_Succeeded(put(value)));
	return value;
}

template <typename T> Windows::Devices::Scanners::ImageScannerFormat impl_IImageScannerPreviewResult<T>::Format() const
{
	Windows::Devices::Scanners::ImageScannerFormat value = {};
	check(shim()->get_Format(&value));
	return value;
}

template <typename T> String impl_IImageScanner<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Scanners::ImageScannerScanSource impl_IImageScanner<T>::DefaultScanSource() const
{
	Windows::Devices::Scanners::ImageScannerScanSource value = {};
	check(shim()->get_DefaultScanSource(&value));
	return value;
}

template <typename T> bool impl_IImageScanner<T>::IsScanSourceSupported(Windows::Devices::Scanners::ImageScannerScanSource const value) const
{
	bool result = {};
	check(shim()->abi_IsScanSourceSupported(value, put(result)));
	return result;
}

template <typename T> Windows::Devices::Scanners::ImageScannerFlatbedConfiguration impl_IImageScanner<T>::FlatbedConfiguration() const
{
	Windows::Devices::Scanners::ImageScannerFlatbedConfiguration value = nullptr;
	check(shim()->get_FlatbedConfiguration(put(value)));
	return value;
}

template <typename T> Windows::Devices::Scanners::ImageScannerFeederConfiguration impl_IImageScanner<T>::FeederConfiguration() const
{
	Windows::Devices::Scanners::ImageScannerFeederConfiguration value = nullptr;
	check(shim()->get_FeederConfiguration(put(value)));
	return value;
}

template <typename T> Windows::Devices::Scanners::ImageScannerAutoConfiguration impl_IImageScanner<T>::AutoConfiguration() const
{
	Windows::Devices::Scanners::ImageScannerAutoConfiguration value = nullptr;
	check(shim()->get_AutoConfiguration(put(value)));
	return value;
}

template <typename T> bool impl_IImageScanner<T>::IsPreviewSupported(Windows::Devices::Scanners::ImageScannerScanSource const scanSource) const
{
	bool result = {};
	check(shim()->abi_IsPreviewSupported(scanSource, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Scanners::ImageScannerPreviewResult> impl_IImageScanner<T>::ScanPreviewToStreamAsync(Windows::Devices::Scanners::ImageScannerScanSource const scanSource, Windows::Storage::Streams::IRandomAccessStream const & targetStream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Scanners::ImageScannerPreviewResult> operation;
	check(shim()->abi_ScanPreviewToStreamAsync(scanSource, get(targetStream), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Devices::Scanners::ImageScannerScanResult, unsigned> impl_IImageScanner<T>::ScanFilesToFolderAsync(Windows::Devices::Scanners::ImageScannerScanSource const scanSource, Windows::Storage::StorageFolder const & storageFolder) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Devices::Scanners::ImageScannerScanResult, unsigned> operation;
	check(shim()->abi_ScanFilesToFolderAsync(scanSource, get(storageFolder), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Scanners::ImageScanner> impl_IImageScannerStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Scanners::ImageScanner> asyncInfo;
	check(shim()->abi_FromIdAsync(get(deviceId), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> String impl_IImageScannerStatics<T>::GetDeviceSelector() const
{
	String selector;
	check(shim()->abi_GetDeviceSelector(put(selector)));
	return selector;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sensors {

template <typename T> String impl_ISensorDataThresholdTriggerDetails<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::SensorType impl_ISensorDataThresholdTriggerDetails<T>::SensorType() const
{
	Windows::Devices::Sensors::SensorType value = {};
	check(shim()->get_SensorType(&value));
	return value;
}

template <typename T> String impl_IAccelerometerDeviceId<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::Accelerometer impl_IAccelerometerStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Accelerometer result = nullptr;
	check(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::AccelerometerReading impl_IAccelerometer<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::AccelerometerReading value = nullptr;
	check(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> unsigned impl_IAccelerometer<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IAccelerometer<T>::ReportInterval(unsigned const value) const
{
	check(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_IAccelerometer<T>::ReportInterval() const
{
	unsigned value = {};
	check(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_IAccelerometer<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAccelerometer<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IAccelerometer<T>::ReadingChanged(long long const token) const
{
	check(shim()->remove_ReadingChanged(token));
}

template <typename T> long long impl_IAccelerometer<T>::Shaken(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerShakenEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Shaken(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAccelerometer<T>::Shaken(F handler) const
{
	return Shaken(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Accelerometer, Windows::Devices::Sensors::AccelerometerShakenEventArgs>(handler));
}

template <typename T> void impl_IAccelerometer<T>::Shaken(long long const token) const
{
	check(shim()->remove_Shaken(token));
}

template <typename T> void impl_IAccelerometer2<T>::ReadingTransform(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check(shim()->put_ReadingTransform(value));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IAccelerometer2<T>::ReadingTransform() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check(shim()->get_ReadingTransform(&value));
	return value;
}

template <typename T> void impl_IAccelerometer3<T>::ReportLatency(unsigned const value) const
{
	check(shim()->put_ReportLatency(value));
}

template <typename T> unsigned impl_IAccelerometer3<T>::ReportLatency() const
{
	unsigned value = {};
	check(shim()->get_ReportLatency(&value));
	return value;
}

template <typename T> unsigned impl_IAccelerometer3<T>::MaxBatchSize() const
{
	unsigned value = {};
	check(shim()->get_MaxBatchSize(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IAccelerometerReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> double impl_IAccelerometerReading<T>::AccelerationX() const
{
	double value = {};
	check(shim()->get_AccelerationX(&value));
	return value;
}

template <typename T> double impl_IAccelerometerReading<T>::AccelerationY() const
{
	double value = {};
	check(shim()->get_AccelerationY(&value));
	return value;
}

template <typename T> double impl_IAccelerometerReading<T>::AccelerationZ() const
{
	double value = {};
	check(shim()->get_AccelerationZ(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::AccelerometerReading impl_IAccelerometerReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::AccelerometerReading value = nullptr;
	check(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IAccelerometerShakenEventArgs<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> String impl_IInclinometerDeviceId<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::Inclinometer impl_IInclinometerStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Inclinometer result = nullptr;
	check(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::Inclinometer impl_IInclinometerStatics2<T>::GetDefaultForRelativeReadings() const
{
	Windows::Devices::Sensors::Inclinometer result = nullptr;
	check(shim()->abi_GetDefaultForRelativeReadings(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::InclinometerReading impl_IInclinometer<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::InclinometerReading value = nullptr;
	check(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> unsigned impl_IInclinometer<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IInclinometer<T>::ReportInterval(unsigned const value) const
{
	check(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_IInclinometer<T>::ReportInterval() const
{
	unsigned value = {};
	check(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_IInclinometer<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Inclinometer, Windows::Devices::Sensors::InclinometerReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IInclinometer<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Inclinometer, Windows::Devices::Sensors::InclinometerReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IInclinometer<T>::ReadingChanged(long long const token) const
{
	check(shim()->remove_ReadingChanged(token));
}

template <typename T> void impl_IInclinometer2<T>::ReadingTransform(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check(shim()->put_ReadingTransform(value));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IInclinometer2<T>::ReadingTransform() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check(shim()->get_ReadingTransform(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::SensorReadingType impl_IInclinometer2<T>::ReadingType() const
{
	Windows::Devices::Sensors::SensorReadingType type = {};
	check(shim()->get_ReadingType(&type));
	return type;
}

template <typename T> Windows::Foundation::DateTime impl_IInclinometerReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> float impl_IInclinometerReading<T>::PitchDegrees() const
{
	float value = {};
	check(shim()->get_PitchDegrees(&value));
	return value;
}

template <typename T> float impl_IInclinometerReading<T>::RollDegrees() const
{
	float value = {};
	check(shim()->get_RollDegrees(&value));
	return value;
}

template <typename T> float impl_IInclinometerReading<T>::YawDegrees() const
{
	float value = {};
	check(shim()->get_YawDegrees(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::MagnetometerAccuracy impl_IInclinometerReadingYawAccuracy<T>::YawAccuracy() const
{
	Windows::Devices::Sensors::MagnetometerAccuracy value = {};
	check(shim()->get_YawAccuracy(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::InclinometerReading impl_IInclinometerReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::InclinometerReading value = nullptr;
	check(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> String impl_IGyrometerDeviceId<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::Gyrometer impl_IGyrometerStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Gyrometer result = nullptr;
	check(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::GyrometerReading impl_IGyrometer<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::GyrometerReading value = nullptr;
	check(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> unsigned impl_IGyrometer<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IGyrometer<T>::ReportInterval(unsigned const value) const
{
	check(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_IGyrometer<T>::ReportInterval() const
{
	unsigned value = {};
	check(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_IGyrometer<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Gyrometer, Windows::Devices::Sensors::GyrometerReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGyrometer<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Gyrometer, Windows::Devices::Sensors::GyrometerReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IGyrometer<T>::ReadingChanged(long long const token) const
{
	check(shim()->remove_ReadingChanged(token));
}

template <typename T> void impl_IGyrometer2<T>::ReadingTransform(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check(shim()->put_ReadingTransform(value));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IGyrometer2<T>::ReadingTransform() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check(shim()->get_ReadingTransform(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IGyrometerReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> double impl_IGyrometerReading<T>::AngularVelocityX() const
{
	double value = {};
	check(shim()->get_AngularVelocityX(&value));
	return value;
}

template <typename T> double impl_IGyrometerReading<T>::AngularVelocityY() const
{
	double value = {};
	check(shim()->get_AngularVelocityY(&value));
	return value;
}

template <typename T> double impl_IGyrometerReading<T>::AngularVelocityZ() const
{
	double value = {};
	check(shim()->get_AngularVelocityZ(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::GyrometerReading impl_IGyrometerReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::GyrometerReading value = nullptr;
	check(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> String impl_ICompassDeviceId<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::Compass impl_ICompassStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Compass result = nullptr;
	check(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::CompassReading impl_ICompass<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::CompassReading value = nullptr;
	check(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> unsigned impl_ICompass<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_ICompass<T>::ReportInterval(unsigned const value) const
{
	check(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_ICompass<T>::ReportInterval() const
{
	unsigned value = {};
	check(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_ICompass<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Compass, Windows::Devices::Sensors::CompassReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICompass<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Compass, Windows::Devices::Sensors::CompassReadingChangedEventArgs>(handler));
}

template <typename T> void impl_ICompass<T>::ReadingChanged(long long const token) const
{
	check(shim()->remove_ReadingChanged(token));
}

template <typename T> void impl_ICompass2<T>::ReadingTransform(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check(shim()->put_ReadingTransform(value));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_ICompass2<T>::ReadingTransform() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check(shim()->get_ReadingTransform(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ICompassReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> double impl_ICompassReading<T>::HeadingMagneticNorth() const
{
	double value = {};
	check(shim()->get_HeadingMagneticNorth(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_ICompassReading<T>::HeadingTrueNorth() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_HeadingTrueNorth(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::MagnetometerAccuracy impl_ICompassReadingHeadingAccuracy<T>::HeadingAccuracy() const
{
	Windows::Devices::Sensors::MagnetometerAccuracy value = {};
	check(shim()->get_HeadingAccuracy(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::CompassReading impl_ICompassReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::CompassReading value = nullptr;
	check(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> String impl_ILightSensorDeviceId<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::LightSensor impl_ILightSensorStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::LightSensor result = nullptr;
	check(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::LightSensorReading impl_ILightSensor<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::LightSensorReading value = nullptr;
	check(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> unsigned impl_ILightSensor<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_ILightSensor<T>::ReportInterval(unsigned const value) const
{
	check(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_ILightSensor<T>::ReportInterval() const
{
	unsigned value = {};
	check(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_ILightSensor<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::LightSensor, Windows::Devices::Sensors::LightSensorReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ILightSensor<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::LightSensor, Windows::Devices::Sensors::LightSensorReadingChangedEventArgs>(handler));
}

template <typename T> void impl_ILightSensor<T>::ReadingChanged(long long const token) const
{
	check(shim()->remove_ReadingChanged(token));
}

template <typename T> Windows::Foundation::DateTime impl_ILightSensorReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> float impl_ILightSensorReading<T>::IlluminanceInLux() const
{
	float value = {};
	check(shim()->get_IlluminanceInLux(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::LightSensorReading impl_ILightSensorReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::LightSensorReading value = nullptr;
	check(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M11() const
{
	float value = {};
	check(shim()->get_M11(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M12() const
{
	float value = {};
	check(shim()->get_M12(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M13() const
{
	float value = {};
	check(shim()->get_M13(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M21() const
{
	float value = {};
	check(shim()->get_M21(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M22() const
{
	float value = {};
	check(shim()->get_M22(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M23() const
{
	float value = {};
	check(shim()->get_M23(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M31() const
{
	float value = {};
	check(shim()->get_M31(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M32() const
{
	float value = {};
	check(shim()->get_M32(&value));
	return value;
}

template <typename T> float impl_ISensorRotationMatrix<T>::M33() const
{
	float value = {};
	check(shim()->get_M33(&value));
	return value;
}

template <typename T> float impl_ISensorQuaternion<T>::W() const
{
	float value = {};
	check(shim()->get_W(&value));
	return value;
}

template <typename T> float impl_ISensorQuaternion<T>::X() const
{
	float value = {};
	check(shim()->get_X(&value));
	return value;
}

template <typename T> float impl_ISensorQuaternion<T>::Y() const
{
	float value = {};
	check(shim()->get_Y(&value));
	return value;
}

template <typename T> float impl_ISensorQuaternion<T>::Z() const
{
	float value = {};
	check(shim()->get_Z(&value));
	return value;
}

template <typename T> String impl_IOrientationSensorDeviceId<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::OrientationSensor impl_IOrientationSensorStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::OrientationSensor result = nullptr;
	check(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::OrientationSensor impl_IOrientationSensorStatics2<T>::GetDefaultForRelativeReadings() const
{
	Windows::Devices::Sensors::OrientationSensor result = nullptr;
	check(shim()->abi_GetDefaultForRelativeReadings(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::OrientationSensorReading impl_IOrientationSensor<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::OrientationSensorReading value = nullptr;
	check(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> unsigned impl_IOrientationSensor<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IOrientationSensor<T>::ReportInterval(unsigned const value) const
{
	check(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_IOrientationSensor<T>::ReportInterval() const
{
	unsigned value = {};
	check(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_IOrientationSensor<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::OrientationSensor, Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IOrientationSensor<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::OrientationSensor, Windows::Devices::Sensors::OrientationSensorReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IOrientationSensor<T>::ReadingChanged(long long const token) const
{
	check(shim()->remove_ReadingChanged(token));
}

template <typename T> void impl_IOrientationSensor2<T>::ReadingTransform(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check(shim()->put_ReadingTransform(value));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IOrientationSensor2<T>::ReadingTransform() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check(shim()->get_ReadingTransform(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::SensorReadingType impl_IOrientationSensor2<T>::ReadingType() const
{
	Windows::Devices::Sensors::SensorReadingType type = {};
	check(shim()->get_ReadingType(&type));
	return type;
}

template <typename T> Windows::Foundation::DateTime impl_IOrientationSensorReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::SensorRotationMatrix impl_IOrientationSensorReading<T>::RotationMatrix() const
{
	Windows::Devices::Sensors::SensorRotationMatrix value = nullptr;
	check(shim()->get_RotationMatrix(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::SensorQuaternion impl_IOrientationSensorReading<T>::Quaternion() const
{
	Windows::Devices::Sensors::SensorQuaternion value = nullptr;
	check(shim()->get_Quaternion(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::MagnetometerAccuracy impl_IOrientationSensorReadingYawAccuracy<T>::YawAccuracy() const
{
	Windows::Devices::Sensors::MagnetometerAccuracy value = {};
	check(shim()->get_YawAccuracy(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::OrientationSensorReading impl_IOrientationSensorReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::OrientationSensorReading value = nullptr;
	check(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> String impl_ISimpleOrientationSensorDeviceId<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::SimpleOrientationSensor impl_ISimpleOrientationSensorStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::SimpleOrientationSensor result = nullptr;
	check(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::SimpleOrientation impl_ISimpleOrientationSensor<T>::GetCurrentOrientation() const
{
	Windows::Devices::Sensors::SimpleOrientation value = {};
	check(shim()->abi_GetCurrentOrientation(&value));
	return value;
}

template <typename T> long long impl_ISimpleOrientationSensor<T>::OrientationChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::SimpleOrientationSensor, Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_OrientationChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISimpleOrientationSensor<T>::OrientationChanged(F handler) const
{
	return OrientationChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::SimpleOrientationSensor, Windows::Devices::Sensors::SimpleOrientationSensorOrientationChangedEventArgs>(handler));
}

template <typename T> void impl_ISimpleOrientationSensor<T>::OrientationChanged(long long const token) const
{
	check(shim()->remove_OrientationChanged(token));
}

template <typename T> void impl_ISimpleOrientationSensor2<T>::ReadingTransform(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check(shim()->put_ReadingTransform(value));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_ISimpleOrientationSensor2<T>::ReadingTransform() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check(shim()->get_ReadingTransform(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISimpleOrientationSensorOrientationChangedEventArgs<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::SimpleOrientation impl_ISimpleOrientationSensorOrientationChangedEventArgs<T>::Orientation() const
{
	Windows::Devices::Sensors::SimpleOrientation value = {};
	check(shim()->get_Orientation(&value));
	return value;
}

template <typename T> String impl_IMagnetometerDeviceId<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::Magnetometer impl_IMagnetometerStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Magnetometer result = nullptr;
	check(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::MagnetometerReading impl_IMagnetometer<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::MagnetometerReading value = nullptr;
	check(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> unsigned impl_IMagnetometer<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IMagnetometer<T>::ReportInterval(unsigned const value) const
{
	check(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_IMagnetometer<T>::ReportInterval() const
{
	unsigned value = {};
	check(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_IMagnetometer<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Magnetometer, Windows::Devices::Sensors::MagnetometerReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMagnetometer<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Magnetometer, Windows::Devices::Sensors::MagnetometerReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IMagnetometer<T>::ReadingChanged(long long const token) const
{
	check(shim()->remove_ReadingChanged(token));
}

template <typename T> void impl_IMagnetometer2<T>::ReadingTransform(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check(shim()->put_ReadingTransform(value));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IMagnetometer2<T>::ReadingTransform() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check(shim()->get_ReadingTransform(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IMagnetometerReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> float impl_IMagnetometerReading<T>::MagneticFieldX() const
{
	float value = {};
	check(shim()->get_MagneticFieldX(&value));
	return value;
}

template <typename T> float impl_IMagnetometerReading<T>::MagneticFieldY() const
{
	float value = {};
	check(shim()->get_MagneticFieldY(&value));
	return value;
}

template <typename T> float impl_IMagnetometerReading<T>::MagneticFieldZ() const
{
	float value = {};
	check(shim()->get_MagneticFieldZ(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::MagnetometerAccuracy impl_IMagnetometerReading<T>::DirectionalAccuracy() const
{
	Windows::Devices::Sensors::MagnetometerAccuracy value = {};
	check(shim()->get_DirectionalAccuracy(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::MagnetometerReading impl_IMagnetometerReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::MagnetometerReading value = nullptr;
	check(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensor> impl_IActivitySensorStatics<T>::GetDefaultAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensor> result;
	check(shim()->abi_GetDefaultAsync(put(result)));
	return result;
}

template <typename T> String impl_IActivitySensorStatics<T>::GetDeviceSelector() const
{
	String value;
	check(shim()->abi_GetDeviceSelector(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensor> impl_IActivitySensorStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensor> result;
	check(shim()->abi_FromIdAsync(get(deviceId), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReading>> impl_IActivitySensorStatics<T>::GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReading>> result;
	check(shim()->abi_GetSystemHistoryAsync(fromTime, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReading>> impl_IActivitySensorStatics<T>::GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime, Windows::Foundation::TimeSpan const & duration) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReading>> result;
	check(shim()->abi_GetSystemHistoryWithDurationAsync(fromTime, duration, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensorReading> impl_IActivitySensor<T>::GetCurrentReadingAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensorReading> result;
	check(shim()->abi_GetCurrentReadingAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Sensors::ActivityType> impl_IActivitySensor<T>::SubscribedActivities() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Sensors::ActivityType> value;
	check(shim()->get_SubscribedActivities(put(value)));
	return value;
}

template <typename T> double impl_IActivitySensor<T>::PowerInMilliwatts() const
{
	double value = {};
	check(shim()->get_PowerInMilliwatts(&value));
	return value;
}

template <typename T> String impl_IActivitySensor<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Sensors::ActivityType> impl_IActivitySensor<T>::SupportedActivities() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::Sensors::ActivityType> value;
	check(shim()->get_SupportedActivities(put(value)));
	return value;
}

template <typename T> unsigned impl_IActivitySensor<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> long long impl_IActivitySensor<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::ActivitySensor, Windows::Devices::Sensors::ActivitySensorReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IActivitySensor<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::ActivitySensor, Windows::Devices::Sensors::ActivitySensorReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IActivitySensor<T>::ReadingChanged(long long const token) const
{
	check(shim()->remove_ReadingChanged(token));
}

template <typename T> Windows::Foundation::DateTime impl_IActivitySensorReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::ActivityType impl_IActivitySensorReading<T>::Activity() const
{
	Windows::Devices::Sensors::ActivityType value = {};
	check(shim()->get_Activity(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::ActivitySensorReadingConfidence impl_IActivitySensorReading<T>::Confidence() const
{
	Windows::Devices::Sensors::ActivitySensorReadingConfidence value = {};
	check(shim()->get_Confidence(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::ActivitySensorReading impl_IActivitySensorReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::ActivitySensorReading value = nullptr;
	check(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::ActivitySensorReading impl_IActivitySensorReadingChangeReport<T>::Reading() const
{
	Windows::Devices::Sensors::ActivitySensorReading value = nullptr;
	check(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReadingChangeReport> impl_IActivitySensorTriggerDetails<T>::ReadReports() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReadingChangeReport> value;
	check(shim()->abi_ReadReports(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::Barometer impl_IBarometerStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Barometer result = nullptr;
	check(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::BarometerReading impl_IBarometer<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::BarometerReading value = nullptr;
	check(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> String impl_IBarometer<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> unsigned impl_IBarometer<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IBarometer<T>::ReportInterval(unsigned const value) const
{
	check(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_IBarometer<T>::ReportInterval() const
{
	unsigned value = {};
	check(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_IBarometer<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Barometer, Windows::Devices::Sensors::BarometerReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBarometer<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Barometer, Windows::Devices::Sensors::BarometerReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IBarometer<T>::ReadingChanged(long long const token) const
{
	check(shim()->remove_ReadingChanged(token));
}

template <typename T> Windows::Foundation::DateTime impl_IBarometerReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> double impl_IBarometerReading<T>::StationPressureInHectopascals() const
{
	double value = {};
	check(shim()->get_StationPressureInHectopascals(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::BarometerReading impl_IBarometerReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::BarometerReading value = nullptr;
	check(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::PedometerStepKind impl_IPedometerReading<T>::StepKind() const
{
	Windows::Devices::Sensors::PedometerStepKind value = {};
	check(shim()->get_StepKind(&value));
	return value;
}

template <typename T> int impl_IPedometerReading<T>::CumulativeSteps() const
{
	int value = {};
	check(shim()->get_CumulativeSteps(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPedometerReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPedometerReading<T>::CumulativeStepsDuration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_CumulativeStepsDuration(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::PedometerReading impl_IPedometerReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::PedometerReading value = nullptr;
	check(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::Pedometer> impl_IPedometerStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::Pedometer> operation;
	check(shim()->abi_FromIdAsync(get(deviceId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::Pedometer> impl_IPedometerStatics<T>::GetDefaultAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::Pedometer> operation;
	check(shim()->abi_GetDefaultAsync(put(operation)));
	return operation;
}

template <typename T> String impl_IPedometerStatics<T>::GetDeviceSelector() const
{
	String result;
	check(shim()->abi_GetDeviceSelector(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading>> impl_IPedometerStatics<T>::GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading>> operation;
	check(shim()->abi_GetSystemHistoryAsync(fromTime, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading>> impl_IPedometerStatics<T>::GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime, Windows::Foundation::TimeSpan const & duration) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading>> operation;
	check(shim()->abi_GetSystemHistoryWithDurationAsync(fromTime, duration, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading> impl_IPedometerStatics2<T>::GetReadingsFromTriggerDetails(Windows::Devices::Sensors::SensorDataThresholdTriggerDetails const & triggerDetails) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading> result;
	check(shim()->abi_GetReadingsFromTriggerDetails(get(triggerDetails), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IMapView<winrt::Windows::Devices::Sensors::PedometerStepKind, Windows::Devices::Sensors::PedometerReading> impl_IPedometer2<T>::GetCurrentReadings() const
{
	Windows::Foundation::Collections::IMapView<winrt::Windows::Devices::Sensors::PedometerStepKind, Windows::Devices::Sensors::PedometerReading> value;
	check(shim()->abi_GetCurrentReadings(put(value)));
	return value;
}

template <typename T> String impl_IPedometer<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> double impl_IPedometer<T>::PowerInMilliwatts() const
{
	double value = {};
	check(shim()->get_PowerInMilliwatts(&value));
	return value;
}

template <typename T> unsigned impl_IPedometer<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IPedometer<T>::ReportInterval(unsigned const value) const
{
	check(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_IPedometer<T>::ReportInterval() const
{
	unsigned value = {};
	check(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_IPedometer<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Pedometer, Windows::Devices::Sensors::PedometerReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPedometer<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Pedometer, Windows::Devices::Sensors::PedometerReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IPedometer<T>::ReadingChanged(long long const token) const
{
	check(shim()->remove_ReadingChanged(token));
}

template <typename T> Windows::Devices::Sensors::PedometerDataThreshold impl_IPedometerDataThresholdFactory<T>::Create(Windows::Devices::Sensors::Pedometer const & sensor, int const stepGoal) const
{
	Windows::Devices::Sensors::PedometerDataThreshold threshold = nullptr;
	check(shim()->abi_Create(get(sensor), stepGoal, put(threshold)));
	return threshold;
}

template <typename T> String impl_IProximitySensorStatics<T>::GetDeviceSelector() const
{
	String value;
	check(shim()->abi_GetDeviceSelector(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::ProximitySensor impl_IProximitySensorStatics<T>::FromId(StringReference const & sensorId) const
{
	Windows::Devices::Sensors::ProximitySensor result = nullptr;
	check(shim()->abi_FromId(get(sensorId), put(result)));
	return result;
}

template <typename T> String impl_IProximitySensor<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IProximitySensor<T>::MaxDistanceInMillimeters() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_MaxDistanceInMillimeters(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IProximitySensor<T>::MinDistanceInMillimeters() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_MinDistanceInMillimeters(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::ProximitySensorReading impl_IProximitySensor<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::ProximitySensorReading value = nullptr;
	check(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> long long impl_IProximitySensor<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::ProximitySensor, Windows::Devices::Sensors::ProximitySensorReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IProximitySensor<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::ProximitySensor, Windows::Devices::Sensors::ProximitySensorReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IProximitySensor<T>::ReadingChanged(long long const token) const
{
	check(shim()->remove_ReadingChanged(token));
}

template <typename T> Windows::Devices::Sensors::ProximitySensorDisplayOnOffController impl_IProximitySensor<T>::CreateDisplayOnOffController() const
{
	Windows::Devices::Sensors::ProximitySensorDisplayOnOffController controller = nullptr;
	check(shim()->abi_CreateDisplayOnOffController(put(controller)));
	return controller;
}

template <typename T> Windows::Devices::Sensors::ProximitySensorReading impl_IProximitySensorReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::ProximitySensorReading value = nullptr;
	check(shim()->get_Reading(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IProximitySensorReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> bool impl_IProximitySensorReading<T>::IsDetected() const
{
	bool value = {};
	check(shim()->get_IsDetected(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IProximitySensorReading<T>::DistanceInMillimeters() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_DistanceInMillimeters(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sensors::ProximitySensorDataThreshold impl_IProximitySensorDataThresholdFactory<T>::Create(Windows::Devices::Sensors::ProximitySensor const & sensor) const
{
	Windows::Devices::Sensors::ProximitySensorDataThreshold threshold = nullptr;
	check(shim()->abi_Create(get(sensor), put(threshold)));
	return threshold;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ProximitySensorReading> impl_IProximitySensorStatics2<T>::GetReadingsFromTriggerDetails(Windows::Devices::Sensors::SensorDataThresholdTriggerDetails const & triggerDetails) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ProximitySensorReading> result;
	check(shim()->abi_GetReadingsFromTriggerDetails(get(triggerDetails), put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::Altimeter impl_IAltimeterStatics<T>::GetDefault() const
{
	Windows::Devices::Sensors::Altimeter result = nullptr;
	check(shim()->abi_GetDefault(put(result)));
	return result;
}

template <typename T> Windows::Devices::Sensors::AltimeterReading impl_IAltimeter<T>::GetCurrentReading() const
{
	Windows::Devices::Sensors::AltimeterReading value = nullptr;
	check(shim()->abi_GetCurrentReading(put(value)));
	return value;
}

template <typename T> String impl_IAltimeter<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> unsigned impl_IAltimeter<T>::MinimumReportInterval() const
{
	unsigned value = {};
	check(shim()->get_MinimumReportInterval(&value));
	return value;
}

template <typename T> void impl_IAltimeter<T>::ReportInterval(unsigned const value) const
{
	check(shim()->put_ReportInterval(value));
}

template <typename T> unsigned impl_IAltimeter<T>::ReportInterval() const
{
	unsigned value = {};
	check(shim()->get_ReportInterval(&value));
	return value;
}

template <typename T> long long impl_IAltimeter<T>::ReadingChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sensors::Altimeter, Windows::Devices::Sensors::AltimeterReadingChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ReadingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAltimeter<T>::ReadingChanged(F handler) const
{
	return ReadingChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sensors::Altimeter, Windows::Devices::Sensors::AltimeterReadingChangedEventArgs>(handler));
}

template <typename T> void impl_IAltimeter<T>::ReadingChanged(long long const token) const
{
	check(shim()->remove_ReadingChanged(token));
}

template <typename T> Windows::Foundation::DateTime impl_IAltimeterReading<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> double impl_IAltimeterReading<T>::AltitudeChangeInMeters() const
{
	double value = {};
	check(shim()->get_AltitudeChangeInMeters(&value));
	return value;
}

template <typename T> Windows::Devices::Sensors::AltimeterReading impl_IAltimeterReadingChangedEventArgs<T>::Reading() const
{
	Windows::Devices::Sensors::AltimeterReading value = nullptr;
	check(shim()->get_Reading(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace SerialCommunication {

template <typename T> String impl_ISerialDeviceStatics<T>::GetDeviceSelector() const
{
	String value;
	check(shim()->abi_GetDeviceSelector(put(value)));
	return value;
}

template <typename T> String impl_ISerialDeviceStatics<T>::GetDeviceSelector(StringReference const & portName) const
{
	String result;
	check(shim()->abi_GetDeviceSelectorFromPortName(get(portName), put(result)));
	return result;
}

template <typename T> String impl_ISerialDeviceStatics<T>::GetDeviceSelectorFromUsbVidPid(unsigned short const vendorId, unsigned short const productId) const
{
	String result;
	check(shim()->abi_GetDeviceSelectorFromUsbVidPid(vendorId, productId, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::SerialCommunication::SerialDevice> impl_ISerialDeviceStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SerialCommunication::SerialDevice> result;
	check(shim()->abi_FromIdAsync(get(deviceId), put(result)));
	return result;
}

template <typename T> Windows::Devices::SerialCommunication::SerialError impl_IErrorReceivedEventArgs<T>::Error() const
{
	Windows::Devices::SerialCommunication::SerialError value = {};
	check(shim()->get_Error(&value));
	return value;
}

template <typename T> Windows::Devices::SerialCommunication::SerialPinChange impl_IPinChangedEventArgs<T>::PinChange() const
{
	Windows::Devices::SerialCommunication::SerialPinChange value = {};
	check(shim()->get_PinChange(&value));
	return value;
}

template <typename T> unsigned impl_ISerialDevice<T>::BaudRate() const
{
	unsigned value = {};
	check(shim()->get_BaudRate(&value));
	return value;
}

template <typename T> void impl_ISerialDevice<T>::BaudRate(unsigned const value) const
{
	check(shim()->put_BaudRate(value));
}

template <typename T> bool impl_ISerialDevice<T>::BreakSignalState() const
{
	bool value = {};
	check(shim()->get_BreakSignalState(put(value)));
	return value;
}

template <typename T> void impl_ISerialDevice<T>::BreakSignalState(bool const value) const
{
	check(shim()->put_BreakSignalState(value));
}

template <typename T> unsigned impl_ISerialDevice<T>::BytesReceived() const
{
	unsigned value = {};
	check(shim()->get_BytesReceived(&value));
	return value;
}

template <typename T> bool impl_ISerialDevice<T>::CarrierDetectState() const
{
	bool value = {};
	check(shim()->get_CarrierDetectState(put(value)));
	return value;
}

template <typename T> bool impl_ISerialDevice<T>::ClearToSendState() const
{
	bool value = {};
	check(shim()->get_ClearToSendState(put(value)));
	return value;
}

template <typename T> unsigned short impl_ISerialDevice<T>::DataBits() const
{
	unsigned short value = {};
	check(shim()->get_DataBits(&value));
	return value;
}

template <typename T> void impl_ISerialDevice<T>::DataBits(unsigned short const value) const
{
	check(shim()->put_DataBits(value));
}

template <typename T> bool impl_ISerialDevice<T>::DataSetReadyState() const
{
	bool value = {};
	check(shim()->get_DataSetReadyState(put(value)));
	return value;
}

template <typename T> Windows::Devices::SerialCommunication::SerialHandshake impl_ISerialDevice<T>::Handshake() const
{
	Windows::Devices::SerialCommunication::SerialHandshake value = {};
	check(shim()->get_Handshake(&value));
	return value;
}

template <typename T> void impl_ISerialDevice<T>::Handshake(Windows::Devices::SerialCommunication::SerialHandshake const value) const
{
	check(shim()->put_Handshake(value));
}

template <typename T> bool impl_ISerialDevice<T>::IsDataTerminalReadyEnabled() const
{
	bool value = {};
	check(shim()->get_IsDataTerminalReadyEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISerialDevice<T>::IsDataTerminalReadyEnabled(bool const value) const
{
	check(shim()->put_IsDataTerminalReadyEnabled(value));
}

template <typename T> bool impl_ISerialDevice<T>::IsRequestToSendEnabled() const
{
	bool value = {};
	check(shim()->get_IsRequestToSendEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISerialDevice<T>::IsRequestToSendEnabled(bool const value) const
{
	check(shim()->put_IsRequestToSendEnabled(value));
}

template <typename T> Windows::Devices::SerialCommunication::SerialParity impl_ISerialDevice<T>::Parity() const
{
	Windows::Devices::SerialCommunication::SerialParity value = {};
	check(shim()->get_Parity(&value));
	return value;
}

template <typename T> void impl_ISerialDevice<T>::Parity(Windows::Devices::SerialCommunication::SerialParity const value) const
{
	check(shim()->put_Parity(value));
}

template <typename T> String impl_ISerialDevice<T>::PortName() const
{
	String value;
	check(shim()->get_PortName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_ISerialDevice<T>::ReadTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_ReadTimeout(&value));
	return value;
}

template <typename T> void impl_ISerialDevice<T>::ReadTimeout(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_ReadTimeout(value));
}

template <typename T> Windows::Devices::SerialCommunication::SerialStopBitCount impl_ISerialDevice<T>::StopBits() const
{
	Windows::Devices::SerialCommunication::SerialStopBitCount value = {};
	check(shim()->get_StopBits(&value));
	return value;
}

template <typename T> void impl_ISerialDevice<T>::StopBits(Windows::Devices::SerialCommunication::SerialStopBitCount const value) const
{
	check(shim()->put_StopBits(value));
}

template <typename T> unsigned short impl_ISerialDevice<T>::UsbVendorId() const
{
	unsigned short value = {};
	check(shim()->get_UsbVendorId(&value));
	return value;
}

template <typename T> unsigned short impl_ISerialDevice<T>::UsbProductId() const
{
	unsigned short value = {};
	check(shim()->get_UsbProductId(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_ISerialDevice<T>::WriteTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_WriteTimeout(&value));
	return value;
}

template <typename T> void impl_ISerialDevice<T>::WriteTimeout(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_WriteTimeout(value));
}

template <typename T> Windows::Storage::Streams::IInputStream impl_ISerialDevice<T>::InputStream() const
{
	Windows::Storage::Streams::IInputStream value;
	check(shim()->get_InputStream(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_ISerialDevice<T>::OutputStream() const
{
	Windows::Storage::Streams::IOutputStream value;
	check(shim()->get_OutputStream(put(value)));
	return value;
}

template <typename T> long long impl_ISerialDevice<T>::ErrorReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::SerialCommunication::SerialDevice, Windows::Devices::SerialCommunication::ErrorReceivedEventArgs> const & reportHandler) const
{
	long long token = {};
	check(shim()->add_ErrorReceived(get(reportHandler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISerialDevice<T>::ErrorReceived(F reportHandler) const
{
	return ErrorReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::SerialCommunication::SerialDevice, Windows::Devices::SerialCommunication::ErrorReceivedEventArgs>(reportHandler));
}

template <typename T> void impl_ISerialDevice<T>::ErrorReceived(long long const token) const
{
	check(shim()->remove_ErrorReceived(token));
}

template <typename T> long long impl_ISerialDevice<T>::PinChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::SerialCommunication::SerialDevice, Windows::Devices::SerialCommunication::PinChangedEventArgs> const & reportHandler) const
{
	long long token = {};
	check(shim()->add_PinChanged(get(reportHandler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISerialDevice<T>::PinChanged(F reportHandler) const
{
	return PinChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::SerialCommunication::SerialDevice, Windows::Devices::SerialCommunication::PinChangedEventArgs>(reportHandler));
}

template <typename T> void impl_ISerialDevice<T>::PinChanged(long long const token) const
{
	check(shim()->remove_PinChanged(token));
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace SmartCards {

template <typename T> void impl_ISmartCardPinResetHandler<T>::Invoke(Windows::Devices::SmartCards::SmartCardProvisioning const & sender, Windows::Devices::SmartCards::SmartCardPinResetRequest const & request) const
{
	check(shim()->abi_Invoke(get(sender), get(request)));
}

template <typename T> String impl_ISmartCardReaderStatics<T>::GetDeviceSelector() const
{
	String selector;
	check(shim()->abi_GetDeviceSelector(put(selector)));
	return selector;
}

template <typename T> String impl_ISmartCardReaderStatics<T>::GetDeviceSelector(Windows::Devices::SmartCards::SmartCardReaderKind const kind) const
{
	String selector;
	check(shim()->abi_GetDeviceSelectorWithKind(kind, put(selector)));
	return selector;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> impl_ISmartCardReaderStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> result;
	check(shim()->abi_FromIdAsync(get(deviceId), put(result)));
	return result;
}

template <typename T> String impl_ISmartCardReader<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> String impl_ISmartCardReader<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Devices::SmartCards::SmartCardReaderKind impl_ISmartCardReader<T>::Kind() const
{
	Windows::Devices::SmartCards::SmartCardReaderKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::SmartCards::SmartCardReaderStatus> impl_ISmartCardReader<T>::GetStatusAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::SmartCards::SmartCardReaderStatus> result;
	check(shim()->abi_GetStatusAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::SmartCards::SmartCard>> impl_ISmartCardReader<T>::FindAllCardsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::SmartCards::SmartCard>> result;
	check(shim()->abi_FindAllCardsAsync(put(result)));
	return result;
}

template <typename T> long long impl_ISmartCardReader<T>::CardAdded(Windows::Foundation::ITypedEventHandler<Windows::Devices::SmartCards::SmartCardReader, Windows::Devices::SmartCards::CardAddedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_CardAdded(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISmartCardReader<T>::CardAdded(F handler) const
{
	return CardAdded(Windows::Foundation::TypedEventHandler<Windows::Devices::SmartCards::SmartCardReader, Windows::Devices::SmartCards::CardAddedEventArgs>(handler));
}

template <typename T> void impl_ISmartCardReader<T>::CardAdded(long long const token) const
{
	check(shim()->remove_CardAdded(token));
}

template <typename T> long long impl_ISmartCardReader<T>::CardRemoved(Windows::Foundation::ITypedEventHandler<Windows::Devices::SmartCards::SmartCardReader, Windows::Devices::SmartCards::CardRemovedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_CardRemoved(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISmartCardReader<T>::CardRemoved(F handler) const
{
	return CardRemoved(Windows::Foundation::TypedEventHandler<Windows::Devices::SmartCards::SmartCardReader, Windows::Devices::SmartCards::CardRemovedEventArgs>(handler));
}

template <typename T> void impl_ISmartCardReader<T>::CardRemoved(long long const token) const
{
	check(shim()->remove_CardRemoved(token));
}

template <typename T> Windows::Devices::SmartCards::SmartCard impl_ICardAddedEventArgs<T>::SmartCard() const
{
	Windows::Devices::SmartCards::SmartCard value = nullptr;
	check(shim()->get_SmartCard(put(value)));
	return value;
}

template <typename T> Windows::Devices::SmartCards::SmartCard impl_ICardRemovedEventArgs<T>::SmartCard() const
{
	Windows::Devices::SmartCards::SmartCard value = nullptr;
	check(shim()->get_SmartCard(put(value)));
	return value;
}

template <typename T> Windows::Devices::SmartCards::SmartCardReader impl_ISmartCard<T>::Reader() const
{
	Windows::Devices::SmartCards::SmartCardReader value = nullptr;
	check(shim()->get_Reader(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::SmartCards::SmartCardStatus> impl_ISmartCard<T>::GetStatusAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::SmartCards::SmartCardStatus> result;
	check(shim()->abi_GetStatusAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ISmartCard<T>::GetAnswerToResetAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> result;
	check(shim()->abi_GetAnswerToResetAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> impl_ISmartCardProvisioningStatics<T>::FromSmartCardAsync(Windows::Devices::SmartCards::SmartCard const & card) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> result;
	check(shim()->abi_FromSmartCardAsync(get(card), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> impl_ISmartCardProvisioningStatics<T>::RequestVirtualSmartCardCreationAsync(StringReference const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> result;
	check(shim()->abi_RequestVirtualSmartCardCreationAsync(get(friendlyName), get(administrativeKey), get(pinPolicy), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> impl_ISmartCardProvisioningStatics<T>::RequestVirtualSmartCardCreationAsync(StringReference const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy, GUID const cardId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> result;
	check(shim()->abi_RequestVirtualSmartCardCreationAsyncWithCardId(get(friendlyName), get(administrativeKey), get(pinPolicy), cardId, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISmartCardProvisioningStatics<T>::RequestVirtualSmartCardDeletionAsync(Windows::Devices::SmartCards::SmartCard const & card) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_RequestVirtualSmartCardDeletionAsync(get(card), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> impl_ISmartCardProvisioningStatics2<T>::RequestAttestedVirtualSmartCardCreationAsync(StringReference const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> result;
	check(shim()->abi_RequestAttestedVirtualSmartCardCreationAsync(get(friendlyName), get(administrativeKey), get(pinPolicy), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> impl_ISmartCardProvisioningStatics2<T>::RequestAttestedVirtualSmartCardCreationAsync(StringReference const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy, GUID const cardId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> result;
	check(shim()->abi_RequestAttestedVirtualSmartCardCreationAsyncWithCardId(get(friendlyName), get(administrativeKey), get(pinPolicy), cardId, put(result)));
	return result;
}

template <typename T> Windows::Devices::SmartCards::SmartCard impl_ISmartCardProvisioning<T>::SmartCard() const
{
	Windows::Devices::SmartCards::SmartCard value = nullptr;
	check(shim()->get_SmartCard(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<GUID> impl_ISmartCardProvisioning<T>::GetIdAsync() const
{
	Windows::Foundation::IAsyncOperation<GUID> result;
	check(shim()->abi_GetIdAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ISmartCardProvisioning<T>::GetNameAsync() const
{
	Windows::Foundation::IAsyncOperation<String> result;
	check(shim()->abi_GetNameAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardChallengeContext> impl_ISmartCardProvisioning<T>::GetChallengeContextAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardChallengeContext> result;
	check(shim()->abi_GetChallengeContextAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISmartCardProvisioning<T>::RequestPinChangeAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_RequestPinChangeAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISmartCardProvisioning<T>::RequestPinResetAsync(Windows::Devices::SmartCards::ISmartCardPinResetHandler const & handler) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_RequestPinResetAsync(get(handler), put(result)));
	return result;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncOperation<bool> impl_ISmartCardProvisioning<T>::RequestPinResetAsync(F handler) const
{
	return RequestPinResetAsync(Windows::Devices::SmartCards::SmartCardPinResetHandler(handler));
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ISmartCardProvisioning2<T>::GetAuthorityKeyContainerNameAsync() const
{
	Windows::Foundation::IAsyncOperation<String> result;
	check(shim()->abi_GetAuthorityKeyContainerNameAsync(put(result)));
	return result;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ISmartCardPinResetRequest<T>::Challenge() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Challenge(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISmartCardPinResetRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Deadline(&value));
	return value;
}

template <typename T> Windows::Devices::SmartCards::SmartCardPinResetDeferral impl_ISmartCardPinResetRequest<T>::GetDeferral() const
{
	Windows::Devices::SmartCards::SmartCardPinResetDeferral result = nullptr;
	check(shim()->abi_GetDeferral(put(result)));
	return result;
}

template <typename T> void impl_ISmartCardPinResetRequest<T>::SetResponse(Windows::Storage::Streams::IBuffer const & response) const
{
	check(shim()->abi_SetResponse(get(response)));
}

template <typename T> void impl_ISmartCardPinResetDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> unsigned impl_ISmartCardPinPolicy<T>::MinLength() const
{
	unsigned value = {};
	check(shim()->get_MinLength(&value));
	return value;
}

template <typename T> void impl_ISmartCardPinPolicy<T>::MinLength(unsigned const value) const
{
	check(shim()->put_MinLength(value));
}

template <typename T> unsigned impl_ISmartCardPinPolicy<T>::MaxLength() const
{
	unsigned value = {};
	check(shim()->get_MaxLength(&value));
	return value;
}

template <typename T> void impl_ISmartCardPinPolicy<T>::MaxLength(unsigned const value) const
{
	check(shim()->put_MaxLength(value));
}

template <typename T> Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption impl_ISmartCardPinPolicy<T>::UppercaseLetters() const
{
	Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption value = {};
	check(shim()->get_UppercaseLetters(&value));
	return value;
}

template <typename T> void impl_ISmartCardPinPolicy<T>::UppercaseLetters(Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption const value) const
{
	check(shim()->put_UppercaseLetters(value));
}

template <typename T> Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption impl_ISmartCardPinPolicy<T>::LowercaseLetters() const
{
	Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption value = {};
	check(shim()->get_LowercaseLetters(&value));
	return value;
}

template <typename T> void impl_ISmartCardPinPolicy<T>::LowercaseLetters(Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption const value) const
{
	check(shim()->put_LowercaseLetters(value));
}

template <typename T> Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption impl_ISmartCardPinPolicy<T>::Digits() const
{
	Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption value = {};
	check(shim()->get_Digits(&value));
	return value;
}

template <typename T> void impl_ISmartCardPinPolicy<T>::Digits(Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption const value) const
{
	check(shim()->put_Digits(value));
}

template <typename T> Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption impl_ISmartCardPinPolicy<T>::SpecialCharacters() const
{
	Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption value = {};
	check(shim()->get_SpecialCharacters(&value));
	return value;
}

template <typename T> void impl_ISmartCardPinPolicy<T>::SpecialCharacters(Windows::Devices::SmartCards::SmartCardPinCharacterPolicyOption const value) const
{
	check(shim()->put_SpecialCharacters(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardConnection> impl_ISmartCardConnect<T>::ConnectAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardConnection> result;
	check(shim()->abi_ConnectAsync(put(result)));
	return result;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ISmartCardChallengeContext<T>::Challenge() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Challenge(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISmartCardChallengeContext<T>::VerifyResponseAsync(Windows::Storage::Streams::IBuffer const & response) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_VerifyResponseAsync(get(response), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISmartCardChallengeContext<T>::ProvisionAsync(Windows::Storage::Streams::IBuffer const & response, bool const formatCard) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_ProvisionAsync(get(response), formatCard, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISmartCardChallengeContext<T>::ProvisionAsync(Windows::Storage::Streams::IBuffer const & response, bool const formatCard, GUID const newCardId) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_ProvisionAsyncWithNewCardId(get(response), formatCard, newCardId, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISmartCardChallengeContext<T>::ChangeAdministrativeKeyAsync(Windows::Storage::Streams::IBuffer const & response, Windows::Storage::Streams::IBuffer const & newAdministrativeKey) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_ChangeAdministrativeKeyAsync(get(response), get(newAdministrativeKey), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ISmartCardConnection<T>::TransmitAsync(Windows::Storage::Streams::IBuffer const & command) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> result;
	check(shim()->abi_TransmitAsync(get(command), put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sms {

template <typename T> void impl_ISmsMessageReceivedEventHandler<T>::Invoke(Windows::Devices::Sms::SmsDevice const & sender, Windows::Devices::Sms::SmsMessageReceivedEventArgs const & e) const
{
	check(shim()->abi_Invoke(get(sender), get(e)));
}

template <typename T> void impl_ISmsDeviceStatusChangedEventHandler<T>::Invoke(Windows::Devices::Sms::SmsDevice const & sender) const
{
	check(shim()->abi_Invoke(get(sender)));
}

template <typename T> unsigned impl_ISmsMessage<T>::Id() const
{
	unsigned value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsMessageClass impl_ISmsMessage<T>::MessageClass() const
{
	Windows::Devices::Sms::SmsMessageClass value = {};
	check(shim()->get_MessageClass(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsMessageType impl_ISmsMessageBase<T>::MessageType() const
{
	Windows::Devices::Sms::SmsMessageType value = {};
	check(shim()->get_MessageType(&value));
	return value;
}

template <typename T> String impl_ISmsMessageBase<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::CellularClass impl_ISmsMessageBase<T>::CellularClass() const
{
	Windows::Devices::Sms::CellularClass value = {};
	check(shim()->get_CellularClass(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsMessageClass impl_ISmsMessageBase<T>::MessageClass() const
{
	Windows::Devices::Sms::SmsMessageClass value = {};
	check(shim()->get_MessageClass(&value));
	return value;
}

template <typename T> String impl_ISmsMessageBase<T>::SimIccId() const
{
	String value;
	check(shim()->get_SimIccId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDataFormat impl_ISmsBinaryMessage<T>::Format() const
{
	Windows::Devices::Sms::SmsDataFormat value = {};
	check(shim()->get_Format(&value));
	return value;
}

template <typename T> void impl_ISmsBinaryMessage<T>::Format(Windows::Devices::Sms::SmsDataFormat const value) const
{
	check(shim()->put_Format(value));
}

template <typename T> Windows::Foundation::DateTime impl_ISmsTextMessage<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> unsigned impl_ISmsTextMessage<T>::PartReferenceId() const
{
	unsigned value = {};
	check(shim()->get_PartReferenceId(&value));
	return value;
}

template <typename T> unsigned impl_ISmsTextMessage<T>::PartNumber() const
{
	unsigned value = {};
	check(shim()->get_PartNumber(&value));
	return value;
}

template <typename T> unsigned impl_ISmsTextMessage<T>::PartCount() const
{
	unsigned value = {};
	check(shim()->get_PartCount(&value));
	return value;
}

template <typename T> String impl_ISmsTextMessage<T>::To() const
{
	String value;
	check(shim()->get_To(put(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage<T>::To(StringReference const & value) const
{
	check(shim()->put_To(get(value)));
}

template <typename T> String impl_ISmsTextMessage<T>::From() const
{
	String value;
	check(shim()->get_From(put(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage<T>::From(StringReference const & value) const
{
	check(shim()->put_From(get(value)));
}

template <typename T> String impl_ISmsTextMessage<T>::Body() const
{
	String value;
	check(shim()->get_Body(put(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage<T>::Body(StringReference const & value) const
{
	check(shim()->put_Body(get(value)));
}

template <typename T> Windows::Devices::Sms::SmsEncoding impl_ISmsTextMessage<T>::Encoding() const
{
	Windows::Devices::Sms::SmsEncoding value = {};
	check(shim()->get_Encoding(&value));
	return value;
}

template <typename T> void impl_ISmsTextMessage<T>::Encoding(Windows::Devices::Sms::SmsEncoding const value) const
{
	check(shim()->put_Encoding(value));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsBinaryMessage> impl_ISmsTextMessage<T>::ToBinaryMessages(Windows::Devices::Sms::SmsDataFormat const format) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsBinaryMessage> messages;
	check(shim()->abi_ToBinaryMessages(format, put(messages)));
	return messages;
}

template <typename T> Windows::Devices::Sms::SmsTextMessage impl_ISmsTextMessageStatics<T>::FromBinaryMessage(Windows::Devices::Sms::SmsBinaryMessage const & binaryMessage) const
{
	Windows::Devices::Sms::SmsTextMessage textMessage = nullptr;
	check(shim()->abi_FromBinaryMessage(get(binaryMessage), put(textMessage)));
	return textMessage;
}

template <typename T> Windows::Foundation::DateTime impl_ISmsTextMessage2<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> String impl_ISmsTextMessage2<T>::To() const
{
	String value;
	check(shim()->get_To(put(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage2<T>::To(StringReference const & value) const
{
	check(shim()->put_To(get(value)));
}

template <typename T> String impl_ISmsTextMessage2<T>::From() const
{
	String value;
	check(shim()->get_From(put(value)));
	return value;
}

template <typename T> String impl_ISmsTextMessage2<T>::Body() const
{
	String value;
	check(shim()->get_Body(put(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage2<T>::Body(StringReference const & value) const
{
	check(shim()->put_Body(get(value)));
}

template <typename T> Windows::Devices::Sms::SmsEncoding impl_ISmsTextMessage2<T>::Encoding() const
{
	Windows::Devices::Sms::SmsEncoding value = {};
	check(shim()->get_Encoding(&value));
	return value;
}

template <typename T> void impl_ISmsTextMessage2<T>::Encoding(Windows::Devices::Sms::SmsEncoding const value) const
{
	check(shim()->put_Encoding(value));
}

template <typename T> String impl_ISmsTextMessage2<T>::CallbackNumber() const
{
	String value;
	check(shim()->get_CallbackNumber(put(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage2<T>::CallbackNumber(StringReference const & value) const
{
	check(shim()->put_CallbackNumber(get(value)));
}

template <typename T> bool impl_ISmsTextMessage2<T>::IsDeliveryNotificationEnabled() const
{
	bool value = {};
	check(shim()->get_IsDeliveryNotificationEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISmsTextMessage2<T>::IsDeliveryNotificationEnabled(bool const value) const
{
	check(shim()->put_IsDeliveryNotificationEnabled(value));
}

template <typename T> int impl_ISmsTextMessage2<T>::RetryAttemptCount() const
{
	int value = {};
	check(shim()->get_RetryAttemptCount(&value));
	return value;
}

template <typename T> void impl_ISmsTextMessage2<T>::RetryAttemptCount(int const value) const
{
	check(shim()->put_RetryAttemptCount(value));
}

template <typename T> int impl_ISmsTextMessage2<T>::TeleserviceId() const
{
	int value = {};
	check(shim()->get_TeleserviceId(&value));
	return value;
}

template <typename T> int impl_ISmsTextMessage2<T>::ProtocolId() const
{
	int value = {};
	check(shim()->get_ProtocolId(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISmsWapMessage<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> String impl_ISmsWapMessage<T>::To() const
{
	String value;
	check(shim()->get_To(put(value)));
	return value;
}

template <typename T> String impl_ISmsWapMessage<T>::From() const
{
	String value;
	check(shim()->get_From(put(value)));
	return value;
}

template <typename T> String impl_ISmsWapMessage<T>::ApplicationId() const
{
	String value;
	check(shim()->get_ApplicationId(put(value)));
	return value;
}

template <typename T> String impl_ISmsWapMessage<T>::ContentType() const
{
	String value;
	check(shim()->get_ContentType(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ISmsWapMessage<T>::BinaryBody() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_BinaryBody(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_ISmsWapMessage<T>::Headers() const
{
	Windows::Foundation::Collections::IMap<String, String> value;
	check(shim()->get_Headers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISmsAppMessage<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> String impl_ISmsAppMessage<T>::To() const
{
	String value;
	check(shim()->get_To(put(value)));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::To(StringReference const & value) const
{
	check(shim()->put_To(get(value)));
}

template <typename T> String impl_ISmsAppMessage<T>::From() const
{
	String value;
	check(shim()->get_From(put(value)));
	return value;
}

template <typename T> String impl_ISmsAppMessage<T>::Body() const
{
	String value;
	check(shim()->get_Body(put(value)));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::Body(StringReference const & value) const
{
	check(shim()->put_Body(get(value)));
}

template <typename T> String impl_ISmsAppMessage<T>::CallbackNumber() const
{
	String value;
	check(shim()->get_CallbackNumber(put(value)));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::CallbackNumber(StringReference const & value) const
{
	check(shim()->put_CallbackNumber(get(value)));
}

template <typename T> bool impl_ISmsAppMessage<T>::IsDeliveryNotificationEnabled() const
{
	bool value = {};
	check(shim()->get_IsDeliveryNotificationEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::IsDeliveryNotificationEnabled(bool const value) const
{
	check(shim()->put_IsDeliveryNotificationEnabled(value));
}

template <typename T> int impl_ISmsAppMessage<T>::RetryAttemptCount() const
{
	int value = {};
	check(shim()->get_RetryAttemptCount(&value));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::RetryAttemptCount(int const value) const
{
	check(shim()->put_RetryAttemptCount(value));
}

template <typename T> Windows::Devices::Sms::SmsEncoding impl_ISmsAppMessage<T>::Encoding() const
{
	Windows::Devices::Sms::SmsEncoding value = {};
	check(shim()->get_Encoding(&value));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::Encoding(Windows::Devices::Sms::SmsEncoding const value) const
{
	check(shim()->put_Encoding(value));
}

template <typename T> int impl_ISmsAppMessage<T>::PortNumber() const
{
	int value = {};
	check(shim()->get_PortNumber(&value));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::PortNumber(int const value) const
{
	check(shim()->put_PortNumber(value));
}

template <typename T> int impl_ISmsAppMessage<T>::TeleserviceId() const
{
	int value = {};
	check(shim()->get_TeleserviceId(&value));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::TeleserviceId(int const value) const
{
	check(shim()->put_TeleserviceId(value));
}

template <typename T> int impl_ISmsAppMessage<T>::ProtocolId() const
{
	int value = {};
	check(shim()->get_ProtocolId(&value));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::ProtocolId(int const value) const
{
	check(shim()->put_ProtocolId(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ISmsAppMessage<T>::BinaryBody() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_BinaryBody(put(value)));
	return value;
}

template <typename T> void impl_ISmsAppMessage<T>::BinaryBody(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_BinaryBody(get(value)));
}

template <typename T> Windows::Foundation::DateTime impl_ISmsBroadcastMessage<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> String impl_ISmsBroadcastMessage<T>::To() const
{
	String value;
	check(shim()->get_To(put(value)));
	return value;
}

template <typename T> String impl_ISmsBroadcastMessage<T>::Body() const
{
	String value;
	check(shim()->get_Body(put(value)));
	return value;
}

template <typename T> int impl_ISmsBroadcastMessage<T>::Channel() const
{
	int value = {};
	check(shim()->get_Channel(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsGeographicalScope impl_ISmsBroadcastMessage<T>::GeographicalScope() const
{
	Windows::Devices::Sms::SmsGeographicalScope value = {};
	check(shim()->get_GeographicalScope(&value));
	return value;
}

template <typename T> int impl_ISmsBroadcastMessage<T>::MessageCode() const
{
	int value = {};
	check(shim()->get_MessageCode(&value));
	return value;
}

template <typename T> int impl_ISmsBroadcastMessage<T>::UpdateNumber() const
{
	int value = {};
	check(shim()->get_UpdateNumber(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsBroadcastType impl_ISmsBroadcastMessage<T>::BroadcastType() const
{
	Windows::Devices::Sms::SmsBroadcastType value = {};
	check(shim()->get_BroadcastType(&value));
	return value;
}

template <typename T> bool impl_ISmsBroadcastMessage<T>::IsEmergencyAlert() const
{
	bool value = {};
	check(shim()->get_IsEmergencyAlert(put(value)));
	return value;
}

template <typename T> bool impl_ISmsBroadcastMessage<T>::IsUserPopupRequested() const
{
	bool value = {};
	check(shim()->get_IsUserPopupRequested(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISmsVoicemailMessage<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> String impl_ISmsVoicemailMessage<T>::To() const
{
	String value;
	check(shim()->get_To(put(value)));
	return value;
}

template <typename T> String impl_ISmsVoicemailMessage<T>::Body() const
{
	String value;
	check(shim()->get_Body(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<int> impl_ISmsVoicemailMessage<T>::MessageCount() const
{
	Windows::Foundation::IReference<int> value;
	check(shim()->get_MessageCount(put(value)));
	return value;
}

template <typename T> String impl_ISmsStatusMessage<T>::To() const
{
	String value;
	check(shim()->get_To(put(value)));
	return value;
}

template <typename T> String impl_ISmsStatusMessage<T>::From() const
{
	String value;
	check(shim()->get_From(put(value)));
	return value;
}

template <typename T> String impl_ISmsStatusMessage<T>::Body() const
{
	String value;
	check(shim()->get_Body(put(value)));
	return value;
}

template <typename T> int impl_ISmsStatusMessage<T>::Status() const
{
	int value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> int impl_ISmsStatusMessage<T>::MessageReferenceNumber() const
{
	int value = {};
	check(shim()->get_MessageReferenceNumber(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISmsStatusMessage<T>::ServiceCenterTimestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_ServiceCenterTimestamp(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISmsStatusMessage<T>::DischargeTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_DischargeTime(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISmsDeviceMessageStore<T>::DeleteMessageAsync(unsigned const messageId) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_DeleteMessageAsync(messageId, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISmsDeviceMessageStore<T>::DeleteMessagesAsync(Windows::Devices::Sms::SmsMessageFilter const messageFilter) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_DeleteMessagesAsync(messageFilter, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::ISmsMessage> impl_ISmsDeviceMessageStore<T>::GetMessageAsync(unsigned const messageId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::ISmsMessage> asyncInfo;
	check(shim()->abi_GetMessageAsync(messageId, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsMessage>, int> impl_ISmsDeviceMessageStore<T>::GetMessagesAsync(Windows::Devices::Sms::SmsMessageFilter const messageFilter) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::ISmsMessage>, int> asyncInfo;
	check(shim()->abi_GetMessagesAsync(messageFilter, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> unsigned impl_ISmsDeviceMessageStore<T>::MaxMessages() const
{
	unsigned value = {};
	check(shim()->get_MaxMessages(&value));
	return value;
}

template <typename T> bool impl_ISmsSendMessageResult<T>::IsSuccessful() const
{
	bool value = {};
	check(shim()->get_IsSuccessful(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<int> impl_ISmsSendMessageResult<T>::MessageReferenceNumbers() const
{
	Windows::Foundation::Collections::IVectorView<int> value;
	check(shim()->get_MessageReferenceNumbers(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::CellularClass impl_ISmsSendMessageResult<T>::CellularClass() const
{
	Windows::Devices::Sms::CellularClass value = {};
	check(shim()->get_CellularClass(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsModemErrorCode impl_ISmsSendMessageResult<T>::ModemErrorCode() const
{
	Windows::Devices::Sms::SmsModemErrorCode value = {};
	check(shim()->get_ModemErrorCode(&value));
	return value;
}

template <typename T> bool impl_ISmsSendMessageResult<T>::IsErrorTransient() const
{
	bool value = {};
	check(shim()->get_IsErrorTransient(put(value)));
	return value;
}

template <typename T> int impl_ISmsSendMessageResult<T>::NetworkCauseCode() const
{
	int value = {};
	check(shim()->get_NetworkCauseCode(&value));
	return value;
}

template <typename T> int impl_ISmsSendMessageResult<T>::TransportFailureCause() const
{
	int value = {};
	check(shim()->get_TransportFailureCause(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsTextMessage impl_ISmsMessageReceivedEventArgs<T>::TextMessage() const
{
	Windows::Devices::Sms::SmsTextMessage value = nullptr;
	check(shim()->get_TextMessage(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsBinaryMessage impl_ISmsMessageReceivedEventArgs<T>::BinaryMessage() const
{
	Windows::Devices::Sms::SmsBinaryMessage value = nullptr;
	check(shim()->get_BinaryMessage(put(value)));
	return value;
}

template <typename T> String impl_ISmsDeviceStatics<T>::GetDeviceSelector() const
{
	String phstrDeviceClassSelector;
	check(shim()->abi_GetDeviceSelector(put(phstrDeviceClassSelector)));
	return phstrDeviceClassSelector;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> impl_ISmsDeviceStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> asyncInfo;
	check(shim()->abi_FromIdAsync(get(deviceId), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> impl_ISmsDeviceStatics<T>::GetDefaultAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> asyncInfo;
	check(shim()->abi_GetDefaultAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> impl_ISmsDeviceStatics2<T>::FromNetworkAccountIdAsync(StringReference const & networkAccountId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> asyncInfo;
	check(shim()->abi_FromNetworkAccountIdAsync(get(networkAccountId), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Devices::Sms::SendSmsMessageOperation impl_ISmsDevice<T>::SendMessageAsync(Windows::Devices::Sms::ISmsMessage const & message) const
{
	Windows::Devices::Sms::SendSmsMessageOperation asyncInfo = nullptr;
	check(shim()->abi_SendMessageAsync(get(message), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Devices::Sms::SmsEncodedLength impl_ISmsDevice<T>::CalculateLength(Windows::Devices::Sms::SmsTextMessage const & message) const
{
	Windows::Devices::Sms::SmsEncodedLength encodedLength = {};
	check(shim()->abi_CalculateLength(get(message), &encodedLength));
	return encodedLength;
}

template <typename T> String impl_ISmsDevice<T>::AccountPhoneNumber() const
{
	String value;
	check(shim()->get_AccountPhoneNumber(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::CellularClass impl_ISmsDevice<T>::CellularClass() const
{
	Windows::Devices::Sms::CellularClass value = {};
	check(shim()->get_CellularClass(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDeviceMessageStore impl_ISmsDevice<T>::MessageStore() const
{
	Windows::Devices::Sms::SmsDeviceMessageStore value = nullptr;
	check(shim()->get_MessageStore(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDeviceStatus impl_ISmsDevice<T>::DeviceStatus() const
{
	Windows::Devices::Sms::SmsDeviceStatus value = {};
	check(shim()->get_DeviceStatus(&value));
	return value;
}

template <typename T> long long impl_ISmsDevice<T>::SmsMessageReceived(Windows::Devices::Sms::ISmsMessageReceivedEventHandler const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_SmsMessageReceived(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_ISmsDevice<T>::SmsMessageReceived(F eventHandler) const
{
	return SmsMessageReceived(Windows::Devices::Sms::SmsMessageReceivedEventHandler(eventHandler));
}

template <typename T> void impl_ISmsDevice<T>::SmsMessageReceived(long long const eventCookie) const
{
	check(shim()->remove_SmsMessageReceived(eventCookie));
}

template <typename T> long long impl_ISmsDevice<T>::SmsDeviceStatusChanged(Windows::Devices::Sms::ISmsDeviceStatusChangedEventHandler const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_SmsDeviceStatusChanged(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_ISmsDevice<T>::SmsDeviceStatusChanged(F eventHandler) const
{
	return SmsDeviceStatusChanged(Windows::Devices::Sms::SmsDeviceStatusChangedEventHandler(eventHandler));
}

template <typename T> void impl_ISmsDevice<T>::SmsDeviceStatusChanged(long long const eventCookie) const
{
	check(shim()->remove_SmsDeviceStatusChanged(eventCookie));
}

template <typename T> String impl_ISmsDevice2Statics<T>::GetDeviceSelector() const
{
	String value;
	check(shim()->abi_GetDeviceSelector(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDevice2 impl_ISmsDevice2Statics<T>::FromId(StringReference const & deviceId) const
{
	Windows::Devices::Sms::SmsDevice2 value = nullptr;
	check(shim()->abi_FromId(get(deviceId), put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDevice2 impl_ISmsDevice2Statics<T>::GetDefault() const
{
	Windows::Devices::Sms::SmsDevice2 value = nullptr;
	check(shim()->abi_GetDefault(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDevice2 impl_ISmsDevice2Statics<T>::FromParentId(StringReference const & parentDeviceId) const
{
	Windows::Devices::Sms::SmsDevice2 value = nullptr;
	check(shim()->abi_FromParentId(get(parentDeviceId), put(value)));
	return value;
}

template <typename T> String impl_ISmsDevice2<T>::SmscAddress() const
{
	String value;
	check(shim()->get_SmscAddress(put(value)));
	return value;
}

template <typename T> void impl_ISmsDevice2<T>::SmscAddress(StringReference const & value) const
{
	check(shim()->put_SmscAddress(get(value)));
}

template <typename T> String impl_ISmsDevice2<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> String impl_ISmsDevice2<T>::ParentDeviceId() const
{
	String value;
	check(shim()->get_ParentDeviceId(put(value)));
	return value;
}

template <typename T> String impl_ISmsDevice2<T>::AccountPhoneNumber() const
{
	String value;
	check(shim()->get_AccountPhoneNumber(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::CellularClass impl_ISmsDevice2<T>::CellularClass() const
{
	Windows::Devices::Sms::CellularClass value = {};
	check(shim()->get_CellularClass(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsDeviceStatus impl_ISmsDevice2<T>::DeviceStatus() const
{
	Windows::Devices::Sms::SmsDeviceStatus value = {};
	check(shim()->get_DeviceStatus(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsEncodedLength impl_ISmsDevice2<T>::CalculateLength(Windows::Devices::Sms::ISmsMessageBase const & message) const
{
	Windows::Devices::Sms::SmsEncodedLength value = {};
	check(shim()->abi_CalculateLength(get(message), &value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsSendMessageResult> impl_ISmsDevice2<T>::SendMessageAndGetResultAsync(Windows::Devices::Sms::ISmsMessageBase const & message) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsSendMessageResult> asyncInfo;
	check(shim()->abi_SendMessageAndGetResultAsync(get(message), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> long long impl_ISmsDevice2<T>::DeviceStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sms::SmsDevice2, IInspectable> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_DeviceStatusChanged(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_ISmsDevice2<T>::DeviceStatusChanged(F eventHandler) const
{
	return DeviceStatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::Sms::SmsDevice2, IInspectable>(eventHandler));
}

template <typename T> void impl_ISmsDevice2<T>::DeviceStatusChanged(long long const eventCookie) const
{
	check(shim()->remove_DeviceStatusChanged(eventCookie));
}

template <typename T> String impl_ISmsReceivedEventDetails<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> unsigned impl_ISmsReceivedEventDetails<T>::MessageIndex() const
{
	unsigned value = {};
	check(shim()->get_MessageIndex(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsMessageClass impl_ISmsReceivedEventDetails2<T>::MessageClass() const
{
	Windows::Devices::Sms::SmsMessageClass value = {};
	check(shim()->get_MessageClass(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsBinaryMessage impl_ISmsReceivedEventDetails2<T>::BinaryMessage() const
{
	Windows::Devices::Sms::SmsBinaryMessage value = nullptr;
	check(shim()->get_BinaryMessage(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsMessageType impl_ISmsMessageReceivedTriggerDetails<T>::MessageType() const
{
	Windows::Devices::Sms::SmsMessageType value = {};
	check(shim()->get_MessageType(&value));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsTextMessage2 impl_ISmsMessageReceivedTriggerDetails<T>::TextMessage() const
{
	Windows::Devices::Sms::SmsTextMessage2 value = nullptr;
	check(shim()->get_TextMessage(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsWapMessage impl_ISmsMessageReceivedTriggerDetails<T>::WapMessage() const
{
	Windows::Devices::Sms::SmsWapMessage value = nullptr;
	check(shim()->get_WapMessage(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsAppMessage impl_ISmsMessageReceivedTriggerDetails<T>::AppMessage() const
{
	Windows::Devices::Sms::SmsAppMessage value = nullptr;
	check(shim()->get_AppMessage(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsBroadcastMessage impl_ISmsMessageReceivedTriggerDetails<T>::BroadcastMessage() const
{
	Windows::Devices::Sms::SmsBroadcastMessage value = nullptr;
	check(shim()->get_BroadcastMessage(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsVoicemailMessage impl_ISmsMessageReceivedTriggerDetails<T>::VoicemailMessage() const
{
	Windows::Devices::Sms::SmsVoicemailMessage value = nullptr;
	check(shim()->get_VoicemailMessage(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsStatusMessage impl_ISmsMessageReceivedTriggerDetails<T>::StatusMessage() const
{
	Windows::Devices::Sms::SmsStatusMessage value = nullptr;
	check(shim()->get_StatusMessage(put(value)));
	return value;
}

template <typename T> void impl_ISmsMessageReceivedTriggerDetails<T>::Drop() const
{
	check(shim()->abi_Drop());
}

template <typename T> void impl_ISmsMessageReceivedTriggerDetails<T>::Accept() const
{
	check(shim()->abi_Accept());
}

template <typename T> Windows::Devices::Sms::SmsMessageType impl_ISmsFilterRule<T>::MessageType() const
{
	Windows::Devices::Sms::SmsMessageType value = {};
	check(shim()->get_MessageType(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ISmsFilterRule<T>::ImsiPrefixes() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_ImsiPrefixes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ISmsFilterRule<T>::DeviceIds() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_DeviceIds(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ISmsFilterRule<T>::SenderNumbers() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_SenderNumbers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ISmsFilterRule<T>::TextMessagePrefixes() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_TextMessagePrefixes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<int> impl_ISmsFilterRule<T>::PortNumbers() const
{
	Windows::Foundation::Collections::IVector<int> value;
	check(shim()->get_PortNumbers(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::CellularClass impl_ISmsFilterRule<T>::CellularClass() const
{
	Windows::Devices::Sms::CellularClass value = {};
	check(shim()->get_CellularClass(&value));
	return value;
}

template <typename T> void impl_ISmsFilterRule<T>::CellularClass(Windows::Devices::Sms::CellularClass const value) const
{
	check(shim()->put_CellularClass(value));
}

template <typename T> Windows::Foundation::Collections::IVector<int> impl_ISmsFilterRule<T>::ProtocolIds() const
{
	Windows::Foundation::Collections::IVector<int> value;
	check(shim()->get_ProtocolIds(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<int> impl_ISmsFilterRule<T>::TeleserviceIds() const
{
	Windows::Foundation::Collections::IVector<int> value;
	check(shim()->get_TeleserviceIds(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ISmsFilterRule<T>::WapApplicationIds() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_WapApplicationIds(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ISmsFilterRule<T>::WapContentTypes() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_WapContentTypes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Sms::SmsBroadcastType> impl_ISmsFilterRule<T>::BroadcastTypes() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Devices::Sms::SmsBroadcastType> value;
	check(shim()->get_BroadcastTypes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<int> impl_ISmsFilterRule<T>::BroadcastChannels() const
{
	Windows::Foundation::Collections::IVector<int> value;
	check(shim()->get_BroadcastChannels(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsFilterRule impl_ISmsFilterRuleFactory<T>::CreateFilterRule(Windows::Devices::Sms::SmsMessageType const messageType) const
{
	Windows::Devices::Sms::SmsFilterRule value = nullptr;
	check(shim()->abi_CreateFilterRule(messageType, put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsFilterActionType impl_ISmsFilterRules<T>::ActionType() const
{
	Windows::Devices::Sms::SmsFilterActionType value = {};
	check(shim()->get_ActionType(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Devices::Sms::SmsFilterRule> impl_ISmsFilterRules<T>::Rules() const
{
	Windows::Foundation::Collections::IVector<Windows::Devices::Sms::SmsFilterRule> value;
	check(shim()->get_Rules(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsFilterRules impl_ISmsFilterRulesFactory<T>::CreateFilterRules(Windows::Devices::Sms::SmsFilterActionType const actionType) const
{
	Windows::Devices::Sms::SmsFilterRules value = nullptr;
	check(shim()->abi_CreateFilterRules(actionType, put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::SmsMessageRegistration> impl_ISmsMessageRegistrationStatics<T>::AllRegistrations() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::SmsMessageRegistration> value;
	check(shim()->get_AllRegistrations(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::SmsMessageRegistration impl_ISmsMessageRegistrationStatics<T>::Register(StringReference const & id, Windows::Devices::Sms::SmsFilterRules const & filterRules) const
{
	Windows::Devices::Sms::SmsMessageRegistration value = nullptr;
	check(shim()->abi_Register(get(id), get(filterRules), put(value)));
	return value;
}

template <typename T> String impl_ISmsMessageRegistration<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_ISmsMessageRegistration<T>::Unregister() const
{
	check(shim()->abi_Unregister());
}

template <typename T> long long impl_ISmsMessageRegistration<T>::MessageReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::Sms::SmsMessageRegistration, Windows::Devices::Sms::SmsMessageReceivedTriggerDetails> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_MessageReceived(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_ISmsMessageRegistration<T>::MessageReceived(F eventHandler) const
{
	return MessageReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::Sms::SmsMessageRegistration, Windows::Devices::Sms::SmsMessageReceivedTriggerDetails>(eventHandler));
}

template <typename T> void impl_ISmsMessageRegistration<T>::MessageReceived(long long const eventCookie) const
{
	check(shim()->remove_MessageReceived(eventCookie));
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Usb {

template <typename T> Windows::Devices::Usb::UsbTransferDirection impl_IUsbControlRequestType<T>::Direction() const
{
	Windows::Devices::Usb::UsbTransferDirection value = {};
	check(shim()->get_Direction(&value));
	return value;
}

template <typename T> void impl_IUsbControlRequestType<T>::Direction(Windows::Devices::Usb::UsbTransferDirection const value) const
{
	check(shim()->put_Direction(value));
}

template <typename T> Windows::Devices::Usb::UsbControlTransferType impl_IUsbControlRequestType<T>::ControlTransferType() const
{
	Windows::Devices::Usb::UsbControlTransferType value = {};
	check(shim()->get_ControlTransferType(&value));
	return value;
}

template <typename T> void impl_IUsbControlRequestType<T>::ControlTransferType(Windows::Devices::Usb::UsbControlTransferType const value) const
{
	check(shim()->put_ControlTransferType(value));
}

template <typename T> Windows::Devices::Usb::UsbControlRecipient impl_IUsbControlRequestType<T>::Recipient() const
{
	Windows::Devices::Usb::UsbControlRecipient value = {};
	check(shim()->get_Recipient(&value));
	return value;
}

template <typename T> void impl_IUsbControlRequestType<T>::Recipient(Windows::Devices::Usb::UsbControlRecipient const value) const
{
	check(shim()->put_Recipient(value));
}

template <typename T> byte impl_IUsbControlRequestType<T>::AsByte() const
{
	byte value = {};
	check(shim()->get_AsByte(&value));
	return value;
}

template <typename T> void impl_IUsbControlRequestType<T>::AsByte(byte const value) const
{
	check(shim()->put_AsByte(value));
}

template <typename T> Windows::Devices::Usb::UsbSetupPacket impl_IUsbSetupPacketFactory<T>::CreateWithEightByteBuffer(Windows::Storage::Streams::IBuffer const & eightByteBuffer) const
{
	Windows::Devices::Usb::UsbSetupPacket value = nullptr;
	check(shim()->abi_CreateWithEightByteBuffer(get(eightByteBuffer), put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbControlRequestType impl_IUsbSetupPacket<T>::RequestType() const
{
	Windows::Devices::Usb::UsbControlRequestType value = nullptr;
	check(shim()->get_RequestType(put(value)));
	return value;
}

template <typename T> void impl_IUsbSetupPacket<T>::RequestType(Windows::Devices::Usb::UsbControlRequestType const & value) const
{
	check(shim()->put_RequestType(get(value)));
}

template <typename T> byte impl_IUsbSetupPacket<T>::Request() const
{
	byte value = {};
	check(shim()->get_Request(&value));
	return value;
}

template <typename T> void impl_IUsbSetupPacket<T>::Request(byte const value) const
{
	check(shim()->put_Request(value));
}

template <typename T> unsigned impl_IUsbSetupPacket<T>::Value() const
{
	unsigned value = {};
	check(shim()->get_Value(&value));
	return value;
}

template <typename T> void impl_IUsbSetupPacket<T>::Value(unsigned const value) const
{
	check(shim()->put_Value(value));
}

template <typename T> unsigned impl_IUsbSetupPacket<T>::Index() const
{
	unsigned value = {};
	check(shim()->get_Index(&value));
	return value;
}

template <typename T> void impl_IUsbSetupPacket<T>::Index(unsigned const value) const
{
	check(shim()->put_Index(value));
}

template <typename T> unsigned impl_IUsbSetupPacket<T>::Length() const
{
	unsigned value = {};
	check(shim()->get_Length(&value));
	return value;
}

template <typename T> void impl_IUsbSetupPacket<T>::Length(unsigned const value) const
{
	check(shim()->put_Length(value));
}

template <typename T> byte impl_IUsbDeviceClass<T>::ClassCode() const
{
	byte value = {};
	check(shim()->get_ClassCode(&value));
	return value;
}

template <typename T> void impl_IUsbDeviceClass<T>::ClassCode(byte const value) const
{
	check(shim()->put_ClassCode(value));
}

template <typename T> Windows::Foundation::IReference<byte> impl_IUsbDeviceClass<T>::SubclassCode() const
{
	Windows::Foundation::IReference<byte> value;
	check(shim()->get_SubclassCode(put(value)));
	return value;
}

template <typename T> void impl_IUsbDeviceClass<T>::SubclassCode(Windows::Foundation::IReference<byte> const & value) const
{
	check(shim()->put_SubclassCode(get(value)));
}

template <typename T> Windows::Foundation::IReference<byte> impl_IUsbDeviceClass<T>::ProtocolCode() const
{
	Windows::Foundation::IReference<byte> value;
	check(shim()->get_ProtocolCode(put(value)));
	return value;
}

template <typename T> void impl_IUsbDeviceClass<T>::ProtocolCode(Windows::Foundation::IReference<byte> const & value) const
{
	check(shim()->put_ProtocolCode(get(value)));
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::CdcControl() const
{
	Windows::Devices::Usb::UsbDeviceClass value = nullptr;
	check(shim()->get_CdcControl(put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::Physical() const
{
	Windows::Devices::Usb::UsbDeviceClass value = nullptr;
	check(shim()->get_Physical(put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::PersonalHealthcare() const
{
	Windows::Devices::Usb::UsbDeviceClass value = nullptr;
	check(shim()->get_PersonalHealthcare(put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::ActiveSync() const
{
	Windows::Devices::Usb::UsbDeviceClass value = nullptr;
	check(shim()->get_ActiveSync(put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::PalmSync() const
{
	Windows::Devices::Usb::UsbDeviceClass value = nullptr;
	check(shim()->get_PalmSync(put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::DeviceFirmwareUpdate() const
{
	Windows::Devices::Usb::UsbDeviceClass value = nullptr;
	check(shim()->get_DeviceFirmwareUpdate(put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::Irda() const
{
	Windows::Devices::Usb::UsbDeviceClass value = nullptr;
	check(shim()->get_Irda(put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::Measurement() const
{
	Windows::Devices::Usb::UsbDeviceClass value = nullptr;
	check(shim()->get_Measurement(put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceClass impl_IUsbDeviceClassesStatics<T>::VendorSpecific() const
{
	Windows::Devices::Usb::UsbDeviceClass value = nullptr;
	check(shim()->get_VendorSpecific(put(value)));
	return value;
}

template <typename T> String impl_IUsbDeviceStatics<T>::GetDeviceSelector(unsigned const vendorId, unsigned const productId, GUID const winUsbInterfaceClass) const
{
	String value;
	check(shim()->abi_GetDeviceSelector(vendorId, productId, winUsbInterfaceClass, put(value)));
	return value;
}

template <typename T> String impl_IUsbDeviceStatics<T>::GetDeviceSelector(GUID const winUsbInterfaceClass) const
{
	String value;
	check(shim()->abi_GetDeviceSelectorGuidOnly(winUsbInterfaceClass, put(value)));
	return value;
}

template <typename T> String impl_IUsbDeviceStatics<T>::GetDeviceSelector(unsigned const vendorId, unsigned const productId) const
{
	String value;
	check(shim()->abi_GetDeviceSelectorVidPidOnly(vendorId, productId, put(value)));
	return value;
}

template <typename T> String impl_IUsbDeviceStatics<T>::GetDeviceClassSelector(Windows::Devices::Usb::UsbDeviceClass const & usbClass) const
{
	String value;
	check(shim()->abi_GetDeviceClassSelector(get(usbClass), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> impl_IUsbDeviceStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> operation;
	check(shim()->abi_FromIdAsync(get(deviceId), put(operation)));
	return operation;
}

template <typename T> unsigned impl_IUsbDeviceDescriptor<T>::BcdUsb() const
{
	unsigned value = {};
	check(shim()->get_BcdUsb(&value));
	return value;
}

template <typename T> byte impl_IUsbDeviceDescriptor<T>::MaxPacketSize0() const
{
	byte value = {};
	check(shim()->get_MaxPacketSize0(&value));
	return value;
}

template <typename T> unsigned impl_IUsbDeviceDescriptor<T>::VendorId() const
{
	unsigned value = {};
	check(shim()->get_VendorId(&value));
	return value;
}

template <typename T> unsigned impl_IUsbDeviceDescriptor<T>::ProductId() const
{
	unsigned value = {};
	check(shim()->get_ProductId(&value));
	return value;
}

template <typename T> unsigned impl_IUsbDeviceDescriptor<T>::BcdDeviceRevision() const
{
	unsigned value = {};
	check(shim()->get_BcdDeviceRevision(&value));
	return value;
}

template <typename T> byte impl_IUsbDeviceDescriptor<T>::NumberOfConfigurations() const
{
	byte value = {};
	check(shim()->get_NumberOfConfigurations(&value));
	return value;
}

template <typename T> byte impl_IUsbConfigurationDescriptor<T>::ConfigurationValue() const
{
	byte value = {};
	check(shim()->get_ConfigurationValue(&value));
	return value;
}

template <typename T> unsigned impl_IUsbConfigurationDescriptor<T>::MaxPowerMilliamps() const
{
	unsigned value = {};
	check(shim()->get_MaxPowerMilliamps(&value));
	return value;
}

template <typename T> bool impl_IUsbConfigurationDescriptor<T>::SelfPowered() const
{
	bool value = {};
	check(shim()->get_SelfPowered(put(value)));
	return value;
}

template <typename T> bool impl_IUsbConfigurationDescriptor<T>::RemoteWakeup() const
{
	bool value = {};
	check(shim()->get_RemoteWakeup(put(value)));
	return value;
}

template <typename T> bool impl_IUsbConfigurationDescriptorStatics<T>::TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbConfigurationDescriptor & parsed) const
{
	bool success = {};
	check(shim()->abi_TryParse(get(descriptor), put(parsed), put(success)));
	return success;
}

template <typename T> Windows::Devices::Usb::UsbConfigurationDescriptor impl_IUsbConfigurationDescriptorStatics<T>::Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor) const
{
	Windows::Devices::Usb::UsbConfigurationDescriptor parsed = nullptr;
	check(shim()->abi_Parse(get(descriptor), put(parsed)));
	return parsed;
}

template <typename T> byte impl_IUsbInterfaceDescriptor<T>::ClassCode() const
{
	byte value = {};
	check(shim()->get_ClassCode(&value));
	return value;
}

template <typename T> byte impl_IUsbInterfaceDescriptor<T>::SubclassCode() const
{
	byte value = {};
	check(shim()->get_SubclassCode(&value));
	return value;
}

template <typename T> byte impl_IUsbInterfaceDescriptor<T>::ProtocolCode() const
{
	byte value = {};
	check(shim()->get_ProtocolCode(&value));
	return value;
}

template <typename T> byte impl_IUsbInterfaceDescriptor<T>::AlternateSettingNumber() const
{
	byte value = {};
	check(shim()->get_AlternateSettingNumber(&value));
	return value;
}

template <typename T> byte impl_IUsbInterfaceDescriptor<T>::InterfaceNumber() const
{
	byte value = {};
	check(shim()->get_InterfaceNumber(&value));
	return value;
}

template <typename T> bool impl_IUsbInterfaceDescriptorStatics<T>::TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbInterfaceDescriptor & parsed) const
{
	bool success = {};
	check(shim()->abi_TryParse(get(descriptor), put(parsed), put(success)));
	return success;
}

template <typename T> Windows::Devices::Usb::UsbInterfaceDescriptor impl_IUsbInterfaceDescriptorStatics<T>::Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor) const
{
	Windows::Devices::Usb::UsbInterfaceDescriptor parsed = nullptr;
	check(shim()->abi_Parse(get(descriptor), put(parsed)));
	return parsed;
}

template <typename T> byte impl_IUsbEndpointDescriptor<T>::EndpointNumber() const
{
	byte value = {};
	check(shim()->get_EndpointNumber(&value));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbTransferDirection impl_IUsbEndpointDescriptor<T>::Direction() const
{
	Windows::Devices::Usb::UsbTransferDirection value = {};
	check(shim()->get_Direction(&value));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbEndpointType impl_IUsbEndpointDescriptor<T>::EndpointType() const
{
	Windows::Devices::Usb::UsbEndpointType value = {};
	check(shim()->get_EndpointType(&value));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbBulkInEndpointDescriptor impl_IUsbEndpointDescriptor<T>::AsBulkInEndpointDescriptor() const
{
	Windows::Devices::Usb::UsbBulkInEndpointDescriptor value = nullptr;
	check(shim()->get_AsBulkInEndpointDescriptor(put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbInterruptInEndpointDescriptor impl_IUsbEndpointDescriptor<T>::AsInterruptInEndpointDescriptor() const
{
	Windows::Devices::Usb::UsbInterruptInEndpointDescriptor value = nullptr;
	check(shim()->get_AsInterruptInEndpointDescriptor(put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbBulkOutEndpointDescriptor impl_IUsbEndpointDescriptor<T>::AsBulkOutEndpointDescriptor() const
{
	Windows::Devices::Usb::UsbBulkOutEndpointDescriptor value = nullptr;
	check(shim()->get_AsBulkOutEndpointDescriptor(put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor impl_IUsbEndpointDescriptor<T>::AsInterruptOutEndpointDescriptor() const
{
	Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor value = nullptr;
	check(shim()->get_AsInterruptOutEndpointDescriptor(put(value)));
	return value;
}

template <typename T> bool impl_IUsbEndpointDescriptorStatics<T>::TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbEndpointDescriptor & parsed) const
{
	bool success = {};
	check(shim()->abi_TryParse(get(descriptor), put(parsed), put(success)));
	return success;
}

template <typename T> Windows::Devices::Usb::UsbEndpointDescriptor impl_IUsbEndpointDescriptorStatics<T>::Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor) const
{
	Windows::Devices::Usb::UsbEndpointDescriptor parsed = nullptr;
	check(shim()->abi_Parse(get(descriptor), put(parsed)));
	return parsed;
}

template <typename T> byte impl_IUsbDescriptor<T>::Length() const
{
	byte value = {};
	check(shim()->get_Length(&value));
	return value;
}

template <typename T> byte impl_IUsbDescriptor<T>::DescriptorType() const
{
	byte value = {};
	check(shim()->get_DescriptorType(&value));
	return value;
}

template <typename T> void impl_IUsbDescriptor<T>::ReadDescriptorBuffer(Windows::Storage::Streams::IBuffer const & buffer) const
{
	check(shim()->abi_ReadDescriptorBuffer(get(buffer)));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IUsbInterruptInEventArgs<T>::InterruptData() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_InterruptData(put(value)));
	return value;
}

template <typename T> unsigned impl_IUsbBulkInPipe<T>::MaxTransferSizeBytes() const
{
	unsigned value = {};
	check(shim()->get_MaxTransferSizeBytes(&value));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbBulkInEndpointDescriptor impl_IUsbBulkInPipe<T>::EndpointDescriptor() const
{
	Windows::Devices::Usb::UsbBulkInEndpointDescriptor value = nullptr;
	check(shim()->get_EndpointDescriptor(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUsbBulkInPipe<T>::ClearStallAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ClearStallAsync(put(operation)));
	return operation;
}

template <typename T> void impl_IUsbBulkInPipe<T>::ReadOptions(Windows::Devices::Usb::UsbReadOptions const value) const
{
	check(shim()->put_ReadOptions(value));
}

template <typename T> Windows::Devices::Usb::UsbReadOptions impl_IUsbBulkInPipe<T>::ReadOptions() const
{
	Windows::Devices::Usb::UsbReadOptions value = {};
	check(shim()->get_ReadOptions(&value));
	return value;
}

template <typename T> void impl_IUsbBulkInPipe<T>::FlushBuffer() const
{
	check(shim()->abi_FlushBuffer());
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IUsbBulkInPipe<T>::InputStream() const
{
	Windows::Storage::Streams::IInputStream value;
	check(shim()->get_InputStream(put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbInterruptInEndpointDescriptor impl_IUsbInterruptInPipe<T>::EndpointDescriptor() const
{
	Windows::Devices::Usb::UsbInterruptInEndpointDescriptor value = nullptr;
	check(shim()->get_EndpointDescriptor(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUsbInterruptInPipe<T>::ClearStallAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ClearStallAsync(put(operation)));
	return operation;
}

template <typename T> long long impl_IUsbInterruptInPipe<T>::DataReceived(Windows::Foundation::ITypedEventHandler<Windows::Devices::Usb::UsbInterruptInPipe, Windows::Devices::Usb::UsbInterruptInEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_DataReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IUsbInterruptInPipe<T>::DataReceived(F handler) const
{
	return DataReceived(Windows::Foundation::TypedEventHandler<Windows::Devices::Usb::UsbInterruptInPipe, Windows::Devices::Usb::UsbInterruptInEventArgs>(handler));
}

template <typename T> void impl_IUsbInterruptInPipe<T>::DataReceived(long long const token) const
{
	check(shim()->remove_DataReceived(token));
}

template <typename T> Windows::Devices::Usb::UsbBulkOutEndpointDescriptor impl_IUsbBulkOutPipe<T>::EndpointDescriptor() const
{
	Windows::Devices::Usb::UsbBulkOutEndpointDescriptor value = nullptr;
	check(shim()->get_EndpointDescriptor(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUsbBulkOutPipe<T>::ClearStallAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ClearStallAsync(put(operation)));
	return operation;
}

template <typename T> void impl_IUsbBulkOutPipe<T>::WriteOptions(Windows::Devices::Usb::UsbWriteOptions const value) const
{
	check(shim()->put_WriteOptions(value));
}

template <typename T> Windows::Devices::Usb::UsbWriteOptions impl_IUsbBulkOutPipe<T>::WriteOptions() const
{
	Windows::Devices::Usb::UsbWriteOptions value = {};
	check(shim()->get_WriteOptions(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IUsbBulkOutPipe<T>::OutputStream() const
{
	Windows::Storage::Streams::IOutputStream value;
	check(shim()->get_OutputStream(put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor impl_IUsbInterruptOutPipe<T>::EndpointDescriptor() const
{
	Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor value = nullptr;
	check(shim()->get_EndpointDescriptor(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUsbInterruptOutPipe<T>::ClearStallAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ClearStallAsync(put(operation)));
	return operation;
}

template <typename T> void impl_IUsbInterruptOutPipe<T>::WriteOptions(Windows::Devices::Usb::UsbWriteOptions const value) const
{
	check(shim()->put_WriteOptions(value));
}

template <typename T> Windows::Devices::Usb::UsbWriteOptions impl_IUsbInterruptOutPipe<T>::WriteOptions() const
{
	Windows::Devices::Usb::UsbWriteOptions value = {};
	check(shim()->get_WriteOptions(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IUsbInterruptOutPipe<T>::OutputStream() const
{
	Windows::Storage::Streams::IOutputStream value;
	check(shim()->get_OutputStream(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterface> impl_IUsbConfiguration<T>::UsbInterfaces() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterface> value;
	check(shim()->get_UsbInterfaces(put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbConfigurationDescriptor impl_IUsbConfiguration<T>::ConfigurationDescriptor() const
{
	Windows::Devices::Usb::UsbConfigurationDescriptor value = nullptr;
	check(shim()->get_ConfigurationDescriptor(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> impl_IUsbConfiguration<T>::Descriptors() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> value;
	check(shim()->get_Descriptors(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkInPipe> impl_IUsbInterface<T>::BulkInPipes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkInPipe> value;
	check(shim()->get_BulkInPipes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptInPipe> impl_IUsbInterface<T>::InterruptInPipes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptInPipe> value;
	check(shim()->get_InterruptInPipes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkOutPipe> impl_IUsbInterface<T>::BulkOutPipes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkOutPipe> value;
	check(shim()->get_BulkOutPipes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptOutPipe> impl_IUsbInterface<T>::InterruptOutPipes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptOutPipe> value;
	check(shim()->get_InterruptOutPipes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterfaceSetting> impl_IUsbInterface<T>::InterfaceSettings() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterfaceSetting> value;
	check(shim()->get_InterfaceSettings(put(value)));
	return value;
}

template <typename T> byte impl_IUsbInterface<T>::InterfaceNumber() const
{
	byte value = {};
	check(shim()->get_InterfaceNumber(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> impl_IUsbInterface<T>::Descriptors() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> value;
	check(shim()->get_Descriptors(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkInEndpointDescriptor> impl_IUsbInterfaceSetting<T>::BulkInEndpoints() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkInEndpointDescriptor> value;
	check(shim()->get_BulkInEndpoints(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptInEndpointDescriptor> impl_IUsbInterfaceSetting<T>::InterruptInEndpoints() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptInEndpointDescriptor> value;
	check(shim()->get_InterruptInEndpoints(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkOutEndpointDescriptor> impl_IUsbInterfaceSetting<T>::BulkOutEndpoints() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbBulkOutEndpointDescriptor> value;
	check(shim()->get_BulkOutEndpoints(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor> impl_IUsbInterfaceSetting<T>::InterruptOutEndpoints() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbInterruptOutEndpointDescriptor> value;
	check(shim()->get_InterruptOutEndpoints(put(value)));
	return value;
}

template <typename T> bool impl_IUsbInterfaceSetting<T>::Selected() const
{
	bool value = {};
	check(shim()->get_Selected(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUsbInterfaceSetting<T>::SelectSettingAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_SelectSettingAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Devices::Usb::UsbInterfaceDescriptor impl_IUsbInterfaceSetting<T>::InterfaceDescriptor() const
{
	Windows::Devices::Usb::UsbInterfaceDescriptor value = nullptr;
	check(shim()->get_InterfaceDescriptor(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> impl_IUsbInterfaceSetting<T>::Descriptors() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::Usb::UsbDescriptor> value;
	check(shim()->get_Descriptors(put(value)));
	return value;
}

template <typename T> unsigned impl_IUsbBulkInEndpointDescriptor<T>::MaxPacketSize() const
{
	unsigned value = {};
	check(shim()->get_MaxPacketSize(&value));
	return value;
}

template <typename T> byte impl_IUsbBulkInEndpointDescriptor<T>::EndpointNumber() const
{
	byte value = {};
	check(shim()->get_EndpointNumber(&value));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbBulkInPipe impl_IUsbBulkInEndpointDescriptor<T>::Pipe() const
{
	Windows::Devices::Usb::UsbBulkInPipe value = nullptr;
	check(shim()->get_Pipe(put(value)));
	return value;
}

template <typename T> unsigned impl_IUsbInterruptInEndpointDescriptor<T>::MaxPacketSize() const
{
	unsigned value = {};
	check(shim()->get_MaxPacketSize(&value));
	return value;
}

template <typename T> byte impl_IUsbInterruptInEndpointDescriptor<T>::EndpointNumber() const
{
	byte value = {};
	check(shim()->get_EndpointNumber(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IUsbInterruptInEndpointDescriptor<T>::Interval() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Interval(&value));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbInterruptInPipe impl_IUsbInterruptInEndpointDescriptor<T>::Pipe() const
{
	Windows::Devices::Usb::UsbInterruptInPipe value = nullptr;
	check(shim()->get_Pipe(put(value)));
	return value;
}

template <typename T> unsigned impl_IUsbBulkOutEndpointDescriptor<T>::MaxPacketSize() const
{
	unsigned value = {};
	check(shim()->get_MaxPacketSize(&value));
	return value;
}

template <typename T> byte impl_IUsbBulkOutEndpointDescriptor<T>::EndpointNumber() const
{
	byte value = {};
	check(shim()->get_EndpointNumber(&value));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbBulkOutPipe impl_IUsbBulkOutEndpointDescriptor<T>::Pipe() const
{
	Windows::Devices::Usb::UsbBulkOutPipe value = nullptr;
	check(shim()->get_Pipe(put(value)));
	return value;
}

template <typename T> unsigned impl_IUsbInterruptOutEndpointDescriptor<T>::MaxPacketSize() const
{
	unsigned value = {};
	check(shim()->get_MaxPacketSize(&value));
	return value;
}

template <typename T> byte impl_IUsbInterruptOutEndpointDescriptor<T>::EndpointNumber() const
{
	byte value = {};
	check(shim()->get_EndpointNumber(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IUsbInterruptOutEndpointDescriptor<T>::Interval() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Interval(&value));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbInterruptOutPipe impl_IUsbInterruptOutEndpointDescriptor<T>::Pipe() const
{
	Windows::Devices::Usb::UsbInterruptOutPipe value = nullptr;
	check(shim()->get_Pipe(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IUsbDevice<T>::SendControlOutTransferAsync(Windows::Devices::Usb::UsbSetupPacket const & setupPacket, Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation;
	check(shim()->abi_SendControlOutTransferAsync(get(setupPacket), get(buffer), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IUsbDevice<T>::SendControlOutTransferAsync(Windows::Devices::Usb::UsbSetupPacket const & setupPacket) const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation;
	check(shim()->abi_SendControlOutTransferAsyncNoBuffer(get(setupPacket), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IUsbDevice<T>::SendControlInTransferAsync(Windows::Devices::Usb::UsbSetupPacket const & setupPacket, Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation;
	check(shim()->abi_SendControlInTransferAsync(get(setupPacket), get(buffer), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IUsbDevice<T>::SendControlInTransferAsync(Windows::Devices::Usb::UsbSetupPacket const & setupPacket) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation;
	check(shim()->abi_SendControlInTransferAsyncNoBuffer(get(setupPacket), put(operation)));
	return operation;
}

template <typename T> Windows::Devices::Usb::UsbInterface impl_IUsbDevice<T>::DefaultInterface() const
{
	Windows::Devices::Usb::UsbInterface value = nullptr;
	check(shim()->get_DefaultInterface(put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbDeviceDescriptor impl_IUsbDevice<T>::DeviceDescriptor() const
{
	Windows::Devices::Usb::UsbDeviceDescriptor value = nullptr;
	check(shim()->get_DeviceDescriptor(put(value)));
	return value;
}

template <typename T> Windows::Devices::Usb::UsbConfiguration impl_IUsbDevice<T>::Configuration() const
{
	Windows::Devices::Usb::UsbConfiguration value = nullptr;
	check(shim()->get_Configuration(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace WiFi {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::WiFi::WiFiAdapter>> impl_IWiFiAdapterStatics<T>::FindAllAdaptersAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::WiFi::WiFiAdapter>> value;
	check(shim()->abi_FindAllAdaptersAsync(put(value)));
	return value;
}

template <typename T> String impl_IWiFiAdapterStatics<T>::GetDeviceSelector() const
{
	String deviceSelector;
	check(shim()->abi_GetDeviceSelector(put(deviceSelector)));
	return deviceSelector;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFi::WiFiAdapter> impl_IWiFiAdapterStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::WiFi::WiFiAdapter> asyncOp;
	check(shim()->abi_FromIdAsync(get(deviceId), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::WiFi::WiFiAccessStatus> impl_IWiFiAdapterStatics<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::WiFi::WiFiAccessStatus> value;
	check(shim()->abi_RequestAccessAsync(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkAdapter impl_IWiFiAdapter<T>::NetworkAdapter() const
{
	Windows::Networking::Connectivity::NetworkAdapter value = nullptr;
	check(shim()->get_NetworkAdapter(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWiFiAdapter<T>::ScanAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_ScanAsync(put(value)));
	return value;
}

template <typename T> Windows::Devices::WiFi::WiFiNetworkReport impl_IWiFiAdapter<T>::NetworkReport() const
{
	Windows::Devices::WiFi::WiFiNetworkReport value = nullptr;
	check(shim()->get_NetworkReport(put(value)));
	return value;
}

template <typename T> long long impl_IWiFiAdapter<T>::AvailableNetworksChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::WiFi::WiFiAdapter, IInspectable> const & args) const
{
	long long eventCookie = {};
	check(shim()->add_AvailableNetworksChanged(get(args), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IWiFiAdapter<T>::AvailableNetworksChanged(F args) const
{
	return AvailableNetworksChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::WiFi::WiFiAdapter, IInspectable>(args));
}

template <typename T> void impl_IWiFiAdapter<T>::AvailableNetworksChanged(long long const eventCookie) const
{
	check(shim()->remove_AvailableNetworksChanged(eventCookie));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFi::WiFiConnectionResult> impl_IWiFiAdapter<T>::ConnectAsync(Windows::Devices::WiFi::WiFiAvailableNetwork const & availableNetwork, Windows::Devices::WiFi::WiFiReconnectionKind const reconnectionKind) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::WiFi::WiFiConnectionResult> value;
	check(shim()->abi_ConnectAsync(get(availableNetwork), reconnectionKind, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFi::WiFiConnectionResult> impl_IWiFiAdapter<T>::ConnectAsync(Windows::Devices::WiFi::WiFiAvailableNetwork const & availableNetwork, Windows::Devices::WiFi::WiFiReconnectionKind const reconnectionKind, Windows::Security::Credentials::PasswordCredential const & passwordCredential) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::WiFi::WiFiConnectionResult> value;
	check(shim()->abi_ConnectWithPasswordCredentialAsync(get(availableNetwork), reconnectionKind, get(passwordCredential), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFi::WiFiConnectionResult> impl_IWiFiAdapter<T>::ConnectAsync(Windows::Devices::WiFi::WiFiAvailableNetwork const & availableNetwork, Windows::Devices::WiFi::WiFiReconnectionKind const reconnectionKind, Windows::Security::Credentials::PasswordCredential const & passwordCredential, StringReference const & ssid) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::WiFi::WiFiConnectionResult> value;
	check(shim()->abi_ConnectWithPasswordCredentialAndSsidAsync(get(availableNetwork), reconnectionKind, get(passwordCredential), get(ssid), put(value)));
	return value;
}

template <typename T> void impl_IWiFiAdapter<T>::Disconnect() const
{
	check(shim()->abi_Disconnect());
}

template <typename T> Windows::Foundation::DateTime impl_IWiFiNetworkReport<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Devices::WiFi::WiFiAvailableNetwork> impl_IWiFiNetworkReport<T>::AvailableNetworks() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Devices::WiFi::WiFiAvailableNetwork> value;
	check(shim()->get_AvailableNetworks(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IWiFiAvailableNetwork<T>::Uptime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Uptime(&value));
	return value;
}

template <typename T> String impl_IWiFiAvailableNetwork<T>::Ssid() const
{
	String value;
	check(shim()->get_Ssid(put(value)));
	return value;
}

template <typename T> String impl_IWiFiAvailableNetwork<T>::Bssid() const
{
	String value;
	check(shim()->get_Bssid(put(value)));
	return value;
}

template <typename T> int impl_IWiFiAvailableNetwork<T>::ChannelCenterFrequencyInKilohertz() const
{
	int value = {};
	check(shim()->get_ChannelCenterFrequencyInKilohertz(&value));
	return value;
}

template <typename T> double impl_IWiFiAvailableNetwork<T>::NetworkRssiInDecibelMilliwatts() const
{
	double value = {};
	check(shim()->get_NetworkRssiInDecibelMilliwatts(&value));
	return value;
}

template <typename T> byte impl_IWiFiAvailableNetwork<T>::SignalBars() const
{
	byte value = {};
	check(shim()->get_SignalBars(&value));
	return value;
}

template <typename T> Windows::Devices::WiFi::WiFiNetworkKind impl_IWiFiAvailableNetwork<T>::NetworkKind() const
{
	Windows::Devices::WiFi::WiFiNetworkKind value = {};
	check(shim()->get_NetworkKind(&value));
	return value;
}

template <typename T> Windows::Devices::WiFi::WiFiPhyKind impl_IWiFiAvailableNetwork<T>::PhyKind() const
{
	Windows::Devices::WiFi::WiFiPhyKind value = {};
	check(shim()->get_PhyKind(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkSecuritySettings impl_IWiFiAvailableNetwork<T>::SecuritySettings() const
{
	Windows::Networking::Connectivity::NetworkSecuritySettings value = nullptr;
	check(shim()->get_SecuritySettings(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IWiFiAvailableNetwork<T>::BeaconInterval() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_BeaconInterval(&value));
	return value;
}

template <typename T> bool impl_IWiFiAvailableNetwork<T>::IsWiFiDirect() const
{
	bool value = {};
	check(shim()->get_IsWiFiDirect(put(value)));
	return value;
}

template <typename T> Windows::Devices::WiFi::WiFiConnectionStatus impl_IWiFiConnectionResult<T>::ConnectionStatus() const
{
	Windows::Devices::WiFi::WiFiConnectionStatus value = {};
	check(shim()->get_ConnectionStatus(&value));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace WiFiDirect {

template <typename T> String impl_IWiFiDirectDeviceStatics<T>::GetDeviceSelector() const
{
	String deviceSelector;
	check(shim()->abi_GetDeviceSelector(put(deviceSelector)));
	return deviceSelector;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> impl_IWiFiDirectDeviceStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> asyncOp;
	check(shim()->abi_FromIdAsync(get(deviceId), put(asyncOp)));
	return asyncOp;
}

template <typename T> String impl_IWiFiDirectDeviceStatics2<T>::GetDeviceSelector(Windows::Devices::WiFiDirect::WiFiDirectDeviceSelectorType const type) const
{
	String result;
	check(shim()->abi_GetDeviceSelector(type, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> impl_IWiFiDirectDeviceStatics2<T>::FromIdAsync(StringReference const & deviceId, Windows::Devices::WiFiDirect::WiFiDirectConnectionParameters const & connectionParameters) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> result;
	check(shim()->abi_FromIdAsync(get(deviceId), get(connectionParameters), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Devices::WiFiDirect::WiFiDirectInformationElement> impl_IWiFiDirectInformationElementStatics<T>::CreateFromBuffer(Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Foundation::Collections::IVector<Windows::Devices::WiFiDirect::WiFiDirectInformationElement> result;
	check(shim()->abi_CreateFromBuffer(get(buffer), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Devices::WiFiDirect::WiFiDirectInformationElement> impl_IWiFiDirectInformationElementStatics<T>::CreateFromDeviceInformation(Windows::Devices::Enumeration::DeviceInformation const & deviceInformation) const
{
	Windows::Foundation::Collections::IVector<Windows::Devices::WiFiDirect::WiFiDirectInformationElement> result;
	check(shim()->abi_CreateFromDeviceInformation(get(deviceInformation), put(result)));
	return result;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IWiFiDirectInformationElement<T>::Oui() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Oui(put(value)));
	return value;
}

template <typename T> void impl_IWiFiDirectInformationElement<T>::Oui(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_Oui(get(value)));
}

template <typename T> byte impl_IWiFiDirectInformationElement<T>::OuiType() const
{
	byte value = {};
	check(shim()->get_OuiType(&value));
	return value;
}

template <typename T> void impl_IWiFiDirectInformationElement<T>::OuiType(byte const value) const
{
	check(shim()->put_OuiType(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IWiFiDirectInformationElement<T>::Value() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IWiFiDirectInformationElement<T>::Value(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_Value(get(value)));
}

template <typename T> bool impl_IWiFiDirectLegacySettings<T>::IsEnabled() const
{
	bool value = {};
	check(shim()->get_IsEnabled(put(value)));
	return value;
}

template <typename T> void impl_IWiFiDirectLegacySettings<T>::IsEnabled(bool const value) const
{
	check(shim()->put_IsEnabled(value));
}

template <typename T> String impl_IWiFiDirectLegacySettings<T>::Ssid() const
{
	String value;
	check(shim()->get_Ssid(put(value)));
	return value;
}

template <typename T> void impl_IWiFiDirectLegacySettings<T>::Ssid(StringReference const & value) const
{
	check(shim()->put_Ssid(get(value)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IWiFiDirectLegacySettings<T>::Passphrase() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check(shim()->get_Passphrase(put(value)));
	return value;
}

template <typename T> void impl_IWiFiDirectLegacySettings<T>::Passphrase(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check(shim()->put_Passphrase(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Devices::WiFiDirect::WiFiDirectInformationElement> impl_IWiFiDirectAdvertisement<T>::InformationElements() const
{
	Windows::Foundation::Collections::IVector<Windows::Devices::WiFiDirect::WiFiDirectInformationElement> value;
	check(shim()->get_InformationElements(put(value)));
	return value;
}

template <typename T> void impl_IWiFiDirectAdvertisement<T>::InformationElements(Windows::Foundation::Collections::IVector<Windows::Devices::WiFiDirect::WiFiDirectInformationElement> const & value) const
{
	check(shim()->put_InformationElements(get(value)));
}

template <typename T> Windows::Devices::WiFiDirect::WiFiDirectAdvertisementListenStateDiscoverability impl_IWiFiDirectAdvertisement<T>::ListenStateDiscoverability() const
{
	Windows::Devices::WiFiDirect::WiFiDirectAdvertisementListenStateDiscoverability value = {};
	check(shim()->get_ListenStateDiscoverability(&value));
	return value;
}

template <typename T> void impl_IWiFiDirectAdvertisement<T>::ListenStateDiscoverability(Windows::Devices::WiFiDirect::WiFiDirectAdvertisementListenStateDiscoverability const value) const
{
	check(shim()->put_ListenStateDiscoverability(value));
}

template <typename T> bool impl_IWiFiDirectAdvertisement<T>::IsAutonomousGroupOwnerEnabled() const
{
	bool value = {};
	check(shim()->get_IsAutonomousGroupOwnerEnabled(put(value)));
	return value;
}

template <typename T> void impl_IWiFiDirectAdvertisement<T>::IsAutonomousGroupOwnerEnabled(bool const value) const
{
	check(shim()->put_IsAutonomousGroupOwnerEnabled(value));
}

template <typename T> Windows::Devices::WiFiDirect::WiFiDirectLegacySettings impl_IWiFiDirectAdvertisement<T>::LegacySettings() const
{
	Windows::Devices::WiFiDirect::WiFiDirectLegacySettings value = nullptr;
	check(shim()->get_LegacySettings(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Devices::WiFiDirect::WiFiDirectConfigurationMethod> impl_IWiFiDirectAdvertisement2<T>::SupportedConfigurationMethods() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Devices::WiFiDirect::WiFiDirectConfigurationMethod> value;
	check(shim()->get_SupportedConfigurationMethods(put(value)));
	return value;
}

template <typename T> Windows::Devices::WiFiDirect::WiFiDirectAdvertisementPublisherStatus impl_IWiFiDirectAdvertisementPublisherStatusChangedEventArgs<T>::Status() const
{
	Windows::Devices::WiFiDirect::WiFiDirectAdvertisementPublisherStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::WiFiDirect::WiFiDirectError impl_IWiFiDirectAdvertisementPublisherStatusChangedEventArgs<T>::Error() const
{
	Windows::Devices::WiFiDirect::WiFiDirectError value = {};
	check(shim()->get_Error(&value));
	return value;
}

template <typename T> Windows::Devices::WiFiDirect::WiFiDirectAdvertisement impl_IWiFiDirectAdvertisementPublisher<T>::Advertisement() const
{
	Windows::Devices::WiFiDirect::WiFiDirectAdvertisement value = nullptr;
	check(shim()->get_Advertisement(put(value)));
	return value;
}

template <typename T> Windows::Devices::WiFiDirect::WiFiDirectAdvertisementPublisherStatus impl_IWiFiDirectAdvertisementPublisher<T>::Status() const
{
	Windows::Devices::WiFiDirect::WiFiDirectAdvertisementPublisherStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> long long impl_IWiFiDirectAdvertisementPublisher<T>::StatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::WiFiDirect::WiFiDirectAdvertisementPublisher, Windows::Devices::WiFiDirect::WiFiDirectAdvertisementPublisherStatusChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_StatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IWiFiDirectAdvertisementPublisher<T>::StatusChanged(F handler) const
{
	return StatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::WiFiDirect::WiFiDirectAdvertisementPublisher, Windows::Devices::WiFiDirect::WiFiDirectAdvertisementPublisherStatusChangedEventArgs>(handler));
}

template <typename T> void impl_IWiFiDirectAdvertisementPublisher<T>::StatusChanged(long long const token) const
{
	check(shim()->remove_StatusChanged(token));
}

template <typename T> void impl_IWiFiDirectAdvertisementPublisher<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IWiFiDirectAdvertisementPublisher<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> Windows::Devices::Enumeration::DevicePairingKinds impl_IWiFiDirectConnectionParametersStatics<T>::GetDevicePairingKinds(Windows::Devices::WiFiDirect::WiFiDirectConfigurationMethod const configurationMethod) const
{
	Windows::Devices::Enumeration::DevicePairingKinds result = {};
	check(shim()->abi_GetDevicePairingKinds(configurationMethod, &result));
	return result;
}

template <typename T> short impl_IWiFiDirectConnectionParameters<T>::GroupOwnerIntent() const
{
	short value = {};
	check(shim()->get_GroupOwnerIntent(&value));
	return value;
}

template <typename T> void impl_IWiFiDirectConnectionParameters<T>::GroupOwnerIntent(short const value) const
{
	check(shim()->put_GroupOwnerIntent(value));
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Devices::WiFiDirect::WiFiDirectConfigurationMethod> impl_IWiFiDirectConnectionParameters2<T>::PreferenceOrderedConfigurationMethods() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Devices::WiFiDirect::WiFiDirectConfigurationMethod> value;
	check(shim()->get_PreferenceOrderedConfigurationMethods(put(value)));
	return value;
}

template <typename T> Windows::Devices::WiFiDirect::WiFiDirectPairingProcedure impl_IWiFiDirectConnectionParameters2<T>::PreferredPairingProcedure() const
{
	Windows::Devices::WiFiDirect::WiFiDirectPairingProcedure value = {};
	check(shim()->get_PreferredPairingProcedure(&value));
	return value;
}

template <typename T> void impl_IWiFiDirectConnectionParameters2<T>::PreferredPairingProcedure(Windows::Devices::WiFiDirect::WiFiDirectPairingProcedure const value) const
{
	check(shim()->put_PreferredPairingProcedure(value));
}

template <typename T> Windows::Devices::WiFiDirect::WiFiDirectConnectionRequest impl_IWiFiDirectConnectionRequestedEventArgs<T>::GetConnectionRequest() const
{
	Windows::Devices::WiFiDirect::WiFiDirectConnectionRequest result = nullptr;
	check(shim()->abi_GetConnectionRequest(put(result)));
	return result;
}

template <typename T> long long impl_IWiFiDirectConnectionListener<T>::ConnectionRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::WiFiDirect::WiFiDirectConnectionListener, Windows::Devices::WiFiDirect::WiFiDirectConnectionRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ConnectionRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IWiFiDirectConnectionListener<T>::ConnectionRequested(F handler) const
{
	return ConnectionRequested(Windows::Foundation::TypedEventHandler<Windows::Devices::WiFiDirect::WiFiDirectConnectionListener, Windows::Devices::WiFiDirect::WiFiDirectConnectionRequestedEventArgs>(handler));
}

template <typename T> void impl_IWiFiDirectConnectionListener<T>::ConnectionRequested(long long const token) const
{
	check(shim()->remove_ConnectionRequested(token));
}

template <typename T> Windows::Devices::WiFiDirect::WiFiDirectConnectionStatus impl_IWiFiDirectDevice<T>::ConnectionStatus() const
{
	Windows::Devices::WiFiDirect::WiFiDirectConnectionStatus value = {};
	check(shim()->get_ConnectionStatus(&value));
	return value;
}

template <typename T> String impl_IWiFiDirectDevice<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> long long impl_IWiFiDirectDevice<T>::ConnectionStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::WiFiDirect::WiFiDirectDevice, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_ConnectionStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IWiFiDirectDevice<T>::ConnectionStatusChanged(F handler) const
{
	return ConnectionStatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::WiFiDirect::WiFiDirectDevice, IInspectable>(handler));
}

template <typename T> void impl_IWiFiDirectDevice<T>::ConnectionStatusChanged(long long const token) const
{
	check(shim()->remove_ConnectionStatusChanged(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> impl_IWiFiDirectDevice<T>::GetConnectionEndpointPairs() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> value;
	check(shim()->abi_GetConnectionEndpointPairs(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IWiFiDirectConnectionRequest<T>::DeviceInformation() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check(shim()->get_DeviceInformation(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace WiFiDirect { namespace Services {

template <typename T> Windows::Devices::WiFiDirect::Services::WiFiDirectServiceConfigurationMethod impl_IWiFiDirectServiceProvisioningInfo<T>::SelectedConfigurationMethod() const
{
	Windows::Devices::WiFiDirect::Services::WiFiDirectServiceConfigurationMethod value = {};
	check(shim()->get_SelectedConfigurationMethod(&value));
	return value;
}

template <typename T> bool impl_IWiFiDirectServiceProvisioningInfo<T>::IsGroupFormationNeeded() const
{
	bool value = {};
	check(shim()->get_IsGroupFormationNeeded(put(value)));
	return value;
}

template <typename T> Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSession impl_IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs<T>::Session() const
{
	Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSession value = nullptr;
	check(shim()->get_Session(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IWiFiDirectServiceAutoAcceptSessionConnectedEventArgs<T>::SessionInfo() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_SessionInfo(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> impl_IWiFiDirectServiceRemotePortAddedEventArgs<T>::EndpointPairs() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> value;
	check(shim()->get_EndpointPairs(put(value)));
	return value;
}

template <typename T> Windows::Devices::WiFiDirect::Services::WiFiDirectServiceIPProtocol impl_IWiFiDirectServiceRemotePortAddedEventArgs<T>::Protocol() const
{
	Windows::Devices::WiFiDirect::Services::WiFiDirectServiceIPProtocol value = {};
	check(shim()->get_Protocol(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IWiFiDirectServiceSessionDeferredEventArgs<T>::DeferredSessionInfo() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_DeferredSessionInfo(put(value)));
	return value;
}

template <typename T> Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSessionRequest impl_IWiFiDirectServiceSessionRequestedEventArgs<T>::GetSessionRequest() const
{
	Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSessionRequest value = nullptr;
	check(shim()->abi_GetSessionRequest(put(value)));
	return value;
}

template <typename T> Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAdvertiser impl_IWiFiDirectServiceAdvertiserFactory<T>::CreateWiFiDirectServiceAdvertiser(StringReference const & serviceName) const
{
	Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAdvertiser result = nullptr;
	check(shim()->abi_CreateWiFiDirectServiceAdvertiser(get(serviceName), put(result)));
	return result;
}

template <typename T> String impl_IWiFiDirectServiceAdvertiser<T>::ServiceName() const
{
	String value;
	check(shim()->get_ServiceName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IWiFiDirectServiceAdvertiser<T>::ServiceNamePrefixes() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_ServiceNamePrefixes(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IWiFiDirectServiceAdvertiser<T>::ServiceInfo() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_ServiceInfo(put(value)));
	return value;
}

template <typename T> void impl_IWiFiDirectServiceAdvertiser<T>::ServiceInfo(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_ServiceInfo(get(value)));
}

template <typename T> bool impl_IWiFiDirectServiceAdvertiser<T>::AutoAcceptSession() const
{
	bool value = {};
	check(shim()->get_AutoAcceptSession(put(value)));
	return value;
}

template <typename T> void impl_IWiFiDirectServiceAdvertiser<T>::AutoAcceptSession(bool const value) const
{
	check(shim()->put_AutoAcceptSession(value));
}

template <typename T> bool impl_IWiFiDirectServiceAdvertiser<T>::PreferGroupOwnerMode() const
{
	bool value = {};
	check(shim()->get_PreferGroupOwnerMode(put(value)));
	return value;
}

template <typename T> void impl_IWiFiDirectServiceAdvertiser<T>::PreferGroupOwnerMode(bool const value) const
{
	check(shim()->put_PreferGroupOwnerMode(value));
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Devices::WiFiDirect::Services::WiFiDirectServiceConfigurationMethod> impl_IWiFiDirectServiceAdvertiser<T>::PreferredConfigurationMethods() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Devices::WiFiDirect::Services::WiFiDirectServiceConfigurationMethod> value;
	check(shim()->get_PreferredConfigurationMethods(put(value)));
	return value;
}

template <typename T> Windows::Devices::WiFiDirect::Services::WiFiDirectServiceStatus impl_IWiFiDirectServiceAdvertiser<T>::ServiceStatus() const
{
	Windows::Devices::WiFiDirect::Services::WiFiDirectServiceStatus value = {};
	check(shim()->get_ServiceStatus(&value));
	return value;
}

template <typename T> void impl_IWiFiDirectServiceAdvertiser<T>::ServiceStatus(Windows::Devices::WiFiDirect::Services::WiFiDirectServiceStatus const value) const
{
	check(shim()->put_ServiceStatus(value));
}

template <typename T> unsigned impl_IWiFiDirectServiceAdvertiser<T>::CustomServiceStatusCode() const
{
	unsigned value = {};
	check(shim()->get_CustomServiceStatusCode(&value));
	return value;
}

template <typename T> void impl_IWiFiDirectServiceAdvertiser<T>::CustomServiceStatusCode(unsigned const value) const
{
	check(shim()->put_CustomServiceStatusCode(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IWiFiDirectServiceAdvertiser<T>::DeferredSessionInfo() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_DeferredSessionInfo(put(value)));
	return value;
}

template <typename T> void impl_IWiFiDirectServiceAdvertiser<T>::DeferredSessionInfo(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_DeferredSessionInfo(get(value)));
}

template <typename T> Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAdvertisementStatus impl_IWiFiDirectServiceAdvertiser<T>::AdvertisementStatus() const
{
	Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAdvertisementStatus value = {};
	check(shim()->get_AdvertisementStatus(&value));
	return value;
}

template <typename T> Windows::Devices::WiFiDirect::Services::WiFiDirectServiceError impl_IWiFiDirectServiceAdvertiser<T>::ServiceError() const
{
	Windows::Devices::WiFiDirect::Services::WiFiDirectServiceError value = {};
	check(shim()->get_ServiceError(&value));
	return value;
}

template <typename T> long long impl_IWiFiDirectServiceAdvertiser<T>::SessionRequested(Windows::Foundation::ITypedEventHandler<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAdvertiser, Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSessionRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SessionRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IWiFiDirectServiceAdvertiser<T>::SessionRequested(F handler) const
{
	return SessionRequested(Windows::Foundation::TypedEventHandler<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAdvertiser, Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSessionRequestedEventArgs>(handler));
}

template <typename T> void impl_IWiFiDirectServiceAdvertiser<T>::SessionRequested(long long const token) const
{
	check(shim()->remove_SessionRequested(token));
}

template <typename T> long long impl_IWiFiDirectServiceAdvertiser<T>::AutoAcceptSessionConnected(Windows::Foundation::ITypedEventHandler<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAdvertiser, Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAutoAcceptSessionConnectedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_AutoAcceptSessionConnected(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IWiFiDirectServiceAdvertiser<T>::AutoAcceptSessionConnected(F handler) const
{
	return AutoAcceptSessionConnected(Windows::Foundation::TypedEventHandler<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAdvertiser, Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAutoAcceptSessionConnectedEventArgs>(handler));
}

template <typename T> void impl_IWiFiDirectServiceAdvertiser<T>::AutoAcceptSessionConnected(long long const token) const
{
	check(shim()->remove_AutoAcceptSessionConnected(token));
}

template <typename T> long long impl_IWiFiDirectServiceAdvertiser<T>::AdvertisementStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAdvertiser, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_AdvertisementStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IWiFiDirectServiceAdvertiser<T>::AdvertisementStatusChanged(F handler) const
{
	return AdvertisementStatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceAdvertiser, IInspectable>(handler));
}

template <typename T> void impl_IWiFiDirectServiceAdvertiser<T>::AdvertisementStatusChanged(long long const token) const
{
	check(shim()->remove_AdvertisementStatusChanged(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSession> impl_IWiFiDirectServiceAdvertiser<T>::ConnectAsync(Windows::Devices::Enumeration::DeviceInformation const & deviceInfo) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSession> result;
	check(shim()->abi_ConnectAsync(get(deviceInfo), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSession> impl_IWiFiDirectServiceAdvertiser<T>::ConnectAsync(Windows::Devices::Enumeration::DeviceInformation const & deviceInfo, StringReference const & pin) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSession> result;
	check(shim()->abi_ConnectAsyncWithPin(get(deviceInfo), get(pin), put(result)));
	return result;
}

template <typename T> void impl_IWiFiDirectServiceAdvertiser<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IWiFiDirectServiceAdvertiser<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> String impl_IWiFiDirectServiceStatics<T>::GetSelector(StringReference const & serviceName) const
{
	String serviceSelector;
	check(shim()->abi_GetSelector(get(serviceName), put(serviceSelector)));
	return serviceSelector;
}

template <typename T> String impl_IWiFiDirectServiceStatics<T>::GetSelector(StringReference const & serviceName, Windows::Storage::Streams::IBuffer const & serviceInfoFilter) const
{
	String serviceSelector;
	check(shim()->abi_GetSelectorWithFilter(get(serviceName), get(serviceInfoFilter), put(serviceSelector)));
	return serviceSelector;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::Services::WiFiDirectService> impl_IWiFiDirectServiceStatics<T>::FromIdAsync(StringReference const & deviceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::Services::WiFiDirectService> asyncOp;
	check(shim()->abi_FromIdAsync(get(deviceId), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IWiFiDirectService<T>::RemoteServiceInfo() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_RemoteServiceInfo(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::WiFiDirect::Services::WiFiDirectServiceConfigurationMethod> impl_IWiFiDirectService<T>::SupportedConfigurationMethods() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Devices::WiFiDirect::Services::WiFiDirectServiceConfigurationMethod> value;
	check(shim()->get_SupportedConfigurationMethods(put(value)));
	return value;
}

template <typename T> bool impl_IWiFiDirectService<T>::PreferGroupOwnerMode() const
{
	bool value = {};
	check(shim()->get_PreferGroupOwnerMode(put(value)));
	return value;
}

template <typename T> void impl_IWiFiDirectService<T>::PreferGroupOwnerMode(bool const value) const
{
	check(shim()->put_PreferGroupOwnerMode(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IWiFiDirectService<T>::SessionInfo() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_SessionInfo(put(value)));
	return value;
}

template <typename T> void impl_IWiFiDirectService<T>::SessionInfo(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_SessionInfo(get(value)));
}

template <typename T> Windows::Devices::WiFiDirect::Services::WiFiDirectServiceError impl_IWiFiDirectService<T>::ServiceError() const
{
	Windows::Devices::WiFiDirect::Services::WiFiDirectServiceError value = {};
	check(shim()->get_ServiceError(&value));
	return value;
}

template <typename T> long long impl_IWiFiDirectService<T>::SessionDeferred(Windows::Foundation::ITypedEventHandler<Windows::Devices::WiFiDirect::Services::WiFiDirectService, Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSessionDeferredEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SessionDeferred(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IWiFiDirectService<T>::SessionDeferred(F handler) const
{
	return SessionDeferred(Windows::Foundation::TypedEventHandler<Windows::Devices::WiFiDirect::Services::WiFiDirectService, Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSessionDeferredEventArgs>(handler));
}

template <typename T> void impl_IWiFiDirectService<T>::SessionDeferred(long long const token) const
{
	check(shim()->remove_SessionDeferred(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceProvisioningInfo> impl_IWiFiDirectService<T>::GetProvisioningInfoAsync(Windows::Devices::WiFiDirect::Services::WiFiDirectServiceConfigurationMethod const selectedConfigurationMethod) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceProvisioningInfo> result;
	check(shim()->abi_GetProvisioningInfoAsync(selectedConfigurationMethod, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSession> impl_IWiFiDirectService<T>::ConnectAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSession> result;
	check(shim()->abi_ConnectAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSession> impl_IWiFiDirectService<T>::ConnectAsync(StringReference const & pin) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSession> result;
	check(shim()->abi_ConnectAsyncWithPin(get(pin), put(result)));
	return result;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IWiFiDirectServiceSessionRequest<T>::DeviceInformation() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check(shim()->get_DeviceInformation(put(value)));
	return value;
}

template <typename T> Windows::Devices::WiFiDirect::Services::WiFiDirectServiceProvisioningInfo impl_IWiFiDirectServiceSessionRequest<T>::ProvisioningInfo() const
{
	Windows::Devices::WiFiDirect::Services::WiFiDirectServiceProvisioningInfo value = nullptr;
	check(shim()->get_ProvisioningInfo(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IWiFiDirectServiceSessionRequest<T>::SessionInfo() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_SessionInfo(put(value)));
	return value;
}

template <typename T> String impl_IWiFiDirectServiceSession<T>::ServiceName() const
{
	String value;
	check(shim()->get_ServiceName(put(value)));
	return value;
}

template <typename T> Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSessionStatus impl_IWiFiDirectServiceSession<T>::Status() const
{
	Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSessionStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSessionErrorStatus impl_IWiFiDirectServiceSession<T>::ErrorStatus() const
{
	Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSessionErrorStatus value = {};
	check(shim()->get_ErrorStatus(&value));
	return value;
}

template <typename T> unsigned impl_IWiFiDirectServiceSession<T>::SessionId() const
{
	unsigned value = {};
	check(shim()->get_SessionId(&value));
	return value;
}

template <typename T> unsigned impl_IWiFiDirectServiceSession<T>::AdvertisementId() const
{
	unsigned value = {};
	check(shim()->get_AdvertisementId(&value));
	return value;
}

template <typename T> String impl_IWiFiDirectServiceSession<T>::ServiceAddress() const
{
	String value;
	check(shim()->get_ServiceAddress(put(value)));
	return value;
}

template <typename T> String impl_IWiFiDirectServiceSession<T>::SessionAddress() const
{
	String value;
	check(shim()->get_SessionAddress(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> impl_IWiFiDirectServiceSession<T>::GetConnectionEndpointPairs() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> value;
	check(shim()->abi_GetConnectionEndpointPairs(put(value)));
	return value;
}

template <typename T> long long impl_IWiFiDirectServiceSession<T>::SessionStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSession, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_SessionStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IWiFiDirectServiceSession<T>::SessionStatusChanged(F handler) const
{
	return SessionStatusChanged(Windows::Foundation::TypedEventHandler<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSession, IInspectable>(handler));
}

template <typename T> void impl_IWiFiDirectServiceSession<T>::SessionStatusChanged(long long const token) const
{
	check(shim()->remove_SessionStatusChanged(token));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWiFiDirectServiceSession<T>::AddStreamSocketListenerAsync(Windows::Networking::Sockets::StreamSocketListener const & value) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_AddStreamSocketListenerAsync(get(value), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWiFiDirectServiceSession<T>::AddDatagramSocketAsync(Windows::Networking::Sockets::DatagramSocket const & value) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_AddDatagramSocketAsync(get(value), put(result)));
	return result;
}

template <typename T> long long impl_IWiFiDirectServiceSession<T>::RemotePortAdded(Windows::Foundation::ITypedEventHandler<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSession, Windows::Devices::WiFiDirect::Services::WiFiDirectServiceRemotePortAddedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_RemotePortAdded(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IWiFiDirectServiceSession<T>::RemotePortAdded(F handler) const
{
	return RemotePortAdded(Windows::Foundation::TypedEventHandler<Windows::Devices::WiFiDirect::Services::WiFiDirectServiceSession, Windows::Devices::WiFiDirect::Services::WiFiDirectServiceRemotePortAddedEventArgs>(handler));
}

template <typename T> void impl_IWiFiDirectServiceSession<T>::RemotePortAdded(long long const token) const
{
	check(shim()->remove_RemotePortAdded(token));
}

}}}}}

namespace winrt { namespace Windows { namespace Foundation {

template <typename T> void impl_IAsyncActionCompletedHandler<T>::Invoke(Windows::Foundation::IAsyncAction const & asyncInfo, AsyncStatus const asyncStatus) const
{
	check(shim()->abi_Invoke(get(asyncInfo), asyncStatus));
}

template <typename T> void impl_IDeferralCompletedHandler<T>::Invoke() const
{
	check(shim()->abi_Invoke());
}

template <typename T> String impl_IUriRuntimeClass<T>::AbsoluteUri() const
{
	String value;
	check(shim()->get_AbsoluteUri(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::DisplayUri() const
{
	String value;
	check(shim()->get_DisplayUri(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Domain() const
{
	String value;
	check(shim()->get_Domain(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Extension() const
{
	String value;
	check(shim()->get_Extension(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Fragment() const
{
	String value;
	check(shim()->get_Fragment(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Host() const
{
	String value;
	check(shim()->get_Host(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Password() const
{
	String value;
	check(shim()->get_Password(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Path() const
{
	String value;
	check(shim()->get_Path(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::Query() const
{
	String value;
	check(shim()->get_Query(put(value)));
	return value;
}

template <typename T> Windows::Foundation::WwwFormUrlDecoder impl_IUriRuntimeClass<T>::QueryParsed() const
{
	Windows::Foundation::WwwFormUrlDecoder ppWwwFormUrlDecoder = nullptr;
	check(shim()->get_QueryParsed(put(ppWwwFormUrlDecoder)));
	return ppWwwFormUrlDecoder;
}

template <typename T> String impl_IUriRuntimeClass<T>::RawUri() const
{
	String value;
	check(shim()->get_RawUri(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::SchemeName() const
{
	String value;
	check(shim()->get_SchemeName(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClass<T>::UserName() const
{
	String value;
	check(shim()->get_UserName(put(value)));
	return value;
}

template <typename T> int impl_IUriRuntimeClass<T>::Port() const
{
	int value = {};
	check(shim()->get_Port(&value));
	return value;
}

template <typename T> bool impl_IUriRuntimeClass<T>::Suspicious() const
{
	bool value = {};
	check(shim()->get_Suspicious(put(value)));
	return value;
}

template <typename T> bool impl_IUriRuntimeClass<T>::Equals(Windows::Foundation::Uri const & pUri) const
{
	bool value = {};
	check(shim()->abi_Equals(get(pUri), put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IUriRuntimeClass<T>::CombineUri(StringReference const & relativeUri) const
{
	Windows::Foundation::Uri instance = nullptr;
	check(shim()->abi_CombineUri(get(relativeUri), put(instance)));
	return instance;
}

template <typename T> String impl_IUriRuntimeClassWithAbsoluteCanonicalUri<T>::AbsoluteCanonicalUri() const
{
	String value;
	check(shim()->get_AbsoluteCanonicalUri(put(value)));
	return value;
}

template <typename T> String impl_IUriRuntimeClassWithAbsoluteCanonicalUri<T>::DisplayIri() const
{
	String value;
	check(shim()->get_DisplayIri(put(value)));
	return value;
}

template <typename T> String impl_IUriEscapeStatics<T>::UnescapeComponent(StringReference const & toUnescape) const
{
	String value;
	check(shim()->abi_UnescapeComponent(get(toUnescape), put(value)));
	return value;
}

template <typename T> String impl_IUriEscapeStatics<T>::EscapeComponent(StringReference const & toEscape) const
{
	String value;
	check(shim()->abi_EscapeComponent(get(toEscape), put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IUriRuntimeClassFactory<T>::CreateUri(StringReference const & uri) const
{
	Windows::Foundation::Uri instance = nullptr;
	check(shim()->abi_CreateUri(get(uri), put(instance)));
	return instance;
}

template <typename T> Windows::Foundation::Uri impl_IUriRuntimeClassFactory<T>::CreateWithRelativeUri(StringReference const & baseUri, StringReference const & relativeUri) const
{
	Windows::Foundation::Uri instance = nullptr;
	check(shim()->abi_CreateWithRelativeUri(get(baseUri), get(relativeUri), put(instance)));
	return instance;
}

template <typename T> String impl_IWwwFormUrlDecoderEntry<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IWwwFormUrlDecoderEntry<T>::Value() const
{
	String value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> String impl_IWwwFormUrlDecoderRuntimeClass<T>::GetFirstValueByName(StringReference const & name) const
{
	String phstrValue;
	check(shim()->abi_GetFirstValueByName(get(name), put(phstrValue)));
	return phstrValue;
}

template <typename T> Windows::Foundation::WwwFormUrlDecoder impl_IWwwFormUrlDecoderRuntimeClassFactory<T>::CreateWwwFormUrlDecoder(StringReference const & query) const
{
	Windows::Foundation::WwwFormUrlDecoder instance = nullptr;
	check(shim()->abi_CreateWwwFormUrlDecoder(get(query), put(instance)));
	return instance;
}

template <typename T> IInspectable impl_IGetActivationFactory<T>::GetActivationFactory(StringReference const & activatableClassId) const
{
	IInspectable factory;
	check(shim()->abi_GetActivationFactory(get(activatableClassId), put(factory)));
	return factory;
}

template <typename T> void impl_IClosable<T>::Close() const
{
	check(shim()->abi_Close());
}

template <typename T> Windows::Foundation::PropertyType impl_IPropertyValue<T>::Type() const
{
	Windows::Foundation::PropertyType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> bool impl_IPropertyValue<T>::IsNumericScalar() const
{
	bool value = {};
	check(shim()->get_IsNumericScalar(put(value)));
	return value;
}

template <typename T> byte impl_IPropertyValue<T>::GetUInt8() const
{
	byte value = {};
	check(shim()->abi_GetUInt8(&value));
	return value;
}

template <typename T> short impl_IPropertyValue<T>::GetInt16() const
{
	short value = {};
	check(shim()->abi_GetInt16(&value));
	return value;
}

template <typename T> unsigned short impl_IPropertyValue<T>::GetUInt16() const
{
	unsigned short value = {};
	check(shim()->abi_GetUInt16(&value));
	return value;
}

template <typename T> int impl_IPropertyValue<T>::GetInt32() const
{
	int value = {};
	check(shim()->abi_GetInt32(&value));
	return value;
}

template <typename T> unsigned impl_IPropertyValue<T>::GetUInt32() const
{
	unsigned value = {};
	check(shim()->abi_GetUInt32(&value));
	return value;
}

template <typename T> long long impl_IPropertyValue<T>::GetInt64() const
{
	long long value = {};
	check(shim()->abi_GetInt64(&value));
	return value;
}

template <typename T> unsigned long long impl_IPropertyValue<T>::GetUInt64() const
{
	unsigned long long value = {};
	check(shim()->abi_GetUInt64(&value));
	return value;
}

template <typename T> float impl_IPropertyValue<T>::GetSingle() const
{
	float value = {};
	check(shim()->abi_GetSingle(&value));
	return value;
}

template <typename T> double impl_IPropertyValue<T>::GetDouble() const
{
	double value = {};
	check(shim()->abi_GetDouble(&value));
	return value;
}

template <typename T> wchar_t impl_IPropertyValue<T>::GetChar16() const
{
	wchar_t value = {};
	check(shim()->abi_GetChar16(&value));
	return value;
}

template <typename T> bool impl_IPropertyValue<T>::GetBoolean() const
{
	bool value = {};
	check(shim()->abi_GetBoolean(put(value)));
	return value;
}

template <typename T> String impl_IPropertyValue<T>::GetString() const
{
	String value;
	check(shim()->abi_GetString(put(value)));
	return value;
}

template <typename T> GUID impl_IPropertyValue<T>::GetGuid() const
{
	GUID value = {};
	check(shim()->abi_GetGuid(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPropertyValue<T>::GetDateTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->abi_GetDateTime(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPropertyValue<T>::GetTimeSpan() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->abi_GetTimeSpan(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IPropertyValue<T>::GetPoint() const
{
	Windows::Foundation::Point value = {};
	check(shim()->abi_GetPoint(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IPropertyValue<T>::GetSize() const
{
	Windows::Foundation::Size value = {};
	check(shim()->abi_GetSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPropertyValue<T>::GetRect() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->abi_GetRect(&value));
	return value;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateEmpty() const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateEmpty(put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateUInt8(byte const value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateUInt8(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateInt16(short const value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateInt16(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateUInt16(unsigned short const value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateUInt16(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateInt32(int const value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateInt32(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateUInt32(unsigned const value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateUInt32(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateInt64(long long const value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateInt64(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateUInt64(unsigned long long const value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateUInt64(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateSingle(float const value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateSingle(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateDouble(double const value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateDouble(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateChar16(wchar_t const value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateChar16(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateBoolean(bool const value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateBoolean(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateString(StringReference const & value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateString(get(value), put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateInspectable(IInspectable const & value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateInspectable(get(value), put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateGuid(GUID const value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateGuid(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateDateTime(Windows::Foundation::DateTime const & value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateDateTime(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateTimeSpan(Windows::Foundation::TimeSpan const & value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateTimeSpan(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreatePoint(Windows::Foundation::Point const & value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreatePoint(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateSize(Windows::Foundation::Size const & value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateSize(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> IInspectable impl_IPropertyValueStatics<T>::CreateRect(Windows::Foundation::Rect const & value) const
{
	IInspectable propertyValue;
	check(shim()->abi_CreateRect(value, put(propertyValue)));
	return propertyValue;
}

template <typename T> String impl_IStringable<T>::ToString() const
{
	String value;
	check(shim()->abi_ToString(put(value)));
	return value;
}

template <typename T> void impl_IDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::Foundation::Deferral impl_IDeferralFactory<T>::Create(Windows::Foundation::IDeferralCompletedHandler const & handler) const
{
	Windows::Foundation::Deferral result = nullptr;
	check(shim()->abi_Create(get(handler), put(result)));
	return result;
}

template <typename T> template <typename F> Windows::Foundation::Deferral impl_IDeferralFactory<T>::Create(F handler) const
{
	return Create(Windows::Foundation::DeferralCompletedHandler(handler));
}

template <typename T> unsigned impl_IMemoryBufferReference<T>::Capacity() const
{
	unsigned value = {};
	check(shim()->get_Capacity(&value));
	return value;
}

template <typename T> long long impl_IMemoryBufferReference<T>::Closed(Windows::Foundation::ITypedEventHandler<Windows::Foundation::IMemoryBufferReference, IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_Closed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMemoryBufferReference<T>::Closed(F handler) const
{
	return Closed(Windows::Foundation::TypedEventHandler<Windows::Foundation::IMemoryBufferReference, IInspectable>(handler));
}

template <typename T> void impl_IMemoryBufferReference<T>::Closed(long long const cookie) const
{
	check(shim()->remove_Closed(cookie));
}

template <typename T> Windows::Foundation::IMemoryBufferReference impl_IMemoryBuffer<T>::CreateReference() const
{
	Windows::Foundation::IMemoryBufferReference reference;
	check(shim()->abi_CreateReference(put(reference)));
	return reference;
}

template <typename T> Windows::Foundation::MemoryBuffer impl_IMemoryBufferFactory<T>::Create(unsigned const capacity) const
{
	Windows::Foundation::MemoryBuffer value = nullptr;
	check(shim()->abi_Create(capacity, put(value)));
	return value;
}

template <typename T> void impl_IAsyncAction<T>::Completed(Windows::Foundation::IAsyncActionCompletedHandler const & handler) const
{
	check(shim()->put_Completed(get(handler)));
}

template <typename T> template <typename F> void impl_IAsyncAction<T>::Completed(F handler) const
{
	Completed(Windows::Foundation::AsyncActionCompletedHandler(handler));
}

template <typename T> Windows::Foundation::IAsyncActionCompletedHandler impl_IAsyncAction<T>::Completed() const
{
	Windows::Foundation::IAsyncActionCompletedHandler handler = {};
	check(shim()->get_Completed(put(handler)));
	return handler;
}

template <typename T> void impl_IAsyncAction<T>::GetResults() const
{
	check(shim()->abi_GetResults());
}

}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Collections {

}}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Diagnostics {

template <typename T> bool impl_ITracingStatusChangedEventArgs<T>::Enabled() const
{
	bool enabled = {};
	check(shim()->get_Enabled(put(enabled)));
	return enabled;
}

template <typename T> Windows::Foundation::Diagnostics::CausalityTraceLevel impl_ITracingStatusChangedEventArgs<T>::TraceLevel() const
{
	Windows::Foundation::Diagnostics::CausalityTraceLevel value = {};
	check(shim()->get_TraceLevel(&value));
	return value;
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, StringReference const & operationName, unsigned long long const relatedContext) const
{
	check(shim()->abi_TraceOperationCreation(traceLevel, source, platformId, operationId, get(operationName), relatedContext));
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TraceOperationCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, AsyncStatus const status) const
{
	check(shim()->abi_TraceOperationCompletion(traceLevel, source, platformId, operationId, status));
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TraceOperationRelation(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, Windows::Foundation::Diagnostics::CausalityRelation const relation) const
{
	check(shim()->abi_TraceOperationRelation(traceLevel, source, platformId, operationId, relation));
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TraceSynchronousWorkStart(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, Windows::Foundation::Diagnostics::CausalitySynchronousWork const work) const
{
	check(shim()->abi_TraceSynchronousWorkStart(traceLevel, source, platformId, operationId, work));
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TraceSynchronousWorkCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, Windows::Foundation::Diagnostics::CausalitySynchronousWork const work) const
{
	check(shim()->abi_TraceSynchronousWorkCompletion(traceLevel, source, work));
}

template <typename T> long long impl_IAsyncCausalityTracerStatics<T>::TracingStatusChanged(Windows::Foundation::IEventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_TracingStatusChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IAsyncCausalityTracerStatics<T>::TracingStatusChanged(F handler) const
{
	return TracingStatusChanged(Windows::Foundation::EventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs>(handler));
}

template <typename T> void impl_IAsyncCausalityTracerStatics<T>::TracingStatusChanged(long long const cookie) const
{
	check(shim()->remove_TracingStatusChanged(cookie));
}

template <typename T> void impl_IErrorReportingSettings<T>::SetErrorOptions(Windows::Foundation::Diagnostics::ErrorOptions const value) const
{
	check(shim()->abi_SetErrorOptions(value));
}

template <typename T> Windows::Foundation::Diagnostics::ErrorOptions impl_IErrorReportingSettings<T>::GetErrorOptions() const
{
	Windows::Foundation::Diagnostics::ErrorOptions value = {};
	check(shim()->abi_GetErrorOptions(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Diagnostics::ErrorDetails> impl_IErrorDetailsStatics<T>::CreateFromHResultAsync(int const errorCode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Diagnostics::ErrorDetails> operation;
	check(shim()->abi_CreateFromHResultAsync(errorCode, put(operation)));
	return operation;
}

template <typename T> String impl_IErrorDetails<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> String impl_IErrorDetails<T>::LongDescription() const
{
	String value;
	check(shim()->get_LongDescription(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IErrorDetails<T>::HelpUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_HelpUri(put(value)));
	return value;
}

template <typename T> long long impl_ILoggingOptions<T>::Keywords() const
{
	long long value = {};
	check(shim()->get_Keywords(&value));
	return value;
}

template <typename T> void impl_ILoggingOptions<T>::Keywords(long long const value) const
{
	check(shim()->put_Keywords(value));
}

template <typename T> int impl_ILoggingOptions<T>::Tags() const
{
	int value = {};
	check(shim()->get_Tags(&value));
	return value;
}

template <typename T> void impl_ILoggingOptions<T>::Tags(int const value) const
{
	check(shim()->put_Tags(value));
}

template <typename T> short impl_ILoggingOptions<T>::Task() const
{
	short value = {};
	check(shim()->get_Task(&value));
	return value;
}

template <typename T> void impl_ILoggingOptions<T>::Task(short const value) const
{
	check(shim()->put_Task(value));
}

template <typename T> Windows::Foundation::Diagnostics::LoggingOpcode impl_ILoggingOptions<T>::Opcode() const
{
	Windows::Foundation::Diagnostics::LoggingOpcode value = {};
	check(shim()->get_Opcode(&value));
	return value;
}

template <typename T> void impl_ILoggingOptions<T>::Opcode(Windows::Foundation::Diagnostics::LoggingOpcode const value) const
{
	check(shim()->put_Opcode(value));
}

template <typename T> GUID impl_ILoggingOptions<T>::ActivityId() const
{
	GUID value = {};
	check(shim()->get_ActivityId(&value));
	return value;
}

template <typename T> void impl_ILoggingOptions<T>::ActivityId(GUID const value) const
{
	check(shim()->put_ActivityId(value));
}

template <typename T> GUID impl_ILoggingOptions<T>::RelatedActivityId() const
{
	GUID value = {};
	check(shim()->get_RelatedActivityId(&value));
	return value;
}

template <typename T> void impl_ILoggingOptions<T>::RelatedActivityId(GUID const value) const
{
	check(shim()->put_RelatedActivityId(value));
}

template <typename T> Windows::Foundation::Diagnostics::LoggingOptions impl_ILoggingOptionsFactory<T>::CreateWithKeywords(long long const keywords) const
{
	Windows::Foundation::Diagnostics::LoggingOptions result = nullptr;
	check(shim()->abi_CreateWithKeywords(keywords, put(result)));
	return result;
}

template <typename T> GUID impl_ILoggingChannelOptions<T>::Group() const
{
	GUID value = {};
	check(shim()->get_Group(&value));
	return value;
}

template <typename T> void impl_ILoggingChannelOptions<T>::Group(GUID const value) const
{
	check(shim()->put_Group(value));
}

template <typename T> Windows::Foundation::Diagnostics::LoggingChannelOptions impl_ILoggingChannelOptionsFactory<T>::Create(GUID const group) const
{
	Windows::Foundation::Diagnostics::LoggingChannelOptions result = nullptr;
	check(shim()->abi_Create(group, put(result)));
	return result;
}

template <typename T> void impl_ILoggingFields<T>::Clear() const
{
	check(shim()->abi_Clear());
}

template <typename T> void impl_ILoggingFields<T>::BeginStruct(StringReference const & name) const
{
	check(shim()->abi_BeginStruct(get(name)));
}

template <typename T> void impl_ILoggingFields<T>::BeginStruct(StringReference const & name, int const tags) const
{
	check(shim()->abi_BeginStructWithTags(get(name), tags));
}

template <typename T> void impl_ILoggingFields<T>::EndStruct() const
{
	check(shim()->abi_EndStruct());
}

template <typename T> void impl_ILoggingFields<T>::AddEmpty(StringReference const & name) const
{
	check(shim()->abi_AddEmpty(get(name)));
}

template <typename T> void impl_ILoggingFields<T>::AddEmpty(StringReference const & name, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddEmptyWithFormat(get(name), format));
}

template <typename T> void impl_ILoggingFields<T>::AddEmpty(StringReference const & name, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddEmptyWithFormatAndTags(get(name), format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt8(StringReference const & name, byte const value) const
{
	check(shim()->abi_AddUInt8(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt8(StringReference const & name, byte const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddUInt8WithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt8(StringReference const & name, byte const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddUInt8WithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddInt16(StringReference const & name, short const value) const
{
	check(shim()->abi_AddInt16(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddInt16(StringReference const & name, short const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddInt16WithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddInt16(StringReference const & name, short const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddInt16WithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt16(StringReference const & name, unsigned short const value) const
{
	check(shim()->abi_AddUInt16(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt16(StringReference const & name, unsigned short const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddUInt16WithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt16(StringReference const & name, unsigned short const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddUInt16WithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddInt32(StringReference const & name, int const value) const
{
	check(shim()->abi_AddInt32(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddInt32(StringReference const & name, int const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddInt32WithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddInt32(StringReference const & name, int const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddInt32WithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt32(StringReference const & name, unsigned const value) const
{
	check(shim()->abi_AddUInt32(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt32(StringReference const & name, unsigned const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddUInt32WithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt32(StringReference const & name, unsigned const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddUInt32WithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddInt64(StringReference const & name, long long const value) const
{
	check(shim()->abi_AddInt64(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddInt64(StringReference const & name, long long const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddInt64WithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddInt64(StringReference const & name, long long const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddInt64WithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt64(StringReference const & name, unsigned long long const value) const
{
	check(shim()->abi_AddUInt64(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt64(StringReference const & name, unsigned long long const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddUInt64WithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddUInt64(StringReference const & name, unsigned long long const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddUInt64WithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddSingle(StringReference const & name, float const value) const
{
	check(shim()->abi_AddSingle(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddSingle(StringReference const & name, float const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddSingleWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddSingle(StringReference const & name, float const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddSingleWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddDouble(StringReference const & name, double const value) const
{
	check(shim()->abi_AddDouble(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddDouble(StringReference const & name, double const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddDoubleWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddDouble(StringReference const & name, double const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddDoubleWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddChar16(StringReference const & name, wchar_t const value) const
{
	check(shim()->abi_AddChar16(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddChar16(StringReference const & name, wchar_t const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddChar16WithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddChar16(StringReference const & name, wchar_t const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddChar16WithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddBoolean(StringReference const & name, bool const value) const
{
	check(shim()->abi_AddBoolean(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddBoolean(StringReference const & name, bool const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddBooleanWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddBoolean(StringReference const & name, bool const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddBooleanWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddString(StringReference const & name, StringReference const & value) const
{
	check(shim()->abi_AddString(get(name), get(value)));
}

template <typename T> void impl_ILoggingFields<T>::AddString(StringReference const & name, StringReference const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddStringWithFormat(get(name), get(value), format));
}

template <typename T> void impl_ILoggingFields<T>::AddString(StringReference const & name, StringReference const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddStringWithFormatAndTags(get(name), get(value), format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddGuid(StringReference const & name, GUID const value) const
{
	check(shim()->abi_AddGuid(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddGuid(StringReference const & name, GUID const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddGuidWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddGuid(StringReference const & name, GUID const value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddGuidWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddDateTime(StringReference const & name, Windows::Foundation::DateTime const & value) const
{
	check(shim()->abi_AddDateTime(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddDateTime(StringReference const & name, Windows::Foundation::DateTime const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddDateTimeWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddDateTime(StringReference const & name, Windows::Foundation::DateTime const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddDateTimeWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddTimeSpan(StringReference const & name, Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->abi_AddTimeSpan(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddTimeSpan(StringReference const & name, Windows::Foundation::TimeSpan const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddTimeSpanWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddTimeSpan(StringReference const & name, Windows::Foundation::TimeSpan const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddTimeSpanWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddPoint(StringReference const & name, Windows::Foundation::Point const & value) const
{
	check(shim()->abi_AddPoint(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddPoint(StringReference const & name, Windows::Foundation::Point const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddPointWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddPoint(StringReference const & name, Windows::Foundation::Point const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddPointWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddSize(StringReference const & name, Windows::Foundation::Size const & value) const
{
	check(shim()->abi_AddSize(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddSize(StringReference const & name, Windows::Foundation::Size const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddSizeWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddSize(StringReference const & name, Windows::Foundation::Size const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddSizeWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> void impl_ILoggingFields<T>::AddRect(StringReference const & name, Windows::Foundation::Rect const & value) const
{
	check(shim()->abi_AddRect(get(name), value));
}

template <typename T> void impl_ILoggingFields<T>::AddRect(StringReference const & name, Windows::Foundation::Rect const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format) const
{
	check(shim()->abi_AddRectWithFormat(get(name), value, format));
}

template <typename T> void impl_ILoggingFields<T>::AddRect(StringReference const & name, Windows::Foundation::Rect const & value, Windows::Foundation::Diagnostics::LoggingFieldFormat const format, int const tags) const
{
	check(shim()->abi_AddRectWithFormatAndTags(get(name), value, format, tags));
}

template <typename T> bool impl_ILoggingTarget<T>::IsEnabled() const
{
	bool result = {};
	check(shim()->abi_IsEnabled(put(result)));
	return result;
}

template <typename T> bool impl_ILoggingTarget<T>::IsEnabled(Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	bool result = {};
	check(shim()->abi_IsEnabledWithLevel(level, put(result)));
	return result;
}

template <typename T> bool impl_ILoggingTarget<T>::IsEnabled(Windows::Foundation::Diagnostics::LoggingLevel const level, long long const keywords) const
{
	bool result = {};
	check(shim()->abi_IsEnabledWithLevelAndKeywords(level, keywords, put(result)));
	return result;
}

template <typename T> void impl_ILoggingTarget<T>::LogEvent(StringReference const & eventName) const
{
	check(shim()->abi_LogEvent(get(eventName)));
}

template <typename T> void impl_ILoggingTarget<T>::LogEvent(StringReference const & eventName, Windows::Foundation::Diagnostics::LoggingFields const & fields) const
{
	check(shim()->abi_LogEventWithFields(get(eventName), get(fields)));
}

template <typename T> void impl_ILoggingTarget<T>::LogEvent(StringReference const & eventName, Windows::Foundation::Diagnostics::LoggingFields const & fields, Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	check(shim()->abi_LogEventWithFieldsAndLevel(get(eventName), get(fields), level));
}

template <typename T> void impl_ILoggingTarget<T>::LogEvent(StringReference const & eventName, Windows::Foundation::Diagnostics::LoggingFields const & fields, Windows::Foundation::Diagnostics::LoggingLevel const level, Windows::Foundation::Diagnostics::LoggingOptions const & options) const
{
	check(shim()->abi_LogEventWithFieldsAndOptions(get(eventName), get(fields), level, get(options)));
}

template <typename T> Windows::Foundation::Diagnostics::LoggingActivity impl_ILoggingTarget<T>::StartActivity(StringReference const & startEventName) const
{
	Windows::Foundation::Diagnostics::LoggingActivity result = nullptr;
	check(shim()->abi_StartActivity(get(startEventName), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingActivity impl_ILoggingTarget<T>::StartActivity(StringReference const & startEventName, Windows::Foundation::Diagnostics::LoggingFields const & fields) const
{
	Windows::Foundation::Diagnostics::LoggingActivity result = nullptr;
	check(shim()->abi_StartActivityWithFields(get(startEventName), get(fields), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingActivity impl_ILoggingTarget<T>::StartActivity(StringReference const & startEventName, Windows::Foundation::Diagnostics::LoggingFields const & fields, Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	Windows::Foundation::Diagnostics::LoggingActivity result = nullptr;
	check(shim()->abi_StartActivityWithFieldsAndLevel(get(startEventName), get(fields), level, put(result)));
	return result;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingActivity impl_ILoggingTarget<T>::StartActivity(StringReference const & startEventName, Windows::Foundation::Diagnostics::LoggingFields const & fields, Windows::Foundation::Diagnostics::LoggingLevel const level, Windows::Foundation::Diagnostics::LoggingOptions const & options) const
{
	Windows::Foundation::Diagnostics::LoggingActivity result = nullptr;
	check(shim()->abi_StartActivityWithFieldsAndOptions(get(startEventName), get(fields), level, get(options), put(result)));
	return result;
}

template <typename T> String impl_ILoggingChannel<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> bool impl_ILoggingChannel<T>::Enabled() const
{
	bool value = {};
	check(shim()->get_Enabled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingLevel impl_ILoggingChannel<T>::Level() const
{
	Windows::Foundation::Diagnostics::LoggingLevel value = {};
	check(shim()->get_Level(&value));
	return value;
}

template <typename T> void impl_ILoggingChannel<T>::LogMessage(StringReference const & eventString) const
{
	check(shim()->abi_LogMessage(get(eventString)));
}

template <typename T> void impl_ILoggingChannel<T>::LogMessage(StringReference const & eventString, Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	check(shim()->abi_LogMessageWithLevel(get(eventString), level));
}

template <typename T> void impl_ILoggingChannel<T>::LogValuePair(StringReference const & value1, int const value2) const
{
	check(shim()->abi_LogValuePair(get(value1), value2));
}

template <typename T> void impl_ILoggingChannel<T>::LogValuePair(StringReference const & value1, int const value2, Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	check(shim()->abi_LogValuePairWithLevel(get(value1), value2, level));
}

template <typename T> long long impl_ILoggingChannel<T>::LoggingEnabled(Windows::Foundation::ITypedEventHandler<Windows::Foundation::Diagnostics::ILoggingChannel, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_LoggingEnabled(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ILoggingChannel<T>::LoggingEnabled(F handler) const
{
	return LoggingEnabled(Windows::Foundation::TypedEventHandler<Windows::Foundation::Diagnostics::ILoggingChannel, IInspectable>(handler));
}

template <typename T> void impl_ILoggingChannel<T>::LoggingEnabled(long long const token) const
{
	check(shim()->remove_LoggingEnabled(token));
}

template <typename T> GUID impl_ILoggingChannel2<T>::Id() const
{
	GUID value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingChannel impl_ILoggingChannelFactory<T>::Create(StringReference const & name) const
{
	Windows::Foundation::Diagnostics::LoggingChannel result = nullptr;
	check(shim()->abi_Create(get(name), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingChannel impl_ILoggingChannelFactory2<T>::CreateWithOptions(StringReference const & name, Windows::Foundation::Diagnostics::LoggingChannelOptions const & options) const
{
	Windows::Foundation::Diagnostics::LoggingChannel result = nullptr;
	check(shim()->abi_CreateWithOptions(get(name), get(options), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingChannel impl_ILoggingChannelFactory2<T>::CreateWithOptionsAndId(StringReference const & name, Windows::Foundation::Diagnostics::LoggingChannelOptions const & options, GUID const id) const
{
	Windows::Foundation::Diagnostics::LoggingChannel result = nullptr;
	check(shim()->abi_CreateWithOptionsAndId(get(name), get(options), id, put(result)));
	return result;
}

template <typename T> String impl_ILoggingActivity<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> GUID impl_ILoggingActivity<T>::Id() const
{
	GUID value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingChannel impl_ILoggingActivity2<T>::Channel() const
{
	Windows::Foundation::Diagnostics::LoggingChannel value = nullptr;
	check(shim()->get_Channel(put(value)));
	return value;
}

template <typename T> void impl_ILoggingActivity2<T>::StopActivity(StringReference const & stopEventName) const
{
	check(shim()->abi_StopActivity(get(stopEventName)));
}

template <typename T> void impl_ILoggingActivity2<T>::StopActivity(StringReference const & stopEventName, Windows::Foundation::Diagnostics::LoggingFields const & fields) const
{
	check(shim()->abi_StopActivityWithFields(get(stopEventName), get(fields)));
}

template <typename T> void impl_ILoggingActivity2<T>::StopActivity(StringReference const & stopEventName, Windows::Foundation::Diagnostics::LoggingFields const & fields, Windows::Foundation::Diagnostics::LoggingOptions const & options) const
{
	check(shim()->abi_StopActivityWithFieldsAndOptions(get(stopEventName), get(fields), get(options)));
}

template <typename T> Windows::Foundation::Diagnostics::LoggingActivity impl_ILoggingActivityFactory<T>::CreateLoggingActivity(StringReference const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const
{
	Windows::Foundation::Diagnostics::LoggingActivity loggingActivity = nullptr;
	check(shim()->abi_CreateLoggingActivity(get(activityName), get(loggingChannel), put(loggingActivity)));
	return loggingActivity;
}

template <typename T> Windows::Foundation::Diagnostics::LoggingActivity impl_ILoggingActivityFactory<T>::CreateLoggingActivityWithLevel(StringReference const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel const level) const
{
	Windows::Foundation::Diagnostics::LoggingActivity loggingActivity = nullptr;
	check(shim()->abi_CreateLoggingActivityWithLevel(get(activityName), get(loggingChannel), level, put(loggingActivity)));
	return loggingActivity;
}

template <typename T> String impl_ILoggingSession<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_ILoggingSession<T>::SaveToFileAsync(Windows::Storage::IStorageFolder const & folder, StringReference const & fileName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_SaveToFileAsync(get(folder), get(fileName), put(operation)));
	return operation;
}

template <typename T> void impl_ILoggingSession<T>::AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const
{
	check(shim()->abi_AddLoggingChannel(get(loggingChannel)));
}

template <typename T> void impl_ILoggingSession<T>::AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel const maxLevel) const
{
	check(shim()->abi_AddLoggingChannelWithLevel(get(loggingChannel), maxLevel));
}

template <typename T> void impl_ILoggingSession<T>::RemoveLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const
{
	check(shim()->abi_RemoveLoggingChannel(get(loggingChannel)));
}

template <typename T> Windows::Foundation::Diagnostics::LoggingSession impl_ILoggingSessionFactory<T>::Create(StringReference const & name) const
{
	Windows::Foundation::Diagnostics::LoggingSession result = nullptr;
	check(shim()->abi_Create(get(name), put(result)));
	return result;
}

template <typename T> Windows::Storage::StorageFile impl_ILogFileGeneratedEventArgs<T>::File() const
{
	Windows::Storage::StorageFile value = nullptr;
	check(shim()->get_File(put(value)));
	return value;
}

template <typename T> String impl_IFileLoggingSession<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IFileLoggingSession<T>::AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const
{
	check(shim()->abi_AddLoggingChannel(get(loggingChannel)));
}

template <typename T> void impl_IFileLoggingSession<T>::AddLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel const maxLevel) const
{
	check(shim()->abi_AddLoggingChannelWithLevel(get(loggingChannel), maxLevel));
}

template <typename T> void impl_IFileLoggingSession<T>::RemoveLoggingChannel(Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) const
{
	check(shim()->abi_RemoveLoggingChannel(get(loggingChannel)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IFileLoggingSession<T>::CloseAndSaveToFileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_CloseAndSaveToFileAsync(put(operation)));
	return operation;
}

template <typename T> long long impl_IFileLoggingSession<T>::LogFileGenerated(Windows::Foundation::ITypedEventHandler<Windows::Foundation::Diagnostics::IFileLoggingSession, Windows::Foundation::Diagnostics::LogFileGeneratedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_LogFileGenerated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IFileLoggingSession<T>::LogFileGenerated(F handler) const
{
	return LogFileGenerated(Windows::Foundation::TypedEventHandler<Windows::Foundation::Diagnostics::IFileLoggingSession, Windows::Foundation::Diagnostics::LogFileGeneratedEventArgs>(handler));
}

template <typename T> void impl_IFileLoggingSession<T>::LogFileGenerated(long long const token) const
{
	check(shim()->remove_LogFileGenerated(token));
}

template <typename T> Windows::Foundation::Diagnostics::FileLoggingSession impl_IFileLoggingSessionFactory<T>::Create(StringReference const & name) const
{
	Windows::Foundation::Diagnostics::FileLoggingSession result = nullptr;
	check(shim()->abi_Create(get(name), put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Metadata {

template <typename T> bool impl_IApiInformationStatics<T>::IsTypePresent(StringReference const & typeName) const
{
	bool value = {};
	check(shim()->abi_IsTypePresent(get(typeName), put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsMethodPresent(StringReference const & typeName, StringReference const & methodName) const
{
	bool value = {};
	check(shim()->abi_IsMethodPresent(get(typeName), get(methodName), put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsMethodPresent(StringReference const & typeName, StringReference const & methodName, unsigned const inputParameterCount) const
{
	bool value = {};
	check(shim()->abi_IsMethodPresentWithArity(get(typeName), get(methodName), inputParameterCount, put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsEventPresent(StringReference const & typeName, StringReference const & eventName) const
{
	bool value = {};
	check(shim()->abi_IsEventPresent(get(typeName), get(eventName), put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsPropertyPresent(StringReference const & typeName, StringReference const & propertyName) const
{
	bool value = {};
	check(shim()->abi_IsPropertyPresent(get(typeName), get(propertyName), put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsReadOnlyPropertyPresent(StringReference const & typeName, StringReference const & propertyName) const
{
	bool value = {};
	check(shim()->abi_IsReadOnlyPropertyPresent(get(typeName), get(propertyName), put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsWriteablePropertyPresent(StringReference const & typeName, StringReference const & propertyName) const
{
	bool value = {};
	check(shim()->abi_IsWriteablePropertyPresent(get(typeName), get(propertyName), put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsEnumNamedValuePresent(StringReference const & enumTypeName, StringReference const & valueName) const
{
	bool value = {};
	check(shim()->abi_IsEnumNamedValuePresent(get(enumTypeName), get(valueName), put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsApiContractPresent(StringReference const & contractName, unsigned short const majorVersion) const
{
	bool value = {};
	check(shim()->abi_IsApiContractPresentByMajor(get(contractName), majorVersion, put(value)));
	return value;
}

template <typename T> bool impl_IApiInformationStatics<T>::IsApiContractPresent(StringReference const & contractName, unsigned short const majorVersion, unsigned short const minorVersion) const
{
	bool value = {};
	check(shim()->abi_IsApiContractPresentByMajorAndMinor(get(contractName), majorVersion, minorVersion, put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Gaming { namespace Input {

template <typename T> long long impl_IGameController<T>::HeadsetConnected(Windows::Foundation::ITypedEventHandler<Windows::Gaming::Input::IGameController, Windows::Gaming::Input::Headset> const & value) const
{
	long long token = {};
	check(shim()->add_HeadsetConnected(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGameController<T>::HeadsetConnected(F value) const
{
	return HeadsetConnected(Windows::Foundation::TypedEventHandler<Windows::Gaming::Input::IGameController, Windows::Gaming::Input::Headset>(value));
}

template <typename T> void impl_IGameController<T>::HeadsetConnected(long long const token) const
{
	check(shim()->remove_HeadsetConnected(token));
}

template <typename T> long long impl_IGameController<T>::HeadsetDisconnected(Windows::Foundation::ITypedEventHandler<Windows::Gaming::Input::IGameController, Windows::Gaming::Input::Headset> const & value) const
{
	long long token = {};
	check(shim()->add_HeadsetDisconnected(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGameController<T>::HeadsetDisconnected(F value) const
{
	return HeadsetDisconnected(Windows::Foundation::TypedEventHandler<Windows::Gaming::Input::IGameController, Windows::Gaming::Input::Headset>(value));
}

template <typename T> void impl_IGameController<T>::HeadsetDisconnected(long long const token) const
{
	check(shim()->remove_HeadsetDisconnected(token));
}

template <typename T> long long impl_IGameController<T>::UserChanged(Windows::Foundation::ITypedEventHandler<Windows::Gaming::Input::IGameController, Windows::System::UserChangedEventArgs> const & value) const
{
	long long token = {};
	check(shim()->add_UserChanged(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGameController<T>::UserChanged(F value) const
{
	return UserChanged(Windows::Foundation::TypedEventHandler<Windows::Gaming::Input::IGameController, Windows::System::UserChangedEventArgs>(value));
}

template <typename T> void impl_IGameController<T>::UserChanged(long long const token) const
{
	check(shim()->remove_UserChanged(token));
}

template <typename T> Windows::Gaming::Input::Headset impl_IGameController<T>::Headset() const
{
	Windows::Gaming::Input::Headset value = nullptr;
	check(shim()->get_Headset(put(value)));
	return value;
}

template <typename T> bool impl_IGameController<T>::IsWireless() const
{
	bool value = {};
	check(shim()->get_IsWireless(put(value)));
	return value;
}

template <typename T> Windows::System::User impl_IGameController<T>::User() const
{
	Windows::System::User value = nullptr;
	check(shim()->get_User(put(value)));
	return value;
}

template <typename T> Windows::Gaming::Input::GamepadVibration impl_IGamepad<T>::Vibration() const
{
	Windows::Gaming::Input::GamepadVibration value = {};
	check(shim()->get_Vibration(&value));
	return value;
}

template <typename T> void impl_IGamepad<T>::Vibration(Windows::Gaming::Input::GamepadVibration const & value) const
{
	check(shim()->put_Vibration(value));
}

template <typename T> Windows::Gaming::Input::GamepadReading impl_IGamepad<T>::GetCurrentReading() const
{
	Windows::Gaming::Input::GamepadReading value = {};
	check(shim()->abi_GetCurrentReading(&value));
	return value;
}

template <typename T> long long impl_IGamepadStatics<T>::GamepadAdded(Windows::Foundation::IEventHandler<Windows::Gaming::Input::Gamepad> const & value) const
{
	long long token = {};
	check(shim()->add_GamepadAdded(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGamepadStatics<T>::GamepadAdded(F value) const
{
	return GamepadAdded(Windows::Foundation::EventHandler<Windows::Gaming::Input::Gamepad>(value));
}

template <typename T> void impl_IGamepadStatics<T>::GamepadAdded(long long const token) const
{
	check(shim()->remove_GamepadAdded(token));
}

template <typename T> long long impl_IGamepadStatics<T>::GamepadRemoved(Windows::Foundation::IEventHandler<Windows::Gaming::Input::Gamepad> const & value) const
{
	long long token = {};
	check(shim()->add_GamepadRemoved(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGamepadStatics<T>::GamepadRemoved(F value) const
{
	return GamepadRemoved(Windows::Foundation::EventHandler<Windows::Gaming::Input::Gamepad>(value));
}

template <typename T> void impl_IGamepadStatics<T>::GamepadRemoved(long long const token) const
{
	check(shim()->remove_GamepadRemoved(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Gaming::Input::Gamepad> impl_IGamepadStatics<T>::Gamepads() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Gaming::Input::Gamepad> value;
	check(shim()->get_Gamepads(put(value)));
	return value;
}

template <typename T> String impl_IHeadset<T>::CaptureDeviceId() const
{
	String value;
	check(shim()->get_CaptureDeviceId(put(value)));
	return value;
}

template <typename T> String impl_IHeadset<T>::RenderDeviceId() const
{
	String value;
	check(shim()->get_RenderDeviceId(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Gaming { namespace Preview { namespace GamesEnumeration {

template <typename T> void impl_IGameListChangedEventHandler<T>::Invoke(Windows::Gaming::Preview::GamesEnumeration::GameListEntry const & game) const
{
	check(shim()->abi_Invoke(get(game)));
}

template <typename T> void impl_IGameListRemovedEventHandler<T>::Invoke(StringReference const & identifier) const
{
	check(shim()->abi_Invoke(get(identifier)));
}

template <typename T> Windows::ApplicationModel::AppDisplayInfo impl_IGameListEntry<T>::DisplayInfo() const
{
	Windows::ApplicationModel::AppDisplayInfo value = nullptr;
	check(shim()->get_DisplayInfo(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IGameListEntry<T>::LaunchAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_LaunchAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Gaming::Preview::GamesEnumeration::GameListCategory impl_IGameListEntry<T>::Category() const
{
	Windows::Gaming::Preview::GamesEnumeration::GameListCategory value = {};
	check(shim()->get_Category(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IGameListEntry<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IGameListEntry<T>::SetCategoryAsync(Windows::Gaming::Preview::GamesEnumeration::GameListCategory const value) const
{
	Windows::Foundation::IAsyncAction action;
	check(shim()->abi_SetCategoryAsync(value, put(action)));
	return action;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Gaming::Preview::GamesEnumeration::GameListEntry>> impl_IGameListStatics<T>::FindAllAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Gaming::Preview::GamesEnumeration::GameListEntry>> operation;
	check(shim()->abi_FindAllAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Gaming::Preview::GamesEnumeration::GameListEntry>> impl_IGameListStatics<T>::FindAllAsync(StringReference const & packageFamilyName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Gaming::Preview::GamesEnumeration::GameListEntry>> operation;
	check(shim()->abi_FindAllAsyncPackageFamilyName(get(packageFamilyName), put(operation)));
	return operation;
}

template <typename T> long long impl_IGameListStatics<T>::GameAdded(Windows::Gaming::Preview::GamesEnumeration::IGameListChangedEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_GameAdded(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGameListStatics<T>::GameAdded(F handler) const
{
	return GameAdded(Windows::Gaming::Preview::GamesEnumeration::GameListChangedEventHandler(handler));
}

template <typename T> void impl_IGameListStatics<T>::GameAdded(long long const token) const
{
	check(shim()->remove_GameAdded(token));
}

template <typename T> long long impl_IGameListStatics<T>::GameRemoved(Windows::Gaming::Preview::GamesEnumeration::IGameListRemovedEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_GameRemoved(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGameListStatics<T>::GameRemoved(F handler) const
{
	return GameRemoved(Windows::Gaming::Preview::GamesEnumeration::GameListRemovedEventHandler(handler));
}

template <typename T> void impl_IGameListStatics<T>::GameRemoved(long long const token) const
{
	check(shim()->remove_GameRemoved(token));
}

template <typename T> long long impl_IGameListStatics<T>::GameUpdated(Windows::Gaming::Preview::GamesEnumeration::IGameListChangedEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_GameUpdated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGameListStatics<T>::GameUpdated(F handler) const
{
	return GameUpdated(Windows::Gaming::Preview::GamesEnumeration::GameListChangedEventHandler(handler));
}

template <typename T> void impl_IGameListStatics<T>::GameUpdated(long long const token) const
{
	check(shim()->remove_GameUpdated(token));
}

}}}}}

namespace winrt { namespace Windows { namespace Gaming { namespace UI {

template <typename T> long long impl_IGameBarStatics<T>::VisibilityChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_VisibilityChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGameBarStatics<T>::VisibilityChanged(F handler) const
{
	return VisibilityChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IGameBarStatics<T>::VisibilityChanged(long long const token) const
{
	check(shim()->remove_VisibilityChanged(token));
}

template <typename T> long long impl_IGameBarStatics<T>::IsInputRedirectedChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_IsInputRedirectedChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGameBarStatics<T>::IsInputRedirectedChanged(F handler) const
{
	return IsInputRedirectedChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IGameBarStatics<T>::IsInputRedirectedChanged(long long const token) const
{
	check(shim()->remove_IsInputRedirectedChanged(token));
}

template <typename T> bool impl_IGameBarStatics<T>::Visible() const
{
	bool value = {};
	check(shim()->get_Visible(put(value)));
	return value;
}

template <typename T> bool impl_IGameBarStatics<T>::IsInputRedirected() const
{
	bool value = {};
	check(shim()->get_IsInputRedirected(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Globalization {

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> impl_IJapanesePhoneticAnalyzerStatics<T>::GetWords(StringReference const & input) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> result;
	check(shim()->abi_GetWords(get(input), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> impl_IJapanesePhoneticAnalyzerStatics<T>::GetWords(StringReference const & input, bool const monoRuby) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> result;
	check(shim()->abi_GetWordsWithMonoRubyOption(get(input), monoRuby, put(result)));
	return result;
}

template <typename T> String impl_IJapanesePhoneme<T>::DisplayText() const
{
	String value;
	check(shim()->get_DisplayText(put(value)));
	return value;
}

template <typename T> String impl_IJapanesePhoneme<T>::YomiText() const
{
	String value;
	check(shim()->get_YomiText(put(value)));
	return value;
}

template <typename T> bool impl_IJapanesePhoneme<T>::IsPhraseStart() const
{
	bool value = {};
	check(shim()->get_IsPhraseStart(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Gregorian() const
{
	String value;
	check(shim()->get_Gregorian(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Hebrew() const
{
	String value;
	check(shim()->get_Hebrew(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Hijri() const
{
	String value;
	check(shim()->get_Hijri(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Japanese() const
{
	String value;
	check(shim()->get_Japanese(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Julian() const
{
	String value;
	check(shim()->get_Julian(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Korean() const
{
	String value;
	check(shim()->get_Korean(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Taiwan() const
{
	String value;
	check(shim()->get_Taiwan(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::Thai() const
{
	String value;
	check(shim()->get_Thai(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics<T>::UmAlQura() const
{
	String value;
	check(shim()->get_UmAlQura(put(value)));
	return value;
}

template <typename T> String impl_ICalendarIdentifiersStatics2<T>::Persian() const
{
	String value;
	check(shim()->get_Persian(put(value)));
	return value;
}

template <typename T> String impl_IClockIdentifiersStatics<T>::TwelveHour() const
{
	String value;
	check(shim()->get_TwelveHour(put(value)));
	return value;
}

template <typename T> String impl_IClockIdentifiersStatics<T>::TwentyFourHour() const
{
	String value;
	check(shim()->get_TwentyFourHour(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Arab() const
{
	String value;
	check(shim()->get_Arab(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::ArabExt() const
{
	String value;
	check(shim()->get_ArabExt(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Bali() const
{
	String value;
	check(shim()->get_Bali(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Beng() const
{
	String value;
	check(shim()->get_Beng(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Cham() const
{
	String value;
	check(shim()->get_Cham(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Deva() const
{
	String value;
	check(shim()->get_Deva(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::FullWide() const
{
	String value;
	check(shim()->get_FullWide(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Gujr() const
{
	String value;
	check(shim()->get_Gujr(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Guru() const
{
	String value;
	check(shim()->get_Guru(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::HaniDec() const
{
	String value;
	check(shim()->get_HaniDec(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Java() const
{
	String value;
	check(shim()->get_Java(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Kali() const
{
	String value;
	check(shim()->get_Kali(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Khmr() const
{
	String value;
	check(shim()->get_Khmr(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Knda() const
{
	String value;
	check(shim()->get_Knda(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Lana() const
{
	String value;
	check(shim()->get_Lana(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::LanaTham() const
{
	String value;
	check(shim()->get_LanaTham(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Laoo() const
{
	String value;
	check(shim()->get_Laoo(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Latn() const
{
	String value;
	check(shim()->get_Latn(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Lepc() const
{
	String value;
	check(shim()->get_Lepc(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Limb() const
{
	String value;
	check(shim()->get_Limb(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Mlym() const
{
	String value;
	check(shim()->get_Mlym(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Mong() const
{
	String value;
	check(shim()->get_Mong(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Mtei() const
{
	String value;
	check(shim()->get_Mtei(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Mymr() const
{
	String value;
	check(shim()->get_Mymr(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::MymrShan() const
{
	String value;
	check(shim()->get_MymrShan(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Nkoo() const
{
	String value;
	check(shim()->get_Nkoo(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Olck() const
{
	String value;
	check(shim()->get_Olck(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Orya() const
{
	String value;
	check(shim()->get_Orya(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Saur() const
{
	String value;
	check(shim()->get_Saur(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Sund() const
{
	String value;
	check(shim()->get_Sund(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Talu() const
{
	String value;
	check(shim()->get_Talu(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::TamlDec() const
{
	String value;
	check(shim()->get_TamlDec(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Telu() const
{
	String value;
	check(shim()->get_Telu(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Thai() const
{
	String value;
	check(shim()->get_Thai(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Tibt() const
{
	String value;
	check(shim()->get_Tibt(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics<T>::Vaii() const
{
	String value;
	check(shim()->get_Vaii(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::Brah() const
{
	String value;
	check(shim()->get_Brah(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::Osma() const
{
	String value;
	check(shim()->get_Osma(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::MathBold() const
{
	String value;
	check(shim()->get_MathBold(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::MathDbl() const
{
	String value;
	check(shim()->get_MathDbl(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::MathSans() const
{
	String value;
	check(shim()->get_MathSans(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::MathSanb() const
{
	String value;
	check(shim()->get_MathSanb(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::MathMono() const
{
	String value;
	check(shim()->get_MathMono(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::ZmthBold() const
{
	String value;
	check(shim()->get_ZmthBold(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::ZmthDbl() const
{
	String value;
	check(shim()->get_ZmthDbl(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::ZmthSans() const
{
	String value;
	check(shim()->get_ZmthSans(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::ZmthSanb() const
{
	String value;
	check(shim()->get_ZmthSanb(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemIdentifiersStatics2<T>::ZmthMono() const
{
	String value;
	check(shim()->get_ZmthMono(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AED() const
{
	String value;
	check(shim()->get_AED(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AFN() const
{
	String value;
	check(shim()->get_AFN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ALL() const
{
	String value;
	check(shim()->get_ALL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AMD() const
{
	String value;
	check(shim()->get_AMD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ANG() const
{
	String value;
	check(shim()->get_ANG(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AOA() const
{
	String value;
	check(shim()->get_AOA(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ARS() const
{
	String value;
	check(shim()->get_ARS(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AUD() const
{
	String value;
	check(shim()->get_AUD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AWG() const
{
	String value;
	check(shim()->get_AWG(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::AZN() const
{
	String value;
	check(shim()->get_AZN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BAM() const
{
	String value;
	check(shim()->get_BAM(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BBD() const
{
	String value;
	check(shim()->get_BBD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BDT() const
{
	String value;
	check(shim()->get_BDT(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BGN() const
{
	String value;
	check(shim()->get_BGN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BHD() const
{
	String value;
	check(shim()->get_BHD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BIF() const
{
	String value;
	check(shim()->get_BIF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BMD() const
{
	String value;
	check(shim()->get_BMD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BND() const
{
	String value;
	check(shim()->get_BND(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BOB() const
{
	String value;
	check(shim()->get_BOB(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BRL() const
{
	String value;
	check(shim()->get_BRL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BSD() const
{
	String value;
	check(shim()->get_BSD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BTN() const
{
	String value;
	check(shim()->get_BTN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BWP() const
{
	String value;
	check(shim()->get_BWP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BYR() const
{
	String value;
	check(shim()->get_BYR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::BZD() const
{
	String value;
	check(shim()->get_BZD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CAD() const
{
	String value;
	check(shim()->get_CAD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CDF() const
{
	String value;
	check(shim()->get_CDF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CHF() const
{
	String value;
	check(shim()->get_CHF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CLP() const
{
	String value;
	check(shim()->get_CLP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CNY() const
{
	String value;
	check(shim()->get_CNY(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::COP() const
{
	String value;
	check(shim()->get_COP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CRC() const
{
	String value;
	check(shim()->get_CRC(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CUP() const
{
	String value;
	check(shim()->get_CUP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CVE() const
{
	String value;
	check(shim()->get_CVE(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::CZK() const
{
	String value;
	check(shim()->get_CZK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::DJF() const
{
	String value;
	check(shim()->get_DJF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::DKK() const
{
	String value;
	check(shim()->get_DKK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::DOP() const
{
	String value;
	check(shim()->get_DOP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::DZD() const
{
	String value;
	check(shim()->get_DZD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::EGP() const
{
	String value;
	check(shim()->get_EGP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ERN() const
{
	String value;
	check(shim()->get_ERN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ETB() const
{
	String value;
	check(shim()->get_ETB(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::EUR() const
{
	String value;
	check(shim()->get_EUR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::FJD() const
{
	String value;
	check(shim()->get_FJD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::FKP() const
{
	String value;
	check(shim()->get_FKP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GBP() const
{
	String value;
	check(shim()->get_GBP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GEL() const
{
	String value;
	check(shim()->get_GEL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GHS() const
{
	String value;
	check(shim()->get_GHS(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GIP() const
{
	String value;
	check(shim()->get_GIP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GMD() const
{
	String value;
	check(shim()->get_GMD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GNF() const
{
	String value;
	check(shim()->get_GNF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GTQ() const
{
	String value;
	check(shim()->get_GTQ(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::GYD() const
{
	String value;
	check(shim()->get_GYD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::HKD() const
{
	String value;
	check(shim()->get_HKD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::HNL() const
{
	String value;
	check(shim()->get_HNL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::HRK() const
{
	String value;
	check(shim()->get_HRK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::HTG() const
{
	String value;
	check(shim()->get_HTG(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::HUF() const
{
	String value;
	check(shim()->get_HUF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::IDR() const
{
	String value;
	check(shim()->get_IDR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ILS() const
{
	String value;
	check(shim()->get_ILS(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::INR() const
{
	String value;
	check(shim()->get_INR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::IQD() const
{
	String value;
	check(shim()->get_IQD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::IRR() const
{
	String value;
	check(shim()->get_IRR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ISK() const
{
	String value;
	check(shim()->get_ISK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::JMD() const
{
	String value;
	check(shim()->get_JMD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::JOD() const
{
	String value;
	check(shim()->get_JOD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::JPY() const
{
	String value;
	check(shim()->get_JPY(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KES() const
{
	String value;
	check(shim()->get_KES(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KGS() const
{
	String value;
	check(shim()->get_KGS(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KHR() const
{
	String value;
	check(shim()->get_KHR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KMF() const
{
	String value;
	check(shim()->get_KMF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KPW() const
{
	String value;
	check(shim()->get_KPW(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KRW() const
{
	String value;
	check(shim()->get_KRW(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KWD() const
{
	String value;
	check(shim()->get_KWD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KYD() const
{
	String value;
	check(shim()->get_KYD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::KZT() const
{
	String value;
	check(shim()->get_KZT(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LAK() const
{
	String value;
	check(shim()->get_LAK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LBP() const
{
	String value;
	check(shim()->get_LBP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LKR() const
{
	String value;
	check(shim()->get_LKR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LRD() const
{
	String value;
	check(shim()->get_LRD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LSL() const
{
	String value;
	check(shim()->get_LSL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LTL() const
{
	String value;
	check(shim()->get_LTL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LVL() const
{
	String value;
	check(shim()->get_LVL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::LYD() const
{
	String value;
	check(shim()->get_LYD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MAD() const
{
	String value;
	check(shim()->get_MAD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MDL() const
{
	String value;
	check(shim()->get_MDL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MGA() const
{
	String value;
	check(shim()->get_MGA(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MKD() const
{
	String value;
	check(shim()->get_MKD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MMK() const
{
	String value;
	check(shim()->get_MMK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MNT() const
{
	String value;
	check(shim()->get_MNT(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MOP() const
{
	String value;
	check(shim()->get_MOP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MRO() const
{
	String value;
	check(shim()->get_MRO(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MUR() const
{
	String value;
	check(shim()->get_MUR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MVR() const
{
	String value;
	check(shim()->get_MVR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MWK() const
{
	String value;
	check(shim()->get_MWK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MXN() const
{
	String value;
	check(shim()->get_MXN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MYR() const
{
	String value;
	check(shim()->get_MYR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::MZN() const
{
	String value;
	check(shim()->get_MZN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NAD() const
{
	String value;
	check(shim()->get_NAD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NGN() const
{
	String value;
	check(shim()->get_NGN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NIO() const
{
	String value;
	check(shim()->get_NIO(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NOK() const
{
	String value;
	check(shim()->get_NOK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NPR() const
{
	String value;
	check(shim()->get_NPR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::NZD() const
{
	String value;
	check(shim()->get_NZD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::OMR() const
{
	String value;
	check(shim()->get_OMR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PAB() const
{
	String value;
	check(shim()->get_PAB(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PEN() const
{
	String value;
	check(shim()->get_PEN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PGK() const
{
	String value;
	check(shim()->get_PGK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PHP() const
{
	String value;
	check(shim()->get_PHP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PKR() const
{
	String value;
	check(shim()->get_PKR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PLN() const
{
	String value;
	check(shim()->get_PLN(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::PYG() const
{
	String value;
	check(shim()->get_PYG(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::QAR() const
{
	String value;
	check(shim()->get_QAR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::RON() const
{
	String value;
	check(shim()->get_RON(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::RSD() const
{
	String value;
	check(shim()->get_RSD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::RUB() const
{
	String value;
	check(shim()->get_RUB(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::RWF() const
{
	String value;
	check(shim()->get_RWF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SAR() const
{
	String value;
	check(shim()->get_SAR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SBD() const
{
	String value;
	check(shim()->get_SBD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SCR() const
{
	String value;
	check(shim()->get_SCR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SDG() const
{
	String value;
	check(shim()->get_SDG(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SEK() const
{
	String value;
	check(shim()->get_SEK(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SGD() const
{
	String value;
	check(shim()->get_SGD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SHP() const
{
	String value;
	check(shim()->get_SHP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SLL() const
{
	String value;
	check(shim()->get_SLL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SOS() const
{
	String value;
	check(shim()->get_SOS(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SRD() const
{
	String value;
	check(shim()->get_SRD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::STD() const
{
	String value;
	check(shim()->get_STD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SYP() const
{
	String value;
	check(shim()->get_SYP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::SZL() const
{
	String value;
	check(shim()->get_SZL(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::THB() const
{
	String value;
	check(shim()->get_THB(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TJS() const
{
	String value;
	check(shim()->get_TJS(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TMT() const
{
	String value;
	check(shim()->get_TMT(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TND() const
{
	String value;
	check(shim()->get_TND(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TOP() const
{
	String value;
	check(shim()->get_TOP(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TRY() const
{
	String value;
	check(shim()->get_TRY(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TTD() const
{
	String value;
	check(shim()->get_TTD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TWD() const
{
	String value;
	check(shim()->get_TWD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::TZS() const
{
	String value;
	check(shim()->get_TZS(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::UAH() const
{
	String value;
	check(shim()->get_UAH(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::UGX() const
{
	String value;
	check(shim()->get_UGX(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::USD() const
{
	String value;
	check(shim()->get_USD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::UYU() const
{
	String value;
	check(shim()->get_UYU(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::UZS() const
{
	String value;
	check(shim()->get_UZS(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::VEF() const
{
	String value;
	check(shim()->get_VEF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::VND() const
{
	String value;
	check(shim()->get_VND(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::VUV() const
{
	String value;
	check(shim()->get_VUV(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::WST() const
{
	String value;
	check(shim()->get_WST(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::XAF() const
{
	String value;
	check(shim()->get_XAF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::XCD() const
{
	String value;
	check(shim()->get_XCD(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::XOF() const
{
	String value;
	check(shim()->get_XOF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::XPF() const
{
	String value;
	check(shim()->get_XPF(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::XXX() const
{
	String value;
	check(shim()->get_XXX(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::YER() const
{
	String value;
	check(shim()->get_YER(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ZAR() const
{
	String value;
	check(shim()->get_ZAR(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ZMW() const
{
	String value;
	check(shim()->get_ZMW(put(value)));
	return value;
}

template <typename T> String impl_ICurrencyIdentifiersStatics<T>::ZWL() const
{
	String value;
	check(shim()->get_ZWL(put(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::Code() const
{
	String value;
	check(shim()->get_Code(put(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::CodeTwoLetter() const
{
	String value;
	check(shim()->get_CodeTwoLetter(put(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::CodeThreeLetter() const
{
	String value;
	check(shim()->get_CodeThreeLetter(put(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::CodeThreeDigit() const
{
	String value;
	check(shim()->get_CodeThreeDigit(put(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IGeographicRegion<T>::NativeName() const
{
	String value;
	check(shim()->get_NativeName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IGeographicRegion<T>::CurrenciesInUse() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_CurrenciesInUse(put(value)));
	return value;
}

template <typename T> Windows::Globalization::GeographicRegion impl_IGeographicRegionFactory<T>::CreateGeographicRegion(StringReference const & geographicRegionCode) const
{
	Windows::Globalization::GeographicRegion result = nullptr;
	check(shim()->abi_CreateGeographicRegion(get(geographicRegionCode), put(result)));
	return result;
}

template <typename T> bool impl_IGeographicRegionStatics<T>::IsSupported(StringReference const & geographicRegionCode) const
{
	bool result = {};
	check(shim()->abi_IsSupported(get(geographicRegionCode), put(result)));
	return result;
}

template <typename T> String impl_ILanguage<T>::LanguageTag() const
{
	String value;
	check(shim()->get_LanguageTag(put(value)));
	return value;
}

template <typename T> String impl_ILanguage<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_ILanguage<T>::NativeName() const
{
	String value;
	check(shim()->get_NativeName(put(value)));
	return value;
}

template <typename T> String impl_ILanguage<T>::Script() const
{
	String value;
	check(shim()->get_Script(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ILanguageExtensionSubtags<T>::GetExtensionSubtags(StringReference const & singleton) const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->abi_GetExtensionSubtags(get(singleton), put(value)));
	return value;
}

template <typename T> Windows::Globalization::Language impl_ILanguageFactory<T>::CreateLanguage(StringReference const & languageTag) const
{
	Windows::Globalization::Language result = nullptr;
	check(shim()->abi_CreateLanguage(get(languageTag), put(result)));
	return result;
}

template <typename T> bool impl_ILanguageStatics<T>::IsWellFormed(StringReference const & languageTag) const
{
	bool result = {};
	check(shim()->abi_IsWellFormed(get(languageTag), put(result)));
	return result;
}

template <typename T> String impl_ILanguageStatics<T>::CurrentInputMethodLanguageTag() const
{
	String value;
	check(shim()->get_CurrentInputMethodLanguageTag(put(value)));
	return value;
}

template <typename T> bool impl_ILanguageStatics2<T>::TrySetInputMethodLanguageTag(StringReference const & languageTag) const
{
	bool result = {};
	check(shim()->abi_TrySetInputMethodLanguageTag(get(languageTag), put(result)));
	return result;
}

template <typename T> Windows::Globalization::Calendar impl_ICalendar<T>::Clone() const
{
	Windows::Globalization::Calendar value = nullptr;
	check(shim()->abi_Clone(put(value)));
	return value;
}

template <typename T> void impl_ICalendar<T>::SetToMin() const
{
	check(shim()->abi_SetToMin());
}

template <typename T> void impl_ICalendar<T>::SetToMax() const
{
	check(shim()->abi_SetToMax());
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ICalendar<T>::Languages() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_Languages(put(value)));
	return value;
}

template <typename T> String impl_ICalendar<T>::NumeralSystem() const
{
	String value;
	check(shim()->get_NumeralSystem(put(value)));
	return value;
}

template <typename T> void impl_ICalendar<T>::NumeralSystem(StringReference const & value) const
{
	check(shim()->put_NumeralSystem(get(value)));
}

template <typename T> String impl_ICalendar<T>::GetCalendarSystem() const
{
	String value;
	check(shim()->abi_GetCalendarSystem(put(value)));
	return value;
}

template <typename T> void impl_ICalendar<T>::ChangeCalendarSystem(StringReference const & value) const
{
	check(shim()->abi_ChangeCalendarSystem(get(value)));
}

template <typename T> String impl_ICalendar<T>::GetClock() const
{
	String value;
	check(shim()->abi_GetClock(put(value)));
	return value;
}

template <typename T> void impl_ICalendar<T>::ChangeClock(StringReference const & value) const
{
	check(shim()->abi_ChangeClock(get(value)));
}

template <typename T> Windows::Foundation::DateTime impl_ICalendar<T>::GetDateTime() const
{
	Windows::Foundation::DateTime result = {};
	check(shim()->abi_GetDateTime(&result));
	return result;
}

template <typename T> void impl_ICalendar<T>::SetDateTime(Windows::Foundation::DateTime const & value) const
{
	check(shim()->abi_SetDateTime(value));
}

template <typename T> void impl_ICalendar<T>::SetToNow() const
{
	check(shim()->abi_SetToNow());
}

template <typename T> int impl_ICalendar<T>::FirstEra() const
{
	int value = {};
	check(shim()->get_FirstEra(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastEra() const
{
	int value = {};
	check(shim()->get_LastEra(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfEras() const
{
	int value = {};
	check(shim()->get_NumberOfEras(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Era() const
{
	int value = {};
	check(shim()->get_Era(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Era(int const value) const
{
	check(shim()->put_Era(value));
}

template <typename T> void impl_ICalendar<T>::AddEras(int const eras) const
{
	check(shim()->abi_AddEras(eras));
}

template <typename T> String impl_ICalendar<T>::EraAsString() const
{
	String result;
	check(shim()->abi_EraAsFullString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::EraAsString(int const idealLength) const
{
	String result;
	check(shim()->abi_EraAsString(idealLength, put(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::FirstYearInThisEra() const
{
	int value = {};
	check(shim()->get_FirstYearInThisEra(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastYearInThisEra() const
{
	int value = {};
	check(shim()->get_LastYearInThisEra(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfYearsInThisEra() const
{
	int value = {};
	check(shim()->get_NumberOfYearsInThisEra(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Year() const
{
	int value = {};
	check(shim()->get_Year(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Year(int const value) const
{
	check(shim()->put_Year(value));
}

template <typename T> void impl_ICalendar<T>::AddYears(int const years) const
{
	check(shim()->abi_AddYears(years));
}

template <typename T> String impl_ICalendar<T>::YearAsString() const
{
	String result;
	check(shim()->abi_YearAsString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::YearAsTruncatedString(int const remainingDigits) const
{
	String result;
	check(shim()->abi_YearAsTruncatedString(remainingDigits, put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::YearAsPaddedString(int const minDigits) const
{
	String result;
	check(shim()->abi_YearAsPaddedString(minDigits, put(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::FirstMonthInThisYear() const
{
	int value = {};
	check(shim()->get_FirstMonthInThisYear(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastMonthInThisYear() const
{
	int value = {};
	check(shim()->get_LastMonthInThisYear(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfMonthsInThisYear() const
{
	int value = {};
	check(shim()->get_NumberOfMonthsInThisYear(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Month() const
{
	int value = {};
	check(shim()->get_Month(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Month(int const value) const
{
	check(shim()->put_Month(value));
}

template <typename T> void impl_ICalendar<T>::AddMonths(int const months) const
{
	check(shim()->abi_AddMonths(months));
}

template <typename T> String impl_ICalendar<T>::MonthAsString() const
{
	String result;
	check(shim()->abi_MonthAsFullString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MonthAsString(int const idealLength) const
{
	String result;
	check(shim()->abi_MonthAsString(idealLength, put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MonthAsSoloString() const
{
	String result;
	check(shim()->abi_MonthAsFullSoloString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MonthAsSoloString(int const idealLength) const
{
	String result;
	check(shim()->abi_MonthAsSoloString(idealLength, put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MonthAsNumericString() const
{
	String result;
	check(shim()->abi_MonthAsNumericString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MonthAsPaddedNumericString(int const minDigits) const
{
	String result;
	check(shim()->abi_MonthAsPaddedNumericString(minDigits, put(result)));
	return result;
}

template <typename T> void impl_ICalendar<T>::AddWeeks(int const weeks) const
{
	check(shim()->abi_AddWeeks(weeks));
}

template <typename T> int impl_ICalendar<T>::FirstDayInThisMonth() const
{
	int value = {};
	check(shim()->get_FirstDayInThisMonth(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastDayInThisMonth() const
{
	int value = {};
	check(shim()->get_LastDayInThisMonth(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfDaysInThisMonth() const
{
	int value = {};
	check(shim()->get_NumberOfDaysInThisMonth(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Day() const
{
	int value = {};
	check(shim()->get_Day(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Day(int const value) const
{
	check(shim()->put_Day(value));
}

template <typename T> void impl_ICalendar<T>::AddDays(int const days) const
{
	check(shim()->abi_AddDays(days));
}

template <typename T> String impl_ICalendar<T>::DayAsString() const
{
	String result;
	check(shim()->abi_DayAsString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::DayAsPaddedString(int const minDigits) const
{
	String result;
	check(shim()->abi_DayAsPaddedString(minDigits, put(result)));
	return result;
}

template <typename T> Windows::Globalization::DayOfWeek impl_ICalendar<T>::DayOfWeek() const
{
	Windows::Globalization::DayOfWeek value = {};
	check(shim()->get_DayOfWeek(&value));
	return value;
}

template <typename T> String impl_ICalendar<T>::DayOfWeekAsString() const
{
	String result;
	check(shim()->abi_DayOfWeekAsFullString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::DayOfWeekAsString(int const idealLength) const
{
	String result;
	check(shim()->abi_DayOfWeekAsString(idealLength, put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::DayOfWeekAsSoloString() const
{
	String result;
	check(shim()->abi_DayOfWeekAsFullSoloString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::DayOfWeekAsSoloString(int const idealLength) const
{
	String result;
	check(shim()->abi_DayOfWeekAsSoloString(idealLength, put(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::FirstPeriodInThisDay() const
{
	int value = {};
	check(shim()->get_FirstPeriodInThisDay(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastPeriodInThisDay() const
{
	int value = {};
	check(shim()->get_LastPeriodInThisDay(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfPeriodsInThisDay() const
{
	int value = {};
	check(shim()->get_NumberOfPeriodsInThisDay(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Period() const
{
	int value = {};
	check(shim()->get_Period(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Period(int const value) const
{
	check(shim()->put_Period(value));
}

template <typename T> void impl_ICalendar<T>::AddPeriods(int const periods) const
{
	check(shim()->abi_AddPeriods(periods));
}

template <typename T> String impl_ICalendar<T>::PeriodAsString() const
{
	String result;
	check(shim()->abi_PeriodAsFullString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::PeriodAsString(int const idealLength) const
{
	String result;
	check(shim()->abi_PeriodAsString(idealLength, put(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::FirstHourInThisPeriod() const
{
	int value = {};
	check(shim()->get_FirstHourInThisPeriod(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastHourInThisPeriod() const
{
	int value = {};
	check(shim()->get_LastHourInThisPeriod(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfHoursInThisPeriod() const
{
	int value = {};
	check(shim()->get_NumberOfHoursInThisPeriod(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::Hour() const
{
	int value = {};
	check(shim()->get_Hour(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Hour(int const value) const
{
	check(shim()->put_Hour(value));
}

template <typename T> void impl_ICalendar<T>::AddHours(int const hours) const
{
	check(shim()->abi_AddHours(hours));
}

template <typename T> String impl_ICalendar<T>::HourAsString() const
{
	String result;
	check(shim()->abi_HourAsString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::HourAsPaddedString(int const minDigits) const
{
	String result;
	check(shim()->abi_HourAsPaddedString(minDigits, put(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::Minute() const
{
	int value = {};
	check(shim()->get_Minute(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Minute(int const value) const
{
	check(shim()->put_Minute(value));
}

template <typename T> void impl_ICalendar<T>::AddMinutes(int const minutes) const
{
	check(shim()->abi_AddMinutes(minutes));
}

template <typename T> String impl_ICalendar<T>::MinuteAsString() const
{
	String result;
	check(shim()->abi_MinuteAsString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::MinuteAsPaddedString(int const minDigits) const
{
	String result;
	check(shim()->abi_MinuteAsPaddedString(minDigits, put(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::Second() const
{
	int value = {};
	check(shim()->get_Second(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Second(int const value) const
{
	check(shim()->put_Second(value));
}

template <typename T> void impl_ICalendar<T>::AddSeconds(int const seconds) const
{
	check(shim()->abi_AddSeconds(seconds));
}

template <typename T> String impl_ICalendar<T>::SecondAsString() const
{
	String result;
	check(shim()->abi_SecondAsString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::SecondAsPaddedString(int const minDigits) const
{
	String result;
	check(shim()->abi_SecondAsPaddedString(minDigits, put(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::Nanosecond() const
{
	int value = {};
	check(shim()->get_Nanosecond(&value));
	return value;
}

template <typename T> void impl_ICalendar<T>::Nanosecond(int const value) const
{
	check(shim()->put_Nanosecond(value));
}

template <typename T> void impl_ICalendar<T>::AddNanoseconds(int const nanoseconds) const
{
	check(shim()->abi_AddNanoseconds(nanoseconds));
}

template <typename T> String impl_ICalendar<T>::NanosecondAsString() const
{
	String result;
	check(shim()->abi_NanosecondAsString(put(result)));
	return result;
}

template <typename T> String impl_ICalendar<T>::NanosecondAsPaddedString(int const minDigits) const
{
	String result;
	check(shim()->abi_NanosecondAsPaddedString(minDigits, put(result)));
	return result;
}

template <typename T> int impl_ICalendar<T>::Compare(Windows::Globalization::Calendar const & other) const
{
	int result = {};
	check(shim()->abi_Compare(get(other), &result));
	return result;
}

template <typename T> int impl_ICalendar<T>::CompareDateTime(Windows::Foundation::DateTime const & other) const
{
	int result = {};
	check(shim()->abi_CompareDateTime(other, &result));
	return result;
}

template <typename T> void impl_ICalendar<T>::CopyTo(Windows::Globalization::Calendar const & other) const
{
	check(shim()->abi_CopyTo(get(other)));
}

template <typename T> int impl_ICalendar<T>::FirstMinuteInThisHour() const
{
	int value = {};
	check(shim()->get_FirstMinuteInThisHour(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastMinuteInThisHour() const
{
	int value = {};
	check(shim()->get_LastMinuteInThisHour(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfMinutesInThisHour() const
{
	int value = {};
	check(shim()->get_NumberOfMinutesInThisHour(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::FirstSecondInThisMinute() const
{
	int value = {};
	check(shim()->get_FirstSecondInThisMinute(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::LastSecondInThisMinute() const
{
	int value = {};
	check(shim()->get_LastSecondInThisMinute(&value));
	return value;
}

template <typename T> int impl_ICalendar<T>::NumberOfSecondsInThisMinute() const
{
	int value = {};
	check(shim()->get_NumberOfSecondsInThisMinute(&value));
	return value;
}

template <typename T> String impl_ICalendar<T>::ResolvedLanguage() const
{
	String value;
	check(shim()->get_ResolvedLanguage(put(value)));
	return value;
}

template <typename T> bool impl_ICalendar<T>::IsDaylightSavingTime() const
{
	bool value = {};
	check(shim()->get_IsDaylightSavingTime(put(value)));
	return value;
}

template <typename T> Windows::Globalization::Calendar impl_ICalendarFactory2<T>::CreateCalendarWithTimeZone(Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & calendar, StringReference const & clock, StringReference const & timeZoneId) const
{
	Windows::Globalization::Calendar result = nullptr;
	check(shim()->abi_CreateCalendarWithTimeZone(get(languages), get(calendar), get(clock), get(timeZoneId), put(result)));
	return result;
}

template <typename T> String impl_ITimeZoneOnCalendar<T>::GetTimeZone() const
{
	String value;
	check(shim()->abi_GetTimeZone(put(value)));
	return value;
}

template <typename T> void impl_ITimeZoneOnCalendar<T>::ChangeTimeZone(StringReference const & timeZoneId) const
{
	check(shim()->abi_ChangeTimeZone(get(timeZoneId)));
}

template <typename T> String impl_ITimeZoneOnCalendar<T>::TimeZoneAsString() const
{
	String result;
	check(shim()->abi_TimeZoneAsFullString(put(result)));
	return result;
}

template <typename T> String impl_ITimeZoneOnCalendar<T>::TimeZoneAsString(int const idealLength) const
{
	String result;
	check(shim()->abi_TimeZoneAsString(idealLength, put(result)));
	return result;
}

template <typename T> Windows::Globalization::Calendar impl_ICalendarFactory<T>::CreateCalendarDefaultCalendarAndClock(Windows::Foundation::Collections::IIterable<String> const & languages) const
{
	Windows::Globalization::Calendar result = nullptr;
	check(shim()->abi_CreateCalendarDefaultCalendarAndClock(get(languages), put(result)));
	return result;
}

template <typename T> Windows::Globalization::Calendar impl_ICalendarFactory<T>::CreateCalendar(Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & calendar, StringReference const & clock) const
{
	Windows::Globalization::Calendar result = nullptr;
	check(shim()->abi_CreateCalendar(get(languages), get(calendar), get(clock), put(result)));
	return result;
}

template <typename T> String impl_IApplicationLanguagesStatics<T>::PrimaryLanguageOverride() const
{
	String value;
	check(shim()->get_PrimaryLanguageOverride(put(value)));
	return value;
}

template <typename T> void impl_IApplicationLanguagesStatics<T>::PrimaryLanguageOverride(StringReference const & value) const
{
	check(shim()->put_PrimaryLanguageOverride(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IApplicationLanguagesStatics<T>::Languages() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_Languages(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IApplicationLanguagesStatics<T>::ManifestLanguages() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_ManifestLanguages(put(value)));
	return value;
}

}}}

namespace winrt { namespace Windows { namespace Globalization { namespace Collation {

template <typename T> String impl_ICharacterGrouping<T>::First() const
{
	String value;
	check(shim()->get_First(put(value)));
	return value;
}

template <typename T> String impl_ICharacterGrouping<T>::Label() const
{
	String value;
	check(shim()->get_Label(put(value)));
	return value;
}

template <typename T> String impl_ICharacterGroupings<T>::Lookup(StringReference const & text) const
{
	String result;
	check(shim()->abi_Lookup(get(text), put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace Globalization { namespace DateTimeFormatting {

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IDateTimeFormatter<T>::Languages() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_Languages(put(value)));
	return value;
}

template <typename T> String impl_IDateTimeFormatter<T>::GeographicRegion() const
{
	String value;
	check(shim()->get_GeographicRegion(put(value)));
	return value;
}

template <typename T> String impl_IDateTimeFormatter<T>::Calendar() const
{
	String value;
	check(shim()->get_Calendar(put(value)));
	return value;
}

template <typename T> String impl_IDateTimeFormatter<T>::Clock() const
{
	String value;
	check(shim()->get_Clock(put(value)));
	return value;
}

template <typename T> String impl_IDateTimeFormatter<T>::NumeralSystem() const
{
	String value;
	check(shim()->get_NumeralSystem(put(value)));
	return value;
}

template <typename T> void impl_IDateTimeFormatter<T>::NumeralSystem(StringReference const & value) const
{
	check(shim()->put_NumeralSystem(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IDateTimeFormatter<T>::Patterns() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_Patterns(put(value)));
	return value;
}

template <typename T> String impl_IDateTimeFormatter<T>::Template() const
{
	String value;
	check(shim()->get_Template(put(value)));
	return value;
}

template <typename T> String impl_IDateTimeFormatter<T>::Format(Windows::Foundation::DateTime const & value) const
{
	String result;
	check(shim()->abi_Format(value, put(result)));
	return result;
}

template <typename T> Windows::Globalization::DateTimeFormatting::YearFormat impl_IDateTimeFormatter<T>::IncludeYear() const
{
	Windows::Globalization::DateTimeFormatting::YearFormat value = {};
	check(shim()->get_IncludeYear(&value));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::MonthFormat impl_IDateTimeFormatter<T>::IncludeMonth() const
{
	Windows::Globalization::DateTimeFormatting::MonthFormat value = {};
	check(shim()->get_IncludeMonth(&value));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DayOfWeekFormat impl_IDateTimeFormatter<T>::IncludeDayOfWeek() const
{
	Windows::Globalization::DateTimeFormatting::DayOfWeekFormat value = {};
	check(shim()->get_IncludeDayOfWeek(&value));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DayFormat impl_IDateTimeFormatter<T>::IncludeDay() const
{
	Windows::Globalization::DateTimeFormatting::DayFormat value = {};
	check(shim()->get_IncludeDay(&value));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::HourFormat impl_IDateTimeFormatter<T>::IncludeHour() const
{
	Windows::Globalization::DateTimeFormatting::HourFormat value = {};
	check(shim()->get_IncludeHour(&value));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::MinuteFormat impl_IDateTimeFormatter<T>::IncludeMinute() const
{
	Windows::Globalization::DateTimeFormatting::MinuteFormat value = {};
	check(shim()->get_IncludeMinute(&value));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::SecondFormat impl_IDateTimeFormatter<T>::IncludeSecond() const
{
	Windows::Globalization::DateTimeFormatting::SecondFormat value = {};
	check(shim()->get_IncludeSecond(&value));
	return value;
}

template <typename T> String impl_IDateTimeFormatter<T>::ResolvedLanguage() const
{
	String value;
	check(shim()->get_ResolvedLanguage(put(value)));
	return value;
}

template <typename T> String impl_IDateTimeFormatter<T>::ResolvedGeographicRegion() const
{
	String value;
	check(shim()->get_ResolvedGeographicRegion(put(value)));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatter(StringReference const & formatTemplate) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result = nullptr;
	check(shim()->abi_CreateDateTimeFormatter(get(formatTemplate), put(result)));
	return result;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatterLanguages(StringReference const & formatTemplate, Windows::Foundation::Collections::IIterable<String> const & languages) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result = nullptr;
	check(shim()->abi_CreateDateTimeFormatterLanguages(get(formatTemplate), get(languages), put(result)));
	return result;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatterContext(StringReference const & formatTemplate, Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & geographicRegion, StringReference const & calendar, StringReference const & clock) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result = nullptr;
	check(shim()->abi_CreateDateTimeFormatterContext(get(formatTemplate), get(languages), get(geographicRegion), get(calendar), get(clock), put(result)));
	return result;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatterDate(Windows::Globalization::DateTimeFormatting::YearFormat const yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat const monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat const dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat const dayOfWeekFormat) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result = nullptr;
	check(shim()->abi_CreateDateTimeFormatterDate(yearFormat, monthFormat, dayFormat, dayOfWeekFormat, put(result)));
	return result;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatterTime(Windows::Globalization::DateTimeFormatting::HourFormat const hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat const minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat const secondFormat) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result = nullptr;
	check(shim()->abi_CreateDateTimeFormatterTime(hourFormat, minuteFormat, secondFormat, put(result)));
	return result;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatterDateTimeLanguages(Windows::Globalization::DateTimeFormatting::YearFormat const yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat const monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat const dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat const dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat const hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat const minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat const secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result = nullptr;
	check(shim()->abi_CreateDateTimeFormatterDateTimeLanguages(yearFormat, monthFormat, dayFormat, dayOfWeekFormat, hourFormat, minuteFormat, secondFormat, get(languages), put(result)));
	return result;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterFactory<T>::CreateDateTimeFormatterDateTimeContext(Windows::Globalization::DateTimeFormatting::YearFormat const yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat const monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat const dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat const dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat const hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat const minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat const secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & geographicRegion, StringReference const & calendar, StringReference const & clock) const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter result = nullptr;
	check(shim()->abi_CreateDateTimeFormatterDateTimeContext(yearFormat, monthFormat, dayFormat, dayOfWeekFormat, hourFormat, minuteFormat, secondFormat, get(languages), get(geographicRegion), get(calendar), get(clock), put(result)));
	return result;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterStatics<T>::LongDate() const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter value = nullptr;
	check(shim()->get_LongDate(put(value)));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterStatics<T>::LongTime() const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter value = nullptr;
	check(shim()->get_LongTime(put(value)));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterStatics<T>::ShortDate() const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter value = nullptr;
	check(shim()->get_ShortDate(put(value)));
	return value;
}

template <typename T> Windows::Globalization::DateTimeFormatting::DateTimeFormatter impl_IDateTimeFormatterStatics<T>::ShortTime() const
{
	Windows::Globalization::DateTimeFormatting::DateTimeFormatter value = nullptr;
	check(shim()->get_ShortTime(put(value)));
	return value;
}

template <typename T> String impl_IDateTimeFormatter2<T>::Format(Windows::Foundation::DateTime const & datetime, StringReference const & timeZoneId) const
{
	String result;
	check(shim()->abi_FormatUsingTimeZone(datetime, get(timeZoneId), put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace Globalization { namespace Fonts {

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::UITextFont() const
{
	Windows::Globalization::Fonts::LanguageFont value = nullptr;
	check(shim()->get_UITextFont(put(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::UIHeadingFont() const
{
	Windows::Globalization::Fonts::LanguageFont value = nullptr;
	check(shim()->get_UIHeadingFont(put(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::UITitleFont() const
{
	Windows::Globalization::Fonts::LanguageFont value = nullptr;
	check(shim()->get_UITitleFont(put(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::UICaptionFont() const
{
	Windows::Globalization::Fonts::LanguageFont value = nullptr;
	check(shim()->get_UICaptionFont(put(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::UINotificationHeadingFont() const
{
	Windows::Globalization::Fonts::LanguageFont value = nullptr;
	check(shim()->get_UINotificationHeadingFont(put(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::TraditionalDocumentFont() const
{
	Windows::Globalization::Fonts::LanguageFont value = nullptr;
	check(shim()->get_TraditionalDocumentFont(put(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::ModernDocumentFont() const
{
	Windows::Globalization::Fonts::LanguageFont value = nullptr;
	check(shim()->get_ModernDocumentFont(put(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::DocumentHeadingFont() const
{
	Windows::Globalization::Fonts::LanguageFont value = nullptr;
	check(shim()->get_DocumentHeadingFont(put(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::FixedWidthTextFont() const
{
	Windows::Globalization::Fonts::LanguageFont value = nullptr;
	check(shim()->get_FixedWidthTextFont(put(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::DocumentAlternate1Font() const
{
	Windows::Globalization::Fonts::LanguageFont value = nullptr;
	check(shim()->get_DocumentAlternate1Font(put(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFont impl_ILanguageFontGroup<T>::DocumentAlternate2Font() const
{
	Windows::Globalization::Fonts::LanguageFont value = nullptr;
	check(shim()->get_DocumentAlternate2Font(put(value)));
	return value;
}

template <typename T> Windows::Globalization::Fonts::LanguageFontGroup impl_ILanguageFontGroupFactory<T>::CreateLanguageFontGroup(StringReference const & languageTag) const
{
	Windows::Globalization::Fonts::LanguageFontGroup recommendedFonts = nullptr;
	check(shim()->abi_CreateLanguageFontGroup(get(languageTag), put(recommendedFonts)));
	return recommendedFonts;
}

template <typename T> String impl_ILanguageFont<T>::FontFamily() const
{
	String value;
	check(shim()->get_FontFamily(put(value)));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_ILanguageFont<T>::FontWeight() const
{
	Windows::UI::Text::FontWeight weight = {};
	check(shim()->get_FontWeight(&weight));
	return weight;
}

template <typename T> Windows::UI::Text::FontStretch impl_ILanguageFont<T>::FontStretch() const
{
	Windows::UI::Text::FontStretch stretch = {};
	check(shim()->get_FontStretch(&stretch));
	return stretch;
}

template <typename T> Windows::UI::Text::FontStyle impl_ILanguageFont<T>::FontStyle() const
{
	Windows::UI::Text::FontStyle style = {};
	check(shim()->get_FontStyle(&style));
	return style;
}

template <typename T> double impl_ILanguageFont<T>::ScaleFactor() const
{
	double scale = {};
	check(shim()->get_ScaleFactor(&scale));
	return scale;
}

}}}}

namespace winrt { namespace Windows { namespace Globalization { namespace NumberFormatting {

template <typename T> int impl_INumberRounder<T>::RoundInt32(int const value) const
{
	int result = {};
	check(shim()->abi_RoundInt32(value, &result));
	return result;
}

template <typename T> unsigned impl_INumberRounder<T>::RoundUInt32(unsigned const value) const
{
	unsigned result = {};
	check(shim()->abi_RoundUInt32(value, &result));
	return result;
}

template <typename T> long long impl_INumberRounder<T>::RoundInt64(long long const value) const
{
	long long result = {};
	check(shim()->abi_RoundInt64(value, &result));
	return result;
}

template <typename T> unsigned long long impl_INumberRounder<T>::RoundUInt64(unsigned long long const value) const
{
	unsigned long long result = {};
	check(shim()->abi_RoundUInt64(value, &result));
	return result;
}

template <typename T> float impl_INumberRounder<T>::RoundSingle(float const value) const
{
	float result = {};
	check(shim()->abi_RoundSingle(value, &result));
	return result;
}

template <typename T> double impl_INumberRounder<T>::RoundDouble(double const value) const
{
	double result = {};
	check(shim()->abi_RoundDouble(value, &result));
	return result;
}

template <typename T> Windows::Globalization::NumberFormatting::RoundingAlgorithm impl_ISignificantDigitsNumberRounder<T>::RoundingAlgorithm() const
{
	Windows::Globalization::NumberFormatting::RoundingAlgorithm value = {};
	check(shim()->get_RoundingAlgorithm(&value));
	return value;
}

template <typename T> void impl_ISignificantDigitsNumberRounder<T>::RoundingAlgorithm(Windows::Globalization::NumberFormatting::RoundingAlgorithm const value) const
{
	check(shim()->put_RoundingAlgorithm(value));
}

template <typename T> unsigned impl_ISignificantDigitsNumberRounder<T>::SignificantDigits() const
{
	unsigned value = {};
	check(shim()->get_SignificantDigits(&value));
	return value;
}

template <typename T> void impl_ISignificantDigitsNumberRounder<T>::SignificantDigits(unsigned const value) const
{
	check(shim()->put_SignificantDigits(value));
}

template <typename T> Windows::Globalization::NumberFormatting::RoundingAlgorithm impl_IIncrementNumberRounder<T>::RoundingAlgorithm() const
{
	Windows::Globalization::NumberFormatting::RoundingAlgorithm value = {};
	check(shim()->get_RoundingAlgorithm(&value));
	return value;
}

template <typename T> void impl_IIncrementNumberRounder<T>::RoundingAlgorithm(Windows::Globalization::NumberFormatting::RoundingAlgorithm const value) const
{
	check(shim()->put_RoundingAlgorithm(value));
}

template <typename T> double impl_IIncrementNumberRounder<T>::Increment() const
{
	double value = {};
	check(shim()->get_Increment(&value));
	return value;
}

template <typename T> void impl_IIncrementNumberRounder<T>::Increment(double const value) const
{
	check(shim()->put_Increment(value));
}

template <typename T> String impl_INumberFormatter<T>::Format(long long const value) const
{
	String result;
	check(shim()->abi_FormatInt(value, put(result)));
	return result;
}

template <typename T> String impl_INumberFormatter<T>::Format(unsigned long long const value) const
{
	String result;
	check(shim()->abi_FormatUInt(value, put(result)));
	return result;
}

template <typename T> String impl_INumberFormatter<T>::Format(double const value) const
{
	String result;
	check(shim()->abi_FormatDouble(value, put(result)));
	return result;
}

template <typename T> String impl_INumberFormatter2<T>::FormatInt(long long const value) const
{
	String result;
	check(shim()->abi_FormatInt(value, put(result)));
	return result;
}

template <typename T> String impl_INumberFormatter2<T>::FormatUInt(unsigned long long const value) const
{
	String result;
	check(shim()->abi_FormatUInt(value, put(result)));
	return result;
}

template <typename T> String impl_INumberFormatter2<T>::FormatDouble(double const value) const
{
	String result;
	check(shim()->abi_FormatDouble(value, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IReference<long long> impl_INumberParser<T>::ParseInt(StringReference const & text) const
{
	Windows::Foundation::IReference<long long> result;
	check(shim()->abi_ParseInt(get(text), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_INumberParser<T>::ParseUInt(StringReference const & text) const
{
	Windows::Foundation::IReference<unsigned long long> result;
	check(shim()->abi_ParseUInt(get(text), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IReference<double> impl_INumberParser<T>::ParseDouble(StringReference const & text) const
{
	Windows::Foundation::IReference<double> result;
	check(shim()->abi_ParseDouble(get(text), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_INumberFormatterOptions<T>::Languages() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_Languages(put(value)));
	return value;
}

template <typename T> String impl_INumberFormatterOptions<T>::GeographicRegion() const
{
	String value;
	check(shim()->get_GeographicRegion(put(value)));
	return value;
}

template <typename T> int impl_INumberFormatterOptions<T>::IntegerDigits() const
{
	int value = {};
	check(shim()->get_IntegerDigits(&value));
	return value;
}

template <typename T> void impl_INumberFormatterOptions<T>::IntegerDigits(int const value) const
{
	check(shim()->put_IntegerDigits(value));
}

template <typename T> int impl_INumberFormatterOptions<T>::FractionDigits() const
{
	int value = {};
	check(shim()->get_FractionDigits(&value));
	return value;
}

template <typename T> void impl_INumberFormatterOptions<T>::FractionDigits(int const value) const
{
	check(shim()->put_FractionDigits(value));
}

template <typename T> bool impl_INumberFormatterOptions<T>::IsGrouped() const
{
	bool value = {};
	check(shim()->get_IsGrouped(put(value)));
	return value;
}

template <typename T> void impl_INumberFormatterOptions<T>::IsGrouped(bool const value) const
{
	check(shim()->put_IsGrouped(value));
}

template <typename T> bool impl_INumberFormatterOptions<T>::IsDecimalPointAlwaysDisplayed() const
{
	bool value = {};
	check(shim()->get_IsDecimalPointAlwaysDisplayed(put(value)));
	return value;
}

template <typename T> void impl_INumberFormatterOptions<T>::IsDecimalPointAlwaysDisplayed(bool const value) const
{
	check(shim()->put_IsDecimalPointAlwaysDisplayed(value));
}

template <typename T> String impl_INumberFormatterOptions<T>::NumeralSystem() const
{
	String value;
	check(shim()->get_NumeralSystem(put(value)));
	return value;
}

template <typename T> void impl_INumberFormatterOptions<T>::NumeralSystem(StringReference const & value) const
{
	check(shim()->put_NumeralSystem(get(value)));
}

template <typename T> String impl_INumberFormatterOptions<T>::ResolvedLanguage() const
{
	String value;
	check(shim()->get_ResolvedLanguage(put(value)));
	return value;
}

template <typename T> String impl_INumberFormatterOptions<T>::ResolvedGeographicRegion() const
{
	String value;
	check(shim()->get_ResolvedGeographicRegion(put(value)));
	return value;
}

template <typename T> int impl_ISignificantDigitsOption<T>::SignificantDigits() const
{
	int value = {};
	check(shim()->get_SignificantDigits(&value));
	return value;
}

template <typename T> void impl_ISignificantDigitsOption<T>::SignificantDigits(int const value) const
{
	check(shim()->put_SignificantDigits(value));
}

template <typename T> Windows::Globalization::NumberFormatting::INumberRounder impl_INumberRounderOption<T>::NumberRounder() const
{
	Windows::Globalization::NumberFormatting::INumberRounder value;
	check(shim()->get_NumberRounder(put(value)));
	return value;
}

template <typename T> void impl_INumberRounderOption<T>::NumberRounder(Windows::Globalization::NumberFormatting::INumberRounder const & value) const
{
	check(shim()->put_NumberRounder(get(value)));
}

template <typename T> bool impl_ISignedZeroOption<T>::IsZeroSigned() const
{
	bool value = {};
	check(shim()->get_IsZeroSigned(put(value)));
	return value;
}

template <typename T> void impl_ISignedZeroOption<T>::IsZeroSigned(bool const value) const
{
	check(shim()->put_IsZeroSigned(value));
}

template <typename T> Windows::Globalization::NumberFormatting::DecimalFormatter impl_IDecimalFormatterFactory<T>::CreateDecimalFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & geographicRegion) const
{
	Windows::Globalization::NumberFormatting::DecimalFormatter result = nullptr;
	check(shim()->abi_CreateDecimalFormatter(get(languages), get(geographicRegion), put(result)));
	return result;
}

template <typename T> Windows::Globalization::NumberFormatting::PercentFormatter impl_IPercentFormatterFactory<T>::CreatePercentFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & geographicRegion) const
{
	Windows::Globalization::NumberFormatting::PercentFormatter result = nullptr;
	check(shim()->abi_CreatePercentFormatter(get(languages), get(geographicRegion), put(result)));
	return result;
}

template <typename T> Windows::Globalization::NumberFormatting::PermilleFormatter impl_IPermilleFormatterFactory<T>::CreatePermilleFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & geographicRegion) const
{
	Windows::Globalization::NumberFormatting::PermilleFormatter result = nullptr;
	check(shim()->abi_CreatePermilleFormatter(get(languages), get(geographicRegion), put(result)));
	return result;
}

template <typename T> Windows::Globalization::NumberFormatting::CurrencyFormatter impl_ICurrencyFormatterFactory<T>::CreateCurrencyFormatterCode(StringReference const & currencyCode) const
{
	Windows::Globalization::NumberFormatting::CurrencyFormatter result = nullptr;
	check(shim()->abi_CreateCurrencyFormatterCode(get(currencyCode), put(result)));
	return result;
}

template <typename T> Windows::Globalization::NumberFormatting::CurrencyFormatter impl_ICurrencyFormatterFactory<T>::CreateCurrencyFormatterCodeContext(StringReference const & currencyCode, Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & geographicRegion) const
{
	Windows::Globalization::NumberFormatting::CurrencyFormatter result = nullptr;
	check(shim()->abi_CreateCurrencyFormatterCodeContext(get(currencyCode), get(languages), get(geographicRegion), put(result)));
	return result;
}

template <typename T> String impl_ICurrencyFormatter<T>::Currency() const
{
	String value;
	check(shim()->get_Currency(put(value)));
	return value;
}

template <typename T> void impl_ICurrencyFormatter<T>::Currency(StringReference const & value) const
{
	check(shim()->put_Currency(get(value)));
}

template <typename T> Windows::Globalization::NumberFormatting::CurrencyFormatterMode impl_ICurrencyFormatter2<T>::Mode() const
{
	Windows::Globalization::NumberFormatting::CurrencyFormatterMode value = {};
	check(shim()->get_Mode(&value));
	return value;
}

template <typename T> void impl_ICurrencyFormatter2<T>::Mode(Windows::Globalization::NumberFormatting::CurrencyFormatterMode const value) const
{
	check(shim()->put_Mode(value));
}

template <typename T> void impl_ICurrencyFormatter2<T>::ApplyRoundingForCurrency(Windows::Globalization::NumberFormatting::RoundingAlgorithm const roundingAlgorithm) const
{
	check(shim()->abi_ApplyRoundingForCurrency(roundingAlgorithm));
}

template <typename T> Windows::Globalization::NumberFormatting::NumeralSystemTranslator impl_INumeralSystemTranslatorFactory<T>::Create(Windows::Foundation::Collections::IIterable<String> const & languages) const
{
	Windows::Globalization::NumberFormatting::NumeralSystemTranslator result = nullptr;
	check(shim()->abi_Create(get(languages), put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_INumeralSystemTranslator<T>::Languages() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_Languages(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemTranslator<T>::ResolvedLanguage() const
{
	String value;
	check(shim()->get_ResolvedLanguage(put(value)));
	return value;
}

template <typename T> String impl_INumeralSystemTranslator<T>::NumeralSystem() const
{
	String value;
	check(shim()->get_NumeralSystem(put(value)));
	return value;
}

template <typename T> void impl_INumeralSystemTranslator<T>::NumeralSystem(StringReference const & value) const
{
	check(shim()->put_NumeralSystem(get(value)));
}

template <typename T> String impl_INumeralSystemTranslator<T>::TranslateNumerals(StringReference const & value) const
{
	String result;
	check(shim()->abi_TranslateNumerals(get(value), put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace DirectX { namespace Direct3D11 {

template <typename T> void impl_IDirect3DDevice<T>::Trim() const
{
	check(shim()->abi_Trim());
}

template <typename T> Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription impl_IDirect3DSurface<T>::Description() const
{
	Windows::Graphics::DirectX::Direct3D11::Direct3DSurfaceDescription value = {};
	check(shim()->get_Description(&value));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Display {

template <typename T> void impl_IDisplayPropertiesEventHandler<T>::Invoke(IInspectable const & sender) const
{
	check(shim()->abi_Invoke(get(sender)));
}

template <typename T> Windows::Graphics::Display::DisplayInformation impl_IDisplayInformationStatics<T>::GetForCurrentView() const
{
	Windows::Graphics::Display::DisplayInformation current = nullptr;
	check(shim()->abi_GetForCurrentView(put(current)));
	return current;
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IDisplayInformationStatics<T>::AutoRotationPreferences() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check(shim()->get_AutoRotationPreferences(&value));
	return value;
}

template <typename T> void impl_IDisplayInformationStatics<T>::AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check(shim()->put_AutoRotationPreferences(value));
}

template <typename T> long long impl_IDisplayInformationStatics<T>::DisplayContentsInvalidated(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_DisplayContentsInvalidated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayInformationStatics<T>::DisplayContentsInvalidated(F handler) const
{
	return DisplayContentsInvalidated(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

template <typename T> void impl_IDisplayInformationStatics<T>::DisplayContentsInvalidated(long long const token) const
{
	check(shim()->remove_DisplayContentsInvalidated(token));
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IDisplayInformation<T>::CurrentOrientation() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check(shim()->get_CurrentOrientation(&value));
	return value;
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IDisplayInformation<T>::NativeOrientation() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check(shim()->get_NativeOrientation(&value));
	return value;
}

template <typename T> long long impl_IDisplayInformation<T>::OrientationChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_OrientationChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayInformation<T>::OrientationChanged(F handler) const
{
	return OrientationChanged(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

template <typename T> void impl_IDisplayInformation<T>::OrientationChanged(long long const token) const
{
	check(shim()->remove_OrientationChanged(token));
}

template <typename T> Windows::Graphics::Display::ResolutionScale impl_IDisplayInformation<T>::ResolutionScale() const
{
	Windows::Graphics::Display::ResolutionScale value = {};
	check(shim()->get_ResolutionScale(&value));
	return value;
}

template <typename T> float impl_IDisplayInformation<T>::LogicalDpi() const
{
	float value = {};
	check(shim()->get_LogicalDpi(&value));
	return value;
}

template <typename T> float impl_IDisplayInformation<T>::RawDpiX() const
{
	float value = {};
	check(shim()->get_RawDpiX(&value));
	return value;
}

template <typename T> float impl_IDisplayInformation<T>::RawDpiY() const
{
	float value = {};
	check(shim()->get_RawDpiY(&value));
	return value;
}

template <typename T> long long impl_IDisplayInformation<T>::DpiChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_DpiChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayInformation<T>::DpiChanged(F handler) const
{
	return DpiChanged(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

template <typename T> void impl_IDisplayInformation<T>::DpiChanged(long long const token) const
{
	check(shim()->remove_DpiChanged(token));
}

template <typename T> bool impl_IDisplayInformation<T>::StereoEnabled() const
{
	bool value = {};
	check(shim()->get_StereoEnabled(put(value)));
	return value;
}

template <typename T> long long impl_IDisplayInformation<T>::StereoEnabledChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_StereoEnabledChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayInformation<T>::StereoEnabledChanged(F handler) const
{
	return StereoEnabledChanged(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

template <typename T> void impl_IDisplayInformation<T>::StereoEnabledChanged(long long const token) const
{
	check(shim()->remove_StereoEnabledChanged(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> impl_IDisplayInformation<T>::GetColorProfileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> asyncInfo;
	check(shim()->abi_GetColorProfileAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> long long impl_IDisplayInformation<T>::ColorProfileChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_ColorProfileChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayInformation<T>::ColorProfileChanged(F handler) const
{
	return ColorProfileChanged(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

template <typename T> void impl_IDisplayInformation<T>::ColorProfileChanged(long long const token) const
{
	check(shim()->remove_ColorProfileChanged(token));
}

template <typename T> double impl_IDisplayInformation2<T>::RawPixelsPerViewPixel() const
{
	double value = {};
	check(shim()->get_RawPixelsPerViewPixel(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IDisplayInformation3<T>::DiagonalSizeInInches() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_DiagonalSizeInInches(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IDisplayPropertiesStatics<T>::CurrentOrientation() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check(shim()->get_CurrentOrientation(&value));
	return value;
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IDisplayPropertiesStatics<T>::NativeOrientation() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check(shim()->get_NativeOrientation(&value));
	return value;
}

template <typename T> Windows::Graphics::Display::DisplayOrientations impl_IDisplayPropertiesStatics<T>::AutoRotationPreferences() const
{
	Windows::Graphics::Display::DisplayOrientations value = {};
	check(shim()->get_AutoRotationPreferences(&value));
	return value;
}

template <typename T> void impl_IDisplayPropertiesStatics<T>::AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations const value) const
{
	check(shim()->put_AutoRotationPreferences(value));
}

template <typename T> long long impl_IDisplayPropertiesStatics<T>::OrientationChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_OrientationChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayPropertiesStatics<T>::OrientationChanged(F handler) const
{
	return OrientationChanged(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

template <typename T> void impl_IDisplayPropertiesStatics<T>::OrientationChanged(long long const token) const
{
	check(shim()->remove_OrientationChanged(token));
}

template <typename T> Windows::Graphics::Display::ResolutionScale impl_IDisplayPropertiesStatics<T>::ResolutionScale() const
{
	Windows::Graphics::Display::ResolutionScale value = {};
	check(shim()->get_ResolutionScale(&value));
	return value;
}

template <typename T> float impl_IDisplayPropertiesStatics<T>::LogicalDpi() const
{
	float value = {};
	check(shim()->get_LogicalDpi(&value));
	return value;
}

template <typename T> long long impl_IDisplayPropertiesStatics<T>::LogicalDpiChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_LogicalDpiChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayPropertiesStatics<T>::LogicalDpiChanged(F handler) const
{
	return LogicalDpiChanged(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

template <typename T> void impl_IDisplayPropertiesStatics<T>::LogicalDpiChanged(long long const token) const
{
	check(shim()->remove_LogicalDpiChanged(token));
}

template <typename T> bool impl_IDisplayPropertiesStatics<T>::StereoEnabled() const
{
	bool value = {};
	check(shim()->get_StereoEnabled(put(value)));
	return value;
}

template <typename T> long long impl_IDisplayPropertiesStatics<T>::StereoEnabledChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_StereoEnabledChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayPropertiesStatics<T>::StereoEnabledChanged(F handler) const
{
	return StereoEnabledChanged(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

template <typename T> void impl_IDisplayPropertiesStatics<T>::StereoEnabledChanged(long long const token) const
{
	check(shim()->remove_StereoEnabledChanged(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> impl_IDisplayPropertiesStatics<T>::GetColorProfileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> asyncInfo;
	check(shim()->abi_GetColorProfileAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> long long impl_IDisplayPropertiesStatics<T>::ColorProfileChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_ColorProfileChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayPropertiesStatics<T>::ColorProfileChanged(F handler) const
{
	return ColorProfileChanged(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

template <typename T> void impl_IDisplayPropertiesStatics<T>::ColorProfileChanged(long long const token) const
{
	check(shim()->remove_ColorProfileChanged(token));
}

template <typename T> long long impl_IDisplayPropertiesStatics<T>::DisplayContentsInvalidated(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_DisplayContentsInvalidated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDisplayPropertiesStatics<T>::DisplayContentsInvalidated(F handler) const
{
	return DisplayContentsInvalidated(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

template <typename T> void impl_IDisplayPropertiesStatics<T>::DisplayContentsInvalidated(long long const token) const
{
	check(shim()->remove_DisplayContentsInvalidated(token));
}

}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Effects {

template <typename T> String impl_IGraphicsEffect<T>::Name() const
{
	String name;
	check(shim()->get_Name(put(name)));
	return name;
}

template <typename T> void impl_IGraphicsEffect<T>::Name(StringReference const & name) const
{
	check(shim()->put_Name(get(name)));
}

}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Holographic {

template <typename T> Windows::Foundation::Size impl_IHolographicCamera<T>::RenderTargetSize() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_RenderTargetSize(&value));
	return value;
}

template <typename T> double impl_IHolographicCamera<T>::ViewportScaleFactor() const
{
	double value = {};
	check(shim()->get_ViewportScaleFactor(&value));
	return value;
}

template <typename T> void impl_IHolographicCamera<T>::ViewportScaleFactor(double const value) const
{
	check(shim()->put_ViewportScaleFactor(value));
}

template <typename T> bool impl_IHolographicCamera<T>::IsStereo() const
{
	bool value = {};
	check(shim()->get_IsStereo(put(value)));
	return value;
}

template <typename T> unsigned impl_IHolographicCamera<T>::Id() const
{
	unsigned value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> void impl_IHolographicCamera<T>::SetNearPlaneDistance(double const value) const
{
	check(shim()->abi_SetNearPlaneDistance(value));
}

template <typename T> void impl_IHolographicCamera<T>::SetFarPlaneDistance(double const value) const
{
	check(shim()->abi_SetFarPlaneDistance(value));
}

template <typename T> Windows::Graphics::Holographic::HolographicCamera impl_IHolographicSpaceCameraAddedEventArgs<T>::Camera() const
{
	Windows::Graphics::Holographic::HolographicCamera value = nullptr;
	check(shim()->get_Camera(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Deferral impl_IHolographicSpaceCameraAddedEventArgs<T>::GetDeferral() const
{
	Windows::Foundation::Deferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Holographic::HolographicCamera impl_IHolographicSpaceCameraRemovedEventArgs<T>::Camera() const
{
	Windows::Graphics::Holographic::HolographicCamera value = nullptr;
	check(shim()->get_Camera(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Holographic::HolographicAdapterId impl_IHolographicSpace<T>::PrimaryAdapterId() const
{
	Windows::Graphics::Holographic::HolographicAdapterId value = {};
	check(shim()->get_PrimaryAdapterId(&value));
	return value;
}

template <typename T> void impl_IHolographicSpace<T>::SetDirect3D11Device(Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice const & value) const
{
	check(shim()->abi_SetDirect3D11Device(get(value)));
}

template <typename T> long long impl_IHolographicSpace<T>::CameraAdded(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Holographic::HolographicSpace, Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_CameraAdded(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IHolographicSpace<T>::CameraAdded(F handler) const
{
	return CameraAdded(Windows::Foundation::TypedEventHandler<Windows::Graphics::Holographic::HolographicSpace, Windows::Graphics::Holographic::HolographicSpaceCameraAddedEventArgs>(handler));
}

template <typename T> void impl_IHolographicSpace<T>::CameraAdded(long long const cookie) const
{
	check(shim()->remove_CameraAdded(cookie));
}

template <typename T> long long impl_IHolographicSpace<T>::CameraRemoved(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Holographic::HolographicSpace, Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_CameraRemoved(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IHolographicSpace<T>::CameraRemoved(F handler) const
{
	return CameraRemoved(Windows::Foundation::TypedEventHandler<Windows::Graphics::Holographic::HolographicSpace, Windows::Graphics::Holographic::HolographicSpaceCameraRemovedEventArgs>(handler));
}

template <typename T> void impl_IHolographicSpace<T>::CameraRemoved(long long const cookie) const
{
	check(shim()->remove_CameraRemoved(cookie));
}

template <typename T> Windows::Graphics::Holographic::HolographicFrame impl_IHolographicSpace<T>::CreateNextFrame() const
{
	Windows::Graphics::Holographic::HolographicFrame value = nullptr;
	check(shim()->abi_CreateNextFrame(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Holographic::HolographicSpace impl_IHolographicSpaceStatics<T>::CreateForCoreWindow(Windows::UI::Core::CoreWindow const & window) const
{
	Windows::Graphics::Holographic::HolographicSpace value = nullptr;
	check(shim()->abi_CreateForCoreWindow(get(window), put(value)));
	return value;
}

template <typename T> Windows::Graphics::Holographic::HolographicCamera impl_IHolographicCameraPose<T>::HolographicCamera() const
{
	Windows::Graphics::Holographic::HolographicCamera value = nullptr;
	check(shim()->get_HolographicCamera(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IHolographicCameraPose<T>::Viewport() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_Viewport(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Graphics::Holographic::HolographicStereoTransform> impl_IHolographicCameraPose<T>::TryGetViewTransform(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::Foundation::IReference<winrt::Windows::Graphics::Holographic::HolographicStereoTransform> value;
	check(shim()->abi_TryGetViewTransform(get(coordinateSystem), put(value)));
	return value;
}

template <typename T> Windows::Graphics::Holographic::HolographicStereoTransform impl_IHolographicCameraPose<T>::ProjectionTransform() const
{
	Windows::Graphics::Holographic::HolographicStereoTransform value = {};
	check(shim()->get_ProjectionTransform(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Perception::Spatial::SpatialBoundingFrustum> impl_IHolographicCameraPose<T>::TryGetCullingFrustum(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::Foundation::IReference<winrt::Windows::Perception::Spatial::SpatialBoundingFrustum> value;
	check(shim()->abi_TryGetCullingFrustum(get(coordinateSystem), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Perception::Spatial::SpatialBoundingFrustum> impl_IHolographicCameraPose<T>::TryGetVisibleFrustum(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::Foundation::IReference<winrt::Windows::Perception::Spatial::SpatialBoundingFrustum> value;
	check(shim()->abi_TryGetVisibleFrustum(get(coordinateSystem), put(value)));
	return value;
}

template <typename T> double impl_IHolographicCameraPose<T>::NearPlaneDistance() const
{
	double value = {};
	check(shim()->get_NearPlaneDistance(&value));
	return value;
}

template <typename T> double impl_IHolographicCameraPose<T>::FarPlaneDistance() const
{
	double value = {};
	check(shim()->get_FarPlaneDistance(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Graphics::Holographic::HolographicCameraPose> impl_IHolographicFramePrediction<T>::CameraPoses() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Graphics::Holographic::HolographicCameraPose> value;
	check(shim()->get_CameraPoses(put(value)));
	return value;
}

template <typename T> Windows::Perception::PerceptionTimestamp impl_IHolographicFramePrediction<T>::Timestamp() const
{
	Windows::Perception::PerceptionTimestamp value = nullptr;
	check(shim()->get_Timestamp(put(value)));
	return value;
}

template <typename T> void impl_IHolographicCameraRenderingParameters<T>::SetFocusPoint(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Foundation::Numerics::Vector3 const & position) const
{
	check(shim()->abi_SetFocusPoint(get(coordinateSystem), position));
}

template <typename T> void impl_IHolographicCameraRenderingParameters<T>::SetFocusPoint(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Foundation::Numerics::Vector3 const & position, Windows::Foundation::Numerics::Vector3 const & normal) const
{
	check(shim()->abi_SetFocusPointWithNormal(get(coordinateSystem), position, normal));
}

template <typename T> void impl_IHolographicCameraRenderingParameters<T>::SetFocusPoint(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Foundation::Numerics::Vector3 const & position, Windows::Foundation::Numerics::Vector3 const & normal, Windows::Foundation::Numerics::Vector3 const & linearVelocity) const
{
	check(shim()->abi_SetFocusPointWithNormalLinearVelocity(get(coordinateSystem), position, normal, linearVelocity));
}

template <typename T> Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice impl_IHolographicCameraRenderingParameters<T>::Direct3D11Device() const
{
	Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice value;
	check(shim()->get_Direct3D11Device(put(value)));
	return value;
}

template <typename T> Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface impl_IHolographicCameraRenderingParameters<T>::Direct3D11BackBuffer() const
{
	Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface value;
	check(shim()->get_Direct3D11BackBuffer(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Graphics::Holographic::HolographicCamera> impl_IHolographicFrame<T>::AddedCameras() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Graphics::Holographic::HolographicCamera> value;
	check(shim()->get_AddedCameras(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Graphics::Holographic::HolographicCamera> impl_IHolographicFrame<T>::RemovedCameras() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Graphics::Holographic::HolographicCamera> value;
	check(shim()->get_RemovedCameras(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Holographic::HolographicCameraRenderingParameters impl_IHolographicFrame<T>::GetRenderingParameters(Windows::Graphics::Holographic::HolographicCameraPose const & cameraPose) const
{
	Windows::Graphics::Holographic::HolographicCameraRenderingParameters value = nullptr;
	check(shim()->abi_GetRenderingParameters(get(cameraPose), put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IHolographicFrame<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Duration(&value));
	return value;
}

template <typename T> Windows::Graphics::Holographic::HolographicFramePrediction impl_IHolographicFrame<T>::CurrentPrediction() const
{
	Windows::Graphics::Holographic::HolographicFramePrediction value = nullptr;
	check(shim()->get_CurrentPrediction(put(value)));
	return value;
}

template <typename T> void impl_IHolographicFrame<T>::UpdateCurrentPrediction() const
{
	check(shim()->abi_UpdateCurrentPrediction());
}

template <typename T> Windows::Graphics::Holographic::HolographicFramePresentResult impl_IHolographicFrame<T>::PresentUsingCurrentPrediction() const
{
	Windows::Graphics::Holographic::HolographicFramePresentResult result = {};
	check(shim()->abi_PresentUsingCurrentPrediction(&result));
	return result;
}

template <typename T> Windows::Graphics::Holographic::HolographicFramePresentResult impl_IHolographicFrame<T>::PresentUsingCurrentPrediction(Windows::Graphics::Holographic::HolographicFramePresentWaitBehavior const waitBehavior) const
{
	Windows::Graphics::Holographic::HolographicFramePresentResult result = {};
	check(shim()->abi_PresentUsingCurrentPredictionWithBehavior(waitBehavior, &result));
	return result;
}

template <typename T> void impl_IHolographicFrame<T>::WaitForFrameToFinish() const
{
	check(shim()->abi_WaitForFrameToFinish());
}

}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Imaging {

template <typename T> unsigned impl_IBitmapTransform<T>::ScaledWidth() const
{
	unsigned value = {};
	check(shim()->get_ScaledWidth(&value));
	return value;
}

template <typename T> void impl_IBitmapTransform<T>::ScaledWidth(unsigned const value) const
{
	check(shim()->put_ScaledWidth(value));
}

template <typename T> unsigned impl_IBitmapTransform<T>::ScaledHeight() const
{
	unsigned value = {};
	check(shim()->get_ScaledHeight(&value));
	return value;
}

template <typename T> void impl_IBitmapTransform<T>::ScaledHeight(unsigned const value) const
{
	check(shim()->put_ScaledHeight(value));
}

template <typename T> Windows::Graphics::Imaging::BitmapInterpolationMode impl_IBitmapTransform<T>::InterpolationMode() const
{
	Windows::Graphics::Imaging::BitmapInterpolationMode value = {};
	check(shim()->get_InterpolationMode(&value));
	return value;
}

template <typename T> void impl_IBitmapTransform<T>::InterpolationMode(Windows::Graphics::Imaging::BitmapInterpolationMode const value) const
{
	check(shim()->put_InterpolationMode(value));
}

template <typename T> Windows::Graphics::Imaging::BitmapFlip impl_IBitmapTransform<T>::Flip() const
{
	Windows::Graphics::Imaging::BitmapFlip value = {};
	check(shim()->get_Flip(&value));
	return value;
}

template <typename T> void impl_IBitmapTransform<T>::Flip(Windows::Graphics::Imaging::BitmapFlip const value) const
{
	check(shim()->put_Flip(value));
}

template <typename T> Windows::Graphics::Imaging::BitmapRotation impl_IBitmapTransform<T>::Rotation() const
{
	Windows::Graphics::Imaging::BitmapRotation value = {};
	check(shim()->get_Rotation(&value));
	return value;
}

template <typename T> void impl_IBitmapTransform<T>::Rotation(Windows::Graphics::Imaging::BitmapRotation const value) const
{
	check(shim()->put_Rotation(value));
}

template <typename T> Windows::Graphics::Imaging::BitmapBounds impl_IBitmapTransform<T>::Bounds() const
{
	Windows::Graphics::Imaging::BitmapBounds value = {};
	check(shim()->get_Bounds(&value));
	return value;
}

template <typename T> void impl_IBitmapTransform<T>::Bounds(Windows::Graphics::Imaging::BitmapBounds const & value) const
{
	check(shim()->put_Bounds(value));
}

template <typename T> IInspectable impl_IBitmapTypedValue<T>::Value() const
{
	IInspectable value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> Windows::Foundation::PropertyType impl_IBitmapTypedValue<T>::Type() const
{
	Windows::Foundation::PropertyType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapTypedValue impl_IBitmapTypedValueFactory<T>::Create(IInspectable const & value, Windows::Foundation::PropertyType const type) const
{
	Windows::Graphics::Imaging::BitmapTypedValue bitmapTypedValue = nullptr;
	check(shim()->abi_Create(get(value), type, put(bitmapTypedValue)));
	return bitmapTypedValue;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapPropertySet> impl_IBitmapPropertiesView<T>::GetPropertiesAsync(Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapPropertySet> asyncInfo;
	check(shim()->abi_GetPropertiesAsync(get(propertiesToRetrieve), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IBitmapProperties<T>::SetPropertiesAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Graphics::Imaging::BitmapTypedValue>> const & propertiesToSet) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetPropertiesAsync(get(propertiesToSet), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::ImageStream> impl_IBitmapFrame<T>::GetThumbnailAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::ImageStream> asyncInfo;
	check(shim()->abi_GetThumbnailAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Graphics::Imaging::BitmapPropertiesView impl_IBitmapFrame<T>::BitmapProperties() const
{
	Windows::Graphics::Imaging::BitmapPropertiesView value = nullptr;
	check(shim()->get_BitmapProperties(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapPixelFormat impl_IBitmapFrame<T>::BitmapPixelFormat() const
{
	Windows::Graphics::Imaging::BitmapPixelFormat value = {};
	check(shim()->get_BitmapPixelFormat(&value));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapAlphaMode impl_IBitmapFrame<T>::BitmapAlphaMode() const
{
	Windows::Graphics::Imaging::BitmapAlphaMode value = {};
	check(shim()->get_BitmapAlphaMode(&value));
	return value;
}

template <typename T> double impl_IBitmapFrame<T>::DpiX() const
{
	double value = {};
	check(shim()->get_DpiX(&value));
	return value;
}

template <typename T> double impl_IBitmapFrame<T>::DpiY() const
{
	double value = {};
	check(shim()->get_DpiY(&value));
	return value;
}

template <typename T> unsigned impl_IBitmapFrame<T>::PixelWidth() const
{
	unsigned value = {};
	check(shim()->get_PixelWidth(&value));
	return value;
}

template <typename T> unsigned impl_IBitmapFrame<T>::PixelHeight() const
{
	unsigned value = {};
	check(shim()->get_PixelHeight(&value));
	return value;
}

template <typename T> unsigned impl_IBitmapFrame<T>::OrientedPixelWidth() const
{
	unsigned value = {};
	check(shim()->get_OrientedPixelWidth(&value));
	return value;
}

template <typename T> unsigned impl_IBitmapFrame<T>::OrientedPixelHeight() const
{
	unsigned value = {};
	check(shim()->get_OrientedPixelHeight(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::PixelDataProvider> impl_IBitmapFrame<T>::GetPixelDataAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::PixelDataProvider> asyncInfo;
	check(shim()->abi_GetPixelDataAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::PixelDataProvider> impl_IBitmapFrame<T>::GetPixelDataAsync(Windows::Graphics::Imaging::BitmapPixelFormat const pixelFormat, Windows::Graphics::Imaging::BitmapAlphaMode const alphaMode, Windows::Graphics::Imaging::BitmapTransform const & transform, Windows::Graphics::Imaging::ExifOrientationMode const exifOrientationMode, Windows::Graphics::Imaging::ColorManagementMode const colorManagementMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::PixelDataProvider> asyncInfo;
	check(shim()->abi_GetPixelDataTransformedAsync(pixelFormat, alphaMode, get(transform), exifOrientationMode, colorManagementMode, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::SoftwareBitmap> impl_IBitmapFrameWithSoftwareBitmap<T>::GetSoftwareBitmapAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::SoftwareBitmap> value;
	check(shim()->abi_GetSoftwareBitmapAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::SoftwareBitmap> impl_IBitmapFrameWithSoftwareBitmap<T>::GetSoftwareBitmapAsync(Windows::Graphics::Imaging::BitmapPixelFormat const pixelFormat, Windows::Graphics::Imaging::BitmapAlphaMode const alphaMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::SoftwareBitmap> value;
	check(shim()->abi_GetSoftwareBitmapConvertedAsync(pixelFormat, alphaMode, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::SoftwareBitmap> impl_IBitmapFrameWithSoftwareBitmap<T>::GetSoftwareBitmapAsync(Windows::Graphics::Imaging::BitmapPixelFormat const pixelFormat, Windows::Graphics::Imaging::BitmapAlphaMode const alphaMode, Windows::Graphics::Imaging::BitmapTransform const & transform, Windows::Graphics::Imaging::ExifOrientationMode const exifOrientationMode, Windows::Graphics::Imaging::ColorManagementMode const colorManagementMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::SoftwareBitmap> value;
	check(shim()->abi_GetSoftwareBitmapTransformedAsync(pixelFormat, alphaMode, get(transform), exifOrientationMode, colorManagementMode, put(value)));
	return value;
}

template <typename T> GUID impl_IBitmapCodecInformation<T>::CodecId() const
{
	GUID value = {};
	check(shim()->get_CodecId(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IBitmapCodecInformation<T>::FileExtensions() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_FileExtensions(put(value)));
	return value;
}

template <typename T> String impl_IBitmapCodecInformation<T>::FriendlyName() const
{
	String value;
	check(shim()->get_FriendlyName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IBitmapCodecInformation<T>::MimeTypes() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_MimeTypes(put(value)));
	return value;
}

template <typename T> GUID impl_IBitmapDecoderStatics<T>::BmpDecoderId() const
{
	GUID value = {};
	check(shim()->get_BmpDecoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapDecoderStatics<T>::JpegDecoderId() const
{
	GUID value = {};
	check(shim()->get_JpegDecoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapDecoderStatics<T>::PngDecoderId() const
{
	GUID value = {};
	check(shim()->get_PngDecoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapDecoderStatics<T>::TiffDecoderId() const
{
	GUID value = {};
	check(shim()->get_TiffDecoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapDecoderStatics<T>::GifDecoderId() const
{
	GUID value = {};
	check(shim()->get_GifDecoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapDecoderStatics<T>::JpegXRDecoderId() const
{
	GUID value = {};
	check(shim()->get_JpegXRDecoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapDecoderStatics<T>::IcoDecoderId() const
{
	GUID value = {};
	check(shim()->get_IcoDecoderId(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> impl_IBitmapDecoderStatics<T>::GetDecoderInformationEnumerator() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> decoderInformationEnumerator;
	check(shim()->abi_GetDecoderInformationEnumerator(put(decoderInformationEnumerator)));
	return decoderInformationEnumerator;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> impl_IBitmapDecoderStatics<T>::CreateAsync(Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> asyncInfo;
	check(shim()->abi_CreateAsync(get(stream), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> impl_IBitmapDecoderStatics<T>::CreateAsync(GUID const decoderId, Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> asyncInfo;
	check(shim()->abi_CreateWithIdAsync(decoderId, get(stream), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Graphics::Imaging::BitmapPropertiesView impl_IBitmapDecoder<T>::BitmapContainerProperties() const
{
	Windows::Graphics::Imaging::BitmapPropertiesView value = nullptr;
	check(shim()->get_BitmapContainerProperties(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapCodecInformation impl_IBitmapDecoder<T>::DecoderInformation() const
{
	Windows::Graphics::Imaging::BitmapCodecInformation value = nullptr;
	check(shim()->get_DecoderInformation(put(value)));
	return value;
}

template <typename T> unsigned impl_IBitmapDecoder<T>::FrameCount() const
{
	unsigned value = {};
	check(shim()->get_FrameCount(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::ImageStream> impl_IBitmapDecoder<T>::GetPreviewAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::ImageStream> asyncInfo;
	check(shim()->abi_GetPreviewAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapFrame> impl_IBitmapDecoder<T>::GetFrameAsync(unsigned const frameIndex) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapFrame> asyncInfo;
	check(shim()->abi_GetFrameAsync(frameIndex, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> GUID impl_IBitmapEncoderStatics<T>::BmpEncoderId() const
{
	GUID value = {};
	check(shim()->get_BmpEncoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapEncoderStatics<T>::JpegEncoderId() const
{
	GUID value = {};
	check(shim()->get_JpegEncoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapEncoderStatics<T>::PngEncoderId() const
{
	GUID value = {};
	check(shim()->get_PngEncoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapEncoderStatics<T>::TiffEncoderId() const
{
	GUID value = {};
	check(shim()->get_TiffEncoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapEncoderStatics<T>::GifEncoderId() const
{
	GUID value = {};
	check(shim()->get_GifEncoderId(&value));
	return value;
}

template <typename T> GUID impl_IBitmapEncoderStatics<T>::JpegXREncoderId() const
{
	GUID value = {};
	check(shim()->get_JpegXREncoderId(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> impl_IBitmapEncoderStatics<T>::GetEncoderInformationEnumerator() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> encoderInformationEnumerator;
	check(shim()->abi_GetEncoderInformationEnumerator(put(encoderInformationEnumerator)));
	return encoderInformationEnumerator;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> impl_IBitmapEncoderStatics<T>::CreateAsync(GUID const encoderId, Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> asyncInfo;
	check(shim()->abi_CreateAsync(encoderId, get(stream), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> impl_IBitmapEncoderStatics<T>::CreateAsync(GUID const encoderId, Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Graphics::Imaging::BitmapTypedValue>> const & encodingOptions) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> asyncInfo;
	check(shim()->abi_CreateWithEncodingOptionsAsync(encoderId, get(stream), get(encodingOptions), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> impl_IBitmapEncoderStatics<T>::CreateForTranscodingAsync(Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Graphics::Imaging::BitmapDecoder const & bitmapDecoder) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> asyncInfo;
	check(shim()->abi_CreateForTranscodingAsync(get(stream), get(bitmapDecoder), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> impl_IBitmapEncoderStatics<T>::CreateForInPlacePropertyEncodingAsync(Windows::Graphics::Imaging::BitmapDecoder const & bitmapDecoder) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> asyncInfo;
	check(shim()->abi_CreateForInPlacePropertyEncodingAsync(get(bitmapDecoder), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Graphics::Imaging::BitmapCodecInformation impl_IBitmapEncoder<T>::EncoderInformation() const
{
	Windows::Graphics::Imaging::BitmapCodecInformation value = nullptr;
	check(shim()->get_EncoderInformation(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapProperties impl_IBitmapEncoder<T>::BitmapProperties() const
{
	Windows::Graphics::Imaging::BitmapProperties value = nullptr;
	check(shim()->get_BitmapProperties(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapProperties impl_IBitmapEncoder<T>::BitmapContainerProperties() const
{
	Windows::Graphics::Imaging::BitmapProperties value = nullptr;
	check(shim()->get_BitmapContainerProperties(put(value)));
	return value;
}

template <typename T> bool impl_IBitmapEncoder<T>::IsThumbnailGenerated() const
{
	bool value = {};
	check(shim()->get_IsThumbnailGenerated(put(value)));
	return value;
}

template <typename T> void impl_IBitmapEncoder<T>::IsThumbnailGenerated(bool const value) const
{
	check(shim()->put_IsThumbnailGenerated(value));
}

template <typename T> unsigned impl_IBitmapEncoder<T>::GeneratedThumbnailWidth() const
{
	unsigned value = {};
	check(shim()->get_GeneratedThumbnailWidth(&value));
	return value;
}

template <typename T> void impl_IBitmapEncoder<T>::GeneratedThumbnailWidth(unsigned const value) const
{
	check(shim()->put_GeneratedThumbnailWidth(value));
}

template <typename T> unsigned impl_IBitmapEncoder<T>::GeneratedThumbnailHeight() const
{
	unsigned value = {};
	check(shim()->get_GeneratedThumbnailHeight(&value));
	return value;
}

template <typename T> void impl_IBitmapEncoder<T>::GeneratedThumbnailHeight(unsigned const value) const
{
	check(shim()->put_GeneratedThumbnailHeight(value));
}

template <typename T> Windows::Graphics::Imaging::BitmapTransform impl_IBitmapEncoder<T>::BitmapTransform() const
{
	Windows::Graphics::Imaging::BitmapTransform value = nullptr;
	check(shim()->get_BitmapTransform(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IBitmapEncoder<T>::GoToNextFrameAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_GoToNextFrameAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IBitmapEncoder<T>::GoToNextFrameAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Graphics::Imaging::BitmapTypedValue>> const & encodingOptions) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_GoToNextFrameWithEncodingOptionsAsync(get(encodingOptions), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IBitmapEncoder<T>::FlushAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_FlushAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> void impl_IBitmapEncoderWithSoftwareBitmap<T>::SetSoftwareBitmap(Windows::Graphics::Imaging::SoftwareBitmap const & bitmap) const
{
	check(shim()->abi_SetSoftwareBitmap(get(bitmap)));
}

template <typename T> Windows::Graphics::Imaging::SoftwareBitmap impl_ISoftwareBitmapFactory<T>::Create(Windows::Graphics::Imaging::BitmapPixelFormat const format, int const width, int const height) const
{
	Windows::Graphics::Imaging::SoftwareBitmap value = nullptr;
	check(shim()->abi_Create(format, width, height, put(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::SoftwareBitmap impl_ISoftwareBitmapFactory<T>::CreateWithAlpha(Windows::Graphics::Imaging::BitmapPixelFormat const format, int const width, int const height, Windows::Graphics::Imaging::BitmapAlphaMode const alpha) const
{
	Windows::Graphics::Imaging::SoftwareBitmap value = nullptr;
	check(shim()->abi_CreateWithAlpha(format, width, height, alpha, put(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::SoftwareBitmap impl_ISoftwareBitmapStatics<T>::Copy(Windows::Graphics::Imaging::SoftwareBitmap const & source) const
{
	Windows::Graphics::Imaging::SoftwareBitmap value = nullptr;
	check(shim()->abi_Copy(get(source), put(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::SoftwareBitmap impl_ISoftwareBitmapStatics<T>::Convert(Windows::Graphics::Imaging::SoftwareBitmap const & source, Windows::Graphics::Imaging::BitmapPixelFormat const format) const
{
	Windows::Graphics::Imaging::SoftwareBitmap value = nullptr;
	check(shim()->abi_Convert(get(source), format, put(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::SoftwareBitmap impl_ISoftwareBitmapStatics<T>::Convert(Windows::Graphics::Imaging::SoftwareBitmap const & source, Windows::Graphics::Imaging::BitmapPixelFormat const format, Windows::Graphics::Imaging::BitmapAlphaMode const alpha) const
{
	Windows::Graphics::Imaging::SoftwareBitmap value = nullptr;
	check(shim()->abi_ConvertWithAlpha(get(source), format, alpha, put(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::SoftwareBitmap impl_ISoftwareBitmapStatics<T>::CreateCopyFromBuffer(Windows::Storage::Streams::IBuffer const & source, Windows::Graphics::Imaging::BitmapPixelFormat const format, int const width, int const height) const
{
	Windows::Graphics::Imaging::SoftwareBitmap value = nullptr;
	check(shim()->abi_CreateCopyFromBuffer(get(source), format, width, height, put(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::SoftwareBitmap impl_ISoftwareBitmapStatics<T>::CreateCopyFromBuffer(Windows::Storage::Streams::IBuffer const & source, Windows::Graphics::Imaging::BitmapPixelFormat const format, int const width, int const height, Windows::Graphics::Imaging::BitmapAlphaMode const alpha) const
{
	Windows::Graphics::Imaging::SoftwareBitmap value = nullptr;
	check(shim()->abi_CreateCopyWithAlphaFromBuffer(get(source), format, width, height, alpha, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::SoftwareBitmap> impl_ISoftwareBitmapStatics<T>::CreateCopyFromSurfaceAsync(Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const & surface) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::SoftwareBitmap> value;
	check(shim()->abi_CreateCopyFromSurfaceAsync(get(surface), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::SoftwareBitmap> impl_ISoftwareBitmapStatics<T>::CreateCopyFromSurfaceAsync(Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const & surface, Windows::Graphics::Imaging::BitmapAlphaMode const alpha) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::SoftwareBitmap> value;
	check(shim()->abi_CreateCopyWithAlphaFromSurfaceAsync(get(surface), alpha, put(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapPixelFormat impl_ISoftwareBitmap<T>::BitmapPixelFormat() const
{
	Windows::Graphics::Imaging::BitmapPixelFormat value = {};
	check(shim()->get_BitmapPixelFormat(&value));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapAlphaMode impl_ISoftwareBitmap<T>::BitmapAlphaMode() const
{
	Windows::Graphics::Imaging::BitmapAlphaMode value = {};
	check(shim()->get_BitmapAlphaMode(&value));
	return value;
}

template <typename T> int impl_ISoftwareBitmap<T>::PixelWidth() const
{
	int value = {};
	check(shim()->get_PixelWidth(&value));
	return value;
}

template <typename T> int impl_ISoftwareBitmap<T>::PixelHeight() const
{
	int value = {};
	check(shim()->get_PixelHeight(&value));
	return value;
}

template <typename T> bool impl_ISoftwareBitmap<T>::IsReadOnly() const
{
	bool value = {};
	check(shim()->get_IsReadOnly(put(value)));
	return value;
}

template <typename T> void impl_ISoftwareBitmap<T>::DpiX(double const value) const
{
	check(shim()->put_DpiX(value));
}

template <typename T> double impl_ISoftwareBitmap<T>::DpiX() const
{
	double value = {};
	check(shim()->get_DpiX(&value));
	return value;
}

template <typename T> void impl_ISoftwareBitmap<T>::DpiY(double const value) const
{
	check(shim()->put_DpiY(value));
}

template <typename T> double impl_ISoftwareBitmap<T>::DpiY() const
{
	double value = {};
	check(shim()->get_DpiY(&value));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapBuffer impl_ISoftwareBitmap<T>::LockBuffer(Windows::Graphics::Imaging::BitmapBufferAccessMode const mode) const
{
	Windows::Graphics::Imaging::BitmapBuffer value = nullptr;
	check(shim()->abi_LockBuffer(mode, put(value)));
	return value;
}

template <typename T> void impl_ISoftwareBitmap<T>::CopyTo(Windows::Graphics::Imaging::SoftwareBitmap const & bitmap) const
{
	check(shim()->abi_CopyTo(get(bitmap)));
}

template <typename T> void impl_ISoftwareBitmap<T>::CopyFromBuffer(Windows::Storage::Streams::IBuffer const & buffer) const
{
	check(shim()->abi_CopyFromBuffer(get(buffer)));
}

template <typename T> void impl_ISoftwareBitmap<T>::CopyToBuffer(Windows::Storage::Streams::IBuffer const & buffer) const
{
	check(shim()->abi_CopyToBuffer(get(buffer)));
}

template <typename T> Windows::Graphics::Imaging::SoftwareBitmap impl_ISoftwareBitmap<T>::GetReadOnlyView() const
{
	Windows::Graphics::Imaging::SoftwareBitmap value = nullptr;
	check(shim()->abi_GetReadOnlyView(put(value)));
	return value;
}

template <typename T> int impl_IBitmapBuffer<T>::GetPlaneCount() const
{
	int value = {};
	check(shim()->abi_GetPlaneCount(&value));
	return value;
}

template <typename T> Windows::Graphics::Imaging::BitmapPlaneDescription impl_IBitmapBuffer<T>::GetPlaneDescription(int const index) const
{
	Windows::Graphics::Imaging::BitmapPlaneDescription value = {};
	check(shim()->abi_GetPlaneDescription(index, &value));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Printing {

template <typename T> void impl_IPrintTaskSourceRequestedHandler<T>::Invoke(Windows::Graphics::Printing::PrintTaskSourceRequestedArgs const & args) const
{
	check(shim()->abi_Invoke(get(args)));
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::MediaSize(Windows::Graphics::Printing::PrintMediaSize const value) const
{
	check(shim()->put_MediaSize(value));
}

template <typename T> Windows::Graphics::Printing::PrintMediaSize impl_IPrintTaskOptionsCoreProperties<T>::MediaSize() const
{
	Windows::Graphics::Printing::PrintMediaSize value = {};
	check(shim()->get_MediaSize(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::MediaType(Windows::Graphics::Printing::PrintMediaType const value) const
{
	check(shim()->put_MediaType(value));
}

template <typename T> Windows::Graphics::Printing::PrintMediaType impl_IPrintTaskOptionsCoreProperties<T>::MediaType() const
{
	Windows::Graphics::Printing::PrintMediaType value = {};
	check(shim()->get_MediaType(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::Orientation(Windows::Graphics::Printing::PrintOrientation const value) const
{
	check(shim()->put_Orientation(value));
}

template <typename T> Windows::Graphics::Printing::PrintOrientation impl_IPrintTaskOptionsCoreProperties<T>::Orientation() const
{
	Windows::Graphics::Printing::PrintOrientation value = {};
	check(shim()->get_Orientation(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::PrintQuality(Windows::Graphics::Printing::PrintQuality const value) const
{
	check(shim()->put_PrintQuality(value));
}

template <typename T> Windows::Graphics::Printing::PrintQuality impl_IPrintTaskOptionsCoreProperties<T>::PrintQuality() const
{
	Windows::Graphics::Printing::PrintQuality value = {};
	check(shim()->get_PrintQuality(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::ColorMode(Windows::Graphics::Printing::PrintColorMode const value) const
{
	check(shim()->put_ColorMode(value));
}

template <typename T> Windows::Graphics::Printing::PrintColorMode impl_IPrintTaskOptionsCoreProperties<T>::ColorMode() const
{
	Windows::Graphics::Printing::PrintColorMode value = {};
	check(shim()->get_ColorMode(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::Duplex(Windows::Graphics::Printing::PrintDuplex const value) const
{
	check(shim()->put_Duplex(value));
}

template <typename T> Windows::Graphics::Printing::PrintDuplex impl_IPrintTaskOptionsCoreProperties<T>::Duplex() const
{
	Windows::Graphics::Printing::PrintDuplex value = {};
	check(shim()->get_Duplex(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::Collation(Windows::Graphics::Printing::PrintCollation const value) const
{
	check(shim()->put_Collation(value));
}

template <typename T> Windows::Graphics::Printing::PrintCollation impl_IPrintTaskOptionsCoreProperties<T>::Collation() const
{
	Windows::Graphics::Printing::PrintCollation value = {};
	check(shim()->get_Collation(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::Staple(Windows::Graphics::Printing::PrintStaple const value) const
{
	check(shim()->put_Staple(value));
}

template <typename T> Windows::Graphics::Printing::PrintStaple impl_IPrintTaskOptionsCoreProperties<T>::Staple() const
{
	Windows::Graphics::Printing::PrintStaple value = {};
	check(shim()->get_Staple(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::HolePunch(Windows::Graphics::Printing::PrintHolePunch const value) const
{
	check(shim()->put_HolePunch(value));
}

template <typename T> Windows::Graphics::Printing::PrintHolePunch impl_IPrintTaskOptionsCoreProperties<T>::HolePunch() const
{
	Windows::Graphics::Printing::PrintHolePunch value = {};
	check(shim()->get_HolePunch(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::Binding(Windows::Graphics::Printing::PrintBinding const value) const
{
	check(shim()->put_Binding(value));
}

template <typename T> Windows::Graphics::Printing::PrintBinding impl_IPrintTaskOptionsCoreProperties<T>::Binding() const
{
	Windows::Graphics::Printing::PrintBinding value = {};
	check(shim()->get_Binding(&value));
	return value;
}

template <typename T> unsigned impl_IPrintTaskOptionsCoreProperties<T>::MinCopies() const
{
	unsigned value = {};
	check(shim()->get_MinCopies(&value));
	return value;
}

template <typename T> unsigned impl_IPrintTaskOptionsCoreProperties<T>::MaxCopies() const
{
	unsigned value = {};
	check(shim()->get_MaxCopies(&value));
	return value;
}

template <typename T> void impl_IPrintTaskOptionsCoreProperties<T>::NumberOfCopies(unsigned const value) const
{
	check(shim()->put_NumberOfCopies(value));
}

template <typename T> unsigned impl_IPrintTaskOptionsCoreProperties<T>::NumberOfCopies() const
{
	unsigned value = {};
	check(shim()->get_NumberOfCopies(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IPrintTaskOptionsCoreUIConfiguration<T>::DisplayedOptions() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_DisplayedOptions(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing::PrintPageDescription impl_IPrintTaskOptionsCore<T>::GetPageDescription(unsigned const jobPageNumber) const
{
	Windows::Graphics::Printing::PrintPageDescription description = {};
	check(shim()->abi_GetPageDescription(jobPageNumber, &description));
	return description;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::MediaSize() const
{
	String value;
	check(shim()->get_MediaSize(put(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::MediaType() const
{
	String value;
	check(shim()->get_MediaType(put(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::Orientation() const
{
	String value;
	check(shim()->get_Orientation(put(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::PrintQuality() const
{
	String value;
	check(shim()->get_PrintQuality(put(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::ColorMode() const
{
	String value;
	check(shim()->get_ColorMode(put(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::Duplex() const
{
	String value;
	check(shim()->get_Duplex(put(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::Collation() const
{
	String value;
	check(shim()->get_Collation(put(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::Staple() const
{
	String value;
	check(shim()->get_Staple(put(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::HolePunch() const
{
	String value;
	check(shim()->get_HolePunch(put(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::Binding() const
{
	String value;
	check(shim()->get_Binding(put(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::Copies() const
{
	String value;
	check(shim()->get_Copies(put(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::NUp() const
{
	String value;
	check(shim()->get_NUp(put(value)));
	return value;
}

template <typename T> String impl_IStandardPrintTaskOptionsStatic<T>::InputBin() const
{
	String value;
	check(shim()->get_InputBin(put(value)));
	return value;
}

template <typename T> unsigned impl_IPrintTaskProgressingEventArgs<T>::DocumentPageCount() const
{
	unsigned value = {};
	check(shim()->get_DocumentPageCount(&value));
	return value;
}

template <typename T> Windows::Graphics::Printing::PrintTaskCompletion impl_IPrintTaskCompletedEventArgs<T>::Completion() const
{
	Windows::Graphics::Printing::PrintTaskCompletion value = {};
	check(shim()->get_Completion(&value));
	return value;
}

template <typename T> Windows::ApplicationModel::DataTransfer::DataPackagePropertySet impl_IPrintTask<T>::Properties() const
{
	Windows::ApplicationModel::DataTransfer::DataPackagePropertySet value = nullptr;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing::IPrintDocumentSource impl_IPrintTask<T>::Source() const
{
	Windows::Graphics::Printing::IPrintDocumentSource value;
	check(shim()->get_Source(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing::PrintTaskOptions impl_IPrintTask<T>::Options() const
{
	Windows::Graphics::Printing::PrintTaskOptions value = nullptr;
	check(shim()->get_Options(put(value)));
	return value;
}

template <typename T> long long impl_IPrintTask<T>::Previewing(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintTask, IInspectable> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_Previewing(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IPrintTask<T>::Previewing(F eventHandler) const
{
	return Previewing(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing::PrintTask, IInspectable>(eventHandler));
}

template <typename T> void impl_IPrintTask<T>::Previewing(long long const eventCookie) const
{
	check(shim()->remove_Previewing(eventCookie));
}

template <typename T> long long impl_IPrintTask<T>::Submitting(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintTask, IInspectable> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_Submitting(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IPrintTask<T>::Submitting(F eventHandler) const
{
	return Submitting(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing::PrintTask, IInspectable>(eventHandler));
}

template <typename T> void impl_IPrintTask<T>::Submitting(long long const eventCookie) const
{
	check(shim()->remove_Submitting(eventCookie));
}

template <typename T> long long impl_IPrintTask<T>::Progressing(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintTask, Windows::Graphics::Printing::PrintTaskProgressingEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_Progressing(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IPrintTask<T>::Progressing(F eventHandler) const
{
	return Progressing(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing::PrintTask, Windows::Graphics::Printing::PrintTaskProgressingEventArgs>(eventHandler));
}

template <typename T> void impl_IPrintTask<T>::Progressing(long long const eventCookie) const
{
	check(shim()->remove_Progressing(eventCookie));
}

template <typename T> long long impl_IPrintTask<T>::Completed(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintTask, Windows::Graphics::Printing::PrintTaskCompletedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_Completed(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IPrintTask<T>::Completed(F eventHandler) const
{
	return Completed(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing::PrintTask, Windows::Graphics::Printing::PrintTaskCompletedEventArgs>(eventHandler));
}

template <typename T> void impl_IPrintTask<T>::Completed(long long const eventCookie) const
{
	check(shim()->remove_Completed(eventCookie));
}

template <typename T> void impl_IPrintTaskTargetDeviceSupport<T>::IsPrinterTargetEnabled(bool const value) const
{
	check(shim()->put_IsPrinterTargetEnabled(value));
}

template <typename T> bool impl_IPrintTaskTargetDeviceSupport<T>::IsPrinterTargetEnabled() const
{
	bool value = {};
	check(shim()->get_IsPrinterTargetEnabled(put(value)));
	return value;
}

template <typename T> void impl_IPrintTaskTargetDeviceSupport<T>::Is3DManufacturingTargetEnabled(bool const value) const
{
	check(shim()->put_Is3DManufacturingTargetEnabled(value));
}

template <typename T> bool impl_IPrintTaskTargetDeviceSupport<T>::Is3DManufacturingTargetEnabled() const
{
	bool value = {};
	check(shim()->get_Is3DManufacturingTargetEnabled(put(value)));
	return value;
}

template <typename T> void impl_IPrintTaskSourceRequestedDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::Foundation::DateTime impl_IPrintTaskSourceRequestedArgs<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Deadline(&value));
	return value;
}

template <typename T> void impl_IPrintTaskSourceRequestedArgs<T>::SetSource(Windows::Graphics::Printing::IPrintDocumentSource const & source) const
{
	check(shim()->abi_SetSource(get(source)));
}

template <typename T> Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral impl_IPrintTaskSourceRequestedArgs<T>::GetDeferral() const
{
	Windows::Graphics::Printing::PrintTaskSourceRequestedDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> void impl_IPrintTaskRequestedDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::Foundation::DateTime impl_IPrintTaskRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Deadline(&value));
	return value;
}

template <typename T> Windows::Graphics::Printing::PrintTask impl_IPrintTaskRequest<T>::CreatePrintTask(StringReference const & title, Windows::Graphics::Printing::IPrintTaskSourceRequestedHandler const & handler) const
{
	Windows::Graphics::Printing::PrintTask task = nullptr;
	check(shim()->abi_CreatePrintTask(get(title), get(handler), put(task)));
	return task;
}

template <typename T> template <typename F> Windows::Graphics::Printing::PrintTask impl_IPrintTaskRequest<T>::CreatePrintTask(StringReference const & title, F handler) const
{
	return CreatePrintTask(title, Windows::Graphics::Printing::PrintTaskSourceRequestedHandler(handler));
}

template <typename T> Windows::Graphics::Printing::PrintTaskRequestedDeferral impl_IPrintTaskRequest<T>::GetDeferral() const
{
	Windows::Graphics::Printing::PrintTaskRequestedDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> Windows::Graphics::Printing::PrintTaskRequest impl_IPrintTaskRequestedEventArgs<T>::Request() const
{
	Windows::Graphics::Printing::PrintTaskRequest value = nullptr;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing::PrintManager impl_IPrintManagerStatic<T>::GetForCurrentView() const
{
	Windows::Graphics::Printing::PrintManager printingManager = nullptr;
	check(shim()->abi_GetForCurrentView(put(printingManager)));
	return printingManager;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IPrintManagerStatic<T>::ShowPrintUIAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_ShowPrintUIAsync(put(operation)));
	return operation;
}

template <typename T> long long impl_IPrintManager<T>::PrintTaskRequested(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::PrintManager, Windows::Graphics::Printing::PrintTaskRequestedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_PrintTaskRequested(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IPrintManager<T>::PrintTaskRequested(F eventHandler) const
{
	return PrintTaskRequested(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing::PrintManager, Windows::Graphics::Printing::PrintTaskRequestedEventArgs>(eventHandler));
}

template <typename T> void impl_IPrintManager<T>::PrintTaskRequested(long long const eventCookie) const
{
	check(shim()->remove_PrintTaskRequested(eventCookie));
}

}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Printing3D {

template <typename T> void impl_IPrint3DTaskSourceRequestedHandler<T>::Invoke(Windows::Graphics::Printing3D::Print3DTaskSourceRequestedArgs const & args) const
{
	check(shim()->abi_Invoke(get(args)));
}

template <typename T> Windows::Graphics::Printing3D::Print3DTaskCompletion impl_IPrint3DTaskCompletedEventArgs<T>::Completion() const
{
	Windows::Graphics::Printing3D::Print3DTaskCompletion value = {};
	check(shim()->get_Completion(&value));
	return value;
}

template <typename T> Windows::Graphics::Printing3D::Print3DTaskDetail impl_IPrint3DTaskCompletedEventArgs<T>::ExtendedStatus() const
{
	Windows::Graphics::Printing3D::Print3DTaskDetail value = {};
	check(shim()->get_ExtendedStatus(&value));
	return value;
}

template <typename T> Windows::Graphics::Printing3D::Printing3D3MFPackage impl_IPrint3DTaskSourceChangedEventArgs<T>::Source() const
{
	Windows::Graphics::Printing3D::Printing3D3MFPackage value = nullptr;
	check(shim()->get_Source(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing3D::Printing3D3MFPackage impl_IPrint3DTask<T>::Source() const
{
	Windows::Graphics::Printing3D::Printing3D3MFPackage value = nullptr;
	check(shim()->get_Source(put(value)));
	return value;
}

template <typename T> long long impl_IPrint3DTask<T>::Submitting(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing3D::Print3DTask, IInspectable> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_Submitting(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IPrint3DTask<T>::Submitting(F eventHandler) const
{
	return Submitting(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing3D::Print3DTask, IInspectable>(eventHandler));
}

template <typename T> void impl_IPrint3DTask<T>::Submitting(long long const eventCookie) const
{
	check(shim()->remove_Submitting(eventCookie));
}

template <typename T> long long impl_IPrint3DTask<T>::Completed(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing3D::Print3DTask, Windows::Graphics::Printing3D::Print3DTaskCompletedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_Completed(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IPrint3DTask<T>::Completed(F eventHandler) const
{
	return Completed(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing3D::Print3DTask, Windows::Graphics::Printing3D::Print3DTaskCompletedEventArgs>(eventHandler));
}

template <typename T> void impl_IPrint3DTask<T>::Completed(long long const eventCookie) const
{
	check(shim()->remove_Completed(eventCookie));
}

template <typename T> long long impl_IPrint3DTask<T>::SourceChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing3D::Print3DTask, Windows::Graphics::Printing3D::Print3DTaskSourceChangedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_SourceChanged(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IPrint3DTask<T>::SourceChanged(F eventHandler) const
{
	return SourceChanged(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing3D::Print3DTask, Windows::Graphics::Printing3D::Print3DTaskSourceChangedEventArgs>(eventHandler));
}

template <typename T> void impl_IPrint3DTask<T>::SourceChanged(long long const eventCookie) const
{
	check(shim()->remove_SourceChanged(eventCookie));
}

template <typename T> void impl_IPrint3DTaskSourceRequestedArgs<T>::SetSource(Windows::Graphics::Printing3D::Printing3D3MFPackage const & source) const
{
	check(shim()->abi_SetSource(get(source)));
}

template <typename T> Windows::Graphics::Printing3D::Print3DTask impl_IPrint3DTaskRequest<T>::CreateTask(StringReference const & title, StringReference const & printerId, Windows::Graphics::Printing3D::IPrint3DTaskSourceRequestedHandler const & handler) const
{
	Windows::Graphics::Printing3D::Print3DTask result = nullptr;
	check(shim()->abi_CreateTask(get(title), get(printerId), get(handler), put(result)));
	return result;
}

template <typename T> template <typename F> Windows::Graphics::Printing3D::Print3DTask impl_IPrint3DTaskRequest<T>::CreateTask(StringReference const & title, StringReference const & printerId, F handler) const
{
	return CreateTask(title, printerId, Windows::Graphics::Printing3D::Print3DTaskSourceRequestedHandler(handler));
}

template <typename T> Windows::Graphics::Printing3D::Print3DTaskRequest impl_IPrint3DTaskRequestedEventArgs<T>::Request() const
{
	Windows::Graphics::Printing3D::Print3DTaskRequest value = nullptr;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing3D::Print3DManager impl_IPrint3DManagerStatics<T>::GetForCurrentView() const
{
	Windows::Graphics::Printing3D::Print3DManager result = nullptr;
	check(shim()->abi_GetForCurrentView(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IPrint3DManagerStatics<T>::ShowPrintUIAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_ShowPrintUIAsync(put(result)));
	return result;
}

template <typename T> long long impl_IPrint3DManager<T>::TaskRequested(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing3D::Print3DManager, Windows::Graphics::Printing3D::Print3DTaskRequestedEventArgs> const & eventHandler) const
{
	long long token = {};
	check(shim()->add_TaskRequested(get(eventHandler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPrint3DManager<T>::TaskRequested(F eventHandler) const
{
	return TaskRequested(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing3D::Print3DManager, Windows::Graphics::Printing3D::Print3DTaskRequestedEventArgs>(eventHandler));
}

template <typename T> void impl_IPrint3DManager<T>::TaskRequested(long long const token) const
{
	check(shim()->remove_TaskRequested(token));
}

template <typename T> unsigned impl_IPrinting3DMesh<T>::VertexCount() const
{
	unsigned value = {};
	check(shim()->get_VertexCount(&value));
	return value;
}

template <typename T> void impl_IPrinting3DMesh<T>::VertexCount(unsigned const value) const
{
	check(shim()->put_VertexCount(value));
}

template <typename T> unsigned impl_IPrinting3DMesh<T>::IndexCount() const
{
	unsigned value = {};
	check(shim()->get_IndexCount(&value));
	return value;
}

template <typename T> void impl_IPrinting3DMesh<T>::IndexCount(unsigned const value) const
{
	check(shim()->put_IndexCount(value));
}

template <typename T> Windows::Graphics::Printing3D::Printing3DBufferDescription impl_IPrinting3DMesh<T>::VertexPositionsDescription() const
{
	Windows::Graphics::Printing3D::Printing3DBufferDescription value = {};
	check(shim()->get_VertexPositionsDescription(&value));
	return value;
}

template <typename T> void impl_IPrinting3DMesh<T>::VertexPositionsDescription(Windows::Graphics::Printing3D::Printing3DBufferDescription const & value) const
{
	check(shim()->put_VertexPositionsDescription(value));
}

template <typename T> Windows::Graphics::Printing3D::Printing3DBufferDescription impl_IPrinting3DMesh<T>::VertexNormalsDescription() const
{
	Windows::Graphics::Printing3D::Printing3DBufferDescription value = {};
	check(shim()->get_VertexNormalsDescription(&value));
	return value;
}

template <typename T> void impl_IPrinting3DMesh<T>::VertexNormalsDescription(Windows::Graphics::Printing3D::Printing3DBufferDescription const & value) const
{
	check(shim()->put_VertexNormalsDescription(value));
}

template <typename T> Windows::Graphics::Printing3D::Printing3DBufferDescription impl_IPrinting3DMesh<T>::TriangleIndicesDescription() const
{
	Windows::Graphics::Printing3D::Printing3DBufferDescription value = {};
	check(shim()->get_TriangleIndicesDescription(&value));
	return value;
}

template <typename T> void impl_IPrinting3DMesh<T>::TriangleIndicesDescription(Windows::Graphics::Printing3D::Printing3DBufferDescription const & value) const
{
	check(shim()->put_TriangleIndicesDescription(value));
}

template <typename T> Windows::Graphics::Printing3D::Printing3DBufferDescription impl_IPrinting3DMesh<T>::TriangleMaterialIndicesDescription() const
{
	Windows::Graphics::Printing3D::Printing3DBufferDescription value = {};
	check(shim()->get_TriangleMaterialIndicesDescription(&value));
	return value;
}

template <typename T> void impl_IPrinting3DMesh<T>::TriangleMaterialIndicesDescription(Windows::Graphics::Printing3D::Printing3DBufferDescription const & value) const
{
	check(shim()->put_TriangleMaterialIndicesDescription(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IPrinting3DMesh<T>::GetVertexPositions() const
{
	Windows::Storage::Streams::IBuffer buffer;
	check(shim()->abi_GetVertexPositions(put(buffer)));
	return buffer;
}

template <typename T> void impl_IPrinting3DMesh<T>::CreateVertexPositions(unsigned const value) const
{
	check(shim()->abi_CreateVertexPositions(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IPrinting3DMesh<T>::GetVertexNormals() const
{
	Windows::Storage::Streams::IBuffer buffer;
	check(shim()->abi_GetVertexNormals(put(buffer)));
	return buffer;
}

template <typename T> void impl_IPrinting3DMesh<T>::CreateVertexNormals(unsigned const value) const
{
	check(shim()->abi_CreateVertexNormals(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IPrinting3DMesh<T>::GetTriangleIndices() const
{
	Windows::Storage::Streams::IBuffer buffer;
	check(shim()->abi_GetTriangleIndices(put(buffer)));
	return buffer;
}

template <typename T> void impl_IPrinting3DMesh<T>::CreateTriangleIndices(unsigned const value) const
{
	check(shim()->abi_CreateTriangleIndices(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IPrinting3DMesh<T>::GetTriangleMaterialIndices() const
{
	Windows::Storage::Streams::IBuffer buffer;
	check(shim()->abi_GetTriangleMaterialIndices(put(buffer)));
	return buffer;
}

template <typename T> void impl_IPrinting3DMesh<T>::CreateTriangleMaterialIndices(unsigned const value) const
{
	check(shim()->abi_CreateTriangleMaterialIndices(value));
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IPrinting3DMesh<T>::BufferDescriptionSet() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check(shim()->get_BufferDescriptionSet(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IPrinting3DMesh<T>::BufferSet() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check(shim()->get_BufferSet(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Printing3D::Printing3DMeshVerificationResult> impl_IPrinting3DMesh<T>::VerifyAsync(Windows::Graphics::Printing3D::Printing3DMeshVerificationMode const value) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Printing3D::Printing3DMeshVerificationResult> operation;
	check(shim()->abi_VerifyAsync(value, put(operation)));
	return operation;
}

template <typename T> Windows::Graphics::Printing3D::Printing3DTextureResource impl_IPrinting3DModelTexture<T>::TextureResource() const
{
	Windows::Graphics::Printing3D::Printing3DTextureResource value = nullptr;
	check(shim()->get_TextureResource(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3DModelTexture<T>::TextureResource(Windows::Graphics::Printing3D::Printing3DTextureResource const & value) const
{
	check(shim()->put_TextureResource(get(value)));
}

template <typename T> Windows::Graphics::Printing3D::Printing3DTextureEdgeBehavior impl_IPrinting3DModelTexture<T>::TileStyleU() const
{
	Windows::Graphics::Printing3D::Printing3DTextureEdgeBehavior value = {};
	check(shim()->get_TileStyleU(&value));
	return value;
}

template <typename T> void impl_IPrinting3DModelTexture<T>::TileStyleU(Windows::Graphics::Printing3D::Printing3DTextureEdgeBehavior const value) const
{
	check(shim()->put_TileStyleU(value));
}

template <typename T> Windows::Graphics::Printing3D::Printing3DTextureEdgeBehavior impl_IPrinting3DModelTexture<T>::TileStyleV() const
{
	Windows::Graphics::Printing3D::Printing3DTextureEdgeBehavior value = {};
	check(shim()->get_TileStyleV(&value));
	return value;
}

template <typename T> void impl_IPrinting3DModelTexture<T>::TileStyleV(Windows::Graphics::Printing3D::Printing3DTextureEdgeBehavior const value) const
{
	check(shim()->put_TileStyleV(value));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamWithContentType impl_IPrinting3DTextureResource<T>::TextureData() const
{
	Windows::Storage::Streams::IRandomAccessStreamWithContentType value;
	check(shim()->get_TextureData(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3DTextureResource<T>::TextureData(Windows::Storage::Streams::IRandomAccessStreamWithContentType const & value) const
{
	check(shim()->put_TextureData(get(value)));
}

template <typename T> String impl_IPrinting3DTextureResource<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3DTextureResource<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> Windows::Graphics::Printing3D::Printing3DComponent impl_IPrinting3DComponentWithMatrix<T>::Component() const
{
	Windows::Graphics::Printing3D::Printing3DComponent value = nullptr;
	check(shim()->get_Component(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3DComponentWithMatrix<T>::Component(Windows::Graphics::Printing3D::Printing3DComponent const & value) const
{
	check(shim()->put_Component(get(value)));
}

template <typename T> Windows::Foundation::Numerics::Matrix4x4 impl_IPrinting3DComponentWithMatrix<T>::Matrix() const
{
	Windows::Foundation::Numerics::Matrix4x4 value = {};
	check(shim()->get_Matrix(&value));
	return value;
}

template <typename T> void impl_IPrinting3DComponentWithMatrix<T>::Matrix(Windows::Foundation::Numerics::Matrix4x4 const & value) const
{
	check(shim()->put_Matrix(value));
}

template <typename T> Windows::Graphics::Printing3D::Printing3DMesh impl_IPrinting3DComponent<T>::Mesh() const
{
	Windows::Graphics::Printing3D::Printing3DMesh value = nullptr;
	check(shim()->get_Mesh(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3DComponent<T>::Mesh(Windows::Graphics::Printing3D::Printing3DMesh const & value) const
{
	check(shim()->put_Mesh(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DComponentWithMatrix> impl_IPrinting3DComponent<T>::Components() const
{
	Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DComponentWithMatrix> value;
	check(shim()->get_Components(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing3D::Printing3DTextureResource impl_IPrinting3DComponent<T>::Thumbnail() const
{
	Windows::Graphics::Printing3D::Printing3DTextureResource value = nullptr;
	check(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3DComponent<T>::Thumbnail(Windows::Graphics::Printing3D::Printing3DTextureResource const & value) const
{
	check(shim()->put_Thumbnail(get(value)));
}

template <typename T> Windows::Graphics::Printing3D::Printing3DObjectType impl_IPrinting3DComponent<T>::Type() const
{
	Windows::Graphics::Printing3D::Printing3DObjectType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> void impl_IPrinting3DComponent<T>::Type(Windows::Graphics::Printing3D::Printing3DObjectType const value) const
{
	check(shim()->put_Type(value));
}

template <typename T> String impl_IPrinting3DComponent<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3DComponent<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> String impl_IPrinting3DComponent<T>::PartNumber() const
{
	String value;
	check(shim()->get_PartNumber(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3DComponent<T>::PartNumber(StringReference const & value) const
{
	check(shim()->put_PartNumber(get(value)));
}

template <typename T> String impl_IPrinting3DBaseMaterialStatics<T>::Abs() const
{
	String value;
	check(shim()->get_Abs(put(value)));
	return value;
}

template <typename T> String impl_IPrinting3DBaseMaterialStatics<T>::Pla() const
{
	String value;
	check(shim()->get_Pla(put(value)));
	return value;
}

template <typename T> String impl_IPrinting3DBaseMaterial<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3DBaseMaterial<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> Windows::Graphics::Printing3D::Printing3DColorMaterial impl_IPrinting3DBaseMaterial<T>::Color() const
{
	Windows::Graphics::Printing3D::Printing3DColorMaterial value = nullptr;
	check(shim()->get_Color(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3DBaseMaterial<T>::Color(Windows::Graphics::Printing3D::Printing3DColorMaterial const & value) const
{
	check(shim()->put_Color(get(value)));
}

template <typename T> unsigned impl_IPrinting3DColorMaterial<T>::Value() const
{
	unsigned value = {};
	check(shim()->get_Value(&value));
	return value;
}

template <typename T> void impl_IPrinting3DColorMaterial<T>::Value(unsigned const value) const
{
	check(shim()->put_Value(value));
}

template <typename T> Windows::UI::Color impl_IPrinting3DColorMaterial2<T>::Color() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Color(&value));
	return value;
}

template <typename T> void impl_IPrinting3DColorMaterial2<T>::Color(Windows::UI::Color const & value) const
{
	check(shim()->put_Color(value));
}

template <typename T> Windows::Graphics::Printing3D::Printing3DModelTexture impl_IPrinting3DTexture2CoordMaterial<T>::Texture() const
{
	Windows::Graphics::Printing3D::Printing3DModelTexture value = nullptr;
	check(shim()->get_Texture(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3DTexture2CoordMaterial<T>::Texture(Windows::Graphics::Printing3D::Printing3DModelTexture const & value) const
{
	check(shim()->put_Texture(get(value)));
}

template <typename T> double impl_IPrinting3DTexture2CoordMaterial<T>::U() const
{
	double value = {};
	check(shim()->get_U(&value));
	return value;
}

template <typename T> void impl_IPrinting3DTexture2CoordMaterial<T>::U(double const value) const
{
	check(shim()->put_U(value));
}

template <typename T> double impl_IPrinting3DTexture2CoordMaterial<T>::V() const
{
	double value = {};
	check(shim()->get_V(&value));
	return value;
}

template <typename T> void impl_IPrinting3DTexture2CoordMaterial<T>::V(double const value) const
{
	check(shim()->put_V(value));
}

template <typename T> Windows::Foundation::Collections::IVector<double> impl_IPrinting3DCompositeMaterial<T>::Values() const
{
	Windows::Foundation::Collections::IVector<double> value;
	check(shim()->get_Values(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<unsigned> impl_IPrinting3DMultiplePropertyMaterial<T>::MaterialIndices() const
{
	Windows::Foundation::Collections::IVector<unsigned> value;
	check(shim()->get_MaterialIndices(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing3D::Printing3DBaseMaterialGroup impl_IPrinting3DBaseMaterialGroupFactory<T>::Create(unsigned const MaterialGroupId) const
{
	Windows::Graphics::Printing3D::Printing3DBaseMaterialGroup result = nullptr;
	check(shim()->abi_Create(MaterialGroupId, put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DBaseMaterial> impl_IPrinting3DBaseMaterialGroup<T>::Bases() const
{
	Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DBaseMaterial> value;
	check(shim()->get_Bases(put(value)));
	return value;
}

template <typename T> unsigned impl_IPrinting3DBaseMaterialGroup<T>::MaterialGroupId() const
{
	unsigned value = {};
	check(shim()->get_MaterialGroupId(&value));
	return value;
}

template <typename T> Windows::Graphics::Printing3D::Printing3DColorMaterialGroup impl_IPrinting3DColorMaterialGroupFactory<T>::Create(unsigned const MaterialGroupId) const
{
	Windows::Graphics::Printing3D::Printing3DColorMaterialGroup result = nullptr;
	check(shim()->abi_Create(MaterialGroupId, put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DColorMaterial> impl_IPrinting3DColorMaterialGroup<T>::Colors() const
{
	Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DColorMaterial> value;
	check(shim()->get_Colors(put(value)));
	return value;
}

template <typename T> unsigned impl_IPrinting3DColorMaterialGroup<T>::MaterialGroupId() const
{
	unsigned value = {};
	check(shim()->get_MaterialGroupId(&value));
	return value;
}

template <typename T> Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup impl_IPrinting3DTexture2CoordMaterialGroupFactory<T>::Create(unsigned const MaterialGroupId) const
{
	Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup result = nullptr;
	check(shim()->abi_Create(MaterialGroupId, put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterial> impl_IPrinting3DTexture2CoordMaterialGroup<T>::Texture2Coords() const
{
	Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterial> value;
	check(shim()->get_Texture2Coords(put(value)));
	return value;
}

template <typename T> unsigned impl_IPrinting3DTexture2CoordMaterialGroup<T>::MaterialGroupId() const
{
	unsigned value = {};
	check(shim()->get_MaterialGroupId(&value));
	return value;
}

template <typename T> Windows::Graphics::Printing3D::Printing3DModelTexture impl_IPrinting3DTexture2CoordMaterialGroup2<T>::Texture() const
{
	Windows::Graphics::Printing3D::Printing3DModelTexture value = nullptr;
	check(shim()->get_Texture(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3DTexture2CoordMaterialGroup2<T>::Texture(Windows::Graphics::Printing3D::Printing3DModelTexture const & value) const
{
	check(shim()->put_Texture(get(value)));
}

template <typename T> Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup impl_IPrinting3DCompositeMaterialGroupFactory<T>::Create(unsigned const MaterialGroupId) const
{
	Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup result = nullptr;
	check(shim()->abi_Create(MaterialGroupId, put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DCompositeMaterial> impl_IPrinting3DCompositeMaterialGroup<T>::Composites() const
{
	Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DCompositeMaterial> value;
	check(shim()->get_Composites(put(value)));
	return value;
}

template <typename T> unsigned impl_IPrinting3DCompositeMaterialGroup<T>::MaterialGroupId() const
{
	unsigned value = {};
	check(shim()->get_MaterialGroupId(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<unsigned> impl_IPrinting3DCompositeMaterialGroup<T>::MaterialIndices() const
{
	Windows::Foundation::Collections::IVector<unsigned> value;
	check(shim()->get_MaterialIndices(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterialGroup impl_IPrinting3DMultiplePropertyMaterialGroupFactory<T>::Create(unsigned const MaterialGroupId) const
{
	Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterialGroup result = nullptr;
	check(shim()->abi_Create(MaterialGroupId, put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterial> impl_IPrinting3DMultiplePropertyMaterialGroup<T>::MultipleProperties() const
{
	Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterial> value;
	check(shim()->get_MultipleProperties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<unsigned> impl_IPrinting3DMultiplePropertyMaterialGroup<T>::MaterialGroupIndices() const
{
	Windows::Foundation::Collections::IVector<unsigned> value;
	check(shim()->get_MaterialGroupIndices(put(value)));
	return value;
}

template <typename T> unsigned impl_IPrinting3DMultiplePropertyMaterialGroup<T>::MaterialGroupId() const
{
	unsigned value = {};
	check(shim()->get_MaterialGroupId(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DBaseMaterialGroup> impl_IPrinting3DMaterial<T>::BaseGroups() const
{
	Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DBaseMaterialGroup> value;
	check(shim()->get_BaseGroups(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DColorMaterialGroup> impl_IPrinting3DMaterial<T>::ColorGroups() const
{
	Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DColorMaterialGroup> value;
	check(shim()->get_ColorGroups(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup> impl_IPrinting3DMaterial<T>::Texture2CoordGroups() const
{
	Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DTexture2CoordMaterialGroup> value;
	check(shim()->get_Texture2CoordGroups(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup> impl_IPrinting3DMaterial<T>::CompositeGroups() const
{
	Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DCompositeMaterialGroup> value;
	check(shim()->get_CompositeGroups(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterialGroup> impl_IPrinting3DMaterial<T>::MultiplePropertyGroups() const
{
	Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DMultiplePropertyMaterialGroup> value;
	check(shim()->get_MultiplePropertyGroups(put(value)));
	return value;
}

template <typename T> bool impl_IPrinting3DMeshVerificationResult<T>::IsValid() const
{
	bool value = {};
	check(shim()->get_IsValid(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IPrinting3DMeshVerificationResult<T>::NonmanifoldTriangles() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_NonmanifoldTriangles(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IPrinting3DMeshVerificationResult<T>::ReversedNormalTriangles() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_ReversedNormalTriangles(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing3D::Printing3DModelUnit impl_IPrinting3DModel<T>::Unit() const
{
	Windows::Graphics::Printing3D::Printing3DModelUnit value = {};
	check(shim()->get_Unit(&value));
	return value;
}

template <typename T> void impl_IPrinting3DModel<T>::Unit(Windows::Graphics::Printing3D::Printing3DModelUnit const value) const
{
	check(shim()->put_Unit(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DModelTexture> impl_IPrinting3DModel<T>::Textures() const
{
	Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DModelTexture> value;
	check(shim()->get_Textures(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DMesh> impl_IPrinting3DModel<T>::Meshes() const
{
	Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DMesh> value;
	check(shim()->get_Meshes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DComponent> impl_IPrinting3DModel<T>::Components() const
{
	Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DComponent> value;
	check(shim()->get_Components(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing3D::Printing3DMaterial impl_IPrinting3DModel<T>::Material() const
{
	Windows::Graphics::Printing3D::Printing3DMaterial value = nullptr;
	check(shim()->get_Material(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3DModel<T>::Material(Windows::Graphics::Printing3D::Printing3DMaterial const & value) const
{
	check(shim()->put_Material(get(value)));
}

template <typename T> Windows::Graphics::Printing3D::Printing3DComponent impl_IPrinting3DModel<T>::Build() const
{
	Windows::Graphics::Printing3D::Printing3DComponent value = nullptr;
	check(shim()->get_Build(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3DModel<T>::Build(Windows::Graphics::Printing3D::Printing3DComponent const & value) const
{
	check(shim()->put_Build(get(value)));
}

template <typename T> String impl_IPrinting3DModel<T>::Version() const
{
	String value;
	check(shim()->get_Version(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3DModel<T>::Version(StringReference const & value) const
{
	check(shim()->put_Version(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IPrinting3DModel<T>::RequiredExtensions() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_RequiredExtensions(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IPrinting3DModel<T>::Metadata() const
{
	Windows::Foundation::Collections::IMap<String, String> value;
	check(shim()->get_Metadata(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPrinting3DModel<T>::RepairAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_RepairAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Graphics::Printing3D::Printing3DModel impl_IPrinting3DModel<T>::Clone() const
{
	Windows::Graphics::Printing3D::Printing3DModel value = nullptr;
	check(shim()->abi_Clone(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Printing3D::Printing3D3MFPackage> impl_IPrinting3D3MFPackageStatics<T>::LoadAsync(Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Printing3D::Printing3D3MFPackage> operation;
	check(shim()->abi_LoadAsync(get(value), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> impl_IPrinting3D3MFPackage<T>::SaveAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> operation;
	check(shim()->abi_SaveAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_IPrinting3D3MFPackage<T>::PrintTicket() const
{
	Windows::Storage::Streams::IRandomAccessStream value;
	check(shim()->get_PrintTicket(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3D3MFPackage<T>::PrintTicket(Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	check(shim()->put_PrintTicket(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_IPrinting3D3MFPackage<T>::ModelPart() const
{
	Windows::Storage::Streams::IRandomAccessStream value;
	check(shim()->get_ModelPart(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3D3MFPackage<T>::ModelPart(Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	check(shim()->put_ModelPart(get(value)));
}

template <typename T> Windows::Graphics::Printing3D::Printing3DTextureResource impl_IPrinting3D3MFPackage<T>::Thumbnail() const
{
	Windows::Graphics::Printing3D::Printing3DTextureResource value = nullptr;
	check(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> void impl_IPrinting3D3MFPackage<T>::Thumbnail(Windows::Graphics::Printing3D::Printing3DTextureResource const & value) const
{
	check(shim()->put_Thumbnail(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DTextureResource> impl_IPrinting3D3MFPackage<T>::Textures() const
{
	Windows::Foundation::Collections::IVector<Windows::Graphics::Printing3D::Printing3DTextureResource> value;
	check(shim()->get_Textures(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Printing3D::Printing3DModel> impl_IPrinting3D3MFPackage<T>::LoadModelFromPackageAsync(Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Printing3D::Printing3DModel> operation;
	check(shim()->abi_LoadModelFromPackageAsync(get(value), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPrinting3D3MFPackage<T>::SaveModelToPackageAsync(Windows::Graphics::Printing3D::Printing3DModel const & value) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_SaveModelToPackageAsync(get(value), put(operation)));
	return operation;
}

}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Printing { namespace OptionDetails {

template <typename T> String impl_IPrintOptionDetails<T>::OptionId() const
{
	String value;
	check(shim()->get_OptionId(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing::OptionDetails::PrintOptionType impl_IPrintOptionDetails<T>::OptionType() const
{
	Windows::Graphics::Printing::OptionDetails::PrintOptionType value = {};
	check(shim()->get_OptionType(&value));
	return value;
}

template <typename T> void impl_IPrintOptionDetails<T>::ErrorText(StringReference const & value) const
{
	check(shim()->put_ErrorText(get(value)));
}

template <typename T> String impl_IPrintOptionDetails<T>::ErrorText() const
{
	String value;
	check(shim()->get_ErrorText(put(value)));
	return value;
}

template <typename T> void impl_IPrintOptionDetails<T>::State(Windows::Graphics::Printing::OptionDetails::PrintOptionStates const value) const
{
	check(shim()->put_State(value));
}

template <typename T> Windows::Graphics::Printing::OptionDetails::PrintOptionStates impl_IPrintOptionDetails<T>::State() const
{
	Windows::Graphics::Printing::OptionDetails::PrintOptionStates value = {};
	check(shim()->get_State(&value));
	return value;
}

template <typename T> IInspectable impl_IPrintOptionDetails<T>::Value() const
{
	IInspectable value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> bool impl_IPrintOptionDetails<T>::TrySetValue(IInspectable const & value) const
{
	bool succeeded = {};
	check(shim()->abi_TrySetValue(get(value), put(succeeded)));
	return succeeded;
}

template <typename T> unsigned impl_IPrintNumberOptionDetails<T>::MinValue() const
{
	unsigned value = {};
	check(shim()->get_MinValue(&value));
	return value;
}

template <typename T> unsigned impl_IPrintNumberOptionDetails<T>::MaxValue() const
{
	unsigned value = {};
	check(shim()->get_MaxValue(&value));
	return value;
}

template <typename T> unsigned impl_IPrintTextOptionDetails<T>::MaxCharacters() const
{
	unsigned value = {};
	check(shim()->get_MaxCharacters(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<IInspectable> impl_IPrintItemListOptionDetails<T>::Items() const
{
	Windows::Foundation::Collections::IVectorView<IInspectable> value;
	check(shim()->get_Items(put(value)));
	return value;
}

template <typename T> void impl_IPrintCustomOptionDetails<T>::DisplayName(StringReference const & value) const
{
	check(shim()->put_DisplayName(get(value)));
}

template <typename T> String impl_IPrintCustomOptionDetails<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IPrintCustomTextOptionDetails<T>::MaxCharacters(unsigned const value) const
{
	check(shim()->put_MaxCharacters(value));
}

template <typename T> unsigned impl_IPrintCustomTextOptionDetails<T>::MaxCharacters() const
{
	unsigned value = {};
	check(shim()->get_MaxCharacters(&value));
	return value;
}

template <typename T> String impl_IPrintCustomItemDetails<T>::ItemId() const
{
	String value;
	check(shim()->get_ItemId(put(value)));
	return value;
}

template <typename T> void impl_IPrintCustomItemDetails<T>::ItemDisplayName(StringReference const & value) const
{
	check(shim()->put_ItemDisplayName(get(value)));
}

template <typename T> String impl_IPrintCustomItemDetails<T>::ItemDisplayName() const
{
	String value;
	check(shim()->get_ItemDisplayName(put(value)));
	return value;
}

template <typename T> void impl_IPrintCustomItemListOptionDetails<T>::AddItem(StringReference const & itemId, StringReference const & displayName) const
{
	check(shim()->abi_AddItem(get(itemId), get(displayName)));
}

template <typename T> IInspectable impl_IPrintTaskOptionChangedEventArgs<T>::OptionId() const
{
	IInspectable value;
	check(shim()->get_OptionId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails> impl_IPrintTaskOptionDetails<T>::Options() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::Graphics::Printing::OptionDetails::IPrintOptionDetails> value;
	check(shim()->get_Options(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Printing::OptionDetails::PrintCustomItemListOptionDetails impl_IPrintTaskOptionDetails<T>::CreateItemListOption(StringReference const & optionId, StringReference const & displayName) const
{
	Windows::Graphics::Printing::OptionDetails::PrintCustomItemListOptionDetails itemListOption = nullptr;
	check(shim()->abi_CreateItemListOption(get(optionId), get(displayName), put(itemListOption)));
	return itemListOption;
}

template <typename T> Windows::Graphics::Printing::OptionDetails::PrintCustomTextOptionDetails impl_IPrintTaskOptionDetails<T>::CreateTextOption(StringReference const & optionId, StringReference const & displayName) const
{
	Windows::Graphics::Printing::OptionDetails::PrintCustomTextOptionDetails textOption = nullptr;
	check(shim()->abi_CreateTextOption(get(optionId), get(displayName), put(textOption)));
	return textOption;
}

template <typename T> long long impl_IPrintTaskOptionDetails<T>::OptionChanged(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails, Windows::Graphics::Printing::OptionDetails::PrintTaskOptionChangedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_OptionChanged(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IPrintTaskOptionDetails<T>::OptionChanged(F eventHandler) const
{
	return OptionChanged(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails, Windows::Graphics::Printing::OptionDetails::PrintTaskOptionChangedEventArgs>(eventHandler));
}

template <typename T> void impl_IPrintTaskOptionDetails<T>::OptionChanged(long long const eventCookie) const
{
	check(shim()->remove_OptionChanged(eventCookie));
}

template <typename T> long long impl_IPrintTaskOptionDetails<T>::BeginValidation(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails, IInspectable> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_BeginValidation(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IPrintTaskOptionDetails<T>::BeginValidation(F eventHandler) const
{
	return BeginValidation(Windows::Foundation::TypedEventHandler<Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails, IInspectable>(eventHandler));
}

template <typename T> void impl_IPrintTaskOptionDetails<T>::BeginValidation(long long const eventCookie) const
{
	check(shim()->remove_BeginValidation(eventCookie));
}

template <typename T> Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails impl_IPrintTaskOptionDetailsStatic<T>::GetFromPrintTaskOptions(Windows::Graphics::Printing::PrintTaskOptions const & printTaskOptions) const
{
	Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails printTaskOptionDetails = nullptr;
	check(shim()->abi_GetFromPrintTaskOptions(get(printTaskOptions), put(printTaskOptionDetails)));
	return printTaskOptionDetails;
}

}}}}}

namespace winrt { namespace Windows { namespace Management { namespace Core {

template <typename T> Windows::Storage::ApplicationData impl_IApplicationDataManagerStatics<T>::CreateForPackageFamily(StringReference const & packageFamilyName) const
{
	Windows::Storage::ApplicationData applicationData = nullptr;
	check(shim()->abi_CreateForPackageFamily(get(packageFamilyName), put(applicationData)));
	return applicationData;
}

}}}}

namespace winrt { namespace Windows { namespace Management { namespace Deployment {

template <typename T> String impl_IDeploymentResult<T>::ErrorText() const
{
	String value;
	check(shim()->get_ErrorText(put(value)));
	return value;
}

template <typename T> GUID impl_IDeploymentResult<T>::ActivityId() const
{
	GUID value = {};
	check(shim()->get_ActivityId(&value));
	return value;
}

template <typename T> HRESULT impl_IDeploymentResult<T>::ExtendedErrorCode() const
{
	HRESULT value = {};
	check(shim()->get_ExtendedErrorCode(&value));
	return value;
}

template <typename T> String impl_IPackageUserInformation<T>::UserSecurityId() const
{
	String value;
	check(shim()->get_UserSecurityId(put(value)));
	return value;
}

template <typename T> Windows::Management::Deployment::PackageInstallState impl_IPackageUserInformation<T>::InstallState() const
{
	Windows::Management::Deployment::PackageInstallState value = {};
	check(shim()->get_InstallState(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager<T>::AddPackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions const deploymentOptions) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_AddPackageAsync(get(packageUri), get(dependencyPackageUris), deploymentOptions, put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager<T>::UpdatePackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions const deploymentOptions) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_UpdatePackageAsync(get(packageUri), get(dependencyPackageUris), deploymentOptions, put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager<T>::RemovePackageAsync(StringReference const & packageFullName) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_RemovePackageAsync(get(packageFullName), put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager<T>::StagePackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_StagePackageAsync(get(packageUri), get(dependencyPackageUris), put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager<T>::RegisterPackageAsync(Windows::Foundation::Uri const & manifestUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions const deploymentOptions) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_RegisterPackageAsync(get(manifestUri), get(dependencyPackageUris), deploymentOptions, put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackages() const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackages(put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackagesForUser(StringReference const & userSecurityId) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByUserSecurityId(get(userSecurityId), put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackages(StringReference const & packageName, StringReference const & packagePublisher) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByNamePublisher(get(packageName), get(packagePublisher), put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackagesForUser(StringReference const & userSecurityId, StringReference const & packageName, StringReference const & packagePublisher) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByUserSecurityIdNamePublisher(get(userSecurityId), get(packageName), get(packagePublisher), put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::Management::Deployment::PackageUserInformation> impl_IPackageManager<T>::FindUsers(StringReference const & packageFullName) const
{
	Windows::Foundation::Collections::IIterable<Windows::Management::Deployment::PackageUserInformation> users;
	check(shim()->abi_FindUsers(get(packageFullName), put(users)));
	return users;
}

template <typename T> void impl_IPackageManager<T>::SetPackageState(StringReference const & packageFullName, Windows::Management::Deployment::PackageState const packageState) const
{
	check(shim()->abi_SetPackageState(get(packageFullName), packageState));
}

template <typename T> Windows::ApplicationModel::Package impl_IPackageManager<T>::FindPackage(StringReference const & packageFullName) const
{
	Windows::ApplicationModel::Package packageInformation = nullptr;
	check(shim()->abi_FindPackageByPackageFullName(get(packageFullName), put(packageInformation)));
	return packageInformation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager<T>::CleanupPackageForUserAsync(StringReference const & packageName, StringReference const & userSecurityId) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_CleanupPackageForUserAsync(get(packageName), get(userSecurityId), put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackages(StringReference const & packageFamilyName) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByPackageFamilyName(get(packageFamilyName), put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager<T>::FindPackagesForUser(StringReference const & userSecurityId, StringReference const & packageFamilyName) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByUserSecurityIdPackageFamilyName(get(userSecurityId), get(packageFamilyName), put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::ApplicationModel::Package impl_IPackageManager<T>::FindPackageForUser(StringReference const & userSecurityId, StringReference const & packageFullName) const
{
	Windows::ApplicationModel::Package packageInformation = nullptr;
	check(shim()->abi_FindPackageByUserSecurityIdPackageFullName(get(userSecurityId), get(packageFullName), put(packageInformation)));
	return packageInformation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager2<T>::RemovePackageAsync(StringReference const & packageFullName, Windows::Management::Deployment::RemovalOptions const removalOptions) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_RemovePackageWithOptionsAsync(get(packageFullName), removalOptions, put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager2<T>::StagePackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions const deploymentOptions) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_StagePackageWithOptionsAsync(get(packageUri), get(dependencyPackageUris), deploymentOptions, put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager2<T>::RegisterPackageByFullNameAsync(StringReference const & mainPackageFullName, Windows::Foundation::Collections::IIterable<String> const & dependencyPackageFullNames, Windows::Management::Deployment::DeploymentOptions const deploymentOptions) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_RegisterPackageByFullNameAsync(get(mainPackageFullName), get(dependencyPackageFullNames), deploymentOptions, put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesWithPackageTypes(Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesWithPackageTypes(packageTypes, put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesForUserWithPackageTypes(StringReference const & userSecurityId, Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByUserSecurityIdWithPackageTypes(get(userSecurityId), packageTypes, put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesWithPackageTypes(StringReference const & packageName, StringReference const & packagePublisher, Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByNamePublisherWithPackageTypes(get(packageName), get(packagePublisher), packageTypes, put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesForUserWithPackageTypes(StringReference const & userSecurityId, StringReference const & packageName, StringReference const & packagePublisher, Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByUserSecurityIdNamePublisherWithPackageTypes(get(userSecurityId), get(packageName), get(packagePublisher), packageTypes, put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesWithPackageTypes(StringReference const & packageFamilyName, Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByPackageFamilyNameWithPackageTypes(get(packageFamilyName), packageTypes, put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> impl_IPackageManager2<T>::FindPackagesForUserWithPackageTypes(StringReference const & userSecurityId, StringReference const & packageFamilyName, Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByUserSecurityIdPackageFamilyNameWithPackageTypes(get(userSecurityId), get(packageFamilyName), packageTypes, put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager2<T>::StageUserDataAsync(StringReference const & packageFullName) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_StageUserDataAsync(get(packageFullName), put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Management::Deployment::PackageVolume> impl_IPackageManager3<T>::AddPackageVolumeAsync(StringReference const & packageStorePath) const
{
	Windows::Foundation::IAsyncOperation<Windows::Management::Deployment::PackageVolume> packageVolume;
	check(shim()->abi_AddPackageVolumeAsync(get(packageStorePath), put(packageVolume)));
	return packageVolume;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager3<T>::AddPackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions const deploymentOptions, Windows::Management::Deployment::PackageVolume const & targetVolume) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_AddPackageToVolumeAsync(get(packageUri), get(dependencyPackageUris), deploymentOptions, get(targetVolume), put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> void impl_IPackageManager3<T>::ClearPackageStatus(StringReference const & packageFullName, Windows::Management::Deployment::PackageStatus const status) const
{
	check(shim()->abi_ClearPackageStatus(get(packageFullName), status));
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager3<T>::RegisterPackageAsync(Windows::Foundation::Uri const & manifestUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions const deploymentOptions, Windows::Management::Deployment::PackageVolume const & appDataVolume) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_RegisterPackageWithAppDataVolumeAsync(get(manifestUri), get(dependencyPackageUris), deploymentOptions, get(appDataVolume), put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Management::Deployment::PackageVolume impl_IPackageManager3<T>::FindPackageVolume(StringReference const & volumeName) const
{
	Windows::Management::Deployment::PackageVolume volume = nullptr;
	check(shim()->abi_FindPackageVolumeByName(get(volumeName), put(volume)));
	return volume;
}

template <typename T> Windows::Foundation::Collections::IIterable<Windows::Management::Deployment::PackageVolume> impl_IPackageManager3<T>::FindPackageVolumes() const
{
	Windows::Foundation::Collections::IIterable<Windows::Management::Deployment::PackageVolume> volumeCollection;
	check(shim()->abi_FindPackageVolumes(put(volumeCollection)));
	return volumeCollection;
}

template <typename T> Windows::Management::Deployment::PackageVolume impl_IPackageManager3<T>::GetDefaultPackageVolume() const
{
	Windows::Management::Deployment::PackageVolume volume = nullptr;
	check(shim()->abi_GetDefaultPackageVolume(put(volume)));
	return volume;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager3<T>::MovePackageToVolumeAsync(StringReference const & packageFullName, Windows::Management::Deployment::DeploymentOptions const deploymentOptions, Windows::Management::Deployment::PackageVolume const & targetVolume) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_MovePackageToVolumeAsync(get(packageFullName), deploymentOptions, get(targetVolume), put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager3<T>::RemovePackageVolumeAsync(Windows::Management::Deployment::PackageVolume const & volume) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_RemovePackageVolumeAsync(get(volume), put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> void impl_IPackageManager3<T>::SetDefaultPackageVolume(Windows::Management::Deployment::PackageVolume const & volume) const
{
	check(shim()->abi_SetDefaultPackageVolume(get(volume)));
}

template <typename T> void impl_IPackageManager3<T>::SetPackageStatus(StringReference const & packageFullName, Windows::Management::Deployment::PackageStatus const status) const
{
	check(shim()->abi_SetPackageStatus(get(packageFullName), status));
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager3<T>::SetPackageVolumeOfflineAsync(Windows::Management::Deployment::PackageVolume const & packageVolume) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_SetPackageVolumeOfflineAsync(get(packageVolume), put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager3<T>::SetPackageVolumeOnlineAsync(Windows::Management::Deployment::PackageVolume const & packageVolume) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_SetPackageVolumeOnlineAsync(get(packageVolume), put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager3<T>::StagePackageAsync(Windows::Foundation::Uri const & packageUri, Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & dependencyPackageUris, Windows::Management::Deployment::DeploymentOptions const deploymentOptions, Windows::Management::Deployment::PackageVolume const & targetVolume) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_StagePackageToVolumeAsync(get(packageUri), get(dependencyPackageUris), deploymentOptions, get(targetVolume), put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> impl_IPackageManager3<T>::StageUserDataAsync(StringReference const & packageFullName, Windows::Management::Deployment::DeploymentOptions const deploymentOptions) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Management::Deployment::DeploymentResult, winrt::Windows::Management::Deployment::DeploymentProgress> deploymentOperation;
	check(shim()->abi_StageUserDataWithOptionsAsync(get(packageFullName), deploymentOptions, put(deploymentOperation)));
	return deploymentOperation;
}

template <typename T> bool impl_IPackageVolume<T>::IsOffline() const
{
	bool value = {};
	check(shim()->get_IsOffline(put(value)));
	return value;
}

template <typename T> bool impl_IPackageVolume<T>::IsSystemVolume() const
{
	bool value = {};
	check(shim()->get_IsSystemVolume(put(value)));
	return value;
}

template <typename T> String impl_IPackageVolume<T>::MountPoint() const
{
	String value;
	check(shim()->get_MountPoint(put(value)));
	return value;
}

template <typename T> String impl_IPackageVolume<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IPackageVolume<T>::PackageStorePath() const
{
	String value;
	check(shim()->get_PackageStorePath(put(value)));
	return value;
}

template <typename T> bool impl_IPackageVolume<T>::SupportsHardLinks() const
{
	bool value = {};
	check(shim()->get_SupportsHardLinks(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> impl_IPackageVolume<T>::FindPackages() const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackages(put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> impl_IPackageVolume<T>::FindPackages(StringReference const & packageName, StringReference const & packagePublisher) const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByNamePublisher(get(packageName), get(packagePublisher), put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> impl_IPackageVolume<T>::FindPackages(StringReference const & packageFamilyName) const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByPackageFamilyName(get(packageFamilyName), put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> impl_IPackageVolume<T>::FindPackagesWithPackageTypes(Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesWithPackageTypes(packageTypes, put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> impl_IPackageVolume<T>::FindPackagesWithPackageTypes(Windows::Management::Deployment::PackageTypes const packageTypes, StringReference const & packageName, StringReference const & packagePublisher) const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByNamePublisherWithPackagesTypes(packageTypes, get(packageName), get(packagePublisher), put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> impl_IPackageVolume<T>::FindPackagesWithPackageTypes(Windows::Management::Deployment::PackageTypes const packageTypes, StringReference const & packageFamilyName) const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByPackageFamilyNameWithPackageTypes(packageTypes, get(packageFamilyName), put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> impl_IPackageVolume<T>::FindPackage(StringReference const & packageFullName) const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackageByPackageFullName(get(packageFullName), put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> impl_IPackageVolume<T>::FindPackagesForUser(StringReference const & userSecurityId) const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByUserSecurityId(get(userSecurityId), put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> impl_IPackageVolume<T>::FindPackagesForUser(StringReference const & userSecurityId, StringReference const & packageName, StringReference const & packagePublisher) const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByUserSecurityIdNamePublisher(get(userSecurityId), get(packageName), get(packagePublisher), put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> impl_IPackageVolume<T>::FindPackagesForUser(StringReference const & userSecurityId, StringReference const & packageFamilyName) const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByUserSecurityIdPackageFamilyName(get(userSecurityId), get(packageFamilyName), put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> impl_IPackageVolume<T>::FindPackagesForUserWithPackageTypes(StringReference const & userSecurityId, Windows::Management::Deployment::PackageTypes const packageTypes) const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByUserSecurityIdWithPackageTypes(get(userSecurityId), packageTypes, put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> impl_IPackageVolume<T>::FindPackagesForUserWithPackageTypes(StringReference const & userSecurityId, Windows::Management::Deployment::PackageTypes const packageTypes, StringReference const & packageName, StringReference const & packagePublisher) const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByUserSecurityIdNamePublisherWithPackageTypes(get(userSecurityId), packageTypes, get(packageName), get(packagePublisher), put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> impl_IPackageVolume<T>::FindPackagesForUserWithPackageTypes(StringReference const & userSecurityId, Windows::Management::Deployment::PackageTypes const packageTypes, StringReference const & packageFamilyName) const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackagesByUserSecurityIdPackageFamilyNameWithPackagesTypes(get(userSecurityId), packageTypes, get(packageFamilyName), put(packageCollection)));
	return packageCollection;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> impl_IPackageVolume<T>::FindPackageForUser(StringReference const & userSecurityId, StringReference const & packageFullName) const
{
	Windows::Foundation::Collections::IVector<Windows::ApplicationModel::Package> packageCollection;
	check(shim()->abi_FindPackageByUserSecurityIdPackageFullName(get(userSecurityId), get(packageFullName), put(packageCollection)));
	return packageCollection;
}

}}}}

namespace winrt { namespace Windows { namespace Management { namespace Deployment { namespace Preview {

template <typename T> String impl_IInstalledClassicAppInfo<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IInstalledClassicAppInfo<T>::DisplayVersion() const
{
	String value;
	check(shim()->get_DisplayVersion(put(value)));
	return value;
}

template <typename T> Windows::Management::Deployment::Preview::InstalledClassicAppInfo impl_IClassicAppManagerStatics<T>::FindInstalledApp(StringReference const & appUninstallKey) const
{
	Windows::Management::Deployment::Preview::InstalledClassicAppInfo result = nullptr;
	check(shim()->abi_FindInstalledApp(get(appUninstallKey), put(result)));
	return result;
}

}}}}}

namespace winrt { namespace Windows { namespace Management { namespace Orchestration {

template <typename T> Windows::Management::Orchestration::CurrentAppOrchestration impl_ICurrentAppOrchestrationStatics<T>::GetForCurrentView() const
{
	Windows::Management::Orchestration::CurrentAppOrchestration result = nullptr;
	check(shim()->abi_GetForCurrentView(put(result)));
	return result;
}

template <typename T> Windows::Management::Orchestration::SingleAppModeContext impl_ICurrentAppOrchestration<T>::StartSingleAppMode() const
{
	Windows::Management::Orchestration::SingleAppModeContext result = nullptr;
	check(shim()->abi_StartSingleAppMode(put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace Management { namespace Workplace {

template <typename T> bool impl_IMdmAllowPolicyStatics<T>::IsBrowserAllowed() const
{
	bool value = {};
	check(shim()->abi_IsBrowserAllowed(put(value)));
	return value;
}

template <typename T> bool impl_IMdmAllowPolicyStatics<T>::IsCameraAllowed() const
{
	bool value = {};
	check(shim()->abi_IsCameraAllowed(put(value)));
	return value;
}

template <typename T> bool impl_IMdmAllowPolicyStatics<T>::IsMicrosoftAccountAllowed() const
{
	bool value = {};
	check(shim()->abi_IsMicrosoftAccountAllowed(put(value)));
	return value;
}

template <typename T> bool impl_IMdmAllowPolicyStatics<T>::IsStoreAllowed() const
{
	bool value = {};
	check(shim()->abi_IsStoreAllowed(put(value)));
	return value;
}

template <typename T> bool impl_IWorkplaceSettingsStatics<T>::IsMicrosoftAccountOptional() const
{
	bool value = {};
	check(shim()->get_IsMicrosoftAccountOptional(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Media {

template <typename T> Windows::Foundation::Collections::ValueSet impl_IMediaProcessingTriggerDetails<T>::Arguments() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check(shim()->get_Arguments(put(value)));
	return value;
}

template <typename T> Windows::Media::VideoFrame impl_IVideoFrameFactory<T>::Create(Windows::Graphics::Imaging::BitmapPixelFormat const format, int const width, int const height) const
{
	Windows::Media::VideoFrame value = nullptr;
	check(shim()->abi_Create(format, width, height, put(value)));
	return value;
}

template <typename T> Windows::Media::VideoFrame impl_IVideoFrameFactory<T>::CreateWithAlpha(Windows::Graphics::Imaging::BitmapPixelFormat const format, int const width, int const height, Windows::Graphics::Imaging::BitmapAlphaMode const alpha) const
{
	Windows::Media::VideoFrame value = nullptr;
	check(shim()->abi_CreateWithAlpha(format, width, height, alpha, put(value)));
	return value;
}

template <typename T> Windows::Media::AudioFrame impl_IAudioFrameFactory<T>::Create(unsigned const capacity) const
{
	Windows::Media::AudioFrame value = nullptr;
	check(shim()->abi_Create(capacity, put(value)));
	return value;
}

template <typename T> String impl_IMediaFrame<T>::Type() const
{
	String value;
	check(shim()->get_Type(put(value)));
	return value;
}

template <typename T> bool impl_IMediaFrame<T>::IsReadOnly() const
{
	bool value = {};
	check(shim()->get_IsReadOnly(put(value)));
	return value;
}

template <typename T> void impl_IMediaFrame<T>::RelativeTime(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_RelativeTime(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IMediaFrame<T>::RelativeTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_RelativeTime(put(value)));
	return value;
}

template <typename T> void impl_IMediaFrame<T>::SystemRelativeTime(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_SystemRelativeTime(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IMediaFrame<T>::SystemRelativeTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_SystemRelativeTime(put(value)));
	return value;
}

template <typename T> void impl_IMediaFrame<T>::Duration(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_Duration(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IMediaFrame<T>::Duration() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_Duration(put(value)));
	return value;
}

template <typename T> void impl_IMediaFrame<T>::IsDiscontinuous(bool const value) const
{
	check(shim()->put_IsDiscontinuous(value));
}

template <typename T> bool impl_IMediaFrame<T>::IsDiscontinuous() const
{
	bool value = {};
	check(shim()->get_IsDiscontinuous(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IMediaFrame<T>::ExtendedProperties() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check(shim()->get_ExtendedProperties(put(value)));
	return value;
}

template <typename T> Windows::Graphics::Imaging::SoftwareBitmap impl_IVideoFrame<T>::SoftwareBitmap() const
{
	Windows::Graphics::Imaging::SoftwareBitmap value = nullptr;
	check(shim()->get_SoftwareBitmap(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IVideoFrame<T>::CopyToAsync(Windows::Media::VideoFrame const & frame) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_CopyToAsync(get(frame), put(value)));
	return value;
}

template <typename T> Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface impl_IVideoFrame<T>::Direct3DSurface() const
{
	Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface value;
	check(shim()->get_Direct3DSurface(put(value)));
	return value;
}

template <typename T> Windows::Media::AudioBuffer impl_IAudioFrame<T>::LockBuffer(Windows::Media::AudioBufferAccessMode const mode) const
{
	Windows::Media::AudioBuffer value = nullptr;
	check(shim()->abi_LockBuffer(mode, put(value)));
	return value;
}

template <typename T> unsigned impl_IAudioBuffer<T>::Capacity() const
{
	unsigned value = {};
	check(shim()->get_Capacity(&value));
	return value;
}

template <typename T> unsigned impl_IAudioBuffer<T>::Length() const
{
	unsigned value = {};
	check(shim()->get_Length(&value));
	return value;
}

template <typename T> void impl_IAudioBuffer<T>::Length(unsigned const value) const
{
	check(shim()->put_Length(value));
}

template <typename T> long long impl_IMediaControl<T>::SoundLevelChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_SoundLevelChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaControl<T>::SoundLevelChanged(F handler) const
{
	return SoundLevelChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IMediaControl<T>::SoundLevelChanged(long long const cookie) const
{
	check(shim()->remove_SoundLevelChanged(cookie));
}

template <typename T> long long impl_IMediaControl<T>::PlayPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PlayPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaControl<T>::PlayPressed(F handler) const
{
	return PlayPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IMediaControl<T>::PlayPressed(long long const cookie) const
{
	check(shim()->remove_PlayPressed(cookie));
}

template <typename T> long long impl_IMediaControl<T>::PausePressed(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PausePressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaControl<T>::PausePressed(F handler) const
{
	return PausePressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IMediaControl<T>::PausePressed(long long const cookie) const
{
	check(shim()->remove_PausePressed(cookie));
}

template <typename T> long long impl_IMediaControl<T>::StopPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_StopPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaControl<T>::StopPressed(F handler) const
{
	return StopPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IMediaControl<T>::StopPressed(long long const cookie) const
{
	check(shim()->remove_StopPressed(cookie));
}

template <typename T> long long impl_IMediaControl<T>::PlayPauseTogglePressed(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PlayPauseTogglePressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaControl<T>::PlayPauseTogglePressed(F handler) const
{
	return PlayPauseTogglePressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IMediaControl<T>::PlayPauseTogglePressed(long long const cookie) const
{
	check(shim()->remove_PlayPauseTogglePressed(cookie));
}

template <typename T> long long impl_IMediaControl<T>::RecordPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_RecordPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaControl<T>::RecordPressed(F handler) const
{
	return RecordPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IMediaControl<T>::RecordPressed(long long const cookie) const
{
	check(shim()->remove_RecordPressed(cookie));
}

template <typename T> long long impl_IMediaControl<T>::NextTrackPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_NextTrackPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaControl<T>::NextTrackPressed(F handler) const
{
	return NextTrackPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IMediaControl<T>::NextTrackPressed(long long const cookie) const
{
	check(shim()->remove_NextTrackPressed(cookie));
}

template <typename T> long long impl_IMediaControl<T>::PreviousTrackPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PreviousTrackPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaControl<T>::PreviousTrackPressed(F handler) const
{
	return PreviousTrackPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IMediaControl<T>::PreviousTrackPressed(long long const cookie) const
{
	check(shim()->remove_PreviousTrackPressed(cookie));
}

template <typename T> long long impl_IMediaControl<T>::FastForwardPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_FastForwardPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaControl<T>::FastForwardPressed(F handler) const
{
	return FastForwardPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IMediaControl<T>::FastForwardPressed(long long const cookie) const
{
	check(shim()->remove_FastForwardPressed(cookie));
}

template <typename T> long long impl_IMediaControl<T>::RewindPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_RewindPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaControl<T>::RewindPressed(F handler) const
{
	return RewindPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IMediaControl<T>::RewindPressed(long long const cookie) const
{
	check(shim()->remove_RewindPressed(cookie));
}

template <typename T> long long impl_IMediaControl<T>::ChannelUpPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_ChannelUpPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaControl<T>::ChannelUpPressed(F handler) const
{
	return ChannelUpPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IMediaControl<T>::ChannelUpPressed(long long const cookie) const
{
	check(shim()->remove_ChannelUpPressed(cookie));
}

template <typename T> long long impl_IMediaControl<T>::ChannelDownPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_ChannelDownPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaControl<T>::ChannelDownPressed(F handler) const
{
	return ChannelDownPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IMediaControl<T>::ChannelDownPressed(long long const cookie) const
{
	check(shim()->remove_ChannelDownPressed(cookie));
}

template <typename T> Windows::Media::SoundLevel impl_IMediaControl<T>::SoundLevel() const
{
	Windows::Media::SoundLevel value = {};
	check(shim()->get_SoundLevel(&value));
	return value;
}

template <typename T> void impl_IMediaControl<T>::TrackName(StringReference const & value) const
{
	check(shim()->put_TrackName(get(value)));
}

template <typename T> String impl_IMediaControl<T>::TrackName() const
{
	String value;
	check(shim()->get_TrackName(put(value)));
	return value;
}

template <typename T> void impl_IMediaControl<T>::ArtistName(StringReference const & value) const
{
	check(shim()->put_ArtistName(get(value)));
}

template <typename T> String impl_IMediaControl<T>::ArtistName() const
{
	String value;
	check(shim()->get_ArtistName(put(value)));
	return value;
}

template <typename T> void impl_IMediaControl<T>::IsPlaying(bool const value) const
{
	check(shim()->put_IsPlaying(value));
}

template <typename T> bool impl_IMediaControl<T>::IsPlaying() const
{
	bool value = {};
	check(shim()->get_IsPlaying(put(value)));
	return value;
}

template <typename T> void impl_IMediaControl<T>::AlbumArt(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_AlbumArt(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IMediaControl<T>::AlbumArt() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_AlbumArt(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaMarker<T>::Time() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Time(&value));
	return value;
}

template <typename T> String impl_IMediaMarker<T>::MediaMarkerType() const
{
	String value;
	check(shim()->get_MediaMarkerType(put(value)));
	return value;
}

template <typename T> String impl_IMediaMarker<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::IMediaMarker> impl_IMediaMarkers<T>::Markers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::IMediaMarker> value;
	check(shim()->get_Markers(put(value)));
	return value;
}

template <typename T> String impl_IMediaMarkerTypesStatics<T>::Bookmark() const
{
	String value;
	check(shim()->get_Bookmark(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_ISystemMediaTransportControlsTimelineProperties<T>::StartTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_StartTime(&value));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControlsTimelineProperties<T>::StartTime(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_StartTime(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_ISystemMediaTransportControlsTimelineProperties<T>::EndTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_EndTime(&value));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControlsTimelineProperties<T>::EndTime(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_EndTime(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_ISystemMediaTransportControlsTimelineProperties<T>::MinSeekTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_MinSeekTime(&value));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControlsTimelineProperties<T>::MinSeekTime(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_MinSeekTime(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_ISystemMediaTransportControlsTimelineProperties<T>::MaxSeekTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_MaxSeekTime(&value));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControlsTimelineProperties<T>::MaxSeekTime(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_MaxSeekTime(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_ISystemMediaTransportControlsTimelineProperties<T>::Position() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControlsTimelineProperties<T>::Position(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_Position(value));
}

template <typename T> String impl_IMusicDisplayProperties<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IMusicDisplayProperties<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> String impl_IMusicDisplayProperties<T>::AlbumArtist() const
{
	String value;
	check(shim()->get_AlbumArtist(put(value)));
	return value;
}

template <typename T> void impl_IMusicDisplayProperties<T>::AlbumArtist(StringReference const & value) const
{
	check(shim()->put_AlbumArtist(get(value)));
}

template <typename T> String impl_IMusicDisplayProperties<T>::Artist() const
{
	String value;
	check(shim()->get_Artist(put(value)));
	return value;
}

template <typename T> void impl_IMusicDisplayProperties<T>::Artist(StringReference const & value) const
{
	check(shim()->put_Artist(get(value)));
}

template <typename T> String impl_IMusicDisplayProperties2<T>::AlbumTitle() const
{
	String value;
	check(shim()->get_AlbumTitle(put(value)));
	return value;
}

template <typename T> void impl_IMusicDisplayProperties2<T>::AlbumTitle(StringReference const & value) const
{
	check(shim()->put_AlbumTitle(get(value)));
}

template <typename T> unsigned impl_IMusicDisplayProperties2<T>::TrackNumber() const
{
	unsigned value = {};
	check(shim()->get_TrackNumber(&value));
	return value;
}

template <typename T> void impl_IMusicDisplayProperties2<T>::TrackNumber(unsigned const value) const
{
	check(shim()->put_TrackNumber(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IMusicDisplayProperties2<T>::Genres() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Genres(put(value)));
	return value;
}

template <typename T> String impl_IVideoDisplayProperties<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IVideoDisplayProperties<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> String impl_IVideoDisplayProperties<T>::Subtitle() const
{
	String value;
	check(shim()->get_Subtitle(put(value)));
	return value;
}

template <typename T> void impl_IVideoDisplayProperties<T>::Subtitle(StringReference const & value) const
{
	check(shim()->put_Subtitle(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVideoDisplayProperties2<T>::Genres() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Genres(put(value)));
	return value;
}

template <typename T> String impl_IImageDisplayProperties<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IImageDisplayProperties<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> String impl_IImageDisplayProperties<T>::Subtitle() const
{
	String value;
	check(shim()->get_Subtitle(put(value)));
	return value;
}

template <typename T> void impl_IImageDisplayProperties<T>::Subtitle(StringReference const & value) const
{
	check(shim()->put_Subtitle(get(value)));
}

template <typename T> Windows::Media::MediaPlaybackType impl_ISystemMediaTransportControlsDisplayUpdater<T>::Type() const
{
	Windows::Media::MediaPlaybackType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControlsDisplayUpdater<T>::Type(Windows::Media::MediaPlaybackType const value) const
{
	check(shim()->put_Type(value));
}

template <typename T> String impl_ISystemMediaTransportControlsDisplayUpdater<T>::AppMediaId() const
{
	String value;
	check(shim()->get_AppMediaId(put(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControlsDisplayUpdater<T>::AppMediaId(StringReference const & value) const
{
	check(shim()->put_AppMediaId(get(value)));
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_ISystemMediaTransportControlsDisplayUpdater<T>::Thumbnail() const
{
	Windows::Storage::Streams::RandomAccessStreamReference value = nullptr;
	check(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControlsDisplayUpdater<T>::Thumbnail(Windows::Storage::Streams::RandomAccessStreamReference const & value) const
{
	check(shim()->put_Thumbnail(get(value)));
}

template <typename T> Windows::Media::MusicDisplayProperties impl_ISystemMediaTransportControlsDisplayUpdater<T>::MusicProperties() const
{
	Windows::Media::MusicDisplayProperties value = nullptr;
	check(shim()->get_MusicProperties(put(value)));
	return value;
}

template <typename T> Windows::Media::VideoDisplayProperties impl_ISystemMediaTransportControlsDisplayUpdater<T>::VideoProperties() const
{
	Windows::Media::VideoDisplayProperties value = nullptr;
	check(shim()->get_VideoProperties(put(value)));
	return value;
}

template <typename T> Windows::Media::ImageDisplayProperties impl_ISystemMediaTransportControlsDisplayUpdater<T>::ImageProperties() const
{
	Windows::Media::ImageDisplayProperties value = nullptr;
	check(shim()->get_ImageProperties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISystemMediaTransportControlsDisplayUpdater<T>::CopyFromFileAsync(Windows::Media::MediaPlaybackType const type, Windows::Storage::StorageFile const & source) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_CopyFromFileAsync(type, get(source), put(operation)));
	return operation;
}

template <typename T> void impl_ISystemMediaTransportControlsDisplayUpdater<T>::ClearAll() const
{
	check(shim()->abi_ClearAll());
}

template <typename T> void impl_ISystemMediaTransportControlsDisplayUpdater<T>::Update() const
{
	check(shim()->abi_Update());
}

template <typename T> Windows::Media::SystemMediaTransportControlsButton impl_ISystemMediaTransportControlsButtonPressedEventArgs<T>::Button() const
{
	Windows::Media::SystemMediaTransportControlsButton value = {};
	check(shim()->get_Button(&value));
	return value;
}

template <typename T> Windows::Media::SystemMediaTransportControlsProperty impl_ISystemMediaTransportControlsPropertyChangedEventArgs<T>::Property() const
{
	Windows::Media::SystemMediaTransportControlsProperty value = {};
	check(shim()->get_Property(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPlaybackPositionChangeRequestedEventArgs<T>::RequestedPlaybackPosition() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_RequestedPlaybackPosition(&value));
	return value;
}

template <typename T> double impl_IPlaybackRateChangeRequestedEventArgs<T>::RequestedPlaybackRate() const
{
	double value = {};
	check(shim()->get_RequestedPlaybackRate(&value));
	return value;
}

template <typename T> bool impl_IShuffleEnabledChangeRequestedEventArgs<T>::RequestedShuffleEnabled() const
{
	bool value = {};
	check(shim()->get_RequestedShuffleEnabled(put(value)));
	return value;
}

template <typename T> Windows::Media::MediaPlaybackAutoRepeatMode impl_IAutoRepeatModeChangeRequestedEventArgs<T>::RequestedAutoRepeatMode() const
{
	Windows::Media::MediaPlaybackAutoRepeatMode value = {};
	check(shim()->get_RequestedAutoRepeatMode(&value));
	return value;
}

template <typename T> Windows::Media::MediaPlaybackStatus impl_ISystemMediaTransportControls<T>::PlaybackStatus() const
{
	Windows::Media::MediaPlaybackStatus value = {};
	check(shim()->get_PlaybackStatus(&value));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::PlaybackStatus(Windows::Media::MediaPlaybackStatus const value) const
{
	check(shim()->put_PlaybackStatus(value));
}

template <typename T> Windows::Media::SystemMediaTransportControlsDisplayUpdater impl_ISystemMediaTransportControls<T>::DisplayUpdater() const
{
	Windows::Media::SystemMediaTransportControlsDisplayUpdater value = nullptr;
	check(shim()->get_DisplayUpdater(put(value)));
	return value;
}

template <typename T> Windows::Media::SoundLevel impl_ISystemMediaTransportControls<T>::SoundLevel() const
{
	Windows::Media::SoundLevel value = {};
	check(shim()->get_SoundLevel(&value));
	return value;
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsEnabled() const
{
	bool value = {};
	check(shim()->get_IsEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsEnabled(bool const value) const
{
	check(shim()->put_IsEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsPlayEnabled() const
{
	bool value = {};
	check(shim()->get_IsPlayEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsPlayEnabled(bool const value) const
{
	check(shim()->put_IsPlayEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsStopEnabled() const
{
	bool value = {};
	check(shim()->get_IsStopEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsStopEnabled(bool const value) const
{
	check(shim()->put_IsStopEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsPauseEnabled() const
{
	bool value = {};
	check(shim()->get_IsPauseEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsPauseEnabled(bool const value) const
{
	check(shim()->put_IsPauseEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsRecordEnabled() const
{
	bool value = {};
	check(shim()->get_IsRecordEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsRecordEnabled(bool const value) const
{
	check(shim()->put_IsRecordEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsFastForwardEnabled() const
{
	bool value = {};
	check(shim()->get_IsFastForwardEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsFastForwardEnabled(bool const value) const
{
	check(shim()->put_IsFastForwardEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsRewindEnabled() const
{
	bool value = {};
	check(shim()->get_IsRewindEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsRewindEnabled(bool const value) const
{
	check(shim()->put_IsRewindEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsPreviousEnabled() const
{
	bool value = {};
	check(shim()->get_IsPreviousEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsPreviousEnabled(bool const value) const
{
	check(shim()->put_IsPreviousEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsNextEnabled() const
{
	bool value = {};
	check(shim()->get_IsNextEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsNextEnabled(bool const value) const
{
	check(shim()->put_IsNextEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsChannelUpEnabled() const
{
	bool value = {};
	check(shim()->get_IsChannelUpEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsChannelUpEnabled(bool const value) const
{
	check(shim()->put_IsChannelUpEnabled(value));
}

template <typename T> bool impl_ISystemMediaTransportControls<T>::IsChannelDownEnabled() const
{
	bool value = {};
	check(shim()->get_IsChannelDownEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls<T>::IsChannelDownEnabled(bool const value) const
{
	check(shim()->put_IsChannelDownEnabled(value));
}

template <typename T> long long impl_ISystemMediaTransportControls<T>::ButtonPressed(Windows::Foundation::ITypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ButtonPressed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISystemMediaTransportControls<T>::ButtonPressed(F handler) const
{
	return ButtonPressed(Windows::Foundation::TypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::SystemMediaTransportControlsButtonPressedEventArgs>(handler));
}

template <typename T> void impl_ISystemMediaTransportControls<T>::ButtonPressed(long long const token) const
{
	check(shim()->remove_ButtonPressed(token));
}

template <typename T> long long impl_ISystemMediaTransportControls<T>::PropertyChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_PropertyChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISystemMediaTransportControls<T>::PropertyChanged(F handler) const
{
	return PropertyChanged(Windows::Foundation::TypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::SystemMediaTransportControlsPropertyChangedEventArgs>(handler));
}

template <typename T> void impl_ISystemMediaTransportControls<T>::PropertyChanged(long long const token) const
{
	check(shim()->remove_PropertyChanged(token));
}

template <typename T> Windows::Media::MediaPlaybackAutoRepeatMode impl_ISystemMediaTransportControls2<T>::AutoRepeatMode() const
{
	Windows::Media::MediaPlaybackAutoRepeatMode value = {};
	check(shim()->get_AutoRepeatMode(&value));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls2<T>::AutoRepeatMode(Windows::Media::MediaPlaybackAutoRepeatMode const value) const
{
	check(shim()->put_AutoRepeatMode(value));
}

template <typename T> bool impl_ISystemMediaTransportControls2<T>::ShuffleEnabled() const
{
	bool value = {};
	check(shim()->get_ShuffleEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls2<T>::ShuffleEnabled(bool const value) const
{
	check(shim()->put_ShuffleEnabled(value));
}

template <typename T> double impl_ISystemMediaTransportControls2<T>::PlaybackRate() const
{
	double value = {};
	check(shim()->get_PlaybackRate(&value));
	return value;
}

template <typename T> void impl_ISystemMediaTransportControls2<T>::PlaybackRate(double const value) const
{
	check(shim()->put_PlaybackRate(value));
}

template <typename T> void impl_ISystemMediaTransportControls2<T>::UpdateTimelineProperties(Windows::Media::SystemMediaTransportControlsTimelineProperties const & timelineProperties) const
{
	check(shim()->abi_UpdateTimelineProperties(get(timelineProperties)));
}

template <typename T> long long impl_ISystemMediaTransportControls2<T>::PlaybackPositionChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::PlaybackPositionChangeRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_PlaybackPositionChangeRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISystemMediaTransportControls2<T>::PlaybackPositionChangeRequested(F handler) const
{
	return PlaybackPositionChangeRequested(Windows::Foundation::TypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::PlaybackPositionChangeRequestedEventArgs>(handler));
}

template <typename T> void impl_ISystemMediaTransportControls2<T>::PlaybackPositionChangeRequested(long long const token) const
{
	check(shim()->remove_PlaybackPositionChangeRequested(token));
}

template <typename T> long long impl_ISystemMediaTransportControls2<T>::PlaybackRateChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::PlaybackRateChangeRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_PlaybackRateChangeRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISystemMediaTransportControls2<T>::PlaybackRateChangeRequested(F handler) const
{
	return PlaybackRateChangeRequested(Windows::Foundation::TypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::PlaybackRateChangeRequestedEventArgs>(handler));
}

template <typename T> void impl_ISystemMediaTransportControls2<T>::PlaybackRateChangeRequested(long long const token) const
{
	check(shim()->remove_PlaybackRateChangeRequested(token));
}

template <typename T> long long impl_ISystemMediaTransportControls2<T>::ShuffleEnabledChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::ShuffleEnabledChangeRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ShuffleEnabledChangeRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISystemMediaTransportControls2<T>::ShuffleEnabledChangeRequested(F handler) const
{
	return ShuffleEnabledChangeRequested(Windows::Foundation::TypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::ShuffleEnabledChangeRequestedEventArgs>(handler));
}

template <typename T> void impl_ISystemMediaTransportControls2<T>::ShuffleEnabledChangeRequested(long long const token) const
{
	check(shim()->remove_ShuffleEnabledChangeRequested(token));
}

template <typename T> long long impl_ISystemMediaTransportControls2<T>::AutoRepeatModeChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::AutoRepeatModeChangeRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_AutoRepeatModeChangeRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISystemMediaTransportControls2<T>::AutoRepeatModeChangeRequested(F handler) const
{
	return AutoRepeatModeChangeRequested(Windows::Foundation::TypedEventHandler<Windows::Media::SystemMediaTransportControls, Windows::Media::AutoRepeatModeChangeRequestedEventArgs>(handler));
}

template <typename T> void impl_ISystemMediaTransportControls2<T>::AutoRepeatModeChangeRequested(long long const token) const
{
	check(shim()->remove_AutoRepeatModeChangeRequested(token));
}

template <typename T> Windows::Media::SystemMediaTransportControls impl_ISystemMediaTransportControlsStatics<T>::GetForCurrentView() const
{
	Windows::Media::SystemMediaTransportControls mediaControl = nullptr;
	check(shim()->abi_GetForCurrentView(put(mediaControl)));
	return mediaControl;
}

template <typename T> void impl_IMediaExtension<T>::SetProperties(Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(shim()->abi_SetProperties(get(configuration)));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterSchemeHandler(StringReference const & activatableClassId, StringReference const & scheme) const
{
	check(shim()->abi_RegisterSchemeHandler(get(activatableClassId), get(scheme)));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterSchemeHandler(StringReference const & activatableClassId, StringReference const & scheme, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(shim()->abi_RegisterSchemeHandlerWithSettings(get(activatableClassId), get(scheme), get(configuration)));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterByteStreamHandler(StringReference const & activatableClassId, StringReference const & fileExtension, StringReference const & mimeType) const
{
	check(shim()->abi_RegisterByteStreamHandler(get(activatableClassId), get(fileExtension), get(mimeType)));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterByteStreamHandler(StringReference const & activatableClassId, StringReference const & fileExtension, StringReference const & mimeType, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(shim()->abi_RegisterByteStreamHandlerWithSettings(get(activatableClassId), get(fileExtension), get(mimeType), get(configuration)));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterAudioDecoder(StringReference const & activatableClassId, GUID const inputSubtype, GUID const outputSubtype) const
{
	check(shim()->abi_RegisterAudioDecoder(get(activatableClassId), inputSubtype, outputSubtype));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterAudioDecoder(StringReference const & activatableClassId, GUID const inputSubtype, GUID const outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(shim()->abi_RegisterAudioDecoderWithSettings(get(activatableClassId), inputSubtype, outputSubtype, get(configuration)));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterAudioEncoder(StringReference const & activatableClassId, GUID const inputSubtype, GUID const outputSubtype) const
{
	check(shim()->abi_RegisterAudioEncoder(get(activatableClassId), inputSubtype, outputSubtype));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterAudioEncoder(StringReference const & activatableClassId, GUID const inputSubtype, GUID const outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(shim()->abi_RegisterAudioEncoderWithSettings(get(activatableClassId), inputSubtype, outputSubtype, get(configuration)));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterVideoDecoder(StringReference const & activatableClassId, GUID const inputSubtype, GUID const outputSubtype) const
{
	check(shim()->abi_RegisterVideoDecoder(get(activatableClassId), inputSubtype, outputSubtype));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterVideoDecoder(StringReference const & activatableClassId, GUID const inputSubtype, GUID const outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(shim()->abi_RegisterVideoDecoderWithSettings(get(activatableClassId), inputSubtype, outputSubtype, get(configuration)));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterVideoEncoder(StringReference const & activatableClassId, GUID const inputSubtype, GUID const outputSubtype) const
{
	check(shim()->abi_RegisterVideoEncoder(get(activatableClassId), inputSubtype, outputSubtype));
}

template <typename T> void impl_IMediaExtensionManager<T>::RegisterVideoEncoder(StringReference const & activatableClassId, GUID const inputSubtype, GUID const outputSubtype, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(shim()->abi_RegisterVideoEncoderWithSettings(get(activatableClassId), inputSubtype, outputSubtype, get(configuration)));
}

template <typename T> String impl_IVideoEffectsStatics<T>::VideoStabilization() const
{
	String value;
	check(shim()->get_VideoStabilization(put(value)));
	return value;
}

}}}

namespace winrt { namespace Windows { namespace Media { namespace Audio {

template <typename T> Windows::Media::Audio::AudioGraphCreationStatus impl_ICreateAudioGraphResult<T>::Status() const
{
	Windows::Media::Audio::AudioGraphCreationStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Media::Audio::AudioGraph impl_ICreateAudioGraphResult<T>::Graph() const
{
	Windows::Media::Audio::AudioGraph value = nullptr;
	check(shim()->get_Graph(put(value)));
	return value;
}

template <typename T> Windows::Media::Audio::AudioGraphSettings impl_IAudioGraphSettingsFactory<T>::Create(Windows::Media::Render::AudioRenderCategory const audioRenderCategory) const
{
	Windows::Media::Audio::AudioGraphSettings value = nullptr;
	check(shim()->abi_Create(audioRenderCategory, put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IAudioGraphSettings<T>::EncodingProperties() const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value = nullptr;
	check(shim()->get_EncodingProperties(put(value)));
	return value;
}

template <typename T> void impl_IAudioGraphSettings<T>::EncodingProperties(Windows::Media::MediaProperties::AudioEncodingProperties const & value) const
{
	check(shim()->put_EncodingProperties(get(value)));
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IAudioGraphSettings<T>::PrimaryRenderDevice() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check(shim()->get_PrimaryRenderDevice(put(value)));
	return value;
}

template <typename T> void impl_IAudioGraphSettings<T>::PrimaryRenderDevice(Windows::Devices::Enumeration::DeviceInformation const & value) const
{
	check(shim()->put_PrimaryRenderDevice(get(value)));
}

template <typename T> Windows::Media::Audio::QuantumSizeSelectionMode impl_IAudioGraphSettings<T>::QuantumSizeSelectionMode() const
{
	Windows::Media::Audio::QuantumSizeSelectionMode value = {};
	check(shim()->get_QuantumSizeSelectionMode(&value));
	return value;
}

template <typename T> void impl_IAudioGraphSettings<T>::QuantumSizeSelectionMode(Windows::Media::Audio::QuantumSizeSelectionMode const value) const
{
	check(shim()->put_QuantumSizeSelectionMode(value));
}

template <typename T> int impl_IAudioGraphSettings<T>::DesiredSamplesPerQuantum() const
{
	int value = {};
	check(shim()->get_DesiredSamplesPerQuantum(&value));
	return value;
}

template <typename T> void impl_IAudioGraphSettings<T>::DesiredSamplesPerQuantum(int const value) const
{
	check(shim()->put_DesiredSamplesPerQuantum(value));
}

template <typename T> Windows::Media::Render::AudioRenderCategory impl_IAudioGraphSettings<T>::AudioRenderCategory() const
{
	Windows::Media::Render::AudioRenderCategory value = {};
	check(shim()->get_AudioRenderCategory(&value));
	return value;
}

template <typename T> void impl_IAudioGraphSettings<T>::AudioRenderCategory(Windows::Media::Render::AudioRenderCategory const value) const
{
	check(shim()->put_AudioRenderCategory(value));
}

template <typename T> Windows::Media::AudioProcessing impl_IAudioGraphSettings<T>::DesiredRenderDeviceAudioProcessing() const
{
	Windows::Media::AudioProcessing value = {};
	check(shim()->get_DesiredRenderDeviceAudioProcessing(&value));
	return value;
}

template <typename T> void impl_IAudioGraphSettings<T>::DesiredRenderDeviceAudioProcessing(Windows::Media::AudioProcessing const value) const
{
	check(shim()->put_DesiredRenderDeviceAudioProcessing(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioGraphResult> impl_IAudioGraphStatics<T>::CreateAsync(Windows::Media::Audio::AudioGraphSettings const & settings) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioGraphResult> result;
	check(shim()->abi_CreateAsync(get(settings), put(result)));
	return result;
}

template <typename T> Windows::Media::Audio::AudioDeviceNodeCreationStatus impl_ICreateAudioDeviceInputNodeResult<T>::Status() const
{
	Windows::Media::Audio::AudioDeviceNodeCreationStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Media::Audio::AudioDeviceInputNode impl_ICreateAudioDeviceInputNodeResult<T>::DeviceInputNode() const
{
	Windows::Media::Audio::AudioDeviceInputNode value = nullptr;
	check(shim()->get_DeviceInputNode(put(value)));
	return value;
}

template <typename T> Windows::Media::Audio::AudioDeviceNodeCreationStatus impl_ICreateAudioDeviceOutputNodeResult<T>::Status() const
{
	Windows::Media::Audio::AudioDeviceNodeCreationStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Media::Audio::AudioDeviceOutputNode impl_ICreateAudioDeviceOutputNodeResult<T>::DeviceOutputNode() const
{
	Windows::Media::Audio::AudioDeviceOutputNode value = nullptr;
	check(shim()->get_DeviceOutputNode(put(value)));
	return value;
}

template <typename T> Windows::Media::Audio::AudioFileNodeCreationStatus impl_ICreateAudioFileInputNodeResult<T>::Status() const
{
	Windows::Media::Audio::AudioFileNodeCreationStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Media::Audio::AudioFileInputNode impl_ICreateAudioFileInputNodeResult<T>::FileInputNode() const
{
	Windows::Media::Audio::AudioFileInputNode value = nullptr;
	check(shim()->get_FileInputNode(put(value)));
	return value;
}

template <typename T> Windows::Media::Audio::AudioFileNodeCreationStatus impl_ICreateAudioFileOutputNodeResult<T>::Status() const
{
	Windows::Media::Audio::AudioFileNodeCreationStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Media::Audio::AudioFileOutputNode impl_ICreateAudioFileOutputNodeResult<T>::FileOutputNode() const
{
	Windows::Media::Audio::AudioFileOutputNode value = nullptr;
	check(shim()->get_FileOutputNode(put(value)));
	return value;
}

template <typename T> Windows::Media::Audio::AudioGraphUnrecoverableError impl_IAudioGraphUnrecoverableErrorOccurredEventArgs<T>::Error() const
{
	Windows::Media::Audio::AudioGraphUnrecoverableError value = {};
	check(shim()->get_Error(&value));
	return value;
}

template <typename T> Windows::Media::Audio::AudioFrameInputNode impl_IAudioGraph<T>::CreateFrameInputNode() const
{
	Windows::Media::Audio::AudioFrameInputNode frameInputNode = nullptr;
	check(shim()->abi_CreateFrameInputNode(put(frameInputNode)));
	return frameInputNode;
}

template <typename T> Windows::Media::Audio::AudioFrameInputNode impl_IAudioGraph<T>::CreateFrameInputNode(Windows::Media::MediaProperties::AudioEncodingProperties const & encodingProperties) const
{
	Windows::Media::Audio::AudioFrameInputNode frameInputNode = nullptr;
	check(shim()->abi_CreateFrameInputNodeWithFormat(get(encodingProperties), put(frameInputNode)));
	return frameInputNode;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioDeviceInputNodeResult> impl_IAudioGraph<T>::CreateDeviceInputNodeAsync(Windows::Media::Capture::MediaCategory const category) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioDeviceInputNodeResult> result;
	check(shim()->abi_CreateDeviceInputNodeAsync(category, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioDeviceInputNodeResult> impl_IAudioGraph<T>::CreateDeviceInputNodeAsync(Windows::Media::Capture::MediaCategory const category, Windows::Media::MediaProperties::AudioEncodingProperties const & encodingProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioDeviceInputNodeResult> result;
	check(shim()->abi_CreateDeviceInputNodeWithFormatAsync(category, get(encodingProperties), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioDeviceInputNodeResult> impl_IAudioGraph<T>::CreateDeviceInputNodeAsync(Windows::Media::Capture::MediaCategory const category, Windows::Media::MediaProperties::AudioEncodingProperties const & encodingProperties, Windows::Devices::Enumeration::DeviceInformation const & device) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioDeviceInputNodeResult> result;
	check(shim()->abi_CreateDeviceInputNodeWithFormatOnDeviceAsync(category, get(encodingProperties), get(device), put(result)));
	return result;
}

template <typename T> Windows::Media::Audio::AudioFrameOutputNode impl_IAudioGraph<T>::CreateFrameOutputNode() const
{
	Windows::Media::Audio::AudioFrameOutputNode frameOutputNode = nullptr;
	check(shim()->abi_CreateFrameOutputNode(put(frameOutputNode)));
	return frameOutputNode;
}

template <typename T> Windows::Media::Audio::AudioFrameOutputNode impl_IAudioGraph<T>::CreateFrameOutputNode(Windows::Media::MediaProperties::AudioEncodingProperties const & encodingProperties) const
{
	Windows::Media::Audio::AudioFrameOutputNode frameOutputNode = nullptr;
	check(shim()->abi_CreateFrameOutputNodeWithFormat(get(encodingProperties), put(frameOutputNode)));
	return frameOutputNode;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioDeviceOutputNodeResult> impl_IAudioGraph<T>::CreateDeviceOutputNodeAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioDeviceOutputNodeResult> result;
	check(shim()->abi_CreateDeviceOutputNodeAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioFileInputNodeResult> impl_IAudioGraph<T>::CreateFileInputNodeAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioFileInputNodeResult> result;
	check(shim()->abi_CreateFileInputNodeAsync(get(file), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioFileOutputNodeResult> impl_IAudioGraph<T>::CreateFileOutputNodeAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioFileOutputNodeResult> result;
	check(shim()->abi_CreateFileOutputNodeAsync(get(file), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioFileOutputNodeResult> impl_IAudioGraph<T>::CreateFileOutputNodeAsync(Windows::Storage::IStorageFile const & file, Windows::Media::MediaProperties::MediaEncodingProfile const & fileEncodingProfile) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioFileOutputNodeResult> result;
	check(shim()->abi_CreateFileOutputNodeWithFileProfileAsync(get(file), get(fileEncodingProfile), put(result)));
	return result;
}

template <typename T> Windows::Media::Audio::AudioSubmixNode impl_IAudioGraph<T>::CreateSubmixNode() const
{
	Windows::Media::Audio::AudioSubmixNode submixNode = nullptr;
	check(shim()->abi_CreateSubmixNode(put(submixNode)));
	return submixNode;
}

template <typename T> Windows::Media::Audio::AudioSubmixNode impl_IAudioGraph<T>::CreateSubmixNode(Windows::Media::MediaProperties::AudioEncodingProperties const & encodingProperties) const
{
	Windows::Media::Audio::AudioSubmixNode submixNode = nullptr;
	check(shim()->abi_CreateSubmixNodeWithFormat(get(encodingProperties), put(submixNode)));
	return submixNode;
}

template <typename T> void impl_IAudioGraph<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IAudioGraph<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> void impl_IAudioGraph<T>::ResetAllNodes() const
{
	check(shim()->abi_ResetAllNodes());
}

template <typename T> long long impl_IAudioGraph<T>::QuantumStarted(Windows::Foundation::ITypedEventHandler<Windows::Media::Audio::AudioGraph, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_QuantumStarted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAudioGraph<T>::QuantumStarted(F handler) const
{
	return QuantumStarted(Windows::Foundation::TypedEventHandler<Windows::Media::Audio::AudioGraph, IInspectable>(handler));
}

template <typename T> void impl_IAudioGraph<T>::QuantumStarted(long long const token) const
{
	check(shim()->remove_QuantumStarted(token));
}

template <typename T> long long impl_IAudioGraph<T>::QuantumProcessed(Windows::Foundation::ITypedEventHandler<Windows::Media::Audio::AudioGraph, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_QuantumProcessed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAudioGraph<T>::QuantumProcessed(F handler) const
{
	return QuantumProcessed(Windows::Foundation::TypedEventHandler<Windows::Media::Audio::AudioGraph, IInspectable>(handler));
}

template <typename T> void impl_IAudioGraph<T>::QuantumProcessed(long long const token) const
{
	check(shim()->remove_QuantumProcessed(token));
}

template <typename T> long long impl_IAudioGraph<T>::UnrecoverableErrorOccurred(Windows::Foundation::ITypedEventHandler<Windows::Media::Audio::AudioGraph, Windows::Media::Audio::AudioGraphUnrecoverableErrorOccurredEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_UnrecoverableErrorOccurred(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAudioGraph<T>::UnrecoverableErrorOccurred(F handler) const
{
	return UnrecoverableErrorOccurred(Windows::Foundation::TypedEventHandler<Windows::Media::Audio::AudioGraph, Windows::Media::Audio::AudioGraphUnrecoverableErrorOccurredEventArgs>(handler));
}

template <typename T> void impl_IAudioGraph<T>::UnrecoverableErrorOccurred(long long const token) const
{
	check(shim()->remove_UnrecoverableErrorOccurred(token));
}

template <typename T> unsigned long long impl_IAudioGraph<T>::CompletedQuantumCount() const
{
	unsigned long long value = {};
	check(shim()->get_CompletedQuantumCount(&value));
	return value;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IAudioGraph<T>::EncodingProperties() const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value = nullptr;
	check(shim()->get_EncodingProperties(put(value)));
	return value;
}

template <typename T> int impl_IAudioGraph<T>::LatencyInSamples() const
{
	int value = {};
	check(shim()->get_LatencyInSamples(&value));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IAudioGraph<T>::PrimaryRenderDevice() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check(shim()->get_PrimaryRenderDevice(put(value)));
	return value;
}

template <typename T> Windows::Media::AudioProcessing impl_IAudioGraph<T>::RenderDeviceAudioProcessing() const
{
	Windows::Media::AudioProcessing value = {};
	check(shim()->get_RenderDeviceAudioProcessing(&value));
	return value;
}

template <typename T> int impl_IAudioGraph<T>::SamplesPerQuantum() const
{
	int value = {};
	check(shim()->get_SamplesPerQuantum(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Effects::IAudioEffectDefinition> impl_IAudioNode<T>::EffectDefinitions() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Effects::IAudioEffectDefinition> value;
	check(shim()->get_EffectDefinitions(put(value)));
	return value;
}

template <typename T> void impl_IAudioNode<T>::OutgoingGain(double const value) const
{
	check(shim()->put_OutgoingGain(value));
}

template <typename T> double impl_IAudioNode<T>::OutgoingGain() const
{
	double value = {};
	check(shim()->get_OutgoingGain(&value));
	return value;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IAudioNode<T>::EncodingProperties() const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value = nullptr;
	check(shim()->get_EncodingProperties(put(value)));
	return value;
}

template <typename T> bool impl_IAudioNode<T>::ConsumeInput() const
{
	bool value = {};
	check(shim()->get_ConsumeInput(put(value)));
	return value;
}

template <typename T> void impl_IAudioNode<T>::ConsumeInput(bool const value) const
{
	check(shim()->put_ConsumeInput(value));
}

template <typename T> void impl_IAudioNode<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IAudioNode<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> void impl_IAudioNode<T>::Reset() const
{
	check(shim()->abi_Reset());
}

template <typename T> void impl_IAudioNode<T>::DisableEffectsByDefinition(Windows::Media::Effects::IAudioEffectDefinition const & definition) const
{
	check(shim()->abi_DisableEffectsByDefinition(get(definition)));
}

template <typename T> void impl_IAudioNode<T>::EnableEffectsByDefinition(Windows::Media::Effects::IAudioEffectDefinition const & definition) const
{
	check(shim()->abi_EnableEffectsByDefinition(get(definition)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Audio::AudioGraphConnection> impl_IAudioInputNode<T>::OutgoingConnections() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Audio::AudioGraphConnection> value;
	check(shim()->get_OutgoingConnections(put(value)));
	return value;
}

template <typename T> void impl_IAudioInputNode<T>::AddOutgoingConnection(Windows::Media::Audio::IAudioNode const & destination) const
{
	check(shim()->abi_AddOutgoingConnection(get(destination)));
}

template <typename T> void impl_IAudioInputNode<T>::AddOutgoingConnection(Windows::Media::Audio::IAudioNode const & destination, double const gain) const
{
	check(shim()->abi_AddOutgoingConnectionWithGain(get(destination), gain));
}

template <typename T> void impl_IAudioInputNode<T>::RemoveOutgoingConnection(Windows::Media::Audio::IAudioNode const & destination) const
{
	check(shim()->abi_RemoveOutgoingConnection(get(destination)));
}

template <typename T> void impl_IAudioFrameInputNode<T>::PlaybackSpeedFactor(double const value) const
{
	check(shim()->put_PlaybackSpeedFactor(value));
}

template <typename T> double impl_IAudioFrameInputNode<T>::PlaybackSpeedFactor() const
{
	double value = {};
	check(shim()->get_PlaybackSpeedFactor(&value));
	return value;
}

template <typename T> void impl_IAudioFrameInputNode<T>::AddFrame(Windows::Media::AudioFrame const & frame) const
{
	check(shim()->abi_AddFrame(get(frame)));
}

template <typename T> void impl_IAudioFrameInputNode<T>::DiscardQueuedFrames() const
{
	check(shim()->abi_DiscardQueuedFrames());
}

template <typename T> unsigned long long impl_IAudioFrameInputNode<T>::QueuedSampleCount() const
{
	unsigned long long value = {};
	check(shim()->get_QueuedSampleCount(&value));
	return value;
}

template <typename T> long long impl_IAudioFrameInputNode<T>::AudioFrameCompleted(Windows::Foundation::ITypedEventHandler<Windows::Media::Audio::AudioFrameInputNode, Windows::Media::Audio::AudioFrameCompletedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_AudioFrameCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAudioFrameInputNode<T>::AudioFrameCompleted(F handler) const
{
	return AudioFrameCompleted(Windows::Foundation::TypedEventHandler<Windows::Media::Audio::AudioFrameInputNode, Windows::Media::Audio::AudioFrameCompletedEventArgs>(handler));
}

template <typename T> void impl_IAudioFrameInputNode<T>::AudioFrameCompleted(long long const token) const
{
	check(shim()->remove_AudioFrameCompleted(token));
}

template <typename T> long long impl_IAudioFrameInputNode<T>::QuantumStarted(Windows::Foundation::ITypedEventHandler<Windows::Media::Audio::AudioFrameInputNode, Windows::Media::Audio::FrameInputNodeQuantumStartedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_QuantumStarted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAudioFrameInputNode<T>::QuantumStarted(F handler) const
{
	return QuantumStarted(Windows::Foundation::TypedEventHandler<Windows::Media::Audio::AudioFrameInputNode, Windows::Media::Audio::FrameInputNodeQuantumStartedEventArgs>(handler));
}

template <typename T> void impl_IAudioFrameInputNode<T>::QuantumStarted(long long const token) const
{
	check(shim()->remove_QuantumStarted(token));
}

template <typename T> void impl_IAudioFileInputNode<T>::PlaybackSpeedFactor(double const value) const
{
	check(shim()->put_PlaybackSpeedFactor(value));
}

template <typename T> double impl_IAudioFileInputNode<T>::PlaybackSpeedFactor() const
{
	double value = {};
	check(shim()->get_PlaybackSpeedFactor(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IAudioFileInputNode<T>::Position() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> void impl_IAudioFileInputNode<T>::Seek(Windows::Foundation::TimeSpan const & position) const
{
	check(shim()->abi_Seek(position));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IAudioFileInputNode<T>::StartTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_StartTime(put(value)));
	return value;
}

template <typename T> void impl_IAudioFileInputNode<T>::StartTime(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_StartTime(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IAudioFileInputNode<T>::EndTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_EndTime(put(value)));
	return value;
}

template <typename T> void impl_IAudioFileInputNode<T>::EndTime(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_EndTime(get(value)));
}

template <typename T> Windows::Foundation::IReference<int> impl_IAudioFileInputNode<T>::LoopCount() const
{
	Windows::Foundation::IReference<int> value;
	check(shim()->get_LoopCount(put(value)));
	return value;
}

template <typename T> void impl_IAudioFileInputNode<T>::LoopCount(Windows::Foundation::IReference<int> const & value) const
{
	check(shim()->put_LoopCount(get(value)));
}

template <typename T> Windows::Foundation::TimeSpan impl_IAudioFileInputNode<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Duration(&value));
	return value;
}

template <typename T> Windows::Storage::StorageFile impl_IAudioFileInputNode<T>::SourceFile() const
{
	Windows::Storage::StorageFile value = nullptr;
	check(shim()->get_SourceFile(put(value)));
	return value;
}

template <typename T> long long impl_IAudioFileInputNode<T>::FileCompleted(Windows::Foundation::ITypedEventHandler<Windows::Media::Audio::AudioFileInputNode, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_FileCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAudioFileInputNode<T>::FileCompleted(F handler) const
{
	return FileCompleted(Windows::Foundation::TypedEventHandler<Windows::Media::Audio::AudioFileInputNode, IInspectable>(handler));
}

template <typename T> void impl_IAudioFileInputNode<T>::FileCompleted(long long const token) const
{
	check(shim()->remove_FileCompleted(token));
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IAudioDeviceInputNode<T>::Device() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check(shim()->get_Device(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DeviceInformation impl_IAudioDeviceOutputNode<T>::Device() const
{
	Windows::Devices::Enumeration::DeviceInformation value = nullptr;
	check(shim()->get_Device(put(value)));
	return value;
}

template <typename T> Windows::Media::AudioFrame impl_IAudioFrameOutputNode<T>::GetFrame() const
{
	Windows::Media::AudioFrame audioFrame = nullptr;
	check(shim()->abi_GetFrame(put(audioFrame)));
	return audioFrame;
}

template <typename T> Windows::Storage::IStorageFile impl_IAudioFileOutputNode<T>::File() const
{
	Windows::Storage::IStorageFile value;
	check(shim()->get_File(put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IAudioFileOutputNode<T>::FileEncodingProfile() const
{
	Windows::Media::MediaProperties::MediaEncodingProfile value = nullptr;
	check(shim()->get_FileEncodingProfile(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Media::Transcoding::TranscodeFailureReason> impl_IAudioFileOutputNode<T>::FinalizeAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Media::Transcoding::TranscodeFailureReason> result;
	check(shim()->abi_FinalizeAsync(put(result)));
	return result;
}

template <typename T> Windows::Media::AudioFrame impl_IAudioFrameCompletedEventArgs<T>::Frame() const
{
	Windows::Media::AudioFrame value = nullptr;
	check(shim()->get_Frame(put(value)));
	return value;
}

template <typename T> int impl_IFrameInputNodeQuantumStartedEventArgs<T>::RequiredSamples() const
{
	int value = {};
	check(shim()->get_RequiredSamples(&value));
	return value;
}

template <typename T> Windows::Media::Audio::IAudioNode impl_IAudioGraphConnection<T>::Destination() const
{
	Windows::Media::Audio::IAudioNode value;
	check(shim()->get_Destination(put(value)));
	return value;
}

template <typename T> void impl_IAudioGraphConnection<T>::Gain(double const value) const
{
	check(shim()->put_Gain(value));
}

template <typename T> double impl_IAudioGraphConnection<T>::Gain() const
{
	double value = {};
	check(shim()->get_Gain(&value));
	return value;
}

template <typename T> double impl_IEqualizerBand<T>::Bandwidth() const
{
	double value = {};
	check(shim()->get_Bandwidth(&value));
	return value;
}

template <typename T> void impl_IEqualizerBand<T>::Bandwidth(double const value) const
{
	check(shim()->put_Bandwidth(value));
}

template <typename T> double impl_IEqualizerBand<T>::FrequencyCenter() const
{
	double value = {};
	check(shim()->get_FrequencyCenter(&value));
	return value;
}

template <typename T> void impl_IEqualizerBand<T>::FrequencyCenter(double const value) const
{
	check(shim()->put_FrequencyCenter(value));
}

template <typename T> double impl_IEqualizerBand<T>::Gain() const
{
	double value = {};
	check(shim()->get_Gain(&value));
	return value;
}

template <typename T> void impl_IEqualizerBand<T>::Gain(double const value) const
{
	check(shim()->put_Gain(value));
}

template <typename T> Windows::Media::Audio::EqualizerEffectDefinition impl_IEqualizerEffectDefinitionFactory<T>::Create(Windows::Media::Audio::AudioGraph const & audioGraph) const
{
	Windows::Media::Audio::EqualizerEffectDefinition value = nullptr;
	check(shim()->abi_Create(get(audioGraph), put(value)));
	return value;
}

template <typename T> Windows::Media::Audio::ReverbEffectDefinition impl_IReverbEffectDefinitionFactory<T>::Create(Windows::Media::Audio::AudioGraph const & audioGraph) const
{
	Windows::Media::Audio::ReverbEffectDefinition value = nullptr;
	check(shim()->abi_Create(get(audioGraph), put(value)));
	return value;
}

template <typename T> Windows::Media::Audio::EchoEffectDefinition impl_IEchoEffectDefinitionFactory<T>::Create(Windows::Media::Audio::AudioGraph const & audioGraph) const
{
	Windows::Media::Audio::EchoEffectDefinition value = nullptr;
	check(shim()->abi_Create(get(audioGraph), put(value)));
	return value;
}

template <typename T> Windows::Media::Audio::LimiterEffectDefinition impl_ILimiterEffectDefinitionFactory<T>::Create(Windows::Media::Audio::AudioGraph const & audioGraph) const
{
	Windows::Media::Audio::LimiterEffectDefinition value = nullptr;
	check(shim()->abi_Create(get(audioGraph), put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Audio::EqualizerBand> impl_IEqualizerEffectDefinition<T>::Bands() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Audio::EqualizerBand> value;
	check(shim()->get_Bands(put(value)));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::WetDryMix(double const value) const
{
	check(shim()->put_WetDryMix(value));
}

template <typename T> double impl_IReverbEffectDefinition<T>::WetDryMix() const
{
	double value = {};
	check(shim()->get_WetDryMix(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::ReflectionsDelay(unsigned const value) const
{
	check(shim()->put_ReflectionsDelay(value));
}

template <typename T> unsigned impl_IReverbEffectDefinition<T>::ReflectionsDelay() const
{
	unsigned value = {};
	check(shim()->get_ReflectionsDelay(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::ReverbDelay(byte const value) const
{
	check(shim()->put_ReverbDelay(value));
}

template <typename T> byte impl_IReverbEffectDefinition<T>::ReverbDelay() const
{
	byte value = {};
	check(shim()->get_ReverbDelay(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::RearDelay(byte const value) const
{
	check(shim()->put_RearDelay(value));
}

template <typename T> byte impl_IReverbEffectDefinition<T>::RearDelay() const
{
	byte value = {};
	check(shim()->get_RearDelay(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::PositionLeft(byte const value) const
{
	check(shim()->put_PositionLeft(value));
}

template <typename T> byte impl_IReverbEffectDefinition<T>::PositionLeft() const
{
	byte value = {};
	check(shim()->get_PositionLeft(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::PositionRight(byte const value) const
{
	check(shim()->put_PositionRight(value));
}

template <typename T> byte impl_IReverbEffectDefinition<T>::PositionRight() const
{
	byte value = {};
	check(shim()->get_PositionRight(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::PositionMatrixLeft(byte const value) const
{
	check(shim()->put_PositionMatrixLeft(value));
}

template <typename T> byte impl_IReverbEffectDefinition<T>::PositionMatrixLeft() const
{
	byte value = {};
	check(shim()->get_PositionMatrixLeft(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::PositionMatrixRight(byte const value) const
{
	check(shim()->put_PositionMatrixRight(value));
}

template <typename T> byte impl_IReverbEffectDefinition<T>::PositionMatrixRight() const
{
	byte value = {};
	check(shim()->get_PositionMatrixRight(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::EarlyDiffusion(byte const value) const
{
	check(shim()->put_EarlyDiffusion(value));
}

template <typename T> byte impl_IReverbEffectDefinition<T>::EarlyDiffusion() const
{
	byte value = {};
	check(shim()->get_EarlyDiffusion(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::LateDiffusion(byte const value) const
{
	check(shim()->put_LateDiffusion(value));
}

template <typename T> byte impl_IReverbEffectDefinition<T>::LateDiffusion() const
{
	byte value = {};
	check(shim()->get_LateDiffusion(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::LowEQGain(byte const value) const
{
	check(shim()->put_LowEQGain(value));
}

template <typename T> byte impl_IReverbEffectDefinition<T>::LowEQGain() const
{
	byte value = {};
	check(shim()->get_LowEQGain(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::LowEQCutoff(byte const value) const
{
	check(shim()->put_LowEQCutoff(value));
}

template <typename T> byte impl_IReverbEffectDefinition<T>::LowEQCutoff() const
{
	byte value = {};
	check(shim()->get_LowEQCutoff(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::HighEQGain(byte const value) const
{
	check(shim()->put_HighEQGain(value));
}

template <typename T> byte impl_IReverbEffectDefinition<T>::HighEQGain() const
{
	byte value = {};
	check(shim()->get_HighEQGain(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::HighEQCutoff(byte const value) const
{
	check(shim()->put_HighEQCutoff(value));
}

template <typename T> byte impl_IReverbEffectDefinition<T>::HighEQCutoff() const
{
	byte value = {};
	check(shim()->get_HighEQCutoff(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::RoomFilterFreq(double const value) const
{
	check(shim()->put_RoomFilterFreq(value));
}

template <typename T> double impl_IReverbEffectDefinition<T>::RoomFilterFreq() const
{
	double value = {};
	check(shim()->get_RoomFilterFreq(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::RoomFilterMain(double const value) const
{
	check(shim()->put_RoomFilterMain(value));
}

template <typename T> double impl_IReverbEffectDefinition<T>::RoomFilterMain() const
{
	double value = {};
	check(shim()->get_RoomFilterMain(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::RoomFilterHF(double const value) const
{
	check(shim()->put_RoomFilterHF(value));
}

template <typename T> double impl_IReverbEffectDefinition<T>::RoomFilterHF() const
{
	double value = {};
	check(shim()->get_RoomFilterHF(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::ReflectionsGain(double const value) const
{
	check(shim()->put_ReflectionsGain(value));
}

template <typename T> double impl_IReverbEffectDefinition<T>::ReflectionsGain() const
{
	double value = {};
	check(shim()->get_ReflectionsGain(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::ReverbGain(double const value) const
{
	check(shim()->put_ReverbGain(value));
}

template <typename T> double impl_IReverbEffectDefinition<T>::ReverbGain() const
{
	double value = {};
	check(shim()->get_ReverbGain(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::DecayTime(double const value) const
{
	check(shim()->put_DecayTime(value));
}

template <typename T> double impl_IReverbEffectDefinition<T>::DecayTime() const
{
	double value = {};
	check(shim()->get_DecayTime(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::Density(double const value) const
{
	check(shim()->put_Density(value));
}

template <typename T> double impl_IReverbEffectDefinition<T>::Density() const
{
	double value = {};
	check(shim()->get_Density(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::RoomSize(double const value) const
{
	check(shim()->put_RoomSize(value));
}

template <typename T> double impl_IReverbEffectDefinition<T>::RoomSize() const
{
	double value = {};
	check(shim()->get_RoomSize(&value));
	return value;
}

template <typename T> void impl_IReverbEffectDefinition<T>::DisableLateField(bool const value) const
{
	check(shim()->put_DisableLateField(value));
}

template <typename T> bool impl_IReverbEffectDefinition<T>::DisableLateField() const
{
	bool value = {};
	check(shim()->get_DisableLateField(put(value)));
	return value;
}

template <typename T> void impl_IEchoEffectDefinition<T>::WetDryMix(double const value) const
{
	check(shim()->put_WetDryMix(value));
}

template <typename T> double impl_IEchoEffectDefinition<T>::WetDryMix() const
{
	double value = {};
	check(shim()->get_WetDryMix(&value));
	return value;
}

template <typename T> void impl_IEchoEffectDefinition<T>::Feedback(double const value) const
{
	check(shim()->put_Feedback(value));
}

template <typename T> double impl_IEchoEffectDefinition<T>::Feedback() const
{
	double value = {};
	check(shim()->get_Feedback(&value));
	return value;
}

template <typename T> void impl_IEchoEffectDefinition<T>::Delay(double const value) const
{
	check(shim()->put_Delay(value));
}

template <typename T> double impl_IEchoEffectDefinition<T>::Delay() const
{
	double value = {};
	check(shim()->get_Delay(&value));
	return value;
}

template <typename T> void impl_ILimiterEffectDefinition<T>::Release(unsigned const value) const
{
	check(shim()->put_Release(value));
}

template <typename T> unsigned impl_ILimiterEffectDefinition<T>::Release() const
{
	unsigned value = {};
	check(shim()->get_Release(&value));
	return value;
}

template <typename T> void impl_ILimiterEffectDefinition<T>::Loudness(unsigned const value) const
{
	check(shim()->put_Loudness(value));
}

template <typename T> unsigned impl_ILimiterEffectDefinition<T>::Loudness() const
{
	unsigned value = {};
	check(shim()->get_Loudness(&value));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Capture {

template <typename T> void impl_IMediaCaptureFailedEventHandler<T>::Invoke(Windows::Media::Capture::MediaCapture const & sender, Windows::Media::Capture::MediaCaptureFailedEventArgs const & errorEventArgs) const
{
	check(shim()->abi_Invoke(get(sender), get(errorEventArgs)));
}

template <typename T> void impl_IRecordLimitationExceededEventHandler<T>::Invoke(Windows::Media::Capture::MediaCapture const & sender) const
{
	check(shim()->abi_Invoke(get(sender)));
}

template <typename T> Windows::Media::Capture::AppCaptureSettings impl_IAppCaptureManagerStatics<T>::GetCurrentSettings() const
{
	Windows::Media::Capture::AppCaptureSettings value = nullptr;
	check(shim()->abi_GetCurrentSettings(put(value)));
	return value;
}

template <typename T> void impl_IAppCaptureManagerStatics<T>::ApplySettings(Windows::Media::Capture::AppCaptureSettings const & appCaptureSettings) const
{
	check(shim()->abi_ApplySettings(get(appCaptureSettings)));
}

template <typename T> void impl_IAppCaptureAlternateShortcutKeys<T>::ToggleGameBarKey(Windows::System::VirtualKey const value) const
{
	check(shim()->put_ToggleGameBarKey(value));
}

template <typename T> Windows::System::VirtualKey impl_IAppCaptureAlternateShortcutKeys<T>::ToggleGameBarKey() const
{
	Windows::System::VirtualKey value = {};
	check(shim()->get_ToggleGameBarKey(&value));
	return value;
}

template <typename T> void impl_IAppCaptureAlternateShortcutKeys<T>::ToggleGameBarKeyModifiers(Windows::System::VirtualKeyModifiers const value) const
{
	check(shim()->put_ToggleGameBarKeyModifiers(value));
}

template <typename T> Windows::System::VirtualKeyModifiers impl_IAppCaptureAlternateShortcutKeys<T>::ToggleGameBarKeyModifiers() const
{
	Windows::System::VirtualKeyModifiers value = {};
	check(shim()->get_ToggleGameBarKeyModifiers(&value));
	return value;
}

template <typename T> void impl_IAppCaptureAlternateShortcutKeys<T>::SaveHistoricalVideoKey(Windows::System::VirtualKey const value) const
{
	check(shim()->put_SaveHistoricalVideoKey(value));
}

template <typename T> Windows::System::VirtualKey impl_IAppCaptureAlternateShortcutKeys<T>::SaveHistoricalVideoKey() const
{
	Windows::System::VirtualKey value = {};
	check(shim()->get_SaveHistoricalVideoKey(&value));
	return value;
}

template <typename T> void impl_IAppCaptureAlternateShortcutKeys<T>::SaveHistoricalVideoKeyModifiers(Windows::System::VirtualKeyModifiers const value) const
{
	check(shim()->put_SaveHistoricalVideoKeyModifiers(value));
}

template <typename T> Windows::System::VirtualKeyModifiers impl_IAppCaptureAlternateShortcutKeys<T>::SaveHistoricalVideoKeyModifiers() const
{
	Windows::System::VirtualKeyModifiers value = {};
	check(shim()->get_SaveHistoricalVideoKeyModifiers(&value));
	return value;
}

template <typename T> void impl_IAppCaptureAlternateShortcutKeys<T>::ToggleRecordingKey(Windows::System::VirtualKey const value) const
{
	check(shim()->put_ToggleRecordingKey(value));
}

template <typename T> Windows::System::VirtualKey impl_IAppCaptureAlternateShortcutKeys<T>::ToggleRecordingKey() const
{
	Windows::System::VirtualKey value = {};
	check(shim()->get_ToggleRecordingKey(&value));
	return value;
}

template <typename T> void impl_IAppCaptureAlternateShortcutKeys<T>::ToggleRecordingKeyModifiers(Windows::System::VirtualKeyModifiers const value) const
{
	check(shim()->put_ToggleRecordingKeyModifiers(value));
}

template <typename T> Windows::System::VirtualKeyModifiers impl_IAppCaptureAlternateShortcutKeys<T>::ToggleRecordingKeyModifiers() const
{
	Windows::System::VirtualKeyModifiers value = {};
	check(shim()->get_ToggleRecordingKeyModifiers(&value));
	return value;
}

template <typename T> void impl_IAppCaptureAlternateShortcutKeys<T>::TakeScreenshotKey(Windows::System::VirtualKey const value) const
{
	check(shim()->put_TakeScreenshotKey(value));
}

template <typename T> Windows::System::VirtualKey impl_IAppCaptureAlternateShortcutKeys<T>::TakeScreenshotKey() const
{
	Windows::System::VirtualKey value = {};
	check(shim()->get_TakeScreenshotKey(&value));
	return value;
}

template <typename T> void impl_IAppCaptureAlternateShortcutKeys<T>::TakeScreenshotKeyModifiers(Windows::System::VirtualKeyModifiers const value) const
{
	check(shim()->put_TakeScreenshotKeyModifiers(value));
}

template <typename T> Windows::System::VirtualKeyModifiers impl_IAppCaptureAlternateShortcutKeys<T>::TakeScreenshotKeyModifiers() const
{
	Windows::System::VirtualKeyModifiers value = {};
	check(shim()->get_TakeScreenshotKeyModifiers(&value));
	return value;
}

template <typename T> void impl_IAppCaptureAlternateShortcutKeys<T>::ToggleRecordingIndicatorKey(Windows::System::VirtualKey const value) const
{
	check(shim()->put_ToggleRecordingIndicatorKey(value));
}

template <typename T> Windows::System::VirtualKey impl_IAppCaptureAlternateShortcutKeys<T>::ToggleRecordingIndicatorKey() const
{
	Windows::System::VirtualKey value = {};
	check(shim()->get_ToggleRecordingIndicatorKey(&value));
	return value;
}

template <typename T> void impl_IAppCaptureAlternateShortcutKeys<T>::ToggleRecordingIndicatorKeyModifiers(Windows::System::VirtualKeyModifiers const value) const
{
	check(shim()->put_ToggleRecordingIndicatorKeyModifiers(value));
}

template <typename T> Windows::System::VirtualKeyModifiers impl_IAppCaptureAlternateShortcutKeys<T>::ToggleRecordingIndicatorKeyModifiers() const
{
	Windows::System::VirtualKeyModifiers value = {};
	check(shim()->get_ToggleRecordingIndicatorKeyModifiers(&value));
	return value;
}

template <typename T> void impl_IAppCaptureAlternateShortcutKeys2<T>::ToggleMicrophoneCaptureKey(Windows::System::VirtualKey const value) const
{
	check(shim()->put_ToggleMicrophoneCaptureKey(value));
}

template <typename T> Windows::System::VirtualKey impl_IAppCaptureAlternateShortcutKeys2<T>::ToggleMicrophoneCaptureKey() const
{
	Windows::System::VirtualKey value = {};
	check(shim()->get_ToggleMicrophoneCaptureKey(&value));
	return value;
}

template <typename T> void impl_IAppCaptureAlternateShortcutKeys2<T>::ToggleMicrophoneCaptureKeyModifiers(Windows::System::VirtualKeyModifiers const value) const
{
	check(shim()->put_ToggleMicrophoneCaptureKeyModifiers(value));
}

template <typename T> Windows::System::VirtualKeyModifiers impl_IAppCaptureAlternateShortcutKeys2<T>::ToggleMicrophoneCaptureKeyModifiers() const
{
	Windows::System::VirtualKeyModifiers value = {};
	check(shim()->get_ToggleMicrophoneCaptureKeyModifiers(&value));
	return value;
}

template <typename T> void impl_IAppCaptureSettings<T>::AppCaptureDestinationFolder(Windows::Storage::StorageFolder const & value) const
{
	check(shim()->put_AppCaptureDestinationFolder(get(value)));
}

template <typename T> Windows::Storage::StorageFolder impl_IAppCaptureSettings<T>::AppCaptureDestinationFolder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_AppCaptureDestinationFolder(put(value)));
	return value;
}

template <typename T> void impl_IAppCaptureSettings<T>::AudioEncodingBitrate(unsigned const value) const
{
	check(shim()->put_AudioEncodingBitrate(value));
}

template <typename T> unsigned impl_IAppCaptureSettings<T>::AudioEncodingBitrate() const
{
	unsigned value = {};
	check(shim()->get_AudioEncodingBitrate(&value));
	return value;
}

template <typename T> void impl_IAppCaptureSettings<T>::IsAudioCaptureEnabled(bool const value) const
{
	check(shim()->put_IsAudioCaptureEnabled(value));
}

template <typename T> bool impl_IAppCaptureSettings<T>::IsAudioCaptureEnabled() const
{
	bool value = {};
	check(shim()->get_IsAudioCaptureEnabled(put(value)));
	return value;
}

template <typename T> void impl_IAppCaptureSettings<T>::CustomVideoEncodingBitrate(unsigned const value) const
{
	check(shim()->put_CustomVideoEncodingBitrate(value));
}

template <typename T> unsigned impl_IAppCaptureSettings<T>::CustomVideoEncodingBitrate() const
{
	unsigned value = {};
	check(shim()->get_CustomVideoEncodingBitrate(&value));
	return value;
}

template <typename T> void impl_IAppCaptureSettings<T>::CustomVideoEncodingHeight(unsigned const value) const
{
	check(shim()->put_CustomVideoEncodingHeight(value));
}

template <typename T> unsigned impl_IAppCaptureSettings<T>::CustomVideoEncodingHeight() const
{
	unsigned value = {};
	check(shim()->get_CustomVideoEncodingHeight(&value));
	return value;
}

template <typename T> void impl_IAppCaptureSettings<T>::CustomVideoEncodingWidth(unsigned const value) const
{
	check(shim()->put_CustomVideoEncodingWidth(value));
}

template <typename T> unsigned impl_IAppCaptureSettings<T>::CustomVideoEncodingWidth() const
{
	unsigned value = {};
	check(shim()->get_CustomVideoEncodingWidth(&value));
	return value;
}

template <typename T> void impl_IAppCaptureSettings<T>::HistoricalBufferLength(unsigned const value) const
{
	check(shim()->put_HistoricalBufferLength(value));
}

template <typename T> unsigned impl_IAppCaptureSettings<T>::HistoricalBufferLength() const
{
	unsigned value = {};
	check(shim()->get_HistoricalBufferLength(&value));
	return value;
}

template <typename T> void impl_IAppCaptureSettings<T>::HistoricalBufferLengthUnit(Windows::Media::Capture::AppCaptureHistoricalBufferLengthUnit const value) const
{
	check(shim()->put_HistoricalBufferLengthUnit(value));
}

template <typename T> Windows::Media::Capture::AppCaptureHistoricalBufferLengthUnit impl_IAppCaptureSettings<T>::HistoricalBufferLengthUnit() const
{
	Windows::Media::Capture::AppCaptureHistoricalBufferLengthUnit value = {};
	check(shim()->get_HistoricalBufferLengthUnit(&value));
	return value;
}

template <typename T> void impl_IAppCaptureSettings<T>::IsHistoricalCaptureEnabled(bool const value) const
{
	check(shim()->put_IsHistoricalCaptureEnabled(value));
}

template <typename T> bool impl_IAppCaptureSettings<T>::IsHistoricalCaptureEnabled() const
{
	bool value = {};
	check(shim()->get_IsHistoricalCaptureEnabled(put(value)));
	return value;
}

template <typename T> void impl_IAppCaptureSettings<T>::IsHistoricalCaptureOnBatteryAllowed(bool const value) const
{
	check(shim()->put_IsHistoricalCaptureOnBatteryAllowed(value));
}

template <typename T> bool impl_IAppCaptureSettings<T>::IsHistoricalCaptureOnBatteryAllowed() const
{
	bool value = {};
	check(shim()->get_IsHistoricalCaptureOnBatteryAllowed(put(value)));
	return value;
}

template <typename T> void impl_IAppCaptureSettings<T>::IsHistoricalCaptureOnWirelessDisplayAllowed(bool const value) const
{
	check(shim()->put_IsHistoricalCaptureOnWirelessDisplayAllowed(value));
}

template <typename T> bool impl_IAppCaptureSettings<T>::IsHistoricalCaptureOnWirelessDisplayAllowed() const
{
	bool value = {};
	check(shim()->get_IsHistoricalCaptureOnWirelessDisplayAllowed(put(value)));
	return value;
}

template <typename T> void impl_IAppCaptureSettings<T>::MaximumRecordLength(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_MaximumRecordLength(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IAppCaptureSettings<T>::MaximumRecordLength() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_MaximumRecordLength(&value));
	return value;
}

template <typename T> void impl_IAppCaptureSettings<T>::ScreenshotDestinationFolder(Windows::Storage::StorageFolder const & value) const
{
	check(shim()->put_ScreenshotDestinationFolder(get(value)));
}

template <typename T> Windows::Storage::StorageFolder impl_IAppCaptureSettings<T>::ScreenshotDestinationFolder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_ScreenshotDestinationFolder(put(value)));
	return value;
}

template <typename T> void impl_IAppCaptureSettings<T>::VideoEncodingBitrateMode(Windows::Media::Capture::AppCaptureVideoEncodingBitrateMode const value) const
{
	check(shim()->put_VideoEncodingBitrateMode(value));
}

template <typename T> Windows::Media::Capture::AppCaptureVideoEncodingBitrateMode impl_IAppCaptureSettings<T>::VideoEncodingBitrateMode() const
{
	Windows::Media::Capture::AppCaptureVideoEncodingBitrateMode value = {};
	check(shim()->get_VideoEncodingBitrateMode(&value));
	return value;
}

template <typename T> void impl_IAppCaptureSettings<T>::VideoEncodingResolutionMode(Windows::Media::Capture::AppCaptureVideoEncodingResolutionMode const value) const
{
	check(shim()->put_VideoEncodingResolutionMode(value));
}

template <typename T> Windows::Media::Capture::AppCaptureVideoEncodingResolutionMode impl_IAppCaptureSettings<T>::VideoEncodingResolutionMode() const
{
	Windows::Media::Capture::AppCaptureVideoEncodingResolutionMode value = {};
	check(shim()->get_VideoEncodingResolutionMode(&value));
	return value;
}

template <typename T> void impl_IAppCaptureSettings<T>::IsAppCaptureEnabled(bool const value) const
{
	check(shim()->put_IsAppCaptureEnabled(value));
}

template <typename T> bool impl_IAppCaptureSettings<T>::IsAppCaptureEnabled() const
{
	bool value = {};
	check(shim()->get_IsAppCaptureEnabled(put(value)));
	return value;
}

template <typename T> bool impl_IAppCaptureSettings<T>::IsCpuConstrained() const
{
	bool value = {};
	check(shim()->get_IsCpuConstrained(put(value)));
	return value;
}

template <typename T> bool impl_IAppCaptureSettings<T>::IsDisabledByPolicy() const
{
	bool value = {};
	check(shim()->get_IsDisabledByPolicy(put(value)));
	return value;
}

template <typename T> bool impl_IAppCaptureSettings<T>::IsMemoryConstrained() const
{
	bool value = {};
	check(shim()->get_IsMemoryConstrained(put(value)));
	return value;
}

template <typename T> bool impl_IAppCaptureSettings<T>::HasHardwareEncoder() const
{
	bool value = {};
	check(shim()->get_HasHardwareEncoder(put(value)));
	return value;
}

template <typename T> bool impl_IAppCaptureSettings2<T>::IsGpuConstrained() const
{
	bool value = {};
	check(shim()->get_IsGpuConstrained(put(value)));
	return value;
}

template <typename T> Windows::Media::Capture::AppCaptureAlternateShortcutKeys impl_IAppCaptureSettings2<T>::AlternateShortcutKeys() const
{
	Windows::Media::Capture::AppCaptureAlternateShortcutKeys value = nullptr;
	check(shim()->get_AlternateShortcutKeys(put(value)));
	return value;
}

template <typename T> void impl_IAppCaptureSettings3<T>::IsMicrophoneCaptureEnabled(bool const value) const
{
	check(shim()->put_IsMicrophoneCaptureEnabled(value));
}

template <typename T> bool impl_IAppCaptureSettings3<T>::IsMicrophoneCaptureEnabled() const
{
	bool value = {};
	check(shim()->get_IsMicrophoneCaptureEnabled(put(value)));
	return value;
}

template <typename T> Windows::Media::Capture::CameraCaptureUIPhotoFormat impl_ICameraCaptureUIPhotoCaptureSettings<T>::Format() const
{
	Windows::Media::Capture::CameraCaptureUIPhotoFormat value = {};
	check(shim()->get_Format(&value));
	return value;
}

template <typename T> void impl_ICameraCaptureUIPhotoCaptureSettings<T>::Format(Windows::Media::Capture::CameraCaptureUIPhotoFormat const value) const
{
	check(shim()->put_Format(value));
}

template <typename T> Windows::Media::Capture::CameraCaptureUIMaxPhotoResolution impl_ICameraCaptureUIPhotoCaptureSettings<T>::MaxResolution() const
{
	Windows::Media::Capture::CameraCaptureUIMaxPhotoResolution value = {};
	check(shim()->get_MaxResolution(&value));
	return value;
}

template <typename T> void impl_ICameraCaptureUIPhotoCaptureSettings<T>::MaxResolution(Windows::Media::Capture::CameraCaptureUIMaxPhotoResolution const value) const
{
	check(shim()->put_MaxResolution(value));
}

template <typename T> Windows::Foundation::Size impl_ICameraCaptureUIPhotoCaptureSettings<T>::CroppedSizeInPixels() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_CroppedSizeInPixels(&value));
	return value;
}

template <typename T> void impl_ICameraCaptureUIPhotoCaptureSettings<T>::CroppedSizeInPixels(Windows::Foundation::Size const & value) const
{
	check(shim()->put_CroppedSizeInPixels(value));
}

template <typename T> Windows::Foundation::Size impl_ICameraCaptureUIPhotoCaptureSettings<T>::CroppedAspectRatio() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_CroppedAspectRatio(&value));
	return value;
}

template <typename T> void impl_ICameraCaptureUIPhotoCaptureSettings<T>::CroppedAspectRatio(Windows::Foundation::Size const & value) const
{
	check(shim()->put_CroppedAspectRatio(value));
}

template <typename T> bool impl_ICameraCaptureUIPhotoCaptureSettings<T>::AllowCropping() const
{
	bool value = {};
	check(shim()->get_AllowCropping(put(value)));
	return value;
}

template <typename T> void impl_ICameraCaptureUIPhotoCaptureSettings<T>::AllowCropping(bool const value) const
{
	check(shim()->put_AllowCropping(value));
}

template <typename T> Windows::Media::Capture::CameraCaptureUIVideoFormat impl_ICameraCaptureUIVideoCaptureSettings<T>::Format() const
{
	Windows::Media::Capture::CameraCaptureUIVideoFormat value = {};
	check(shim()->get_Format(&value));
	return value;
}

template <typename T> void impl_ICameraCaptureUIVideoCaptureSettings<T>::Format(Windows::Media::Capture::CameraCaptureUIVideoFormat const value) const
{
	check(shim()->put_Format(value));
}

template <typename T> Windows::Media::Capture::CameraCaptureUIMaxVideoResolution impl_ICameraCaptureUIVideoCaptureSettings<T>::MaxResolution() const
{
	Windows::Media::Capture::CameraCaptureUIMaxVideoResolution value = {};
	check(shim()->get_MaxResolution(&value));
	return value;
}

template <typename T> void impl_ICameraCaptureUIVideoCaptureSettings<T>::MaxResolution(Windows::Media::Capture::CameraCaptureUIMaxVideoResolution const value) const
{
	check(shim()->put_MaxResolution(value));
}

template <typename T> float impl_ICameraCaptureUIVideoCaptureSettings<T>::MaxDurationInSeconds() const
{
	float value = {};
	check(shim()->get_MaxDurationInSeconds(&value));
	return value;
}

template <typename T> void impl_ICameraCaptureUIVideoCaptureSettings<T>::MaxDurationInSeconds(float const value) const
{
	check(shim()->put_MaxDurationInSeconds(value));
}

template <typename T> bool impl_ICameraCaptureUIVideoCaptureSettings<T>::AllowTrimming() const
{
	bool value = {};
	check(shim()->get_AllowTrimming(put(value)));
	return value;
}

template <typename T> void impl_ICameraCaptureUIVideoCaptureSettings<T>::AllowTrimming(bool const value) const
{
	check(shim()->put_AllowTrimming(value));
}

template <typename T> Windows::Media::Capture::CameraCaptureUIPhotoCaptureSettings impl_ICameraCaptureUI<T>::PhotoSettings() const
{
	Windows::Media::Capture::CameraCaptureUIPhotoCaptureSettings value = nullptr;
	check(shim()->get_PhotoSettings(put(value)));
	return value;
}

template <typename T> Windows::Media::Capture::CameraCaptureUIVideoCaptureSettings impl_ICameraCaptureUI<T>::VideoSettings() const
{
	Windows::Media::Capture::CameraCaptureUIVideoCaptureSettings value = nullptr;
	check(shim()->get_VideoSettings(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_ICameraCaptureUI<T>::CaptureFileAsync(Windows::Media::Capture::CameraCaptureUIMode const mode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> asyncInfo;
	check(shim()->abi_CaptureFileAsync(mode, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> void impl_ICameraOptionsUIStatics<T>::Show(Windows::Media::Capture::MediaCapture const & mediaCapture) const
{
	check(shim()->abi_Show(get(mediaCapture)));
}

template <typename T> bool impl_IAppCapture<T>::IsCapturingAudio() const
{
	bool value = {};
	check(shim()->get_IsCapturingAudio(put(value)));
	return value;
}

template <typename T> bool impl_IAppCapture<T>::IsCapturingVideo() const
{
	bool value = {};
	check(shim()->get_IsCapturingVideo(put(value)));
	return value;
}

template <typename T> long long impl_IAppCapture<T>::CapturingChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Capture::AppCapture, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_CapturingChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAppCapture<T>::CapturingChanged(F handler) const
{
	return CapturingChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Capture::AppCapture, IInspectable>(handler));
}

template <typename T> void impl_IAppCapture<T>::CapturingChanged(long long const token) const
{
	check(shim()->remove_CapturingChanged(token));
}

template <typename T> Windows::Media::Capture::AppCapture impl_IAppCaptureStatics<T>::GetForCurrentView() const
{
	Windows::Media::Capture::AppCapture value = nullptr;
	check(shim()->abi_GetForCurrentView(put(value)));
	return value;
}

template <typename T> String impl_IMediaCaptureFailedEventArgs<T>::Message() const
{
	String value;
	check(shim()->get_Message(put(value)));
	return value;
}

template <typename T> unsigned impl_IMediaCaptureFailedEventArgs<T>::Code() const
{
	unsigned value = {};
	check(shim()->get_Code(&value));
	return value;
}

template <typename T> unsigned impl_IMediaCaptureVideoProfileMediaDescription<T>::Width() const
{
	unsigned value = {};
	check(shim()->get_Width(&value));
	return value;
}

template <typename T> unsigned impl_IMediaCaptureVideoProfileMediaDescription<T>::Height() const
{
	unsigned value = {};
	check(shim()->get_Height(&value));
	return value;
}

template <typename T> double impl_IMediaCaptureVideoProfileMediaDescription<T>::FrameRate() const
{
	double value = {};
	check(shim()->get_FrameRate(&value));
	return value;
}

template <typename T> bool impl_IMediaCaptureVideoProfileMediaDescription<T>::IsVariablePhotoSequenceSupported() const
{
	bool value = {};
	check(shim()->get_IsVariablePhotoSequenceSupported(put(value)));
	return value;
}

template <typename T> bool impl_IMediaCaptureVideoProfileMediaDescription<T>::IsHdrVideoSupported() const
{
	bool value = {};
	check(shim()->get_IsHdrVideoSupported(put(value)));
	return value;
}

template <typename T> String impl_IMediaCaptureVideoProfile<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IMediaCaptureVideoProfile<T>::VideoDeviceId() const
{
	String value;
	check(shim()->get_VideoDeviceId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfileMediaDescription> impl_IMediaCaptureVideoProfile<T>::SupportedPreviewMediaDescription() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfileMediaDescription> value;
	check(shim()->get_SupportedPreviewMediaDescription(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfileMediaDescription> impl_IMediaCaptureVideoProfile<T>::SupportedRecordMediaDescription() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfileMediaDescription> value;
	check(shim()->get_SupportedRecordMediaDescription(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfileMediaDescription> impl_IMediaCaptureVideoProfile<T>::SupportedPhotoMediaDescription() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfileMediaDescription> value;
	check(shim()->get_SupportedPhotoMediaDescription(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfile> impl_IMediaCaptureVideoProfile<T>::GetConcurrency() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfile> value;
	check(shim()->abi_GetConcurrency(put(value)));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings<T>::AudioDeviceId(StringReference const & value) const
{
	check(shim()->put_AudioDeviceId(get(value)));
}

template <typename T> String impl_IMediaCaptureInitializationSettings<T>::AudioDeviceId() const
{
	String value;
	check(shim()->get_AudioDeviceId(put(value)));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings<T>::VideoDeviceId(StringReference const & value) const
{
	check(shim()->put_VideoDeviceId(get(value)));
}

template <typename T> String impl_IMediaCaptureInitializationSettings<T>::VideoDeviceId() const
{
	String value;
	check(shim()->get_VideoDeviceId(put(value)));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings<T>::StreamingCaptureMode(Windows::Media::Capture::StreamingCaptureMode const value) const
{
	check(shim()->put_StreamingCaptureMode(value));
}

template <typename T> Windows::Media::Capture::StreamingCaptureMode impl_IMediaCaptureInitializationSettings<T>::StreamingCaptureMode() const
{
	Windows::Media::Capture::StreamingCaptureMode value = {};
	check(shim()->get_StreamingCaptureMode(&value));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings<T>::PhotoCaptureSource(Windows::Media::Capture::PhotoCaptureSource const value) const
{
	check(shim()->put_PhotoCaptureSource(value));
}

template <typename T> Windows::Media::Capture::PhotoCaptureSource impl_IMediaCaptureInitializationSettings<T>::PhotoCaptureSource() const
{
	Windows::Media::Capture::PhotoCaptureSource value = {};
	check(shim()->get_PhotoCaptureSource(&value));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings2<T>::MediaCategory(Windows::Media::Capture::MediaCategory const value) const
{
	check(shim()->put_MediaCategory(value));
}

template <typename T> Windows::Media::Capture::MediaCategory impl_IMediaCaptureInitializationSettings2<T>::MediaCategory() const
{
	Windows::Media::Capture::MediaCategory value = {};
	check(shim()->get_MediaCategory(&value));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings2<T>::AudioProcessing(Windows::Media::AudioProcessing const value) const
{
	check(shim()->put_AudioProcessing(value));
}

template <typename T> Windows::Media::AudioProcessing impl_IMediaCaptureInitializationSettings2<T>::AudioProcessing() const
{
	Windows::Media::AudioProcessing value = {};
	check(shim()->get_AudioProcessing(&value));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings3<T>::AudioSource(Windows::Media::Core::IMediaSource const & value) const
{
	check(shim()->put_AudioSource(get(value)));
}

template <typename T> Windows::Media::Core::IMediaSource impl_IMediaCaptureInitializationSettings3<T>::AudioSource() const
{
	Windows::Media::Core::IMediaSource value;
	check(shim()->get_AudioSource(put(value)));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings3<T>::VideoSource(Windows::Media::Core::IMediaSource const & value) const
{
	check(shim()->put_VideoSource(get(value)));
}

template <typename T> Windows::Media::Core::IMediaSource impl_IMediaCaptureInitializationSettings3<T>::VideoSource() const
{
	Windows::Media::Core::IMediaSource value;
	check(shim()->get_VideoSource(put(value)));
	return value;
}

template <typename T> Windows::Media::Capture::MediaCaptureVideoProfile impl_IMediaCaptureInitializationSettings4<T>::VideoProfile() const
{
	Windows::Media::Capture::MediaCaptureVideoProfile value = nullptr;
	check(shim()->get_VideoProfile(put(value)));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings4<T>::VideoProfile(Windows::Media::Capture::MediaCaptureVideoProfile const & value) const
{
	check(shim()->put_VideoProfile(get(value)));
}

template <typename T> Windows::Media::Capture::MediaCaptureVideoProfileMediaDescription impl_IMediaCaptureInitializationSettings4<T>::PreviewMediaDescription() const
{
	Windows::Media::Capture::MediaCaptureVideoProfileMediaDescription value = nullptr;
	check(shim()->get_PreviewMediaDescription(put(value)));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings4<T>::PreviewMediaDescription(Windows::Media::Capture::MediaCaptureVideoProfileMediaDescription const & value) const
{
	check(shim()->put_PreviewMediaDescription(get(value)));
}

template <typename T> Windows::Media::Capture::MediaCaptureVideoProfileMediaDescription impl_IMediaCaptureInitializationSettings4<T>::RecordMediaDescription() const
{
	Windows::Media::Capture::MediaCaptureVideoProfileMediaDescription value = nullptr;
	check(shim()->get_RecordMediaDescription(put(value)));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings4<T>::RecordMediaDescription(Windows::Media::Capture::MediaCaptureVideoProfileMediaDescription const & value) const
{
	check(shim()->put_RecordMediaDescription(get(value)));
}

template <typename T> Windows::Media::Capture::MediaCaptureVideoProfileMediaDescription impl_IMediaCaptureInitializationSettings4<T>::PhotoMediaDescription() const
{
	Windows::Media::Capture::MediaCaptureVideoProfileMediaDescription value = nullptr;
	check(shim()->get_PhotoMediaDescription(put(value)));
	return value;
}

template <typename T> void impl_IMediaCaptureInitializationSettings4<T>::PhotoMediaDescription(Windows::Media::Capture::MediaCaptureVideoProfileMediaDescription const & value) const
{
	check(shim()->put_PhotoMediaDescription(get(value)));
}

template <typename T> bool impl_IMediaCaptureStatics<T>::IsVideoProfileSupported(StringReference const & videoDeviceId) const
{
	bool value = {};
	check(shim()->abi_IsVideoProfileSupported(get(videoDeviceId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfile> impl_IMediaCaptureStatics<T>::FindAllVideoProfiles(StringReference const & videoDeviceId) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfile> value;
	check(shim()->abi_FindAllVideoProfiles(get(videoDeviceId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfile> impl_IMediaCaptureStatics<T>::FindConcurrentProfiles(StringReference const & videoDeviceId) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfile> value;
	check(shim()->abi_FindConcurrentProfiles(get(videoDeviceId), put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfile> impl_IMediaCaptureStatics<T>::FindKnownVideoProfiles(StringReference const & videoDeviceId, Windows::Media::Capture::KnownVideoProfile const name) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfile> value;
	check(shim()->abi_FindKnownVideoProfiles(get(videoDeviceId), name, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::InitializeAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_InitializeAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::InitializeAsync(Windows::Media::Capture::MediaCaptureInitializationSettings const & mediaCaptureInitializationSettings) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_InitializeWithSettingsAsync(get(mediaCaptureInitializationSettings), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::StartRecordToStorageFileAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_StartRecordToStorageFileAsync(get(encodingProfile), get(file), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::StartRecordToStreamAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_StartRecordToStreamAsync(get(encodingProfile), get(stream), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::StartRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Media::IMediaExtension const & customMediaSink) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_StartRecordToCustomSinkAsync(get(encodingProfile), get(customMediaSink), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::StartRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, StringReference const & customSinkActivationId, Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_StartRecordToCustomSinkIdAsync(get(encodingProfile), get(customSinkActivationId), get(customSinkSettings), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::StopRecordAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_StopRecordAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::CapturePhotoToStorageFileAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type, Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_CapturePhotoToStorageFileAsync(get(type), get(file), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::CapturePhotoToStreamAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type, Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_CapturePhotoToStreamAsync(get(type), get(stream), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::AddEffectAsync(Windows::Media::Capture::MediaStreamType const mediaStreamType, StringReference const & effectActivationID, Windows::Foundation::Collections::IPropertySet const & effectSettings) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_AddEffectAsync(mediaStreamType, get(effectActivationID), get(effectSettings), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture<T>::ClearEffectsAsync(Windows::Media::Capture::MediaStreamType const mediaStreamType) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_ClearEffectsAsync(mediaStreamType, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> void impl_IMediaCapture<T>::SetEncoderProperty(Windows::Media::Capture::MediaStreamType const mediaStreamType, GUID const propertyId, IInspectable const & propertyValue) const
{
	check(shim()->abi_SetEncoderProperty(mediaStreamType, propertyId, get(propertyValue)));
}

template <typename T> IInspectable impl_IMediaCapture<T>::GetEncoderProperty(Windows::Media::Capture::MediaStreamType const mediaStreamType, GUID const propertyId) const
{
	IInspectable propertyValue;
	check(shim()->abi_GetEncoderProperty(mediaStreamType, propertyId, put(propertyValue)));
	return propertyValue;
}

template <typename T> long long impl_IMediaCapture<T>::Failed(Windows::Media::Capture::IMediaCaptureFailedEventHandler const & errorEventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_Failed(get(errorEventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IMediaCapture<T>::Failed(F errorEventHandler) const
{
	return Failed(Windows::Media::Capture::MediaCaptureFailedEventHandler(errorEventHandler));
}

template <typename T> void impl_IMediaCapture<T>::Failed(long long const eventCookie) const
{
	check(shim()->remove_Failed(eventCookie));
}

template <typename T> long long impl_IMediaCapture<T>::RecordLimitationExceeded(Windows::Media::Capture::IRecordLimitationExceededEventHandler const & recordLimitationExceededEventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_RecordLimitationExceeded(get(recordLimitationExceededEventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IMediaCapture<T>::RecordLimitationExceeded(F recordLimitationExceededEventHandler) const
{
	return RecordLimitationExceeded(Windows::Media::Capture::RecordLimitationExceededEventHandler(recordLimitationExceededEventHandler));
}

template <typename T> void impl_IMediaCapture<T>::RecordLimitationExceeded(long long const eventCookie) const
{
	check(shim()->remove_RecordLimitationExceeded(eventCookie));
}

template <typename T> Windows::Media::Capture::MediaCaptureSettings impl_IMediaCapture<T>::MediaCaptureSettings() const
{
	Windows::Media::Capture::MediaCaptureSettings value = nullptr;
	check(shim()->get_MediaCaptureSettings(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::AudioDeviceController impl_IMediaCapture<T>::AudioDeviceController() const
{
	Windows::Media::Devices::AudioDeviceController value = nullptr;
	check(shim()->get_AudioDeviceController(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::VideoDeviceController impl_IMediaCapture<T>::VideoDeviceController() const
{
	Windows::Media::Devices::VideoDeviceController value = nullptr;
	check(shim()->get_VideoDeviceController(put(value)));
	return value;
}

template <typename T> void impl_IMediaCapture<T>::SetPreviewMirroring(bool const value) const
{
	check(shim()->abi_SetPreviewMirroring(value));
}

template <typename T> bool impl_IMediaCapture<T>::GetPreviewMirroring() const
{
	bool value = {};
	check(shim()->abi_GetPreviewMirroring(put(value)));
	return value;
}

template <typename T> void impl_IMediaCapture<T>::SetPreviewRotation(Windows::Media::Capture::VideoRotation const value) const
{
	check(shim()->abi_SetPreviewRotation(value));
}

template <typename T> Windows::Media::Capture::VideoRotation impl_IMediaCapture<T>::GetPreviewRotation() const
{
	Windows::Media::Capture::VideoRotation value = {};
	check(shim()->abi_GetPreviewRotation(&value));
	return value;
}

template <typename T> void impl_IMediaCapture<T>::SetRecordRotation(Windows::Media::Capture::VideoRotation const value) const
{
	check(shim()->abi_SetRecordRotation(value));
}

template <typename T> Windows::Media::Capture::VideoRotation impl_IMediaCapture<T>::GetRecordRotation() const
{
	Windows::Media::Capture::VideoRotation value = {};
	check(shim()->abi_GetRecordRotation(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> impl_IMediaCapture2<T>::PrepareLowLagRecordToStorageFileAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> operation;
	check(shim()->abi_PrepareLowLagRecordToStorageFileAsync(get(encodingProfile), get(file), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> impl_IMediaCapture2<T>::PrepareLowLagRecordToStreamAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> operation;
	check(shim()->abi_PrepareLowLagRecordToStreamAsync(get(encodingProfile), get(stream), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> impl_IMediaCapture2<T>::PrepareLowLagRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Media::IMediaExtension const & customMediaSink) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> operation;
	check(shim()->abi_PrepareLowLagRecordToCustomSinkAsync(get(encodingProfile), get(customMediaSink), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> impl_IMediaCapture2<T>::PrepareLowLagRecordToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, StringReference const & customSinkActivationId, Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagMediaRecording> operation;
	check(shim()->abi_PrepareLowLagRecordToCustomSinkIdAsync(get(encodingProfile), get(customSinkActivationId), get(customSinkSettings), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagPhotoCapture> impl_IMediaCapture2<T>::PrepareLowLagPhotoCaptureAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagPhotoCapture> operation;
	check(shim()->abi_PrepareLowLagPhotoCaptureAsync(get(type), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagPhotoSequenceCapture> impl_IMediaCapture2<T>::PrepareLowLagPhotoSequenceCaptureAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::LowLagPhotoSequenceCapture> operation;
	check(shim()->abi_PrepareLowLagPhotoSequenceCaptureAsync(get(type), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture2<T>::SetEncodingPropertiesAsync(Windows::Media::Capture::MediaStreamType const mediaStreamType, Windows::Media::MediaProperties::IMediaEncodingProperties const & mediaEncodingProperties, Windows::Media::MediaProperties::MediaPropertySet const & encoderProperties) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_SetEncodingPropertiesAsync(mediaStreamType, get(mediaEncodingProperties), get(encoderProperties), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::Core::VariablePhotoSequenceCapture> impl_IMediaCapture3<T>::PrepareVariablePhotoSequenceCaptureAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & type) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::Core::VariablePhotoSequenceCapture> operation;
	check(shim()->abi_PrepareVariablePhotoSequenceCaptureAsync(get(type), put(operation)));
	return operation;
}

template <typename T> long long impl_IMediaCapture3<T>::FocusChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Capture::MediaCapture, Windows::Media::Capture::MediaCaptureFocusChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_FocusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaCapture3<T>::FocusChanged(F handler) const
{
	return FocusChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Capture::MediaCapture, Windows::Media::Capture::MediaCaptureFocusChangedEventArgs>(handler));
}

template <typename T> void impl_IMediaCapture3<T>::FocusChanged(long long const token) const
{
	check(shim()->remove_FocusChanged(token));
}

template <typename T> long long impl_IMediaCapture3<T>::PhotoConfirmationCaptured(Windows::Foundation::ITypedEventHandler<Windows::Media::Capture::MediaCapture, Windows::Media::Capture::PhotoConfirmationCapturedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_PhotoConfirmationCaptured(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaCapture3<T>::PhotoConfirmationCaptured(F handler) const
{
	return PhotoConfirmationCaptured(Windows::Foundation::TypedEventHandler<Windows::Media::Capture::MediaCapture, Windows::Media::Capture::PhotoConfirmationCapturedEventArgs>(handler));
}

template <typename T> void impl_IMediaCapture3<T>::PhotoConfirmationCaptured(long long const token) const
{
	check(shim()->remove_PhotoConfirmationCaptured(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::IMediaExtension> impl_IMediaCapture4<T>::AddAudioEffectAsync(Windows::Media::Effects::IAudioEffectDefinition const & definition) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::IMediaExtension> op;
	check(shim()->abi_AddAudioEffectAsync(get(definition), put(op)));
	return op;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::IMediaExtension> impl_IMediaCapture4<T>::AddVideoEffectAsync(Windows::Media::Effects::IVideoEffectDefinition const & definition, Windows::Media::Capture::MediaStreamType const mediaStreamType) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::IMediaExtension> op;
	check(shim()->abi_AddVideoEffectAsync(get(definition), mediaStreamType, put(op)));
	return op;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture4<T>::PauseRecordAsync(Windows::Media::Devices::MediaCapturePauseBehavior const behavior) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_PauseRecordAsync(behavior, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCapture4<T>::ResumeRecordAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_ResumeRecordAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> long long impl_IMediaCapture4<T>::CameraStreamStateChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Capture::MediaCapture, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_CameraStreamStateChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaCapture4<T>::CameraStreamStateChanged(F handler) const
{
	return CameraStreamStateChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Capture::MediaCapture, IInspectable>(handler));
}

template <typename T> void impl_IMediaCapture4<T>::CameraStreamStateChanged(long long const token) const
{
	check(shim()->remove_CameraStreamStateChanged(token));
}

template <typename T> Windows::Media::Devices::CameraStreamState impl_IMediaCapture4<T>::CameraStreamState() const
{
	Windows::Media::Devices::CameraStreamState streamState = {};
	check(shim()->get_CameraStreamState(&streamState));
	return streamState;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::VideoFrame> impl_IMediaCapture4<T>::GetPreviewFrameAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::VideoFrame> operation;
	check(shim()->abi_GetPreviewFrameAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::VideoFrame> impl_IMediaCapture4<T>::GetPreviewFrameAsync(Windows::Media::VideoFrame const & destination) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::VideoFrame> operation;
	check(shim()->abi_GetPreviewFrameCopyAsync(get(destination), put(operation)));
	return operation;
}

template <typename T> long long impl_IMediaCapture4<T>::ThermalStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Capture::MediaCapture, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_ThermalStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaCapture4<T>::ThermalStatusChanged(F handler) const
{
	return ThermalStatusChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Capture::MediaCapture, IInspectable>(handler));
}

template <typename T> void impl_IMediaCapture4<T>::ThermalStatusChanged(long long const token) const
{
	check(shim()->remove_ThermalStatusChanged(token));
}

template <typename T> Windows::Media::Capture::MediaCaptureThermalStatus impl_IMediaCapture4<T>::ThermalStatus() const
{
	Windows::Media::Capture::MediaCaptureThermalStatus value = {};
	check(shim()->get_ThermalStatus(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::AdvancedPhotoCapture> impl_IMediaCapture4<T>::PrepareAdvancedPhotoCaptureAsync(Windows::Media::MediaProperties::ImageEncodingProperties const & encodingProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::AdvancedPhotoCapture> operation;
	check(shim()->abi_PrepareAdvancedPhotoCaptureAsync(get(encodingProperties), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::CapturedPhoto> impl_ILowLagPhotoCapture<T>::CaptureAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::CapturedPhoto> operation;
	check(shim()->abi_CaptureAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILowLagPhotoCapture<T>::FinishAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_FinishAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::AdvancedCapturedPhoto> impl_IAdvancedPhotoCapture<T>::CaptureAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::AdvancedCapturedPhoto> operation;
	check(shim()->abi_CaptureAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Capture::AdvancedCapturedPhoto> impl_IAdvancedPhotoCapture<T>::CaptureAsync(IInspectable const & context) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Capture::AdvancedCapturedPhoto> operation;
	check(shim()->abi_CaptureWithContextAsync(get(context), put(operation)));
	return operation;
}

template <typename T> long long impl_IAdvancedPhotoCapture<T>::OptionalReferencePhotoCaptured(Windows::Foundation::ITypedEventHandler<Windows::Media::Capture::AdvancedPhotoCapture, Windows::Media::Capture::OptionalReferencePhotoCapturedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_OptionalReferencePhotoCaptured(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAdvancedPhotoCapture<T>::OptionalReferencePhotoCaptured(F handler) const
{
	return OptionalReferencePhotoCaptured(Windows::Foundation::TypedEventHandler<Windows::Media::Capture::AdvancedPhotoCapture, Windows::Media::Capture::OptionalReferencePhotoCapturedEventArgs>(handler));
}

template <typename T> void impl_IAdvancedPhotoCapture<T>::OptionalReferencePhotoCaptured(long long const token) const
{
	check(shim()->remove_OptionalReferencePhotoCaptured(token));
}

template <typename T> long long impl_IAdvancedPhotoCapture<T>::AllPhotosCaptured(Windows::Foundation::ITypedEventHandler<Windows::Media::Capture::AdvancedPhotoCapture, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_AllPhotosCaptured(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAdvancedPhotoCapture<T>::AllPhotosCaptured(F handler) const
{
	return AllPhotosCaptured(Windows::Foundation::TypedEventHandler<Windows::Media::Capture::AdvancedPhotoCapture, IInspectable>(handler));
}

template <typename T> void impl_IAdvancedPhotoCapture<T>::AllPhotosCaptured(long long const token) const
{
	check(shim()->remove_AllPhotosCaptured(token));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IAdvancedPhotoCapture<T>::FinishAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_FinishAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Media::Capture::CapturedFrame impl_IAdvancedCapturedPhoto<T>::Frame() const
{
	Windows::Media::Capture::CapturedFrame value = nullptr;
	check(shim()->get_Frame(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::AdvancedPhotoMode impl_IAdvancedCapturedPhoto<T>::Mode() const
{
	Windows::Media::Devices::AdvancedPhotoMode value = {};
	check(shim()->get_Mode(&value));
	return value;
}

template <typename T> IInspectable impl_IAdvancedCapturedPhoto<T>::Context() const
{
	IInspectable value;
	check(shim()->get_Context(put(value)));
	return value;
}

template <typename T> Windows::Media::Capture::CapturedFrame impl_IOptionalReferencePhotoCapturedEventArgs<T>::Frame() const
{
	Windows::Media::Capture::CapturedFrame value = nullptr;
	check(shim()->get_Frame(put(value)));
	return value;
}

template <typename T> IInspectable impl_IOptionalReferencePhotoCapturedEventArgs<T>::Context() const
{
	IInspectable value;
	check(shim()->get_Context(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILowLagMediaRecording<T>::StartAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_StartAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILowLagMediaRecording<T>::StopAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_StopAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILowLagMediaRecording<T>::FinishAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_FinishAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILowLagMediaRecording2<T>::PauseAsync(Windows::Media::Devices::MediaCapturePauseBehavior const behavior) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_PauseAsync(behavior, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILowLagMediaRecording2<T>::ResumeAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ResumeAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILowLagPhotoSequenceCapture<T>::StartAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_StartAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILowLagPhotoSequenceCapture<T>::StopAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_StopAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILowLagPhotoSequenceCapture<T>::FinishAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_FinishAsync(put(operation)));
	return operation;
}

template <typename T> long long impl_ILowLagPhotoSequenceCapture<T>::PhotoCaptured(Windows::Foundation::ITypedEventHandler<Windows::Media::Capture::LowLagPhotoSequenceCapture, Windows::Media::Capture::PhotoCapturedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_PhotoCaptured(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ILowLagPhotoSequenceCapture<T>::PhotoCaptured(F handler) const
{
	return PhotoCaptured(Windows::Foundation::TypedEventHandler<Windows::Media::Capture::LowLagPhotoSequenceCapture, Windows::Media::Capture::PhotoCapturedEventArgs>(handler));
}

template <typename T> void impl_ILowLagPhotoSequenceCapture<T>::PhotoCaptured(long long const token) const
{
	check(shim()->remove_PhotoCaptured(token));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_ICapturedFrameControlValues<T>::Exposure() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_Exposure(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<float> impl_ICapturedFrameControlValues<T>::ExposureCompensation() const
{
	Windows::Foundation::IReference<float> value;
	check(shim()->get_ExposureCompensation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_ICapturedFrameControlValues<T>::IsoSpeed() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_IsoSpeed(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_ICapturedFrameControlValues<T>::Focus() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_Focus(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Media::Devices::CaptureSceneMode> impl_ICapturedFrameControlValues<T>::SceneMode() const
{
	Windows::Foundation::IReference<winrt::Windows::Media::Devices::CaptureSceneMode> value;
	check(shim()->get_SceneMode(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<bool> impl_ICapturedFrameControlValues<T>::Flashed() const
{
	Windows::Foundation::IReference<bool> value;
	check(shim()->get_Flashed(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<float> impl_ICapturedFrameControlValues<T>::FlashPowerPercent() const
{
	Windows::Foundation::IReference<float> value;
	check(shim()->get_FlashPowerPercent(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_ICapturedFrameControlValues<T>::WhiteBalance() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_WhiteBalance(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<float> impl_ICapturedFrameControlValues<T>::ZoomFactor() const
{
	Windows::Foundation::IReference<float> value;
	check(shim()->get_ZoomFactor(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Media::Devices::MediaCaptureFocusState> impl_ICapturedFrameControlValues2<T>::FocusState() const
{
	Windows::Foundation::IReference<winrt::Windows::Media::Devices::MediaCaptureFocusState> value;
	check(shim()->get_FocusState(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_ICapturedFrameControlValues2<T>::IsoDigitalGain() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_IsoDigitalGain(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_ICapturedFrameControlValues2<T>::IsoAnalogGain() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_IsoAnalogGain(put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaRatio impl_ICapturedFrameControlValues2<T>::SensorFrameRate() const
{
	Windows::Media::MediaProperties::MediaRatio value = nullptr;
	check(shim()->get_SensorFrameRate(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Media::Capture::WhiteBalanceGain> impl_ICapturedFrameControlValues2<T>::WhiteBalanceGain() const
{
	Windows::Foundation::IReference<winrt::Windows::Media::Capture::WhiteBalanceGain> value;
	check(shim()->get_WhiteBalanceGain(put(value)));
	return value;
}

template <typename T> Windows::Media::Capture::CapturedFrame impl_IPhotoCapturedEventArgs<T>::Frame() const
{
	Windows::Media::Capture::CapturedFrame value = nullptr;
	check(shim()->get_Frame(put(value)));
	return value;
}

template <typename T> Windows::Media::Capture::CapturedFrame impl_IPhotoCapturedEventArgs<T>::Thumbnail() const
{
	Windows::Media::Capture::CapturedFrame value = nullptr;
	check(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPhotoCapturedEventArgs<T>::CaptureTimeOffset() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_CaptureTimeOffset(&value));
	return value;
}

template <typename T> Windows::Media::Capture::CapturedFrame impl_ICapturedPhoto<T>::Frame() const
{
	Windows::Media::Capture::CapturedFrame value = nullptr;
	check(shim()->get_Frame(put(value)));
	return value;
}

template <typename T> Windows::Media::Capture::CapturedFrame impl_ICapturedPhoto<T>::Thumbnail() const
{
	Windows::Media::Capture::CapturedFrame value = nullptr;
	check(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> unsigned impl_ICapturedFrame<T>::Width() const
{
	unsigned value = {};
	check(shim()->get_Width(&value));
	return value;
}

template <typename T> unsigned impl_ICapturedFrame<T>::Height() const
{
	unsigned value = {};
	check(shim()->get_Height(&value));
	return value;
}

template <typename T> Windows::Graphics::Imaging::SoftwareBitmap impl_ICapturedFrameWithSoftwareBitmap<T>::SoftwareBitmap() const
{
	Windows::Graphics::Imaging::SoftwareBitmap value = nullptr;
	check(shim()->get_SoftwareBitmap(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCaptureVideoPreview<T>::StartPreviewAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_StartPreviewAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCaptureVideoPreview<T>::StartPreviewToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, Windows::Media::IMediaExtension const & customMediaSink) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_StartPreviewToCustomSinkAsync(get(encodingProfile), get(customMediaSink), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCaptureVideoPreview<T>::StartPreviewToCustomSinkAsync(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile, StringReference const & customSinkActivationId, Windows::Foundation::Collections::IPropertySet const & customSinkSettings) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_StartPreviewToCustomSinkIdAsync(get(encodingProfile), get(customSinkActivationId), get(customSinkSettings), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaCaptureVideoPreview<T>::StopPreviewAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_StopPreviewAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> String impl_IMediaCaptureSettings<T>::AudioDeviceId() const
{
	String value;
	check(shim()->get_AudioDeviceId(put(value)));
	return value;
}

template <typename T> String impl_IMediaCaptureSettings<T>::VideoDeviceId() const
{
	String value;
	check(shim()->get_VideoDeviceId(put(value)));
	return value;
}

template <typename T> Windows::Media::Capture::StreamingCaptureMode impl_IMediaCaptureSettings<T>::StreamingCaptureMode() const
{
	Windows::Media::Capture::StreamingCaptureMode value = {};
	check(shim()->get_StreamingCaptureMode(&value));
	return value;
}

template <typename T> Windows::Media::Capture::PhotoCaptureSource impl_IMediaCaptureSettings<T>::PhotoCaptureSource() const
{
	Windows::Media::Capture::PhotoCaptureSource value = {};
	check(shim()->get_PhotoCaptureSource(&value));
	return value;
}

template <typename T> Windows::Media::Capture::VideoDeviceCharacteristic impl_IMediaCaptureSettings<T>::VideoDeviceCharacteristic() const
{
	Windows::Media::Capture::VideoDeviceCharacteristic value = {};
	check(shim()->get_VideoDeviceCharacteristic(&value));
	return value;
}

template <typename T> bool impl_IMediaCaptureSettings2<T>::ConcurrentRecordAndPhotoSupported() const
{
	bool value = {};
	check(shim()->get_ConcurrentRecordAndPhotoSupported(put(value)));
	return value;
}

template <typename T> bool impl_IMediaCaptureSettings2<T>::ConcurrentRecordAndPhotoSequenceSupported() const
{
	bool value = {};
	check(shim()->get_ConcurrentRecordAndPhotoSequenceSupported(put(value)));
	return value;
}

template <typename T> bool impl_IMediaCaptureSettings2<T>::CameraSoundRequiredForRegion() const
{
	bool value = {};
	check(shim()->get_CameraSoundRequiredForRegion(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IMediaCaptureSettings2<T>::Horizontal35mmEquivalentFocalLength() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_Horizontal35mmEquivalentFocalLength(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<int> impl_IMediaCaptureSettings2<T>::PitchOffsetDegrees() const
{
	Windows::Foundation::IReference<int> value;
	check(shim()->get_PitchOffsetDegrees(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IMediaCaptureSettings2<T>::Vertical35mmEquivalentFocalLength() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_Vertical35mmEquivalentFocalLength(put(value)));
	return value;
}

template <typename T> Windows::Media::Capture::MediaCategory impl_IMediaCaptureSettings2<T>::MediaCategory() const
{
	Windows::Media::Capture::MediaCategory value = {};
	check(shim()->get_MediaCategory(&value));
	return value;
}

template <typename T> Windows::Media::AudioProcessing impl_IMediaCaptureSettings2<T>::AudioProcessing() const
{
	Windows::Media::AudioProcessing value = {};
	check(shim()->get_AudioProcessing(&value));
	return value;
}

template <typename T> Windows::Media::Devices::MediaCaptureFocusState impl_IMediaCaptureFocusChangedEventArgs<T>::FocusState() const
{
	Windows::Media::Devices::MediaCaptureFocusState value = {};
	check(shim()->get_FocusState(&value));
	return value;
}

template <typename T> Windows::Media::Capture::CapturedFrame impl_IPhotoConfirmationCapturedEventArgs<T>::Frame() const
{
	Windows::Media::Capture::CapturedFrame value = nullptr;
	check(shim()->get_Frame(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPhotoConfirmationCapturedEventArgs<T>::CaptureTimeOffset() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_CaptureTimeOffset(&value));
	return value;
}

template <typename T> Windows::Media::MediaProperties::VideoEncodingProperties impl_IVideoStreamConfiguration<T>::InputProperties() const
{
	Windows::Media::MediaProperties::VideoEncodingProperties value = nullptr;
	check(shim()->get_InputProperties(put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::VideoEncodingProperties impl_IVideoStreamConfiguration<T>::OutputProperties() const
{
	Windows::Media::MediaProperties::VideoEncodingProperties value = nullptr;
	check(shim()->get_OutputProperties(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Capture { namespace Core {

template <typename T> Windows::Media::Capture::CapturedFrame impl_IVariablePhotoCapturedEventArgs<T>::Frame() const
{
	Windows::Media::Capture::CapturedFrame value = nullptr;
	check(shim()->get_Frame(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IVariablePhotoCapturedEventArgs<T>::CaptureTimeOffset() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_CaptureTimeOffset(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IVariablePhotoCapturedEventArgs<T>::UsedFrameControllerIndex() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_UsedFrameControllerIndex(put(value)));
	return value;
}

template <typename T> Windows::Media::Capture::CapturedFrameControlValues impl_IVariablePhotoCapturedEventArgs<T>::CapturedFrameControlValues() const
{
	Windows::Media::Capture::CapturedFrameControlValues value = nullptr;
	check(shim()->get_CapturedFrameControlValues(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IVariablePhotoSequenceCapture<T>::StartAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_StartAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IVariablePhotoSequenceCapture<T>::StopAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_StopAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IVariablePhotoSequenceCapture<T>::FinishAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_FinishAsync(put(operation)));
	return operation;
}

template <typename T> long long impl_IVariablePhotoSequenceCapture<T>::PhotoCaptured(Windows::Foundation::ITypedEventHandler<Windows::Media::Capture::Core::VariablePhotoSequenceCapture, Windows::Media::Capture::Core::VariablePhotoCapturedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_PhotoCaptured(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVariablePhotoSequenceCapture<T>::PhotoCaptured(F handler) const
{
	return PhotoCaptured(Windows::Foundation::TypedEventHandler<Windows::Media::Capture::Core::VariablePhotoSequenceCapture, Windows::Media::Capture::Core::VariablePhotoCapturedEventArgs>(handler));
}

template <typename T> void impl_IVariablePhotoSequenceCapture<T>::PhotoCaptured(long long const token) const
{
	check(shim()->remove_PhotoCaptured(token));
}

template <typename T> long long impl_IVariablePhotoSequenceCapture<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::Media::Capture::Core::VariablePhotoSequenceCapture, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVariablePhotoSequenceCapture<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::Media::Capture::Core::VariablePhotoSequenceCapture, IInspectable>(handler));
}

template <typename T> void impl_IVariablePhotoSequenceCapture<T>::Stopped(long long const token) const
{
	check(shim()->remove_Stopped(token));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IVariablePhotoSequenceCapture2<T>::UpdateSettingsAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_UpdateSettingsAsync(put(operation)));
	return operation;
}

}}}}}

namespace winrt { namespace Windows { namespace Media { namespace Casting {

template <typename T> Windows::Foundation::Uri impl_ICastingSource<T>::PreferredSourceUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_PreferredSourceUri(put(value)));
	return value;
}

template <typename T> void impl_ICastingSource<T>::PreferredSourceUri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_PreferredSourceUri(get(value)));
}

template <typename T> Windows::Media::Casting::CastingConnectionErrorStatus impl_ICastingConnectionErrorOccurredEventArgs<T>::ErrorStatus() const
{
	Windows::Media::Casting::CastingConnectionErrorStatus value = {};
	check(shim()->get_ErrorStatus(&value));
	return value;
}

template <typename T> String impl_ICastingConnectionErrorOccurredEventArgs<T>::Message() const
{
	String value;
	check(shim()->get_Message(put(value)));
	return value;
}

template <typename T> Windows::Media::Casting::CastingConnectionState impl_ICastingConnection<T>::State() const
{
	Windows::Media::Casting::CastingConnectionState value = {};
	check(shim()->get_State(&value));
	return value;
}

template <typename T> Windows::Media::Casting::CastingDevice impl_ICastingConnection<T>::Device() const
{
	Windows::Media::Casting::CastingDevice value = nullptr;
	check(shim()->get_Device(put(value)));
	return value;
}

template <typename T> Windows::Media::Casting::CastingSource impl_ICastingConnection<T>::Source() const
{
	Windows::Media::Casting::CastingSource value = nullptr;
	check(shim()->get_Source(put(value)));
	return value;
}

template <typename T> void impl_ICastingConnection<T>::Source(Windows::Media::Casting::CastingSource const & value) const
{
	check(shim()->put_Source(get(value)));
}

template <typename T> long long impl_ICastingConnection<T>::StateChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Casting::CastingConnection, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_StateChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICastingConnection<T>::StateChanged(F handler) const
{
	return StateChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Casting::CastingConnection, IInspectable>(handler));
}

template <typename T> void impl_ICastingConnection<T>::StateChanged(long long const token) const
{
	check(shim()->remove_StateChanged(token));
}

template <typename T> long long impl_ICastingConnection<T>::ErrorOccurred(Windows::Foundation::ITypedEventHandler<Windows::Media::Casting::CastingConnection, Windows::Media::Casting::CastingConnectionErrorOccurredEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ErrorOccurred(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICastingConnection<T>::ErrorOccurred(F handler) const
{
	return ErrorOccurred(Windows::Foundation::TypedEventHandler<Windows::Media::Casting::CastingConnection, Windows::Media::Casting::CastingConnectionErrorOccurredEventArgs>(handler));
}

template <typename T> void impl_ICastingConnection<T>::ErrorOccurred(long long const token) const
{
	check(shim()->remove_ErrorOccurred(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Media::Casting::CastingConnectionErrorStatus> impl_ICastingConnection<T>::RequestStartCastingAsync(Windows::Media::Casting::CastingSource const & value) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Media::Casting::CastingConnectionErrorStatus> operation;
	check(shim()->abi_RequestStartCastingAsync(get(value), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Media::Casting::CastingConnectionErrorStatus> impl_ICastingConnection<T>::DisconnectAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Media::Casting::CastingConnectionErrorStatus> operation;
	check(shim()->abi_DisconnectAsync(put(operation)));
	return operation;
}

template <typename T> String impl_ICastingDevice<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_ICastingDevice<T>::FriendlyName() const
{
	String value;
	check(shim()->get_FriendlyName(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamWithContentType impl_ICastingDevice<T>::Icon() const
{
	Windows::Storage::Streams::IRandomAccessStreamWithContentType value;
	check(shim()->get_Icon(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Media::Casting::CastingPlaybackTypes> impl_ICastingDevice<T>::GetSupportedCastingPlaybackTypesAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Media::Casting::CastingPlaybackTypes> operation;
	check(shim()->abi_GetSupportedCastingPlaybackTypesAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Media::Casting::CastingConnection impl_ICastingDevice<T>::CreateCastingConnection() const
{
	Windows::Media::Casting::CastingConnection value = nullptr;
	check(shim()->abi_CreateCastingConnection(put(value)));
	return value;
}

template <typename T> String impl_ICastingDeviceStatics<T>::GetDeviceSelector(Windows::Media::Casting::CastingPlaybackTypes const type) const
{
	String value;
	check(shim()->abi_GetDeviceSelector(type, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICastingDeviceStatics<T>::GetDeviceSelectorFromCastingSourceAsync(Windows::Media::Casting::CastingSource const & castingSource) const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_GetDeviceSelectorFromCastingSourceAsync(get(castingSource), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Casting::CastingDevice> impl_ICastingDeviceStatics<T>::FromIdAsync(StringReference const & value) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Casting::CastingDevice> operation;
	check(shim()->abi_FromIdAsync(get(value), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ICastingDeviceStatics<T>::DeviceInfoSupportsCastingAsync(Windows::Devices::Enumeration::DeviceInformation const & device) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_DeviceInfoSupportsCastingAsync(get(device), put(operation)));
	return operation;
}

template <typename T> Windows::Media::Casting::CastingDevice impl_ICastingDeviceSelectedEventArgs<T>::SelectedCastingDevice() const
{
	Windows::Media::Casting::CastingDevice value = nullptr;
	check(shim()->get_SelectedCastingDevice(put(value)));
	return value;
}

template <typename T> bool impl_ICastingDevicePickerFilter<T>::SupportsAudio() const
{
	bool value = {};
	check(shim()->get_SupportsAudio(put(value)));
	return value;
}

template <typename T> void impl_ICastingDevicePickerFilter<T>::SupportsAudio(bool const value) const
{
	check(shim()->put_SupportsAudio(value));
}

template <typename T> bool impl_ICastingDevicePickerFilter<T>::SupportsVideo() const
{
	bool value = {};
	check(shim()->get_SupportsVideo(put(value)));
	return value;
}

template <typename T> void impl_ICastingDevicePickerFilter<T>::SupportsVideo(bool const value) const
{
	check(shim()->put_SupportsVideo(value));
}

template <typename T> bool impl_ICastingDevicePickerFilter<T>::SupportsPictures() const
{
	bool value = {};
	check(shim()->get_SupportsPictures(put(value)));
	return value;
}

template <typename T> void impl_ICastingDevicePickerFilter<T>::SupportsPictures(bool const value) const
{
	check(shim()->put_SupportsPictures(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Casting::CastingSource> impl_ICastingDevicePickerFilter<T>::SupportedCastingSources() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Casting::CastingSource> value;
	check(shim()->get_SupportedCastingSources(put(value)));
	return value;
}

template <typename T> Windows::Media::Casting::CastingDevicePickerFilter impl_ICastingDevicePicker<T>::Filter() const
{
	Windows::Media::Casting::CastingDevicePickerFilter value = nullptr;
	check(shim()->get_Filter(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DevicePickerAppearance impl_ICastingDevicePicker<T>::Appearance() const
{
	Windows::Devices::Enumeration::DevicePickerAppearance value = nullptr;
	check(shim()->get_Appearance(put(value)));
	return value;
}

template <typename T> long long impl_ICastingDevicePicker<T>::CastingDeviceSelected(Windows::Foundation::ITypedEventHandler<Windows::Media::Casting::CastingDevicePicker, Windows::Media::Casting::CastingDeviceSelectedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_CastingDeviceSelected(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICastingDevicePicker<T>::CastingDeviceSelected(F handler) const
{
	return CastingDeviceSelected(Windows::Foundation::TypedEventHandler<Windows::Media::Casting::CastingDevicePicker, Windows::Media::Casting::CastingDeviceSelectedEventArgs>(handler));
}

template <typename T> void impl_ICastingDevicePicker<T>::CastingDeviceSelected(long long const token) const
{
	check(shim()->remove_CastingDeviceSelected(token));
}

template <typename T> long long impl_ICastingDevicePicker<T>::CastingDevicePickerDismissed(Windows::Foundation::ITypedEventHandler<Windows::Media::Casting::CastingDevicePicker, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_CastingDevicePickerDismissed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICastingDevicePicker<T>::CastingDevicePickerDismissed(F handler) const
{
	return CastingDevicePickerDismissed(Windows::Foundation::TypedEventHandler<Windows::Media::Casting::CastingDevicePicker, IInspectable>(handler));
}

template <typename T> void impl_ICastingDevicePicker<T>::CastingDevicePickerDismissed(long long const token) const
{
	check(shim()->remove_CastingDevicePickerDismissed(token));
}

template <typename T> void impl_ICastingDevicePicker<T>::Show(Windows::Foundation::Rect const & selection) const
{
	check(shim()->abi_Show(selection));
}

template <typename T> void impl_ICastingDevicePicker<T>::Show(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	check(shim()->abi_ShowWithPlacement(selection, preferredPlacement));
}

template <typename T> void impl_ICastingDevicePicker<T>::Hide() const
{
	check(shim()->abi_Hide());
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace ClosedCaptioning {

template <typename T> Windows::Media::ClosedCaptioning::ClosedCaptionColor impl_IClosedCaptionPropertiesStatics<T>::FontColor() const
{
	Windows::Media::ClosedCaptioning::ClosedCaptionColor value = {};
	check(shim()->get_FontColor(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IClosedCaptionPropertiesStatics<T>::ComputedFontColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_ComputedFontColor(&value));
	return value;
}

template <typename T> Windows::Media::ClosedCaptioning::ClosedCaptionOpacity impl_IClosedCaptionPropertiesStatics<T>::FontOpacity() const
{
	Windows::Media::ClosedCaptioning::ClosedCaptionOpacity value = {};
	check(shim()->get_FontOpacity(&value));
	return value;
}

template <typename T> Windows::Media::ClosedCaptioning::ClosedCaptionSize impl_IClosedCaptionPropertiesStatics<T>::FontSize() const
{
	Windows::Media::ClosedCaptioning::ClosedCaptionSize value = {};
	check(shim()->get_FontSize(&value));
	return value;
}

template <typename T> Windows::Media::ClosedCaptioning::ClosedCaptionStyle impl_IClosedCaptionPropertiesStatics<T>::FontStyle() const
{
	Windows::Media::ClosedCaptioning::ClosedCaptionStyle value = {};
	check(shim()->get_FontStyle(&value));
	return value;
}

template <typename T> Windows::Media::ClosedCaptioning::ClosedCaptionEdgeEffect impl_IClosedCaptionPropertiesStatics<T>::FontEffect() const
{
	Windows::Media::ClosedCaptioning::ClosedCaptionEdgeEffect value = {};
	check(shim()->get_FontEffect(&value));
	return value;
}

template <typename T> Windows::Media::ClosedCaptioning::ClosedCaptionColor impl_IClosedCaptionPropertiesStatics<T>::BackgroundColor() const
{
	Windows::Media::ClosedCaptioning::ClosedCaptionColor value = {};
	check(shim()->get_BackgroundColor(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IClosedCaptionPropertiesStatics<T>::ComputedBackgroundColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_ComputedBackgroundColor(&value));
	return value;
}

template <typename T> Windows::Media::ClosedCaptioning::ClosedCaptionOpacity impl_IClosedCaptionPropertiesStatics<T>::BackgroundOpacity() const
{
	Windows::Media::ClosedCaptioning::ClosedCaptionOpacity value = {};
	check(shim()->get_BackgroundOpacity(&value));
	return value;
}

template <typename T> Windows::Media::ClosedCaptioning::ClosedCaptionColor impl_IClosedCaptionPropertiesStatics<T>::RegionColor() const
{
	Windows::Media::ClosedCaptioning::ClosedCaptionColor value = {};
	check(shim()->get_RegionColor(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IClosedCaptionPropertiesStatics<T>::ComputedRegionColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_ComputedRegionColor(&value));
	return value;
}

template <typename T> Windows::Media::ClosedCaptioning::ClosedCaptionOpacity impl_IClosedCaptionPropertiesStatics<T>::RegionOpacity() const
{
	Windows::Media::ClosedCaptioning::ClosedCaptionOpacity value = {};
	check(shim()->get_RegionOpacity(&value));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace ContentRestrictions {

template <typename T> String impl_IRatedContentDescription<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_IRatedContentDescription<T>::Id(StringReference const & value) const
{
	check(shim()->put_Id(get(value)));
}

template <typename T> String impl_IRatedContentDescription<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IRatedContentDescription<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IRatedContentDescription<T>::Image() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_Image(put(value)));
	return value;
}

template <typename T> void impl_IRatedContentDescription<T>::Image(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_Image(get(value)));
}

template <typename T> Windows::Media::ContentRestrictions::RatedContentCategory impl_IRatedContentDescription<T>::Category() const
{
	Windows::Media::ContentRestrictions::RatedContentCategory value = {};
	check(shim()->get_Category(&value));
	return value;
}

template <typename T> void impl_IRatedContentDescription<T>::Category(Windows::Media::ContentRestrictions::RatedContentCategory const value) const
{
	check(shim()->put_Category(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IRatedContentDescription<T>::Ratings() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Ratings(put(value)));
	return value;
}

template <typename T> void impl_IRatedContentDescription<T>::Ratings(Windows::Foundation::Collections::IVector<String> const & value) const
{
	check(shim()->put_Ratings(get(value)));
}

template <typename T> Windows::Media::ContentRestrictions::RatedContentDescription impl_IRatedContentDescriptionFactory<T>::Create(StringReference const & id, StringReference const & title, Windows::Media::ContentRestrictions::RatedContentCategory const category) const
{
	Windows::Media::ContentRestrictions::RatedContentDescription RatedContentDescription = nullptr;
	check(shim()->abi_Create(get(id), get(title), category, put(RatedContentDescription)));
	return RatedContentDescription;
}

template <typename T> String impl_IContentRestrictionsBrowsePolicy<T>::GeographicRegion() const
{
	String value;
	check(shim()->get_GeographicRegion(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IContentRestrictionsBrowsePolicy<T>::MaxBrowsableAgeRating() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_MaxBrowsableAgeRating(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IContentRestrictionsBrowsePolicy<T>::PreferredAgeRating() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_PreferredAgeRating(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::ContentRestrictions::ContentRestrictionsBrowsePolicy> impl_IRatedContentRestrictions<T>::GetBrowsePolicyAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::ContentRestrictions::ContentRestrictionsBrowsePolicy> operation;
	check(shim()->abi_GetBrowsePolicyAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Media::ContentRestrictions::ContentAccessRestrictionLevel> impl_IRatedContentRestrictions<T>::GetRestrictionLevelAsync(Windows::Media::ContentRestrictions::RatedContentDescription const & RatedContentDescription) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Media::ContentRestrictions::ContentAccessRestrictionLevel> operation;
	check(shim()->abi_GetRestrictionLevelAsync(get(RatedContentDescription), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IRatedContentRestrictions<T>::RequestContentAccessAsync(Windows::Media::ContentRestrictions::RatedContentDescription const & RatedContentDescription) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_RequestContentAccessAsync(get(RatedContentDescription), put(operation)));
	return operation;
}

template <typename T> long long impl_IRatedContentRestrictions<T>::RestrictionsChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_RestrictionsChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IRatedContentRestrictions<T>::RestrictionsChanged(F handler) const
{
	return RestrictionsChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IRatedContentRestrictions<T>::RestrictionsChanged(long long const token) const
{
	check(shim()->remove_RestrictionsChanged(token));
}

template <typename T> Windows::Media::ContentRestrictions::RatedContentRestrictions impl_IRatedContentRestrictionsFactory<T>::CreateWithMaxAgeRating(unsigned const maxAgeRating) const
{
	Windows::Media::ContentRestrictions::RatedContentRestrictions ratedContentRestrictions = nullptr;
	check(shim()->abi_CreateWithMaxAgeRating(maxAgeRating, put(ratedContentRestrictions)));
	return ratedContentRestrictions;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Core {

template <typename T> bool impl_IMediaStreamDescriptor<T>::IsSelected() const
{
	bool selected = {};
	check(shim()->get_IsSelected(put(selected)));
	return selected;
}

template <typename T> void impl_IMediaStreamDescriptor<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> String impl_IMediaStreamDescriptor<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IMediaStreamDescriptor<T>::Language(StringReference const & value) const
{
	check(shim()->put_Language(get(value)));
}

template <typename T> String impl_IMediaStreamDescriptor<T>::Language() const
{
	String value;
	check(shim()->get_Language(put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IAudioStreamDescriptor<T>::EncodingProperties() const
{
	Windows::Media::MediaProperties::AudioEncodingProperties encodingProperties = nullptr;
	check(shim()->get_EncodingProperties(put(encodingProperties)));
	return encodingProperties;
}

template <typename T> Windows::Media::Core::AudioStreamDescriptor impl_IAudioStreamDescriptorFactory<T>::Create(Windows::Media::MediaProperties::AudioEncodingProperties const & encodingProperties) const
{
	Windows::Media::Core::AudioStreamDescriptor result = nullptr;
	check(shim()->abi_Create(get(encodingProperties), put(result)));
	return result;
}

template <typename T> Windows::Media::MediaProperties::VideoEncodingProperties impl_IVideoStreamDescriptor<T>::EncodingProperties() const
{
	Windows::Media::MediaProperties::VideoEncodingProperties encodingProperties = nullptr;
	check(shim()->get_EncodingProperties(put(encodingProperties)));
	return encodingProperties;
}

template <typename T> Windows::Media::Core::VideoStreamDescriptor impl_IVideoStreamDescriptorFactory<T>::Create(Windows::Media::MediaProperties::VideoEncodingProperties const & encodingProperties) const
{
	Windows::Media::Core::VideoStreamDescriptor result = nullptr;
	check(shim()->abi_Create(get(encodingProperties), put(result)));
	return result;
}

template <typename T> long long impl_IMediaStreamSource<T>::Closed(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceClosedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Closed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaStreamSource<T>::Closed(F handler) const
{
	return Closed(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceClosedEventArgs>(handler));
}

template <typename T> void impl_IMediaStreamSource<T>::Closed(long long const token) const
{
	check(shim()->remove_Closed(token));
}

template <typename T> long long impl_IMediaStreamSource<T>::Starting(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceStartingEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Starting(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaStreamSource<T>::Starting(F handler) const
{
	return Starting(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceStartingEventArgs>(handler));
}

template <typename T> void impl_IMediaStreamSource<T>::Starting(long long const token) const
{
	check(shim()->remove_Starting(token));
}

template <typename T> long long impl_IMediaStreamSource<T>::Paused(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Paused(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaStreamSource<T>::Paused(F handler) const
{
	return Paused(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MediaStreamSource, IInspectable>(handler));
}

template <typename T> void impl_IMediaStreamSource<T>::Paused(long long const token) const
{
	check(shim()->remove_Paused(token));
}

template <typename T> long long impl_IMediaStreamSource<T>::SampleRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceSampleRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SampleRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaStreamSource<T>::SampleRequested(F handler) const
{
	return SampleRequested(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceSampleRequestedEventArgs>(handler));
}

template <typename T> void impl_IMediaStreamSource<T>::SampleRequested(long long const token) const
{
	check(shim()->remove_SampleRequested(token));
}

template <typename T> long long impl_IMediaStreamSource<T>::SwitchStreamsRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SwitchStreamsRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaStreamSource<T>::SwitchStreamsRequested(F handler) const
{
	return SwitchStreamsRequested(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MediaStreamSource, Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestedEventArgs>(handler));
}

template <typename T> void impl_IMediaStreamSource<T>::SwitchStreamsRequested(long long const token) const
{
	check(shim()->remove_SwitchStreamsRequested(token));
}

template <typename T> void impl_IMediaStreamSource<T>::NotifyError(Windows::Media::Core::MediaStreamSourceErrorStatus const errorStatus) const
{
	check(shim()->abi_NotifyError(errorStatus));
}

template <typename T> void impl_IMediaStreamSource<T>::AddStreamDescriptor(Windows::Media::Core::IMediaStreamDescriptor const & descriptor) const
{
	check(shim()->abi_AddStreamDescriptor(get(descriptor)));
}

template <typename T> void impl_IMediaStreamSource<T>::MediaProtectionManager(Windows::Media::Protection::MediaProtectionManager const & value) const
{
	check(shim()->put_MediaProtectionManager(get(value)));
}

template <typename T> Windows::Media::Protection::MediaProtectionManager impl_IMediaStreamSource<T>::MediaProtectionManager() const
{
	Windows::Media::Protection::MediaProtectionManager value = nullptr;
	check(shim()->get_MediaProtectionManager(put(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSource<T>::Duration(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_Duration(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaStreamSource<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Duration(&value));
	return value;
}

template <typename T> void impl_IMediaStreamSource<T>::CanSeek(bool const value) const
{
	check(shim()->put_CanSeek(value));
}

template <typename T> bool impl_IMediaStreamSource<T>::CanSeek() const
{
	bool value = {};
	check(shim()->get_CanSeek(put(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSource<T>::BufferTime(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_BufferTime(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaStreamSource<T>::BufferTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_BufferTime(&value));
	return value;
}

template <typename T> void impl_IMediaStreamSource<T>::SetBufferedRange(Windows::Foundation::TimeSpan const & startOffset, Windows::Foundation::TimeSpan const & endOffset) const
{
	check(shim()->abi_SetBufferedRange(startOffset, endOffset));
}

template <typename T> Windows::Storage::FileProperties::MusicProperties impl_IMediaStreamSource<T>::MusicProperties() const
{
	Windows::Storage::FileProperties::MusicProperties value = nullptr;
	check(shim()->get_MusicProperties(put(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::VideoProperties impl_IMediaStreamSource<T>::VideoProperties() const
{
	Windows::Storage::FileProperties::VideoProperties value = nullptr;
	check(shim()->get_VideoProperties(put(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSource<T>::Thumbnail(Windows::Storage::Streams::IRandomAccessStreamReference const & value) const
{
	check(shim()->put_Thumbnail(get(value)));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IMediaStreamSource<T>::Thumbnail() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSource impl_IMediaStreamSourceFactory<T>::CreateFromDescriptor(Windows::Media::Core::IMediaStreamDescriptor const & descriptor) const
{
	Windows::Media::Core::MediaStreamSource result = nullptr;
	check(shim()->abi_CreateFromDescriptor(get(descriptor), put(result)));
	return result;
}

template <typename T> Windows::Media::Core::MediaStreamSource impl_IMediaStreamSourceFactory<T>::CreateFromDescriptors(Windows::Media::Core::IMediaStreamDescriptor const & descriptor, Windows::Media::Core::IMediaStreamDescriptor const & descriptor2) const
{
	Windows::Media::Core::MediaStreamSource result = nullptr;
	check(shim()->abi_CreateFromDescriptors(get(descriptor), get(descriptor2), put(result)));
	return result;
}

template <typename T> long long impl_IMediaStreamSample<T>::Processed(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaStreamSample, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Processed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaStreamSample<T>::Processed(F handler) const
{
	return Processed(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MediaStreamSample, IInspectable>(handler));
}

template <typename T> void impl_IMediaStreamSample<T>::Processed(long long const token) const
{
	check(shim()->remove_Processed(token));
}

template <typename T> Windows::Storage::Streams::Buffer impl_IMediaStreamSample<T>::Buffer() const
{
	Windows::Storage::Streams::Buffer value = nullptr;
	check(shim()->get_Buffer(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaStreamSample<T>::Timestamp() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSamplePropertySet impl_IMediaStreamSample<T>::ExtendedProperties() const
{
	Windows::Media::Core::MediaStreamSamplePropertySet value = nullptr;
	check(shim()->get_ExtendedProperties(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSampleProtectionProperties impl_IMediaStreamSample<T>::Protection() const
{
	Windows::Media::Core::MediaStreamSampleProtectionProperties value = nullptr;
	check(shim()->get_Protection(put(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSample<T>::DecodeTimestamp(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_DecodeTimestamp(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaStreamSample<T>::DecodeTimestamp() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_DecodeTimestamp(&value));
	return value;
}

template <typename T> void impl_IMediaStreamSample<T>::Duration(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_Duration(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaStreamSample<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Duration(&value));
	return value;
}

template <typename T> void impl_IMediaStreamSample<T>::KeyFrame(bool const value) const
{
	check(shim()->put_KeyFrame(value));
}

template <typename T> bool impl_IMediaStreamSample<T>::KeyFrame() const
{
	bool value = {};
	check(shim()->get_KeyFrame(put(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSample<T>::Discontinuous(bool const value) const
{
	check(shim()->put_Discontinuous(value));
}

template <typename T> bool impl_IMediaStreamSample<T>::Discontinuous() const
{
	bool value = {};
	check(shim()->get_Discontinuous(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSample impl_IMediaStreamSampleStatics<T>::CreateFromBuffer(Windows::Storage::Streams::IBuffer const & buffer, Windows::Foundation::TimeSpan const & timestamp) const
{
	Windows::Media::Core::MediaStreamSample value = nullptr;
	check(shim()->abi_CreateFromBuffer(get(buffer), timestamp, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Core::MediaStreamSample> impl_IMediaStreamSampleStatics<T>::CreateFromStreamAsync(Windows::Storage::Streams::IInputStream const & stream, unsigned const count, Windows::Foundation::TimeSpan const & timestamp) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Core::MediaStreamSample> value;
	check(shim()->abi_CreateFromStreamAsync(get(stream), count, timestamp, put(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSourceClosedReason impl_IMediaStreamSourceClosedRequest<T>::Reason() const
{
	Windows::Media::Core::MediaStreamSourceClosedReason value = {};
	check(shim()->get_Reason(&value));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSourceClosedRequest impl_IMediaStreamSourceClosedEventArgs<T>::Request() const
{
	Windows::Media::Core::MediaStreamSourceClosedRequest value = nullptr;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSourceStartingRequestDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IMediaStreamSourceStartingRequest<T>::StartPosition() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_StartPosition(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSourceStartingRequestDeferral impl_IMediaStreamSourceStartingRequest<T>::GetDeferral() const
{
	Windows::Media::Core::MediaStreamSourceStartingRequestDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> void impl_IMediaStreamSourceStartingRequest<T>::SetActualStartPosition(Windows::Foundation::TimeSpan const & position) const
{
	check(shim()->abi_SetActualStartPosition(position));
}

template <typename T> Windows::Media::Core::MediaStreamSourceStartingRequest impl_IMediaStreamSourceStartingEventArgs<T>::Request() const
{
	Windows::Media::Core::MediaStreamSourceStartingRequest value = nullptr;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSourceSampleRequestDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::Media::Core::IMediaStreamDescriptor impl_IMediaStreamSourceSampleRequest<T>::StreamDescriptor() const
{
	Windows::Media::Core::IMediaStreamDescriptor value;
	check(shim()->get_StreamDescriptor(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSourceSampleRequestDeferral impl_IMediaStreamSourceSampleRequest<T>::GetDeferral() const
{
	Windows::Media::Core::MediaStreamSourceSampleRequestDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> void impl_IMediaStreamSourceSampleRequest<T>::Sample(Windows::Media::Core::MediaStreamSample const & value) const
{
	check(shim()->put_Sample(get(value)));
}

template <typename T> Windows::Media::Core::MediaStreamSample impl_IMediaStreamSourceSampleRequest<T>::Sample() const
{
	Windows::Media::Core::MediaStreamSample value = nullptr;
	check(shim()->get_Sample(put(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSourceSampleRequest<T>::ReportSampleProgress(unsigned const progress) const
{
	check(shim()->abi_ReportSampleProgress(progress));
}

template <typename T> Windows::Media::Core::MediaStreamSourceSampleRequest impl_IMediaStreamSourceSampleRequestedEventArgs<T>::Request() const
{
	Windows::Media::Core::MediaStreamSourceSampleRequest value = nullptr;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> void impl_IMediaStreamSourceSwitchStreamsRequestDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::Media::Core::IMediaStreamDescriptor impl_IMediaStreamSourceSwitchStreamsRequest<T>::OldStreamDescriptor() const
{
	Windows::Media::Core::IMediaStreamDescriptor value;
	check(shim()->get_OldStreamDescriptor(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::IMediaStreamDescriptor impl_IMediaStreamSourceSwitchStreamsRequest<T>::NewStreamDescriptor() const
{
	Windows::Media::Core::IMediaStreamDescriptor value;
	check(shim()->get_NewStreamDescriptor(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestDeferral impl_IMediaStreamSourceSwitchStreamsRequest<T>::GetDeferral() const
{
	Windows::Media::Core::MediaStreamSourceSwitchStreamsRequestDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> Windows::Media::Core::MediaStreamSourceSwitchStreamsRequest impl_IMediaStreamSourceSwitchStreamsRequestedEventArgs<T>::Request() const
{
	Windows::Media::Core::MediaStreamSourceSwitchStreamsRequest value = nullptr;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> bool impl_IMseStreamSourceStatics<T>::IsContentTypeSupported(StringReference const & contentType) const
{
	bool value = {};
	check(shim()->abi_IsContentTypeSupported(get(contentType), put(value)));
	return value;
}

template <typename T> long long impl_IMseStreamSource<T>::Opened(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MseStreamSource, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Opened(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMseStreamSource<T>::Opened(F handler) const
{
	return Opened(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MseStreamSource, IInspectable>(handler));
}

template <typename T> void impl_IMseStreamSource<T>::Opened(long long const token) const
{
	check(shim()->remove_Opened(token));
}

template <typename T> long long impl_IMseStreamSource<T>::Ended(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MseStreamSource, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Ended(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMseStreamSource<T>::Ended(F handler) const
{
	return Ended(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MseStreamSource, IInspectable>(handler));
}

template <typename T> void impl_IMseStreamSource<T>::Ended(long long const token) const
{
	check(shim()->remove_Ended(token));
}

template <typename T> long long impl_IMseStreamSource<T>::Closed(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MseStreamSource, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Closed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMseStreamSource<T>::Closed(F handler) const
{
	return Closed(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MseStreamSource, IInspectable>(handler));
}

template <typename T> void impl_IMseStreamSource<T>::Closed(long long const token) const
{
	check(shim()->remove_Closed(token));
}

template <typename T> Windows::Media::Core::MseSourceBufferList impl_IMseStreamSource<T>::SourceBuffers() const
{
	Windows::Media::Core::MseSourceBufferList value = nullptr;
	check(shim()->get_SourceBuffers(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::MseSourceBufferList impl_IMseStreamSource<T>::ActiveSourceBuffers() const
{
	Windows::Media::Core::MseSourceBufferList value = nullptr;
	check(shim()->get_ActiveSourceBuffers(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::MseReadyState impl_IMseStreamSource<T>::ReadyState() const
{
	Windows::Media::Core::MseReadyState value = {};
	check(shim()->get_ReadyState(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IMseStreamSource<T>::Duration() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_Duration(put(value)));
	return value;
}

template <typename T> void impl_IMseStreamSource<T>::Duration(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_Duration(get(value)));
}

template <typename T> Windows::Media::Core::MseSourceBuffer impl_IMseStreamSource<T>::AddSourceBuffer(StringReference const & mimeType) const
{
	Windows::Media::Core::MseSourceBuffer buffer = nullptr;
	check(shim()->abi_AddSourceBuffer(get(mimeType), put(buffer)));
	return buffer;
}

template <typename T> void impl_IMseStreamSource<T>::RemoveSourceBuffer(Windows::Media::Core::MseSourceBuffer const & buffer) const
{
	check(shim()->abi_RemoveSourceBuffer(get(buffer)));
}

template <typename T> void impl_IMseStreamSource<T>::EndOfStream(Windows::Media::Core::MseEndOfStreamStatus const status) const
{
	check(shim()->abi_EndOfStream(status));
}

template <typename T> long long impl_IMseSourceBuffer<T>::UpdateStarting(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MseSourceBuffer, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_UpdateStarting(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMseSourceBuffer<T>::UpdateStarting(F handler) const
{
	return UpdateStarting(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MseSourceBuffer, IInspectable>(handler));
}

template <typename T> void impl_IMseSourceBuffer<T>::UpdateStarting(long long const token) const
{
	check(shim()->remove_UpdateStarting(token));
}

template <typename T> long long impl_IMseSourceBuffer<T>::Updated(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MseSourceBuffer, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Updated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMseSourceBuffer<T>::Updated(F handler) const
{
	return Updated(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MseSourceBuffer, IInspectable>(handler));
}

template <typename T> void impl_IMseSourceBuffer<T>::Updated(long long const token) const
{
	check(shim()->remove_Updated(token));
}

template <typename T> long long impl_IMseSourceBuffer<T>::UpdateEnded(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MseSourceBuffer, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_UpdateEnded(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMseSourceBuffer<T>::UpdateEnded(F handler) const
{
	return UpdateEnded(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MseSourceBuffer, IInspectable>(handler));
}

template <typename T> void impl_IMseSourceBuffer<T>::UpdateEnded(long long const token) const
{
	check(shim()->remove_UpdateEnded(token));
}

template <typename T> long long impl_IMseSourceBuffer<T>::ErrorOccurred(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MseSourceBuffer, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_ErrorOccurred(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMseSourceBuffer<T>::ErrorOccurred(F handler) const
{
	return ErrorOccurred(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MseSourceBuffer, IInspectable>(handler));
}

template <typename T> void impl_IMseSourceBuffer<T>::ErrorOccurred(long long const token) const
{
	check(shim()->remove_ErrorOccurred(token));
}

template <typename T> long long impl_IMseSourceBuffer<T>::Aborted(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MseSourceBuffer, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Aborted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMseSourceBuffer<T>::Aborted(F handler) const
{
	return Aborted(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MseSourceBuffer, IInspectable>(handler));
}

template <typename T> void impl_IMseSourceBuffer<T>::Aborted(long long const token) const
{
	check(shim()->remove_Aborted(token));
}

template <typename T> Windows::Media::Core::MseAppendMode impl_IMseSourceBuffer<T>::Mode() const
{
	Windows::Media::Core::MseAppendMode value = {};
	check(shim()->get_Mode(&value));
	return value;
}

template <typename T> void impl_IMseSourceBuffer<T>::Mode(Windows::Media::Core::MseAppendMode const value) const
{
	check(shim()->put_Mode(value));
}

template <typename T> bool impl_IMseSourceBuffer<T>::IsUpdating() const
{
	bool value = {};
	check(shim()->get_IsUpdating(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Core::MseTimeRange> impl_IMseSourceBuffer<T>::Buffered() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Core::MseTimeRange> value;
	check(shim()->get_Buffered(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IMseSourceBuffer<T>::TimestampOffset() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_TimestampOffset(&value));
	return value;
}

template <typename T> void impl_IMseSourceBuffer<T>::TimestampOffset(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_TimestampOffset(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMseSourceBuffer<T>::AppendWindowStart() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_AppendWindowStart(&value));
	return value;
}

template <typename T> void impl_IMseSourceBuffer<T>::AppendWindowStart(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_AppendWindowStart(value));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IMseSourceBuffer<T>::AppendWindowEnd() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_AppendWindowEnd(put(value)));
	return value;
}

template <typename T> void impl_IMseSourceBuffer<T>::AppendWindowEnd(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_AppendWindowEnd(get(value)));
}

template <typename T> void impl_IMseSourceBuffer<T>::AppendBuffer(Windows::Storage::Streams::IBuffer const & buffer) const
{
	check(shim()->abi_AppendBuffer(get(buffer)));
}

template <typename T> void impl_IMseSourceBuffer<T>::AppendStream(Windows::Storage::Streams::IInputStream const & stream) const
{
	check(shim()->abi_AppendStream(get(stream)));
}

template <typename T> void impl_IMseSourceBuffer<T>::AppendStream(Windows::Storage::Streams::IInputStream const & stream, unsigned long long const maxSize) const
{
	check(shim()->abi_AppendStreamMaxSize(get(stream), maxSize));
}

template <typename T> void impl_IMseSourceBuffer<T>::Abort() const
{
	check(shim()->abi_Abort());
}

template <typename T> void impl_IMseSourceBuffer<T>::Remove(Windows::Foundation::TimeSpan const & start, Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & end) const
{
	check(shim()->abi_Remove(start, get(end)));
}

template <typename T> long long impl_IMseSourceBufferList<T>::SourceBufferAdded(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MseSourceBufferList, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_SourceBufferAdded(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMseSourceBufferList<T>::SourceBufferAdded(F handler) const
{
	return SourceBufferAdded(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MseSourceBufferList, IInspectable>(handler));
}

template <typename T> void impl_IMseSourceBufferList<T>::SourceBufferAdded(long long const token) const
{
	check(shim()->remove_SourceBufferAdded(token));
}

template <typename T> long long impl_IMseSourceBufferList<T>::SourceBufferRemoved(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MseSourceBufferList, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_SourceBufferRemoved(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMseSourceBufferList<T>::SourceBufferRemoved(F handler) const
{
	return SourceBufferRemoved(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MseSourceBufferList, IInspectable>(handler));
}

template <typename T> void impl_IMseSourceBufferList<T>::SourceBufferRemoved(long long const token) const
{
	check(shim()->remove_SourceBufferRemoved(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Core::MseSourceBuffer> impl_IMseSourceBufferList<T>::Buffers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Core::MseSourceBuffer> value;
	check(shim()->get_Buffers(put(value)));
	return value;
}

template <typename T> void impl_IHighDynamicRangeControl<T>::Enabled(bool const value) const
{
	check(shim()->put_Enabled(value));
}

template <typename T> bool impl_IHighDynamicRangeControl<T>::Enabled() const
{
	bool value = {};
	check(shim()->get_Enabled(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::HighDynamicRangeControl impl_ISceneAnalysisEffect<T>::HighDynamicRangeAnalyzer() const
{
	Windows::Media::Core::HighDynamicRangeControl value = nullptr;
	check(shim()->get_HighDynamicRangeAnalyzer(put(value)));
	return value;
}

template <typename T> void impl_ISceneAnalysisEffect<T>::DesiredAnalysisInterval(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_DesiredAnalysisInterval(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_ISceneAnalysisEffect<T>::DesiredAnalysisInterval() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_DesiredAnalysisInterval(&value));
	return value;
}

template <typename T> long long impl_ISceneAnalysisEffect<T>::SceneAnalyzed(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::SceneAnalysisEffect, Windows::Media::Core::SceneAnalyzedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_SceneAnalyzed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ISceneAnalysisEffect<T>::SceneAnalyzed(F handler) const
{
	return SceneAnalyzed(Windows::Foundation::TypedEventHandler<Windows::Media::Core::SceneAnalysisEffect, Windows::Media::Core::SceneAnalyzedEventArgs>(handler));
}

template <typename T> void impl_ISceneAnalysisEffect<T>::SceneAnalyzed(long long const cookie) const
{
	check(shim()->remove_SceneAnalyzed(cookie));
}

template <typename T> double impl_IHighDynamicRangeOutput<T>::Certainty() const
{
	double value = {};
	check(shim()->get_Certainty(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Devices::Core::FrameController> impl_IHighDynamicRangeOutput<T>::FrameControllers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Devices::Core::FrameController> value;
	check(shim()->get_FrameControllers(put(value)));
	return value;
}

template <typename T> Windows::Media::Capture::CapturedFrameControlValues impl_ISceneAnalysisEffectFrame<T>::FrameControlValues() const
{
	Windows::Media::Capture::CapturedFrameControlValues value = nullptr;
	check(shim()->get_FrameControlValues(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::HighDynamicRangeOutput impl_ISceneAnalysisEffectFrame<T>::HighDynamicRange() const
{
	Windows::Media::Core::HighDynamicRangeOutput value = nullptr;
	check(shim()->get_HighDynamicRange(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::SceneAnalysisEffectFrame impl_ISceneAnalyzedEventArgs<T>::ResultFrame() const
{
	Windows::Media::Core::SceneAnalysisEffectFrame value = nullptr;
	check(shim()->get_ResultFrame(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::FaceAnalysis::DetectedFace> impl_IFaceDetectionEffectFrame<T>::DetectedFaces() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::FaceAnalysis::DetectedFace> value;
	check(shim()->get_DetectedFaces(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::FaceDetectionEffectFrame impl_IFaceDetectedEventArgs<T>::ResultFrame() const
{
	Windows::Media::Core::FaceDetectionEffectFrame value = nullptr;
	check(shim()->get_ResultFrame(put(value)));
	return value;
}

template <typename T> void impl_IFaceDetectionEffect<T>::Enabled(bool const value) const
{
	check(shim()->put_Enabled(value));
}

template <typename T> bool impl_IFaceDetectionEffect<T>::Enabled() const
{
	bool value = {};
	check(shim()->get_Enabled(put(value)));
	return value;
}

template <typename T> void impl_IFaceDetectionEffect<T>::DesiredDetectionInterval(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_DesiredDetectionInterval(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IFaceDetectionEffect<T>::DesiredDetectionInterval() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_DesiredDetectionInterval(&value));
	return value;
}

template <typename T> long long impl_IFaceDetectionEffect<T>::FaceDetected(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::FaceDetectionEffect, Windows::Media::Core::FaceDetectedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_FaceDetected(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IFaceDetectionEffect<T>::FaceDetected(F handler) const
{
	return FaceDetected(Windows::Foundation::TypedEventHandler<Windows::Media::Core::FaceDetectionEffect, Windows::Media::Core::FaceDetectedEventArgs>(handler));
}

template <typename T> void impl_IFaceDetectionEffect<T>::FaceDetected(long long const cookie) const
{
	check(shim()->remove_FaceDetected(cookie));
}

template <typename T> void impl_IFaceDetectionEffectDefinition<T>::DetectionMode(Windows::Media::Core::FaceDetectionMode const value) const
{
	check(shim()->put_DetectionMode(value));
}

template <typename T> Windows::Media::Core::FaceDetectionMode impl_IFaceDetectionEffectDefinition<T>::DetectionMode() const
{
	Windows::Media::Core::FaceDetectionMode value = {};
	check(shim()->get_DetectionMode(&value));
	return value;
}

template <typename T> void impl_IFaceDetectionEffectDefinition<T>::SynchronousDetectionEnabled(bool const value) const
{
	check(shim()->put_SynchronousDetectionEnabled(value));
}

template <typename T> bool impl_IFaceDetectionEffectDefinition<T>::SynchronousDetectionEnabled() const
{
	bool value = {};
	check(shim()->get_SynchronousDetectionEnabled(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::VideoStabilizationEffectEnabledChangedReason impl_IVideoStabilizationEffectEnabledChangedEventArgs<T>::Reason() const
{
	Windows::Media::Core::VideoStabilizationEffectEnabledChangedReason value = {};
	check(shim()->get_Reason(&value));
	return value;
}

template <typename T> void impl_IVideoStabilizationEffect<T>::Enabled(bool const value) const
{
	check(shim()->put_Enabled(value));
}

template <typename T> bool impl_IVideoStabilizationEffect<T>::Enabled() const
{
	bool value = {};
	check(shim()->get_Enabled(put(value)));
	return value;
}

template <typename T> long long impl_IVideoStabilizationEffect<T>::EnabledChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::VideoStabilizationEffect, Windows::Media::Core::VideoStabilizationEffectEnabledChangedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_EnabledChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IVideoStabilizationEffect<T>::EnabledChanged(F handler) const
{
	return EnabledChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Core::VideoStabilizationEffect, Windows::Media::Core::VideoStabilizationEffectEnabledChangedEventArgs>(handler));
}

template <typename T> void impl_IVideoStabilizationEffect<T>::EnabledChanged(long long const cookie) const
{
	check(shim()->remove_EnabledChanged(cookie));
}

template <typename T> Windows::Media::Capture::VideoStreamConfiguration impl_IVideoStabilizationEffect<T>::GetRecommendedStreamConfiguration(Windows::Media::Devices::VideoDeviceController const & controller, Windows::Media::MediaProperties::VideoEncodingProperties const & desiredProperties) const
{
	Windows::Media::Capture::VideoStreamConfiguration value = nullptr;
	check(shim()->abi_GetRecommendedStreamConfiguration(get(controller), get(desiredProperties), put(value)));
	return value;
}

template <typename T> HRESULT impl_IMediaSourceError<T>::ExtendedError() const
{
	HRESULT value = {};
	check(shim()->get_ExtendedError(&value));
	return value;
}

template <typename T> Windows::Media::Core::MediaSourceError impl_IMediaSourceOpenOperationCompletedEventArgs<T>::Error() const
{
	Windows::Media::Core::MediaSourceError value = nullptr;
	check(shim()->get_Error(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaSourceState impl_IMediaSourceStateChangedEventArgs<T>::OldState() const
{
	Windows::Media::Core::MediaSourceState value = {};
	check(shim()->get_OldState(&value));
	return value;
}

template <typename T> Windows::Media::Core::MediaSourceState impl_IMediaSourceStateChangedEventArgs<T>::NewState() const
{
	Windows::Media::Core::MediaSourceState value = {};
	check(shim()->get_NewState(&value));
	return value;
}

template <typename T> Windows::Media::Core::MediaSource impl_IMediaSourceStatics<T>::CreateFromAdaptiveMediaSource(Windows::Media::Streaming::Adaptive::AdaptiveMediaSource const & mediaSource) const
{
	Windows::Media::Core::MediaSource result = nullptr;
	check(shim()->abi_CreateFromAdaptiveMediaSource(get(mediaSource), put(result)));
	return result;
}

template <typename T> Windows::Media::Core::MediaSource impl_IMediaSourceStatics<T>::CreateFromMediaStreamSource(Windows::Media::Core::MediaStreamSource const & mediaSource) const
{
	Windows::Media::Core::MediaSource result = nullptr;
	check(shim()->abi_CreateFromMediaStreamSource(get(mediaSource), put(result)));
	return result;
}

template <typename T> Windows::Media::Core::MediaSource impl_IMediaSourceStatics<T>::CreateFromMseStreamSource(Windows::Media::Core::MseStreamSource const & mediaSource) const
{
	Windows::Media::Core::MediaSource result = nullptr;
	check(shim()->abi_CreateFromMseStreamSource(get(mediaSource), put(result)));
	return result;
}

template <typename T> Windows::Media::Core::MediaSource impl_IMediaSourceStatics<T>::CreateFromIMediaSource(Windows::Media::Core::IMediaSource const & mediaSource) const
{
	Windows::Media::Core::MediaSource result = nullptr;
	check(shim()->abi_CreateFromIMediaSource(get(mediaSource), put(result)));
	return result;
}

template <typename T> Windows::Media::Core::MediaSource impl_IMediaSourceStatics<T>::CreateFromStorageFile(Windows::Storage::IStorageFile const & file) const
{
	Windows::Media::Core::MediaSource result = nullptr;
	check(shim()->abi_CreateFromStorageFile(get(file), put(result)));
	return result;
}

template <typename T> Windows::Media::Core::MediaSource impl_IMediaSourceStatics<T>::CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream, StringReference const & contentType) const
{
	Windows::Media::Core::MediaSource result = nullptr;
	check(shim()->abi_CreateFromStream(get(stream), get(contentType), put(result)));
	return result;
}

template <typename T> Windows::Media::Core::MediaSource impl_IMediaSourceStatics<T>::CreateFromStreamReference(Windows::Storage::Streams::IRandomAccessStreamReference const & stream, StringReference const & contentType) const
{
	Windows::Media::Core::MediaSource result = nullptr;
	check(shim()->abi_CreateFromStreamReference(get(stream), get(contentType), put(result)));
	return result;
}

template <typename T> Windows::Media::Core::MediaSource impl_IMediaSourceStatics<T>::CreateFromUri(Windows::Foundation::Uri const & uri) const
{
	Windows::Media::Core::MediaSource result = nullptr;
	check(shim()->abi_CreateFromUri(get(uri), put(result)));
	return result;
}

template <typename T> Windows::Media::Core::MediaSource impl_IMediaSourceStatics2<T>::CreateFromMediaBinder(Windows::Media::Core::MediaBinder const & binder) const
{
	Windows::Media::Core::MediaSource result = nullptr;
	check(shim()->abi_CreateFromMediaBinder(get(binder), put(result)));
	return result;
}

template <typename T> long long impl_IMediaBinder<T>::Binding(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaBinder, Windows::Media::Core::MediaBindingEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Binding(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaBinder<T>::Binding(F handler) const
{
	return Binding(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MediaBinder, Windows::Media::Core::MediaBindingEventArgs>(handler));
}

template <typename T> void impl_IMediaBinder<T>::Binding(long long const token) const
{
	check(shim()->remove_Binding(token));
}

template <typename T> String impl_IMediaBinder<T>::Token() const
{
	String value;
	check(shim()->get_Token(put(value)));
	return value;
}

template <typename T> void impl_IMediaBinder<T>::Token(StringReference const & value) const
{
	check(shim()->put_Token(get(value)));
}

template <typename T> Windows::Media::Core::MediaSource impl_IMediaBinder<T>::Source() const
{
	Windows::Media::Core::MediaSource value = nullptr;
	check(shim()->get_Source(put(value)));
	return value;
}

template <typename T> long long impl_IMediaBindingEventArgs<T>::Canceled(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaBindingEventArgs, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Canceled(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaBindingEventArgs<T>::Canceled(F handler) const
{
	return Canceled(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MediaBindingEventArgs, IInspectable>(handler));
}

template <typename T> void impl_IMediaBindingEventArgs<T>::Canceled(long long const token) const
{
	check(shim()->remove_Canceled(token));
}

template <typename T> Windows::Media::Core::MediaBinder impl_IMediaBindingEventArgs<T>::MediaBinder() const
{
	Windows::Media::Core::MediaBinder value = nullptr;
	check(shim()->get_MediaBinder(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Deferral impl_IMediaBindingEventArgs<T>::GetDeferral() const
{
	Windows::Foundation::Deferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> void impl_IMediaBindingEventArgs<T>::SetUri(Windows::Foundation::Uri const & uri) const
{
	check(shim()->abi_SetUri(get(uri)));
}

template <typename T> void impl_IMediaBindingEventArgs<T>::SetStream(Windows::Storage::Streams::IRandomAccessStream const & stream, StringReference const & contentType) const
{
	check(shim()->abi_SetStream(get(stream), get(contentType)));
}

template <typename T> void impl_IMediaBindingEventArgs<T>::SetStreamReference(Windows::Storage::Streams::IRandomAccessStreamReference const & stream, StringReference const & contentType) const
{
	check(shim()->abi_SetStreamReference(get(stream), get(contentType)));
}

template <typename T> long long impl_IMediaSource2<T>::OpenOperationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaSource, Windows::Media::Core::MediaSourceOpenOperationCompletedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_OpenOperationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaSource2<T>::OpenOperationCompleted(F handler) const
{
	return OpenOperationCompleted(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MediaSource, Windows::Media::Core::MediaSourceOpenOperationCompletedEventArgs>(handler));
}

template <typename T> void impl_IMediaSource2<T>::OpenOperationCompleted(long long const token) const
{
	check(shim()->remove_OpenOperationCompleted(token));
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_IMediaSource2<T>::CustomProperties() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check(shim()->get_CustomProperties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IMediaSource2<T>::Duration() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_Duration(put(value)));
	return value;
}

template <typename T> bool impl_IMediaSource2<T>::IsOpen() const
{
	bool value = {};
	check(shim()->get_IsOpen(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IObservableVector<Windows::Media::Core::TimedTextSource> impl_IMediaSource2<T>::ExternalTimedTextSources() const
{
	Windows::Foundation::Collections::IObservableVector<Windows::Media::Core::TimedTextSource> value;
	check(shim()->get_ExternalTimedTextSources(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IObservableVector<Windows::Media::Core::TimedMetadataTrack> impl_IMediaSource2<T>::ExternalTimedMetadataTracks() const
{
	Windows::Foundation::Collections::IObservableVector<Windows::Media::Core::TimedMetadataTrack> value;
	check(shim()->get_ExternalTimedMetadataTracks(put(value)));
	return value;
}

template <typename T> long long impl_IMediaSource3<T>::StateChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::MediaSource, Windows::Media::Core::MediaSourceStateChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_StateChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaSource3<T>::StateChanged(F handler) const
{
	return StateChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Core::MediaSource, Windows::Media::Core::MediaSourceStateChangedEventArgs>(handler));
}

template <typename T> void impl_IMediaSource3<T>::StateChanged(long long const token) const
{
	check(shim()->remove_StateChanged(token));
}

template <typename T> Windows::Media::Core::MediaSourceState impl_IMediaSource3<T>::State() const
{
	Windows::Media::Core::MediaSourceState value = {};
	check(shim()->get_State(&value));
	return value;
}

template <typename T> void impl_IMediaSource3<T>::Reset() const
{
	check(shim()->abi_Reset());
}

template <typename T> void impl_IMediaCue<T>::StartTime(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_StartTime(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaCue<T>::StartTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_StartTime(&value));
	return value;
}

template <typename T> void impl_IMediaCue<T>::Duration(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_Duration(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaCue<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Duration(&value));
	return value;
}

template <typename T> void impl_IMediaCue<T>::Id(StringReference const & value) const
{
	check(shim()->put_Id(get(value)));
}

template <typename T> String impl_IMediaCue<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::TimedTextRegion impl_ITimedTextCue<T>::CueRegion() const
{
	Windows::Media::Core::TimedTextRegion value = nullptr;
	check(shim()->get_CueRegion(put(value)));
	return value;
}

template <typename T> void impl_ITimedTextCue<T>::CueRegion(Windows::Media::Core::TimedTextRegion const & value) const
{
	check(shim()->put_CueRegion(get(value)));
}

template <typename T> Windows::Media::Core::TimedTextStyle impl_ITimedTextCue<T>::CueStyle() const
{
	Windows::Media::Core::TimedTextStyle value = nullptr;
	check(shim()->get_CueStyle(put(value)));
	return value;
}

template <typename T> void impl_ITimedTextCue<T>::CueStyle(Windows::Media::Core::TimedTextStyle const & value) const
{
	check(shim()->put_CueStyle(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Core::TimedTextLine> impl_ITimedTextCue<T>::Lines() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Core::TimedTextLine> value;
	check(shim()->get_Lines(put(value)));
	return value;
}

template <typename T> String impl_ITimedTextRegion<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_ITimedTextRegion<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> Windows::Media::Core::TimedTextPoint impl_ITimedTextRegion<T>::Position() const
{
	Windows::Media::Core::TimedTextPoint value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> void impl_ITimedTextRegion<T>::Position(Windows::Media::Core::TimedTextPoint const & value) const
{
	check(shim()->put_Position(value));
}

template <typename T> Windows::Media::Core::TimedTextSize impl_ITimedTextRegion<T>::Extent() const
{
	Windows::Media::Core::TimedTextSize value = {};
	check(shim()->get_Extent(&value));
	return value;
}

template <typename T> void impl_ITimedTextRegion<T>::Extent(Windows::Media::Core::TimedTextSize const & value) const
{
	check(shim()->put_Extent(value));
}

template <typename T> Windows::UI::Color impl_ITimedTextRegion<T>::Background() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Background(&value));
	return value;
}

template <typename T> void impl_ITimedTextRegion<T>::Background(Windows::UI::Color const & value) const
{
	check(shim()->put_Background(value));
}

template <typename T> Windows::Media::Core::TimedTextWritingMode impl_ITimedTextRegion<T>::WritingMode() const
{
	Windows::Media::Core::TimedTextWritingMode value = {};
	check(shim()->get_WritingMode(&value));
	return value;
}

template <typename T> void impl_ITimedTextRegion<T>::WritingMode(Windows::Media::Core::TimedTextWritingMode const value) const
{
	check(shim()->put_WritingMode(value));
}

template <typename T> Windows::Media::Core::TimedTextDisplayAlignment impl_ITimedTextRegion<T>::DisplayAlignment() const
{
	Windows::Media::Core::TimedTextDisplayAlignment value = {};
	check(shim()->get_DisplayAlignment(&value));
	return value;
}

template <typename T> void impl_ITimedTextRegion<T>::DisplayAlignment(Windows::Media::Core::TimedTextDisplayAlignment const value) const
{
	check(shim()->put_DisplayAlignment(value));
}

template <typename T> Windows::Media::Core::TimedTextDouble impl_ITimedTextRegion<T>::LineHeight() const
{
	Windows::Media::Core::TimedTextDouble value = {};
	check(shim()->get_LineHeight(&value));
	return value;
}

template <typename T> void impl_ITimedTextRegion<T>::LineHeight(Windows::Media::Core::TimedTextDouble const & value) const
{
	check(shim()->put_LineHeight(value));
}

template <typename T> bool impl_ITimedTextRegion<T>::IsOverflowClipped() const
{
	bool value = {};
	check(shim()->get_IsOverflowClipped(put(value)));
	return value;
}

template <typename T> void impl_ITimedTextRegion<T>::IsOverflowClipped(bool const value) const
{
	check(shim()->put_IsOverflowClipped(value));
}

template <typename T> Windows::Media::Core::TimedTextPadding impl_ITimedTextRegion<T>::Padding() const
{
	Windows::Media::Core::TimedTextPadding value = {};
	check(shim()->get_Padding(&value));
	return value;
}

template <typename T> void impl_ITimedTextRegion<T>::Padding(Windows::Media::Core::TimedTextPadding const & value) const
{
	check(shim()->put_Padding(value));
}

template <typename T> Windows::Media::Core::TimedTextWrapping impl_ITimedTextRegion<T>::TextWrapping() const
{
	Windows::Media::Core::TimedTextWrapping value = {};
	check(shim()->get_TextWrapping(&value));
	return value;
}

template <typename T> void impl_ITimedTextRegion<T>::TextWrapping(Windows::Media::Core::TimedTextWrapping const value) const
{
	check(shim()->put_TextWrapping(value));
}

template <typename T> int impl_ITimedTextRegion<T>::ZIndex() const
{
	int value = {};
	check(shim()->get_ZIndex(&value));
	return value;
}

template <typename T> void impl_ITimedTextRegion<T>::ZIndex(int const value) const
{
	check(shim()->put_ZIndex(value));
}

template <typename T> Windows::Media::Core::TimedTextScrollMode impl_ITimedTextRegion<T>::ScrollMode() const
{
	Windows::Media::Core::TimedTextScrollMode value = {};
	check(shim()->get_ScrollMode(&value));
	return value;
}

template <typename T> void impl_ITimedTextRegion<T>::ScrollMode(Windows::Media::Core::TimedTextScrollMode const value) const
{
	check(shim()->put_ScrollMode(value));
}

template <typename T> String impl_ITimedTextStyle<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_ITimedTextStyle<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> String impl_ITimedTextStyle<T>::FontFamily() const
{
	String value;
	check(shim()->get_FontFamily(put(value)));
	return value;
}

template <typename T> void impl_ITimedTextStyle<T>::FontFamily(StringReference const & value) const
{
	check(shim()->put_FontFamily(get(value)));
}

template <typename T> Windows::Media::Core::TimedTextDouble impl_ITimedTextStyle<T>::FontSize() const
{
	Windows::Media::Core::TimedTextDouble value = {};
	check(shim()->get_FontSize(&value));
	return value;
}

template <typename T> void impl_ITimedTextStyle<T>::FontSize(Windows::Media::Core::TimedTextDouble const & value) const
{
	check(shim()->put_FontSize(value));
}

template <typename T> Windows::Media::Core::TimedTextWeight impl_ITimedTextStyle<T>::FontWeight() const
{
	Windows::Media::Core::TimedTextWeight value = {};
	check(shim()->get_FontWeight(&value));
	return value;
}

template <typename T> void impl_ITimedTextStyle<T>::FontWeight(Windows::Media::Core::TimedTextWeight const value) const
{
	check(shim()->put_FontWeight(value));
}

template <typename T> Windows::UI::Color impl_ITimedTextStyle<T>::Foreground() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Foreground(&value));
	return value;
}

template <typename T> void impl_ITimedTextStyle<T>::Foreground(Windows::UI::Color const & value) const
{
	check(shim()->put_Foreground(value));
}

template <typename T> Windows::UI::Color impl_ITimedTextStyle<T>::Background() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Background(&value));
	return value;
}

template <typename T> void impl_ITimedTextStyle<T>::Background(Windows::UI::Color const & value) const
{
	check(shim()->put_Background(value));
}

template <typename T> bool impl_ITimedTextStyle<T>::IsBackgroundAlwaysShown() const
{
	bool value = {};
	check(shim()->get_IsBackgroundAlwaysShown(put(value)));
	return value;
}

template <typename T> void impl_ITimedTextStyle<T>::IsBackgroundAlwaysShown(bool const value) const
{
	check(shim()->put_IsBackgroundAlwaysShown(value));
}

template <typename T> Windows::Media::Core::TimedTextFlowDirection impl_ITimedTextStyle<T>::FlowDirection() const
{
	Windows::Media::Core::TimedTextFlowDirection value = {};
	check(shim()->get_FlowDirection(&value));
	return value;
}

template <typename T> void impl_ITimedTextStyle<T>::FlowDirection(Windows::Media::Core::TimedTextFlowDirection const value) const
{
	check(shim()->put_FlowDirection(value));
}

template <typename T> Windows::Media::Core::TimedTextLineAlignment impl_ITimedTextStyle<T>::LineAlignment() const
{
	Windows::Media::Core::TimedTextLineAlignment value = {};
	check(shim()->get_LineAlignment(&value));
	return value;
}

template <typename T> void impl_ITimedTextStyle<T>::LineAlignment(Windows::Media::Core::TimedTextLineAlignment const value) const
{
	check(shim()->put_LineAlignment(value));
}

template <typename T> Windows::UI::Color impl_ITimedTextStyle<T>::OutlineColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_OutlineColor(&value));
	return value;
}

template <typename T> void impl_ITimedTextStyle<T>::OutlineColor(Windows::UI::Color const & value) const
{
	check(shim()->put_OutlineColor(value));
}

template <typename T> Windows::Media::Core::TimedTextDouble impl_ITimedTextStyle<T>::OutlineThickness() const
{
	Windows::Media::Core::TimedTextDouble value = {};
	check(shim()->get_OutlineThickness(&value));
	return value;
}

template <typename T> void impl_ITimedTextStyle<T>::OutlineThickness(Windows::Media::Core::TimedTextDouble const & value) const
{
	check(shim()->put_OutlineThickness(value));
}

template <typename T> Windows::Media::Core::TimedTextDouble impl_ITimedTextStyle<T>::OutlineRadius() const
{
	Windows::Media::Core::TimedTextDouble value = {};
	check(shim()->get_OutlineRadius(&value));
	return value;
}

template <typename T> void impl_ITimedTextStyle<T>::OutlineRadius(Windows::Media::Core::TimedTextDouble const & value) const
{
	check(shim()->put_OutlineRadius(value));
}

template <typename T> int impl_ITimedTextSubformat<T>::StartIndex() const
{
	int value = {};
	check(shim()->get_StartIndex(&value));
	return value;
}

template <typename T> void impl_ITimedTextSubformat<T>::StartIndex(int const value) const
{
	check(shim()->put_StartIndex(value));
}

template <typename T> int impl_ITimedTextSubformat<T>::Length() const
{
	int value = {};
	check(shim()->get_Length(&value));
	return value;
}

template <typename T> void impl_ITimedTextSubformat<T>::Length(int const value) const
{
	check(shim()->put_Length(value));
}

template <typename T> Windows::Media::Core::TimedTextStyle impl_ITimedTextSubformat<T>::SubformatStyle() const
{
	Windows::Media::Core::TimedTextStyle value = nullptr;
	check(shim()->get_SubformatStyle(put(value)));
	return value;
}

template <typename T> void impl_ITimedTextSubformat<T>::SubformatStyle(Windows::Media::Core::TimedTextStyle const & value) const
{
	check(shim()->put_SubformatStyle(get(value)));
}

template <typename T> String impl_ITimedTextLine<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> void impl_ITimedTextLine<T>::Text(StringReference const & value) const
{
	check(shim()->put_Text(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Core::TimedTextSubformat> impl_ITimedTextLine<T>::Subformats() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Core::TimedTextSubformat> value;
	check(shim()->get_Subformats(put(value)));
	return value;
}

template <typename T> long long impl_ISingleSelectMediaTrackList<T>::SelectedIndexChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::ISingleSelectMediaTrackList, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_SelectedIndexChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISingleSelectMediaTrackList<T>::SelectedIndexChanged(F handler) const
{
	return SelectedIndexChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Core::ISingleSelectMediaTrackList, IInspectable>(handler));
}

template <typename T> void impl_ISingleSelectMediaTrackList<T>::SelectedIndexChanged(long long const token) const
{
	check(shim()->remove_SelectedIndexChanged(token));
}

template <typename T> void impl_ISingleSelectMediaTrackList<T>::SelectedIndex(int const value) const
{
	check(shim()->put_SelectedIndex(value));
}

template <typename T> int impl_ISingleSelectMediaTrackList<T>::SelectedIndex() const
{
	int value = {};
	check(shim()->get_SelectedIndex(&value));
	return value;
}

template <typename T> String impl_IMediaTrack<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IMediaTrack<T>::Language() const
{
	String value;
	check(shim()->get_Language(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaTrackKind impl_IMediaTrack<T>::TrackKind() const
{
	Windows::Media::Core::MediaTrackKind value = {};
	check(shim()->get_TrackKind(&value));
	return value;
}

template <typename T> void impl_IMediaTrack<T>::Label(StringReference const & value) const
{
	check(shim()->put_Label(get(value)));
}

template <typename T> String impl_IMediaTrack<T>::Label() const
{
	String value;
	check(shim()->get_Label(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::TimedMetadataTrackErrorCode impl_ITimedMetadataTrackError<T>::ErrorCode() const
{
	Windows::Media::Core::TimedMetadataTrackErrorCode value = {};
	check(shim()->get_ErrorCode(&value));
	return value;
}

template <typename T> HRESULT impl_ITimedMetadataTrackError<T>::ExtendedError() const
{
	HRESULT value = {};
	check(shim()->get_ExtendedError(&value));
	return value;
}

template <typename T> Windows::Media::Core::IMediaCue impl_IMediaCueEventArgs<T>::Cue() const
{
	Windows::Media::Core::IMediaCue value;
	check(shim()->get_Cue(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::TimedMetadataTrackError impl_ITimedMetadataTrackFailedEventArgs<T>::Error() const
{
	Windows::Media::Core::TimedMetadataTrackError value = nullptr;
	check(shim()->get_Error(put(value)));
	return value;
}

template <typename T> void impl_IDataCue<T>::Data(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_Data(get(value)));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IDataCue<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::TimedMetadataTrack impl_ITimedMetadataTrackFactory<T>::Create(StringReference const & id, StringReference const & language, Windows::Media::Core::TimedMetadataKind const kind) const
{
	Windows::Media::Core::TimedMetadataTrack value = nullptr;
	check(shim()->abi_Create(get(id), get(language), kind, put(value)));
	return value;
}

template <typename T> long long impl_ITimedMetadataTrack<T>::CueEntered(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::TimedMetadataTrack, Windows::Media::Core::MediaCueEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_CueEntered(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ITimedMetadataTrack<T>::CueEntered(F handler) const
{
	return CueEntered(Windows::Foundation::TypedEventHandler<Windows::Media::Core::TimedMetadataTrack, Windows::Media::Core::MediaCueEventArgs>(handler));
}

template <typename T> void impl_ITimedMetadataTrack<T>::CueEntered(long long const token) const
{
	check(shim()->remove_CueEntered(token));
}

template <typename T> long long impl_ITimedMetadataTrack<T>::CueExited(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::TimedMetadataTrack, Windows::Media::Core::MediaCueEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_CueExited(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ITimedMetadataTrack<T>::CueExited(F handler) const
{
	return CueExited(Windows::Foundation::TypedEventHandler<Windows::Media::Core::TimedMetadataTrack, Windows::Media::Core::MediaCueEventArgs>(handler));
}

template <typename T> void impl_ITimedMetadataTrack<T>::CueExited(long long const token) const
{
	check(shim()->remove_CueExited(token));
}

template <typename T> long long impl_ITimedMetadataTrack<T>::TrackFailed(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::TimedMetadataTrack, Windows::Media::Core::TimedMetadataTrackFailedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_TrackFailed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ITimedMetadataTrack<T>::TrackFailed(F handler) const
{
	return TrackFailed(Windows::Foundation::TypedEventHandler<Windows::Media::Core::TimedMetadataTrack, Windows::Media::Core::TimedMetadataTrackFailedEventArgs>(handler));
}

template <typename T> void impl_ITimedMetadataTrack<T>::TrackFailed(long long const token) const
{
	check(shim()->remove_TrackFailed(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Core::IMediaCue> impl_ITimedMetadataTrack<T>::Cues() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Core::IMediaCue> value;
	check(shim()->get_Cues(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Core::IMediaCue> impl_ITimedMetadataTrack<T>::ActiveCues() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Core::IMediaCue> value;
	check(shim()->get_ActiveCues(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::TimedMetadataKind impl_ITimedMetadataTrack<T>::TimedMetadataKind() const
{
	Windows::Media::Core::TimedMetadataKind value = {};
	check(shim()->get_TimedMetadataKind(&value));
	return value;
}

template <typename T> String impl_ITimedMetadataTrack<T>::DispatchType() const
{
	String value;
	check(shim()->get_DispatchType(put(value)));
	return value;
}

template <typename T> void impl_ITimedMetadataTrack<T>::AddCue(Windows::Media::Core::IMediaCue const & cue) const
{
	check(shim()->abi_AddCue(get(cue)));
}

template <typename T> void impl_ITimedMetadataTrack<T>::RemoveCue(Windows::Media::Core::IMediaCue const & cue) const
{
	check(shim()->abi_RemoveCue(get(cue)));
}

template <typename T> Windows::Media::Core::TimedMetadataTrackError impl_ITimedTextSourceResolveResultEventArgs<T>::Error() const
{
	Windows::Media::Core::TimedMetadataTrackError value = nullptr;
	check(shim()->get_Error(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Core::TimedMetadataTrack> impl_ITimedTextSourceResolveResultEventArgs<T>::Tracks() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Core::TimedMetadataTrack> value;
	check(shim()->get_Tracks(put(value)));
	return value;
}

template <typename T> long long impl_ITimedTextSource<T>::Resolved(Windows::Foundation::ITypedEventHandler<Windows::Media::Core::TimedTextSource, Windows::Media::Core::TimedTextSourceResolveResultEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Resolved(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ITimedTextSource<T>::Resolved(F handler) const
{
	return Resolved(Windows::Foundation::TypedEventHandler<Windows::Media::Core::TimedTextSource, Windows::Media::Core::TimedTextSourceResolveResultEventArgs>(handler));
}

template <typename T> void impl_ITimedTextSource<T>::Resolved(long long const token) const
{
	check(shim()->remove_Resolved(token));
}

template <typename T> Windows::Media::Core::TimedTextSource impl_ITimedTextSourceStatics<T>::CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Media::Core::TimedTextSource value = nullptr;
	check(shim()->abi_CreateFromStream(get(stream), put(value)));
	return value;
}

template <typename T> Windows::Media::Core::TimedTextSource impl_ITimedTextSourceStatics<T>::CreateFromUri(Windows::Foundation::Uri const & uri) const
{
	Windows::Media::Core::TimedTextSource value = nullptr;
	check(shim()->abi_CreateFromUri(get(uri), put(value)));
	return value;
}

template <typename T> Windows::Media::Core::TimedTextSource impl_ITimedTextSourceStatics<T>::CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream, StringReference const & defaultLanguage) const
{
	Windows::Media::Core::TimedTextSource value = nullptr;
	check(shim()->abi_CreateFromStreamWithLanguage(get(stream), get(defaultLanguage), put(value)));
	return value;
}

template <typename T> Windows::Media::Core::TimedTextSource impl_ITimedTextSourceStatics<T>::CreateFromUri(Windows::Foundation::Uri const & uri, StringReference const & defaultLanguage) const
{
	Windows::Media::Core::TimedTextSource value = nullptr;
	check(shim()->abi_CreateFromUriWithLanguage(get(uri), get(defaultLanguage), put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Devices {

template <typename T> void impl_ICallControlEventHandler<T>::Invoke(Windows::Media::Devices::CallControl const & sender) const
{
	check(shim()->abi_Invoke(get(sender)));
}

template <typename T> void impl_IDialRequestedEventHandler<T>::Invoke(Windows::Media::Devices::CallControl const & sender, Windows::Media::Devices::DialRequestedEventArgs const & e) const
{
	check(shim()->abi_Invoke(get(sender), get(e)));
}

template <typename T> void impl_IRedialRequestedEventHandler<T>::Invoke(Windows::Media::Devices::CallControl const & sender, Windows::Media::Devices::RedialRequestedEventArgs const & e) const
{
	check(shim()->abi_Invoke(get(sender), get(e)));
}

template <typename T> void impl_IKeypadPressedEventHandler<T>::Invoke(Windows::Media::Devices::CallControl const & sender, Windows::Media::Devices::KeypadPressedEventArgs const & e) const
{
	check(shim()->abi_Invoke(get(sender), get(e)));
}

template <typename T> void impl_IDialRequestedEventArgs<T>::Handled() const
{
	check(shim()->abi_Handled());
}

template <typename T> IInspectable impl_IDialRequestedEventArgs<T>::Contact() const
{
	IInspectable value;
	check(shim()->get_Contact(put(value)));
	return value;
}

template <typename T> void impl_IRedialRequestedEventArgs<T>::Handled() const
{
	check(shim()->abi_Handled());
}

template <typename T> Windows::Media::Devices::TelephonyKey impl_IKeypadPressedEventArgs<T>::TelephonyKey() const
{
	Windows::Media::Devices::TelephonyKey telephonyKey = {};
	check(shim()->get_TelephonyKey(&telephonyKey));
	return telephonyKey;
}

template <typename T> unsigned long long impl_ICallControl<T>::IndicateNewIncomingCall(bool const enableRinger, StringReference const & callerId) const
{
	unsigned long long callToken = {};
	check(shim()->abi_IndicateNewIncomingCall(enableRinger, get(callerId), &callToken));
	return callToken;
}

template <typename T> unsigned long long impl_ICallControl<T>::IndicateNewOutgoingCall() const
{
	unsigned long long callToken = {};
	check(shim()->abi_IndicateNewOutgoingCall(&callToken));
	return callToken;
}

template <typename T> void impl_ICallControl<T>::IndicateActiveCall(unsigned long long const callToken) const
{
	check(shim()->abi_IndicateActiveCall(callToken));
}

template <typename T> void impl_ICallControl<T>::EndCall(unsigned long long const callToken) const
{
	check(shim()->abi_EndCall(callToken));
}

template <typename T> bool impl_ICallControl<T>::HasRinger() const
{
	bool value = {};
	check(shim()->get_HasRinger(put(value)));
	return value;
}

template <typename T> long long impl_ICallControl<T>::AnswerRequested(Windows::Media::Devices::ICallControlEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_AnswerRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICallControl<T>::AnswerRequested(F handler) const
{
	return AnswerRequested(Windows::Media::Devices::CallControlEventHandler(handler));
}

template <typename T> void impl_ICallControl<T>::AnswerRequested(long long const token) const
{
	check(shim()->remove_AnswerRequested(token));
}

template <typename T> long long impl_ICallControl<T>::HangUpRequested(Windows::Media::Devices::ICallControlEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_HangUpRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICallControl<T>::HangUpRequested(F handler) const
{
	return HangUpRequested(Windows::Media::Devices::CallControlEventHandler(handler));
}

template <typename T> void impl_ICallControl<T>::HangUpRequested(long long const token) const
{
	check(shim()->remove_HangUpRequested(token));
}

template <typename T> long long impl_ICallControl<T>::DialRequested(Windows::Media::Devices::IDialRequestedEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_DialRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICallControl<T>::DialRequested(F handler) const
{
	return DialRequested(Windows::Media::Devices::DialRequestedEventHandler(handler));
}

template <typename T> void impl_ICallControl<T>::DialRequested(long long const token) const
{
	check(shim()->remove_DialRequested(token));
}

template <typename T> long long impl_ICallControl<T>::RedialRequested(Windows::Media::Devices::IRedialRequestedEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_RedialRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICallControl<T>::RedialRequested(F handler) const
{
	return RedialRequested(Windows::Media::Devices::RedialRequestedEventHandler(handler));
}

template <typename T> void impl_ICallControl<T>::RedialRequested(long long const token) const
{
	check(shim()->remove_RedialRequested(token));
}

template <typename T> long long impl_ICallControl<T>::KeypadPressed(Windows::Media::Devices::IKeypadPressedEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_KeypadPressed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICallControl<T>::KeypadPressed(F handler) const
{
	return KeypadPressed(Windows::Media::Devices::KeypadPressedEventHandler(handler));
}

template <typename T> void impl_ICallControl<T>::KeypadPressed(long long const token) const
{
	check(shim()->remove_KeypadPressed(token));
}

template <typename T> long long impl_ICallControl<T>::AudioTransferRequested(Windows::Media::Devices::ICallControlEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_AudioTransferRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICallControl<T>::AudioTransferRequested(F handler) const
{
	return AudioTransferRequested(Windows::Media::Devices::CallControlEventHandler(handler));
}

template <typename T> void impl_ICallControl<T>::AudioTransferRequested(long long const token) const
{
	check(shim()->remove_AudioTransferRequested(token));
}

template <typename T> Windows::Media::Devices::CallControl impl_ICallControlStatics<T>::GetDefault() const
{
	Windows::Media::Devices::CallControl callControl = nullptr;
	check(shim()->abi_GetDefault(put(callControl)));
	return callControl;
}

template <typename T> Windows::Media::Devices::CallControl impl_ICallControlStatics<T>::FromId(StringReference const & deviceId) const
{
	Windows::Media::Devices::CallControl callControl = nullptr;
	check(shim()->abi_FromId(get(deviceId), put(callControl)));
	return callControl;
}

template <typename T> String impl_IDefaultAudioDeviceChangedEventArgs<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::AudioDeviceRole impl_IDefaultAudioDeviceChangedEventArgs<T>::Role() const
{
	Windows::Media::Devices::AudioDeviceRole value = {};
	check(shim()->get_Role(&value));
	return value;
}

template <typename T> String impl_IMediaDeviceStatics<T>::GetAudioCaptureSelector() const
{
	String selector;
	check(shim()->abi_GetAudioCaptureSelector(put(selector)));
	return selector;
}

template <typename T> String impl_IMediaDeviceStatics<T>::GetAudioRenderSelector() const
{
	String selector;
	check(shim()->abi_GetAudioRenderSelector(put(selector)));
	return selector;
}

template <typename T> String impl_IMediaDeviceStatics<T>::GetVideoCaptureSelector() const
{
	String selector;
	check(shim()->abi_GetVideoCaptureSelector(put(selector)));
	return selector;
}

template <typename T> String impl_IMediaDeviceStatics<T>::GetDefaultAudioCaptureId(Windows::Media::Devices::AudioDeviceRole const role) const
{
	String deviceId;
	check(shim()->abi_GetDefaultAudioCaptureId(role, put(deviceId)));
	return deviceId;
}

template <typename T> String impl_IMediaDeviceStatics<T>::GetDefaultAudioRenderId(Windows::Media::Devices::AudioDeviceRole const role) const
{
	String deviceId;
	check(shim()->abi_GetDefaultAudioRenderId(role, put(deviceId)));
	return deviceId;
}

template <typename T> long long impl_IMediaDeviceStatics<T>::DefaultAudioCaptureDeviceChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_DefaultAudioCaptureDeviceChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaDeviceStatics<T>::DefaultAudioCaptureDeviceChanged(F handler) const
{
	return DefaultAudioCaptureDeviceChanged(Windows::Foundation::TypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs>(handler));
}

template <typename T> void impl_IMediaDeviceStatics<T>::DefaultAudioCaptureDeviceChanged(long long const cookie) const
{
	check(shim()->remove_DefaultAudioCaptureDeviceChanged(cookie));
}

template <typename T> long long impl_IMediaDeviceStatics<T>::DefaultAudioRenderDeviceChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_DefaultAudioRenderDeviceChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaDeviceStatics<T>::DefaultAudioRenderDeviceChanged(F handler) const
{
	return DefaultAudioRenderDeviceChanged(Windows::Foundation::TypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs>(handler));
}

template <typename T> void impl_IMediaDeviceStatics<T>::DefaultAudioRenderDeviceChanged(long long const cookie) const
{
	check(shim()->remove_DefaultAudioRenderDeviceChanged(cookie));
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::CaptureSceneMode> impl_ISceneModeControl<T>::SupportedModes() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::CaptureSceneMode> value;
	check(shim()->get_SupportedModes(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::CaptureSceneMode impl_ISceneModeControl<T>::Value() const
{
	Windows::Media::Devices::CaptureSceneMode value = {};
	check(shim()->get_Value(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISceneModeControl<T>::SetValueAsync(Windows::Media::Devices::CaptureSceneMode const sceneMode) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetValueAsync(sceneMode, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> bool impl_ITorchControl<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> bool impl_ITorchControl<T>::PowerSupported() const
{
	bool value = {};
	check(shim()->get_PowerSupported(put(value)));
	return value;
}

template <typename T> bool impl_ITorchControl<T>::Enabled() const
{
	bool value = {};
	check(shim()->get_Enabled(put(value)));
	return value;
}

template <typename T> void impl_ITorchControl<T>::Enabled(bool const value) const
{
	check(shim()->put_Enabled(value));
}

template <typename T> float impl_ITorchControl<T>::PowerPercent() const
{
	float value = {};
	check(shim()->get_PowerPercent(&value));
	return value;
}

template <typename T> void impl_ITorchControl<T>::PowerPercent(float const value) const
{
	check(shim()->put_PowerPercent(value));
}

template <typename T> bool impl_IFlashControl<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> bool impl_IFlashControl<T>::PowerSupported() const
{
	bool value = {};
	check(shim()->get_PowerSupported(put(value)));
	return value;
}

template <typename T> bool impl_IFlashControl<T>::RedEyeReductionSupported() const
{
	bool value = {};
	check(shim()->get_RedEyeReductionSupported(put(value)));
	return value;
}

template <typename T> bool impl_IFlashControl<T>::Enabled() const
{
	bool value = {};
	check(shim()->get_Enabled(put(value)));
	return value;
}

template <typename T> void impl_IFlashControl<T>::Enabled(bool const value) const
{
	check(shim()->put_Enabled(value));
}

template <typename T> bool impl_IFlashControl<T>::Auto() const
{
	bool value = {};
	check(shim()->get_Auto(put(value)));
	return value;
}

template <typename T> void impl_IFlashControl<T>::Auto(bool const value) const
{
	check(shim()->put_Auto(value));
}

template <typename T> bool impl_IFlashControl<T>::RedEyeReduction() const
{
	bool value = {};
	check(shim()->get_RedEyeReduction(put(value)));
	return value;
}

template <typename T> void impl_IFlashControl<T>::RedEyeReduction(bool const value) const
{
	check(shim()->put_RedEyeReduction(value));
}

template <typename T> float impl_IFlashControl<T>::PowerPercent() const
{
	float value = {};
	check(shim()->get_PowerPercent(&value));
	return value;
}

template <typename T> void impl_IFlashControl<T>::PowerPercent(float const value) const
{
	check(shim()->put_PowerPercent(value));
}

template <typename T> bool impl_IFlashControl2<T>::AssistantLightSupported() const
{
	bool value = {};
	check(shim()->get_AssistantLightSupported(put(value)));
	return value;
}

template <typename T> bool impl_IFlashControl2<T>::AssistantLightEnabled() const
{
	bool value = {};
	check(shim()->get_AssistantLightEnabled(put(value)));
	return value;
}

template <typename T> void impl_IFlashControl2<T>::AssistantLightEnabled(bool const value) const
{
	check(shim()->put_AssistantLightEnabled(value));
}

template <typename T> bool impl_IExposureCompensationControl<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> float impl_IExposureCompensationControl<T>::Min() const
{
	float value = {};
	check(shim()->get_Min(&value));
	return value;
}

template <typename T> float impl_IExposureCompensationControl<T>::Max() const
{
	float value = {};
	check(shim()->get_Max(&value));
	return value;
}

template <typename T> float impl_IExposureCompensationControl<T>::Step() const
{
	float value = {};
	check(shim()->get_Step(&value));
	return value;
}

template <typename T> float impl_IExposureCompensationControl<T>::Value() const
{
	float value = {};
	check(shim()->get_Value(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IExposureCompensationControl<T>::SetValueAsync(float const value) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetValueAsync(value, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> bool impl_IIsoSpeedControl<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::IsoSpeedPreset> impl_IIsoSpeedControl<T>::SupportedPresets() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::IsoSpeedPreset> value;
	check(shim()->get_SupportedPresets(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::IsoSpeedPreset impl_IIsoSpeedControl<T>::Preset() const
{
	Windows::Media::Devices::IsoSpeedPreset value = {};
	check(shim()->get_Preset(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IIsoSpeedControl<T>::SetPresetAsync(Windows::Media::Devices::IsoSpeedPreset const preset) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetPresetAsync(preset, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> unsigned impl_IIsoSpeedControl2<T>::Min() const
{
	unsigned value = {};
	check(shim()->get_Min(&value));
	return value;
}

template <typename T> unsigned impl_IIsoSpeedControl2<T>::Max() const
{
	unsigned value = {};
	check(shim()->get_Max(&value));
	return value;
}

template <typename T> unsigned impl_IIsoSpeedControl2<T>::Step() const
{
	unsigned value = {};
	check(shim()->get_Step(&value));
	return value;
}

template <typename T> unsigned impl_IIsoSpeedControl2<T>::Value() const
{
	unsigned value = {};
	check(shim()->get_Value(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IIsoSpeedControl2<T>::SetValueAsync(unsigned const isoSpeed) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetValueAsync(isoSpeed, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> bool impl_IIsoSpeedControl2<T>::Auto() const
{
	bool value = {};
	check(shim()->get_Auto(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IIsoSpeedControl2<T>::SetAutoAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetAutoAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> bool impl_IWhiteBalanceControl<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::ColorTemperaturePreset impl_IWhiteBalanceControl<T>::Preset() const
{
	Windows::Media::Devices::ColorTemperaturePreset value = {};
	check(shim()->get_Preset(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWhiteBalanceControl<T>::SetPresetAsync(Windows::Media::Devices::ColorTemperaturePreset const preset) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetPresetAsync(preset, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> unsigned impl_IWhiteBalanceControl<T>::Min() const
{
	unsigned value = {};
	check(shim()->get_Min(&value));
	return value;
}

template <typename T> unsigned impl_IWhiteBalanceControl<T>::Max() const
{
	unsigned value = {};
	check(shim()->get_Max(&value));
	return value;
}

template <typename T> unsigned impl_IWhiteBalanceControl<T>::Step() const
{
	unsigned value = {};
	check(shim()->get_Step(&value));
	return value;
}

template <typename T> unsigned impl_IWhiteBalanceControl<T>::Value() const
{
	unsigned value = {};
	check(shim()->get_Value(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWhiteBalanceControl<T>::SetValueAsync(unsigned const temperature) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetValueAsync(temperature, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> bool impl_IExposureControl<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> bool impl_IExposureControl<T>::Auto() const
{
	bool value = {};
	check(shim()->get_Auto(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IExposureControl<T>::SetAutoAsync(bool const value) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetAutoAsync(value, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::TimeSpan impl_IExposureControl<T>::Min() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Min(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IExposureControl<T>::Max() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Max(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IExposureControl<T>::Step() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Step(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IExposureControl<T>::Value() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Value(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IExposureControl<T>::SetValueAsync(Windows::Foundation::TimeSpan const & shutterDuration) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetValueAsync(shutterDuration, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Media::Devices::ZoomTransitionMode impl_IZoomSettings<T>::Mode() const
{
	Windows::Media::Devices::ZoomTransitionMode value = {};
	check(shim()->get_Mode(&value));
	return value;
}

template <typename T> void impl_IZoomSettings<T>::Mode(Windows::Media::Devices::ZoomTransitionMode const value) const
{
	check(shim()->put_Mode(value));
}

template <typename T> float impl_IZoomSettings<T>::Value() const
{
	float value = {};
	check(shim()->get_Value(&value));
	return value;
}

template <typename T> void impl_IZoomSettings<T>::Value(float const value) const
{
	check(shim()->put_Value(value));
}

template <typename T> bool impl_IZoomControl<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> float impl_IZoomControl<T>::Min() const
{
	float value = {};
	check(shim()->get_Min(&value));
	return value;
}

template <typename T> float impl_IZoomControl<T>::Max() const
{
	float value = {};
	check(shim()->get_Max(&value));
	return value;
}

template <typename T> float impl_IZoomControl<T>::Step() const
{
	float value = {};
	check(shim()->get_Step(&value));
	return value;
}

template <typename T> float impl_IZoomControl<T>::Value() const
{
	float value = {};
	check(shim()->get_Value(&value));
	return value;
}

template <typename T> void impl_IZoomControl<T>::Value(float const value) const
{
	check(shim()->put_Value(value));
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::ZoomTransitionMode> impl_IZoomControl2<T>::SupportedModes() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::ZoomTransitionMode> value;
	check(shim()->get_SupportedModes(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::ZoomTransitionMode impl_IZoomControl2<T>::Mode() const
{
	Windows::Media::Devices::ZoomTransitionMode value = {};
	check(shim()->get_Mode(&value));
	return value;
}

template <typename T> void impl_IZoomControl2<T>::Configure(Windows::Media::Devices::ZoomSettings const & settings) const
{
	check(shim()->abi_Configure(get(settings)));
}

template <typename T> Windows::Media::Devices::FocusMode impl_IFocusSettings<T>::Mode() const
{
	Windows::Media::Devices::FocusMode value = {};
	check(shim()->get_Mode(&value));
	return value;
}

template <typename T> void impl_IFocusSettings<T>::Mode(Windows::Media::Devices::FocusMode const value) const
{
	check(shim()->put_Mode(value));
}

template <typename T> Windows::Media::Devices::AutoFocusRange impl_IFocusSettings<T>::AutoFocusRange() const
{
	Windows::Media::Devices::AutoFocusRange value = {};
	check(shim()->get_AutoFocusRange(&value));
	return value;
}

template <typename T> void impl_IFocusSettings<T>::AutoFocusRange(Windows::Media::Devices::AutoFocusRange const value) const
{
	check(shim()->put_AutoFocusRange(value));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IFocusSettings<T>::Value() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IFocusSettings<T>::Value(Windows::Foundation::IReference<unsigned> const & value) const
{
	check(shim()->put_Value(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Media::Devices::ManualFocusDistance> impl_IFocusSettings<T>::Distance() const
{
	Windows::Foundation::IReference<winrt::Windows::Media::Devices::ManualFocusDistance> value;
	check(shim()->get_Distance(put(value)));
	return value;
}

template <typename T> void impl_IFocusSettings<T>::Distance(Windows::Foundation::IReference<winrt::Windows::Media::Devices::ManualFocusDistance> const & value) const
{
	check(shim()->put_Distance(get(value)));
}

template <typename T> bool impl_IFocusSettings<T>::WaitForFocus() const
{
	bool value = {};
	check(shim()->get_WaitForFocus(put(value)));
	return value;
}

template <typename T> void impl_IFocusSettings<T>::WaitForFocus(bool const value) const
{
	check(shim()->put_WaitForFocus(value));
}

template <typename T> bool impl_IFocusSettings<T>::DisableDriverFallback() const
{
	bool value = {};
	check(shim()->get_DisableDriverFallback(put(value)));
	return value;
}

template <typename T> void impl_IFocusSettings<T>::DisableDriverFallback(bool const value) const
{
	check(shim()->put_DisableDriverFallback(value));
}

template <typename T> bool impl_IFocusControl<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::FocusPreset> impl_IFocusControl<T>::SupportedPresets() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::FocusPreset> value;
	check(shim()->get_SupportedPresets(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::FocusPreset impl_IFocusControl<T>::Preset() const
{
	Windows::Media::Devices::FocusPreset value = {};
	check(shim()->get_Preset(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFocusControl<T>::SetPresetAsync(Windows::Media::Devices::FocusPreset const preset) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetPresetAsync(preset, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFocusControl<T>::SetPresetAsync(Windows::Media::Devices::FocusPreset const preset, bool const completeBeforeFocus) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetPresetWithCompletionOptionAsync(preset, completeBeforeFocus, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> unsigned impl_IFocusControl<T>::Min() const
{
	unsigned value = {};
	check(shim()->get_Min(&value));
	return value;
}

template <typename T> unsigned impl_IFocusControl<T>::Max() const
{
	unsigned value = {};
	check(shim()->get_Max(&value));
	return value;
}

template <typename T> unsigned impl_IFocusControl<T>::Step() const
{
	unsigned value = {};
	check(shim()->get_Step(&value));
	return value;
}

template <typename T> unsigned impl_IFocusControl<T>::Value() const
{
	unsigned value = {};
	check(shim()->get_Value(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFocusControl<T>::SetValueAsync(unsigned const focus) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetValueAsync(focus, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFocusControl<T>::FocusAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_FocusAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> bool impl_IFocusControl2<T>::FocusChangedSupported() const
{
	bool value = {};
	check(shim()->get_FocusChangedSupported(put(value)));
	return value;
}

template <typename T> bool impl_IFocusControl2<T>::WaitForFocusSupported() const
{
	bool value = {};
	check(shim()->get_WaitForFocusSupported(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::FocusMode> impl_IFocusControl2<T>::SupportedFocusModes() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::FocusMode> value;
	check(shim()->get_SupportedFocusModes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::ManualFocusDistance> impl_IFocusControl2<T>::SupportedFocusDistances() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::ManualFocusDistance> value;
	check(shim()->get_SupportedFocusDistances(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::AutoFocusRange> impl_IFocusControl2<T>::SupportedFocusRanges() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::AutoFocusRange> value;
	check(shim()->get_SupportedFocusRanges(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::FocusMode impl_IFocusControl2<T>::Mode() const
{
	Windows::Media::Devices::FocusMode value = {};
	check(shim()->get_Mode(&value));
	return value;
}

template <typename T> Windows::Media::Devices::MediaCaptureFocusState impl_IFocusControl2<T>::FocusState() const
{
	Windows::Media::Devices::MediaCaptureFocusState value = {};
	check(shim()->get_FocusState(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFocusControl2<T>::UnlockAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_UnlockAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFocusControl2<T>::LockAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_LockAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> void impl_IFocusControl2<T>::Configure(Windows::Media::Devices::FocusSettings const & settings) const
{
	check(shim()->abi_Configure(get(settings)));
}

template <typename T> bool impl_IRegionOfInterest<T>::AutoFocusEnabled() const
{
	bool value = {};
	check(shim()->get_AutoFocusEnabled(put(value)));
	return value;
}

template <typename T> void impl_IRegionOfInterest<T>::AutoFocusEnabled(bool const value) const
{
	check(shim()->put_AutoFocusEnabled(value));
}

template <typename T> bool impl_IRegionOfInterest<T>::AutoWhiteBalanceEnabled() const
{
	bool value = {};
	check(shim()->get_AutoWhiteBalanceEnabled(put(value)));
	return value;
}

template <typename T> void impl_IRegionOfInterest<T>::AutoWhiteBalanceEnabled(bool const value) const
{
	check(shim()->put_AutoWhiteBalanceEnabled(value));
}

template <typename T> bool impl_IRegionOfInterest<T>::AutoExposureEnabled() const
{
	bool value = {};
	check(shim()->get_AutoExposureEnabled(put(value)));
	return value;
}

template <typename T> void impl_IRegionOfInterest<T>::AutoExposureEnabled(bool const value) const
{
	check(shim()->put_AutoExposureEnabled(value));
}

template <typename T> Windows::Foundation::Rect impl_IRegionOfInterest<T>::Bounds() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_Bounds(&value));
	return value;
}

template <typename T> void impl_IRegionOfInterest<T>::Bounds(Windows::Foundation::Rect const & value) const
{
	check(shim()->put_Bounds(value));
}

template <typename T> Windows::Media::Devices::RegionOfInterestType impl_IRegionOfInterest2<T>::Type() const
{
	Windows::Media::Devices::RegionOfInterestType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> void impl_IRegionOfInterest2<T>::Type(Windows::Media::Devices::RegionOfInterestType const value) const
{
	check(shim()->put_Type(value));
}

template <typename T> bool impl_IRegionOfInterest2<T>::BoundsNormalized() const
{
	bool value = {};
	check(shim()->get_BoundsNormalized(put(value)));
	return value;
}

template <typename T> void impl_IRegionOfInterest2<T>::BoundsNormalized(bool const value) const
{
	check(shim()->put_BoundsNormalized(value));
}

template <typename T> unsigned impl_IRegionOfInterest2<T>::Weight() const
{
	unsigned value = {};
	check(shim()->get_Weight(&value));
	return value;
}

template <typename T> void impl_IRegionOfInterest2<T>::Weight(unsigned const value) const
{
	check(shim()->put_Weight(value));
}

template <typename T> unsigned impl_IRegionsOfInterestControl<T>::MaxRegions() const
{
	unsigned value = {};
	check(shim()->get_MaxRegions(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IRegionsOfInterestControl<T>::SetRegionsAsync(Windows::Foundation::Collections::IIterable<Windows::Media::Devices::RegionOfInterest> const & regions) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetRegionsAsync(get(regions), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IRegionsOfInterestControl<T>::SetRegionsAsync(Windows::Foundation::Collections::IIterable<Windows::Media::Devices::RegionOfInterest> const & regions, bool const lockValues) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetRegionsWithLockAsync(get(regions), lockValues, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IRegionsOfInterestControl<T>::ClearRegionsAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_ClearRegionsAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> bool impl_IRegionsOfInterestControl<T>::AutoFocusSupported() const
{
	bool value = {};
	check(shim()->get_AutoFocusSupported(put(value)));
	return value;
}

template <typename T> bool impl_IRegionsOfInterestControl<T>::AutoWhiteBalanceSupported() const
{
	bool value = {};
	check(shim()->get_AutoWhiteBalanceSupported(put(value)));
	return value;
}

template <typename T> bool impl_IRegionsOfInterestControl<T>::AutoExposureSupported() const
{
	bool value = {};
	check(shim()->get_AutoExposureSupported(put(value)));
	return value;
}

template <typename T> bool impl_IExposurePriorityVideoControl<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> bool impl_IExposurePriorityVideoControl<T>::Enabled() const
{
	bool value = {};
	check(shim()->get_Enabled(put(value)));
	return value;
}

template <typename T> void impl_IExposurePriorityVideoControl<T>::Enabled(bool const value) const
{
	check(shim()->put_Enabled(value));
}

template <typename T> bool impl_IHdrVideoControl<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::HdrVideoMode> impl_IHdrVideoControl<T>::SupportedModes() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::HdrVideoMode> value;
	check(shim()->get_SupportedModes(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::HdrVideoMode impl_IHdrVideoControl<T>::Mode() const
{
	Windows::Media::Devices::HdrVideoMode value = {};
	check(shim()->get_Mode(&value));
	return value;
}

template <typename T> void impl_IHdrVideoControl<T>::Mode(Windows::Media::Devices::HdrVideoMode const value) const
{
	check(shim()->put_Mode(value));
}

template <typename T> Windows::Media::Devices::AdvancedPhotoMode impl_IAdvancedPhotoCaptureSettings<T>::Mode() const
{
	Windows::Media::Devices::AdvancedPhotoMode value = {};
	check(shim()->get_Mode(&value));
	return value;
}

template <typename T> void impl_IAdvancedPhotoCaptureSettings<T>::Mode(Windows::Media::Devices::AdvancedPhotoMode const value) const
{
	check(shim()->put_Mode(value));
}

template <typename T> bool impl_IAdvancedPhotoControl<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::AdvancedPhotoMode> impl_IAdvancedPhotoControl<T>::SupportedModes() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::AdvancedPhotoMode> value;
	check(shim()->get_SupportedModes(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::AdvancedPhotoMode impl_IAdvancedPhotoControl<T>::Mode() const
{
	Windows::Media::Devices::AdvancedPhotoMode value = {};
	check(shim()->get_Mode(&value));
	return value;
}

template <typename T> void impl_IAdvancedPhotoControl<T>::Configure(Windows::Media::Devices::AdvancedPhotoCaptureSettings const & settings) const
{
	check(shim()->abi_Configure(get(settings)));
}

template <typename T> bool impl_IOpticalImageStabilizationControl<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::OpticalImageStabilizationMode> impl_IOpticalImageStabilizationControl<T>::SupportedModes() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Media::Devices::OpticalImageStabilizationMode> value;
	check(shim()->get_SupportedModes(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::OpticalImageStabilizationMode impl_IOpticalImageStabilizationControl<T>::Mode() const
{
	Windows::Media::Devices::OpticalImageStabilizationMode value = {};
	check(shim()->get_Mode(&value));
	return value;
}

template <typename T> void impl_IOpticalImageStabilizationControl<T>::Mode(Windows::Media::Devices::OpticalImageStabilizationMode const value) const
{
	check(shim()->put_Mode(value));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::MediaProperties::IMediaEncodingProperties> impl_IMediaDeviceController<T>::GetAvailableMediaStreamProperties(Windows::Media::Capture::MediaStreamType const mediaStreamType) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::MediaProperties::IMediaEncodingProperties> value;
	check(shim()->abi_GetAvailableMediaStreamProperties(mediaStreamType, put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::IMediaEncodingProperties impl_IMediaDeviceController<T>::GetMediaStreamProperties(Windows::Media::Capture::MediaStreamType const mediaStreamType) const
{
	Windows::Media::MediaProperties::IMediaEncodingProperties value;
	check(shim()->abi_GetMediaStreamProperties(mediaStreamType, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaDeviceController<T>::SetMediaStreamPropertiesAsync(Windows::Media::Capture::MediaStreamType const mediaStreamType, Windows::Media::MediaProperties::IMediaEncodingProperties const & mediaEncodingProperties) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetMediaStreamPropertiesAsync(mediaStreamType, get(mediaEncodingProperties), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> void impl_IAudioDeviceController<T>::Muted(bool const value) const
{
	check(shim()->put_Muted(value));
}

template <typename T> bool impl_IAudioDeviceController<T>::Muted() const
{
	bool value = {};
	check(shim()->get_Muted(put(value)));
	return value;
}

template <typename T> void impl_IAudioDeviceController<T>::VolumePercent(float const value) const
{
	check(shim()->put_VolumePercent(value));
}

template <typename T> float impl_IAudioDeviceController<T>::VolumePercent() const
{
	float value = {};
	check(shim()->get_VolumePercent(&value));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Brightness() const
{
	Windows::Media::Devices::MediaDeviceControl value = nullptr;
	check(shim()->get_Brightness(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Contrast() const
{
	Windows::Media::Devices::MediaDeviceControl value = nullptr;
	check(shim()->get_Contrast(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Hue() const
{
	Windows::Media::Devices::MediaDeviceControl value = nullptr;
	check(shim()->get_Hue(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::WhiteBalance() const
{
	Windows::Media::Devices::MediaDeviceControl value = nullptr;
	check(shim()->get_WhiteBalance(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::BacklightCompensation() const
{
	Windows::Media::Devices::MediaDeviceControl value = nullptr;
	check(shim()->get_BacklightCompensation(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Pan() const
{
	Windows::Media::Devices::MediaDeviceControl value = nullptr;
	check(shim()->get_Pan(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Tilt() const
{
	Windows::Media::Devices::MediaDeviceControl value = nullptr;
	check(shim()->get_Tilt(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Zoom() const
{
	Windows::Media::Devices::MediaDeviceControl value = nullptr;
	check(shim()->get_Zoom(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Roll() const
{
	Windows::Media::Devices::MediaDeviceControl value = nullptr;
	check(shim()->get_Roll(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Exposure() const
{
	Windows::Media::Devices::MediaDeviceControl value = nullptr;
	check(shim()->get_Exposure(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControl impl_IVideoDeviceController<T>::Focus() const
{
	Windows::Media::Devices::MediaDeviceControl value = nullptr;
	check(shim()->get_Focus(put(value)));
	return value;
}

template <typename T> bool impl_IVideoDeviceController<T>::TrySetPowerlineFrequency(Windows::Media::Capture::PowerlineFrequency const value) const
{
	bool succeeded = {};
	check(shim()->abi_TrySetPowerlineFrequency(value, put(succeeded)));
	return succeeded;
}

template <typename T> bool impl_IVideoDeviceController<T>::TryGetPowerlineFrequency(Windows::Media::Capture::PowerlineFrequency & value) const
{
	bool succeeded = {};
	check(shim()->abi_TryGetPowerlineFrequency(&value, put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Media::Devices::LowLagPhotoSequenceControl impl_IAdvancedVideoCaptureDeviceController2<T>::LowLagPhotoSequence() const
{
	Windows::Media::Devices::LowLagPhotoSequenceControl value = nullptr;
	check(shim()->get_LowLagPhotoSequence(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::LowLagPhotoControl impl_IAdvancedVideoCaptureDeviceController2<T>::LowLagPhoto() const
{
	Windows::Media::Devices::LowLagPhotoControl value = nullptr;
	check(shim()->get_LowLagPhoto(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::SceneModeControl impl_IAdvancedVideoCaptureDeviceController2<T>::SceneModeControl() const
{
	Windows::Media::Devices::SceneModeControl value = nullptr;
	check(shim()->get_SceneModeControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::TorchControl impl_IAdvancedVideoCaptureDeviceController2<T>::TorchControl() const
{
	Windows::Media::Devices::TorchControl value = nullptr;
	check(shim()->get_TorchControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::FlashControl impl_IAdvancedVideoCaptureDeviceController2<T>::FlashControl() const
{
	Windows::Media::Devices::FlashControl value = nullptr;
	check(shim()->get_FlashControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::WhiteBalanceControl impl_IAdvancedVideoCaptureDeviceController2<T>::WhiteBalanceControl() const
{
	Windows::Media::Devices::WhiteBalanceControl value = nullptr;
	check(shim()->get_WhiteBalanceControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::ExposureControl impl_IAdvancedVideoCaptureDeviceController2<T>::ExposureControl() const
{
	Windows::Media::Devices::ExposureControl value = nullptr;
	check(shim()->get_ExposureControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::FocusControl impl_IAdvancedVideoCaptureDeviceController2<T>::FocusControl() const
{
	Windows::Media::Devices::FocusControl value = nullptr;
	check(shim()->get_FocusControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::ExposureCompensationControl impl_IAdvancedVideoCaptureDeviceController2<T>::ExposureCompensationControl() const
{
	Windows::Media::Devices::ExposureCompensationControl value = nullptr;
	check(shim()->get_ExposureCompensationControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::IsoSpeedControl impl_IAdvancedVideoCaptureDeviceController2<T>::IsoSpeedControl() const
{
	Windows::Media::Devices::IsoSpeedControl value = nullptr;
	check(shim()->get_IsoSpeedControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::RegionsOfInterestControl impl_IAdvancedVideoCaptureDeviceController2<T>::RegionsOfInterestControl() const
{
	Windows::Media::Devices::RegionsOfInterestControl value = nullptr;
	check(shim()->get_RegionsOfInterestControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::CaptureUse impl_IAdvancedVideoCaptureDeviceController2<T>::PrimaryUse() const
{
	Windows::Media::Devices::CaptureUse value = {};
	check(shim()->get_PrimaryUse(&value));
	return value;
}

template <typename T> void impl_IAdvancedVideoCaptureDeviceController2<T>::PrimaryUse(Windows::Media::Devices::CaptureUse const value) const
{
	check(shim()->put_PrimaryUse(value));
}

template <typename T> Windows::Media::Devices::Core::VariablePhotoSequenceController impl_IAdvancedVideoCaptureDeviceController3<T>::VariablePhotoSequenceController() const
{
	Windows::Media::Devices::Core::VariablePhotoSequenceController value = nullptr;
	check(shim()->get_VariablePhotoSequenceController(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::PhotoConfirmationControl impl_IAdvancedVideoCaptureDeviceController3<T>::PhotoConfirmationControl() const
{
	Windows::Media::Devices::PhotoConfirmationControl value = nullptr;
	check(shim()->get_PhotoConfirmationControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::ZoomControl impl_IAdvancedVideoCaptureDeviceController3<T>::ZoomControl() const
{
	Windows::Media::Devices::ZoomControl value = nullptr;
	check(shim()->get_ZoomControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::ExposurePriorityVideoControl impl_IAdvancedVideoCaptureDeviceController4<T>::ExposurePriorityVideoControl() const
{
	Windows::Media::Devices::ExposurePriorityVideoControl value = nullptr;
	check(shim()->get_ExposurePriorityVideoControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaCaptureOptimization impl_IAdvancedVideoCaptureDeviceController4<T>::DesiredOptimization() const
{
	Windows::Media::Devices::MediaCaptureOptimization value = {};
	check(shim()->get_DesiredOptimization(&value));
	return value;
}

template <typename T> void impl_IAdvancedVideoCaptureDeviceController4<T>::DesiredOptimization(Windows::Media::Devices::MediaCaptureOptimization const value) const
{
	check(shim()->put_DesiredOptimization(value));
}

template <typename T> Windows::Media::Devices::HdrVideoControl impl_IAdvancedVideoCaptureDeviceController4<T>::HdrVideoControl() const
{
	Windows::Media::Devices::HdrVideoControl value = nullptr;
	check(shim()->get_HdrVideoControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::OpticalImageStabilizationControl impl_IAdvancedVideoCaptureDeviceController4<T>::OpticalImageStabilizationControl() const
{
	Windows::Media::Devices::OpticalImageStabilizationControl value = nullptr;
	check(shim()->get_OpticalImageStabilizationControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::AdvancedPhotoControl impl_IAdvancedVideoCaptureDeviceController4<T>::AdvancedPhotoControl() const
{
	Windows::Media::Devices::AdvancedPhotoControl value = nullptr;
	check(shim()->get_AdvancedPhotoControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::MediaDeviceControlCapabilities impl_IMediaDeviceControl<T>::Capabilities() const
{
	Windows::Media::Devices::MediaDeviceControlCapabilities value = nullptr;
	check(shim()->get_Capabilities(put(value)));
	return value;
}

template <typename T> bool impl_IMediaDeviceControl<T>::TryGetValue(double & value) const
{
	bool succeeded = {};
	check(shim()->abi_TryGetValue(&value, put(succeeded)));
	return succeeded;
}

template <typename T> bool impl_IMediaDeviceControl<T>::TrySetValue(double const value) const
{
	bool succeeded = {};
	check(shim()->abi_TrySetValue(value, put(succeeded)));
	return succeeded;
}

template <typename T> bool impl_IMediaDeviceControl<T>::TryGetAuto(bool & value) const
{
	bool succeeded = {};
	check(shim()->abi_TryGetAuto(put(value), put(succeeded)));
	return succeeded;
}

template <typename T> bool impl_IMediaDeviceControl<T>::TrySetAuto(bool const value) const
{
	bool succeeded = {};
	check(shim()->abi_TrySetAuto(value, put(succeeded)));
	return succeeded;
}

template <typename T> bool impl_IMediaDeviceControlCapabilities<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> double impl_IMediaDeviceControlCapabilities<T>::Min() const
{
	double value = {};
	check(shim()->get_Min(&value));
	return value;
}

template <typename T> double impl_IMediaDeviceControlCapabilities<T>::Max() const
{
	double value = {};
	check(shim()->get_Max(&value));
	return value;
}

template <typename T> double impl_IMediaDeviceControlCapabilities<T>::Step() const
{
	double value = {};
	check(shim()->get_Step(&value));
	return value;
}

template <typename T> double impl_IMediaDeviceControlCapabilities<T>::Default() const
{
	double value = {};
	check(shim()->get_Default(&value));
	return value;
}

template <typename T> bool impl_IMediaDeviceControlCapabilities<T>::AutoModeSupported() const
{
	bool value = {};
	check(shim()->get_AutoModeSupported(put(value)));
	return value;
}

template <typename T> void impl_IAdvancedVideoCaptureDeviceController<T>::SetDeviceProperty(StringReference const & propertyId, IInspectable const & propertyValue) const
{
	check(shim()->abi_SetDeviceProperty(get(propertyId), get(propertyValue)));
}

template <typename T> IInspectable impl_IAdvancedVideoCaptureDeviceController<T>::GetDeviceProperty(StringReference const & propertyId) const
{
	IInspectable propertyValue;
	check(shim()->abi_GetDeviceProperty(get(propertyId), put(propertyValue)));
	return propertyValue;
}

template <typename T> bool impl_ILowLagPhotoSequenceControl<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> unsigned impl_ILowLagPhotoSequenceControl<T>::MaxPastPhotos() const
{
	unsigned value = {};
	check(shim()->get_MaxPastPhotos(&value));
	return value;
}

template <typename T> float impl_ILowLagPhotoSequenceControl<T>::MaxPhotosPerSecond() const
{
	float value = {};
	check(shim()->get_MaxPhotosPerSecond(&value));
	return value;
}

template <typename T> unsigned impl_ILowLagPhotoSequenceControl<T>::PastPhotoLimit() const
{
	unsigned value = {};
	check(shim()->get_PastPhotoLimit(&value));
	return value;
}

template <typename T> void impl_ILowLagPhotoSequenceControl<T>::PastPhotoLimit(unsigned const value) const
{
	check(shim()->put_PastPhotoLimit(value));
}

template <typename T> float impl_ILowLagPhotoSequenceControl<T>::PhotosPerSecondLimit() const
{
	float value = {};
	check(shim()->get_PhotosPerSecondLimit(&value));
	return value;
}

template <typename T> void impl_ILowLagPhotoSequenceControl<T>::PhotosPerSecondLimit(float const value) const
{
	check(shim()->put_PhotosPerSecondLimit(value));
}

template <typename T> Windows::Media::MediaProperties::MediaRatio impl_ILowLagPhotoSequenceControl<T>::GetHighestConcurrentFrameRate(Windows::Media::MediaProperties::IMediaEncodingProperties const & captureProperties) const
{
	Windows::Media::MediaProperties::MediaRatio value = nullptr;
	check(shim()->abi_GetHighestConcurrentFrameRate(get(captureProperties), put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaRatio impl_ILowLagPhotoSequenceControl<T>::GetCurrentFrameRate() const
{
	Windows::Media::MediaProperties::MediaRatio value = nullptr;
	check(shim()->abi_GetCurrentFrameRate(put(value)));
	return value;
}

template <typename T> bool impl_ILowLagPhotoSequenceControl<T>::ThumbnailEnabled() const
{
	bool value = {};
	check(shim()->get_ThumbnailEnabled(put(value)));
	return value;
}

template <typename T> void impl_ILowLagPhotoSequenceControl<T>::ThumbnailEnabled(bool const value) const
{
	check(shim()->put_ThumbnailEnabled(value));
}

template <typename T> Windows::Media::MediaProperties::MediaThumbnailFormat impl_ILowLagPhotoSequenceControl<T>::ThumbnailFormat() const
{
	Windows::Media::MediaProperties::MediaThumbnailFormat value = {};
	check(shim()->get_ThumbnailFormat(&value));
	return value;
}

template <typename T> void impl_ILowLagPhotoSequenceControl<T>::ThumbnailFormat(Windows::Media::MediaProperties::MediaThumbnailFormat const value) const
{
	check(shim()->put_ThumbnailFormat(value));
}

template <typename T> unsigned impl_ILowLagPhotoSequenceControl<T>::DesiredThumbnailSize() const
{
	unsigned value = {};
	check(shim()->get_DesiredThumbnailSize(&value));
	return value;
}

template <typename T> void impl_ILowLagPhotoSequenceControl<T>::DesiredThumbnailSize(unsigned const value) const
{
	check(shim()->put_DesiredThumbnailSize(value));
}

template <typename T> unsigned impl_ILowLagPhotoSequenceControl<T>::HardwareAcceleratedThumbnailSupported() const
{
	unsigned value = {};
	check(shim()->get_HardwareAcceleratedThumbnailSupported(&value));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaRatio impl_ILowLagPhotoControl<T>::GetHighestConcurrentFrameRate(Windows::Media::MediaProperties::IMediaEncodingProperties const & captureProperties) const
{
	Windows::Media::MediaProperties::MediaRatio value = nullptr;
	check(shim()->abi_GetHighestConcurrentFrameRate(get(captureProperties), put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaRatio impl_ILowLagPhotoControl<T>::GetCurrentFrameRate() const
{
	Windows::Media::MediaProperties::MediaRatio value = nullptr;
	check(shim()->abi_GetCurrentFrameRate(put(value)));
	return value;
}

template <typename T> bool impl_ILowLagPhotoControl<T>::ThumbnailEnabled() const
{
	bool value = {};
	check(shim()->get_ThumbnailEnabled(put(value)));
	return value;
}

template <typename T> void impl_ILowLagPhotoControl<T>::ThumbnailEnabled(bool const value) const
{
	check(shim()->put_ThumbnailEnabled(value));
}

template <typename T> Windows::Media::MediaProperties::MediaThumbnailFormat impl_ILowLagPhotoControl<T>::ThumbnailFormat() const
{
	Windows::Media::MediaProperties::MediaThumbnailFormat value = {};
	check(shim()->get_ThumbnailFormat(&value));
	return value;
}

template <typename T> void impl_ILowLagPhotoControl<T>::ThumbnailFormat(Windows::Media::MediaProperties::MediaThumbnailFormat const value) const
{
	check(shim()->put_ThumbnailFormat(value));
}

template <typename T> unsigned impl_ILowLagPhotoControl<T>::DesiredThumbnailSize() const
{
	unsigned value = {};
	check(shim()->get_DesiredThumbnailSize(&value));
	return value;
}

template <typename T> void impl_ILowLagPhotoControl<T>::DesiredThumbnailSize(unsigned const value) const
{
	check(shim()->put_DesiredThumbnailSize(value));
}

template <typename T> unsigned impl_ILowLagPhotoControl<T>::HardwareAcceleratedThumbnailSupported() const
{
	unsigned value = {};
	check(shim()->get_HardwareAcceleratedThumbnailSupported(&value));
	return value;
}

template <typename T> bool impl_IPhotoConfirmationControl<T>::Supported() const
{
	bool pbSupported = {};
	check(shim()->get_Supported(put(pbSupported)));
	return pbSupported;
}

template <typename T> bool impl_IPhotoConfirmationControl<T>::Enabled() const
{
	bool value = {};
	check(shim()->get_Enabled(put(value)));
	return value;
}

template <typename T> void impl_IPhotoConfirmationControl<T>::Enabled(bool const value) const
{
	check(shim()->put_Enabled(value));
}

template <typename T> Windows::Media::MediaProperties::MediaPixelFormat impl_IPhotoConfirmationControl<T>::PixelFormat() const
{
	Windows::Media::MediaProperties::MediaPixelFormat format = {};
	check(shim()->get_PixelFormat(&format));
	return format;
}

template <typename T> void impl_IPhotoConfirmationControl<T>::PixelFormat(Windows::Media::MediaProperties::MediaPixelFormat const format) const
{
	check(shim()->put_PixelFormat(format));
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Devices { namespace Core {

template <typename T> Windows::Media::Devices::Core::CameraIntrinsics impl_ICameraIntrinsicsFactory<T>::Create(Windows::Foundation::Numerics::Vector2 const & focalLength, Windows::Foundation::Numerics::Vector2 const & principalPoint, Windows::Foundation::Numerics::Vector3 const & radialDistortion, Windows::Foundation::Numerics::Vector2 const & tangentialDistortion, unsigned const imageWidth, unsigned const imageHeight) const
{
	Windows::Media::Devices::Core::CameraIntrinsics result = nullptr;
	check(shim()->abi_Create(focalLength, principalPoint, radialDistortion, tangentialDistortion, imageWidth, imageHeight, put(result)));
	return result;
}

template <typename T> Windows::Foundation::Numerics::Vector2 impl_ICameraIntrinsics<T>::FocalLength() const
{
	Windows::Foundation::Numerics::Vector2 value = {};
	check(shim()->get_FocalLength(&value));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Vector2 impl_ICameraIntrinsics<T>::PrincipalPoint() const
{
	Windows::Foundation::Numerics::Vector2 value = {};
	check(shim()->get_PrincipalPoint(&value));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_ICameraIntrinsics<T>::RadialDistortion() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_RadialDistortion(&value));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Vector2 impl_ICameraIntrinsics<T>::TangentialDistortion() const
{
	Windows::Foundation::Numerics::Vector2 value = {};
	check(shim()->get_TangentialDistortion(&value));
	return value;
}

template <typename T> unsigned impl_ICameraIntrinsics<T>::ImageWidth() const
{
	unsigned value = {};
	check(shim()->get_ImageWidth(&value));
	return value;
}

template <typename T> unsigned impl_ICameraIntrinsics<T>::ImageHeight() const
{
	unsigned value = {};
	check(shim()->get_ImageHeight(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_ICameraIntrinsics<T>::ProjectOntoFrame(Windows::Foundation::Numerics::Vector3 const & coordinate) const
{
	Windows::Foundation::Point result = {};
	check(shim()->abi_ProjectOntoFrame(coordinate, &result));
	return result;
}

template <typename T> Windows::Foundation::Numerics::Vector2 impl_ICameraIntrinsics<T>::UnprojectAtUnitDepth(Windows::Foundation::Point const & pixelCoordinate) const
{
	Windows::Foundation::Numerics::Vector2 result = {};
	check(shim()->abi_UnprojectAtUnitDepth(pixelCoordinate, &result));
	return result;
}

template <typename T> bool impl_IFrameExposureCapabilities<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IFrameExposureCapabilities<T>::Min() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Min(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IFrameExposureCapabilities<T>::Max() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Max(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IFrameExposureCapabilities<T>::Step() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Step(&value));
	return value;
}

template <typename T> bool impl_IFrameExposureCompensationCapabilities<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> float impl_IFrameExposureCompensationCapabilities<T>::Min() const
{
	float value = {};
	check(shim()->get_Min(&value));
	return value;
}

template <typename T> float impl_IFrameExposureCompensationCapabilities<T>::Max() const
{
	float value = {};
	check(shim()->get_Max(&value));
	return value;
}

template <typename T> float impl_IFrameExposureCompensationCapabilities<T>::Step() const
{
	float value = {};
	check(shim()->get_Step(&value));
	return value;
}

template <typename T> bool impl_IFrameIsoSpeedCapabilities<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> unsigned impl_IFrameIsoSpeedCapabilities<T>::Min() const
{
	unsigned value = {};
	check(shim()->get_Min(&value));
	return value;
}

template <typename T> unsigned impl_IFrameIsoSpeedCapabilities<T>::Max() const
{
	unsigned value = {};
	check(shim()->get_Max(&value));
	return value;
}

template <typename T> unsigned impl_IFrameIsoSpeedCapabilities<T>::Step() const
{
	unsigned value = {};
	check(shim()->get_Step(&value));
	return value;
}

template <typename T> bool impl_IFrameFocusCapabilities<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> unsigned impl_IFrameFocusCapabilities<T>::Min() const
{
	unsigned value = {};
	check(shim()->get_Min(&value));
	return value;
}

template <typename T> unsigned impl_IFrameFocusCapabilities<T>::Max() const
{
	unsigned value = {};
	check(shim()->get_Max(&value));
	return value;
}

template <typename T> unsigned impl_IFrameFocusCapabilities<T>::Step() const
{
	unsigned value = {};
	check(shim()->get_Step(&value));
	return value;
}

template <typename T> bool impl_IFrameFlashCapabilities<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> bool impl_IFrameFlashCapabilities<T>::RedEyeReductionSupported() const
{
	bool value = {};
	check(shim()->get_RedEyeReductionSupported(put(value)));
	return value;
}

template <typename T> bool impl_IFrameFlashCapabilities<T>::PowerSupported() const
{
	bool value = {};
	check(shim()->get_PowerSupported(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::Core::FrameExposureCapabilities impl_IFrameControlCapabilities<T>::Exposure() const
{
	Windows::Media::Devices::Core::FrameExposureCapabilities value = nullptr;
	check(shim()->get_Exposure(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::Core::FrameExposureCompensationCapabilities impl_IFrameControlCapabilities<T>::ExposureCompensation() const
{
	Windows::Media::Devices::Core::FrameExposureCompensationCapabilities value = nullptr;
	check(shim()->get_ExposureCompensation(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::Core::FrameIsoSpeedCapabilities impl_IFrameControlCapabilities<T>::IsoSpeed() const
{
	Windows::Media::Devices::Core::FrameIsoSpeedCapabilities value = nullptr;
	check(shim()->get_IsoSpeed(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::Core::FrameFocusCapabilities impl_IFrameControlCapabilities<T>::Focus() const
{
	Windows::Media::Devices::Core::FrameFocusCapabilities value = nullptr;
	check(shim()->get_Focus(put(value)));
	return value;
}

template <typename T> bool impl_IFrameControlCapabilities<T>::PhotoConfirmationSupported() const
{
	bool value = {};
	check(shim()->get_PhotoConfirmationSupported(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::Core::FrameFlashCapabilities impl_IFrameControlCapabilities2<T>::Flash() const
{
	Windows::Media::Devices::Core::FrameFlashCapabilities value = nullptr;
	check(shim()->get_Flash(put(value)));
	return value;
}

template <typename T> bool impl_IFrameExposureControl<T>::Auto() const
{
	bool value = {};
	check(shim()->get_Auto(put(value)));
	return value;
}

template <typename T> void impl_IFrameExposureControl<T>::Auto(bool const value) const
{
	check(shim()->put_Auto(value));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IFrameExposureControl<T>::Value() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IFrameExposureControl<T>::Value(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_Value(get(value)));
}

template <typename T> Windows::Foundation::IReference<float> impl_IFrameExposureCompensationControl<T>::Value() const
{
	Windows::Foundation::IReference<float> value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IFrameExposureCompensationControl<T>::Value(Windows::Foundation::IReference<float> const & value) const
{
	check(shim()->put_Value(get(value)));
}

template <typename T> bool impl_IFrameIsoSpeedControl<T>::Auto() const
{
	bool value = {};
	check(shim()->get_Auto(put(value)));
	return value;
}

template <typename T> void impl_IFrameIsoSpeedControl<T>::Auto(bool const value) const
{
	check(shim()->put_Auto(value));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IFrameIsoSpeedControl<T>::Value() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IFrameIsoSpeedControl<T>::Value(Windows::Foundation::IReference<unsigned> const & value) const
{
	check(shim()->put_Value(get(value)));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IFrameFocusControl<T>::Value() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IFrameFocusControl<T>::Value(Windows::Foundation::IReference<unsigned> const & value) const
{
	check(shim()->put_Value(get(value)));
}

template <typename T> Windows::Media::Devices::Core::FrameFlashMode impl_IFrameFlashControl<T>::Mode() const
{
	Windows::Media::Devices::Core::FrameFlashMode value = {};
	check(shim()->get_Mode(&value));
	return value;
}

template <typename T> void impl_IFrameFlashControl<T>::Mode(Windows::Media::Devices::Core::FrameFlashMode const value) const
{
	check(shim()->put_Mode(value));
}

template <typename T> bool impl_IFrameFlashControl<T>::Auto() const
{
	bool value = {};
	check(shim()->get_Auto(put(value)));
	return value;
}

template <typename T> void impl_IFrameFlashControl<T>::Auto(bool const value) const
{
	check(shim()->put_Auto(value));
}

template <typename T> bool impl_IFrameFlashControl<T>::RedEyeReduction() const
{
	bool value = {};
	check(shim()->get_RedEyeReduction(put(value)));
	return value;
}

template <typename T> void impl_IFrameFlashControl<T>::RedEyeReduction(bool const value) const
{
	check(shim()->put_RedEyeReduction(value));
}

template <typename T> float impl_IFrameFlashControl<T>::PowerPercent() const
{
	float value = {};
	check(shim()->get_PowerPercent(&value));
	return value;
}

template <typename T> void impl_IFrameFlashControl<T>::PowerPercent(float const value) const
{
	check(shim()->put_PowerPercent(value));
}

template <typename T> Windows::Media::Devices::Core::FrameExposureControl impl_IFrameController<T>::ExposureControl() const
{
	Windows::Media::Devices::Core::FrameExposureControl value = nullptr;
	check(shim()->get_ExposureControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::Core::FrameExposureCompensationControl impl_IFrameController<T>::ExposureCompensationControl() const
{
	Windows::Media::Devices::Core::FrameExposureCompensationControl value = nullptr;
	check(shim()->get_ExposureCompensationControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::Core::FrameIsoSpeedControl impl_IFrameController<T>::IsoSpeedControl() const
{
	Windows::Media::Devices::Core::FrameIsoSpeedControl value = nullptr;
	check(shim()->get_IsoSpeedControl(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::Core::FrameFocusControl impl_IFrameController<T>::FocusControl() const
{
	Windows::Media::Devices::Core::FrameFocusControl value = nullptr;
	check(shim()->get_FocusControl(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<bool> impl_IFrameController<T>::PhotoConfirmationEnabled() const
{
	Windows::Foundation::IReference<bool> value;
	check(shim()->get_PhotoConfirmationEnabled(put(value)));
	return value;
}

template <typename T> void impl_IFrameController<T>::PhotoConfirmationEnabled(Windows::Foundation::IReference<bool> const & value) const
{
	check(shim()->put_PhotoConfirmationEnabled(get(value)));
}

template <typename T> Windows::Media::Devices::Core::FrameFlashControl impl_IFrameController2<T>::FlashControl() const
{
	Windows::Media::Devices::Core::FrameFlashControl value = nullptr;
	check(shim()->get_FlashControl(put(value)));
	return value;
}

template <typename T> bool impl_IVariablePhotoSequenceController<T>::Supported() const
{
	bool value = {};
	check(shim()->get_Supported(put(value)));
	return value;
}

template <typename T> float impl_IVariablePhotoSequenceController<T>::MaxPhotosPerSecond() const
{
	float value = {};
	check(shim()->get_MaxPhotosPerSecond(&value));
	return value;
}

template <typename T> float impl_IVariablePhotoSequenceController<T>::PhotosPerSecondLimit() const
{
	float value = {};
	check(shim()->get_PhotosPerSecondLimit(&value));
	return value;
}

template <typename T> void impl_IVariablePhotoSequenceController<T>::PhotosPerSecondLimit(float const value) const
{
	check(shim()->put_PhotosPerSecondLimit(value));
}

template <typename T> Windows::Media::MediaProperties::MediaRatio impl_IVariablePhotoSequenceController<T>::GetHighestConcurrentFrameRate(Windows::Media::MediaProperties::IMediaEncodingProperties const & captureProperties) const
{
	Windows::Media::MediaProperties::MediaRatio value = nullptr;
	check(shim()->abi_GetHighestConcurrentFrameRate(get(captureProperties), put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaRatio impl_IVariablePhotoSequenceController<T>::GetCurrentFrameRate() const
{
	Windows::Media::MediaProperties::MediaRatio value = nullptr;
	check(shim()->abi_GetCurrentFrameRate(put(value)));
	return value;
}

template <typename T> Windows::Media::Devices::Core::FrameControlCapabilities impl_IVariablePhotoSequenceController<T>::FrameCapabilities() const
{
	Windows::Media::Devices::Core::FrameControlCapabilities value = nullptr;
	check(shim()->get_FrameCapabilities(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Devices::Core::FrameController> impl_IVariablePhotoSequenceController<T>::DesiredFrameControllers() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Devices::Core::FrameController> items;
	check(shim()->get_DesiredFrameControllers(put(items)));
	return items;
}

}}}}}

namespace winrt { namespace Windows { namespace Media { namespace DialProtocol {

template <typename T> Windows::Media::DialProtocol::DialAppState impl_IDialAppStateDetails<T>::State() const
{
	Windows::Media::DialProtocol::DialAppState value = {};
	check(shim()->get_State(&value));
	return value;
}

template <typename T> String impl_IDialAppStateDetails<T>::FullXml() const
{
	String value;
	check(shim()->get_FullXml(put(value)));
	return value;
}

template <typename T> String impl_IDialApp<T>::AppName() const
{
	String value;
	check(shim()->get_AppName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Media::DialProtocol::DialAppLaunchResult> impl_IDialApp<T>::RequestLaunchAsync(StringReference const & appArgument) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Media::DialProtocol::DialAppLaunchResult> value;
	check(shim()->abi_RequestLaunchAsync(get(appArgument), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Media::DialProtocol::DialAppStopResult> impl_IDialApp<T>::StopAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Media::DialProtocol::DialAppStopResult> value;
	check(shim()->abi_StopAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::DialProtocol::DialAppStateDetails> impl_IDialApp<T>::GetAppStateAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::DialProtocol::DialAppStateDetails> value;
	check(shim()->abi_GetAppStateAsync(put(value)));
	return value;
}

template <typename T> String impl_IDialDevice<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Media::DialProtocol::DialApp impl_IDialDevice<T>::GetDialApp(StringReference const & appName) const
{
	Windows::Media::DialProtocol::DialApp value = nullptr;
	check(shim()->abi_GetDialApp(get(appName), put(value)));
	return value;
}

template <typename T> String impl_IDialDevice2<T>::FriendlyName() const
{
	String value;
	check(shim()->get_FriendlyName(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IDialDevice2<T>::Thumbnail() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> String impl_IDialDeviceStatics<T>::GetDeviceSelector(StringReference const & appName) const
{
	String selector;
	check(shim()->abi_GetDeviceSelector(get(appName), put(selector)));
	return selector;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::DialProtocol::DialDevice> impl_IDialDeviceStatics<T>::FromIdAsync(StringReference const & value) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::DialProtocol::DialDevice> operation;
	check(shim()->abi_FromIdAsync(get(value), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IDialDeviceStatics<T>::DeviceInfoSupportsDialAsync(Windows::Devices::Enumeration::DeviceInformation const & device) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_DeviceInfoSupportsDialAsync(get(device), put(operation)));
	return operation;
}

template <typename T> Windows::Media::DialProtocol::DialDevice impl_IDialDeviceSelectedEventArgs<T>::SelectedDialDevice() const
{
	Windows::Media::DialProtocol::DialDevice value = nullptr;
	check(shim()->get_SelectedDialDevice(put(value)));
	return value;
}

template <typename T> Windows::Media::DialProtocol::DialDevice impl_IDialDisconnectButtonClickedEventArgs<T>::Device() const
{
	Windows::Media::DialProtocol::DialDevice value = nullptr;
	check(shim()->get_Device(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IDialDevicePickerFilter<T>::SupportedAppNames() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_SupportedAppNames(put(value)));
	return value;
}

template <typename T> Windows::Media::DialProtocol::DialDevicePickerFilter impl_IDialDevicePicker<T>::Filter() const
{
	Windows::Media::DialProtocol::DialDevicePickerFilter value = nullptr;
	check(shim()->get_Filter(put(value)));
	return value;
}

template <typename T> Windows::Devices::Enumeration::DevicePickerAppearance impl_IDialDevicePicker<T>::Appearance() const
{
	Windows::Devices::Enumeration::DevicePickerAppearance value = nullptr;
	check(shim()->get_Appearance(put(value)));
	return value;
}

template <typename T> long long impl_IDialDevicePicker<T>::DialDeviceSelected(Windows::Foundation::ITypedEventHandler<Windows::Media::DialProtocol::DialDevicePicker, Windows::Media::DialProtocol::DialDeviceSelectedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_DialDeviceSelected(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDialDevicePicker<T>::DialDeviceSelected(F handler) const
{
	return DialDeviceSelected(Windows::Foundation::TypedEventHandler<Windows::Media::DialProtocol::DialDevicePicker, Windows::Media::DialProtocol::DialDeviceSelectedEventArgs>(handler));
}

template <typename T> void impl_IDialDevicePicker<T>::DialDeviceSelected(long long const token) const
{
	check(shim()->remove_DialDeviceSelected(token));
}

template <typename T> long long impl_IDialDevicePicker<T>::DisconnectButtonClicked(Windows::Foundation::ITypedEventHandler<Windows::Media::DialProtocol::DialDevicePicker, Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_DisconnectButtonClicked(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDialDevicePicker<T>::DisconnectButtonClicked(F handler) const
{
	return DisconnectButtonClicked(Windows::Foundation::TypedEventHandler<Windows::Media::DialProtocol::DialDevicePicker, Windows::Media::DialProtocol::DialDisconnectButtonClickedEventArgs>(handler));
}

template <typename T> void impl_IDialDevicePicker<T>::DisconnectButtonClicked(long long const token) const
{
	check(shim()->remove_DisconnectButtonClicked(token));
}

template <typename T> long long impl_IDialDevicePicker<T>::DialDevicePickerDismissed(Windows::Foundation::ITypedEventHandler<Windows::Media::DialProtocol::DialDevicePicker, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_DialDevicePickerDismissed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDialDevicePicker<T>::DialDevicePickerDismissed(F handler) const
{
	return DialDevicePickerDismissed(Windows::Foundation::TypedEventHandler<Windows::Media::DialProtocol::DialDevicePicker, IInspectable>(handler));
}

template <typename T> void impl_IDialDevicePicker<T>::DialDevicePickerDismissed(long long const token) const
{
	check(shim()->remove_DialDevicePickerDismissed(token));
}

template <typename T> void impl_IDialDevicePicker<T>::Show(Windows::Foundation::Rect const & selection) const
{
	check(shim()->abi_Show(selection));
}

template <typename T> void impl_IDialDevicePicker<T>::Show(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	check(shim()->abi_ShowWithPlacement(selection, preferredPlacement));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::DialProtocol::DialDevice> impl_IDialDevicePicker<T>::PickSingleDialDeviceAsync(Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::DialProtocol::DialDevice> operation;
	check(shim()->abi_PickSingleDialDeviceAsync(selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::DialProtocol::DialDevice> impl_IDialDevicePicker<T>::PickSingleDialDeviceAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::DialProtocol::DialDevice> operation;
	check(shim()->abi_PickSingleDialDeviceAsyncWithPlacement(selection, preferredPlacement, put(operation)));
	return operation;
}

template <typename T> void impl_IDialDevicePicker<T>::Hide() const
{
	check(shim()->abi_Hide());
}

template <typename T> void impl_IDialDevicePicker<T>::SetDisplayStatus(Windows::Media::DialProtocol::DialDevice const & device, Windows::Media::DialProtocol::DialDeviceDisplayStatus const status) const
{
	check(shim()->abi_SetDisplayStatus(get(device), status));
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Editing {

template <typename T> Windows::Foundation::TimeSpan impl_IMediaClip<T>::TrimTimeFromStart() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_TrimTimeFromStart(&value));
	return value;
}

template <typename T> void impl_IMediaClip<T>::TrimTimeFromStart(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_TrimTimeFromStart(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaClip<T>::TrimTimeFromEnd() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_TrimTimeFromEnd(&value));
	return value;
}

template <typename T> void impl_IMediaClip<T>::TrimTimeFromEnd(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_TrimTimeFromEnd(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaClip<T>::OriginalDuration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_OriginalDuration(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaClip<T>::TrimmedDuration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_TrimmedDuration(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IMediaClip<T>::UserData() const
{
	Windows::Foundation::Collections::IMap<String, String> value;
	check(shim()->get_UserData(put(value)));
	return value;
}

template <typename T> Windows::Media::Editing::MediaClip impl_IMediaClip<T>::Clone() const
{
	Windows::Media::Editing::MediaClip result = nullptr;
	check(shim()->abi_Clone(put(result)));
	return result;
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaClip<T>::StartTimeInComposition() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_StartTimeInComposition(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaClip<T>::EndTimeInComposition() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_EndTimeInComposition(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Editing::EmbeddedAudioTrack> impl_IMediaClip<T>::EmbeddedAudioTracks() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Editing::EmbeddedAudioTrack> value;
	check(shim()->get_EmbeddedAudioTracks(put(value)));
	return value;
}

template <typename T> unsigned impl_IMediaClip<T>::SelectedEmbeddedAudioTrackIndex() const
{
	unsigned value = {};
	check(shim()->get_SelectedEmbeddedAudioTrackIndex(&value));
	return value;
}

template <typename T> void impl_IMediaClip<T>::SelectedEmbeddedAudioTrackIndex(unsigned const value) const
{
	check(shim()->put_SelectedEmbeddedAudioTrackIndex(value));
}

template <typename T> void impl_IMediaClip<T>::Volume(double const value) const
{
	check(shim()->put_Volume(value));
}

template <typename T> double impl_IMediaClip<T>::Volume() const
{
	double value = {};
	check(shim()->get_Volume(&value));
	return value;
}

template <typename T> Windows::Media::MediaProperties::VideoEncodingProperties impl_IMediaClip<T>::GetVideoEncodingProperties() const
{
	Windows::Media::MediaProperties::VideoEncodingProperties value = nullptr;
	check(shim()->abi_GetVideoEncodingProperties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Effects::IAudioEffectDefinition> impl_IMediaClip<T>::AudioEffectDefinitions() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Effects::IAudioEffectDefinition> value;
	check(shim()->get_AudioEffectDefinitions(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Effects::IVideoEffectDefinition> impl_IMediaClip<T>::VideoEffectDefinitions() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Effects::IVideoEffectDefinition> value;
	check(shim()->get_VideoEffectDefinitions(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaComposition<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Duration(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Editing::MediaClip> impl_IMediaComposition<T>::Clips() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Editing::MediaClip> value;
	check(shim()->get_Clips(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Editing::BackgroundAudioTrack> impl_IMediaComposition<T>::BackgroundAudioTracks() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Editing::BackgroundAudioTrack> value;
	check(shim()->get_BackgroundAudioTracks(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IMediaComposition<T>::UserData() const
{
	Windows::Foundation::Collections::IMap<String, String> value;
	check(shim()->get_UserData(put(value)));
	return value;
}

template <typename T> Windows::Media::Editing::MediaComposition impl_IMediaComposition<T>::Clone() const
{
	Windows::Media::Editing::MediaComposition result = nullptr;
	check(shim()->abi_Clone(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaComposition<T>::SaveAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_SaveAsync(get(file), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::ImageStream> impl_IMediaComposition<T>::GetThumbnailAsync(Windows::Foundation::TimeSpan const & timeFromStart, int const scaledWidth, int const scaledHeight, Windows::Media::Editing::VideoFramePrecision const framePrecision) const
{
	Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::ImageStream> operation;
	check(shim()->abi_GetThumbnailAsync(timeFromStart, scaledWidth, scaledHeight, framePrecision, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::ImageStream>> impl_IMediaComposition<T>::GetThumbnailsAsync(Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::TimeSpan> const & timesFromStart, int const scaledWidth, int const scaledHeight, Windows::Media::Editing::VideoFramePrecision const framePrecision) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::ImageStream>> operation;
	check(shim()->abi_GetThumbnailsAsync(get(timesFromStart), scaledWidth, scaledHeight, framePrecision, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Media::Transcoding::TranscodeFailureReason, double> impl_IMediaComposition<T>::RenderToFileAsync(Windows::Storage::IStorageFile const & destination) const
{
	Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Media::Transcoding::TranscodeFailureReason, double> operation;
	check(shim()->abi_RenderToFileAsync(get(destination), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Media::Transcoding::TranscodeFailureReason, double> impl_IMediaComposition<T>::RenderToFileAsync(Windows::Storage::IStorageFile const & destination, Windows::Media::Editing::MediaTrimmingPreference const trimmingPreference) const
{
	Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Media::Transcoding::TranscodeFailureReason, double> operation;
	check(shim()->abi_RenderToFileWithTrimmingPreferenceAsync(get(destination), trimmingPreference, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Media::Transcoding::TranscodeFailureReason, double> impl_IMediaComposition<T>::RenderToFileAsync(Windows::Storage::IStorageFile const & destination, Windows::Media::Editing::MediaTrimmingPreference const trimmingPreference, Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile) const
{
	Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Media::Transcoding::TranscodeFailureReason, double> operation;
	check(shim()->abi_RenderToFileWithProfileAsync(get(destination), trimmingPreference, get(encodingProfile), put(operation)));
	return operation;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IMediaComposition<T>::CreateDefaultEncodingProfile() const
{
	Windows::Media::MediaProperties::MediaEncodingProfile value = nullptr;
	check(shim()->abi_CreateDefaultEncodingProfile(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSource impl_IMediaComposition<T>::GenerateMediaStreamSource() const
{
	Windows::Media::Core::MediaStreamSource value = nullptr;
	check(shim()->abi_GenerateMediaStreamSource(put(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSource impl_IMediaComposition<T>::GenerateMediaStreamSource(Windows::Media::MediaProperties::MediaEncodingProfile const & encodingProfile) const
{
	Windows::Media::Core::MediaStreamSource value = nullptr;
	check(shim()->abi_GenerateMediaStreamSourceWithProfile(get(encodingProfile), put(value)));
	return value;
}

template <typename T> Windows::Media::Core::MediaStreamSource impl_IMediaComposition<T>::GeneratePreviewMediaStreamSource(int const scaledWidth, int const scaledHeight) const
{
	Windows::Media::Core::MediaStreamSource value = nullptr;
	check(shim()->abi_GeneratePreviewMediaStreamSource(scaledWidth, scaledHeight, put(value)));
	return value;
}

template <typename T> Windows::Media::Editing::MediaClip impl_IMediaClipStatics<T>::CreateFromColor(Windows::UI::Color const & color, Windows::Foundation::TimeSpan const & originalDuration) const
{
	Windows::Media::Editing::MediaClip value = nullptr;
	check(shim()->abi_CreateFromColor(color, originalDuration, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Editing::MediaClip> impl_IMediaClipStatics<T>::CreateFromFileAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Editing::MediaClip> operation;
	check(shim()->abi_CreateFromFileAsync(get(file), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Editing::MediaClip> impl_IMediaClipStatics<T>::CreateFromImageFileAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::TimeSpan const & originalDuration) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Editing::MediaClip> operation;
	check(shim()->abi_CreateFromImageFileAsync(get(file), originalDuration, put(operation)));
	return operation;
}

template <typename T> Windows::Media::Editing::MediaClip impl_IMediaClipStatics2<T>::CreateFromSurface(Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const & surface, Windows::Foundation::TimeSpan const & originalDuration) const
{
	Windows::Media::Editing::MediaClip value = nullptr;
	check(shim()->abi_CreateFromSurface(get(surface), originalDuration, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Editing::MediaComposition> impl_IMediaCompositionStatics<T>::LoadAsync(Windows::Storage::StorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Editing::MediaComposition> operation;
	check(shim()->abi_LoadAsync(get(file), put(operation)));
	return operation;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IEmbeddedAudioTrack<T>::GetAudioEncodingProperties() const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value = nullptr;
	check(shim()->abi_GetAudioEncodingProperties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBackgroundAudioTrack<T>::TrimTimeFromStart() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_TrimTimeFromStart(&value));
	return value;
}

template <typename T> void impl_IBackgroundAudioTrack<T>::TrimTimeFromStart(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_TrimTimeFromStart(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IBackgroundAudioTrack<T>::TrimTimeFromEnd() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_TrimTimeFromEnd(&value));
	return value;
}

template <typename T> void impl_IBackgroundAudioTrack<T>::TrimTimeFromEnd(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_TrimTimeFromEnd(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IBackgroundAudioTrack<T>::OriginalDuration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_OriginalDuration(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IBackgroundAudioTrack<T>::TrimmedDuration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_TrimmedDuration(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IBackgroundAudioTrack<T>::UserData() const
{
	Windows::Foundation::Collections::IMap<String, String> value;
	check(shim()->get_UserData(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundAudioTrack<T>::Delay(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_Delay(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IBackgroundAudioTrack<T>::Delay() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Delay(&value));
	return value;
}

template <typename T> void impl_IBackgroundAudioTrack<T>::Volume(double const value) const
{
	check(shim()->put_Volume(value));
}

template <typename T> double impl_IBackgroundAudioTrack<T>::Volume() const
{
	double value = {};
	check(shim()->get_Volume(&value));
	return value;
}

template <typename T> Windows::Media::Editing::BackgroundAudioTrack impl_IBackgroundAudioTrack<T>::Clone() const
{
	Windows::Media::Editing::BackgroundAudioTrack value = nullptr;
	check(shim()->abi_Clone(put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IBackgroundAudioTrack<T>::GetAudioEncodingProperties() const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value = nullptr;
	check(shim()->abi_GetAudioEncodingProperties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Effects::IAudioEffectDefinition> impl_IBackgroundAudioTrack<T>::AudioEffectDefinitions() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Effects::IAudioEffectDefinition> value;
	check(shim()->get_AudioEffectDefinitions(put(value)));
	return value;
}

template <typename T> Windows::Media::Editing::BackgroundAudioTrack impl_IBackgroundAudioTrackStatics<T>::CreateFromEmbeddedAudioTrack(Windows::Media::Editing::EmbeddedAudioTrack const & embeddedAudioTrack) const
{
	Windows::Media::Editing::BackgroundAudioTrack value = nullptr;
	check(shim()->abi_CreateFromEmbeddedAudioTrack(get(embeddedAudioTrack), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Editing::BackgroundAudioTrack> impl_IBackgroundAudioTrackStatics<T>::CreateFromFileAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Editing::BackgroundAudioTrack> operation;
	check(shim()->abi_CreateFromFileAsync(get(file), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Editing::MediaOverlayLayer> impl_IMediaComposition2<T>::OverlayLayers() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Editing::MediaOverlayLayer> value;
	check(shim()->get_OverlayLayers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IMediaOverlay<T>::Position() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> void impl_IMediaOverlay<T>::Position(Windows::Foundation::Rect const & value) const
{
	check(shim()->put_Position(value));
}

template <typename T> void impl_IMediaOverlay<T>::Delay(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_Delay(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaOverlay<T>::Delay() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Delay(&value));
	return value;
}

template <typename T> double impl_IMediaOverlay<T>::Opacity() const
{
	double value = {};
	check(shim()->get_Opacity(&value));
	return value;
}

template <typename T> void impl_IMediaOverlay<T>::Opacity(double const value) const
{
	check(shim()->put_Opacity(value));
}

template <typename T> Windows::Media::Editing::MediaOverlay impl_IMediaOverlay<T>::Clone() const
{
	Windows::Media::Editing::MediaOverlay result = nullptr;
	check(shim()->abi_Clone(put(result)));
	return result;
}

template <typename T> Windows::Media::Editing::MediaClip impl_IMediaOverlay<T>::Clip() const
{
	Windows::Media::Editing::MediaClip value = nullptr;
	check(shim()->get_Clip(put(value)));
	return value;
}

template <typename T> bool impl_IMediaOverlay<T>::AudioEnabled() const
{
	bool value = {};
	check(shim()->get_AudioEnabled(put(value)));
	return value;
}

template <typename T> void impl_IMediaOverlay<T>::AudioEnabled(bool const value) const
{
	check(shim()->put_AudioEnabled(value));
}

template <typename T> Windows::Media::Editing::MediaOverlay impl_IMediaOverlayFactory<T>::Create(Windows::Media::Editing::MediaClip const & clip) const
{
	Windows::Media::Editing::MediaOverlay mediaOverlay = nullptr;
	check(shim()->abi_Create(get(clip), put(mediaOverlay)));
	return mediaOverlay;
}

template <typename T> Windows::Media::Editing::MediaOverlay impl_IMediaOverlayFactory<T>::CreateWithPositionAndOpacity(Windows::Media::Editing::MediaClip const & clip, Windows::Foundation::Rect const & position, double const opacity) const
{
	Windows::Media::Editing::MediaOverlay mediaOverlay = nullptr;
	check(shim()->abi_CreateWithPositionAndOpacity(get(clip), position, opacity, put(mediaOverlay)));
	return mediaOverlay;
}

template <typename T> Windows::Media::Editing::MediaOverlayLayer impl_IMediaOverlayLayerFactory<T>::CreateWithCompositorDefinition(Windows::Media::Effects::IVideoCompositorDefinition const & compositorDefinition) const
{
	Windows::Media::Editing::MediaOverlayLayer mediaOverlayLayer = nullptr;
	check(shim()->abi_CreateWithCompositorDefinition(get(compositorDefinition), put(mediaOverlayLayer)));
	return mediaOverlayLayer;
}

template <typename T> Windows::Media::Editing::MediaOverlayLayer impl_IMediaOverlayLayer<T>::Clone() const
{
	Windows::Media::Editing::MediaOverlayLayer result = nullptr;
	check(shim()->abi_Clone(put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Editing::MediaOverlay> impl_IMediaOverlayLayer<T>::Overlays() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Editing::MediaOverlay> value;
	check(shim()->get_Overlays(put(value)));
	return value;
}

template <typename T> Windows::Media::Effects::IVideoCompositorDefinition impl_IMediaOverlayLayer<T>::CustomCompositorDefinition() const
{
	Windows::Media::Effects::IVideoCompositorDefinition value;
	check(shim()->get_CustomCompositorDefinition(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Effects {

template <typename T> String impl_IVideoCompositorDefinition<T>::ActivatableClassId() const
{
	String value;
	check(shim()->get_ActivatableClassId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IVideoCompositorDefinition<T>::Properties() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Media::Effects::VideoCompositorDefinition impl_IVideoCompositorDefinitionFactory<T>::Create(StringReference const & activatableClassId) const
{
	Windows::Media::Effects::VideoCompositorDefinition value = nullptr;
	check(shim()->abi_Create(get(activatableClassId), put(value)));
	return value;
}

template <typename T> Windows::Media::Effects::VideoCompositorDefinition impl_IVideoCompositorDefinitionFactory<T>::CreateWithProperties(StringReference const & activatableClassId, Windows::Foundation::Collections::IPropertySet const & props) const
{
	Windows::Media::Effects::VideoCompositorDefinition value = nullptr;
	check(shim()->abi_CreateWithProperties(get(activatableClassId), get(props), put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface> impl_ICompositeVideoFrameContext<T>::SurfacesToOverlay() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface> value;
	check(shim()->get_SurfacesToOverlay(put(value)));
	return value;
}

template <typename T> Windows::Media::VideoFrame impl_ICompositeVideoFrameContext<T>::BackgroundFrame() const
{
	Windows::Media::VideoFrame value = nullptr;
	check(shim()->get_BackgroundFrame(put(value)));
	return value;
}

template <typename T> Windows::Media::VideoFrame impl_ICompositeVideoFrameContext<T>::OutputFrame() const
{
	Windows::Media::VideoFrame value = nullptr;
	check(shim()->get_OutputFrame(put(value)));
	return value;
}

template <typename T> Windows::Media::Editing::MediaOverlay impl_ICompositeVideoFrameContext<T>::GetOverlayForSurface(Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const & surfaceToOverlay) const
{
	Windows::Media::Editing::MediaOverlay value = nullptr;
	check(shim()->abi_GetOverlayForSurface(get(surfaceToOverlay), put(value)));
	return value;
}

template <typename T> Windows::Media::Effects::AudioEffectType impl_IAudioEffect<T>::AudioEffectType() const
{
	Windows::Media::Effects::AudioEffectType value = {};
	check(shim()->get_AudioEffectType(&value));
	return value;
}

template <typename T> Windows::Media::Effects::AudioRenderEffectsManager impl_IAudioEffectsManagerStatics<T>::CreateAudioRenderEffectsManager(StringReference const & deviceId, Windows::Media::Render::AudioRenderCategory const category) const
{
	Windows::Media::Effects::AudioRenderEffectsManager value = nullptr;
	check(shim()->abi_CreateAudioRenderEffectsManager(get(deviceId), category, put(value)));
	return value;
}

template <typename T> Windows::Media::Effects::AudioRenderEffectsManager impl_IAudioEffectsManagerStatics<T>::CreateAudioRenderEffectsManager(StringReference const & deviceId, Windows::Media::Render::AudioRenderCategory const category, Windows::Media::AudioProcessing const mode) const
{
	Windows::Media::Effects::AudioRenderEffectsManager value = nullptr;
	check(shim()->abi_CreateAudioRenderEffectsManagerWithMode(get(deviceId), category, mode, put(value)));
	return value;
}

template <typename T> Windows::Media::Effects::AudioCaptureEffectsManager impl_IAudioEffectsManagerStatics<T>::CreateAudioCaptureEffectsManager(StringReference const & deviceId, Windows::Media::Capture::MediaCategory const category) const
{
	Windows::Media::Effects::AudioCaptureEffectsManager value = nullptr;
	check(shim()->abi_CreateAudioCaptureEffectsManager(get(deviceId), category, put(value)));
	return value;
}

template <typename T> Windows::Media::Effects::AudioCaptureEffectsManager impl_IAudioEffectsManagerStatics<T>::CreateAudioCaptureEffectsManager(StringReference const & deviceId, Windows::Media::Capture::MediaCategory const category, Windows::Media::AudioProcessing const mode) const
{
	Windows::Media::Effects::AudioCaptureEffectsManager value = nullptr;
	check(shim()->abi_CreateAudioCaptureEffectsManagerWithMode(get(deviceId), category, mode, put(value)));
	return value;
}

template <typename T> long long impl_IAudioRenderEffectsManager<T>::AudioRenderEffectsChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Effects::AudioRenderEffectsManager, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_AudioRenderEffectsChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAudioRenderEffectsManager<T>::AudioRenderEffectsChanged(F handler) const
{
	return AudioRenderEffectsChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Effects::AudioRenderEffectsManager, IInspectable>(handler));
}

template <typename T> void impl_IAudioRenderEffectsManager<T>::AudioRenderEffectsChanged(long long const token) const
{
	check(shim()->remove_AudioRenderEffectsChanged(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Effects::AudioEffect> impl_IAudioRenderEffectsManager<T>::GetAudioRenderEffects() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Effects::AudioEffect> effects;
	check(shim()->abi_GetAudioRenderEffects(put(effects)));
	return effects;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamWithContentType impl_IAudioRenderEffectsManager2<T>::EffectsProviderThumbnail() const
{
	Windows::Storage::Streams::IRandomAccessStreamWithContentType value;
	check(shim()->get_EffectsProviderThumbnail(put(value)));
	return value;
}

template <typename T> String impl_IAudioRenderEffectsManager2<T>::EffectsProviderSettingsLabel() const
{
	String value;
	check(shim()->get_EffectsProviderSettingsLabel(put(value)));
	return value;
}

template <typename T> void impl_IAudioRenderEffectsManager2<T>::ShowSettingsUI() const
{
	check(shim()->abi_ShowSettingsUI());
}

template <typename T> long long impl_IAudioCaptureEffectsManager<T>::AudioCaptureEffectsChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Effects::AudioCaptureEffectsManager, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_AudioCaptureEffectsChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAudioCaptureEffectsManager<T>::AudioCaptureEffectsChanged(F handler) const
{
	return AudioCaptureEffectsChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Effects::AudioCaptureEffectsManager, IInspectable>(handler));
}

template <typename T> void impl_IAudioCaptureEffectsManager<T>::AudioCaptureEffectsChanged(long long const token) const
{
	check(shim()->remove_AudioCaptureEffectsChanged(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Effects::AudioEffect> impl_IAudioCaptureEffectsManager<T>::GetAudioCaptureEffects() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Effects::AudioEffect> effects;
	check(shim()->abi_GetAudioCaptureEffects(put(effects)));
	return effects;
}

template <typename T> bool impl_IVideoCompositor<T>::TimeIndependent() const
{
	bool value = {};
	check(shim()->get_TimeIndependent(put(value)));
	return value;
}

template <typename T> void impl_IVideoCompositor<T>::SetEncodingProperties(Windows::Media::MediaProperties::VideoEncodingProperties const & backgroundProperties, Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice const & device) const
{
	check(shim()->abi_SetEncodingProperties(get(backgroundProperties), get(device)));
}

template <typename T> void impl_IVideoCompositor<T>::CompositeFrame(Windows::Media::Effects::CompositeVideoFrameContext const & context) const
{
	check(shim()->abi_CompositeFrame(get(context)));
}

template <typename T> void impl_IVideoCompositor<T>::Close(Windows::Media::Effects::MediaEffectClosedReason const reason) const
{
	check(shim()->abi_Close(reason));
}

template <typename T> void impl_IVideoCompositor<T>::DiscardQueuedFrames() const
{
	check(shim()->abi_DiscardQueuedFrames());
}

template <typename T> String impl_IAudioEffectDefinition<T>::ActivatableClassId() const
{
	String value;
	check(shim()->get_ActivatableClassId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IAudioEffectDefinition<T>::Properties() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> String impl_IVideoEffectDefinition<T>::ActivatableClassId() const
{
	String value;
	check(shim()->get_ActivatableClassId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IVideoEffectDefinition<T>::Properties() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Media::Effects::VideoEffectDefinition impl_IVideoEffectDefinitionFactory<T>::Create(StringReference const & activatableClassId) const
{
	Windows::Media::Effects::VideoEffectDefinition value = nullptr;
	check(shim()->abi_Create(get(activatableClassId), put(value)));
	return value;
}

template <typename T> Windows::Media::Effects::VideoEffectDefinition impl_IVideoEffectDefinitionFactory<T>::CreateWithProperties(StringReference const & activatableClassId, Windows::Foundation::Collections::IPropertySet const & props) const
{
	Windows::Media::Effects::VideoEffectDefinition value = nullptr;
	check(shim()->abi_CreateWithProperties(get(activatableClassId), get(props), put(value)));
	return value;
}

template <typename T> Windows::Media::Effects::AudioEffectDefinition impl_IAudioEffectDefinitionFactory<T>::Create(StringReference const & activatableClassId) const
{
	Windows::Media::Effects::AudioEffectDefinition value = nullptr;
	check(shim()->abi_Create(get(activatableClassId), put(value)));
	return value;
}

template <typename T> Windows::Media::Effects::AudioEffectDefinition impl_IAudioEffectDefinitionFactory<T>::CreateWithProperties(StringReference const & activatableClassId, Windows::Foundation::Collections::IPropertySet const & props) const
{
	Windows::Media::Effects::AudioEffectDefinition value = nullptr;
	check(shim()->abi_CreateWithProperties(get(activatableClassId), get(props), put(value)));
	return value;
}

template <typename T> Windows::Media::VideoFrame impl_IProcessVideoFrameContext<T>::InputFrame() const
{
	Windows::Media::VideoFrame value = nullptr;
	check(shim()->get_InputFrame(put(value)));
	return value;
}

template <typename T> Windows::Media::VideoFrame impl_IProcessVideoFrameContext<T>::OutputFrame() const
{
	Windows::Media::VideoFrame value = nullptr;
	check(shim()->get_OutputFrame(put(value)));
	return value;
}

template <typename T> bool impl_IBasicVideoEffect<T>::IsReadOnly() const
{
	bool value = {};
	check(shim()->get_IsReadOnly(put(value)));
	return value;
}

template <typename T> Windows::Media::Effects::MediaMemoryTypes impl_IBasicVideoEffect<T>::SupportedMemoryTypes() const
{
	Windows::Media::Effects::MediaMemoryTypes value = {};
	check(shim()->get_SupportedMemoryTypes(&value));
	return value;
}

template <typename T> bool impl_IBasicVideoEffect<T>::TimeIndependent() const
{
	bool value = {};
	check(shim()->get_TimeIndependent(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::MediaProperties::VideoEncodingProperties> impl_IBasicVideoEffect<T>::SupportedEncodingProperties() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::MediaProperties::VideoEncodingProperties> value;
	check(shim()->get_SupportedEncodingProperties(put(value)));
	return value;
}

template <typename T> void impl_IBasicVideoEffect<T>::SetEncodingProperties(Windows::Media::MediaProperties::VideoEncodingProperties const & encodingProperties, Windows::Graphics::DirectX::Direct3D11::IDirect3DDevice const & device) const
{
	check(shim()->abi_SetEncodingProperties(get(encodingProperties), get(device)));
}

template <typename T> void impl_IBasicVideoEffect<T>::ProcessFrame(Windows::Media::Effects::ProcessVideoFrameContext const & context) const
{
	check(shim()->abi_ProcessFrame(get(context)));
}

template <typename T> void impl_IBasicVideoEffect<T>::Close(Windows::Media::Effects::MediaEffectClosedReason const reason) const
{
	check(shim()->abi_Close(reason));
}

template <typename T> void impl_IBasicVideoEffect<T>::DiscardQueuedFrames() const
{
	check(shim()->abi_DiscardQueuedFrames());
}

template <typename T> Windows::Media::AudioFrame impl_IProcessAudioFrameContext<T>::InputFrame() const
{
	Windows::Media::AudioFrame value = nullptr;
	check(shim()->get_InputFrame(put(value)));
	return value;
}

template <typename T> Windows::Media::AudioFrame impl_IProcessAudioFrameContext<T>::OutputFrame() const
{
	Windows::Media::AudioFrame value = nullptr;
	check(shim()->get_OutputFrame(put(value)));
	return value;
}

template <typename T> bool impl_IBasicAudioEffect<T>::UseInputFrameForOutput() const
{
	bool value = {};
	check(shim()->get_UseInputFrameForOutput(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::MediaProperties::AudioEncodingProperties> impl_IBasicAudioEffect<T>::SupportedEncodingProperties() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::MediaProperties::AudioEncodingProperties> value;
	check(shim()->get_SupportedEncodingProperties(put(value)));
	return value;
}

template <typename T> void impl_IBasicAudioEffect<T>::SetEncodingProperties(Windows::Media::MediaProperties::AudioEncodingProperties const & encodingProperties) const
{
	check(shim()->abi_SetEncodingProperties(get(encodingProperties)));
}

template <typename T> void impl_IBasicAudioEffect<T>::ProcessFrame(Windows::Media::Effects::ProcessAudioFrameContext const & context) const
{
	check(shim()->abi_ProcessFrame(get(context)));
}

template <typename T> void impl_IBasicAudioEffect<T>::Close(Windows::Media::Effects::MediaEffectClosedReason const reason) const
{
	check(shim()->abi_Close(reason));
}

template <typename T> void impl_IBasicAudioEffect<T>::DiscardQueuedFrames() const
{
	check(shim()->abi_DiscardQueuedFrames());
}

template <typename T> Windows::UI::Color impl_IVideoTransformEffectDefinition<T>::PaddingColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_PaddingColor(&value));
	return value;
}

template <typename T> void impl_IVideoTransformEffectDefinition<T>::PaddingColor(Windows::UI::Color const & value) const
{
	check(shim()->put_PaddingColor(value));
}

template <typename T> Windows::Foundation::Size impl_IVideoTransformEffectDefinition<T>::OutputSize() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_OutputSize(&value));
	return value;
}

template <typename T> void impl_IVideoTransformEffectDefinition<T>::OutputSize(Windows::Foundation::Size const & value) const
{
	check(shim()->put_OutputSize(value));
}

template <typename T> Windows::Foundation::Rect impl_IVideoTransformEffectDefinition<T>::CropRectangle() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_CropRectangle(&value));
	return value;
}

template <typename T> void impl_IVideoTransformEffectDefinition<T>::CropRectangle(Windows::Foundation::Rect const & value) const
{
	check(shim()->put_CropRectangle(value));
}

template <typename T> Windows::Media::MediaProperties::MediaRotation impl_IVideoTransformEffectDefinition<T>::Rotation() const
{
	Windows::Media::MediaProperties::MediaRotation value = {};
	check(shim()->get_Rotation(&value));
	return value;
}

template <typename T> void impl_IVideoTransformEffectDefinition<T>::Rotation(Windows::Media::MediaProperties::MediaRotation const value) const
{
	check(shim()->put_Rotation(value));
}

template <typename T> Windows::Media::MediaProperties::MediaMirroringOptions impl_IVideoTransformEffectDefinition<T>::Mirror() const
{
	Windows::Media::MediaProperties::MediaMirroringOptions value = {};
	check(shim()->get_Mirror(&value));
	return value;
}

template <typename T> void impl_IVideoTransformEffectDefinition<T>::Mirror(Windows::Media::MediaProperties::MediaMirroringOptions const value) const
{
	check(shim()->put_Mirror(value));
}

template <typename T> void impl_IVideoTransformEffectDefinition<T>::ProcessingAlgorithm(Windows::Media::Transcoding::MediaVideoProcessingAlgorithm const value) const
{
	check(shim()->put_ProcessingAlgorithm(value));
}

template <typename T> Windows::Media::Transcoding::MediaVideoProcessingAlgorithm impl_IVideoTransformEffectDefinition<T>::ProcessingAlgorithm() const
{
	Windows::Media::Transcoding::MediaVideoProcessingAlgorithm value = {};
	check(shim()->get_ProcessingAlgorithm(&value));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace FaceAnalysis {

template <typename T> Windows::Graphics::Imaging::BitmapBounds impl_IDetectedFace<T>::FaceBox() const
{
	Windows::Graphics::Imaging::BitmapBounds returnValue = {};
	check(shim()->get_FaceBox(&returnValue));
	return returnValue;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Windows::Media::FaceAnalysis::DetectedFace>> impl_IFaceDetector<T>::DetectFacesAsync(Windows::Graphics::Imaging::SoftwareBitmap const & image) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Windows::Media::FaceAnalysis::DetectedFace>> returnValue;
	check(shim()->abi_DetectFacesAsync(get(image), put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Windows::Media::FaceAnalysis::DetectedFace>> impl_IFaceDetector<T>::DetectFacesAsync(Windows::Graphics::Imaging::SoftwareBitmap const & image, Windows::Graphics::Imaging::BitmapBounds const & searchArea) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Windows::Media::FaceAnalysis::DetectedFace>> returnValue;
	check(shim()->abi_DetectFacesWithSearchAreaAsync(get(image), searchArea, put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Graphics::Imaging::BitmapSize impl_IFaceDetector<T>::MinDetectableFaceSize() const
{
	Windows::Graphics::Imaging::BitmapSize returnValue = {};
	check(shim()->get_MinDetectableFaceSize(&returnValue));
	return returnValue;
}

template <typename T> void impl_IFaceDetector<T>::MinDetectableFaceSize(Windows::Graphics::Imaging::BitmapSize const & value) const
{
	check(shim()->put_MinDetectableFaceSize(value));
}

template <typename T> Windows::Graphics::Imaging::BitmapSize impl_IFaceDetector<T>::MaxDetectableFaceSize() const
{
	Windows::Graphics::Imaging::BitmapSize returnValue = {};
	check(shim()->get_MaxDetectableFaceSize(&returnValue));
	return returnValue;
}

template <typename T> void impl_IFaceDetector<T>::MaxDetectableFaceSize(Windows::Graphics::Imaging::BitmapSize const & value) const
{
	check(shim()->put_MaxDetectableFaceSize(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::FaceAnalysis::FaceDetector> impl_IFaceDetectorStatics<T>::CreateAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::FaceAnalysis::FaceDetector> returnValue;
	check(shim()->abi_CreateAsync(put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Graphics::Imaging::BitmapPixelFormat> impl_IFaceDetectorStatics<T>::GetSupportedBitmapPixelFormats() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Graphics::Imaging::BitmapPixelFormat> result;
	check(shim()->abi_GetSupportedBitmapPixelFormats(put(result)));
	return result;
}

template <typename T> bool impl_IFaceDetectorStatics<T>::IsBitmapPixelFormatSupported(Windows::Graphics::Imaging::BitmapPixelFormat const bitmapPixelFormat) const
{
	bool result = {};
	check(shim()->abi_IsBitmapPixelFormatSupported(bitmapPixelFormat, put(result)));
	return result;
}

template <typename T> bool impl_IFaceDetectorStatics<T>::IsSupported() const
{
	bool returnValue = {};
	check(shim()->get_IsSupported(put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Windows::Media::FaceAnalysis::DetectedFace>> impl_IFaceTracker<T>::ProcessNextFrameAsync(Windows::Media::VideoFrame const & videoFrame) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<Windows::Media::FaceAnalysis::DetectedFace>> returnValue;
	check(shim()->abi_ProcessNextFrameAsync(get(videoFrame), put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Graphics::Imaging::BitmapSize impl_IFaceTracker<T>::MinDetectableFaceSize() const
{
	Windows::Graphics::Imaging::BitmapSize returnValue = {};
	check(shim()->get_MinDetectableFaceSize(&returnValue));
	return returnValue;
}

template <typename T> void impl_IFaceTracker<T>::MinDetectableFaceSize(Windows::Graphics::Imaging::BitmapSize const & value) const
{
	check(shim()->put_MinDetectableFaceSize(value));
}

template <typename T> Windows::Graphics::Imaging::BitmapSize impl_IFaceTracker<T>::MaxDetectableFaceSize() const
{
	Windows::Graphics::Imaging::BitmapSize returnValue = {};
	check(shim()->get_MaxDetectableFaceSize(&returnValue));
	return returnValue;
}

template <typename T> void impl_IFaceTracker<T>::MaxDetectableFaceSize(Windows::Graphics::Imaging::BitmapSize const & value) const
{
	check(shim()->put_MaxDetectableFaceSize(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::FaceAnalysis::FaceTracker> impl_IFaceTrackerStatics<T>::CreateAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::FaceAnalysis::FaceTracker> returnValue;
	check(shim()->abi_CreateAsync(put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Graphics::Imaging::BitmapPixelFormat> impl_IFaceTrackerStatics<T>::GetSupportedBitmapPixelFormats() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Graphics::Imaging::BitmapPixelFormat> result;
	check(shim()->abi_GetSupportedBitmapPixelFormats(put(result)));
	return result;
}

template <typename T> bool impl_IFaceTrackerStatics<T>::IsBitmapPixelFormatSupported(Windows::Graphics::Imaging::BitmapPixelFormat const bitmapPixelFormat) const
{
	bool result = {};
	check(shim()->abi_IsBitmapPixelFormatSupported(bitmapPixelFormat, put(result)));
	return result;
}

template <typename T> bool impl_IFaceTrackerStatics<T>::IsSupported() const
{
	bool returnValue = {};
	check(shim()->get_IsSupported(put(returnValue)));
	return returnValue;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Import {

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IPhotoImportManagerStatics<T>::IsSupportedAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_IsSupportedAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportSource>> impl_IPhotoImportManagerStatics<T>::FindAllSourcesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportSource>> operation;
	check(shim()->abi_FindAllSourcesAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportOperation> impl_IPhotoImportManagerStatics<T>::GetPendingOperations() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportOperation> result;
	check(shim()->abi_GetPendingOperations(put(result)));
	return result;
}

template <typename T> Windows::Media::Import::PhotoImportStage impl_IPhotoImportOperation<T>::Stage() const
{
	Windows::Media::Import::PhotoImportStage value = {};
	check(shim()->get_Stage(&value));
	return value;
}

template <typename T> Windows::Media::Import::PhotoImportSession impl_IPhotoImportOperation<T>::Session() const
{
	Windows::Media::Import::PhotoImportSession value = nullptr;
	check(shim()->get_Session(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Media::Import::PhotoImportFindItemsResult, unsigned> impl_IPhotoImportOperation<T>::ContinueFindingItemsAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Media::Import::PhotoImportFindItemsResult, unsigned> operation;
	check(shim()->get_ContinueFindingItemsAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Media::Import::PhotoImportImportItemsResult, winrt::Windows::Media::Import::PhotoImportProgress> impl_IPhotoImportOperation<T>::ContinueImportingItemsAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Media::Import::PhotoImportImportItemsResult, winrt::Windows::Media::Import::PhotoImportProgress> operation;
	check(shim()->get_ContinueImportingItemsAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Media::Import::PhotoImportDeleteImportedItemsFromSourceResult, double> impl_IPhotoImportOperation<T>::ContinueDeletingImportedItemsFromSourceAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Media::Import::PhotoImportDeleteImportedItemsFromSourceResult, double> operation;
	check(shim()->get_ContinueDeletingImportedItemsFromSourceAsync(put(operation)));
	return operation;
}

template <typename T> String impl_IPhotoImportStorageMedium<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IPhotoImportStorageMedium<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> String impl_IPhotoImportStorageMedium<T>::SerialNumber() const
{
	String value;
	check(shim()->get_SerialNumber(put(value)));
	return value;
}

template <typename T> Windows::Media::Import::PhotoImportStorageMediumType impl_IPhotoImportStorageMedium<T>::StorageMediumType() const
{
	Windows::Media::Import::PhotoImportStorageMediumType value = {};
	check(shim()->get_StorageMediumType(&value));
	return value;
}

template <typename T> Windows::Media::Import::PhotoImportAccessMode impl_IPhotoImportStorageMedium<T>::SupportedAccessMode() const
{
	Windows::Media::Import::PhotoImportAccessMode value = {};
	check(shim()->get_SupportedAccessMode(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportStorageMedium<T>::CapacityInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_CapacityInBytes(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportStorageMedium<T>::AvailableSpaceInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_AvailableSpaceInBytes(&value));
	return value;
}

template <typename T> void impl_IPhotoImportStorageMedium<T>::Refresh() const
{
	check(shim()->abi_Refresh());
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Import::PhotoImportSource> impl_IPhotoImportSourceStatics<T>::FromIdAsync(StringReference const & sourceId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Import::PhotoImportSource> operation;
	check(shim()->abi_FromIdAsync(get(sourceId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Import::PhotoImportSource> impl_IPhotoImportSourceStatics<T>::FromFolderAsync(Windows::Storage::IStorageFolder const & sourceRootFolder) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Import::PhotoImportSource> operation;
	check(shim()->abi_FromFolderAsync(get(sourceRootFolder), put(operation)));
	return operation;
}

template <typename T> String impl_IPhotoImportSource<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IPhotoImportSource<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IPhotoImportSource<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> String impl_IPhotoImportSource<T>::Manufacturer() const
{
	String value;
	check(shim()->get_Manufacturer(put(value)));
	return value;
}

template <typename T> String impl_IPhotoImportSource<T>::Model() const
{
	String value;
	check(shim()->get_Model(put(value)));
	return value;
}

template <typename T> String impl_IPhotoImportSource<T>::SerialNumber() const
{
	String value;
	check(shim()->get_SerialNumber(put(value)));
	return value;
}

template <typename T> String impl_IPhotoImportSource<T>::ConnectionProtocol() const
{
	String value;
	check(shim()->get_ConnectionProtocol(put(value)));
	return value;
}

template <typename T> Windows::Media::Import::PhotoImportConnectionTransport impl_IPhotoImportSource<T>::ConnectionTransport() const
{
	Windows::Media::Import::PhotoImportConnectionTransport value = {};
	check(shim()->get_ConnectionTransport(&value));
	return value;
}

template <typename T> Windows::Media::Import::PhotoImportSourceType impl_IPhotoImportSource<T>::Type() const
{
	Windows::Media::Import::PhotoImportSourceType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Media::Import::PhotoImportPowerSource impl_IPhotoImportSource<T>::PowerSource() const
{
	Windows::Media::Import::PhotoImportPowerSource value = {};
	check(shim()->get_PowerSource(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IPhotoImportSource<T>::BatteryLevelPercent() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_BatteryLevelPercent(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IPhotoImportSource<T>::DateTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_DateTime(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportStorageMedium> impl_IPhotoImportSource<T>::StorageMedia() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportStorageMedium> value;
	check(shim()->get_StorageMedia(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<bool> impl_IPhotoImportSource<T>::IsLocked() const
{
	Windows::Foundation::IReference<bool> value;
	check(shim()->get_IsLocked(put(value)));
	return value;
}

template <typename T> bool impl_IPhotoImportSource<T>::IsMassStorage() const
{
	bool value = {};
	check(shim()->get_IsMassStorage(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IPhotoImportSource<T>::Thumbnail() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> Windows::Media::Import::PhotoImportSession impl_IPhotoImportSource<T>::CreateImportSession() const
{
	Windows::Media::Import::PhotoImportSession result = nullptr;
	check(shim()->abi_CreateImportSession(put(result)));
	return result;
}

template <typename T> Windows::Media::Import::PhotoImportSource impl_IPhotoImportSession<T>::Source() const
{
	Windows::Media::Import::PhotoImportSource value = nullptr;
	check(shim()->get_Source(put(value)));
	return value;
}

template <typename T> GUID impl_IPhotoImportSession<T>::SessionId() const
{
	GUID value = {};
	check(shim()->get_SessionId(&value));
	return value;
}

template <typename T> void impl_IPhotoImportSession<T>::DestinationFolder(Windows::Storage::IStorageFolder const & value) const
{
	check(shim()->put_DestinationFolder(get(value)));
}

template <typename T> Windows::Storage::IStorageFolder impl_IPhotoImportSession<T>::DestinationFolder() const
{
	Windows::Storage::IStorageFolder value;
	check(shim()->get_DestinationFolder(put(value)));
	return value;
}

template <typename T> void impl_IPhotoImportSession<T>::AppendSessionDateToDestinationFolder(bool const value) const
{
	check(shim()->put_AppendSessionDateToDestinationFolder(value));
}

template <typename T> bool impl_IPhotoImportSession<T>::AppendSessionDateToDestinationFolder() const
{
	bool value = {};
	check(shim()->get_AppendSessionDateToDestinationFolder(put(value)));
	return value;
}

template <typename T> void impl_IPhotoImportSession<T>::SubfolderCreationMode(Windows::Media::Import::PhotoImportSubfolderCreationMode const value) const
{
	check(shim()->put_SubfolderCreationMode(value));
}

template <typename T> Windows::Media::Import::PhotoImportSubfolderCreationMode impl_IPhotoImportSession<T>::SubfolderCreationMode() const
{
	Windows::Media::Import::PhotoImportSubfolderCreationMode value = {};
	check(shim()->get_SubfolderCreationMode(&value));
	return value;
}

template <typename T> void impl_IPhotoImportSession<T>::DestinationFileNamePrefix(StringReference const & value) const
{
	check(shim()->put_DestinationFileNamePrefix(get(value)));
}

template <typename T> String impl_IPhotoImportSession<T>::DestinationFileNamePrefix() const
{
	String value;
	check(shim()->get_DestinationFileNamePrefix(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Media::Import::PhotoImportFindItemsResult, unsigned> impl_IPhotoImportSession<T>::FindItemsAsync(Windows::Media::Import::PhotoImportContentTypeFilter const contentTypeFilter, Windows::Media::Import::PhotoImportItemSelectionMode const itemSelectionMode) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Media::Import::PhotoImportFindItemsResult, unsigned> operation;
	check(shim()->abi_FindItemsAsync(contentTypeFilter, itemSelectionMode, put(operation)));
	return operation;
}

template <typename T> String impl_IPhotoImportItem<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportItem<T>::ItemKey() const
{
	unsigned long long value = {};
	check(shim()->get_ItemKey(&value));
	return value;
}

template <typename T> Windows::Media::Import::PhotoImportContentType impl_IPhotoImportItem<T>::ContentType() const
{
	Windows::Media::Import::PhotoImportContentType value = {};
	check(shim()->get_ContentType(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportItem<T>::SizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_SizeInBytes(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPhotoImportItem<T>::Date() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Date(&value));
	return value;
}

template <typename T> Windows::Media::Import::PhotoImportSidecar impl_IPhotoImportItem<T>::Sibling() const
{
	Windows::Media::Import::PhotoImportSidecar value = nullptr;
	check(shim()->get_Sibling(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportSidecar> impl_IPhotoImportItem<T>::Sidecars() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportSidecar> value;
	check(shim()->get_Sidecars(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportVideoSegment> impl_IPhotoImportItem<T>::VideoSegments() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportVideoSegment> value;
	check(shim()->get_VideoSegments(put(value)));
	return value;
}

template <typename T> bool impl_IPhotoImportItem<T>::IsSelected() const
{
	bool value = {};
	check(shim()->get_IsSelected(put(value)));
	return value;
}

template <typename T> void impl_IPhotoImportItem<T>::IsSelected(bool const value) const
{
	check(shim()->put_IsSelected(value));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_IPhotoImportItem<T>::Thumbnail() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IPhotoImportItem<T>::ImportedFileNames() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_ImportedFileNames(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IPhotoImportItem<T>::DeletedFileNames() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_DeletedFileNames(put(value)));
	return value;
}

template <typename T> Windows::Media::Import::PhotoImportSession impl_IPhotoImportFindItemsResult<T>::Session() const
{
	Windows::Media::Import::PhotoImportSession value = nullptr;
	check(shim()->get_Session(put(value)));
	return value;
}

template <typename T> bool impl_IPhotoImportFindItemsResult<T>::HasSucceeded() const
{
	bool value = {};
	check(shim()->get_HasSucceeded(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportItem> impl_IPhotoImportFindItemsResult<T>::FoundItems() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportItem> value;
	check(shim()->get_FoundItems(put(value)));
	return value;
}

template <typename T> unsigned impl_IPhotoImportFindItemsResult<T>::PhotosCount() const
{
	unsigned value = {};
	check(shim()->get_PhotosCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportFindItemsResult<T>::PhotosSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_PhotosSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportFindItemsResult<T>::VideosCount() const
{
	unsigned value = {};
	check(shim()->get_VideosCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportFindItemsResult<T>::VideosSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_VideosSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportFindItemsResult<T>::SidecarsCount() const
{
	unsigned value = {};
	check(shim()->get_SidecarsCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportFindItemsResult<T>::SidecarsSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_SidecarsSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportFindItemsResult<T>::SiblingsCount() const
{
	unsigned value = {};
	check(shim()->get_SiblingsCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportFindItemsResult<T>::SiblingsSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_SiblingsSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportFindItemsResult<T>::TotalCount() const
{
	unsigned value = {};
	check(shim()->get_TotalCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportFindItemsResult<T>::TotalSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_TotalSizeInBytes(&value));
	return value;
}

template <typename T> void impl_IPhotoImportFindItemsResult<T>::SelectAll() const
{
	check(shim()->abi_SelectAll());
}

template <typename T> void impl_IPhotoImportFindItemsResult<T>::SelectNone() const
{
	check(shim()->abi_SelectNone());
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPhotoImportFindItemsResult<T>::SelectNewAsync() const
{
	Windows::Foundation::IAsyncAction action;
	check(shim()->abi_SelectNewAsync(put(action)));
	return action;
}

template <typename T> void impl_IPhotoImportFindItemsResult<T>::SetImportMode(Windows::Media::Import::PhotoImportImportMode const value) const
{
	check(shim()->abi_SetImportMode(value));
}

template <typename T> Windows::Media::Import::PhotoImportImportMode impl_IPhotoImportFindItemsResult<T>::ImportMode() const
{
	Windows::Media::Import::PhotoImportImportMode value = {};
	check(shim()->get_ImportMode(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportFindItemsResult<T>::SelectedPhotosCount() const
{
	unsigned value = {};
	check(shim()->get_SelectedPhotosCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportFindItemsResult<T>::SelectedPhotosSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_SelectedPhotosSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportFindItemsResult<T>::SelectedVideosCount() const
{
	unsigned value = {};
	check(shim()->get_SelectedVideosCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportFindItemsResult<T>::SelectedVideosSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_SelectedVideosSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportFindItemsResult<T>::SelectedSidecarsCount() const
{
	unsigned value = {};
	check(shim()->get_SelectedSidecarsCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportFindItemsResult<T>::SelectedSidecarsSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_SelectedSidecarsSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportFindItemsResult<T>::SelectedSiblingsCount() const
{
	unsigned value = {};
	check(shim()->get_SelectedSiblingsCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportFindItemsResult<T>::SelectedSiblingsSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_SelectedSiblingsSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportFindItemsResult<T>::SelectedTotalCount() const
{
	unsigned value = {};
	check(shim()->get_SelectedTotalCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportFindItemsResult<T>::SelectedTotalSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_SelectedTotalSizeInBytes(&value));
	return value;
}

template <typename T> long long impl_IPhotoImportFindItemsResult<T>::SelectionChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Import::PhotoImportFindItemsResult, Windows::Media::Import::PhotoImportSelectionChangedEventArgs> const & value) const
{
	long long token = {};
	check(shim()->add_SelectionChanged(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPhotoImportFindItemsResult<T>::SelectionChanged(F value) const
{
	return SelectionChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Import::PhotoImportFindItemsResult, Windows::Media::Import::PhotoImportSelectionChangedEventArgs>(value));
}

template <typename T> void impl_IPhotoImportFindItemsResult<T>::SelectionChanged(long long const token) const
{
	check(shim()->remove_SelectionChanged(token));
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Media::Import::PhotoImportImportItemsResult, winrt::Windows::Media::Import::PhotoImportProgress> impl_IPhotoImportFindItemsResult<T>::ImportItemsAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Media::Import::PhotoImportImportItemsResult, winrt::Windows::Media::Import::PhotoImportProgress> operation;
	check(shim()->abi_ImportItemsAsync(put(operation)));
	return operation;
}

template <typename T> long long impl_IPhotoImportFindItemsResult<T>::ItemImported(Windows::Foundation::ITypedEventHandler<Windows::Media::Import::PhotoImportFindItemsResult, Windows::Media::Import::PhotoImportItemImportedEventArgs> const & value) const
{
	long long token = {};
	check(shim()->add_ItemImported(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPhotoImportFindItemsResult<T>::ItemImported(F value) const
{
	return ItemImported(Windows::Foundation::TypedEventHandler<Windows::Media::Import::PhotoImportFindItemsResult, Windows::Media::Import::PhotoImportItemImportedEventArgs>(value));
}

template <typename T> void impl_IPhotoImportFindItemsResult<T>::ItemImported(long long const token) const
{
	check(shim()->remove_ItemImported(token));
}

template <typename T> Windows::Media::Import::PhotoImportSession impl_IPhotoImportImportItemsResult<T>::Session() const
{
	Windows::Media::Import::PhotoImportSession value = nullptr;
	check(shim()->get_Session(put(value)));
	return value;
}

template <typename T> bool impl_IPhotoImportImportItemsResult<T>::HasSucceeded() const
{
	bool value = {};
	check(shim()->get_HasSucceeded(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportItem> impl_IPhotoImportImportItemsResult<T>::ImportedItems() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportItem> value;
	check(shim()->get_ImportedItems(put(value)));
	return value;
}

template <typename T> unsigned impl_IPhotoImportImportItemsResult<T>::PhotosCount() const
{
	unsigned value = {};
	check(shim()->get_PhotosCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportImportItemsResult<T>::PhotosSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_PhotosSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportImportItemsResult<T>::VideosCount() const
{
	unsigned value = {};
	check(shim()->get_VideosCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportImportItemsResult<T>::VideosSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_VideosSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportImportItemsResult<T>::SidecarsCount() const
{
	unsigned value = {};
	check(shim()->get_SidecarsCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportImportItemsResult<T>::SidecarsSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_SidecarsSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportImportItemsResult<T>::SiblingsCount() const
{
	unsigned value = {};
	check(shim()->get_SiblingsCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportImportItemsResult<T>::SiblingsSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_SiblingsSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportImportItemsResult<T>::TotalCount() const
{
	unsigned value = {};
	check(shim()->get_TotalCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportImportItemsResult<T>::TotalSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_TotalSizeInBytes(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Media::Import::PhotoImportDeleteImportedItemsFromSourceResult, double> impl_IPhotoImportImportItemsResult<T>::DeleteImportedItemsFromSourceAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Media::Import::PhotoImportDeleteImportedItemsFromSourceResult, double> result;
	check(shim()->abi_DeleteImportedItemsFromSourceAsync(put(result)));
	return result;
}

template <typename T> Windows::Media::Import::PhotoImportSession impl_IPhotoImportDeleteImportedItemsFromSourceResult<T>::Session() const
{
	Windows::Media::Import::PhotoImportSession value = nullptr;
	check(shim()->get_Session(put(value)));
	return value;
}

template <typename T> bool impl_IPhotoImportDeleteImportedItemsFromSourceResult<T>::HasSucceeded() const
{
	bool value = {};
	check(shim()->get_HasSucceeded(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportItem> impl_IPhotoImportDeleteImportedItemsFromSourceResult<T>::DeletedItems() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportItem> value;
	check(shim()->get_DeletedItems(put(value)));
	return value;
}

template <typename T> unsigned impl_IPhotoImportDeleteImportedItemsFromSourceResult<T>::PhotosCount() const
{
	unsigned value = {};
	check(shim()->get_PhotosCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportDeleteImportedItemsFromSourceResult<T>::PhotosSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_PhotosSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportDeleteImportedItemsFromSourceResult<T>::VideosCount() const
{
	unsigned value = {};
	check(shim()->get_VideosCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportDeleteImportedItemsFromSourceResult<T>::VideosSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_VideosSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportDeleteImportedItemsFromSourceResult<T>::SidecarsCount() const
{
	unsigned value = {};
	check(shim()->get_SidecarsCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportDeleteImportedItemsFromSourceResult<T>::SidecarsSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_SidecarsSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportDeleteImportedItemsFromSourceResult<T>::SiblingsCount() const
{
	unsigned value = {};
	check(shim()->get_SiblingsCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportDeleteImportedItemsFromSourceResult<T>::SiblingsSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_SiblingsSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IPhotoImportDeleteImportedItemsFromSourceResult<T>::TotalCount() const
{
	unsigned value = {};
	check(shim()->get_TotalCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportDeleteImportedItemsFromSourceResult<T>::TotalSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_TotalSizeInBytes(&value));
	return value;
}

template <typename T> String impl_IPhotoImportSidecar<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportSidecar<T>::SizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_SizeInBytes(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPhotoImportSidecar<T>::Date() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Date(&value));
	return value;
}

template <typename T> String impl_IPhotoImportVideoSegment<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> unsigned long long impl_IPhotoImportVideoSegment<T>::SizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_SizeInBytes(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPhotoImportVideoSegment<T>::Date() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Date(&value));
	return value;
}

template <typename T> Windows::Media::Import::PhotoImportSidecar impl_IPhotoImportVideoSegment<T>::Sibling() const
{
	Windows::Media::Import::PhotoImportSidecar value = nullptr;
	check(shim()->get_Sibling(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportSidecar> impl_IPhotoImportVideoSegment<T>::Sidecars() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportSidecar> value;
	check(shim()->get_Sidecars(put(value)));
	return value;
}

template <typename T> Windows::Media::Import::PhotoImportItem impl_IPhotoImportItemImportedEventArgs<T>::ImportedItem() const
{
	Windows::Media::Import::PhotoImportItem value = nullptr;
	check(shim()->get_ImportedItem(put(value)));
	return value;
}

template <typename T> bool impl_IPhotoImportSelectionChangedEventArgs<T>::IsSelectionEmpty() const
{
	bool value = {};
	check(shim()->get_IsSelectionEmpty(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace MediaProperties {

template <typename T> void impl_IMediaRatio<T>::Numerator(unsigned const value) const
{
	check(shim()->put_Numerator(value));
}

template <typename T> unsigned impl_IMediaRatio<T>::Numerator() const
{
	unsigned value = {};
	check(shim()->get_Numerator(&value));
	return value;
}

template <typename T> void impl_IMediaRatio<T>::Denominator(unsigned const value) const
{
	check(shim()->put_Denominator(value));
}

template <typename T> unsigned impl_IMediaRatio<T>::Denominator() const
{
	unsigned value = {};
	check(shim()->get_Denominator(&value));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaPropertySet impl_IMediaEncodingProperties<T>::Properties() const
{
	Windows::Media::MediaProperties::MediaPropertySet value = nullptr;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingProperties<T>::Type() const
{
	String value;
	check(shim()->get_Type(put(value)));
	return value;
}

template <typename T> void impl_IMediaEncodingProperties<T>::Subtype(StringReference const & value) const
{
	check(shim()->put_Subtype(get(value)));
}

template <typename T> String impl_IMediaEncodingProperties<T>::Subtype() const
{
	String value;
	check(shim()->get_Subtype(put(value)));
	return value;
}

template <typename T> void impl_IAudioEncodingProperties<T>::Bitrate(unsigned const value) const
{
	check(shim()->put_Bitrate(value));
}

template <typename T> unsigned impl_IAudioEncodingProperties<T>::Bitrate() const
{
	unsigned value = {};
	check(shim()->get_Bitrate(&value));
	return value;
}

template <typename T> void impl_IAudioEncodingProperties<T>::ChannelCount(unsigned const value) const
{
	check(shim()->put_ChannelCount(value));
}

template <typename T> unsigned impl_IAudioEncodingProperties<T>::ChannelCount() const
{
	unsigned value = {};
	check(shim()->get_ChannelCount(&value));
	return value;
}

template <typename T> void impl_IAudioEncodingProperties<T>::SampleRate(unsigned const value) const
{
	check(shim()->put_SampleRate(value));
}

template <typename T> unsigned impl_IAudioEncodingProperties<T>::SampleRate() const
{
	unsigned value = {};
	check(shim()->get_SampleRate(&value));
	return value;
}

template <typename T> void impl_IAudioEncodingProperties<T>::BitsPerSample(unsigned const value) const
{
	check(shim()->put_BitsPerSample(value));
}

template <typename T> unsigned impl_IAudioEncodingProperties<T>::BitsPerSample() const
{
	unsigned value = {};
	check(shim()->get_BitsPerSample(&value));
	return value;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IAudioEncodingPropertiesStatics<T>::CreateAac(unsigned const sampleRate, unsigned const channelCount, unsigned const bitrate) const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value = nullptr;
	check(shim()->abi_CreateAac(sampleRate, channelCount, bitrate, put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IAudioEncodingPropertiesStatics<T>::CreateAacAdts(unsigned const sampleRate, unsigned const channelCount, unsigned const bitrate) const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value = nullptr;
	check(shim()->abi_CreateAacAdts(sampleRate, channelCount, bitrate, put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IAudioEncodingPropertiesStatics<T>::CreateMp3(unsigned const sampleRate, unsigned const channelCount, unsigned const bitrate) const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value = nullptr;
	check(shim()->abi_CreateMp3(sampleRate, channelCount, bitrate, put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IAudioEncodingPropertiesStatics<T>::CreatePcm(unsigned const sampleRate, unsigned const channelCount, unsigned const bitsPerSample) const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value = nullptr;
	check(shim()->abi_CreatePcm(sampleRate, channelCount, bitsPerSample, put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IAudioEncodingPropertiesStatics<T>::CreateWma(unsigned const sampleRate, unsigned const channelCount, unsigned const bitrate) const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value = nullptr;
	check(shim()->abi_CreateWma(sampleRate, channelCount, bitrate, put(value)));
	return value;
}

template <typename T> void impl_IVideoEncodingProperties<T>::Bitrate(unsigned const value) const
{
	check(shim()->put_Bitrate(value));
}

template <typename T> unsigned impl_IVideoEncodingProperties<T>::Bitrate() const
{
	unsigned value = {};
	check(shim()->get_Bitrate(&value));
	return value;
}

template <typename T> void impl_IVideoEncodingProperties<T>::Width(unsigned const value) const
{
	check(shim()->put_Width(value));
}

template <typename T> unsigned impl_IVideoEncodingProperties<T>::Width() const
{
	unsigned value = {};
	check(shim()->get_Width(&value));
	return value;
}

template <typename T> void impl_IVideoEncodingProperties<T>::Height(unsigned const value) const
{
	check(shim()->put_Height(value));
}

template <typename T> unsigned impl_IVideoEncodingProperties<T>::Height() const
{
	unsigned value = {};
	check(shim()->get_Height(&value));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaRatio impl_IVideoEncodingProperties<T>::FrameRate() const
{
	Windows::Media::MediaProperties::MediaRatio value = nullptr;
	check(shim()->get_FrameRate(put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaRatio impl_IVideoEncodingProperties<T>::PixelAspectRatio() const
{
	Windows::Media::MediaProperties::MediaRatio value = nullptr;
	check(shim()->get_PixelAspectRatio(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Aac() const
{
	String value;
	check(shim()->get_Aac(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::AacAdts() const
{
	String value;
	check(shim()->get_AacAdts(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Ac3() const
{
	String value;
	check(shim()->get_Ac3(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::AmrNb() const
{
	String value;
	check(shim()->get_AmrNb(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::AmrWb() const
{
	String value;
	check(shim()->get_AmrWb(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Argb32() const
{
	String value;
	check(shim()->get_Argb32(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Asf() const
{
	String value;
	check(shim()->get_Asf(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Avi() const
{
	String value;
	check(shim()->get_Avi(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Bgra8() const
{
	String value;
	check(shim()->get_Bgra8(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Bmp() const
{
	String value;
	check(shim()->get_Bmp(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Eac3() const
{
	String value;
	check(shim()->get_Eac3(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Float() const
{
	String value;
	check(shim()->get_Float(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Gif() const
{
	String value;
	check(shim()->get_Gif(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::H263() const
{
	String value;
	check(shim()->get_H263(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::H264() const
{
	String value;
	check(shim()->get_H264(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::H264Es() const
{
	String value;
	check(shim()->get_H264Es(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Hevc() const
{
	String value;
	check(shim()->get_Hevc(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::HevcEs() const
{
	String value;
	check(shim()->get_HevcEs(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Iyuv() const
{
	String value;
	check(shim()->get_Iyuv(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Jpeg() const
{
	String value;
	check(shim()->get_Jpeg(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::JpegXr() const
{
	String value;
	check(shim()->get_JpegXr(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Mjpg() const
{
	String value;
	check(shim()->get_Mjpg(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Mpeg() const
{
	String value;
	check(shim()->get_Mpeg(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Mpeg1() const
{
	String value;
	check(shim()->get_Mpeg1(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Mpeg2() const
{
	String value;
	check(shim()->get_Mpeg2(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Mp3() const
{
	String value;
	check(shim()->get_Mp3(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Mpeg4() const
{
	String value;
	check(shim()->get_Mpeg4(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Nv12() const
{
	String value;
	check(shim()->get_Nv12(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Pcm() const
{
	String value;
	check(shim()->get_Pcm(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Png() const
{
	String value;
	check(shim()->get_Png(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Rgb24() const
{
	String value;
	check(shim()->get_Rgb24(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Rgb32() const
{
	String value;
	check(shim()->get_Rgb32(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Tiff() const
{
	String value;
	check(shim()->get_Tiff(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Wave() const
{
	String value;
	check(shim()->get_Wave(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Wma8() const
{
	String value;
	check(shim()->get_Wma8(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Wma9() const
{
	String value;
	check(shim()->get_Wma9(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Wmv3() const
{
	String value;
	check(shim()->get_Wmv3(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Wvc1() const
{
	String value;
	check(shim()->get_Wvc1(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Yuy2() const
{
	String value;
	check(shim()->get_Yuy2(put(value)));
	return value;
}

template <typename T> String impl_IMediaEncodingSubtypesStatics<T>::Yv12() const
{
	String value;
	check(shim()->get_Yv12(put(value)));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::ConstrainedBaseline() const
{
	int value = {};
	check(shim()->get_ConstrainedBaseline(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::Baseline() const
{
	int value = {};
	check(shim()->get_Baseline(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::Extended() const
{
	int value = {};
	check(shim()->get_Extended(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::Main() const
{
	int value = {};
	check(shim()->get_Main(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::High() const
{
	int value = {};
	check(shim()->get_High(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::High10() const
{
	int value = {};
	check(shim()->get_High10(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::High422() const
{
	int value = {};
	check(shim()->get_High422(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::High444() const
{
	int value = {};
	check(shim()->get_High444(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::StereoHigh() const
{
	int value = {};
	check(shim()->get_StereoHigh(&value));
	return value;
}

template <typename T> int impl_IH264ProfileIdsStatics<T>::MultiviewHigh() const
{
	int value = {};
	check(shim()->get_MultiviewHigh(&value));
	return value;
}

template <typename T> int impl_IMpeg2ProfileIdsStatics<T>::Simple() const
{
	int value = {};
	check(shim()->get_Simple(&value));
	return value;
}

template <typename T> int impl_IMpeg2ProfileIdsStatics<T>::Main() const
{
	int value = {};
	check(shim()->get_Main(&value));
	return value;
}

template <typename T> int impl_IMpeg2ProfileIdsStatics<T>::SignalNoiseRatioScalable() const
{
	int value = {};
	check(shim()->get_SignalNoiseRatioScalable(&value));
	return value;
}

template <typename T> int impl_IMpeg2ProfileIdsStatics<T>::SpatiallyScalable() const
{
	int value = {};
	check(shim()->get_SpatiallyScalable(&value));
	return value;
}

template <typename T> int impl_IMpeg2ProfileIdsStatics<T>::High() const
{
	int value = {};
	check(shim()->get_High(&value));
	return value;
}

template <typename T> void impl_IVideoEncodingProperties2<T>::ProfileId(int const value) const
{
	check(shim()->put_ProfileId(value));
}

template <typename T> int impl_IVideoEncodingProperties2<T>::ProfileId() const
{
	int value = {};
	check(shim()->get_ProfileId(&value));
	return value;
}

template <typename T> Windows::Media::MediaProperties::VideoEncodingProperties impl_IVideoEncodingPropertiesStatics<T>::CreateH264() const
{
	Windows::Media::MediaProperties::VideoEncodingProperties value = nullptr;
	check(shim()->abi_CreateH264(put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::VideoEncodingProperties impl_IVideoEncodingPropertiesStatics<T>::CreateMpeg2() const
{
	Windows::Media::MediaProperties::VideoEncodingProperties value = nullptr;
	check(shim()->abi_CreateMpeg2(put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::VideoEncodingProperties impl_IVideoEncodingPropertiesStatics<T>::CreateUncompressed(StringReference const & subtype, unsigned const width, unsigned const height) const
{
	Windows::Media::MediaProperties::VideoEncodingProperties value = nullptr;
	check(shim()->abi_CreateUncompressed(get(subtype), width, height, put(value)));
	return value;
}

template <typename T> void impl_IImageEncodingProperties<T>::Width(unsigned const value) const
{
	check(shim()->put_Width(value));
}

template <typename T> unsigned impl_IImageEncodingProperties<T>::Width() const
{
	unsigned value = {};
	check(shim()->get_Width(&value));
	return value;
}

template <typename T> void impl_IImageEncodingProperties<T>::Height(unsigned const value) const
{
	check(shim()->put_Height(value));
}

template <typename T> unsigned impl_IImageEncodingProperties<T>::Height() const
{
	unsigned value = {};
	check(shim()->get_Height(&value));
	return value;
}

template <typename T> Windows::Media::MediaProperties::ImageEncodingProperties impl_IImageEncodingPropertiesStatics<T>::CreateJpeg() const
{
	Windows::Media::MediaProperties::ImageEncodingProperties value = nullptr;
	check(shim()->abi_CreateJpeg(put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::ImageEncodingProperties impl_IImageEncodingPropertiesStatics<T>::CreatePng() const
{
	Windows::Media::MediaProperties::ImageEncodingProperties value = nullptr;
	check(shim()->abi_CreatePng(put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::ImageEncodingProperties impl_IImageEncodingPropertiesStatics<T>::CreateJpegXR() const
{
	Windows::Media::MediaProperties::ImageEncodingProperties value = nullptr;
	check(shim()->abi_CreateJpegXR(put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::ImageEncodingProperties impl_IImageEncodingPropertiesStatics2<T>::CreateUncompressed(Windows::Media::MediaProperties::MediaPixelFormat const format) const
{
	Windows::Media::MediaProperties::ImageEncodingProperties value = nullptr;
	check(shim()->abi_CreateUncompressed(format, put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::ImageEncodingProperties impl_IImageEncodingPropertiesStatics2<T>::CreateBmp() const
{
	Windows::Media::MediaProperties::ImageEncodingProperties value = nullptr;
	check(shim()->abi_CreateBmp(put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IMediaEncodingProfileStatics<T>::CreateM4a(Windows::Media::MediaProperties::AudioEncodingQuality const quality) const
{
	Windows::Media::MediaProperties::MediaEncodingProfile value = nullptr;
	check(shim()->abi_CreateM4a(quality, put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IMediaEncodingProfileStatics<T>::CreateMp3(Windows::Media::MediaProperties::AudioEncodingQuality const quality) const
{
	Windows::Media::MediaProperties::MediaEncodingProfile value = nullptr;
	check(shim()->abi_CreateMp3(quality, put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IMediaEncodingProfileStatics<T>::CreateWma(Windows::Media::MediaProperties::AudioEncodingQuality const quality) const
{
	Windows::Media::MediaProperties::MediaEncodingProfile value = nullptr;
	check(shim()->abi_CreateWma(quality, put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IMediaEncodingProfileStatics<T>::CreateMp4(Windows::Media::MediaProperties::VideoEncodingQuality const quality) const
{
	Windows::Media::MediaProperties::MediaEncodingProfile value = nullptr;
	check(shim()->abi_CreateMp4(quality, put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IMediaEncodingProfileStatics<T>::CreateWmv(Windows::Media::MediaProperties::VideoEncodingQuality const quality) const
{
	Windows::Media::MediaProperties::MediaEncodingProfile value = nullptr;
	check(shim()->abi_CreateWmv(quality, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> impl_IMediaEncodingProfileStatics<T>::CreateFromFileAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> operation;
	check(shim()->abi_CreateFromFileAsync(get(file), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> impl_IMediaEncodingProfileStatics<T>::CreateFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> operation;
	check(shim()->abi_CreateFromStreamAsync(get(stream), put(operation)));
	return operation;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IMediaEncodingProfileStatics2<T>::CreateWav(Windows::Media::MediaProperties::AudioEncodingQuality const quality) const
{
	Windows::Media::MediaProperties::MediaEncodingProfile value = nullptr;
	check(shim()->abi_CreateWav(quality, put(value)));
	return value;
}

template <typename T> Windows::Media::MediaProperties::MediaEncodingProfile impl_IMediaEncodingProfileStatics2<T>::CreateAvi(Windows::Media::MediaProperties::VideoEncodingQuality const quality) const
{
	Windows::Media::MediaProperties::MediaEncodingProfile value = nullptr;
	check(shim()->abi_CreateAvi(quality, put(value)));
	return value;
}

template <typename T> void impl_IMediaEncodingProfile<T>::Audio(Windows::Media::MediaProperties::AudioEncodingProperties const & value) const
{
	check(shim()->put_Audio(get(value)));
}

template <typename T> Windows::Media::MediaProperties::AudioEncodingProperties impl_IMediaEncodingProfile<T>::Audio() const
{
	Windows::Media::MediaProperties::AudioEncodingProperties value = nullptr;
	check(shim()->get_Audio(put(value)));
	return value;
}

template <typename T> void impl_IMediaEncodingProfile<T>::Video(Windows::Media::MediaProperties::VideoEncodingProperties const & value) const
{
	check(shim()->put_Video(get(value)));
}

template <typename T> Windows::Media::MediaProperties::VideoEncodingProperties impl_IMediaEncodingProfile<T>::Video() const
{
	Windows::Media::MediaProperties::VideoEncodingProperties value = nullptr;
	check(shim()->get_Video(put(value)));
	return value;
}

template <typename T> void impl_IMediaEncodingProfile<T>::Container(Windows::Media::MediaProperties::ContainerEncodingProperties const & value) const
{
	check(shim()->put_Container(get(value)));
}

template <typename T> Windows::Media::MediaProperties::ContainerEncodingProperties impl_IMediaEncodingProfile<T>::Container() const
{
	Windows::Media::MediaProperties::ContainerEncodingProperties value = nullptr;
	check(shim()->get_Container(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Ocr {

template <typename T> Windows::Foundation::Rect impl_IOcrWord<T>::BoundingRect() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_BoundingRect(&value));
	return value;
}

template <typename T> String impl_IOcrWord<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Ocr::OcrWord> impl_IOcrLine<T>::Words() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Ocr::OcrWord> value;
	check(shim()->get_Words(put(value)));
	return value;
}

template <typename T> String impl_IOcrLine<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Ocr::OcrLine> impl_IOcrResult<T>::Lines() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Ocr::OcrLine> value;
	check(shim()->get_Lines(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IOcrResult<T>::TextAngle() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_TextAngle(put(value)));
	return value;
}

template <typename T> String impl_IOcrResult<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Ocr::OcrResult> impl_IOcrEngine<T>::RecognizeAsync(Windows::Graphics::Imaging::SoftwareBitmap const & bitmap) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Ocr::OcrResult> result;
	check(shim()->abi_RecognizeAsync(get(bitmap), put(result)));
	return result;
}

template <typename T> Windows::Globalization::Language impl_IOcrEngine<T>::RecognizerLanguage() const
{
	Windows::Globalization::Language value = nullptr;
	check(shim()->get_RecognizerLanguage(put(value)));
	return value;
}

template <typename T> unsigned impl_IOcrEngineStatics<T>::MaxImageDimension() const
{
	unsigned value = {};
	check(shim()->get_MaxImageDimension(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> impl_IOcrEngineStatics<T>::AvailableRecognizerLanguages() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> value;
	check(shim()->get_AvailableRecognizerLanguages(put(value)));
	return value;
}

template <typename T> bool impl_IOcrEngineStatics<T>::IsLanguageSupported(Windows::Globalization::Language const & language) const
{
	bool result = {};
	check(shim()->abi_IsLanguageSupported(get(language), put(result)));
	return result;
}

template <typename T> Windows::Media::Ocr::OcrEngine impl_IOcrEngineStatics<T>::TryCreateFromLanguage(Windows::Globalization::Language const & language) const
{
	Windows::Media::Ocr::OcrEngine result = nullptr;
	check(shim()->abi_TryCreateFromLanguage(get(language), put(result)));
	return result;
}

template <typename T> Windows::Media::Ocr::OcrEngine impl_IOcrEngineStatics<T>::TryCreateFromUserProfileLanguages() const
{
	Windows::Media::Ocr::OcrEngine result = nullptr;
	check(shim()->abi_TryCreateFromUserProfileLanguages(put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace PlayTo {

template <typename T> Windows::Storage::Streams::IRandomAccessStreamWithContentType impl_ISourceChangeRequestedEventArgs<T>::Stream() const
{
	Windows::Storage::Streams::IRandomAccessStreamWithContentType value;
	check(shim()->get_Stream(put(value)));
	return value;
}

template <typename T> String impl_ISourceChangeRequestedEventArgs<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> String impl_ISourceChangeRequestedEventArgs<T>::Author() const
{
	String value;
	check(shim()->get_Author(put(value)));
	return value;
}

template <typename T> String impl_ISourceChangeRequestedEventArgs<T>::Album() const
{
	String value;
	check(shim()->get_Album(put(value)));
	return value;
}

template <typename T> String impl_ISourceChangeRequestedEventArgs<T>::Genre() const
{
	String value;
	check(shim()->get_Genre(put(value)));
	return value;
}

template <typename T> String impl_ISourceChangeRequestedEventArgs<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_ISourceChangeRequestedEventArgs<T>::Date() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_Date(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamReference impl_ISourceChangeRequestedEventArgs<T>::Thumbnail() const
{
	Windows::Storage::Streams::IRandomAccessStreamReference value;
	check(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_ISourceChangeRequestedEventArgs<T>::Rating() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_Rating(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_ISourceChangeRequestedEventArgs<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> double impl_IPlaybackRateChangeRequestedEventArgs<T>::Rate() const
{
	double value = {};
	check(shim()->get_Rate(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_ICurrentTimeChangeRequestedEventArgs<T>::Time() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Time(&value));
	return value;
}

template <typename T> bool impl_IMuteChangeRequestedEventArgs<T>::Mute() const
{
	bool value = {};
	check(shim()->get_Mute(put(value)));
	return value;
}

template <typename T> double impl_IVolumeChangeRequestedEventArgs<T>::Volume() const
{
	double value = {};
	check(shim()->get_Volume(&value));
	return value;
}

template <typename T> long long impl_IPlayToReceiver<T>::PlayRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_PlayRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPlayToReceiver<T>::PlayRequested(F handler) const
{
	return PlayRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::PlayRequested(long long const token) const
{
	check(shim()->remove_PlayRequested(token));
}

template <typename T> long long impl_IPlayToReceiver<T>::PauseRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_PauseRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPlayToReceiver<T>::PauseRequested(F handler) const
{
	return PauseRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::PauseRequested(long long const token) const
{
	check(shim()->remove_PauseRequested(token));
}

template <typename T> long long impl_IPlayToReceiver<T>::SourceChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::SourceChangeRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SourceChangeRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPlayToReceiver<T>::SourceChangeRequested(F handler) const
{
	return SourceChangeRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::SourceChangeRequestedEventArgs>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::SourceChangeRequested(long long const token) const
{
	check(shim()->remove_SourceChangeRequested(token));
}

template <typename T> long long impl_IPlayToReceiver<T>::PlaybackRateChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::PlaybackRateChangeRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_PlaybackRateChangeRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPlayToReceiver<T>::PlaybackRateChangeRequested(F handler) const
{
	return PlaybackRateChangeRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::PlaybackRateChangeRequestedEventArgs>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::PlaybackRateChangeRequested(long long const token) const
{
	check(shim()->remove_PlaybackRateChangeRequested(token));
}

template <typename T> long long impl_IPlayToReceiver<T>::CurrentTimeChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::CurrentTimeChangeRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_CurrentTimeChangeRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPlayToReceiver<T>::CurrentTimeChangeRequested(F handler) const
{
	return CurrentTimeChangeRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::CurrentTimeChangeRequestedEventArgs>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::CurrentTimeChangeRequested(long long const token) const
{
	check(shim()->remove_CurrentTimeChangeRequested(token));
}

template <typename T> long long impl_IPlayToReceiver<T>::MuteChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::MuteChangeRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_MuteChangeRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPlayToReceiver<T>::MuteChangeRequested(F handler) const
{
	return MuteChangeRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::MuteChangeRequestedEventArgs>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::MuteChangeRequested(long long const token) const
{
	check(shim()->remove_MuteChangeRequested(token));
}

template <typename T> long long impl_IPlayToReceiver<T>::VolumeChangeRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::VolumeChangeRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_VolumeChangeRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPlayToReceiver<T>::VolumeChangeRequested(F handler) const
{
	return VolumeChangeRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, Windows::Media::PlayTo::VolumeChangeRequestedEventArgs>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::VolumeChangeRequested(long long const token) const
{
	check(shim()->remove_VolumeChangeRequested(token));
}

template <typename T> long long impl_IPlayToReceiver<T>::TimeUpdateRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_TimeUpdateRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPlayToReceiver<T>::TimeUpdateRequested(F handler) const
{
	return TimeUpdateRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::TimeUpdateRequested(long long const token) const
{
	check(shim()->remove_TimeUpdateRequested(token));
}

template <typename T> long long impl_IPlayToReceiver<T>::StopRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_StopRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPlayToReceiver<T>::StopRequested(F handler) const
{
	return StopRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToReceiver, IInspectable>(handler));
}

template <typename T> void impl_IPlayToReceiver<T>::StopRequested(long long const token) const
{
	check(shim()->remove_StopRequested(token));
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyVolumeChange(double const volume, bool const mute) const
{
	check(shim()->abi_NotifyVolumeChange(volume, mute));
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyRateChange(double const rate) const
{
	check(shim()->abi_NotifyRateChange(rate));
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyLoadedMetadata() const
{
	check(shim()->abi_NotifyLoadedMetadata());
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyTimeUpdate(Windows::Foundation::TimeSpan const & currentTime) const
{
	check(shim()->abi_NotifyTimeUpdate(currentTime));
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyDurationChange(Windows::Foundation::TimeSpan const & duration) const
{
	check(shim()->abi_NotifyDurationChange(duration));
}

template <typename T> void impl_IPlayToReceiver<T>::NotifySeeking() const
{
	check(shim()->abi_NotifySeeking());
}

template <typename T> void impl_IPlayToReceiver<T>::NotifySeeked() const
{
	check(shim()->abi_NotifySeeked());
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyPaused() const
{
	check(shim()->abi_NotifyPaused());
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyPlaying() const
{
	check(shim()->abi_NotifyPlaying());
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyEnded() const
{
	check(shim()->abi_NotifyEnded());
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyError() const
{
	check(shim()->abi_NotifyError());
}

template <typename T> void impl_IPlayToReceiver<T>::NotifyStopped() const
{
	check(shim()->abi_NotifyStopped());
}

template <typename T> String impl_IPlayToReceiver<T>::FriendlyName() const
{
	String value;
	check(shim()->get_FriendlyName(put(value)));
	return value;
}

template <typename T> void impl_IPlayToReceiver<T>::FriendlyName(StringReference const & value) const
{
	check(shim()->put_FriendlyName(get(value)));
}

template <typename T> void impl_IPlayToReceiver<T>::SupportsImage(bool const value) const
{
	check(shim()->put_SupportsImage(value));
}

template <typename T> bool impl_IPlayToReceiver<T>::SupportsImage() const
{
	bool value = {};
	check(shim()->get_SupportsImage(put(value)));
	return value;
}

template <typename T> void impl_IPlayToReceiver<T>::SupportsAudio(bool const value) const
{
	check(shim()->put_SupportsAudio(value));
}

template <typename T> bool impl_IPlayToReceiver<T>::SupportsAudio() const
{
	bool value = {};
	check(shim()->get_SupportsAudio(put(value)));
	return value;
}

template <typename T> void impl_IPlayToReceiver<T>::SupportsVideo(bool const value) const
{
	check(shim()->put_SupportsVideo(value));
}

template <typename T> bool impl_IPlayToReceiver<T>::SupportsVideo() const
{
	bool value = {};
	check(shim()->get_SupportsVideo(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IPlayToReceiver<T>::Properties() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPlayToReceiver<T>::StartAsync() const
{
	Windows::Foundation::IAsyncAction action;
	check(shim()->abi_StartAsync(put(action)));
	return action;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPlayToReceiver<T>::StopAsync() const
{
	Windows::Foundation::IAsyncAction action;
	check(shim()->abi_StopAsync(put(action)));
	return action;
}

template <typename T> Windows::Media::PlayTo::PlayToConnection impl_IPlayToSource<T>::Connection() const
{
	Windows::Media::PlayTo::PlayToConnection value = nullptr;
	check(shim()->get_Connection(put(value)));
	return value;
}

template <typename T> Windows::Media::PlayTo::PlayToSource impl_IPlayToSource<T>::Next() const
{
	Windows::Media::PlayTo::PlayToSource value = nullptr;
	check(shim()->get_Next(put(value)));
	return value;
}

template <typename T> void impl_IPlayToSource<T>::Next(Windows::Media::PlayTo::PlayToSource const & value) const
{
	check(shim()->put_Next(get(value)));
}

template <typename T> void impl_IPlayToSource<T>::PlayNext() const
{
	check(shim()->abi_PlayNext());
}

template <typename T> Windows::Foundation::Uri impl_IPlayToSourceWithPreferredSourceUri<T>::PreferredSourceUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_PreferredSourceUri(put(value)));
	return value;
}

template <typename T> void impl_IPlayToSourceWithPreferredSourceUri<T>::PreferredSourceUri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_PreferredSourceUri(get(value)));
}

template <typename T> Windows::Media::PlayTo::PlayToConnectionState impl_IPlayToConnectionStateChangedEventArgs<T>::PreviousState() const
{
	Windows::Media::PlayTo::PlayToConnectionState value = {};
	check(shim()->get_PreviousState(&value));
	return value;
}

template <typename T> Windows::Media::PlayTo::PlayToConnectionState impl_IPlayToConnectionStateChangedEventArgs<T>::CurrentState() const
{
	Windows::Media::PlayTo::PlayToConnectionState value = {};
	check(shim()->get_CurrentState(&value));
	return value;
}

template <typename T> Windows::Media::PlayTo::PlayToSource impl_IPlayToConnectionTransferredEventArgs<T>::PreviousSource() const
{
	Windows::Media::PlayTo::PlayToSource value = nullptr;
	check(shim()->get_PreviousSource(put(value)));
	return value;
}

template <typename T> Windows::Media::PlayTo::PlayToSource impl_IPlayToConnectionTransferredEventArgs<T>::CurrentSource() const
{
	Windows::Media::PlayTo::PlayToSource value = nullptr;
	check(shim()->get_CurrentSource(put(value)));
	return value;
}

template <typename T> Windows::Media::PlayTo::PlayToConnectionError impl_IPlayToConnectionErrorEventArgs<T>::Code() const
{
	Windows::Media::PlayTo::PlayToConnectionError value = {};
	check(shim()->get_Code(&value));
	return value;
}

template <typename T> String impl_IPlayToConnectionErrorEventArgs<T>::Message() const
{
	String value;
	check(shim()->get_Message(put(value)));
	return value;
}

template <typename T> Windows::Media::PlayTo::PlayToConnectionState impl_IPlayToConnection<T>::State() const
{
	Windows::Media::PlayTo::PlayToConnectionState value = {};
	check(shim()->get_State(&value));
	return value;
}

template <typename T> long long impl_IPlayToConnection<T>::StateChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionStateChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_StateChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPlayToConnection<T>::StateChanged(F handler) const
{
	return StateChanged(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionStateChangedEventArgs>(handler));
}

template <typename T> void impl_IPlayToConnection<T>::StateChanged(long long const token) const
{
	check(shim()->remove_StateChanged(token));
}

template <typename T> long long impl_IPlayToConnection<T>::Transferred(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionTransferredEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Transferred(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPlayToConnection<T>::Transferred(F handler) const
{
	return Transferred(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionTransferredEventArgs>(handler));
}

template <typename T> void impl_IPlayToConnection<T>::Transferred(long long const token) const
{
	check(shim()->remove_Transferred(token));
}

template <typename T> long long impl_IPlayToConnection<T>::Error(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionErrorEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Error(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPlayToConnection<T>::Error(F handler) const
{
	return Error(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToConnection, Windows::Media::PlayTo::PlayToConnectionErrorEventArgs>(handler));
}

template <typename T> void impl_IPlayToConnection<T>::Error(long long const token) const
{
	check(shim()->remove_Error(token));
}

template <typename T> String impl_IPlayToSourceSelectedEventArgs<T>::FriendlyName() const
{
	String value;
	check(shim()->get_FriendlyName(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamWithContentType impl_IPlayToSourceSelectedEventArgs<T>::Icon() const
{
	Windows::Storage::Streams::IRandomAccessStreamWithContentType value;
	check(shim()->get_Icon(put(value)));
	return value;
}

template <typename T> bool impl_IPlayToSourceSelectedEventArgs<T>::SupportsImage() const
{
	bool value = {};
	check(shim()->get_SupportsImage(put(value)));
	return value;
}

template <typename T> bool impl_IPlayToSourceSelectedEventArgs<T>::SupportsAudio() const
{
	bool value = {};
	check(shim()->get_SupportsAudio(put(value)));
	return value;
}

template <typename T> bool impl_IPlayToSourceSelectedEventArgs<T>::SupportsVideo() const
{
	bool value = {};
	check(shim()->get_SupportsVideo(put(value)));
	return value;
}

template <typename T> void impl_IPlayToSourceDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::Foundation::DateTime impl_IPlayToSourceRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Deadline(&value));
	return value;
}

template <typename T> void impl_IPlayToSourceRequest<T>::DisplayErrorString(StringReference const & errorString) const
{
	check(shim()->abi_DisplayErrorString(get(errorString)));
}

template <typename T> Windows::Media::PlayTo::PlayToSourceDeferral impl_IPlayToSourceRequest<T>::GetDeferral() const
{
	Windows::Media::PlayTo::PlayToSourceDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> void impl_IPlayToSourceRequest<T>::SetSource(Windows::Media::PlayTo::PlayToSource const & value) const
{
	check(shim()->abi_SetSource(get(value)));
}

template <typename T> Windows::Media::PlayTo::PlayToSourceRequest impl_IPlayToSourceRequestedEventArgs<T>::SourceRequest() const
{
	Windows::Media::PlayTo::PlayToSourceRequest value = nullptr;
	check(shim()->get_SourceRequest(put(value)));
	return value;
}

template <typename T> long long impl_IPlayToManager<T>::SourceRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToManager, Windows::Media::PlayTo::PlayToSourceRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SourceRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPlayToManager<T>::SourceRequested(F handler) const
{
	return SourceRequested(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToManager, Windows::Media::PlayTo::PlayToSourceRequestedEventArgs>(handler));
}

template <typename T> void impl_IPlayToManager<T>::SourceRequested(long long const token) const
{
	check(shim()->remove_SourceRequested(token));
}

template <typename T> long long impl_IPlayToManager<T>::SourceSelected(Windows::Foundation::ITypedEventHandler<Windows::Media::PlayTo::PlayToManager, Windows::Media::PlayTo::PlayToSourceSelectedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SourceSelected(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPlayToManager<T>::SourceSelected(F handler) const
{
	return SourceSelected(Windows::Foundation::TypedEventHandler<Windows::Media::PlayTo::PlayToManager, Windows::Media::PlayTo::PlayToSourceSelectedEventArgs>(handler));
}

template <typename T> void impl_IPlayToManager<T>::SourceSelected(long long const token) const
{
	check(shim()->remove_SourceSelected(token));
}

template <typename T> void impl_IPlayToManager<T>::DefaultSourceSelection(bool const value) const
{
	check(shim()->put_DefaultSourceSelection(value));
}

template <typename T> bool impl_IPlayToManager<T>::DefaultSourceSelection() const
{
	bool value = {};
	check(shim()->get_DefaultSourceSelection(put(value)));
	return value;
}

template <typename T> Windows::Media::PlayTo::PlayToManager impl_IPlayToManagerStatics<T>::GetForCurrentView() const
{
	Windows::Media::PlayTo::PlayToManager playToManager = nullptr;
	check(shim()->abi_GetForCurrentView(put(playToManager)));
	return playToManager;
}

template <typename T> void impl_IPlayToManagerStatics<T>::ShowPlayToUI() const
{
	check(shim()->abi_ShowPlayToUI());
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Playback {

template <typename T> Windows::Foundation::TimeSpan impl_IPlaybackMediaMarker<T>::Time() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Time(&value));
	return value;
}

template <typename T> String impl_IPlaybackMediaMarker<T>::MediaMarkerType() const
{
	String value;
	check(shim()->get_MediaMarkerType(put(value)));
	return value;
}

template <typename T> String impl_IPlaybackMediaMarker<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> Windows::Media::Playback::PlaybackMediaMarker impl_IPlaybackMediaMarkerFactory<T>::CreateFromTime(Windows::Foundation::TimeSpan const & value) const
{
	Windows::Media::Playback::PlaybackMediaMarker marker = nullptr;
	check(shim()->abi_CreateFromTime(value, put(marker)));
	return marker;
}

template <typename T> Windows::Media::Playback::PlaybackMediaMarker impl_IPlaybackMediaMarkerFactory<T>::Create(Windows::Foundation::TimeSpan const & value, StringReference const & mediaMarketType, StringReference const & text) const
{
	Windows::Media::Playback::PlaybackMediaMarker marker = nullptr;
	check(shim()->abi_Create(value, get(mediaMarketType), get(text), put(marker)));
	return marker;
}

template <typename T> unsigned impl_IPlaybackMediaMarkerSequence<T>::Size() const
{
	unsigned value = {};
	check(shim()->get_Size(&value));
	return value;
}

template <typename T> void impl_IPlaybackMediaMarkerSequence<T>::Insert(Windows::Media::Playback::PlaybackMediaMarker const & value) const
{
	check(shim()->abi_Insert(get(value)));
}

template <typename T> void impl_IPlaybackMediaMarkerSequence<T>::Clear() const
{
	check(shim()->abi_Clear());
}

template <typename T> Windows::Media::Playback::MediaPlayerError impl_IMediaPlayerFailedEventArgs<T>::Error() const
{
	Windows::Media::Playback::MediaPlayerError value = {};
	check(shim()->get_Error(&value));
	return value;
}

template <typename T> HRESULT impl_IMediaPlayerFailedEventArgs<T>::ExtendedErrorCode() const
{
	HRESULT value = {};
	check(shim()->get_ExtendedErrorCode(&value));
	return value;
}

template <typename T> String impl_IMediaPlayerFailedEventArgs<T>::ErrorMessage() const
{
	String value;
	check(shim()->get_ErrorMessage(put(value)));
	return value;
}

template <typename T> double impl_IMediaPlayerRateChangedEventArgs<T>::NewRate() const
{
	double value = {};
	check(shim()->get_NewRate(&value));
	return value;
}

template <typename T> Windows::Media::Playback::PlaybackMediaMarker impl_IPlaybackMediaMarkerReachedEventArgs<T>::PlaybackMediaMarker() const
{
	Windows::Media::Playback::PlaybackMediaMarker value = nullptr;
	check(shim()->get_PlaybackMediaMarker(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_IMediaPlayerDataReceivedEventArgs<T>::Data() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> bool impl_IMediaPlayer<T>::AutoPlay() const
{
	bool value = {};
	check(shim()->get_AutoPlay(put(value)));
	return value;
}

template <typename T> void impl_IMediaPlayer<T>::AutoPlay(bool const value) const
{
	check(shim()->put_AutoPlay(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaPlayer<T>::NaturalDuration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_NaturalDuration(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaPlayer<T>::Position() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> void impl_IMediaPlayer<T>::Position(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_Position(value));
}

template <typename T> double impl_IMediaPlayer<T>::BufferingProgress() const
{
	double value = {};
	check(shim()->get_BufferingProgress(&value));
	return value;
}

template <typename T> Windows::Media::Playback::MediaPlayerState impl_IMediaPlayer<T>::CurrentState() const
{
	Windows::Media::Playback::MediaPlayerState value = {};
	check(shim()->get_CurrentState(&value));
	return value;
}

template <typename T> bool impl_IMediaPlayer<T>::CanSeek() const
{
	bool value = {};
	check(shim()->get_CanSeek(put(value)));
	return value;
}

template <typename T> bool impl_IMediaPlayer<T>::CanPause() const
{
	bool value = {};
	check(shim()->get_CanPause(put(value)));
	return value;
}

template <typename T> bool impl_IMediaPlayer<T>::IsLoopingEnabled() const
{
	bool value = {};
	check(shim()->get_IsLoopingEnabled(put(value)));
	return value;
}

template <typename T> void impl_IMediaPlayer<T>::IsLoopingEnabled(bool const value) const
{
	check(shim()->put_IsLoopingEnabled(value));
}

template <typename T> bool impl_IMediaPlayer<T>::IsProtected() const
{
	bool value = {};
	check(shim()->get_IsProtected(put(value)));
	return value;
}

template <typename T> bool impl_IMediaPlayer<T>::IsMuted() const
{
	bool value = {};
	check(shim()->get_IsMuted(put(value)));
	return value;
}

template <typename T> void impl_IMediaPlayer<T>::IsMuted(bool const value) const
{
	check(shim()->put_IsMuted(value));
}

template <typename T> double impl_IMediaPlayer<T>::PlaybackRate() const
{
	double value = {};
	check(shim()->get_PlaybackRate(&value));
	return value;
}

template <typename T> void impl_IMediaPlayer<T>::PlaybackRate(double const value) const
{
	check(shim()->put_PlaybackRate(value));
}

template <typename T> double impl_IMediaPlayer<T>::Volume() const
{
	double value = {};
	check(shim()->get_Volume(&value));
	return value;
}

template <typename T> void impl_IMediaPlayer<T>::Volume(double const value) const
{
	check(shim()->put_Volume(value));
}

template <typename T> Windows::Media::Playback::PlaybackMediaMarkerSequence impl_IMediaPlayer<T>::PlaybackMediaMarkers() const
{
	Windows::Media::Playback::PlaybackMediaMarkerSequence value = nullptr;
	check(shim()->get_PlaybackMediaMarkers(put(value)));
	return value;
}

template <typename T> long long impl_IMediaPlayer<T>::MediaOpened(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlayer, IInspectable> const & value) const
{
	long long token = {};
	check(shim()->add_MediaOpened(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlayer<T>::MediaOpened(F value) const
{
	return MediaOpened(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlayer, IInspectable>(value));
}

template <typename T> void impl_IMediaPlayer<T>::MediaOpened(long long const token) const
{
	check(shim()->remove_MediaOpened(token));
}

template <typename T> long long impl_IMediaPlayer<T>::MediaEnded(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlayer, IInspectable> const & value) const
{
	long long token = {};
	check(shim()->add_MediaEnded(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlayer<T>::MediaEnded(F value) const
{
	return MediaEnded(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlayer, IInspectable>(value));
}

template <typename T> void impl_IMediaPlayer<T>::MediaEnded(long long const token) const
{
	check(shim()->remove_MediaEnded(token));
}

template <typename T> long long impl_IMediaPlayer<T>::MediaFailed(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlayer, Windows::Media::Playback::MediaPlayerFailedEventArgs> const & value) const
{
	long long token = {};
	check(shim()->add_MediaFailed(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlayer<T>::MediaFailed(F value) const
{
	return MediaFailed(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlayer, Windows::Media::Playback::MediaPlayerFailedEventArgs>(value));
}

template <typename T> void impl_IMediaPlayer<T>::MediaFailed(long long const token) const
{
	check(shim()->remove_MediaFailed(token));
}

template <typename T> long long impl_IMediaPlayer<T>::CurrentStateChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlayer, IInspectable> const & value) const
{
	long long token = {};
	check(shim()->add_CurrentStateChanged(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlayer<T>::CurrentStateChanged(F value) const
{
	return CurrentStateChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlayer, IInspectable>(value));
}

template <typename T> void impl_IMediaPlayer<T>::CurrentStateChanged(long long const token) const
{
	check(shim()->remove_CurrentStateChanged(token));
}

template <typename T> long long impl_IMediaPlayer<T>::PlaybackMediaMarkerReached(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlayer, Windows::Media::Playback::PlaybackMediaMarkerReachedEventArgs> const & value) const
{
	long long token = {};
	check(shim()->add_PlaybackMediaMarkerReached(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlayer<T>::PlaybackMediaMarkerReached(F value) const
{
	return PlaybackMediaMarkerReached(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlayer, Windows::Media::Playback::PlaybackMediaMarkerReachedEventArgs>(value));
}

template <typename T> void impl_IMediaPlayer<T>::PlaybackMediaMarkerReached(long long const token) const
{
	check(shim()->remove_PlaybackMediaMarkerReached(token));
}

template <typename T> long long impl_IMediaPlayer<T>::MediaPlayerRateChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlayer, Windows::Media::Playback::MediaPlayerRateChangedEventArgs> const & value) const
{
	long long token = {};
	check(shim()->add_MediaPlayerRateChanged(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlayer<T>::MediaPlayerRateChanged(F value) const
{
	return MediaPlayerRateChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlayer, Windows::Media::Playback::MediaPlayerRateChangedEventArgs>(value));
}

template <typename T> void impl_IMediaPlayer<T>::MediaPlayerRateChanged(long long const token) const
{
	check(shim()->remove_MediaPlayerRateChanged(token));
}

template <typename T> long long impl_IMediaPlayer<T>::VolumeChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlayer, IInspectable> const & value) const
{
	long long token = {};
	check(shim()->add_VolumeChanged(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlayer<T>::VolumeChanged(F value) const
{
	return VolumeChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlayer, IInspectable>(value));
}

template <typename T> void impl_IMediaPlayer<T>::VolumeChanged(long long const token) const
{
	check(shim()->remove_VolumeChanged(token));
}

template <typename T> long long impl_IMediaPlayer<T>::SeekCompleted(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlayer, IInspectable> const & value) const
{
	long long token = {};
	check(shim()->add_SeekCompleted(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlayer<T>::SeekCompleted(F value) const
{
	return SeekCompleted(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlayer, IInspectable>(value));
}

template <typename T> void impl_IMediaPlayer<T>::SeekCompleted(long long const token) const
{
	check(shim()->remove_SeekCompleted(token));
}

template <typename T> long long impl_IMediaPlayer<T>::BufferingStarted(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlayer, IInspectable> const & value) const
{
	long long token = {};
	check(shim()->add_BufferingStarted(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlayer<T>::BufferingStarted(F value) const
{
	return BufferingStarted(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlayer, IInspectable>(value));
}

template <typename T> void impl_IMediaPlayer<T>::BufferingStarted(long long const token) const
{
	check(shim()->remove_BufferingStarted(token));
}

template <typename T> long long impl_IMediaPlayer<T>::BufferingEnded(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlayer, IInspectable> const & value) const
{
	long long token = {};
	check(shim()->add_BufferingEnded(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlayer<T>::BufferingEnded(F value) const
{
	return BufferingEnded(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlayer, IInspectable>(value));
}

template <typename T> void impl_IMediaPlayer<T>::BufferingEnded(long long const token) const
{
	check(shim()->remove_BufferingEnded(token));
}

template <typename T> void impl_IMediaPlayer<T>::Play() const
{
	check(shim()->abi_Play());
}

template <typename T> void impl_IMediaPlayer<T>::Pause() const
{
	check(shim()->abi_Pause());
}

template <typename T> void impl_IMediaPlayer<T>::SetUriSource(Windows::Foundation::Uri const & value) const
{
	check(shim()->abi_SetUriSource(get(value)));
}

template <typename T> Windows::Media::SystemMediaTransportControls impl_IMediaPlayer2<T>::SystemMediaTransportControls() const
{
	Windows::Media::SystemMediaTransportControls value = nullptr;
	check(shim()->get_SystemMediaTransportControls(put(value)));
	return value;
}

template <typename T> Windows::Media::Playback::MediaPlayerAudioCategory impl_IMediaPlayer2<T>::AudioCategory() const
{
	Windows::Media::Playback::MediaPlayerAudioCategory value = {};
	check(shim()->get_AudioCategory(&value));
	return value;
}

template <typename T> void impl_IMediaPlayer2<T>::AudioCategory(Windows::Media::Playback::MediaPlayerAudioCategory const value) const
{
	check(shim()->put_AudioCategory(value));
}

template <typename T> Windows::Media::Playback::MediaPlayerAudioDeviceType impl_IMediaPlayer2<T>::AudioDeviceType() const
{
	Windows::Media::Playback::MediaPlayerAudioDeviceType value = {};
	check(shim()->get_AudioDeviceType(&value));
	return value;
}

template <typename T> void impl_IMediaPlayer2<T>::AudioDeviceType(Windows::Media::Playback::MediaPlayerAudioDeviceType const value) const
{
	check(shim()->put_AudioDeviceType(value));
}

template <typename T> Windows::Media::Protection::MediaProtectionManager impl_IMediaPlayerSource<T>::ProtectionManager() const
{
	Windows::Media::Protection::MediaProtectionManager value = nullptr;
	check(shim()->get_ProtectionManager(put(value)));
	return value;
}

template <typename T> void impl_IMediaPlayerSource<T>::ProtectionManager(Windows::Media::Protection::MediaProtectionManager const & value) const
{
	check(shim()->put_ProtectionManager(get(value)));
}

template <typename T> void impl_IMediaPlayerSource<T>::SetFileSource(Windows::Storage::IStorageFile const & file) const
{
	check(shim()->abi_SetFileSource(get(file)));
}

template <typename T> void impl_IMediaPlayerSource<T>::SetStreamSource(Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	check(shim()->abi_SetStreamSource(get(stream)));
}

template <typename T> void impl_IMediaPlayerSource<T>::SetMediaSource(Windows::Media::Core::IMediaSource const & source) const
{
	check(shim()->abi_SetMediaSource(get(source)));
}

template <typename T> Windows::Media::Playback::IMediaPlaybackSource impl_IMediaPlayerSource2<T>::Source() const
{
	Windows::Media::Playback::IMediaPlaybackSource value;
	check(shim()->get_Source(put(value)));
	return value;
}

template <typename T> void impl_IMediaPlayerSource2<T>::Source(Windows::Media::Playback::IMediaPlaybackSource const & value) const
{
	check(shim()->put_Source(get(value)));
}

template <typename T> void impl_IMediaPlayerEffects<T>::AddAudioEffect(StringReference const & activatableClassId, bool const effectOptional, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(shim()->abi_AddAudioEffect(get(activatableClassId), effectOptional, get(configuration)));
}

template <typename T> void impl_IMediaPlayerEffects<T>::RemoveAllEffects() const
{
	check(shim()->abi_RemoveAllEffects());
}

template <typename T> Windows::Media::Playback::MediaPlayer impl_IBackgroundMediaPlayerStatics<T>::Current() const
{
	Windows::Media::Playback::MediaPlayer player = nullptr;
	check(shim()->get_Current(put(player)));
	return player;
}

template <typename T> long long impl_IBackgroundMediaPlayerStatics<T>::MessageReceivedFromBackground(Windows::Foundation::IEventHandler<Windows::Media::Playback::MediaPlayerDataReceivedEventArgs> const & value) const
{
	long long token = {};
	check(shim()->add_MessageReceivedFromBackground(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBackgroundMediaPlayerStatics<T>::MessageReceivedFromBackground(F value) const
{
	return MessageReceivedFromBackground(Windows::Foundation::EventHandler<Windows::Media::Playback::MediaPlayerDataReceivedEventArgs>(value));
}

template <typename T> void impl_IBackgroundMediaPlayerStatics<T>::MessageReceivedFromBackground(long long const token) const
{
	check(shim()->remove_MessageReceivedFromBackground(token));
}

template <typename T> long long impl_IBackgroundMediaPlayerStatics<T>::MessageReceivedFromForeground(Windows::Foundation::IEventHandler<Windows::Media::Playback::MediaPlayerDataReceivedEventArgs> const & value) const
{
	long long token = {};
	check(shim()->add_MessageReceivedFromForeground(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBackgroundMediaPlayerStatics<T>::MessageReceivedFromForeground(F value) const
{
	return MessageReceivedFromForeground(Windows::Foundation::EventHandler<Windows::Media::Playback::MediaPlayerDataReceivedEventArgs>(value));
}

template <typename T> void impl_IBackgroundMediaPlayerStatics<T>::MessageReceivedFromForeground(long long const token) const
{
	check(shim()->remove_MessageReceivedFromForeground(token));
}

template <typename T> void impl_IBackgroundMediaPlayerStatics<T>::SendMessageToBackground(Windows::Foundation::Collections::ValueSet const & value) const
{
	check(shim()->abi_SendMessageToBackground(get(value)));
}

template <typename T> void impl_IBackgroundMediaPlayerStatics<T>::SendMessageToForeground(Windows::Foundation::Collections::ValueSet const & value) const
{
	check(shim()->abi_SendMessageToForeground(get(value)));
}

template <typename T> bool impl_IBackgroundMediaPlayerStatics<T>::IsMediaPlaying() const
{
	bool isMediaPlaying = {};
	check(shim()->abi_IsMediaPlaying(put(isMediaPlaying)));
	return isMediaPlaying;
}

template <typename T> void impl_IBackgroundMediaPlayerStatics<T>::Shutdown() const
{
	check(shim()->abi_Shutdown());
}

template <typename T> Windows::Media::Playback::MediaPlaybackItem impl_IMediaPlaybackItemFactory<T>::Create(Windows::Media::Core::MediaSource const & source) const
{
	Windows::Media::Playback::MediaPlaybackItem value = nullptr;
	check(shim()->abi_Create(get(source), put(value)));
	return value;
}

template <typename T> Windows::Media::Playback::MediaPlaybackItem impl_IMediaPlaybackItemStatics<T>::FindFromMediaSource(Windows::Media::Core::MediaSource const & source) const
{
	Windows::Media::Playback::MediaPlaybackItem value = nullptr;
	check(shim()->abi_FindFromMediaSource(get(source), put(value)));
	return value;
}

template <typename T> long long impl_IMediaPlaybackItem<T>::AudioTracksChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlaybackItem, Windows::Foundation::Collections::IVectorChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_AudioTracksChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlaybackItem<T>::AudioTracksChanged(F handler) const
{
	return AudioTracksChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlaybackItem, Windows::Foundation::Collections::IVectorChangedEventArgs>(handler));
}

template <typename T> void impl_IMediaPlaybackItem<T>::AudioTracksChanged(long long const token) const
{
	check(shim()->remove_AudioTracksChanged(token));
}

template <typename T> long long impl_IMediaPlaybackItem<T>::VideoTracksChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlaybackItem, Windows::Foundation::Collections::IVectorChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_VideoTracksChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlaybackItem<T>::VideoTracksChanged(F handler) const
{
	return VideoTracksChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlaybackItem, Windows::Foundation::Collections::IVectorChangedEventArgs>(handler));
}

template <typename T> void impl_IMediaPlaybackItem<T>::VideoTracksChanged(long long const token) const
{
	check(shim()->remove_VideoTracksChanged(token));
}

template <typename T> long long impl_IMediaPlaybackItem<T>::TimedMetadataTracksChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlaybackItem, Windows::Foundation::Collections::IVectorChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_TimedMetadataTracksChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlaybackItem<T>::TimedMetadataTracksChanged(F handler) const
{
	return TimedMetadataTracksChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlaybackItem, Windows::Foundation::Collections::IVectorChangedEventArgs>(handler));
}

template <typename T> void impl_IMediaPlaybackItem<T>::TimedMetadataTracksChanged(long long const token) const
{
	check(shim()->remove_TimedMetadataTracksChanged(token));
}

template <typename T> Windows::Media::Core::MediaSource impl_IMediaPlaybackItem<T>::Source() const
{
	Windows::Media::Core::MediaSource value = nullptr;
	check(shim()->get_Source(put(value)));
	return value;
}

template <typename T> Windows::Media::Playback::MediaPlaybackAudioTrackList impl_IMediaPlaybackItem<T>::AudioTracks() const
{
	Windows::Media::Playback::MediaPlaybackAudioTrackList value = nullptr;
	check(shim()->get_AudioTracks(put(value)));
	return value;
}

template <typename T> Windows::Media::Playback::MediaPlaybackVideoTrackList impl_IMediaPlaybackItem<T>::VideoTracks() const
{
	Windows::Media::Playback::MediaPlaybackVideoTrackList value = nullptr;
	check(shim()->get_VideoTracks(put(value)));
	return value;
}

template <typename T> Windows::Media::Playback::MediaPlaybackTimedMetadataTrackList impl_IMediaPlaybackItem<T>::TimedMetadataTracks() const
{
	Windows::Media::Playback::MediaPlaybackTimedMetadataTrackList value = nullptr;
	check(shim()->get_TimedMetadataTracks(put(value)));
	return value;
}

template <typename T> Windows::Media::Playback::MediaPlaybackItemErrorCode impl_IMediaPlaybackItemError<T>::ErrorCode() const
{
	Windows::Media::Playback::MediaPlaybackItemErrorCode value = {};
	check(shim()->get_ErrorCode(&value));
	return value;
}

template <typename T> HRESULT impl_IMediaPlaybackItemError<T>::ExtendedError() const
{
	HRESULT value = {};
	check(shim()->get_ExtendedError(&value));
	return value;
}

template <typename T> Windows::Media::Playback::MediaPlaybackItem impl_IMediaEnginePlaybackSource<T>::CurrentItem() const
{
	Windows::Media::Playback::MediaPlaybackItem value = nullptr;
	check(shim()->get_CurrentItem(put(value)));
	return value;
}

template <typename T> void impl_IMediaEnginePlaybackSource<T>::SetPlaybackSource(Windows::Media::Playback::IMediaPlaybackSource const & source) const
{
	check(shim()->abi_SetPlaybackSource(get(source)));
}

template <typename T> Windows::Media::Playback::MediaPlaybackItem impl_IMediaPlaybackItemOpenedEventArgs<T>::Item() const
{
	Windows::Media::Playback::MediaPlaybackItem value = nullptr;
	check(shim()->get_Item(put(value)));
	return value;
}

template <typename T> Windows::Media::Playback::MediaPlaybackItem impl_IMediaPlaybackItemFailedEventArgs<T>::Item() const
{
	Windows::Media::Playback::MediaPlaybackItem value = nullptr;
	check(shim()->get_Item(put(value)));
	return value;
}

template <typename T> Windows::Media::Playback::MediaPlaybackItemError impl_IMediaPlaybackItemFailedEventArgs<T>::Error() const
{
	Windows::Media::Playback::MediaPlaybackItemError value = nullptr;
	check(shim()->get_Error(put(value)));
	return value;
}

template <typename T> Windows::Media::Playback::MediaPlaybackItem impl_ICurrentMediaPlaybackItemChangedEventArgs<T>::NewItem() const
{
	Windows::Media::Playback::MediaPlaybackItem value = nullptr;
	check(shim()->get_NewItem(put(value)));
	return value;
}

template <typename T> Windows::Media::Playback::MediaPlaybackItem impl_ICurrentMediaPlaybackItemChangedEventArgs<T>::OldItem() const
{
	Windows::Media::Playback::MediaPlaybackItem value = nullptr;
	check(shim()->get_OldItem(put(value)));
	return value;
}

template <typename T> long long impl_IMediaPlaybackList<T>::ItemFailed(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlaybackList, Windows::Media::Playback::MediaPlaybackItemFailedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ItemFailed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlaybackList<T>::ItemFailed(F handler) const
{
	return ItemFailed(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlaybackList, Windows::Media::Playback::MediaPlaybackItemFailedEventArgs>(handler));
}

template <typename T> void impl_IMediaPlaybackList<T>::ItemFailed(long long const token) const
{
	check(shim()->remove_ItemFailed(token));
}

template <typename T> long long impl_IMediaPlaybackList<T>::CurrentItemChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlaybackList, Windows::Media::Playback::CurrentMediaPlaybackItemChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_CurrentItemChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlaybackList<T>::CurrentItemChanged(F handler) const
{
	return CurrentItemChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlaybackList, Windows::Media::Playback::CurrentMediaPlaybackItemChangedEventArgs>(handler));
}

template <typename T> void impl_IMediaPlaybackList<T>::CurrentItemChanged(long long const token) const
{
	check(shim()->remove_CurrentItemChanged(token));
}

template <typename T> long long impl_IMediaPlaybackList<T>::ItemOpened(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlaybackList, Windows::Media::Playback::MediaPlaybackItemOpenedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ItemOpened(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlaybackList<T>::ItemOpened(F handler) const
{
	return ItemOpened(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlaybackList, Windows::Media::Playback::MediaPlaybackItemOpenedEventArgs>(handler));
}

template <typename T> void impl_IMediaPlaybackList<T>::ItemOpened(long long const token) const
{
	check(shim()->remove_ItemOpened(token));
}

template <typename T> Windows::Foundation::Collections::IObservableVector<Windows::Media::Playback::MediaPlaybackItem> impl_IMediaPlaybackList<T>::Items() const
{
	Windows::Foundation::Collections::IObservableVector<Windows::Media::Playback::MediaPlaybackItem> value;
	check(shim()->get_Items(put(value)));
	return value;
}

template <typename T> bool impl_IMediaPlaybackList<T>::AutoRepeatEnabled() const
{
	bool value = {};
	check(shim()->get_AutoRepeatEnabled(put(value)));
	return value;
}

template <typename T> void impl_IMediaPlaybackList<T>::AutoRepeatEnabled(bool const value) const
{
	check(shim()->put_AutoRepeatEnabled(value));
}

template <typename T> bool impl_IMediaPlaybackList<T>::ShuffleEnabled() const
{
	bool value = {};
	check(shim()->get_ShuffleEnabled(put(value)));
	return value;
}

template <typename T> void impl_IMediaPlaybackList<T>::ShuffleEnabled(bool const value) const
{
	check(shim()->put_ShuffleEnabled(value));
}

template <typename T> Windows::Media::Playback::MediaPlaybackItem impl_IMediaPlaybackList<T>::CurrentItem() const
{
	Windows::Media::Playback::MediaPlaybackItem value = nullptr;
	check(shim()->get_CurrentItem(put(value)));
	return value;
}

template <typename T> unsigned impl_IMediaPlaybackList<T>::CurrentItemIndex() const
{
	unsigned value = {};
	check(shim()->get_CurrentItemIndex(&value));
	return value;
}

template <typename T> Windows::Media::Playback::MediaPlaybackItem impl_IMediaPlaybackList<T>::MoveNext() const
{
	Windows::Media::Playback::MediaPlaybackItem item = nullptr;
	check(shim()->abi_MoveNext(put(item)));
	return item;
}

template <typename T> Windows::Media::Playback::MediaPlaybackItem impl_IMediaPlaybackList<T>::MovePrevious() const
{
	Windows::Media::Playback::MediaPlaybackItem item = nullptr;
	check(shim()->abi_MovePrevious(put(item)));
	return item;
}

template <typename T> Windows::Media::Playback::MediaPlaybackItem impl_IMediaPlaybackList<T>::MoveTo(unsigned const itemIndex) const
{
	Windows::Media::Playback::MediaPlaybackItem item = nullptr;
	check(shim()->abi_MoveTo(itemIndex, put(item)));
	return item;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IMediaPlaybackList2<T>::MaxPrefetchTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_MaxPrefetchTime(put(value)));
	return value;
}

template <typename T> void impl_IMediaPlaybackList2<T>::MaxPrefetchTime(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_MaxPrefetchTime(get(value)));
}

template <typename T> Windows::Media::Playback::MediaPlaybackItem impl_IMediaPlaybackList2<T>::StartingItem() const
{
	Windows::Media::Playback::MediaPlaybackItem value = nullptr;
	check(shim()->get_StartingItem(put(value)));
	return value;
}

template <typename T> void impl_IMediaPlaybackList2<T>::StartingItem(Windows::Media::Playback::MediaPlaybackItem const & value) const
{
	check(shim()->put_StartingItem(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::Playback::MediaPlaybackItem> impl_IMediaPlaybackList2<T>::ShuffledItems() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::Playback::MediaPlaybackItem> value;
	check(shim()->get_ShuffledItems(put(value)));
	return value;
}

template <typename T> void impl_IMediaPlaybackList2<T>::SetShuffledItems(Windows::Foundation::Collections::IIterable<Windows::Media::Playback::MediaPlaybackItem> const & value) const
{
	check(shim()->abi_SetShuffledItems(get(value)));
}

template <typename T> long long impl_IMediaPlaybackTimedMetadataTrackList<T>::PresentationModeChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Playback::MediaPlaybackTimedMetadataTrackList, Windows::Media::Playback::TimedMetadataPresentationModeChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_PresentationModeChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaPlaybackTimedMetadataTrackList<T>::PresentationModeChanged(F handler) const
{
	return PresentationModeChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Playback::MediaPlaybackTimedMetadataTrackList, Windows::Media::Playback::TimedMetadataPresentationModeChangedEventArgs>(handler));
}

template <typename T> void impl_IMediaPlaybackTimedMetadataTrackList<T>::PresentationModeChanged(long long const token) const
{
	check(shim()->remove_PresentationModeChanged(token));
}

template <typename T> Windows::Media::Playback::TimedMetadataTrackPresentationMode impl_IMediaPlaybackTimedMetadataTrackList<T>::GetPresentationMode(unsigned const index) const
{
	Windows::Media::Playback::TimedMetadataTrackPresentationMode value = {};
	check(shim()->abi_GetPresentationMode(index, &value));
	return value;
}

template <typename T> void impl_IMediaPlaybackTimedMetadataTrackList<T>::SetPresentationMode(unsigned const index, Windows::Media::Playback::TimedMetadataTrackPresentationMode const value) const
{
	check(shim()->abi_SetPresentationMode(index, value));
}

template <typename T> Windows::Media::Core::TimedMetadataTrack impl_ITimedMetadataPresentationModeChangedEventArgs<T>::Track() const
{
	Windows::Media::Core::TimedMetadataTrack value = nullptr;
	check(shim()->get_Track(put(value)));
	return value;
}

template <typename T> Windows::Media::Playback::TimedMetadataTrackPresentationMode impl_ITimedMetadataPresentationModeChangedEventArgs<T>::OldPresentationMode() const
{
	Windows::Media::Playback::TimedMetadataTrackPresentationMode value = {};
	check(shim()->get_OldPresentationMode(&value));
	return value;
}

template <typename T> Windows::Media::Playback::TimedMetadataTrackPresentationMode impl_ITimedMetadataPresentationModeChangedEventArgs<T>::NewPresentationMode() const
{
	Windows::Media::Playback::TimedMetadataTrackPresentationMode value = {};
	check(shim()->get_NewPresentationMode(&value));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Playlists {

template <typename T> Windows::Foundation::Collections::IVector<Windows::Storage::StorageFile> impl_IPlaylist<T>::Files() const
{
	Windows::Foundation::Collections::IVector<Windows::Storage::StorageFile> value;
	check(shim()->get_Files(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPlaylist<T>::SaveAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_SaveAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IPlaylist<T>::SaveAsAsync(Windows::Storage::IStorageFolder const & saveLocation, StringReference const & desiredName, Windows::Storage::NameCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_SaveAsAsync(get(saveLocation), get(desiredName), option, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IPlaylist<T>::SaveAsAsync(Windows::Storage::IStorageFolder const & saveLocation, StringReference const & desiredName, Windows::Storage::NameCollisionOption const option, Windows::Media::Playlists::PlaylistFormat const playlistFormat) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_SaveAsWithFormatAsync(get(saveLocation), get(desiredName), option, playlistFormat, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Playlists::Playlist> impl_IPlaylistStatics<T>::LoadAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Playlists::Playlist> operation;
	check(shim()->abi_LoadAsync(get(file), put(operation)));
	return operation;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Protection {

template <typename T> void impl_IServiceRequestedEventHandler<T>::Invoke(Windows::Media::Protection::MediaProtectionManager const & sender, Windows::Media::Protection::ServiceRequestedEventArgs const & e) const
{
	check(shim()->abi_Invoke(get(sender), get(e)));
}

template <typename T> void impl_IRebootNeededEventHandler<T>::Invoke(Windows::Media::Protection::MediaProtectionManager const & sender) const
{
	check(shim()->abi_Invoke(get(sender)));
}

template <typename T> void impl_IComponentLoadFailedEventHandler<T>::Invoke(Windows::Media::Protection::MediaProtectionManager const & sender, Windows::Media::Protection::ComponentLoadFailedEventArgs const & e) const
{
	check(shim()->abi_Invoke(get(sender), get(e)));
}

template <typename T> long long impl_IMediaProtectionManager<T>::ServiceRequested(Windows::Media::Protection::IServiceRequestedEventHandler const & handler) const
{
	long long cookie = {};
	check(shim()->add_ServiceRequested(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaProtectionManager<T>::ServiceRequested(F handler) const
{
	return ServiceRequested(Windows::Media::Protection::ServiceRequestedEventHandler(handler));
}

template <typename T> void impl_IMediaProtectionManager<T>::ServiceRequested(long long const cookie) const
{
	check(shim()->remove_ServiceRequested(cookie));
}

template <typename T> long long impl_IMediaProtectionManager<T>::RebootNeeded(Windows::Media::Protection::IRebootNeededEventHandler const & handler) const
{
	long long cookie = {};
	check(shim()->add_RebootNeeded(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaProtectionManager<T>::RebootNeeded(F handler) const
{
	return RebootNeeded(Windows::Media::Protection::RebootNeededEventHandler(handler));
}

template <typename T> void impl_IMediaProtectionManager<T>::RebootNeeded(long long const cookie) const
{
	check(shim()->remove_RebootNeeded(cookie));
}

template <typename T> long long impl_IMediaProtectionManager<T>::ComponentLoadFailed(Windows::Media::Protection::IComponentLoadFailedEventHandler const & handler) const
{
	long long cookie = {};
	check(shim()->add_ComponentLoadFailed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMediaProtectionManager<T>::ComponentLoadFailed(F handler) const
{
	return ComponentLoadFailed(Windows::Media::Protection::ComponentLoadFailedEventHandler(handler));
}

template <typename T> void impl_IMediaProtectionManager<T>::ComponentLoadFailed(long long const cookie) const
{
	check(shim()->remove_ComponentLoadFailed(cookie));
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IMediaProtectionManager<T>::Properties() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> void impl_IMediaProtectionServiceCompletion<T>::Complete(bool const success) const
{
	check(shim()->abi_Complete(success));
}

template <typename T> Windows::Media::Protection::IMediaProtectionServiceRequest impl_IServiceRequestedEventArgs<T>::Request() const
{
	Windows::Media::Protection::IMediaProtectionServiceRequest value;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> Windows::Media::Protection::MediaProtectionServiceCompletion impl_IServiceRequestedEventArgs<T>::Completion() const
{
	Windows::Media::Protection::MediaProtectionServiceCompletion value = nullptr;
	check(shim()->get_Completion(put(value)));
	return value;
}

template <typename T> GUID impl_IMediaProtectionServiceRequest<T>::ProtectionSystem() const
{
	GUID system = {};
	check(shim()->get_ProtectionSystem(&system));
	return system;
}

template <typename T> GUID impl_IMediaProtectionServiceRequest<T>::Type() const
{
	GUID type = {};
	check(shim()->get_Type(&type));
	return type;
}

template <typename T> Windows::Media::Playback::MediaPlaybackItem impl_IServiceRequestedEventArgs2<T>::MediaPlaybackItem() const
{
	Windows::Media::Playback::MediaPlaybackItem value = nullptr;
	check(shim()->get_MediaPlaybackItem(put(value)));
	return value;
}

template <typename T> Windows::Media::Protection::RevocationAndRenewalInformation impl_IComponentLoadFailedEventArgs<T>::Information() const
{
	Windows::Media::Protection::RevocationAndRenewalInformation value = nullptr;
	check(shim()->get_Information(put(value)));
	return value;
}

template <typename T> Windows::Media::Protection::MediaProtectionServiceCompletion impl_IComponentLoadFailedEventArgs<T>::Completion() const
{
	Windows::Media::Protection::MediaProtectionServiceCompletion value = nullptr;
	check(shim()->get_Completion(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Protection::RevocationAndRenewalItem> impl_IRevocationAndRenewalInformation<T>::Items() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Protection::RevocationAndRenewalItem> items;
	check(shim()->get_Items(put(items)));
	return items;
}

template <typename T> Windows::Media::Protection::RevocationAndRenewalReasons impl_IRevocationAndRenewalItem<T>::Reasons() const
{
	Windows::Media::Protection::RevocationAndRenewalReasons reasons = {};
	check(shim()->get_Reasons(&reasons));
	return reasons;
}

template <typename T> String impl_IRevocationAndRenewalItem<T>::HeaderHash() const
{
	String value;
	check(shim()->get_HeaderHash(put(value)));
	return value;
}

template <typename T> String impl_IRevocationAndRenewalItem<T>::PublicKeyHash() const
{
	String value;
	check(shim()->get_PublicKeyHash(put(value)));
	return value;
}

template <typename T> String impl_IRevocationAndRenewalItem<T>::Name() const
{
	String name;
	check(shim()->get_Name(put(name)));
	return name;
}

template <typename T> String impl_IRevocationAndRenewalItem<T>::RenewalId() const
{
	String value;
	check(shim()->get_RenewalId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Media::Protection::RenewalStatus, unsigned> impl_IComponentRenewalStatics<T>::RenewSystemComponentsAsync(Windows::Media::Protection::RevocationAndRenewalInformation const & information) const
{
	Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Media::Protection::RenewalStatus, unsigned> operation;
	check(shim()->abi_RenewSystemComponentsAsync(get(information), put(operation)));
	return operation;
}

template <typename T> Windows::Media::Protection::MediaProtectionPMPServer impl_IMediaProtectionPMPServerFactory<T>::CreatePMPServer(Windows::Foundation::Collections::IPropertySet const & pProperties) const
{
	Windows::Media::Protection::MediaProtectionPMPServer ppObject = nullptr;
	check(shim()->abi_CreatePMPServer(get(pProperties), put(ppObject)));
	return ppObject;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IMediaProtectionPMPServer<T>::Properties() const
{
	Windows::Foundation::Collections::IPropertySet ppProperties;
	check(shim()->get_Properties(put(ppProperties)));
	return ppProperties;
}

template <typename T> Windows::Media::Protection::ProtectionCapabilityResult impl_IProtectionCapabilities<T>::IsTypeSupported(StringReference const & type, StringReference const & keySystem) const
{
	Windows::Media::Protection::ProtectionCapabilityResult value = {};
	check(shim()->abi_IsTypeSupported(get(type), get(keySystem), &value));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Protection { namespace PlayReady {

template <typename T> GUID impl_IPlayReadyContentHeader<T>::KeyId() const
{
	GUID value = {};
	check(shim()->get_KeyId(&value));
	return value;
}

template <typename T> String impl_IPlayReadyContentHeader<T>::KeyIdString() const
{
	String value;
	check(shim()->get_KeyIdString(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IPlayReadyContentHeader<T>::LicenseAcquisitionUrl() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_LicenseAcquisitionUrl(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IPlayReadyContentHeader<T>::LicenseAcquisitionUserInterfaceUrl() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_LicenseAcquisitionUserInterfaceUrl(put(value)));
	return value;
}

template <typename T> GUID impl_IPlayReadyContentHeader<T>::DomainServiceId() const
{
	GUID value = {};
	check(shim()->get_DomainServiceId(&value));
	return value;
}

template <typename T> Windows::Media::Protection::PlayReady::PlayReadyEncryptionAlgorithm impl_IPlayReadyContentHeader<T>::EncryptionType() const
{
	Windows::Media::Protection::PlayReady::PlayReadyEncryptionAlgorithm value = {};
	check(shim()->get_EncryptionType(&value));
	return value;
}

template <typename T> String impl_IPlayReadyContentHeader<T>::CustomAttributes() const
{
	String value;
	check(shim()->get_CustomAttributes(put(value)));
	return value;
}

template <typename T> Windows::Media::Protection::PlayReady::PlayReadyDecryptorSetup impl_IPlayReadyContentHeader<T>::DecryptorSetup() const
{
	Windows::Media::Protection::PlayReady::PlayReadyDecryptorSetup value = {};
	check(shim()->get_DecryptorSetup(&value));
	return value;
}

template <typename T> Windows::Media::Protection::PlayReady::PlayReadyContentHeader impl_IPlayReadyContentHeader<T>::HeaderWithEmbeddedUpdates() const
{
	Windows::Media::Protection::PlayReady::PlayReadyContentHeader value = nullptr;
	check(shim()->get_HeaderWithEmbeddedUpdates(put(value)));
	return value;
}

template <typename T> Windows::Media::Protection::PlayReady::PlayReadyContentHeader impl_IPlayReadyContentHeaderFactory<T>::CreateInstanceFromComponents(GUID const contentKeyId, StringReference const & contentKeyIdString, Windows::Media::Protection::PlayReady::PlayReadyEncryptionAlgorithm const contentEncryptionAlgorithm, Windows::Foundation::Uri const & licenseAcquisitionUrl, Windows::Foundation::Uri const & licenseAcquisitionUserInterfaceUrl, StringReference const & customAttributes, GUID const domainServiceId) const
{
	Windows::Media::Protection::PlayReady::PlayReadyContentHeader instance = nullptr;
	check(shim()->abi_CreateInstanceFromComponents(contentKeyId, get(contentKeyIdString), contentEncryptionAlgorithm, get(licenseAcquisitionUrl), get(licenseAcquisitionUserInterfaceUrl), get(customAttributes), domainServiceId, put(instance)));
	return instance;
}

template <typename T> Windows::Media::Protection::PlayReady::IPlayReadyServiceRequest impl_IPlayReadyContentResolver<T>::ServiceRequest(Windows::Media::Protection::PlayReady::PlayReadyContentHeader const & contentHeader) const
{
	Windows::Media::Protection::PlayReady::IPlayReadyServiceRequest serviceRequest;
	check(shim()->abi_ServiceRequest(get(contentHeader), put(serviceRequest)));
	return serviceRequest;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPlayReadyLicenseManagement<T>::DeleteLicenses(Windows::Media::Protection::PlayReady::PlayReadyContentHeader const & contentHeader) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_DeleteLicenses(get(contentHeader), put(operation)));
	return operation;
}

template <typename T> bool impl_IPlayReadyLicense<T>::FullyEvaluated() const
{
	bool value = {};
	check(shim()->get_FullyEvaluated(put(value)));
	return value;
}

template <typename T> bool impl_IPlayReadyLicense<T>::UsableForPlay() const
{
	bool value = {};
	check(shim()->get_UsableForPlay(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IPlayReadyLicense<T>::ExpirationDate() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_ExpirationDate(put(value)));
	return value;
}

template <typename T> unsigned impl_IPlayReadyLicense<T>::ExpireAfterFirstPlay() const
{
	unsigned value = {};
	check(shim()->get_ExpireAfterFirstPlay(&value));
	return value;
}

template <typename T> GUID impl_IPlayReadyLicense<T>::DomainAccountID() const
{
	GUID value = {};
	check(shim()->get_DomainAccountID(&value));
	return value;
}

template <typename T> unsigned impl_IPlayReadyLicense<T>::ChainDepth() const
{
	unsigned value = {};
	check(shim()->get_ChainDepth(&value));
	return value;
}

template <typename T> GUID impl_IPlayReadyLicense<T>::GetKIDAtChainDepth(unsigned const chainDepth) const
{
	GUID kid = {};
	check(shim()->abi_GetKIDAtChainDepth(chainDepth, &kid));
	return kid;
}

template <typename T> Windows::Media::Protection::PlayReady::PlayReadyLicenseIterable impl_IPlayReadyLicenseIterableFactory<T>::CreateInstance(Windows::Media::Protection::PlayReady::PlayReadyContentHeader const & contentHeader, bool const fullyEvaluated) const
{
	Windows::Media::Protection::PlayReady::PlayReadyLicenseIterable instance = nullptr;
	check(shim()->abi_CreateInstance(get(contentHeader), fullyEvaluated, put(instance)));
	return instance;
}

template <typename T> GUID impl_IPlayReadyDomain<T>::AccountId() const
{
	GUID value = {};
	check(shim()->get_AccountId(&value));
	return value;
}

template <typename T> GUID impl_IPlayReadyDomain<T>::ServiceId() const
{
	GUID value = {};
	check(shim()->get_ServiceId(&value));
	return value;
}

template <typename T> unsigned impl_IPlayReadyDomain<T>::Revision() const
{
	unsigned value = {};
	check(shim()->get_Revision(&value));
	return value;
}

template <typename T> String impl_IPlayReadyDomain<T>::FriendlyName() const
{
	String value;
	check(shim()->get_FriendlyName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IPlayReadyDomain<T>::DomainJoinUrl() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_DomainJoinUrl(put(value)));
	return value;
}

template <typename T> Windows::Media::Protection::PlayReady::PlayReadyDomainIterable impl_IPlayReadyDomainIterableFactory<T>::CreateInstance(GUID const domainAccountId) const
{
	Windows::Media::Protection::PlayReady::PlayReadyDomainIterable domainIterable = nullptr;
	check(shim()->abi_CreateInstance(domainAccountId, put(domainIterable)));
	return domainIterable;
}

template <typename T> GUID impl_IPlayReadyStatics<T>::DomainJoinServiceRequestType() const
{
	GUID value = {};
	check(shim()->get_DomainJoinServiceRequestType(&value));
	return value;
}

template <typename T> GUID impl_IPlayReadyStatics<T>::DomainLeaveServiceRequestType() const
{
	GUID value = {};
	check(shim()->get_DomainLeaveServiceRequestType(&value));
	return value;
}

template <typename T> GUID impl_IPlayReadyStatics<T>::IndividualizationServiceRequestType() const
{
	GUID value = {};
	check(shim()->get_IndividualizationServiceRequestType(&value));
	return value;
}

template <typename T> GUID impl_IPlayReadyStatics<T>::LicenseAcquirerServiceRequestType() const
{
	GUID value = {};
	check(shim()->get_LicenseAcquirerServiceRequestType(&value));
	return value;
}

template <typename T> GUID impl_IPlayReadyStatics<T>::MeteringReportServiceRequestType() const
{
	GUID value = {};
	check(shim()->get_MeteringReportServiceRequestType(&value));
	return value;
}

template <typename T> GUID impl_IPlayReadyStatics<T>::RevocationServiceRequestType() const
{
	GUID value = {};
	check(shim()->get_RevocationServiceRequestType(&value));
	return value;
}

template <typename T> GUID impl_IPlayReadyStatics<T>::MediaProtectionSystemId() const
{
	GUID value = {};
	check(shim()->get_MediaProtectionSystemId(&value));
	return value;
}

template <typename T> unsigned impl_IPlayReadyStatics<T>::PlayReadySecurityVersion() const
{
	unsigned value = {};
	check(shim()->get_PlayReadySecurityVersion(&value));
	return value;
}

template <typename T> unsigned impl_IPlayReadyStatics2<T>::PlayReadyCertificateSecurityLevel() const
{
	unsigned value = {};
	check(shim()->get_PlayReadyCertificateSecurityLevel(&value));
	return value;
}

template <typename T> GUID impl_IPlayReadyStatics3<T>::SecureStopServiceRequestType() const
{
	GUID value = {};
	check(shim()->get_SecureStopServiceRequestType(&value));
	return value;
}

template <typename T> bool impl_IPlayReadyStatics3<T>::CheckSupportedHardware(Windows::Media::Protection::PlayReady::PlayReadyHardwareDRMFeatures const hwdrmFeature) const
{
	bool value = {};
	check(shim()->abi_CheckSupportedHardware(hwdrmFeature, put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IPlayReadySoapMessage<T>::MessageHeaders() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check(shim()->get_MessageHeaders(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IPlayReadySoapMessage<T>::Uri() const
{
	Windows::Foundation::Uri messageUri = nullptr;
	check(shim()->get_Uri(put(messageUri)));
	return messageUri;
}

template <typename T> Windows::Media::Protection::PlayReady::IPlayReadyLicenseAcquisitionServiceRequest impl_IPlayReadyLicenseSession<T>::CreateLAServiceRequest() const
{
	Windows::Media::Protection::PlayReady::IPlayReadyLicenseAcquisitionServiceRequest serviceRequest;
	check(shim()->abi_CreateLAServiceRequest(put(serviceRequest)));
	return serviceRequest;
}

template <typename T> void impl_IPlayReadyLicenseSession<T>::ConfigureMediaProtectionManager(Windows::Media::Protection::MediaProtectionManager const & mpm) const
{
	check(shim()->abi_ConfigureMediaProtectionManager(get(mpm)));
}

template <typename T> Windows::Media::Protection::PlayReady::PlayReadyLicenseSession impl_IPlayReadyLicenseSessionFactory<T>::CreateInstance(Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	Windows::Media::Protection::PlayReady::PlayReadyLicenseSession instance = nullptr;
	check(shim()->abi_CreateInstance(get(configuration), put(instance)));
	return instance;
}

template <typename T> void impl_INDDownloadEngine<T>::Pause() const
{
	check(shim()->abi_Pause());
}

template <typename T> void impl_INDDownloadEngine<T>::Resume() const
{
	check(shim()->abi_Resume());
}

template <typename T> void impl_INDDownloadEngine<T>::Close() const
{
	check(shim()->abi_Close());
}

template <typename T> void impl_INDDownloadEngine<T>::Seek(Windows::Foundation::TimeSpan const & startPosition) const
{
	check(shim()->abi_Seek(startPosition));
}

template <typename T> bool impl_INDDownloadEngine<T>::CanSeek() const
{
	bool canSeek = {};
	check(shim()->get_CanSeek(put(canSeek)));
	return canSeek;
}

template <typename T> unsigned impl_INDDownloadEngine<T>::BufferFullMinThresholdInSamples() const
{
	unsigned bufferFullMinThreshold = {};
	check(shim()->get_BufferFullMinThresholdInSamples(&bufferFullMinThreshold));
	return bufferFullMinThreshold;
}

template <typename T> unsigned impl_INDDownloadEngine<T>::BufferFullMaxThresholdInSamples() const
{
	unsigned bufferFullMaxThreshold = {};
	check(shim()->get_BufferFullMaxThresholdInSamples(&bufferFullMaxThreshold));
	return bufferFullMaxThreshold;
}

template <typename T> Windows::Media::Protection::PlayReady::NDDownloadEngineNotifier impl_INDDownloadEngine<T>::Notifier() const
{
	Windows::Media::Protection::PlayReady::NDDownloadEngineNotifier instance = nullptr;
	check(shim()->get_Notifier(put(instance)));
	return instance;
}

template <typename T> void impl_INDDownloadEngineNotifier<T>::OnStreamOpened() const
{
	check(shim()->abi_OnStreamOpened());
}

template <typename T> void impl_INDDownloadEngineNotifier<T>::OnContentIDReceived(Windows::Media::Protection::PlayReady::INDLicenseFetchDescriptor const & licenseFetchDescriptor) const
{
	check(shim()->abi_OnContentIDReceived(get(licenseFetchDescriptor)));
}

template <typename T> void impl_INDDownloadEngineNotifier<T>::OnEndOfStream() const
{
	check(shim()->abi_OnEndOfStream());
}

template <typename T> void impl_INDDownloadEngineNotifier<T>::OnNetworkError() const
{
	check(shim()->abi_OnNetworkError());
}

template <typename T> Windows::Media::Protection::PlayReady::NDContentIDType impl_INDLicenseFetchDescriptor<T>::ContentIDType() const
{
	Windows::Media::Protection::PlayReady::NDContentIDType contentIDType = {};
	check(shim()->get_ContentIDType(&contentIDType));
	return contentIDType;
}

template <typename T> Windows::Media::Protection::PlayReady::INDCustomData impl_INDLicenseFetchDescriptor<T>::LicenseFetchChallengeCustomData() const
{
	Windows::Media::Protection::PlayReady::INDCustomData licenseFetchChallengeCustomData;
	check(shim()->get_LicenseFetchChallengeCustomData(put(licenseFetchChallengeCustomData)));
	return licenseFetchChallengeCustomData;
}

template <typename T> void impl_INDLicenseFetchDescriptor<T>::LicenseFetchChallengeCustomData(Windows::Media::Protection::PlayReady::INDCustomData const & licenseFetchChallengeCustomData) const
{
	check(shim()->put_LicenseFetchChallengeCustomData(get(licenseFetchChallengeCustomData)));
}

template <typename T> unsigned impl_INDStreamParser<T>::GetStreamInformation(Windows::Media::Core::IMediaStreamDescriptor const & descriptor, Windows::Media::Protection::PlayReady::NDMediaStreamType & streamType) const
{
	unsigned streamID = {};
	check(shim()->abi_GetStreamInformation(get(descriptor), &streamType, &streamID));
	return streamID;
}

template <typename T> void impl_INDStreamParser<T>::BeginOfStream() const
{
	check(shim()->abi_BeginOfStream());
}

template <typename T> void impl_INDStreamParser<T>::EndOfStream() const
{
	check(shim()->abi_EndOfStream());
}

template <typename T> Windows::Media::Protection::PlayReady::NDStreamParserNotifier impl_INDStreamParser<T>::Notifier() const
{
	Windows::Media::Protection::PlayReady::NDStreamParserNotifier instance = nullptr;
	check(shim()->get_Notifier(put(instance)));
	return instance;
}

template <typename T> void impl_INDStreamParserNotifier<T>::OnContentIDReceived(Windows::Media::Protection::PlayReady::INDLicenseFetchDescriptor const & licenseFetchDescriptor) const
{
	check(shim()->abi_OnContentIDReceived(get(licenseFetchDescriptor)));
}

template <typename T> void impl_INDStreamParserNotifier<T>::OnMediaStreamDescriptorCreated(Windows::Foundation::Collections::IVector<Windows::Media::Core::AudioStreamDescriptor> const & audioStreamDescriptors, Windows::Foundation::Collections::IVector<Windows::Media::Core::VideoStreamDescriptor> const & videoStreamDescriptors) const
{
	check(shim()->abi_OnMediaStreamDescriptorCreated(get(audioStreamDescriptors), get(videoStreamDescriptors)));
}

template <typename T> Windows::Media::Protection::PlayReady::NDTCPMessenger impl_INDTCPMessengerFactory<T>::CreateInstance(StringReference const & remoteHostName, unsigned const remoteHostPort) const
{
	Windows::Media::Protection::PlayReady::NDTCPMessenger instance = nullptr;
	check(shim()->abi_CreateInstance(get(remoteHostName), remoteHostPort, put(instance)));
	return instance;
}

template <typename T> Windows::Media::Protection::PlayReady::NDCertificateType impl_INDTransmitterProperties<T>::CertificateType() const
{
	Windows::Media::Protection::PlayReady::NDCertificateType type = {};
	check(shim()->get_CertificateType(&type));
	return type;
}

template <typename T> Windows::Media::Protection::PlayReady::NDCertificatePlatformID impl_INDTransmitterProperties<T>::PlatformIdentifier() const
{
	Windows::Media::Protection::PlayReady::NDCertificatePlatformID identifier = {};
	check(shim()->get_PlatformIdentifier(&identifier));
	return identifier;
}

template <typename T> unsigned impl_INDTransmitterProperties<T>::SecurityLevel() const
{
	unsigned level = {};
	check(shim()->get_SecurityLevel(&level));
	return level;
}

template <typename T> unsigned impl_INDTransmitterProperties<T>::SecurityVersion() const
{
	unsigned securityVersion = {};
	check(shim()->get_SecurityVersion(&securityVersion));
	return securityVersion;
}

template <typename T> Windows::Foundation::DateTime impl_INDTransmitterProperties<T>::ExpirationDate() const
{
	Windows::Foundation::DateTime expirationDate = {};
	check(shim()->get_ExpirationDate(&expirationDate));
	return expirationDate;
}

template <typename T> String impl_INDTransmitterProperties<T>::ModelManufacturerName() const
{
	String modelManufacturerName;
	check(shim()->get_ModelManufacturerName(put(modelManufacturerName)));
	return modelManufacturerName;
}

template <typename T> String impl_INDTransmitterProperties<T>::ModelName() const
{
	String modelName;
	check(shim()->get_ModelName(put(modelName)));
	return modelName;
}

template <typename T> String impl_INDTransmitterProperties<T>::ModelNumber() const
{
	String modelNumber;
	check(shim()->get_ModelNumber(put(modelNumber)));
	return modelNumber;
}

template <typename T> Windows::Media::Core::MediaStreamSource impl_INDStartResult<T>::MediaStreamSource() const
{
	Windows::Media::Core::MediaStreamSource mediaStreamSource = nullptr;
	check(shim()->get_MediaStreamSource(put(mediaStreamSource)));
	return mediaStreamSource;
}

template <typename T> Windows::Media::Protection::PlayReady::INDCustomData impl_INDLicenseFetchResult<T>::ResponseCustomData() const
{
	Windows::Media::Protection::PlayReady::INDCustomData customData;
	check(shim()->get_ResponseCustomData(put(customData)));
	return customData;
}

template <typename T> Windows::Media::Protection::PlayReady::INDCustomData impl_INDRegistrationCompletedEventArgs<T>::ResponseCustomData() const
{
	Windows::Media::Protection::PlayReady::INDCustomData customData;
	check(shim()->get_ResponseCustomData(put(customData)));
	return customData;
}

template <typename T> Windows::Media::Protection::PlayReady::INDTransmitterProperties impl_INDRegistrationCompletedEventArgs<T>::TransmitterProperties() const
{
	Windows::Media::Protection::PlayReady::INDTransmitterProperties transmitterProperties;
	check(shim()->get_TransmitterProperties(put(transmitterProperties)));
	return transmitterProperties;
}

template <typename T> bool impl_INDRegistrationCompletedEventArgs<T>::TransmitterCertificateAccepted() const
{
	bool acceptpt = {};
	check(shim()->get_TransmitterCertificateAccepted(put(acceptpt)));
	return acceptpt;
}

template <typename T> void impl_INDRegistrationCompletedEventArgs<T>::TransmitterCertificateAccepted(bool const accept) const
{
	check(shim()->put_TransmitterCertificateAccepted(accept));
}

template <typename T> unsigned impl_INDProximityDetectionCompletedEventArgs<T>::ProximityDetectionRetryCount() const
{
	unsigned retryCount = {};
	check(shim()->get_ProximityDetectionRetryCount(&retryCount));
	return retryCount;
}

template <typename T> Windows::Media::Protection::PlayReady::INDCustomData impl_INDLicenseFetchCompletedEventArgs<T>::ResponseCustomData() const
{
	Windows::Media::Protection::PlayReady::INDCustomData customData;
	check(shim()->get_ResponseCustomData(put(customData)));
	return customData;
}

template <typename T> long long impl_INDClient<T>::RegistrationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Media::Protection::PlayReady::NDClient, Windows::Media::Protection::PlayReady::INDRegistrationCompletedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_RegistrationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_INDClient<T>::RegistrationCompleted(F handler) const
{
	return RegistrationCompleted(Windows::Foundation::TypedEventHandler<Windows::Media::Protection::PlayReady::NDClient, Windows::Media::Protection::PlayReady::INDRegistrationCompletedEventArgs>(handler));
}

template <typename T> void impl_INDClient<T>::RegistrationCompleted(long long const token) const
{
	check(shim()->remove_RegistrationCompleted(token));
}

template <typename T> long long impl_INDClient<T>::ProximityDetectionCompleted(Windows::Foundation::ITypedEventHandler<Windows::Media::Protection::PlayReady::NDClient, Windows::Media::Protection::PlayReady::INDProximityDetectionCompletedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ProximityDetectionCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_INDClient<T>::ProximityDetectionCompleted(F handler) const
{
	return ProximityDetectionCompleted(Windows::Foundation::TypedEventHandler<Windows::Media::Protection::PlayReady::NDClient, Windows::Media::Protection::PlayReady::INDProximityDetectionCompletedEventArgs>(handler));
}

template <typename T> void impl_INDClient<T>::ProximityDetectionCompleted(long long const token) const
{
	check(shim()->remove_ProximityDetectionCompleted(token));
}

template <typename T> long long impl_INDClient<T>::LicenseFetchCompleted(Windows::Foundation::ITypedEventHandler<Windows::Media::Protection::PlayReady::NDClient, Windows::Media::Protection::PlayReady::INDLicenseFetchCompletedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_LicenseFetchCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_INDClient<T>::LicenseFetchCompleted(F handler) const
{
	return LicenseFetchCompleted(Windows::Foundation::TypedEventHandler<Windows::Media::Protection::PlayReady::NDClient, Windows::Media::Protection::PlayReady::INDLicenseFetchCompletedEventArgs>(handler));
}

template <typename T> void impl_INDClient<T>::LicenseFetchCompleted(long long const token) const
{
	check(shim()->remove_LicenseFetchCompleted(token));
}

template <typename T> long long impl_INDClient<T>::ReRegistrationNeeded(Windows::Foundation::ITypedEventHandler<Windows::Media::Protection::PlayReady::NDClient, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_ReRegistrationNeeded(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_INDClient<T>::ReRegistrationNeeded(F handler) const
{
	return ReRegistrationNeeded(Windows::Foundation::TypedEventHandler<Windows::Media::Protection::PlayReady::NDClient, IInspectable>(handler));
}

template <typename T> void impl_INDClient<T>::ReRegistrationNeeded(long long const token) const
{
	check(shim()->remove_ReRegistrationNeeded(token));
}

template <typename T> long long impl_INDClient<T>::ClosedCaptionDataReceived(Windows::Foundation::ITypedEventHandler<Windows::Media::Protection::PlayReady::NDClient, Windows::Media::Protection::PlayReady::INDClosedCaptionDataReceivedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ClosedCaptionDataReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_INDClient<T>::ClosedCaptionDataReceived(F handler) const
{
	return ClosedCaptionDataReceived(Windows::Foundation::TypedEventHandler<Windows::Media::Protection::PlayReady::NDClient, Windows::Media::Protection::PlayReady::INDClosedCaptionDataReceivedEventArgs>(handler));
}

template <typename T> void impl_INDClient<T>::ClosedCaptionDataReceived(long long const token) const
{
	check(shim()->remove_ClosedCaptionDataReceived(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Protection::PlayReady::INDStartResult> impl_INDClient<T>::StartAsync(Windows::Foundation::Uri const & contentUrl, unsigned const startAsyncOptions, Windows::Media::Protection::PlayReady::INDCustomData const & registrationCustomData, Windows::Media::Protection::PlayReady::INDLicenseFetchDescriptor const & licenseFetchDescriptor) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Protection::PlayReady::INDStartResult> result;
	check(shim()->abi_StartAsync(get(contentUrl), startAsyncOptions, get(registrationCustomData), get(licenseFetchDescriptor), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Protection::PlayReady::INDLicenseFetchResult> impl_INDClient<T>::LicenseFetchAsync(Windows::Media::Protection::PlayReady::INDLicenseFetchDescriptor const & licenseFetchDescriptor) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Protection::PlayReady::INDLicenseFetchResult> result;
	check(shim()->abi_LicenseFetchAsync(get(licenseFetchDescriptor), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncAction impl_INDClient<T>::ReRegistrationAsync(Windows::Media::Protection::PlayReady::INDCustomData const & registrationCustomData) const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_ReRegistrationAsync(get(registrationCustomData), put(result)));
	return result;
}

template <typename T> void impl_INDClient<T>::Close() const
{
	check(shim()->abi_Close());
}

template <typename T> Windows::Media::Protection::PlayReady::NDClosedCaptionFormat impl_INDClosedCaptionDataReceivedEventArgs<T>::ClosedCaptionDataFormat() const
{
	Windows::Media::Protection::PlayReady::NDClosedCaptionFormat ccForamt = {};
	check(shim()->get_ClosedCaptionDataFormat(&ccForamt));
	return ccForamt;
}

template <typename T> long long impl_INDClosedCaptionDataReceivedEventArgs<T>::PresentationTimestamp() const
{
	long long presentationTimestamp = {};
	check(shim()->get_PresentationTimestamp(&presentationTimestamp));
	return presentationTimestamp;
}

template <typename T> Windows::Media::Protection::PlayReady::NDClient impl_INDClientFactory<T>::CreateInstance(Windows::Media::Protection::PlayReady::INDDownloadEngine const & downloadEngine, Windows::Media::Protection::PlayReady::INDStreamParser const & streamParser, Windows::Media::Protection::PlayReady::INDMessenger const & pMessenger) const
{
	Windows::Media::Protection::PlayReady::NDClient instance = nullptr;
	check(shim()->abi_CreateInstance(get(downloadEngine), get(streamParser), get(pMessenger), put(instance)));
	return instance;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_INDStorageFileHelper<T>::GetFileURLs(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::Collections::IVector<String> fileURLs;
	check(shim()->abi_GetFileURLs(get(file), put(fileURLs)));
	return fileURLs;
}

template <typename T> Windows::Foundation::Uri impl_IPlayReadyServiceRequest<T>::Uri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> void impl_IPlayReadyServiceRequest<T>::Uri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Uri(get(value)));
}

template <typename T> String impl_IPlayReadyServiceRequest<T>::ResponseCustomData() const
{
	String value;
	check(shim()->get_ResponseCustomData(put(value)));
	return value;
}

template <typename T> String impl_IPlayReadyServiceRequest<T>::ChallengeCustomData() const
{
	String value;
	check(shim()->get_ChallengeCustomData(put(value)));
	return value;
}

template <typename T> void impl_IPlayReadyServiceRequest<T>::ChallengeCustomData(StringReference const & value) const
{
	check(shim()->put_ChallengeCustomData(get(value)));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPlayReadyServiceRequest<T>::BeginServiceRequest() const
{
	Windows::Foundation::IAsyncAction action;
	check(shim()->abi_BeginServiceRequest(put(action)));
	return action;
}

template <typename T> Windows::Media::Protection::PlayReady::IPlayReadyServiceRequest impl_IPlayReadyServiceRequest<T>::NextServiceRequest() const
{
	Windows::Media::Protection::PlayReady::IPlayReadyServiceRequest serviceRequest;
	check(shim()->abi_NextServiceRequest(put(serviceRequest)));
	return serviceRequest;
}

template <typename T> Windows::Media::Protection::PlayReady::PlayReadySoapMessage impl_IPlayReadyServiceRequest<T>::GenerateManualEnablingChallenge() const
{
	Windows::Media::Protection::PlayReady::PlayReadySoapMessage challengeMessage = nullptr;
	check(shim()->abi_GenerateManualEnablingChallenge(put(challengeMessage)));
	return challengeMessage;
}

template <typename T> GUID impl_IPlayReadyDomainJoinServiceRequest<T>::DomainAccountId() const
{
	GUID value = {};
	check(shim()->get_DomainAccountId(&value));
	return value;
}

template <typename T> void impl_IPlayReadyDomainJoinServiceRequest<T>::DomainAccountId(GUID const value) const
{
	check(shim()->put_DomainAccountId(value));
}

template <typename T> String impl_IPlayReadyDomainJoinServiceRequest<T>::DomainFriendlyName() const
{
	String value;
	check(shim()->get_DomainFriendlyName(put(value)));
	return value;
}

template <typename T> void impl_IPlayReadyDomainJoinServiceRequest<T>::DomainFriendlyName(StringReference const & value) const
{
	check(shim()->put_DomainFriendlyName(get(value)));
}

template <typename T> GUID impl_IPlayReadyDomainJoinServiceRequest<T>::DomainServiceId() const
{
	GUID value = {};
	check(shim()->get_DomainServiceId(&value));
	return value;
}

template <typename T> void impl_IPlayReadyDomainJoinServiceRequest<T>::DomainServiceId(GUID const value) const
{
	check(shim()->put_DomainServiceId(value));
}

template <typename T> GUID impl_IPlayReadyDomainLeaveServiceRequest<T>::DomainAccountId() const
{
	GUID value = {};
	check(shim()->get_DomainAccountId(&value));
	return value;
}

template <typename T> void impl_IPlayReadyDomainLeaveServiceRequest<T>::DomainAccountId(GUID const value) const
{
	check(shim()->put_DomainAccountId(value));
}

template <typename T> GUID impl_IPlayReadyDomainLeaveServiceRequest<T>::DomainServiceId() const
{
	GUID value = {};
	check(shim()->get_DomainServiceId(&value));
	return value;
}

template <typename T> void impl_IPlayReadyDomainLeaveServiceRequest<T>::DomainServiceId(GUID const value) const
{
	check(shim()->put_DomainServiceId(value));
}

template <typename T> Windows::Media::Protection::PlayReady::PlayReadyContentHeader impl_IPlayReadyLicenseAcquisitionServiceRequest<T>::ContentHeader() const
{
	Windows::Media::Protection::PlayReady::PlayReadyContentHeader value = nullptr;
	check(shim()->get_ContentHeader(put(value)));
	return value;
}

template <typename T> void impl_IPlayReadyLicenseAcquisitionServiceRequest<T>::ContentHeader(Windows::Media::Protection::PlayReady::PlayReadyContentHeader const & value) const
{
	check(shim()->put_ContentHeader(get(value)));
}

template <typename T> GUID impl_IPlayReadyLicenseAcquisitionServiceRequest<T>::DomainServiceId() const
{
	GUID value = {};
	check(shim()->get_DomainServiceId(&value));
	return value;
}

template <typename T> void impl_IPlayReadyLicenseAcquisitionServiceRequest<T>::DomainServiceId(GUID const value) const
{
	check(shim()->put_DomainServiceId(value));
}

template <typename T> GUID impl_IPlayReadySecureStopServiceRequest<T>::SessionID() const
{
	GUID value = {};
	check(shim()->get_SessionID(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPlayReadySecureStopServiceRequest<T>::StartTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_StartTime(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPlayReadySecureStopServiceRequest<T>::UpdateTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_UpdateTime(&value));
	return value;
}

template <typename T> bool impl_IPlayReadySecureStopServiceRequest<T>::Stopped() const
{
	bool value = {};
	check(shim()->get_Stopped(put(value)));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace Media { namespace SpeechRecognition {

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionResultStatus impl_ISpeechRecognitionCompilationResult<T>::Status() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionResultStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_ISpeechRecognizerTimeouts<T>::InitialSilenceTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_InitialSilenceTimeout(&value));
	return value;
}

template <typename T> void impl_ISpeechRecognizerTimeouts<T>::InitialSilenceTimeout(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_InitialSilenceTimeout(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_ISpeechRecognizerTimeouts<T>::EndSilenceTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_EndSilenceTimeout(&value));
	return value;
}

template <typename T> void impl_ISpeechRecognizerTimeouts<T>::EndSilenceTimeout(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_EndSilenceTimeout(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_ISpeechRecognizerTimeouts<T>::BabbleTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_BabbleTimeout(&value));
	return value;
}

template <typename T> void impl_ISpeechRecognizerTimeouts<T>::BabbleTimeout(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_BabbleTimeout(value));
}

template <typename T> String impl_ISpeechRecognizerUIOptions<T>::ExampleText() const
{
	String value;
	check(shim()->get_ExampleText(put(value)));
	return value;
}

template <typename T> void impl_ISpeechRecognizerUIOptions<T>::ExampleText(StringReference const & value) const
{
	check(shim()->put_ExampleText(get(value)));
}

template <typename T> String impl_ISpeechRecognizerUIOptions<T>::AudiblePrompt() const
{
	String value;
	check(shim()->get_AudiblePrompt(put(value)));
	return value;
}

template <typename T> void impl_ISpeechRecognizerUIOptions<T>::AudiblePrompt(StringReference const & value) const
{
	check(shim()->put_AudiblePrompt(get(value)));
}

template <typename T> bool impl_ISpeechRecognizerUIOptions<T>::IsReadBackEnabled() const
{
	bool value = {};
	check(shim()->get_IsReadBackEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISpeechRecognizerUIOptions<T>::IsReadBackEnabled(bool const value) const
{
	check(shim()->put_IsReadBackEnabled(value));
}

template <typename T> bool impl_ISpeechRecognizerUIOptions<T>::ShowConfirmation() const
{
	bool value = {};
	check(shim()->get_ShowConfirmation(put(value)));
	return value;
}

template <typename T> void impl_ISpeechRecognizerUIOptions<T>::ShowConfirmation(bool const value) const
{
	check(shim()->put_ShowConfirmation(value));
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionResultStatus impl_ISpeechRecognitionResult<T>::Status() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionResultStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> String impl_ISpeechRecognitionResult<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionConfidence impl_ISpeechRecognitionResult<T>::Confidence() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionConfidence value = {};
	check(shim()->get_Confidence(&value));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionSemanticInterpretation impl_ISpeechRecognitionResult<T>::SemanticInterpretation() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionSemanticInterpretation value = nullptr;
	check(shim()->get_SemanticInterpretation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::SpeechRecognition::SpeechRecognitionResult> impl_ISpeechRecognitionResult<T>::GetAlternates(unsigned const maxAlternates) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::SpeechRecognition::SpeechRecognitionResult> alternates;
	check(shim()->abi_GetAlternates(maxAlternates, put(alternates)));
	return alternates;
}

template <typename T> Windows::Media::SpeechRecognition::ISpeechRecognitionConstraint impl_ISpeechRecognitionResult<T>::Constraint() const
{
	Windows::Media::SpeechRecognition::ISpeechRecognitionConstraint value;
	check(shim()->get_Constraint(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISpeechRecognitionResult<T>::RulePath() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_RulePath(put(value)));
	return value;
}

template <typename T> double impl_ISpeechRecognitionResult<T>::RawConfidence() const
{
	double value = {};
	check(shim()->get_RawConfidence(&value));
	return value;
}

template <typename T> bool impl_ISpeechRecognitionConstraint<T>::IsEnabled() const
{
	bool value = {};
	check(shim()->get_IsEnabled(put(value)));
	return value;
}

template <typename T> void impl_ISpeechRecognitionConstraint<T>::IsEnabled(bool const value) const
{
	check(shim()->put_IsEnabled(value));
}

template <typename T> String impl_ISpeechRecognitionConstraint<T>::Tag() const
{
	String value;
	check(shim()->get_Tag(put(value)));
	return value;
}

template <typename T> void impl_ISpeechRecognitionConstraint<T>::Tag(StringReference const & value) const
{
	check(shim()->put_Tag(get(value)));
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionConstraintType impl_ISpeechRecognitionConstraint<T>::Type() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionConstraintType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionConstraintProbability impl_ISpeechRecognitionConstraint<T>::Probability() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionConstraintProbability value = {};
	check(shim()->get_Probability(&value));
	return value;
}

template <typename T> void impl_ISpeechRecognitionConstraint<T>::Probability(Windows::Media::SpeechRecognition::SpeechRecognitionConstraintProbability const value) const
{
	check(shim()->put_Probability(value));
}

template <typename T> Windows::Foundation::DateTime impl_ISpeechRecognitionResult2<T>::PhraseStartTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_PhraseStartTime(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_ISpeechRecognitionResult2<T>::PhraseDuration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_PhraseDuration(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::Foundation::Collections::IVectorView<String>> impl_ISpeechRecognitionSemanticInterpretation<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::Foundation::Collections::IVectorView<String>> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionScenario impl_ISpeechRecognitionTopicConstraint<T>::Scenario() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionScenario value = {};
	check(shim()->get_Scenario(&value));
	return value;
}

template <typename T> String impl_ISpeechRecognitionTopicConstraint<T>::TopicHint() const
{
	String value;
	check(shim()->get_TopicHint(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionTopicConstraint impl_ISpeechRecognitionTopicConstraintFactory<T>::Create(Windows::Media::SpeechRecognition::SpeechRecognitionScenario const scenario, StringReference const & topicHint) const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionTopicConstraint constraint = nullptr;
	check(shim()->abi_Create(scenario, get(topicHint), put(constraint)));
	return constraint;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionTopicConstraint impl_ISpeechRecognitionTopicConstraintFactory<T>::CreateWithTag(Windows::Media::SpeechRecognition::SpeechRecognitionScenario const scenario, StringReference const & topicHint, StringReference const & tag) const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionTopicConstraint constraint = nullptr;
	check(shim()->abi_CreateWithTag(scenario, get(topicHint), get(tag), put(constraint)));
	return constraint;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ISpeechRecognitionListConstraint<T>::Commands() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Commands(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionListConstraint impl_ISpeechRecognitionListConstraintFactory<T>::Create(Windows::Foundation::Collections::IIterable<String> const & commands) const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionListConstraint constraint = nullptr;
	check(shim()->abi_Create(get(commands), put(constraint)));
	return constraint;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionListConstraint impl_ISpeechRecognitionListConstraintFactory<T>::CreateWithTag(Windows::Foundation::Collections::IIterable<String> const & commands, StringReference const & tag) const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionListConstraint constraint = nullptr;
	check(shim()->abi_CreateWithTag(get(commands), get(tag), put(constraint)));
	return constraint;
}

template <typename T> Windows::Storage::StorageFile impl_ISpeechRecognitionGrammarFileConstraint<T>::GrammarFile() const
{
	Windows::Storage::StorageFile value = nullptr;
	check(shim()->get_GrammarFile(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionGrammarFileConstraint impl_ISpeechRecognitionGrammarFileConstraintFactory<T>::Create(Windows::Storage::StorageFile const & file) const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionGrammarFileConstraint constraint = nullptr;
	check(shim()->abi_Create(get(file), put(constraint)));
	return constraint;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionGrammarFileConstraint impl_ISpeechRecognitionGrammarFileConstraintFactory<T>::CreateWithTag(Windows::Storage::StorageFile const & file, StringReference const & tag) const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionGrammarFileConstraint constraint = nullptr;
	check(shim()->abi_CreateWithTag(get(file), get(tag), put(constraint)));
	return constraint;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionAudioProblem impl_ISpeechRecognitionQualityDegradingEventArgs<T>::Problem() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionAudioProblem value = {};
	check(shim()->get_Problem(&value));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognizerState impl_ISpeechRecognizerStateChangedEventArgs<T>::State() const
{
	Windows::Media::SpeechRecognition::SpeechRecognizerState value = {};
	check(shim()->get_State(&value));
	return value;
}

template <typename T> Windows::Globalization::Language impl_ISpeechRecognizer<T>::CurrentLanguage() const
{
	Windows::Globalization::Language language = nullptr;
	check(shim()->get_CurrentLanguage(put(language)));
	return language;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::SpeechRecognition::ISpeechRecognitionConstraint> impl_ISpeechRecognizer<T>::Constraints() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::SpeechRecognition::ISpeechRecognitionConstraint> value;
	check(shim()->get_Constraints(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognizerTimeouts impl_ISpeechRecognizer<T>::Timeouts() const
{
	Windows::Media::SpeechRecognition::SpeechRecognizerTimeouts value = nullptr;
	check(shim()->get_Timeouts(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognizerUIOptions impl_ISpeechRecognizer<T>::UIOptions() const
{
	Windows::Media::SpeechRecognition::SpeechRecognizerUIOptions value = nullptr;
	check(shim()->get_UIOptions(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::SpeechRecognition::SpeechRecognitionCompilationResult> impl_ISpeechRecognizer<T>::CompileConstraintsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechRecognition::SpeechRecognitionCompilationResult> asyncOperation;
	check(shim()->abi_CompileConstraintsAsync(put(asyncOperation)));
	return asyncOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::SpeechRecognition::SpeechRecognitionResult> impl_ISpeechRecognizer<T>::RecognizeAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechRecognition::SpeechRecognitionResult> asyncOperation;
	check(shim()->abi_RecognizeAsync(put(asyncOperation)));
	return asyncOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::SpeechRecognition::SpeechRecognitionResult> impl_ISpeechRecognizer<T>::RecognizeWithUIAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechRecognition::SpeechRecognitionResult> asyncOperation;
	check(shim()->abi_RecognizeWithUIAsync(put(asyncOperation)));
	return asyncOperation;
}

template <typename T> long long impl_ISpeechRecognizer<T>::RecognitionQualityDegrading(Windows::Foundation::ITypedEventHandler<Windows::Media::SpeechRecognition::SpeechRecognizer, Windows::Media::SpeechRecognition::SpeechRecognitionQualityDegradingEventArgs> const & speechRecognitionQualityDegradingHandler) const
{
	long long cookie = {};
	check(shim()->add_RecognitionQualityDegrading(get(speechRecognitionQualityDegradingHandler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ISpeechRecognizer<T>::RecognitionQualityDegrading(F speechRecognitionQualityDegradingHandler) const
{
	return RecognitionQualityDegrading(Windows::Foundation::TypedEventHandler<Windows::Media::SpeechRecognition::SpeechRecognizer, Windows::Media::SpeechRecognition::SpeechRecognitionQualityDegradingEventArgs>(speechRecognitionQualityDegradingHandler));
}

template <typename T> void impl_ISpeechRecognizer<T>::RecognitionQualityDegrading(long long const cookie) const
{
	check(shim()->remove_RecognitionQualityDegrading(cookie));
}

template <typename T> long long impl_ISpeechRecognizer<T>::StateChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::SpeechRecognition::SpeechRecognizer, Windows::Media::SpeechRecognition::SpeechRecognizerStateChangedEventArgs> const & stateChangedHandler) const
{
	long long cookie = {};
	check(shim()->add_StateChanged(get(stateChangedHandler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ISpeechRecognizer<T>::StateChanged(F stateChangedHandler) const
{
	return StateChanged(Windows::Foundation::TypedEventHandler<Windows::Media::SpeechRecognition::SpeechRecognizer, Windows::Media::SpeechRecognition::SpeechRecognizerStateChangedEventArgs>(stateChangedHandler));
}

template <typename T> void impl_ISpeechRecognizer<T>::StateChanged(long long const cookie) const
{
	check(shim()->remove_StateChanged(cookie));
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognizer impl_ISpeechRecognizerFactory<T>::Create(Windows::Globalization::Language const & language) const
{
	Windows::Media::SpeechRecognition::SpeechRecognizer recognizer = nullptr;
	check(shim()->abi_Create(get(language), put(recognizer)));
	return recognizer;
}

template <typename T> Windows::Globalization::Language impl_ISpeechRecognizerStatics<T>::SystemSpeechLanguage() const
{
	Windows::Globalization::Language language = nullptr;
	check(shim()->get_SystemSpeechLanguage(put(language)));
	return language;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> impl_ISpeechRecognizerStatics<T>::SupportedTopicLanguages() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> languages;
	check(shim()->get_SupportedTopicLanguages(put(languages)));
	return languages;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> impl_ISpeechRecognizerStatics<T>::SupportedGrammarLanguages() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> languages;
	check(shim()->get_SupportedGrammarLanguages(put(languages)));
	return languages;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession impl_ISpeechRecognizer2<T>::ContinuousRecognitionSession() const
{
	Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession value = nullptr;
	check(shim()->get_ContinuousRecognitionSession(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognizerState impl_ISpeechRecognizer2<T>::State() const
{
	Windows::Media::SpeechRecognition::SpeechRecognizerState value = {};
	check(shim()->get_State(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISpeechRecognizer2<T>::StopRecognitionAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_StopRecognitionAsync(put(value)));
	return value;
}

template <typename T> long long impl_ISpeechRecognizer2<T>::HypothesisGenerated(Windows::Foundation::ITypedEventHandler<Windows::Media::SpeechRecognition::SpeechRecognizer, Windows::Media::SpeechRecognition::SpeechRecognitionHypothesisGeneratedEventArgs> const & value) const
{
	long long returnValue = {};
	check(shim()->add_HypothesisGenerated(get(value), &returnValue));
	return returnValue;
}

template <typename T> template <typename F> long long impl_ISpeechRecognizer2<T>::HypothesisGenerated(F value) const
{
	return HypothesisGenerated(Windows::Foundation::TypedEventHandler<Windows::Media::SpeechRecognition::SpeechRecognizer, Windows::Media::SpeechRecognition::SpeechRecognitionHypothesisGeneratedEventArgs>(value));
}

template <typename T> void impl_ISpeechRecognizer2<T>::HypothesisGenerated(long long const value) const
{
	check(shim()->remove_HypothesisGenerated(value));
}

template <typename T> String impl_ISpeechRecognitionHypothesis<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionHypothesis impl_ISpeechRecognitionHypothesisGeneratedEventArgs<T>::Hypothesis() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionHypothesis value = nullptr;
	check(shim()->get_Hypothesis(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_ISpeechContinuousRecognitionSession<T>::AutoStopSilenceTimeout() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_AutoStopSilenceTimeout(&value));
	return value;
}

template <typename T> void impl_ISpeechContinuousRecognitionSession<T>::AutoStopSilenceTimeout(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_AutoStopSilenceTimeout(value));
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISpeechContinuousRecognitionSession<T>::StartAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_StartAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISpeechContinuousRecognitionSession<T>::StartAsync(Windows::Media::SpeechRecognition::SpeechContinuousRecognitionMode const mode) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_StartWithModeAsync(mode, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISpeechContinuousRecognitionSession<T>::StopAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_StopAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISpeechContinuousRecognitionSession<T>::CancelAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_CancelAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ISpeechContinuousRecognitionSession<T>::PauseAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_PauseAsync(put(value)));
	return value;
}

template <typename T> void impl_ISpeechContinuousRecognitionSession<T>::Resume() const
{
	check(shim()->abi_Resume());
}

template <typename T> long long impl_ISpeechContinuousRecognitionSession<T>::Completed(Windows::Foundation::ITypedEventHandler<Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession, Windows::Media::SpeechRecognition::SpeechContinuousRecognitionCompletedEventArgs> const & value) const
{
	long long returnValue = {};
	check(shim()->add_Completed(get(value), &returnValue));
	return returnValue;
}

template <typename T> template <typename F> long long impl_ISpeechContinuousRecognitionSession<T>::Completed(F value) const
{
	return Completed(Windows::Foundation::TypedEventHandler<Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession, Windows::Media::SpeechRecognition::SpeechContinuousRecognitionCompletedEventArgs>(value));
}

template <typename T> void impl_ISpeechContinuousRecognitionSession<T>::Completed(long long const value) const
{
	check(shim()->remove_Completed(value));
}

template <typename T> long long impl_ISpeechContinuousRecognitionSession<T>::ResultGenerated(Windows::Foundation::ITypedEventHandler<Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession, Windows::Media::SpeechRecognition::SpeechContinuousRecognitionResultGeneratedEventArgs> const & value) const
{
	long long returnValue = {};
	check(shim()->add_ResultGenerated(get(value), &returnValue));
	return returnValue;
}

template <typename T> template <typename F> long long impl_ISpeechContinuousRecognitionSession<T>::ResultGenerated(F value) const
{
	return ResultGenerated(Windows::Foundation::TypedEventHandler<Windows::Media::SpeechRecognition::SpeechContinuousRecognitionSession, Windows::Media::SpeechRecognition::SpeechContinuousRecognitionResultGeneratedEventArgs>(value));
}

template <typename T> void impl_ISpeechContinuousRecognitionSession<T>::ResultGenerated(long long const value) const
{
	check(shim()->remove_ResultGenerated(value));
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionResultStatus impl_ISpeechContinuousRecognitionCompletedEventArgs<T>::Status() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionResultStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Media::SpeechRecognition::SpeechRecognitionResult impl_ISpeechContinuousRecognitionResultGeneratedEventArgs<T>::Result() const
{
	Windows::Media::SpeechRecognition::SpeechRecognitionResult value = nullptr;
	check(shim()->get_Result(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace SpeechSynthesis {

template <typename T> String impl_IVoiceInformation<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IVoiceInformation<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IVoiceInformation<T>::Language() const
{
	String value;
	check(shim()->get_Language(put(value)));
	return value;
}

template <typename T> String impl_IVoiceInformation<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechSynthesis::VoiceGender impl_IVoiceInformation<T>::Gender() const
{
	Windows::Media::SpeechSynthesis::VoiceGender value = {};
	check(shim()->get_Gender(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::SpeechSynthesis::VoiceInformation> impl_IInstalledVoicesStatic<T>::AllVoices() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::SpeechSynthesis::VoiceInformation> value;
	check(shim()->get_AllVoices(put(value)));
	return value;
}

template <typename T> Windows::Media::SpeechSynthesis::VoiceInformation impl_IInstalledVoicesStatic<T>::DefaultVoice() const
{
	Windows::Media::SpeechSynthesis::VoiceInformation value = nullptr;
	check(shim()->get_DefaultVoice(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Media::IMediaMarker> impl_ISpeechSynthesisStream<T>::Markers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Media::IMediaMarker> value;
	check(shim()->get_Markers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> impl_ISpeechSynthesizer<T>::SynthesizeTextToStreamAsync(StringReference const & text) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> operation;
	check(shim()->abi_SynthesizeTextToStreamAsync(get(text), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> impl_ISpeechSynthesizer<T>::SynthesizeSsmlToStreamAsync(StringReference const & Ssml) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::SpeechSynthesis::SpeechSynthesisStream> operation;
	check(shim()->abi_SynthesizeSsmlToStreamAsync(get(Ssml), put(operation)));
	return operation;
}

template <typename T> void impl_ISpeechSynthesizer<T>::Voice(Windows::Media::SpeechSynthesis::VoiceInformation const & value) const
{
	check(shim()->put_Voice(get(value)));
}

template <typename T> Windows::Media::SpeechSynthesis::VoiceInformation impl_ISpeechSynthesizer<T>::Voice() const
{
	Windows::Media::SpeechSynthesis::VoiceInformation value = nullptr;
	check(shim()->get_Voice(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Streaming {

template <typename T> void impl_IDeviceControllerFinderHandler<T>::Invoke(Windows::Media::Streaming::IDeviceController const & sender, StringReference const & uniqueDeviceName, Windows::Media::Streaming::IBasicDevice const & device) const
{
	check(shim()->abi_Invoke(get(sender), get(uniqueDeviceName), get(device)));
}

template <typename T> void impl_IConnectionStatusHandler<T>::Invoke(Windows::Media::Streaming::IBasicDevice const & sender, Windows::Media::Streaming::ConnectionStatus const arg) const
{
	check(shim()->abi_Invoke(get(sender), arg));
}

template <typename T> void impl_ITransportParametersUpdateHandler<T>::Invoke(Windows::Media::Streaming::IMediaRenderer const & sender, Windows::Media::Streaming::ITransportParameters const & arg) const
{
	check(shim()->abi_Invoke(get(sender), get(arg)));
}

template <typename T> void impl_IRenderingParametersUpdateHandler<T>::Invoke(Windows::Media::Streaming::IMediaRenderer const & sender, Windows::Media::Streaming::RenderingParameters const & arg) const
{
	check(shim()->abi_Invoke(get(sender), arg));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Streaming::IBasicDevice> impl_IDeviceController<T>::CachedDevices() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Streaming::IBasicDevice> value;
	check(shim()->get_CachedDevices(put(value)));
	return value;
}

template <typename T> void impl_IDeviceController<T>::AddDevice(StringReference const & uniqueDeviceName) const
{
	check(shim()->abi_AddDevice(get(uniqueDeviceName)));
}

template <typename T> void impl_IDeviceController<T>::RemoveDevice(Windows::Media::Streaming::IBasicDevice const & device) const
{
	check(shim()->abi_RemoveDevice(get(device)));
}

template <typename T> long long impl_IDeviceController<T>::DeviceArrival(Windows::Media::Streaming::IDeviceControllerFinderHandler const & handler) const
{
	long long token = {};
	check(shim()->add_DeviceArrival(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDeviceController<T>::DeviceArrival(F handler) const
{
	return DeviceArrival(Windows::Media::Streaming::DeviceControllerFinderHandler(handler));
}

template <typename T> void impl_IDeviceController<T>::DeviceArrival(long long const token) const
{
	check(shim()->remove_DeviceArrival(token));
}

template <typename T> long long impl_IDeviceController<T>::DeviceDeparture(Windows::Media::Streaming::IDeviceControllerFinderHandler const & handler) const
{
	long long token = {};
	check(shim()->add_DeviceDeparture(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDeviceController<T>::DeviceDeparture(F handler) const
{
	return DeviceDeparture(Windows::Media::Streaming::DeviceControllerFinderHandler(handler));
}

template <typename T> void impl_IDeviceController<T>::DeviceDeparture(long long const token) const
{
	check(shim()->remove_DeviceDeparture(token));
}

template <typename T> String impl_IBasicDevice<T>::FriendlyName() const
{
	String value;
	check(shim()->get_FriendlyName(put(value)));
	return value;
}

template <typename T> void impl_IBasicDevice<T>::FriendlyName(StringReference const & value) const
{
	check(shim()->put_FriendlyName(get(value)));
}

template <typename T> String impl_IBasicDevice<T>::ManufacturerName() const
{
	String value;
	check(shim()->get_ManufacturerName(put(value)));
	return value;
}

template <typename T> String impl_IBasicDevice<T>::ManufacturerUrl() const
{
	String value;
	check(shim()->get_ManufacturerUrl(put(value)));
	return value;
}

template <typename T> String impl_IBasicDevice<T>::UniqueDeviceName() const
{
	String value;
	check(shim()->get_UniqueDeviceName(put(value)));
	return value;
}

template <typename T> String impl_IBasicDevice<T>::ModelName() const
{
	String value;
	check(shim()->get_ModelName(put(value)));
	return value;
}

template <typename T> String impl_IBasicDevice<T>::ModelNumber() const
{
	String value;
	check(shim()->get_ModelNumber(put(value)));
	return value;
}

template <typename T> String impl_IBasicDevice<T>::ModelUrl() const
{
	String value;
	check(shim()->get_ModelUrl(put(value)));
	return value;
}

template <typename T> String impl_IBasicDevice<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> String impl_IBasicDevice<T>::SerialNumber() const
{
	String value;
	check(shim()->get_SerialNumber(put(value)));
	return value;
}

template <typename T> String impl_IBasicDevice<T>::PresentationUrl() const
{
	String value;
	check(shim()->get_PresentationUrl(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IBasicDevice<T>::RemoteStreamingUrls() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_RemoteStreamingUrls(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IBasicDevice<T>::PhysicalAddresses() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_PhysicalAddresses(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IBasicDevice<T>::IpAddresses() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_IpAddresses(put(value)));
	return value;
}

template <typename T> bool impl_IBasicDevice<T>::CanWakeDevices() const
{
	bool value = {};
	check(shim()->get_CanWakeDevices(put(value)));
	return value;
}

template <typename T> bool impl_IBasicDevice<T>::DiscoveredOnCurrentNetwork() const
{
	bool value = {};
	check(shim()->get_DiscoveredOnCurrentNetwork(put(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::DeviceTypes impl_IBasicDevice<T>::Type() const
{
	Windows::Media::Streaming::DeviceTypes value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Media::Streaming::IDeviceIcon> impl_IBasicDevice<T>::Icons() const
{
	Windows::Foundation::Collections::IVector<Windows::Media::Streaming::IDeviceIcon> value;
	check(shim()->get_Icons(put(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::ConnectionStatus impl_IBasicDevice<T>::ConnectionStatus() const
{
	Windows::Media::Streaming::ConnectionStatus value = {};
	check(shim()->get_ConnectionStatus(&value));
	return value;
}

template <typename T> long long impl_IBasicDevice<T>::ConnectionStatusChanged(Windows::Media::Streaming::IConnectionStatusHandler const & handler) const
{
	long long token = {};
	check(shim()->add_ConnectionStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBasicDevice<T>::ConnectionStatusChanged(F handler) const
{
	return ConnectionStatusChanged(Windows::Media::Streaming::ConnectionStatusHandler(handler));
}

template <typename T> void impl_IBasicDevice<T>::ConnectionStatusChanged(long long const token) const
{
	check(shim()->remove_ConnectionStatusChanged(token));
}

template <typename T> unsigned impl_IActiveBasicDevice<T>::MaxVolume() const
{
	unsigned value = {};
	check(shim()->get_MaxVolume(&value));
	return value;
}

template <typename T> bool impl_IActiveBasicDevice<T>::IsMuteSupported() const
{
	bool value = {};
	check(shim()->get_IsMuteSupported(put(value)));
	return value;
}

template <typename T> bool impl_IActiveBasicDevice<T>::IsSetNextSourceSupported() const
{
	bool value = {};
	check(shim()->get_IsSetNextSourceSupported(put(value)));
	return value;
}

template <typename T> bool impl_IActiveBasicDevice<T>::IsAudioSupported() const
{
	bool value = {};
	check(shim()->get_IsAudioSupported(put(value)));
	return value;
}

template <typename T> bool impl_IActiveBasicDevice<T>::IsVideoSupported() const
{
	bool value = {};
	check(shim()->get_IsVideoSupported(put(value)));
	return value;
}

template <typename T> bool impl_IActiveBasicDevice<T>::IsImageSupported() const
{
	bool value = {};
	check(shim()->get_IsImageSupported(put(value)));
	return value;
}

template <typename T> bool impl_IActiveBasicDevice<T>::IsSearchSupported() const
{
	bool value = {};
	check(shim()->get_IsSearchSupported(put(value)));
	return value;
}

template <typename T> String impl_IActiveBasicDevice<T>::GetCachedSinkProtocolInfo() const
{
	String value;
	check(shim()->abi_GetCachedSinkProtocolInfo(put(value)));
	return value;
}

template <typename T> void impl_IActiveBasicDevice<T>::SetCachedSinkProtocolInfo(StringReference const & value) const
{
	check(shim()->abi_SetCachedSinkProtocolInfo(get(value)));
}

template <typename T> String impl_IActiveBasicDevice<T>::GetCachedExtraSinkProtocolInfo() const
{
	String value;
	check(shim()->abi_GetCachedExtraSinkProtocolInfo(put(value)));
	return value;
}

template <typename T> unsigned long long impl_IActiveBasicDevice<T>::GetEffectiveBandwidth(bool const transmitSpeed) const
{
	unsigned long long currentSpeed = {};
	check(shim()->abi_GetEffectiveBandwidth(transmitSpeed, &currentSpeed));
	return currentSpeed;
}

template <typename T> unsigned long long impl_IActiveBasicDevice<T>::GetCachedBitrateMeasurement(GUID const physicalNetworkInterface) const
{
	unsigned long long bitrate = {};
	check(shim()->abi_GetCachedBitrateMeasurement(physicalNetworkInterface, &bitrate));
	return bitrate;
}

template <typename T> void impl_IActiveBasicDevice<T>::SetCachedBitrateMeasurement(GUID const physicalNetworkInterface, unsigned long long const bitrate) const
{
	check(shim()->abi_SetCachedBitrateMeasurement(physicalNetworkInterface, bitrate));
}

template <typename T> GUID impl_IActiveBasicDevice<T>::LogicalNetworkInterface() const
{
	GUID logicalNetworkInterface = {};
	check(shim()->get_LogicalNetworkInterface(&logicalNetworkInterface));
	return logicalNetworkInterface;
}

template <typename T> GUID impl_IActiveBasicDevice<T>::PhysicalNetworkInterface() const
{
	GUID physicalNetworkInterface = {};
	check(shim()->get_PhysicalNetworkInterface(&physicalNetworkInterface));
	return physicalNetworkInterface;
}

template <typename T> void impl_IActiveBasicDevice<T>::NotifyStreamingStatus(bool const fIsStreaming) const
{
	check(shim()->abi_NotifyStreamingStatus(fIsStreaming));
}

template <typename T> unsigned impl_IDeviceIcon<T>::Width() const
{
	unsigned value = {};
	check(shim()->get_Width(&value));
	return value;
}

template <typename T> unsigned impl_IDeviceIcon<T>::Height() const
{
	unsigned value = {};
	check(shim()->get_Height(&value));
	return value;
}

template <typename T> String impl_IDeviceIcon<T>::ContentType() const
{
	String value;
	check(shim()->get_ContentType(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStreamWithContentType impl_IDeviceIcon<T>::Stream() const
{
	Windows::Storage::Streams::IRandomAccessStreamWithContentType value;
	check(shim()->get_Stream(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::ActiveBasicDevice> impl_IActiveBasicDeviceStatics<T>::CreateBasicDeviceAsync(StringReference const & deviceIdentifier, Windows::Media::Streaming::DeviceTypes const type) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::ActiveBasicDevice> value;
	check(shim()->abi_CreateBasicDeviceAsync(get(deviceIdentifier), type, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::ActiveBasicDevice> impl_IActiveBasicDeviceStatics<T>::CloneBasicDeviceAsync(Windows::Media::Streaming::IBasicDevice const & basicDevice) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::ActiveBasicDevice> value;
	check(shim()->abi_CloneBasicDeviceAsync(get(basicDevice), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::DevicePair> impl_IActiveBasicDeviceStatics<T>::GetDevicesOnMatchingNetworkAsync(Windows::Media::Streaming::IActiveBasicDevice const & server, Windows::Media::Streaming::IActiveBasicDevice const & renderer, bool const optimizeForProxying, bool const allowChangeRendererNetwork) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::DevicePair> operation;
	check(shim()->abi_GetDevicesOnMatchingNetworkAsync(get(server), get(renderer), optimizeForProxying, allowChangeRendererNetwork, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::DevicePair> impl_IActiveBasicDeviceStatics<T>::CreateDevicesOnMatchingNetworkAsync(StringReference const & serverUDN, Windows::Media::Streaming::IActiveBasicDevice const & renderer, bool const optimizeForProxying, bool const allowChangeRendererNetwork) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::DevicePair> operation;
	check(shim()->abi_CreateDevicesOnMatchingNetworkAsync(get(serverUDN), get(renderer), optimizeForProxying, allowChangeRendererNetwork, put(operation)));
	return operation;
}

template <typename T> Windows::Media::Streaming::ActiveBasicDevice impl_IDevicePair<T>::Server() const
{
	Windows::Media::Streaming::ActiveBasicDevice value = nullptr;
	check(shim()->get_Server(put(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::ActiveBasicDevice impl_IDevicePair<T>::Renderer() const
{
	Windows::Media::Streaming::ActiveBasicDevice value = nullptr;
	check(shim()->get_Renderer(put(value)));
	return value;
}

template <typename T> bool impl_IMediaRenderer<T>::IsAudioSupported() const
{
	bool value = {};
	check(shim()->get_IsAudioSupported(put(value)));
	return value;
}

template <typename T> bool impl_IMediaRenderer<T>::IsVideoSupported() const
{
	bool value = {};
	check(shim()->get_IsVideoSupported(put(value)));
	return value;
}

template <typename T> bool impl_IMediaRenderer<T>::IsImageSupported() const
{
	bool value = {};
	check(shim()->get_IsImageSupported(put(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::IMediaRendererActionInformation impl_IMediaRenderer<T>::ActionInformation() const
{
	Windows::Media::Streaming::IMediaRendererActionInformation value;
	check(shim()->get_ActionInformation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IMediaRenderer<T>::SetSourceFromUriAsync(StringReference const & URI) const
{
	Windows::Foundation::IAsyncOperation<unsigned> value;
	check(shim()->abi_SetSourceFromUriAsync(get(URI), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IMediaRenderer<T>::SetSourceFromStreamAsync(IInspectable const & stream) const
{
	Windows::Foundation::IAsyncOperation<unsigned> value;
	check(shim()->abi_SetSourceFromStreamAsync(get(stream), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IMediaRenderer<T>::SetSourceFromMediaSourceAsync(IInspectable const & mediaSource) const
{
	Windows::Foundation::IAsyncOperation<unsigned> value;
	check(shim()->abi_SetSourceFromMediaSourceAsync(get(mediaSource), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IMediaRenderer<T>::SetNextSourceFromUriAsync(StringReference const & URI) const
{
	Windows::Foundation::IAsyncOperation<unsigned> value;
	check(shim()->abi_SetNextSourceFromUriAsync(get(URI), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IMediaRenderer<T>::SetNextSourceFromStreamAsync(IInspectable const & stream) const
{
	Windows::Foundation::IAsyncOperation<unsigned> value;
	check(shim()->abi_SetNextSourceFromStreamAsync(get(stream), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IMediaRenderer<T>::SetNextSourceFromMediaSourceAsync(IInspectable const & mediaSource) const
{
	Windows::Foundation::IAsyncOperation<unsigned> value;
	check(shim()->abi_SetNextSourceFromMediaSourceAsync(get(mediaSource), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaRenderer<T>::PlayAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_PlayAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaRenderer<T>::PlayAtSpeedAsync(Windows::Media::Streaming::PlaySpeed const & playSpeed) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_PlayAtSpeedAsync(playSpeed, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaRenderer<T>::StopAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_StopAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaRenderer<T>::PauseAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_PauseAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IMediaRenderer<T>::GetMuteAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> value;
	check(shim()->abi_GetMuteAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaRenderer<T>::SetMuteAsync(bool const mute) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_SetMuteAsync(mute, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IMediaRenderer<T>::GetVolumeAsync() const
{
	Windows::Foundation::IAsyncOperation<unsigned> value;
	check(shim()->abi_GetVolumeAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaRenderer<T>::SetVolumeAsync(unsigned const volume) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_SetVolumeAsync(volume, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaRenderer<T>::SeekAsync(Windows::Foundation::TimeSpan const & target) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_SeekAsync(target, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Media::Streaming::TransportInformation> impl_IMediaRenderer<T>::GetTransportInformationAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Media::Streaming::TransportInformation> value;
	check(shim()->abi_GetTransportInformationAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Media::Streaming::PositionInformation> impl_IMediaRenderer<T>::GetPositionInformationAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Media::Streaming::PositionInformation> value;
	check(shim()->abi_GetPositionInformationAsync(put(value)));
	return value;
}

template <typename T> long long impl_IMediaRenderer<T>::TransportParametersUpdate(Windows::Media::Streaming::ITransportParametersUpdateHandler const & handler) const
{
	long long token = {};
	check(shim()->add_TransportParametersUpdate(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaRenderer<T>::TransportParametersUpdate(F handler) const
{
	return TransportParametersUpdate(Windows::Media::Streaming::TransportParametersUpdateHandler(handler));
}

template <typename T> void impl_IMediaRenderer<T>::TransportParametersUpdate(long long const token) const
{
	check(shim()->remove_TransportParametersUpdate(token));
}

template <typename T> long long impl_IMediaRenderer<T>::RenderingParametersUpdate(Windows::Media::Streaming::IRenderingParametersUpdateHandler const & handler) const
{
	long long token = {};
	check(shim()->add_RenderingParametersUpdate(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMediaRenderer<T>::RenderingParametersUpdate(F handler) const
{
	return RenderingParametersUpdate(Windows::Media::Streaming::RenderingParametersUpdateHandler(handler));
}

template <typename T> void impl_IMediaRenderer<T>::RenderingParametersUpdate(long long const token) const
{
	check(shim()->remove_RenderingParametersUpdate(token));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMediaRenderer<T>::NextAsync() const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_NextAsync(put(value)));
	return value;
}

template <typename T> bool impl_IMediaRendererActionInformation<T>::IsMuteAvailable() const
{
	bool value = {};
	check(shim()->get_IsMuteAvailable(put(value)));
	return value;
}

template <typename T> bool impl_IMediaRendererActionInformation<T>::IsPauseAvailable() const
{
	bool value = {};
	check(shim()->get_IsPauseAvailable(put(value)));
	return value;
}

template <typename T> bool impl_IMediaRendererActionInformation<T>::IsPlayAvailable() const
{
	bool value = {};
	check(shim()->get_IsPlayAvailable(put(value)));
	return value;
}

template <typename T> bool impl_IMediaRendererActionInformation<T>::IsSeekAvailable() const
{
	bool value = {};
	check(shim()->get_IsSeekAvailable(put(value)));
	return value;
}

template <typename T> bool impl_IMediaRendererActionInformation<T>::IsSetNextSourceAvailable() const
{
	bool value = {};
	check(shim()->get_IsSetNextSourceAvailable(put(value)));
	return value;
}

template <typename T> bool impl_IMediaRendererActionInformation<T>::IsStopAvailable() const
{
	bool value = {};
	check(shim()->get_IsStopAvailable(put(value)));
	return value;
}

template <typename T> bool impl_IMediaRendererActionInformation<T>::IsVolumeAvailable() const
{
	bool value = {};
	check(shim()->get_IsVolumeAvailable(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Media::Streaming::PlaySpeed> impl_IMediaRendererActionInformation<T>::PlaySpeeds() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Media::Streaming::PlaySpeed> value;
	check(shim()->get_PlaySpeeds(put(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::IMediaRendererActionInformation impl_ITransportParameters<T>::ActionInformation() const
{
	Windows::Media::Streaming::IMediaRendererActionInformation value;
	check(shim()->get_ActionInformation(put(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::TrackInformation impl_ITransportParameters<T>::TrackInformation() const
{
	Windows::Media::Streaming::TrackInformation value = {};
	check(shim()->get_TrackInformation(&value));
	return value;
}

template <typename T> Windows::Media::Streaming::TransportInformation impl_ITransportParameters<T>::TransportInformation() const
{
	Windows::Media::Streaming::TransportInformation value = {};
	check(shim()->get_TransportInformation(&value));
	return value;
}

template <typename T> Windows::Media::Streaming::CreateMediaRendererOperation impl_IMediaRendererFactory<T>::CreateMediaRendererAsync(StringReference const & deviceIdentifier) const
{
	Windows::Media::Streaming::CreateMediaRendererOperation value = nullptr;
	check(shim()->abi_CreateMediaRendererAsync(get(deviceIdentifier), put(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::CreateMediaRendererOperation impl_IMediaRendererFactory<T>::CreateMediaRendererFromBasicDeviceAsync(Windows::Media::Streaming::IBasicDevice const & basicDevice) const
{
	Windows::Media::Streaming::CreateMediaRendererOperation value = nullptr;
	check(shim()->abi_CreateMediaRendererFromBasicDeviceAsync(get(basicDevice), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> impl_IStreamSelectorStatics<T>::SelectBestStreamAsync(Windows::Storage::StorageFile const & storageFile, Windows::Foundation::Collections::IPropertySet const & selectorProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> value;
	check(shim()->abi_SelectBestStreamAsync(get(storageFile), get(selectorProperties), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet>> impl_IStreamSelectorStatics<T>::GetStreamPropertiesAsync(Windows::Storage::StorageFile const & storageFile, Windows::Foundation::Collections::IPropertySet const & selectorProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet>> value;
	check(shim()->abi_GetStreamPropertiesAsync(get(storageFile), get(selectorProperties), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> impl_IStreamSelectorStatics<T>::SelectBestStreamFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Foundation::Collections::IPropertySet const & selectorProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> value;
	check(shim()->abi_SelectBestStreamFromStreamAsync(get(stream), get(selectorProperties), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet>> impl_IStreamSelectorStatics<T>::GetStreamPropertiesFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Foundation::Collections::IPropertySet const & selectorProperties) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IPropertySet>> value;
	check(shim()->abi_GetStreamPropertiesFromStreamAsync(get(stream), get(selectorProperties), put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Streaming { namespace Adaptive {

template <typename T> Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCreationStatus impl_IAdaptiveMediaSourceCreationResult<T>::Status() const
{
	Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCreationStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Media::Streaming::Adaptive::AdaptiveMediaSource impl_IAdaptiveMediaSourceCreationResult<T>::MediaSource() const
{
	Windows::Media::Streaming::Adaptive::AdaptiveMediaSource value = nullptr;
	check(shim()->get_MediaSource(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpResponseMessage impl_IAdaptiveMediaSourceCreationResult<T>::HttpResponseMessage() const
{
	Windows::Web::Http::HttpResponseMessage value = nullptr;
	check(shim()->get_HttpResponseMessage(put(value)));
	return value;
}

template <typename T> bool impl_IAdaptiveMediaSourceStatics<T>::IsContentTypeSupported(StringReference const & contentType) const
{
	bool result = {};
	check(shim()->abi_IsContentTypeSupported(get(contentType), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCreationResult> impl_IAdaptiveMediaSourceStatics<T>::CreateFromUriAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCreationResult> result;
	check(shim()->abi_CreateFromUriAsync(get(uri), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCreationResult> impl_IAdaptiveMediaSourceStatics<T>::CreateFromUriAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::HttpClient const & httpClient) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCreationResult> result;
	check(shim()->abi_CreateFromUriWithDownloaderAsync(get(uri), get(httpClient), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCreationResult> impl_IAdaptiveMediaSourceStatics<T>::CreateFromStreamAsync(Windows::Storage::Streams::IInputStream const & stream, Windows::Foundation::Uri const & uri, StringReference const & contentType) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCreationResult> result;
	check(shim()->abi_CreateFromStreamAsync(get(stream), get(uri), get(contentType), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCreationResult> impl_IAdaptiveMediaSourceStatics<T>::CreateFromStreamAsync(Windows::Storage::Streams::IInputStream const & stream, Windows::Foundation::Uri const & uri, StringReference const & contentType, Windows::Web::Http::HttpClient const & httpClient) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCreationResult> result;
	check(shim()->abi_CreateFromStreamWithDownloaderAsync(get(stream), get(uri), get(contentType), get(httpClient), put(result)));
	return result;
}

template <typename T> bool impl_IAdaptiveMediaSource<T>::IsLive() const
{
	bool value = {};
	check(shim()->get_IsLive(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IAdaptiveMediaSource<T>::DesiredLiveOffset() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_DesiredLiveOffset(&value));
	return value;
}

template <typename T> void impl_IAdaptiveMediaSource<T>::DesiredLiveOffset(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_DesiredLiveOffset(value));
}

template <typename T> unsigned impl_IAdaptiveMediaSource<T>::InitialBitrate() const
{
	unsigned value = {};
	check(shim()->get_InitialBitrate(&value));
	return value;
}

template <typename T> void impl_IAdaptiveMediaSource<T>::InitialBitrate(unsigned const value) const
{
	check(shim()->put_InitialBitrate(value));
}

template <typename T> unsigned impl_IAdaptiveMediaSource<T>::CurrentDownloadBitrate() const
{
	unsigned value = {};
	check(shim()->get_CurrentDownloadBitrate(&value));
	return value;
}

template <typename T> unsigned impl_IAdaptiveMediaSource<T>::CurrentPlaybackBitrate() const
{
	unsigned value = {};
	check(shim()->get_CurrentPlaybackBitrate(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IAdaptiveMediaSource<T>::AvailableBitrates() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_AvailableBitrates(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IAdaptiveMediaSource<T>::DesiredMinBitrate() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_DesiredMinBitrate(put(value)));
	return value;
}

template <typename T> void impl_IAdaptiveMediaSource<T>::DesiredMinBitrate(Windows::Foundation::IReference<unsigned> const & value) const
{
	check(shim()->put_DesiredMinBitrate(get(value)));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IAdaptiveMediaSource<T>::DesiredMaxBitrate() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_DesiredMaxBitrate(put(value)));
	return value;
}

template <typename T> void impl_IAdaptiveMediaSource<T>::DesiredMaxBitrate(Windows::Foundation::IReference<unsigned> const & value) const
{
	check(shim()->put_DesiredMaxBitrate(get(value)));
}

template <typename T> bool impl_IAdaptiveMediaSource<T>::AudioOnlyPlayback() const
{
	bool value = {};
	check(shim()->get_AudioOnlyPlayback(put(value)));
	return value;
}

template <typename T> unsigned long long impl_IAdaptiveMediaSource<T>::InboundBitsPerSecond() const
{
	unsigned long long value = {};
	check(shim()->get_InboundBitsPerSecond(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IAdaptiveMediaSource<T>::InboundBitsPerSecondWindow() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_InboundBitsPerSecondWindow(&value));
	return value;
}

template <typename T> void impl_IAdaptiveMediaSource<T>::InboundBitsPerSecondWindow(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_InboundBitsPerSecondWindow(value));
}

template <typename T> long long impl_IAdaptiveMediaSource<T>::DownloadBitrateChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Streaming::Adaptive::AdaptiveMediaSource, Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadBitrateChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_DownloadBitrateChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAdaptiveMediaSource<T>::DownloadBitrateChanged(F handler) const
{
	return DownloadBitrateChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Streaming::Adaptive::AdaptiveMediaSource, Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadBitrateChangedEventArgs>(handler));
}

template <typename T> void impl_IAdaptiveMediaSource<T>::DownloadBitrateChanged(long long const token) const
{
	check(shim()->remove_DownloadBitrateChanged(token));
}

template <typename T> long long impl_IAdaptiveMediaSource<T>::PlaybackBitrateChanged(Windows::Foundation::ITypedEventHandler<Windows::Media::Streaming::Adaptive::AdaptiveMediaSource, Windows::Media::Streaming::Adaptive::AdaptiveMediaSourcePlaybackBitrateChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_PlaybackBitrateChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAdaptiveMediaSource<T>::PlaybackBitrateChanged(F handler) const
{
	return PlaybackBitrateChanged(Windows::Foundation::TypedEventHandler<Windows::Media::Streaming::Adaptive::AdaptiveMediaSource, Windows::Media::Streaming::Adaptive::AdaptiveMediaSourcePlaybackBitrateChangedEventArgs>(handler));
}

template <typename T> void impl_IAdaptiveMediaSource<T>::PlaybackBitrateChanged(long long const token) const
{
	check(shim()->remove_PlaybackBitrateChanged(token));
}

template <typename T> long long impl_IAdaptiveMediaSource<T>::DownloadRequested(Windows::Foundation::ITypedEventHandler<Windows::Media::Streaming::Adaptive::AdaptiveMediaSource, Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_DownloadRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAdaptiveMediaSource<T>::DownloadRequested(F handler) const
{
	return DownloadRequested(Windows::Foundation::TypedEventHandler<Windows::Media::Streaming::Adaptive::AdaptiveMediaSource, Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadRequestedEventArgs>(handler));
}

template <typename T> void impl_IAdaptiveMediaSource<T>::DownloadRequested(long long const token) const
{
	check(shim()->remove_DownloadRequested(token));
}

template <typename T> long long impl_IAdaptiveMediaSource<T>::DownloadCompleted(Windows::Foundation::ITypedEventHandler<Windows::Media::Streaming::Adaptive::AdaptiveMediaSource, Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadCompletedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_DownloadCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAdaptiveMediaSource<T>::DownloadCompleted(F handler) const
{
	return DownloadCompleted(Windows::Foundation::TypedEventHandler<Windows::Media::Streaming::Adaptive::AdaptiveMediaSource, Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadCompletedEventArgs>(handler));
}

template <typename T> void impl_IAdaptiveMediaSource<T>::DownloadCompleted(long long const token) const
{
	check(shim()->remove_DownloadCompleted(token));
}

template <typename T> long long impl_IAdaptiveMediaSource<T>::DownloadFailed(Windows::Foundation::ITypedEventHandler<Windows::Media::Streaming::Adaptive::AdaptiveMediaSource, Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadFailedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_DownloadFailed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IAdaptiveMediaSource<T>::DownloadFailed(F handler) const
{
	return DownloadFailed(Windows::Foundation::TypedEventHandler<Windows::Media::Streaming::Adaptive::AdaptiveMediaSource, Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadFailedEventArgs>(handler));
}

template <typename T> void impl_IAdaptiveMediaSource<T>::DownloadFailed(long long const token) const
{
	check(shim()->remove_DownloadFailed(token));
}

template <typename T> Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceAdvancedSettings impl_IAdaptiveMediaSource2<T>::AdvancedSettings() const
{
	Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceAdvancedSettings value = nullptr;
	check(shim()->get_AdvancedSettings(put(value)));
	return value;
}

template <typename T> bool impl_IAdaptiveMediaSourceAdvancedSettings<T>::AllSegmentsIndependent() const
{
	bool value = {};
	check(shim()->get_AllSegmentsIndependent(put(value)));
	return value;
}

template <typename T> void impl_IAdaptiveMediaSourceAdvancedSettings<T>::AllSegmentsIndependent(bool const value) const
{
	check(shim()->put_AllSegmentsIndependent(value));
}

template <typename T> Windows::Foundation::IReference<double> impl_IAdaptiveMediaSourceAdvancedSettings<T>::DesiredBitrateHeadroomRatio() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_DesiredBitrateHeadroomRatio(put(value)));
	return value;
}

template <typename T> void impl_IAdaptiveMediaSourceAdvancedSettings<T>::DesiredBitrateHeadroomRatio(Windows::Foundation::IReference<double> const & value) const
{
	check(shim()->put_DesiredBitrateHeadroomRatio(get(value)));
}

template <typename T> Windows::Foundation::IReference<double> impl_IAdaptiveMediaSourceAdvancedSettings<T>::BitrateDowngradeTriggerRatio() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_BitrateDowngradeTriggerRatio(put(value)));
	return value;
}

template <typename T> void impl_IAdaptiveMediaSourceAdvancedSettings<T>::BitrateDowngradeTriggerRatio(Windows::Foundation::IReference<double> const & value) const
{
	check(shim()->put_BitrateDowngradeTriggerRatio(get(value)));
}

template <typename T> unsigned impl_IAdaptiveMediaSourceDownloadBitrateChangedEventArgs<T>::OldValue() const
{
	unsigned value = {};
	check(shim()->get_OldValue(&value));
	return value;
}

template <typename T> unsigned impl_IAdaptiveMediaSourceDownloadBitrateChangedEventArgs<T>::NewValue() const
{
	unsigned value = {};
	check(shim()->get_NewValue(&value));
	return value;
}

template <typename T> unsigned impl_IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs<T>::OldValue() const
{
	unsigned value = {};
	check(shim()->get_OldValue(&value));
	return value;
}

template <typename T> unsigned impl_IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs<T>::NewValue() const
{
	unsigned value = {};
	check(shim()->get_NewValue(&value));
	return value;
}

template <typename T> bool impl_IAdaptiveMediaSourcePlaybackBitrateChangedEventArgs<T>::AudioOnly() const
{
	bool value = {};
	check(shim()->get_AudioOnly(put(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceResourceType impl_IAdaptiveMediaSourceDownloadRequestedEventArgs<T>::ResourceType() const
{
	Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceResourceType value = {};
	check(shim()->get_ResourceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IAdaptiveMediaSourceDownloadRequestedEventArgs<T>::ResourceUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ResourceUri(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IAdaptiveMediaSourceDownloadRequestedEventArgs<T>::ResourceByteRangeOffset() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check(shim()->get_ResourceByteRangeOffset(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IAdaptiveMediaSourceDownloadRequestedEventArgs<T>::ResourceByteRangeLength() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check(shim()->get_ResourceByteRangeLength(put(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadResult impl_IAdaptiveMediaSourceDownloadRequestedEventArgs<T>::Result() const
{
	Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadResult value = nullptr;
	check(shim()->get_Result(put(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadRequestedDeferral impl_IAdaptiveMediaSourceDownloadRequestedEventArgs<T>::GetDeferral() const
{
	Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceDownloadRequestedDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> Windows::Foundation::Uri impl_IAdaptiveMediaSourceDownloadResult<T>::ResourceUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ResourceUri(put(value)));
	return value;
}

template <typename T> void impl_IAdaptiveMediaSourceDownloadResult<T>::ResourceUri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_ResourceUri(get(value)));
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IAdaptiveMediaSourceDownloadResult<T>::InputStream() const
{
	Windows::Storage::Streams::IInputStream value;
	check(shim()->get_InputStream(put(value)));
	return value;
}

template <typename T> void impl_IAdaptiveMediaSourceDownloadResult<T>::InputStream(Windows::Storage::Streams::IInputStream const & value) const
{
	check(shim()->put_InputStream(get(value)));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IAdaptiveMediaSourceDownloadResult<T>::Buffer() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Buffer(put(value)));
	return value;
}

template <typename T> void impl_IAdaptiveMediaSourceDownloadResult<T>::Buffer(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_Buffer(get(value)));
}

template <typename T> String impl_IAdaptiveMediaSourceDownloadResult<T>::ContentType() const
{
	String value;
	check(shim()->get_ContentType(put(value)));
	return value;
}

template <typename T> void impl_IAdaptiveMediaSourceDownloadResult<T>::ContentType(StringReference const & value) const
{
	check(shim()->put_ContentType(get(value)));
}

template <typename T> unsigned impl_IAdaptiveMediaSourceDownloadResult<T>::ExtendedStatus() const
{
	unsigned value = {};
	check(shim()->get_ExtendedStatus(&value));
	return value;
}

template <typename T> void impl_IAdaptiveMediaSourceDownloadResult<T>::ExtendedStatus(unsigned const value) const
{
	check(shim()->put_ExtendedStatus(value));
}

template <typename T> void impl_IAdaptiveMediaSourceDownloadRequestedDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceResourceType impl_IAdaptiveMediaSourceDownloadCompletedEventArgs<T>::ResourceType() const
{
	Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceResourceType value = {};
	check(shim()->get_ResourceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IAdaptiveMediaSourceDownloadCompletedEventArgs<T>::ResourceUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ResourceUri(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IAdaptiveMediaSourceDownloadCompletedEventArgs<T>::ResourceByteRangeOffset() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check(shim()->get_ResourceByteRangeOffset(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IAdaptiveMediaSourceDownloadCompletedEventArgs<T>::ResourceByteRangeLength() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check(shim()->get_ResourceByteRangeLength(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpResponseMessage impl_IAdaptiveMediaSourceDownloadCompletedEventArgs<T>::HttpResponseMessage() const
{
	Windows::Web::Http::HttpResponseMessage value = nullptr;
	check(shim()->get_HttpResponseMessage(put(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceResourceType impl_IAdaptiveMediaSourceDownloadFailedEventArgs<T>::ResourceType() const
{
	Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceResourceType value = {};
	check(shim()->get_ResourceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IAdaptiveMediaSourceDownloadFailedEventArgs<T>::ResourceUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ResourceUri(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IAdaptiveMediaSourceDownloadFailedEventArgs<T>::ResourceByteRangeOffset() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check(shim()->get_ResourceByteRangeOffset(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IAdaptiveMediaSourceDownloadFailedEventArgs<T>::ResourceByteRangeLength() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check(shim()->get_ResourceByteRangeLength(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpResponseMessage impl_IAdaptiveMediaSourceDownloadFailedEventArgs<T>::HttpResponseMessage() const
{
	Windows::Web::Http::HttpResponseMessage value = nullptr;
	check(shim()->get_HttpResponseMessage(put(value)));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace Media { namespace Streaming { namespace Internal {

template <typename T> Windows::Media::Streaming::CreateMediaRendererOperation impl_IMediaRendererBrokerStatics<T>::CreateMediaRendererAsync(StringReference const & deviceIdentifier, IInspectable const & mediaSessionFactoryMF, StringReference const & applicationUserModelId) const
{
	Windows::Media::Streaming::CreateMediaRendererOperation value = nullptr;
	check(shim()->abi_CreateMediaRendererAsync(get(deviceIdentifier), get(mediaSessionFactoryMF), get(applicationUserModelId), put(value)));
	return value;
}

template <typename T> Windows::Media::Streaming::CreateMediaRendererOperation impl_IMediaRendererBrokerStatics<T>::CreateMediaRendererFromBasicDeviceAsync(Windows::Media::Streaming::IBasicDevice const & basicDevice, IInspectable const & mediaSessionFactoryMF, StringReference const & applicationUserModelId) const
{
	Windows::Media::Streaming::CreateMediaRendererOperation value = nullptr;
	check(shim()->abi_CreateMediaRendererFromBasicDeviceAsync(get(basicDevice), get(mediaSessionFactoryMF), get(applicationUserModelId), put(value)));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace Media { namespace Transcoding {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> impl_IMediaTranscoder2<T>::PrepareMediaStreamSourceTranscodeAsync(Windows::Media::Core::IMediaSource const & source, Windows::Storage::Streams::IRandomAccessStream const & destination, Windows::Media::MediaProperties::MediaEncodingProfile const & profile) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> operation;
	check(shim()->abi_PrepareMediaStreamSourceTranscodeAsync(get(source), get(destination), get(profile), put(operation)));
	return operation;
}

template <typename T> void impl_IMediaTranscoder2<T>::VideoProcessingAlgorithm(Windows::Media::Transcoding::MediaVideoProcessingAlgorithm const value) const
{
	check(shim()->put_VideoProcessingAlgorithm(value));
}

template <typename T> Windows::Media::Transcoding::MediaVideoProcessingAlgorithm impl_IMediaTranscoder2<T>::VideoProcessingAlgorithm() const
{
	Windows::Media::Transcoding::MediaVideoProcessingAlgorithm value = {};
	check(shim()->get_VideoProcessingAlgorithm(&value));
	return value;
}

template <typename T> void impl_IMediaTranscoder<T>::TrimStartTime(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_TrimStartTime(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaTranscoder<T>::TrimStartTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_TrimStartTime(&value));
	return value;
}

template <typename T> void impl_IMediaTranscoder<T>::TrimStopTime(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_TrimStopTime(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMediaTranscoder<T>::TrimStopTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_TrimStopTime(&value));
	return value;
}

template <typename T> void impl_IMediaTranscoder<T>::AlwaysReencode(bool const value) const
{
	check(shim()->put_AlwaysReencode(value));
}

template <typename T> bool impl_IMediaTranscoder<T>::AlwaysReencode() const
{
	bool value = {};
	check(shim()->get_AlwaysReencode(put(value)));
	return value;
}

template <typename T> void impl_IMediaTranscoder<T>::HardwareAccelerationEnabled(bool const value) const
{
	check(shim()->put_HardwareAccelerationEnabled(value));
}

template <typename T> bool impl_IMediaTranscoder<T>::HardwareAccelerationEnabled() const
{
	bool value = {};
	check(shim()->get_HardwareAccelerationEnabled(put(value)));
	return value;
}

template <typename T> void impl_IMediaTranscoder<T>::AddAudioEffect(StringReference const & activatableClassId) const
{
	check(shim()->abi_AddAudioEffect(get(activatableClassId)));
}

template <typename T> void impl_IMediaTranscoder<T>::AddAudioEffect(StringReference const & activatableClassId, bool const effectRequired, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(shim()->abi_AddAudioEffectWithSettings(get(activatableClassId), effectRequired, get(configuration)));
}

template <typename T> void impl_IMediaTranscoder<T>::AddVideoEffect(StringReference const & activatableClassId) const
{
	check(shim()->abi_AddVideoEffect(get(activatableClassId)));
}

template <typename T> void impl_IMediaTranscoder<T>::AddVideoEffect(StringReference const & activatableClassId, bool const effectRequired, Windows::Foundation::Collections::IPropertySet const & configuration) const
{
	check(shim()->abi_AddVideoEffectWithSettings(get(activatableClassId), effectRequired, get(configuration)));
}

template <typename T> void impl_IMediaTranscoder<T>::ClearEffects() const
{
	check(shim()->abi_ClearEffects());
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> impl_IMediaTranscoder<T>::PrepareFileTranscodeAsync(Windows::Storage::IStorageFile const & source, Windows::Storage::IStorageFile const & destination, Windows::Media::MediaProperties::MediaEncodingProfile const & profile) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> operation;
	check(shim()->abi_PrepareFileTranscodeAsync(get(source), get(destination), get(profile), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> impl_IMediaTranscoder<T>::PrepareStreamTranscodeAsync(Windows::Storage::Streams::IRandomAccessStream const & source, Windows::Storage::Streams::IRandomAccessStream const & destination, Windows::Media::MediaProperties::MediaEncodingProfile const & profile) const
{
	Windows::Foundation::IAsyncOperation<Windows::Media::Transcoding::PrepareTranscodeResult> operation;
	check(shim()->abi_PrepareStreamTranscodeAsync(get(source), get(destination), get(profile), put(operation)));
	return operation;
}

template <typename T> bool impl_IPrepareTranscodeResult<T>::CanTranscode() const
{
	bool value = {};
	check(shim()->get_CanTranscode(put(value)));
	return value;
}

template <typename T> Windows::Media::Transcoding::TranscodeFailureReason impl_IPrepareTranscodeResult<T>::FailureReason() const
{
	Windows::Media::Transcoding::TranscodeFailureReason value = {};
	check(shim()->get_FailureReason(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncActionWithProgress<double> impl_IPrepareTranscodeResult<T>::TranscodeAsync() const
{
	Windows::Foundation::IAsyncActionWithProgress<double> operation;
	check(shim()->abi_TranscodeAsync(put(operation)));
	return operation;
}

}}}}

namespace winrt { namespace Windows { namespace Networking {

template <typename T> int impl_IHostNameStatics<T>::Compare(StringReference const & value1, StringReference const & value2) const
{
	int result = {};
	check(shim()->abi_Compare(get(value1), get(value2), &result));
	return result;
}

template <typename T> Windows::Networking::Connectivity::IPInformation impl_IHostName<T>::IPInformation() const
{
	Windows::Networking::Connectivity::IPInformation value = nullptr;
	check(shim()->get_IPInformation(put(value)));
	return value;
}

template <typename T> String impl_IHostName<T>::RawName() const
{
	String value;
	check(shim()->get_RawName(put(value)));
	return value;
}

template <typename T> String impl_IHostName<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IHostName<T>::CanonicalName() const
{
	String value;
	check(shim()->get_CanonicalName(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostNameType impl_IHostName<T>::Type() const
{
	Windows::Networking::HostNameType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> bool impl_IHostName<T>::IsEqual(Windows::Networking::HostName const & hostName) const
{
	bool isEqual = {};
	check(shim()->abi_IsEqual(get(hostName), put(isEqual)));
	return isEqual;
}

template <typename T> Windows::Networking::HostName impl_IHostNameFactory<T>::CreateHostName(StringReference const & hostName) const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->abi_CreateHostName(get(hostName), put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IEndpointPair<T>::LocalHostName() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_LocalHostName(put(value)));
	return value;
}

template <typename T> void impl_IEndpointPair<T>::LocalHostName(Windows::Networking::HostName const & value) const
{
	check(shim()->put_LocalHostName(get(value)));
}

template <typename T> String impl_IEndpointPair<T>::LocalServiceName() const
{
	String value;
	check(shim()->get_LocalServiceName(put(value)));
	return value;
}

template <typename T> void impl_IEndpointPair<T>::LocalServiceName(StringReference const & value) const
{
	check(shim()->put_LocalServiceName(get(value)));
}

template <typename T> Windows::Networking::HostName impl_IEndpointPair<T>::RemoteHostName() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_RemoteHostName(put(value)));
	return value;
}

template <typename T> void impl_IEndpointPair<T>::RemoteHostName(Windows::Networking::HostName const & value) const
{
	check(shim()->put_RemoteHostName(get(value)));
}

template <typename T> String impl_IEndpointPair<T>::RemoteServiceName() const
{
	String value;
	check(shim()->get_RemoteServiceName(put(value)));
	return value;
}

template <typename T> void impl_IEndpointPair<T>::RemoteServiceName(StringReference const & value) const
{
	check(shim()->put_RemoteServiceName(get(value)));
}

template <typename T> Windows::Networking::EndpointPair impl_IEndpointPairFactory<T>::CreateEndpointPair(Windows::Networking::HostName const & localHostName, StringReference const & localServiceName, Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName) const
{
	Windows::Networking::EndpointPair value = nullptr;
	check(shim()->abi_CreateEndpointPair(get(localHostName), get(localServiceName), get(remoteHostName), get(remoteServiceName), put(value)));
	return value;
}

}}}

namespace winrt { namespace Windows { namespace Networking { namespace BackgroundTransfer {

template <typename T> void impl_IBackgroundTransferBase<T>::SetRequestHeader(StringReference const & headerName, StringReference const & headerValue) const
{
	check(shim()->abi_SetRequestHeader(get(headerName), get(headerValue)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IBackgroundTransferBase<T>::ServerCredential() const
{
	Windows::Security::Credentials::PasswordCredential credential = nullptr;
	check(shim()->get_ServerCredential(put(credential)));
	return credential;
}

template <typename T> void impl_IBackgroundTransferBase<T>::ServerCredential(Windows::Security::Credentials::PasswordCredential const & credential) const
{
	check(shim()->put_ServerCredential(get(credential)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IBackgroundTransferBase<T>::ProxyCredential() const
{
	Windows::Security::Credentials::PasswordCredential credential = nullptr;
	check(shim()->get_ProxyCredential(put(credential)));
	return credential;
}

template <typename T> void impl_IBackgroundTransferBase<T>::ProxyCredential(Windows::Security::Credentials::PasswordCredential const & credential) const
{
	check(shim()->put_ProxyCredential(get(credential)));
}

template <typename T> String impl_IBackgroundTransferBase<T>::Method() const
{
	String value;
	check(shim()->get_Method(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundTransferBase<T>::Method(StringReference const & value) const
{
	check(shim()->put_Method(get(value)));
}

template <typename T> String impl_IBackgroundTransferBase<T>::Group() const
{
	String value;
	check(shim()->get_Group(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundTransferBase<T>::Group(StringReference const & value) const
{
	check(shim()->put_Group(get(value)));
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy impl_IBackgroundTransferBase<T>::CostPolicy() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy value = {};
	check(shim()->get_CostPolicy(&value));
	return value;
}

template <typename T> void impl_IBackgroundTransferBase<T>::CostPolicy(Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy const value) const
{
	check(shim()->put_CostPolicy(value));
}

template <typename T> bool impl_IUnconstrainedTransferRequestResult<T>::IsUnconstrained() const
{
	bool value = {};
	check(shim()->get_IsUnconstrained(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> impl_IBackgroundDownloaderUserConsent<T>::RequestUnconstrainedDownloadsAsync(Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::DownloadOperation> const & operations) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> operation;
	check(shim()->abi_RequestUnconstrainedDownloadsAsync(get(operations), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> impl_IBackgroundUploaderUserConsent<T>::RequestUnconstrainedUploadsAsync(Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::UploadOperation> const & operations) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> operation;
	check(shim()->abi_RequestUnconstrainedUploadsAsync(get(operations), put(operation)));
	return operation;
}

template <typename T> Windows::Networking::BackgroundTransfer::DownloadOperation impl_IBackgroundDownloader<T>::CreateDownload(Windows::Foundation::Uri const & uri, Windows::Storage::IStorageFile const & resultFile) const
{
	Windows::Networking::BackgroundTransfer::DownloadOperation operation = nullptr;
	check(shim()->abi_CreateDownload(get(uri), get(resultFile), put(operation)));
	return operation;
}

template <typename T> Windows::Networking::BackgroundTransfer::DownloadOperation impl_IBackgroundDownloader<T>::CreateDownload(Windows::Foundation::Uri const & uri, Windows::Storage::IStorageFile const & resultFile, Windows::Storage::IStorageFile const & requestBodyFile) const
{
	Windows::Networking::BackgroundTransfer::DownloadOperation operation = nullptr;
	check(shim()->abi_CreateDownloadFromFile(get(uri), get(resultFile), get(requestBodyFile), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::DownloadOperation> impl_IBackgroundDownloader<T>::CreateDownloadAsync(Windows::Foundation::Uri const & uri, Windows::Storage::IStorageFile const & resultFile, Windows::Storage::Streams::IInputStream const & requestBodyStream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::DownloadOperation> operation;
	check(shim()->abi_CreateDownloadAsync(get(uri), get(resultFile), get(requestBodyStream), put(operation)));
	return operation;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferGroup impl_IBackgroundDownloader2<T>::TransferGroup() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup value = nullptr;
	check(shim()->get_TransferGroup(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundDownloader2<T>::TransferGroup(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & value) const
{
	check(shim()->put_TransferGroup(get(value)));
}

template <typename T> Windows::UI::Notifications::ToastNotification impl_IBackgroundDownloader2<T>::SuccessToastNotification() const
{
	Windows::UI::Notifications::ToastNotification value = nullptr;
	check(shim()->get_SuccessToastNotification(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundDownloader2<T>::SuccessToastNotification(Windows::UI::Notifications::ToastNotification const & value) const
{
	check(shim()->put_SuccessToastNotification(get(value)));
}

template <typename T> Windows::UI::Notifications::ToastNotification impl_IBackgroundDownloader2<T>::FailureToastNotification() const
{
	Windows::UI::Notifications::ToastNotification value = nullptr;
	check(shim()->get_FailureToastNotification(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundDownloader2<T>::FailureToastNotification(Windows::UI::Notifications::ToastNotification const & value) const
{
	check(shim()->put_FailureToastNotification(get(value)));
}

template <typename T> Windows::UI::Notifications::TileNotification impl_IBackgroundDownloader2<T>::SuccessTileNotification() const
{
	Windows::UI::Notifications::TileNotification value = nullptr;
	check(shim()->get_SuccessTileNotification(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundDownloader2<T>::SuccessTileNotification(Windows::UI::Notifications::TileNotification const & value) const
{
	check(shim()->put_SuccessTileNotification(get(value)));
}

template <typename T> Windows::UI::Notifications::TileNotification impl_IBackgroundDownloader2<T>::FailureTileNotification() const
{
	Windows::UI::Notifications::TileNotification value = nullptr;
	check(shim()->get_FailureTileNotification(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundDownloader2<T>::FailureTileNotification(Windows::UI::Notifications::TileNotification const & value) const
{
	check(shim()->put_FailureTileNotification(get(value)));
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferCompletionGroup impl_IBackgroundDownloader3<T>::CompletionGroup() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferCompletionGroup value = nullptr;
	check(shim()->get_CompletionGroup(put(value)));
	return value;
}

template <typename T> Windows::Networking::BackgroundTransfer::UploadOperation impl_IBackgroundUploader<T>::CreateUpload(Windows::Foundation::Uri const & uri, Windows::Storage::IStorageFile const & sourceFile) const
{
	Windows::Networking::BackgroundTransfer::UploadOperation operation = nullptr;
	check(shim()->abi_CreateUpload(get(uri), get(sourceFile), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> impl_IBackgroundUploader<T>::CreateUploadFromStreamAsync(Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IInputStream const & sourceStream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> operation;
	check(shim()->abi_CreateUploadFromStreamAsync(get(uri), get(sourceStream), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> impl_IBackgroundUploader<T>::CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> operation;
	check(shim()->abi_CreateUploadWithFormDataAndAutoBoundaryAsync(get(uri), get(parts), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> impl_IBackgroundUploader<T>::CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts, StringReference const & subType) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> operation;
	check(shim()->abi_CreateUploadWithSubTypeAsync(get(uri), get(parts), get(subType), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> impl_IBackgroundUploader<T>::CreateUploadAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart> const & parts, StringReference const & subType, StringReference const & boundary) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UploadOperation> operation;
	check(shim()->abi_CreateUploadWithSubTypeAndBoundaryAsync(get(uri), get(parts), get(subType), get(boundary), put(operation)));
	return operation;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferGroup impl_IBackgroundUploader2<T>::TransferGroup() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup value = nullptr;
	check(shim()->get_TransferGroup(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundUploader2<T>::TransferGroup(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & value) const
{
	check(shim()->put_TransferGroup(get(value)));
}

template <typename T> Windows::UI::Notifications::ToastNotification impl_IBackgroundUploader2<T>::SuccessToastNotification() const
{
	Windows::UI::Notifications::ToastNotification value = nullptr;
	check(shim()->get_SuccessToastNotification(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundUploader2<T>::SuccessToastNotification(Windows::UI::Notifications::ToastNotification const & value) const
{
	check(shim()->put_SuccessToastNotification(get(value)));
}

template <typename T> Windows::UI::Notifications::ToastNotification impl_IBackgroundUploader2<T>::FailureToastNotification() const
{
	Windows::UI::Notifications::ToastNotification value = nullptr;
	check(shim()->get_FailureToastNotification(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundUploader2<T>::FailureToastNotification(Windows::UI::Notifications::ToastNotification const & value) const
{
	check(shim()->put_FailureToastNotification(get(value)));
}

template <typename T> Windows::UI::Notifications::TileNotification impl_IBackgroundUploader2<T>::SuccessTileNotification() const
{
	Windows::UI::Notifications::TileNotification value = nullptr;
	check(shim()->get_SuccessTileNotification(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundUploader2<T>::SuccessTileNotification(Windows::UI::Notifications::TileNotification const & value) const
{
	check(shim()->put_SuccessTileNotification(get(value)));
}

template <typename T> Windows::UI::Notifications::TileNotification impl_IBackgroundUploader2<T>::FailureTileNotification() const
{
	Windows::UI::Notifications::TileNotification value = nullptr;
	check(shim()->get_FailureTileNotification(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundUploader2<T>::FailureTileNotification(Windows::UI::Notifications::TileNotification const & value) const
{
	check(shim()->put_FailureTileNotification(get(value)));
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferCompletionGroup impl_IBackgroundUploader3<T>::CompletionGroup() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferCompletionGroup value = nullptr;
	check(shim()->get_CompletionGroup(put(value)));
	return value;
}

template <typename T> GUID impl_IBackgroundTransferOperation<T>::Guid() const
{
	GUID value = {};
	check(shim()->get_Guid(&value));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IBackgroundTransferOperation<T>::RequestedUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_RequestedUri(put(value)));
	return value;
}

template <typename T> String impl_IBackgroundTransferOperation<T>::Method() const
{
	String value;
	check(shim()->get_Method(put(value)));
	return value;
}

template <typename T> String impl_IBackgroundTransferOperation<T>::Group() const
{
	String value;
	check(shim()->get_Group(put(value)));
	return value;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy impl_IBackgroundTransferOperation<T>::CostPolicy() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy value = {};
	check(shim()->get_CostPolicy(&value));
	return value;
}

template <typename T> void impl_IBackgroundTransferOperation<T>::CostPolicy(Windows::Networking::BackgroundTransfer::BackgroundTransferCostPolicy const value) const
{
	check(shim()->put_CostPolicy(value));
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IBackgroundTransferOperation<T>::GetResultStreamAt(unsigned long long const position) const
{
	Windows::Storage::Streams::IInputStream value;
	check(shim()->abi_GetResultStreamAt(position, put(value)));
	return value;
}

template <typename T> Windows::Networking::BackgroundTransfer::ResponseInformation impl_IBackgroundTransferOperation<T>::GetResponseInformation() const
{
	Windows::Networking::BackgroundTransfer::ResponseInformation value = nullptr;
	check(shim()->abi_GetResponseInformation(put(value)));
	return value;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferPriority impl_IBackgroundTransferOperationPriority<T>::Priority() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferPriority value = {};
	check(shim()->get_Priority(&value));
	return value;
}

template <typename T> void impl_IBackgroundTransferOperationPriority<T>::Priority(Windows::Networking::BackgroundTransfer::BackgroundTransferPriority const value) const
{
	check(shim()->put_Priority(value));
}

template <typename T> Windows::Storage::IStorageFile impl_IDownloadOperation<T>::ResultFile() const
{
	Windows::Storage::IStorageFile value;
	check(shim()->get_ResultFile(put(value)));
	return value;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundDownloadProgress impl_IDownloadOperation<T>::Progress() const
{
	Windows::Networking::BackgroundTransfer::BackgroundDownloadProgress value = {};
	check(shim()->get_Progress(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::DownloadOperation, Windows::Networking::BackgroundTransfer::DownloadOperation> impl_IDownloadOperation<T>::StartAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::DownloadOperation, Windows::Networking::BackgroundTransfer::DownloadOperation> operation;
	check(shim()->abi_StartAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::DownloadOperation, Windows::Networking::BackgroundTransfer::DownloadOperation> impl_IDownloadOperation<T>::AttachAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::DownloadOperation, Windows::Networking::BackgroundTransfer::DownloadOperation> operation;
	check(shim()->abi_AttachAsync(put(operation)));
	return operation;
}

template <typename T> void impl_IDownloadOperation<T>::Pause() const
{
	check(shim()->abi_Pause());
}

template <typename T> void impl_IDownloadOperation<T>::Resume() const
{
	check(shim()->abi_Resume());
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferGroup impl_IDownloadOperation2<T>::TransferGroup() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup value = nullptr;
	check(shim()->get_TransferGroup(put(value)));
	return value;
}

template <typename T> Windows::Storage::IStorageFile impl_IUploadOperation<T>::SourceFile() const
{
	Windows::Storage::IStorageFile value;
	check(shim()->get_SourceFile(put(value)));
	return value;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundUploadProgress impl_IUploadOperation<T>::Progress() const
{
	Windows::Networking::BackgroundTransfer::BackgroundUploadProgress value = {};
	check(shim()->get_Progress(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::UploadOperation, Windows::Networking::BackgroundTransfer::UploadOperation> impl_IUploadOperation<T>::StartAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::UploadOperation, Windows::Networking::BackgroundTransfer::UploadOperation> operation;
	check(shim()->abi_StartAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::UploadOperation, Windows::Networking::BackgroundTransfer::UploadOperation> impl_IUploadOperation<T>::AttachAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Networking::BackgroundTransfer::UploadOperation, Windows::Networking::BackgroundTransfer::UploadOperation> operation;
	check(shim()->abi_AttachAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferGroup impl_IUploadOperation2<T>::TransferGroup() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup value = nullptr;
	check(shim()->get_TransferGroup(put(value)));
	return value;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundDownloader impl_IBackgroundDownloaderFactory<T>::CreateWithCompletionGroup(Windows::Networking::BackgroundTransfer::BackgroundTransferCompletionGroup const & completionGroup) const
{
	Windows::Networking::BackgroundTransfer::BackgroundDownloader backgroundDownloader = nullptr;
	check(shim()->abi_CreateWithCompletionGroup(get(completionGroup), put(backgroundDownloader)));
	return backgroundDownloader;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> impl_IBackgroundDownloaderStaticMethods<T>::GetCurrentDownloadsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> operation;
	check(shim()->abi_GetCurrentDownloadsAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> impl_IBackgroundDownloaderStaticMethods<T>::GetCurrentDownloadsAsync(StringReference const & group) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> operation;
	check(shim()->abi_GetCurrentDownloadsForGroupAsync(get(group), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> impl_IBackgroundDownloaderStaticMethods2<T>::GetCurrentDownloadsForTransferGroupAsync(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & group) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> operation;
	check(shim()->abi_GetCurrentDownloadsForTransferGroupAsync(get(group), put(operation)));
	return operation;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundUploader impl_IBackgroundUploaderFactory<T>::CreateWithCompletionGroup(Windows::Networking::BackgroundTransfer::BackgroundTransferCompletionGroup const & completionGroup) const
{
	Windows::Networking::BackgroundTransfer::BackgroundUploader backgroundUploader = nullptr;
	check(shim()->abi_CreateWithCompletionGroup(get(completionGroup), put(backgroundUploader)));
	return backgroundUploader;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> impl_IBackgroundUploaderStaticMethods<T>::GetCurrentUploadsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> operation;
	check(shim()->abi_GetCurrentUploadsAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> impl_IBackgroundUploaderStaticMethods<T>::GetCurrentUploadsAsync(StringReference const & group) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> operation;
	check(shim()->abi_GetCurrentUploadsForGroupAsync(get(group), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> impl_IBackgroundUploaderStaticMethods2<T>::GetCurrentUploadsForTransferGroupAsync(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & group) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> operation;
	check(shim()->abi_GetCurrentUploadsForTransferGroupAsync(get(group), put(operation)));
	return operation;
}

template <typename T> bool impl_IResponseInformation<T>::IsResumable() const
{
	bool value = {};
	check(shim()->get_IsResumable(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IResponseInformation<T>::ActualUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ActualUri(put(value)));
	return value;
}

template <typename T> unsigned impl_IResponseInformation<T>::StatusCode() const
{
	unsigned value = {};
	check(shim()->get_StatusCode(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, String> impl_IResponseInformation<T>::Headers() const
{
	Windows::Foundation::Collections::IMapView<String, String> value;
	check(shim()->get_Headers(put(value)));
	return value;
}

template <typename T> Windows::Web::WebErrorStatus impl_IBackgroundTransferErrorStaticMethods<T>::GetStatus(int const hresult) const
{
	Windows::Web::WebErrorStatus status = {};
	check(shim()->abi_GetStatus(hresult, &status));
	return status;
}

template <typename T> void impl_IBackgroundTransferContentPart<T>::SetHeader(StringReference const & headerName, StringReference const & headerValue) const
{
	check(shim()->abi_SetHeader(get(headerName), get(headerValue)));
}

template <typename T> void impl_IBackgroundTransferContentPart<T>::SetText(StringReference const & value) const
{
	check(shim()->abi_SetText(get(value)));
}

template <typename T> void impl_IBackgroundTransferContentPart<T>::SetFile(Windows::Storage::IStorageFile const & value) const
{
	check(shim()->abi_SetFile(get(value)));
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart impl_IBackgroundTransferContentPartFactory<T>::CreateWithName(StringReference const & name) const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart value = nullptr;
	check(shim()->abi_CreateWithName(get(name), put(value)));
	return value;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart impl_IBackgroundTransferContentPartFactory<T>::CreateWithNameAndFileName(StringReference const & name, StringReference const & fileName) const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferContentPart value = nullptr;
	check(shim()->abi_CreateWithNameAndFileName(get(name), get(fileName), put(value)));
	return value;
}

template <typename T> String impl_IBackgroundTransferGroup<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferBehavior impl_IBackgroundTransferGroup<T>::TransferBehavior() const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferBehavior value = {};
	check(shim()->get_TransferBehavior(&value));
	return value;
}

template <typename T> void impl_IBackgroundTransferGroup<T>::TransferBehavior(Windows::Networking::BackgroundTransfer::BackgroundTransferBehavior const value) const
{
	check(shim()->put_TransferBehavior(value));
}

template <typename T> Windows::Networking::BackgroundTransfer::BackgroundTransferGroup impl_IBackgroundTransferGroupStatics<T>::CreateGroup(StringReference const & name) const
{
	Windows::Networking::BackgroundTransfer::BackgroundTransferGroup value = nullptr;
	check(shim()->abi_CreateGroup(get(name), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IContentPrefetcherTime<T>::LastSuccessfulPrefetchTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_LastSuccessfulPrefetchTime(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> impl_IContentPrefetcher<T>::ContentUris() const
{
	Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> value;
	check(shim()->get_ContentUris(put(value)));
	return value;
}

template <typename T> void impl_IContentPrefetcher<T>::IndirectContentUri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_IndirectContentUri(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IContentPrefetcher<T>::IndirectContentUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_IndirectContentUri(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::IBackgroundTrigger impl_IBackgroundTransferCompletionGroup<T>::Trigger() const
{
	Windows::ApplicationModel::Background::IBackgroundTrigger value;
	check(shim()->get_Trigger(put(value)));
	return value;
}

template <typename T> bool impl_IBackgroundTransferCompletionGroup<T>::IsEnabled() const
{
	bool value = {};
	check(shim()->get_IsEnabled(put(value)));
	return value;
}

template <typename T> void impl_IBackgroundTransferCompletionGroup<T>::Enable() const
{
	check(shim()->abi_Enable());
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation> impl_IBackgroundTransferCompletionGroupTriggerDetails<T>::Downloads() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation> value;
	check(shim()->get_Downloads(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation> impl_IBackgroundTransferCompletionGroupTriggerDetails<T>::Uploads() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation> value;
	check(shim()->get_Uploads(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Connectivity {

template <typename T> void impl_INetworkStatusChangedEventHandler<T>::Invoke(IInspectable const & sender) const
{
	check(shim()->abi_Invoke(get(sender)));
}

template <typename T> unsigned long long impl_IDataUsage<T>::BytesSent() const
{
	unsigned long long value = {};
	check(shim()->get_BytesSent(&value));
	return value;
}

template <typename T> unsigned long long impl_IDataUsage<T>::BytesReceived() const
{
	unsigned long long value = {};
	check(shim()->get_BytesReceived(&value));
	return value;
}

template <typename T> unsigned impl_IDataPlanUsage<T>::MegabytesUsed() const
{
	unsigned value = {};
	check(shim()->get_MegabytesUsed(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IDataPlanUsage<T>::LastSyncTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_LastSyncTime(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::DataPlanUsage impl_IDataPlanStatus<T>::DataPlanUsage() const
{
	Windows::Networking::Connectivity::DataPlanUsage value = nullptr;
	check(shim()->get_DataPlanUsage(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IDataPlanStatus<T>::DataLimitInMegabytes() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_DataLimitInMegabytes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IDataPlanStatus<T>::InboundBitsPerSecond() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check(shim()->get_InboundBitsPerSecond(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IDataPlanStatus<T>::OutboundBitsPerSecond() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check(shim()->get_OutboundBitsPerSecond(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IDataPlanStatus<T>::NextBillingCycle() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_NextBillingCycle(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IDataPlanStatus<T>::MaxTransferSizeInMegabytes() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_MaxTransferSizeInMegabytes(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkCostType impl_IConnectionCost<T>::NetworkCostType() const
{
	Windows::Networking::Connectivity::NetworkCostType value = {};
	check(shim()->get_NetworkCostType(&value));
	return value;
}

template <typename T> bool impl_IConnectionCost<T>::Roaming() const
{
	bool value = {};
	check(shim()->get_Roaming(put(value)));
	return value;
}

template <typename T> bool impl_IConnectionCost<T>::OverDataLimit() const
{
	bool value = {};
	check(shim()->get_OverDataLimit(put(value)));
	return value;
}

template <typename T> bool impl_IConnectionCost<T>::ApproachingDataLimit() const
{
	bool value = {};
	check(shim()->get_ApproachingDataLimit(put(value)));
	return value;
}

template <typename T> bool impl_IConnectionCost2<T>::BackgroundDataUsageRestricted() const
{
	bool value = {};
	check(shim()->get_BackgroundDataUsageRestricted(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkAuthenticationType impl_INetworkSecuritySettings<T>::NetworkAuthenticationType() const
{
	Windows::Networking::Connectivity::NetworkAuthenticationType value = {};
	check(shim()->get_NetworkAuthenticationType(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkEncryptionType impl_INetworkSecuritySettings<T>::NetworkEncryptionType() const
{
	Windows::Networking::Connectivity::NetworkEncryptionType value = {};
	check(shim()->get_NetworkEncryptionType(&value));
	return value;
}

template <typename T> String impl_IConnectionProfile<T>::ProfileName() const
{
	String value;
	check(shim()->get_ProfileName(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkConnectivityLevel impl_IConnectionProfile<T>::GetNetworkConnectivityLevel() const
{
	Windows::Networking::Connectivity::NetworkConnectivityLevel value = {};
	check(shim()->abi_GetNetworkConnectivityLevel(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IConnectionProfile<T>::GetNetworkNames() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->abi_GetNetworkNames(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::ConnectionCost impl_IConnectionProfile<T>::GetConnectionCost() const
{
	Windows::Networking::Connectivity::ConnectionCost value = nullptr;
	check(shim()->abi_GetConnectionCost(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::DataPlanStatus impl_IConnectionProfile<T>::GetDataPlanStatus() const
{
	Windows::Networking::Connectivity::DataPlanStatus value = nullptr;
	check(shim()->abi_GetDataPlanStatus(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkAdapter impl_IConnectionProfile<T>::NetworkAdapter() const
{
	Windows::Networking::Connectivity::NetworkAdapter value = nullptr;
	check(shim()->get_NetworkAdapter(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::DataUsage impl_IConnectionProfile<T>::GetLocalUsage(Windows::Foundation::DateTime const & StartTime, Windows::Foundation::DateTime const & EndTime) const
{
	Windows::Networking::Connectivity::DataUsage value = nullptr;
	check(shim()->abi_GetLocalUsage(StartTime, EndTime, put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::DataUsage impl_IConnectionProfile<T>::GetLocalUsage(Windows::Foundation::DateTime const & StartTime, Windows::Foundation::DateTime const & EndTime, Windows::Networking::Connectivity::RoamingStates const States) const
{
	Windows::Networking::Connectivity::DataUsage value = nullptr;
	check(shim()->abi_GetLocalUsagePerRoamingStates(StartTime, EndTime, States, put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkSecuritySettings impl_IConnectionProfile<T>::NetworkSecuritySettings() const
{
	Windows::Networking::Connectivity::NetworkSecuritySettings value = nullptr;
	check(shim()->get_NetworkSecuritySettings(put(value)));
	return value;
}

template <typename T> String impl_IWwanConnectionProfileDetails<T>::HomeProviderId() const
{
	String value;
	check(shim()->get_HomeProviderId(put(value)));
	return value;
}

template <typename T> String impl_IWwanConnectionProfileDetails<T>::AccessPointName() const
{
	String value;
	check(shim()->get_AccessPointName(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::WwanNetworkRegistrationState impl_IWwanConnectionProfileDetails<T>::GetNetworkRegistrationState() const
{
	Windows::Networking::Connectivity::WwanNetworkRegistrationState value = {};
	check(shim()->abi_GetNetworkRegistrationState(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::WwanDataClass impl_IWwanConnectionProfileDetails<T>::GetCurrentDataClass() const
{
	Windows::Networking::Connectivity::WwanDataClass value = {};
	check(shim()->abi_GetCurrentDataClass(&value));
	return value;
}

template <typename T> String impl_IWlanConnectionProfileDetails<T>::GetConnectedSsid() const
{
	String value;
	check(shim()->abi_GetConnectedSsid(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IConnectivityInterval<T>::StartTime() const
{
	Windows::Foundation::DateTime startTime = {};
	check(shim()->get_StartTime(&startTime));
	return startTime;
}

template <typename T> Windows::Foundation::TimeSpan impl_IConnectivityInterval<T>::ConnectionDuration() const
{
	Windows::Foundation::TimeSpan duration = {};
	check(shim()->get_ConnectionDuration(&duration));
	return duration;
}

template <typename T> unsigned long long impl_INetworkUsage<T>::BytesSent() const
{
	unsigned long long value = {};
	check(shim()->get_BytesSent(&value));
	return value;
}

template <typename T> unsigned long long impl_INetworkUsage<T>::BytesReceived() const
{
	unsigned long long value = {};
	check(shim()->get_BytesReceived(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_INetworkUsage<T>::ConnectionDuration() const
{
	Windows::Foundation::TimeSpan duration = {};
	check(shim()->get_ConnectionDuration(&duration));
	return duration;
}

template <typename T> bool impl_IConnectionProfile2<T>::IsWwanConnectionProfile() const
{
	bool value = {};
	check(shim()->get_IsWwanConnectionProfile(put(value)));
	return value;
}

template <typename T> bool impl_IConnectionProfile2<T>::IsWlanConnectionProfile() const
{
	bool value = {};
	check(shim()->get_IsWlanConnectionProfile(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::WwanConnectionProfileDetails impl_IConnectionProfile2<T>::WwanConnectionProfileDetails() const
{
	Windows::Networking::Connectivity::WwanConnectionProfileDetails value = nullptr;
	check(shim()->get_WwanConnectionProfileDetails(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::WlanConnectionProfileDetails impl_IConnectionProfile2<T>::WlanConnectionProfileDetails() const
{
	Windows::Networking::Connectivity::WlanConnectionProfileDetails value = nullptr;
	check(shim()->get_WlanConnectionProfileDetails(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<GUID> impl_IConnectionProfile2<T>::ServiceProviderGuid() const
{
	Windows::Foundation::IReference<GUID> value;
	check(shim()->get_ServiceProviderGuid(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<byte> impl_IConnectionProfile2<T>::GetSignalBars() const
{
	Windows::Foundation::IReference<byte> value;
	check(shim()->abi_GetSignalBars(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::DomainConnectivityLevel impl_IConnectionProfile2<T>::GetDomainConnectivityLevel() const
{
	Windows::Networking::Connectivity::DomainConnectivityLevel value = {};
	check(shim()->abi_GetDomainConnectivityLevel(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage>> impl_IConnectionProfile2<T>::GetNetworkUsageAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::DateTime const & endTime, Windows::Networking::Connectivity::DataUsageGranularity const granularity, Windows::Networking::Connectivity::NetworkUsageStates const & states) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage>> value;
	check(shim()->abi_GetNetworkUsageAsync(startTime, endTime, granularity, states, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval>> impl_IConnectionProfile2<T>::GetConnectivityIntervalsAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::DateTime const & endTime, Windows::Networking::Connectivity::NetworkUsageStates const & states) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval>> value;
	check(shim()->abi_GetConnectivityIntervalsAsync(startTime, endTime, states, put(value)));
	return value;
}

template <typename T> unsigned impl_ILanIdentifierData<T>::Type() const
{
	unsigned value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<byte> impl_ILanIdentifierData<T>::Value() const
{
	Windows::Foundation::Collections::IVectorView<byte> value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::LanIdentifierData impl_ILanIdentifier<T>::InfrastructureId() const
{
	Windows::Networking::Connectivity::LanIdentifierData value = nullptr;
	check(shim()->get_InfrastructureId(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::LanIdentifierData impl_ILanIdentifier<T>::PortId() const
{
	Windows::Networking::Connectivity::LanIdentifierData value = nullptr;
	check(shim()->get_PortId(put(value)));
	return value;
}

template <typename T> GUID impl_ILanIdentifier<T>::NetworkAdapterId() const
{
	GUID value = {};
	check(shim()->get_NetworkAdapterId(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> impl_INetworkInformationStatics<T>::GetConnectionProfiles() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> value;
	check(shim()->abi_GetConnectionProfiles(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::ConnectionProfile impl_INetworkInformationStatics<T>::GetInternetConnectionProfile() const
{
	Windows::Networking::Connectivity::ConnectionProfile value = nullptr;
	check(shim()->abi_GetInternetConnectionProfile(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::LanIdentifier> impl_INetworkInformationStatics<T>::GetLanIdentifiers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::LanIdentifier> value;
	check(shim()->abi_GetLanIdentifiers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> impl_INetworkInformationStatics<T>::GetHostNames() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> value;
	check(shim()->abi_GetHostNames(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration> impl_INetworkInformationStatics<T>::GetProxyConfigurationAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration> value;
	check(shim()->abi_GetProxyConfigurationAsync(get(uri), put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> impl_INetworkInformationStatics<T>::GetSortedEndpointPairs(Windows::Foundation::Collections::IIterable<Windows::Networking::EndpointPair> const & destinationList, Windows::Networking::HostNameSortOptions const sortOptions) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> value;
	check(shim()->abi_GetSortedEndpointPairs(get(destinationList), sortOptions, put(value)));
	return value;
}

template <typename T> long long impl_INetworkInformationStatics<T>::NetworkStatusChanged(Windows::Networking::Connectivity::INetworkStatusChangedEventHandler const & networkStatusHandler) const
{
	long long eventCookie = {};
	check(shim()->add_NetworkStatusChanged(get(networkStatusHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_INetworkInformationStatics<T>::NetworkStatusChanged(F networkStatusHandler) const
{
	return NetworkStatusChanged(Windows::Networking::Connectivity::NetworkStatusChangedEventHandler(networkStatusHandler));
}

template <typename T> void impl_INetworkInformationStatics<T>::NetworkStatusChanged(long long const eventCookie) const
{
	check(shim()->remove_NetworkStatusChanged(eventCookie));
}

template <typename T> void impl_IConnectionProfileFilter<T>::IsConnected(bool const value) const
{
	check(shim()->put_IsConnected(value));
}

template <typename T> bool impl_IConnectionProfileFilter<T>::IsConnected() const
{
	bool value = {};
	check(shim()->get_IsConnected(put(value)));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter<T>::IsWwanConnectionProfile(bool const value) const
{
	check(shim()->put_IsWwanConnectionProfile(value));
}

template <typename T> bool impl_IConnectionProfileFilter<T>::IsWwanConnectionProfile() const
{
	bool value = {};
	check(shim()->get_IsWwanConnectionProfile(put(value)));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter<T>::IsWlanConnectionProfile(bool const value) const
{
	check(shim()->put_IsWlanConnectionProfile(value));
}

template <typename T> bool impl_IConnectionProfileFilter<T>::IsWlanConnectionProfile() const
{
	bool value = {};
	check(shim()->get_IsWlanConnectionProfile(put(value)));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter<T>::NetworkCostType(Windows::Networking::Connectivity::NetworkCostType const value) const
{
	check(shim()->put_NetworkCostType(value));
}

template <typename T> Windows::Networking::Connectivity::NetworkCostType impl_IConnectionProfileFilter<T>::NetworkCostType() const
{
	Windows::Networking::Connectivity::NetworkCostType value = {};
	check(shim()->get_NetworkCostType(&value));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter<T>::ServiceProviderGuid(Windows::Foundation::IReference<GUID> const & value) const
{
	check(shim()->put_ServiceProviderGuid(get(value)));
}

template <typename T> Windows::Foundation::IReference<GUID> impl_IConnectionProfileFilter<T>::ServiceProviderGuid() const
{
	Windows::Foundation::IReference<GUID> value;
	check(shim()->get_ServiceProviderGuid(put(value)));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter2<T>::IsRoaming(Windows::Foundation::IReference<bool> const & value) const
{
	check(shim()->put_IsRoaming(get(value)));
}

template <typename T> Windows::Foundation::IReference<bool> impl_IConnectionProfileFilter2<T>::IsRoaming() const
{
	Windows::Foundation::IReference<bool> value;
	check(shim()->get_IsRoaming(put(value)));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter2<T>::IsOverDataLimit(Windows::Foundation::IReference<bool> const & value) const
{
	check(shim()->put_IsOverDataLimit(get(value)));
}

template <typename T> Windows::Foundation::IReference<bool> impl_IConnectionProfileFilter2<T>::IsOverDataLimit() const
{
	Windows::Foundation::IReference<bool> value;
	check(shim()->get_IsOverDataLimit(put(value)));
	return value;
}

template <typename T> void impl_IConnectionProfileFilter2<T>::IsBackgroundDataUsageRestricted(Windows::Foundation::IReference<bool> const & value) const
{
	check(shim()->put_IsBackgroundDataUsageRestricted(get(value)));
}

template <typename T> Windows::Foundation::IReference<bool> impl_IConnectionProfileFilter2<T>::IsBackgroundDataUsageRestricted() const
{
	Windows::Foundation::IReference<bool> value;
	check(shim()->get_IsBackgroundDataUsageRestricted(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IConnectionProfileFilter2<T>::RawData() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_RawData(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile>> impl_INetworkInformationStatics2<T>::FindConnectionProfilesAsync(Windows::Networking::Connectivity::ConnectionProfileFilter const & pProfileFilter) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile>> value;
	check(shim()->abi_FindConnectionProfilesAsync(get(pProfileFilter), put(value)));
	return value;
}

template <typename T> GUID impl_INetworkItem<T>::NetworkId() const
{
	GUID value = {};
	check(shim()->get_NetworkId(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkTypes impl_INetworkItem<T>::GetNetworkTypes() const
{
	Windows::Networking::Connectivity::NetworkTypes value = {};
	check(shim()->abi_GetNetworkTypes(&value));
	return value;
}

template <typename T> unsigned long long impl_INetworkAdapter<T>::OutboundMaxBitsPerSecond() const
{
	unsigned long long value = {};
	check(shim()->get_OutboundMaxBitsPerSecond(&value));
	return value;
}

template <typename T> unsigned long long impl_INetworkAdapter<T>::InboundMaxBitsPerSecond() const
{
	unsigned long long value = {};
	check(shim()->get_InboundMaxBitsPerSecond(&value));
	return value;
}

template <typename T> unsigned impl_INetworkAdapter<T>::IanaInterfaceType() const
{
	unsigned value = {};
	check(shim()->get_IanaInterfaceType(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkItem impl_INetworkAdapter<T>::NetworkItem() const
{
	Windows::Networking::Connectivity::NetworkItem value = nullptr;
	check(shim()->get_NetworkItem(put(value)));
	return value;
}

template <typename T> GUID impl_INetworkAdapter<T>::NetworkAdapterId() const
{
	GUID value = {};
	check(shim()->get_NetworkAdapterId(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile> impl_INetworkAdapter<T>::GetConnectedProfileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile> value;
	check(shim()->abi_GetConnectedProfileAsync(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkAdapter impl_IIPInformation<T>::NetworkAdapter() const
{
	Windows::Networking::Connectivity::NetworkAdapter value = nullptr;
	check(shim()->get_NetworkAdapter(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<byte> impl_IIPInformation<T>::PrefixLength() const
{
	Windows::Foundation::IReference<byte> value;
	check(shim()->get_PrefixLength(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Foundation::Uri> impl_IProxyConfiguration<T>::ProxyUris() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Foundation::Uri> value;
	check(shim()->get_ProxyUris(put(value)));
	return value;
}

template <typename T> bool impl_IProxyConfiguration<T>::CanConnectDirectly() const
{
	bool value = {};
	check(shim()->get_CanConnectDirectly(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::ConnectionProfile impl_IConnectionSession<T>::ConnectionProfile() const
{
	Windows::Networking::Connectivity::ConnectionProfile value = nullptr;
	check(shim()->get_ConnectionProfile(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::ConnectionProfile impl_IRoutePolicy<T>::ConnectionProfile() const
{
	Windows::Networking::Connectivity::ConnectionProfile value = nullptr;
	check(shim()->get_ConnectionProfile(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IRoutePolicy<T>::HostName() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_HostName(put(value)));
	return value;
}

template <typename T> Windows::Networking::DomainNameType impl_IRoutePolicy<T>::HostNameType() const
{
	Windows::Networking::DomainNameType value = {};
	check(shim()->get_HostNameType(&value));
	return value;
}

template <typename T> Windows::Networking::Connectivity::RoutePolicy impl_IRoutePolicyFactory<T>::CreateRoutePolicy(Windows::Networking::Connectivity::ConnectionProfile const & connectionProfile, Windows::Networking::HostName const & hostName, Windows::Networking::DomainNameType const type) const
{
	Windows::Networking::Connectivity::RoutePolicy routePolicy = nullptr;
	check(shim()->abi_CreateRoutePolicy(get(connectionProfile), get(hostName), type, put(routePolicy)));
	return routePolicy;
}

template <typename T> String impl_ICellularApnContext<T>::ProviderId() const
{
	String value;
	check(shim()->get_ProviderId(put(value)));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::ProviderId(StringReference const & value) const
{
	check(shim()->put_ProviderId(get(value)));
}

template <typename T> String impl_ICellularApnContext<T>::AccessPointName() const
{
	String value;
	check(shim()->get_AccessPointName(put(value)));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::AccessPointName(StringReference const & value) const
{
	check(shim()->put_AccessPointName(get(value)));
}

template <typename T> String impl_ICellularApnContext<T>::UserName() const
{
	String value;
	check(shim()->get_UserName(put(value)));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::UserName(StringReference const & value) const
{
	check(shim()->put_UserName(get(value)));
}

template <typename T> String impl_ICellularApnContext<T>::Password() const
{
	String value;
	check(shim()->get_Password(put(value)));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::Password(StringReference const & value) const
{
	check(shim()->put_Password(get(value)));
}

template <typename T> bool impl_ICellularApnContext<T>::IsCompressionEnabled() const
{
	bool value = {};
	check(shim()->get_IsCompressionEnabled(put(value)));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::IsCompressionEnabled(bool const value) const
{
	check(shim()->put_IsCompressionEnabled(value));
}

template <typename T> Windows::Networking::Connectivity::CellularApnAuthenticationType impl_ICellularApnContext<T>::AuthenticationType() const
{
	Windows::Networking::Connectivity::CellularApnAuthenticationType value = {};
	check(shim()->get_AuthenticationType(&value));
	return value;
}

template <typename T> void impl_ICellularApnContext<T>::AuthenticationType(Windows::Networking::Connectivity::CellularApnAuthenticationType const value) const
{
	check(shim()->put_AuthenticationType(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession> impl_IConnectivityManagerStatics<T>::AcquireConnectionAsync(Windows::Networking::Connectivity::CellularApnContext const & cellularApnContext) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession> operation;
	check(shim()->abi_AcquireConnectionAsync(get(cellularApnContext), put(operation)));
	return operation;
}

template <typename T> void impl_IConnectivityManagerStatics<T>::AddHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy) const
{
	check(shim()->abi_AddHttpRoutePolicy(get(routePolicy)));
}

template <typename T> void impl_IConnectivityManagerStatics<T>::RemoveHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy) const
{
	check(shim()->abi_RemoveHttpRoutePolicy(get(routePolicy)));
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewInternetConnectionProfile() const
{
	bool value = {};
	check(shim()->get_HasNewInternetConnectionProfile(put(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewConnectionCost() const
{
	bool value = {};
	check(shim()->get_HasNewConnectionCost(put(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewNetworkConnectivityLevel() const
{
	bool value = {};
	check(shim()->get_HasNewNetworkConnectivityLevel(put(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewDomainConnectivityLevel() const
{
	bool value = {};
	check(shim()->get_HasNewDomainConnectivityLevel(put(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewHostNameList() const
{
	bool value = {};
	check(shim()->get_HasNewHostNameList(put(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails<T>::HasNewWwanRegistrationState() const
{
	bool value = {};
	check(shim()->get_HasNewWwanRegistrationState(put(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails2<T>::HasNewTetheringOperationalState() const
{
	bool value = {};
	check(shim()->get_HasNewTetheringOperationalState(put(value)));
	return value;
}

template <typename T> bool impl_INetworkStateChangeEventDetails2<T>::HasNewTetheringClientCount() const
{
	bool value = {};
	check(shim()->get_HasNewTetheringClientCount(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace NetworkOperators {

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IMobileBroadbandAccountStatics<T>::AvailableNetworkAccountIds() const
{
	Windows::Foundation::Collections::IVectorView<String> ppAccountIds;
	check(shim()->get_AvailableNetworkAccountIds(put(ppAccountIds)));
	return ppAccountIds;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandAccount impl_IMobileBroadbandAccountStatics<T>::CreateFromNetworkAccountId(StringReference const & networkAccountId) const
{
	Windows::Networking::NetworkOperators::MobileBroadbandAccount ppAccount = nullptr;
	check(shim()->abi_CreateFromNetworkAccountId(get(networkAccountId), put(ppAccount)));
	return ppAccount;
}

template <typename T> String impl_IMobileBroadbandAccount<T>::NetworkAccountId() const
{
	String value;
	check(shim()->get_NetworkAccountId(put(value)));
	return value;
}

template <typename T> GUID impl_IMobileBroadbandAccount<T>::ServiceProviderGuid() const
{
	GUID value = {};
	check(shim()->get_ServiceProviderGuid(&value));
	return value;
}

template <typename T> String impl_IMobileBroadbandAccount<T>::ServiceProviderName() const
{
	String value;
	check(shim()->get_ServiceProviderName(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandNetwork impl_IMobileBroadbandAccount<T>::CurrentNetwork() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandNetwork network = nullptr;
	check(shim()->get_CurrentNetwork(put(network)));
	return network;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandDeviceInformation impl_IMobileBroadbandAccount<T>::CurrentDeviceInformation() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandDeviceInformation deviceInformation = nullptr;
	check(shim()->get_CurrentDeviceInformation(put(deviceInformation)));
	return deviceInformation;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> impl_IMobileBroadbandAccount2<T>::GetConnectionProfiles() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> value;
	check(shim()->abi_GetConnectionProfiles(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::NetworkDeviceStatus impl_IMobileBroadbandDeviceInformation<T>::NetworkDeviceStatus() const
{
	Windows::Networking::NetworkOperators::NetworkDeviceStatus value = {};
	check(shim()->get_NetworkDeviceStatus(&value));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation<T>::Manufacturer() const
{
	String value;
	check(shim()->get_Manufacturer(put(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation<T>::Model() const
{
	String value;
	check(shim()->get_Model(put(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation<T>::FirmwareInformation() const
{
	String value;
	check(shim()->get_FirmwareInformation(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::CellularClass impl_IMobileBroadbandDeviceInformation<T>::CellularClass() const
{
	Windows::Devices::Sms::CellularClass value = {};
	check(shim()->get_CellularClass(&value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::DataClasses impl_IMobileBroadbandDeviceInformation<T>::DataClasses() const
{
	Windows::Networking::NetworkOperators::DataClasses value = {};
	check(shim()->get_DataClasses(&value));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation<T>::CustomDataClass() const
{
	String value;
	check(shim()->get_CustomDataClass(put(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation<T>::MobileEquipmentId() const
{
	String value;
	check(shim()->get_MobileEquipmentId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IMobileBroadbandDeviceInformation<T>::TelephoneNumbers() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_TelephoneNumbers(put(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation<T>::SubscriberId() const
{
	String value;
	check(shim()->get_SubscriberId(put(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation<T>::SimIccId() const
{
	String value;
	check(shim()->get_SimIccId(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandDeviceType impl_IMobileBroadbandDeviceInformation<T>::DeviceType() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandDeviceType pDeviceType = {};
	check(shim()->get_DeviceType(&pDeviceType));
	return pDeviceType;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandRadioState impl_IMobileBroadbandDeviceInformation<T>::CurrentRadioState() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandRadioState pCurrentState = {};
	check(shim()->get_CurrentRadioState(&pCurrentState));
	return pCurrentState;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandPinManager impl_IMobileBroadbandDeviceInformation2<T>::PinManager() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandPinManager value = nullptr;
	check(shim()->get_PinManager(put(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation2<T>::Revision() const
{
	String value;
	check(shim()->get_Revision(put(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceInformation2<T>::SerialNumber() const
{
	String value;
	check(shim()->get_SerialNumber(put(value)));
	return value;
}

template <typename T> Windows::Networking::Connectivity::NetworkAdapter impl_IMobileBroadbandNetwork<T>::NetworkAdapter() const
{
	Windows::Networking::Connectivity::NetworkAdapter value = nullptr;
	check(shim()->get_NetworkAdapter(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::NetworkRegistrationState impl_IMobileBroadbandNetwork<T>::NetworkRegistrationState() const
{
	Windows::Networking::NetworkOperators::NetworkRegistrationState registrationState = {};
	check(shim()->get_NetworkRegistrationState(&registrationState));
	return registrationState;
}

template <typename T> unsigned impl_IMobileBroadbandNetwork<T>::RegistrationNetworkError() const
{
	unsigned networkError = {};
	check(shim()->get_RegistrationNetworkError(&networkError));
	return networkError;
}

template <typename T> unsigned impl_IMobileBroadbandNetwork<T>::PacketAttachNetworkError() const
{
	unsigned networkError = {};
	check(shim()->get_PacketAttachNetworkError(&networkError));
	return networkError;
}

template <typename T> unsigned impl_IMobileBroadbandNetwork<T>::ActivationNetworkError() const
{
	unsigned networkError = {};
	check(shim()->get_ActivationNetworkError(&networkError));
	return networkError;
}

template <typename T> String impl_IMobileBroadbandNetwork<T>::AccessPointName() const
{
	String apn;
	check(shim()->get_AccessPointName(put(apn)));
	return apn;
}

template <typename T> Windows::Networking::NetworkOperators::DataClasses impl_IMobileBroadbandNetwork<T>::RegisteredDataClass() const
{
	Windows::Networking::NetworkOperators::DataClasses value = {};
	check(shim()->get_RegisteredDataClass(&value));
	return value;
}

template <typename T> String impl_IMobileBroadbandNetwork<T>::RegisteredProviderId() const
{
	String value;
	check(shim()->get_RegisteredProviderId(put(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandNetwork<T>::RegisteredProviderName() const
{
	String value;
	check(shim()->get_RegisteredProviderName(put(value)));
	return value;
}

template <typename T> void impl_IMobileBroadbandNetwork<T>::ShowConnectionUI() const
{
	check(shim()->abi_ShowConnectionUI());
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IMobileBroadbandNetwork2<T>::GetVoiceCallSupportAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> asyncInfo;
	check(shim()->abi_GetVoiceCallSupportAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::NetworkOperators::MobileBroadbandUiccApp> impl_IMobileBroadbandNetwork2<T>::RegistrationUiccApps() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::NetworkOperators::MobileBroadbandUiccApp> value;
	check(shim()->get_RegistrationUiccApps(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::NetworkOperatorEventMessageType impl_INetworkOperatorNotificationEventDetails<T>::NotificationType() const
{
	Windows::Networking::NetworkOperators::NetworkOperatorEventMessageType value = {};
	check(shim()->get_NotificationType(&value));
	return value;
}

template <typename T> String impl_INetworkOperatorNotificationEventDetails<T>::NetworkAccountId() const
{
	String value;
	check(shim()->get_NetworkAccountId(put(value)));
	return value;
}

template <typename T> byte impl_INetworkOperatorNotificationEventDetails<T>::EncodingType() const
{
	byte value = {};
	check(shim()->get_EncodingType(&value));
	return value;
}

template <typename T> String impl_INetworkOperatorNotificationEventDetails<T>::Message() const
{
	String value;
	check(shim()->get_Message(put(value)));
	return value;
}

template <typename T> String impl_INetworkOperatorNotificationEventDetails<T>::RuleId() const
{
	String value;
	check(shim()->get_RuleId(put(value)));
	return value;
}

template <typename T> Windows::Devices::Sms::ISmsMessage impl_INetworkOperatorNotificationEventDetails<T>::SmsMessage() const
{
	Windows::Devices::Sms::ISmsMessage value;
	check(shim()->get_SmsMessage(put(value)));
	return value;
}

template <typename T> void impl_INetworkOperatorTetheringEntitlementCheck<T>::AuthorizeTethering(bool const allow, StringReference const & entitlementFailureReason) const
{
	check(shim()->abi_AuthorizeTethering(allow, get(entitlementFailureReason)));
}

template <typename T> String impl_INetworkOperatorTetheringAccessPointConfiguration<T>::Ssid() const
{
	String value;
	check(shim()->get_Ssid(put(value)));
	return value;
}

template <typename T> void impl_INetworkOperatorTetheringAccessPointConfiguration<T>::Ssid(StringReference const & value) const
{
	check(shim()->put_Ssid(get(value)));
}

template <typename T> String impl_INetworkOperatorTetheringAccessPointConfiguration<T>::Passphrase() const
{
	String value;
	check(shim()->get_Passphrase(put(value)));
	return value;
}

template <typename T> void impl_INetworkOperatorTetheringAccessPointConfiguration<T>::Passphrase(StringReference const & value) const
{
	check(shim()->put_Passphrase(get(value)));
}

template <typename T> Windows::Networking::NetworkOperators::TetheringOperationStatus impl_INetworkOperatorTetheringOperationResult<T>::Status() const
{
	Windows::Networking::NetworkOperators::TetheringOperationStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> String impl_INetworkOperatorTetheringOperationResult<T>::AdditionalErrorMessage() const
{
	String value;
	check(shim()->get_AdditionalErrorMessage(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::TetheringCapability impl_INetworkOperatorTetheringManagerStatics<T>::GetTetheringCapability(StringReference const & networkAccountId) const
{
	Windows::Networking::NetworkOperators::TetheringCapability value = {};
	check(shim()->abi_GetTetheringCapability(get(networkAccountId), &value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager impl_INetworkOperatorTetheringManagerStatics<T>::CreateFromNetworkAccountId(StringReference const & networkAccountId) const
{
	Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager ppManager = nullptr;
	check(shim()->abi_CreateFromNetworkAccountId(get(networkAccountId), put(ppManager)));
	return ppManager;
}

template <typename T> Windows::Networking::NetworkOperators::TetheringCapability impl_INetworkOperatorTetheringManagerStatics2<T>::GetTetheringCapabilityFromConnectionProfile(Windows::Networking::Connectivity::ConnectionProfile const & profile) const
{
	Windows::Networking::NetworkOperators::TetheringCapability result = {};
	check(shim()->abi_GetTetheringCapabilityFromConnectionProfile(get(profile), &result));
	return result;
}

template <typename T> Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager impl_INetworkOperatorTetheringManagerStatics2<T>::CreateFromConnectionProfile(Windows::Networking::Connectivity::ConnectionProfile const & profile) const
{
	Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager ppManager = nullptr;
	check(shim()->abi_CreateFromConnectionProfile(get(profile), put(ppManager)));
	return ppManager;
}

template <typename T> unsigned impl_INetworkOperatorTetheringManager<T>::MaxClientCount() const
{
	unsigned value = {};
	check(shim()->get_MaxClientCount(&value));
	return value;
}

template <typename T> unsigned impl_INetworkOperatorTetheringManager<T>::ClientCount() const
{
	unsigned value = {};
	check(shim()->get_ClientCount(&value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::TetheringOperationalState impl_INetworkOperatorTetheringManager<T>::TetheringOperationalState() const
{
	Windows::Networking::NetworkOperators::TetheringOperationalState value = {};
	check(shim()->get_TetheringOperationalState(&value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::NetworkOperatorTetheringAccessPointConfiguration impl_INetworkOperatorTetheringManager<T>::GetCurrentAccessPointConfiguration() const
{
	Windows::Networking::NetworkOperators::NetworkOperatorTetheringAccessPointConfiguration configuration = nullptr;
	check(shim()->abi_GetCurrentAccessPointConfiguration(put(configuration)));
	return configuration;
}

template <typename T> Windows::Foundation::IAsyncAction impl_INetworkOperatorTetheringManager<T>::ConfigureAccessPointAsync(Windows::Networking::NetworkOperators::NetworkOperatorTetheringAccessPointConfiguration const & configuration) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_ConfigureAccessPointAsync(get(configuration), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult> impl_INetworkOperatorTetheringManager<T>::StartTetheringAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult> asyncInfo;
	check(shim()->abi_StartTetheringAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult> impl_INetworkOperatorTetheringManager<T>::StopTetheringAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::NetworkOperatorTetheringOperationResult> asyncInfo;
	check(shim()->abi_StopTetheringAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> String impl_INetworkOperatorTetheringClient<T>::MacAddress() const
{
	String value;
	check(shim()->get_MacAddress(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> impl_INetworkOperatorTetheringClient<T>::HostNames() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> value;
	check(shim()->get_HostNames(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::NetworkOperators::NetworkOperatorTetheringClient> impl_INetworkOperatorTetheringClientManager<T>::GetTetheringClients() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::NetworkOperators::NetworkOperatorTetheringClient> value;
	check(shim()->abi_GetTetheringClients(put(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandAccountEventArgs<T>::NetworkAccountId() const
{
	String value;
	check(shim()->get_NetworkAccountId(put(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandAccountUpdatedEventArgs<T>::NetworkAccountId() const
{
	String value;
	check(shim()->get_NetworkAccountId(put(value)));
	return value;
}

template <typename T> bool impl_IMobileBroadbandAccountUpdatedEventArgs<T>::HasDeviceInformationChanged() const
{
	bool value = {};
	check(shim()->get_HasDeviceInformationChanged(put(value)));
	return value;
}

template <typename T> bool impl_IMobileBroadbandAccountUpdatedEventArgs<T>::HasNetworkChanged() const
{
	bool value = {};
	check(shim()->get_HasNetworkChanged(put(value)));
	return value;
}

template <typename T> long long impl_IMobileBroadbandAccountWatcher<T>::AccountAdded(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_AccountAdded(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMobileBroadbandAccountWatcher<T>::AccountAdded(F handler) const
{
	return AccountAdded(Windows::Foundation::TypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs>(handler));
}

template <typename T> void impl_IMobileBroadbandAccountWatcher<T>::AccountAdded(long long const cookie) const
{
	check(shim()->remove_AccountAdded(cookie));
}

template <typename T> long long impl_IMobileBroadbandAccountWatcher<T>::AccountUpdated(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountUpdatedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_AccountUpdated(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMobileBroadbandAccountWatcher<T>::AccountUpdated(F handler) const
{
	return AccountUpdated(Windows::Foundation::TypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountUpdatedEventArgs>(handler));
}

template <typename T> void impl_IMobileBroadbandAccountWatcher<T>::AccountUpdated(long long const cookie) const
{
	check(shim()->remove_AccountUpdated(cookie));
}

template <typename T> long long impl_IMobileBroadbandAccountWatcher<T>::AccountRemoved(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_AccountRemoved(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMobileBroadbandAccountWatcher<T>::AccountRemoved(F handler) const
{
	return AccountRemoved(Windows::Foundation::TypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, Windows::Networking::NetworkOperators::MobileBroadbandAccountEventArgs>(handler));
}

template <typename T> void impl_IMobileBroadbandAccountWatcher<T>::AccountRemoved(long long const cookie) const
{
	check(shim()->remove_AccountRemoved(cookie));
}

template <typename T> long long impl_IMobileBroadbandAccountWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_EnumerationCompleted(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMobileBroadbandAccountWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, IInspectable>(handler));
}

template <typename T> void impl_IMobileBroadbandAccountWatcher<T>::EnumerationCompleted(long long const cookie) const
{
	check(shim()->remove_EnumerationCompleted(cookie));
}

template <typename T> long long impl_IMobileBroadbandAccountWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_Stopped(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IMobileBroadbandAccountWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcher, IInspectable>(handler));
}

template <typename T> void impl_IMobileBroadbandAccountWatcher<T>::Stopped(long long const cookie) const
{
	check(shim()->remove_Stopped(cookie));
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcherStatus impl_IMobileBroadbandAccountWatcher<T>::Status() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandAccountWatcherStatus status = {};
	check(shim()->get_Status(&status));
	return status;
}

template <typename T> void impl_IMobileBroadbandAccountWatcher<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IMobileBroadbandAccountWatcher<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> String impl_IMobileBroadbandModemStatics<T>::GetDeviceSelector() const
{
	String value;
	check(shim()->abi_GetDeviceSelector(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandModem impl_IMobileBroadbandModemStatics<T>::FromId(StringReference const & deviceId) const
{
	Windows::Networking::NetworkOperators::MobileBroadbandModem value = nullptr;
	check(shim()->abi_FromId(get(deviceId), put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandModem impl_IMobileBroadbandModemStatics<T>::GetDefault() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandModem value = nullptr;
	check(shim()->abi_GetDefault(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandUicc impl_IMobileBroadbandModemConfiguration<T>::Uicc() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandUicc value = nullptr;
	check(shim()->get_Uicc(put(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandModemConfiguration<T>::HomeProviderId() const
{
	String value;
	check(shim()->get_HomeProviderId(put(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandModemConfiguration<T>::HomeProviderName() const
{
	String value;
	check(shim()->get_HomeProviderName(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandAccount impl_IMobileBroadbandModem<T>::CurrentAccount() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandAccount value = nullptr;
	check(shim()->get_CurrentAccount(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandDeviceInformation impl_IMobileBroadbandModem<T>::DeviceInformation() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandDeviceInformation value = nullptr;
	check(shim()->get_DeviceInformation(put(value)));
	return value;
}

template <typename T> unsigned impl_IMobileBroadbandModem<T>::MaxDeviceServiceCommandSizeInBytes() const
{
	unsigned value = {};
	check(shim()->get_MaxDeviceServiceCommandSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IMobileBroadbandModem<T>::MaxDeviceServiceDataSizeInBytes() const
{
	unsigned value = {};
	check(shim()->get_MaxDeviceServiceDataSizeInBytes(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceInformation> impl_IMobileBroadbandModem<T>::DeviceServices() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceInformation> value;
	check(shim()->get_DeviceServices(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandDeviceService impl_IMobileBroadbandModem<T>::GetDeviceService(GUID const deviceServiceId) const
{
	Windows::Networking::NetworkOperators::MobileBroadbandDeviceService value = nullptr;
	check(shim()->abi_GetDeviceService(deviceServiceId, put(value)));
	return value;
}

template <typename T> bool impl_IMobileBroadbandModem<T>::IsResetSupported() const
{
	bool value = {};
	check(shim()->get_IsResetSupported(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMobileBroadbandModem<T>::ResetAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_ResetAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandModemConfiguration> impl_IMobileBroadbandModem<T>::GetCurrentConfigurationAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandModemConfiguration> asyncInfo;
	check(shim()->abi_GetCurrentConfigurationAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandNetwork impl_IMobileBroadbandModem<T>::CurrentNetwork() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandNetwork value = nullptr;
	check(shim()->get_CurrentNetwork(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Networking::NetworkOperators::MobileBroadbandPinType> impl_IMobileBroadbandPinManager<T>::SupportedPins() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Networking::NetworkOperators::MobileBroadbandPinType> value;
	check(shim()->get_SupportedPins(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandPin impl_IMobileBroadbandPinManager<T>::GetPin(Windows::Networking::NetworkOperators::MobileBroadbandPinType const pinType) const
{
	Windows::Networking::NetworkOperators::MobileBroadbandPin value = nullptr;
	check(shim()->abi_GetPin(pinType, put(value)));
	return value;
}

template <typename T> bool impl_IMobileBroadbandPinOperationResult<T>::IsSuccessful() const
{
	bool value = {};
	check(shim()->get_IsSuccessful(put(value)));
	return value;
}

template <typename T> unsigned impl_IMobileBroadbandPinOperationResult<T>::AttemptsRemaining() const
{
	unsigned value = {};
	check(shim()->get_AttemptsRemaining(&value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandPinType impl_IMobileBroadbandPin<T>::Type() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandPinType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandPinLockState impl_IMobileBroadbandPin<T>::LockState() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandPinLockState value = {};
	check(shim()->get_LockState(&value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandPinFormat impl_IMobileBroadbandPin<T>::Format() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandPinFormat value = {};
	check(shim()->get_Format(&value));
	return value;
}

template <typename T> bool impl_IMobileBroadbandPin<T>::Enabled() const
{
	bool value = {};
	check(shim()->get_Enabled(put(value)));
	return value;
}

template <typename T> unsigned impl_IMobileBroadbandPin<T>::MaxLength() const
{
	unsigned value = {};
	check(shim()->get_MaxLength(&value));
	return value;
}

template <typename T> unsigned impl_IMobileBroadbandPin<T>::MinLength() const
{
	unsigned value = {};
	check(shim()->get_MinLength(&value));
	return value;
}

template <typename T> unsigned impl_IMobileBroadbandPin<T>::AttemptsRemaining() const
{
	unsigned value = {};
	check(shim()->get_AttemptsRemaining(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandPinOperationResult> impl_IMobileBroadbandPin<T>::EnableAsync(StringReference const & currentPin) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandPinOperationResult> asyncInfo;
	check(shim()->abi_EnableAsync(get(currentPin), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandPinOperationResult> impl_IMobileBroadbandPin<T>::DisableAsync(StringReference const & currentPin) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandPinOperationResult> asyncInfo;
	check(shim()->abi_DisableAsync(get(currentPin), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandPinOperationResult> impl_IMobileBroadbandPin<T>::EnterAsync(StringReference const & currentPin) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandPinOperationResult> asyncInfo;
	check(shim()->abi_EnterAsync(get(currentPin), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandPinOperationResult> impl_IMobileBroadbandPin<T>::ChangeAsync(StringReference const & currentPin, StringReference const & newPin) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandPinOperationResult> asyncInfo;
	check(shim()->abi_ChangeAsync(get(currentPin), get(newPin), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandPinOperationResult> impl_IMobileBroadbandPin<T>::UnblockAsync(StringReference const & pinUnblockKey, StringReference const & newPin) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandPinOperationResult> asyncInfo;
	check(shim()->abi_UnblockAsync(get(pinUnblockKey), get(newPin), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> GUID impl_IMobileBroadbandDeviceServiceInformation<T>::DeviceServiceId() const
{
	GUID value = {};
	check(shim()->get_DeviceServiceId(&value));
	return value;
}

template <typename T> bool impl_IMobileBroadbandDeviceServiceInformation<T>::IsDataReadSupported() const
{
	bool value = {};
	check(shim()->get_IsDataReadSupported(put(value)));
	return value;
}

template <typename T> bool impl_IMobileBroadbandDeviceServiceInformation<T>::IsDataWriteSupported() const
{
	bool value = {};
	check(shim()->get_IsDataWriteSupported(put(value)));
	return value;
}

template <typename T> GUID impl_IMobileBroadbandDeviceService<T>::DeviceServiceId() const
{
	GUID value = {};
	check(shim()->get_DeviceServiceId(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IMobileBroadbandDeviceService<T>::SupportedCommands() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_SupportedCommands(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceDataSession impl_IMobileBroadbandDeviceService<T>::OpenDataSession() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceDataSession value = nullptr;
	check(shim()->abi_OpenDataSession(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceCommandSession impl_IMobileBroadbandDeviceService<T>::OpenCommandSession() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceCommandSession value = nullptr;
	check(shim()->abi_OpenCommandSession(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IMobileBroadbandDeviceServiceDataReceivedEventArgs<T>::ReceivedData() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_ReceivedData(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IMobileBroadbandDeviceServiceDataSession<T>::WriteDataAsync(Windows::Storage::Streams::IBuffer const & value) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_WriteDataAsync(get(value), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> void impl_IMobileBroadbandDeviceServiceDataSession<T>::CloseSession() const
{
	check(shim()->abi_CloseSession());
}

template <typename T> long long impl_IMobileBroadbandDeviceServiceDataSession<T>::DataReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceDataSession, Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceDataReceivedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_DataReceived(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IMobileBroadbandDeviceServiceDataSession<T>::DataReceived(F eventHandler) const
{
	return DataReceived(Windows::Foundation::TypedEventHandler<Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceDataSession, Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceDataReceivedEventArgs>(eventHandler));
}

template <typename T> void impl_IMobileBroadbandDeviceServiceDataSession<T>::DataReceived(long long const eventCookie) const
{
	check(shim()->remove_DataReceived(eventCookie));
}

template <typename T> unsigned impl_IMobileBroadbandDeviceServiceCommandResult<T>::StatusCode() const
{
	unsigned value = {};
	check(shim()->get_StatusCode(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IMobileBroadbandDeviceServiceCommandResult<T>::ResponseData() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_ResponseData(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceCommandResult> impl_IMobileBroadbandDeviceServiceCommandSession<T>::SendQueryCommandAsync(unsigned const commandId, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceCommandResult> asyncInfo;
	check(shim()->abi_SendQueryCommandAsync(commandId, get(data), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceCommandResult> impl_IMobileBroadbandDeviceServiceCommandSession<T>::SendSetCommandAsync(unsigned const commandId, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandDeviceServiceCommandResult> asyncInfo;
	check(shim()->abi_SendSetCommandAsync(commandId, get(data), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> void impl_IMobileBroadbandDeviceServiceCommandSession<T>::CloseSession() const
{
	check(shim()->abi_CloseSession());
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandUiccAppOperationStatus impl_IMobileBroadbandUiccAppsResult<T>::Status() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandUiccAppOperationStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::NetworkOperators::MobileBroadbandUiccApp> impl_IMobileBroadbandUiccAppsResult<T>::UiccApps() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::NetworkOperators::MobileBroadbandUiccApp> value;
	check(shim()->get_UiccApps(put(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandUicc<T>::SimIccId() const
{
	String value;
	check(shim()->get_SimIccId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandUiccAppsResult> impl_IMobileBroadbandUicc<T>::GetUiccAppsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandUiccAppsResult> asyncInfo;
	check(shim()->abi_GetUiccAppsAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandUiccAppOperationStatus impl_IMobileBroadbandUiccAppRecordDetailsResult<T>::Status() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandUiccAppOperationStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::UiccAppRecordKind impl_IMobileBroadbandUiccAppRecordDetailsResult<T>::Kind() const
{
	Windows::Networking::NetworkOperators::UiccAppRecordKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> int impl_IMobileBroadbandUiccAppRecordDetailsResult<T>::RecordCount() const
{
	int value = {};
	check(shim()->get_RecordCount(&value));
	return value;
}

template <typename T> int impl_IMobileBroadbandUiccAppRecordDetailsResult<T>::RecordSize() const
{
	int value = {};
	check(shim()->get_RecordSize(&value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::UiccAccessCondition impl_IMobileBroadbandUiccAppRecordDetailsResult<T>::ReadAccessCondition() const
{
	Windows::Networking::NetworkOperators::UiccAccessCondition value = {};
	check(shim()->get_ReadAccessCondition(&value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::UiccAccessCondition impl_IMobileBroadbandUiccAppRecordDetailsResult<T>::WriteAccessCondition() const
{
	Windows::Networking::NetworkOperators::UiccAccessCondition value = {};
	check(shim()->get_WriteAccessCondition(&value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandUiccAppOperationStatus impl_IMobileBroadbandUiccAppReadRecordResult<T>::Status() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandUiccAppOperationStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IMobileBroadbandUiccAppReadRecordResult<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IMobileBroadbandUiccApp<T>::Id() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::UiccAppKind impl_IMobileBroadbandUiccApp<T>::Kind() const
{
	Windows::Networking::NetworkOperators::UiccAppKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandUiccAppRecordDetailsResult> impl_IMobileBroadbandUiccApp<T>::GetRecordDetailsAsync(Windows::Foundation::Collections::IIterable<unsigned> const & uiccFilePath) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandUiccAppRecordDetailsResult> asyncInfo;
	check(shim()->abi_GetRecordDetailsAsync(get(uiccFilePath), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandUiccAppReadRecordResult> impl_IMobileBroadbandUiccApp<T>::ReadRecordAsync(Windows::Foundation::Collections::IIterable<unsigned> const & uiccFilePath, int const recordIndex) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::MobileBroadbandUiccAppReadRecordResult> asyncInfo;
	check(shim()->abi_ReadRecordAsync(get(uiccFilePath), recordIndex, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> String impl_IMobileBroadbandNetworkRegistrationStateChange<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandNetwork impl_IMobileBroadbandNetworkRegistrationStateChange<T>::Network() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandNetwork value = nullptr;
	check(shim()->get_Network(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::NetworkOperators::MobileBroadbandNetworkRegistrationStateChange> impl_IMobileBroadbandNetworkRegistrationStateChangeTriggerDetails<T>::NetworkRegistrationStateChanges() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::NetworkOperators::MobileBroadbandNetworkRegistrationStateChange> value;
	check(shim()->get_NetworkRegistrationStateChanges(put(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandRadioStateChange<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandRadioState impl_IMobileBroadbandRadioStateChange<T>::RadioState() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandRadioState value = {};
	check(shim()->get_RadioState(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::NetworkOperators::MobileBroadbandRadioStateChange> impl_IMobileBroadbandRadioStateChangeTriggerDetails<T>::RadioStateChanges() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::NetworkOperators::MobileBroadbandRadioStateChange> value;
	check(shim()->get_RadioStateChanges(put(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandPinLockStateChange<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandPinType impl_IMobileBroadbandPinLockStateChange<T>::PinType() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandPinType value = {};
	check(shim()->get_PinType(&value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::MobileBroadbandPinLockState impl_IMobileBroadbandPinLockStateChange<T>::PinLockState() const
{
	Windows::Networking::NetworkOperators::MobileBroadbandPinLockState value = {};
	check(shim()->get_PinLockState(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::NetworkOperators::MobileBroadbandPinLockStateChange> impl_IMobileBroadbandPinLockStateChangeTriggerDetails<T>::PinLockStateChanges() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::NetworkOperators::MobileBroadbandPinLockStateChange> value;
	check(shim()->get_PinLockStateChanges(put(value)));
	return value;
}

template <typename T> String impl_IMobileBroadbandDeviceServiceTriggerDetails<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> GUID impl_IMobileBroadbandDeviceServiceTriggerDetails<T>::DeviceServiceId() const
{
	GUID value = {};
	check(shim()->get_DeviceServiceId(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IMobileBroadbandDeviceServiceTriggerDetails<T>::ReceivedData() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_ReceivedData(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IKnownCSimFilePathsStatics<T>::EFSpn() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_EFSpn(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IKnownCSimFilePathsStatics<T>::Gid1() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_Gid1(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IKnownCSimFilePathsStatics<T>::Gid2() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_Gid2(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IKnownRuimFilePathsStatics<T>::EFSpn() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_EFSpn(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IKnownRuimFilePathsStatics<T>::Gid1() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_Gid1(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IKnownRuimFilePathsStatics<T>::Gid2() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_Gid2(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IKnownSimFilePathsStatics<T>::EFOns() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_EFOns(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IKnownSimFilePathsStatics<T>::EFSpn() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_EFSpn(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IKnownSimFilePathsStatics<T>::Gid1() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_Gid1(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IKnownSimFilePathsStatics<T>::Gid2() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_Gid2(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IKnownUSimFilePathsStatics<T>::EFSpn() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_EFSpn(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IKnownUSimFilePathsStatics<T>::EFOpl() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_EFOpl(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IKnownUSimFilePathsStatics<T>::EFPnn() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_EFPnn(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IKnownUSimFilePathsStatics<T>::Gid1() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_Gid1(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<unsigned> impl_IKnownUSimFilePathsStatics<T>::Gid2() const
{
	Windows::Foundation::Collections::IVectorView<unsigned> value;
	check(shim()->get_Gid2(put(value)));
	return value;
}

template <typename T> String impl_IHotspotAuthenticationEventDetails<T>::EventToken() const
{
	String value;
	check(shim()->get_EventToken(put(value)));
	return value;
}

template <typename T> bool impl_IHotspotAuthenticationContextStatics<T>::TryGetAuthenticationContext(StringReference const & evenToken, Windows::Networking::NetworkOperators::HotspotAuthenticationContext & context) const
{
	bool isValid = {};
	check(shim()->abi_TryGetAuthenticationContext(get(evenToken), put(context), put(isValid)));
	return isValid;
}

template <typename T> Windows::Networking::Connectivity::NetworkAdapter impl_IHotspotAuthenticationContext<T>::NetworkAdapter() const
{
	Windows::Networking::Connectivity::NetworkAdapter value = nullptr;
	check(shim()->get_NetworkAdapter(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IHotspotAuthenticationContext<T>::RedirectMessageUrl() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_RedirectMessageUrl(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IHotspotAuthenticationContext<T>::RedirectMessageXml() const
{
	Windows::Data::Xml::Dom::XmlDocument value = nullptr;
	check(shim()->get_RedirectMessageXml(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IHotspotAuthenticationContext<T>::AuthenticationUrl() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_AuthenticationUrl(put(value)));
	return value;
}

template <typename T> void impl_IHotspotAuthenticationContext<T>::IssueCredentials(StringReference const & userName, StringReference const & password, StringReference const & extraParameters, bool const markAsManualConnectOnFailure) const
{
	check(shim()->abi_IssueCredentials(get(userName), get(password), get(extraParameters), markAsManualConnectOnFailure));
}

template <typename T> void impl_IHotspotAuthenticationContext<T>::AbortAuthentication(bool const markAsManual) const
{
	check(shim()->abi_AbortAuthentication(markAsManual));
}

template <typename T> void impl_IHotspotAuthenticationContext<T>::SkipAuthentication() const
{
	check(shim()->abi_SkipAuthentication());
}

template <typename T> void impl_IHotspotAuthenticationContext<T>::TriggerAttentionRequired(StringReference const & packageRelativeApplicationId, StringReference const & applicationParameters) const
{
	check(shim()->abi_TriggerAttentionRequired(get(packageRelativeApplicationId), get(applicationParameters)));
}

template <typename T> bool impl_IHotspotCredentialsAuthenticationResult<T>::HasNetworkErrorOccurred() const
{
	bool value = {};
	check(shim()->get_HasNetworkErrorOccurred(put(value)));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::HotspotAuthenticationResponseCode impl_IHotspotCredentialsAuthenticationResult<T>::ResponseCode() const
{
	Windows::Networking::NetworkOperators::HotspotAuthenticationResponseCode value = {};
	check(shim()->get_ResponseCode(&value));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IHotspotCredentialsAuthenticationResult<T>::LogoffUrl() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_LogoffUrl(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IHotspotCredentialsAuthenticationResult<T>::AuthenticationReplyXml() const
{
	Windows::Data::Xml::Dom::XmlDocument value = nullptr;
	check(shim()->get_AuthenticationReplyXml(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::HotspotCredentialsAuthenticationResult> impl_IHotspotAuthenticationContext2<T>::IssueCredentialsAsync(StringReference const & userName, StringReference const & password, StringReference const & extraParameters, bool const markAsManualConnectOnFailure) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::HotspotCredentialsAuthenticationResult> asyncInfo;
	check(shim()->abi_IssueCredentialsAsync(get(userName), get(password), get(extraParameters), markAsManualConnectOnFailure, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> bool impl_IProvisionFromXmlDocumentResults<T>::AllElementsProvisioned() const
{
	bool value = {};
	check(shim()->get_AllElementsProvisioned(put(value)));
	return value;
}

template <typename T> String impl_IProvisionFromXmlDocumentResults<T>::ProvisionResultsXml() const
{
	String value;
	check(shim()->get_ProvisionResultsXml(put(value)));
	return value;
}

template <typename T> void impl_IProvisionedProfile<T>::UpdateCost(Windows::Networking::Connectivity::NetworkCostType const value) const
{
	check(shim()->abi_UpdateCost(value));
}

template <typename T> void impl_IProvisionedProfile<T>::UpdateUsage(Windows::Networking::NetworkOperators::ProfileUsage const & value) const
{
	check(shim()->abi_UpdateUsage(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::ProvisionFromXmlDocumentResults> impl_IProvisioningAgent<T>::ProvisionFromXmlDocumentAsync(StringReference const & provisioningXmlDocument) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::ProvisionFromXmlDocumentResults> asyncInfo;
	check(shim()->abi_ProvisionFromXmlDocumentAsync(get(provisioningXmlDocument), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Networking::NetworkOperators::ProvisionedProfile impl_IProvisioningAgent<T>::GetProvisionedProfile(Windows::Networking::NetworkOperators::ProfileMediaType const mediaType, StringReference const & profileName) const
{
	Windows::Networking::NetworkOperators::ProvisionedProfile provisionedProfile = nullptr;
	check(shim()->abi_GetProvisionedProfile(mediaType, get(profileName), put(provisionedProfile)));
	return provisionedProfile;
}

template <typename T> Windows::Networking::NetworkOperators::ProvisioningAgent impl_IProvisioningAgentStaticMethods<T>::CreateFromNetworkAccountId(StringReference const & networkAccountId) const
{
	Windows::Networking::NetworkOperators::ProvisioningAgent provisioningAgent = nullptr;
	check(shim()->abi_CreateFromNetworkAccountId(get(networkAccountId), put(provisioningAgent)));
	return provisioningAgent;
}

template <typename T> byte impl_IUssdMessage<T>::DataCodingScheme() const
{
	byte value = {};
	check(shim()->get_DataCodingScheme(&value));
	return value;
}

template <typename T> void impl_IUssdMessage<T>::DataCodingScheme(byte const value) const
{
	check(shim()->put_DataCodingScheme(value));
}

template <typename T> String impl_IUssdMessage<T>::PayloadAsText() const
{
	String value;
	check(shim()->get_PayloadAsText(put(value)));
	return value;
}

template <typename T> void impl_IUssdMessage<T>::PayloadAsText(StringReference const & value) const
{
	check(shim()->put_PayloadAsText(get(value)));
}

template <typename T> Windows::Networking::NetworkOperators::UssdMessage impl_IUssdMessageFactory<T>::CreateMessage(StringReference const & messageText) const
{
	Windows::Networking::NetworkOperators::UssdMessage ussdMessage = nullptr;
	check(shim()->abi_CreateMessage(get(messageText), put(ussdMessage)));
	return ussdMessage;
}

template <typename T> Windows::Networking::NetworkOperators::UssdResultCode impl_IUssdReply<T>::ResultCode() const
{
	Windows::Networking::NetworkOperators::UssdResultCode value = {};
	check(shim()->get_ResultCode(&value));
	return value;
}

template <typename T> Windows::Networking::NetworkOperators::UssdMessage impl_IUssdReply<T>::Message() const
{
	Windows::Networking::NetworkOperators::UssdMessage value = nullptr;
	check(shim()->get_Message(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::UssdReply> impl_IUssdSession<T>::SendMessageAndGetReplyAsync(Windows::Networking::NetworkOperators::UssdMessage const & message) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::NetworkOperators::UssdReply> asyncInfo;
	check(shim()->abi_SendMessageAndGetReplyAsync(get(message), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> void impl_IUssdSession<T>::Close() const
{
	check(shim()->abi_Close());
}

template <typename T> Windows::Networking::NetworkOperators::UssdSession impl_IUssdSessionStatics<T>::CreateFromNetworkAccountId(StringReference const & networkAccountId) const
{
	Windows::Networking::NetworkOperators::UssdSession ussdSession = nullptr;
	check(shim()->abi_CreateFromNetworkAccountId(get(networkAccountId), put(ussdSession)));
	return ussdSession;
}

template <typename T> Windows::Networking::NetworkOperators::UssdSession impl_IUssdSessionStatics<T>::CreateFromNetworkInterfaceId(StringReference const & networkInterfaceId) const
{
	Windows::Networking::NetworkOperators::UssdSession ussdSession = nullptr;
	check(shim()->abi_CreateFromNetworkInterfaceId(get(networkInterfaceId), put(ussdSession)));
	return ussdSession;
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Proximity {

template <typename T> void impl_IMessageReceivedHandler<T>::Invoke(Windows::Networking::Proximity::ProximityDevice const & sender, Windows::Networking::Proximity::ProximityMessage const & message) const
{
	check(shim()->abi_Invoke(get(sender), get(message)));
}

template <typename T> void impl_IMessageTransmittedHandler<T>::Invoke(Windows::Networking::Proximity::ProximityDevice const & sender, long long const messageId) const
{
	check(shim()->abi_Invoke(get(sender), messageId));
}

template <typename T> void impl_IDeviceArrivedEventHandler<T>::Invoke(Windows::Networking::Proximity::ProximityDevice const & sender) const
{
	check(shim()->abi_Invoke(get(sender)));
}

template <typename T> void impl_IDeviceDepartedEventHandler<T>::Invoke(Windows::Networking::Proximity::ProximityDevice const & sender) const
{
	check(shim()->abi_Invoke(get(sender)));
}

template <typename T> String impl_IProximityMessage<T>::MessageType() const
{
	String value;
	check(shim()->get_MessageType(put(value)));
	return value;
}

template <typename T> long long impl_IProximityMessage<T>::SubscriptionId() const
{
	long long value = {};
	check(shim()->get_SubscriptionId(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IProximityMessage<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> String impl_IProximityMessage<T>::DataAsString() const
{
	String value;
	check(shim()->get_DataAsString(put(value)));
	return value;
}

template <typename T> long long impl_IProximityDevice<T>::SubscribeForMessage(StringReference const & messageType, Windows::Networking::Proximity::IMessageReceivedHandler const & messageReceivedHandler) const
{
	long long subscriptionId = {};
	check(shim()->abi_SubscribeForMessage(get(messageType), get(messageReceivedHandler), &subscriptionId));
	return subscriptionId;
}

template <typename T> template <typename F> long long impl_IProximityDevice<T>::SubscribeForMessage(StringReference const & messageType, F messageReceivedHandler) const
{
	return SubscribeForMessage(messageType, Windows::Networking::Proximity::MessageReceivedHandler(messageReceivedHandler));
}

template <typename T> long long impl_IProximityDevice<T>::PublishMessage(StringReference const & messageType, StringReference const & message) const
{
	long long messageId = {};
	check(shim()->abi_PublishMessage(get(messageType), get(message), &messageId));
	return messageId;
}

template <typename T> long long impl_IProximityDevice<T>::PublishMessage(StringReference const & messageType, StringReference const & message, Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const
{
	long long messageId = {};
	check(shim()->abi_PublishMessageWithCallback(get(messageType), get(message), get(messageTransmittedHandler), &messageId));
	return messageId;
}

template <typename T> template <typename F> long long impl_IProximityDevice<T>::PublishMessage(StringReference const & messageType, StringReference const & message, F messageTransmittedHandler) const
{
	return PublishMessage(messageType, message, Windows::Networking::Proximity::MessageTransmittedHandler(messageTransmittedHandler));
}

template <typename T> long long impl_IProximityDevice<T>::PublishBinaryMessage(StringReference const & messageType, Windows::Storage::Streams::IBuffer const & message) const
{
	long long messageId = {};
	check(shim()->abi_PublishBinaryMessage(get(messageType), get(message), &messageId));
	return messageId;
}

template <typename T> long long impl_IProximityDevice<T>::PublishBinaryMessage(StringReference const & messageType, Windows::Storage::Streams::IBuffer const & message, Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const
{
	long long messageId = {};
	check(shim()->abi_PublishBinaryMessageWithCallback(get(messageType), get(message), get(messageTransmittedHandler), &messageId));
	return messageId;
}

template <typename T> template <typename F> long long impl_IProximityDevice<T>::PublishBinaryMessage(StringReference const & messageType, Windows::Storage::Streams::IBuffer const & message, F messageTransmittedHandler) const
{
	return PublishBinaryMessage(messageType, message, Windows::Networking::Proximity::MessageTransmittedHandler(messageTransmittedHandler));
}

template <typename T> long long impl_IProximityDevice<T>::PublishUriMessage(Windows::Foundation::Uri const & message) const
{
	long long messageId = {};
	check(shim()->abi_PublishUriMessage(get(message), &messageId));
	return messageId;
}

template <typename T> long long impl_IProximityDevice<T>::PublishUriMessage(Windows::Foundation::Uri const & message, Windows::Networking::Proximity::IMessageTransmittedHandler const & messageTransmittedHandler) const
{
	long long messageId = {};
	check(shim()->abi_PublishUriMessageWithCallback(get(message), get(messageTransmittedHandler), &messageId));
	return messageId;
}

template <typename T> template <typename F> long long impl_IProximityDevice<T>::PublishUriMessage(Windows::Foundation::Uri const & message, F messageTransmittedHandler) const
{
	return PublishUriMessage(message, Windows::Networking::Proximity::MessageTransmittedHandler(messageTransmittedHandler));
}

template <typename T> void impl_IProximityDevice<T>::StopSubscribingForMessage(long long const subscriptionId) const
{
	check(shim()->abi_StopSubscribingForMessage(subscriptionId));
}

template <typename T> void impl_IProximityDevice<T>::StopPublishingMessage(long long const messageId) const
{
	check(shim()->abi_StopPublishingMessage(messageId));
}

template <typename T> long long impl_IProximityDevice<T>::DeviceArrived(Windows::Networking::Proximity::IDeviceArrivedEventHandler const & arrivedHandler) const
{
	long long cookie = {};
	check(shim()->add_DeviceArrived(get(arrivedHandler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IProximityDevice<T>::DeviceArrived(F arrivedHandler) const
{
	return DeviceArrived(Windows::Networking::Proximity::DeviceArrivedEventHandler(arrivedHandler));
}

template <typename T> void impl_IProximityDevice<T>::DeviceArrived(long long const cookie) const
{
	check(shim()->remove_DeviceArrived(cookie));
}

template <typename T> long long impl_IProximityDevice<T>::DeviceDeparted(Windows::Networking::Proximity::IDeviceDepartedEventHandler const & departedHandler) const
{
	long long cookie = {};
	check(shim()->add_DeviceDeparted(get(departedHandler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IProximityDevice<T>::DeviceDeparted(F departedHandler) const
{
	return DeviceDeparted(Windows::Networking::Proximity::DeviceDepartedEventHandler(departedHandler));
}

template <typename T> void impl_IProximityDevice<T>::DeviceDeparted(long long const cookie) const
{
	check(shim()->remove_DeviceDeparted(cookie));
}

template <typename T> unsigned impl_IProximityDevice<T>::MaxMessageBytes() const
{
	unsigned value = {};
	check(shim()->get_MaxMessageBytes(&value));
	return value;
}

template <typename T> unsigned long long impl_IProximityDevice<T>::BitsPerSecond() const
{
	unsigned long long value = {};
	check(shim()->get_BitsPerSecond(&value));
	return value;
}

template <typename T> String impl_IProximityDevice<T>::DeviceId() const
{
	String value;
	check(shim()->get_DeviceId(put(value)));
	return value;
}

template <typename T> String impl_IProximityDeviceStatics<T>::GetDeviceSelector() const
{
	String selector;
	check(shim()->abi_GetDeviceSelector(put(selector)));
	return selector;
}

template <typename T> Windows::Networking::Proximity::ProximityDevice impl_IProximityDeviceStatics<T>::GetDefault() const
{
	Windows::Networking::Proximity::ProximityDevice proximityDevice = nullptr;
	check(shim()->abi_GetDefault(put(proximityDevice)));
	return proximityDevice;
}

template <typename T> Windows::Networking::Proximity::ProximityDevice impl_IProximityDeviceStatics<T>::FromId(StringReference const & deviceId) const
{
	Windows::Networking::Proximity::ProximityDevice proximityDevice = nullptr;
	check(shim()->abi_FromId(get(deviceId), put(proximityDevice)));
	return proximityDevice;
}

template <typename T> Windows::Networking::Proximity::TriggeredConnectState impl_ITriggeredConnectionStateChangedEventArgs<T>::State() const
{
	Windows::Networking::Proximity::TriggeredConnectState value = {};
	check(shim()->get_State(&value));
	return value;
}

template <typename T> unsigned impl_ITriggeredConnectionStateChangedEventArgs<T>::Id() const
{
	unsigned value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocket impl_ITriggeredConnectionStateChangedEventArgs<T>::Socket() const
{
	Windows::Networking::Sockets::StreamSocket value = nullptr;
	check(shim()->get_Socket(put(value)));
	return value;
}

template <typename T> String impl_IPeerInformation<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IPeerInformation3<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IPeerInformation3<T>::DiscoveryData() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_DiscoveryData(put(value)));
	return value;
}

template <typename T> Windows::Networking::Proximity::PeerInformation impl_IConnectionRequestedEventArgs<T>::PeerInformation() const
{
	Windows::Networking::Proximity::PeerInformation value = nullptr;
	check(shim()->get_PeerInformation(put(value)));
	return value;
}

template <typename T> long long impl_IPeerWatcher<T>::Added(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation> const & handler) const
{
	long long token = {};
	check(shim()->add_Added(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPeerWatcher<T>::Added(F handler) const
{
	return Added(Windows::Foundation::TypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation>(handler));
}

template <typename T> void impl_IPeerWatcher<T>::Added(long long const token) const
{
	check(shim()->remove_Added(token));
}

template <typename T> long long impl_IPeerWatcher<T>::Removed(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation> const & handler) const
{
	long long token = {};
	check(shim()->add_Removed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPeerWatcher<T>::Removed(F handler) const
{
	return Removed(Windows::Foundation::TypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation>(handler));
}

template <typename T> void impl_IPeerWatcher<T>::Removed(long long const token) const
{
	check(shim()->remove_Removed(token));
}

template <typename T> long long impl_IPeerWatcher<T>::Updated(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation> const & handler) const
{
	long long token = {};
	check(shim()->add_Updated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPeerWatcher<T>::Updated(F handler) const
{
	return Updated(Windows::Foundation::TypedEventHandler<Windows::Networking::Proximity::PeerWatcher, Windows::Networking::Proximity::PeerInformation>(handler));
}

template <typename T> void impl_IPeerWatcher<T>::Updated(long long const token) const
{
	check(shim()->remove_Updated(token));
}

template <typename T> long long impl_IPeerWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_EnumerationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPeerWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::Networking::Proximity::PeerWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPeerWatcher<T>::EnumerationCompleted(long long const token) const
{
	check(shim()->remove_EnumerationCompleted(token));
}

template <typename T> long long impl_IPeerWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::Networking::Proximity::PeerWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPeerWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::Networking::Proximity::PeerWatcher, IInspectable>(handler));
}

template <typename T> void impl_IPeerWatcher<T>::Stopped(long long const token) const
{
	check(shim()->remove_Stopped(token));
}

template <typename T> Windows::Networking::Proximity::PeerWatcherStatus impl_IPeerWatcher<T>::Status() const
{
	Windows::Networking::Proximity::PeerWatcherStatus status = {};
	check(shim()->get_Status(&status));
	return status;
}

template <typename T> void impl_IPeerWatcher<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IPeerWatcher<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> bool impl_IPeerFinderStatics<T>::AllowBluetooth() const
{
	bool value = {};
	check(shim()->get_AllowBluetooth(put(value)));
	return value;
}

template <typename T> void impl_IPeerFinderStatics<T>::AllowBluetooth(bool const value) const
{
	check(shim()->put_AllowBluetooth(value));
}

template <typename T> bool impl_IPeerFinderStatics<T>::AllowInfrastructure() const
{
	bool value = {};
	check(shim()->get_AllowInfrastructure(put(value)));
	return value;
}

template <typename T> void impl_IPeerFinderStatics<T>::AllowInfrastructure(bool const value) const
{
	check(shim()->put_AllowInfrastructure(value));
}

template <typename T> bool impl_IPeerFinderStatics<T>::AllowWiFiDirect() const
{
	bool value = {};
	check(shim()->get_AllowWiFiDirect(put(value)));
	return value;
}

template <typename T> void impl_IPeerFinderStatics<T>::AllowWiFiDirect(bool const value) const
{
	check(shim()->put_AllowWiFiDirect(value));
}

template <typename T> String impl_IPeerFinderStatics<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IPeerFinderStatics<T>::DisplayName(StringReference const & value) const
{
	check(shim()->put_DisplayName(get(value)));
}

template <typename T> Windows::Networking::Proximity::PeerDiscoveryTypes impl_IPeerFinderStatics<T>::SupportedDiscoveryTypes() const
{
	Windows::Networking::Proximity::PeerDiscoveryTypes value = {};
	check(shim()->get_SupportedDiscoveryTypes(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IPeerFinderStatics<T>::AlternateIdentities() const
{
	Windows::Foundation::Collections::IMap<String, String> value;
	check(shim()->get_AlternateIdentities(put(value)));
	return value;
}

template <typename T> void impl_IPeerFinderStatics<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IPeerFinderStatics<T>::Start(StringReference const & peerMessage) const
{
	check(shim()->abi_StartWithMessage(get(peerMessage)));
}

template <typename T> void impl_IPeerFinderStatics<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> long long impl_IPeerFinderStatics<T>::TriggeredConnectionStateChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_TriggeredConnectionStateChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IPeerFinderStatics<T>::TriggeredConnectionStateChanged(F handler) const
{
	return TriggeredConnectionStateChanged(Windows::Foundation::TypedEventHandler<IInspectable, Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs>(handler));
}

template <typename T> void impl_IPeerFinderStatics<T>::TriggeredConnectionStateChanged(long long const cookie) const
{
	check(shim()->remove_TriggeredConnectionStateChanged(cookie));
}

template <typename T> long long impl_IPeerFinderStatics<T>::ConnectionRequested(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Networking::Proximity::ConnectionRequestedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_ConnectionRequested(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IPeerFinderStatics<T>::ConnectionRequested(F handler) const
{
	return ConnectionRequested(Windows::Foundation::TypedEventHandler<IInspectable, Windows::Networking::Proximity::ConnectionRequestedEventArgs>(handler));
}

template <typename T> void impl_IPeerFinderStatics<T>::ConnectionRequested(long long const cookie) const
{
	check(shim()->remove_ConnectionRequested(cookie));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Proximity::PeerInformation>> impl_IPeerFinderStatics<T>::FindAllPeersAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Proximity::PeerInformation>> asyncOp;
	check(shim()->abi_FindAllPeersAsync(put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::Sockets::StreamSocket> impl_IPeerFinderStatics<T>::ConnectAsync(Windows::Networking::Proximity::PeerInformation const & peerInformation) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::Sockets::StreamSocket> asyncOp;
	check(shim()->abi_ConnectAsync(get(peerInformation), put(asyncOp)));
	return asyncOp;
}

template <typename T> Windows::Networking::Proximity::PeerRole impl_IPeerFinderStatics2<T>::Role() const
{
	Windows::Networking::Proximity::PeerRole value = {};
	check(shim()->get_Role(&value));
	return value;
}

template <typename T> void impl_IPeerFinderStatics2<T>::Role(Windows::Networking::Proximity::PeerRole const value) const
{
	check(shim()->put_Role(value));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IPeerFinderStatics2<T>::DiscoveryData() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_DiscoveryData(put(value)));
	return value;
}

template <typename T> void impl_IPeerFinderStatics2<T>::DiscoveryData(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_DiscoveryData(get(value)));
}

template <typename T> Windows::Networking::Proximity::PeerWatcher impl_IPeerFinderStatics2<T>::CreateWatcher() const
{
	Windows::Networking::Proximity::PeerWatcher watcher = nullptr;
	check(shim()->abi_CreateWatcher(put(watcher)));
	return watcher;
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace PushNotifications {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> impl_IPushNotificationChannelManagerStatics<T>::CreatePushNotificationChannelForApplicationAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> operation;
	check(shim()->abi_CreatePushNotificationChannelForApplicationAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> impl_IPushNotificationChannelManagerStatics<T>::CreatePushNotificationChannelForApplicationAsync(StringReference const & applicationId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> operation;
	check(shim()->abi_CreatePushNotificationChannelForApplicationAsyncWithId(get(applicationId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> impl_IPushNotificationChannelManagerStatics<T>::CreatePushNotificationChannelForSecondaryTileAsync(StringReference const & tileId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> operation;
	check(shim()->abi_CreatePushNotificationChannelForSecondaryTileAsync(get(tileId), put(operation)));
	return operation;
}

template <typename T> String impl_IPushNotificationChannel<T>::Uri() const
{
	String value;
	check(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPushNotificationChannel<T>::ExpirationTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_ExpirationTime(&value));
	return value;
}

template <typename T> void impl_IPushNotificationChannel<T>::Close() const
{
	check(shim()->abi_Close());
}

template <typename T> long long impl_IPushNotificationChannel<T>::PushNotificationReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::PushNotifications::PushNotificationChannel, Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_PushNotificationReceived(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPushNotificationChannel<T>::PushNotificationReceived(F handler) const
{
	return PushNotificationReceived(Windows::Foundation::TypedEventHandler<Windows::Networking::PushNotifications::PushNotificationChannel, Windows::Networking::PushNotifications::PushNotificationReceivedEventArgs>(handler));
}

template <typename T> void impl_IPushNotificationChannel<T>::PushNotificationReceived(long long const token) const
{
	check(shim()->remove_PushNotificationReceived(token));
}

template <typename T> void impl_IPushNotificationReceivedEventArgs<T>::Cancel(bool const value) const
{
	check(shim()->put_Cancel(value));
}

template <typename T> bool impl_IPushNotificationReceivedEventArgs<T>::Cancel() const
{
	bool value = {};
	check(shim()->get_Cancel(put(value)));
	return value;
}

template <typename T> Windows::Networking::PushNotifications::PushNotificationType impl_IPushNotificationReceivedEventArgs<T>::NotificationType() const
{
	Windows::Networking::PushNotifications::PushNotificationType value = {};
	check(shim()->get_NotificationType(&value));
	return value;
}

template <typename T> Windows::UI::Notifications::ToastNotification impl_IPushNotificationReceivedEventArgs<T>::ToastNotification() const
{
	Windows::UI::Notifications::ToastNotification value = nullptr;
	check(shim()->get_ToastNotification(put(value)));
	return value;
}

template <typename T> Windows::UI::Notifications::TileNotification impl_IPushNotificationReceivedEventArgs<T>::TileNotification() const
{
	Windows::UI::Notifications::TileNotification value = nullptr;
	check(shim()->get_TileNotification(put(value)));
	return value;
}

template <typename T> Windows::UI::Notifications::BadgeNotification impl_IPushNotificationReceivedEventArgs<T>::BadgeNotification() const
{
	Windows::UI::Notifications::BadgeNotification value = nullptr;
	check(shim()->get_BadgeNotification(put(value)));
	return value;
}

template <typename T> Windows::Networking::PushNotifications::RawNotification impl_IPushNotificationReceivedEventArgs<T>::RawNotification() const
{
	Windows::Networking::PushNotifications::RawNotification value = nullptr;
	check(shim()->get_RawNotification(put(value)));
	return value;
}

template <typename T> String impl_IRawNotification<T>::Content() const
{
	String value;
	check(shim()->get_Content(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace ServiceDiscovery { namespace Dnssd {

template <typename T> long long impl_IDnssdServiceWatcher<T>::Added(Windows::Foundation::ITypedEventHandler<Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceWatcher, Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceInstance> const & handler) const
{
	long long token = {};
	check(shim()->add_Added(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDnssdServiceWatcher<T>::Added(F handler) const
{
	return Added(Windows::Foundation::TypedEventHandler<Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceWatcher, Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceInstance>(handler));
}

template <typename T> void impl_IDnssdServiceWatcher<T>::Added(long long const token) const
{
	check(shim()->remove_Added(token));
}

template <typename T> long long impl_IDnssdServiceWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_EnumerationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDnssdServiceWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceWatcher, IInspectable>(handler));
}

template <typename T> void impl_IDnssdServiceWatcher<T>::EnumerationCompleted(long long const token) const
{
	check(shim()->remove_EnumerationCompleted(token));
}

template <typename T> long long impl_IDnssdServiceWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IDnssdServiceWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceWatcher, IInspectable>(handler));
}

template <typename T> void impl_IDnssdServiceWatcher<T>::Stopped(long long const token) const
{
	check(shim()->remove_Stopped(token));
}

template <typename T> Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceWatcherStatus impl_IDnssdServiceWatcher<T>::Status() const
{
	Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceWatcherStatus status = {};
	check(shim()->get_Status(&status));
	return status;
}

template <typename T> void impl_IDnssdServiceWatcher<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IDnssdServiceWatcher<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> Windows::Networking::ServiceDiscovery::Dnssd::DnssdRegistrationStatus impl_IDnssdRegistrationResult<T>::Status() const
{
	Windows::Networking::ServiceDiscovery::Dnssd::DnssdRegistrationStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IDnssdRegistrationResult<T>::IPAddress() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_IPAddress(put(value)));
	return value;
}

template <typename T> bool impl_IDnssdRegistrationResult<T>::HasInstanceNameChanged() const
{
	bool value = {};
	check(shim()->get_HasInstanceNameChanged(put(value)));
	return value;
}

template <typename T> Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceInstance impl_IDnssdServiceInstanceFactory<T>::Create(StringReference const & dnssdServiceInstanceName, Windows::Networking::HostName const & hostName, unsigned short const port) const
{
	Windows::Networking::ServiceDiscovery::Dnssd::DnssdServiceInstance result = nullptr;
	check(shim()->abi_Create(get(dnssdServiceInstanceName), get(hostName), port, put(result)));
	return result;
}

template <typename T> String impl_IDnssdServiceInstance<T>::DnssdServiceInstanceName() const
{
	String value;
	check(shim()->get_DnssdServiceInstanceName(put(value)));
	return value;
}

template <typename T> void impl_IDnssdServiceInstance<T>::DnssdServiceInstanceName(StringReference const & value) const
{
	check(shim()->put_DnssdServiceInstanceName(get(value)));
}

template <typename T> Windows::Networking::HostName impl_IDnssdServiceInstance<T>::HostName() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_HostName(put(value)));
	return value;
}

template <typename T> void impl_IDnssdServiceInstance<T>::HostName(Windows::Networking::HostName const & value) const
{
	check(shim()->put_HostName(get(value)));
}

template <typename T> unsigned short impl_IDnssdServiceInstance<T>::Port() const
{
	unsigned short value = {};
	check(shim()->get_Port(&value));
	return value;
}

template <typename T> void impl_IDnssdServiceInstance<T>::Port(unsigned short const value) const
{
	check(shim()->put_Port(value));
}

template <typename T> unsigned short impl_IDnssdServiceInstance<T>::Priority() const
{
	unsigned short value = {};
	check(shim()->get_Priority(&value));
	return value;
}

template <typename T> void impl_IDnssdServiceInstance<T>::Priority(unsigned short const value) const
{
	check(shim()->put_Priority(value));
}

template <typename T> unsigned short impl_IDnssdServiceInstance<T>::Weight() const
{
	unsigned short value = {};
	check(shim()->get_Weight(&value));
	return value;
}

template <typename T> void impl_IDnssdServiceInstance<T>::Weight(unsigned short const value) const
{
	check(shim()->put_Weight(value));
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IDnssdServiceInstance<T>::TextAttributes() const
{
	Windows::Foundation::Collections::IMap<String, String> value;
	check(shim()->get_TextAttributes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::ServiceDiscovery::Dnssd::DnssdRegistrationResult> impl_IDnssdServiceInstance<T>::RegisterStreamSocketListenerAsync(Windows::Networking::Sockets::StreamSocketListener const & socket) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::ServiceDiscovery::Dnssd::DnssdRegistrationResult> result;
	check(shim()->abi_RegisterStreamSocketListenerAsync1(get(socket), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::ServiceDiscovery::Dnssd::DnssdRegistrationResult> impl_IDnssdServiceInstance<T>::RegisterStreamSocketListenerAsync(Windows::Networking::Sockets::StreamSocketListener const & socket, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::ServiceDiscovery::Dnssd::DnssdRegistrationResult> result;
	check(shim()->abi_RegisterStreamSocketListenerAsync2(get(socket), get(adapter), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::ServiceDiscovery::Dnssd::DnssdRegistrationResult> impl_IDnssdServiceInstance<T>::RegisterDatagramSocketAsync(Windows::Networking::Sockets::DatagramSocket const & socket) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::ServiceDiscovery::Dnssd::DnssdRegistrationResult> result;
	check(shim()->abi_RegisterDatagramSocketAsync1(get(socket), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::ServiceDiscovery::Dnssd::DnssdRegistrationResult> impl_IDnssdServiceInstance<T>::RegisterDatagramSocketAsync(Windows::Networking::Sockets::DatagramSocket const & socket, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::ServiceDiscovery::Dnssd::DnssdRegistrationResult> result;
	check(shim()->abi_RegisterDatagramSocketAsync2(get(socket), get(adapter), put(result)));
	return result;
}

}}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Sockets {

template <typename T> String impl_IControlChannelTrigger<T>::ControlChannelTriggerId() const
{
	String value;
	check(shim()->get_ControlChannelTriggerId(put(value)));
	return value;
}

template <typename T> unsigned impl_IControlChannelTrigger<T>::ServerKeepAliveIntervalInMinutes() const
{
	unsigned value = {};
	check(shim()->get_ServerKeepAliveIntervalInMinutes(&value));
	return value;
}

template <typename T> void impl_IControlChannelTrigger<T>::ServerKeepAliveIntervalInMinutes(unsigned const value) const
{
	check(shim()->put_ServerKeepAliveIntervalInMinutes(value));
}

template <typename T> unsigned impl_IControlChannelTrigger<T>::CurrentKeepAliveIntervalInMinutes() const
{
	unsigned value = {};
	check(shim()->get_CurrentKeepAliveIntervalInMinutes(&value));
	return value;
}

template <typename T> IInspectable impl_IControlChannelTrigger<T>::TransportObject() const
{
	IInspectable value;
	check(shim()->get_TransportObject(put(value)));
	return value;
}

template <typename T> Windows::ApplicationModel::Background::IBackgroundTrigger impl_IControlChannelTrigger<T>::KeepAliveTrigger() const
{
	Windows::ApplicationModel::Background::IBackgroundTrigger trigger;
	check(shim()->get_KeepAliveTrigger(put(trigger)));
	return trigger;
}

template <typename T> Windows::ApplicationModel::Background::IBackgroundTrigger impl_IControlChannelTrigger<T>::PushNotificationTrigger() const
{
	Windows::ApplicationModel::Background::IBackgroundTrigger trigger;
	check(shim()->get_PushNotificationTrigger(put(trigger)));
	return trigger;
}

template <typename T> void impl_IControlChannelTrigger<T>::UsingTransport(IInspectable const & transport) const
{
	check(shim()->abi_UsingTransport(get(transport)));
}

template <typename T> Windows::Networking::Sockets::ControlChannelTriggerStatus impl_IControlChannelTrigger<T>::WaitForPushEnabled() const
{
	Windows::Networking::Sockets::ControlChannelTriggerStatus channelTriggerStatus = {};
	check(shim()->abi_WaitForPushEnabled(&channelTriggerStatus));
	return channelTriggerStatus;
}

template <typename T> void impl_IControlChannelTrigger<T>::DecreaseNetworkKeepAliveInterval() const
{
	check(shim()->abi_DecreaseNetworkKeepAliveInterval());
}

template <typename T> void impl_IControlChannelTrigger<T>::FlushTransport() const
{
	check(shim()->abi_FlushTransport());
}

template <typename T> Windows::Networking::Sockets::ControlChannelTrigger impl_IControlChannelTriggerFactory<T>::CreateControlChannelTrigger(StringReference const & channelId, unsigned const serverKeepAliveIntervalInMinutes) const
{
	Windows::Networking::Sockets::ControlChannelTrigger notificationChannel = nullptr;
	check(shim()->abi_CreateControlChannelTrigger(get(channelId), serverKeepAliveIntervalInMinutes, put(notificationChannel)));
	return notificationChannel;
}

template <typename T> Windows::Networking::Sockets::ControlChannelTrigger impl_IControlChannelTriggerFactory<T>::CreateControlChannelTriggerEx(StringReference const & channelId, unsigned const serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType const resourceRequestType) const
{
	Windows::Networking::Sockets::ControlChannelTrigger notificationChannel = nullptr;
	check(shim()->abi_CreateControlChannelTriggerEx(get(channelId), serverKeepAliveIntervalInMinutes, resourceRequestType, put(notificationChannel)));
	return notificationChannel;
}

template <typename T> Windows::Networking::Sockets::ControlChannelTrigger impl_IControlChannelTriggerEventDetails<T>::ControlChannelTrigger() const
{
	Windows::Networking::Sockets::ControlChannelTrigger value = nullptr;
	check(shim()->get_ControlChannelTrigger(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::ControlChannelTriggerResetReason impl_IControlChannelTriggerResetEventDetails<T>::ResetReason() const
{
	Windows::Networking::Sockets::ControlChannelTriggerResetReason value = {};
	check(shim()->get_ResetReason(&value));
	return value;
}

template <typename T> bool impl_IControlChannelTriggerResetEventDetails<T>::HardwareSlotReset() const
{
	bool value = {};
	check(shim()->get_HardwareSlotReset(put(value)));
	return value;
}

template <typename T> bool impl_IControlChannelTriggerResetEventDetails<T>::SoftwareSlotReset() const
{
	bool value = {};
	check(shim()->get_SoftwareSlotReset(put(value)));
	return value;
}

template <typename T> GUID impl_ISocketActivityInformation<T>::TaskId() const
{
	GUID value = {};
	check(shim()->get_TaskId(&value));
	return value;
}

template <typename T> String impl_ISocketActivityInformation<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketActivityKind impl_ISocketActivityInformation<T>::SocketKind() const
{
	Windows::Networking::Sockets::SocketActivityKind value = {};
	check(shim()->get_SocketKind(&value));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketActivityContext impl_ISocketActivityInformation<T>::Context() const
{
	Windows::Networking::Sockets::SocketActivityContext value = nullptr;
	check(shim()->get_Context(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::DatagramSocket impl_ISocketActivityInformation<T>::DatagramSocket() const
{
	Windows::Networking::Sockets::DatagramSocket value = nullptr;
	check(shim()->get_DatagramSocket(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocket impl_ISocketActivityInformation<T>::StreamSocket() const
{
	Windows::Networking::Sockets::StreamSocket value = nullptr;
	check(shim()->get_StreamSocket(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocketListener impl_ISocketActivityInformation<T>::StreamSocketListener() const
{
	Windows::Networking::Sockets::StreamSocketListener value = nullptr;
	check(shim()->get_StreamSocketListener(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketActivityTriggerReason impl_ISocketActivityTriggerDetails<T>::Reason() const
{
	Windows::Networking::Sockets::SocketActivityTriggerReason value = {};
	check(shim()->get_Reason(&value));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketActivityInformation impl_ISocketActivityTriggerDetails<T>::SocketInformation() const
{
	Windows::Networking::Sockets::SocketActivityInformation value = nullptr;
	check(shim()->get_SocketInformation(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::Networking::Sockets::SocketActivityInformation> impl_ISocketActivityInformationStatics<T>::AllSockets() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::Networking::Sockets::SocketActivityInformation> sockets;
	check(shim()->get_AllSockets(put(sockets)));
	return sockets;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ISocketActivityContext<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketActivityContext impl_ISocketActivityContextFactory<T>::Create(Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Networking::Sockets::SocketActivityContext context = nullptr;
	check(shim()->abi_Create(get(data), put(context)));
	return context;
}

template <typename T> Windows::Networking::HostName impl_IDatagramSocketMessageReceivedEventArgs<T>::RemoteAddress() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_RemoteAddress(put(value)));
	return value;
}

template <typename T> String impl_IDatagramSocketMessageReceivedEventArgs<T>::RemotePort() const
{
	String value;
	check(shim()->get_RemotePort(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IDatagramSocketMessageReceivedEventArgs<T>::LocalAddress() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_LocalAddress(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::DataReader impl_IDatagramSocketMessageReceivedEventArgs<T>::GetDataReader() const
{
	Windows::Storage::Streams::DataReader dataReader = nullptr;
	check(shim()->abi_GetDataReader(put(dataReader)));
	return dataReader;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IDatagramSocketMessageReceivedEventArgs<T>::GetDataStream() const
{
	Windows::Storage::Streams::IInputStream inputStream;
	check(shim()->abi_GetDataStream(put(inputStream)));
	return inputStream;
}

template <typename T> Windows::Networking::Sockets::SocketMessageType impl_IMessageWebSocketMessageReceivedEventArgs<T>::MessageType() const
{
	Windows::Networking::Sockets::SocketMessageType value = {};
	check(shim()->get_MessageType(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::DataReader impl_IMessageWebSocketMessageReceivedEventArgs<T>::GetDataReader() const
{
	Windows::Storage::Streams::DataReader dataReader = nullptr;
	check(shim()->abi_GetDataReader(put(dataReader)));
	return dataReader;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IMessageWebSocketMessageReceivedEventArgs<T>::GetDataStream() const
{
	Windows::Storage::Streams::IInputStream inputStream;
	check(shim()->abi_GetDataStream(put(inputStream)));
	return inputStream;
}

template <typename T> unsigned short impl_IWebSocketClosedEventArgs<T>::Code() const
{
	unsigned short value = {};
	check(shim()->get_Code(&value));
	return value;
}

template <typename T> String impl_IWebSocketClosedEventArgs<T>::Reason() const
{
	String value;
	check(shim()->get_Reason(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IDatagramSocketInformation<T>::LocalAddress() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_LocalAddress(put(value)));
	return value;
}

template <typename T> String impl_IDatagramSocketInformation<T>::LocalPort() const
{
	String value;
	check(shim()->get_LocalPort(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IDatagramSocketInformation<T>::RemoteAddress() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_RemoteAddress(put(value)));
	return value;
}

template <typename T> String impl_IDatagramSocketInformation<T>::RemotePort() const
{
	String value;
	check(shim()->get_RemotePort(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketQualityOfService impl_IDatagramSocketControl<T>::QualityOfService() const
{
	Windows::Networking::Sockets::SocketQualityOfService value = {};
	check(shim()->get_QualityOfService(&value));
	return value;
}

template <typename T> void impl_IDatagramSocketControl<T>::QualityOfService(Windows::Networking::Sockets::SocketQualityOfService const value) const
{
	check(shim()->put_QualityOfService(value));
}

template <typename T> byte impl_IDatagramSocketControl<T>::OutboundUnicastHopLimit() const
{
	byte value = {};
	check(shim()->get_OutboundUnicastHopLimit(&value));
	return value;
}

template <typename T> void impl_IDatagramSocketControl<T>::OutboundUnicastHopLimit(byte const value) const
{
	check(shim()->put_OutboundUnicastHopLimit(value));
}

template <typename T> unsigned impl_IDatagramSocketControl2<T>::InboundBufferSizeInBytes() const
{
	unsigned value = {};
	check(shim()->get_InboundBufferSizeInBytes(&value));
	return value;
}

template <typename T> void impl_IDatagramSocketControl2<T>::InboundBufferSizeInBytes(unsigned const value) const
{
	check(shim()->put_InboundBufferSizeInBytes(value));
}

template <typename T> bool impl_IDatagramSocketControl2<T>::DontFragment() const
{
	bool value = {};
	check(shim()->get_DontFragment(put(value)));
	return value;
}

template <typename T> void impl_IDatagramSocketControl2<T>::DontFragment(bool const value) const
{
	check(shim()->put_DontFragment(value));
}

template <typename T> bool impl_IDatagramSocketControl3<T>::MulticastOnly() const
{
	bool value = {};
	check(shim()->get_MulticastOnly(put(value)));
	return value;
}

template <typename T> void impl_IDatagramSocketControl3<T>::MulticastOnly(bool const value) const
{
	check(shim()->put_MulticastOnly(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> impl_IDatagramSocketStatics<T>::GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> operation;
	check(shim()->abi_GetEndpointPairsAsync(get(remoteHostName), get(remoteServiceName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> impl_IDatagramSocketStatics<T>::GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName, Windows::Networking::HostNameSortOptions const sortOptions) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> operation;
	check(shim()->abi_GetEndpointPairsWithSortOptionsAsync(get(remoteHostName), get(remoteServiceName), sortOptions, put(operation)));
	return operation;
}

template <typename T> Windows::Networking::Sockets::DatagramSocketControl impl_IDatagramSocket<T>::Control() const
{
	Windows::Networking::Sockets::DatagramSocketControl value = nullptr;
	check(shim()->get_Control(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::DatagramSocketInformation impl_IDatagramSocket<T>::Information() const
{
	Windows::Networking::Sockets::DatagramSocketInformation value = nullptr;
	check(shim()->get_Information(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IDatagramSocket<T>::OutputStream() const
{
	Windows::Storage::Streams::IOutputStream value;
	check(shim()->get_OutputStream(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket<T>::ConnectAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ConnectAsync(get(remoteHostName), get(remoteServiceName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket<T>::ConnectAsync(Windows::Networking::EndpointPair const & endpointPair) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ConnectWithEndpointPairAsync(get(endpointPair), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket<T>::BindServiceNameAsync(StringReference const & localServiceName) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_BindServiceNameAsync(get(localServiceName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket<T>::BindEndpointAsync(Windows::Networking::HostName const & localHostName, StringReference const & localServiceName) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_BindEndpointAsync(get(localHostName), get(localServiceName), put(operation)));
	return operation;
}

template <typename T> void impl_IDatagramSocket<T>::JoinMulticastGroup(Windows::Networking::HostName const & host) const
{
	check(shim()->abi_JoinMulticastGroup(get(host)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> impl_IDatagramSocket<T>::GetOutputStreamAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> value;
	check(shim()->abi_GetOutputStreamAsync(get(remoteHostName), get(remoteServiceName), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> impl_IDatagramSocket<T>::GetOutputStreamAsync(Windows::Networking::EndpointPair const & endpointPair) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IOutputStream> value;
	check(shim()->abi_GetOutputStreamWithEndpointPairAsync(get(endpointPair), put(value)));
	return value;
}

template <typename T> long long impl_IDatagramSocket<T>::MessageReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::DatagramSocket, Windows::Networking::Sockets::DatagramSocketMessageReceivedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_MessageReceived(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IDatagramSocket<T>::MessageReceived(F eventHandler) const
{
	return MessageReceived(Windows::Foundation::TypedEventHandler<Windows::Networking::Sockets::DatagramSocket, Windows::Networking::Sockets::DatagramSocketMessageReceivedEventArgs>(eventHandler));
}

template <typename T> void impl_IDatagramSocket<T>::MessageReceived(long long const eventCookie) const
{
	check(shim()->remove_MessageReceived(eventCookie));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket2<T>::BindServiceNameAsync(StringReference const & localServiceName, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_BindServiceNameAndAdapterAsync(get(localServiceName), get(adapter), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDatagramSocket3<T>::CancelIOAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_CancelIOAsync(put(operation)));
	return operation;
}

template <typename T> void impl_IDatagramSocket3<T>::EnableTransferOwnership(GUID const taskId) const
{
	check(shim()->abi_EnableTransferOwnership(taskId));
}

template <typename T> void impl_IDatagramSocket3<T>::EnableTransferOwnership(GUID const taskId, Windows::Networking::Sockets::SocketActivityConnectedStandbyAction const connectedStandbyAction) const
{
	check(shim()->abi_EnableTransferOwnershipWithConnectedStandbyAction(taskId, connectedStandbyAction));
}

template <typename T> void impl_IDatagramSocket3<T>::TransferOwnership(StringReference const & socketId) const
{
	check(shim()->abi_TransferOwnership(get(socketId)));
}

template <typename T> void impl_IDatagramSocket3<T>::TransferOwnership(StringReference const & socketId, Windows::Networking::Sockets::SocketActivityContext const & data) const
{
	check(shim()->abi_TransferOwnershipWithContext(get(socketId), get(data)));
}

template <typename T> void impl_IDatagramSocket3<T>::TransferOwnership(StringReference const & socketId, Windows::Networking::Sockets::SocketActivityContext const & data, Windows::Foundation::TimeSpan const & keepAliveTime) const
{
	check(shim()->abi_TransferOwnershipWithContextAndKeepAliveTime(get(socketId), get(data), keepAliveTime));
}

template <typename T> Windows::Networking::HostName impl_IStreamSocketInformation<T>::LocalAddress() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_LocalAddress(put(value)));
	return value;
}

template <typename T> String impl_IStreamSocketInformation<T>::LocalPort() const
{
	String value;
	check(shim()->get_LocalPort(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IStreamSocketInformation<T>::RemoteHostName() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_RemoteHostName(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IStreamSocketInformation<T>::RemoteAddress() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_RemoteAddress(put(value)));
	return value;
}

template <typename T> String impl_IStreamSocketInformation<T>::RemoteServiceName() const
{
	String value;
	check(shim()->get_RemoteServiceName(put(value)));
	return value;
}

template <typename T> String impl_IStreamSocketInformation<T>::RemotePort() const
{
	String value;
	check(shim()->get_RemotePort(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::RoundTripTimeStatistics impl_IStreamSocketInformation<T>::RoundTripTimeStatistics() const
{
	Windows::Networking::Sockets::RoundTripTimeStatistics value = {};
	check(shim()->get_RoundTripTimeStatistics(&value));
	return value;
}

template <typename T> Windows::Networking::Sockets::BandwidthStatistics impl_IStreamSocketInformation<T>::BandwidthStatistics() const
{
	Windows::Networking::Sockets::BandwidthStatistics value = {};
	check(shim()->get_BandwidthStatistics(&value));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketProtectionLevel impl_IStreamSocketInformation<T>::ProtectionLevel() const
{
	Windows::Networking::Sockets::SocketProtectionLevel value = {};
	check(shim()->get_ProtectionLevel(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IStreamSocketInformation<T>::SessionKey() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_SessionKey(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketSslErrorSeverity impl_IStreamSocketInformation2<T>::ServerCertificateErrorSeverity() const
{
	Windows::Networking::Sockets::SocketSslErrorSeverity value = {};
	check(shim()->get_ServerCertificateErrorSeverity(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> impl_IStreamSocketInformation2<T>::ServerCertificateErrors() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> value;
	check(shim()->get_ServerCertificateErrors(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_IStreamSocketInformation2<T>::ServerCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check(shim()->get_ServerCertificate(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_IStreamSocketInformation2<T>::ServerIntermediateCertificates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value;
	check(shim()->get_ServerIntermediateCertificates(put(value)));
	return value;
}

template <typename T> bool impl_IStreamSocketControl<T>::NoDelay() const
{
	bool value = {};
	check(shim()->get_NoDelay(put(value)));
	return value;
}

template <typename T> void impl_IStreamSocketControl<T>::NoDelay(bool const value) const
{
	check(shim()->put_NoDelay(value));
}

template <typename T> bool impl_IStreamSocketControl<T>::KeepAlive() const
{
	bool value = {};
	check(shim()->get_KeepAlive(put(value)));
	return value;
}

template <typename T> void impl_IStreamSocketControl<T>::KeepAlive(bool const value) const
{
	check(shim()->put_KeepAlive(value));
}

template <typename T> unsigned impl_IStreamSocketControl<T>::OutboundBufferSizeInBytes() const
{
	unsigned value = {};
	check(shim()->get_OutboundBufferSizeInBytes(&value));
	return value;
}

template <typename T> void impl_IStreamSocketControl<T>::OutboundBufferSizeInBytes(unsigned const value) const
{
	check(shim()->put_OutboundBufferSizeInBytes(value));
}

template <typename T> Windows::Networking::Sockets::SocketQualityOfService impl_IStreamSocketControl<T>::QualityOfService() const
{
	Windows::Networking::Sockets::SocketQualityOfService value = {};
	check(shim()->get_QualityOfService(&value));
	return value;
}

template <typename T> void impl_IStreamSocketControl<T>::QualityOfService(Windows::Networking::Sockets::SocketQualityOfService const value) const
{
	check(shim()->put_QualityOfService(value));
}

template <typename T> byte impl_IStreamSocketControl<T>::OutboundUnicastHopLimit() const
{
	byte value = {};
	check(shim()->get_OutboundUnicastHopLimit(&value));
	return value;
}

template <typename T> void impl_IStreamSocketControl<T>::OutboundUnicastHopLimit(byte const value) const
{
	check(shim()->put_OutboundUnicastHopLimit(value));
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> impl_IStreamSocketControl2<T>::IgnorableServerCertificateErrors() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> value;
	check(shim()->get_IgnorableServerCertificateErrors(put(value)));
	return value;
}

template <typename T> bool impl_IStreamSocketControl3<T>::SerializeConnectionAttempts() const
{
	bool value = {};
	check(shim()->get_SerializeConnectionAttempts(put(value)));
	return value;
}

template <typename T> void impl_IStreamSocketControl3<T>::SerializeConnectionAttempts(bool const value) const
{
	check(shim()->put_SerializeConnectionAttempts(value));
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_IStreamSocketControl3<T>::ClientCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check(shim()->get_ClientCertificate(put(value)));
	return value;
}

template <typename T> void impl_IStreamSocketControl3<T>::ClientCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const
{
	check(shim()->put_ClientCertificate(get(value)));
}

template <typename T> Windows::Networking::Sockets::StreamSocketControl impl_IStreamSocket<T>::Control() const
{
	Windows::Networking::Sockets::StreamSocketControl value = nullptr;
	check(shim()->get_Control(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocketInformation impl_IStreamSocket<T>::Information() const
{
	Windows::Networking::Sockets::StreamSocketInformation value = nullptr;
	check(shim()->get_Information(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IStreamSocket<T>::InputStream() const
{
	Windows::Storage::Streams::IInputStream value;
	check(shim()->get_InputStream(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IStreamSocket<T>::OutputStream() const
{
	Windows::Storage::Streams::IOutputStream value;
	check(shim()->get_OutputStream(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::ConnectAsync(Windows::Networking::EndpointPair const & endpointPair) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ConnectWithEndpointPairAsync(get(endpointPair), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::ConnectAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ConnectAsync(get(remoteHostName), get(remoteServiceName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::ConnectAsync(Windows::Networking::EndpointPair const & endpointPair, Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ConnectWithEndpointPairAndProtectionLevelAsync(get(endpointPair), protectionLevel, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::ConnectAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName, Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ConnectWithProtectionLevelAsync(get(remoteHostName), get(remoteServiceName), protectionLevel, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket<T>::UpgradeToSslAsync(Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel, Windows::Networking::HostName const & validationHostName) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_UpgradeToSslAsync(protectionLevel, get(validationHostName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket2<T>::ConnectAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName, Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ConnectWithProtectionLevelAndAdapterAsync(get(remoteHostName), get(remoteServiceName), protectionLevel, get(adapter), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocket3<T>::CancelIOAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_CancelIOAsync(put(operation)));
	return operation;
}

template <typename T> void impl_IStreamSocket3<T>::EnableTransferOwnership(GUID const taskId) const
{
	check(shim()->abi_EnableTransferOwnership(taskId));
}

template <typename T> void impl_IStreamSocket3<T>::EnableTransferOwnership(GUID const taskId, Windows::Networking::Sockets::SocketActivityConnectedStandbyAction const connectedStandbyAction) const
{
	check(shim()->abi_EnableTransferOwnershipWithConnectedStandbyAction(taskId, connectedStandbyAction));
}

template <typename T> void impl_IStreamSocket3<T>::TransferOwnership(StringReference const & socketId) const
{
	check(shim()->abi_TransferOwnership(get(socketId)));
}

template <typename T> void impl_IStreamSocket3<T>::TransferOwnership(StringReference const & socketId, Windows::Networking::Sockets::SocketActivityContext const & data) const
{
	check(shim()->abi_TransferOwnershipWithContext(get(socketId), get(data)));
}

template <typename T> void impl_IStreamSocket3<T>::TransferOwnership(StringReference const & socketId, Windows::Networking::Sockets::SocketActivityContext const & data, Windows::Foundation::TimeSpan const & keepAliveTime) const
{
	check(shim()->abi_TransferOwnershipWithContextAndKeepAliveTime(get(socketId), get(data), keepAliveTime));
}

template <typename T> Windows::Networking::Sockets::SocketQualityOfService impl_IStreamSocketListenerControl<T>::QualityOfService() const
{
	Windows::Networking::Sockets::SocketQualityOfService value = {};
	check(shim()->get_QualityOfService(&value));
	return value;
}

template <typename T> void impl_IStreamSocketListenerControl<T>::QualityOfService(Windows::Networking::Sockets::SocketQualityOfService const value) const
{
	check(shim()->put_QualityOfService(value));
}

template <typename T> bool impl_IStreamSocketListenerControl2<T>::NoDelay() const
{
	bool value = {};
	check(shim()->get_NoDelay(put(value)));
	return value;
}

template <typename T> void impl_IStreamSocketListenerControl2<T>::NoDelay(bool const value) const
{
	check(shim()->put_NoDelay(value));
}

template <typename T> bool impl_IStreamSocketListenerControl2<T>::KeepAlive() const
{
	bool value = {};
	check(shim()->get_KeepAlive(put(value)));
	return value;
}

template <typename T> void impl_IStreamSocketListenerControl2<T>::KeepAlive(bool const value) const
{
	check(shim()->put_KeepAlive(value));
}

template <typename T> unsigned impl_IStreamSocketListenerControl2<T>::OutboundBufferSizeInBytes() const
{
	unsigned value = {};
	check(shim()->get_OutboundBufferSizeInBytes(&value));
	return value;
}

template <typename T> void impl_IStreamSocketListenerControl2<T>::OutboundBufferSizeInBytes(unsigned const value) const
{
	check(shim()->put_OutboundBufferSizeInBytes(value));
}

template <typename T> byte impl_IStreamSocketListenerControl2<T>::OutboundUnicastHopLimit() const
{
	byte value = {};
	check(shim()->get_OutboundUnicastHopLimit(&value));
	return value;
}

template <typename T> void impl_IStreamSocketListenerControl2<T>::OutboundUnicastHopLimit(byte const value) const
{
	check(shim()->put_OutboundUnicastHopLimit(value));
}

template <typename T> String impl_IStreamSocketListenerInformation<T>::LocalPort() const
{
	String value;
	check(shim()->get_LocalPort(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocket impl_IStreamSocketListenerConnectionReceivedEventArgs<T>::Socket() const
{
	Windows::Networking::Sockets::StreamSocket value = nullptr;
	check(shim()->get_Socket(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocketListenerControl impl_IStreamSocketListener<T>::Control() const
{
	Windows::Networking::Sockets::StreamSocketListenerControl value = nullptr;
	check(shim()->get_Control(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamSocketListenerInformation impl_IStreamSocketListener<T>::Information() const
{
	Windows::Networking::Sockets::StreamSocketListenerInformation value = nullptr;
	check(shim()->get_Information(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocketListener<T>::BindServiceNameAsync(StringReference const & localServiceName) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_BindServiceNameAsync(get(localServiceName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocketListener<T>::BindEndpointAsync(Windows::Networking::HostName const & localHostName, StringReference const & localServiceName) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_BindEndpointAsync(get(localHostName), get(localServiceName), put(operation)));
	return operation;
}

template <typename T> long long impl_IStreamSocketListener<T>::ConnectionReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::StreamSocketListener, Windows::Networking::Sockets::StreamSocketListenerConnectionReceivedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_ConnectionReceived(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IStreamSocketListener<T>::ConnectionReceived(F eventHandler) const
{
	return ConnectionReceived(Windows::Foundation::TypedEventHandler<Windows::Networking::Sockets::StreamSocketListener, Windows::Networking::Sockets::StreamSocketListenerConnectionReceivedEventArgs>(eventHandler));
}

template <typename T> void impl_IStreamSocketListener<T>::ConnectionReceived(long long const eventCookie) const
{
	check(shim()->remove_ConnectionReceived(eventCookie));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocketListener2<T>::BindServiceNameAsync(StringReference const & localServiceName, Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_BindServiceNameWithProtectionLevelAsync(get(localServiceName), protectionLevel, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocketListener2<T>::BindServiceNameAsync(StringReference const & localServiceName, Windows::Networking::Sockets::SocketProtectionLevel const protectionLevel, Windows::Networking::Connectivity::NetworkAdapter const & adapter) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_BindServiceNameWithProtectionLevelAndAdapterAsync(get(localServiceName), protectionLevel, get(adapter), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStreamSocketListener3<T>::CancelIOAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_CancelIOAsync(put(operation)));
	return operation;
}

template <typename T> void impl_IStreamSocketListener3<T>::EnableTransferOwnership(GUID const taskId) const
{
	check(shim()->abi_EnableTransferOwnership(taskId));
}

template <typename T> void impl_IStreamSocketListener3<T>::EnableTransferOwnership(GUID const taskId, Windows::Networking::Sockets::SocketActivityConnectedStandbyAction const connectedStandbyAction) const
{
	check(shim()->abi_EnableTransferOwnershipWithConnectedStandbyAction(taskId, connectedStandbyAction));
}

template <typename T> void impl_IStreamSocketListener3<T>::TransferOwnership(StringReference const & socketId) const
{
	check(shim()->abi_TransferOwnership(get(socketId)));
}

template <typename T> void impl_IStreamSocketListener3<T>::TransferOwnership(StringReference const & socketId, Windows::Networking::Sockets::SocketActivityContext const & data) const
{
	check(shim()->abi_TransferOwnershipWithContext(get(socketId), get(data)));
}

template <typename T> unsigned impl_IWebSocketControl<T>::OutboundBufferSizeInBytes() const
{
	unsigned value = {};
	check(shim()->get_OutboundBufferSizeInBytes(&value));
	return value;
}

template <typename T> void impl_IWebSocketControl<T>::OutboundBufferSizeInBytes(unsigned const value) const
{
	check(shim()->put_OutboundBufferSizeInBytes(value));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IWebSocketControl<T>::ServerCredential() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check(shim()->get_ServerCredential(put(value)));
	return value;
}

template <typename T> void impl_IWebSocketControl<T>::ServerCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check(shim()->put_ServerCredential(get(value)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IWebSocketControl<T>::ProxyCredential() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check(shim()->get_ProxyCredential(put(value)));
	return value;
}

template <typename T> void impl_IWebSocketControl<T>::ProxyCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check(shim()->put_ProxyCredential(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IWebSocketControl<T>::SupportedProtocols() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_SupportedProtocols(put(value)));
	return value;
}

template <typename T> Windows::Networking::HostName impl_IWebSocketInformation<T>::LocalAddress() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_LocalAddress(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::BandwidthStatistics impl_IWebSocketInformation<T>::BandwidthStatistics() const
{
	Windows::Networking::Sockets::BandwidthStatistics value = {};
	check(shim()->get_BandwidthStatistics(&value));
	return value;
}

template <typename T> String impl_IWebSocketInformation<T>::Protocol() const
{
	String value;
	check(shim()->get_Protocol(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IWebSocket<T>::OutputStream() const
{
	Windows::Storage::Streams::IOutputStream value;
	check(shim()->get_OutputStream(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebSocket<T>::ConnectAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ConnectAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> void impl_IWebSocket<T>::SetRequestHeader(StringReference const & headerName, StringReference const & headerValue) const
{
	check(shim()->abi_SetRequestHeader(get(headerName), get(headerValue)));
}

template <typename T> long long impl_IWebSocket<T>::Closed(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::IWebSocket, Windows::Networking::Sockets::WebSocketClosedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_Closed(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IWebSocket<T>::Closed(F eventHandler) const
{
	return Closed(Windows::Foundation::TypedEventHandler<Windows::Networking::Sockets::IWebSocket, Windows::Networking::Sockets::WebSocketClosedEventArgs>(eventHandler));
}

template <typename T> void impl_IWebSocket<T>::Closed(long long const eventCookie) const
{
	check(shim()->remove_Closed(eventCookie));
}

template <typename T> void impl_IWebSocket<T>::Close(unsigned short const code, StringReference const & reason) const
{
	check(shim()->abi_CloseWithStatus(code, get(reason)));
}

template <typename T> unsigned impl_IMessageWebSocketControl<T>::MaxMessageSize() const
{
	unsigned value = {};
	check(shim()->get_MaxMessageSize(&value));
	return value;
}

template <typename T> void impl_IMessageWebSocketControl<T>::MaxMessageSize(unsigned const value) const
{
	check(shim()->put_MaxMessageSize(value));
}

template <typename T> Windows::Networking::Sockets::SocketMessageType impl_IMessageWebSocketControl<T>::MessageType() const
{
	Windows::Networking::Sockets::SocketMessageType value = {};
	check(shim()->get_MessageType(&value));
	return value;
}

template <typename T> void impl_IMessageWebSocketControl<T>::MessageType(Windows::Networking::Sockets::SocketMessageType const value) const
{
	check(shim()->put_MessageType(value));
}

template <typename T> Windows::Networking::Sockets::MessageWebSocketControl impl_IMessageWebSocket<T>::Control() const
{
	Windows::Networking::Sockets::MessageWebSocketControl value = nullptr;
	check(shim()->get_Control(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::MessageWebSocketInformation impl_IMessageWebSocket<T>::Information() const
{
	Windows::Networking::Sockets::MessageWebSocketInformation value = nullptr;
	check(shim()->get_Information(put(value)));
	return value;
}

template <typename T> long long impl_IMessageWebSocket<T>::MessageReceived(Windows::Foundation::ITypedEventHandler<Windows::Networking::Sockets::MessageWebSocket, Windows::Networking::Sockets::MessageWebSocketMessageReceivedEventArgs> const & eventHandler) const
{
	long long eventCookie = {};
	check(shim()->add_MessageReceived(get(eventHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IMessageWebSocket<T>::MessageReceived(F eventHandler) const
{
	return MessageReceived(Windows::Foundation::TypedEventHandler<Windows::Networking::Sockets::MessageWebSocket, Windows::Networking::Sockets::MessageWebSocketMessageReceivedEventArgs>(eventHandler));
}

template <typename T> void impl_IMessageWebSocket<T>::MessageReceived(long long const eventCookie) const
{
	check(shim()->remove_MessageReceived(eventCookie));
}

template <typename T> bool impl_IStreamWebSocketControl<T>::NoDelay() const
{
	bool value = {};
	check(shim()->get_NoDelay(put(value)));
	return value;
}

template <typename T> void impl_IStreamWebSocketControl<T>::NoDelay(bool const value) const
{
	check(shim()->put_NoDelay(value));
}

template <typename T> Windows::Networking::Sockets::StreamWebSocketControl impl_IStreamWebSocket<T>::Control() const
{
	Windows::Networking::Sockets::StreamWebSocketControl value = nullptr;
	check(shim()->get_Control(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::StreamWebSocketInformation impl_IStreamWebSocket<T>::Information() const
{
	Windows::Networking::Sockets::StreamWebSocketInformation value = nullptr;
	check(shim()->get_Information(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IStreamWebSocket<T>::InputStream() const
{
	Windows::Storage::Streams::IInputStream value;
	check(shim()->get_InputStream(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketErrorStatus impl_ISocketErrorStatics<T>::GetStatus(int const hresult) const
{
	Windows::Networking::Sockets::SocketErrorStatus status = {};
	check(shim()->abi_GetStatus(hresult, &status));
	return status;
}

template <typename T> Windows::Web::WebErrorStatus impl_IWebSocketErrorStatics<T>::GetStatus(int const hresult) const
{
	Windows::Web::WebErrorStatus status = {};
	check(shim()->abi_GetStatus(hresult, &status));
	return status;
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Vpn {

template <typename T> void impl_IVpnPlugIn<T>::Connect(Windows::Networking::Vpn::VpnChannel const & channel) const
{
	check(shim()->abi_Connect(get(channel)));
}

template <typename T> void impl_IVpnPlugIn<T>::Disconnect(Windows::Networking::Vpn::VpnChannel const & channel) const
{
	check(shim()->abi_Disconnect(get(channel)));
}

template <typename T> void impl_IVpnPlugIn<T>::GetKeepAlivePayload(Windows::Networking::Vpn::VpnChannel const & channel, Windows::Networking::Vpn::VpnPacketBuffer & keepAlivePacket) const
{
	check(shim()->abi_GetKeepAlivePayload(get(channel), put(keepAlivePacket)));
}

template <typename T> void impl_IVpnPlugIn<T>::Encapsulate(Windows::Networking::Vpn::VpnChannel const & channel, Windows::Networking::Vpn::VpnPacketBufferList const & packets, Windows::Networking::Vpn::VpnPacketBufferList const & encapulatedPackets) const
{
	check(shim()->abi_Encapsulate(get(channel), get(packets), get(encapulatedPackets)));
}

template <typename T> void impl_IVpnPlugIn<T>::Decapsulate(Windows::Networking::Vpn::VpnChannel const & channel, Windows::Networking::Vpn::VpnPacketBuffer const & encapBuffer, Windows::Networking::Vpn::VpnPacketBufferList const & decapsulatedPackets, Windows::Networking::Vpn::VpnPacketBufferList const & controlPacketsToSend) const
{
	check(shim()->abi_Decapsulate(get(channel), get(encapBuffer), get(decapsulatedPackets), get(controlPacketsToSend)));
}

template <typename T> void impl_IVpnCustomPrompt<T>::Label(StringReference const & value) const
{
	check(shim()->put_Label(get(value)));
}

template <typename T> String impl_IVpnCustomPrompt<T>::Label() const
{
	String value;
	check(shim()->get_Label(put(value)));
	return value;
}

template <typename T> void impl_IVpnCustomPrompt<T>::Compulsory(bool const value) const
{
	check(shim()->put_Compulsory(value));
}

template <typename T> bool impl_IVpnCustomPrompt<T>::Compulsory() const
{
	bool value = {};
	check(shim()->get_Compulsory(put(value)));
	return value;
}

template <typename T> void impl_IVpnCustomPrompt<T>::Bordered(bool const value) const
{
	check(shim()->put_Bordered(value));
}

template <typename T> bool impl_IVpnCustomPrompt<T>::Bordered() const
{
	bool value = {};
	check(shim()->get_Bordered(put(value)));
	return value;
}

template <typename T> void impl_IVpnCustomEditBox<T>::DefaultText(StringReference const & value) const
{
	check(shim()->put_DefaultText(get(value)));
}

template <typename T> String impl_IVpnCustomEditBox<T>::DefaultText() const
{
	String value;
	check(shim()->get_DefaultText(put(value)));
	return value;
}

template <typename T> void impl_IVpnCustomEditBox<T>::NoEcho(bool const value) const
{
	check(shim()->put_NoEcho(value));
}

template <typename T> bool impl_IVpnCustomEditBox<T>::NoEcho() const
{
	bool value = {};
	check(shim()->get_NoEcho(put(value)));
	return value;
}

template <typename T> String impl_IVpnCustomEditBox<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> void impl_IVpnCustomComboBox<T>::OptionsText(Windows::Foundation::Collections::IVectorView<String> const & value) const
{
	check(shim()->put_OptionsText(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IVpnCustomComboBox<T>::OptionsText() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_OptionsText(put(value)));
	return value;
}

template <typename T> unsigned impl_IVpnCustomComboBox<T>::Selected() const
{
	unsigned value = {};
	check(shim()->get_Selected(&value));
	return value;
}

template <typename T> void impl_IVpnCustomTextBox<T>::DisplayText(StringReference const & value) const
{
	check(shim()->put_DisplayText(get(value)));
}

template <typename T> String impl_IVpnCustomTextBox<T>::DisplayText() const
{
	String value;
	check(shim()->get_DisplayText(put(value)));
	return value;
}

template <typename T> void impl_IVpnCustomCheckBox<T>::InitialCheckState(bool const value) const
{
	check(shim()->put_InitialCheckState(value));
}

template <typename T> bool impl_IVpnCustomCheckBox<T>::InitialCheckState() const
{
	bool value = {};
	check(shim()->get_InitialCheckState(put(value)));
	return value;
}

template <typename T> bool impl_IVpnCustomCheckBox<T>::Checked() const
{
	bool value = {};
	check(shim()->get_Checked(put(value)));
	return value;
}

template <typename T> Windows::Networking::Vpn::VpnRoute impl_IVpnRouteFactory<T>::CreateVpnRoute(Windows::Networking::HostName const & address, byte const prefixSize) const
{
	Windows::Networking::Vpn::VpnRoute route = nullptr;
	check(shim()->abi_CreateVpnRoute(get(address), prefixSize, put(route)));
	return route;
}

template <typename T> void impl_IVpnRoute<T>::Address(Windows::Networking::HostName const & value) const
{
	check(shim()->put_Address(get(value)));
}

template <typename T> Windows::Networking::HostName impl_IVpnRoute<T>::Address() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_Address(put(value)));
	return value;
}

template <typename T> void impl_IVpnRoute<T>::PrefixSize(byte const value) const
{
	check(shim()->put_PrefixSize(value));
}

template <typename T> byte impl_IVpnRoute<T>::PrefixSize() const
{
	byte value = {};
	check(shim()->get_PrefixSize(&value));
	return value;
}

template <typename T> void impl_IVpnRouteAssignment<T>::Ipv4InclusionRoutes(Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnRoute> const & value) const
{
	check(shim()->put_Ipv4InclusionRoutes(get(value)));
}

template <typename T> void impl_IVpnRouteAssignment<T>::Ipv6InclusionRoutes(Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnRoute> const & value) const
{
	check(shim()->put_Ipv6InclusionRoutes(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnRoute> impl_IVpnRouteAssignment<T>::Ipv4InclusionRoutes() const
{
	Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnRoute> value;
	check(shim()->get_Ipv4InclusionRoutes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnRoute> impl_IVpnRouteAssignment<T>::Ipv6InclusionRoutes() const
{
	Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnRoute> value;
	check(shim()->get_Ipv6InclusionRoutes(put(value)));
	return value;
}

template <typename T> void impl_IVpnRouteAssignment<T>::Ipv4ExclusionRoutes(Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnRoute> const & value) const
{
	check(shim()->put_Ipv4ExclusionRoutes(get(value)));
}

template <typename T> void impl_IVpnRouteAssignment<T>::Ipv6ExclusionRoutes(Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnRoute> const & value) const
{
	check(shim()->put_Ipv6ExclusionRoutes(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnRoute> impl_IVpnRouteAssignment<T>::Ipv4ExclusionRoutes() const
{
	Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnRoute> value;
	check(shim()->get_Ipv4ExclusionRoutes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnRoute> impl_IVpnRouteAssignment<T>::Ipv6ExclusionRoutes() const
{
	Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnRoute> value;
	check(shim()->get_Ipv6ExclusionRoutes(put(value)));
	return value;
}

template <typename T> void impl_IVpnRouteAssignment<T>::ExcludeLocalSubnets(bool const value) const
{
	check(shim()->put_ExcludeLocalSubnets(value));
}

template <typename T> bool impl_IVpnRouteAssignment<T>::ExcludeLocalSubnets() const
{
	bool value = {};
	check(shim()->get_ExcludeLocalSubnets(put(value)));
	return value;
}

template <typename T> Windows::Networking::Vpn::VpnNamespaceInfo impl_IVpnNamespaceInfoFactory<T>::CreateVpnNamespaceInfo(StringReference const & name, Windows::Foundation::Collections::IVector<Windows::Networking::HostName> const & dnsServerList, Windows::Foundation::Collections::IVector<Windows::Networking::HostName> const & proxyServerList) const
{
	Windows::Networking::Vpn::VpnNamespaceInfo namespaceInfo = nullptr;
	check(shim()->abi_CreateVpnNamespaceInfo(get(name), get(dnsServerList), get(proxyServerList), put(namespaceInfo)));
	return namespaceInfo;
}

template <typename T> void impl_IVpnNamespaceInfo<T>::Namespace(StringReference const & value) const
{
	check(shim()->put_Namespace(get(value)));
}

template <typename T> String impl_IVpnNamespaceInfo<T>::Namespace() const
{
	String value;
	check(shim()->get_Namespace(put(value)));
	return value;
}

template <typename T> void impl_IVpnNamespaceInfo<T>::DnsServers(Windows::Foundation::Collections::IVector<Windows::Networking::HostName> const & value) const
{
	check(shim()->put_DnsServers(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Networking::HostName> impl_IVpnNamespaceInfo<T>::DnsServers() const
{
	Windows::Foundation::Collections::IVector<Windows::Networking::HostName> value;
	check(shim()->get_DnsServers(put(value)));
	return value;
}

template <typename T> void impl_IVpnNamespaceInfo<T>::WebProxyServers(Windows::Foundation::Collections::IVector<Windows::Networking::HostName> const & value) const
{
	check(shim()->put_WebProxyServers(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Networking::HostName> impl_IVpnNamespaceInfo<T>::WebProxyServers() const
{
	Windows::Foundation::Collections::IVector<Windows::Networking::HostName> value;
	check(shim()->get_WebProxyServers(put(value)));
	return value;
}

template <typename T> void impl_IVpnNamespaceAssignment<T>::NamespaceList(Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnNamespaceInfo> const & value) const
{
	check(shim()->put_NamespaceList(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnNamespaceInfo> impl_IVpnNamespaceAssignment<T>::NamespaceList() const
{
	Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnNamespaceInfo> value;
	check(shim()->get_NamespaceList(put(value)));
	return value;
}

template <typename T> void impl_IVpnNamespaceAssignment<T>::ProxyAutoConfigUri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_ProxyAutoConfigUri(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IVpnNamespaceAssignment<T>::ProxyAutoConfigUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ProxyAutoConfigUri(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IVpnPickedCredential<T>::PasskeyCredential() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check(shim()->get_PasskeyCredential(put(value)));
	return value;
}

template <typename T> String impl_IVpnPickedCredential<T>::AdditionalPin() const
{
	String value;
	check(shim()->get_AdditionalPin(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IVpnPickedCredential<T>::OldPasswordCredential() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check(shim()->get_OldPasswordCredential(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IVpnCredential<T>::PasskeyCredential() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check(shim()->get_PasskeyCredential(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_IVpnCredential<T>::CertificateCredential() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check(shim()->get_CertificateCredential(put(value)));
	return value;
}

template <typename T> String impl_IVpnCredential<T>::AdditionalPin() const
{
	String value;
	check(shim()->get_AdditionalPin(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IVpnCredential<T>::OldPasswordCredential() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check(shim()->get_OldPasswordCredential(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::Buffer impl_IVpnSystemHealth<T>::StatementOfHealth() const
{
	Windows::Storage::Streams::Buffer value = nullptr;
	check(shim()->get_StatementOfHealth(put(value)));
	return value;
}

template <typename T> String impl_IVpnChannelConfiguration<T>::ServerServiceName() const
{
	String value;
	check(shim()->get_ServerServiceName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> impl_IVpnChannelConfiguration<T>::ServerHostNameList() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> value;
	check(shim()->get_ServerHostNameList(put(value)));
	return value;
}

template <typename T> String impl_IVpnChannelConfiguration<T>::CustomField() const
{
	String value;
	check(shim()->get_CustomField(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Foundation::Uri> impl_IVpnChannelConfiguration2<T>::ServerUris() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Foundation::Uri> value;
	check(shim()->get_ServerUris(put(value)));
	return value;
}

template <typename T> Windows::Networking::Vpn::VpnChannelActivityEventType impl_IVpnChannelActivityEventArgs<T>::Type() const
{
	Windows::Networking::Vpn::VpnChannelActivityEventType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> void impl_IVpnChannel<T>::AssociateTransport(IInspectable const & mainOuterTunnelTransport, IInspectable const & optionalOuterTunnelTransport) const
{
	check(shim()->abi_AssociateTransport(get(mainOuterTunnelTransport), get(optionalOuterTunnelTransport)));
}

template <typename T> void impl_IVpnChannel<T>::Start(Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> const & assignedClientIPv4list, Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> const & assignedClientIPv6list, Windows::Networking::Vpn::VpnInterfaceId const & vpnInterfaceId, Windows::Networking::Vpn::VpnRouteAssignment const & routeScope, Windows::Networking::Vpn::VpnNamespaceAssignment const & namespaceScope, unsigned const mtuSize, unsigned const maxFrameSize, bool const optimizeForLowCostNetwork, IInspectable const & mainOuterTunnelTransport, IInspectable const & optionalOuterTunnelTransport) const
{
	check(shim()->abi_Start(get(assignedClientIPv4list), get(assignedClientIPv6list), get(vpnInterfaceId), get(routeScope), get(namespaceScope), mtuSize, maxFrameSize, optimizeForLowCostNetwork, get(mainOuterTunnelTransport), get(optionalOuterTunnelTransport)));
}

template <typename T> void impl_IVpnChannel<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> Windows::Networking::Vpn::VpnPickedCredential impl_IVpnChannel<T>::RequestCredentials(Windows::Networking::Vpn::VpnCredentialType const credType, bool const isRetry, bool const isSingleSignOnCredential, Windows::Security::Cryptography::Certificates::Certificate const & certificate) const
{
	Windows::Networking::Vpn::VpnPickedCredential credential = nullptr;
	check(shim()->abi_RequestCredentials(credType, isRetry, isSingleSignOnCredential, get(certificate), put(credential)));
	return credential;
}

template <typename T> void impl_IVpnChannel<T>::RequestVpnPacketBuffer(Windows::Networking::Vpn::VpnDataPathType const type, Windows::Networking::Vpn::VpnPacketBuffer & vpnPacketBuffer) const
{
	check(shim()->abi_RequestVpnPacketBuffer(type, put(vpnPacketBuffer)));
}

template <typename T> void impl_IVpnChannel<T>::LogDiagnosticMessage(StringReference const & message) const
{
	check(shim()->abi_LogDiagnosticMessage(get(message)));
}

template <typename T> unsigned impl_IVpnChannel<T>::Id() const
{
	unsigned value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::Networking::Vpn::VpnChannelConfiguration impl_IVpnChannel<T>::Configuration() const
{
	Windows::Networking::Vpn::VpnChannelConfiguration value = nullptr;
	check(shim()->get_Configuration(put(value)));
	return value;
}

template <typename T> long long impl_IVpnChannel<T>::ActivityChange(Windows::Foundation::ITypedEventHandler<Windows::Networking::Vpn::VpnChannel, Windows::Networking::Vpn::VpnChannelActivityEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ActivityChange(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVpnChannel<T>::ActivityChange(F handler) const
{
	return ActivityChange(Windows::Foundation::TypedEventHandler<Windows::Networking::Vpn::VpnChannel, Windows::Networking::Vpn::VpnChannelActivityEventArgs>(handler));
}

template <typename T> void impl_IVpnChannel<T>::ActivityChange(long long const token) const
{
	check(shim()->remove_ActivityChange(token));
}

template <typename T> void impl_IVpnChannel<T>::PlugInContext(IInspectable const & value) const
{
	check(shim()->put_PlugInContext(get(value)));
}

template <typename T> IInspectable impl_IVpnChannel<T>::PlugInContext() const
{
	IInspectable value;
	check(shim()->get_PlugInContext(put(value)));
	return value;
}

template <typename T> Windows::Networking::Vpn::VpnSystemHealth impl_IVpnChannel<T>::SystemHealth() const
{
	Windows::Networking::Vpn::VpnSystemHealth value = nullptr;
	check(shim()->get_SystemHealth(put(value)));
	return value;
}

template <typename T> void impl_IVpnChannel<T>::RequestCustomPrompt(Windows::Foundation::Collections::IVectorView<Windows::Networking::Vpn::IVpnCustomPrompt> const & customPrompt) const
{
	check(shim()->abi_RequestCustomPrompt(get(customPrompt)));
}

template <typename T> void impl_IVpnChannel<T>::SetErrorMessage(StringReference const & message) const
{
	check(shim()->abi_SetErrorMessage(get(message)));
}

template <typename T> void impl_IVpnChannel<T>::SetAllowedSslTlsVersions(IInspectable const & tunnelTransport, bool const useTls12) const
{
	check(shim()->abi_SetAllowedSslTlsVersions(get(tunnelTransport), useTls12));
}

template <typename T> void impl_IVpnChannel2<T>::StartWithMainTransport(Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> const & assignedClientIPv4list, Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> const & assignedClientIPv6list, Windows::Networking::Vpn::VpnInterfaceId const & vpnInterfaceId, Windows::Networking::Vpn::VpnRouteAssignment const & assignedRoutes, Windows::Networking::Vpn::VpnDomainNameAssignment const & assignedDomainName, unsigned const mtuSize, unsigned const maxFrameSize, bool const Reserved, IInspectable const & mainOuterTunnelTransport) const
{
	check(shim()->abi_StartWithMainTransport(get(assignedClientIPv4list), get(assignedClientIPv6list), get(vpnInterfaceId), get(assignedRoutes), get(assignedDomainName), mtuSize, maxFrameSize, Reserved, get(mainOuterTunnelTransport)));
}

template <typename T> void impl_IVpnChannel2<T>::StartExistingTransports(Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> const & assignedClientIPv4list, Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> const & assignedClientIPv6list, Windows::Networking::Vpn::VpnInterfaceId const & vpnInterfaceId, Windows::Networking::Vpn::VpnRouteAssignment const & assignedRoutes, Windows::Networking::Vpn::VpnDomainNameAssignment const & assignedDomainName, unsigned const mtuSize, unsigned const maxFrameSize, bool const Reserved) const
{
	check(shim()->abi_StartExistingTransports(get(assignedClientIPv4list), get(assignedClientIPv6list), get(vpnInterfaceId), get(assignedRoutes), get(assignedDomainName), mtuSize, maxFrameSize, Reserved));
}

template <typename T> long long impl_IVpnChannel2<T>::ActivityStateChange(Windows::Foundation::ITypedEventHandler<Windows::Networking::Vpn::VpnChannel, Windows::Networking::Vpn::VpnChannelActivityStateChangedArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ActivityStateChange(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IVpnChannel2<T>::ActivityStateChange(F handler) const
{
	return ActivityStateChange(Windows::Foundation::TypedEventHandler<Windows::Networking::Vpn::VpnChannel, Windows::Networking::Vpn::VpnChannelActivityStateChangedArgs>(handler));
}

template <typename T> void impl_IVpnChannel2<T>::ActivityStateChange(long long const token) const
{
	check(shim()->remove_ActivityStateChange(token));
}

template <typename T> Windows::Networking::Vpn::VpnPacketBuffer impl_IVpnChannel2<T>::GetVpnSendPacketBuffer() const
{
	Windows::Networking::Vpn::VpnPacketBuffer vpnSendPacketBuffer = nullptr;
	check(shim()->abi_GetVpnSendPacketBuffer(put(vpnSendPacketBuffer)));
	return vpnSendPacketBuffer;
}

template <typename T> Windows::Networking::Vpn::VpnPacketBuffer impl_IVpnChannel2<T>::GetVpnReceivePacketBuffer() const
{
	Windows::Networking::Vpn::VpnPacketBuffer vpnReceivePacketBuffer = nullptr;
	check(shim()->abi_GetVpnReceivePacketBuffer(put(vpnReceivePacketBuffer)));
	return vpnReceivePacketBuffer;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IVpnChannel2<T>::RequestCustomPromptAsync(Windows::Foundation::Collections::IVectorView<Windows::Networking::Vpn::IVpnCustomPromptElement> const & customPromptElement) const
{
	Windows::Foundation::IAsyncAction action;
	check(shim()->abi_RequestCustomPromptAsync(get(customPromptElement), put(action)));
	return action;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::Vpn::VpnCredential> impl_IVpnChannel2<T>::RequestCredentialsAsync(Windows::Networking::Vpn::VpnCredentialType const credType, unsigned const credOptions, Windows::Security::Cryptography::Certificates::Certificate const & certificate) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::Vpn::VpnCredential> credential;
	check(shim()->abi_RequestCredentialsWithCertificateAsync(credType, credOptions, get(certificate), put(credential)));
	return credential;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::Vpn::VpnCredential> impl_IVpnChannel2<T>::RequestCredentialsAsync(Windows::Networking::Vpn::VpnCredentialType const credType, unsigned const credOptions) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::Vpn::VpnCredential> credential;
	check(shim()->abi_RequestCredentialsWithOptionsAsync(credType, credOptions, put(credential)));
	return credential;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Networking::Vpn::VpnCredential> impl_IVpnChannel2<T>::RequestCredentialsAsync(Windows::Networking::Vpn::VpnCredentialType const credType) const
{
	Windows::Foundation::IAsyncOperation<Windows::Networking::Vpn::VpnCredential> credential;
	check(shim()->abi_RequestCredentialsSimpleAsync(credType, put(credential)));
	return credential;
}

template <typename T> void impl_IVpnChannel2<T>::TerminateConnection(StringReference const & message) const
{
	check(shim()->abi_TerminateConnection(get(message)));
}

template <typename T> void impl_IVpnChannel2<T>::StartWithTrafficFilter(Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> const & assignedClientIpv4List, Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> const & assignedClientIpv6List, Windows::Networking::Vpn::VpnInterfaceId const & vpnInterfaceId, Windows::Networking::Vpn::VpnRouteAssignment const & assignedRoutes, Windows::Networking::Vpn::VpnDomainNameAssignment const & assignedNamespace, unsigned const mtuSize, unsigned const maxFrameSize, bool const reserved, IInspectable const & mainOuterTunnelTransport, IInspectable const & optionalOuterTunnelTransport, Windows::Networking::Vpn::VpnTrafficFilterAssignment const & assignedTrafficFilters) const
{
	check(shim()->abi_StartWithTrafficFilter(get(assignedClientIpv4List), get(assignedClientIpv6List), get(vpnInterfaceId), get(assignedRoutes), get(assignedNamespace), mtuSize, maxFrameSize, reserved, get(mainOuterTunnelTransport), get(optionalOuterTunnelTransport), get(assignedTrafficFilters)));
}

template <typename T> void impl_IVpnCustomPromptElement<T>::DisplayName(StringReference const & value) const
{
	check(shim()->put_DisplayName(get(value)));
}

template <typename T> String impl_IVpnCustomPromptElement<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IVpnCustomPromptElement<T>::Compulsory(bool const value) const
{
	check(shim()->put_Compulsory(value));
}

template <typename T> bool impl_IVpnCustomPromptElement<T>::Compulsory() const
{
	bool value = {};
	check(shim()->get_Compulsory(put(value)));
	return value;
}

template <typename T> void impl_IVpnCustomPromptElement<T>::Emphasized(bool const value) const
{
	check(shim()->put_Emphasized(value));
}

template <typename T> bool impl_IVpnCustomPromptElement<T>::Emphasized() const
{
	bool value = {};
	check(shim()->get_Emphasized(put(value)));
	return value;
}

template <typename T> void impl_IVpnChannelStatics<T>::ProcessEventAsync(IInspectable const & thirdPartyPlugIn, IInspectable const & event) const
{
	check(shim()->abi_ProcessEventAsync(get(thirdPartyPlugIn), get(event)));
}

template <typename T> Windows::Networking::Vpn::VpnPacketBuffer impl_IVpnPacketBufferFactory<T>::CreateVpnPacketBuffer(Windows::Networking::Vpn::VpnPacketBuffer const & parentBuffer, unsigned const offset, unsigned const length) const
{
	Windows::Networking::Vpn::VpnPacketBuffer vpnPacketBuffer = nullptr;
	check(shim()->abi_CreateVpnPacketBuffer(get(parentBuffer), offset, length, put(vpnPacketBuffer)));
	return vpnPacketBuffer;
}

template <typename T> Windows::Storage::Streams::Buffer impl_IVpnPacketBuffer<T>::Buffer() const
{
	Windows::Storage::Streams::Buffer value = nullptr;
	check(shim()->get_Buffer(put(value)));
	return value;
}

template <typename T> void impl_IVpnPacketBuffer<T>::Status(Windows::Networking::Vpn::VpnPacketBufferStatus const value) const
{
	check(shim()->put_Status(value));
}

template <typename T> Windows::Networking::Vpn::VpnPacketBufferStatus impl_IVpnPacketBuffer<T>::Status() const
{
	Windows::Networking::Vpn::VpnPacketBufferStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> void impl_IVpnPacketBuffer<T>::TransportAffinity(unsigned const value) const
{
	check(shim()->put_TransportAffinity(value));
}

template <typename T> unsigned impl_IVpnPacketBuffer<T>::TransportAffinity() const
{
	unsigned value = {};
	check(shim()->get_TransportAffinity(&value));
	return value;
}

template <typename T> Windows::Networking::Vpn::VpnAppId impl_IVpnPacketBuffer2<T>::AppId() const
{
	Windows::Networking::Vpn::VpnAppId value = nullptr;
	check(shim()->get_AppId(put(value)));
	return value;
}

template <typename T> void impl_IVpnPacketBufferList<T>::Append(Windows::Networking::Vpn::VpnPacketBuffer const & nextVpnPacketBuffer) const
{
	check(shim()->abi_Append(get(nextVpnPacketBuffer)));
}

template <typename T> void impl_IVpnPacketBufferList<T>::AddAtBegin(Windows::Networking::Vpn::VpnPacketBuffer const & nextVpnPacketBuffer) const
{
	check(shim()->abi_AddAtBegin(get(nextVpnPacketBuffer)));
}

template <typename T> Windows::Networking::Vpn::VpnPacketBuffer impl_IVpnPacketBufferList<T>::RemoveAtEnd() const
{
	Windows::Networking::Vpn::VpnPacketBuffer nextVpnPacketBuffer = nullptr;
	check(shim()->abi_RemoveAtEnd(put(nextVpnPacketBuffer)));
	return nextVpnPacketBuffer;
}

template <typename T> Windows::Networking::Vpn::VpnPacketBuffer impl_IVpnPacketBufferList<T>::RemoveAtBegin() const
{
	Windows::Networking::Vpn::VpnPacketBuffer nextVpnPacketBuffer = nullptr;
	check(shim()->abi_RemoveAtBegin(put(nextVpnPacketBuffer)));
	return nextVpnPacketBuffer;
}

template <typename T> void impl_IVpnPacketBufferList<T>::Clear() const
{
	check(shim()->abi_Clear());
}

template <typename T> void impl_IVpnPacketBufferList<T>::Status(Windows::Networking::Vpn::VpnPacketBufferStatus const value) const
{
	check(shim()->put_Status(value));
}

template <typename T> Windows::Networking::Vpn::VpnPacketBufferStatus impl_IVpnPacketBufferList<T>::Status() const
{
	Windows::Networking::Vpn::VpnPacketBufferStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> unsigned impl_IVpnPacketBufferList<T>::Size() const
{
	unsigned value = {};
	check(shim()->get_Size(&value));
	return value;
}

template <typename T> void impl_IVpnPacketBufferList2<T>::AddLeadingPacket(Windows::Networking::Vpn::VpnPacketBuffer const & nextVpnPacketBuffer) const
{
	check(shim()->abi_AddLeadingPacket(get(nextVpnPacketBuffer)));
}

template <typename T> Windows::Networking::Vpn::VpnPacketBuffer impl_IVpnPacketBufferList2<T>::RemoveLeadingPacket() const
{
	Windows::Networking::Vpn::VpnPacketBuffer nextVpnPacketBuffer = nullptr;
	check(shim()->abi_RemoveLeadingPacket(put(nextVpnPacketBuffer)));
	return nextVpnPacketBuffer;
}

template <typename T> void impl_IVpnPacketBufferList2<T>::AddTrailingPacket(Windows::Networking::Vpn::VpnPacketBuffer const & nextVpnPacketBuffer) const
{
	check(shim()->abi_AddTrailingPacket(get(nextVpnPacketBuffer)));
}

template <typename T> Windows::Networking::Vpn::VpnPacketBuffer impl_IVpnPacketBufferList2<T>::RemoveTrailingPacket() const
{
	Windows::Networking::Vpn::VpnPacketBuffer nextVpnPacketBuffer = nullptr;
	check(shim()->abi_RemoveTrailingPacket(put(nextVpnPacketBuffer)));
	return nextVpnPacketBuffer;
}

template <typename T> void impl_IVpnCustomPromptTextInput<T>::PlaceholderText(StringReference const & value) const
{
	check(shim()->put_PlaceholderText(get(value)));
}

template <typename T> String impl_IVpnCustomPromptTextInput<T>::PlaceholderText() const
{
	String value;
	check(shim()->get_PlaceholderText(put(value)));
	return value;
}

template <typename T> void impl_IVpnCustomPromptTextInput<T>::IsTextHidden(bool const value) const
{
	check(shim()->put_IsTextHidden(value));
}

template <typename T> bool impl_IVpnCustomPromptTextInput<T>::IsTextHidden() const
{
	bool value = {};
	check(shim()->get_IsTextHidden(put(value)));
	return value;
}

template <typename T> String impl_IVpnCustomPromptTextInput<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVpnCustomPromptOptionSelector<T>::Options() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Options(put(value)));
	return value;
}

template <typename T> unsigned impl_IVpnCustomPromptOptionSelector<T>::SelectedIndex() const
{
	unsigned value = {};
	check(shim()->get_SelectedIndex(&value));
	return value;
}

template <typename T> void impl_IVpnCustomPromptBooleanInput<T>::InitialValue(bool const value) const
{
	check(shim()->put_InitialValue(value));
}

template <typename T> bool impl_IVpnCustomPromptBooleanInput<T>::InitialValue() const
{
	bool value = {};
	check(shim()->get_InitialValue(put(value)));
	return value;
}

template <typename T> bool impl_IVpnCustomPromptBooleanInput<T>::Value() const
{
	bool value = {};
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IVpnCustomPromptText<T>::Text(StringReference const & value) const
{
	check(shim()->put_Text(get(value)));
}

template <typename T> String impl_IVpnCustomPromptText<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> Windows::Networking::Vpn::VpnChannelActivityEventType impl_IVpnChannelActivityStateChangedArgs<T>::ActivityState() const
{
	Windows::Networking::Vpn::VpnChannelActivityEventType value = {};
	check(shim()->get_ActivityState(&value));
	return value;
}

template <typename T> Windows::Networking::Vpn::VpnDomainNameInfo impl_IVpnDomainNameInfoFactory<T>::CreateVpnDomainNameInfo(StringReference const & name, Windows::Networking::Vpn::VpnDomainNameType const nameType, Windows::Foundation::Collections::IIterable<Windows::Networking::HostName> const & dnsServerList, Windows::Foundation::Collections::IIterable<Windows::Networking::HostName> const & proxyServerList) const
{
	Windows::Networking::Vpn::VpnDomainNameInfo domainNameInfo = nullptr;
	check(shim()->abi_CreateVpnDomainNameInfo(get(name), nameType, get(dnsServerList), get(proxyServerList), put(domainNameInfo)));
	return domainNameInfo;
}

template <typename T> void impl_IVpnDomainNameInfo<T>::DomainName(Windows::Networking::HostName const & value) const
{
	check(shim()->put_DomainName(get(value)));
}

template <typename T> Windows::Networking::HostName impl_IVpnDomainNameInfo<T>::DomainName() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_DomainName(put(value)));
	return value;
}

template <typename T> void impl_IVpnDomainNameInfo<T>::DomainNameType(Windows::Networking::Vpn::VpnDomainNameType const value) const
{
	check(shim()->put_DomainNameType(value));
}

template <typename T> Windows::Networking::Vpn::VpnDomainNameType impl_IVpnDomainNameInfo<T>::DomainNameType() const
{
	Windows::Networking::Vpn::VpnDomainNameType value = {};
	check(shim()->get_DomainNameType(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Networking::HostName> impl_IVpnDomainNameInfo<T>::DnsServers() const
{
	Windows::Foundation::Collections::IVector<Windows::Networking::HostName> value;
	check(shim()->get_DnsServers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Networking::HostName> impl_IVpnDomainNameInfo<T>::WebProxyServers() const
{
	Windows::Foundation::Collections::IVector<Windows::Networking::HostName> value;
	check(shim()->get_WebProxyServers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnDomainNameInfo> impl_IVpnDomainNameAssignment<T>::DomainNameList() const
{
	Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnDomainNameInfo> value;
	check(shim()->get_DomainNameList(put(value)));
	return value;
}

template <typename T> void impl_IVpnDomainNameAssignment<T>::ProxyAutoConfigurationUri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_ProxyAutoConfigurationUri(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IVpnDomainNameAssignment<T>::ProxyAutoConfigurationUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ProxyAutoConfigurationUri(put(value)));
	return value;
}

template <typename T> Windows::Networking::Vpn::VpnAppId impl_IVpnAppIdFactory<T>::Create(Windows::Networking::Vpn::VpnAppIdType const type, StringReference const & value) const
{
	Windows::Networking::Vpn::VpnAppId result = nullptr;
	check(shim()->abi_Create(type, get(value), put(result)));
	return result;
}

template <typename T> Windows::Networking::Vpn::VpnAppIdType impl_IVpnAppId<T>::Type() const
{
	Windows::Networking::Vpn::VpnAppIdType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> void impl_IVpnAppId<T>::Type(Windows::Networking::Vpn::VpnAppIdType const value) const
{
	check(shim()->put_Type(value));
}

template <typename T> String impl_IVpnAppId<T>::Value() const
{
	String value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IVpnAppId<T>::Value(StringReference const & value) const
{
	check(shim()->put_Value(get(value)));
}

template <typename T> Windows::Networking::Vpn::VpnTrafficFilter impl_IVpnTrafficFilterFactory<T>::Create(Windows::Networking::Vpn::VpnAppId const & appId) const
{
	Windows::Networking::Vpn::VpnTrafficFilter result = nullptr;
	check(shim()->abi_Create(get(appId), put(result)));
	return result;
}

template <typename T> Windows::Networking::Vpn::VpnAppId impl_IVpnTrafficFilter<T>::AppId() const
{
	Windows::Networking::Vpn::VpnAppId value = nullptr;
	check(shim()->get_AppId(put(value)));
	return value;
}

template <typename T> void impl_IVpnTrafficFilter<T>::AppId(Windows::Networking::Vpn::VpnAppId const & value) const
{
	check(shim()->put_AppId(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVpnTrafficFilter<T>::AppClaims() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_AppClaims(put(value)));
	return value;
}

template <typename T> Windows::Networking::Vpn::VpnIPProtocol impl_IVpnTrafficFilter<T>::Protocol() const
{
	Windows::Networking::Vpn::VpnIPProtocol value = {};
	check(shim()->get_Protocol(&value));
	return value;
}

template <typename T> void impl_IVpnTrafficFilter<T>::Protocol(Windows::Networking::Vpn::VpnIPProtocol const value) const
{
	check(shim()->put_Protocol(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVpnTrafficFilter<T>::LocalPortRanges() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_LocalPortRanges(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVpnTrafficFilter<T>::RemotePortRanges() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_RemotePortRanges(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVpnTrafficFilter<T>::LocalAddressRanges() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_LocalAddressRanges(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVpnTrafficFilter<T>::RemoteAddressRanges() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_RemoteAddressRanges(put(value)));
	return value;
}

template <typename T> Windows::Networking::Vpn::VpnRoutingPolicyType impl_IVpnTrafficFilter<T>::RoutingPolicyType() const
{
	Windows::Networking::Vpn::VpnRoutingPolicyType value = {};
	check(shim()->get_RoutingPolicyType(&value));
	return value;
}

template <typename T> void impl_IVpnTrafficFilter<T>::RoutingPolicyType(Windows::Networking::Vpn::VpnRoutingPolicyType const value) const
{
	check(shim()->put_RoutingPolicyType(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnTrafficFilter> impl_IVpnTrafficFilterAssignment<T>::TrafficFilterList() const
{
	Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnTrafficFilter> value;
	check(shim()->get_TrafficFilterList(put(value)));
	return value;
}

template <typename T> bool impl_IVpnTrafficFilterAssignment<T>::AllowOutbound() const
{
	bool value = {};
	check(shim()->get_AllowOutbound(put(value)));
	return value;
}

template <typename T> void impl_IVpnTrafficFilterAssignment<T>::AllowOutbound(bool const value) const
{
	check(shim()->put_AllowOutbound(value));
}

template <typename T> bool impl_IVpnTrafficFilterAssignment<T>::AllowInbound() const
{
	bool value = {};
	check(shim()->get_AllowInbound(put(value)));
	return value;
}

template <typename T> void impl_IVpnTrafficFilterAssignment<T>::AllowInbound(bool const value) const
{
	check(shim()->put_AllowInbound(value));
}

template <typename T> String impl_IVpnProfile<T>::ProfileName() const
{
	String value;
	check(shim()->get_ProfileName(put(value)));
	return value;
}

template <typename T> void impl_IVpnProfile<T>::ProfileName(StringReference const & value) const
{
	check(shim()->put_ProfileName(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnAppId> impl_IVpnProfile<T>::AppTriggers() const
{
	Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnAppId> value;
	check(shim()->get_AppTriggers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnRoute> impl_IVpnProfile<T>::Routes() const
{
	Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnRoute> value;
	check(shim()->get_Routes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnDomainNameInfo> impl_IVpnProfile<T>::DomainNameInfoList() const
{
	Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnDomainNameInfo> value;
	check(shim()->get_DomainNameInfoList(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnTrafficFilter> impl_IVpnProfile<T>::TrafficFilters() const
{
	Windows::Foundation::Collections::IVector<Windows::Networking::Vpn::VpnTrafficFilter> value;
	check(shim()->get_TrafficFilters(put(value)));
	return value;
}

template <typename T> bool impl_IVpnProfile<T>::RememberCredentials() const
{
	bool value = {};
	check(shim()->get_RememberCredentials(put(value)));
	return value;
}

template <typename T> void impl_IVpnProfile<T>::RememberCredentials(bool const value) const
{
	check(shim()->put_RememberCredentials(value));
}

template <typename T> bool impl_IVpnProfile<T>::AlwaysOn() const
{
	bool value = {};
	check(shim()->get_AlwaysOn(put(value)));
	return value;
}

template <typename T> void impl_IVpnProfile<T>::AlwaysOn(bool const value) const
{
	check(shim()->put_AlwaysOn(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> impl_IVpnPlugInProfile<T>::ServerUris() const
{
	Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> value;
	check(shim()->get_ServerUris(put(value)));
	return value;
}

template <typename T> String impl_IVpnPlugInProfile<T>::CustomConfiguration() const
{
	String value;
	check(shim()->get_CustomConfiguration(put(value)));
	return value;
}

template <typename T> void impl_IVpnPlugInProfile<T>::CustomConfiguration(StringReference const & value) const
{
	check(shim()->put_CustomConfiguration(get(value)));
}

template <typename T> String impl_IVpnPlugInProfile<T>::VpnPluginPackageFamilyName() const
{
	String value;
	check(shim()->get_VpnPluginPackageFamilyName(put(value)));
	return value;
}

template <typename T> void impl_IVpnPlugInProfile<T>::VpnPluginPackageFamilyName(StringReference const & value) const
{
	check(shim()->put_VpnPluginPackageFamilyName(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVpnNativeProfile<T>::Servers() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Servers(put(value)));
	return value;
}

template <typename T> Windows::Networking::Vpn::VpnRoutingPolicyType impl_IVpnNativeProfile<T>::RoutingPolicyType() const
{
	Windows::Networking::Vpn::VpnRoutingPolicyType value = {};
	check(shim()->get_RoutingPolicyType(&value));
	return value;
}

template <typename T> void impl_IVpnNativeProfile<T>::RoutingPolicyType(Windows::Networking::Vpn::VpnRoutingPolicyType const value) const
{
	check(shim()->put_RoutingPolicyType(value));
}

template <typename T> Windows::Networking::Vpn::VpnNativeProtocolType impl_IVpnNativeProfile<T>::NativeProtocolType() const
{
	Windows::Networking::Vpn::VpnNativeProtocolType value = {};
	check(shim()->get_NativeProtocolType(&value));
	return value;
}

template <typename T> void impl_IVpnNativeProfile<T>::NativeProtocolType(Windows::Networking::Vpn::VpnNativeProtocolType const value) const
{
	check(shim()->put_NativeProtocolType(value));
}

template <typename T> Windows::Networking::Vpn::VpnAuthenticationMethod impl_IVpnNativeProfile<T>::UserAuthenticationMethod() const
{
	Windows::Networking::Vpn::VpnAuthenticationMethod value = {};
	check(shim()->get_UserAuthenticationMethod(&value));
	return value;
}

template <typename T> void impl_IVpnNativeProfile<T>::UserAuthenticationMethod(Windows::Networking::Vpn::VpnAuthenticationMethod const value) const
{
	check(shim()->put_UserAuthenticationMethod(value));
}

template <typename T> Windows::Networking::Vpn::VpnAuthenticationMethod impl_IVpnNativeProfile<T>::TunnelAuthenticationMethod() const
{
	Windows::Networking::Vpn::VpnAuthenticationMethod value = {};
	check(shim()->get_TunnelAuthenticationMethod(&value));
	return value;
}

template <typename T> void impl_IVpnNativeProfile<T>::TunnelAuthenticationMethod(Windows::Networking::Vpn::VpnAuthenticationMethod const value) const
{
	check(shim()->put_TunnelAuthenticationMethod(value));
}

template <typename T> String impl_IVpnNativeProfile<T>::EapConfiguration() const
{
	String Value;
	check(shim()->get_EapConfiguration(put(Value)));
	return Value;
}

template <typename T> void impl_IVpnNativeProfile<T>::EapConfiguration(StringReference const & value) const
{
	check(shim()->put_EapConfiguration(get(value)));
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Networking::Vpn::VpnManagementErrorStatus> impl_IVpnManagementAgent<T>::AddProfileFromXmlAsync(StringReference const & xml) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Networking::Vpn::VpnManagementErrorStatus> operation;
	check(shim()->abi_AddProfileFromXmlAsync(get(xml), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Networking::Vpn::VpnManagementErrorStatus> impl_IVpnManagementAgent<T>::AddProfileFromObjectAsync(Windows::Networking::Vpn::IVpnProfile const & profile) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Networking::Vpn::VpnManagementErrorStatus> operation;
	check(shim()->abi_AddProfileFromObjectAsync(get(profile), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Networking::Vpn::VpnManagementErrorStatus> impl_IVpnManagementAgent<T>::UpdateProfileFromXmlAsync(StringReference const & xml) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Networking::Vpn::VpnManagementErrorStatus> operation;
	check(shim()->abi_UpdateProfileFromXmlAsync(get(xml), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Networking::Vpn::VpnManagementErrorStatus> impl_IVpnManagementAgent<T>::UpdateProfileFromObjectAsync(Windows::Networking::Vpn::IVpnProfile const & profile) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Networking::Vpn::VpnManagementErrorStatus> operation;
	check(shim()->abi_UpdateProfileFromObjectAsync(get(profile), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Vpn::IVpnProfile>> impl_IVpnManagementAgent<T>::GetProfilesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Vpn::IVpnProfile>> operation;
	check(shim()->abi_GetProfilesAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Networking::Vpn::VpnManagementErrorStatus> impl_IVpnManagementAgent<T>::DeleteProfileAsync(Windows::Networking::Vpn::IVpnProfile const & profile) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Networking::Vpn::VpnManagementErrorStatus> operation;
	check(shim()->abi_DeleteProfileAsync(get(profile), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Networking::Vpn::VpnManagementErrorStatus> impl_IVpnManagementAgent<T>::ConnectProfileAsync(Windows::Networking::Vpn::IVpnProfile const & profile) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Networking::Vpn::VpnManagementErrorStatus> operation;
	check(shim()->abi_ConnectProfileAsync(get(profile), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Networking::Vpn::VpnManagementErrorStatus> impl_IVpnManagementAgent<T>::ConnectProfileWithPasswordCredentialAsync(Windows::Networking::Vpn::IVpnProfile const & profile, Windows::Security::Credentials::PasswordCredential const & passwordCredential) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Networking::Vpn::VpnManagementErrorStatus> operation;
	check(shim()->abi_ConnectProfileWithPasswordCredentialAsync(get(profile), get(passwordCredential), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Networking::Vpn::VpnManagementErrorStatus> impl_IVpnManagementAgent<T>::DisconnectProfileAsync(Windows::Networking::Vpn::IVpnProfile const & profile) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Networking::Vpn::VpnManagementErrorStatus> operation;
	check(shim()->abi_DisconnectProfileAsync(get(profile), put(operation)));
	return operation;
}

}}}}

namespace winrt { namespace Windows { namespace Perception {

template <typename T> Windows::Foundation::DateTime impl_IPerceptionTimestamp<T>::TargetTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_TargetTime(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPerceptionTimestamp<T>::PredictionAmount() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_PredictionAmount(&value));
	return value;
}

template <typename T> Windows::Perception::PerceptionTimestamp impl_IPerceptionTimestampHelperStatics<T>::FromHistoricalTargetTime(Windows::Foundation::DateTime const & targetTime) const
{
	Windows::Perception::PerceptionTimestamp value = nullptr;
	check(shim()->abi_FromHistoricalTargetTime(targetTime, put(value)));
	return value;
}

}}}

namespace winrt { namespace Windows { namespace Perception { namespace People {

template <typename T> Windows::Foundation::Numerics::Vector3 impl_IHeadPose<T>::Position() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_IHeadPose<T>::ForwardDirection() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_ForwardDirection(&value));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_IHeadPose<T>::UpDirection() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_UpDirection(&value));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Perception { namespace Spatial {

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::Matrix4x4> impl_ISpatialCoordinateSystem<T>::TryGetTransformTo(Windows::Perception::Spatial::SpatialCoordinateSystem const & target) const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::Matrix4x4> value;
	check(shim()->abi_TryGetTransformTo(get(target), put(value)));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Matrix4x4 impl_ISpatialAnchorRawCoordinateSystemAdjustedEventArgs<T>::OldRawCoordinateSystemToNewRawCoordinateSystemTransform() const
{
	Windows::Foundation::Numerics::Matrix4x4 value = {};
	check(shim()->get_OldRawCoordinateSystemToNewRawCoordinateSystemTransform(&value));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialCoordinateSystem impl_ISpatialAnchor<T>::CoordinateSystem() const
{
	Windows::Perception::Spatial::SpatialCoordinateSystem value = nullptr;
	check(shim()->get_CoordinateSystem(put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialCoordinateSystem impl_ISpatialAnchor<T>::RawCoordinateSystem() const
{
	Windows::Perception::Spatial::SpatialCoordinateSystem value = nullptr;
	check(shim()->get_RawCoordinateSystem(put(value)));
	return value;
}

template <typename T> long long impl_ISpatialAnchor<T>::RawCoordinateSystemAdjusted(Windows::Foundation::ITypedEventHandler<Windows::Perception::Spatial::SpatialAnchor, Windows::Perception::Spatial::SpatialAnchorRawCoordinateSystemAdjustedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_RawCoordinateSystemAdjusted(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ISpatialAnchor<T>::RawCoordinateSystemAdjusted(F handler) const
{
	return RawCoordinateSystemAdjusted(Windows::Foundation::TypedEventHandler<Windows::Perception::Spatial::SpatialAnchor, Windows::Perception::Spatial::SpatialAnchorRawCoordinateSystemAdjustedEventArgs>(handler));
}

template <typename T> void impl_ISpatialAnchor<T>::RawCoordinateSystemAdjusted(long long const cookie) const
{
	check(shim()->remove_RawCoordinateSystemAdjusted(cookie));
}

template <typename T> Windows::Perception::Spatial::SpatialAnchor impl_ISpatialAnchorStatics<T>::TryCreateRelativeTo(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::Perception::Spatial::SpatialAnchor value = nullptr;
	check(shim()->abi_TryCreateRelativeTo(get(coordinateSystem), put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialAnchor impl_ISpatialAnchorStatics<T>::TryCreateRelativeTo(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Foundation::Numerics::Vector3 const & position) const
{
	Windows::Perception::Spatial::SpatialAnchor value = nullptr;
	check(shim()->abi_TryCreateWithPositionRelativeTo(get(coordinateSystem), position, put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialAnchor impl_ISpatialAnchorStatics<T>::TryCreateRelativeTo(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Foundation::Numerics::Vector3 const & position, Windows::Foundation::Numerics::Quaternion const & orientation) const
{
	Windows::Perception::Spatial::SpatialAnchor value = nullptr;
	check(shim()->abi_TryCreateWithPositionAndOrientationRelativeTo(get(coordinateSystem), position, orientation, put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::Perception::Spatial::SpatialAnchor> impl_ISpatialAnchorStore<T>::GetAllSavedAnchors() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::Perception::Spatial::SpatialAnchor> value;
	check(shim()->abi_GetAllSavedAnchors(put(value)));
	return value;
}

template <typename T> bool impl_ISpatialAnchorStore<T>::TrySave(StringReference const & id, Windows::Perception::Spatial::SpatialAnchor const & anchor) const
{
	bool succeeded = {};
	check(shim()->abi_TrySave(get(id), get(anchor), put(succeeded)));
	return succeeded;
}

template <typename T> void impl_ISpatialAnchorStore<T>::Remove(StringReference const & id) const
{
	check(shim()->abi_Remove(get(id)));
}

template <typename T> void impl_ISpatialAnchorStore<T>::Clear() const
{
	check(shim()->abi_Clear());
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Perception::Spatial::SpatialAnchorStore> impl_ISpatialAnchorManagerStatics<T>::RequestStoreAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Perception::Spatial::SpatialAnchorStore> value;
	check(shim()->abi_RequestStoreAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, Windows::Perception::Spatial::SpatialAnchor>> impl_ISpatialAnchorTransferManagerStatics<T>::TryImportAnchorsAsync(Windows::Storage::Streams::IInputStream const & stream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, Windows::Perception::Spatial::SpatialAnchor>> operation;
	check(shim()->abi_TryImportAnchorsAsync(get(stream), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISpatialAnchorTransferManagerStatics<T>::TryExportAnchorsAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Perception::Spatial::SpatialAnchor>> const & anchors, Windows::Storage::Streams::IOutputStream const & stream) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_TryExportAnchorsAsync(get(anchors), get(stream), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Perception::Spatial::SpatialPerceptionAccessStatus> impl_ISpatialAnchorTransferManagerStatics<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Perception::Spatial::SpatialPerceptionAccessStatus> result;
	check(shim()->abi_RequestAccessAsync(put(result)));
	return result;
}

template <typename T> bool impl_ISpatialLocatorPositionalTrackingDeactivatingEventArgs<T>::Canceled() const
{
	bool value = {};
	check(shim()->get_Canceled(put(value)));
	return value;
}

template <typename T> void impl_ISpatialLocatorPositionalTrackingDeactivatingEventArgs<T>::Canceled(bool const value) const
{
	check(shim()->put_Canceled(value));
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_ISpatialLocatorAttachedFrameOfReference<T>::RelativePosition() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_RelativePosition(&value));
	return value;
}

template <typename T> void impl_ISpatialLocatorAttachedFrameOfReference<T>::RelativePosition(Windows::Foundation::Numerics::Vector3 const & value) const
{
	check(shim()->put_RelativePosition(value));
}

template <typename T> Windows::Foundation::Numerics::Quaternion impl_ISpatialLocatorAttachedFrameOfReference<T>::RelativeOrientation() const
{
	Windows::Foundation::Numerics::Quaternion value = {};
	check(shim()->get_RelativeOrientation(&value));
	return value;
}

template <typename T> void impl_ISpatialLocatorAttachedFrameOfReference<T>::RelativeOrientation(Windows::Foundation::Numerics::Quaternion const & value) const
{
	check(shim()->put_RelativeOrientation(value));
}

template <typename T> void impl_ISpatialLocatorAttachedFrameOfReference<T>::AdjustHeading(double const headingOffsetInRadians) const
{
	check(shim()->abi_AdjustHeading(headingOffsetInRadians));
}

template <typename T> Windows::Perception::Spatial::SpatialCoordinateSystem impl_ISpatialLocatorAttachedFrameOfReference<T>::GetStationaryCoordinateSystemAtTimestamp(Windows::Perception::PerceptionTimestamp const & timestamp) const
{
	Windows::Perception::Spatial::SpatialCoordinateSystem value = nullptr;
	check(shim()->abi_GetStationaryCoordinateSystemAtTimestamp(get(timestamp), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_ISpatialLocatorAttachedFrameOfReference<T>::TryGetRelativeHeadingAtTimestamp(Windows::Perception::PerceptionTimestamp const & timestamp) const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->abi_TryGetRelativeHeadingAtTimestamp(get(timestamp), put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialCoordinateSystem impl_ISpatialStationaryFrameOfReference<T>::CoordinateSystem() const
{
	Windows::Perception::Spatial::SpatialCoordinateSystem value = nullptr;
	check(shim()->get_CoordinateSystem(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_ISpatialLocation<T>::Position() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Quaternion impl_ISpatialLocation<T>::Orientation() const
{
	Windows::Foundation::Numerics::Quaternion value = {};
	check(shim()->get_Orientation(&value));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_ISpatialLocation<T>::AbsoluteLinearVelocity() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_AbsoluteLinearVelocity(&value));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_ISpatialLocation<T>::AbsoluteLinearAcceleration() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_AbsoluteLinearAcceleration(&value));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Quaternion impl_ISpatialLocation<T>::AbsoluteAngularVelocity() const
{
	Windows::Foundation::Numerics::Quaternion value = {};
	check(shim()->get_AbsoluteAngularVelocity(&value));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Quaternion impl_ISpatialLocation<T>::AbsoluteAngularAcceleration() const
{
	Windows::Foundation::Numerics::Quaternion value = {};
	check(shim()->get_AbsoluteAngularAcceleration(&value));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialLocatability impl_ISpatialLocator<T>::Locatability() const
{
	Windows::Perception::Spatial::SpatialLocatability value = {};
	check(shim()->get_Locatability(&value));
	return value;
}

template <typename T> long long impl_ISpatialLocator<T>::LocatabilityChanged(Windows::Foundation::ITypedEventHandler<Windows::Perception::Spatial::SpatialLocator, IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_LocatabilityChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ISpatialLocator<T>::LocatabilityChanged(F handler) const
{
	return LocatabilityChanged(Windows::Foundation::TypedEventHandler<Windows::Perception::Spatial::SpatialLocator, IInspectable>(handler));
}

template <typename T> void impl_ISpatialLocator<T>::LocatabilityChanged(long long const cookie) const
{
	check(shim()->remove_LocatabilityChanged(cookie));
}

template <typename T> long long impl_ISpatialLocator<T>::PositionalTrackingDeactivating(Windows::Foundation::ITypedEventHandler<Windows::Perception::Spatial::SpatialLocator, Windows::Perception::Spatial::SpatialLocatorPositionalTrackingDeactivatingEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PositionalTrackingDeactivating(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ISpatialLocator<T>::PositionalTrackingDeactivating(F handler) const
{
	return PositionalTrackingDeactivating(Windows::Foundation::TypedEventHandler<Windows::Perception::Spatial::SpatialLocator, Windows::Perception::Spatial::SpatialLocatorPositionalTrackingDeactivatingEventArgs>(handler));
}

template <typename T> void impl_ISpatialLocator<T>::PositionalTrackingDeactivating(long long const cookie) const
{
	check(shim()->remove_PositionalTrackingDeactivating(cookie));
}

template <typename T> Windows::Perception::Spatial::SpatialLocation impl_ISpatialLocator<T>::TryLocateAtTimestamp(Windows::Perception::PerceptionTimestamp const & timestamp, Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::Perception::Spatial::SpatialLocation value = nullptr;
	check(shim()->abi_TryLocateAtTimestamp(get(timestamp), get(coordinateSystem), put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference impl_ISpatialLocator<T>::CreateAttachedFrameOfReferenceAtCurrentHeading() const
{
	Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference value = nullptr;
	check(shim()->abi_CreateAttachedFrameOfReferenceAtCurrentHeading(put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference impl_ISpatialLocator<T>::CreateAttachedFrameOfReferenceAtCurrentHeading(Windows::Foundation::Numerics::Vector3 const & relativePosition) const
{
	Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference value = nullptr;
	check(shim()->abi_CreateAttachedFrameOfReferenceAtCurrentHeadingWithPosition(relativePosition, put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference impl_ISpatialLocator<T>::CreateAttachedFrameOfReferenceAtCurrentHeading(Windows::Foundation::Numerics::Vector3 const & relativePosition, Windows::Foundation::Numerics::Quaternion const & relativeOrientation) const
{
	Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference value = nullptr;
	check(shim()->abi_CreateAttachedFrameOfReferenceAtCurrentHeadingWithPositionAndOrientation(relativePosition, relativeOrientation, put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference impl_ISpatialLocator<T>::CreateAttachedFrameOfReferenceAtCurrentHeading(Windows::Foundation::Numerics::Vector3 const & relativePosition, Windows::Foundation::Numerics::Quaternion const & relativeOrientation, double const relativeHeadingInRadians) const
{
	Windows::Perception::Spatial::SpatialLocatorAttachedFrameOfReference value = nullptr;
	check(shim()->abi_CreateAttachedFrameOfReferenceAtCurrentHeadingWithPositionAndOrientationAndRelativeHeading(relativePosition, relativeOrientation, relativeHeadingInRadians, put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialStationaryFrameOfReference impl_ISpatialLocator<T>::CreateStationaryFrameOfReferenceAtCurrentLocation() const
{
	Windows::Perception::Spatial::SpatialStationaryFrameOfReference value = nullptr;
	check(shim()->abi_CreateStationaryFrameOfReferenceAtCurrentLocation(put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialStationaryFrameOfReference impl_ISpatialLocator<T>::CreateStationaryFrameOfReferenceAtCurrentLocation(Windows::Foundation::Numerics::Vector3 const & relativePosition) const
{
	Windows::Perception::Spatial::SpatialStationaryFrameOfReference value = nullptr;
	check(shim()->abi_CreateStationaryFrameOfReferenceAtCurrentLocationWithPosition(relativePosition, put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialStationaryFrameOfReference impl_ISpatialLocator<T>::CreateStationaryFrameOfReferenceAtCurrentLocation(Windows::Foundation::Numerics::Vector3 const & relativePosition, Windows::Foundation::Numerics::Quaternion const & relativeOrientation) const
{
	Windows::Perception::Spatial::SpatialStationaryFrameOfReference value = nullptr;
	check(shim()->abi_CreateStationaryFrameOfReferenceAtCurrentLocationWithPositionAndOrientation(relativePosition, relativeOrientation, put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialStationaryFrameOfReference impl_ISpatialLocator<T>::CreateStationaryFrameOfReferenceAtCurrentLocation(Windows::Foundation::Numerics::Vector3 const & relativePosition, Windows::Foundation::Numerics::Quaternion const & relativeOrientation, double const relativeHeadingInRadians) const
{
	Windows::Perception::Spatial::SpatialStationaryFrameOfReference value = nullptr;
	check(shim()->abi_CreateStationaryFrameOfReferenceAtCurrentLocationWithPositionAndOrientationAndRelativeHeading(relativePosition, relativeOrientation, relativeHeadingInRadians, put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialLocator impl_ISpatialLocatorStatics<T>::GetDefault() const
{
	Windows::Perception::Spatial::SpatialLocator value = nullptr;
	check(shim()->abi_GetDefault(put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialBoundingVolume impl_ISpatialBoundingVolumeStatics<T>::FromBox(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Perception::Spatial::SpatialBoundingBox const & box) const
{
	Windows::Perception::Spatial::SpatialBoundingVolume value = nullptr;
	check(shim()->abi_FromBox(get(coordinateSystem), box, put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialBoundingVolume impl_ISpatialBoundingVolumeStatics<T>::FromOrientedBox(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Perception::Spatial::SpatialBoundingOrientedBox const & box) const
{
	Windows::Perception::Spatial::SpatialBoundingVolume value = nullptr;
	check(shim()->abi_FromOrientedBox(get(coordinateSystem), box, put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialBoundingVolume impl_ISpatialBoundingVolumeStatics<T>::FromSphere(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Perception::Spatial::SpatialBoundingSphere const & sphere) const
{
	Windows::Perception::Spatial::SpatialBoundingVolume value = nullptr;
	check(shim()->abi_FromSphere(get(coordinateSystem), sphere, put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialBoundingVolume impl_ISpatialBoundingVolumeStatics<T>::FromFrustum(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Perception::Spatial::SpatialBoundingFrustum const & frustum) const
{
	Windows::Perception::Spatial::SpatialBoundingVolume value = nullptr;
	check(shim()->abi_FromFrustum(get(coordinateSystem), frustum, put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Perception { namespace Spatial { namespace Surfaces {

template <typename T> Windows::Graphics::DirectX::DirectXPixelFormat impl_ISpatialSurfaceMeshBuffer<T>::Format() const
{
	Windows::Graphics::DirectX::DirectXPixelFormat value = {};
	check(shim()->get_Format(&value));
	return value;
}

template <typename T> unsigned impl_ISpatialSurfaceMeshBuffer<T>::Stride() const
{
	unsigned value = {};
	check(shim()->get_Stride(&value));
	return value;
}

template <typename T> unsigned impl_ISpatialSurfaceMeshBuffer<T>::ElementCount() const
{
	unsigned value = {};
	check(shim()->get_ElementCount(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ISpatialSurfaceMeshBuffer<T>::Data() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Data(put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::Surfaces::SpatialSurfaceInfo impl_ISpatialSurfaceMesh<T>::SurfaceInfo() const
{
	Windows::Perception::Spatial::Surfaces::SpatialSurfaceInfo value = nullptr;
	check(shim()->get_SurfaceInfo(put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::SpatialCoordinateSystem impl_ISpatialSurfaceMesh<T>::CoordinateSystem() const
{
	Windows::Perception::Spatial::SpatialCoordinateSystem value = nullptr;
	check(shim()->get_CoordinateSystem(put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer impl_ISpatialSurfaceMesh<T>::TriangleIndices() const
{
	Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer value = nullptr;
	check(shim()->get_TriangleIndices(put(value)));
	return value;
}

template <typename T> Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer impl_ISpatialSurfaceMesh<T>::VertexPositions() const
{
	Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer value = nullptr;
	check(shim()->get_VertexPositions(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_ISpatialSurfaceMesh<T>::VertexPositionScale() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_VertexPositionScale(&value));
	return value;
}

template <typename T> Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer impl_ISpatialSurfaceMesh<T>::VertexNormals() const
{
	Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshBuffer value = nullptr;
	check(shim()->get_VertexNormals(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Graphics::DirectX::DirectXPixelFormat> impl_ISpatialSurfaceMeshOptionsStatics<T>::SupportedVertexPositionFormats() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Graphics::DirectX::DirectXPixelFormat> value;
	check(shim()->get_SupportedVertexPositionFormats(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Graphics::DirectX::DirectXPixelFormat> impl_ISpatialSurfaceMeshOptionsStatics<T>::SupportedTriangleIndexFormats() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Graphics::DirectX::DirectXPixelFormat> value;
	check(shim()->get_SupportedTriangleIndexFormats(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Graphics::DirectX::DirectXPixelFormat> impl_ISpatialSurfaceMeshOptionsStatics<T>::SupportedVertexNormalFormats() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Graphics::DirectX::DirectXPixelFormat> value;
	check(shim()->get_SupportedVertexNormalFormats(put(value)));
	return value;
}

template <typename T> Windows::Graphics::DirectX::DirectXPixelFormat impl_ISpatialSurfaceMeshOptions<T>::VertexPositionFormat() const
{
	Windows::Graphics::DirectX::DirectXPixelFormat value = {};
	check(shim()->get_VertexPositionFormat(&value));
	return value;
}

template <typename T> void impl_ISpatialSurfaceMeshOptions<T>::VertexPositionFormat(Windows::Graphics::DirectX::DirectXPixelFormat const value) const
{
	check(shim()->put_VertexPositionFormat(value));
}

template <typename T> Windows::Graphics::DirectX::DirectXPixelFormat impl_ISpatialSurfaceMeshOptions<T>::TriangleIndexFormat() const
{
	Windows::Graphics::DirectX::DirectXPixelFormat value = {};
	check(shim()->get_TriangleIndexFormat(&value));
	return value;
}

template <typename T> void impl_ISpatialSurfaceMeshOptions<T>::TriangleIndexFormat(Windows::Graphics::DirectX::DirectXPixelFormat const value) const
{
	check(shim()->put_TriangleIndexFormat(value));
}

template <typename T> Windows::Graphics::DirectX::DirectXPixelFormat impl_ISpatialSurfaceMeshOptions<T>::VertexNormalFormat() const
{
	Windows::Graphics::DirectX::DirectXPixelFormat value = {};
	check(shim()->get_VertexNormalFormat(&value));
	return value;
}

template <typename T> void impl_ISpatialSurfaceMeshOptions<T>::VertexNormalFormat(Windows::Graphics::DirectX::DirectXPixelFormat const value) const
{
	check(shim()->put_VertexNormalFormat(value));
}

template <typename T> bool impl_ISpatialSurfaceMeshOptions<T>::IncludeVertexNormals() const
{
	bool value = {};
	check(shim()->get_IncludeVertexNormals(put(value)));
	return value;
}

template <typename T> void impl_ISpatialSurfaceMeshOptions<T>::IncludeVertexNormals(bool const value) const
{
	check(shim()->put_IncludeVertexNormals(value));
}

template <typename T> GUID impl_ISpatialSurfaceInfo<T>::Id() const
{
	GUID value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISpatialSurfaceInfo<T>::UpdateTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_UpdateTime(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Perception::Spatial::SpatialBoundingOrientedBox> impl_ISpatialSurfaceInfo<T>::TryGetBounds(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::Foundation::IReference<winrt::Windows::Perception::Spatial::SpatialBoundingOrientedBox> value;
	check(shim()->abi_TryGetBounds(get(coordinateSystem), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh> impl_ISpatialSurfaceInfo<T>::TryComputeLatestMeshAsync(double const maxTrianglesPerCubicMeter) const
{
	Windows::Foundation::IAsyncOperation<Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh> value;
	check(shim()->abi_TryComputeLatestMeshAsync(maxTrianglesPerCubicMeter, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh> impl_ISpatialSurfaceInfo<T>::TryComputeLatestMeshAsync(double const maxTrianglesPerCubicMeter, Windows::Perception::Spatial::Surfaces::SpatialSurfaceMeshOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Perception::Spatial::Surfaces::SpatialSurfaceMesh> value;
	check(shim()->abi_TryComputeLatestMeshWithOptionsAsync(maxTrianglesPerCubicMeter, get(options), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Perception::Spatial::SpatialPerceptionAccessStatus> impl_ISpatialSurfaceObserverStatics<T>::RequestAccessAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Perception::Spatial::SpatialPerceptionAccessStatus> result;
	check(shim()->abi_RequestAccessAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IMapView<GUID, Windows::Perception::Spatial::Surfaces::SpatialSurfaceInfo> impl_ISpatialSurfaceObserver<T>::GetObservedSurfaces() const
{
	Windows::Foundation::Collections::IMapView<GUID, Windows::Perception::Spatial::Surfaces::SpatialSurfaceInfo> value;
	check(shim()->abi_GetObservedSurfaces(put(value)));
	return value;
}

template <typename T> void impl_ISpatialSurfaceObserver<T>::SetBoundingVolume(Windows::Perception::Spatial::SpatialBoundingVolume const & bounds) const
{
	check(shim()->abi_SetBoundingVolume(get(bounds)));
}

template <typename T> void impl_ISpatialSurfaceObserver<T>::SetBoundingVolumes(Windows::Foundation::Collections::IIterable<Windows::Perception::Spatial::SpatialBoundingVolume> const & bounds) const
{
	check(shim()->abi_SetBoundingVolumes(get(bounds)));
}

template <typename T> long long impl_ISpatialSurfaceObserver<T>::ObservedSurfacesChanged(Windows::Foundation::ITypedEventHandler<Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_ObservedSurfacesChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialSurfaceObserver<T>::ObservedSurfacesChanged(F handler) const
{
	return ObservedSurfacesChanged(Windows::Foundation::TypedEventHandler<Windows::Perception::Spatial::Surfaces::SpatialSurfaceObserver, IInspectable>(handler));
}

template <typename T> void impl_ISpatialSurfaceObserver<T>::ObservedSurfacesChanged(long long const token) const
{
	check(shim()->remove_ObservedSurfacesChanged(token));
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace OnlineId {

template <typename T> String impl_IOnlineIdServiceTicketRequest<T>::Service() const
{
	String value;
	check(shim()->get_Service(put(value)));
	return value;
}

template <typename T> String impl_IOnlineIdServiceTicketRequest<T>::Policy() const
{
	String value;
	check(shim()->get_Policy(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest impl_IOnlineIdServiceTicketRequestFactory<T>::CreateOnlineIdServiceTicketRequest(StringReference const & service, StringReference const & policy) const
{
	Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest onlineIdServiceTicketRequest = nullptr;
	check(shim()->abi_CreateOnlineIdServiceTicketRequest(get(service), get(policy), put(onlineIdServiceTicketRequest)));
	return onlineIdServiceTicketRequest;
}

template <typename T> Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest impl_IOnlineIdServiceTicketRequestFactory<T>::CreateOnlineIdServiceTicketRequestAdvanced(StringReference const & service) const
{
	Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest onlineIdServiceTicketRequest = nullptr;
	check(shim()->abi_CreateOnlineIdServiceTicketRequestAdvanced(get(service), put(onlineIdServiceTicketRequest)));
	return onlineIdServiceTicketRequest;
}

template <typename T> String impl_IOnlineIdServiceTicket<T>::Value() const
{
	String value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest impl_IOnlineIdServiceTicket<T>::Request() const
{
	Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest value = nullptr;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> int impl_IOnlineIdServiceTicket<T>::ErrorCode() const
{
	int value = {};
	check(shim()->get_ErrorCode(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicket> impl_IUserIdentity<T>::Tickets() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicket> value;
	check(shim()->get_Tickets(put(value)));
	return value;
}

template <typename T> String impl_IUserIdentity<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IUserIdentity<T>::SafeCustomerId() const
{
	String value;
	check(shim()->get_SafeCustomerId(put(value)));
	return value;
}

template <typename T> String impl_IUserIdentity<T>::SignInName() const
{
	String value;
	check(shim()->get_SignInName(put(value)));
	return value;
}

template <typename T> String impl_IUserIdentity<T>::FirstName() const
{
	String value;
	check(shim()->get_FirstName(put(value)));
	return value;
}

template <typename T> String impl_IUserIdentity<T>::LastName() const
{
	String value;
	check(shim()->get_LastName(put(value)));
	return value;
}

template <typename T> bool impl_IUserIdentity<T>::IsBetaAccount() const
{
	bool value = {};
	check(shim()->get_IsBetaAccount(put(value)));
	return value;
}

template <typename T> bool impl_IUserIdentity<T>::IsConfirmedPC() const
{
	bool value = {};
	check(shim()->get_IsConfirmedPC(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::OnlineId::UserAuthenticationOperation impl_IOnlineIdAuthenticator<T>::AuthenticateUserAsync(Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest const & request) const
{
	Windows::Security::Authentication::OnlineId::UserAuthenticationOperation authenticationOperation = nullptr;
	check(shim()->abi_AuthenticateUserAsync(get(request), put(authenticationOperation)));
	return authenticationOperation;
}

template <typename T> Windows::Security::Authentication::OnlineId::UserAuthenticationOperation impl_IOnlineIdAuthenticator<T>::AuthenticateUserAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Authentication::OnlineId::OnlineIdServiceTicketRequest> const & requests, Windows::Security::Authentication::OnlineId::CredentialPromptType const credentialPromptType) const
{
	Windows::Security::Authentication::OnlineId::UserAuthenticationOperation authenticationOperation = nullptr;
	check(shim()->abi_AuthenticateUserAsyncAdvanced(get(requests), credentialPromptType, put(authenticationOperation)));
	return authenticationOperation;
}

template <typename T> Windows::Security::Authentication::OnlineId::SignOutUserOperation impl_IOnlineIdAuthenticator<T>::SignOutUserAsync() const
{
	Windows::Security::Authentication::OnlineId::SignOutUserOperation signOutUserOperation = nullptr;
	check(shim()->abi_SignOutUserAsync(put(signOutUserOperation)));
	return signOutUserOperation;
}

template <typename T> void impl_IOnlineIdAuthenticator<T>::ApplicationId(GUID const value) const
{
	check(shim()->put_ApplicationId(value));
}

template <typename T> GUID impl_IOnlineIdAuthenticator<T>::ApplicationId() const
{
	GUID value = {};
	check(shim()->get_ApplicationId(&value));
	return value;
}

template <typename T> bool impl_IOnlineIdAuthenticator<T>::CanSignOut() const
{
	bool value = {};
	check(shim()->get_CanSignOut(put(value)));
	return value;
}

template <typename T> String impl_IOnlineIdAuthenticator<T>::AuthenticatedSafeCustomerId() const
{
	String value;
	check(shim()->get_AuthenticatedSafeCustomerId(put(value)));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web {

template <typename T> String impl_IWebAuthenticationResult<T>::ResponseData() const
{
	String value;
	check(shim()->get_ResponseData(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::WebAuthenticationStatus impl_IWebAuthenticationResult<T>::ResponseStatus() const
{
	Windows::Security::Authentication::Web::WebAuthenticationStatus value = {};
	check(shim()->get_ResponseStatus(&value));
	return value;
}

template <typename T> unsigned impl_IWebAuthenticationResult<T>::ResponseErrorDetail() const
{
	unsigned value = {};
	check(shim()->get_ResponseErrorDetail(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> impl_IWebAuthenticationBrokerStatics<T>::AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions const options, Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> asyncInfo;
	check(shim()->abi_AuthenticateWithCallbackUriAsync(options, get(requestUri), get(callbackUri), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> impl_IWebAuthenticationBrokerStatics<T>::AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions const options, Windows::Foundation::Uri const & requestUri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> asyncInfo;
	check(shim()->abi_AuthenticateWithoutCallbackUriAsync(options, get(requestUri), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::Uri impl_IWebAuthenticationBrokerStatics<T>::GetCurrentApplicationCallbackUri() const
{
	Windows::Foundation::Uri callbackUri = nullptr;
	check(shim()->abi_GetCurrentApplicationCallbackUri(put(callbackUri)));
	return callbackUri;
}

template <typename T> void impl_IWebAuthenticationBrokerStatics2<T>::AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri) const
{
	check(shim()->abi_AuthenticateAndContinue(get(requestUri)));
}

template <typename T> void impl_IWebAuthenticationBrokerStatics2<T>::AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri) const
{
	check(shim()->abi_AuthenticateWithCallbackUriAndContinue(get(requestUri), get(callbackUri)));
}

template <typename T> void impl_IWebAuthenticationBrokerStatics2<T>::AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri, Windows::Foundation::Collections::ValueSet const & continuationData, Windows::Security::Authentication::Web::WebAuthenticationOptions const options) const
{
	check(shim()->abi_AuthenticateWithCallbackUriContinuationDataAndOptionsAndContinue(get(requestUri), get(callbackUri), get(continuationData), options));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> impl_IWebAuthenticationBrokerStatics2<T>::AuthenticateSilentlyAsync(Windows::Foundation::Uri const & requestUri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> asyncInfo;
	check(shim()->abi_AuthenticateSilentlyAsync(get(requestUri), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> impl_IWebAuthenticationBrokerStatics2<T>::AuthenticateSilentlyAsync(Windows::Foundation::Uri const & requestUri, Windows::Security::Authentication::Web::WebAuthenticationOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> asyncInfo;
	check(shim()->abi_AuthenticateSilentlyWithOptionsAsync(get(requestUri), options, put(asyncInfo)));
	return asyncInfo;
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Core {

template <typename T> Windows::Security::Credentials::WebAccountProvider impl_IWebTokenRequest<T>::WebAccountProvider() const
{
	Windows::Security::Credentials::WebAccountProvider value = nullptr;
	check(shim()->get_WebAccountProvider(put(value)));
	return value;
}

template <typename T> String impl_IWebTokenRequest<T>::Scope() const
{
	String value;
	check(shim()->get_Scope(put(value)));
	return value;
}

template <typename T> String impl_IWebTokenRequest<T>::ClientId() const
{
	String value;
	check(shim()->get_ClientId(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenRequestPromptType impl_IWebTokenRequest<T>::PromptType() const
{
	Windows::Security::Authentication::Web::Core::WebTokenRequestPromptType value = {};
	check(shim()->get_PromptType(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IWebTokenRequest<T>::Properties() const
{
	Windows::Foundation::Collections::IMap<String, String> requestProperties;
	check(shim()->get_Properties(put(requestProperties)));
	return requestProperties;
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IWebTokenRequest2<T>::AppProperties() const
{
	Windows::Foundation::Collections::IMap<String, String> requestProperties;
	check(shim()->get_AppProperties(put(requestProperties)));
	return requestProperties;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenRequest impl_IWebTokenRequestFactory<T>::Create(Windows::Security::Credentials::WebAccountProvider const & provider, StringReference const & scope, StringReference const & clientId) const
{
	Windows::Security::Authentication::Web::Core::WebTokenRequest webTokenRequest = nullptr;
	check(shim()->abi_Create(get(provider), get(scope), get(clientId), put(webTokenRequest)));
	return webTokenRequest;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenRequest impl_IWebTokenRequestFactory<T>::CreateWithPromptType(Windows::Security::Credentials::WebAccountProvider const & provider, StringReference const & scope, StringReference const & clientId, Windows::Security::Authentication::Web::Core::WebTokenRequestPromptType const promptType) const
{
	Windows::Security::Authentication::Web::Core::WebTokenRequest webTokenRequest = nullptr;
	check(shim()->abi_CreateWithPromptType(get(provider), get(scope), get(clientId), promptType, put(webTokenRequest)));
	return webTokenRequest;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenRequest impl_IWebTokenRequestFactory<T>::CreateWithProvider(Windows::Security::Credentials::WebAccountProvider const & provider) const
{
	Windows::Security::Authentication::Web::Core::WebTokenRequest webTokenRequest = nullptr;
	check(shim()->abi_CreateWithProvider(get(provider), put(webTokenRequest)));
	return webTokenRequest;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenRequest impl_IWebTokenRequestFactory<T>::CreateWithScope(Windows::Security::Credentials::WebAccountProvider const & provider, StringReference const & scope) const
{
	Windows::Security::Authentication::Web::Core::WebTokenRequest webTokenRequest = nullptr;
	check(shim()->abi_CreateWithScope(get(provider), get(scope), put(webTokenRequest)));
	return webTokenRequest;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> impl_IWebAuthenticationCoreManagerStatics<T>::GetTokenSilentlyAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> asyncInfo;
	check(shim()->abi_GetTokenSilentlyAsync(get(request), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> impl_IWebAuthenticationCoreManagerStatics<T>::GetTokenSilentlyAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request, Windows::Security::Credentials::WebAccount const & webAccount) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> asyncInfo;
	check(shim()->abi_GetTokenSilentlyWithWebAccountAsync(get(request), get(webAccount), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> impl_IWebAuthenticationCoreManagerStatics<T>::RequestTokenAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> asyncInfo;
	check(shim()->abi_RequestTokenAsync(get(request), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> impl_IWebAuthenticationCoreManagerStatics<T>::RequestTokenAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request, Windows::Security::Credentials::WebAccount const & webAccount) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> asyncInfo;
	check(shim()->abi_RequestTokenWithWebAccountAsync(get(request), get(webAccount), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> impl_IWebAuthenticationCoreManagerStatics<T>::FindAccountAsync(Windows::Security::Credentials::WebAccountProvider const & provider, StringReference const & webAccountId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> asyncInfo;
	check(shim()->abi_FindAccountAsync(get(provider), get(webAccountId), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> impl_IWebAuthenticationCoreManagerStatics<T>::FindAccountProviderAsync(StringReference const & webAccountProviderId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> asyncInfo;
	check(shim()->abi_FindAccountProviderAsync(get(webAccountProviderId), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> impl_IWebAuthenticationCoreManagerStatics<T>::FindAccountProviderAsync(StringReference const & webAccountProviderId, StringReference const & authority) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> asyncInfo;
	check(shim()->abi_FindAccountProviderWithAuthorityAsync(get(webAccountProviderId), get(authority), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> impl_IWebAuthenticationCoreManagerStatics2<T>::FindAccountProviderAsync(StringReference const & webAccountProviderId, StringReference const & authority, Windows::System::User const & user) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> asyncInfo;
	check(shim()->abi_FindAccountProviderWithAuthorityForUserAsync(get(webAccountProviderId), get(authority), get(user), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> unsigned impl_IWebProviderError<T>::ErrorCode() const
{
	unsigned value = {};
	check(shim()->get_ErrorCode(&value));
	return value;
}

template <typename T> String impl_IWebProviderError<T>::ErrorMessage() const
{
	String value;
	check(shim()->get_ErrorMessage(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IWebProviderError<T>::Properties() const
{
	Windows::Foundation::Collections::IMap<String, String> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebProviderError impl_IWebProviderErrorFactory<T>::Create(unsigned const errorCode, StringReference const & errorMessage) const
{
	Windows::Security::Authentication::Web::Core::WebProviderError webProviderError = nullptr;
	check(shim()->abi_Create(errorCode, get(errorMessage), put(webProviderError)));
	return webProviderError;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::Web::Core::WebTokenResponse> impl_IWebTokenRequestResult<T>::ResponseData() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::Web::Core::WebTokenResponse> value;
	check(shim()->get_ResponseData(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenRequestStatus impl_IWebTokenRequestResult<T>::ResponseStatus() const
{
	Windows::Security::Authentication::Web::Core::WebTokenRequestStatus value = {};
	check(shim()->get_ResponseStatus(&value));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebProviderError impl_IWebTokenRequestResult<T>::ResponseError() const
{
	Windows::Security::Authentication::Web::Core::WebProviderError value = nullptr;
	check(shim()->get_ResponseError(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebTokenRequestResult<T>::InvalidateCacheAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_InvalidateCacheAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> String impl_IWebTokenResponse<T>::Token() const
{
	String value;
	check(shim()->get_Token(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebProviderError impl_IWebTokenResponse<T>::ProviderError() const
{
	Windows::Security::Authentication::Web::Core::WebProviderError value = nullptr;
	check(shim()->get_ProviderError(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::WebAccount impl_IWebTokenResponse<T>::WebAccount() const
{
	Windows::Security::Credentials::WebAccount value = nullptr;
	check(shim()->get_WebAccount(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMap<String, String> impl_IWebTokenResponse<T>::Properties() const
{
	Windows::Foundation::Collections::IMap<String, String> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenResponse impl_IWebTokenResponseFactory<T>::CreateWithToken(StringReference const & token) const
{
	Windows::Security::Authentication::Web::Core::WebTokenResponse webTokenResponse = nullptr;
	check(shim()->abi_CreateWithToken(get(token), put(webTokenResponse)));
	return webTokenResponse;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenResponse impl_IWebTokenResponseFactory<T>::CreateWithTokenAndAccount(StringReference const & token, Windows::Security::Credentials::WebAccount const & webAccount) const
{
	Windows::Security::Authentication::Web::Core::WebTokenResponse webTokenResponse = nullptr;
	check(shim()->abi_CreateWithTokenAndAccount(get(token), get(webAccount), put(webTokenResponse)));
	return webTokenResponse;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenResponse impl_IWebTokenResponseFactory<T>::CreateWithTokenAccountAndError(StringReference const & token, Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Core::WebProviderError const & error) const
{
	Windows::Security::Authentication::Web::Core::WebTokenResponse webTokenResponse = nullptr;
	check(shim()->abi_CreateWithTokenAccountAndError(get(token), get(webAccount), get(error), put(webTokenResponse)));
	return webTokenResponse;
}

}}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Provider {

template <typename T> Windows::Security::Authentication::Web::Provider::WebAccountProviderOperationKind impl_IWebAccountProviderOperation<T>::Kind() const
{
	Windows::Security::Authentication::Web::Provider::WebAccountProviderOperationKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenRequest impl_IWebProviderTokenRequest<T>::ClientRequest() const
{
	Windows::Security::Authentication::Web::Core::WebTokenRequest value = nullptr;
	check(shim()->get_ClientRequest(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount> impl_IWebProviderTokenRequest<T>::WebAccounts() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount> value;
	check(shim()->get_WebAccounts(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Provider::WebAccountSelectionOptions impl_IWebProviderTokenRequest<T>::WebAccountSelectionOptions() const
{
	Windows::Security::Authentication::Web::Provider::WebAccountSelectionOptions value = {};
	check(shim()->get_WebAccountSelectionOptions(&value));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IWebProviderTokenRequest<T>::ApplicationCallbackUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ApplicationCallbackUri(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> impl_IWebProviderTokenRequest<T>::GetApplicationTokenBindingKeyAsync(Windows::Security::Authentication::Web::TokenBindingKeyType const keyType, Windows::Foundation::Uri const & target) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> asyncInfo;
	check(shim()->abi_GetApplicationTokenBindingKeyAsync(keyType, get(target), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Security::Authentication::Web::Core::WebTokenResponse impl_IWebProviderTokenResponse<T>::ClientResponse() const
{
	Windows::Security::Authentication::Web::Core::WebTokenResponse value = nullptr;
	check(shim()->get_ClientResponse(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse impl_IWebProviderTokenResponseFactory<T>::Create(Windows::Security::Authentication::Web::Core::WebTokenResponse const & webTokenResponse) const
{
	Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse webProviderTokenResponse = nullptr;
	check(shim()->abi_Create(get(webTokenResponse), put(webProviderTokenResponse)));
	return webProviderTokenResponse;
}

template <typename T> Windows::Foundation::Uri impl_IWebAccountClientView<T>::ApplicationCallbackUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ApplicationCallbackUri(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Provider::WebAccountClientViewType impl_IWebAccountClientView<T>::Type() const
{
	Windows::Security::Authentication::Web::Provider::WebAccountClientViewType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> String impl_IWebAccountClientView<T>::AccountPairwiseId() const
{
	String value;
	check(shim()->get_AccountPairwiseId(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Provider::WebAccountClientView impl_IWebAccountClientViewFactory<T>::Create(Windows::Security::Authentication::Web::Provider::WebAccountClientViewType const viewType, Windows::Foundation::Uri const & applicationCallbackUri) const
{
	Windows::Security::Authentication::Web::Provider::WebAccountClientView view = nullptr;
	check(shim()->abi_Create(viewType, get(applicationCallbackUri), put(view)));
	return view;
}

template <typename T> Windows::Security::Authentication::Web::Provider::WebAccountClientView impl_IWebAccountClientViewFactory<T>::CreateWithPairwiseId(Windows::Security::Authentication::Web::Provider::WebAccountClientViewType const viewType, Windows::Foundation::Uri const & applicationCallbackUri, StringReference const & accountPairwiseId) const
{
	Windows::Security::Authentication::Web::Provider::WebAccountClientView view = nullptr;
	check(shim()->abi_CreateWithPairwiseId(viewType, get(applicationCallbackUri), get(accountPairwiseId), put(view)));
	return view;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountManagerStatics<T>::UpdateWebAccountPropertiesAsync(Windows::Security::Credentials::WebAccount const & webAccount, StringReference const & webAccountUserName, Windows::Foundation::Collections::IMapView<String, String> const & additionalProperties) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_UpdateWebAccountPropertiesAsync(get(webAccount), get(webAccountUserName), get(additionalProperties), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> impl_IWebAccountManagerStatics<T>::AddWebAccountAsync(StringReference const & webAccountId, StringReference const & webAccountUserName, Windows::Foundation::Collections::IMapView<String, String> const & props) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> asyncInfo;
	check(shim()->abi_AddWebAccountAsync(get(webAccountId), get(webAccountUserName), get(props), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountManagerStatics<T>::DeleteWebAccountAsync(Windows::Security::Credentials::WebAccount const & webAccount) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_DeleteWebAccountAsync(get(webAccount), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount>> impl_IWebAccountManagerStatics<T>::FindAllProviderWebAccountsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount>> asyncInfo;
	check(shim()->abi_FindAllProviderWebAccountsAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountManagerStatics<T>::PushCookiesAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IVectorView<Windows::Web::Http::HttpCookie> const & cookies) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_PushCookiesAsync(get(uri), get(cookies), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountManagerStatics<T>::SetViewAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Provider::WebAccountClientView const & view) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetViewAsync(get(webAccount), get(view), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountManagerStatics<T>::ClearViewAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Foundation::Uri const & applicationCallbackUri) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_ClearViewAsync(get(webAccount), get(applicationCallbackUri), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::Web::Provider::WebAccountClientView>> impl_IWebAccountManagerStatics<T>::GetViewsAsync(Windows::Security::Credentials::WebAccount const & webAccount) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::Web::Provider::WebAccountClientView>> asyncInfo;
	check(shim()->abi_GetViewsAsync(get(webAccount), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountManagerStatics<T>::SetWebAccountPictureAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Storage::Streams::IRandomAccessStream const & webAccountPicture) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetWebAccountPictureAsync(get(webAccount), get(webAccountPicture), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountManagerStatics<T>::ClearWebAccountPictureAsync(Windows::Security::Credentials::WebAccount const & webAccount) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_ClearWebAccountPictureAsync(get(webAccount), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountManagerStatics2<T>::PullCookiesAsync(StringReference const & uriString, StringReference const & callerPFN) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_PullCookiesAsync(get(uriString), get(callerPFN), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> impl_IWebAccountScopeManagerStatics<T>::AddWebAccountAsync(StringReference const & webAccountId, StringReference const & webAccountUserName, Windows::Foundation::Collections::IMapView<String, String> const & props, Windows::Security::Authentication::Web::Provider::WebAccountScope const scope) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> asyncInfo;
	check(shim()->abi_AddWebAccountWithScopeAsync(get(webAccountId), get(webAccountUserName), get(props), scope, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccountScopeManagerStatics<T>::SetScopeAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Provider::WebAccountScope const scope) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SetScopeAsync(get(webAccount), scope, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Security::Authentication::Web::Provider::WebAccountScope impl_IWebAccountScopeManagerStatics<T>::GetScope(Windows::Security::Credentials::WebAccount const & webAccount) const
{
	Windows::Security::Authentication::Web::Provider::WebAccountScope scope = {};
	check(shim()->abi_GetScope(get(webAccount), &scope));
	return scope;
}

template <typename T> void impl_IWebAccountProviderBaseReportOperation<T>::ReportCompleted() const
{
	check(shim()->abi_ReportCompleted());
}

template <typename T> void impl_IWebAccountProviderBaseReportOperation<T>::ReportError(Windows::Security::Authentication::Web::Core::WebProviderError const & value) const
{
	check(shim()->abi_ReportError(get(value)));
}

template <typename T> void impl_IWebAccountProviderUIReportOperation<T>::ReportUserCanceled() const
{
	check(shim()->abi_ReportUserCanceled());
}

template <typename T> void impl_IWebAccountProviderSilentReportOperation<T>::ReportUserInteractionRequired() const
{
	check(shim()->abi_ReportUserInteractionRequired());
}

template <typename T> void impl_IWebAccountProviderSilentReportOperation<T>::ReportUserInteractionRequired(Windows::Security::Authentication::Web::Core::WebProviderError const & value) const
{
	check(shim()->abi_ReportUserInteractionRequiredWithError(get(value)));
}

template <typename T> Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest impl_IWebAccountProviderTokenOperation<T>::ProviderRequest() const
{
	Windows::Security::Authentication::Web::Provider::WebProviderTokenRequest webTokenRequest = nullptr;
	check(shim()->get_ProviderRequest(put(webTokenRequest)));
	return webTokenRequest;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse> impl_IWebAccountProviderTokenOperation<T>::ProviderResponses() const
{
	Windows::Foundation::Collections::IVector<Windows::Security::Authentication::Web::Provider::WebProviderTokenResponse> value;
	check(shim()->get_ProviderResponses(put(value)));
	return value;
}

template <typename T> void impl_IWebAccountProviderTokenOperation<T>::CacheExpirationTime(Windows::Foundation::DateTime const & value) const
{
	check(shim()->put_CacheExpirationTime(value));
}

template <typename T> Windows::Foundation::DateTime impl_IWebAccountProviderTokenOperation<T>::CacheExpirationTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_CacheExpirationTime(&value));
	return value;
}

template <typename T> void impl_IWebAccountProviderAddAccountOperation<T>::ReportCompleted() const
{
	check(shim()->abi_ReportCompleted());
}

template <typename T> Windows::Security::Credentials::WebAccount impl_IWebAccountProviderManageAccountOperation<T>::WebAccount() const
{
	Windows::Security::Credentials::WebAccount value = nullptr;
	check(shim()->get_WebAccount(put(value)));
	return value;
}

template <typename T> void impl_IWebAccountProviderManageAccountOperation<T>::ReportCompleted() const
{
	check(shim()->abi_ReportCompleted());
}

template <typename T> Windows::Security::Credentials::WebAccount impl_IWebAccountProviderDeleteAccountOperation<T>::WebAccount() const
{
	Windows::Security::Credentials::WebAccount value = nullptr;
	check(shim()->get_WebAccount(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::WebAccount impl_IWebAccountProviderSignOutAccountOperation<T>::WebAccount() const
{
	Windows::Security::Credentials::WebAccount value = nullptr;
	check(shim()->get_WebAccount(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IWebAccountProviderSignOutAccountOperation<T>::ApplicationCallbackUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ApplicationCallbackUri(put(value)));
	return value;
}

template <typename T> String impl_IWebAccountProviderSignOutAccountOperation<T>::ClientId() const
{
	String value;
	check(shim()->get_ClientId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IWebAccountProviderRetrieveCookiesOperation<T>::Context() const
{
	Windows::Foundation::Uri webCookieRequestContext = nullptr;
	check(shim()->get_Context(put(webCookieRequestContext)));
	return webCookieRequestContext;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::HttpCookie> impl_IWebAccountProviderRetrieveCookiesOperation<T>::Cookies() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::HttpCookie> cookies;
	check(shim()->get_Cookies(put(cookies)));
	return cookies;
}

template <typename T> void impl_IWebAccountProviderRetrieveCookiesOperation<T>::Uri(Windows::Foundation::Uri const & uri) const
{
	check(shim()->put_Uri(get(uri)));
}

template <typename T> Windows::Foundation::Uri impl_IWebAccountProviderRetrieveCookiesOperation<T>::Uri() const
{
	Windows::Foundation::Uri uri = nullptr;
	check(shim()->get_Uri(put(uri)));
	return uri;
}

template <typename T> Windows::Foundation::Uri impl_IWebAccountProviderRetrieveCookiesOperation<T>::ApplicationCallbackUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ApplicationCallbackUri(put(value)));
	return value;
}

template <typename T> Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation impl_IWebAccountProviderTokenObjects<T>::Operation() const
{
	Windows::Security::Authentication::Web::Provider::IWebAccountProviderOperation value;
	check(shim()->get_Operation(put(value)));
	return value;
}

}}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Credentials {

template <typename T> Windows::Security::Credentials::WebAccount impl_IWebAccountFactory<T>::CreateWebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, StringReference const & userName, Windows::Security::Credentials::WebAccountState const state) const
{
	Windows::Security::Credentials::WebAccount instance = nullptr;
	check(shim()->abi_CreateWebAccount(get(webAccountProvider), get(userName), state, put(instance)));
	return instance;
}

template <typename T> Windows::Security::Credentials::WebAccountProvider impl_IWebAccount<T>::WebAccountProvider() const
{
	Windows::Security::Credentials::WebAccountProvider value = nullptr;
	check(shim()->get_WebAccountProvider(put(value)));
	return value;
}

template <typename T> String impl_IWebAccount<T>::UserName() const
{
	String value;
	check(shim()->get_UserName(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::WebAccountState impl_IWebAccount<T>::State() const
{
	Windows::Security::Credentials::WebAccountState value = {};
	check(shim()->get_State(&value));
	return value;
}

template <typename T> String impl_IWebAccount2<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, String> impl_IWebAccount2<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, String> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> impl_IWebAccount2<T>::GetPictureAsync(Windows::Security::Credentials::WebAccountPictureSize const desizedSize) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> asyncInfo;
	check(shim()->abi_GetPictureAsync(desizedSize, put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccount2<T>::SignOutAsync() const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SignOutAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IWebAccount2<T>::SignOutAsync(StringReference const & clientId) const
{
	Windows::Foundation::IAsyncAction asyncInfo;
	check(shim()->abi_SignOutWithClientIdAsync(get(clientId), put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::Security::Credentials::WebAccountProvider impl_IWebAccountProviderFactory<T>::CreateWebAccountProvider(StringReference const & id, StringReference const & displayName, Windows::Foundation::Uri const & iconUri) const
{
	Windows::Security::Credentials::WebAccountProvider instance = nullptr;
	check(shim()->abi_CreateWebAccountProvider(get(id), get(displayName), get(iconUri), put(instance)));
	return instance;
}

template <typename T> String impl_IWebAccountProvider<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IWebAccountProvider<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IWebAccountProvider<T>::IconUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_IconUri(put(value)));
	return value;
}

template <typename T> String impl_IWebAccountProvider2<T>::DisplayPurpose() const
{
	String value;
	check(shim()->get_DisplayPurpose(put(value)));
	return value;
}

template <typename T> String impl_IWebAccountProvider2<T>::Authority() const
{
	String value;
	check(shim()->get_Authority(put(value)));
	return value;
}

template <typename T> Windows::System::User impl_IWebAccountProvider3<T>::User() const
{
	Windows::System::User user = nullptr;
	check(shim()->get_User(put(user)));
	return user;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IKeyCredentialManagerStatics<T>::IsSupportedAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> value;
	check(shim()->abi_IsSupportedAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IKeyCredentialManagerStatics<T>::RenewAttestationAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_RenewAttestationAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialRetrievalResult> impl_IKeyCredentialManagerStatics<T>::RequestCreateAsync(StringReference const & name, Windows::Security::Credentials::KeyCredentialCreationOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialRetrievalResult> value;
	check(shim()->abi_RequestCreateAsync(get(name), option, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialRetrievalResult> impl_IKeyCredentialManagerStatics<T>::OpenAsync(StringReference const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialRetrievalResult> value;
	check(shim()->abi_OpenAsync(get(name), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IKeyCredentialManagerStatics<T>::DeleteAsync(StringReference const & name) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_DeleteAsync(get(name), put(operation)));
	return operation;
}

template <typename T> String impl_IKeyCredential<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IKeyCredential<T>::RetrievePublicKey() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->abi_RetrievePublicKeyWithDefaultBlobType(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IKeyCredential<T>::RetrievePublicKey(Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType const blobType) const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->abi_RetrievePublicKeyWithBlobType(blobType, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialOperationResult> impl_IKeyCredential<T>::RequestSignAsync(Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialOperationResult> value;
	check(shim()->abi_RequestSignAsync(get(data), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialAttestationResult> impl_IKeyCredential<T>::GetAttestationAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialAttestationResult> value;
	check(shim()->abi_GetAttestationAsync(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::KeyCredential impl_IKeyCredentialRetrievalResult<T>::Credential() const
{
	Windows::Security::Credentials::KeyCredential value = nullptr;
	check(shim()->get_Credential(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::KeyCredentialStatus impl_IKeyCredentialRetrievalResult<T>::Status() const
{
	Windows::Security::Credentials::KeyCredentialStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IKeyCredentialOperationResult<T>::Result() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Result(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::KeyCredentialStatus impl_IKeyCredentialOperationResult<T>::Status() const
{
	Windows::Security::Credentials::KeyCredentialStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IKeyCredentialAttestationResult<T>::CertificateChainBuffer() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_CertificateChainBuffer(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IKeyCredentialAttestationResult<T>::AttestationBuffer() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_AttestationBuffer(put(value)));
	return value;
}

template <typename T> Windows::Security::Credentials::KeyCredentialAttestationStatus impl_IKeyCredentialAttestationResult<T>::Status() const
{
	Windows::Security::Credentials::KeyCredentialAttestationStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> String impl_IPasswordCredential<T>::Resource() const
{
	String resource;
	check(shim()->get_Resource(put(resource)));
	return resource;
}

template <typename T> void impl_IPasswordCredential<T>::Resource(StringReference const & resource) const
{
	check(shim()->put_Resource(get(resource)));
}

template <typename T> String impl_IPasswordCredential<T>::UserName() const
{
	String userName;
	check(shim()->get_UserName(put(userName)));
	return userName;
}

template <typename T> void impl_IPasswordCredential<T>::UserName(StringReference const & userName) const
{
	check(shim()->put_UserName(get(userName)));
}

template <typename T> String impl_IPasswordCredential<T>::Password() const
{
	String password;
	check(shim()->get_Password(put(password)));
	return password;
}

template <typename T> void impl_IPasswordCredential<T>::Password(StringReference const & password) const
{
	check(shim()->put_Password(get(password)));
}

template <typename T> void impl_IPasswordCredential<T>::RetrievePassword() const
{
	check(shim()->abi_RetrievePassword());
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IPasswordCredential<T>::Properties() const
{
	Windows::Foundation::Collections::IPropertySet props;
	check(shim()->get_Properties(put(props)));
	return props;
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_ICredentialFactory<T>::CreatePasswordCredential(StringReference const & resource, StringReference const & userName, StringReference const & password) const
{
	Windows::Security::Credentials::PasswordCredential credential = nullptr;
	check(shim()->abi_CreatePasswordCredential(get(resource), get(userName), get(password), put(credential)));
	return credential;
}

template <typename T> void impl_IPasswordVault<T>::Add(Windows::Security::Credentials::PasswordCredential const & credential) const
{
	check(shim()->abi_Add(get(credential)));
}

template <typename T> void impl_IPasswordVault<T>::Remove(Windows::Security::Credentials::PasswordCredential const & credential) const
{
	check(shim()->abi_Remove(get(credential)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IPasswordVault<T>::Retrieve(StringReference const & resource, StringReference const & userName) const
{
	Windows::Security::Credentials::PasswordCredential credential = nullptr;
	check(shim()->abi_Retrieve(get(resource), get(userName), put(credential)));
	return credential;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> impl_IPasswordVault<T>::FindAllByResource(StringReference const & resource) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> credentials;
	check(shim()->abi_FindAllByResource(get(resource), put(credentials)));
	return credentials;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> impl_IPasswordVault<T>::FindAllByUserName(StringReference const & userName) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> credentials;
	check(shim()->abi_FindAllByUserName(get(userName), put(credentials)));
	return credentials;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> impl_IPasswordVault<T>::RetrieveAll() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::PasswordCredential> credentials;
	check(shim()->abi_RetrieveAll(put(credentials)));
	return credentials;
}

}}}}

namespace winrt { namespace Windows { namespace Security { namespace Credentials { namespace UI {

template <typename T> void impl_ICredentialPickerOptions<T>::Caption(StringReference const & value) const
{
	check(shim()->put_Caption(get(value)));
}

template <typename T> String impl_ICredentialPickerOptions<T>::Caption() const
{
	String value;
	check(shim()->get_Caption(put(value)));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::Message(StringReference const & value) const
{
	check(shim()->put_Message(get(value)));
}

template <typename T> String impl_ICredentialPickerOptions<T>::Message() const
{
	String value;
	check(shim()->get_Message(put(value)));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::ErrorCode(unsigned const value) const
{
	check(shim()->put_ErrorCode(value));
}

template <typename T> unsigned impl_ICredentialPickerOptions<T>::ErrorCode() const
{
	unsigned value = {};
	check(shim()->get_ErrorCode(&value));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::TargetName(StringReference const & value) const
{
	check(shim()->put_TargetName(get(value)));
}

template <typename T> String impl_ICredentialPickerOptions<T>::TargetName() const
{
	String value;
	check(shim()->get_TargetName(put(value)));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::AuthenticationProtocol(Windows::Security::Credentials::UI::AuthenticationProtocol const value) const
{
	check(shim()->put_AuthenticationProtocol(value));
}

template <typename T> Windows::Security::Credentials::UI::AuthenticationProtocol impl_ICredentialPickerOptions<T>::AuthenticationProtocol() const
{
	Windows::Security::Credentials::UI::AuthenticationProtocol value = {};
	check(shim()->get_AuthenticationProtocol(&value));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::CustomAuthenticationProtocol(StringReference const & value) const
{
	check(shim()->put_CustomAuthenticationProtocol(get(value)));
}

template <typename T> String impl_ICredentialPickerOptions<T>::CustomAuthenticationProtocol() const
{
	String value;
	check(shim()->get_CustomAuthenticationProtocol(put(value)));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::PreviousCredential(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_PreviousCredential(get(value)));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICredentialPickerOptions<T>::PreviousCredential() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_PreviousCredential(put(value)));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::AlwaysDisplayDialog(bool const value) const
{
	check(shim()->put_AlwaysDisplayDialog(value));
}

template <typename T> bool impl_ICredentialPickerOptions<T>::AlwaysDisplayDialog() const
{
	bool value = {};
	check(shim()->get_AlwaysDisplayDialog(put(value)));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::CallerSavesCredential(bool const value) const
{
	check(shim()->put_CallerSavesCredential(value));
}

template <typename T> bool impl_ICredentialPickerOptions<T>::CallerSavesCredential() const
{
	bool value = {};
	check(shim()->get_CallerSavesCredential(put(value)));
	return value;
}

template <typename T> void impl_ICredentialPickerOptions<T>::CredentialSaveOption(Windows::Security::Credentials::UI::CredentialSaveOption const value) const
{
	check(shim()->put_CredentialSaveOption(value));
}

template <typename T> Windows::Security::Credentials::UI::CredentialSaveOption impl_ICredentialPickerOptions<T>::CredentialSaveOption() const
{
	Windows::Security::Credentials::UI::CredentialSaveOption value = {};
	check(shim()->get_CredentialSaveOption(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> impl_ICredentialPickerStatics<T>::PickAsync(Windows::Security::Credentials::UI::CredentialPickerOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> operation;
	check(shim()->abi_PickWithOptionsAsync(get(options), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> impl_ICredentialPickerStatics<T>::PickAsync(StringReference const & targetName, StringReference const & message) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> operation;
	check(shim()->abi_PickWithMessageAsync(get(targetName), get(message), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> impl_ICredentialPickerStatics<T>::PickAsync(StringReference const & targetName, StringReference const & message, StringReference const & caption) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> operation;
	check(shim()->abi_PickWithCaptionAsync(get(targetName), get(message), get(caption), put(operation)));
	return operation;
}

template <typename T> unsigned impl_ICredentialPickerResults<T>::ErrorCode() const
{
	unsigned value = {};
	check(shim()->get_ErrorCode(&value));
	return value;
}

template <typename T> Windows::Security::Credentials::UI::CredentialSaveOption impl_ICredentialPickerResults<T>::CredentialSaveOption() const
{
	Windows::Security::Credentials::UI::CredentialSaveOption value = {};
	check(shim()->get_CredentialSaveOption(&value));
	return value;
}

template <typename T> bool impl_ICredentialPickerResults<T>::CredentialSaved() const
{
	bool value = {};
	check(shim()->get_CredentialSaved(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICredentialPickerResults<T>::Credential() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Credential(put(value)));
	return value;
}

template <typename T> String impl_ICredentialPickerResults<T>::CredentialDomainName() const
{
	String value;
	check(shim()->get_CredentialDomainName(put(value)));
	return value;
}

template <typename T> String impl_ICredentialPickerResults<T>::CredentialUserName() const
{
	String value;
	check(shim()->get_CredentialUserName(put(value)));
	return value;
}

template <typename T> String impl_ICredentialPickerResults<T>::CredentialPassword() const
{
	String value;
	check(shim()->get_CredentialPassword(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Security::Credentials::UI::UserConsentVerifierAvailability> impl_IUserConsentVerifierStatics<T>::CheckAvailabilityAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::Credentials::UI::UserConsentVerifierAvailability> result;
	check(shim()->abi_CheckAvailabilityAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Security::Credentials::UI::UserConsentVerificationResult> impl_IUserConsentVerifierStatics<T>::RequestVerificationAsync(StringReference const & message) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::Credentials::UI::UserConsentVerificationResult> result;
	check(shim()->abi_RequestVerificationAsync(get(message), put(result)));
	return result;
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography {

template <typename T> bool impl_ICryptographicBufferStatics<T>::Compare(Windows::Storage::Streams::IBuffer const & object1, Windows::Storage::Streams::IBuffer const & object2) const
{
	bool isEqual = {};
	check(shim()->abi_Compare(get(object1), get(object2), put(isEqual)));
	return isEqual;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicBufferStatics<T>::GenerateRandom(unsigned const length) const
{
	Windows::Storage::Streams::IBuffer buffer;
	check(shim()->abi_GenerateRandom(length, put(buffer)));
	return buffer;
}

template <typename T> unsigned impl_ICryptographicBufferStatics<T>::GenerateRandomNumber() const
{
	unsigned value = {};
	check(shim()->abi_GenerateRandomNumber(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicBufferStatics<T>::DecodeFromHexString(StringReference const & value) const
{
	Windows::Storage::Streams::IBuffer buffer;
	check(shim()->abi_DecodeFromHexString(get(value), put(buffer)));
	return buffer;
}

template <typename T> String impl_ICryptographicBufferStatics<T>::EncodeToHexString(Windows::Storage::Streams::IBuffer const & buffer) const
{
	String value;
	check(shim()->abi_EncodeToHexString(get(buffer), put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicBufferStatics<T>::DecodeFromBase64String(StringReference const & value) const
{
	Windows::Storage::Streams::IBuffer buffer;
	check(shim()->abi_DecodeFromBase64String(get(value), put(buffer)));
	return buffer;
}

template <typename T> String impl_ICryptographicBufferStatics<T>::EncodeToBase64String(Windows::Storage::Streams::IBuffer const & buffer) const
{
	String value;
	check(shim()->abi_EncodeToBase64String(get(buffer), put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicBufferStatics<T>::ConvertStringToBinary(StringReference const & value, Windows::Security::Cryptography::BinaryStringEncoding const encoding) const
{
	Windows::Storage::Streams::IBuffer buffer;
	check(shim()->abi_ConvertStringToBinary(get(value), encoding, put(buffer)));
	return buffer;
}

template <typename T> String impl_ICryptographicBufferStatics<T>::ConvertBinaryToString(Windows::Security::Cryptography::BinaryStringEncoding const encoding, Windows::Storage::Streams::IBuffer const & buffer) const
{
	String value;
	check(shim()->abi_ConvertBinaryToString(encoding, get(buffer), put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

template <typename T> String impl_ICertificateRequestProperties<T>::Subject() const
{
	String value;
	check(shim()->get_Subject(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::Subject(StringReference const & value) const
{
	check(shim()->put_Subject(get(value)));
}

template <typename T> String impl_ICertificateRequestProperties<T>::KeyAlgorithmName() const
{
	String value;
	check(shim()->get_KeyAlgorithmName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::KeyAlgorithmName(StringReference const & value) const
{
	check(shim()->put_KeyAlgorithmName(get(value)));
}

template <typename T> unsigned impl_ICertificateRequestProperties<T>::KeySize() const
{
	unsigned value = {};
	check(shim()->get_KeySize(&value));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::KeySize(unsigned const value) const
{
	check(shim()->put_KeySize(value));
}

template <typename T> String impl_ICertificateRequestProperties<T>::FriendlyName() const
{
	String value;
	check(shim()->get_FriendlyName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::FriendlyName(StringReference const & value) const
{
	check(shim()->put_FriendlyName(get(value)));
}

template <typename T> String impl_ICertificateRequestProperties<T>::HashAlgorithmName() const
{
	String value;
	check(shim()->get_HashAlgorithmName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::HashAlgorithmName(StringReference const & value) const
{
	check(shim()->put_HashAlgorithmName(get(value)));
}

template <typename T> Windows::Security::Cryptography::Certificates::ExportOption impl_ICertificateRequestProperties<T>::Exportable() const
{
	Windows::Security::Cryptography::Certificates::ExportOption value = {};
	check(shim()->get_Exportable(&value));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::Exportable(Windows::Security::Cryptography::Certificates::ExportOption const value) const
{
	check(shim()->put_Exportable(value));
}

template <typename T> Windows::Security::Cryptography::Certificates::EnrollKeyUsages impl_ICertificateRequestProperties<T>::KeyUsages() const
{
	Windows::Security::Cryptography::Certificates::EnrollKeyUsages value = {};
	check(shim()->get_KeyUsages(&value));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::KeyUsages(Windows::Security::Cryptography::Certificates::EnrollKeyUsages const value) const
{
	check(shim()->put_KeyUsages(value));
}

template <typename T> Windows::Security::Cryptography::Certificates::KeyProtectionLevel impl_ICertificateRequestProperties<T>::KeyProtectionLevel() const
{
	Windows::Security::Cryptography::Certificates::KeyProtectionLevel value = {};
	check(shim()->get_KeyProtectionLevel(&value));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::KeyProtectionLevel(Windows::Security::Cryptography::Certificates::KeyProtectionLevel const value) const
{
	check(shim()->put_KeyProtectionLevel(value));
}

template <typename T> String impl_ICertificateRequestProperties<T>::KeyStorageProviderName() const
{
	String value;
	check(shim()->get_KeyStorageProviderName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties<T>::KeyStorageProviderName(StringReference const & value) const
{
	check(shim()->put_KeyStorageProviderName(get(value)));
}

template <typename T> String impl_ICertificateRequestProperties2<T>::SmartcardReaderName() const
{
	String value;
	check(shim()->get_SmartcardReaderName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties2<T>::SmartcardReaderName(StringReference const & value) const
{
	check(shim()->put_SmartcardReaderName(get(value)));
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_ICertificateRequestProperties2<T>::SigningCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check(shim()->get_SigningCertificate(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties2<T>::SigningCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const
{
	check(shim()->put_SigningCertificate(get(value)));
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_ICertificateRequestProperties2<T>::AttestationCredentialCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check(shim()->get_AttestationCredentialCertificate(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties2<T>::AttestationCredentialCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const
{
	check(shim()->put_AttestationCredentialCertificate(get(value)));
}

template <typename T> String impl_ICertificateRequestProperties3<T>::CurveName() const
{
	String value;
	check(shim()->get_CurveName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties3<T>::CurveName(StringReference const & value) const
{
	check(shim()->put_CurveName(get(value)));
}

template <typename T> String impl_ICertificateRequestProperties3<T>::ContainerNamePrefix() const
{
	String value;
	check(shim()->get_ContainerNamePrefix(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties3<T>::ContainerNamePrefix(StringReference const & value) const
{
	check(shim()->put_ContainerNamePrefix(get(value)));
}

template <typename T> String impl_ICertificateRequestProperties3<T>::ContainerName() const
{
	String value;
	check(shim()->get_ContainerName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties3<T>::ContainerName(StringReference const & value) const
{
	check(shim()->put_ContainerName(get(value)));
}

template <typename T> bool impl_ICertificateRequestProperties3<T>::UseExistingKey() const
{
	bool value = {};
	check(shim()->get_UseExistingKey(put(value)));
	return value;
}

template <typename T> void impl_ICertificateRequestProperties3<T>::UseExistingKey(bool const value) const
{
	check(shim()->put_UseExistingKey(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_ICertificateEnrollmentManagerStatics<T>::CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request) const
{
	Windows::Foundation::IAsyncOperation<String> value;
	check(shim()->abi_CreateRequestAsync(get(request), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICertificateEnrollmentManagerStatics<T>::InstallCertificateAsync(StringReference const & certificate, Windows::Security::Cryptography::Certificates::InstallOptions const installOption) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_InstallCertificateAsync(get(certificate), installOption, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICertificateEnrollmentManagerStatics<T>::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, StringReference const & friendlyName) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_ImportPfxDataAsync(get(pfxData), get(password), exportable, keyProtectionLevel, installOption, get(friendlyName), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager impl_ICertificateEnrollmentManagerStatics2<T>::UserCertificateEnrollmentManager() const
{
	Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager value = nullptr;
	check(shim()->get_UserCertificateEnrollmentManager(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICertificateEnrollmentManagerStatics2<T>::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, StringReference const & friendlyName, StringReference const & keyStorageProvider) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_ImportPfxDataToKspAsync(get(pfxData), get(password), exportable, keyProtectionLevel, installOption, get(friendlyName), get(keyStorageProvider), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICertificateEnrollmentManagerStatics3<T>::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::PfxImportParameters const & pfxImportParameters) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_ImportPfxDataToKspWithParametersAsync(get(pfxData), get(password), get(pfxImportParameters), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IKeyAttestationHelperStatics<T>::DecryptTpmAttestationCredentialAsync(StringReference const & credential) const
{
	Windows::Foundation::IAsyncOperation<String> value;
	check(shim()->abi_DecryptTpmAttestationCredentialAsync(get(credential), put(value)));
	return value;
}

template <typename T> String impl_IKeyAttestationHelperStatics<T>::GetTpmAttestationCredentialId(StringReference const & credential) const
{
	String value;
	check(shim()->abi_GetTpmAttestationCredentialId(get(credential), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IKeyAttestationHelperStatics2<T>::DecryptTpmAttestationCredentialAsync(StringReference const & credential, StringReference const & containerName) const
{
	Windows::Foundation::IAsyncOperation<String> value;
	check(shim()->abi_DecryptTpmAttestationCredentialWithContainerNameAsync(get(credential), get(containerName), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> impl_ICertificateStoresStatics<T>::FindAllAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> value;
	check(shim()->abi_FindAllAsync(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> impl_ICertificateStoresStatics<T>::FindAllAsync(Windows::Security::Cryptography::Certificates::CertificateQuery const & query) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> value;
	check(shim()->abi_FindAllWithQueryAsync(get(query), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CertificateStore impl_ICertificateStoresStatics<T>::TrustedRootCertificationAuthorities() const
{
	Windows::Security::Cryptography::Certificates::CertificateStore value = nullptr;
	check(shim()->get_TrustedRootCertificationAuthorities(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CertificateStore impl_ICertificateStoresStatics<T>::IntermediateCertificationAuthorities() const
{
	Windows::Security::Cryptography::Certificates::CertificateStore value = nullptr;
	check(shim()->get_IntermediateCertificationAuthorities(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CertificateStore impl_ICertificateStoresStatics<T>::GetStoreByName(StringReference const & storeName) const
{
	Windows::Security::Cryptography::Certificates::CertificateStore value = nullptr;
	check(shim()->abi_GetStoreByName(get(storeName), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IUserCertificateEnrollmentManager<T>::CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request) const
{
	Windows::Foundation::IAsyncOperation<String> value;
	check(shim()->abi_CreateRequestAsync(get(request), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUserCertificateEnrollmentManager<T>::InstallCertificateAsync(StringReference const & certificate, Windows::Security::Cryptography::Certificates::InstallOptions const installOption) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_InstallCertificateAsync(get(certificate), installOption, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUserCertificateEnrollmentManager<T>::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, StringReference const & friendlyName) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_ImportPfxDataAsync(get(pfxData), get(password), exportable, keyProtectionLevel, installOption, get(friendlyName), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUserCertificateEnrollmentManager<T>::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, StringReference const & friendlyName, StringReference const & keyStorageProvider) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_ImportPfxDataToKspAsync(get(pfxData), get(password), exportable, keyProtectionLevel, installOption, get(friendlyName), get(keyStorageProvider), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IUserCertificateEnrollmentManager2<T>::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::PfxImportParameters const & pfxImportParameters) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_ImportPfxDataToKspWithParametersAsync(get(pfxData), get(password), get(pfxImportParameters), put(value)));
	return value;
}

template <typename T> void impl_ICertificateStore<T>::Add(Windows::Security::Cryptography::Certificates::Certificate const & certificate) const
{
	check(shim()->abi_Add(get(certificate)));
}

template <typename T> void impl_ICertificateStore<T>::Delete(Windows::Security::Cryptography::Certificates::Certificate const & certificate) const
{
	check(shim()->abi_Delete(get(certificate)));
}

template <typename T> String impl_ICertificateStore2<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Rsa() const
{
	String value;
	check(shim()->get_Rsa(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Dsa() const
{
	String value;
	check(shim()->get_Dsa(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdh256() const
{
	String value;
	check(shim()->get_Ecdh256(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdh384() const
{
	String value;
	check(shim()->get_Ecdh384(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdh521() const
{
	String value;
	check(shim()->get_Ecdh521(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdsa256() const
{
	String value;
	check(shim()->get_Ecdsa256(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdsa384() const
{
	String value;
	check(shim()->get_Ecdsa384(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics<T>::Ecdsa521() const
{
	String value;
	check(shim()->get_Ecdsa521(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics2<T>::Ecdsa() const
{
	String value;
	check(shim()->get_Ecdsa(put(value)));
	return value;
}

template <typename T> String impl_IKeyAlgorithmNamesStatics2<T>::Ecdh() const
{
	String value;
	check(shim()->get_Ecdh(put(value)));
	return value;
}

template <typename T> String impl_IKeyStorageProviderNamesStatics<T>::SoftwareKeyStorageProvider() const
{
	String value;
	check(shim()->get_SoftwareKeyStorageProvider(put(value)));
	return value;
}

template <typename T> String impl_IKeyStorageProviderNamesStatics<T>::SmartcardKeyStorageProvider() const
{
	String value;
	check(shim()->get_SmartcardKeyStorageProvider(put(value)));
	return value;
}

template <typename T> String impl_IKeyStorageProviderNamesStatics<T>::PlatformKeyStorageProvider() const
{
	String value;
	check(shim()->get_PlatformKeyStorageProvider(put(value)));
	return value;
}

template <typename T> String impl_IKeyStorageProviderNamesStatics2<T>::PassportKeyStorageProvider() const
{
	String value;
	check(shim()->get_PassportKeyStorageProvider(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IChainBuildingParameters<T>::EnhancedKeyUsages() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_EnhancedKeyUsages(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IChainBuildingParameters<T>::ValidationTimestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_ValidationTimestamp(&value));
	return value;
}

template <typename T> void impl_IChainBuildingParameters<T>::ValidationTimestamp(Windows::Foundation::DateTime const & value) const
{
	check(shim()->put_ValidationTimestamp(value));
}

template <typename T> bool impl_IChainBuildingParameters<T>::RevocationCheckEnabled() const
{
	bool value = {};
	check(shim()->get_RevocationCheckEnabled(put(value)));
	return value;
}

template <typename T> void impl_IChainBuildingParameters<T>::RevocationCheckEnabled(bool const value) const
{
	check(shim()->put_RevocationCheckEnabled(value));
}

template <typename T> bool impl_IChainBuildingParameters<T>::NetworkRetrievalEnabled() const
{
	bool value = {};
	check(shim()->get_NetworkRetrievalEnabled(put(value)));
	return value;
}

template <typename T> void impl_IChainBuildingParameters<T>::NetworkRetrievalEnabled(bool const value) const
{
	check(shim()->put_NetworkRetrievalEnabled(value));
}

template <typename T> bool impl_IChainBuildingParameters<T>::AuthorityInformationAccessEnabled() const
{
	bool value = {};
	check(shim()->get_AuthorityInformationAccessEnabled(put(value)));
	return value;
}

template <typename T> void impl_IChainBuildingParameters<T>::AuthorityInformationAccessEnabled(bool const value) const
{
	check(shim()->put_AuthorityInformationAccessEnabled(value));
}

template <typename T> bool impl_IChainBuildingParameters<T>::CurrentTimeValidationEnabled() const
{
	bool value = {};
	check(shim()->get_CurrentTimeValidationEnabled(put(value)));
	return value;
}

template <typename T> void impl_IChainBuildingParameters<T>::CurrentTimeValidationEnabled(bool const value) const
{
	check(shim()->put_CurrentTimeValidationEnabled(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Security::Cryptography::Certificates::Certificate> impl_IChainBuildingParameters<T>::ExclusiveTrustRoots() const
{
	Windows::Foundation::Collections::IVector<Windows::Security::Cryptography::Certificates::Certificate> certificates;
	check(shim()->get_ExclusiveTrustRoots(put(certificates)));
	return certificates;
}

template <typename T> Windows::Security::Cryptography::Certificates::CertificateChainPolicy impl_IChainValidationParameters<T>::CertificateChainPolicy() const
{
	Windows::Security::Cryptography::Certificates::CertificateChainPolicy value = {};
	check(shim()->get_CertificateChainPolicy(&value));
	return value;
}

template <typename T> void impl_IChainValidationParameters<T>::CertificateChainPolicy(Windows::Security::Cryptography::Certificates::CertificateChainPolicy const value) const
{
	check(shim()->put_CertificateChainPolicy(value));
}

template <typename T> Windows::Networking::HostName impl_IChainValidationParameters<T>::ServerDnsName() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_ServerDnsName(put(value)));
	return value;
}

template <typename T> void impl_IChainValidationParameters<T>::ServerDnsName(Windows::Networking::HostName const & value) const
{
	check(shim()->put_ServerDnsName(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_ICertificateQuery<T>::EnhancedKeyUsages() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_EnhancedKeyUsages(put(value)));
	return value;
}

template <typename T> String impl_ICertificateQuery<T>::IssuerName() const
{
	String value;
	check(shim()->get_IssuerName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateQuery<T>::IssuerName(StringReference const & value) const
{
	check(shim()->put_IssuerName(get(value)));
}

template <typename T> String impl_ICertificateQuery<T>::FriendlyName() const
{
	String value;
	check(shim()->get_FriendlyName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateQuery<T>::FriendlyName(StringReference const & value) const
{
	check(shim()->put_FriendlyName(get(value)));
}

template <typename T> bool impl_ICertificateQuery<T>::HardwareOnly() const
{
	bool value = {};
	check(shim()->get_HardwareOnly(put(value)));
	return value;
}

template <typename T> void impl_ICertificateQuery<T>::HardwareOnly(bool const value) const
{
	check(shim()->put_HardwareOnly(value));
}

template <typename T> bool impl_ICertificateQuery2<T>::IncludeDuplicates() const
{
	bool value = {};
	check(shim()->get_IncludeDuplicates(put(value)));
	return value;
}

template <typename T> void impl_ICertificateQuery2<T>::IncludeDuplicates(bool const value) const
{
	check(shim()->put_IncludeDuplicates(value));
}

template <typename T> bool impl_ICertificateQuery2<T>::IncludeExpiredCertificates() const
{
	bool value = {};
	check(shim()->get_IncludeExpiredCertificates(put(value)));
	return value;
}

template <typename T> void impl_ICertificateQuery2<T>::IncludeExpiredCertificates(bool const value) const
{
	check(shim()->put_IncludeExpiredCertificates(value));
}

template <typename T> String impl_ICertificateQuery2<T>::StoreName() const
{
	String value;
	check(shim()->get_StoreName(put(value)));
	return value;
}

template <typename T> void impl_ICertificateQuery2<T>::StoreName(StringReference const & value) const
{
	check(shim()->put_StoreName(get(value)));
}

template <typename T> Windows::Security::Cryptography::Certificates::ChainValidationResult impl_ICertificateChain<T>::Validate() const
{
	Windows::Security::Cryptography::Certificates::ChainValidationResult status = {};
	check(shim()->abi_Validate(&status));
	return status;
}

template <typename T> Windows::Security::Cryptography::Certificates::ChainValidationResult impl_ICertificateChain<T>::Validate(Windows::Security::Cryptography::Certificates::ChainValidationParameters const & parameter) const
{
	Windows::Security::Cryptography::Certificates::ChainValidationResult status = {};
	check(shim()->abi_ValidateWithParameters(get(parameter), &status));
	return status;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_ICertificateChain<T>::GetCertificates(bool const includeRoot) const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> certificates;
	check(shim()->abi_GetCertificates(includeRoot, put(certificates)));
	return certificates;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> impl_ICertificate<T>::BuildChainAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> value;
	check(shim()->abi_BuildChainAsync(get(certificates), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> impl_ICertificate<T>::BuildChainAsync(Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates, Windows::Security::Cryptography::Certificates::ChainBuildingParameters const & parameters) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Certificates::CertificateChain> value;
	check(shim()->abi_BuildChainWithParametersAsync(get(certificates), get(parameters), put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICertificate<T>::GetCertificateBlob() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->abi_GetCertificateBlob(put(value)));
	return value;
}

template <typename T> String impl_ICertificate<T>::Subject() const
{
	String value;
	check(shim()->get_Subject(put(value)));
	return value;
}

template <typename T> String impl_ICertificate<T>::Issuer() const
{
	String value;
	check(shim()->get_Issuer(put(value)));
	return value;
}

template <typename T> bool impl_ICertificate<T>::HasPrivateKey() const
{
	bool value = {};
	check(shim()->get_HasPrivateKey(put(value)));
	return value;
}

template <typename T> bool impl_ICertificate<T>::IsStronglyProtected() const
{
	bool value = {};
	check(shim()->get_IsStronglyProtected(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ICertificate<T>::ValidFrom() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_ValidFrom(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ICertificate<T>::ValidTo() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_ValidTo(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ICertificate<T>::EnhancedKeyUsages() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_EnhancedKeyUsages(put(value)));
	return value;
}

template <typename T> void impl_ICertificate<T>::FriendlyName(StringReference const & value) const
{
	check(shim()->put_FriendlyName(get(value)));
}

template <typename T> String impl_ICertificate<T>::FriendlyName() const
{
	String value;
	check(shim()->get_FriendlyName(put(value)));
	return value;
}

template <typename T> bool impl_ICertificate2<T>::IsSecurityDeviceBound() const
{
	bool value = {};
	check(shim()->get_IsSecurityDeviceBound(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CertificateKeyUsages impl_ICertificate2<T>::KeyUsages() const
{
	Windows::Security::Cryptography::Certificates::CertificateKeyUsages value = nullptr;
	check(shim()->get_KeyUsages(put(value)));
	return value;
}

template <typename T> String impl_ICertificate2<T>::KeyAlgorithmName() const
{
	String value;
	check(shim()->get_KeyAlgorithmName(put(value)));
	return value;
}

template <typename T> String impl_ICertificate2<T>::SignatureAlgorithmName() const
{
	String value;
	check(shim()->get_SignatureAlgorithmName(put(value)));
	return value;
}

template <typename T> String impl_ICertificate2<T>::SignatureHashAlgorithmName() const
{
	String value;
	check(shim()->get_SignatureHashAlgorithmName(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::SubjectAlternativeNameInfo impl_ICertificate2<T>::SubjectAlternativeName() const
{
	Windows::Security::Cryptography::Certificates::SubjectAlternativeNameInfo value = nullptr;
	check(shim()->get_SubjectAlternativeName(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_ICertificateFactory<T>::CreateCertificate(Windows::Storage::Streams::IBuffer const & certBlob) const
{
	Windows::Security::Cryptography::Certificates::Certificate certificate = nullptr;
	check(shim()->abi_CreateCertificate(get(certBlob), put(certificate)));
	return certificate;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_ICmsTimestampInfo<T>::SigningCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check(shim()->get_SigningCertificate(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_ICmsTimestampInfo<T>::Certificates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value;
	check(shim()->get_Certificates(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ICmsTimestampInfo<T>::Timestamp() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_ICmsSignerInfo<T>::Certificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check(shim()->get_Certificate(put(value)));
	return value;
}

template <typename T> void impl_ICmsSignerInfo<T>::Certificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const
{
	check(shim()->put_Certificate(get(value)));
}

template <typename T> String impl_ICmsSignerInfo<T>::HashAlgorithmName() const
{
	String value;
	check(shim()->get_HashAlgorithmName(put(value)));
	return value;
}

template <typename T> void impl_ICmsSignerInfo<T>::HashAlgorithmName(StringReference const & value) const
{
	check(shim()->put_HashAlgorithmName(get(value)));
}

template <typename T> Windows::Security::Cryptography::Certificates::CmsTimestampInfo impl_ICmsSignerInfo<T>::TimestampInfo() const
{
	Windows::Security::Cryptography::Certificates::CmsTimestampInfo value = nullptr;
	check(shim()->get_TimestampInfo(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISubjectAlternativeNameInfo<T>::EmailName() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_EmailName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISubjectAlternativeNameInfo<T>::IPAddress() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_IPAddress(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISubjectAlternativeNameInfo<T>::Url() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_Url(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISubjectAlternativeNameInfo<T>::DnsName() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_DnsName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISubjectAlternativeNameInfo<T>::DistinguishedName() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_DistinguishedName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_ISubjectAlternativeNameInfo<T>::PrincipalName() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_PrincipalName(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::ExportOption impl_IPfxImportParameters<T>::Exportable() const
{
	Windows::Security::Cryptography::Certificates::ExportOption value = {};
	check(shim()->get_Exportable(&value));
	return value;
}

template <typename T> void impl_IPfxImportParameters<T>::Exportable(Windows::Security::Cryptography::Certificates::ExportOption const value) const
{
	check(shim()->put_Exportable(value));
}

template <typename T> Windows::Security::Cryptography::Certificates::KeyProtectionLevel impl_IPfxImportParameters<T>::KeyProtectionLevel() const
{
	Windows::Security::Cryptography::Certificates::KeyProtectionLevel value = {};
	check(shim()->get_KeyProtectionLevel(&value));
	return value;
}

template <typename T> void impl_IPfxImportParameters<T>::KeyProtectionLevel(Windows::Security::Cryptography::Certificates::KeyProtectionLevel const value) const
{
	check(shim()->put_KeyProtectionLevel(value));
}

template <typename T> Windows::Security::Cryptography::Certificates::InstallOptions impl_IPfxImportParameters<T>::InstallOptions() const
{
	Windows::Security::Cryptography::Certificates::InstallOptions value = {};
	check(shim()->get_InstallOptions(&value));
	return value;
}

template <typename T> void impl_IPfxImportParameters<T>::InstallOptions(Windows::Security::Cryptography::Certificates::InstallOptions const value) const
{
	check(shim()->put_InstallOptions(value));
}

template <typename T> String impl_IPfxImportParameters<T>::FriendlyName() const
{
	String value;
	check(shim()->get_FriendlyName(put(value)));
	return value;
}

template <typename T> void impl_IPfxImportParameters<T>::FriendlyName(StringReference const & value) const
{
	check(shim()->put_FriendlyName(get(value)));
}

template <typename T> String impl_IPfxImportParameters<T>::KeyStorageProviderName() const
{
	String value;
	check(shim()->get_KeyStorageProviderName(put(value)));
	return value;
}

template <typename T> void impl_IPfxImportParameters<T>::KeyStorageProviderName(StringReference const & value) const
{
	check(shim()->put_KeyStorageProviderName(get(value)));
}

template <typename T> String impl_IPfxImportParameters<T>::ContainerNamePrefix() const
{
	String value;
	check(shim()->get_ContainerNamePrefix(put(value)));
	return value;
}

template <typename T> void impl_IPfxImportParameters<T>::ContainerNamePrefix(StringReference const & value) const
{
	check(shim()->put_ContainerNamePrefix(get(value)));
}

template <typename T> String impl_IPfxImportParameters<T>::ReaderName() const
{
	String value;
	check(shim()->get_ReaderName(put(value)));
	return value;
}

template <typename T> void impl_IPfxImportParameters<T>::ReaderName(StringReference const & value) const
{
	check(shim()->put_ReaderName(get(value)));
}

template <typename T> bool impl_ICertificateKeyUsages<T>::EncipherOnly() const
{
	bool value = {};
	check(shim()->get_EncipherOnly(put(value)));
	return value;
}

template <typename T> void impl_ICertificateKeyUsages<T>::EncipherOnly(bool const value) const
{
	check(shim()->put_EncipherOnly(value));
}

template <typename T> bool impl_ICertificateKeyUsages<T>::CrlSign() const
{
	bool value = {};
	check(shim()->get_CrlSign(put(value)));
	return value;
}

template <typename T> void impl_ICertificateKeyUsages<T>::CrlSign(bool const value) const
{
	check(shim()->put_CrlSign(value));
}

template <typename T> bool impl_ICertificateKeyUsages<T>::KeyCertificateSign() const
{
	bool value = {};
	check(shim()->get_KeyCertificateSign(put(value)));
	return value;
}

template <typename T> void impl_ICertificateKeyUsages<T>::KeyCertificateSign(bool const value) const
{
	check(shim()->put_KeyCertificateSign(value));
}

template <typename T> bool impl_ICertificateKeyUsages<T>::KeyAgreement() const
{
	bool value = {};
	check(shim()->get_KeyAgreement(put(value)));
	return value;
}

template <typename T> void impl_ICertificateKeyUsages<T>::KeyAgreement(bool const value) const
{
	check(shim()->put_KeyAgreement(value));
}

template <typename T> bool impl_ICertificateKeyUsages<T>::DataEncipherment() const
{
	bool value = {};
	check(shim()->get_DataEncipherment(put(value)));
	return value;
}

template <typename T> void impl_ICertificateKeyUsages<T>::DataEncipherment(bool const value) const
{
	check(shim()->put_DataEncipherment(value));
}

template <typename T> bool impl_ICertificateKeyUsages<T>::KeyEncipherment() const
{
	bool value = {};
	check(shim()->get_KeyEncipherment(put(value)));
	return value;
}

template <typename T> void impl_ICertificateKeyUsages<T>::KeyEncipherment(bool const value) const
{
	check(shim()->put_KeyEncipherment(value));
}

template <typename T> bool impl_ICertificateKeyUsages<T>::NonRepudiation() const
{
	bool value = {};
	check(shim()->get_NonRepudiation(put(value)));
	return value;
}

template <typename T> void impl_ICertificateKeyUsages<T>::NonRepudiation(bool const value) const
{
	check(shim()->put_NonRepudiation(value));
}

template <typename T> bool impl_ICertificateKeyUsages<T>::DigitalSignature() const
{
	bool value = {};
	check(shim()->get_DigitalSignature(put(value)));
	return value;
}

template <typename T> void impl_ICertificateKeyUsages<T>::DigitalSignature(bool const value) const
{
	check(shim()->put_DigitalSignature(value));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_ICmsAttachedSignature<T>::Certificates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value;
	check(shim()->get_Certificates(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> impl_ICmsAttachedSignature<T>::Signers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> value;
	check(shim()->get_Signers(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::SignatureValidationResult impl_ICmsAttachedSignature<T>::VerifySignature() const
{
	Windows::Security::Cryptography::Certificates::SignatureValidationResult value = {};
	check(shim()->abi_VerifySignature(&value));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CmsAttachedSignature impl_ICmsAttachedSignatureFactory<T>::CreateCmsAttachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) const
{
	Windows::Security::Cryptography::Certificates::CmsAttachedSignature cmsSignedData = nullptr;
	check(shim()->abi_CreateCmsAttachedSignature(get(inputBlob), put(cmsSignedData)));
	return cmsSignedData;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ICmsAttachedSignatureStatics<T>::GenerateSignatureAsync(Windows::Storage::Streams::IBuffer const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> outputBlob;
	check(shim()->abi_GenerateSignatureAsync(get(data), get(signers), get(certificates), put(outputBlob)));
	return outputBlob;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_ICmsDetachedSignature<T>::Certificates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value;
	check(shim()->get_Certificates(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> impl_ICmsDetachedSignature<T>::Signers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::CmsSignerInfo> value;
	check(shim()->get_Signers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Security::Cryptography::Certificates::SignatureValidationResult> impl_ICmsDetachedSignature<T>::VerifySignatureAsync(Windows::Storage::Streams::IInputStream const & data) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::Cryptography::Certificates::SignatureValidationResult> value;
	check(shim()->abi_VerifySignatureAsync(get(data), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::CmsDetachedSignature impl_ICmsDetachedSignatureFactory<T>::CreateCmsDetachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) const
{
	Windows::Security::Cryptography::Certificates::CmsDetachedSignature cmsSignedData = nullptr;
	check(shim()->abi_CreateCmsDetachedSignature(get(inputBlob), put(cmsSignedData)));
	return cmsSignedData;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ICmsDetachedSignatureStatics<T>::GenerateSignatureAsync(Windows::Storage::Streams::IInputStream const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> outputBlob;
	check(shim()->abi_GenerateSignatureAsync(get(data), get(signers), get(certificates), put(outputBlob)));
	return outputBlob;
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

template <typename T> Windows::Storage::Streams::IBuffer impl_IKeyDerivationParameters<T>::KdfGenericBinary() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_KdfGenericBinary(put(value)));
	return value;
}

template <typename T> void impl_IKeyDerivationParameters<T>::KdfGenericBinary(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_KdfGenericBinary(get(value)));
}

template <typename T> unsigned impl_IKeyDerivationParameters<T>::IterationCount() const
{
	unsigned value = {};
	check(shim()->get_IterationCount(&value));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm impl_IKeyDerivationParameters2<T>::Capi1KdfTargetAlgorithm() const
{
	Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm value = {};
	check(shim()->get_Capi1KdfTargetAlgorithm(&value));
	return value;
}

template <typename T> void impl_IKeyDerivationParameters2<T>::Capi1KdfTargetAlgorithm(Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm const value) const
{
	check(shim()->put_Capi1KdfTargetAlgorithm(value));
}

template <typename T> Windows::Security::Cryptography::Core::KeyDerivationParameters impl_IKeyDerivationParametersStatics<T>::BuildForPbkdf2(Windows::Storage::Streams::IBuffer const & pbkdf2Salt, unsigned const iterationCount) const
{
	Windows::Security::Cryptography::Core::KeyDerivationParameters value = nullptr;
	check(shim()->abi_BuildForPbkdf2(get(pbkdf2Salt), iterationCount, put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::KeyDerivationParameters impl_IKeyDerivationParametersStatics<T>::BuildForSP800108(Windows::Storage::Streams::IBuffer const & label, Windows::Storage::Streams::IBuffer const & context) const
{
	Windows::Security::Cryptography::Core::KeyDerivationParameters value = nullptr;
	check(shim()->abi_BuildForSP800108(get(label), get(context), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::KeyDerivationParameters impl_IKeyDerivationParametersStatics<T>::BuildForSP80056a(Windows::Storage::Streams::IBuffer const & algorithmId, Windows::Storage::Streams::IBuffer const & partyUInfo, Windows::Storage::Streams::IBuffer const & partyVInfo, Windows::Storage::Streams::IBuffer const & suppPubInfo, Windows::Storage::Streams::IBuffer const & suppPrivInfo) const
{
	Windows::Security::Cryptography::Core::KeyDerivationParameters value = nullptr;
	check(shim()->abi_BuildForSP80056a(get(algorithmId), get(partyUInfo), get(partyVInfo), get(suppPubInfo), get(suppPrivInfo), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::KeyDerivationParameters impl_IKeyDerivationParametersStatics2<T>::BuildForCapi1Kdf(Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm const capi1KdfTargetAlgorithm) const
{
	Windows::Security::Cryptography::Core::KeyDerivationParameters value = nullptr;
	check(shim()->abi_BuildForCapi1Kdf(capi1KdfTargetAlgorithm, put(value)));
	return value;
}

template <typename T> unsigned impl_ICryptographicKey<T>::KeySize() const
{
	unsigned value = {};
	check(shim()->get_KeySize(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicKey<T>::Export() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->abi_ExportDefaultPrivateKeyBlobType(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicKey<T>::Export(Windows::Security::Cryptography::Core::CryptographicPrivateKeyBlobType const BlobType) const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->abi_ExportPrivateKeyWithBlobType(BlobType, put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicKey<T>::ExportPublicKey() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->abi_ExportDefaultPublicKeyBlobType(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicKey<T>::ExportPublicKey(Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType const BlobType) const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->abi_ExportPublicKeyWithBlobType(BlobType, put(value)));
	return value;
}

template <typename T> void impl_IHashComputation<T>::Append(Windows::Storage::Streams::IBuffer const & data) const
{
	check(shim()->abi_Append(get(data)));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHashComputation<T>::GetValueAndReset() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->abi_GetValueAndReset(put(value)));
	return value;
}

template <typename T> String impl_IHashAlgorithmProvider<T>::AlgorithmName() const
{
	String value;
	check(shim()->get_AlgorithmName(put(value)));
	return value;
}

template <typename T> unsigned impl_IHashAlgorithmProvider<T>::HashLength() const
{
	unsigned value = {};
	check(shim()->get_HashLength(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHashAlgorithmProvider<T>::HashData(Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->abi_HashData(get(data), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicHash impl_IHashAlgorithmProvider<T>::CreateHash() const
{
	Windows::Security::Cryptography::Core::CryptographicHash Value = nullptr;
	check(shim()->abi_CreateHash(put(Value)));
	return Value;
}

template <typename T> String impl_IMacAlgorithmProvider<T>::AlgorithmName() const
{
	String value;
	check(shim()->get_AlgorithmName(put(value)));
	return value;
}

template <typename T> unsigned impl_IMacAlgorithmProvider<T>::MacLength() const
{
	unsigned value = {};
	check(shim()->get_MacLength(&value));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IMacAlgorithmProvider<T>::CreateKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const
{
	Windows::Security::Cryptography::Core::CryptographicKey macKey = nullptr;
	check(shim()->abi_CreateKey(get(keyMaterial), put(macKey)));
	return macKey;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicHash impl_IMacAlgorithmProvider2<T>::CreateHash(Windows::Storage::Streams::IBuffer const & keyMaterial) const
{
	Windows::Security::Cryptography::Core::CryptographicHash value = nullptr;
	check(shim()->abi_CreateHash(get(keyMaterial), put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmProvider<T>::AlgorithmName() const
{
	String value;
	check(shim()->get_AlgorithmName(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IKeyDerivationAlgorithmProvider<T>::CreateKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check(shim()->abi_CreateKey(get(keyMaterial), put(key)));
	return key;
}

template <typename T> String impl_ISymmetricKeyAlgorithmProvider<T>::AlgorithmName() const
{
	String value;
	check(shim()->get_AlgorithmName(put(value)));
	return value;
}

template <typename T> unsigned impl_ISymmetricKeyAlgorithmProvider<T>::BlockLength() const
{
	unsigned value = {};
	check(shim()->get_BlockLength(&value));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_ISymmetricKeyAlgorithmProvider<T>::CreateSymmetricKey(Windows::Storage::Streams::IBuffer const & keyMaterial) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check(shim()->abi_CreateSymmetricKey(get(keyMaterial), put(key)));
	return key;
}

template <typename T> String impl_IAsymmetricKeyAlgorithmProvider<T>::AlgorithmName() const
{
	String value;
	check(shim()->get_AlgorithmName(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider<T>::CreateKeyPair(unsigned const keySize) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check(shim()->abi_CreateKeyPair(keySize, put(key)));
	return key;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider<T>::ImportKeyPair(Windows::Storage::Streams::IBuffer const & keyBlob) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check(shim()->abi_ImportDefaultPrivateKeyBlob(get(keyBlob), put(key)));
	return key;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider<T>::ImportKeyPair(Windows::Storage::Streams::IBuffer const & keyBlob, Windows::Security::Cryptography::Core::CryptographicPrivateKeyBlobType const BlobType) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check(shim()->abi_ImportKeyPairWithBlobType(get(keyBlob), BlobType, put(key)));
	return key;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider<T>::ImportPublicKey(Windows::Storage::Streams::IBuffer const & keyBlob) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check(shim()->abi_ImportDefaultPublicKeyBlob(get(keyBlob), put(key)));
	return key;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider<T>::ImportPublicKey(Windows::Storage::Streams::IBuffer const & keyBlob, Windows::Security::Cryptography::Core::CryptographicPublicKeyBlobType const BlobType) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check(shim()->abi_ImportPublicKeyWithBlobType(get(keyBlob), BlobType, put(key)));
	return key;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IAsymmetricKeyAlgorithmProvider2<T>::CreateKeyPairWithCurveName(StringReference const & curveName) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check(shim()->abi_CreateKeyPairWithCurveName(get(curveName), put(key)));
	return key;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> impl_IPersistedKeyProviderStatics<T>::OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, StringReference const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding const padding) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> operation;
	check(shim()->abi_OpenKeyPairFromCertificateAsync(get(certificate), get(hashAlgorithmName), padding, put(operation)));
	return operation;
}

template <typename T> Windows::Security::Cryptography::Core::CryptographicKey impl_IPersistedKeyProviderStatics<T>::OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, StringReference const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding const padding) const
{
	Windows::Security::Cryptography::Core::CryptographicKey key = nullptr;
	check(shim()->abi_OpenPublicKeyFromCertificate(get(certificate), get(hashAlgorithmName), padding, put(key)));
	return key;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IEncryptedAndAuthenticatedData<T>::EncryptedData() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_EncryptedData(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IEncryptedAndAuthenticatedData<T>::AuthenticationTag() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_AuthenticationTag(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics<T>::Encrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->abi_Encrypt(get(key), get(data), get(iv), put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics<T>::Decrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->abi_Decrypt(get(key), get(data), get(iv), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData impl_ICryptographicEngineStatics<T>::EncryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticatedData) const
{
	Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData value = nullptr;
	check(shim()->abi_EncryptAndAuthenticate(get(key), get(data), get(nonce), get(authenticatedData), put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics<T>::DecryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticationTag, Windows::Storage::Streams::IBuffer const & authenticatedData) const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->abi_DecryptAndAuthenticate(get(key), get(data), get(nonce), get(authenticationTag), get(authenticatedData), put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics<T>::Sign(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->abi_Sign(get(key), get(data), put(value)));
	return value;
}

template <typename T> bool impl_ICryptographicEngineStatics<T>::VerifySignature(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature) const
{
	bool isAuthenticated = {};
	check(shim()->abi_VerifySignature(get(key), get(data), get(signature), put(isAuthenticated)));
	return isAuthenticated;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics<T>::DeriveKeyMaterial(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Security::Cryptography::Core::KeyDerivationParameters const & parameters, unsigned const desiredKeySize) const
{
	Windows::Storage::Streams::IBuffer keyMaterial;
	check(shim()->abi_DeriveKeyMaterial(get(key), get(parameters), desiredKeySize, put(keyMaterial)));
	return keyMaterial;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_ICryptographicEngineStatics2<T>::SignHashedData(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->abi_SignHashedData(get(key), get(data), put(value)));
	return value;
}

template <typename T> bool impl_ICryptographicEngineStatics2<T>::VerifySignatureWithHashInput(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature) const
{
	bool isAuthenticated = {};
	check(shim()->abi_VerifySignatureWithHashInput(get(key), get(data), get(signature), put(isAuthenticated)));
	return isAuthenticated;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ICryptographicEngineStatics2<T>::DecryptAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> value;
	check(shim()->abi_DecryptAsync(get(key), get(data), get(iv), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ICryptographicEngineStatics2<T>::SignAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> value;
	check(shim()->abi_SignAsync(get(key), get(data), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_ICryptographicEngineStatics2<T>::SignHashedDataAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> value;
	check(shim()->abi_SignHashedDataAsync(get(key), get(data), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Core::HashAlgorithmProvider impl_IHashAlgorithmProviderStatics<T>::OpenAlgorithm(StringReference const & algorithm) const
{
	Windows::Security::Cryptography::Core::HashAlgorithmProvider provider = nullptr;
	check(shim()->abi_OpenAlgorithm(get(algorithm), put(provider)));
	return provider;
}

template <typename T> Windows::Security::Cryptography::Core::MacAlgorithmProvider impl_IMacAlgorithmProviderStatics<T>::OpenAlgorithm(StringReference const & algorithm) const
{
	Windows::Security::Cryptography::Core::MacAlgorithmProvider provider = nullptr;
	check(shim()->abi_OpenAlgorithm(get(algorithm), put(provider)));
	return provider;
}

template <typename T> Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider impl_IKeyDerivationAlgorithmProviderStatics<T>::OpenAlgorithm(StringReference const & algorithm) const
{
	Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider provider = nullptr;
	check(shim()->abi_OpenAlgorithm(get(algorithm), put(provider)));
	return provider;
}

template <typename T> Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider impl_ISymmetricKeyAlgorithmProviderStatics<T>::OpenAlgorithm(StringReference const & algorithm) const
{
	Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider provider = nullptr;
	check(shim()->abi_OpenAlgorithm(get(algorithm), put(provider)));
	return provider;
}

template <typename T> Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider impl_IAsymmetricKeyAlgorithmProviderStatics<T>::OpenAlgorithm(StringReference const & algorithm) const
{
	Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider provider = nullptr;
	check(shim()->abi_OpenAlgorithm(get(algorithm), put(provider)));
	return provider;
}

template <typename T> String impl_IHashAlgorithmNamesStatics<T>::Md5() const
{
	String value;
	check(shim()->get_Md5(put(value)));
	return value;
}

template <typename T> String impl_IHashAlgorithmNamesStatics<T>::Sha1() const
{
	String value;
	check(shim()->get_Sha1(put(value)));
	return value;
}

template <typename T> String impl_IHashAlgorithmNamesStatics<T>::Sha256() const
{
	String value;
	check(shim()->get_Sha256(put(value)));
	return value;
}

template <typename T> String impl_IHashAlgorithmNamesStatics<T>::Sha384() const
{
	String value;
	check(shim()->get_Sha384(put(value)));
	return value;
}

template <typename T> String impl_IHashAlgorithmNamesStatics<T>::Sha512() const
{
	String value;
	check(shim()->get_Sha512(put(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::HmacMd5() const
{
	String value;
	check(shim()->get_HmacMd5(put(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::HmacSha1() const
{
	String value;
	check(shim()->get_HmacSha1(put(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::HmacSha256() const
{
	String value;
	check(shim()->get_HmacSha256(put(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::HmacSha384() const
{
	String value;
	check(shim()->get_HmacSha384(put(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::HmacSha512() const
{
	String value;
	check(shim()->get_HmacSha512(put(value)));
	return value;
}

template <typename T> String impl_IMacAlgorithmNamesStatics<T>::AesCmac() const
{
	String value;
	check(shim()->get_AesCmac(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::DesCbc() const
{
	String value;
	check(shim()->get_DesCbc(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::DesEcb() const
{
	String value;
	check(shim()->get_DesEcb(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::TripleDesCbc() const
{
	String value;
	check(shim()->get_TripleDesCbc(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::TripleDesEcb() const
{
	String value;
	check(shim()->get_TripleDesEcb(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::Rc2Cbc() const
{
	String value;
	check(shim()->get_Rc2Cbc(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::Rc2Ecb() const
{
	String value;
	check(shim()->get_Rc2Ecb(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesCbc() const
{
	String value;
	check(shim()->get_AesCbc(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesEcb() const
{
	String value;
	check(shim()->get_AesEcb(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesGcm() const
{
	String value;
	check(shim()->get_AesGcm(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesCcm() const
{
	String value;
	check(shim()->get_AesCcm(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesCbcPkcs7() const
{
	String value;
	check(shim()->get_AesCbcPkcs7(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::AesEcbPkcs7() const
{
	String value;
	check(shim()->get_AesEcbPkcs7(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::DesCbcPkcs7() const
{
	String value;
	check(shim()->get_DesCbcPkcs7(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::DesEcbPkcs7() const
{
	String value;
	check(shim()->get_DesEcbPkcs7(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::TripleDesCbcPkcs7() const
{
	String value;
	check(shim()->get_TripleDesCbcPkcs7(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::TripleDesEcbPkcs7() const
{
	String value;
	check(shim()->get_TripleDesEcbPkcs7(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::Rc2CbcPkcs7() const
{
	String value;
	check(shim()->get_Rc2CbcPkcs7(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::Rc2EcbPkcs7() const
{
	String value;
	check(shim()->get_Rc2EcbPkcs7(put(value)));
	return value;
}

template <typename T> String impl_ISymmetricAlgorithmNamesStatics<T>::Rc4() const
{
	String value;
	check(shim()->get_Rc4(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaPkcs1() const
{
	String value;
	check(shim()->get_RsaPkcs1(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaOaepSha1() const
{
	String value;
	check(shim()->get_RsaOaepSha1(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaOaepSha256() const
{
	String value;
	check(shim()->get_RsaOaepSha256(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaOaepSha384() const
{
	String value;
	check(shim()->get_RsaOaepSha384(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaOaepSha512() const
{
	String value;
	check(shim()->get_RsaOaepSha512(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::EcdsaP256Sha256() const
{
	String value;
	check(shim()->get_EcdsaP256Sha256(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::EcdsaP384Sha384() const
{
	String value;
	check(shim()->get_EcdsaP384Sha384(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::EcdsaP521Sha512() const
{
	String value;
	check(shim()->get_EcdsaP521Sha512(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::DsaSha1() const
{
	String value;
	check(shim()->get_DsaSha1(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::DsaSha256() const
{
	String value;
	check(shim()->get_DsaSha256(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPkcs1Sha1() const
{
	String value;
	check(shim()->get_RsaSignPkcs1Sha1(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPkcs1Sha256() const
{
	String value;
	check(shim()->get_RsaSignPkcs1Sha256(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPkcs1Sha384() const
{
	String value;
	check(shim()->get_RsaSignPkcs1Sha384(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPkcs1Sha512() const
{
	String value;
	check(shim()->get_RsaSignPkcs1Sha512(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPssSha1() const
{
	String value;
	check(shim()->get_RsaSignPssSha1(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPssSha256() const
{
	String value;
	check(shim()->get_RsaSignPssSha256(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPssSha384() const
{
	String value;
	check(shim()->get_RsaSignPssSha384(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics<T>::RsaSignPssSha512() const
{
	String value;
	check(shim()->get_RsaSignPssSha512(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics2<T>::EcdsaSha256() const
{
	String value;
	check(shim()->get_EcdsaSha256(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics2<T>::EcdsaSha384() const
{
	String value;
	check(shim()->get_EcdsaSha384(put(value)));
	return value;
}

template <typename T> String impl_IAsymmetricAlgorithmNamesStatics2<T>::EcdsaSha512() const
{
	String value;
	check(shim()->get_EcdsaSha512(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP160r1() const
{
	String value;
	check(shim()->get_BrainpoolP160r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP160t1() const
{
	String value;
	check(shim()->get_BrainpoolP160t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP192r1() const
{
	String value;
	check(shim()->get_BrainpoolP192r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP192t1() const
{
	String value;
	check(shim()->get_BrainpoolP192t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP224r1() const
{
	String value;
	check(shim()->get_BrainpoolP224r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP224t1() const
{
	String value;
	check(shim()->get_BrainpoolP224t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP256r1() const
{
	String value;
	check(shim()->get_BrainpoolP256r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP256t1() const
{
	String value;
	check(shim()->get_BrainpoolP256t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP320r1() const
{
	String value;
	check(shim()->get_BrainpoolP320r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP320t1() const
{
	String value;
	check(shim()->get_BrainpoolP320t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP384r1() const
{
	String value;
	check(shim()->get_BrainpoolP384r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP384t1() const
{
	String value;
	check(shim()->get_BrainpoolP384t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP512r1() const
{
	String value;
	check(shim()->get_BrainpoolP512r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::BrainpoolP512t1() const
{
	String value;
	check(shim()->get_BrainpoolP512t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::Curve25519() const
{
	String value;
	check(shim()->get_Curve25519(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::Ec192wapi() const
{
	String value;
	check(shim()->get_Ec192wapi(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::NistP192() const
{
	String value;
	check(shim()->get_NistP192(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::NistP224() const
{
	String value;
	check(shim()->get_NistP224(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::NistP256() const
{
	String value;
	check(shim()->get_NistP256(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::NistP384() const
{
	String value;
	check(shim()->get_NistP384(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::NistP521() const
{
	String value;
	check(shim()->get_NistP521(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::NumsP256t1() const
{
	String value;
	check(shim()->get_NumsP256t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::NumsP384t1() const
{
	String value;
	check(shim()->get_NumsP384t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::NumsP512t1() const
{
	String value;
	check(shim()->get_NumsP512t1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP160k1() const
{
	String value;
	check(shim()->get_SecP160k1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP160r1() const
{
	String value;
	check(shim()->get_SecP160r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP160r2() const
{
	String value;
	check(shim()->get_SecP160r2(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP192k1() const
{
	String value;
	check(shim()->get_SecP192k1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP192r1() const
{
	String value;
	check(shim()->get_SecP192r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP224k1() const
{
	String value;
	check(shim()->get_SecP224k1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP224r1() const
{
	String value;
	check(shim()->get_SecP224r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP256k1() const
{
	String value;
	check(shim()->get_SecP256k1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP256r1() const
{
	String value;
	check(shim()->get_SecP256r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP384r1() const
{
	String value;
	check(shim()->get_SecP384r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::SecP521r1() const
{
	String value;
	check(shim()->get_SecP521r1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::Wtls7() const
{
	String value;
	check(shim()->get_Wtls7(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::Wtls9() const
{
	String value;
	check(shim()->get_Wtls9(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::Wtls12() const
{
	String value;
	check(shim()->get_Wtls12(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::X962P192v1() const
{
	String value;
	check(shim()->get_X962P192v1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::X962P192v2() const
{
	String value;
	check(shim()->get_X962P192v2(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::X962P192v3() const
{
	String value;
	check(shim()->get_X962P192v3(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::X962P239v1() const
{
	String value;
	check(shim()->get_X962P239v1(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::X962P239v2() const
{
	String value;
	check(shim()->get_X962P239v2(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::X962P239v3() const
{
	String value;
	check(shim()->get_X962P239v3(put(value)));
	return value;
}

template <typename T> String impl_IEccCurveNamesStatics<T>::X962P256v1() const
{
	String value;
	check(shim()->get_X962P256v1(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IEccCurveNamesStatics<T>::AllEccCurveNames() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_AllEccCurveNames(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Pbkdf2Md5() const
{
	String value;
	check(shim()->get_Pbkdf2Md5(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Pbkdf2Sha1() const
{
	String value;
	check(shim()->get_Pbkdf2Sha1(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Pbkdf2Sha256() const
{
	String value;
	check(shim()->get_Pbkdf2Sha256(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Pbkdf2Sha384() const
{
	String value;
	check(shim()->get_Pbkdf2Sha384(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Pbkdf2Sha512() const
{
	String value;
	check(shim()->get_Pbkdf2Sha512(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp800108CtrHmacMd5() const
{
	String value;
	check(shim()->get_Sp800108CtrHmacMd5(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp800108CtrHmacSha1() const
{
	String value;
	check(shim()->get_Sp800108CtrHmacSha1(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp800108CtrHmacSha256() const
{
	String value;
	check(shim()->get_Sp800108CtrHmacSha256(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp800108CtrHmacSha384() const
{
	String value;
	check(shim()->get_Sp800108CtrHmacSha384(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp800108CtrHmacSha512() const
{
	String value;
	check(shim()->get_Sp800108CtrHmacSha512(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp80056aConcatMd5() const
{
	String value;
	check(shim()->get_Sp80056aConcatMd5(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp80056aConcatSha1() const
{
	String value;
	check(shim()->get_Sp80056aConcatSha1(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp80056aConcatSha256() const
{
	String value;
	check(shim()->get_Sp80056aConcatSha256(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp80056aConcatSha384() const
{
	String value;
	check(shim()->get_Sp80056aConcatSha384(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics<T>::Sp80056aConcatSha512() const
{
	String value;
	check(shim()->get_Sp80056aConcatSha512(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics2<T>::CapiKdfMd5() const
{
	String value;
	check(shim()->get_CapiKdfMd5(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics2<T>::CapiKdfSha1() const
{
	String value;
	check(shim()->get_CapiKdfSha1(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics2<T>::CapiKdfSha256() const
{
	String value;
	check(shim()->get_CapiKdfSha256(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics2<T>::CapiKdfSha384() const
{
	String value;
	check(shim()->get_CapiKdfSha384(put(value)));
	return value;
}

template <typename T> String impl_IKeyDerivationAlgorithmNamesStatics2<T>::CapiKdfSha512() const
{
	String value;
	check(shim()->get_CapiKdfSha512(put(value)));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace DataProtection {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IDataProtectionProvider<T>::ProtectAsync(Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> value;
	check(shim()->abi_ProtectAsync(get(data), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IDataProtectionProvider<T>::UnprotectAsync(Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> value;
	check(shim()->abi_UnprotectAsync(get(data), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDataProtectionProvider<T>::ProtectStreamAsync(Windows::Storage::Streams::IInputStream const & src, Windows::Storage::Streams::IOutputStream const & dest) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_ProtectStreamAsync(get(src), get(dest), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IDataProtectionProvider<T>::UnprotectStreamAsync(Windows::Storage::Streams::IInputStream const & src, Windows::Storage::Streams::IOutputStream const & dest) const
{
	Windows::Foundation::IAsyncAction value;
	check(shim()->abi_UnprotectStreamAsync(get(src), get(dest), put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::DataProtection::DataProtectionProvider impl_IDataProtectionProviderFactory<T>::CreateOverloadExplicit(StringReference const & protectionDescriptor) const
{
	Windows::Security::Cryptography::DataProtection::DataProtectionProvider value = nullptr;
	check(shim()->abi_CreateOverloadExplicit(get(protectionDescriptor), put(value)));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace EnterpriseData {

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::FileProtectionStatus> impl_IFileRevocationManagerStatics<T>::ProtectAsync(Windows::Storage::IStorageItem const & storageItem, StringReference const & enterpriseIdentity) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::FileProtectionStatus> result;
	check(shim()->abi_ProtectAsync(get(storageItem), get(enterpriseIdentity), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IFileRevocationManagerStatics<T>::CopyProtectionAsync(Windows::Storage::IStorageItem const & sourceStorageItem, Windows::Storage::IStorageItem const & targetStorageItem) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_CopyProtectionAsync(get(sourceStorageItem), get(targetStorageItem), put(result)));
	return result;
}

template <typename T> void impl_IFileRevocationManagerStatics<T>::Revoke(StringReference const & enterpriseIdentity) const
{
	check(shim()->abi_Revoke(get(enterpriseIdentity)));
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::FileProtectionStatus> impl_IFileRevocationManagerStatics<T>::GetStatusAsync(Windows::Storage::IStorageItem const & storageItem) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::FileProtectionStatus> result;
	check(shim()->abi_GetStatusAsync(get(storageItem), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::FileProtectionInfo> impl_IFileProtectionManagerStatics<T>::ProtectAsync(Windows::Storage::IStorageItem const & target, StringReference const & identity) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::FileProtectionInfo> result;
	check(shim()->abi_ProtectAsync(get(target), get(identity), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IFileProtectionManagerStatics<T>::CopyProtectionAsync(Windows::Storage::IStorageItem const & source, Windows::Storage::IStorageItem const & target) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_CopyProtectionAsync(get(source), get(target), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::FileProtectionInfo> impl_IFileProtectionManagerStatics<T>::GetProtectionInfoAsync(Windows::Storage::IStorageItem const & source) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::FileProtectionInfo> result;
	check(shim()->abi_GetProtectionInfoAsync(get(source), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerExportResult> impl_IFileProtectionManagerStatics<T>::SaveFileAsContainerAsync(Windows::Storage::IStorageFile const & protectedFile) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerExportResult> result;
	check(shim()->abi_SaveFileAsContainerAsync(get(protectedFile), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> impl_IFileProtectionManagerStatics<T>::LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> result;
	check(shim()->abi_LoadFileFromContainerAsync(get(containerFile), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> impl_IFileProtectionManagerStatics<T>::LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile, Windows::Storage::IStorageItem const & target) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> result;
	check(shim()->abi_LoadFileFromContainerWithTargetAsync(get(containerFile), get(target), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedFileCreateResult> impl_IFileProtectionManagerStatics<T>::CreateProtectedAndOpenAsync(Windows::Storage::IStorageFolder const & parentFolder, StringReference const & desiredName, StringReference const & identity, Windows::Storage::CreationCollisionOption const collisionOption) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedFileCreateResult> result;
	check(shim()->abi_CreateProtectedAndOpenAsync(get(parentFolder), get(desiredName), get(identity), collisionOption, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IFileProtectionManagerStatics2<T>::IsContainerAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<bool> result;
	check(shim()->abi_IsContainerAsync(get(file), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> impl_IFileProtectionManagerStatics2<T>::LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile, Windows::Storage::IStorageItem const & target, Windows::Storage::NameCollisionOption const collisionOption) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> result;
	check(shim()->abi_LoadFileFromContainerWithTargetAndNameCollisionOptionAsync(get(containerFile), get(target), collisionOption, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerExportResult> impl_IFileProtectionManagerStatics2<T>::SaveFileAsContainerAsync(Windows::Storage::IStorageFile const & protectedFile, Windows::Foundation::Collections::IIterable<String> const & sharedWithIdentities) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerExportResult> result;
	check(shim()->abi_SaveFileAsContainerWithSharingAsync(get(protectedFile), get(sharedWithIdentities), put(result)));
	return result;
}

template <typename T> Windows::Storage::StorageFile impl_IProtectedFileCreateResult<T>::File() const
{
	Windows::Storage::StorageFile value = nullptr;
	check(shim()->get_File(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_IProtectedFileCreateResult<T>::Stream() const
{
	Windows::Storage::Streams::IRandomAccessStream value;
	check(shim()->get_Stream(put(value)));
	return value;
}

template <typename T> Windows::Security::EnterpriseData::FileProtectionInfo impl_IProtectedFileCreateResult<T>::ProtectionInfo() const
{
	Windows::Security::EnterpriseData::FileProtectionInfo value = nullptr;
	check(shim()->get_ProtectionInfo(put(value)));
	return value;
}

template <typename T> Windows::Security::EnterpriseData::FileProtectionStatus impl_IFileProtectionInfo<T>::Status() const
{
	Windows::Security::EnterpriseData::FileProtectionStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> bool impl_IFileProtectionInfo<T>::IsRoamable() const
{
	bool value = {};
	check(shim()->get_IsRoamable(put(value)));
	return value;
}

template <typename T> String impl_IFileProtectionInfo<T>::Identity() const
{
	String value;
	check(shim()->get_Identity(put(value)));
	return value;
}

template <typename T> Windows::Security::EnterpriseData::ProtectedImportExportStatus impl_IProtectedContainerExportResult<T>::Status() const
{
	Windows::Security::EnterpriseData::ProtectedImportExportStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Storage::StorageFile impl_IProtectedContainerExportResult<T>::File() const
{
	Windows::Storage::StorageFile value = nullptr;
	check(shim()->get_File(put(value)));
	return value;
}

template <typename T> Windows::Security::EnterpriseData::ProtectedImportExportStatus impl_IProtectedContainerImportResult<T>::Status() const
{
	Windows::Security::EnterpriseData::ProtectedImportExportStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Storage::StorageFile impl_IProtectedContainerImportResult<T>::File() const
{
	Windows::Storage::StorageFile value = nullptr;
	check(shim()->get_File(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::BufferProtectUnprotectResult> impl_IDataProtectionManagerStatics<T>::ProtectAsync(Windows::Storage::Streams::IBuffer const & data, StringReference const & identity) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::BufferProtectUnprotectResult> result;
	check(shim()->abi_ProtectAsync(get(data), get(identity), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::BufferProtectUnprotectResult> impl_IDataProtectionManagerStatics<T>::UnprotectAsync(Windows::Storage::Streams::IBuffer const & data) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::BufferProtectUnprotectResult> result;
	check(shim()->abi_UnprotectAsync(get(data), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> impl_IDataProtectionManagerStatics<T>::ProtectStreamAsync(Windows::Storage::Streams::IInputStream const & unprotectedStream, StringReference const & identity, Windows::Storage::Streams::IOutputStream const & protectedStream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> result;
	check(shim()->abi_ProtectStreamAsync(get(unprotectedStream), get(identity), get(protectedStream), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> impl_IDataProtectionManagerStatics<T>::UnprotectStreamAsync(Windows::Storage::Streams::IInputStream const & protectedStream, Windows::Storage::Streams::IOutputStream const & unprotectedStream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> result;
	check(shim()->abi_UnprotectStreamAsync(get(protectedStream), get(unprotectedStream), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> impl_IDataProtectionManagerStatics<T>::GetProtectionInfoAsync(Windows::Storage::Streams::IBuffer const & protectedData) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> result;
	check(shim()->abi_GetProtectionInfoAsync(get(protectedData), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> impl_IDataProtectionManagerStatics<T>::GetStreamProtectionInfoAsync(Windows::Storage::Streams::IInputStream const & protectedStream) const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> result;
	check(shim()->abi_GetStreamProtectionInfoAsync(get(protectedStream), put(result)));
	return result;
}

template <typename T> Windows::Security::EnterpriseData::DataProtectionStatus impl_IDataProtectionInfo<T>::Status() const
{
	Windows::Security::EnterpriseData::DataProtectionStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> String impl_IDataProtectionInfo<T>::Identity() const
{
	String value;
	check(shim()->get_Identity(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IBufferProtectUnprotectResult<T>::Buffer() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Buffer(put(value)));
	return value;
}

template <typename T> Windows::Security::EnterpriseData::DataProtectionInfo impl_IBufferProtectUnprotectResult<T>::ProtectionInfo() const
{
	Windows::Security::EnterpriseData::DataProtectionInfo value = nullptr;
	check(shim()->get_ProtectionInfo(put(value)));
	return value;
}

template <typename T> void impl_IProtectionPolicyManager<T>::Identity(StringReference const & value) const
{
	check(shim()->put_Identity(get(value)));
}

template <typename T> String impl_IProtectionPolicyManager<T>::Identity() const
{
	String value;
	check(shim()->get_Identity(put(value)));
	return value;
}

template <typename T> bool impl_IProtectionPolicyManagerStatics<T>::IsIdentityManaged(StringReference const & identity) const
{
	bool result = {};
	check(shim()->abi_IsIdentityManaged(get(identity), put(result)));
	return result;
}

template <typename T> bool impl_IProtectionPolicyManagerStatics<T>::TryApplyProcessUIPolicy(StringReference const & identity) const
{
	bool result = {};
	check(shim()->abi_TryApplyProcessUIPolicy(get(identity), put(result)));
	return result;
}

template <typename T> void impl_IProtectionPolicyManagerStatics<T>::ClearProcessUIPolicy() const
{
	check(shim()->abi_ClearProcessUIPolicy());
}

template <typename T> Windows::Security::EnterpriseData::ThreadNetworkContext impl_IProtectionPolicyManagerStatics<T>::CreateCurrentThreadNetworkContext(StringReference const & identity) const
{
	Windows::Security::EnterpriseData::ThreadNetworkContext result = nullptr;
	check(shim()->abi_CreateCurrentThreadNetworkContext(get(identity), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IProtectionPolicyManagerStatics<T>::GetPrimaryManagedIdentityForNetworkEndpointAsync(Windows::Networking::HostName const & endpointHost) const
{
	Windows::Foundation::IAsyncOperation<String> result;
	check(shim()->abi_GetPrimaryManagedIdentityForNetworkEndpointAsync(get(endpointHost), put(result)));
	return result;
}

template <typename T> void impl_IProtectionPolicyManagerStatics<T>::RevokeContent(StringReference const & identity) const
{
	check(shim()->abi_RevokeContent(get(identity)));
}

template <typename T> Windows::Security::EnterpriseData::ProtectionPolicyManager impl_IProtectionPolicyManagerStatics<T>::GetForCurrentView() const
{
	Windows::Security::EnterpriseData::ProtectionPolicyManager result = nullptr;
	check(shim()->abi_GetForCurrentView(put(result)));
	return result;
}

template <typename T> long long impl_IProtectionPolicyManagerStatics<T>::ProtectedAccessSuspending(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ProtectedAccessSuspending(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IProtectionPolicyManagerStatics<T>::ProtectedAccessSuspending(F handler) const
{
	return ProtectedAccessSuspending(Windows::Foundation::EventHandler<Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs>(handler));
}

template <typename T> void impl_IProtectionPolicyManagerStatics<T>::ProtectedAccessSuspending(long long const token) const
{
	check(shim()->remove_ProtectedAccessSuspending(token));
}

template <typename T> long long impl_IProtectionPolicyManagerStatics<T>::ProtectedAccessResumed(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ProtectedAccessResumed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IProtectionPolicyManagerStatics<T>::ProtectedAccessResumed(F handler) const
{
	return ProtectedAccessResumed(Windows::Foundation::EventHandler<Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs>(handler));
}

template <typename T> void impl_IProtectionPolicyManagerStatics<T>::ProtectedAccessResumed(long long const token) const
{
	check(shim()->remove_ProtectedAccessResumed(token));
}

template <typename T> long long impl_IProtectionPolicyManagerStatics<T>::ProtectedContentRevoked(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ProtectedContentRevoked(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IProtectionPolicyManagerStatics<T>::ProtectedContentRevoked(F handler) const
{
	return ProtectedContentRevoked(Windows::Foundation::EventHandler<Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs>(handler));
}

template <typename T> void impl_IProtectionPolicyManagerStatics<T>::ProtectedContentRevoked(long long const token) const
{
	check(shim()->remove_ProtectedContentRevoked(token));
}

template <typename T> Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult impl_IProtectionPolicyManagerStatics<T>::CheckAccess(StringReference const & sourceIdentity, StringReference const & targetIdentity) const
{
	Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult result = {};
	check(shim()->abi_CheckAccess(get(sourceIdentity), get(targetIdentity), &result));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> impl_IProtectionPolicyManagerStatics<T>::RequestAccessAsync(StringReference const & sourceIdentity, StringReference const & targetIdentity) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> result;
	check(shim()->abi_RequestAccessAsync(get(sourceIdentity), get(targetIdentity), put(result)));
	return result;
}

template <typename T> bool impl_IProtectionPolicyManagerStatics2<T>::HasContentBeenRevokedSince(StringReference const & identity, Windows::Foundation::DateTime const & since) const
{
	bool result = {};
	check(shim()->abi_HasContentBeenRevokedSince(get(identity), since, put(result)));
	return result;
}

template <typename T> Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult impl_IProtectionPolicyManagerStatics2<T>::CheckAccessForApp(StringReference const & sourceIdentity, StringReference const & appPackageFamilyName) const
{
	Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult result = {};
	check(shim()->abi_CheckAccessForApp(get(sourceIdentity), get(appPackageFamilyName), &result));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> impl_IProtectionPolicyManagerStatics2<T>::RequestAccessForAppAsync(StringReference const & sourceIdentity, StringReference const & appPackageFamilyName) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> result;
	check(shim()->abi_RequestAccessForAppAsync(get(sourceIdentity), get(appPackageFamilyName), put(result)));
	return result;
}

template <typename T> Windows::Security::EnterpriseData::EnforcementLevel impl_IProtectionPolicyManagerStatics2<T>::GetEnforcementLevel(StringReference const & identity) const
{
	Windows::Security::EnterpriseData::EnforcementLevel value = {};
	check(shim()->abi_GetEnforcementLevel(get(identity), &value));
	return value;
}

template <typename T> bool impl_IProtectionPolicyManagerStatics2<T>::IsUserDecryptionAllowed(StringReference const & identity) const
{
	bool value = {};
	check(shim()->abi_IsUserDecryptionAllowed(get(identity), put(value)));
	return value;
}

template <typename T> bool impl_IProtectionPolicyManagerStatics2<T>::IsProtectionUnderLockRequired(StringReference const & identity) const
{
	bool value = {};
	check(shim()->abi_IsProtectionUnderLockRequired(get(identity), put(value)));
	return value;
}

template <typename T> long long impl_IProtectionPolicyManagerStatics2<T>::PolicyChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_PolicyChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IProtectionPolicyManagerStatics2<T>::PolicyChanged(F handler) const
{
	return PolicyChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IProtectionPolicyManagerStatics2<T>::PolicyChanged(long long const token) const
{
	check(shim()->remove_PolicyChanged(token));
}

template <typename T> bool impl_IProtectionPolicyManagerStatics2<T>::IsProtectionEnabled() const
{
	bool value = {};
	check(shim()->get_IsProtectionEnabled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IProtectedAccessSuspendingEventArgs<T>::Identities() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_Identities(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IProtectedAccessSuspendingEventArgs<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Deadline(&value));
	return value;
}

template <typename T> Windows::Foundation::Deferral impl_IProtectedAccessSuspendingEventArgs<T>::GetDeferral() const
{
	Windows::Foundation::Deferral result = nullptr;
	check(shim()->abi_GetDeferral(put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IProtectedAccessResumedEventArgs<T>::Identities() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_Identities(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IProtectedContentRevokedEventArgs<T>::Identities() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_Identities(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Security { namespace ExchangeActiveSyncProvisioning {

template <typename T> bool impl_IEasClientSecurityPolicy<T>::RequireEncryption() const
{
	bool value = {};
	check(shim()->get_RequireEncryption(put(value)));
	return value;
}

template <typename T> void impl_IEasClientSecurityPolicy<T>::RequireEncryption(bool const value) const
{
	check(shim()->put_RequireEncryption(value));
}

template <typename T> byte impl_IEasClientSecurityPolicy<T>::MinPasswordLength() const
{
	byte value = {};
	check(shim()->get_MinPasswordLength(&value));
	return value;
}

template <typename T> void impl_IEasClientSecurityPolicy<T>::MinPasswordLength(byte const value) const
{
	check(shim()->put_MinPasswordLength(value));
}

template <typename T> bool impl_IEasClientSecurityPolicy<T>::DisallowConvenienceLogon() const
{
	bool value = {};
	check(shim()->get_DisallowConvenienceLogon(put(value)));
	return value;
}

template <typename T> void impl_IEasClientSecurityPolicy<T>::DisallowConvenienceLogon(bool const value) const
{
	check(shim()->put_DisallowConvenienceLogon(value));
}

template <typename T> byte impl_IEasClientSecurityPolicy<T>::MinPasswordComplexCharacters() const
{
	byte value = {};
	check(shim()->get_MinPasswordComplexCharacters(&value));
	return value;
}

template <typename T> void impl_IEasClientSecurityPolicy<T>::MinPasswordComplexCharacters(byte const value) const
{
	check(shim()->put_MinPasswordComplexCharacters(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IEasClientSecurityPolicy<T>::PasswordExpiration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_PasswordExpiration(&value));
	return value;
}

template <typename T> void impl_IEasClientSecurityPolicy<T>::PasswordExpiration(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_PasswordExpiration(value));
}

template <typename T> unsigned impl_IEasClientSecurityPolicy<T>::PasswordHistory() const
{
	unsigned value = {};
	check(shim()->get_PasswordHistory(&value));
	return value;
}

template <typename T> void impl_IEasClientSecurityPolicy<T>::PasswordHistory(unsigned const value) const
{
	check(shim()->put_PasswordHistory(value));
}

template <typename T> byte impl_IEasClientSecurityPolicy<T>::MaxPasswordFailedAttempts() const
{
	byte value = {};
	check(shim()->get_MaxPasswordFailedAttempts(&value));
	return value;
}

template <typename T> void impl_IEasClientSecurityPolicy<T>::MaxPasswordFailedAttempts(byte const value) const
{
	check(shim()->put_MaxPasswordFailedAttempts(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IEasClientSecurityPolicy<T>::MaxInactivityTimeLock() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_MaxInactivityTimeLock(&value));
	return value;
}

template <typename T> void impl_IEasClientSecurityPolicy<T>::MaxInactivityTimeLock(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_MaxInactivityTimeLock(value));
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasComplianceResults impl_IEasClientSecurityPolicy<T>::CheckCompliance() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasComplianceResults result = nullptr;
	check(shim()->abi_CheckCompliance(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Security::ExchangeActiveSyncProvisioning::EasComplianceResults> impl_IEasClientSecurityPolicy<T>::ApplyAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Security::ExchangeActiveSyncProvisioning::EasComplianceResults> operation;
	check(shim()->abi_ApplyAsync(put(operation)));
	return operation;
}

template <typename T> bool impl_IEasComplianceResults<T>::Compliant() const
{
	bool value = {};
	check(shim()->get_Compliant(put(value)));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasRequireEncryptionResult impl_IEasComplianceResults<T>::RequireEncryptionResult() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasRequireEncryptionResult value = {};
	check(shim()->get_RequireEncryptionResult(&value));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasMinPasswordLengthResult impl_IEasComplianceResults<T>::MinPasswordLengthResult() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasMinPasswordLengthResult value = {};
	check(shim()->get_MinPasswordLengthResult(&value));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasDisallowConvenienceLogonResult impl_IEasComplianceResults<T>::DisallowConvenienceLogonResult() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasDisallowConvenienceLogonResult value = {};
	check(shim()->get_DisallowConvenienceLogonResult(&value));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasMinPasswordComplexCharactersResult impl_IEasComplianceResults<T>::MinPasswordComplexCharactersResult() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasMinPasswordComplexCharactersResult value = {};
	check(shim()->get_MinPasswordComplexCharactersResult(&value));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasPasswordExpirationResult impl_IEasComplianceResults<T>::PasswordExpirationResult() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasPasswordExpirationResult value = {};
	check(shim()->get_PasswordExpirationResult(&value));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasPasswordHistoryResult impl_IEasComplianceResults<T>::PasswordHistoryResult() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasPasswordHistoryResult value = {};
	check(shim()->get_PasswordHistoryResult(&value));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasMaxPasswordFailedAttemptsResult impl_IEasComplianceResults<T>::MaxPasswordFailedAttemptsResult() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasMaxPasswordFailedAttemptsResult value = {};
	check(shim()->get_MaxPasswordFailedAttemptsResult(&value));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasMaxInactivityTimeLockResult impl_IEasComplianceResults<T>::MaxInactivityTimeLockResult() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasMaxInactivityTimeLockResult value = {};
	check(shim()->get_MaxInactivityTimeLockResult(&value));
	return value;
}

template <typename T> Windows::Security::ExchangeActiveSyncProvisioning::EasEncryptionProviderType impl_IEasComplianceResults2<T>::EncryptionProviderType() const
{
	Windows::Security::ExchangeActiveSyncProvisioning::EasEncryptionProviderType value = {};
	check(shim()->get_EncryptionProviderType(&value));
	return value;
}

template <typename T> GUID impl_IEasClientDeviceInformation<T>::Id() const
{
	GUID value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> String impl_IEasClientDeviceInformation<T>::OperatingSystem() const
{
	String value;
	check(shim()->get_OperatingSystem(put(value)));
	return value;
}

template <typename T> String impl_IEasClientDeviceInformation<T>::FriendlyName() const
{
	String value;
	check(shim()->get_FriendlyName(put(value)));
	return value;
}

template <typename T> String impl_IEasClientDeviceInformation<T>::SystemManufacturer() const
{
	String value;
	check(shim()->get_SystemManufacturer(put(value)));
	return value;
}

template <typename T> String impl_IEasClientDeviceInformation<T>::SystemProductName() const
{
	String value;
	check(shim()->get_SystemProductName(put(value)));
	return value;
}

template <typename T> String impl_IEasClientDeviceInformation<T>::SystemSku() const
{
	String value;
	check(shim()->get_SystemSku(put(value)));
	return value;
}

template <typename T> String impl_IEasClientDeviceInformation2<T>::SystemHardwareVersion() const
{
	String value;
	check(shim()->get_SystemHardwareVersion(put(value)));
	return value;
}

template <typename T> String impl_IEasClientDeviceInformation2<T>::SystemFirmwareVersion() const
{
	String value;
	check(shim()->get_SystemFirmwareVersion(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Services { namespace Maps {

template <typename T> unsigned impl_IMapRouteDrivingOptions<T>::MaxAlternateRouteCount() const
{
	unsigned value = {};
	check(shim()->get_MaxAlternateRouteCount(&value));
	return value;
}

template <typename T> void impl_IMapRouteDrivingOptions<T>::MaxAlternateRouteCount(unsigned const value) const
{
	check(shim()->put_MaxAlternateRouteCount(value));
}

template <typename T> Windows::Foundation::IReference<double> impl_IMapRouteDrivingOptions<T>::InitialHeading() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_InitialHeading(put(value)));
	return value;
}

template <typename T> void impl_IMapRouteDrivingOptions<T>::InitialHeading(Windows::Foundation::IReference<double> const & value) const
{
	check(shim()->put_InitialHeading(get(value)));
}

template <typename T> Windows::Services::Maps::MapRouteOptimization impl_IMapRouteDrivingOptions<T>::RouteOptimization() const
{
	Windows::Services::Maps::MapRouteOptimization value = {};
	check(shim()->get_RouteOptimization(&value));
	return value;
}

template <typename T> void impl_IMapRouteDrivingOptions<T>::RouteOptimization(Windows::Services::Maps::MapRouteOptimization const value) const
{
	check(shim()->put_RouteOptimization(value));
}

template <typename T> Windows::Services::Maps::MapRouteRestrictions impl_IMapRouteDrivingOptions<T>::RouteRestrictions() const
{
	Windows::Services::Maps::MapRouteRestrictions value = {};
	check(shim()->get_RouteRestrictions(&value));
	return value;
}

template <typename T> void impl_IMapRouteDrivingOptions<T>::RouteRestrictions(Windows::Services::Maps::MapRouteRestrictions const value) const
{
	check(shim()->put_RouteRestrictions(value));
}

template <typename T> String impl_IMapAddress<T>::BuildingName() const
{
	String value;
	check(shim()->get_BuildingName(put(value)));
	return value;
}

template <typename T> String impl_IMapAddress<T>::BuildingFloor() const
{
	String value;
	check(shim()->get_BuildingFloor(put(value)));
	return value;
}

template <typename T> String impl_IMapAddress<T>::BuildingRoom() const
{
	String value;
	check(shim()->get_BuildingRoom(put(value)));
	return value;
}

template <typename T> String impl_IMapAddress<T>::BuildingWing() const
{
	String value;
	check(shim()->get_BuildingWing(put(value)));
	return value;
}

template <typename T> String impl_IMapAddress<T>::StreetNumber() const
{
	String value;
	check(shim()->get_StreetNumber(put(value)));
	return value;
}

template <typename T> String impl_IMapAddress<T>::Street() const
{
	String value;
	check(shim()->get_Street(put(value)));
	return value;
}

template <typename T> String impl_IMapAddress<T>::Neighborhood() const
{
	String value;
	check(shim()->get_Neighborhood(put(value)));
	return value;
}

template <typename T> String impl_IMapAddress<T>::District() const
{
	String value;
	check(shim()->get_District(put(value)));
	return value;
}

template <typename T> String impl_IMapAddress<T>::Town() const
{
	String value;
	check(shim()->get_Town(put(value)));
	return value;
}

template <typename T> String impl_IMapAddress<T>::Region() const
{
	String value;
	check(shim()->get_Region(put(value)));
	return value;
}

template <typename T> String impl_IMapAddress<T>::RegionCode() const
{
	String value;
	check(shim()->get_RegionCode(put(value)));
	return value;
}

template <typename T> String impl_IMapAddress<T>::Country() const
{
	String value;
	check(shim()->get_Country(put(value)));
	return value;
}

template <typename T> String impl_IMapAddress<T>::CountryCode() const
{
	String value;
	check(shim()->get_CountryCode(put(value)));
	return value;
}

template <typename T> String impl_IMapAddress<T>::PostCode() const
{
	String value;
	check(shim()->get_PostCode(put(value)));
	return value;
}

template <typename T> String impl_IMapAddress<T>::Continent() const
{
	String value;
	check(shim()->get_Continent(put(value)));
	return value;
}

template <typename T> String impl_IMapAddress2<T>::FormattedAddress() const
{
	String value;
	check(shim()->get_FormattedAddress(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_IMapLocation<T>::Point() const
{
	Windows::Devices::Geolocation::Geopoint value = nullptr;
	check(shim()->get_Point(put(value)));
	return value;
}

template <typename T> String impl_IMapLocation<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IMapLocation<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> Windows::Services::Maps::MapAddress impl_IMapLocation<T>::Address() const
{
	Windows::Services::Maps::MapAddress value = nullptr;
	check(shim()->get_Address(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Services::Maps::MapLocation> impl_IMapLocationFinderResult<T>::Locations() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Services::Maps::MapLocation> value;
	check(shim()->get_Locations(put(value)));
	return value;
}

template <typename T> Windows::Services::Maps::MapLocationFinderStatus impl_IMapLocationFinderResult<T>::Status() const
{
	Windows::Services::Maps::MapLocationFinderStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_IMapRouteManeuver<T>::StartingPoint() const
{
	Windows::Devices::Geolocation::Geopoint value = nullptr;
	check(shim()->get_StartingPoint(put(value)));
	return value;
}

template <typename T> double impl_IMapRouteManeuver<T>::LengthInMeters() const
{
	double value = {};
	check(shim()->get_LengthInMeters(&value));
	return value;
}

template <typename T> String impl_IMapRouteManeuver<T>::InstructionText() const
{
	String value;
	check(shim()->get_InstructionText(put(value)));
	return value;
}

template <typename T> Windows::Services::Maps::MapRouteManeuverKind impl_IMapRouteManeuver<T>::Kind() const
{
	Windows::Services::Maps::MapRouteManeuverKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> String impl_IMapRouteManeuver<T>::ExitNumber() const
{
	String value;
	check(shim()->get_ExitNumber(put(value)));
	return value;
}

template <typename T> Windows::Services::Maps::MapManeuverNotices impl_IMapRouteManeuver<T>::ManeuverNotices() const
{
	Windows::Services::Maps::MapManeuverNotices value = {};
	check(shim()->get_ManeuverNotices(&value));
	return value;
}

template <typename T> double impl_IMapRouteManeuver2<T>::StartHeading() const
{
	double value = {};
	check(shim()->get_StartHeading(&value));
	return value;
}

template <typename T> double impl_IMapRouteManeuver2<T>::EndHeading() const
{
	double value = {};
	check(shim()->get_EndHeading(&value));
	return value;
}

template <typename T> String impl_IMapRouteManeuver2<T>::StreetName() const
{
	String value;
	check(shim()->get_StreetName(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::GeoboundingBox impl_IMapRouteLeg<T>::BoundingBox() const
{
	Windows::Devices::Geolocation::GeoboundingBox value = nullptr;
	check(shim()->get_BoundingBox(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopath impl_IMapRouteLeg<T>::Path() const
{
	Windows::Devices::Geolocation::Geopath value = nullptr;
	check(shim()->get_Path(put(value)));
	return value;
}

template <typename T> double impl_IMapRouteLeg<T>::LengthInMeters() const
{
	double value = {};
	check(shim()->get_LengthInMeters(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IMapRouteLeg<T>::EstimatedDuration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_EstimatedDuration(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Services::Maps::MapRouteManeuver> impl_IMapRouteLeg<T>::Maneuvers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Services::Maps::MapRouteManeuver> value;
	check(shim()->get_Maneuvers(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::GeoboundingBox impl_IMapRoute<T>::BoundingBox() const
{
	Windows::Devices::Geolocation::GeoboundingBox value = nullptr;
	check(shim()->get_BoundingBox(put(value)));
	return value;
}

template <typename T> double impl_IMapRoute<T>::LengthInMeters() const
{
	double value = {};
	check(shim()->get_LengthInMeters(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IMapRoute<T>::EstimatedDuration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_EstimatedDuration(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopath impl_IMapRoute<T>::Path() const
{
	Windows::Devices::Geolocation::Geopath value = nullptr;
	check(shim()->get_Path(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Services::Maps::MapRouteLeg> impl_IMapRoute<T>::Legs() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Services::Maps::MapRouteLeg> value;
	check(shim()->get_Legs(put(value)));
	return value;
}

template <typename T> bool impl_IMapRoute<T>::IsTrafficBased() const
{
	bool value = {};
	check(shim()->get_IsTrafficBased(put(value)));
	return value;
}

template <typename T> Windows::Services::Maps::MapRouteRestrictions impl_IMapRoute2<T>::ViolatedRestrictions() const
{
	Windows::Services::Maps::MapRouteRestrictions value = {};
	check(shim()->get_ViolatedRestrictions(&value));
	return value;
}

template <typename T> bool impl_IMapRoute2<T>::HasBlockedRoads() const
{
	bool value = {};
	check(shim()->get_HasBlockedRoads(put(value)));
	return value;
}

template <typename T> Windows::Services::Maps::MapRoute impl_IMapRouteFinderResult<T>::Route() const
{
	Windows::Services::Maps::MapRoute value = nullptr;
	check(shim()->get_Route(put(value)));
	return value;
}

template <typename T> Windows::Services::Maps::MapRouteFinderStatus impl_IMapRouteFinderResult<T>::Status() const
{
	Windows::Services::Maps::MapRouteFinderStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Services::Maps::MapRoute> impl_IMapRouteFinderResult2<T>::AlternateRoutes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Services::Maps::MapRoute> value;
	check(shim()->get_AlternateRoutes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapLocationFinderResult> impl_IMapLocationFinderStatics<T>::FindLocationsAtAsync(Windows::Devices::Geolocation::Geopoint const & queryPoint) const
{
	Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapLocationFinderResult> result;
	check(shim()->abi_FindLocationsAtAsync(get(queryPoint), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapLocationFinderResult> impl_IMapLocationFinderStatics<T>::FindLocationsAsync(StringReference const & searchText, Windows::Devices::Geolocation::Geopoint const & referencePoint) const
{
	Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapLocationFinderResult> result;
	check(shim()->abi_FindLocationsAsync(get(searchText), get(referencePoint), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapLocationFinderResult> impl_IMapLocationFinderStatics<T>::FindLocationsAsync(StringReference const & searchText, Windows::Devices::Geolocation::Geopoint const & referencePoint, unsigned const maxCount) const
{
	Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapLocationFinderResult> result;
	check(shim()->abi_FindLocationsWithMaxCountAsync(get(searchText), get(referencePoint), maxCount, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> impl_IMapRouteFinderStatics<T>::GetDrivingRouteAsync(Windows::Devices::Geolocation::Geopoint const & startPoint, Windows::Devices::Geolocation::Geopoint const & endPoint) const
{
	Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> result;
	check(shim()->abi_GetDrivingRouteAsync(get(startPoint), get(endPoint), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> impl_IMapRouteFinderStatics<T>::GetDrivingRouteAsync(Windows::Devices::Geolocation::Geopoint const & startPoint, Windows::Devices::Geolocation::Geopoint const & endPoint, Windows::Services::Maps::MapRouteOptimization const optimization) const
{
	Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> result;
	check(shim()->abi_GetDrivingRouteWithOptimizationAsync(get(startPoint), get(endPoint), optimization, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> impl_IMapRouteFinderStatics<T>::GetDrivingRouteAsync(Windows::Devices::Geolocation::Geopoint const & startPoint, Windows::Devices::Geolocation::Geopoint const & endPoint, Windows::Services::Maps::MapRouteOptimization const optimization, Windows::Services::Maps::MapRouteRestrictions const restrictions) const
{
	Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> result;
	check(shim()->abi_GetDrivingRouteWithOptimizationAndRestrictionsAsync(get(startPoint), get(endPoint), optimization, restrictions, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> impl_IMapRouteFinderStatics<T>::GetDrivingRouteAsync(Windows::Devices::Geolocation::Geopoint const & startPoint, Windows::Devices::Geolocation::Geopoint const & endPoint, Windows::Services::Maps::MapRouteOptimization const optimization, Windows::Services::Maps::MapRouteRestrictions const restrictions, double const headingInDegrees) const
{
	Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> result;
	check(shim()->abi_GetDrivingRouteWithOptimizationRestrictionsAndHeadingAsync(get(startPoint), get(endPoint), optimization, restrictions, headingInDegrees, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> impl_IMapRouteFinderStatics<T>::GetDrivingRouteFromWaypointsAsync(Windows::Foundation::Collections::IIterable<Windows::Devices::Geolocation::Geopoint> const & wayPoints) const
{
	Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> result;
	check(shim()->abi_GetDrivingRouteFromWaypointsAsync(get(wayPoints), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> impl_IMapRouteFinderStatics<T>::GetDrivingRouteFromWaypointsAsync(Windows::Foundation::Collections::IIterable<Windows::Devices::Geolocation::Geopoint> const & wayPoints, Windows::Services::Maps::MapRouteOptimization const optimization) const
{
	Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> result;
	check(shim()->abi_GetDrivingRouteFromWaypointsAndOptimizationAsync(get(wayPoints), optimization, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> impl_IMapRouteFinderStatics<T>::GetDrivingRouteFromWaypointsAsync(Windows::Foundation::Collections::IIterable<Windows::Devices::Geolocation::Geopoint> const & wayPoints, Windows::Services::Maps::MapRouteOptimization const optimization, Windows::Services::Maps::MapRouteRestrictions const restrictions) const
{
	Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> result;
	check(shim()->abi_GetDrivingRouteFromWaypointsOptimizationAndRestrictionsAsync(get(wayPoints), optimization, restrictions, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> impl_IMapRouteFinderStatics<T>::GetDrivingRouteFromWaypointsAsync(Windows::Foundation::Collections::IIterable<Windows::Devices::Geolocation::Geopoint> const & wayPoints, Windows::Services::Maps::MapRouteOptimization const optimization, Windows::Services::Maps::MapRouteRestrictions const restrictions, double const headingInDegrees) const
{
	Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> result;
	check(shim()->abi_GetDrivingRouteFromWaypointsOptimizationRestrictionsAndHeadingAsync(get(wayPoints), optimization, restrictions, headingInDegrees, put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> impl_IMapRouteFinderStatics<T>::GetWalkingRouteAsync(Windows::Devices::Geolocation::Geopoint const & startPoint, Windows::Devices::Geolocation::Geopoint const & endPoint) const
{
	Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> result;
	check(shim()->abi_GetWalkingRouteAsync(get(startPoint), get(endPoint), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> impl_IMapRouteFinderStatics<T>::GetWalkingRouteFromWaypointsAsync(Windows::Foundation::Collections::IIterable<Windows::Devices::Geolocation::Geopoint> const & wayPoints) const
{
	Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> result;
	check(shim()->abi_GetWalkingRouteFromWaypointsAsync(get(wayPoints), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> impl_IMapRouteFinderStatics2<T>::GetDrivingRouteAsync(Windows::Devices::Geolocation::Geopoint const & startPoint, Windows::Devices::Geolocation::Geopoint const & endPoint, Windows::Services::Maps::MapRouteDrivingOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> result;
	check(shim()->abi_GetDrivingRouteWithOptionsAsync(get(startPoint), get(endPoint), get(options), put(result)));
	return result;
}

template <typename T> void impl_IMapServiceStatics<T>::ServiceToken(StringReference const & value) const
{
	check(shim()->put_ServiceToken(get(value)));
}

template <typename T> String impl_IMapServiceStatics<T>::ServiceToken() const
{
	String value;
	check(shim()->get_ServiceToken(put(value)));
	return value;
}

template <typename T> void impl_IMapManagerStatics<T>::ShowDownloadedMapsUI() const
{
	check(shim()->abi_ShowDownloadedMapsUI());
}

template <typename T> void impl_IMapManagerStatics<T>::ShowMapsUpdateUI() const
{
	check(shim()->abi_ShowMapsUpdateUI());
}

template <typename T> String impl_IMapServiceStatics2<T>::WorldViewRegionCode() const
{
	String value;
	check(shim()->get_WorldViewRegionCode(put(value)));
	return value;
}

template <typename T> String impl_IMapServiceStatics3<T>::DataAttributions() const
{
	String value;
	check(shim()->get_DataAttributions(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Services { namespace Maps { namespace Guidance {

template <typename T> String impl_IGuidanceRoadSignpost<T>::ExitNumber() const
{
	String value;
	check(shim()->get_ExitNumber(put(value)));
	return value;
}

template <typename T> String impl_IGuidanceRoadSignpost<T>::Exit() const
{
	String value;
	check(shim()->get_Exit(put(value)));
	return value;
}

template <typename T> Windows::UI::Color impl_IGuidanceRoadSignpost<T>::BackgroundColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_BackgroundColor(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IGuidanceRoadSignpost<T>::ForegroundColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_ForegroundColor(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IGuidanceRoadSignpost<T>::ExitDirections() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_ExitDirections(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_IGuidanceManeuver<T>::StartLocation() const
{
	Windows::Devices::Geolocation::Geopoint value = nullptr;
	check(shim()->get_StartLocation(put(value)));
	return value;
}

template <typename T> int impl_IGuidanceManeuver<T>::DistanceFromRouteStart() const
{
	int value = {};
	check(shim()->get_DistanceFromRouteStart(&value));
	return value;
}

template <typename T> int impl_IGuidanceManeuver<T>::DistanceFromPreviousManeuver() const
{
	int value = {};
	check(shim()->get_DistanceFromPreviousManeuver(&value));
	return value;
}

template <typename T> String impl_IGuidanceManeuver<T>::DepartureRoadName() const
{
	String value;
	check(shim()->get_DepartureRoadName(put(value)));
	return value;
}

template <typename T> String impl_IGuidanceManeuver<T>::NextRoadName() const
{
	String value;
	check(shim()->get_NextRoadName(put(value)));
	return value;
}

template <typename T> String impl_IGuidanceManeuver<T>::DepartureShortRoadName() const
{
	String value;
	check(shim()->get_DepartureShortRoadName(put(value)));
	return value;
}

template <typename T> String impl_IGuidanceManeuver<T>::NextShortRoadName() const
{
	String value;
	check(shim()->get_NextShortRoadName(put(value)));
	return value;
}

template <typename T> Windows::Services::Maps::Guidance::GuidanceManeuverKind impl_IGuidanceManeuver<T>::Kind() const
{
	Windows::Services::Maps::Guidance::GuidanceManeuverKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> int impl_IGuidanceManeuver<T>::StartAngle() const
{
	int value = {};
	check(shim()->get_StartAngle(&value));
	return value;
}

template <typename T> int impl_IGuidanceManeuver<T>::EndAngle() const
{
	int value = {};
	check(shim()->get_EndAngle(&value));
	return value;
}

template <typename T> Windows::Services::Maps::Guidance::GuidanceRoadSignpost impl_IGuidanceManeuver<T>::RoadSignpost() const
{
	Windows::Services::Maps::Guidance::GuidanceRoadSignpost value = nullptr;
	check(shim()->get_RoadSignpost(put(value)));
	return value;
}

template <typename T> String impl_IGuidanceManeuver<T>::InstructionText() const
{
	String value;
	check(shim()->get_InstructionText(put(value)));
	return value;
}

template <typename T> Windows::Services::Maps::Guidance::GuidanceMode impl_IGuidanceUpdatedEventArgs<T>::Mode() const
{
	Windows::Services::Maps::Guidance::GuidanceMode value = {};
	check(shim()->get_Mode(&value));
	return value;
}

template <typename T> Windows::Services::Maps::Guidance::GuidanceManeuver impl_IGuidanceUpdatedEventArgs<T>::NextManeuver() const
{
	Windows::Services::Maps::Guidance::GuidanceManeuver value = nullptr;
	check(shim()->get_NextManeuver(put(value)));
	return value;
}

template <typename T> int impl_IGuidanceUpdatedEventArgs<T>::NextManeuverDistance() const
{
	int value = {};
	check(shim()->get_NextManeuverDistance(&value));
	return value;
}

template <typename T> Windows::Services::Maps::Guidance::GuidanceManeuver impl_IGuidanceUpdatedEventArgs<T>::AfterNextManeuver() const
{
	Windows::Services::Maps::Guidance::GuidanceManeuver value = nullptr;
	check(shim()->get_AfterNextManeuver(put(value)));
	return value;
}

template <typename T> int impl_IGuidanceUpdatedEventArgs<T>::AfterNextManeuverDistance() const
{
	int value = {};
	check(shim()->get_AfterNextManeuverDistance(&value));
	return value;
}

template <typename T> int impl_IGuidanceUpdatedEventArgs<T>::DistanceToDestination() const
{
	int value = {};
	check(shim()->get_DistanceToDestination(&value));
	return value;
}

template <typename T> int impl_IGuidanceUpdatedEventArgs<T>::ElapsedDistance() const
{
	int value = {};
	check(shim()->get_ElapsedDistance(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IGuidanceUpdatedEventArgs<T>::ElapsedTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_ElapsedTime(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IGuidanceUpdatedEventArgs<T>::TimeToDestination() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_TimeToDestination(&value));
	return value;
}

template <typename T> String impl_IGuidanceUpdatedEventArgs<T>::RoadName() const
{
	String value;
	check(shim()->get_RoadName(put(value)));
	return value;
}

template <typename T> Windows::Services::Maps::Guidance::GuidanceRoute impl_IGuidanceUpdatedEventArgs<T>::Route() const
{
	Windows::Services::Maps::Guidance::GuidanceRoute result = nullptr;
	check(shim()->get_Route(put(result)));
	return result;
}

template <typename T> Windows::Services::Maps::Guidance::GuidanceMapMatchedCoordinate impl_IGuidanceUpdatedEventArgs<T>::CurrentLocation() const
{
	Windows::Services::Maps::Guidance::GuidanceMapMatchedCoordinate result = nullptr;
	check(shim()->get_CurrentLocation(put(result)));
	return result;
}

template <typename T> bool impl_IGuidanceUpdatedEventArgs<T>::IsNewManeuver() const
{
	bool value = {};
	check(shim()->get_IsNewManeuver(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Services::Maps::Guidance::GuidanceLaneInfo> impl_IGuidanceUpdatedEventArgs<T>::LaneInfo() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Services::Maps::Guidance::GuidanceLaneInfo> value;
	check(shim()->get_LaneInfo(put(value)));
	return value;
}

template <typename T> Windows::Services::Maps::Guidance::GuidanceRoute impl_IGuidanceReroutedEventArgs<T>::Route() const
{
	Windows::Services::Maps::Guidance::GuidanceRoute result = nullptr;
	check(shim()->get_Route(put(result)));
	return result;
}

template <typename T> Windows::Services::Maps::Guidance::GuidanceAudioNotificationKind impl_IGuidanceAudioNotificationRequestedEventArgs<T>::AudioNotification() const
{
	Windows::Services::Maps::Guidance::GuidanceAudioNotificationKind value = {};
	check(shim()->get_AudioNotification(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IGuidanceAudioNotificationRequestedEventArgs<T>::AudioFilePaths() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_AudioFilePaths(put(value)));
	return value;
}

template <typename T> String impl_IGuidanceAudioNotificationRequestedEventArgs<T>::AudioText() const
{
	String value;
	check(shim()->get_AudioText(put(value)));
	return value;
}

template <typename T> void impl_IGuidanceNavigator<T>::StartNavigating(Windows::Services::Maps::Guidance::GuidanceRoute const & route) const
{
	check(shim()->abi_StartNavigating(get(route)));
}

template <typename T> void impl_IGuidanceNavigator<T>::StartSimulating(Windows::Services::Maps::Guidance::GuidanceRoute const & route, int const speedInMetersPerSecond) const
{
	check(shim()->abi_StartSimulating(get(route), speedInMetersPerSecond));
}

template <typename T> void impl_IGuidanceNavigator<T>::StartTracking() const
{
	check(shim()->abi_StartTracking());
}

template <typename T> void impl_IGuidanceNavigator<T>::Pause() const
{
	check(shim()->abi_Pause());
}

template <typename T> void impl_IGuidanceNavigator<T>::Resume() const
{
	check(shim()->abi_Resume());
}

template <typename T> void impl_IGuidanceNavigator<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> void impl_IGuidanceNavigator<T>::RepeatLastAudioNotification() const
{
	check(shim()->abi_RepeatLastAudioNotification());
}

template <typename T> Windows::Services::Maps::Guidance::GuidanceAudioMeasurementSystem impl_IGuidanceNavigator<T>::AudioMeasurementSystem() const
{
	Windows::Services::Maps::Guidance::GuidanceAudioMeasurementSystem value = {};
	check(shim()->get_AudioMeasurementSystem(&value));
	return value;
}

template <typename T> void impl_IGuidanceNavigator<T>::AudioMeasurementSystem(Windows::Services::Maps::Guidance::GuidanceAudioMeasurementSystem const value) const
{
	check(shim()->put_AudioMeasurementSystem(value));
}

template <typename T> Windows::Services::Maps::Guidance::GuidanceAudioNotifications impl_IGuidanceNavigator<T>::AudioNotifications() const
{
	Windows::Services::Maps::Guidance::GuidanceAudioNotifications value = {};
	check(shim()->get_AudioNotifications(&value));
	return value;
}

template <typename T> void impl_IGuidanceNavigator<T>::AudioNotifications(Windows::Services::Maps::Guidance::GuidanceAudioNotifications const value) const
{
	check(shim()->put_AudioNotifications(value));
}

template <typename T> long long impl_IGuidanceNavigator<T>::GuidanceUpdated(Windows::Foundation::ITypedEventHandler<Windows::Services::Maps::Guidance::GuidanceNavigator, Windows::Services::Maps::Guidance::GuidanceUpdatedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_GuidanceUpdated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGuidanceNavigator<T>::GuidanceUpdated(F handler) const
{
	return GuidanceUpdated(Windows::Foundation::TypedEventHandler<Windows::Services::Maps::Guidance::GuidanceNavigator, Windows::Services::Maps::Guidance::GuidanceUpdatedEventArgs>(handler));
}

template <typename T> void impl_IGuidanceNavigator<T>::GuidanceUpdated(long long const token) const
{
	check(shim()->remove_GuidanceUpdated(token));
}

template <typename T> long long impl_IGuidanceNavigator<T>::DestinationReached(Windows::Foundation::ITypedEventHandler<Windows::Services::Maps::Guidance::GuidanceNavigator, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_DestinationReached(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGuidanceNavigator<T>::DestinationReached(F handler) const
{
	return DestinationReached(Windows::Foundation::TypedEventHandler<Windows::Services::Maps::Guidance::GuidanceNavigator, IInspectable>(handler));
}

template <typename T> void impl_IGuidanceNavigator<T>::DestinationReached(long long const token) const
{
	check(shim()->remove_DestinationReached(token));
}

template <typename T> long long impl_IGuidanceNavigator<T>::Rerouting(Windows::Foundation::ITypedEventHandler<Windows::Services::Maps::Guidance::GuidanceNavigator, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Rerouting(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGuidanceNavigator<T>::Rerouting(F handler) const
{
	return Rerouting(Windows::Foundation::TypedEventHandler<Windows::Services::Maps::Guidance::GuidanceNavigator, IInspectable>(handler));
}

template <typename T> void impl_IGuidanceNavigator<T>::Rerouting(long long const token) const
{
	check(shim()->remove_Rerouting(token));
}

template <typename T> long long impl_IGuidanceNavigator<T>::Rerouted(Windows::Foundation::ITypedEventHandler<Windows::Services::Maps::Guidance::GuidanceNavigator, Windows::Services::Maps::Guidance::GuidanceReroutedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Rerouted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGuidanceNavigator<T>::Rerouted(F handler) const
{
	return Rerouted(Windows::Foundation::TypedEventHandler<Windows::Services::Maps::Guidance::GuidanceNavigator, Windows::Services::Maps::Guidance::GuidanceReroutedEventArgs>(handler));
}

template <typename T> void impl_IGuidanceNavigator<T>::Rerouted(long long const token) const
{
	check(shim()->remove_Rerouted(token));
}

template <typename T> long long impl_IGuidanceNavigator<T>::RerouteFailed(Windows::Foundation::ITypedEventHandler<Windows::Services::Maps::Guidance::GuidanceNavigator, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_RerouteFailed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGuidanceNavigator<T>::RerouteFailed(F handler) const
{
	return RerouteFailed(Windows::Foundation::TypedEventHandler<Windows::Services::Maps::Guidance::GuidanceNavigator, IInspectable>(handler));
}

template <typename T> void impl_IGuidanceNavigator<T>::RerouteFailed(long long const token) const
{
	check(shim()->remove_RerouteFailed(token));
}

template <typename T> long long impl_IGuidanceNavigator<T>::UserLocationLost(Windows::Foundation::ITypedEventHandler<Windows::Services::Maps::Guidance::GuidanceNavigator, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_UserLocationLost(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGuidanceNavigator<T>::UserLocationLost(F handler) const
{
	return UserLocationLost(Windows::Foundation::TypedEventHandler<Windows::Services::Maps::Guidance::GuidanceNavigator, IInspectable>(handler));
}

template <typename T> void impl_IGuidanceNavigator<T>::UserLocationLost(long long const token) const
{
	check(shim()->remove_UserLocationLost(token));
}

template <typename T> long long impl_IGuidanceNavigator<T>::UserLocationRestored(Windows::Foundation::ITypedEventHandler<Windows::Services::Maps::Guidance::GuidanceNavigator, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_UserLocationRestored(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGuidanceNavigator<T>::UserLocationRestored(F handler) const
{
	return UserLocationRestored(Windows::Foundation::TypedEventHandler<Windows::Services::Maps::Guidance::GuidanceNavigator, IInspectable>(handler));
}

template <typename T> void impl_IGuidanceNavigator<T>::UserLocationRestored(long long const token) const
{
	check(shim()->remove_UserLocationRestored(token));
}

template <typename T> void impl_IGuidanceNavigator<T>::SetGuidanceVoice(int const voiceId, StringReference const & voiceFolder) const
{
	check(shim()->abi_SetGuidanceVoice(voiceId, get(voiceFolder)));
}

template <typename T> void impl_IGuidanceNavigator<T>::UpdateUserLocation(Windows::Devices::Geolocation::Geocoordinate const & userLocation) const
{
	check(shim()->abi_UpdateUserLocation(get(userLocation)));
}

template <typename T> void impl_IGuidanceNavigator<T>::UpdateUserLocation(Windows::Devices::Geolocation::Geocoordinate const & userLocation, Windows::Devices::Geolocation::BasicGeoposition const & positionOverride) const
{
	check(shim()->abi_UpdateUserLocationWithPositionOverride(get(userLocation), positionOverride));
}

template <typename T> long long impl_IGuidanceNavigator2<T>::AudioNotificationRequested(Windows::Foundation::ITypedEventHandler<Windows::Services::Maps::Guidance::GuidanceNavigator, Windows::Services::Maps::Guidance::GuidanceAudioNotificationRequestedEventArgs> const & value) const
{
	long long token = {};
	check(shim()->add_AudioNotificationRequested(get(value), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IGuidanceNavigator2<T>::AudioNotificationRequested(F value) const
{
	return AudioNotificationRequested(Windows::Foundation::TypedEventHandler<Windows::Services::Maps::Guidance::GuidanceNavigator, Windows::Services::Maps::Guidance::GuidanceAudioNotificationRequestedEventArgs>(value));
}

template <typename T> void impl_IGuidanceNavigator2<T>::AudioNotificationRequested(long long const token) const
{
	check(shim()->remove_AudioNotificationRequested(token));
}

template <typename T> bool impl_IGuidanceNavigator2<T>::IsGuidanceAudioMuted() const
{
	bool value = {};
	check(shim()->get_IsGuidanceAudioMuted(put(value)));
	return value;
}

template <typename T> void impl_IGuidanceNavigator2<T>::IsGuidanceAudioMuted(bool const value) const
{
	check(shim()->put_IsGuidanceAudioMuted(value));
}

template <typename T> Windows::Services::Maps::Guidance::GuidanceNavigator impl_IGuidanceNavigatorStatics<T>::GetCurrent() const
{
	Windows::Services::Maps::Guidance::GuidanceNavigator result = nullptr;
	check(shim()->abi_GetCurrent(put(result)));
	return result;
}

template <typename T> bool impl_IGuidanceNavigatorStatics2<T>::UseAppProvidedVoice() const
{
	bool value = {};
	check(shim()->get_UseAppProvidedVoice(put(value)));
	return value;
}

template <typename T> String impl_IGuidanceRoadSegment<T>::RoadName() const
{
	String value;
	check(shim()->get_RoadName(put(value)));
	return value;
}

template <typename T> String impl_IGuidanceRoadSegment<T>::ShortRoadName() const
{
	String value;
	check(shim()->get_ShortRoadName(put(value)));
	return value;
}

template <typename T> double impl_IGuidanceRoadSegment<T>::SpeedLimit() const
{
	double value = {};
	check(shim()->get_SpeedLimit(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IGuidanceRoadSegment<T>::TravelTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_TravelTime(&value));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopath impl_IGuidanceRoadSegment<T>::Path() const
{
	Windows::Devices::Geolocation::Geopath value = nullptr;
	check(shim()->get_Path(put(value)));
	return value;
}

template <typename T> String impl_IGuidanceRoadSegment<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> bool impl_IGuidanceRoadSegment<T>::IsHighway() const
{
	bool value = {};
	check(shim()->get_IsHighway(put(value)));
	return value;
}

template <typename T> bool impl_IGuidanceRoadSegment<T>::IsTunnel() const
{
	bool value = {};
	check(shim()->get_IsTunnel(put(value)));
	return value;
}

template <typename T> bool impl_IGuidanceRoadSegment<T>::IsTollRoad() const
{
	bool value = {};
	check(shim()->get_IsTollRoad(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_IGuidanceMapMatchedCoordinate<T>::Location() const
{
	Windows::Devices::Geolocation::Geopoint value = nullptr;
	check(shim()->get_Location(put(value)));
	return value;
}

template <typename T> double impl_IGuidanceMapMatchedCoordinate<T>::CurrentHeading() const
{
	double value = {};
	check(shim()->get_CurrentHeading(&value));
	return value;
}

template <typename T> double impl_IGuidanceMapMatchedCoordinate<T>::CurrentSpeed() const
{
	double value = {};
	check(shim()->get_CurrentSpeed(&value));
	return value;
}

template <typename T> bool impl_IGuidanceMapMatchedCoordinate<T>::IsOnStreet() const
{
	bool value = {};
	check(shim()->get_IsOnStreet(put(value)));
	return value;
}

template <typename T> Windows::Services::Maps::Guidance::GuidanceRoadSegment impl_IGuidanceMapMatchedCoordinate<T>::Road() const
{
	Windows::Services::Maps::Guidance::GuidanceRoadSegment value = nullptr;
	check(shim()->get_Road(put(value)));
	return value;
}

template <typename T> Windows::Services::Maps::Guidance::GuidanceTelemetryCollector impl_IGuidanceTelemetryCollectorStatics<T>::GetCurrent() const
{
	Windows::Services::Maps::Guidance::GuidanceTelemetryCollector result = nullptr;
	check(shim()->abi_GetCurrent(put(result)));
	return result;
}

template <typename T> bool impl_IGuidanceTelemetryCollector<T>::Enabled() const
{
	bool value = {};
	check(shim()->get_Enabled(put(value)));
	return value;
}

template <typename T> void impl_IGuidanceTelemetryCollector<T>::Enabled(bool const value) const
{
	check(shim()->put_Enabled(value));
}

template <typename T> void impl_IGuidanceTelemetryCollector<T>::ClearLocalData() const
{
	check(shim()->abi_ClearLocalData());
}

template <typename T> double impl_IGuidanceTelemetryCollector<T>::SpeedTrigger() const
{
	double value = {};
	check(shim()->get_SpeedTrigger(&value));
	return value;
}

template <typename T> void impl_IGuidanceTelemetryCollector<T>::SpeedTrigger(double const value) const
{
	check(shim()->put_SpeedTrigger(value));
}

template <typename T> int impl_IGuidanceTelemetryCollector<T>::UploadFrequency() const
{
	int value = {};
	check(shim()->get_UploadFrequency(&value));
	return value;
}

template <typename T> void impl_IGuidanceTelemetryCollector<T>::UploadFrequency(int const value) const
{
	check(shim()->put_UploadFrequency(value));
}

template <typename T> bool impl_IGuidanceRouteStatics<T>::CanCreateFromMapRoute(Windows::Services::Maps::MapRoute const & mapRoute) const
{
	bool result = {};
	check(shim()->abi_CanCreateFromMapRoute(get(mapRoute), put(result)));
	return result;
}

template <typename T> Windows::Services::Maps::Guidance::GuidanceRoute impl_IGuidanceRouteStatics<T>::TryCreateFromMapRoute(Windows::Services::Maps::MapRoute const & mapRoute) const
{
	Windows::Services::Maps::Guidance::GuidanceRoute result = nullptr;
	check(shim()->abi_TryCreateFromMapRoute(get(mapRoute), put(result)));
	return result;
}

template <typename T> Windows::Foundation::TimeSpan impl_IGuidanceRoute<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Duration(&value));
	return value;
}

template <typename T> int impl_IGuidanceRoute<T>::Distance() const
{
	int value = {};
	check(shim()->get_Distance(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Services::Maps::Guidance::GuidanceManeuver> impl_IGuidanceRoute<T>::Maneuvers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Services::Maps::Guidance::GuidanceManeuver> value;
	check(shim()->get_Maneuvers(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::GeoboundingBox impl_IGuidanceRoute<T>::BoundingBox() const
{
	Windows::Devices::Geolocation::GeoboundingBox value = nullptr;
	check(shim()->get_BoundingBox(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopath impl_IGuidanceRoute<T>::Path() const
{
	Windows::Devices::Geolocation::Geopath value = nullptr;
	check(shim()->get_Path(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Services::Maps::Guidance::GuidanceRoadSegment> impl_IGuidanceRoute<T>::RoadSegments() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Services::Maps::Guidance::GuidanceRoadSegment> value;
	check(shim()->get_RoadSegments(put(value)));
	return value;
}

template <typename T> Windows::Services::Maps::MapRoute impl_IGuidanceRoute<T>::ConvertToMapRoute() const
{
	Windows::Services::Maps::MapRoute result = nullptr;
	check(shim()->abi_ConvertToMapRoute(put(result)));
	return result;
}

template <typename T> Windows::Services::Maps::Guidance::GuidanceLaneMarkers impl_IGuidanceLaneInfo<T>::LaneMarkers() const
{
	Windows::Services::Maps::Guidance::GuidanceLaneMarkers value = {};
	check(shim()->get_LaneMarkers(&value));
	return value;
}

template <typename T> bool impl_IGuidanceLaneInfo<T>::IsOnRoute() const
{
	bool value = {};
	check(shim()->get_IsOnRoute(put(value)));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace Services { namespace Maps { namespace LocalSearch {

template <typename T> Windows::Services::Maps::MapAddress impl_ILocalLocation<T>::Address() const
{
	Windows::Services::Maps::MapAddress value = nullptr;
	check(shim()->get_Address(put(value)));
	return value;
}

template <typename T> String impl_ILocalLocation<T>::Identifier() const
{
	String value;
	check(shim()->get_Identifier(put(value)));
	return value;
}

template <typename T> String impl_ILocalLocation<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> String impl_ILocalLocation<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> Windows::Devices::Geolocation::Geopoint impl_ILocalLocation<T>::Point() const
{
	Windows::Devices::Geolocation::Geopoint value = nullptr;
	check(shim()->get_Point(put(value)));
	return value;
}

template <typename T> String impl_ILocalLocation<T>::PhoneNumber() const
{
	String value;
	check(shim()->get_PhoneNumber(put(value)));
	return value;
}

template <typename T> String impl_ILocalLocation<T>::DataAttribution() const
{
	String value;
	check(shim()->get_DataAttribution(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Services::Maps::LocalSearch::LocalLocation> impl_ILocalLocationFinderResult<T>::LocalLocations() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Services::Maps::LocalSearch::LocalLocation> value;
	check(shim()->get_LocalLocations(put(value)));
	return value;
}

template <typename T> Windows::Services::Maps::LocalSearch::LocalLocationFinderStatus impl_ILocalLocationFinderResult<T>::Status() const
{
	Windows::Services::Maps::LocalSearch::LocalLocationFinderStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Services::Maps::LocalSearch::LocalLocationFinderResult> impl_ILocalLocationFinderStatics<T>::FindLocalLocationsAsync(StringReference const & searchTerm, Windows::Devices::Geolocation::Geocircle const & searchArea, StringReference const & localCategory, unsigned const maxResults) const
{
	Windows::Foundation::IAsyncOperation<Windows::Services::Maps::LocalSearch::LocalLocationFinderResult> result;
	check(shim()->abi_FindLocalLocationsAsync(get(searchTerm), get(searchArea), get(localCategory), maxResults, put(result)));
	return result;
}

template <typename T> String impl_ILocalCategoriesStatics<T>::BankAndCreditUnions() const
{
	String value;
	check(shim()->get_BankAndCreditUnions(put(value)));
	return value;
}

template <typename T> String impl_ILocalCategoriesStatics<T>::EatDrink() const
{
	String value;
	check(shim()->get_EatDrink(put(value)));
	return value;
}

template <typename T> String impl_ILocalCategoriesStatics<T>::Hospitals() const
{
	String value;
	check(shim()->get_Hospitals(put(value)));
	return value;
}

template <typename T> String impl_ILocalCategoriesStatics<T>::HotelsAndMotels() const
{
	String value;
	check(shim()->get_HotelsAndMotels(put(value)));
	return value;
}

template <typename T> String impl_ILocalCategoriesStatics<T>::All() const
{
	String value;
	check(shim()->get_All(put(value)));
	return value;
}

template <typename T> String impl_ILocalCategoriesStatics<T>::Parking() const
{
	String value;
	check(shim()->get_Parking(put(value)));
	return value;
}

template <typename T> String impl_ILocalCategoriesStatics<T>::SeeDo() const
{
	String value;
	check(shim()->get_SeeDo(put(value)));
	return value;
}

template <typename T> String impl_ILocalCategoriesStatics<T>::Shop() const
{
	String value;
	check(shim()->get_Shop(put(value)));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace Storage {

template <typename T> void impl_IStreamedFileDataRequestedHandler<T>::Invoke(Windows::Storage::StreamedFileDataRequest const & stream) const
{
	check(shim()->abi_Invoke(get(stream)));
}

template <typename T> void impl_IApplicationDataSetVersionHandler<T>::Invoke(Windows::Storage::SetVersionRequest const & setVersionRequest) const
{
	check(shim()->abi_Invoke(get(setVersionRequest)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> impl_IStorageLibraryStatics<T>::GetLibraryAsync(Windows::Storage::KnownLibraryId const libraryId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> operation;
	check(shim()->abi_GetLibraryAsync(libraryId, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> impl_IStorageLibraryStatics2<T>::GetLibraryForUserAsync(Windows::System::User const & user, Windows::Storage::KnownLibraryId const libraryId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> operation;
	check(shim()->abi_GetLibraryForUserAsync(get(user), libraryId, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageLibrary<T>::RequestAddFolderAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check(shim()->abi_RequestAddFolderAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IStorageLibrary<T>::RequestRemoveFolderAsync(Windows::Storage::StorageFolder const & folder) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_RequestRemoveFolderAsync(get(folder), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::IObservableVector<Windows::Storage::StorageFolder> impl_IStorageLibrary<T>::Folders() const
{
	Windows::Foundation::Collections::IObservableVector<Windows::Storage::StorageFolder> value;
	check(shim()->get_Folders(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IStorageLibrary<T>::SaveFolder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_SaveFolder(put(value)));
	return value;
}

template <typename T> long long impl_IStorageLibrary<T>::DefinitionChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::StorageLibrary, IInspectable> const & handler) const
{
	long long eventCookie = {};
	check(shim()->add_DefinitionChanged(get(handler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IStorageLibrary<T>::DefinitionChanged(F handler) const
{
	return DefinitionChanged(Windows::Foundation::TypedEventHandler<Windows::Storage::StorageLibrary, IInspectable>(handler));
}

template <typename T> void impl_IStorageLibrary<T>::DefinitionChanged(long long const eventCookie) const
{
	check(shim()->remove_DefinitionChanged(eventCookie));
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::MusicLibrary() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_MusicLibrary(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::PicturesLibrary() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_PicturesLibrary(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::VideosLibrary() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_VideosLibrary(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::DocumentsLibrary() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_DocumentsLibrary(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::HomeGroup() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_HomeGroup(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::RemovableDevices() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_RemovableDevices(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics<T>::MediaServerDevices() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_MediaServerDevices(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics2<T>::Objects3D() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_Objects3D(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics2<T>::AppCaptures() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_AppCaptures(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersStatics2<T>::RecordedCalls() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_RecordedCalls(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IKnownFoldersStatics3<T>::GetFolderForUserAsync(Windows::System::User const & user, Windows::Storage::KnownFolderId const folderId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check(shim()->abi_GetFolderForUserAsync(get(user), folderId, put(operation)));
	return operation;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersPlaylistsStatics<T>::Playlists() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_Playlists(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersCameraRollStatics<T>::CameraRoll() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_CameraRoll(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IKnownFoldersSavedPicturesStatics<T>::SavedPictures() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_SavedPictures(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IDownloadsFolderStatics<T>::CreateFileAsync(StringReference const & desiredName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_CreateFileAsync(get(desiredName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IDownloadsFolderStatics<T>::CreateFolderAsync(StringReference const & desiredName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check(shim()->abi_CreateFolderAsync(get(desiredName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IDownloadsFolderStatics<T>::CreateFileAsync(StringReference const & desiredName, Windows::Storage::CreationCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_CreateFileWithCollisionOptionAsync(get(desiredName), option, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IDownloadsFolderStatics<T>::CreateFolderAsync(StringReference const & desiredName, Windows::Storage::CreationCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check(shim()->abi_CreateFolderWithCollisionOptionAsync(get(desiredName), option, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IDownloadsFolderStatics2<T>::CreateFileForUserAsync(Windows::System::User const & user, StringReference const & desiredName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_CreateFileForUserAsync(get(user), get(desiredName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IDownloadsFolderStatics2<T>::CreateFolderForUserAsync(Windows::System::User const & user, StringReference const & desiredName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check(shim()->abi_CreateFolderForUserAsync(get(user), get(desiredName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IDownloadsFolderStatics2<T>::CreateFileForUserAsync(Windows::System::User const & user, StringReference const & desiredName, Windows::Storage::CreationCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_CreateFileForUserWithCollisionOptionAsync(get(user), get(desiredName), option, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IDownloadsFolderStatics2<T>::CreateFolderForUserAsync(Windows::System::User const & user, StringReference const & desiredName, Windows::Storage::CreationCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check(shim()->abi_CreateFolderForUserWithCollisionOptionAsync(get(user), get(desiredName), option, put(operation)));
	return operation;
}

template <typename T> void impl_IStreamedFileDataRequest<T>::FailAndClose(Windows::Storage::StreamedFileFailureMode const failureMode) const
{
	check(shim()->abi_FailAndClose(failureMode));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::GetFileFromPathAsync(StringReference const & path) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_GetFileFromPathAsync(get(path), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::GetFileFromApplicationUriAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_GetFileFromApplicationUriAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::CreateStreamedFileAsync(StringReference const & displayNameWithExtension, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_CreateStreamedFileAsync(get(displayNameWithExtension), get(dataRequested), get(thumbnail), put(operation)));
	return operation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::CreateStreamedFileAsync(StringReference const & displayNameWithExtension, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	return CreateStreamedFileAsync(displayNameWithExtension, Windows::Storage::StreamedFileDataRequestedHandler(dataRequested), thumbnail);
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_ReplaceWithStreamedFileAsync(get(fileToReplace), get(dataRequested), get(thumbnail), put(operation)));
	return operation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	return ReplaceWithStreamedFileAsync(fileToReplace, Windows::Storage::StreamedFileDataRequestedHandler(dataRequested), thumbnail);
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::CreateStreamedFileFromUriAsync(StringReference const & displayNameWithExtension, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_CreateStreamedFileFromUriAsync(get(displayNameWithExtension), get(uri), get(thumbnail), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFileStatics<T>::ReplaceWithStreamedFileFromUriAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_ReplaceWithStreamedFileFromUriAsync(get(fileToReplace), get(uri), get(thumbnail), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItem<T>::RenameAsync(StringReference const & desiredName) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_RenameAsyncOverloadDefaultOptions(get(desiredName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItem<T>::RenameAsync(StringReference const & desiredName, Windows::Storage::NameCollisionOption const option) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_RenameAsync(get(desiredName), option, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItem<T>::DeleteAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_DeleteAsyncOverloadDefaultOptions(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItem<T>::DeleteAsync(Windows::Storage::StorageDeleteOption const option) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_DeleteAsync(option, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::BasicProperties> impl_IStorageItem<T>::GetBasicPropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::BasicProperties> operation;
	check(shim()->abi_GetBasicPropertiesAsync(put(operation)));
	return operation;
}

template <typename T> String impl_IStorageItem<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IStorageItem<T>::Path() const
{
	String value;
	check(shim()->get_Path(put(value)));
	return value;
}

template <typename T> Windows::Storage::FileAttributes impl_IStorageItem<T>::Attributes() const
{
	Windows::Storage::FileAttributes value = {};
	check(shim()->get_Attributes(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IStorageItem<T>::DateCreated() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_DateCreated(&value));
	return value;
}

template <typename T> bool impl_IStorageItem<T>::IsOfType(Windows::Storage::StorageItemTypes const type) const
{
	bool value = {};
	check(shim()->abi_IsOfType(type, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFolder<T>::CreateFileAsync(StringReference const & desiredName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_CreateFileAsyncOverloadDefaultOptions(get(desiredName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFolder<T>::CreateFileAsync(StringReference const & desiredName, Windows::Storage::CreationCollisionOption const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_CreateFileAsync(get(desiredName), options, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageFolder<T>::CreateFolderAsync(StringReference const & desiredName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check(shim()->abi_CreateFolderAsyncOverloadDefaultOptions(get(desiredName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageFolder<T>::CreateFolderAsync(StringReference const & desiredName, Windows::Storage::CreationCollisionOption const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check(shim()->abi_CreateFolderAsync(get(desiredName), options, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFolder<T>::GetFileAsync(StringReference const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_GetFileAsync(get(name), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageFolder<T>::GetFolderAsync(StringReference const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check(shim()->abi_GetFolderAsync(get(name), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> impl_IStorageFolder<T>::GetItemAsync(StringReference const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> operation;
	check(shim()->abi_GetItemAsync(get(name), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IStorageFolder<T>::GetFilesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> operation;
	check(shim()->abi_GetFilesAsyncOverloadDefaultOptionsStartAndCount(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> impl_IStorageFolder<T>::GetFoldersAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> operation;
	check(shim()->abi_GetFoldersAsyncOverloadDefaultOptionsStartAndCount(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> impl_IStorageFolder<T>::GetItemsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> operation;
	check(shim()->abi_GetItemsAsyncOverloadDefaultStartAndCount(put(operation)));
	return operation;
}

template <typename T> String impl_IStorageFile<T>::FileType() const
{
	String value;
	check(shim()->get_FileType(put(value)));
	return value;
}

template <typename T> String impl_IStorageFile<T>::ContentType() const
{
	String value;
	check(shim()->get_ContentType(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> impl_IStorageFile<T>::OpenAsync(Windows::Storage::FileAccessMode const accessMode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> operation;
	check(shim()->abi_OpenAsync(accessMode, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageStreamTransaction> impl_IStorageFile<T>::OpenTransactedWriteAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageStreamTransaction> operation;
	check(shim()->abi_OpenTransactedWriteAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFile<T>::CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_CopyOverloadDefaultNameAndOptions(get(destinationFolder), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFile<T>::CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, StringReference const & desiredNewName) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_CopyOverloadDefaultOptions(get(destinationFolder), get(desiredNewName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageFile<T>::CopyAsync(Windows::Storage::IStorageFolder const & destinationFolder, StringReference const & desiredNewName, Windows::Storage::NameCollisionOption const option) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_CopyOverload(get(destinationFolder), get(desiredNewName), option, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::CopyAndReplaceAsync(Windows::Storage::IStorageFile const & fileToReplace) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_CopyAndReplaceAsync(get(fileToReplace), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_MoveOverloadDefaultNameAndOptions(get(destinationFolder), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, StringReference const & desiredNewName) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_MoveOverloadDefaultOptions(get(destinationFolder), get(desiredNewName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::MoveAsync(Windows::Storage::IStorageFolder const & destinationFolder, StringReference const & desiredNewName, Windows::Storage::NameCollisionOption const option) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_MoveOverload(get(destinationFolder), get(desiredNewName), option, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageFile<T>::MoveAndReplaceAsync(Windows::Storage::IStorageFile const & fileToReplace) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_MoveAndReplaceAsync(get(fileToReplace), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageFolderStatics<T>::GetFolderFromPathAsync(StringReference const & path) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check(shim()->abi_GetFolderFromPathAsync(get(path), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageItem2<T>::GetParentAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check(shim()->abi_GetParentAsync(put(operation)));
	return operation;
}

template <typename T> bool impl_IStorageItem2<T>::IsEqual(Windows::Storage::IStorageItem const & item) const
{
	bool value = {};
	check(shim()->abi_IsEqual(get(item), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties<T>::GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation;
	check(shim()->abi_GetThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties<T>::GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedSize) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation;
	check(shim()->abi_GetThumbnailAsyncOverloadDefaultOptions(mode, requestedSize, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties<T>::GetThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedSize, Windows::Storage::FileProperties::ThumbnailOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation;
	check(shim()->abi_GetThumbnailAsync(mode, requestedSize, options, put(operation)));
	return operation;
}

template <typename T> String impl_IStorageItemProperties<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IStorageItemProperties<T>::DisplayType() const
{
	String value;
	check(shim()->get_DisplayType(put(value)));
	return value;
}

template <typename T> String impl_IStorageItemProperties<T>::FolderRelativeId() const
{
	String value;
	check(shim()->get_FolderRelativeId(put(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::StorageItemContentProperties impl_IStorageItemProperties<T>::Properties() const
{
	Windows::Storage::FileProperties::StorageItemContentProperties value = nullptr;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties2<T>::GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation;
	check(shim()->abi_GetScaledImageAsThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties2<T>::GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedSize) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation;
	check(shim()->abi_GetScaledImageAsThumbnailAsyncOverloadDefaultOptions(mode, requestedSize, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> impl_IStorageItemProperties2<T>::GetScaledImageAsThumbnailAsync(Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedSize, Windows::Storage::FileProperties::ThumbnailOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::StorageItemThumbnail> operation;
	check(shim()->abi_GetScaledImageAsThumbnailAsync(mode, requestedSize, options, put(operation)));
	return operation;
}

template <typename T> Windows::Storage::StorageProvider impl_IStorageItemPropertiesWithProvider<T>::Provider() const
{
	Windows::Storage::StorageProvider value = nullptr;
	check(shim()->get_Provider(put(value)));
	return value;
}

template <typename T> bool impl_IStorageFilePropertiesWithAvailability<T>::IsAvailable() const
{
	bool value = {};
	check(shim()->get_IsAvailable(put(value)));
	return value;
}

template <typename T> String impl_IStorageProvider<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> String impl_IStorageProvider<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> impl_IStorageFolder2<T>::TryGetItemAsync(StringReference const & name) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> operation;
	check(shim()->abi_TryGetItemAsync(get(name), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> impl_IStorageFile2<T>::OpenAsync(Windows::Storage::FileAccessMode const accessMode, Windows::Storage::StorageOpenOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> operation;
	check(shim()->abi_OpenWithOptionsAsync(accessMode, options, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageStreamTransaction> impl_IStorageFile2<T>::OpenTransactedWriteAsync(Windows::Storage::StorageOpenOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageStreamTransaction> operation;
	check(shim()->abi_OpenTransactedWriteWithOptionsAsync(options, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IFileIOStatics<T>::ReadTextAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<String> textOperation;
	check(shim()->abi_ReadTextAsync(get(file), put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IFileIOStatics<T>::ReadTextAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncOperation<String> textOperation;
	check(shim()->abi_ReadTextWithEncodingAsync(get(file), encoding, put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteTextAsync(Windows::Storage::IStorageFile const & file, StringReference const & contents) const
{
	Windows::Foundation::IAsyncAction textOperation;
	check(shim()->abi_WriteTextAsync(get(file), get(contents), put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteTextAsync(Windows::Storage::IStorageFile const & file, StringReference const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction textOperation;
	check(shim()->abi_WriteTextWithEncodingAsync(get(file), get(contents), encoding, put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::AppendTextAsync(Windows::Storage::IStorageFile const & file, StringReference const & contents) const
{
	Windows::Foundation::IAsyncAction textOperation;
	check(shim()->abi_AppendTextAsync(get(file), get(contents), put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::AppendTextAsync(Windows::Storage::IStorageFile const & file, StringReference const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction textOperation;
	check(shim()->abi_AppendTextWithEncodingAsync(get(file), get(contents), encoding, put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> impl_IFileIOStatics<T>::ReadLinesAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> linesOperation;
	check(shim()->abi_ReadLinesAsync(get(file), put(linesOperation)));
	return linesOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> impl_IFileIOStatics<T>::ReadLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> linesOperation;
	check(shim()->abi_ReadLinesWithEncodingAsync(get(file), encoding, put(linesOperation)));
	return linesOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_WriteLinesAsync(get(file), get(lines), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_WriteLinesWithEncodingAsync(get(file), get(lines), encoding, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_AppendLinesAsync(get(file), get(lines), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_AppendLinesWithEncodingAsync(get(file), get(lines), encoding, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IFileIOStatics<T>::ReadBufferAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation;
	check(shim()->abi_ReadBufferAsync(get(file), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IFileIOStatics<T>::WriteBufferAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_WriteBufferAsync(get(file), get(buffer), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IPathIOStatics<T>::ReadTextAsync(StringReference const & absolutePath) const
{
	Windows::Foundation::IAsyncOperation<String> textOperation;
	check(shim()->abi_ReadTextAsync(get(absolutePath), put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IPathIOStatics<T>::ReadTextAsync(StringReference const & absolutePath, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncOperation<String> textOperation;
	check(shim()->abi_ReadTextWithEncodingAsync(get(absolutePath), encoding, put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteTextAsync(StringReference const & absolutePath, StringReference const & contents) const
{
	Windows::Foundation::IAsyncAction textOperation;
	check(shim()->abi_WriteTextAsync(get(absolutePath), get(contents), put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteTextAsync(StringReference const & absolutePath, StringReference const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction textOperation;
	check(shim()->abi_WriteTextWithEncodingAsync(get(absolutePath), get(contents), encoding, put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::AppendTextAsync(StringReference const & absolutePath, StringReference const & contents) const
{
	Windows::Foundation::IAsyncAction textOperation;
	check(shim()->abi_AppendTextAsync(get(absolutePath), get(contents), put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::AppendTextAsync(StringReference const & absolutePath, StringReference const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction textOperation;
	check(shim()->abi_AppendTextWithEncodingAsync(get(absolutePath), get(contents), encoding, put(textOperation)));
	return textOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> impl_IPathIOStatics<T>::ReadLinesAsync(StringReference const & absolutePath) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> linesOperation;
	check(shim()->abi_ReadLinesAsync(get(absolutePath), put(linesOperation)));
	return linesOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> impl_IPathIOStatics<T>::ReadLinesAsync(StringReference const & absolutePath, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> linesOperation;
	check(shim()->abi_ReadLinesWithEncodingAsync(get(absolutePath), encoding, put(linesOperation)));
	return linesOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteLinesAsync(StringReference const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_WriteLinesAsync(get(absolutePath), get(lines), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteLinesAsync(StringReference const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_WriteLinesWithEncodingAsync(get(absolutePath), get(lines), encoding, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::AppendLinesAsync(StringReference const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_AppendLinesAsync(get(absolutePath), get(lines), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::AppendLinesAsync(StringReference const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_AppendLinesWithEncodingAsync(get(absolutePath), get(lines), encoding, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> impl_IPathIOStatics<T>::ReadBufferAsync(StringReference const & absolutePath) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> operation;
	check(shim()->abi_ReadBufferAsync(get(absolutePath), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPathIOStatics<T>::WriteBufferAsync(StringReference const & absolutePath, Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_WriteBufferAsync(get(absolutePath), get(buffer), put(operation)));
	return operation;
}

template <typename T> void impl_ICachedFileManagerStatics<T>::DeferUpdates(Windows::Storage::IStorageFile const & file) const
{
	check(shim()->abi_DeferUpdates(get(file)));
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Provider::FileUpdateStatus> impl_ICachedFileManagerStatics<T>::CompleteUpdatesAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Provider::FileUpdateStatus> operation;
	check(shim()->abi_CompleteUpdatesAsync(get(file), put(operation)));
	return operation;
}

template <typename T> String impl_ISystemAudioProperties<T>::EncodingBitrate() const
{
	String value;
	check(shim()->get_EncodingBitrate(put(value)));
	return value;
}

template <typename T> String impl_ISystemGPSProperties<T>::LatitudeDecimal() const
{
	String value;
	check(shim()->get_LatitudeDecimal(put(value)));
	return value;
}

template <typename T> String impl_ISystemGPSProperties<T>::LongitudeDecimal() const
{
	String value;
	check(shim()->get_LongitudeDecimal(put(value)));
	return value;
}

template <typename T> String impl_ISystemImageProperties<T>::HorizontalSize() const
{
	String value;
	check(shim()->get_HorizontalSize(put(value)));
	return value;
}

template <typename T> String impl_ISystemImageProperties<T>::VerticalSize() const
{
	String value;
	check(shim()->get_VerticalSize(put(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::Duration() const
{
	String value;
	check(shim()->get_Duration(put(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::Producer() const
{
	String value;
	check(shim()->get_Producer(put(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::Publisher() const
{
	String value;
	check(shim()->get_Publisher(put(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::SubTitle() const
{
	String value;
	check(shim()->get_SubTitle(put(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::Writer() const
{
	String value;
	check(shim()->get_Writer(put(value)));
	return value;
}

template <typename T> String impl_ISystemMediaProperties<T>::Year() const
{
	String value;
	check(shim()->get_Year(put(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::AlbumArtist() const
{
	String value;
	check(shim()->get_AlbumArtist(put(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::AlbumTitle() const
{
	String value;
	check(shim()->get_AlbumTitle(put(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::Artist() const
{
	String value;
	check(shim()->get_Artist(put(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::Composer() const
{
	String value;
	check(shim()->get_Composer(put(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::Conductor() const
{
	String value;
	check(shim()->get_Conductor(put(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::DisplayArtist() const
{
	String value;
	check(shim()->get_DisplayArtist(put(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::Genre() const
{
	String value;
	check(shim()->get_Genre(put(value)));
	return value;
}

template <typename T> String impl_ISystemMusicProperties<T>::TrackNumber() const
{
	String value;
	check(shim()->get_TrackNumber(put(value)));
	return value;
}

template <typename T> String impl_ISystemPhotoProperties<T>::CameraManufacturer() const
{
	String value;
	check(shim()->get_CameraManufacturer(put(value)));
	return value;
}

template <typename T> String impl_ISystemPhotoProperties<T>::CameraModel() const
{
	String value;
	check(shim()->get_CameraModel(put(value)));
	return value;
}

template <typename T> String impl_ISystemPhotoProperties<T>::DateTaken() const
{
	String value;
	check(shim()->get_DateTaken(put(value)));
	return value;
}

template <typename T> String impl_ISystemPhotoProperties<T>::Orientation() const
{
	String value;
	check(shim()->get_Orientation(put(value)));
	return value;
}

template <typename T> String impl_ISystemPhotoProperties<T>::PeopleNames() const
{
	String value;
	check(shim()->get_PeopleNames(put(value)));
	return value;
}

template <typename T> String impl_ISystemVideoProperties<T>::Director() const
{
	String value;
	check(shim()->get_Director(put(value)));
	return value;
}

template <typename T> String impl_ISystemVideoProperties<T>::FrameHeight() const
{
	String value;
	check(shim()->get_FrameHeight(put(value)));
	return value;
}

template <typename T> String impl_ISystemVideoProperties<T>::FrameWidth() const
{
	String value;
	check(shim()->get_FrameWidth(put(value)));
	return value;
}

template <typename T> String impl_ISystemVideoProperties<T>::Orientation() const
{
	String value;
	check(shim()->get_Orientation(put(value)));
	return value;
}

template <typename T> String impl_ISystemVideoProperties<T>::TotalBitrate() const
{
	String value;
	check(shim()->get_TotalBitrate(put(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::Author() const
{
	String value;
	check(shim()->get_Author(put(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::Comment() const
{
	String value;
	check(shim()->get_Comment(put(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::ItemNameDisplay() const
{
	String value;
	check(shim()->get_ItemNameDisplay(put(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::Keywords() const
{
	String value;
	check(shim()->get_Keywords(put(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::Rating() const
{
	String value;
	check(shim()->get_Rating(put(value)));
	return value;
}

template <typename T> String impl_ISystemProperties<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> Windows::Storage::SystemAudioProperties impl_ISystemProperties<T>::Audio() const
{
	Windows::Storage::SystemAudioProperties value = nullptr;
	check(shim()->get_Audio(put(value)));
	return value;
}

template <typename T> Windows::Storage::SystemGPSProperties impl_ISystemProperties<T>::GPS() const
{
	Windows::Storage::SystemGPSProperties value = nullptr;
	check(shim()->get_GPS(put(value)));
	return value;
}

template <typename T> Windows::Storage::SystemMediaProperties impl_ISystemProperties<T>::Media() const
{
	Windows::Storage::SystemMediaProperties value = nullptr;
	check(shim()->get_Media(put(value)));
	return value;
}

template <typename T> Windows::Storage::SystemMusicProperties impl_ISystemProperties<T>::Music() const
{
	Windows::Storage::SystemMusicProperties value = nullptr;
	check(shim()->get_Music(put(value)));
	return value;
}

template <typename T> Windows::Storage::SystemPhotoProperties impl_ISystemProperties<T>::Photo() const
{
	Windows::Storage::SystemPhotoProperties value = nullptr;
	check(shim()->get_Photo(put(value)));
	return value;
}

template <typename T> Windows::Storage::SystemVideoProperties impl_ISystemProperties<T>::Video() const
{
	Windows::Storage::SystemVideoProperties value = nullptr;
	check(shim()->get_Video(put(value)));
	return value;
}

template <typename T> Windows::Storage::SystemImageProperties impl_ISystemProperties<T>::Image() const
{
	Windows::Storage::SystemImageProperties value = nullptr;
	check(shim()->get_Image(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_IStorageStreamTransaction<T>::Stream() const
{
	Windows::Storage::Streams::IRandomAccessStream value;
	check(shim()->get_Stream(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageStreamTransaction<T>::CommitAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_CommitAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Storage::ApplicationData impl_IApplicationDataStatics<T>::Current() const
{
	Windows::Storage::ApplicationData value = nullptr;
	check(shim()->get_Current(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::ApplicationData> impl_IApplicationDataStatics2<T>::GetForUserAsync(Windows::System::User const & user) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::ApplicationData> getForUserOperation;
	check(shim()->abi_GetForUserAsync(get(user), put(getForUserOperation)));
	return getForUserOperation;
}

template <typename T> unsigned impl_IApplicationData<T>::Version() const
{
	unsigned value = {};
	check(shim()->get_Version(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationData<T>::SetVersionAsync(unsigned const desiredVersion, Windows::Storage::IApplicationDataSetVersionHandler const & handler) const
{
	Windows::Foundation::IAsyncAction setVersionOperation;
	check(shim()->abi_SetVersionAsync(desiredVersion, get(handler), put(setVersionOperation)));
	return setVersionOperation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncAction impl_IApplicationData<T>::SetVersionAsync(unsigned const desiredVersion, F handler) const
{
	return SetVersionAsync(desiredVersion, Windows::Storage::ApplicationDataSetVersionHandler(handler));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationData<T>::ClearAsync() const
{
	Windows::Foundation::IAsyncAction clearOperation;
	check(shim()->abi_ClearAllAsync(put(clearOperation)));
	return clearOperation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationData<T>::ClearAsync(Windows::Storage::ApplicationDataLocality const locality) const
{
	Windows::Foundation::IAsyncAction clearOperation;
	check(shim()->abi_ClearAsync(locality, put(clearOperation)));
	return clearOperation;
}

template <typename T> Windows::Storage::ApplicationDataContainer impl_IApplicationData<T>::LocalSettings() const
{
	Windows::Storage::ApplicationDataContainer value = nullptr;
	check(shim()->get_LocalSettings(put(value)));
	return value;
}

template <typename T> Windows::Storage::ApplicationDataContainer impl_IApplicationData<T>::RoamingSettings() const
{
	Windows::Storage::ApplicationDataContainer value = nullptr;
	check(shim()->get_RoamingSettings(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IApplicationData<T>::LocalFolder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_LocalFolder(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IApplicationData<T>::RoamingFolder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_RoamingFolder(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IApplicationData<T>::TemporaryFolder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_TemporaryFolder(put(value)));
	return value;
}

template <typename T> long long impl_IApplicationData<T>::DataChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::ApplicationData, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_DataChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IApplicationData<T>::DataChanged(F handler) const
{
	return DataChanged(Windows::Foundation::TypedEventHandler<Windows::Storage::ApplicationData, IInspectable>(handler));
}

template <typename T> void impl_IApplicationData<T>::DataChanged(long long const token) const
{
	check(shim()->remove_DataChanged(token));
}

template <typename T> void impl_IApplicationData<T>::SignalDataChanged() const
{
	check(shim()->abi_SignalDataChanged());
}

template <typename T> unsigned long long impl_IApplicationData<T>::RoamingStorageQuota() const
{
	unsigned long long value = {};
	check(shim()->get_RoamingStorageQuota(&value));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IApplicationData2<T>::LocalCacheFolder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_LocalCacheFolder(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IApplicationData3<T>::GetPublisherCacheFolder(StringReference const & folderName) const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->abi_GetPublisherCacheFolder(get(folderName), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationData3<T>::ClearPublisherCacheFolderAsync(StringReference const & folderName) const
{
	Windows::Foundation::IAsyncAction clearOperation;
	check(shim()->abi_ClearPublisherCacheFolderAsync(get(folderName), put(clearOperation)));
	return clearOperation;
}

template <typename T> Windows::Storage::StorageFolder impl_IApplicationData3<T>::SharedLocalFolder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_SharedLocalFolder(put(value)));
	return value;
}

template <typename T> unsigned impl_ISetVersionRequest<T>::CurrentVersion() const
{
	unsigned currentVersion = {};
	check(shim()->get_CurrentVersion(&currentVersion));
	return currentVersion;
}

template <typename T> unsigned impl_ISetVersionRequest<T>::DesiredVersion() const
{
	unsigned desiredVersion = {};
	check(shim()->get_DesiredVersion(&desiredVersion));
	return desiredVersion;
}

template <typename T> Windows::Storage::SetVersionDeferral impl_ISetVersionRequest<T>::GetDeferral() const
{
	Windows::Storage::SetVersionDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> void impl_ISetVersionDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> String impl_IApplicationDataContainer<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::Storage::ApplicationDataLocality impl_IApplicationDataContainer<T>::Locality() const
{
	Windows::Storage::ApplicationDataLocality value = {};
	check(shim()->get_Locality(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_IApplicationDataContainer<T>::Values() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check(shim()->get_Values(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, Windows::Storage::ApplicationDataContainer> impl_IApplicationDataContainer<T>::Containers() const
{
	Windows::Foundation::Collections::IMapView<String, Windows::Storage::ApplicationDataContainer> value;
	check(shim()->get_Containers(put(value)));
	return value;
}

template <typename T> Windows::Storage::ApplicationDataContainer impl_IApplicationDataContainer<T>::CreateContainer(StringReference const & name, Windows::Storage::ApplicationDataCreateDisposition const disposition) const
{
	Windows::Storage::ApplicationDataContainer container = nullptr;
	check(shim()->abi_CreateContainer(get(name), disposition, put(container)));
	return container;
}

template <typename T> void impl_IApplicationDataContainer<T>::DeleteContainer(StringReference const & name) const
{
	check(shim()->abi_DeleteContainer(get(name)));
}

}}}

namespace winrt { namespace Windows { namespace Storage { namespace AccessCache {

template <typename T> Windows::Storage::AccessCache::AccessListEntry impl_IItemRemovedEventArgs<T>::RemovedEntry() const
{
	Windows::Storage::AccessCache::AccessListEntry value = {};
	check(shim()->get_RemovedEntry(&value));
	return value;
}

template <typename T> String impl_IStorageItemAccessList<T>::Add(Windows::Storage::IStorageItem const & file) const
{
	String token;
	check(shim()->abi_AddOverloadDefaultMetadata(get(file), put(token)));
	return token;
}

template <typename T> String impl_IStorageItemAccessList<T>::Add(Windows::Storage::IStorageItem const & file, StringReference const & metadata) const
{
	String token;
	check(shim()->abi_Add(get(file), get(metadata), put(token)));
	return token;
}

template <typename T> void impl_IStorageItemAccessList<T>::AddOrReplace(StringReference const & token, Windows::Storage::IStorageItem const & file) const
{
	check(shim()->abi_AddOrReplaceOverloadDefaultMetadata(get(token), get(file)));
}

template <typename T> void impl_IStorageItemAccessList<T>::AddOrReplace(StringReference const & token, Windows::Storage::IStorageItem const & file, StringReference const & metadata) const
{
	check(shim()->abi_AddOrReplace(get(token), get(file), get(metadata)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> impl_IStorageItemAccessList<T>::GetItemAsync(StringReference const & token) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> operation;
	check(shim()->abi_GetItemAsync(get(token), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageItemAccessList<T>::GetFileAsync(StringReference const & token) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_GetFileAsync(get(token), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageItemAccessList<T>::GetFolderAsync(StringReference const & token) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check(shim()->abi_GetFolderAsync(get(token), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> impl_IStorageItemAccessList<T>::GetItemAsync(StringReference const & token, Windows::Storage::AccessCache::AccessCacheOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::IStorageItem> operation;
	check(shim()->abi_GetItemWithOptionsAsync(get(token), options, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IStorageItemAccessList<T>::GetFileAsync(StringReference const & token, Windows::Storage::AccessCache::AccessCacheOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> operation;
	check(shim()->abi_GetFileWithOptionsAsync(get(token), options, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IStorageItemAccessList<T>::GetFolderAsync(StringReference const & token, Windows::Storage::AccessCache::AccessCacheOptions const options) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> operation;
	check(shim()->abi_GetFolderWithOptionsAsync(get(token), options, put(operation)));
	return operation;
}

template <typename T> void impl_IStorageItemAccessList<T>::Remove(StringReference const & token) const
{
	check(shim()->abi_Remove(get(token)));
}

template <typename T> bool impl_IStorageItemAccessList<T>::ContainsItem(StringReference const & token) const
{
	bool value = {};
	check(shim()->abi_ContainsItem(get(token), put(value)));
	return value;
}

template <typename T> void impl_IStorageItemAccessList<T>::Clear() const
{
	check(shim()->abi_Clear());
}

template <typename T> bool impl_IStorageItemAccessList<T>::CheckAccess(Windows::Storage::IStorageItem const & file) const
{
	bool value = {};
	check(shim()->abi_CheckAccess(get(file), put(value)));
	return value;
}

template <typename T> Windows::Storage::AccessCache::AccessListEntryView impl_IStorageItemAccessList<T>::Entries() const
{
	Windows::Storage::AccessCache::AccessListEntryView entries = nullptr;
	check(shim()->get_Entries(put(entries)));
	return entries;
}

template <typename T> unsigned impl_IStorageItemAccessList<T>::MaximumItemsAllowed() const
{
	unsigned value = {};
	check(shim()->get_MaximumItemsAllowed(&value));
	return value;
}

template <typename T> long long impl_IStorageItemMostRecentlyUsedList<T>::ItemRemoved(Windows::Foundation::ITypedEventHandler<Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList, Windows::Storage::AccessCache::ItemRemovedEventArgs> const & handler) const
{
	long long eventCookie = {};
	check(shim()->add_ItemRemoved(get(handler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IStorageItemMostRecentlyUsedList<T>::ItemRemoved(F handler) const
{
	return ItemRemoved(Windows::Foundation::TypedEventHandler<Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList, Windows::Storage::AccessCache::ItemRemovedEventArgs>(handler));
}

template <typename T> void impl_IStorageItemMostRecentlyUsedList<T>::ItemRemoved(long long const eventCookie) const
{
	check(shim()->remove_ItemRemoved(eventCookie));
}

template <typename T> String impl_IStorageItemMostRecentlyUsedList2<T>::Add(Windows::Storage::IStorageItem const & file, StringReference const & metadata, Windows::Storage::AccessCache::RecentStorageItemVisibility const visibility) const
{
	String token;
	check(shim()->abi_AddWithMetadataAndVisibility(get(file), get(metadata), visibility, put(token)));
	return token;
}

template <typename T> void impl_IStorageItemMostRecentlyUsedList2<T>::AddOrReplace(StringReference const & token, Windows::Storage::IStorageItem const & file, StringReference const & metadata, Windows::Storage::AccessCache::RecentStorageItemVisibility const visibility) const
{
	check(shim()->abi_AddOrReplaceWithMetadataAndVisibility(get(token), get(file), get(metadata), visibility));
}

template <typename T> Windows::Storage::AccessCache::StorageItemAccessList impl_IStorageApplicationPermissionsStatics<T>::FutureAccessList() const
{
	Windows::Storage::AccessCache::StorageItemAccessList value = nullptr;
	check(shim()->get_FutureAccessList(put(value)));
	return value;
}

template <typename T> Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList impl_IStorageApplicationPermissionsStatics<T>::MostRecentlyUsedList() const
{
	Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList value = nullptr;
	check(shim()->get_MostRecentlyUsedList(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace BulkAccess {

template <typename T> Windows::Storage::FileProperties::MusicProperties impl_IStorageItemInformation<T>::MusicProperties() const
{
	Windows::Storage::FileProperties::MusicProperties value = nullptr;
	check(shim()->get_MusicProperties(put(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::VideoProperties impl_IStorageItemInformation<T>::VideoProperties() const
{
	Windows::Storage::FileProperties::VideoProperties value = nullptr;
	check(shim()->get_VideoProperties(put(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::ImageProperties impl_IStorageItemInformation<T>::ImageProperties() const
{
	Windows::Storage::FileProperties::ImageProperties value = nullptr;
	check(shim()->get_ImageProperties(put(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::DocumentProperties impl_IStorageItemInformation<T>::DocumentProperties() const
{
	Windows::Storage::FileProperties::DocumentProperties value = nullptr;
	check(shim()->get_DocumentProperties(put(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::BasicProperties impl_IStorageItemInformation<T>::BasicProperties() const
{
	Windows::Storage::FileProperties::BasicProperties value = nullptr;
	check(shim()->get_BasicProperties(put(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::StorageItemThumbnail impl_IStorageItemInformation<T>::Thumbnail() const
{
	Windows::Storage::FileProperties::StorageItemThumbnail value = nullptr;
	check(shim()->get_Thumbnail(put(value)));
	return value;
}

template <typename T> long long impl_IStorageItemInformation<T>::ThumbnailUpdated(Windows::Foundation::ITypedEventHandler<Windows::Storage::BulkAccess::IStorageItemInformation, IInspectable> const & changedHandler) const
{
	long long eventCookie = {};
	check(shim()->add_ThumbnailUpdated(get(changedHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IStorageItemInformation<T>::ThumbnailUpdated(F changedHandler) const
{
	return ThumbnailUpdated(Windows::Foundation::TypedEventHandler<Windows::Storage::BulkAccess::IStorageItemInformation, IInspectable>(changedHandler));
}

template <typename T> void impl_IStorageItemInformation<T>::ThumbnailUpdated(long long const eventCookie) const
{
	check(shim()->remove_ThumbnailUpdated(eventCookie));
}

template <typename T> long long impl_IStorageItemInformation<T>::PropertiesUpdated(Windows::Foundation::ITypedEventHandler<Windows::Storage::BulkAccess::IStorageItemInformation, IInspectable> const & changedHandler) const
{
	long long eventCookie = {};
	check(shim()->add_PropertiesUpdated(get(changedHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IStorageItemInformation<T>::PropertiesUpdated(F changedHandler) const
{
	return PropertiesUpdated(Windows::Foundation::TypedEventHandler<Windows::Storage::BulkAccess::IStorageItemInformation, IInspectable>(changedHandler));
}

template <typename T> void impl_IStorageItemInformation<T>::PropertiesUpdated(long long const eventCookie) const
{
	check(shim()->remove_PropertiesUpdated(eventCookie));
}

template <typename T> Windows::Storage::BulkAccess::FileInformationFactory impl_IFileInformationFactoryFactory<T>::CreateWithMode(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode const mode) const
{
	Windows::Storage::BulkAccess::FileInformationFactory value = nullptr;
	check(shim()->abi_CreateWithMode(get(queryResult), mode, put(value)));
	return value;
}

template <typename T> Windows::Storage::BulkAccess::FileInformationFactory impl_IFileInformationFactoryFactory<T>::CreateWithModeAndSize(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedThumbnailSize) const
{
	Windows::Storage::BulkAccess::FileInformationFactory value = nullptr;
	check(shim()->abi_CreateWithModeAndSize(get(queryResult), mode, requestedThumbnailSize, put(value)));
	return value;
}

template <typename T> Windows::Storage::BulkAccess::FileInformationFactory impl_IFileInformationFactoryFactory<T>::CreateWithModeAndSizeAndOptions(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedThumbnailSize, Windows::Storage::FileProperties::ThumbnailOptions const thumbnailOptions) const
{
	Windows::Storage::BulkAccess::FileInformationFactory value = nullptr;
	check(shim()->abi_CreateWithModeAndSizeAndOptions(get(queryResult), mode, requestedThumbnailSize, thumbnailOptions, put(value)));
	return value;
}

template <typename T> Windows::Storage::BulkAccess::FileInformationFactory impl_IFileInformationFactoryFactory<T>::CreateWithModeAndSizeAndOptionsAndFlags(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedThumbnailSize, Windows::Storage::FileProperties::ThumbnailOptions const thumbnailOptions, bool const delayLoad) const
{
	Windows::Storage::BulkAccess::FileInformationFactory value = nullptr;
	check(shim()->abi_CreateWithModeAndSizeAndOptionsAndFlags(get(queryResult), mode, requestedThumbnailSize, thumbnailOptions, delayLoad, put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::IStorageItemInformation>> impl_IFileInformationFactory<T>::GetItemsAsync(unsigned const startIndex, unsigned const maxItemsToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::IStorageItemInformation>> operation;
	check(shim()->abi_GetItemsAsync(startIndex, maxItemsToRetrieve, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::IStorageItemInformation>> impl_IFileInformationFactory<T>::GetItemsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::IStorageItemInformation>> operation;
	check(shim()->abi_GetItemsAsyncDefaultStartAndCount(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FileInformation>> impl_IFileInformationFactory<T>::GetFilesAsync(unsigned const startIndex, unsigned const maxItemsToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FileInformation>> operation;
	check(shim()->abi_GetFilesAsync(startIndex, maxItemsToRetrieve, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FileInformation>> impl_IFileInformationFactory<T>::GetFilesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FileInformation>> operation;
	check(shim()->abi_GetFilesAsyncDefaultStartAndCount(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FolderInformation>> impl_IFileInformationFactory<T>::GetFoldersAsync(unsigned const startIndex, unsigned const maxItemsToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FolderInformation>> operation;
	check(shim()->abi_GetFoldersAsync(startIndex, maxItemsToRetrieve, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FolderInformation>> impl_IFileInformationFactory<T>::GetFoldersAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::BulkAccess::FolderInformation>> operation;
	check(shim()->abi_GetFoldersAsyncDefaultStartAndCount(put(operation)));
	return operation;
}

template <typename T> IInspectable impl_IFileInformationFactory<T>::GetVirtualizedItemsVector() const
{
	IInspectable vector;
	check(shim()->abi_GetVirtualizedItemsVector(put(vector)));
	return vector;
}

template <typename T> IInspectable impl_IFileInformationFactory<T>::GetVirtualizedFilesVector() const
{
	IInspectable vector;
	check(shim()->abi_GetVirtualizedFilesVector(put(vector)));
	return vector;
}

template <typename T> IInspectable impl_IFileInformationFactory<T>::GetVirtualizedFoldersVector() const
{
	IInspectable vector;
	check(shim()->abi_GetVirtualizedFoldersVector(put(vector)));
	return vector;
}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Compression {

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ICompressor<T>::FinishAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_FinishAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_ICompressor<T>::DetachStream() const
{
	Windows::Storage::Streams::IOutputStream stream;
	check(shim()->abi_DetachStream(put(stream)));
	return stream;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IDecompressor<T>::DetachStream() const
{
	Windows::Storage::Streams::IInputStream stream;
	check(shim()->abi_DetachStream(put(stream)));
	return stream;
}

template <typename T> Windows::Storage::Compression::Compressor impl_ICompressorFactory<T>::CreateCompressor(Windows::Storage::Streams::IOutputStream const & underlyingStream) const
{
	Windows::Storage::Compression::Compressor createdCompressor = nullptr;
	check(shim()->abi_CreateCompressor(get(underlyingStream), put(createdCompressor)));
	return createdCompressor;
}

template <typename T> Windows::Storage::Compression::Compressor impl_ICompressorFactory<T>::CreateCompressorEx(Windows::Storage::Streams::IOutputStream const & underlyingStream, Windows::Storage::Compression::CompressAlgorithm const algorithm, unsigned const blockSize) const
{
	Windows::Storage::Compression::Compressor createdCompressor = nullptr;
	check(shim()->abi_CreateCompressorEx(get(underlyingStream), algorithm, blockSize, put(createdCompressor)));
	return createdCompressor;
}

template <typename T> Windows::Storage::Compression::Decompressor impl_IDecompressorFactory<T>::CreateDecompressor(Windows::Storage::Streams::IInputStream const & underlyingStream) const
{
	Windows::Storage::Compression::Decompressor createdDecompressor = nullptr;
	check(shim()->abi_CreateDecompressor(get(underlyingStream), put(createdDecompressor)));
	return createdDecompressor;
}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace FileProperties {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geopoint> impl_IGeotagHelperStatics<T>::GetGeotagAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geopoint> operation;
	check(shim()->abi_GetGeotagAsync(get(file), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IGeotagHelperStatics<T>::SetGeotagFromGeolocatorAsync(Windows::Storage::IStorageFile const & file, Windows::Devices::Geolocation::Geolocator const & geolocator) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_SetGeotagFromGeolocatorAsync(get(file), get(geolocator), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IGeotagHelperStatics<T>::SetGeotagAsync(Windows::Storage::IStorageFile const & file, Windows::Devices::Geolocation::Geopoint const & geopoint) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_SetGeotagAsync(get(file), get(geopoint), put(operation)));
	return operation;
}

template <typename T> unsigned impl_IThumbnailProperties<T>::OriginalWidth() const
{
	unsigned value = {};
	check(shim()->get_OriginalWidth(&value));
	return value;
}

template <typename T> unsigned impl_IThumbnailProperties<T>::OriginalHeight() const
{
	unsigned value = {};
	check(shim()->get_OriginalHeight(&value));
	return value;
}

template <typename T> bool impl_IThumbnailProperties<T>::ReturnedSmallerCachedSize() const
{
	bool value = {};
	check(shim()->get_ReturnedSmallerCachedSize(put(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::ThumbnailType impl_IThumbnailProperties<T>::Type() const
{
	Windows::Storage::FileProperties::ThumbnailType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<String, IInspectable>> impl_IStorageItemExtraProperties<T>::RetrievePropertiesAsync(Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMap<String, IInspectable>> operation;
	check(shim()->abi_RetrievePropertiesAsync(get(propertiesToRetrieve), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItemExtraProperties<T>::SavePropertiesAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, IInspectable>> const & propertiesToSave) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_SavePropertiesAsync(get(propertiesToSave), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IStorageItemExtraProperties<T>::SavePropertiesAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_SavePropertiesAsyncOverloadDefault(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::MusicProperties> impl_IStorageItemContentProperties<T>::GetMusicPropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::MusicProperties> operation;
	check(shim()->abi_GetMusicPropertiesAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::VideoProperties> impl_IStorageItemContentProperties<T>::GetVideoPropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::VideoProperties> operation;
	check(shim()->abi_GetVideoPropertiesAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::ImageProperties> impl_IStorageItemContentProperties<T>::GetImagePropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::ImageProperties> operation;
	check(shim()->abi_GetImagePropertiesAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::DocumentProperties> impl_IStorageItemContentProperties<T>::GetDocumentPropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::FileProperties::DocumentProperties> operation;
	check(shim()->abi_GetDocumentPropertiesAsync(put(operation)));
	return operation;
}

template <typename T> String impl_IMusicProperties<T>::Album() const
{
	String value;
	check(shim()->get_Album(put(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Album(StringReference const & value) const
{
	check(shim()->put_Album(get(value)));
}

template <typename T> String impl_IMusicProperties<T>::Artist() const
{
	String value;
	check(shim()->get_Artist(put(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Artist(StringReference const & value) const
{
	check(shim()->put_Artist(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IMusicProperties<T>::Genre() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Genre(put(value)));
	return value;
}

template <typename T> unsigned impl_IMusicProperties<T>::TrackNumber() const
{
	unsigned value = {};
	check(shim()->get_TrackNumber(&value));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::TrackNumber(unsigned const value) const
{
	check(shim()->put_TrackNumber(value));
}

template <typename T> String impl_IMusicProperties<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> unsigned impl_IMusicProperties<T>::Rating() const
{
	unsigned value = {};
	check(shim()->get_Rating(&value));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Rating(unsigned const value) const
{
	check(shim()->put_Rating(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IMusicProperties<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Duration(&value));
	return value;
}

template <typename T> unsigned impl_IMusicProperties<T>::Bitrate() const
{
	unsigned value = {};
	check(shim()->get_Bitrate(&value));
	return value;
}

template <typename T> String impl_IMusicProperties<T>::AlbumArtist() const
{
	String value;
	check(shim()->get_AlbumArtist(put(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::AlbumArtist(StringReference const & value) const
{
	check(shim()->put_AlbumArtist(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IMusicProperties<T>::Composers() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Composers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IMusicProperties<T>::Conductors() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Conductors(put(value)));
	return value;
}

template <typename T> String impl_IMusicProperties<T>::Subtitle() const
{
	String value;
	check(shim()->get_Subtitle(put(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Subtitle(StringReference const & value) const
{
	check(shim()->put_Subtitle(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IMusicProperties<T>::Producers() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Producers(put(value)));
	return value;
}

template <typename T> String impl_IMusicProperties<T>::Publisher() const
{
	String value;
	check(shim()->get_Publisher(put(value)));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Publisher(StringReference const & value) const
{
	check(shim()->put_Publisher(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IMusicProperties<T>::Writers() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Writers(put(value)));
	return value;
}

template <typename T> unsigned impl_IMusicProperties<T>::Year() const
{
	unsigned value = {};
	check(shim()->get_Year(&value));
	return value;
}

template <typename T> void impl_IMusicProperties<T>::Year(unsigned const value) const
{
	check(shim()->put_Year(value));
}

template <typename T> unsigned impl_IImageProperties<T>::Rating() const
{
	unsigned value = {};
	check(shim()->get_Rating(&value));
	return value;
}

template <typename T> void impl_IImageProperties<T>::Rating(unsigned const value) const
{
	check(shim()->put_Rating(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IImageProperties<T>::Keywords() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Keywords(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IImageProperties<T>::DateTaken() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_DateTaken(&value));
	return value;
}

template <typename T> void impl_IImageProperties<T>::DateTaken(Windows::Foundation::DateTime const & value) const
{
	check(shim()->put_DateTaken(value));
}

template <typename T> unsigned impl_IImageProperties<T>::Width() const
{
	unsigned value = {};
	check(shim()->get_Width(&value));
	return value;
}

template <typename T> unsigned impl_IImageProperties<T>::Height() const
{
	unsigned value = {};
	check(shim()->get_Height(&value));
	return value;
}

template <typename T> String impl_IImageProperties<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IImageProperties<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> Windows::Foundation::IReference<double> impl_IImageProperties<T>::Latitude() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_Latitude(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IImageProperties<T>::Longitude() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_Longitude(put(value)));
	return value;
}

template <typename T> String impl_IImageProperties<T>::CameraManufacturer() const
{
	String value;
	check(shim()->get_CameraManufacturer(put(value)));
	return value;
}

template <typename T> void impl_IImageProperties<T>::CameraManufacturer(StringReference const & value) const
{
	check(shim()->put_CameraManufacturer(get(value)));
}

template <typename T> String impl_IImageProperties<T>::CameraModel() const
{
	String value;
	check(shim()->get_CameraModel(put(value)));
	return value;
}

template <typename T> void impl_IImageProperties<T>::CameraModel(StringReference const & value) const
{
	check(shim()->put_CameraModel(get(value)));
}

template <typename T> Windows::Storage::FileProperties::PhotoOrientation impl_IImageProperties<T>::Orientation() const
{
	Windows::Storage::FileProperties::PhotoOrientation value = {};
	check(shim()->get_Orientation(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IImageProperties<T>::PeopleNames() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_PeopleNames(put(value)));
	return value;
}

template <typename T> unsigned impl_IVideoProperties<T>::Rating() const
{
	unsigned value = {};
	check(shim()->get_Rating(&value));
	return value;
}

template <typename T> void impl_IVideoProperties<T>::Rating(unsigned const value) const
{
	check(shim()->put_Rating(value));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVideoProperties<T>::Keywords() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Keywords(put(value)));
	return value;
}

template <typename T> unsigned impl_IVideoProperties<T>::Width() const
{
	unsigned value = {};
	check(shim()->get_Width(&value));
	return value;
}

template <typename T> unsigned impl_IVideoProperties<T>::Height() const
{
	unsigned value = {};
	check(shim()->get_Height(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IVideoProperties<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Duration(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IVideoProperties<T>::Latitude() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_Latitude(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IVideoProperties<T>::Longitude() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_Longitude(put(value)));
	return value;
}

template <typename T> String impl_IVideoProperties<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IVideoProperties<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> String impl_IVideoProperties<T>::Subtitle() const
{
	String value;
	check(shim()->get_Subtitle(put(value)));
	return value;
}

template <typename T> void impl_IVideoProperties<T>::Subtitle(StringReference const & value) const
{
	check(shim()->put_Subtitle(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVideoProperties<T>::Producers() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Producers(put(value)));
	return value;
}

template <typename T> String impl_IVideoProperties<T>::Publisher() const
{
	String value;
	check(shim()->get_Publisher(put(value)));
	return value;
}

template <typename T> void impl_IVideoProperties<T>::Publisher(StringReference const & value) const
{
	check(shim()->put_Publisher(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVideoProperties<T>::Writers() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Writers(put(value)));
	return value;
}

template <typename T> unsigned impl_IVideoProperties<T>::Year() const
{
	unsigned value = {};
	check(shim()->get_Year(&value));
	return value;
}

template <typename T> void impl_IVideoProperties<T>::Year(unsigned const value) const
{
	check(shim()->put_Year(value));
}

template <typename T> unsigned impl_IVideoProperties<T>::Bitrate() const
{
	unsigned value = {};
	check(shim()->get_Bitrate(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IVideoProperties<T>::Directors() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Directors(put(value)));
	return value;
}

template <typename T> Windows::Storage::FileProperties::VideoOrientation impl_IVideoProperties<T>::Orientation() const
{
	Windows::Storage::FileProperties::VideoOrientation value = {};
	check(shim()->get_Orientation(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IDocumentProperties<T>::Author() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Author(put(value)));
	return value;
}

template <typename T> String impl_IDocumentProperties<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IDocumentProperties<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IDocumentProperties<T>::Keywords() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_Keywords(put(value)));
	return value;
}

template <typename T> String impl_IDocumentProperties<T>::Comment() const
{
	String value;
	check(shim()->get_Comment(put(value)));
	return value;
}

template <typename T> void impl_IDocumentProperties<T>::Comment(StringReference const & value) const
{
	check(shim()->put_Comment(get(value)));
}

template <typename T> unsigned long long impl_IBasicProperties<T>::Size() const
{
	unsigned long long value = {};
	check(shim()->get_Size(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IBasicProperties<T>::DateModified() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_DateModified(&value));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IBasicProperties<T>::ItemDate() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_ItemDate(&value));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Pickers {

template <typename T> Windows::Storage::Pickers::PickerViewMode impl_IFileOpenPicker<T>::ViewMode() const
{
	Windows::Storage::Pickers::PickerViewMode value = {};
	check(shim()->get_ViewMode(&value));
	return value;
}

template <typename T> void impl_IFileOpenPicker<T>::ViewMode(Windows::Storage::Pickers::PickerViewMode const value) const
{
	check(shim()->put_ViewMode(value));
}

template <typename T> String impl_IFileOpenPicker<T>::SettingsIdentifier() const
{
	String value;
	check(shim()->get_SettingsIdentifier(put(value)));
	return value;
}

template <typename T> void impl_IFileOpenPicker<T>::SettingsIdentifier(StringReference const & value) const
{
	check(shim()->put_SettingsIdentifier(get(value)));
}

template <typename T> Windows::Storage::Pickers::PickerLocationId impl_IFileOpenPicker<T>::SuggestedStartLocation() const
{
	Windows::Storage::Pickers::PickerLocationId value = {};
	check(shim()->get_SuggestedStartLocation(&value));
	return value;
}

template <typename T> void impl_IFileOpenPicker<T>::SuggestedStartLocation(Windows::Storage::Pickers::PickerLocationId const value) const
{
	check(shim()->put_SuggestedStartLocation(value));
}

template <typename T> String impl_IFileOpenPicker<T>::CommitButtonText() const
{
	String value;
	check(shim()->get_CommitButtonText(put(value)));
	return value;
}

template <typename T> void impl_IFileOpenPicker<T>::CommitButtonText(StringReference const & value) const
{
	check(shim()->put_CommitButtonText(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IFileOpenPicker<T>::FileTypeFilter() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_FileTypeFilter(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IFileOpenPicker<T>::PickSingleFileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> pickSingleFileOperation;
	check(shim()->abi_PickSingleFileAsync(put(pickSingleFileOperation)));
	return pickSingleFileOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IFileOpenPicker<T>::PickMultipleFilesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> pickMultipleFilesOperation;
	check(shim()->abi_PickMultipleFilesAsync(put(pickMultipleFilesOperation)));
	return pickMultipleFilesOperation;
}

template <typename T> String impl_IFileSavePicker<T>::SettingsIdentifier() const
{
	String value;
	check(shim()->get_SettingsIdentifier(put(value)));
	return value;
}

template <typename T> void impl_IFileSavePicker<T>::SettingsIdentifier(StringReference const & value) const
{
	check(shim()->put_SettingsIdentifier(get(value)));
}

template <typename T> Windows::Storage::Pickers::PickerLocationId impl_IFileSavePicker<T>::SuggestedStartLocation() const
{
	Windows::Storage::Pickers::PickerLocationId value = {};
	check(shim()->get_SuggestedStartLocation(&value));
	return value;
}

template <typename T> void impl_IFileSavePicker<T>::SuggestedStartLocation(Windows::Storage::Pickers::PickerLocationId const value) const
{
	check(shim()->put_SuggestedStartLocation(value));
}

template <typename T> String impl_IFileSavePicker<T>::CommitButtonText() const
{
	String value;
	check(shim()->get_CommitButtonText(put(value)));
	return value;
}

template <typename T> void impl_IFileSavePicker<T>::CommitButtonText(StringReference const & value) const
{
	check(shim()->put_CommitButtonText(get(value)));
}

template <typename T> Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVector<String>> impl_IFileSavePicker<T>::FileTypeChoices() const
{
	Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVector<String>> value;
	check(shim()->get_FileTypeChoices(put(value)));
	return value;
}

template <typename T> String impl_IFileSavePicker<T>::DefaultFileExtension() const
{
	String value;
	check(shim()->get_DefaultFileExtension(put(value)));
	return value;
}

template <typename T> void impl_IFileSavePicker<T>::DefaultFileExtension(StringReference const & value) const
{
	check(shim()->put_DefaultFileExtension(get(value)));
}

template <typename T> Windows::Storage::StorageFile impl_IFileSavePicker<T>::SuggestedSaveFile() const
{
	Windows::Storage::StorageFile value = nullptr;
	check(shim()->get_SuggestedSaveFile(put(value)));
	return value;
}

template <typename T> void impl_IFileSavePicker<T>::SuggestedSaveFile(Windows::Storage::StorageFile const & value) const
{
	check(shim()->put_SuggestedSaveFile(get(value)));
}

template <typename T> String impl_IFileSavePicker<T>::SuggestedFileName() const
{
	String value;
	check(shim()->get_SuggestedFileName(put(value)));
	return value;
}

template <typename T> void impl_IFileSavePicker<T>::SuggestedFileName(StringReference const & value) const
{
	check(shim()->put_SuggestedFileName(get(value)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> impl_IFileSavePicker<T>::PickSaveFileAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> pickSaveFileOperation;
	check(shim()->abi_PickSaveFileAsync(put(pickSaveFileOperation)));
	return pickSaveFileOperation;
}

template <typename T> String impl_IFileSavePicker3<T>::EnterpriseId() const
{
	String value;
	check(shim()->get_EnterpriseId(put(value)));
	return value;
}

template <typename T> void impl_IFileSavePicker3<T>::EnterpriseId(StringReference const & value) const
{
	check(shim()->put_EnterpriseId(get(value)));
}

template <typename T> Windows::Storage::Pickers::PickerViewMode impl_IFolderPicker<T>::ViewMode() const
{
	Windows::Storage::Pickers::PickerViewMode value = {};
	check(shim()->get_ViewMode(&value));
	return value;
}

template <typename T> void impl_IFolderPicker<T>::ViewMode(Windows::Storage::Pickers::PickerViewMode const value) const
{
	check(shim()->put_ViewMode(value));
}

template <typename T> String impl_IFolderPicker<T>::SettingsIdentifier() const
{
	String value;
	check(shim()->get_SettingsIdentifier(put(value)));
	return value;
}

template <typename T> void impl_IFolderPicker<T>::SettingsIdentifier(StringReference const & value) const
{
	check(shim()->put_SettingsIdentifier(get(value)));
}

template <typename T> Windows::Storage::Pickers::PickerLocationId impl_IFolderPicker<T>::SuggestedStartLocation() const
{
	Windows::Storage::Pickers::PickerLocationId value = {};
	check(shim()->get_SuggestedStartLocation(&value));
	return value;
}

template <typename T> void impl_IFolderPicker<T>::SuggestedStartLocation(Windows::Storage::Pickers::PickerLocationId const value) const
{
	check(shim()->put_SuggestedStartLocation(value));
}

template <typename T> String impl_IFolderPicker<T>::CommitButtonText() const
{
	String value;
	check(shim()->get_CommitButtonText(put(value)));
	return value;
}

template <typename T> void impl_IFolderPicker<T>::CommitButtonText(StringReference const & value) const
{
	check(shim()->put_CommitButtonText(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IFolderPicker<T>::FileTypeFilter() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_FileTypeFilter(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> impl_IFolderPicker<T>::PickSingleFolderAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> pickSingleFolderOperation;
	check(shim()->abi_PickSingleFolderAsync(put(pickSingleFolderOperation)));
	return pickSingleFolderOperation;
}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

template <typename T> String impl_IFileRemovedEventArgs<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::AddFileResult impl_IFileOpenPickerUI<T>::AddFile(StringReference const & id, Windows::Storage::IStorageFile const & file) const
{
	Windows::Storage::Pickers::Provider::AddFileResult addResult = {};
	check(shim()->abi_AddFile(get(id), get(file), &addResult));
	return addResult;
}

template <typename T> void impl_IFileOpenPickerUI<T>::RemoveFile(StringReference const & id) const
{
	check(shim()->abi_RemoveFile(get(id)));
}

template <typename T> bool impl_IFileOpenPickerUI<T>::ContainsFile(StringReference const & id) const
{
	bool isContained = {};
	check(shim()->abi_ContainsFile(get(id), put(isContained)));
	return isContained;
}

template <typename T> bool impl_IFileOpenPickerUI<T>::CanAddFile(Windows::Storage::IStorageFile const & file) const
{
	bool canAdd = {};
	check(shim()->abi_CanAddFile(get(file), put(canAdd)));
	return canAdd;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IFileOpenPickerUI<T>::AllowedFileTypes() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_AllowedFileTypes(put(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::FileSelectionMode impl_IFileOpenPickerUI<T>::SelectionMode() const
{
	Windows::Storage::Pickers::Provider::FileSelectionMode value = {};
	check(shim()->get_SelectionMode(&value));
	return value;
}

template <typename T> String impl_IFileOpenPickerUI<T>::SettingsIdentifier() const
{
	String value;
	check(shim()->get_SettingsIdentifier(put(value)));
	return value;
}

template <typename T> String impl_IFileOpenPickerUI<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IFileOpenPickerUI<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> long long impl_IFileOpenPickerUI<T>::FileRemoved(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::FileRemovedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_FileRemoved(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IFileOpenPickerUI<T>::FileRemoved(F handler) const
{
	return FileRemoved(Windows::Foundation::TypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::FileRemovedEventArgs>(handler));
}

template <typename T> void impl_IFileOpenPickerUI<T>::FileRemoved(long long const token) const
{
	check(shim()->remove_FileRemoved(token));
}

template <typename T> long long impl_IFileOpenPickerUI<T>::Closing(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::PickerClosingEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Closing(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IFileOpenPickerUI<T>::Closing(F handler) const
{
	return Closing(Windows::Foundation::TypedEventHandler<Windows::Storage::Pickers::Provider::FileOpenPickerUI, Windows::Storage::Pickers::Provider::PickerClosingEventArgs>(handler));
}

template <typename T> void impl_IFileOpenPickerUI<T>::Closing(long long const token) const
{
	check(shim()->remove_Closing(token));
}

template <typename T> Windows::Storage::Pickers::Provider::PickerClosingOperation impl_IPickerClosingEventArgs<T>::ClosingOperation() const
{
	Windows::Storage::Pickers::Provider::PickerClosingOperation value = nullptr;
	check(shim()->get_ClosingOperation(put(value)));
	return value;
}

template <typename T> bool impl_IPickerClosingEventArgs<T>::IsCanceled() const
{
	bool value = {};
	check(shim()->get_IsCanceled(put(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::PickerClosingDeferral impl_IPickerClosingOperation<T>::GetDeferral() const
{
	Windows::Storage::Pickers::Provider::PickerClosingDeferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IPickerClosingOperation<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Deadline(&value));
	return value;
}

template <typename T> void impl_IPickerClosingDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> String impl_IFileSavePickerUI<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IFileSavePickerUI<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IFileSavePickerUI<T>::AllowedFileTypes() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_AllowedFileTypes(put(value)));
	return value;
}

template <typename T> String impl_IFileSavePickerUI<T>::SettingsIdentifier() const
{
	String value;
	check(shim()->get_SettingsIdentifier(put(value)));
	return value;
}

template <typename T> String impl_IFileSavePickerUI<T>::FileName() const
{
	String value;
	check(shim()->get_FileName(put(value)));
	return value;
}

template <typename T> Windows::Storage::Pickers::Provider::SetFileNameResult impl_IFileSavePickerUI<T>::TrySetFileName(StringReference const & value) const
{
	Windows::Storage::Pickers::Provider::SetFileNameResult result = {};
	check(shim()->abi_TrySetFileName(get(value), &result));
	return result;
}

template <typename T> long long impl_IFileSavePickerUI<T>::FileNameChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_FileNameChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IFileSavePickerUI<T>::FileNameChanged(F handler) const
{
	return FileNameChanged(Windows::Foundation::TypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, IInspectable>(handler));
}

template <typename T> void impl_IFileSavePickerUI<T>::FileNameChanged(long long const token) const
{
	check(shim()->remove_FileNameChanged(token));
}

template <typename T> long long impl_IFileSavePickerUI<T>::TargetFileRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_TargetFileRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IFileSavePickerUI<T>::TargetFileRequested(F handler) const
{
	return TargetFileRequested(Windows::Foundation::TypedEventHandler<Windows::Storage::Pickers::Provider::FileSavePickerUI, Windows::Storage::Pickers::Provider::TargetFileRequestedEventArgs>(handler));
}

template <typename T> void impl_IFileSavePickerUI<T>::TargetFileRequested(long long const token) const
{
	check(shim()->remove_TargetFileRequested(token));
}

template <typename T> Windows::Storage::Pickers::Provider::TargetFileRequest impl_ITargetFileRequestedEventArgs<T>::Request() const
{
	Windows::Storage::Pickers::Provider::TargetFileRequest value = nullptr;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> Windows::Storage::IStorageFile impl_ITargetFileRequest<T>::TargetFile() const
{
	Windows::Storage::IStorageFile value;
	check(shim()->get_TargetFile(put(value)));
	return value;
}

template <typename T> void impl_ITargetFileRequest<T>::TargetFile(Windows::Storage::IStorageFile const & value) const
{
	check(shim()->put_TargetFile(get(value)));
}

template <typename T> Windows::Storage::Pickers::Provider::TargetFileRequestDeferral impl_ITargetFileRequest<T>::GetDeferral() const
{
	Windows::Storage::Pickers::Provider::TargetFileRequestDeferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> void impl_ITargetFileRequestDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

}}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Provider {

template <typename T> String impl_ICachedFileUpdaterUI<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_ICachedFileUpdaterUI<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> Windows::Storage::Provider::CachedFileTarget impl_ICachedFileUpdaterUI<T>::UpdateTarget() const
{
	Windows::Storage::Provider::CachedFileTarget value = {};
	check(shim()->get_UpdateTarget(&value));
	return value;
}

template <typename T> long long impl_ICachedFileUpdaterUI<T>::FileUpdateRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, Windows::Storage::Provider::FileUpdateRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_FileUpdateRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICachedFileUpdaterUI<T>::FileUpdateRequested(F handler) const
{
	return FileUpdateRequested(Windows::Foundation::TypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, Windows::Storage::Provider::FileUpdateRequestedEventArgs>(handler));
}

template <typename T> void impl_ICachedFileUpdaterUI<T>::FileUpdateRequested(long long const token) const
{
	check(shim()->remove_FileUpdateRequested(token));
}

template <typename T> long long impl_ICachedFileUpdaterUI<T>::UIRequested(Windows::Foundation::ITypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_UIRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICachedFileUpdaterUI<T>::UIRequested(F handler) const
{
	return UIRequested(Windows::Foundation::TypedEventHandler<Windows::Storage::Provider::CachedFileUpdaterUI, IInspectable>(handler));
}

template <typename T> void impl_ICachedFileUpdaterUI<T>::UIRequested(long long const token) const
{
	check(shim()->remove_UIRequested(token));
}

template <typename T> Windows::Storage::Provider::UIStatus impl_ICachedFileUpdaterUI<T>::UIStatus() const
{
	Windows::Storage::Provider::UIStatus value = {};
	check(shim()->get_UIStatus(&value));
	return value;
}

template <typename T> Windows::Storage::Provider::FileUpdateRequest impl_IFileUpdateRequestedEventArgs<T>::Request() const
{
	Windows::Storage::Provider::FileUpdateRequest value = nullptr;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> String impl_IFileUpdateRequest<T>::ContentId() const
{
	String value;
	check(shim()->get_ContentId(put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFile impl_IFileUpdateRequest<T>::File() const
{
	Windows::Storage::StorageFile value = nullptr;
	check(shim()->get_File(put(value)));
	return value;
}

template <typename T> Windows::Storage::Provider::FileUpdateStatus impl_IFileUpdateRequest<T>::Status() const
{
	Windows::Storage::Provider::FileUpdateStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> void impl_IFileUpdateRequest<T>::Status(Windows::Storage::Provider::FileUpdateStatus const value) const
{
	check(shim()->put_Status(value));
}

template <typename T> Windows::Storage::Provider::FileUpdateRequestDeferral impl_IFileUpdateRequest<T>::GetDeferral() const
{
	Windows::Storage::Provider::FileUpdateRequestDeferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> void impl_IFileUpdateRequest<T>::UpdateLocalFile(Windows::Storage::IStorageFile const & value) const
{
	check(shim()->abi_UpdateLocalFile(get(value)));
}

template <typename T> void impl_IFileUpdateRequestDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::Storage::Provider::FileUpdateRequest impl_ICachedFileUpdaterUI2<T>::UpdateRequest() const
{
	Windows::Storage::Provider::FileUpdateRequest value = nullptr;
	check(shim()->get_UpdateRequest(put(value)));
	return value;
}

template <typename T> Windows::Storage::Provider::FileUpdateRequestDeferral impl_ICachedFileUpdaterUI2<T>::GetDeferral() const
{
	Windows::Storage::Provider::FileUpdateRequestDeferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> String impl_IFileUpdateRequest2<T>::UserInputNeededMessage() const
{
	String value;
	check(shim()->get_UserInputNeededMessage(put(value)));
	return value;
}

template <typename T> void impl_IFileUpdateRequest2<T>::UserInputNeededMessage(StringReference const & value) const
{
	check(shim()->put_UserInputNeededMessage(get(value)));
}

template <typename T> void impl_ICachedFileUpdaterStatics<T>::SetUpdateInformation(Windows::Storage::IStorageFile const & file, StringReference const & contentId, Windows::Storage::Provider::ReadActivationMode const readMode, Windows::Storage::Provider::WriteActivationMode const writeMode, Windows::Storage::Provider::CachedFileOptions const options) const
{
	check(shim()->abi_SetUpdateInformation(get(file), get(contentId), readMode, writeMode, options));
}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Search {

template <typename T> Windows::Storage::Search::ContentIndexer impl_IContentIndexerStatics<T>::GetIndexer(StringReference const & indexName) const
{
	Windows::Storage::Search::ContentIndexer index = nullptr;
	check(shim()->abi_GetIndexerWithName(get(indexName), put(index)));
	return index;
}

template <typename T> Windows::Storage::Search::ContentIndexer impl_IContentIndexerStatics<T>::GetIndexer() const
{
	Windows::Storage::Search::ContentIndexer index = nullptr;
	check(shim()->abi_GetIndexer(put(index)));
	return index;
}

template <typename T> String impl_IIndexableContent<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_IIndexableContent<T>::Id(StringReference const & value) const
{
	check(shim()->put_Id(get(value)));
}

template <typename T> Windows::Foundation::Collections::IMap<String, IInspectable> impl_IIndexableContent<T>::Properties() const
{
	Windows::Foundation::Collections::IMap<String, IInspectable> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_IIndexableContent<T>::Stream() const
{
	Windows::Storage::Streams::IRandomAccessStream value;
	check(shim()->get_Stream(put(value)));
	return value;
}

template <typename T> void impl_IIndexableContent<T>::Stream(Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	check(shim()->put_Stream(get(value)));
}

template <typename T> String impl_IIndexableContent<T>::StreamContentType() const
{
	String value;
	check(shim()->get_StreamContentType(put(value)));
	return value;
}

template <typename T> void impl_IIndexableContent<T>::StreamContentType(StringReference const & value) const
{
	check(shim()->put_StreamContentType(get(value)));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContentIndexer<T>::AddAsync(Windows::Storage::Search::IIndexableContent const & indexableContent) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_AddAsync(get(indexableContent), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContentIndexer<T>::UpdateAsync(Windows::Storage::Search::IIndexableContent const & indexableContent) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_UpdateAsync(get(indexableContent), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContentIndexer<T>::DeleteAsync(StringReference const & contentId) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_DeleteAsync(get(contentId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContentIndexer<T>::DeleteMultipleAsync(Windows::Foundation::Collections::IIterable<String> const & contentIds) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_DeleteMultipleAsync(get(contentIds), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IContentIndexer<T>::DeleteAllAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_DeleteAllAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, IInspectable>> impl_IContentIndexer<T>::RetrievePropertiesAsync(StringReference const & contentId, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, IInspectable>> operation;
	check(shim()->abi_RetrievePropertiesAsync(get(contentId), get(propertiesToRetrieve), put(operation)));
	return operation;
}

template <typename T> unsigned long long impl_IContentIndexer<T>::Revision() const
{
	unsigned long long value = {};
	check(shim()->get_Revision(&value));
	return value;
}

template <typename T> String impl_IValueAndLanguage<T>::Language() const
{
	String value;
	check(shim()->get_Language(put(value)));
	return value;
}

template <typename T> void impl_IValueAndLanguage<T>::Language(StringReference const & value) const
{
	check(shim()->put_Language(get(value)));
}

template <typename T> IInspectable impl_IValueAndLanguage<T>::Value() const
{
	IInspectable value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IValueAndLanguage<T>::Value(IInspectable const & value) const
{
	check(shim()->put_Value(get(value)));
}

template <typename T> Windows::Storage::Search::ContentIndexerQuery impl_IContentIndexerQueryOperations<T>::CreateQuery(StringReference const & searchFilter, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<winrt::Windows::Storage::Search::SortEntry> const & sortOrder, StringReference const & searchFilterLanguage) const
{
	Windows::Storage::Search::ContentIndexerQuery query = nullptr;
	check(shim()->abi_CreateQueryWithSortOrderAndLanguage(get(searchFilter), get(propertiesToRetrieve), get(sortOrder), get(searchFilterLanguage), put(query)));
	return query;
}

template <typename T> Windows::Storage::Search::ContentIndexerQuery impl_IContentIndexerQueryOperations<T>::CreateQuery(StringReference const & searchFilter, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve, Windows::Foundation::Collections::IIterable<winrt::Windows::Storage::Search::SortEntry> const & sortOrder) const
{
	Windows::Storage::Search::ContentIndexerQuery query = nullptr;
	check(shim()->abi_CreateQueryWithSortOrder(get(searchFilter), get(propertiesToRetrieve), get(sortOrder), put(query)));
	return query;
}

template <typename T> Windows::Storage::Search::ContentIndexerQuery impl_IContentIndexerQueryOperations<T>::CreateQuery(StringReference const & searchFilter, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const
{
	Windows::Storage::Search::ContentIndexerQuery query = nullptr;
	check(shim()->abi_CreateQuery(get(searchFilter), get(propertiesToRetrieve), put(query)));
	return query;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IContentIndexerQuery<T>::GetCountAsync() const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation;
	check(shim()->abi_GetCountAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<String, IInspectable>>> impl_IContentIndexerQuery<T>::GetPropertiesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<String, IInspectable>>> operation;
	check(shim()->abi_GetPropertiesAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<String, IInspectable>>> impl_IContentIndexerQuery<T>::GetPropertiesAsync(unsigned const startIndex, unsigned const maxItems) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Foundation::Collections::IMapView<String, IInspectable>>> operation;
	check(shim()->abi_GetPropertiesRangeAsync(startIndex, maxItems, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> impl_IContentIndexerQuery<T>::GetAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> operation;
	check(shim()->abi_GetAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> impl_IContentIndexerQuery<T>::GetAsync(unsigned const startIndex, unsigned const maxItems) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::Search::IIndexableContent>> operation;
	check(shim()->abi_GetRangeAsync(startIndex, maxItems, put(operation)));
	return operation;
}

template <typename T> Windows::Storage::StorageFolder impl_IContentIndexerQuery<T>::QueryFolder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_QueryFolder(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IQueryOptions<T>::FileTypeFilter() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_FileTypeFilter(put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::FolderDepth impl_IQueryOptions<T>::FolderDepth() const
{
	Windows::Storage::Search::FolderDepth value = {};
	check(shim()->get_FolderDepth(&value));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::FolderDepth(Windows::Storage::Search::FolderDepth const value) const
{
	check(shim()->put_FolderDepth(value));
}

template <typename T> String impl_IQueryOptions<T>::ApplicationSearchFilter() const
{
	String value;
	check(shim()->get_ApplicationSearchFilter(put(value)));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::ApplicationSearchFilter(StringReference const & value) const
{
	check(shim()->put_ApplicationSearchFilter(get(value)));
}

template <typename T> String impl_IQueryOptions<T>::UserSearchFilter() const
{
	String value;
	check(shim()->get_UserSearchFilter(put(value)));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::UserSearchFilter(StringReference const & value) const
{
	check(shim()->put_UserSearchFilter(get(value)));
}

template <typename T> String impl_IQueryOptions<T>::Language() const
{
	String value;
	check(shim()->get_Language(put(value)));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::Language(StringReference const & value) const
{
	check(shim()->put_Language(get(value)));
}

template <typename T> Windows::Storage::Search::IndexerOption impl_IQueryOptions<T>::IndexerOption() const
{
	Windows::Storage::Search::IndexerOption value = {};
	check(shim()->get_IndexerOption(&value));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::IndexerOption(Windows::Storage::Search::IndexerOption const value) const
{
	check(shim()->put_IndexerOption(value));
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Storage::Search::SortEntry> impl_IQueryOptions<T>::SortOrder() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Storage::Search::SortEntry> value;
	check(shim()->get_SortOrder(put(value)));
	return value;
}

template <typename T> String impl_IQueryOptions<T>::GroupPropertyName() const
{
	String value;
	check(shim()->get_GroupPropertyName(put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::DateStackOption impl_IQueryOptions<T>::DateStackOption() const
{
	Windows::Storage::Search::DateStackOption value = {};
	check(shim()->get_DateStackOption(&value));
	return value;
}

template <typename T> String impl_IQueryOptions<T>::SaveToString() const
{
	String value;
	check(shim()->abi_SaveToString(put(value)));
	return value;
}

template <typename T> void impl_IQueryOptions<T>::LoadFromString(StringReference const & value) const
{
	check(shim()->abi_LoadFromString(get(value)));
}

template <typename T> void impl_IQueryOptions<T>::SetThumbnailPrefetch(Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedSize, Windows::Storage::FileProperties::ThumbnailOptions const options) const
{
	check(shim()->abi_SetThumbnailPrefetch(mode, requestedSize, options));
}

template <typename T> void impl_IQueryOptions<T>::SetPropertyPrefetch(Windows::Storage::FileProperties::PropertyPrefetchOptions const options, Windows::Foundation::Collections::IIterable<String> const & propertiesToRetrieve) const
{
	check(shim()->abi_SetPropertyPrefetch(options, get(propertiesToRetrieve)));
}

template <typename T> Windows::Foundation::Collections::IVector<String> impl_IQueryOptionsWithProviderFilter<T>::StorageProviderIdFilter() const
{
	Windows::Foundation::Collections::IVector<String> value;
	check(shim()->get_StorageProviderIdFilter(put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::QueryOptions impl_IQueryOptionsFactory<T>::CreateCommonFileQuery(Windows::Storage::Search::CommonFileQuery const query, Windows::Foundation::Collections::IIterable<String> const & fileTypeFilter) const
{
	Windows::Storage::Search::QueryOptions queryOptions = nullptr;
	check(shim()->abi_CreateCommonFileQuery(query, get(fileTypeFilter), put(queryOptions)));
	return queryOptions;
}

template <typename T> Windows::Storage::Search::QueryOptions impl_IQueryOptionsFactory<T>::CreateCommonFolderQuery(Windows::Storage::Search::CommonFolderQuery const query) const
{
	Windows::Storage::Search::QueryOptions queryOptions = nullptr;
	check(shim()->abi_CreateCommonFolderQuery(query, put(queryOptions)));
	return queryOptions;
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IStorageQueryResultBase<T>::GetItemCountAsync() const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation;
	check(shim()->abi_GetItemCountAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Storage::StorageFolder impl_IStorageQueryResultBase<T>::Folder() const
{
	Windows::Storage::StorageFolder container = nullptr;
	check(shim()->get_Folder(put(container)));
	return container;
}

template <typename T> long long impl_IStorageQueryResultBase<T>::ContentsChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable> const & handler) const
{
	long long eventCookie = {};
	check(shim()->add_ContentsChanged(get(handler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IStorageQueryResultBase<T>::ContentsChanged(F handler) const
{
	return ContentsChanged(Windows::Foundation::TypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable>(handler));
}

template <typename T> void impl_IStorageQueryResultBase<T>::ContentsChanged(long long const eventCookie) const
{
	check(shim()->remove_ContentsChanged(eventCookie));
}

template <typename T> long long impl_IStorageQueryResultBase<T>::OptionsChanged(Windows::Foundation::ITypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable> const & changedHandler) const
{
	long long eventCookie = {};
	check(shim()->add_OptionsChanged(get(changedHandler), &eventCookie));
	return eventCookie;
}

template <typename T> template <typename F> long long impl_IStorageQueryResultBase<T>::OptionsChanged(F changedHandler) const
{
	return OptionsChanged(Windows::Foundation::TypedEventHandler<Windows::Storage::Search::IStorageQueryResultBase, IInspectable>(changedHandler));
}

template <typename T> void impl_IStorageQueryResultBase<T>::OptionsChanged(long long const eventCookie) const
{
	check(shim()->remove_OptionsChanged(eventCookie));
}

template <typename T> Windows::Foundation::IAsyncOperation<unsigned> impl_IStorageQueryResultBase<T>::FindStartIndexAsync(IInspectable const & value) const
{
	Windows::Foundation::IAsyncOperation<unsigned> operation;
	check(shim()->abi_FindStartIndexAsync(get(value), put(operation)));
	return operation;
}

template <typename T> Windows::Storage::Search::QueryOptions impl_IStorageQueryResultBase<T>::GetCurrentQueryOptions() const
{
	Windows::Storage::Search::QueryOptions value = nullptr;
	check(shim()->abi_GetCurrentQueryOptions(put(value)));
	return value;
}

template <typename T> void impl_IStorageQueryResultBase<T>::ApplyNewQueryOptions(Windows::Storage::Search::QueryOptions const & newQueryOptions) const
{
	check(shim()->abi_ApplyNewQueryOptions(get(newQueryOptions)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IStorageFileQueryResult<T>::GetFilesAsync(unsigned const startIndex, unsigned const maxNumberOfItems) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> operation;
	check(shim()->abi_GetFilesAsync(startIndex, maxNumberOfItems, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IStorageFileQueryResult<T>::GetFilesAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> operation;
	check(shim()->abi_GetFilesAsyncDefaultStartAndCount(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment>> impl_IStorageFileQueryResult2<T>::GetMatchingPropertiesWithRanges(Windows::Storage::StorageFile const & file) const
{
	Windows::Foundation::Collections::IMap<String, Windows::Foundation::Collections::IVectorView<winrt::Windows::Data::Text::TextSegment>> result;
	check(shim()->abi_GetMatchingPropertiesWithRanges(get(file), put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> impl_IStorageFolderQueryResult<T>::GetFoldersAsync(unsigned const startIndex, unsigned const maxNumberOfItems) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> operation;
	check(shim()->abi_GetFoldersAsync(startIndex, maxNumberOfItems, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> impl_IStorageFolderQueryResult<T>::GetFoldersAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> operation;
	check(shim()->abi_GetFoldersAsyncDefaultStartAndCount(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> impl_IStorageItemQueryResult<T>::GetItemsAsync(unsigned const startIndex, unsigned const maxNumberOfItems) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> operation;
	check(shim()->abi_GetItemsAsync(startIndex, maxNumberOfItems, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> impl_IStorageItemQueryResult<T>::GetItemsAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> operation;
	check(shim()->abi_GetItemsAsyncDefaultStartAndCount(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Search::IndexedState> impl_IStorageFolderQueryOperations<T>::GetIndexedStateAsync() const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Search::IndexedState> operation;
	check(shim()->abi_GetIndexedStateAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Storage::Search::StorageFileQueryResult impl_IStorageFolderQueryOperations<T>::CreateFileQuery() const
{
	Windows::Storage::Search::StorageFileQueryResult value = nullptr;
	check(shim()->abi_CreateFileQueryOverloadDefault(put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFileQueryResult impl_IStorageFolderQueryOperations<T>::CreateFileQuery(Windows::Storage::Search::CommonFileQuery const query) const
{
	Windows::Storage::Search::StorageFileQueryResult value = nullptr;
	check(shim()->abi_CreateFileQuery(query, put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFileQueryResult impl_IStorageFolderQueryOperations<T>::CreateFileQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const
{
	Windows::Storage::Search::StorageFileQueryResult value = nullptr;
	check(shim()->abi_CreateFileQueryWithOptions(get(queryOptions), put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFolderQueryResult impl_IStorageFolderQueryOperations<T>::CreateFolderQuery() const
{
	Windows::Storage::Search::StorageFolderQueryResult value = nullptr;
	check(shim()->abi_CreateFolderQueryOverloadDefault(put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFolderQueryResult impl_IStorageFolderQueryOperations<T>::CreateFolderQuery(Windows::Storage::Search::CommonFolderQuery const query) const
{
	Windows::Storage::Search::StorageFolderQueryResult value = nullptr;
	check(shim()->abi_CreateFolderQuery(query, put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageFolderQueryResult impl_IStorageFolderQueryOperations<T>::CreateFolderQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const
{
	Windows::Storage::Search::StorageFolderQueryResult value = nullptr;
	check(shim()->abi_CreateFolderQueryWithOptions(get(queryOptions), put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageItemQueryResult impl_IStorageFolderQueryOperations<T>::CreateItemQuery() const
{
	Windows::Storage::Search::StorageItemQueryResult value = nullptr;
	check(shim()->abi_CreateItemQuery(put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageItemQueryResult impl_IStorageFolderQueryOperations<T>::CreateItemQueryWithOptions(Windows::Storage::Search::QueryOptions const & queryOptions) const
{
	Windows::Storage::Search::StorageItemQueryResult value = nullptr;
	check(shim()->abi_CreateItemQueryWithOptions(get(queryOptions), put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IStorageFolderQueryOperations<T>::GetFilesAsync(Windows::Storage::Search::CommonFileQuery const query, unsigned const startIndex, unsigned const maxItemsToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> operation;
	check(shim()->abi_GetFilesAsync(query, startIndex, maxItemsToRetrieve, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> impl_IStorageFolderQueryOperations<T>::GetFilesAsync(Windows::Storage::Search::CommonFileQuery const query) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFile>> operation;
	check(shim()->abi_GetFilesAsyncOverloadDefaultStartAndCount(query, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> impl_IStorageFolderQueryOperations<T>::GetFoldersAsync(Windows::Storage::Search::CommonFolderQuery const query, unsigned const startIndex, unsigned const maxItemsToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> operation;
	check(shim()->abi_GetFoldersAsync(query, startIndex, maxItemsToRetrieve, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> impl_IStorageFolderQueryOperations<T>::GetFoldersAsync(Windows::Storage::Search::CommonFolderQuery const query) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::StorageFolder>> operation;
	check(shim()->abi_GetFoldersAsyncOverloadDefaultStartAndCount(query, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> impl_IStorageFolderQueryOperations<T>::GetItemsAsync(unsigned const startIndex, unsigned const maxItemsToRetrieve) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Storage::IStorageItem>> operation;
	check(shim()->abi_GetItemsAsync(startIndex, maxItemsToRetrieve, put(operation)));
	return operation;
}

template <typename T> bool impl_IStorageFolderQueryOperations<T>::AreQueryOptionsSupported(Windows::Storage::Search::QueryOptions const & queryOptions) const
{
	bool value = {};
	check(shim()->abi_AreQueryOptionsSupported(get(queryOptions), put(value)));
	return value;
}

template <typename T> bool impl_IStorageFolderQueryOperations<T>::IsCommonFolderQuerySupported(Windows::Storage::Search::CommonFolderQuery const query) const
{
	bool value = {};
	check(shim()->abi_IsCommonFolderQuerySupported(query, put(value)));
	return value;
}

template <typename T> bool impl_IStorageFolderQueryOperations<T>::IsCommonFileQuerySupported(Windows::Storage::Search::CommonFileQuery const query) const
{
	bool value = {};
	check(shim()->abi_IsCommonFileQuerySupported(query, put(value)));
	return value;
}

template <typename T> Windows::Storage::StorageFolder impl_IStorageLibraryContentChangedTriggerDetails<T>::Folder() const
{
	Windows::Storage::StorageFolder value = nullptr;
	check(shim()->get_Folder(put(value)));
	return value;
}

template <typename T> Windows::Storage::Search::StorageItemQueryResult impl_IStorageLibraryContentChangedTriggerDetails<T>::CreateModifiedSinceQuery(Windows::Foundation::DateTime const & lastQueryTime) const
{
	Windows::Storage::Search::StorageItemQueryResult result = nullptr;
	check(shim()->abi_CreateModifiedSinceQuery(lastQueryTime, put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Streams {

template <typename T> unsigned impl_IDataReader<T>::UnconsumedBufferLength() const
{
	unsigned value = {};
	check(shim()->get_UnconsumedBufferLength(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::UnicodeEncoding impl_IDataReader<T>::UnicodeEncoding() const
{
	Windows::Storage::Streams::UnicodeEncoding value = {};
	check(shim()->get_UnicodeEncoding(&value));
	return value;
}

template <typename T> void impl_IDataReader<T>::UnicodeEncoding(Windows::Storage::Streams::UnicodeEncoding const value) const
{
	check(shim()->put_UnicodeEncoding(value));
}

template <typename T> Windows::Storage::Streams::ByteOrder impl_IDataReader<T>::ByteOrder() const
{
	Windows::Storage::Streams::ByteOrder value = {};
	check(shim()->get_ByteOrder(&value));
	return value;
}

template <typename T> void impl_IDataReader<T>::ByteOrder(Windows::Storage::Streams::ByteOrder const value) const
{
	check(shim()->put_ByteOrder(value));
}

template <typename T> Windows::Storage::Streams::InputStreamOptions impl_IDataReader<T>::InputStreamOptions() const
{
	Windows::Storage::Streams::InputStreamOptions value = {};
	check(shim()->get_InputStreamOptions(&value));
	return value;
}

template <typename T> void impl_IDataReader<T>::InputStreamOptions(Windows::Storage::Streams::InputStreamOptions const value) const
{
	check(shim()->put_InputStreamOptions(value));
}

template <typename T> byte impl_IDataReader<T>::ReadByte() const
{
	byte value = {};
	check(shim()->abi_ReadByte(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IDataReader<T>::ReadBuffer(unsigned const length) const
{
	Windows::Storage::Streams::IBuffer buffer;
	check(shim()->abi_ReadBuffer(length, put(buffer)));
	return buffer;
}

template <typename T> bool impl_IDataReader<T>::ReadBoolean() const
{
	bool value = {};
	check(shim()->abi_ReadBoolean(put(value)));
	return value;
}

template <typename T> GUID impl_IDataReader<T>::ReadGuid() const
{
	GUID value = {};
	check(shim()->abi_ReadGuid(&value));
	return value;
}

template <typename T> short impl_IDataReader<T>::ReadInt16() const
{
	short value = {};
	check(shim()->abi_ReadInt16(&value));
	return value;
}

template <typename T> int impl_IDataReader<T>::ReadInt32() const
{
	int value = {};
	check(shim()->abi_ReadInt32(&value));
	return value;
}

template <typename T> long long impl_IDataReader<T>::ReadInt64() const
{
	long long value = {};
	check(shim()->abi_ReadInt64(&value));
	return value;
}

template <typename T> unsigned short impl_IDataReader<T>::ReadUInt16() const
{
	unsigned short value = {};
	check(shim()->abi_ReadUInt16(&value));
	return value;
}

template <typename T> unsigned impl_IDataReader<T>::ReadUInt32() const
{
	unsigned value = {};
	check(shim()->abi_ReadUInt32(&value));
	return value;
}

template <typename T> unsigned long long impl_IDataReader<T>::ReadUInt64() const
{
	unsigned long long value = {};
	check(shim()->abi_ReadUInt64(&value));
	return value;
}

template <typename T> float impl_IDataReader<T>::ReadSingle() const
{
	float value = {};
	check(shim()->abi_ReadSingle(&value));
	return value;
}

template <typename T> double impl_IDataReader<T>::ReadDouble() const
{
	double value = {};
	check(shim()->abi_ReadDouble(&value));
	return value;
}

template <typename T> String impl_IDataReader<T>::ReadString(unsigned const codeUnitCount) const
{
	String value;
	check(shim()->abi_ReadString(codeUnitCount, put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IDataReader<T>::ReadDateTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->abi_ReadDateTime(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IDataReader<T>::ReadTimeSpan() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->abi_ReadTimeSpan(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::DataReaderLoadOperation impl_IDataReader<T>::LoadAsync(unsigned const count) const
{
	Windows::Storage::Streams::DataReaderLoadOperation operation = nullptr;
	check(shim()->abi_LoadAsync(count, put(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IDataReader<T>::DetachBuffer() const
{
	Windows::Storage::Streams::IBuffer buffer;
	check(shim()->abi_DetachBuffer(put(buffer)));
	return buffer;
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IDataReader<T>::DetachStream() const
{
	Windows::Storage::Streams::IInputStream stream;
	check(shim()->abi_DetachStream(put(stream)));
	return stream;
}

template <typename T> Windows::Storage::Streams::DataReader impl_IDataReaderFactory<T>::CreateDataReader(Windows::Storage::Streams::IInputStream const & inputStream) const
{
	Windows::Storage::Streams::DataReader dataReader = nullptr;
	check(shim()->abi_CreateDataReader(get(inputStream), put(dataReader)));
	return dataReader;
}

template <typename T> Windows::Storage::Streams::DataReader impl_IDataReaderStatics<T>::FromBuffer(Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Storage::Streams::DataReader dataReader = nullptr;
	check(shim()->abi_FromBuffer(get(buffer), put(dataReader)));
	return dataReader;
}

template <typename T> unsigned impl_IDataWriter<T>::UnstoredBufferLength() const
{
	unsigned value = {};
	check(shim()->get_UnstoredBufferLength(&value));
	return value;
}

template <typename T> Windows::Storage::Streams::UnicodeEncoding impl_IDataWriter<T>::UnicodeEncoding() const
{
	Windows::Storage::Streams::UnicodeEncoding value = {};
	check(shim()->get_UnicodeEncoding(&value));
	return value;
}

template <typename T> void impl_IDataWriter<T>::UnicodeEncoding(Windows::Storage::Streams::UnicodeEncoding const value) const
{
	check(shim()->put_UnicodeEncoding(value));
}

template <typename T> Windows::Storage::Streams::ByteOrder impl_IDataWriter<T>::ByteOrder() const
{
	Windows::Storage::Streams::ByteOrder value = {};
	check(shim()->get_ByteOrder(&value));
	return value;
}

template <typename T> void impl_IDataWriter<T>::ByteOrder(Windows::Storage::Streams::ByteOrder const value) const
{
	check(shim()->put_ByteOrder(value));
}

template <typename T> void impl_IDataWriter<T>::WriteByte(byte const value) const
{
	check(shim()->abi_WriteByte(value));
}

template <typename T> void impl_IDataWriter<T>::WriteBuffer(Windows::Storage::Streams::IBuffer const & buffer) const
{
	check(shim()->abi_WriteBuffer(get(buffer)));
}

template <typename T> void impl_IDataWriter<T>::WriteBuffer(Windows::Storage::Streams::IBuffer const & buffer, unsigned const start, unsigned const count) const
{
	check(shim()->abi_WriteBufferRange(get(buffer), start, count));
}

template <typename T> void impl_IDataWriter<T>::WriteBoolean(bool const value) const
{
	check(shim()->abi_WriteBoolean(value));
}

template <typename T> void impl_IDataWriter<T>::WriteGuid(GUID const value) const
{
	check(shim()->abi_WriteGuid(value));
}

template <typename T> void impl_IDataWriter<T>::WriteInt16(short const value) const
{
	check(shim()->abi_WriteInt16(value));
}

template <typename T> void impl_IDataWriter<T>::WriteInt32(int const value) const
{
	check(shim()->abi_WriteInt32(value));
}

template <typename T> void impl_IDataWriter<T>::WriteInt64(long long const value) const
{
	check(shim()->abi_WriteInt64(value));
}

template <typename T> void impl_IDataWriter<T>::WriteUInt16(unsigned short const value) const
{
	check(shim()->abi_WriteUInt16(value));
}

template <typename T> void impl_IDataWriter<T>::WriteUInt32(unsigned const value) const
{
	check(shim()->abi_WriteUInt32(value));
}

template <typename T> void impl_IDataWriter<T>::WriteUInt64(unsigned long long const value) const
{
	check(shim()->abi_WriteUInt64(value));
}

template <typename T> void impl_IDataWriter<T>::WriteSingle(float const value) const
{
	check(shim()->abi_WriteSingle(value));
}

template <typename T> void impl_IDataWriter<T>::WriteDouble(double const value) const
{
	check(shim()->abi_WriteDouble(value));
}

template <typename T> void impl_IDataWriter<T>::WriteDateTime(Windows::Foundation::DateTime const & value) const
{
	check(shim()->abi_WriteDateTime(value));
}

template <typename T> void impl_IDataWriter<T>::WriteTimeSpan(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->abi_WriteTimeSpan(value));
}

template <typename T> unsigned impl_IDataWriter<T>::WriteString(StringReference const & value) const
{
	unsigned codeUnitCount = {};
	check(shim()->abi_WriteString(get(value), &codeUnitCount));
	return codeUnitCount;
}

template <typename T> unsigned impl_IDataWriter<T>::MeasureString(StringReference const & value) const
{
	unsigned codeUnitCount = {};
	check(shim()->abi_MeasureString(get(value), &codeUnitCount));
	return codeUnitCount;
}

template <typename T> Windows::Storage::Streams::DataWriterStoreOperation impl_IDataWriter<T>::StoreAsync() const
{
	Windows::Storage::Streams::DataWriterStoreOperation operation = nullptr;
	check(shim()->abi_StoreAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IDataWriter<T>::FlushAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_FlushAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IDataWriter<T>::DetachBuffer() const
{
	Windows::Storage::Streams::IBuffer buffer;
	check(shim()->abi_DetachBuffer(put(buffer)));
	return buffer;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IDataWriter<T>::DetachStream() const
{
	Windows::Storage::Streams::IOutputStream outputStream;
	check(shim()->abi_DetachStream(put(outputStream)));
	return outputStream;
}

template <typename T> Windows::Storage::Streams::DataWriter impl_IDataWriterFactory<T>::CreateDataWriter(Windows::Storage::Streams::IOutputStream const & outputStream) const
{
	Windows::Storage::Streams::DataWriter dataWriter = nullptr;
	check(shim()->abi_CreateDataWriter(get(outputStream), put(dataWriter)));
	return dataWriter;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> impl_IRandomAccessStreamReference<T>::OpenReadAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamWithContentType> operation;
	check(shim()->abi_OpenReadAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> impl_IRandomAccessStreamStatics<T>::CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> operation;
	check(shim()->abi_CopyAsync(get(source), get(destination), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> impl_IRandomAccessStreamStatics<T>::CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination, unsigned long long const bytesToCopy) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> operation;
	check(shim()->abi_CopySizeAsync(get(source), get(destination), bytesToCopy, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> impl_IRandomAccessStreamStatics<T>::CopyAndCloseAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> operation;
	check(shim()->abi_CopyAndCloseAsync(get(source), get(destination), put(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::Buffer impl_IBufferFactory<T>::Create(unsigned const capacity) const
{
	Windows::Storage::Streams::Buffer value = nullptr;
	check(shim()->abi_Create(capacity, put(value)));
	return value;
}

template <typename T> unsigned impl_IBuffer<T>::Capacity() const
{
	unsigned value = {};
	check(shim()->get_Capacity(&value));
	return value;
}

template <typename T> unsigned impl_IBuffer<T>::Length() const
{
	unsigned value = {};
	check(shim()->get_Length(&value));
	return value;
}

template <typename T> void impl_IBuffer<T>::Length(unsigned const value) const
{
	check(shim()->put_Length(value));
}

template <typename T> Windows::Storage::Streams::Buffer impl_IBufferStatics<T>::CreateCopyFromMemoryBuffer(Windows::Foundation::IMemoryBuffer const & input) const
{
	Windows::Storage::Streams::Buffer value = nullptr;
	check(shim()->abi_CreateCopyFromMemoryBuffer(get(input), put(value)));
	return value;
}

template <typename T> Windows::Foundation::MemoryBuffer impl_IBufferStatics<T>::CreateMemoryBufferOverIBuffer(Windows::Storage::Streams::IBuffer const & input) const
{
	Windows::Foundation::MemoryBuffer value = nullptr;
	check(shim()->abi_CreateMemoryBufferOverIBuffer(get(input), put(value)));
	return value;
}

template <typename T> String impl_IContentTypeProvider<T>::ContentType() const
{
	String value;
	check(shim()->get_ContentType(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> impl_IInputStreamReference<T>::OpenSequentialReadAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> operation;
	check(shim()->abi_OpenSequentialReadAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IRandomAccessStreamReferenceStatics<T>::CreateFromFile(Windows::Storage::IStorageFile const & file) const
{
	Windows::Storage::Streams::RandomAccessStreamReference streamReference = nullptr;
	check(shim()->abi_CreateFromFile(get(file), put(streamReference)));
	return streamReference;
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IRandomAccessStreamReferenceStatics<T>::CreateFromUri(Windows::Foundation::Uri const & uri) const
{
	Windows::Storage::Streams::RandomAccessStreamReference streamReference = nullptr;
	check(shim()->abi_CreateFromUri(get(uri), put(streamReference)));
	return streamReference;
}

template <typename T> Windows::Storage::Streams::RandomAccessStreamReference impl_IRandomAccessStreamReferenceStatics<T>::CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream) const
{
	Windows::Storage::Streams::RandomAccessStreamReference streamReference = nullptr;
	check(shim()->abi_CreateFromStream(get(stream), put(streamReference)));
	return streamReference;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned> impl_IInputStream<T>::ReadAsync(Windows::Storage::Streams::IBuffer const & buffer, unsigned const count, Windows::Storage::Streams::InputStreamOptions const options) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned> operation;
	check(shim()->abi_ReadAsync(get(buffer), count, options, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> impl_IOutputStream<T>::WriteAsync(Windows::Storage::Streams::IBuffer const & buffer) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> operation;
	check(shim()->abi_WriteAsync(get(buffer), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IOutputStream<T>::FlushAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_FlushAsync(put(operation)));
	return operation;
}

template <typename T> unsigned long long impl_IRandomAccessStream<T>::Size() const
{
	unsigned long long value = {};
	check(shim()->get_Size(&value));
	return value;
}

template <typename T> void impl_IRandomAccessStream<T>::Size(unsigned long long const value) const
{
	check(shim()->put_Size(value));
}

template <typename T> Windows::Storage::Streams::IInputStream impl_IRandomAccessStream<T>::GetInputStreamAt(unsigned long long const position) const
{
	Windows::Storage::Streams::IInputStream stream;
	check(shim()->abi_GetInputStreamAt(position, put(stream)));
	return stream;
}

template <typename T> Windows::Storage::Streams::IOutputStream impl_IRandomAccessStream<T>::GetOutputStreamAt(unsigned long long const position) const
{
	Windows::Storage::Streams::IOutputStream stream;
	check(shim()->abi_GetOutputStreamAt(position, put(stream)));
	return stream;
}

template <typename T> unsigned long long impl_IRandomAccessStream<T>::Position() const
{
	unsigned long long value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> void impl_IRandomAccessStream<T>::Seek(unsigned long long const position) const
{
	check(shim()->abi_Seek(position));
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_IRandomAccessStream<T>::CloneStream() const
{
	Windows::Storage::Streams::IRandomAccessStream stream;
	check(shim()->abi_CloneStream(put(stream)));
	return stream;
}

template <typename T> bool impl_IRandomAccessStream<T>::CanRead() const
{
	bool value = {};
	check(shim()->get_CanRead(put(value)));
	return value;
}

template <typename T> bool impl_IRandomAccessStream<T>::CanWrite() const
{
	bool value = {};
	check(shim()->get_CanWrite(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace System {

template <typename T> unsigned long long impl_IAppMemoryReport<T>::PrivateCommitUsage() const
{
	unsigned long long value = {};
	check(shim()->get_PrivateCommitUsage(&value));
	return value;
}

template <typename T> unsigned long long impl_IAppMemoryReport<T>::PeakPrivateCommitUsage() const
{
	unsigned long long value = {};
	check(shim()->get_PeakPrivateCommitUsage(&value));
	return value;
}

template <typename T> unsigned long long impl_IAppMemoryReport<T>::TotalCommitUsage() const
{
	unsigned long long value = {};
	check(shim()->get_TotalCommitUsage(&value));
	return value;
}

template <typename T> unsigned long long impl_IAppMemoryReport<T>::TotalCommitLimit() const
{
	unsigned long long value = {};
	check(shim()->get_TotalCommitLimit(&value));
	return value;
}

template <typename T> unsigned long long impl_IProcessMemoryReport<T>::PrivateWorkingSetUsage() const
{
	unsigned long long value = {};
	check(shim()->get_PrivateWorkingSetUsage(&value));
	return value;
}

template <typename T> unsigned long long impl_IProcessMemoryReport<T>::TotalWorkingSetUsage() const
{
	unsigned long long value = {};
	check(shim()->get_TotalWorkingSetUsage(&value));
	return value;
}

template <typename T> unsigned long long impl_IAppMemoryUsageLimitChangingEventArgs<T>::OldLimit() const
{
	unsigned long long value = {};
	check(shim()->get_OldLimit(&value));
	return value;
}

template <typename T> unsigned long long impl_IAppMemoryUsageLimitChangingEventArgs<T>::NewLimit() const
{
	unsigned long long value = {};
	check(shim()->get_NewLimit(&value));
	return value;
}

template <typename T> unsigned long long impl_IMemoryManagerStatics<T>::AppMemoryUsage() const
{
	unsigned long long value = {};
	check(shim()->get_AppMemoryUsage(&value));
	return value;
}

template <typename T> unsigned long long impl_IMemoryManagerStatics<T>::AppMemoryUsageLimit() const
{
	unsigned long long value = {};
	check(shim()->get_AppMemoryUsageLimit(&value));
	return value;
}

template <typename T> Windows::System::AppMemoryUsageLevel impl_IMemoryManagerStatics<T>::AppMemoryUsageLevel() const
{
	Windows::System::AppMemoryUsageLevel value = {};
	check(shim()->get_AppMemoryUsageLevel(&value));
	return value;
}

template <typename T> long long impl_IMemoryManagerStatics<T>::AppMemoryUsageIncreased(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_AppMemoryUsageIncreased(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMemoryManagerStatics<T>::AppMemoryUsageIncreased(F handler) const
{
	return AppMemoryUsageIncreased(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IMemoryManagerStatics<T>::AppMemoryUsageIncreased(long long const token) const
{
	check(shim()->remove_AppMemoryUsageIncreased(token));
}

template <typename T> long long impl_IMemoryManagerStatics<T>::AppMemoryUsageDecreased(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_AppMemoryUsageDecreased(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMemoryManagerStatics<T>::AppMemoryUsageDecreased(F handler) const
{
	return AppMemoryUsageDecreased(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IMemoryManagerStatics<T>::AppMemoryUsageDecreased(long long const token) const
{
	check(shim()->remove_AppMemoryUsageDecreased(token));
}

template <typename T> long long impl_IMemoryManagerStatics<T>::AppMemoryUsageLimitChanging(Windows::Foundation::IEventHandler<Windows::System::AppMemoryUsageLimitChangingEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_AppMemoryUsageLimitChanging(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IMemoryManagerStatics<T>::AppMemoryUsageLimitChanging(F handler) const
{
	return AppMemoryUsageLimitChanging(Windows::Foundation::EventHandler<Windows::System::AppMemoryUsageLimitChangingEventArgs>(handler));
}

template <typename T> void impl_IMemoryManagerStatics<T>::AppMemoryUsageLimitChanging(long long const token) const
{
	check(shim()->remove_AppMemoryUsageLimitChanging(token));
}

template <typename T> Windows::System::AppMemoryReport impl_IMemoryManagerStatics2<T>::GetAppMemoryReport() const
{
	Windows::System::AppMemoryReport memoryReport = nullptr;
	check(shim()->abi_GetAppMemoryReport(put(memoryReport)));
	return memoryReport;
}

template <typename T> Windows::System::ProcessMemoryReport impl_IMemoryManagerStatics2<T>::GetProcessMemoryReport() const
{
	Windows::System::ProcessMemoryReport memoryReport = nullptr;
	check(shim()->abi_GetProcessMemoryReport(put(memoryReport)));
	return memoryReport;
}

template <typename T> bool impl_IMemoryManagerStatics3<T>::TrySetAppMemoryUsageLimit(unsigned long long const value) const
{
	bool result = {};
	check(shim()->abi_TrySetAppMemoryUsageLimit(value, put(result)));
	return result;
}

template <typename T> void impl_IProtocolForResultsOperation<T>::ReportCompleted(Windows::Foundation::Collections::ValueSet const & data) const
{
	check(shim()->abi_ReportCompleted(get(data)));
}

template <typename T> String impl_IUser<T>::NonRoamableId() const
{
	String value;
	check(shim()->get_NonRoamableId(put(value)));
	return value;
}

template <typename T> Windows::System::UserAuthenticationStatus impl_IUser<T>::AuthenticationStatus() const
{
	Windows::System::UserAuthenticationStatus value = {};
	check(shim()->get_AuthenticationStatus(&value));
	return value;
}

template <typename T> Windows::System::UserType impl_IUser<T>::Type() const
{
	Windows::System::UserType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<IInspectable> impl_IUser<T>::GetPropertyAsync(StringReference const & value) const
{
	Windows::Foundation::IAsyncOperation<IInspectable> operation;
	check(shim()->abi_GetPropertyAsync(get(value), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IPropertySet> impl_IUser<T>::GetPropertiesAsync(Windows::Foundation::Collections::IVectorView<String> const & values) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IPropertySet> operation;
	check(shim()->abi_GetPropertiesAsync(get(values), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamReference> impl_IUser<T>::GetPictureAsync(Windows::System::UserPictureSize const desiredSize) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStreamReference> operation;
	check(shim()->abi_GetPictureAsync(desiredSize, put(operation)));
	return operation;
}

template <typename T> Windows::System::UserWatcher impl_IUserStatics<T>::CreateWatcher() const
{
	Windows::System::UserWatcher watcher = nullptr;
	check(shim()->abi_CreateWatcher(put(watcher)));
	return watcher;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> impl_IUserStatics<T>::FindAllAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> operation;
	check(shim()->abi_FindAllAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> impl_IUserStatics<T>::FindAllAsync(Windows::System::UserType const type) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> operation;
	check(shim()->abi_FindAllAsyncByType(type, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> impl_IUserStatics<T>::FindAllAsync(Windows::System::UserType const type, Windows::System::UserAuthenticationStatus const status) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> operation;
	check(shim()->abi_FindAllAsyncByTypeAndStatus(type, status, put(operation)));
	return operation;
}

template <typename T> Windows::System::User impl_IUserStatics<T>::GetFromId(StringReference const & nonRoamableId) const
{
	Windows::System::User value = nullptr;
	check(shim()->abi_GetFromId(get(nonRoamableId), put(value)));
	return value;
}

template <typename T> Windows::System::UserWatcherStatus impl_IUserWatcher<T>::Status() const
{
	Windows::System::UserWatcherStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> void impl_IUserWatcher<T>::Start() const
{
	check(shim()->abi_Start());
}

template <typename T> void impl_IUserWatcher<T>::Stop() const
{
	check(shim()->abi_Stop());
}

template <typename T> long long impl_IUserWatcher<T>::Added(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Added(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IUserWatcher<T>::Added(F handler) const
{
	return Added(Windows::Foundation::TypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs>(handler));
}

template <typename T> void impl_IUserWatcher<T>::Added(long long const token) const
{
	check(shim()->remove_Added(token));
}

template <typename T> long long impl_IUserWatcher<T>::Removed(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Removed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IUserWatcher<T>::Removed(F handler) const
{
	return Removed(Windows::Foundation::TypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs>(handler));
}

template <typename T> void impl_IUserWatcher<T>::Removed(long long const token) const
{
	check(shim()->remove_Removed(token));
}

template <typename T> long long impl_IUserWatcher<T>::Updated(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Updated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IUserWatcher<T>::Updated(F handler) const
{
	return Updated(Windows::Foundation::TypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs>(handler));
}

template <typename T> void impl_IUserWatcher<T>::Updated(long long const token) const
{
	check(shim()->remove_Updated(token));
}

template <typename T> long long impl_IUserWatcher<T>::AuthenticationStatusChanged(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_AuthenticationStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IUserWatcher<T>::AuthenticationStatusChanged(F handler) const
{
	return AuthenticationStatusChanged(Windows::Foundation::TypedEventHandler<Windows::System::UserWatcher, Windows::System::UserChangedEventArgs>(handler));
}

template <typename T> void impl_IUserWatcher<T>::AuthenticationStatusChanged(long long const token) const
{
	check(shim()->remove_AuthenticationStatusChanged(token));
}

template <typename T> long long impl_IUserWatcher<T>::AuthenticationStatusChanging(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, Windows::System::UserAuthenticationStatusChangingEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_AuthenticationStatusChanging(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IUserWatcher<T>::AuthenticationStatusChanging(F handler) const
{
	return AuthenticationStatusChanging(Windows::Foundation::TypedEventHandler<Windows::System::UserWatcher, Windows::System::UserAuthenticationStatusChangingEventArgs>(handler));
}

template <typename T> void impl_IUserWatcher<T>::AuthenticationStatusChanging(long long const token) const
{
	check(shim()->remove_AuthenticationStatusChanging(token));
}

template <typename T> long long impl_IUserWatcher<T>::EnumerationCompleted(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_EnumerationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IUserWatcher<T>::EnumerationCompleted(F handler) const
{
	return EnumerationCompleted(Windows::Foundation::TypedEventHandler<Windows::System::UserWatcher, IInspectable>(handler));
}

template <typename T> void impl_IUserWatcher<T>::EnumerationCompleted(long long const token) const
{
	check(shim()->remove_EnumerationCompleted(token));
}

template <typename T> long long impl_IUserWatcher<T>::Stopped(Windows::Foundation::ITypedEventHandler<Windows::System::UserWatcher, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_Stopped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IUserWatcher<T>::Stopped(F handler) const
{
	return Stopped(Windows::Foundation::TypedEventHandler<Windows::System::UserWatcher, IInspectable>(handler));
}

template <typename T> void impl_IUserWatcher<T>::Stopped(long long const token) const
{
	check(shim()->remove_Stopped(token));
}

template <typename T> Windows::System::User impl_IUserChangedEventArgs<T>::User() const
{
	Windows::System::User value = nullptr;
	check(shim()->get_User(put(value)));
	return value;
}

template <typename T> void impl_IUserAuthenticationStatusChangeDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::System::UserAuthenticationStatusChangeDeferral impl_IUserAuthenticationStatusChangingEventArgs<T>::GetDeferral() const
{
	Windows::System::UserAuthenticationStatusChangeDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> Windows::System::User impl_IUserAuthenticationStatusChangingEventArgs<T>::User() const
{
	Windows::System::User value = nullptr;
	check(shim()->get_User(put(value)));
	return value;
}

template <typename T> Windows::System::UserAuthenticationStatus impl_IUserAuthenticationStatusChangingEventArgs<T>::NewStatus() const
{
	Windows::System::UserAuthenticationStatus value = {};
	check(shim()->get_NewStatus(&value));
	return value;
}

template <typename T> Windows::System::UserAuthenticationStatus impl_IUserAuthenticationStatusChangingEventArgs<T>::CurrentStatus() const
{
	Windows::System::UserAuthenticationStatus value = {};
	check(shim()->get_CurrentStatus(&value));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::FirstName() const
{
	String value;
	check(shim()->get_FirstName(put(value)));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::LastName() const
{
	String value;
	check(shim()->get_LastName(put(value)));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::ProviderName() const
{
	String value;
	check(shim()->get_ProviderName(put(value)));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::AccountName() const
{
	String value;
	check(shim()->get_AccountName(put(value)));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::GuestHost() const
{
	String value;
	check(shim()->get_GuestHost(put(value)));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::PrincipalName() const
{
	String value;
	check(shim()->get_PrincipalName(put(value)));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::DomainName() const
{
	String value;
	check(shim()->get_DomainName(put(value)));
	return value;
}

template <typename T> String impl_IKnownUserPropertiesStatics<T>::SessionInitiationProtocolUri() const
{
	String value;
	check(shim()->get_SessionInitiationProtocolUri(put(value)));
	return value;
}

template <typename T> Windows::System::LaunchUriStatus impl_ILaunchUriResult<T>::Status() const
{
	Windows::System::LaunchUriStatus value = {};
	check(shim()->get_Status(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_ILaunchUriResult<T>::Result() const
{
	Windows::Foundation::Collections::ValueSet value = nullptr;
	check(shim()->get_Result(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::Point> impl_ILauncherUIOptions<T>::InvocationPoint() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::Point> value;
	check(shim()->get_InvocationPoint(put(value)));
	return value;
}

template <typename T> void impl_ILauncherUIOptions<T>::InvocationPoint(Windows::Foundation::IReference<winrt::Windows::Foundation::Point> const & value) const
{
	check(shim()->put_InvocationPoint(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::Rect> impl_ILauncherUIOptions<T>::SelectionRect() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::Rect> value;
	check(shim()->get_SelectionRect(put(value)));
	return value;
}

template <typename T> void impl_ILauncherUIOptions<T>::SelectionRect(Windows::Foundation::IReference<winrt::Windows::Foundation::Rect> const & value) const
{
	check(shim()->put_SelectionRect(get(value)));
}

template <typename T> Windows::UI::Popups::Placement impl_ILauncherUIOptions<T>::PreferredPlacement() const
{
	Windows::UI::Popups::Placement value = {};
	check(shim()->get_PreferredPlacement(&value));
	return value;
}

template <typename T> void impl_ILauncherUIOptions<T>::PreferredPlacement(Windows::UI::Popups::Placement const value) const
{
	check(shim()->put_PreferredPlacement(value));
}

template <typename T> bool impl_ILauncherOptions<T>::TreatAsUntrusted() const
{
	bool value = {};
	check(shim()->get_TreatAsUntrusted(put(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::TreatAsUntrusted(bool const value) const
{
	check(shim()->put_TreatAsUntrusted(value));
}

template <typename T> bool impl_ILauncherOptions<T>::DisplayApplicationPicker() const
{
	bool value = {};
	check(shim()->get_DisplayApplicationPicker(put(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::DisplayApplicationPicker(bool const value) const
{
	check(shim()->put_DisplayApplicationPicker(value));
}

template <typename T> Windows::System::LauncherUIOptions impl_ILauncherOptions<T>::UI() const
{
	Windows::System::LauncherUIOptions value = nullptr;
	check(shim()->get_UI(put(value)));
	return value;
}

template <typename T> String impl_ILauncherOptions<T>::PreferredApplicationPackageFamilyName() const
{
	String value;
	check(shim()->get_PreferredApplicationPackageFamilyName(put(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::PreferredApplicationPackageFamilyName(StringReference const & value) const
{
	check(shim()->put_PreferredApplicationPackageFamilyName(get(value)));
}

template <typename T> String impl_ILauncherOptions<T>::PreferredApplicationDisplayName() const
{
	String value;
	check(shim()->get_PreferredApplicationDisplayName(put(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::PreferredApplicationDisplayName(StringReference const & value) const
{
	check(shim()->put_PreferredApplicationDisplayName(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ILauncherOptions<T>::FallbackUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_FallbackUri(put(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::FallbackUri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_FallbackUri(get(value)));
}

template <typename T> String impl_ILauncherOptions<T>::ContentType() const
{
	String value;
	check(shim()->get_ContentType(put(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions<T>::ContentType(StringReference const & value) const
{
	check(shim()->put_ContentType(get(value)));
}

template <typename T> String impl_ILauncherOptions2<T>::TargetApplicationPackageFamilyName() const
{
	String value;
	check(shim()->get_TargetApplicationPackageFamilyName(put(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions2<T>::TargetApplicationPackageFamilyName(StringReference const & value) const
{
	check(shim()->put_TargetApplicationPackageFamilyName(get(value)));
}

template <typename T> Windows::Storage::Search::StorageFileQueryResult impl_ILauncherOptions2<T>::NeighboringFilesQuery() const
{
	Windows::Storage::Search::StorageFileQueryResult value = nullptr;
	check(shim()->get_NeighboringFilesQuery(put(value)));
	return value;
}

template <typename T> void impl_ILauncherOptions2<T>::NeighboringFilesQuery(Windows::Storage::Search::StorageFileQueryResult const & value) const
{
	check(shim()->put_NeighboringFilesQuery(get(value)));
}

template <typename T> Windows::UI::ViewManagement::ViewSizePreference impl_ILauncherViewOptions<T>::DesiredRemainingView() const
{
	Windows::UI::ViewManagement::ViewSizePreference value = {};
	check(shim()->get_DesiredRemainingView(&value));
	return value;
}

template <typename T> void impl_ILauncherViewOptions<T>::DesiredRemainingView(Windows::UI::ViewManagement::ViewSizePreference const value) const
{
	check(shim()->put_DesiredRemainingView(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Storage::IStorageItem> impl_IFolderLauncherOptions<T>::ItemsToSelect() const
{
	Windows::Foundation::Collections::IVector<Windows::Storage::IStorageItem> value;
	check(shim()->get_ItemsToSelect(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics<T>::LaunchFileAsync(Windows::Storage::IStorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_LaunchFileAsync(get(file), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics<T>::LaunchFileAsync(Windows::Storage::IStorageFile const & file, Windows::System::LauncherOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_LaunchFileWithOptionsAsync(get(file), get(options), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics<T>::LaunchUriAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_LaunchUriAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics<T>::LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_LaunchUriWithOptionsAsync(get(uri), get(options), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::System::LaunchUriResult> impl_ILauncherStatics2<T>::LaunchUriForResultsAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<Windows::System::LaunchUriResult> operation;
	check(shim()->abi_LaunchUriForResultsAsync(get(uri), get(options), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::System::LaunchUriResult> impl_ILauncherStatics2<T>::LaunchUriForResultsAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options, Windows::Foundation::Collections::ValueSet const & inputData) const
{
	Windows::Foundation::IAsyncOperation<Windows::System::LaunchUriResult> operation;
	check(shim()->abi_LaunchUriForResultsWithDataAsync(get(uri), get(options), get(inputData), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics2<T>::LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options, Windows::Foundation::Collections::ValueSet const & inputData) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_LaunchUriWithDataAsync(get(uri), get(options), get(inputData), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> impl_ILauncherStatics2<T>::QueryUriSupportAsync(Windows::Foundation::Uri const & uri, Windows::System::LaunchQuerySupportType const launchQuerySupportType) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> operation;
	check(shim()->abi_QueryUriSupportAsync(get(uri), launchQuerySupportType, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> impl_ILauncherStatics2<T>::QueryUriSupportAsync(Windows::Foundation::Uri const & uri, Windows::System::LaunchQuerySupportType const launchQuerySupportType, StringReference const & packageFamilyName) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> operation;
	check(shim()->abi_QueryUriSupportWithPackageFamilyNameAsync(get(uri), launchQuerySupportType, get(packageFamilyName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> impl_ILauncherStatics2<T>::QueryFileSupportAsync(Windows::Storage::StorageFile const & file) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> operation;
	check(shim()->abi_QueryFileSupportAsync(get(file), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> impl_ILauncherStatics2<T>::QueryFileSupportAsync(Windows::Storage::StorageFile const & file, StringReference const & packageFamilyName) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> operation;
	check(shim()->abi_QueryFileSupportWithPackageFamilyNameAsync(get(file), get(packageFamilyName), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> impl_ILauncherStatics2<T>::FindUriSchemeHandlersAsync(StringReference const & scheme) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> operation;
	check(shim()->abi_FindUriSchemeHandlersAsync(get(scheme), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> impl_ILauncherStatics2<T>::FindUriSchemeHandlersAsync(StringReference const & scheme, Windows::System::LaunchQuerySupportType const launchQuerySupportType) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> operation;
	check(shim()->abi_FindUriSchemeHandlersWithLaunchUriTypeAsync(get(scheme), launchQuerySupportType, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> impl_ILauncherStatics2<T>::FindFileHandlersAsync(StringReference const & extension) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> operation;
	check(shim()->abi_FindFileHandlersAsync(get(extension), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics3<T>::LaunchFolderAsync(Windows::Storage::IStorageFolder const & folder) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_LaunchFolderAsync(get(folder), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ILauncherStatics3<T>::LaunchFolderAsync(Windows::Storage::IStorageFolder const & folder, Windows::System::FolderLauncherOptions const & options) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_LaunchFolderWithOptionsAsync(get(folder), get(options), put(operation)));
	return operation;
}

}}}

namespace winrt { namespace Windows { namespace System { namespace Diagnostics {

template <typename T> unsigned impl_IProcessDiagnosticInfo<T>::ProcessId() const
{
	unsigned value = {};
	check(shim()->get_ProcessId(&value));
	return value;
}

template <typename T> String impl_IProcessDiagnosticInfo<T>::ExecutableFileName() const
{
	String value;
	check(shim()->get_ExecutableFileName(put(value)));
	return value;
}

template <typename T> Windows::System::Diagnostics::ProcessDiagnosticInfo impl_IProcessDiagnosticInfo<T>::Parent() const
{
	Windows::System::Diagnostics::ProcessDiagnosticInfo value = nullptr;
	check(shim()->get_Parent(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IProcessDiagnosticInfo<T>::ProcessStartTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_ProcessStartTime(&value));
	return value;
}

template <typename T> Windows::System::Diagnostics::ProcessDiskUsage impl_IProcessDiagnosticInfo<T>::DiskUsage() const
{
	Windows::System::Diagnostics::ProcessDiskUsage value = nullptr;
	check(shim()->get_DiskUsage(put(value)));
	return value;
}

template <typename T> Windows::System::Diagnostics::ProcessMemoryUsage impl_IProcessDiagnosticInfo<T>::MemoryUsage() const
{
	Windows::System::Diagnostics::ProcessMemoryUsage value = nullptr;
	check(shim()->get_MemoryUsage(put(value)));
	return value;
}

template <typename T> Windows::System::Diagnostics::ProcessCpuUsage impl_IProcessDiagnosticInfo<T>::CpuUsage() const
{
	Windows::System::Diagnostics::ProcessCpuUsage value = nullptr;
	check(shim()->get_CpuUsage(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::System::Diagnostics::ProcessDiagnosticInfo> impl_IProcessDiagnosticInfoStatics<T>::GetForProcesses() const
{
	Windows::Foundation::Collections::IVectorView<Windows::System::Diagnostics::ProcessDiagnosticInfo> processes;
	check(shim()->abi_GetForProcesses(put(processes)));
	return processes;
}

template <typename T> Windows::System::Diagnostics::ProcessDiagnosticInfo impl_IProcessDiagnosticInfoStatics<T>::GetForCurrentProcess() const
{
	Windows::System::Diagnostics::ProcessDiagnosticInfo processes = nullptr;
	check(shim()->abi_GetForCurrentProcess(put(processes)));
	return processes;
}

template <typename T> Windows::System::Diagnostics::ProcessMemoryUsageReport impl_IProcessMemoryUsage<T>::GetReport() const
{
	Windows::System::Diagnostics::ProcessMemoryUsageReport value = nullptr;
	check(shim()->abi_GetReport(put(value)));
	return value;
}

template <typename T> unsigned long long impl_IProcessMemoryUsageReport<T>::NonPagedPoolSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_NonPagedPoolSizeInBytes(&value));
	return value;
}

template <typename T> unsigned impl_IProcessMemoryUsageReport<T>::PageFaultCount() const
{
	unsigned value = {};
	check(shim()->get_PageFaultCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IProcessMemoryUsageReport<T>::PageFileSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_PageFileSizeInBytes(&value));
	return value;
}

template <typename T> unsigned long long impl_IProcessMemoryUsageReport<T>::PagedPoolSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_PagedPoolSizeInBytes(&value));
	return value;
}

template <typename T> unsigned long long impl_IProcessMemoryUsageReport<T>::PeakNonPagedPoolSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_PeakNonPagedPoolSizeInBytes(&value));
	return value;
}

template <typename T> unsigned long long impl_IProcessMemoryUsageReport<T>::PeakPageFileSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_PeakPageFileSizeInBytes(&value));
	return value;
}

template <typename T> unsigned long long impl_IProcessMemoryUsageReport<T>::PeakPagedPoolSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_PeakPagedPoolSizeInBytes(&value));
	return value;
}

template <typename T> unsigned long long impl_IProcessMemoryUsageReport<T>::PeakVirtualMemorySizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_PeakVirtualMemorySizeInBytes(&value));
	return value;
}

template <typename T> unsigned long long impl_IProcessMemoryUsageReport<T>::PeakWorkingSetSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_PeakWorkingSetSizeInBytes(&value));
	return value;
}

template <typename T> unsigned long long impl_IProcessMemoryUsageReport<T>::PrivatePageCount() const
{
	unsigned long long value = {};
	check(shim()->get_PrivatePageCount(&value));
	return value;
}

template <typename T> unsigned long long impl_IProcessMemoryUsageReport<T>::VirtualMemorySizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_VirtualMemorySizeInBytes(&value));
	return value;
}

template <typename T> unsigned long long impl_IProcessMemoryUsageReport<T>::WorkingSetSizeInBytes() const
{
	unsigned long long value = {};
	check(shim()->get_WorkingSetSizeInBytes(&value));
	return value;
}

template <typename T> Windows::System::Diagnostics::ProcessDiskUsageReport impl_IProcessDiskUsage<T>::GetReport() const
{
	Windows::System::Diagnostics::ProcessDiskUsageReport value = nullptr;
	check(shim()->abi_GetReport(put(value)));
	return value;
}

template <typename T> long long impl_IProcessDiskUsageReport<T>::ReadOperationCount() const
{
	long long value = {};
	check(shim()->get_ReadOperationCount(&value));
	return value;
}

template <typename T> long long impl_IProcessDiskUsageReport<T>::WriteOperationCount() const
{
	long long value = {};
	check(shim()->get_WriteOperationCount(&value));
	return value;
}

template <typename T> long long impl_IProcessDiskUsageReport<T>::OtherOperationCount() const
{
	long long value = {};
	check(shim()->get_OtherOperationCount(&value));
	return value;
}

template <typename T> long long impl_IProcessDiskUsageReport<T>::BytesReadCount() const
{
	long long value = {};
	check(shim()->get_BytesReadCount(&value));
	return value;
}

template <typename T> long long impl_IProcessDiskUsageReport<T>::BytesWrittenCount() const
{
	long long value = {};
	check(shim()->get_BytesWrittenCount(&value));
	return value;
}

template <typename T> long long impl_IProcessDiskUsageReport<T>::OtherBytesCount() const
{
	long long value = {};
	check(shim()->get_OtherBytesCount(&value));
	return value;
}

template <typename T> Windows::System::Diagnostics::ProcessCpuUsageReport impl_IProcessCpuUsage<T>::GetReport() const
{
	Windows::System::Diagnostics::ProcessCpuUsageReport value = nullptr;
	check(shim()->abi_GetReport(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IProcessCpuUsageReport<T>::KernelTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_KernelTime(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IProcessCpuUsageReport<T>::UserTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_UserTime(&value));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace System { namespace Display {

template <typename T> void impl_IDisplayRequest<T>::RequestActive() const
{
	check(shim()->abi_RequestActive());
}

template <typename T> void impl_IDisplayRequest<T>::RequestRelease() const
{
	check(shim()->abi_RequestRelease());
}

}}}}

namespace winrt { namespace Windows { namespace System { namespace Power {

template <typename T> Windows::System::Power::EnergySaverStatus impl_IPowerManagerStatics<T>::EnergySaverStatus() const
{
	Windows::System::Power::EnergySaverStatus value = {};
	check(shim()->get_EnergySaverStatus(&value));
	return value;
}

template <typename T> long long impl_IPowerManagerStatics<T>::EnergySaverStatusChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_EnergySaverStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPowerManagerStatics<T>::EnergySaverStatusChanged(F handler) const
{
	return EnergySaverStatusChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IPowerManagerStatics<T>::EnergySaverStatusChanged(long long const token) const
{
	check(shim()->remove_EnergySaverStatusChanged(token));
}

template <typename T> Windows::System::Power::BatteryStatus impl_IPowerManagerStatics<T>::BatteryStatus() const
{
	Windows::System::Power::BatteryStatus value = {};
	check(shim()->get_BatteryStatus(&value));
	return value;
}

template <typename T> long long impl_IPowerManagerStatics<T>::BatteryStatusChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_BatteryStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPowerManagerStatics<T>::BatteryStatusChanged(F handler) const
{
	return BatteryStatusChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IPowerManagerStatics<T>::BatteryStatusChanged(long long const token) const
{
	check(shim()->remove_BatteryStatusChanged(token));
}

template <typename T> Windows::System::Power::PowerSupplyStatus impl_IPowerManagerStatics<T>::PowerSupplyStatus() const
{
	Windows::System::Power::PowerSupplyStatus value = {};
	check(shim()->get_PowerSupplyStatus(&value));
	return value;
}

template <typename T> long long impl_IPowerManagerStatics<T>::PowerSupplyStatusChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_PowerSupplyStatusChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPowerManagerStatics<T>::PowerSupplyStatusChanged(F handler) const
{
	return PowerSupplyStatusChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IPowerManagerStatics<T>::PowerSupplyStatusChanged(long long const token) const
{
	check(shim()->remove_PowerSupplyStatusChanged(token));
}

template <typename T> int impl_IPowerManagerStatics<T>::RemainingChargePercent() const
{
	int value = {};
	check(shim()->get_RemainingChargePercent(&value));
	return value;
}

template <typename T> long long impl_IPowerManagerStatics<T>::RemainingChargePercentChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_RemainingChargePercentChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPowerManagerStatics<T>::RemainingChargePercentChanged(F handler) const
{
	return RemainingChargePercentChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IPowerManagerStatics<T>::RemainingChargePercentChanged(long long const token) const
{
	check(shim()->remove_RemainingChargePercentChanged(token));
}

template <typename T> Windows::Foundation::TimeSpan impl_IPowerManagerStatics<T>::RemainingDischargeTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_RemainingDischargeTime(&value));
	return value;
}

template <typename T> long long impl_IPowerManagerStatics<T>::RemainingDischargeTimeChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_RemainingDischargeTimeChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPowerManagerStatics<T>::RemainingDischargeTimeChanged(F handler) const
{
	return RemainingDischargeTimeChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IPowerManagerStatics<T>::RemainingDischargeTimeChanged(long long const token) const
{
	check(shim()->remove_RemainingDischargeTimeChanged(token));
}

template <typename T> unsigned impl_IBackgroundEnergyManagerStatics<T>::LowUsageLevel() const
{
	unsigned value = {};
	check(shim()->get_LowUsageLevel(&value));
	return value;
}

template <typename T> unsigned impl_IBackgroundEnergyManagerStatics<T>::NearMaxAcceptableUsageLevel() const
{
	unsigned value = {};
	check(shim()->get_NearMaxAcceptableUsageLevel(&value));
	return value;
}

template <typename T> unsigned impl_IBackgroundEnergyManagerStatics<T>::MaxAcceptableUsageLevel() const
{
	unsigned value = {};
	check(shim()->get_MaxAcceptableUsageLevel(&value));
	return value;
}

template <typename T> unsigned impl_IBackgroundEnergyManagerStatics<T>::ExcessiveUsageLevel() const
{
	unsigned value = {};
	check(shim()->get_ExcessiveUsageLevel(&value));
	return value;
}

template <typename T> unsigned impl_IBackgroundEnergyManagerStatics<T>::NearTerminationUsageLevel() const
{
	unsigned value = {};
	check(shim()->get_NearTerminationUsageLevel(&value));
	return value;
}

template <typename T> unsigned impl_IBackgroundEnergyManagerStatics<T>::TerminationUsageLevel() const
{
	unsigned value = {};
	check(shim()->get_TerminationUsageLevel(&value));
	return value;
}

template <typename T> unsigned impl_IBackgroundEnergyManagerStatics<T>::RecentEnergyUsage() const
{
	unsigned value = {};
	check(shim()->get_RecentEnergyUsage(&value));
	return value;
}

template <typename T> unsigned impl_IBackgroundEnergyManagerStatics<T>::RecentEnergyUsageLevel() const
{
	unsigned value = {};
	check(shim()->get_RecentEnergyUsageLevel(&value));
	return value;
}

template <typename T> long long impl_IBackgroundEnergyManagerStatics<T>::RecentEnergyUsageIncreased(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_RecentEnergyUsageIncreased(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBackgroundEnergyManagerStatics<T>::RecentEnergyUsageIncreased(F handler) const
{
	return RecentEnergyUsageIncreased(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IBackgroundEnergyManagerStatics<T>::RecentEnergyUsageIncreased(long long const token) const
{
	check(shim()->remove_RecentEnergyUsageIncreased(token));
}

template <typename T> long long impl_IBackgroundEnergyManagerStatics<T>::RecentEnergyUsageReturnedToLow(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_RecentEnergyUsageReturnedToLow(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IBackgroundEnergyManagerStatics<T>::RecentEnergyUsageReturnedToLow(F handler) const
{
	return RecentEnergyUsageReturnedToLow(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IBackgroundEnergyManagerStatics<T>::RecentEnergyUsageReturnedToLow(long long const token) const
{
	check(shim()->remove_RecentEnergyUsageReturnedToLow(token));
}

template <typename T> unsigned impl_IForegroundEnergyManagerStatics<T>::LowUsageLevel() const
{
	unsigned value = {};
	check(shim()->get_LowUsageLevel(&value));
	return value;
}

template <typename T> unsigned impl_IForegroundEnergyManagerStatics<T>::NearMaxAcceptableUsageLevel() const
{
	unsigned value = {};
	check(shim()->get_NearMaxAcceptableUsageLevel(&value));
	return value;
}

template <typename T> unsigned impl_IForegroundEnergyManagerStatics<T>::MaxAcceptableUsageLevel() const
{
	unsigned value = {};
	check(shim()->get_MaxAcceptableUsageLevel(&value));
	return value;
}

template <typename T> unsigned impl_IForegroundEnergyManagerStatics<T>::ExcessiveUsageLevel() const
{
	unsigned value = {};
	check(shim()->get_ExcessiveUsageLevel(&value));
	return value;
}

template <typename T> unsigned impl_IForegroundEnergyManagerStatics<T>::RecentEnergyUsage() const
{
	unsigned value = {};
	check(shim()->get_RecentEnergyUsage(&value));
	return value;
}

template <typename T> unsigned impl_IForegroundEnergyManagerStatics<T>::RecentEnergyUsageLevel() const
{
	unsigned value = {};
	check(shim()->get_RecentEnergyUsageLevel(&value));
	return value;
}

template <typename T> long long impl_IForegroundEnergyManagerStatics<T>::RecentEnergyUsageIncreased(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_RecentEnergyUsageIncreased(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IForegroundEnergyManagerStatics<T>::RecentEnergyUsageIncreased(F handler) const
{
	return RecentEnergyUsageIncreased(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IForegroundEnergyManagerStatics<T>::RecentEnergyUsageIncreased(long long const token) const
{
	check(shim()->remove_RecentEnergyUsageIncreased(token));
}

template <typename T> long long impl_IForegroundEnergyManagerStatics<T>::RecentEnergyUsageReturnedToLow(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_RecentEnergyUsageReturnedToLow(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IForegroundEnergyManagerStatics<T>::RecentEnergyUsageReturnedToLow(F handler) const
{
	return RecentEnergyUsageReturnedToLow(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IForegroundEnergyManagerStatics<T>::RecentEnergyUsageReturnedToLow(long long const token) const
{
	check(shim()->remove_RecentEnergyUsageReturnedToLow(token));
}

}}}}

namespace winrt { namespace Windows { namespace System { namespace Power { namespace Diagnostics {

template <typename T> double impl_IBackgroundEnergyDiagnosticsStatics<T>::DeviceSpecificConversionFactor() const
{
	double value = {};
	check(shim()->get_DeviceSpecificConversionFactor(&value));
	return value;
}

template <typename T> unsigned long long impl_IBackgroundEnergyDiagnosticsStatics<T>::ComputeTotalEnergyUsage() const
{
	unsigned long long value = {};
	check(shim()->abi_ComputeTotalEnergyUsage(&value));
	return value;
}

template <typename T> void impl_IBackgroundEnergyDiagnosticsStatics<T>::ResetTotalEnergyUsage() const
{
	check(shim()->abi_ResetTotalEnergyUsage());
}

template <typename T> double impl_IForegroundEnergyDiagnosticsStatics<T>::DeviceSpecificConversionFactor() const
{
	double value = {};
	check(shim()->get_DeviceSpecificConversionFactor(&value));
	return value;
}

template <typename T> unsigned long long impl_IForegroundEnergyDiagnosticsStatics<T>::ComputeTotalEnergyUsage() const
{
	unsigned long long value = {};
	check(shim()->abi_ComputeTotalEnergyUsage(&value));
	return value;
}

template <typename T> void impl_IForegroundEnergyDiagnosticsStatics<T>::ResetTotalEnergyUsage() const
{
	check(shim()->abi_ResetTotalEnergyUsage());
}

}}}}}

namespace winrt { namespace Windows { namespace System { namespace Profile {

template <typename T> Windows::System::Profile::AnalyticsVersionInfo impl_IAnalyticsInfoStatics<T>::VersionInfo() const
{
	Windows::System::Profile::AnalyticsVersionInfo value = nullptr;
	check(shim()->get_VersionInfo(put(value)));
	return value;
}

template <typename T> String impl_IAnalyticsInfoStatics<T>::DeviceForm() const
{
	String value;
	check(shim()->get_DeviceForm(put(value)));
	return value;
}

template <typename T> String impl_IAnalyticsVersionInfo<T>::DeviceFamily() const
{
	String value;
	check(shim()->get_DeviceFamily(put(value)));
	return value;
}

template <typename T> String impl_IAnalyticsVersionInfo<T>::DeviceFamilyVersion() const
{
	String value;
	check(shim()->get_DeviceFamilyVersion(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHardwareToken<T>::Id() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHardwareToken<T>::Signature() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Signature(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHardwareToken<T>::Certificate() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_Certificate(put(value)));
	return value;
}

template <typename T> Windows::System::Profile::HardwareToken impl_IHardwareIdentificationStatics<T>::GetPackageSpecificToken(Windows::Storage::Streams::IBuffer const & nonce) const
{
	Windows::System::Profile::HardwareToken packageSpecificHardwareToken = nullptr;
	check(shim()->abi_GetPackageSpecificToken(get(nonce), put(packageSpecificHardwareToken)));
	return packageSpecificHardwareToken;
}

template <typename T> bool impl_ISharedModeSettingsStatics<T>::IsEnabled() const
{
	bool value = {};
	check(shim()->get_IsEnabled(put(value)));
	return value;
}

template <typename T> Windows::System::Profile::PlatformDataCollectionLevel impl_IPlatformDiagnosticsAndUsageDataSettingsStatics<T>::CollectionLevel() const
{
	Windows::System::Profile::PlatformDataCollectionLevel value = {};
	check(shim()->get_CollectionLevel(&value));
	return value;
}

template <typename T> long long impl_IPlatformDiagnosticsAndUsageDataSettingsStatics<T>::CollectionLevelChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_CollectionLevelChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IPlatformDiagnosticsAndUsageDataSettingsStatics<T>::CollectionLevelChanged(F handler) const
{
	return CollectionLevelChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IPlatformDiagnosticsAndUsageDataSettingsStatics<T>::CollectionLevelChanged(long long const token) const
{
	check(shim()->remove_CollectionLevelChanged(token));
}

template <typename T> bool impl_IPlatformDiagnosticsAndUsageDataSettingsStatics<T>::CanCollectDiagnostics(Windows::System::Profile::PlatformDataCollectionLevel const level) const
{
	bool result = {};
	check(shim()->abi_CanCollectDiagnostics(level, put(result)));
	return result;
}

template <typename T> bool impl_IRetailInfoStatics<T>::IsDemoModeEnabled() const
{
	bool value = {};
	check(shim()->get_IsDemoModeEnabled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IMapView<String, IInspectable> impl_IRetailInfoStatics<T>::Properties() const
{
	Windows::Foundation::Collections::IMapView<String, IInspectable> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::RetailAccessCode() const
{
	String value;
	check(shim()->get_RetailAccessCode(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::ManufacturerName() const
{
	String value;
	check(shim()->get_ManufacturerName(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::ModelName() const
{
	String value;
	check(shim()->get_ModelName(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::DisplayModelName() const
{
	String value;
	check(shim()->get_DisplayModelName(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::Price() const
{
	String value;
	check(shim()->get_Price(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::IsFeatured() const
{
	String value;
	check(shim()->get_IsFeatured(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::FormFactor() const
{
	String value;
	check(shim()->get_FormFactor(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::ScreenSize() const
{
	String value;
	check(shim()->get_ScreenSize(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::Weight() const
{
	String value;
	check(shim()->get_Weight(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::DisplayDescription() const
{
	String value;
	check(shim()->get_DisplayDescription(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::BatteryLifeDescription() const
{
	String value;
	check(shim()->get_BatteryLifeDescription(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::ProcessorDescription() const
{
	String value;
	check(shim()->get_ProcessorDescription(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::Memory() const
{
	String value;
	check(shim()->get_Memory(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::StorageDescription() const
{
	String value;
	check(shim()->get_StorageDescription(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::GraphicsDescription() const
{
	String value;
	check(shim()->get_GraphicsDescription(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::FrontCameraDescription() const
{
	String value;
	check(shim()->get_FrontCameraDescription(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::RearCameraDescription() const
{
	String value;
	check(shim()->get_RearCameraDescription(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::HasNfc() const
{
	String value;
	check(shim()->get_HasNfc(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::HasSdSlot() const
{
	String value;
	check(shim()->get_HasSdSlot(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::HasOpticalDrive() const
{
	String value;
	check(shim()->get_HasOpticalDrive(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::IsOfficeInstalled() const
{
	String value;
	check(shim()->get_IsOfficeInstalled(put(value)));
	return value;
}

template <typename T> String impl_IKnownRetailInfoPropertiesStatics<T>::WindowsEdition() const
{
	String value;
	check(shim()->get_WindowsEdition(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace System { namespace Profile { namespace SystemManufacturers {

template <typename T> String impl_ISmbiosInformationStatics<T>::SerialNumber() const
{
	String value;
	check(shim()->get_SerialNumber(put(value)));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace System { namespace RemoteDesktop {

template <typename T> bool impl_IInteractiveSessionStatics<T>::IsRemote() const
{
	bool value = {};
	check(shim()->get_IsRemote(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace System { namespace Threading {

template <typename T> void impl_ITimerElapsedHandler<T>::Invoke(Windows::System::Threading::ThreadPoolTimer const & timer) const
{
	check(shim()->abi_Invoke(get(timer)));
}

template <typename T> void impl_ITimerDestroyedHandler<T>::Invoke(Windows::System::Threading::ThreadPoolTimer const & timer) const
{
	check(shim()->abi_Invoke(get(timer)));
}

template <typename T> void impl_IWorkItemHandler<T>::Invoke(Windows::Foundation::IAsyncAction const & operation) const
{
	check(shim()->abi_Invoke(get(operation)));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IThreadPoolStatics<T>::RunAsync(Windows::System::Threading::IWorkItemHandler const & handler) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_RunAsync(get(handler), put(operation)));
	return operation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncAction impl_IThreadPoolStatics<T>::RunAsync(F handler) const
{
	return RunAsync(Windows::System::Threading::WorkItemHandler(handler));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IThreadPoolStatics<T>::RunAsync(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority const priority) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_RunWithPriorityAsync(get(handler), priority, put(operation)));
	return operation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncAction impl_IThreadPoolStatics<T>::RunAsync(F handler, Windows::System::Threading::WorkItemPriority const priority) const
{
	return RunAsync(Windows::System::Threading::WorkItemHandler(handler), priority);
}

template <typename T> Windows::Foundation::IAsyncAction impl_IThreadPoolStatics<T>::RunAsync(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority const priority, Windows::System::Threading::WorkItemOptions const options) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_RunWithPriorityAndOptionsAsync(get(handler), priority, options, put(operation)));
	return operation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncAction impl_IThreadPoolStatics<T>::RunAsync(F handler, Windows::System::Threading::WorkItemPriority const priority, Windows::System::Threading::WorkItemOptions const options) const
{
	return RunAsync(Windows::System::Threading::WorkItemHandler(handler), priority, options);
}

template <typename T> Windows::Foundation::TimeSpan impl_IThreadPoolTimer<T>::Period() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Period(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IThreadPoolTimer<T>::Delay() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Delay(&value));
	return value;
}

template <typename T> void impl_IThreadPoolTimer<T>::Cancel() const
{
	check(shim()->abi_Cancel());
}

template <typename T> Windows::System::Threading::ThreadPoolTimer impl_IThreadPoolTimerStatics<T>::CreatePeriodicTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & period) const
{
	Windows::System::Threading::ThreadPoolTimer timer = nullptr;
	check(shim()->abi_CreatePeriodicTimer(get(handler), period, put(timer)));
	return timer;
}

template <typename T> template <typename F> Windows::System::Threading::ThreadPoolTimer impl_IThreadPoolTimerStatics<T>::CreatePeriodicTimer(F handler, Windows::Foundation::TimeSpan const & period) const
{
	return CreatePeriodicTimer(Windows::System::Threading::TimerElapsedHandler(handler), period);
}

template <typename T> Windows::System::Threading::ThreadPoolTimer impl_IThreadPoolTimerStatics<T>::CreateTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & delay) const
{
	Windows::System::Threading::ThreadPoolTimer timer = nullptr;
	check(shim()->abi_CreateTimer(get(handler), delay, put(timer)));
	return timer;
}

template <typename T> template <typename F> Windows::System::Threading::ThreadPoolTimer impl_IThreadPoolTimerStatics<T>::CreateTimer(F handler, Windows::Foundation::TimeSpan const & delay) const
{
	return CreateTimer(Windows::System::Threading::TimerElapsedHandler(handler), delay);
}

template <typename T> Windows::System::Threading::ThreadPoolTimer impl_IThreadPoolTimerStatics<T>::CreatePeriodicTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & period, Windows::System::Threading::ITimerDestroyedHandler const & destroyed) const
{
	Windows::System::Threading::ThreadPoolTimer timer = nullptr;
	check(shim()->abi_CreatePeriodicTimerWithCompletion(get(handler), period, get(destroyed), put(timer)));
	return timer;
}

template <typename T> template <typename F> Windows::System::Threading::ThreadPoolTimer impl_IThreadPoolTimerStatics<T>::CreatePeriodicTimer(F handler, Windows::Foundation::TimeSpan const & period, F destroyed) const
{
	return CreatePeriodicTimer(Windows::System::Threading::TimerElapsedHandler(handler), period, Windows::System::Threading::TimerDestroyedHandler(destroyed));
}

template <typename T> Windows::System::Threading::ThreadPoolTimer impl_IThreadPoolTimerStatics<T>::CreateTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & delay, Windows::System::Threading::ITimerDestroyedHandler const & destroyed) const
{
	Windows::System::Threading::ThreadPoolTimer timer = nullptr;
	check(shim()->abi_CreateTimerWithCompletion(get(handler), delay, get(destroyed), put(timer)));
	return timer;
}

template <typename T> template <typename F> Windows::System::Threading::ThreadPoolTimer impl_IThreadPoolTimerStatics<T>::CreateTimer(F handler, Windows::Foundation::TimeSpan const & delay, F destroyed) const
{
	return CreateTimer(Windows::System::Threading::TimerElapsedHandler(handler), delay, Windows::System::Threading::TimerDestroyedHandler(destroyed));
}

}}}}

namespace winrt { namespace Windows { namespace System { namespace Threading { namespace Core {

template <typename T> void impl_ISignalHandler<T>::Invoke(Windows::System::Threading::Core::SignalNotifier const & signalNotifier, bool const timedOut) const
{
	check(shim()->abi_Invoke(get(signalNotifier), timedOut));
}

template <typename T> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToEvent(StringReference const & name, Windows::System::Threading::Core::ISignalHandler const & handler) const
{
	Windows::System::Threading::Core::SignalNotifier signalNotifier = nullptr;
	check(shim()->abi_AttachToEvent(get(name), get(handler), put(signalNotifier)));
	return signalNotifier;
}

template <typename T> template <typename F> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToEvent(StringReference const & name, F handler) const
{
	return AttachToEvent(name, Windows::System::Threading::Core::SignalHandler(handler));
}

template <typename T> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToEvent(StringReference const & name, Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout) const
{
	Windows::System::Threading::Core::SignalNotifier signalNotifier = nullptr;
	check(shim()->abi_AttachToEventWithTimeout(get(name), get(handler), timeout, put(signalNotifier)));
	return signalNotifier;
}

template <typename T> template <typename F> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToEvent(StringReference const & name, F handler, Windows::Foundation::TimeSpan const & timeout) const
{
	return AttachToEvent(name, Windows::System::Threading::Core::SignalHandler(handler), timeout);
}

template <typename T> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToSemaphore(StringReference const & name, Windows::System::Threading::Core::ISignalHandler const & handler) const
{
	Windows::System::Threading::Core::SignalNotifier signalNotifier = nullptr;
	check(shim()->abi_AttachToSemaphore(get(name), get(handler), put(signalNotifier)));
	return signalNotifier;
}

template <typename T> template <typename F> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToSemaphore(StringReference const & name, F handler) const
{
	return AttachToSemaphore(name, Windows::System::Threading::Core::SignalHandler(handler));
}

template <typename T> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToSemaphore(StringReference const & name, Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout) const
{
	Windows::System::Threading::Core::SignalNotifier signalNotifier = nullptr;
	check(shim()->abi_AttachToSemaphoreWithTimeout(get(name), get(handler), timeout, put(signalNotifier)));
	return signalNotifier;
}

template <typename T> template <typename F> Windows::System::Threading::Core::SignalNotifier impl_ISignalNotifierStatics<T>::AttachToSemaphore(StringReference const & name, F handler, Windows::Foundation::TimeSpan const & timeout) const
{
	return AttachToSemaphore(name, Windows::System::Threading::Core::SignalHandler(handler), timeout);
}

template <typename T> Windows::System::Threading::Core::PreallocatedWorkItem impl_IPreallocatedWorkItemFactory<T>::CreateWorkItem(Windows::System::Threading::IWorkItemHandler const & handler) const
{
	Windows::System::Threading::Core::PreallocatedWorkItem workItem = nullptr;
	check(shim()->abi_CreateWorkItem(get(handler), put(workItem)));
	return workItem;
}

template <typename T> template <typename F> Windows::System::Threading::Core::PreallocatedWorkItem impl_IPreallocatedWorkItemFactory<T>::CreateWorkItem(F handler) const
{
	return CreateWorkItem(Windows::System::Threading::WorkItemHandler(handler));
}

template <typename T> Windows::System::Threading::Core::PreallocatedWorkItem impl_IPreallocatedWorkItemFactory<T>::CreateWorkItemWithPriority(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority const priority) const
{
	Windows::System::Threading::Core::PreallocatedWorkItem WorkItem = nullptr;
	check(shim()->abi_CreateWorkItemWithPriority(get(handler), priority, put(WorkItem)));
	return WorkItem;
}

template <typename T> template <typename F> Windows::System::Threading::Core::PreallocatedWorkItem impl_IPreallocatedWorkItemFactory<T>::CreateWorkItemWithPriority(F handler, Windows::System::Threading::WorkItemPriority const priority) const
{
	return CreateWorkItemWithPriority(Windows::System::Threading::WorkItemHandler(handler), priority);
}

template <typename T> Windows::System::Threading::Core::PreallocatedWorkItem impl_IPreallocatedWorkItemFactory<T>::CreateWorkItemWithPriorityAndOptions(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority const priority, Windows::System::Threading::WorkItemOptions const options) const
{
	Windows::System::Threading::Core::PreallocatedWorkItem WorkItem = nullptr;
	check(shim()->abi_CreateWorkItemWithPriorityAndOptions(get(handler), priority, options, put(WorkItem)));
	return WorkItem;
}

template <typename T> template <typename F> Windows::System::Threading::Core::PreallocatedWorkItem impl_IPreallocatedWorkItemFactory<T>::CreateWorkItemWithPriorityAndOptions(F handler, Windows::System::Threading::WorkItemPriority const priority, Windows::System::Threading::WorkItemOptions const options) const
{
	return CreateWorkItemWithPriorityAndOptions(Windows::System::Threading::WorkItemHandler(handler), priority, options);
}

template <typename T> Windows::Foundation::IAsyncAction impl_IPreallocatedWorkItem<T>::RunAsync() const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_RunAsync(put(operation)));
	return operation;
}

template <typename T> void impl_ISignalNotifier<T>::Enable() const
{
	check(shim()->abi_Enable());
}

template <typename T> void impl_ISignalNotifier<T>::Terminate() const
{
	check(shim()->abi_Terminate());
}

}}}}}

namespace winrt { namespace Windows { namespace System { namespace UserProfile {

template <typename T> String impl_IAdvertisingManagerStatics<T>::AdvertisingId() const
{
	String value;
	check(shim()->get_AdvertisingId(put(value)));
	return value;
}

template <typename T> bool impl_IUserInformationStatics<T>::AccountPictureChangeEnabled() const
{
	bool value = {};
	check(shim()->get_AccountPictureChangeEnabled(put(value)));
	return value;
}

template <typename T> bool impl_IUserInformationStatics<T>::NameAccessAllowed() const
{
	bool value = {};
	check(shim()->get_NameAccessAllowed(put(value)));
	return value;
}

template <typename T> Windows::Storage::IStorageFile impl_IUserInformationStatics<T>::GetAccountPicture(Windows::System::UserProfile::AccountPictureKind const kind) const
{
	Windows::Storage::IStorageFile storageFile;
	check(shim()->abi_GetAccountPicture(kind, put(storageFile)));
	return storageFile;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::System::UserProfile::SetAccountPictureResult> impl_IUserInformationStatics<T>::SetAccountPictureAsync(Windows::Storage::IStorageFile const & image) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::UserProfile::SetAccountPictureResult> operation;
	check(shim()->abi_SetAccountPictureAsync(get(image), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::System::UserProfile::SetAccountPictureResult> impl_IUserInformationStatics<T>::SetAccountPicturesAsync(Windows::Storage::IStorageFile const & smallImage, Windows::Storage::IStorageFile const & largeImage, Windows::Storage::IStorageFile const & video) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::UserProfile::SetAccountPictureResult> operation;
	check(shim()->abi_SetAccountPicturesAsync(get(smallImage), get(largeImage), get(video), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::System::UserProfile::SetAccountPictureResult> impl_IUserInformationStatics<T>::SetAccountPictureFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & image) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::UserProfile::SetAccountPictureResult> operation;
	check(shim()->abi_SetAccountPictureFromStreamAsync(get(image), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::System::UserProfile::SetAccountPictureResult> impl_IUserInformationStatics<T>::SetAccountPicturesFromStreamsAsync(Windows::Storage::Streams::IRandomAccessStream const & smallImage, Windows::Storage::Streams::IRandomAccessStream const & largeImage, Windows::Storage::Streams::IRandomAccessStream const & video) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::UserProfile::SetAccountPictureResult> operation;
	check(shim()->abi_SetAccountPicturesFromStreamsAsync(get(smallImage), get(largeImage), get(video), put(operation)));
	return operation;
}

template <typename T> long long impl_IUserInformationStatics<T>::AccountPictureChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler) const
{
	long long token = {};
	check(shim()->add_AccountPictureChanged(get(changeHandler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IUserInformationStatics<T>::AccountPictureChanged(F changeHandler) const
{
	return AccountPictureChanged(Windows::Foundation::EventHandler<IInspectable>(changeHandler));
}

template <typename T> void impl_IUserInformationStatics<T>::AccountPictureChanged(long long const token) const
{
	check(shim()->remove_AccountPictureChanged(token));
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IUserInformationStatics<T>::GetDisplayNameAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_GetDisplayNameAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IUserInformationStatics<T>::GetFirstNameAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_GetFirstNameAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IUserInformationStatics<T>::GetLastNameAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_GetLastNameAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IUserInformationStatics<T>::GetPrincipalNameAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_GetPrincipalNameAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> impl_IUserInformationStatics<T>::GetSessionInitiationProtocolUriAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> operation;
	check(shim()->abi_GetSessionInitiationProtocolUriAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<String> impl_IUserInformationStatics<T>::GetDomainNameAsync() const
{
	Windows::Foundation::IAsyncOperation<String> operation;
	check(shim()->abi_GetDomainNameAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::Uri impl_ILockScreenStatics<T>::OriginalImageFile() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_OriginalImageFile(put(value)));
	return value;
}

template <typename T> Windows::Storage::Streams::IRandomAccessStream impl_ILockScreenStatics<T>::GetImageStream() const
{
	Windows::Storage::Streams::IRandomAccessStream value;
	check(shim()->abi_GetImageStream(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILockScreenStatics<T>::SetImageFileAsync(Windows::Storage::IStorageFile const & value) const
{
	Windows::Foundation::IAsyncAction Operation;
	check(shim()->abi_SetImageFileAsync(get(value), put(Operation)));
	return Operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_ILockScreenStatics<T>::SetImageStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	Windows::Foundation::IAsyncAction Operation;
	check(shim()->abi_SetImageStreamAsync(get(value), put(Operation)));
	return Operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<winrt::Windows::System::UserProfile::SetImageFeedResult> impl_ILockScreenImageFeedStatics<T>::RequestSetImageFeedAsync(Windows::Foundation::Uri const & syndicationFeedUri) const
{
	Windows::Foundation::IAsyncOperation<winrt::Windows::System::UserProfile::SetImageFeedResult> value;
	check(shim()->abi_RequestSetImageFeedAsync(get(syndicationFeedUri), put(value)));
	return value;
}

template <typename T> bool impl_ILockScreenImageFeedStatics<T>::TryRemoveImageFeed() const
{
	bool result = {};
	check(shim()->abi_TryRemoveImageFeed(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IUserProfilePersonalizationSettings<T>::TrySetLockScreenImageAsync(Windows::Storage::StorageFile const & imageFile) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_TrySetLockScreenImageAsync(get(imageFile), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IUserProfilePersonalizationSettings<T>::TrySetWallpaperImageAsync(Windows::Storage::StorageFile const & imageFile) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_TrySetWallpaperImageAsync(get(imageFile), put(operation)));
	return operation;
}

template <typename T> Windows::System::UserProfile::UserProfilePersonalizationSettings impl_IUserProfilePersonalizationSettingsStatics<T>::Current() const
{
	Windows::System::UserProfile::UserProfilePersonalizationSettings value = nullptr;
	check(shim()->get_Current(put(value)));
	return value;
}

template <typename T> bool impl_IUserProfilePersonalizationSettingsStatics<T>::IsSupported() const
{
	bool result = {};
	check(shim()->abi_IsSupported(put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IGlobalizationPreferencesStatics<T>::Calendars() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_Calendars(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IGlobalizationPreferencesStatics<T>::Clocks() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_Clocks(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IGlobalizationPreferencesStatics<T>::Currencies() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_Currencies(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IGlobalizationPreferencesStatics<T>::Languages() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_Languages(put(value)));
	return value;
}

template <typename T> String impl_IGlobalizationPreferencesStatics<T>::HomeGeographicRegion() const
{
	String value;
	check(shim()->get_HomeGeographicRegion(put(value)));
	return value;
}

template <typename T> Windows::Globalization::DayOfWeek impl_IGlobalizationPreferencesStatics<T>::WeekStartsOn() const
{
	Windows::Globalization::DayOfWeek value = {};
	check(shim()->get_WeekStartsOn(&value));
	return value;
}

template <typename T> Windows::System::UserProfile::FirstSignInSettings impl_IFirstSignInSettingsStatics<T>::GetDefault() const
{
	Windows::System::UserProfile::FirstSignInSettings result = nullptr;
	check(shim()->abi_GetDefault(put(result)));
	return result;
}

}}}}

namespace winrt { namespace Windows { namespace UI {

template <typename T> Windows::UI::Color impl_IColorHelperStatics<T>::FromArgb(byte const a, byte const r, byte const g, byte const b) const
{
	Windows::UI::Color returnValue = {};
	check(shim()->abi_FromArgb(a, r, g, b, &returnValue));
	return returnValue;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::AliceBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_AliceBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::AntiqueWhite() const
{
	Windows::UI::Color value = {};
	check(shim()->get_AntiqueWhite(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Aqua() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Aqua(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Aquamarine() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Aquamarine(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Azure() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Azure(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Beige() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Beige(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Bisque() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Bisque(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Black() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Black(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::BlanchedAlmond() const
{
	Windows::UI::Color value = {};
	check(shim()->get_BlanchedAlmond(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Blue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Blue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::BlueViolet() const
{
	Windows::UI::Color value = {};
	check(shim()->get_BlueViolet(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Brown() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Brown(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::BurlyWood() const
{
	Windows::UI::Color value = {};
	check(shim()->get_BurlyWood(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::CadetBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_CadetBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Chartreuse() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Chartreuse(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Chocolate() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Chocolate(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Coral() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Coral(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::CornflowerBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_CornflowerBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Cornsilk() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Cornsilk(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Crimson() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Crimson(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Cyan() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Cyan(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkCyan() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkCyan(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkGoldenrod() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkGoldenrod(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkGray() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkGreen() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkKhaki() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkKhaki(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkMagenta() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkMagenta(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkOliveGreen() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkOliveGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkOrange() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkOrange(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkOrchid() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkOrchid(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkRed() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkRed(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkSalmon() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkSalmon(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkSeaGreen() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkSeaGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkSlateBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkSlateBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkSlateGray() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkSlateGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkTurquoise() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkTurquoise(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DarkViolet() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DarkViolet(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DeepPink() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DeepPink(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DeepSkyBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DeepSkyBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DimGray() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DimGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::DodgerBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_DodgerBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Firebrick() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Firebrick(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::FloralWhite() const
{
	Windows::UI::Color value = {};
	check(shim()->get_FloralWhite(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::ForestGreen() const
{
	Windows::UI::Color value = {};
	check(shim()->get_ForestGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Fuchsia() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Fuchsia(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Gainsboro() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Gainsboro(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::GhostWhite() const
{
	Windows::UI::Color value = {};
	check(shim()->get_GhostWhite(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Gold() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Gold(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Goldenrod() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Goldenrod(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Gray() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Gray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Green() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Green(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::GreenYellow() const
{
	Windows::UI::Color value = {};
	check(shim()->get_GreenYellow(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Honeydew() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Honeydew(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::HotPink() const
{
	Windows::UI::Color value = {};
	check(shim()->get_HotPink(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::IndianRed() const
{
	Windows::UI::Color value = {};
	check(shim()->get_IndianRed(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Indigo() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Indigo(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Ivory() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Ivory(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Khaki() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Khaki(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Lavender() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Lavender(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LavenderBlush() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LavenderBlush(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LawnGreen() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LawnGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LemonChiffon() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LemonChiffon(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LightBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightCoral() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LightCoral(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightCyan() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LightCyan(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightGoldenrodYellow() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LightGoldenrodYellow(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightGreen() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LightGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightGray() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LightGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightPink() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LightPink(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightSalmon() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LightSalmon(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightSeaGreen() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LightSeaGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightSkyBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LightSkyBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightSlateGray() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LightSlateGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightSteelBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LightSteelBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LightYellow() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LightYellow(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Lime() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Lime(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::LimeGreen() const
{
	Windows::UI::Color value = {};
	check(shim()->get_LimeGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Linen() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Linen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Magenta() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Magenta(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Maroon() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Maroon(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumAquamarine() const
{
	Windows::UI::Color value = {};
	check(shim()->get_MediumAquamarine(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_MediumBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumOrchid() const
{
	Windows::UI::Color value = {};
	check(shim()->get_MediumOrchid(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumPurple() const
{
	Windows::UI::Color value = {};
	check(shim()->get_MediumPurple(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumSeaGreen() const
{
	Windows::UI::Color value = {};
	check(shim()->get_MediumSeaGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumSlateBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_MediumSlateBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumSpringGreen() const
{
	Windows::UI::Color value = {};
	check(shim()->get_MediumSpringGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumTurquoise() const
{
	Windows::UI::Color value = {};
	check(shim()->get_MediumTurquoise(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MediumVioletRed() const
{
	Windows::UI::Color value = {};
	check(shim()->get_MediumVioletRed(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MidnightBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_MidnightBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MintCream() const
{
	Windows::UI::Color value = {};
	check(shim()->get_MintCream(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::MistyRose() const
{
	Windows::UI::Color value = {};
	check(shim()->get_MistyRose(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Moccasin() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Moccasin(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::NavajoWhite() const
{
	Windows::UI::Color value = {};
	check(shim()->get_NavajoWhite(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Navy() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Navy(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::OldLace() const
{
	Windows::UI::Color value = {};
	check(shim()->get_OldLace(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Olive() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Olive(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::OliveDrab() const
{
	Windows::UI::Color value = {};
	check(shim()->get_OliveDrab(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Orange() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Orange(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::OrangeRed() const
{
	Windows::UI::Color value = {};
	check(shim()->get_OrangeRed(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Orchid() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Orchid(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PaleGoldenrod() const
{
	Windows::UI::Color value = {};
	check(shim()->get_PaleGoldenrod(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PaleGreen() const
{
	Windows::UI::Color value = {};
	check(shim()->get_PaleGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PaleTurquoise() const
{
	Windows::UI::Color value = {};
	check(shim()->get_PaleTurquoise(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PaleVioletRed() const
{
	Windows::UI::Color value = {};
	check(shim()->get_PaleVioletRed(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PapayaWhip() const
{
	Windows::UI::Color value = {};
	check(shim()->get_PapayaWhip(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PeachPuff() const
{
	Windows::UI::Color value = {};
	check(shim()->get_PeachPuff(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Peru() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Peru(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Pink() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Pink(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Plum() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Plum(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::PowderBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_PowderBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Purple() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Purple(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Red() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Red(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::RosyBrown() const
{
	Windows::UI::Color value = {};
	check(shim()->get_RosyBrown(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::RoyalBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_RoyalBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SaddleBrown() const
{
	Windows::UI::Color value = {};
	check(shim()->get_SaddleBrown(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Salmon() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Salmon(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SandyBrown() const
{
	Windows::UI::Color value = {};
	check(shim()->get_SandyBrown(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SeaGreen() const
{
	Windows::UI::Color value = {};
	check(shim()->get_SeaGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SeaShell() const
{
	Windows::UI::Color value = {};
	check(shim()->get_SeaShell(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Sienna() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Sienna(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Silver() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Silver(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SkyBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_SkyBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SlateBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_SlateBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SlateGray() const
{
	Windows::UI::Color value = {};
	check(shim()->get_SlateGray(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Snow() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Snow(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SpringGreen() const
{
	Windows::UI::Color value = {};
	check(shim()->get_SpringGreen(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::SteelBlue() const
{
	Windows::UI::Color value = {};
	check(shim()->get_SteelBlue(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Tan() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Tan(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Teal() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Teal(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Thistle() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Thistle(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Tomato() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Tomato(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Transparent() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Transparent(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Turquoise() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Turquoise(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Violet() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Violet(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Wheat() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Wheat(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::White() const
{
	Windows::UI::Color value = {};
	check(shim()->get_White(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::WhiteSmoke() const
{
	Windows::UI::Color value = {};
	check(shim()->get_WhiteSmoke(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::Yellow() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Yellow(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IColorsStatics<T>::YellowGreen() const
{
	Windows::UI::Color value = {};
	check(shim()->get_YellowGreen(&value));
	return value;
}

}}}

namespace winrt { namespace Windows { namespace UI { namespace ApplicationSettings {

template <typename T> void impl_IWebAccountProviderCommandInvokedHandler<T>::Invoke(Windows::UI::ApplicationSettings::WebAccountProviderCommand const & command) const
{
	check(shim()->abi_Invoke(get(command)));
}

template <typename T> void impl_IWebAccountCommandInvokedHandler<T>::Invoke(Windows::UI::ApplicationSettings::WebAccountCommand const & command, Windows::UI::ApplicationSettings::WebAccountInvokedArgs const & args) const
{
	check(shim()->abi_Invoke(get(command), get(args)));
}

template <typename T> void impl_ICredentialCommandCredentialDeletedHandler<T>::Invoke(Windows::UI::ApplicationSettings::CredentialCommand const & command) const
{
	check(shim()->abi_Invoke(get(command)));
}

template <typename T> Windows::UI::ApplicationSettings::SettingsCommand impl_ISettingsCommandFactory<T>::CreateSettingsCommand(IInspectable const & settingsCommandId, StringReference const & label, Windows::UI::Popups::IUICommandInvokedHandler const & handler) const
{
	Windows::UI::ApplicationSettings::SettingsCommand instance = nullptr;
	check(shim()->abi_CreateSettingsCommand(get(settingsCommandId), get(label), get(handler), put(instance)));
	return instance;
}

template <typename T> template <typename F> Windows::UI::ApplicationSettings::SettingsCommand impl_ISettingsCommandFactory<T>::CreateSettingsCommand(IInspectable const & settingsCommandId, StringReference const & label, F handler) const
{
	return CreateSettingsCommand(settingsCommandId, label, Windows::UI::Popups::UICommandInvokedHandler(handler));
}

template <typename T> Windows::UI::ApplicationSettings::SettingsCommand impl_ISettingsCommandStatics<T>::AccountsCommand() const
{
	Windows::UI::ApplicationSettings::SettingsCommand value = nullptr;
	check(shim()->get_AccountsCommand(put(value)));
	return value;
}

template <typename T> Windows::UI::ApplicationSettings::WebAccountProviderCommand impl_IWebAccountProviderCommandFactory<T>::CreateWebAccountProviderCommand(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler const & invoked) const
{
	Windows::UI::ApplicationSettings::WebAccountProviderCommand instance = nullptr;
	check(shim()->abi_CreateWebAccountProviderCommand(get(webAccountProvider), get(invoked), put(instance)));
	return instance;
}

template <typename T> template <typename F> Windows::UI::ApplicationSettings::WebAccountProviderCommand impl_IWebAccountProviderCommandFactory<T>::CreateWebAccountProviderCommand(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, F invoked) const
{
	return CreateWebAccountProviderCommand(webAccountProvider, Windows::UI::ApplicationSettings::WebAccountProviderCommandInvokedHandler(invoked));
}

template <typename T> Windows::Security::Credentials::WebAccountProvider impl_IWebAccountProviderCommand<T>::WebAccountProvider() const
{
	Windows::Security::Credentials::WebAccountProvider value = nullptr;
	check(shim()->get_WebAccountProvider(put(value)));
	return value;
}

template <typename T> Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler impl_IWebAccountProviderCommand<T>::Invoked() const
{
	Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler value = {};
	check(shim()->get_Invoked(put(value)));
	return value;
}

template <typename T> Windows::UI::ApplicationSettings::WebAccountAction impl_IWebAccountInvokedArgs<T>::Action() const
{
	Windows::UI::ApplicationSettings::WebAccountAction action = {};
	check(shim()->get_Action(&action));
	return action;
}

template <typename T> Windows::UI::ApplicationSettings::WebAccountCommand impl_IWebAccountCommandFactory<T>::CreateWebAccountCommand(Windows::Security::Credentials::WebAccount const & webAccount, Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler const & invoked, Windows::UI::ApplicationSettings::SupportedWebAccountActions const actions) const
{
	Windows::UI::ApplicationSettings::WebAccountCommand instance = nullptr;
	check(shim()->abi_CreateWebAccountCommand(get(webAccount), get(invoked), actions, put(instance)));
	return instance;
}

template <typename T> template <typename F> Windows::UI::ApplicationSettings::WebAccountCommand impl_IWebAccountCommandFactory<T>::CreateWebAccountCommand(Windows::Security::Credentials::WebAccount const & webAccount, F invoked, Windows::UI::ApplicationSettings::SupportedWebAccountActions const actions) const
{
	return CreateWebAccountCommand(webAccount, Windows::UI::ApplicationSettings::WebAccountCommandInvokedHandler(invoked), actions);
}

template <typename T> Windows::Security::Credentials::WebAccount impl_IWebAccountCommand<T>::WebAccount() const
{
	Windows::Security::Credentials::WebAccount value = nullptr;
	check(shim()->get_WebAccount(put(value)));
	return value;
}

template <typename T> Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler impl_IWebAccountCommand<T>::Invoked() const
{
	Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler value = {};
	check(shim()->get_Invoked(put(value)));
	return value;
}

template <typename T> Windows::UI::ApplicationSettings::SupportedWebAccountActions impl_IWebAccountCommand<T>::Actions() const
{
	Windows::UI::ApplicationSettings::SupportedWebAccountActions value = {};
	check(shim()->get_Actions(&value));
	return value;
}

template <typename T> Windows::UI::ApplicationSettings::CredentialCommand impl_ICredentialCommandFactory<T>::CreateCredentialCommand(Windows::Security::Credentials::PasswordCredential const & passwordCredential) const
{
	Windows::UI::ApplicationSettings::CredentialCommand instance = nullptr;
	check(shim()->abi_CreateCredentialCommand(get(passwordCredential), put(instance)));
	return instance;
}

template <typename T> Windows::UI::ApplicationSettings::CredentialCommand impl_ICredentialCommandFactory<T>::CreateCredentialCommandWithHandler(Windows::Security::Credentials::PasswordCredential const & passwordCredential, Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler const & deleted) const
{
	Windows::UI::ApplicationSettings::CredentialCommand instance = nullptr;
	check(shim()->abi_CreateCredentialCommandWithHandler(get(passwordCredential), get(deleted), put(instance)));
	return instance;
}

template <typename T> template <typename F> Windows::UI::ApplicationSettings::CredentialCommand impl_ICredentialCommandFactory<T>::CreateCredentialCommandWithHandler(Windows::Security::Credentials::PasswordCredential const & passwordCredential, F deleted) const
{
	return CreateCredentialCommandWithHandler(passwordCredential, Windows::UI::ApplicationSettings::CredentialCommandCredentialDeletedHandler(deleted));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_ICredentialCommand<T>::PasswordCredential() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check(shim()->get_PasswordCredential(put(value)));
	return value;
}

template <typename T> Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler impl_ICredentialCommand<T>::CredentialDeleted() const
{
	Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler value = {};
	check(shim()->get_CredentialDeleted(put(value)));
	return value;
}

template <typename T> void impl_IAccountsSettingsPaneEventDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::WebAccountProviderCommand> impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>::WebAccountProviderCommands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::WebAccountProviderCommand> value;
	check(shim()->get_WebAccountProviderCommands(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::WebAccountCommand> impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>::WebAccountCommands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::WebAccountCommand> value;
	check(shim()->get_WebAccountCommands(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::CredentialCommand> impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>::CredentialCommands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::CredentialCommand> value;
	check(shim()->get_CredentialCommands(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::SettingsCommand> impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>::Commands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::SettingsCommand> value;
	check(shim()->get_Commands(put(value)));
	return value;
}

template <typename T> String impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>::HeaderText() const
{
	String value;
	check(shim()->get_HeaderText(put(value)));
	return value;
}

template <typename T> void impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>::HeaderText(StringReference const & value) const
{
	check(shim()->put_HeaderText(get(value)));
}

template <typename T> Windows::UI::ApplicationSettings::AccountsSettingsPaneEventDeferral impl_IAccountsSettingsPaneCommandsRequestedEventArgs<T>::GetDeferral() const
{
	Windows::UI::ApplicationSettings::AccountsSettingsPaneEventDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> Windows::UI::ApplicationSettings::AccountsSettingsPane impl_IAccountsSettingsPaneStatics<T>::GetForCurrentView() const
{
	Windows::UI::ApplicationSettings::AccountsSettingsPane current = nullptr;
	check(shim()->abi_GetForCurrentView(put(current)));
	return current;
}

template <typename T> void impl_IAccountsSettingsPaneStatics<T>::Show() const
{
	check(shim()->abi_Show());
}

template <typename T> long long impl_IAccountsSettingsPane<T>::AccountCommandsRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::ApplicationSettings::AccountsSettingsPane, Windows::UI::ApplicationSettings::AccountsSettingsPaneCommandsRequestedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_AccountCommandsRequested(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IAccountsSettingsPane<T>::AccountCommandsRequested(F handler) const
{
	return AccountCommandsRequested(Windows::Foundation::TypedEventHandler<Windows::UI::ApplicationSettings::AccountsSettingsPane, Windows::UI::ApplicationSettings::AccountsSettingsPaneCommandsRequestedEventArgs>(handler));
}

template <typename T> void impl_IAccountsSettingsPane<T>::AccountCommandsRequested(long long const cookie) const
{
	check(shim()->remove_AccountCommandsRequested(cookie));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::SettingsCommand> impl_ISettingsPaneCommandsRequest<T>::ApplicationCommands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::ApplicationSettings::SettingsCommand> value;
	check(shim()->get_ApplicationCommands(put(value)));
	return value;
}

template <typename T> Windows::UI::ApplicationSettings::SettingsPaneCommandsRequest impl_ISettingsPaneCommandsRequestedEventArgs<T>::Request() const
{
	Windows::UI::ApplicationSettings::SettingsPaneCommandsRequest request = nullptr;
	check(shim()->get_Request(put(request)));
	return request;
}

template <typename T> Windows::UI::ApplicationSettings::SettingsPane impl_ISettingsPaneStatics<T>::GetForCurrentView() const
{
	Windows::UI::ApplicationSettings::SettingsPane current = nullptr;
	check(shim()->abi_GetForCurrentView(put(current)));
	return current;
}

template <typename T> void impl_ISettingsPaneStatics<T>::Show() const
{
	check(shim()->abi_Show());
}

template <typename T> Windows::UI::ApplicationSettings::SettingsEdgeLocation impl_ISettingsPaneStatics<T>::Edge() const
{
	Windows::UI::ApplicationSettings::SettingsEdgeLocation value = {};
	check(shim()->get_Edge(&value));
	return value;
}

template <typename T> long long impl_ISettingsPane<T>::CommandsRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::ApplicationSettings::SettingsPane, Windows::UI::ApplicationSettings::SettingsPaneCommandsRequestedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_CommandsRequested(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ISettingsPane<T>::CommandsRequested(F handler) const
{
	return CommandsRequested(Windows::Foundation::TypedEventHandler<Windows::UI::ApplicationSettings::SettingsPane, Windows::UI::ApplicationSettings::SettingsPaneCommandsRequestedEventArgs>(handler));
}

template <typename T> void impl_ISettingsPane<T>::CommandsRequested(long long const cookie) const
{
	check(shim()->remove_CommandsRequested(cookie));
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Composition {

template <typename T> Windows::UI::Composition::CompositionColorSpace impl_IColorKeyFrameAnimation<T>::InterpolationColorSpace() const
{
	Windows::UI::Composition::CompositionColorSpace value = {};
	check(shim()->get_InterpolationColorSpace(&value));
	return value;
}

template <typename T> void impl_IColorKeyFrameAnimation<T>::InterpolationColorSpace(Windows::UI::Composition::CompositionColorSpace const value) const
{
	check(shim()->put_InterpolationColorSpace(value));
}

template <typename T> void impl_IColorKeyFrameAnimation<T>::InsertKeyFrame(float const normalizedProgressKey, Windows::UI::Color const & value) const
{
	check(shim()->abi_InsertKeyFrame(normalizedProgressKey, value));
}

template <typename T> void impl_IColorKeyFrameAnimation<T>::InsertKeyFrame(float const normalizedProgressKey, Windows::UI::Color const & value, Windows::UI::Composition::CompositionEasingFunction const & easingFunction) const
{
	check(shim()->abi_InsertKeyFrameWithEasingFunction(normalizedProgressKey, value, get(easingFunction)));
}

template <typename T> void impl_ICompositionAnimation<T>::ClearAllParameters() const
{
	check(shim()->abi_ClearAllParameters());
}

template <typename T> void impl_ICompositionAnimation<T>::ClearParameter(StringReference const & key) const
{
	check(shim()->abi_ClearParameter(get(key)));
}

template <typename T> void impl_ICompositionAnimation<T>::SetColorParameter(StringReference const & key, Windows::UI::Color const & value) const
{
	check(shim()->abi_SetColorParameter(get(key), value));
}

template <typename T> void impl_ICompositionAnimation<T>::SetMatrix3x2Parameter(StringReference const & key, Windows::Foundation::Numerics::Matrix3x2 const & value) const
{
	check(shim()->abi_SetMatrix3x2Parameter(get(key), value));
}

template <typename T> void impl_ICompositionAnimation<T>::SetMatrix4x4Parameter(StringReference const & key, Windows::Foundation::Numerics::Matrix4x4 const & value) const
{
	check(shim()->abi_SetMatrix4x4Parameter(get(key), value));
}

template <typename T> void impl_ICompositionAnimation<T>::SetQuaternionParameter(StringReference const & key, Windows::Foundation::Numerics::Quaternion const & value) const
{
	check(shim()->abi_SetQuaternionParameter(get(key), value));
}

template <typename T> void impl_ICompositionAnimation<T>::SetReferenceParameter(StringReference const & key, Windows::UI::Composition::CompositionObject const & compositionObject) const
{
	check(shim()->abi_SetReferenceParameter(get(key), get(compositionObject)));
}

template <typename T> void impl_ICompositionAnimation<T>::SetScalarParameter(StringReference const & key, float const value) const
{
	check(shim()->abi_SetScalarParameter(get(key), value));
}

template <typename T> void impl_ICompositionAnimation<T>::SetVector2Parameter(StringReference const & key, Windows::Foundation::Numerics::Vector2 const & value) const
{
	check(shim()->abi_SetVector2Parameter(get(key), value));
}

template <typename T> void impl_ICompositionAnimation<T>::SetVector3Parameter(StringReference const & key, Windows::Foundation::Numerics::Vector3 const & value) const
{
	check(shim()->abi_SetVector3Parameter(get(key), value));
}

template <typename T> void impl_ICompositionAnimation<T>::SetVector4Parameter(StringReference const & key, Windows::Foundation::Numerics::Vector4 const & value) const
{
	check(shim()->abi_SetVector4Parameter(get(key), value));
}

template <typename T> Windows::UI::Color impl_ICompositionColorBrush<T>::Color() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Color(&value));
	return value;
}

template <typename T> void impl_ICompositionColorBrush<T>::Color(Windows::UI::Color const & value) const
{
	check(shim()->put_Color(value));
}

template <typename T> bool impl_ICompositionCommitBatch<T>::IsActive() const
{
	bool value = {};
	check(shim()->get_IsActive(put(value)));
	return value;
}

template <typename T> bool impl_ICompositionCommitBatch<T>::IsEnded() const
{
	bool value = {};
	check(shim()->get_IsEnded(put(value)));
	return value;
}

template <typename T> long long impl_ICompositionCommitBatch<T>::Completed(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Composition::CompositionBatchCompletedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Completed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICompositionCommitBatch<T>::Completed(F handler) const
{
	return Completed(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Composition::CompositionBatchCompletedEventArgs>(handler));
}

template <typename T> void impl_ICompositionCommitBatch<T>::Completed(long long const token) const
{
	check(shim()->remove_Completed(token));
}

template <typename T> Windows::Graphics::DirectX::DirectXAlphaMode impl_ICompositionDrawingSurface<T>::AlphaMode() const
{
	Windows::Graphics::DirectX::DirectXAlphaMode value = {};
	check(shim()->get_AlphaMode(&value));
	return value;
}

template <typename T> Windows::Graphics::DirectX::DirectXPixelFormat impl_ICompositionDrawingSurface<T>::PixelFormat() const
{
	Windows::Graphics::DirectX::DirectXPixelFormat value = {};
	check(shim()->get_PixelFormat(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_ICompositionDrawingSurface<T>::Size() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_Size(&value));
	return value;
}

template <typename T> Windows::UI::Composition::CompositionBrush impl_ICompositionEffectBrush<T>::GetSourceParameter(StringReference const & name) const
{
	Windows::UI::Composition::CompositionBrush result = nullptr;
	check(shim()->abi_GetSourceParameter(get(name), put(result)));
	return result;
}

template <typename T> void impl_ICompositionEffectBrush<T>::SetSourceParameter(StringReference const & name, Windows::UI::Composition::CompositionBrush const & source) const
{
	check(shim()->abi_SetSourceParameter(get(name), get(source)));
}

template <typename T> Windows::UI::Composition::CompositionEffectBrush impl_ICompositionEffectFactory<T>::CreateBrush() const
{
	Windows::UI::Composition::CompositionEffectBrush result = nullptr;
	check(shim()->abi_CreateBrush(put(result)));
	return result;
}

template <typename T> HRESULT impl_ICompositionEffectFactory<T>::ExtendedError() const
{
	HRESULT value = {};
	check(shim()->get_ExtendedError(&value));
	return value;
}

template <typename T> Windows::UI::Composition::CompositionEffectFactoryLoadStatus impl_ICompositionEffectFactory<T>::LoadStatus() const
{
	Windows::UI::Composition::CompositionEffectFactoryLoadStatus value = {};
	check(shim()->get_LoadStatus(&value));
	return value;
}

template <typename T> String impl_ICompositionEffectSourceParameter<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> Windows::UI::Composition::CompositionEffectSourceParameter impl_ICompositionEffectSourceParameterFactory<T>::Create(StringReference const & name) const
{
	Windows::UI::Composition::CompositionEffectSourceParameter instance = nullptr;
	check(shim()->abi_Create(get(name), put(instance)));
	return instance;
}

template <typename T> Windows::UI::Composition::CompositionDrawingSurface impl_ICompositionGraphicsDevice<T>::CreateDrawingSurface(Windows::Foundation::Size const & sizePixels, Windows::Graphics::DirectX::DirectXPixelFormat const pixelFormat, Windows::Graphics::DirectX::DirectXAlphaMode const alphaMode) const
{
	Windows::UI::Composition::CompositionDrawingSurface result = nullptr;
	check(shim()->abi_CreateDrawingSurface(sizePixels, pixelFormat, alphaMode, put(result)));
	return result;
}

template <typename T> long long impl_ICompositionGraphicsDevice<T>::RenderingDeviceReplaced(Windows::Foundation::ITypedEventHandler<Windows::UI::Composition::CompositionGraphicsDevice, Windows::UI::Composition::RenderingDeviceReplacedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_RenderingDeviceReplaced(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICompositionGraphicsDevice<T>::RenderingDeviceReplaced(F handler) const
{
	return RenderingDeviceReplaced(Windows::Foundation::TypedEventHandler<Windows::UI::Composition::CompositionGraphicsDevice, Windows::UI::Composition::RenderingDeviceReplacedEventArgs>(handler));
}

template <typename T> void impl_ICompositionGraphicsDevice<T>::RenderingDeviceReplaced(long long const token) const
{
	check(shim()->remove_RenderingDeviceReplaced(token));
}

template <typename T> Windows::UI::Composition::Compositor impl_ICompositionObject<T>::Compositor() const
{
	Windows::UI::Composition::Compositor value = nullptr;
	check(shim()->get_Compositor(put(value)));
	return value;
}

template <typename T> Windows::UI::Core::CoreDispatcher impl_ICompositionObject<T>::Dispatcher() const
{
	Windows::UI::Core::CoreDispatcher value = nullptr;
	check(shim()->get_Dispatcher(put(value)));
	return value;
}

template <typename T> Windows::UI::Composition::CompositionPropertySet impl_ICompositionObject<T>::Properties() const
{
	Windows::UI::Composition::CompositionPropertySet value = nullptr;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> void impl_ICompositionObject<T>::StartAnimation(StringReference const & propertyName, Windows::UI::Composition::CompositionAnimation const & animation) const
{
	check(shim()->abi_StartAnimation(get(propertyName), get(animation)));
}

template <typename T> void impl_ICompositionObject<T>::StopAnimation(StringReference const & propertyName) const
{
	check(shim()->abi_StopAnimation(get(propertyName)));
}

template <typename T> void impl_ICompositionPropertySet<T>::InsertColor(StringReference const & propertyName, Windows::UI::Color const & value) const
{
	check(shim()->abi_InsertColor(get(propertyName), value));
}

template <typename T> void impl_ICompositionPropertySet<T>::InsertMatrix3x2(StringReference const & propertyName, Windows::Foundation::Numerics::Matrix3x2 const & value) const
{
	check(shim()->abi_InsertMatrix3x2(get(propertyName), value));
}

template <typename T> void impl_ICompositionPropertySet<T>::InsertMatrix4x4(StringReference const & propertyName, Windows::Foundation::Numerics::Matrix4x4 const & value) const
{
	check(shim()->abi_InsertMatrix4x4(get(propertyName), value));
}

template <typename T> void impl_ICompositionPropertySet<T>::InsertQuaternion(StringReference const & propertyName, Windows::Foundation::Numerics::Quaternion const & value) const
{
	check(shim()->abi_InsertQuaternion(get(propertyName), value));
}

template <typename T> void impl_ICompositionPropertySet<T>::InsertScalar(StringReference const & propertyName, float const value) const
{
	check(shim()->abi_InsertScalar(get(propertyName), value));
}

template <typename T> void impl_ICompositionPropertySet<T>::InsertVector2(StringReference const & propertyName, Windows::Foundation::Numerics::Vector2 const & value) const
{
	check(shim()->abi_InsertVector2(get(propertyName), value));
}

template <typename T> void impl_ICompositionPropertySet<T>::InsertVector3(StringReference const & propertyName, Windows::Foundation::Numerics::Vector3 const & value) const
{
	check(shim()->abi_InsertVector3(get(propertyName), value));
}

template <typename T> void impl_ICompositionPropertySet<T>::InsertVector4(StringReference const & propertyName, Windows::Foundation::Numerics::Vector4 const & value) const
{
	check(shim()->abi_InsertVector4(get(propertyName), value));
}

template <typename T> Windows::UI::Composition::CompositionGetValueStatus impl_ICompositionPropertySet<T>::TryGetColor(StringReference const & propertyName, Windows::UI::Color & value) const
{
	Windows::UI::Composition::CompositionGetValueStatus result = {};
	check(shim()->abi_TryGetColor(get(propertyName), &value, &result));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionGetValueStatus impl_ICompositionPropertySet<T>::TryGetMatrix3x2(StringReference const & propertyName, Windows::Foundation::Numerics::Matrix3x2 & value) const
{
	Windows::UI::Composition::CompositionGetValueStatus result = {};
	check(shim()->abi_TryGetMatrix3x2(get(propertyName), &value, &result));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionGetValueStatus impl_ICompositionPropertySet<T>::TryGetMatrix4x4(StringReference const & propertyName, Windows::Foundation::Numerics::Matrix4x4 & value) const
{
	Windows::UI::Composition::CompositionGetValueStatus result = {};
	check(shim()->abi_TryGetMatrix4x4(get(propertyName), &value, &result));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionGetValueStatus impl_ICompositionPropertySet<T>::TryGetQuaternion(StringReference const & propertyName, Windows::Foundation::Numerics::Quaternion & value) const
{
	Windows::UI::Composition::CompositionGetValueStatus result = {};
	check(shim()->abi_TryGetQuaternion(get(propertyName), &value, &result));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionGetValueStatus impl_ICompositionPropertySet<T>::TryGetScalar(StringReference const & propertyName, float & value) const
{
	Windows::UI::Composition::CompositionGetValueStatus result = {};
	check(shim()->abi_TryGetScalar(get(propertyName), &value, &result));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionGetValueStatus impl_ICompositionPropertySet<T>::TryGetVector2(StringReference const & propertyName, Windows::Foundation::Numerics::Vector2 & value) const
{
	Windows::UI::Composition::CompositionGetValueStatus result = {};
	check(shim()->abi_TryGetVector2(get(propertyName), &value, &result));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionGetValueStatus impl_ICompositionPropertySet<T>::TryGetVector3(StringReference const & propertyName, Windows::Foundation::Numerics::Vector3 & value) const
{
	Windows::UI::Composition::CompositionGetValueStatus result = {};
	check(shim()->abi_TryGetVector3(get(propertyName), &value, &result));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionGetValueStatus impl_ICompositionPropertySet<T>::TryGetVector4(StringReference const & propertyName, Windows::Foundation::Numerics::Vector4 & value) const
{
	Windows::UI::Composition::CompositionGetValueStatus result = {};
	check(shim()->abi_TryGetVector4(get(propertyName), &value, &result));
	return result;
}

template <typename T> bool impl_ICompositionScopedBatch<T>::IsActive() const
{
	bool value = {};
	check(shim()->get_IsActive(put(value)));
	return value;
}

template <typename T> bool impl_ICompositionScopedBatch<T>::IsEnded() const
{
	bool value = {};
	check(shim()->get_IsEnded(put(value)));
	return value;
}

template <typename T> void impl_ICompositionScopedBatch<T>::End() const
{
	check(shim()->abi_End());
}

template <typename T> void impl_ICompositionScopedBatch<T>::Resume() const
{
	check(shim()->abi_Resume());
}

template <typename T> void impl_ICompositionScopedBatch<T>::Suspend() const
{
	check(shim()->abi_Suspend());
}

template <typename T> long long impl_ICompositionScopedBatch<T>::Completed(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Composition::CompositionBatchCompletedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Completed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ICompositionScopedBatch<T>::Completed(F handler) const
{
	return Completed(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Composition::CompositionBatchCompletedEventArgs>(handler));
}

template <typename T> void impl_ICompositionScopedBatch<T>::Completed(long long const token) const
{
	check(shim()->remove_Completed(token));
}

template <typename T> Windows::UI::Composition::CompositionBitmapInterpolationMode impl_ICompositionSurfaceBrush<T>::BitmapInterpolationMode() const
{
	Windows::UI::Composition::CompositionBitmapInterpolationMode value = {};
	check(shim()->get_BitmapInterpolationMode(&value));
	return value;
}

template <typename T> void impl_ICompositionSurfaceBrush<T>::BitmapInterpolationMode(Windows::UI::Composition::CompositionBitmapInterpolationMode const value) const
{
	check(shim()->put_BitmapInterpolationMode(value));
}

template <typename T> float impl_ICompositionSurfaceBrush<T>::HorizontalAlignmentRatio() const
{
	float value = {};
	check(shim()->get_HorizontalAlignmentRatio(&value));
	return value;
}

template <typename T> void impl_ICompositionSurfaceBrush<T>::HorizontalAlignmentRatio(float const value) const
{
	check(shim()->put_HorizontalAlignmentRatio(value));
}

template <typename T> Windows::UI::Composition::CompositionStretch impl_ICompositionSurfaceBrush<T>::Stretch() const
{
	Windows::UI::Composition::CompositionStretch value = {};
	check(shim()->get_Stretch(&value));
	return value;
}

template <typename T> void impl_ICompositionSurfaceBrush<T>::Stretch(Windows::UI::Composition::CompositionStretch const value) const
{
	check(shim()->put_Stretch(value));
}

template <typename T> Windows::UI::Composition::ICompositionSurface impl_ICompositionSurfaceBrush<T>::Surface() const
{
	Windows::UI::Composition::ICompositionSurface value;
	check(shim()->get_Surface(put(value)));
	return value;
}

template <typename T> void impl_ICompositionSurfaceBrush<T>::Surface(Windows::UI::Composition::ICompositionSurface const & value) const
{
	check(shim()->put_Surface(get(value)));
}

template <typename T> float impl_ICompositionSurfaceBrush<T>::VerticalAlignmentRatio() const
{
	float value = {};
	check(shim()->get_VerticalAlignmentRatio(&value));
	return value;
}

template <typename T> void impl_ICompositionSurfaceBrush<T>::VerticalAlignmentRatio(float const value) const
{
	check(shim()->put_VerticalAlignmentRatio(value));
}

template <typename T> Windows::UI::Composition::Visual impl_ICompositionTarget<T>::Root() const
{
	Windows::UI::Composition::Visual value = nullptr;
	check(shim()->get_Root(put(value)));
	return value;
}

template <typename T> void impl_ICompositionTarget<T>::Root(Windows::UI::Composition::Visual const & value) const
{
	check(shim()->put_Root(get(value)));
}

template <typename T> Windows::UI::Composition::ColorKeyFrameAnimation impl_ICompositor<T>::CreateColorKeyFrameAnimation() const
{
	Windows::UI::Composition::ColorKeyFrameAnimation result = nullptr;
	check(shim()->abi_CreateColorKeyFrameAnimation(put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionColorBrush impl_ICompositor<T>::CreateColorBrush() const
{
	Windows::UI::Composition::CompositionColorBrush result = nullptr;
	check(shim()->abi_CreateColorBrush(put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionColorBrush impl_ICompositor<T>::CreateColorBrush(Windows::UI::Color const & color) const
{
	Windows::UI::Composition::CompositionColorBrush result = nullptr;
	check(shim()->abi_CreateColorBrushWithColor(color, put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::ContainerVisual impl_ICompositor<T>::CreateContainerVisual() const
{
	Windows::UI::Composition::ContainerVisual result = nullptr;
	check(shim()->abi_CreateContainerVisual(put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::CubicBezierEasingFunction impl_ICompositor<T>::CreateCubicBezierEasingFunction(Windows::Foundation::Numerics::Vector2 const & controlPoint1, Windows::Foundation::Numerics::Vector2 const & controlPoint2) const
{
	Windows::UI::Composition::CubicBezierEasingFunction result = nullptr;
	check(shim()->abi_CreateCubicBezierEasingFunction(controlPoint1, controlPoint2, put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionEffectFactory impl_ICompositor<T>::CreateEffectFactory(Windows::Graphics::Effects::IGraphicsEffect const & graphicsEffect) const
{
	Windows::UI::Composition::CompositionEffectFactory result = nullptr;
	check(shim()->abi_CreateEffectFactory(get(graphicsEffect), put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionEffectFactory impl_ICompositor<T>::CreateEffectFactory(Windows::Graphics::Effects::IGraphicsEffect const & graphicsEffect, Windows::Foundation::Collections::IIterable<String> const & animatableProperties) const
{
	Windows::UI::Composition::CompositionEffectFactory result = nullptr;
	check(shim()->abi_CreateEffectFactoryWithProperties(get(graphicsEffect), get(animatableProperties), put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::ExpressionAnimation impl_ICompositor<T>::CreateExpressionAnimation() const
{
	Windows::UI::Composition::ExpressionAnimation result = nullptr;
	check(shim()->abi_CreateExpressionAnimation(put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::ExpressionAnimation impl_ICompositor<T>::CreateExpressionAnimation(StringReference const & expression) const
{
	Windows::UI::Composition::ExpressionAnimation result = nullptr;
	check(shim()->abi_CreateExpressionAnimationWithExpression(get(expression), put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::InsetClip impl_ICompositor<T>::CreateInsetClip() const
{
	Windows::UI::Composition::InsetClip result = nullptr;
	check(shim()->abi_CreateInsetClip(put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::InsetClip impl_ICompositor<T>::CreateInsetClip(float const leftInset, float const topInset, float const rightInset, float const bottomInset) const
{
	Windows::UI::Composition::InsetClip result = nullptr;
	check(shim()->abi_CreateInsetClipWithInsets(leftInset, topInset, rightInset, bottomInset, put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::LinearEasingFunction impl_ICompositor<T>::CreateLinearEasingFunction() const
{
	Windows::UI::Composition::LinearEasingFunction result = nullptr;
	check(shim()->abi_CreateLinearEasingFunction(put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionPropertySet impl_ICompositor<T>::CreatePropertySet() const
{
	Windows::UI::Composition::CompositionPropertySet result = nullptr;
	check(shim()->abi_CreatePropertySet(put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::QuaternionKeyFrameAnimation impl_ICompositor<T>::CreateQuaternionKeyFrameAnimation() const
{
	Windows::UI::Composition::QuaternionKeyFrameAnimation result = nullptr;
	check(shim()->abi_CreateQuaternionKeyFrameAnimation(put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::ScalarKeyFrameAnimation impl_ICompositor<T>::CreateScalarKeyFrameAnimation() const
{
	Windows::UI::Composition::ScalarKeyFrameAnimation result = nullptr;
	check(shim()->abi_CreateScalarKeyFrameAnimation(put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionScopedBatch impl_ICompositor<T>::CreateScopedBatch(Windows::UI::Composition::CompositionBatchTypes const batchType) const
{
	Windows::UI::Composition::CompositionScopedBatch result = nullptr;
	check(shim()->abi_CreateScopedBatch(batchType, put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::SpriteVisual impl_ICompositor<T>::CreateSpriteVisual() const
{
	Windows::UI::Composition::SpriteVisual result = nullptr;
	check(shim()->abi_CreateSpriteVisual(put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionSurfaceBrush impl_ICompositor<T>::CreateSurfaceBrush() const
{
	Windows::UI::Composition::CompositionSurfaceBrush result = nullptr;
	check(shim()->abi_CreateSurfaceBrush(put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionSurfaceBrush impl_ICompositor<T>::CreateSurfaceBrush(Windows::UI::Composition::ICompositionSurface const & surface) const
{
	Windows::UI::Composition::CompositionSurfaceBrush result = nullptr;
	check(shim()->abi_CreateSurfaceBrushWithSurface(get(surface), put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionTarget impl_ICompositor<T>::CreateTargetForCurrentView() const
{
	Windows::UI::Composition::CompositionTarget result = nullptr;
	check(shim()->abi_CreateTargetForCurrentView(put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::Vector2KeyFrameAnimation impl_ICompositor<T>::CreateVector2KeyFrameAnimation() const
{
	Windows::UI::Composition::Vector2KeyFrameAnimation result = nullptr;
	check(shim()->abi_CreateVector2KeyFrameAnimation(put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::Vector3KeyFrameAnimation impl_ICompositor<T>::CreateVector3KeyFrameAnimation() const
{
	Windows::UI::Composition::Vector3KeyFrameAnimation result = nullptr;
	check(shim()->abi_CreateVector3KeyFrameAnimation(put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::Vector4KeyFrameAnimation impl_ICompositor<T>::CreateVector4KeyFrameAnimation() const
{
	Windows::UI::Composition::Vector4KeyFrameAnimation result = nullptr;
	check(shim()->abi_CreateVector4KeyFrameAnimation(put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::CompositionCommitBatch impl_ICompositor<T>::GetCommitBatch(Windows::UI::Composition::CompositionBatchTypes const batchType) const
{
	Windows::UI::Composition::CompositionCommitBatch result = nullptr;
	check(shim()->abi_GetCommitBatch(batchType, put(result)));
	return result;
}

template <typename T> Windows::UI::Composition::VisualCollection impl_IContainerVisual<T>::Children() const
{
	Windows::UI::Composition::VisualCollection value = nullptr;
	check(shim()->get_Children(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Vector2 impl_ICubicBezierEasingFunction<T>::ControlPoint1() const
{
	Windows::Foundation::Numerics::Vector2 value = {};
	check(shim()->get_ControlPoint1(&value));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Vector2 impl_ICubicBezierEasingFunction<T>::ControlPoint2() const
{
	Windows::Foundation::Numerics::Vector2 value = {};
	check(shim()->get_ControlPoint2(&value));
	return value;
}

template <typename T> String impl_IExpressionAnimation<T>::Expression() const
{
	String value;
	check(shim()->get_Expression(put(value)));
	return value;
}

template <typename T> void impl_IExpressionAnimation<T>::Expression(StringReference const & value) const
{
	check(shim()->put_Expression(get(value)));
}

template <typename T> float impl_IInsetClip<T>::BottomInset() const
{
	float value = {};
	check(shim()->get_BottomInset(&value));
	return value;
}

template <typename T> void impl_IInsetClip<T>::BottomInset(float const value) const
{
	check(shim()->put_BottomInset(value));
}

template <typename T> float impl_IInsetClip<T>::LeftInset() const
{
	float value = {};
	check(shim()->get_LeftInset(&value));
	return value;
}

template <typename T> void impl_IInsetClip<T>::LeftInset(float const value) const
{
	check(shim()->put_LeftInset(value));
}

template <typename T> float impl_IInsetClip<T>::RightInset() const
{
	float value = {};
	check(shim()->get_RightInset(&value));
	return value;
}

template <typename T> void impl_IInsetClip<T>::RightInset(float const value) const
{
	check(shim()->put_RightInset(value));
}

template <typename T> float impl_IInsetClip<T>::TopInset() const
{
	float value = {};
	check(shim()->get_TopInset(&value));
	return value;
}

template <typename T> void impl_IInsetClip<T>::TopInset(float const value) const
{
	check(shim()->put_TopInset(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IKeyFrameAnimation<T>::DelayTime() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_DelayTime(&value));
	return value;
}

template <typename T> void impl_IKeyFrameAnimation<T>::DelayTime(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_DelayTime(value));
}

template <typename T> Windows::Foundation::TimeSpan impl_IKeyFrameAnimation<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Duration(&value));
	return value;
}

template <typename T> void impl_IKeyFrameAnimation<T>::Duration(Windows::Foundation::TimeSpan const & value) const
{
	check(shim()->put_Duration(value));
}

template <typename T> Windows::UI::Composition::AnimationIterationBehavior impl_IKeyFrameAnimation<T>::IterationBehavior() const
{
	Windows::UI::Composition::AnimationIterationBehavior value = {};
	check(shim()->get_IterationBehavior(&value));
	return value;
}

template <typename T> void impl_IKeyFrameAnimation<T>::IterationBehavior(Windows::UI::Composition::AnimationIterationBehavior const value) const
{
	check(shim()->put_IterationBehavior(value));
}

template <typename T> int impl_IKeyFrameAnimation<T>::IterationCount() const
{
	int value = {};
	check(shim()->get_IterationCount(&value));
	return value;
}

template <typename T> void impl_IKeyFrameAnimation<T>::IterationCount(int const value) const
{
	check(shim()->put_IterationCount(value));
}

template <typename T> int impl_IKeyFrameAnimation<T>::KeyFrameCount() const
{
	int value = {};
	check(shim()->get_KeyFrameCount(&value));
	return value;
}

template <typename T> Windows::UI::Composition::AnimationStopBehavior impl_IKeyFrameAnimation<T>::StopBehavior() const
{
	Windows::UI::Composition::AnimationStopBehavior value = {};
	check(shim()->get_StopBehavior(&value));
	return value;
}

template <typename T> void impl_IKeyFrameAnimation<T>::StopBehavior(Windows::UI::Composition::AnimationStopBehavior const value) const
{
	check(shim()->put_StopBehavior(value));
}

template <typename T> void impl_IKeyFrameAnimation<T>::InsertExpressionKeyFrame(float const normalizedProgressKey, StringReference const & value) const
{
	check(shim()->abi_InsertExpressionKeyFrame(normalizedProgressKey, get(value)));
}

template <typename T> void impl_IKeyFrameAnimation<T>::InsertExpressionKeyFrame(float const normalizedProgressKey, StringReference const & value, Windows::UI::Composition::CompositionEasingFunction const & easingFunction) const
{
	check(shim()->abi_InsertExpressionKeyFrameWithEasingFunction(normalizedProgressKey, get(value), get(easingFunction)));
}

template <typename T> void impl_IQuaternionKeyFrameAnimation<T>::InsertKeyFrame(float const normalizedProgressKey, Windows::Foundation::Numerics::Quaternion const & value) const
{
	check(shim()->abi_InsertKeyFrame(normalizedProgressKey, value));
}

template <typename T> void impl_IQuaternionKeyFrameAnimation<T>::InsertKeyFrame(float const normalizedProgressKey, Windows::Foundation::Numerics::Quaternion const & value, Windows::UI::Composition::CompositionEasingFunction const & easingFunction) const
{
	check(shim()->abi_InsertKeyFrameWithEasingFunction(normalizedProgressKey, value, get(easingFunction)));
}

template <typename T> Windows::UI::Composition::CompositionGraphicsDevice impl_IRenderingDeviceReplacedEventArgs<T>::GraphicsDevice() const
{
	Windows::UI::Composition::CompositionGraphicsDevice value = nullptr;
	check(shim()->get_GraphicsDevice(put(value)));
	return value;
}

template <typename T> void impl_IScalarKeyFrameAnimation<T>::InsertKeyFrame(float const normalizedProgressKey, float const value) const
{
	check(shim()->abi_InsertKeyFrame(normalizedProgressKey, value));
}

template <typename T> void impl_IScalarKeyFrameAnimation<T>::InsertKeyFrame(float const normalizedProgressKey, float const value, Windows::UI::Composition::CompositionEasingFunction const & easingFunction) const
{
	check(shim()->abi_InsertKeyFrameWithEasingFunction(normalizedProgressKey, value, get(easingFunction)));
}

template <typename T> Windows::UI::Composition::CompositionBrush impl_ISpriteVisual<T>::Brush() const
{
	Windows::UI::Composition::CompositionBrush value = nullptr;
	check(shim()->get_Brush(put(value)));
	return value;
}

template <typename T> void impl_ISpriteVisual<T>::Brush(Windows::UI::Composition::CompositionBrush const & value) const
{
	check(shim()->put_Brush(get(value)));
}

template <typename T> void impl_IVector2KeyFrameAnimation<T>::InsertKeyFrame(float const normalizedProgressKey, Windows::Foundation::Numerics::Vector2 const & value) const
{
	check(shim()->abi_InsertKeyFrame(normalizedProgressKey, value));
}

template <typename T> void impl_IVector2KeyFrameAnimation<T>::InsertKeyFrame(float const normalizedProgressKey, Windows::Foundation::Numerics::Vector2 const & value, Windows::UI::Composition::CompositionEasingFunction const & easingFunction) const
{
	check(shim()->abi_InsertKeyFrameWithEasingFunction(normalizedProgressKey, value, get(easingFunction)));
}

template <typename T> void impl_IVector3KeyFrameAnimation<T>::InsertKeyFrame(float const normalizedProgressKey, Windows::Foundation::Numerics::Vector3 const & value) const
{
	check(shim()->abi_InsertKeyFrame(normalizedProgressKey, value));
}

template <typename T> void impl_IVector3KeyFrameAnimation<T>::InsertKeyFrame(float const normalizedProgressKey, Windows::Foundation::Numerics::Vector3 const & value, Windows::UI::Composition::CompositionEasingFunction const & easingFunction) const
{
	check(shim()->abi_InsertKeyFrameWithEasingFunction(normalizedProgressKey, value, get(easingFunction)));
}

template <typename T> void impl_IVector4KeyFrameAnimation<T>::InsertKeyFrame(float const normalizedProgressKey, Windows::Foundation::Numerics::Vector4 const & value) const
{
	check(shim()->abi_InsertKeyFrame(normalizedProgressKey, value));
}

template <typename T> void impl_IVector4KeyFrameAnimation<T>::InsertKeyFrame(float const normalizedProgressKey, Windows::Foundation::Numerics::Vector4 const & value, Windows::UI::Composition::CompositionEasingFunction const & easingFunction) const
{
	check(shim()->abi_InsertKeyFrameWithEasingFunction(normalizedProgressKey, value, get(easingFunction)));
}

template <typename T> Windows::Foundation::Numerics::Vector2 impl_IVisual<T>::AnchorPoint() const
{
	Windows::Foundation::Numerics::Vector2 value = {};
	check(shim()->get_AnchorPoint(&value));
	return value;
}

template <typename T> void impl_IVisual<T>::AnchorPoint(Windows::Foundation::Numerics::Vector2 const & value) const
{
	check(shim()->put_AnchorPoint(value));
}

template <typename T> Windows::UI::Composition::CompositionBackfaceVisibility impl_IVisual<T>::BackfaceVisibility() const
{
	Windows::UI::Composition::CompositionBackfaceVisibility value = {};
	check(shim()->get_BackfaceVisibility(&value));
	return value;
}

template <typename T> void impl_IVisual<T>::BackfaceVisibility(Windows::UI::Composition::CompositionBackfaceVisibility const value) const
{
	check(shim()->put_BackfaceVisibility(value));
}

template <typename T> Windows::UI::Composition::CompositionBorderMode impl_IVisual<T>::BorderMode() const
{
	Windows::UI::Composition::CompositionBorderMode value = {};
	check(shim()->get_BorderMode(&value));
	return value;
}

template <typename T> void impl_IVisual<T>::BorderMode(Windows::UI::Composition::CompositionBorderMode const value) const
{
	check(shim()->put_BorderMode(value));
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_IVisual<T>::CenterPoint() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_CenterPoint(&value));
	return value;
}

template <typename T> void impl_IVisual<T>::CenterPoint(Windows::Foundation::Numerics::Vector3 const & value) const
{
	check(shim()->put_CenterPoint(value));
}

template <typename T> Windows::UI::Composition::CompositionClip impl_IVisual<T>::Clip() const
{
	Windows::UI::Composition::CompositionClip value = nullptr;
	check(shim()->get_Clip(put(value)));
	return value;
}

template <typename T> void impl_IVisual<T>::Clip(Windows::UI::Composition::CompositionClip const & value) const
{
	check(shim()->put_Clip(get(value)));
}

template <typename T> Windows::UI::Composition::CompositionCompositeMode impl_IVisual<T>::CompositeMode() const
{
	Windows::UI::Composition::CompositionCompositeMode value = {};
	check(shim()->get_CompositeMode(&value));
	return value;
}

template <typename T> void impl_IVisual<T>::CompositeMode(Windows::UI::Composition::CompositionCompositeMode const value) const
{
	check(shim()->put_CompositeMode(value));
}

template <typename T> bool impl_IVisual<T>::IsVisible() const
{
	bool value = {};
	check(shim()->get_IsVisible(put(value)));
	return value;
}

template <typename T> void impl_IVisual<T>::IsVisible(bool const value) const
{
	check(shim()->put_IsVisible(value));
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_IVisual<T>::Offset() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_Offset(&value));
	return value;
}

template <typename T> void impl_IVisual<T>::Offset(Windows::Foundation::Numerics::Vector3 const & value) const
{
	check(shim()->put_Offset(value));
}

template <typename T> float impl_IVisual<T>::Opacity() const
{
	float value = {};
	check(shim()->get_Opacity(&value));
	return value;
}

template <typename T> void impl_IVisual<T>::Opacity(float const value) const
{
	check(shim()->put_Opacity(value));
}

template <typename T> Windows::Foundation::Numerics::Quaternion impl_IVisual<T>::Orientation() const
{
	Windows::Foundation::Numerics::Quaternion value = {};
	check(shim()->get_Orientation(&value));
	return value;
}

template <typename T> void impl_IVisual<T>::Orientation(Windows::Foundation::Numerics::Quaternion const & value) const
{
	check(shim()->put_Orientation(value));
}

template <typename T> Windows::UI::Composition::ContainerVisual impl_IVisual<T>::Parent() const
{
	Windows::UI::Composition::ContainerVisual value = nullptr;
	check(shim()->get_Parent(put(value)));
	return value;
}

template <typename T> float impl_IVisual<T>::RotationAngle() const
{
	float value = {};
	check(shim()->get_RotationAngle(&value));
	return value;
}

template <typename T> void impl_IVisual<T>::RotationAngle(float const value) const
{
	check(shim()->put_RotationAngle(value));
}

template <typename T> float impl_IVisual<T>::RotationAngleInDegrees() const
{
	float value = {};
	check(shim()->get_RotationAngleInDegrees(&value));
	return value;
}

template <typename T> void impl_IVisual<T>::RotationAngleInDegrees(float const value) const
{
	check(shim()->put_RotationAngleInDegrees(value));
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_IVisual<T>::RotationAxis() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_RotationAxis(&value));
	return value;
}

template <typename T> void impl_IVisual<T>::RotationAxis(Windows::Foundation::Numerics::Vector3 const & value) const
{
	check(shim()->put_RotationAxis(value));
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_IVisual<T>::Scale() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_Scale(&value));
	return value;
}

template <typename T> void impl_IVisual<T>::Scale(Windows::Foundation::Numerics::Vector3 const & value) const
{
	check(shim()->put_Scale(value));
}

template <typename T> Windows::Foundation::Numerics::Vector2 impl_IVisual<T>::Size() const
{
	Windows::Foundation::Numerics::Vector2 value = {};
	check(shim()->get_Size(&value));
	return value;
}

template <typename T> void impl_IVisual<T>::Size(Windows::Foundation::Numerics::Vector2 const & value) const
{
	check(shim()->put_Size(value));
}

template <typename T> Windows::Foundation::Numerics::Matrix4x4 impl_IVisual<T>::TransformMatrix() const
{
	Windows::Foundation::Numerics::Matrix4x4 value = {};
	check(shim()->get_TransformMatrix(&value));
	return value;
}

template <typename T> void impl_IVisual<T>::TransformMatrix(Windows::Foundation::Numerics::Matrix4x4 const & value) const
{
	check(shim()->put_TransformMatrix(value));
}

template <typename T> int impl_IVisualCollection<T>::Count() const
{
	int value = {};
	check(shim()->get_Count(&value));
	return value;
}

template <typename T> void impl_IVisualCollection<T>::InsertAbove(Windows::UI::Composition::Visual const & newChild, Windows::UI::Composition::Visual const & sibling) const
{
	check(shim()->abi_InsertAbove(get(newChild), get(sibling)));
}

template <typename T> void impl_IVisualCollection<T>::InsertAtBottom(Windows::UI::Composition::Visual const & newChild) const
{
	check(shim()->abi_InsertAtBottom(get(newChild)));
}

template <typename T> void impl_IVisualCollection<T>::InsertAtTop(Windows::UI::Composition::Visual const & newChild) const
{
	check(shim()->abi_InsertAtTop(get(newChild)));
}

template <typename T> void impl_IVisualCollection<T>::InsertBelow(Windows::UI::Composition::Visual const & newChild, Windows::UI::Composition::Visual const & sibling) const
{
	check(shim()->abi_InsertBelow(get(newChild), get(sibling)));
}

template <typename T> void impl_IVisualCollection<T>::Remove(Windows::UI::Composition::Visual const & child) const
{
	check(shim()->abi_Remove(get(child)));
}

template <typename T> void impl_IVisualCollection<T>::RemoveAll() const
{
	check(shim()->abi_RemoveAll());
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Core {

template <typename T> void impl_IDispatchedHandler<T>::Invoke() const
{
	check(shim()->abi_Invoke());
}

template <typename T> void impl_IIdleDispatchedHandler<T>::Invoke(Windows::UI::Core::IdleDispatchedHandlerArgs const & e) const
{
	check(shim()->abi_Invoke(get(e)));
}

template <typename T> bool impl_ICoreWindowEventArgs<T>::Handled() const
{
	bool value = {};
	check(shim()->get_Handled(put(value)));
	return value;
}

template <typename T> void impl_ICoreWindowEventArgs<T>::Handled(bool const value) const
{
	check(shim()->put_Handled(value));
}

template <typename T> IInspectable impl_IAutomationProviderRequestedEventArgs<T>::AutomationProvider() const
{
	IInspectable value;
	check(shim()->get_AutomationProvider(put(value)));
	return value;
}

template <typename T> void impl_IAutomationProviderRequestedEventArgs<T>::AutomationProvider(IInspectable const & value) const
{
	check(shim()->put_AutomationProvider(get(value)));
}

template <typename T> unsigned impl_ICharacterReceivedEventArgs<T>::KeyCode() const
{
	unsigned value = {};
	check(shim()->get_KeyCode(&value));
	return value;
}

template <typename T> Windows::UI::Core::CorePhysicalKeyStatus impl_ICharacterReceivedEventArgs<T>::KeyStatus() const
{
	Windows::UI::Core::CorePhysicalKeyStatus value = {};
	check(shim()->get_KeyStatus(&value));
	return value;
}

template <typename T> bool impl_IInputEnabledEventArgs<T>::InputEnabled() const
{
	bool value = {};
	check(shim()->get_InputEnabled(put(value)));
	return value;
}

template <typename T> Windows::System::VirtualKey impl_IKeyEventArgs<T>::VirtualKey() const
{
	Windows::System::VirtualKey value = {};
	check(shim()->get_VirtualKey(&value));
	return value;
}

template <typename T> Windows::UI::Core::CorePhysicalKeyStatus impl_IKeyEventArgs<T>::KeyStatus() const
{
	Windows::UI::Core::CorePhysicalKeyStatus value = {};
	check(shim()->get_KeyStatus(&value));
	return value;
}

template <typename T> Windows::UI::Input::PointerPoint impl_IPointerEventArgs<T>::CurrentPoint() const
{
	Windows::UI::Input::PointerPoint value = nullptr;
	check(shim()->get_CurrentPoint(put(value)));
	return value;
}

template <typename T> Windows::System::VirtualKeyModifiers impl_IPointerEventArgs<T>::KeyModifiers() const
{
	Windows::System::VirtualKeyModifiers value = {};
	check(shim()->get_KeyModifiers(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> impl_IPointerEventArgs<T>::GetIntermediatePoints() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> value;
	check(shim()->abi_GetIntermediatePoints(put(value)));
	return value;
}

template <typename T> Windows::UI::Core::CoreProximityEvaluation impl_ITouchHitTestingEventArgs<T>::ProximityEvaluation() const
{
	Windows::UI::Core::CoreProximityEvaluation value = {};
	check(shim()->get_ProximityEvaluation(&value));
	return value;
}

template <typename T> void impl_ITouchHitTestingEventArgs<T>::ProximityEvaluation(Windows::UI::Core::CoreProximityEvaluation const & value) const
{
	check(shim()->put_ProximityEvaluation(value));
}

template <typename T> Windows::Foundation::Point impl_ITouchHitTestingEventArgs<T>::Point() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_Point(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_ITouchHitTestingEventArgs<T>::BoundingBox() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_BoundingBox(&value));
	return value;
}

template <typename T> Windows::UI::Core::CoreProximityEvaluation impl_ITouchHitTestingEventArgs<T>::EvaluateProximity(Windows::Foundation::Rect const & controlBoundingBox) const
{
	Windows::UI::Core::CoreProximityEvaluation proximityEvaluation = {};
	check(shim()->abi_EvaluateProximityToRect(controlBoundingBox, &proximityEvaluation));
	return proximityEvaluation;
}

template <typename T> Windows::UI::Core::CoreWindowActivationState impl_IWindowActivatedEventArgs<T>::WindowActivationState() const
{
	Windows::UI::Core::CoreWindowActivationState value = {};
	check(shim()->get_WindowActivationState(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IWindowSizeChangedEventArgs<T>::Size() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_Size(&value));
	return value;
}

template <typename T> bool impl_IVisibilityChangedEventArgs<T>::Visible() const
{
	bool value = {};
	check(shim()->get_Visible(put(value)));
	return value;
}

template <typename T> IInspectable impl_ICoreWindow<T>::AutomationHostProvider() const
{
	IInspectable value;
	check(shim()->get_AutomationHostProvider(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_ICoreWindow<T>::Bounds() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_Bounds(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IPropertySet impl_ICoreWindow<T>::CustomProperties() const
{
	Windows::Foundation::Collections::IPropertySet value;
	check(shim()->get_CustomProperties(put(value)));
	return value;
}

template <typename T> Windows::UI::Core::CoreDispatcher impl_ICoreWindow<T>::Dispatcher() const
{
	Windows::UI::Core::CoreDispatcher value = nullptr;
	check(shim()->get_Dispatcher(put(value)));
	return value;
}

template <typename T> Windows::UI::Core::CoreWindowFlowDirection impl_ICoreWindow<T>::FlowDirection() const
{
	Windows::UI::Core::CoreWindowFlowDirection value = {};
	check(shim()->get_FlowDirection(&value));
	return value;
}

template <typename T> void impl_ICoreWindow<T>::FlowDirection(Windows::UI::Core::CoreWindowFlowDirection const value) const
{
	check(shim()->put_FlowDirection(value));
}

template <typename T> bool impl_ICoreWindow<T>::IsInputEnabled() const
{
	bool value = {};
	check(shim()->get_IsInputEnabled(put(value)));
	return value;
}

template <typename T> void impl_ICoreWindow<T>::IsInputEnabled(bool const value) const
{
	check(shim()->put_IsInputEnabled(value));
}

template <typename T> Windows::UI::Core::CoreCursor impl_ICoreWindow<T>::PointerCursor() const
{
	Windows::UI::Core::CoreCursor value = nullptr;
	check(shim()->get_PointerCursor(put(value)));
	return value;
}

template <typename T> void impl_ICoreWindow<T>::PointerCursor(Windows::UI::Core::CoreCursor const & value) const
{
	check(shim()->put_PointerCursor(get(value)));
}

template <typename T> Windows::Foundation::Point impl_ICoreWindow<T>::PointerPosition() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_PointerPosition(&value));
	return value;
}

template <typename T> bool impl_ICoreWindow<T>::Visible() const
{
	bool value = {};
	check(shim()->get_Visible(put(value)));
	return value;
}

template <typename T> void impl_ICoreWindow<T>::Activate() const
{
	check(shim()->abi_Activate());
}

template <typename T> void impl_ICoreWindow<T>::Close() const
{
	check(shim()->abi_Close());
}

template <typename T> Windows::UI::Core::CoreVirtualKeyStates impl_ICoreWindow<T>::GetAsyncKeyState(Windows::System::VirtualKey const virtualKey) const
{
	Windows::UI::Core::CoreVirtualKeyStates KeyState = {};
	check(shim()->abi_GetAsyncKeyState(virtualKey, &KeyState));
	return KeyState;
}

template <typename T> Windows::UI::Core::CoreVirtualKeyStates impl_ICoreWindow<T>::GetKeyState(Windows::System::VirtualKey const virtualKey) const
{
	Windows::UI::Core::CoreVirtualKeyStates KeyState = {};
	check(shim()->abi_GetKeyState(virtualKey, &KeyState));
	return KeyState;
}

template <typename T> void impl_ICoreWindow<T>::ReleasePointerCapture() const
{
	check(shim()->abi_ReleasePointerCapture());
}

template <typename T> void impl_ICoreWindow<T>::SetPointerCapture() const
{
	check(shim()->abi_SetPointerCapture());
}

template <typename T> long long impl_ICoreWindow<T>::Activated(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowActivatedEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_Activated(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::Activated(F handler) const
{
	return Activated(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowActivatedEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::Activated(long long const cookie) const
{
	check(shim()->remove_Activated(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::AutomationProviderRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::AutomationProviderRequestedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_AutomationProviderRequested(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::AutomationProviderRequested(F handler) const
{
	return AutomationProviderRequested(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::AutomationProviderRequestedEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::AutomationProviderRequested(long long const cookie) const
{
	check(shim()->remove_AutomationProviderRequested(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::CharacterReceived(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CharacterReceivedEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_CharacterReceived(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::CharacterReceived(F handler) const
{
	return CharacterReceived(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CharacterReceivedEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::CharacterReceived(long long const cookie) const
{
	check(shim()->remove_CharacterReceived(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::Closed(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_Closed(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::Closed(F handler) const
{
	return Closed(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::Closed(long long const cookie) const
{
	check(shim()->remove_Closed(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::InputEnabled(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::InputEnabledEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_InputEnabled(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::InputEnabled(F handler) const
{
	return InputEnabled(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::InputEnabledEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::InputEnabled(long long const cookie) const
{
	check(shim()->remove_InputEnabled(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::KeyDown(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_KeyDown(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::KeyDown(F handler) const
{
	return KeyDown(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::KeyDown(long long const cookie) const
{
	check(shim()->remove_KeyDown(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::KeyUp(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_KeyUp(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::KeyUp(F handler) const
{
	return KeyUp(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::KeyEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::KeyUp(long long const cookie) const
{
	check(shim()->remove_KeyUp(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::PointerCaptureLost(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerCaptureLost(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::PointerCaptureLost(F handler) const
{
	return PointerCaptureLost(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerCaptureLost(long long const cookie) const
{
	check(shim()->remove_PointerCaptureLost(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::PointerEntered(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerEntered(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::PointerEntered(F handler) const
{
	return PointerEntered(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerEntered(long long const cookie) const
{
	check(shim()->remove_PointerEntered(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::PointerExited(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerExited(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::PointerExited(F handler) const
{
	return PointerExited(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerExited(long long const cookie) const
{
	check(shim()->remove_PointerExited(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::PointerMoved(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerMoved(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::PointerMoved(F handler) const
{
	return PointerMoved(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerMoved(long long const cookie) const
{
	check(shim()->remove_PointerMoved(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::PointerPressed(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::PointerPressed(F handler) const
{
	return PointerPressed(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerPressed(long long const cookie) const
{
	check(shim()->remove_PointerPressed(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::PointerReleased(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerReleased(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::PointerReleased(F handler) const
{
	return PointerReleased(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerReleased(long long const cookie) const
{
	check(shim()->remove_PointerReleased(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::TouchHitTesting(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::TouchHitTestingEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_TouchHitTesting(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::TouchHitTesting(F handler) const
{
	return TouchHitTesting(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::TouchHitTestingEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::TouchHitTesting(long long const cookie) const
{
	check(shim()->remove_TouchHitTesting(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::PointerWheelChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerWheelChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::PointerWheelChanged(F handler) const
{
	return PointerWheelChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::PointerWheelChanged(long long const cookie) const
{
	check(shim()->remove_PointerWheelChanged(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::SizeChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowSizeChangedEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_SizeChanged(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::SizeChanged(F handler) const
{
	return SizeChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::WindowSizeChangedEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::SizeChanged(long long const cookie) const
{
	check(shim()->remove_SizeChanged(cookie));
}

template <typename T> long long impl_ICoreWindow<T>::VisibilityChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::VisibilityChangedEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_VisibilityChanged(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreWindow<T>::VisibilityChanged(F handler) const
{
	return VisibilityChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::VisibilityChangedEventArgs>(handler));
}

template <typename T> void impl_ICoreWindow<T>::VisibilityChanged(long long const cookie) const
{
	check(shim()->remove_VisibilityChanged(cookie));
}

template <typename T> void impl_ICoreWindow2<T>::PointerPosition(Windows::Foundation::Point const & value) const
{
	check(shim()->put_PointerPosition(value));
}

template <typename T> Windows::UI::Core::CoreWindow impl_ICoreWindowStatic<T>::GetForCurrentThread() const
{
	Windows::UI::Core::CoreWindow ppWindow = nullptr;
	check(shim()->abi_GetForCurrentThread(put(ppWindow)));
	return ppWindow;
}

template <typename T> Windows::UI::Core::CoreAcceleratorKeyEventType impl_IAcceleratorKeyEventArgs<T>::EventType() const
{
	Windows::UI::Core::CoreAcceleratorKeyEventType value = {};
	check(shim()->get_EventType(&value));
	return value;
}

template <typename T> Windows::System::VirtualKey impl_IAcceleratorKeyEventArgs<T>::VirtualKey() const
{
	Windows::System::VirtualKey value = {};
	check(shim()->get_VirtualKey(&value));
	return value;
}

template <typename T> Windows::UI::Core::CorePhysicalKeyStatus impl_IAcceleratorKeyEventArgs<T>::KeyStatus() const
{
	Windows::UI::Core::CorePhysicalKeyStatus value = {};
	check(shim()->get_KeyStatus(&value));
	return value;
}

template <typename T> long long impl_ICoreAcceleratorKeys<T>::AcceleratorKeyActivated(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreDispatcher, Windows::UI::Core::AcceleratorKeyEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_AcceleratorKeyActivated(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreAcceleratorKeys<T>::AcceleratorKeyActivated(F handler) const
{
	return AcceleratorKeyActivated(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreDispatcher, Windows::UI::Core::AcceleratorKeyEventArgs>(handler));
}

template <typename T> void impl_ICoreAcceleratorKeys<T>::AcceleratorKeyActivated(long long const cookie) const
{
	check(shim()->remove_AcceleratorKeyActivated(cookie));
}

template <typename T> bool impl_ICoreDispatcher<T>::HasThreadAccess() const
{
	bool value = {};
	check(shim()->get_HasThreadAccess(put(value)));
	return value;
}

template <typename T> void impl_ICoreDispatcher<T>::ProcessEvents(Windows::UI::Core::CoreProcessEventsOption const options) const
{
	check(shim()->abi_ProcessEvents(options));
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICoreDispatcher<T>::RunAsync(Windows::UI::Core::CoreDispatcherPriority const priority, Windows::UI::Core::IDispatchedHandler const & agileCallback) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check(shim()->abi_RunAsync(priority, get(agileCallback), put(asyncAction)));
	return asyncAction;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncAction impl_ICoreDispatcher<T>::RunAsync(Windows::UI::Core::CoreDispatcherPriority const priority, F agileCallback) const
{
	return RunAsync(priority, Windows::UI::Core::DispatchedHandler(agileCallback));
}

template <typename T> Windows::Foundation::IAsyncAction impl_ICoreDispatcher<T>::RunIdleAsync(Windows::UI::Core::IIdleDispatchedHandler const & agileCallback) const
{
	Windows::Foundation::IAsyncAction asyncAction;
	check(shim()->abi_RunIdleAsync(get(agileCallback), put(asyncAction)));
	return asyncAction;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncAction impl_ICoreDispatcher<T>::RunIdleAsync(F agileCallback) const
{
	return RunIdleAsync(Windows::UI::Core::IdleDispatchedHandler(agileCallback));
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ICoreDispatcher2<T>::TryRunAsync(Windows::UI::Core::CoreDispatcherPriority const priority, Windows::UI::Core::IDispatchedHandler const & agileCallback) const
{
	Windows::Foundation::IAsyncOperation<bool> asyncOperation;
	check(shim()->abi_TryRunAsync(priority, get(agileCallback), put(asyncOperation)));
	return asyncOperation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncOperation<bool> impl_ICoreDispatcher2<T>::TryRunAsync(Windows::UI::Core::CoreDispatcherPriority const priority, F agileCallback) const
{
	return TryRunAsync(priority, Windows::UI::Core::DispatchedHandler(agileCallback));
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ICoreDispatcher2<T>::TryRunIdleAsync(Windows::UI::Core::IIdleDispatchedHandler const & agileCallback) const
{
	Windows::Foundation::IAsyncOperation<bool> asyncOperation;
	check(shim()->abi_TryRunIdleAsync(get(agileCallback), put(asyncOperation)));
	return asyncOperation;
}

template <typename T> template <typename F> Windows::Foundation::IAsyncOperation<bool> impl_ICoreDispatcher2<T>::TryRunIdleAsync(F agileCallback) const
{
	return TryRunIdleAsync(Windows::UI::Core::IdleDispatchedHandler(agileCallback));
}

template <typename T> Windows::UI::Core::CoreDispatcherPriority impl_ICoreDispatcherWithTaskPriority<T>::CurrentPriority() const
{
	Windows::UI::Core::CoreDispatcherPriority value = {};
	check(shim()->get_CurrentPriority(&value));
	return value;
}

template <typename T> void impl_ICoreDispatcherWithTaskPriority<T>::CurrentPriority(Windows::UI::Core::CoreDispatcherPriority const value) const
{
	check(shim()->put_CurrentPriority(value));
}

template <typename T> bool impl_ICoreDispatcherWithTaskPriority<T>::ShouldYield() const
{
	bool value = {};
	check(shim()->abi_ShouldYield(put(value)));
	return value;
}

template <typename T> bool impl_ICoreDispatcherWithTaskPriority<T>::ShouldYield(Windows::UI::Core::CoreDispatcherPriority const priority) const
{
	bool value = {};
	check(shim()->abi_ShouldYieldToPriority(priority, put(value)));
	return value;
}

template <typename T> void impl_ICoreDispatcherWithTaskPriority<T>::StopProcessEvents() const
{
	check(shim()->abi_StopProcessEvents());
}

template <typename T> bool impl_IIdleDispatchedHandlerArgs<T>::IsDispatcherIdle() const
{
	bool value = {};
	check(shim()->get_IsDispatcherIdle(put(value)));
	return value;
}

template <typename T> unsigned impl_ICoreCursor<T>::Id() const
{
	unsigned value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::UI::Core::CoreCursorType impl_ICoreCursor<T>::Type() const
{
	Windows::UI::Core::CoreCursorType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::UI::Core::CoreCursor impl_ICoreCursorFactory<T>::CreateCursor(Windows::UI::Core::CoreCursorType const type, unsigned const id) const
{
	Windows::UI::Core::CoreCursor cursor = nullptr;
	check(shim()->abi_CreateCursor(type, id, put(cursor)));
	return cursor;
}

template <typename T> void impl_IInitializeWithCoreWindow<T>::Initialize(Windows::UI::Core::CoreWindow const & window) const
{
	check(shim()->abi_Initialize(get(window)));
}

template <typename T> void impl_ICoreWindowResizeManager<T>::NotifyLayoutCompleted() const
{
	check(shim()->abi_NotifyLayoutCompleted());
}

template <typename T> void impl_ICoreWindowResizeManagerLayoutCapability<T>::ShouldWaitForLayoutCompletion(bool const value) const
{
	check(shim()->put_ShouldWaitForLayoutCompletion(value));
}

template <typename T> bool impl_ICoreWindowResizeManagerLayoutCapability<T>::ShouldWaitForLayoutCompletion() const
{
	bool value = {};
	check(shim()->get_ShouldWaitForLayoutCompletion(put(value)));
	return value;
}

template <typename T> Windows::UI::Core::CoreWindowResizeManager impl_ICoreWindowResizeManagerStatics<T>::GetForCurrentView() const
{
	Windows::UI::Core::CoreWindowResizeManager CoreWindowResizeManager = nullptr;
	check(shim()->abi_GetForCurrentView(put(CoreWindowResizeManager)));
	return CoreWindowResizeManager;
}

template <typename T> Windows::UI::Core::CoreDispatcher impl_ICoreInputSourceBase<T>::Dispatcher() const
{
	Windows::UI::Core::CoreDispatcher value = nullptr;
	check(shim()->get_Dispatcher(put(value)));
	return value;
}

template <typename T> bool impl_ICoreInputSourceBase<T>::IsInputEnabled() const
{
	bool value = {};
	check(shim()->get_IsInputEnabled(put(value)));
	return value;
}

template <typename T> void impl_ICoreInputSourceBase<T>::IsInputEnabled(bool const value) const
{
	check(shim()->put_IsInputEnabled(value));
}

template <typename T> long long impl_ICoreInputSourceBase<T>::InputEnabled(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::InputEnabledEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_InputEnabled(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreInputSourceBase<T>::InputEnabled(F handler) const
{
	return InputEnabled(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::InputEnabledEventArgs>(handler));
}

template <typename T> void impl_ICoreInputSourceBase<T>::InputEnabled(long long const cookie) const
{
	check(shim()->remove_InputEnabled(cookie));
}

template <typename T> void impl_ICorePointerInputSource<T>::ReleasePointerCapture() const
{
	check(shim()->abi_ReleasePointerCapture());
}

template <typename T> void impl_ICorePointerInputSource<T>::SetPointerCapture() const
{
	check(shim()->abi_SetPointerCapture());
}

template <typename T> bool impl_ICorePointerInputSource<T>::HasCapture() const
{
	bool value = {};
	check(shim()->get_HasCapture(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Point impl_ICorePointerInputSource<T>::PointerPosition() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_PointerPosition(&value));
	return value;
}

template <typename T> Windows::UI::Core::CoreCursor impl_ICorePointerInputSource<T>::PointerCursor() const
{
	Windows::UI::Core::CoreCursor value = nullptr;
	check(shim()->get_PointerCursor(put(value)));
	return value;
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerCursor(Windows::UI::Core::CoreCursor const & value) const
{
	check(shim()->put_PointerCursor(get(value)));
}

template <typename T> long long impl_ICorePointerInputSource<T>::PointerCaptureLost(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerCaptureLost(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerInputSource<T>::PointerCaptureLost(F handler) const
{
	return PointerCaptureLost(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerCaptureLost(long long const cookie) const
{
	check(shim()->remove_PointerCaptureLost(cookie));
}

template <typename T> long long impl_ICorePointerInputSource<T>::PointerEntered(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerEntered(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerInputSource<T>::PointerEntered(F handler) const
{
	return PointerEntered(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerEntered(long long const cookie) const
{
	check(shim()->remove_PointerEntered(cookie));
}

template <typename T> long long impl_ICorePointerInputSource<T>::PointerExited(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerExited(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerInputSource<T>::PointerExited(F handler) const
{
	return PointerExited(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerExited(long long const cookie) const
{
	check(shim()->remove_PointerExited(cookie));
}

template <typename T> long long impl_ICorePointerInputSource<T>::PointerMoved(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerMoved(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerInputSource<T>::PointerMoved(F handler) const
{
	return PointerMoved(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerMoved(long long const cookie) const
{
	check(shim()->remove_PointerMoved(cookie));
}

template <typename T> long long impl_ICorePointerInputSource<T>::PointerPressed(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerInputSource<T>::PointerPressed(F handler) const
{
	return PointerPressed(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerPressed(long long const cookie) const
{
	check(shim()->remove_PointerPressed(cookie));
}

template <typename T> long long impl_ICorePointerInputSource<T>::PointerReleased(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerReleased(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerInputSource<T>::PointerReleased(F handler) const
{
	return PointerReleased(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerReleased(long long const cookie) const
{
	check(shim()->remove_PointerReleased(cookie));
}

template <typename T> long long impl_ICorePointerInputSource<T>::PointerWheelChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerWheelChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerInputSource<T>::PointerWheelChanged(F handler) const
{
	return PointerWheelChanged(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerInputSource<T>::PointerWheelChanged(long long const cookie) const
{
	check(shim()->remove_PointerWheelChanged(cookie));
}

template <typename T> Windows::UI::Core::CoreVirtualKeyStates impl_ICoreKeyboardInputSource<T>::GetCurrentKeyState(Windows::System::VirtualKey const virtualKey) const
{
	Windows::UI::Core::CoreVirtualKeyStates KeyState = {};
	check(shim()->abi_GetCurrentKeyState(virtualKey, &KeyState));
	return KeyState;
}

template <typename T> long long impl_ICoreKeyboardInputSource<T>::CharacterReceived(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CharacterReceivedEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_CharacterReceived(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreKeyboardInputSource<T>::CharacterReceived(F handler) const
{
	return CharacterReceived(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::CharacterReceivedEventArgs>(handler));
}

template <typename T> void impl_ICoreKeyboardInputSource<T>::CharacterReceived(long long const cookie) const
{
	check(shim()->remove_CharacterReceived(cookie));
}

template <typename T> long long impl_ICoreKeyboardInputSource<T>::KeyDown(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_KeyDown(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreKeyboardInputSource<T>::KeyDown(F handler) const
{
	return KeyDown(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs>(handler));
}

template <typename T> void impl_ICoreKeyboardInputSource<T>::KeyDown(long long const cookie) const
{
	check(shim()->remove_KeyDown(cookie));
}

template <typename T> long long impl_ICoreKeyboardInputSource<T>::KeyUp(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_KeyUp(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreKeyboardInputSource<T>::KeyUp(F handler) const
{
	return KeyUp(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::KeyEventArgs>(handler));
}

template <typename T> void impl_ICoreKeyboardInputSource<T>::KeyUp(long long const cookie) const
{
	check(shim()->remove_KeyUp(cookie));
}

template <typename T> bool impl_ICoreComponentFocusable<T>::HasFocus() const
{
	bool value = {};
	check(shim()->get_HasFocus(put(value)));
	return value;
}

template <typename T> long long impl_ICoreComponentFocusable<T>::GotFocus(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_GotFocus(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreComponentFocusable<T>::GotFocus(F handler) const
{
	return GotFocus(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs>(handler));
}

template <typename T> void impl_ICoreComponentFocusable<T>::GotFocus(long long const cookie) const
{
	check(shim()->remove_GotFocus(cookie));
}

template <typename T> long long impl_ICoreComponentFocusable<T>::LostFocus(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_LostFocus(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreComponentFocusable<T>::LostFocus(F handler) const
{
	return LostFocus(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::CoreWindowEventArgs>(handler));
}

template <typename T> void impl_ICoreComponentFocusable<T>::LostFocus(long long const cookie) const
{
	check(shim()->remove_LostFocus(cookie));
}

template <typename T> long long impl_ICoreTouchHitTesting<T>::TouchHitTesting(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::UI::Core::TouchHitTestingEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_TouchHitTesting(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_ICoreTouchHitTesting<T>::TouchHitTesting(F handler) const
{
	return TouchHitTesting(Windows::Foundation::TypedEventHandler<IInspectable, Windows::UI::Core::TouchHitTestingEventArgs>(handler));
}

template <typename T> void impl_ICoreTouchHitTesting<T>::TouchHitTesting(long long const cookie) const
{
	check(shim()->remove_TouchHitTesting(cookie));
}

template <typename T> long long impl_ICorePointerRedirector<T>::PointerRoutedAway(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::ICorePointerRedirector, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerRoutedAway(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerRedirector<T>::PointerRoutedAway(F handler) const
{
	return PointerRoutedAway(Windows::Foundation::TypedEventHandler<Windows::UI::Core::ICorePointerRedirector, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerRedirector<T>::PointerRoutedAway(long long const cookie) const
{
	check(shim()->remove_PointerRoutedAway(cookie));
}

template <typename T> long long impl_ICorePointerRedirector<T>::PointerRoutedTo(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::ICorePointerRedirector, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerRoutedTo(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerRedirector<T>::PointerRoutedTo(F handler) const
{
	return PointerRoutedTo(Windows::Foundation::TypedEventHandler<Windows::UI::Core::ICorePointerRedirector, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerRedirector<T>::PointerRoutedTo(long long const cookie) const
{
	check(shim()->remove_PointerRoutedTo(cookie));
}

template <typename T> long long impl_ICorePointerRedirector<T>::PointerRoutedReleased(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::ICorePointerRedirector, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerRoutedReleased(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICorePointerRedirector<T>::PointerRoutedReleased(F handler) const
{
	return PointerRoutedReleased(Windows::Foundation::TypedEventHandler<Windows::UI::Core::ICorePointerRedirector, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICorePointerRedirector<T>::PointerRoutedReleased(long long const cookie) const
{
	check(shim()->remove_PointerRoutedReleased(cookie));
}

template <typename T> void impl_ICoreWindowPopupShowingEventArgs<T>::SetDesiredSize(Windows::Foundation::Size const & value) const
{
	check(shim()->abi_SetDesiredSize(value));
}

template <typename T> long long impl_ICoreWindowDialog<T>::Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_Showing(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindowDialog<T>::Showing(F handler) const
{
	return Showing(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs>(handler));
}

template <typename T> void impl_ICoreWindowDialog<T>::Showing(long long const cookie) const
{
	check(shim()->remove_Showing(cookie));
}

template <typename T> Windows::Foundation::Size impl_ICoreWindowDialog<T>::MaxSize() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_MaxSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_ICoreWindowDialog<T>::MinSize() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_MinSize(&value));
	return value;
}

template <typename T> String impl_ICoreWindowDialog<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_ICoreWindowDialog<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> int impl_ICoreWindowDialog<T>::IsInteractionDelayed() const
{
	int value = {};
	check(shim()->get_IsInteractionDelayed(&value));
	return value;
}

template <typename T> void impl_ICoreWindowDialog<T>::IsInteractionDelayed(int const value) const
{
	check(shim()->put_IsInteractionDelayed(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> impl_ICoreWindowDialog<T>::Commands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> value;
	check(shim()->get_Commands(put(value)));
	return value;
}

template <typename T> unsigned impl_ICoreWindowDialog<T>::DefaultCommandIndex() const
{
	unsigned value = {};
	check(shim()->get_DefaultCommandIndex(&value));
	return value;
}

template <typename T> void impl_ICoreWindowDialog<T>::DefaultCommandIndex(unsigned const value) const
{
	check(shim()->put_DefaultCommandIndex(value));
}

template <typename T> unsigned impl_ICoreWindowDialog<T>::CancelCommandIndex() const
{
	unsigned value = {};
	check(shim()->get_CancelCommandIndex(&value));
	return value;
}

template <typename T> void impl_ICoreWindowDialog<T>::CancelCommandIndex(unsigned const value) const
{
	check(shim()->put_CancelCommandIndex(value));
}

template <typename T> Windows::UI::Popups::IUICommandInvokedHandler impl_ICoreWindowDialog<T>::BackButtonCommand() const
{
	Windows::UI::Popups::IUICommandInvokedHandler value = {};
	check(shim()->get_BackButtonCommand(put(value)));
	return value;
}

template <typename T> void impl_ICoreWindowDialog<T>::BackButtonCommand(Windows::UI::Popups::IUICommandInvokedHandler const & value) const
{
	check(shim()->put_BackButtonCommand(get(value)));
}

template <typename T> template <typename F> void impl_ICoreWindowDialog<T>::BackButtonCommand(F value) const
{
	BackButtonCommand(Windows::UI::Popups::UICommandInvokedHandler(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_ICoreWindowDialog<T>::ShowAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> asyncInfo;
	check(shim()->abi_ShowAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::UI::Core::CoreWindowDialog impl_ICoreWindowDialogFactory<T>::CreateWithTitle(StringReference const & title) const
{
	Windows::UI::Core::CoreWindowDialog coreWindowDialog = nullptr;
	check(shim()->abi_CreateWithTitle(get(title), put(coreWindowDialog)));
	return coreWindowDialog;
}

template <typename T> long long impl_ICoreWindowFlyout<T>::Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_Showing(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreWindowFlyout<T>::Showing(F handler) const
{
	return Showing(Windows::Foundation::TypedEventHandler<Windows::UI::Core::CoreWindow, Windows::UI::Core::CoreWindowPopupShowingEventArgs>(handler));
}

template <typename T> void impl_ICoreWindowFlyout<T>::Showing(long long const cookie) const
{
	check(shim()->remove_Showing(cookie));
}

template <typename T> Windows::Foundation::Size impl_ICoreWindowFlyout<T>::MaxSize() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_MaxSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_ICoreWindowFlyout<T>::MinSize() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_MinSize(&value));
	return value;
}

template <typename T> String impl_ICoreWindowFlyout<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_ICoreWindowFlyout<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> int impl_ICoreWindowFlyout<T>::IsInteractionDelayed() const
{
	int value = {};
	check(shim()->get_IsInteractionDelayed(&value));
	return value;
}

template <typename T> void impl_ICoreWindowFlyout<T>::IsInteractionDelayed(int const value) const
{
	check(shim()->put_IsInteractionDelayed(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> impl_ICoreWindowFlyout<T>::Commands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> value;
	check(shim()->get_Commands(put(value)));
	return value;
}

template <typename T> unsigned impl_ICoreWindowFlyout<T>::DefaultCommandIndex() const
{
	unsigned value = {};
	check(shim()->get_DefaultCommandIndex(&value));
	return value;
}

template <typename T> void impl_ICoreWindowFlyout<T>::DefaultCommandIndex(unsigned const value) const
{
	check(shim()->put_DefaultCommandIndex(value));
}

template <typename T> Windows::UI::Popups::IUICommandInvokedHandler impl_ICoreWindowFlyout<T>::BackButtonCommand() const
{
	Windows::UI::Popups::IUICommandInvokedHandler value = {};
	check(shim()->get_BackButtonCommand(put(value)));
	return value;
}

template <typename T> void impl_ICoreWindowFlyout<T>::BackButtonCommand(Windows::UI::Popups::IUICommandInvokedHandler const & value) const
{
	check(shim()->put_BackButtonCommand(get(value)));
}

template <typename T> template <typename F> void impl_ICoreWindowFlyout<T>::BackButtonCommand(F value) const
{
	BackButtonCommand(Windows::UI::Popups::UICommandInvokedHandler(value));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_ICoreWindowFlyout<T>::ShowAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> asyncInfo;
	check(shim()->abi_ShowAsync(put(asyncInfo)));
	return asyncInfo;
}

template <typename T> Windows::UI::Core::CoreWindowFlyout impl_ICoreWindowFlyoutFactory<T>::Create(Windows::Foundation::Point const & position) const
{
	Windows::UI::Core::CoreWindowFlyout coreWindowFlyout = nullptr;
	check(shim()->abi_Create(position, put(coreWindowFlyout)));
	return coreWindowFlyout;
}

template <typename T> Windows::UI::Core::CoreWindowFlyout impl_ICoreWindowFlyoutFactory<T>::CreateWithTitle(Windows::Foundation::Point const & position, StringReference const & title) const
{
	Windows::UI::Core::CoreWindowFlyout coreWindowFlyout = nullptr;
	check(shim()->abi_CreateWithTitle(position, get(title), put(coreWindowFlyout)));
	return coreWindowFlyout;
}

template <typename T> long long impl_ISystemNavigationManager<T>::BackRequested(Windows::Foundation::IEventHandler<Windows::UI::Core::BackRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_BackRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISystemNavigationManager<T>::BackRequested(F handler) const
{
	return BackRequested(Windows::Foundation::EventHandler<Windows::UI::Core::BackRequestedEventArgs>(handler));
}

template <typename T> void impl_ISystemNavigationManager<T>::BackRequested(long long const token) const
{
	check(shim()->remove_BackRequested(token));
}

template <typename T> Windows::UI::Core::AppViewBackButtonVisibility impl_ISystemNavigationManager2<T>::AppViewBackButtonVisibility() const
{
	Windows::UI::Core::AppViewBackButtonVisibility value = {};
	check(shim()->get_AppViewBackButtonVisibility(&value));
	return value;
}

template <typename T> void impl_ISystemNavigationManager2<T>::AppViewBackButtonVisibility(Windows::UI::Core::AppViewBackButtonVisibility const value) const
{
	check(shim()->put_AppViewBackButtonVisibility(value));
}

template <typename T> Windows::UI::Core::SystemNavigationManager impl_ISystemNavigationManagerStatics<T>::GetForCurrentView() const
{
	Windows::UI::Core::SystemNavigationManager loader = nullptr;
	check(shim()->abi_GetForCurrentView(put(loader)));
	return loader;
}

template <typename T> bool impl_IBackRequestedEventArgs<T>::Handled() const
{
	bool value = {};
	check(shim()->get_Handled(put(value)));
	return value;
}

template <typename T> void impl_IBackRequestedEventArgs<T>::Handled(bool const value) const
{
	check(shim()->put_Handled(value));
}

template <typename T> Windows::UI::Core::CoreWindow impl_ICoreWindowFactory<T>::CreateCoreWindow(StringReference const & windowTitle) const
{
	Windows::UI::Core::CoreWindow window = nullptr;
	check(shim()->abi_CreateCoreWindow(get(windowTitle), put(window)));
	return window;
}

template <typename T> bool impl_ICoreWindowFactory<T>::WindowReuseAllowed() const
{
	bool value = {};
	check(shim()->get_WindowReuseAllowed(put(value)));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Core { namespace AnimationMetrics {

template <typename T> Windows::UI::Core::AnimationMetrics::PropertyAnimationType impl_IPropertyAnimation<T>::Type() const
{
	Windows::UI::Core::AnimationMetrics::PropertyAnimationType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPropertyAnimation<T>::Delay() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Delay(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IPropertyAnimation<T>::Duration() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_Duration(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IPropertyAnimation<T>::Control1() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_Control1(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IPropertyAnimation<T>::Control2() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_Control2(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<float> impl_IScaleAnimation<T>::InitialScaleX() const
{
	Windows::Foundation::IReference<float> value;
	check(shim()->get_InitialScaleX(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<float> impl_IScaleAnimation<T>::InitialScaleY() const
{
	Windows::Foundation::IReference<float> value;
	check(shim()->get_InitialScaleY(put(value)));
	return value;
}

template <typename T> float impl_IScaleAnimation<T>::FinalScaleX() const
{
	float value = {};
	check(shim()->get_FinalScaleX(&value));
	return value;
}

template <typename T> float impl_IScaleAnimation<T>::FinalScaleY() const
{
	float value = {};
	check(shim()->get_FinalScaleY(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IScaleAnimation<T>::NormalizedOrigin() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_NormalizedOrigin(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<float> impl_IOpacityAnimation<T>::InitialOpacity() const
{
	Windows::Foundation::IReference<float> value;
	check(shim()->get_InitialOpacity(put(value)));
	return value;
}

template <typename T> float impl_IOpacityAnimation<T>::FinalOpacity() const
{
	float value = {};
	check(shim()->get_FinalOpacity(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Core::AnimationMetrics::IPropertyAnimation> impl_IAnimationDescription<T>::Animations() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Core::AnimationMetrics::IPropertyAnimation> value;
	check(shim()->get_Animations(put(value)));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IAnimationDescription<T>::StaggerDelay() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_StaggerDelay(&value));
	return value;
}

template <typename T> float impl_IAnimationDescription<T>::StaggerDelayFactor() const
{
	float value = {};
	check(shim()->get_StaggerDelayFactor(&value));
	return value;
}

template <typename T> Windows::Foundation::TimeSpan impl_IAnimationDescription<T>::DelayLimit() const
{
	Windows::Foundation::TimeSpan value = {};
	check(shim()->get_DelayLimit(&value));
	return value;
}

template <typename T> int impl_IAnimationDescription<T>::ZOrder() const
{
	int value = {};
	check(shim()->get_ZOrder(&value));
	return value;
}

template <typename T> Windows::UI::Core::AnimationMetrics::AnimationDescription impl_IAnimationDescriptionFactory<T>::CreateInstance(Windows::UI::Core::AnimationMetrics::AnimationEffect const effect, Windows::UI::Core::AnimationMetrics::AnimationEffectTarget const target) const
{
	Windows::UI::Core::AnimationMetrics::AnimationDescription animation = nullptr;
	check(shim()->abi_CreateInstance(effect, target, put(animation)));
	return animation;
}

}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input {

template <typename T> Windows::UI::Input::EdgeGestureKind impl_IEdgeGestureEventArgs<T>::Kind() const
{
	Windows::UI::Input::EdgeGestureKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> Windows::UI::Input::EdgeGesture impl_IEdgeGestureStatics<T>::GetForCurrentView() const
{
	Windows::UI::Input::EdgeGesture current = nullptr;
	check(shim()->abi_GetForCurrentView(put(current)));
	return current;
}

template <typename T> long long impl_IEdgeGesture<T>::Starting(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Starting(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IEdgeGesture<T>::Starting(F handler) const
{
	return Starting(Windows::Foundation::TypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs>(handler));
}

template <typename T> void impl_IEdgeGesture<T>::Starting(long long const token) const
{
	check(shim()->remove_Starting(token));
}

template <typename T> long long impl_IEdgeGesture<T>::Completed(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Completed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IEdgeGesture<T>::Completed(F handler) const
{
	return Completed(Windows::Foundation::TypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs>(handler));
}

template <typename T> void impl_IEdgeGesture<T>::Completed(long long const token) const
{
	check(shim()->remove_Completed(token));
}

template <typename T> long long impl_IEdgeGesture<T>::Canceled(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Canceled(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IEdgeGesture<T>::Canceled(F handler) const
{
	return Canceled(Windows::Foundation::TypedEventHandler<Windows::UI::Input::EdgeGesture, Windows::UI::Input::EdgeGestureEventArgs>(handler));
}

template <typename T> void impl_IEdgeGesture<T>::Canceled(long long const token) const
{
	check(shim()->remove_Canceled(token));
}

template <typename T> bool impl_IKeyboardDeliveryInterceptor<T>::IsInterceptionEnabledWhenInForeground() const
{
	bool value = {};
	check(shim()->get_IsInterceptionEnabledWhenInForeground(put(value)));
	return value;
}

template <typename T> void impl_IKeyboardDeliveryInterceptor<T>::IsInterceptionEnabledWhenInForeground(bool const value) const
{
	check(shim()->put_IsInterceptionEnabledWhenInForeground(value));
}

template <typename T> long long impl_IKeyboardDeliveryInterceptor<T>::KeyDown(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::KeyboardDeliveryInterceptor, Windows::UI::Core::KeyEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_KeyDown(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IKeyboardDeliveryInterceptor<T>::KeyDown(F handler) const
{
	return KeyDown(Windows::Foundation::TypedEventHandler<Windows::UI::Input::KeyboardDeliveryInterceptor, Windows::UI::Core::KeyEventArgs>(handler));
}

template <typename T> void impl_IKeyboardDeliveryInterceptor<T>::KeyDown(long long const token) const
{
	check(shim()->remove_KeyDown(token));
}

template <typename T> long long impl_IKeyboardDeliveryInterceptor<T>::KeyUp(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::KeyboardDeliveryInterceptor, Windows::UI::Core::KeyEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_KeyUp(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IKeyboardDeliveryInterceptor<T>::KeyUp(F handler) const
{
	return KeyUp(Windows::Foundation::TypedEventHandler<Windows::UI::Input::KeyboardDeliveryInterceptor, Windows::UI::Core::KeyEventArgs>(handler));
}

template <typename T> void impl_IKeyboardDeliveryInterceptor<T>::KeyUp(long long const token) const
{
	check(shim()->remove_KeyUp(token));
}

template <typename T> Windows::UI::Input::KeyboardDeliveryInterceptor impl_IKeyboardDeliveryInterceptorStatics<T>::GetForCurrentView() const
{
	Windows::UI::Input::KeyboardDeliveryInterceptor keyboardDeliverySettings = nullptr;
	check(shim()->abi_GetForCurrentView(put(keyboardDeliverySettings)));
	return keyboardDeliverySettings;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_ITappedEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_ITappedEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> unsigned impl_ITappedEventArgs<T>::TapCount() const
{
	unsigned value = {};
	check(shim()->get_TapCount(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IRightTappedEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IRightTappedEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IHoldingEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IHoldingEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::HoldingState impl_IHoldingEventArgs<T>::HoldingState() const
{
	Windows::UI::Input::HoldingState value = {};
	check(shim()->get_HoldingState(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IDraggingEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IDraggingEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::DraggingState impl_IDraggingEventArgs<T>::DraggingState() const
{
	Windows::UI::Input::DraggingState value = {};
	check(shim()->get_DraggingState(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IManipulationStartedEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IManipulationStartedEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationStartedEventArgs<T>::Cumulative() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check(shim()->get_Cumulative(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IManipulationUpdatedEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IManipulationUpdatedEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationUpdatedEventArgs<T>::Delta() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check(shim()->get_Delta(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationUpdatedEventArgs<T>::Cumulative() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check(shim()->get_Cumulative(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationVelocities impl_IManipulationUpdatedEventArgs<T>::Velocities() const
{
	Windows::UI::Input::ManipulationVelocities value = {};
	check(shim()->get_Velocities(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IManipulationInertiaStartingEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IManipulationInertiaStartingEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationInertiaStartingEventArgs<T>::Delta() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check(shim()->get_Delta(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationInertiaStartingEventArgs<T>::Cumulative() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check(shim()->get_Cumulative(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationVelocities impl_IManipulationInertiaStartingEventArgs<T>::Velocities() const
{
	Windows::UI::Input::ManipulationVelocities value = {};
	check(shim()->get_Velocities(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_IManipulationCompletedEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IManipulationCompletedEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationDelta impl_IManipulationCompletedEventArgs<T>::Cumulative() const
{
	Windows::UI::Input::ManipulationDelta value = {};
	check(shim()->get_Cumulative(&value));
	return value;
}

template <typename T> Windows::UI::Input::ManipulationVelocities impl_IManipulationCompletedEventArgs<T>::Velocities() const
{
	Windows::UI::Input::ManipulationVelocities value = {};
	check(shim()->get_Velocities(&value));
	return value;
}

template <typename T> Windows::Devices::Input::PointerDeviceType impl_ICrossSlidingEventArgs<T>::PointerDeviceType() const
{
	Windows::Devices::Input::PointerDeviceType value = {};
	check(shim()->get_PointerDeviceType(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_ICrossSlidingEventArgs<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::UI::Input::CrossSlidingState impl_ICrossSlidingEventArgs<T>::CrossSlidingState() const
{
	Windows::UI::Input::CrossSlidingState value = {};
	check(shim()->get_CrossSlidingState(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IMouseWheelParameters<T>::CharTranslation() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_CharTranslation(&value));
	return value;
}

template <typename T> void impl_IMouseWheelParameters<T>::CharTranslation(Windows::Foundation::Point const & value) const
{
	check(shim()->put_CharTranslation(value));
}

template <typename T> float impl_IMouseWheelParameters<T>::DeltaScale() const
{
	float value = {};
	check(shim()->get_DeltaScale(&value));
	return value;
}

template <typename T> void impl_IMouseWheelParameters<T>::DeltaScale(float const value) const
{
	check(shim()->put_DeltaScale(value));
}

template <typename T> float impl_IMouseWheelParameters<T>::DeltaRotationAngle() const
{
	float value = {};
	check(shim()->get_DeltaRotationAngle(&value));
	return value;
}

template <typename T> void impl_IMouseWheelParameters<T>::DeltaRotationAngle(float const value) const
{
	check(shim()->put_DeltaRotationAngle(value));
}

template <typename T> Windows::Foundation::Point impl_IMouseWheelParameters<T>::PageTranslation() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_PageTranslation(&value));
	return value;
}

template <typename T> void impl_IMouseWheelParameters<T>::PageTranslation(Windows::Foundation::Point const & value) const
{
	check(shim()->put_PageTranslation(value));
}

template <typename T> Windows::UI::Input::GestureSettings impl_IGestureRecognizer<T>::GestureSettings() const
{
	Windows::UI::Input::GestureSettings value = {};
	check(shim()->get_GestureSettings(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::GestureSettings(Windows::UI::Input::GestureSettings const value) const
{
	check(shim()->put_GestureSettings(value));
}

template <typename T> bool impl_IGestureRecognizer<T>::IsInertial() const
{
	bool value = {};
	check(shim()->get_IsInertial(put(value)));
	return value;
}

template <typename T> bool impl_IGestureRecognizer<T>::IsActive() const
{
	bool value = {};
	check(shim()->get_IsActive(put(value)));
	return value;
}

template <typename T> bool impl_IGestureRecognizer<T>::ShowGestureFeedback() const
{
	bool value = {};
	check(shim()->get_ShowGestureFeedback(put(value)));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::ShowGestureFeedback(bool const value) const
{
	check(shim()->put_ShowGestureFeedback(value));
}

template <typename T> Windows::Foundation::Point impl_IGestureRecognizer<T>::PivotCenter() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_PivotCenter(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::PivotCenter(Windows::Foundation::Point const & value) const
{
	check(shim()->put_PivotCenter(value));
}

template <typename T> float impl_IGestureRecognizer<T>::PivotRadius() const
{
	float value = {};
	check(shim()->get_PivotRadius(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::PivotRadius(float const value) const
{
	check(shim()->put_PivotRadius(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaTranslationDeceleration() const
{
	float value = {};
	check(shim()->get_InertiaTranslationDeceleration(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaTranslationDeceleration(float const value) const
{
	check(shim()->put_InertiaTranslationDeceleration(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaRotationDeceleration() const
{
	float value = {};
	check(shim()->get_InertiaRotationDeceleration(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaRotationDeceleration(float const value) const
{
	check(shim()->put_InertiaRotationDeceleration(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaExpansionDeceleration() const
{
	float value = {};
	check(shim()->get_InertiaExpansionDeceleration(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaExpansionDeceleration(float const value) const
{
	check(shim()->put_InertiaExpansionDeceleration(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaTranslationDisplacement() const
{
	float value = {};
	check(shim()->get_InertiaTranslationDisplacement(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaTranslationDisplacement(float const value) const
{
	check(shim()->put_InertiaTranslationDisplacement(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaRotationAngle() const
{
	float value = {};
	check(shim()->get_InertiaRotationAngle(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaRotationAngle(float const value) const
{
	check(shim()->put_InertiaRotationAngle(value));
}

template <typename T> float impl_IGestureRecognizer<T>::InertiaExpansion() const
{
	float value = {};
	check(shim()->get_InertiaExpansion(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::InertiaExpansion(float const value) const
{
	check(shim()->put_InertiaExpansion(value));
}

template <typename T> bool impl_IGestureRecognizer<T>::ManipulationExact() const
{
	bool value = {};
	check(shim()->get_ManipulationExact(put(value)));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::ManipulationExact(bool const value) const
{
	check(shim()->put_ManipulationExact(value));
}

template <typename T> Windows::UI::Input::CrossSlideThresholds impl_IGestureRecognizer<T>::CrossSlideThresholds() const
{
	Windows::UI::Input::CrossSlideThresholds value = {};
	check(shim()->get_CrossSlideThresholds(&value));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::CrossSlideThresholds(Windows::UI::Input::CrossSlideThresholds const & value) const
{
	check(shim()->put_CrossSlideThresholds(value));
}

template <typename T> bool impl_IGestureRecognizer<T>::CrossSlideHorizontally() const
{
	bool value = {};
	check(shim()->get_CrossSlideHorizontally(put(value)));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::CrossSlideHorizontally(bool const value) const
{
	check(shim()->put_CrossSlideHorizontally(value));
}

template <typename T> bool impl_IGestureRecognizer<T>::CrossSlideExact() const
{
	bool value = {};
	check(shim()->get_CrossSlideExact(put(value)));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::CrossSlideExact(bool const value) const
{
	check(shim()->put_CrossSlideExact(value));
}

template <typename T> bool impl_IGestureRecognizer<T>::AutoProcessInertia() const
{
	bool value = {};
	check(shim()->get_AutoProcessInertia(put(value)));
	return value;
}

template <typename T> void impl_IGestureRecognizer<T>::AutoProcessInertia(bool const value) const
{
	check(shim()->put_AutoProcessInertia(value));
}

template <typename T> Windows::UI::Input::MouseWheelParameters impl_IGestureRecognizer<T>::MouseWheelParameters() const
{
	Windows::UI::Input::MouseWheelParameters value = nullptr;
	check(shim()->get_MouseWheelParameters(put(value)));
	return value;
}

template <typename T> bool impl_IGestureRecognizer<T>::CanBeDoubleTap(Windows::UI::Input::PointerPoint const & value) const
{
	bool canBeDoubleTap = {};
	check(shim()->abi_CanBeDoubleTap(get(value), put(canBeDoubleTap)));
	return canBeDoubleTap;
}

template <typename T> void impl_IGestureRecognizer<T>::ProcessDownEvent(Windows::UI::Input::PointerPoint const & value) const
{
	check(shim()->abi_ProcessDownEvent(get(value)));
}

template <typename T> void impl_IGestureRecognizer<T>::ProcessMoveEvents(Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> const & value) const
{
	check(shim()->abi_ProcessMoveEvents(get(value)));
}

template <typename T> void impl_IGestureRecognizer<T>::ProcessUpEvent(Windows::UI::Input::PointerPoint const & value) const
{
	check(shim()->abi_ProcessUpEvent(get(value)));
}

template <typename T> void impl_IGestureRecognizer<T>::ProcessMouseWheelEvent(Windows::UI::Input::PointerPoint const & value, bool const isShiftKeyDown, bool const isControlKeyDown) const
{
	check(shim()->abi_ProcessMouseWheelEvent(get(value), isShiftKeyDown, isControlKeyDown));
}

template <typename T> void impl_IGestureRecognizer<T>::ProcessInertia() const
{
	check(shim()->abi_ProcessInertia());
}

template <typename T> void impl_IGestureRecognizer<T>::CompleteGesture() const
{
	check(shim()->abi_CompleteGesture());
}

template <typename T> long long impl_IGestureRecognizer<T>::Tapped(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::TappedEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_Tapped(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::Tapped(F handler) const
{
	return Tapped(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::TappedEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::Tapped(long long const cookie) const
{
	check(shim()->remove_Tapped(cookie));
}

template <typename T> long long impl_IGestureRecognizer<T>::RightTapped(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::RightTappedEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_RightTapped(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::RightTapped(F handler) const
{
	return RightTapped(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::RightTappedEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::RightTapped(long long const cookie) const
{
	check(shim()->remove_RightTapped(cookie));
}

template <typename T> long long impl_IGestureRecognizer<T>::Holding(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::HoldingEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_Holding(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::Holding(F handler) const
{
	return Holding(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::HoldingEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::Holding(long long const cookie) const
{
	check(shim()->remove_Holding(cookie));
}

template <typename T> long long impl_IGestureRecognizer<T>::Dragging(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::DraggingEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_Dragging(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::Dragging(F handler) const
{
	return Dragging(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::DraggingEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::Dragging(long long const cookie) const
{
	check(shim()->remove_Dragging(cookie));
}

template <typename T> long long impl_IGestureRecognizer<T>::ManipulationStarted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationStartedEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_ManipulationStarted(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::ManipulationStarted(F handler) const
{
	return ManipulationStarted(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationStartedEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::ManipulationStarted(long long const cookie) const
{
	check(shim()->remove_ManipulationStarted(cookie));
}

template <typename T> long long impl_IGestureRecognizer<T>::ManipulationUpdated(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationUpdatedEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_ManipulationUpdated(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::ManipulationUpdated(F handler) const
{
	return ManipulationUpdated(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationUpdatedEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::ManipulationUpdated(long long const cookie) const
{
	check(shim()->remove_ManipulationUpdated(cookie));
}

template <typename T> long long impl_IGestureRecognizer<T>::ManipulationInertiaStarting(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationInertiaStartingEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_ManipulationInertiaStarting(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::ManipulationInertiaStarting(F handler) const
{
	return ManipulationInertiaStarting(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationInertiaStartingEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::ManipulationInertiaStarting(long long const cookie) const
{
	check(shim()->remove_ManipulationInertiaStarting(cookie));
}

template <typename T> long long impl_IGestureRecognizer<T>::ManipulationCompleted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationCompletedEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_ManipulationCompleted(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::ManipulationCompleted(F handler) const
{
	return ManipulationCompleted(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::ManipulationCompletedEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::ManipulationCompleted(long long const cookie) const
{
	check(shim()->remove_ManipulationCompleted(cookie));
}

template <typename T> long long impl_IGestureRecognizer<T>::CrossSliding(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::CrossSlidingEventArgs> const & handler) const
{
	long long pCookie = {};
	check(shim()->add_CrossSliding(get(handler), &pCookie));
	return pCookie;
}

template <typename T> template <typename F> long long impl_IGestureRecognizer<T>::CrossSliding(F handler) const
{
	return CrossSliding(Windows::Foundation::TypedEventHandler<Windows::UI::Input::GestureRecognizer, Windows::UI::Input::CrossSlidingEventArgs>(handler));
}

template <typename T> void impl_IGestureRecognizer<T>::CrossSliding(long long const cookie) const
{
	check(shim()->remove_CrossSliding(cookie));
}

template <typename T> Windows::UI::Input::PointerPoint impl_IPointerPointStatics<T>::GetCurrentPoint(unsigned const pointerId) const
{
	Windows::UI::Input::PointerPoint pointerPoint = nullptr;
	check(shim()->abi_GetCurrentPoint(pointerId, put(pointerPoint)));
	return pointerPoint;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> impl_IPointerPointStatics<T>::GetIntermediatePoints(unsigned const pointerId) const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> pointerPoints;
	check(shim()->abi_GetIntermediatePoints(pointerId, put(pointerPoints)));
	return pointerPoints;
}

template <typename T> Windows::UI::Input::PointerPoint impl_IPointerPointStatics<T>::GetCurrentPoint(unsigned const pointerId, Windows::UI::Input::IPointerPointTransform const & transform) const
{
	Windows::UI::Input::PointerPoint pointerPoint = nullptr;
	check(shim()->abi_GetCurrentPointTransformed(pointerId, get(transform), put(pointerPoint)));
	return pointerPoint;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> impl_IPointerPointStatics<T>::GetIntermediatePoints(unsigned const pointerId, Windows::UI::Input::IPointerPointTransform const & transform) const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> pointerPoints;
	check(shim()->abi_GetIntermediatePointsTransformed(pointerId, get(transform), put(pointerPoints)));
	return pointerPoints;
}

template <typename T> Windows::UI::Input::IPointerPointTransform impl_IPointerPointTransform<T>::Inverse() const
{
	Windows::UI::Input::IPointerPointTransform value;
	check(shim()->get_Inverse(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointTransform<T>::TryTransform(Windows::Foundation::Point const & inPoint, Windows::Foundation::Point & outPoint) const
{
	bool returnValue = {};
	check(shim()->abi_TryTransform(inPoint, &outPoint, put(returnValue)));
	return returnValue;
}

template <typename T> Windows::Foundation::Rect impl_IPointerPointTransform<T>::TransformBounds(Windows::Foundation::Rect const & rect) const
{
	Windows::Foundation::Rect returnValue = {};
	check(shim()->abi_TransformBounds(rect, &returnValue));
	return returnValue;
}

template <typename T> Windows::Devices::Input::PointerDevice impl_IPointerPoint<T>::PointerDevice() const
{
	Windows::Devices::Input::PointerDevice value = nullptr;
	check(shim()->get_PointerDevice(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IPointerPoint<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IPointerPoint<T>::RawPosition() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_RawPosition(&value));
	return value;
}

template <typename T> unsigned impl_IPointerPoint<T>::PointerId() const
{
	unsigned value = {};
	check(shim()->get_PointerId(&value));
	return value;
}

template <typename T> unsigned impl_IPointerPoint<T>::FrameId() const
{
	unsigned value = {};
	check(shim()->get_FrameId(&value));
	return value;
}

template <typename T> unsigned long long impl_IPointerPoint<T>::Timestamp() const
{
	unsigned long long value = {};
	check(shim()->get_Timestamp(&value));
	return value;
}

template <typename T> bool impl_IPointerPoint<T>::IsInContact() const
{
	bool value = {};
	check(shim()->get_IsInContact(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::PointerPointProperties impl_IPointerPoint<T>::Properties() const
{
	Windows::UI::Input::PointerPointProperties value = nullptr;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> float impl_IPointerPointProperties<T>::Pressure() const
{
	float value = {};
	check(shim()->get_Pressure(&value));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsInverted() const
{
	bool value = {};
	check(shim()->get_IsInverted(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsEraser() const
{
	bool value = {};
	check(shim()->get_IsEraser(put(value)));
	return value;
}

template <typename T> float impl_IPointerPointProperties<T>::Orientation() const
{
	float value = {};
	check(shim()->get_Orientation(&value));
	return value;
}

template <typename T> float impl_IPointerPointProperties<T>::XTilt() const
{
	float value = {};
	check(shim()->get_XTilt(&value));
	return value;
}

template <typename T> float impl_IPointerPointProperties<T>::YTilt() const
{
	float value = {};
	check(shim()->get_YTilt(&value));
	return value;
}

template <typename T> float impl_IPointerPointProperties<T>::Twist() const
{
	float value = {};
	check(shim()->get_Twist(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPointerPointProperties<T>::ContactRect() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_ContactRect(&value));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IPointerPointProperties<T>::ContactRectRaw() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_ContactRectRaw(&value));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::TouchConfidence() const
{
	bool value = {};
	check(shim()->get_TouchConfidence(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsLeftButtonPressed() const
{
	bool value = {};
	check(shim()->get_IsLeftButtonPressed(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsRightButtonPressed() const
{
	bool value = {};
	check(shim()->get_IsRightButtonPressed(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsMiddleButtonPressed() const
{
	bool value = {};
	check(shim()->get_IsMiddleButtonPressed(put(value)));
	return value;
}

template <typename T> int impl_IPointerPointProperties<T>::MouseWheelDelta() const
{
	int value = {};
	check(shim()->get_MouseWheelDelta(&value));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsHorizontalMouseWheel() const
{
	bool value = {};
	check(shim()->get_IsHorizontalMouseWheel(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsPrimary() const
{
	bool value = {};
	check(shim()->get_IsPrimary(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsInRange() const
{
	bool value = {};
	check(shim()->get_IsInRange(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsCanceled() const
{
	bool value = {};
	check(shim()->get_IsCanceled(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsBarrelButtonPressed() const
{
	bool value = {};
	check(shim()->get_IsBarrelButtonPressed(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsXButton1Pressed() const
{
	bool value = {};
	check(shim()->get_IsXButton1Pressed(put(value)));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::IsXButton2Pressed() const
{
	bool value = {};
	check(shim()->get_IsXButton2Pressed(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::PointerUpdateKind impl_IPointerPointProperties<T>::PointerUpdateKind() const
{
	Windows::UI::Input::PointerUpdateKind value = {};
	check(shim()->get_PointerUpdateKind(&value));
	return value;
}

template <typename T> bool impl_IPointerPointProperties<T>::HasUsage(unsigned const usagePage, unsigned const usageId) const
{
	bool value = {};
	check(shim()->abi_HasUsage(usagePage, usageId, put(value)));
	return value;
}

template <typename T> int impl_IPointerPointProperties<T>::GetUsageValue(unsigned const usagePage, unsigned const usageId) const
{
	int value = {};
	check(shim()->abi_GetUsageValue(usagePage, usageId, &value));
	return value;
}

template <typename T> void impl_IPointerVisualizationSettings<T>::IsContactFeedbackEnabled(bool const value) const
{
	check(shim()->put_IsContactFeedbackEnabled(value));
}

template <typename T> bool impl_IPointerVisualizationSettings<T>::IsContactFeedbackEnabled() const
{
	bool value = {};
	check(shim()->get_IsContactFeedbackEnabled(put(value)));
	return value;
}

template <typename T> void impl_IPointerVisualizationSettings<T>::IsBarrelButtonFeedbackEnabled(bool const value) const
{
	check(shim()->put_IsBarrelButtonFeedbackEnabled(value));
}

template <typename T> bool impl_IPointerVisualizationSettings<T>::IsBarrelButtonFeedbackEnabled() const
{
	bool value = {};
	check(shim()->get_IsBarrelButtonFeedbackEnabled(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::PointerVisualizationSettings impl_IPointerVisualizationSettingsStatics<T>::GetForCurrentView() const
{
	Windows::UI::Input::PointerVisualizationSettings visualizationSettings = nullptr;
	check(shim()->abi_GetForCurrentView(put(visualizationSettings)));
	return visualizationSettings;
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Inking {

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> impl_IInkStrokesCollectedEventArgs<T>::Strokes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> value;
	check(shim()->get_Strokes(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> impl_IInkStrokesErasedEventArgs<T>::Strokes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> value;
	check(shim()->get_Strokes(put(value)));
	return value;
}

template <typename T> bool impl_IInkPresenter<T>::IsInputEnabled() const
{
	bool value = {};
	check(shim()->get_IsInputEnabled(put(value)));
	return value;
}

template <typename T> void impl_IInkPresenter<T>::IsInputEnabled(bool const value) const
{
	check(shim()->put_IsInputEnabled(value));
}

template <typename T> Windows::UI::Core::CoreInputDeviceTypes impl_IInkPresenter<T>::InputDeviceTypes() const
{
	Windows::UI::Core::CoreInputDeviceTypes value = {};
	check(shim()->get_InputDeviceTypes(&value));
	return value;
}

template <typename T> void impl_IInkPresenter<T>::InputDeviceTypes(Windows::UI::Core::CoreInputDeviceTypes const value) const
{
	check(shim()->put_InputDeviceTypes(value));
}

template <typename T> Windows::UI::Input::Inking::InkUnprocessedInput impl_IInkPresenter<T>::UnprocessedInput() const
{
	Windows::UI::Input::Inking::InkUnprocessedInput value = nullptr;
	check(shim()->get_UnprocessedInput(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Inking::InkStrokeInput impl_IInkPresenter<T>::StrokeInput() const
{
	Windows::UI::Input::Inking::InkStrokeInput value = nullptr;
	check(shim()->get_StrokeInput(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Inking::InkInputProcessingConfiguration impl_IInkPresenter<T>::InputProcessingConfiguration() const
{
	Windows::UI::Input::Inking::InkInputProcessingConfiguration value = nullptr;
	check(shim()->get_InputProcessingConfiguration(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Inking::InkStrokeContainer impl_IInkPresenter<T>::StrokeContainer() const
{
	Windows::UI::Input::Inking::InkStrokeContainer value = nullptr;
	check(shim()->get_StrokeContainer(put(value)));
	return value;
}

template <typename T> void impl_IInkPresenter<T>::StrokeContainer(Windows::UI::Input::Inking::InkStrokeContainer const & value) const
{
	check(shim()->put_StrokeContainer(get(value)));
}

template <typename T> Windows::UI::Input::Inking::InkDrawingAttributes impl_IInkPresenter<T>::CopyDefaultDrawingAttributes() const
{
	Windows::UI::Input::Inking::InkDrawingAttributes value = nullptr;
	check(shim()->abi_CopyDefaultDrawingAttributes(put(value)));
	return value;
}

template <typename T> void impl_IInkPresenter<T>::UpdateDefaultDrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & value) const
{
	check(shim()->abi_UpdateDefaultDrawingAttributes(get(value)));
}

template <typename T> Windows::UI::Input::Inking::InkSynchronizer impl_IInkPresenter<T>::ActivateCustomDrying() const
{
	Windows::UI::Input::Inking::InkSynchronizer inkSynchronizer = nullptr;
	check(shim()->abi_ActivateCustomDrying(put(inkSynchronizer)));
	return inkSynchronizer;
}

template <typename T> void impl_IInkPresenter<T>::SetPredefinedConfiguration(Windows::UI::Input::Inking::InkPresenterPredefinedConfiguration const value) const
{
	check(shim()->abi_SetPredefinedConfiguration(value));
}

template <typename T> long long impl_IInkPresenter<T>::StrokesCollected(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkPresenter, Windows::UI::Input::Inking::InkStrokesCollectedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_StrokesCollected(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkPresenter<T>::StrokesCollected(F handler) const
{
	return StrokesCollected(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkPresenter, Windows::UI::Input::Inking::InkStrokesCollectedEventArgs>(handler));
}

template <typename T> void impl_IInkPresenter<T>::StrokesCollected(long long const cookie) const
{
	check(shim()->remove_StrokesCollected(cookie));
}

template <typename T> long long impl_IInkPresenter<T>::StrokesErased(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkPresenter, Windows::UI::Input::Inking::InkStrokesErasedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_StrokesErased(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkPresenter<T>::StrokesErased(F handler) const
{
	return StrokesErased(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkPresenter, Windows::UI::Input::Inking::InkStrokesErasedEventArgs>(handler));
}

template <typename T> void impl_IInkPresenter<T>::StrokesErased(long long const cookie) const
{
	check(shim()->remove_StrokesErased(cookie));
}

template <typename T> Windows::UI::Input::Inking::InkInputProcessingMode impl_IInkInputProcessingConfiguration<T>::Mode() const
{
	Windows::UI::Input::Inking::InkInputProcessingMode value = {};
	check(shim()->get_Mode(&value));
	return value;
}

template <typename T> void impl_IInkInputProcessingConfiguration<T>::Mode(Windows::UI::Input::Inking::InkInputProcessingMode const value) const
{
	check(shim()->put_Mode(value));
}

template <typename T> Windows::UI::Input::Inking::InkInputRightDragAction impl_IInkInputProcessingConfiguration<T>::RightDragAction() const
{
	Windows::UI::Input::Inking::InkInputRightDragAction value = {};
	check(shim()->get_RightDragAction(&value));
	return value;
}

template <typename T> void impl_IInkInputProcessingConfiguration<T>::RightDragAction(Windows::UI::Input::Inking::InkInputRightDragAction const value) const
{
	check(shim()->put_RightDragAction(value));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> impl_IInkSynchronizer<T>::BeginDry() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> inkStrokes;
	check(shim()->abi_BeginDry(put(inkStrokes)));
	return inkStrokes;
}

template <typename T> void impl_IInkSynchronizer<T>::EndDry() const
{
	check(shim()->abi_EndDry());
}

template <typename T> long long impl_IInkUnprocessedInput<T>::PointerEntered(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerEntered(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkUnprocessedInput<T>::PointerEntered(F handler) const
{
	return PointerEntered(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkUnprocessedInput<T>::PointerEntered(long long const cookie) const
{
	check(shim()->remove_PointerEntered(cookie));
}

template <typename T> long long impl_IInkUnprocessedInput<T>::PointerHovered(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerHovered(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkUnprocessedInput<T>::PointerHovered(F handler) const
{
	return PointerHovered(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkUnprocessedInput<T>::PointerHovered(long long const cookie) const
{
	check(shim()->remove_PointerHovered(cookie));
}

template <typename T> long long impl_IInkUnprocessedInput<T>::PointerExited(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerExited(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkUnprocessedInput<T>::PointerExited(F handler) const
{
	return PointerExited(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkUnprocessedInput<T>::PointerExited(long long const cookie) const
{
	check(shim()->remove_PointerExited(cookie));
}

template <typename T> long long impl_IInkUnprocessedInput<T>::PointerPressed(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerPressed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkUnprocessedInput<T>::PointerPressed(F handler) const
{
	return PointerPressed(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkUnprocessedInput<T>::PointerPressed(long long const cookie) const
{
	check(shim()->remove_PointerPressed(cookie));
}

template <typename T> long long impl_IInkUnprocessedInput<T>::PointerMoved(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerMoved(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkUnprocessedInput<T>::PointerMoved(F handler) const
{
	return PointerMoved(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkUnprocessedInput<T>::PointerMoved(long long const cookie) const
{
	check(shim()->remove_PointerMoved(cookie));
}

template <typename T> long long impl_IInkUnprocessedInput<T>::PointerReleased(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerReleased(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkUnprocessedInput<T>::PointerReleased(F handler) const
{
	return PointerReleased(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkUnprocessedInput<T>::PointerReleased(long long const cookie) const
{
	check(shim()->remove_PointerReleased(cookie));
}

template <typename T> long long impl_IInkUnprocessedInput<T>::PointerLost(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerLost(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkUnprocessedInput<T>::PointerLost(F handler) const
{
	return PointerLost(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkUnprocessedInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkUnprocessedInput<T>::PointerLost(long long const cookie) const
{
	check(shim()->remove_PointerLost(cookie));
}

template <typename T> Windows::UI::Input::Inking::InkPresenter impl_IInkUnprocessedInput<T>::InkPresenter() const
{
	Windows::UI::Input::Inking::InkPresenter value = nullptr;
	check(shim()->get_InkPresenter(put(value)));
	return value;
}

template <typename T> long long impl_IInkStrokeInput<T>::StrokeStarted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_StrokeStarted(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkStrokeInput<T>::StrokeStarted(F handler) const
{
	return StrokeStarted(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkStrokeInput<T>::StrokeStarted(long long const cookie) const
{
	check(shim()->remove_StrokeStarted(cookie));
}

template <typename T> long long impl_IInkStrokeInput<T>::StrokeContinued(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_StrokeContinued(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkStrokeInput<T>::StrokeContinued(F handler) const
{
	return StrokeContinued(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkStrokeInput<T>::StrokeContinued(long long const cookie) const
{
	check(shim()->remove_StrokeContinued(cookie));
}

template <typename T> long long impl_IInkStrokeInput<T>::StrokeEnded(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_StrokeEnded(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkStrokeInput<T>::StrokeEnded(F handler) const
{
	return StrokeEnded(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkStrokeInput<T>::StrokeEnded(long long const cookie) const
{
	check(shim()->remove_StrokeEnded(cookie));
}

template <typename T> long long impl_IInkStrokeInput<T>::StrokeCanceled(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_StrokeCanceled(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IInkStrokeInput<T>::StrokeCanceled(F handler) const
{
	return StrokeCanceled(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::InkStrokeInput, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_IInkStrokeInput<T>::StrokeCanceled(long long const cookie) const
{
	check(shim()->remove_StrokeCanceled(cookie));
}

template <typename T> Windows::UI::Input::Inking::InkPresenter impl_IInkStrokeInput<T>::InkPresenter() const
{
	Windows::UI::Input::Inking::InkPresenter value = nullptr;
	check(shim()->get_InkPresenter(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IInkPoint<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> float impl_IInkPoint<T>::Pressure() const
{
	float value = {};
	check(shim()->get_Pressure(&value));
	return value;
}

template <typename T> Windows::UI::Input::Inking::InkPoint impl_IInkPointFactory<T>::CreateInkPoint(Windows::Foundation::Point const & position, float const pressure) const
{
	Windows::UI::Input::Inking::InkPoint result = nullptr;
	check(shim()->abi_CreateInkPoint(position, pressure, put(result)));
	return result;
}

template <typename T> Windows::UI::Color impl_IInkDrawingAttributes<T>::Color() const
{
	Windows::UI::Color value = {};
	check(shim()->get_Color(&value));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes<T>::Color(Windows::UI::Color const & value) const
{
	check(shim()->put_Color(value));
}

template <typename T> Windows::UI::Input::Inking::PenTipShape impl_IInkDrawingAttributes<T>::PenTip() const
{
	Windows::UI::Input::Inking::PenTipShape value = {};
	check(shim()->get_PenTip(&value));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes<T>::PenTip(Windows::UI::Input::Inking::PenTipShape const value) const
{
	check(shim()->put_PenTip(value));
}

template <typename T> Windows::Foundation::Size impl_IInkDrawingAttributes<T>::Size() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_Size(&value));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes<T>::Size(Windows::Foundation::Size const & value) const
{
	check(shim()->put_Size(value));
}

template <typename T> bool impl_IInkDrawingAttributes<T>::IgnorePressure() const
{
	bool value = {};
	check(shim()->get_IgnorePressure(put(value)));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes<T>::IgnorePressure(bool const value) const
{
	check(shim()->put_IgnorePressure(value));
}

template <typename T> bool impl_IInkDrawingAttributes<T>::FitToCurve() const
{
	bool value = {};
	check(shim()->get_FitToCurve(put(value)));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes<T>::FitToCurve(bool const value) const
{
	check(shim()->put_FitToCurve(value));
}

template <typename T> Windows::Foundation::Numerics::Matrix3x2 impl_IInkDrawingAttributes2<T>::PenTipTransform() const
{
	Windows::Foundation::Numerics::Matrix3x2 value = {};
	check(shim()->get_PenTipTransform(&value));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes2<T>::PenTipTransform(Windows::Foundation::Numerics::Matrix3x2 const & value) const
{
	check(shim()->put_PenTipTransform(value));
}

template <typename T> bool impl_IInkDrawingAttributes2<T>::DrawAsHighlighter() const
{
	bool value = {};
	check(shim()->get_DrawAsHighlighter(put(value)));
	return value;
}

template <typename T> void impl_IInkDrawingAttributes2<T>::DrawAsHighlighter(bool const value) const
{
	check(shim()->put_DrawAsHighlighter(value));
}

template <typename T> Windows::Foundation::Point impl_IInkStrokeRenderingSegment<T>::Position() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IInkStrokeRenderingSegment<T>::BezierControlPoint1() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_BezierControlPoint1(&value));
	return value;
}

template <typename T> Windows::Foundation::Point impl_IInkStrokeRenderingSegment<T>::BezierControlPoint2() const
{
	Windows::Foundation::Point value = {};
	check(shim()->get_BezierControlPoint2(&value));
	return value;
}

template <typename T> float impl_IInkStrokeRenderingSegment<T>::Pressure() const
{
	float value = {};
	check(shim()->get_Pressure(&value));
	return value;
}

template <typename T> float impl_IInkStrokeRenderingSegment<T>::TiltX() const
{
	float value = {};
	check(shim()->get_TiltX(&value));
	return value;
}

template <typename T> float impl_IInkStrokeRenderingSegment<T>::TiltY() const
{
	float value = {};
	check(shim()->get_TiltY(&value));
	return value;
}

template <typename T> float impl_IInkStrokeRenderingSegment<T>::Twist() const
{
	float value = {};
	check(shim()->get_Twist(&value));
	return value;
}

template <typename T> Windows::UI::Input::Inking::InkDrawingAttributes impl_IInkStroke<T>::DrawingAttributes() const
{
	Windows::UI::Input::Inking::InkDrawingAttributes value = nullptr;
	check(shim()->get_DrawingAttributes(put(value)));
	return value;
}

template <typename T> void impl_IInkStroke<T>::DrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & value) const
{
	check(shim()->put_DrawingAttributes(get(value)));
}

template <typename T> Windows::Foundation::Rect impl_IInkStroke<T>::BoundingRect() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_BoundingRect(&value));
	return value;
}

template <typename T> bool impl_IInkStroke<T>::Selected() const
{
	bool value = {};
	check(shim()->get_Selected(put(value)));
	return value;
}

template <typename T> void impl_IInkStroke<T>::Selected(bool const value) const
{
	check(shim()->put_Selected(value));
}

template <typename T> bool impl_IInkStroke<T>::Recognized() const
{
	bool value = {};
	check(shim()->get_Recognized(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStrokeRenderingSegment> impl_IInkStroke<T>::GetRenderingSegments() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStrokeRenderingSegment> renderingSegments;
	check(shim()->abi_GetRenderingSegments(put(renderingSegments)));
	return renderingSegments;
}

template <typename T> Windows::UI::Input::Inking::InkStroke impl_IInkStroke<T>::Clone() const
{
	Windows::UI::Input::Inking::InkStroke clonedStroke = nullptr;
	check(shim()->abi_Clone(put(clonedStroke)));
	return clonedStroke;
}

template <typename T> Windows::Foundation::Numerics::Matrix3x2 impl_IInkStroke2<T>::PointTransform() const
{
	Windows::Foundation::Numerics::Matrix3x2 value = {};
	check(shim()->get_PointTransform(&value));
	return value;
}

template <typename T> void impl_IInkStroke2<T>::PointTransform(Windows::Foundation::Numerics::Matrix3x2 const & value) const
{
	check(shim()->put_PointTransform(value));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkPoint> impl_IInkStroke2<T>::GetInkPoints() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkPoint> inkPoints;
	check(shim()->abi_GetInkPoints(put(inkPoints)));
	return inkPoints;
}

template <typename T> void impl_IInkStrokeBuilder<T>::BeginStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	check(shim()->abi_BeginStroke(get(pointerPoint)));
}

template <typename T> Windows::UI::Input::PointerPoint impl_IInkStrokeBuilder<T>::AppendToStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	Windows::UI::Input::PointerPoint previousPointerPoint = nullptr;
	check(shim()->abi_AppendToStroke(get(pointerPoint), put(previousPointerPoint)));
	return previousPointerPoint;
}

template <typename T> Windows::UI::Input::Inking::InkStroke impl_IInkStrokeBuilder<T>::EndStroke(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	Windows::UI::Input::Inking::InkStroke stroke = nullptr;
	check(shim()->abi_EndStroke(get(pointerPoint), put(stroke)));
	return stroke;
}

template <typename T> Windows::UI::Input::Inking::InkStroke impl_IInkStrokeBuilder<T>::CreateStroke(Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Point> const & points) const
{
	Windows::UI::Input::Inking::InkStroke stroke = nullptr;
	check(shim()->abi_CreateStroke(get(points), put(stroke)));
	return stroke;
}

template <typename T> void impl_IInkStrokeBuilder<T>::SetDefaultDrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & drawingAttributes) const
{
	check(shim()->abi_SetDefaultDrawingAttributes(get(drawingAttributes)));
}

template <typename T> Windows::UI::Input::Inking::InkStroke impl_IInkStrokeBuilder2<T>::CreateStrokeFromInkPoints(Windows::Foundation::Collections::IIterable<Windows::UI::Input::Inking::InkPoint> const & inkPoints, Windows::Foundation::Numerics::Matrix3x2 const & transform) const
{
	Windows::UI::Input::Inking::InkStroke result = nullptr;
	check(shim()->abi_CreateStrokeFromInkPoints(get(inkPoints), transform, put(result)));
	return result;
}

template <typename T> Windows::Foundation::Rect impl_IInkRecognitionResult<T>::BoundingRect() const
{
	Windows::Foundation::Rect boundingRect = {};
	check(shim()->get_BoundingRect(&boundingRect));
	return boundingRect;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IInkRecognitionResult<T>::GetTextCandidates() const
{
	Windows::Foundation::Collections::IVectorView<String> textCandidates;
	check(shim()->abi_GetTextCandidates(put(textCandidates)));
	return textCandidates;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> impl_IInkRecognitionResult<T>::GetStrokes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> strokes;
	check(shim()->abi_GetStrokes(put(strokes)));
	return strokes;
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::BoundingRect() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_BoundingRect(&value));
	return value;
}

template <typename T> void impl_IInkStrokeContainer<T>::AddStroke(Windows::UI::Input::Inking::InkStroke const & stroke) const
{
	check(shim()->abi_AddStroke(get(stroke)));
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::DeleteSelected() const
{
	Windows::Foundation::Rect invalidatedRect = {};
	check(shim()->abi_DeleteSelected(&invalidatedRect));
	return invalidatedRect;
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::MoveSelected(Windows::Foundation::Point const & translation) const
{
	Windows::Foundation::Rect invalidatedRectangle = {};
	check(shim()->abi_MoveSelected(translation, &invalidatedRectangle));
	return invalidatedRectangle;
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::SelectWithPolyLine(Windows::Foundation::Collections::IIterable<winrt::Windows::Foundation::Point> const & polyline) const
{
	Windows::Foundation::Rect invalidatedRectangle = {};
	check(shim()->abi_SelectWithPolyLine(get(polyline), &invalidatedRectangle));
	return invalidatedRectangle;
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::SelectWithLine(Windows::Foundation::Point const & from, Windows::Foundation::Point const & to) const
{
	Windows::Foundation::Rect invalidatedRectangle = {};
	check(shim()->abi_SelectWithLine(from, to, &invalidatedRectangle));
	return invalidatedRectangle;
}

template <typename T> void impl_IInkStrokeContainer<T>::CopySelectedToClipboard() const
{
	check(shim()->abi_CopySelectedToClipboard());
}

template <typename T> Windows::Foundation::Rect impl_IInkStrokeContainer<T>::PasteFromClipboard(Windows::Foundation::Point const & position) const
{
	Windows::Foundation::Rect invalidatedRectangle = {};
	check(shim()->abi_PasteFromClipboard(position, &invalidatedRectangle));
	return invalidatedRectangle;
}

template <typename T> bool impl_IInkStrokeContainer<T>::CanPasteFromClipboard() const
{
	bool canPaste = {};
	check(shim()->abi_CanPasteFromClipboard(put(canPaste)));
	return canPaste;
}

template <typename T> Windows::Foundation::IAsyncActionWithProgress<unsigned long long> impl_IInkStrokeContainer<T>::LoadAsync(Windows::Storage::Streams::IInputStream const & inputStream) const
{
	Windows::Foundation::IAsyncActionWithProgress<unsigned long long> loadAction;
	check(shim()->abi_LoadAsync(get(inputStream), put(loadAction)));
	return loadAction;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> impl_IInkStrokeContainer<T>::SaveAsync(Windows::Storage::Streams::IOutputStream const & outputStream) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned, unsigned> outputStreamOperation;
	check(shim()->abi_SaveAsync(get(outputStream), put(outputStreamOperation)));
	return outputStreamOperation;
}

template <typename T> void impl_IInkStrokeContainer<T>::UpdateRecognitionResults(Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult> const & recognitionResults) const
{
	check(shim()->abi_UpdateRecognitionResults(get(recognitionResults)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> impl_IInkStrokeContainer<T>::GetStrokes() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkStroke> strokeView;
	check(shim()->abi_GetStrokes(put(strokeView)));
	return strokeView;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult> impl_IInkStrokeContainer<T>::GetRecognitionResults() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult> recognitionResults;
	check(shim()->abi_GetRecognitionResults(put(recognitionResults)));
	return recognitionResults;
}

template <typename T> void impl_IInkStrokeContainer2<T>::AddStrokes(Windows::Foundation::Collections::IIterable<Windows::UI::Input::Inking::InkStroke> const & strokes) const
{
	check(shim()->abi_AddStrokes(get(strokes)));
}

template <typename T> void impl_IInkStrokeContainer2<T>::Clear() const
{
	check(shim()->abi_Clear());
}

template <typename T> String impl_IInkRecognizer<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IInkRecognizerContainer<T>::SetDefaultRecognizer(Windows::UI::Input::Inking::InkRecognizer const & recognizer) const
{
	check(shim()->abi_SetDefaultRecognizer(get(recognizer)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> impl_IInkRecognizerContainer<T>::RecognizeAsync(Windows::UI::Input::Inking::InkStrokeContainer const & strokeCollection, Windows::UI::Input::Inking::InkRecognitionTarget const recognitionTarget) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> recognitionResults;
	check(shim()->abi_RecognizeAsync(get(strokeCollection), recognitionTarget, put(recognitionResults)));
	return recognitionResults;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognizer> impl_IInkRecognizerContainer<T>::GetRecognizers() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognizer> recognizerView;
	check(shim()->abi_GetRecognizers(put(recognizerView)));
	return recognizerView;
}

template <typename T> Windows::UI::Input::Inking::InkManipulationMode impl_IInkManager<T>::Mode() const
{
	Windows::UI::Input::Inking::InkManipulationMode value = {};
	check(shim()->get_Mode(&value));
	return value;
}

template <typename T> void impl_IInkManager<T>::Mode(Windows::UI::Input::Inking::InkManipulationMode const value) const
{
	check(shim()->put_Mode(value));
}

template <typename T> void impl_IInkManager<T>::ProcessPointerDown(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	check(shim()->abi_ProcessPointerDown(get(pointerPoint)));
}

template <typename T> IInspectable impl_IInkManager<T>::ProcessPointerUpdate(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	IInspectable updateInformation;
	check(shim()->abi_ProcessPointerUpdate(get(pointerPoint), put(updateInformation)));
	return updateInformation;
}

template <typename T> Windows::Foundation::Rect impl_IInkManager<T>::ProcessPointerUp(Windows::UI::Input::PointerPoint const & pointerPoint) const
{
	Windows::Foundation::Rect updateRectangle = {};
	check(shim()->abi_ProcessPointerUp(get(pointerPoint), &updateRectangle));
	return updateRectangle;
}

template <typename T> void impl_IInkManager<T>::SetDefaultDrawingAttributes(Windows::UI::Input::Inking::InkDrawingAttributes const & drawingAttributes) const
{
	check(shim()->abi_SetDefaultDrawingAttributes(get(drawingAttributes)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> impl_IInkManager<T>::RecognizeAsync(Windows::UI::Input::Inking::InkRecognitionTarget const recognitionTarget) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Inking::InkRecognitionResult>> recognitionResults;
	check(shim()->abi_RecognizeAsync2(recognitionTarget, put(recognitionResults)));
	return recognitionResults;
}

}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Inking { namespace Core {

template <typename T> long long impl_ICoreInkIndependentInputSource<T>::PointerEntering(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerEntering(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreInkIndependentInputSource<T>::PointerEntering(F handler) const
{
	return PointerEntering(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreInkIndependentInputSource<T>::PointerEntering(long long const cookie) const
{
	check(shim()->remove_PointerEntering(cookie));
}

template <typename T> long long impl_ICoreInkIndependentInputSource<T>::PointerHovering(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerHovering(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreInkIndependentInputSource<T>::PointerHovering(F handler) const
{
	return PointerHovering(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreInkIndependentInputSource<T>::PointerHovering(long long const cookie) const
{
	check(shim()->remove_PointerHovering(cookie));
}

template <typename T> long long impl_ICoreInkIndependentInputSource<T>::PointerExiting(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerExiting(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreInkIndependentInputSource<T>::PointerExiting(F handler) const
{
	return PointerExiting(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreInkIndependentInputSource<T>::PointerExiting(long long const cookie) const
{
	check(shim()->remove_PointerExiting(cookie));
}

template <typename T> long long impl_ICoreInkIndependentInputSource<T>::PointerPressing(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerPressing(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreInkIndependentInputSource<T>::PointerPressing(F handler) const
{
	return PointerPressing(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreInkIndependentInputSource<T>::PointerPressing(long long const cookie) const
{
	check(shim()->remove_PointerPressing(cookie));
}

template <typename T> long long impl_ICoreInkIndependentInputSource<T>::PointerMoving(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerMoving(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreInkIndependentInputSource<T>::PointerMoving(F handler) const
{
	return PointerMoving(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreInkIndependentInputSource<T>::PointerMoving(long long const cookie) const
{
	check(shim()->remove_PointerMoving(cookie));
}

template <typename T> long long impl_ICoreInkIndependentInputSource<T>::PointerReleasing(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerReleasing(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreInkIndependentInputSource<T>::PointerReleasing(F handler) const
{
	return PointerReleasing(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreInkIndependentInputSource<T>::PointerReleasing(long long const cookie) const
{
	check(shim()->remove_PointerReleasing(cookie));
}

template <typename T> long long impl_ICoreInkIndependentInputSource<T>::PointerLost(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_PointerLost(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreInkIndependentInputSource<T>::PointerLost(F handler) const
{
	return PointerLost(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource, Windows::UI::Core::PointerEventArgs>(handler));
}

template <typename T> void impl_ICoreInkIndependentInputSource<T>::PointerLost(long long const cookie) const
{
	check(shim()->remove_PointerLost(cookie));
}

template <typename T> Windows::UI::Input::Inking::InkPresenter impl_ICoreInkIndependentInputSource<T>::InkPresenter() const
{
	Windows::UI::Input::Inking::InkPresenter value = nullptr;
	check(shim()->get_InkPresenter(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource impl_ICoreInkIndependentInputSourceStatics<T>::Create(Windows::UI::Input::Inking::InkPresenter const & inkPresenter) const
{
	Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource inkIndependentInputSource = nullptr;
	check(shim()->abi_Create(get(inkPresenter), put(inkIndependentInputSource)));
	return inkIndependentInputSource;
}

}}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Spatial {

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::Vector3> impl_ISpatialInteractionSourceLocation<T>::Position() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::Vector3> value;
	check(shim()->get_Position(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::Vector3> impl_ISpatialInteractionSourceLocation<T>::Velocity() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::Vector3> value;
	check(shim()->get_Velocity(put(value)));
	return value;
}

template <typename T> unsigned impl_ISpatialInteractionSource<T>::Id() const
{
	unsigned value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceKind impl_ISpatialInteractionSource<T>::Kind() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::Vector3> impl_ISpatialInteractionSourceProperties<T>::TryGetSourceLossMitigationDirection(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::Numerics::Vector3> value;
	check(shim()->abi_TryGetSourceLossMitigationDirection(get(coordinateSystem), put(value)));
	return value;
}

template <typename T> double impl_ISpatialInteractionSourceProperties<T>::SourceLossRisk() const
{
	double value = {};
	check(shim()->get_SourceLossRisk(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceLocation impl_ISpatialInteractionSourceProperties<T>::TryGetLocation(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceLocation value = nullptr;
	check(shim()->abi_TryGetLocation(get(coordinateSystem), put(value)));
	return value;
}

template <typename T> Windows::Perception::PerceptionTimestamp impl_ISpatialPointerPose<T>::Timestamp() const
{
	Windows::Perception::PerceptionTimestamp value = nullptr;
	check(shim()->get_Timestamp(put(value)));
	return value;
}

template <typename T> Windows::Perception::People::HeadPose impl_ISpatialPointerPose<T>::Head() const
{
	Windows::Perception::People::HeadPose value = nullptr;
	check(shim()->get_Head(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialPointerPose impl_ISpatialPointerPoseStatics<T>::TryGetAtTimestamp(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Perception::PerceptionTimestamp const & timestamp) const
{
	Windows::UI::Input::Spatial::SpatialPointerPose value = nullptr;
	check(shim()->abi_TryGetAtTimestamp(get(coordinateSystem), get(timestamp), put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSource impl_ISpatialInteractionSourceState<T>::Source() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSource value = nullptr;
	check(shim()->get_Source(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceProperties impl_ISpatialInteractionSourceState<T>::Properties() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceProperties value = nullptr;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> bool impl_ISpatialInteractionSourceState<T>::IsPressed() const
{
	bool value = {};
	check(shim()->get_IsPressed(put(value)));
	return value;
}

template <typename T> Windows::Perception::PerceptionTimestamp impl_ISpatialInteractionSourceState<T>::Timestamp() const
{
	Windows::Perception::PerceptionTimestamp value = nullptr;
	check(shim()->get_Timestamp(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialPointerPose impl_ISpatialInteractionSourceState<T>::TryGetPointerPose(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::UI::Input::Spatial::SpatialPointerPose value = nullptr;
	check(shim()->abi_TryGetPointerPose(get(coordinateSystem), put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceKind impl_ISpatialRecognitionStartedEventArgs<T>::InteractionSourceKind() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceKind value = {};
	check(shim()->get_InteractionSourceKind(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialPointerPose impl_ISpatialRecognitionStartedEventArgs<T>::TryGetPointerPose(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::UI::Input::Spatial::SpatialPointerPose value = nullptr;
	check(shim()->abi_TryGetPointerPose(get(coordinateSystem), put(value)));
	return value;
}

template <typename T> bool impl_ISpatialRecognitionStartedEventArgs<T>::IsGesturePossible(Windows::UI::Input::Spatial::SpatialGestureSettings const gesture) const
{
	bool value = {};
	check(shim()->abi_IsGesturePossible(gesture, put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceKind impl_ISpatialRecognitionEndedEventArgs<T>::InteractionSourceKind() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceKind value = {};
	check(shim()->get_InteractionSourceKind(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceKind impl_ISpatialTappedEventArgs<T>::InteractionSourceKind() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceKind value = {};
	check(shim()->get_InteractionSourceKind(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialPointerPose impl_ISpatialTappedEventArgs<T>::TryGetPointerPose(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::UI::Input::Spatial::SpatialPointerPose value = nullptr;
	check(shim()->abi_TryGetPointerPose(get(coordinateSystem), put(value)));
	return value;
}

template <typename T> unsigned impl_ISpatialTappedEventArgs<T>::TapCount() const
{
	unsigned value = {};
	check(shim()->get_TapCount(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceKind impl_ISpatialHoldStartedEventArgs<T>::InteractionSourceKind() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceKind value = {};
	check(shim()->get_InteractionSourceKind(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialPointerPose impl_ISpatialHoldStartedEventArgs<T>::TryGetPointerPose(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::UI::Input::Spatial::SpatialPointerPose value = nullptr;
	check(shim()->abi_TryGetPointerPose(get(coordinateSystem), put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceKind impl_ISpatialHoldCompletedEventArgs<T>::InteractionSourceKind() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceKind value = {};
	check(shim()->get_InteractionSourceKind(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceKind impl_ISpatialHoldCanceledEventArgs<T>::InteractionSourceKind() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceKind value = {};
	check(shim()->get_InteractionSourceKind(&value));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_ISpatialManipulationDelta<T>::Translation() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_Translation(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceKind impl_ISpatialManipulationStartedEventArgs<T>::InteractionSourceKind() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceKind value = {};
	check(shim()->get_InteractionSourceKind(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialPointerPose impl_ISpatialManipulationStartedEventArgs<T>::TryGetPointerPose(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::UI::Input::Spatial::SpatialPointerPose value = nullptr;
	check(shim()->abi_TryGetPointerPose(get(coordinateSystem), put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceKind impl_ISpatialManipulationUpdatedEventArgs<T>::InteractionSourceKind() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceKind value = {};
	check(shim()->get_InteractionSourceKind(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialManipulationDelta impl_ISpatialManipulationUpdatedEventArgs<T>::TryGetCumulativeDelta(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::UI::Input::Spatial::SpatialManipulationDelta value = nullptr;
	check(shim()->abi_TryGetCumulativeDelta(get(coordinateSystem), put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceKind impl_ISpatialManipulationCompletedEventArgs<T>::InteractionSourceKind() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceKind value = {};
	check(shim()->get_InteractionSourceKind(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialManipulationDelta impl_ISpatialManipulationCompletedEventArgs<T>::TryGetCumulativeDelta(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::UI::Input::Spatial::SpatialManipulationDelta value = nullptr;
	check(shim()->abi_TryGetCumulativeDelta(get(coordinateSystem), put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceKind impl_ISpatialManipulationCanceledEventArgs<T>::InteractionSourceKind() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceKind value = {};
	check(shim()->get_InteractionSourceKind(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceKind impl_ISpatialNavigationStartedEventArgs<T>::InteractionSourceKind() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceKind value = {};
	check(shim()->get_InteractionSourceKind(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialPointerPose impl_ISpatialNavigationStartedEventArgs<T>::TryGetPointerPose(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::UI::Input::Spatial::SpatialPointerPose value = nullptr;
	check(shim()->abi_TryGetPointerPose(get(coordinateSystem), put(value)));
	return value;
}

template <typename T> bool impl_ISpatialNavigationStartedEventArgs<T>::IsNavigatingX() const
{
	bool value = {};
	check(shim()->get_IsNavigatingX(put(value)));
	return value;
}

template <typename T> bool impl_ISpatialNavigationStartedEventArgs<T>::IsNavigatingY() const
{
	bool value = {};
	check(shim()->get_IsNavigatingY(put(value)));
	return value;
}

template <typename T> bool impl_ISpatialNavigationStartedEventArgs<T>::IsNavigatingZ() const
{
	bool value = {};
	check(shim()->get_IsNavigatingZ(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceKind impl_ISpatialNavigationUpdatedEventArgs<T>::InteractionSourceKind() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceKind value = {};
	check(shim()->get_InteractionSourceKind(&value));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_ISpatialNavigationUpdatedEventArgs<T>::NormalizedOffset() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_NormalizedOffset(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceKind impl_ISpatialNavigationCompletedEventArgs<T>::InteractionSourceKind() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceKind value = {};
	check(shim()->get_InteractionSourceKind(&value));
	return value;
}

template <typename T> Windows::Foundation::Numerics::Vector3 impl_ISpatialNavigationCompletedEventArgs<T>::NormalizedOffset() const
{
	Windows::Foundation::Numerics::Vector3 value = {};
	check(shim()->get_NormalizedOffset(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceKind impl_ISpatialNavigationCanceledEventArgs<T>::InteractionSourceKind() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceKind value = {};
	check(shim()->get_InteractionSourceKind(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceState impl_ISpatialInteraction<T>::SourceState() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceState value = nullptr;
	check(shim()->get_SourceState(put(value)));
	return value;
}

template <typename T> long long impl_ISpatialGestureRecognizer<T>::RecognitionStarted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialRecognitionStartedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_RecognitionStarted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialGestureRecognizer<T>::RecognitionStarted(F handler) const
{
	return RecognitionStarted(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialRecognitionStartedEventArgs>(handler));
}

template <typename T> void impl_ISpatialGestureRecognizer<T>::RecognitionStarted(long long const token) const
{
	check(shim()->remove_RecognitionStarted(token));
}

template <typename T> long long impl_ISpatialGestureRecognizer<T>::RecognitionEnded(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialRecognitionEndedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_RecognitionEnded(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialGestureRecognizer<T>::RecognitionEnded(F handler) const
{
	return RecognitionEnded(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialRecognitionEndedEventArgs>(handler));
}

template <typename T> void impl_ISpatialGestureRecognizer<T>::RecognitionEnded(long long const token) const
{
	check(shim()->remove_RecognitionEnded(token));
}

template <typename T> long long impl_ISpatialGestureRecognizer<T>::Tapped(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialTappedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Tapped(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialGestureRecognizer<T>::Tapped(F handler) const
{
	return Tapped(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialTappedEventArgs>(handler));
}

template <typename T> void impl_ISpatialGestureRecognizer<T>::Tapped(long long const token) const
{
	check(shim()->remove_Tapped(token));
}

template <typename T> long long impl_ISpatialGestureRecognizer<T>::HoldStarted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialHoldStartedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_HoldStarted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialGestureRecognizer<T>::HoldStarted(F handler) const
{
	return HoldStarted(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialHoldStartedEventArgs>(handler));
}

template <typename T> void impl_ISpatialGestureRecognizer<T>::HoldStarted(long long const token) const
{
	check(shim()->remove_HoldStarted(token));
}

template <typename T> long long impl_ISpatialGestureRecognizer<T>::HoldCompleted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialHoldCompletedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_HoldCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialGestureRecognizer<T>::HoldCompleted(F handler) const
{
	return HoldCompleted(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialHoldCompletedEventArgs>(handler));
}

template <typename T> void impl_ISpatialGestureRecognizer<T>::HoldCompleted(long long const token) const
{
	check(shim()->remove_HoldCompleted(token));
}

template <typename T> long long impl_ISpatialGestureRecognizer<T>::HoldCanceled(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialHoldCanceledEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_HoldCanceled(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialGestureRecognizer<T>::HoldCanceled(F handler) const
{
	return HoldCanceled(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialHoldCanceledEventArgs>(handler));
}

template <typename T> void impl_ISpatialGestureRecognizer<T>::HoldCanceled(long long const token) const
{
	check(shim()->remove_HoldCanceled(token));
}

template <typename T> long long impl_ISpatialGestureRecognizer<T>::ManipulationStarted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialManipulationStartedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ManipulationStarted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialGestureRecognizer<T>::ManipulationStarted(F handler) const
{
	return ManipulationStarted(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialManipulationStartedEventArgs>(handler));
}

template <typename T> void impl_ISpatialGestureRecognizer<T>::ManipulationStarted(long long const token) const
{
	check(shim()->remove_ManipulationStarted(token));
}

template <typename T> long long impl_ISpatialGestureRecognizer<T>::ManipulationUpdated(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialManipulationUpdatedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ManipulationUpdated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialGestureRecognizer<T>::ManipulationUpdated(F handler) const
{
	return ManipulationUpdated(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialManipulationUpdatedEventArgs>(handler));
}

template <typename T> void impl_ISpatialGestureRecognizer<T>::ManipulationUpdated(long long const token) const
{
	check(shim()->remove_ManipulationUpdated(token));
}

template <typename T> long long impl_ISpatialGestureRecognizer<T>::ManipulationCompleted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialManipulationCompletedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ManipulationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialGestureRecognizer<T>::ManipulationCompleted(F handler) const
{
	return ManipulationCompleted(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialManipulationCompletedEventArgs>(handler));
}

template <typename T> void impl_ISpatialGestureRecognizer<T>::ManipulationCompleted(long long const token) const
{
	check(shim()->remove_ManipulationCompleted(token));
}

template <typename T> long long impl_ISpatialGestureRecognizer<T>::ManipulationCanceled(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialManipulationCanceledEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_ManipulationCanceled(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialGestureRecognizer<T>::ManipulationCanceled(F handler) const
{
	return ManipulationCanceled(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialManipulationCanceledEventArgs>(handler));
}

template <typename T> void impl_ISpatialGestureRecognizer<T>::ManipulationCanceled(long long const token) const
{
	check(shim()->remove_ManipulationCanceled(token));
}

template <typename T> long long impl_ISpatialGestureRecognizer<T>::NavigationStarted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialNavigationStartedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_NavigationStarted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialGestureRecognizer<T>::NavigationStarted(F handler) const
{
	return NavigationStarted(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialNavigationStartedEventArgs>(handler));
}

template <typename T> void impl_ISpatialGestureRecognizer<T>::NavigationStarted(long long const token) const
{
	check(shim()->remove_NavigationStarted(token));
}

template <typename T> long long impl_ISpatialGestureRecognizer<T>::NavigationUpdated(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialNavigationUpdatedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_NavigationUpdated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialGestureRecognizer<T>::NavigationUpdated(F handler) const
{
	return NavigationUpdated(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialNavigationUpdatedEventArgs>(handler));
}

template <typename T> void impl_ISpatialGestureRecognizer<T>::NavigationUpdated(long long const token) const
{
	check(shim()->remove_NavigationUpdated(token));
}

template <typename T> long long impl_ISpatialGestureRecognizer<T>::NavigationCompleted(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialNavigationCompletedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_NavigationCompleted(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialGestureRecognizer<T>::NavigationCompleted(F handler) const
{
	return NavigationCompleted(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialNavigationCompletedEventArgs>(handler));
}

template <typename T> void impl_ISpatialGestureRecognizer<T>::NavigationCompleted(long long const token) const
{
	check(shim()->remove_NavigationCompleted(token));
}

template <typename T> long long impl_ISpatialGestureRecognizer<T>::NavigationCanceled(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialNavigationCanceledEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_NavigationCanceled(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialGestureRecognizer<T>::NavigationCanceled(F handler) const
{
	return NavigationCanceled(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialGestureRecognizer, Windows::UI::Input::Spatial::SpatialNavigationCanceledEventArgs>(handler));
}

template <typename T> void impl_ISpatialGestureRecognizer<T>::NavigationCanceled(long long const token) const
{
	check(shim()->remove_NavigationCanceled(token));
}

template <typename T> void impl_ISpatialGestureRecognizer<T>::CaptureInteraction(Windows::UI::Input::Spatial::SpatialInteraction const & interaction) const
{
	check(shim()->abi_CaptureInteraction(get(interaction)));
}

template <typename T> void impl_ISpatialGestureRecognizer<T>::CancelPendingGestures() const
{
	check(shim()->abi_CancelPendingGestures());
}

template <typename T> bool impl_ISpatialGestureRecognizer<T>::TrySetGestureSettings(Windows::UI::Input::Spatial::SpatialGestureSettings const settings) const
{
	bool succeeded = {};
	check(shim()->abi_TrySetGestureSettings(settings, put(succeeded)));
	return succeeded;
}

template <typename T> Windows::UI::Input::Spatial::SpatialGestureSettings impl_ISpatialGestureRecognizer<T>::GestureSettings() const
{
	Windows::UI::Input::Spatial::SpatialGestureSettings value = {};
	check(shim()->get_GestureSettings(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialGestureRecognizer impl_ISpatialGestureRecognizerFactory<T>::Create(Windows::UI::Input::Spatial::SpatialGestureSettings const settings) const
{
	Windows::UI::Input::Spatial::SpatialGestureRecognizer value = nullptr;
	check(shim()->abi_Create(settings, put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceKind impl_ISpatialInteractionDetectedEventArgs<T>::InteractionSourceKind() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceKind value = {};
	check(shim()->get_InteractionSourceKind(&value));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialPointerPose impl_ISpatialInteractionDetectedEventArgs<T>::TryGetPointerPose(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem) const
{
	Windows::UI::Input::Spatial::SpatialPointerPose value = nullptr;
	check(shim()->abi_TryGetPointerPose(get(coordinateSystem), put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteraction impl_ISpatialInteractionDetectedEventArgs<T>::Interaction() const
{
	Windows::UI::Input::Spatial::SpatialInteraction value = nullptr;
	check(shim()->get_Interaction(put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionSourceState impl_ISpatialInteractionSourceEventArgs<T>::State() const
{
	Windows::UI::Input::Spatial::SpatialInteractionSourceState value = nullptr;
	check(shim()->get_State(put(value)));
	return value;
}

template <typename T> long long impl_ISpatialInteractionManager<T>::SourceDetected(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialInteractionManager, Windows::UI::Input::Spatial::SpatialInteractionSourceEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SourceDetected(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialInteractionManager<T>::SourceDetected(F handler) const
{
	return SourceDetected(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialInteractionManager, Windows::UI::Input::Spatial::SpatialInteractionSourceEventArgs>(handler));
}

template <typename T> void impl_ISpatialInteractionManager<T>::SourceDetected(long long const token) const
{
	check(shim()->remove_SourceDetected(token));
}

template <typename T> long long impl_ISpatialInteractionManager<T>::SourceLost(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialInteractionManager, Windows::UI::Input::Spatial::SpatialInteractionSourceEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SourceLost(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialInteractionManager<T>::SourceLost(F handler) const
{
	return SourceLost(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialInteractionManager, Windows::UI::Input::Spatial::SpatialInteractionSourceEventArgs>(handler));
}

template <typename T> void impl_ISpatialInteractionManager<T>::SourceLost(long long const token) const
{
	check(shim()->remove_SourceLost(token));
}

template <typename T> long long impl_ISpatialInteractionManager<T>::SourceUpdated(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialInteractionManager, Windows::UI::Input::Spatial::SpatialInteractionSourceEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SourceUpdated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialInteractionManager<T>::SourceUpdated(F handler) const
{
	return SourceUpdated(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialInteractionManager, Windows::UI::Input::Spatial::SpatialInteractionSourceEventArgs>(handler));
}

template <typename T> void impl_ISpatialInteractionManager<T>::SourceUpdated(long long const token) const
{
	check(shim()->remove_SourceUpdated(token));
}

template <typename T> long long impl_ISpatialInteractionManager<T>::SourcePressed(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialInteractionManager, Windows::UI::Input::Spatial::SpatialInteractionSourceEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SourcePressed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialInteractionManager<T>::SourcePressed(F handler) const
{
	return SourcePressed(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialInteractionManager, Windows::UI::Input::Spatial::SpatialInteractionSourceEventArgs>(handler));
}

template <typename T> void impl_ISpatialInteractionManager<T>::SourcePressed(long long const token) const
{
	check(shim()->remove_SourcePressed(token));
}

template <typename T> long long impl_ISpatialInteractionManager<T>::SourceReleased(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialInteractionManager, Windows::UI::Input::Spatial::SpatialInteractionSourceEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_SourceReleased(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialInteractionManager<T>::SourceReleased(F handler) const
{
	return SourceReleased(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialInteractionManager, Windows::UI::Input::Spatial::SpatialInteractionSourceEventArgs>(handler));
}

template <typename T> void impl_ISpatialInteractionManager<T>::SourceReleased(long long const token) const
{
	check(shim()->remove_SourceReleased(token));
}

template <typename T> long long impl_ISpatialInteractionManager<T>::InteractionDetected(Windows::Foundation::ITypedEventHandler<Windows::UI::Input::Spatial::SpatialInteractionManager, Windows::UI::Input::Spatial::SpatialInteractionDetectedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_InteractionDetected(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISpatialInteractionManager<T>::InteractionDetected(F handler) const
{
	return InteractionDetected(Windows::Foundation::TypedEventHandler<Windows::UI::Input::Spatial::SpatialInteractionManager, Windows::UI::Input::Spatial::SpatialInteractionDetectedEventArgs>(handler));
}

template <typename T> void impl_ISpatialInteractionManager<T>::InteractionDetected(long long const token) const
{
	check(shim()->remove_InteractionDetected(token));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Spatial::SpatialInteractionSourceState> impl_ISpatialInteractionManager<T>::GetDetectedSourcesAtTimestamp(Windows::Perception::PerceptionTimestamp const & timeStamp) const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Input::Spatial::SpatialInteractionSourceState> value;
	check(shim()->abi_GetDetectedSourcesAtTimestamp(get(timeStamp), put(value)));
	return value;
}

template <typename T> Windows::UI::Input::Spatial::SpatialInteractionManager impl_ISpatialInteractionManagerStatics<T>::GetForCurrentView() const
{
	Windows::UI::Input::Spatial::SpatialInteractionManager value = nullptr;
	check(shim()->abi_GetForCurrentView(put(value)));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Notifications {

template <typename T> Windows::UI::Notifications::ToastDismissalReason impl_IToastDismissedEventArgs<T>::Reason() const
{
	Windows::UI::Notifications::ToastDismissalReason value = {};
	check(shim()->get_Reason(&value));
	return value;
}

template <typename T> HRESULT impl_IToastFailedEventArgs<T>::ErrorCode() const
{
	HRESULT value = {};
	check(shim()->get_ErrorCode(&value));
	return value;
}

template <typename T> String impl_IToastActivatedEventArgs<T>::Arguments() const
{
	String value;
	check(shim()->get_Arguments(put(value)));
	return value;
}

template <typename T> Windows::UI::Notifications::TileUpdater impl_ITileUpdateManagerStatics<T>::CreateTileUpdaterForApplication() const
{
	Windows::UI::Notifications::TileUpdater updater = nullptr;
	check(shim()->abi_CreateTileUpdaterForApplication(put(updater)));
	return updater;
}

template <typename T> Windows::UI::Notifications::TileUpdater impl_ITileUpdateManagerStatics<T>::CreateTileUpdaterForApplication(StringReference const & applicationId) const
{
	Windows::UI::Notifications::TileUpdater updater = nullptr;
	check(shim()->abi_CreateTileUpdaterForApplicationWithId(get(applicationId), put(updater)));
	return updater;
}

template <typename T> Windows::UI::Notifications::TileUpdater impl_ITileUpdateManagerStatics<T>::CreateTileUpdaterForSecondaryTile(StringReference const & tileId) const
{
	Windows::UI::Notifications::TileUpdater updater = nullptr;
	check(shim()->abi_CreateTileUpdaterForSecondaryTile(get(tileId), put(updater)));
	return updater;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_ITileUpdateManagerStatics<T>::GetTemplateContent(Windows::UI::Notifications::TileTemplateType const type) const
{
	Windows::Data::Xml::Dom::XmlDocument content = nullptr;
	check(shim()->abi_GetTemplateContent(type, put(content)));
	return content;
}

template <typename T> void impl_ITileUpdater<T>::Update(Windows::UI::Notifications::TileNotification const & notification) const
{
	check(shim()->abi_Update(get(notification)));
}

template <typename T> void impl_ITileUpdater<T>::Clear() const
{
	check(shim()->abi_Clear());
}

template <typename T> void impl_ITileUpdater<T>::EnableNotificationQueue(bool const enable) const
{
	check(shim()->abi_EnableNotificationQueue(enable));
}

template <typename T> Windows::UI::Notifications::NotificationSetting impl_ITileUpdater<T>::Setting() const
{
	Windows::UI::Notifications::NotificationSetting value = {};
	check(shim()->get_Setting(&value));
	return value;
}

template <typename T> void impl_ITileUpdater<T>::AddToSchedule(Windows::UI::Notifications::ScheduledTileNotification const & scheduledTile) const
{
	check(shim()->abi_AddToSchedule(get(scheduledTile)));
}

template <typename T> void impl_ITileUpdater<T>::RemoveFromSchedule(Windows::UI::Notifications::ScheduledTileNotification const & scheduledTile) const
{
	check(shim()->abi_RemoveFromSchedule(get(scheduledTile)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Notifications::ScheduledTileNotification> impl_ITileUpdater<T>::GetScheduledTileNotifications() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Notifications::ScheduledTileNotification> scheduledTiles;
	check(shim()->abi_GetScheduledTileNotifications(put(scheduledTiles)));
	return scheduledTiles;
}

template <typename T> void impl_ITileUpdater<T>::StartPeriodicUpdate(Windows::Foundation::Uri const & tileContent, Windows::UI::Notifications::PeriodicUpdateRecurrence const requestedInterval) const
{
	check(shim()->abi_StartPeriodicUpdate(get(tileContent), requestedInterval));
}

template <typename T> void impl_ITileUpdater<T>::StartPeriodicUpdate(Windows::Foundation::Uri const & tileContent, Windows::Foundation::DateTime const & startTime, Windows::UI::Notifications::PeriodicUpdateRecurrence const requestedInterval) const
{
	check(shim()->abi_StartPeriodicUpdateAtTime(get(tileContent), startTime, requestedInterval));
}

template <typename T> void impl_ITileUpdater<T>::StopPeriodicUpdate() const
{
	check(shim()->abi_StopPeriodicUpdate());
}

template <typename T> void impl_ITileUpdater<T>::StartPeriodicUpdateBatch(Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & tileContents, Windows::UI::Notifications::PeriodicUpdateRecurrence const requestedInterval) const
{
	check(shim()->abi_StartPeriodicUpdateBatch(get(tileContents), requestedInterval));
}

template <typename T> void impl_ITileUpdater<T>::StartPeriodicUpdateBatch(Windows::Foundation::Collections::IIterable<Windows::Foundation::Uri> const & tileContents, Windows::Foundation::DateTime const & startTime, Windows::UI::Notifications::PeriodicUpdateRecurrence const requestedInterval) const
{
	check(shim()->abi_StartPeriodicUpdateBatchAtTime(get(tileContents), startTime, requestedInterval));
}

template <typename T> void impl_ITileUpdater2<T>::EnableNotificationQueueForSquare150x150(bool const enable) const
{
	check(shim()->abi_EnableNotificationQueueForSquare150x150(enable));
}

template <typename T> void impl_ITileUpdater2<T>::EnableNotificationQueueForWide310x150(bool const enable) const
{
	check(shim()->abi_EnableNotificationQueueForWide310x150(enable));
}

template <typename T> void impl_ITileUpdater2<T>::EnableNotificationQueueForSquare310x310(bool const enable) const
{
	check(shim()->abi_EnableNotificationQueueForSquare310x310(enable));
}

template <typename T> Windows::UI::Notifications::BadgeUpdater impl_IBadgeUpdateManagerStatics<T>::CreateBadgeUpdaterForApplication() const
{
	Windows::UI::Notifications::BadgeUpdater updater = nullptr;
	check(shim()->abi_CreateBadgeUpdaterForApplication(put(updater)));
	return updater;
}

template <typename T> Windows::UI::Notifications::BadgeUpdater impl_IBadgeUpdateManagerStatics<T>::CreateBadgeUpdaterForApplication(StringReference const & applicationId) const
{
	Windows::UI::Notifications::BadgeUpdater updater = nullptr;
	check(shim()->abi_CreateBadgeUpdaterForApplicationWithId(get(applicationId), put(updater)));
	return updater;
}

template <typename T> Windows::UI::Notifications::BadgeUpdater impl_IBadgeUpdateManagerStatics<T>::CreateBadgeUpdaterForSecondaryTile(StringReference const & tileId) const
{
	Windows::UI::Notifications::BadgeUpdater updater = nullptr;
	check(shim()->abi_CreateBadgeUpdaterForSecondaryTile(get(tileId), put(updater)));
	return updater;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IBadgeUpdateManagerStatics<T>::GetTemplateContent(Windows::UI::Notifications::BadgeTemplateType const type) const
{
	Windows::Data::Xml::Dom::XmlDocument content = nullptr;
	check(shim()->abi_GetTemplateContent(type, put(content)));
	return content;
}

template <typename T> void impl_IBadgeUpdater<T>::Update(Windows::UI::Notifications::BadgeNotification const & notification) const
{
	check(shim()->abi_Update(get(notification)));
}

template <typename T> void impl_IBadgeUpdater<T>::Clear() const
{
	check(shim()->abi_Clear());
}

template <typename T> void impl_IBadgeUpdater<T>::StartPeriodicUpdate(Windows::Foundation::Uri const & badgeContent, Windows::UI::Notifications::PeriodicUpdateRecurrence const requestedInterval) const
{
	check(shim()->abi_StartPeriodicUpdate(get(badgeContent), requestedInterval));
}

template <typename T> void impl_IBadgeUpdater<T>::StartPeriodicUpdate(Windows::Foundation::Uri const & badgeContent, Windows::Foundation::DateTime const & startTime, Windows::UI::Notifications::PeriodicUpdateRecurrence const requestedInterval) const
{
	check(shim()->abi_StartPeriodicUpdateAtTime(get(badgeContent), startTime, requestedInterval));
}

template <typename T> void impl_IBadgeUpdater<T>::StopPeriodicUpdate() const
{
	check(shim()->abi_StopPeriodicUpdate());
}

template <typename T> Windows::UI::Notifications::ToastNotifier impl_IToastNotificationManagerStatics<T>::CreateToastNotifier() const
{
	Windows::UI::Notifications::ToastNotifier notifier = nullptr;
	check(shim()->abi_CreateToastNotifier(put(notifier)));
	return notifier;
}

template <typename T> Windows::UI::Notifications::ToastNotifier impl_IToastNotificationManagerStatics<T>::CreateToastNotifier(StringReference const & applicationId) const
{
	Windows::UI::Notifications::ToastNotifier notifier = nullptr;
	check(shim()->abi_CreateToastNotifierWithId(get(applicationId), put(notifier)));
	return notifier;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IToastNotificationManagerStatics<T>::GetTemplateContent(Windows::UI::Notifications::ToastTemplateType const type) const
{
	Windows::Data::Xml::Dom::XmlDocument content = nullptr;
	check(shim()->abi_GetTemplateContent(type, put(content)));
	return content;
}

template <typename T> void impl_IToastNotifier<T>::Show(Windows::UI::Notifications::ToastNotification const & notification) const
{
	check(shim()->abi_Show(get(notification)));
}

template <typename T> void impl_IToastNotifier<T>::Hide(Windows::UI::Notifications::ToastNotification const & notification) const
{
	check(shim()->abi_Hide(get(notification)));
}

template <typename T> Windows::UI::Notifications::NotificationSetting impl_IToastNotifier<T>::Setting() const
{
	Windows::UI::Notifications::NotificationSetting value = {};
	check(shim()->get_Setting(&value));
	return value;
}

template <typename T> void impl_IToastNotifier<T>::AddToSchedule(Windows::UI::Notifications::ScheduledToastNotification const & scheduledToast) const
{
	check(shim()->abi_AddToSchedule(get(scheduledToast)));
}

template <typename T> void impl_IToastNotifier<T>::RemoveFromSchedule(Windows::UI::Notifications::ScheduledToastNotification const & scheduledToast) const
{
	check(shim()->abi_RemoveFromSchedule(get(scheduledToast)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Notifications::ScheduledToastNotification> impl_IToastNotifier<T>::GetScheduledToastNotifications() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Notifications::ScheduledToastNotification> scheduledToasts;
	check(shim()->abi_GetScheduledToastNotifications(put(scheduledToasts)));
	return scheduledToasts;
}

template <typename T> Windows::UI::Notifications::TileNotification impl_ITileNotificationFactory<T>::CreateTileNotification(Windows::Data::Xml::Dom::XmlDocument const & content) const
{
	Windows::UI::Notifications::TileNotification notification = nullptr;
	check(shim()->abi_CreateTileNotification(get(content), put(notification)));
	return notification;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_ITileNotification<T>::Content() const
{
	Windows::Data::Xml::Dom::XmlDocument value = nullptr;
	check(shim()->get_Content(put(value)));
	return value;
}

template <typename T> void impl_ITileNotification<T>::ExpirationTime(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_ExpirationTime(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_ITileNotification<T>::ExpirationTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_ExpirationTime(put(value)));
	return value;
}

template <typename T> void impl_ITileNotification<T>::Tag(StringReference const & value) const
{
	check(shim()->put_Tag(get(value)));
}

template <typename T> String impl_ITileNotification<T>::Tag() const
{
	String value;
	check(shim()->get_Tag(put(value)));
	return value;
}

template <typename T> Windows::UI::Notifications::BadgeNotification impl_IBadgeNotificationFactory<T>::CreateBadgeNotification(Windows::Data::Xml::Dom::XmlDocument const & content) const
{
	Windows::UI::Notifications::BadgeNotification notification = nullptr;
	check(shim()->abi_CreateBadgeNotification(get(content), put(notification)));
	return notification;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IBadgeNotification<T>::Content() const
{
	Windows::Data::Xml::Dom::XmlDocument value = nullptr;
	check(shim()->get_Content(put(value)));
	return value;
}

template <typename T> void impl_IBadgeNotification<T>::ExpirationTime(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_ExpirationTime(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IBadgeNotification<T>::ExpirationTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_ExpirationTime(put(value)));
	return value;
}

template <typename T> Windows::UI::Notifications::ToastNotification impl_IToastNotificationFactory<T>::CreateToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content) const
{
	Windows::UI::Notifications::ToastNotification notification = nullptr;
	check(shim()->abi_CreateToastNotification(get(content), put(notification)));
	return notification;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IToastNotification<T>::Content() const
{
	Windows::Data::Xml::Dom::XmlDocument value = nullptr;
	check(shim()->get_Content(put(value)));
	return value;
}

template <typename T> void impl_IToastNotification<T>::ExpirationTime(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_ExpirationTime(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IToastNotification<T>::ExpirationTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_ExpirationTime(put(value)));
	return value;
}

template <typename T> long long impl_IToastNotification<T>::Dismissed(Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification, Windows::UI::Notifications::ToastDismissedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_Dismissed(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IToastNotification<T>::Dismissed(F handler) const
{
	return Dismissed(Windows::Foundation::TypedEventHandler<Windows::UI::Notifications::ToastNotification, Windows::UI::Notifications::ToastDismissedEventArgs>(handler));
}

template <typename T> void impl_IToastNotification<T>::Dismissed(long long const cookie) const
{
	check(shim()->remove_Dismissed(cookie));
}

template <typename T> long long impl_IToastNotification<T>::Activated(Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification, IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_Activated(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IToastNotification<T>::Activated(F handler) const
{
	return Activated(Windows::Foundation::TypedEventHandler<Windows::UI::Notifications::ToastNotification, IInspectable>(handler));
}

template <typename T> void impl_IToastNotification<T>::Activated(long long const cookie) const
{
	check(shim()->remove_Activated(cookie));
}

template <typename T> long long impl_IToastNotification<T>::Failed(Windows::Foundation::ITypedEventHandler<Windows::UI::Notifications::ToastNotification, Windows::UI::Notifications::ToastFailedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Failed(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IToastNotification<T>::Failed(F handler) const
{
	return Failed(Windows::Foundation::TypedEventHandler<Windows::UI::Notifications::ToastNotification, Windows::UI::Notifications::ToastFailedEventArgs>(handler));
}

template <typename T> void impl_IToastNotification<T>::Failed(long long const token) const
{
	check(shim()->remove_Failed(token));
}

template <typename T> void impl_IToastNotification2<T>::Tag(StringReference const & value) const
{
	check(shim()->put_Tag(get(value)));
}

template <typename T> String impl_IToastNotification2<T>::Tag() const
{
	String value;
	check(shim()->get_Tag(put(value)));
	return value;
}

template <typename T> void impl_IToastNotification2<T>::Group(StringReference const & value) const
{
	check(shim()->put_Group(get(value)));
}

template <typename T> String impl_IToastNotification2<T>::Group() const
{
	String value;
	check(shim()->get_Group(put(value)));
	return value;
}

template <typename T> void impl_IToastNotification2<T>::SuppressPopup(bool const value) const
{
	check(shim()->put_SuppressPopup(value));
}

template <typename T> bool impl_IToastNotification2<T>::SuppressPopup() const
{
	bool value = {};
	check(shim()->get_SuppressPopup(put(value)));
	return value;
}

template <typename T> Windows::UI::Notifications::ScheduledToastNotification impl_IScheduledToastNotificationFactory<T>::CreateScheduledToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime) const
{
	Windows::UI::Notifications::ScheduledToastNotification notification = nullptr;
	check(shim()->abi_CreateScheduledToastNotification(get(content), deliveryTime, put(notification)));
	return notification;
}

template <typename T> Windows::UI::Notifications::ScheduledToastNotification impl_IScheduledToastNotificationFactory<T>::CreateScheduledToastNotificationRecurring(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime, Windows::Foundation::TimeSpan const & snoozeInterval, unsigned const maximumSnoozeCount) const
{
	Windows::UI::Notifications::ScheduledToastNotification notification = nullptr;
	check(shim()->abi_CreateScheduledToastNotificationRecurring(get(content), deliveryTime, snoozeInterval, maximumSnoozeCount, put(notification)));
	return notification;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IScheduledToastNotification<T>::Content() const
{
	Windows::Data::Xml::Dom::XmlDocument value = nullptr;
	check(shim()->get_Content(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IScheduledToastNotification<T>::DeliveryTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_DeliveryTime(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IScheduledToastNotification<T>::SnoozeInterval() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_SnoozeInterval(put(value)));
	return value;
}

template <typename T> unsigned impl_IScheduledToastNotification<T>::MaximumSnoozeCount() const
{
	unsigned value = {};
	check(shim()->get_MaximumSnoozeCount(&value));
	return value;
}

template <typename T> void impl_IScheduledToastNotification<T>::Id(StringReference const & value) const
{
	check(shim()->put_Id(get(value)));
}

template <typename T> String impl_IScheduledToastNotification<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_IScheduledToastNotification2<T>::Tag(StringReference const & value) const
{
	check(shim()->put_Tag(get(value)));
}

template <typename T> String impl_IScheduledToastNotification2<T>::Tag() const
{
	String value;
	check(shim()->get_Tag(put(value)));
	return value;
}

template <typename T> void impl_IScheduledToastNotification2<T>::Group(StringReference const & value) const
{
	check(shim()->put_Group(get(value)));
}

template <typename T> String impl_IScheduledToastNotification2<T>::Group() const
{
	String value;
	check(shim()->get_Group(put(value)));
	return value;
}

template <typename T> void impl_IScheduledToastNotification2<T>::SuppressPopup(bool const value) const
{
	check(shim()->put_SuppressPopup(value));
}

template <typename T> bool impl_IScheduledToastNotification2<T>::SuppressPopup() const
{
	bool value = {};
	check(shim()->get_SuppressPopup(put(value)));
	return value;
}

template <typename T> Windows::UI::Notifications::ScheduledTileNotification impl_IScheduledTileNotificationFactory<T>::CreateScheduledTileNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime) const
{
	Windows::UI::Notifications::ScheduledTileNotification notification = nullptr;
	check(shim()->abi_CreateScheduledTileNotification(get(content), deliveryTime, put(notification)));
	return notification;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_IScheduledTileNotification<T>::Content() const
{
	Windows::Data::Xml::Dom::XmlDocument value = nullptr;
	check(shim()->get_Content(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IScheduledTileNotification<T>::DeliveryTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_DeliveryTime(&value));
	return value;
}

template <typename T> void impl_IScheduledTileNotification<T>::ExpirationTime(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_ExpirationTime(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IScheduledTileNotification<T>::ExpirationTime() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_ExpirationTime(put(value)));
	return value;
}

template <typename T> void impl_IScheduledTileNotification<T>::Tag(StringReference const & value) const
{
	check(shim()->put_Tag(get(value)));
}

template <typename T> String impl_IScheduledTileNotification<T>::Tag() const
{
	String value;
	check(shim()->get_Tag(put(value)));
	return value;
}

template <typename T> void impl_IScheduledTileNotification<T>::Id(StringReference const & value) const
{
	check(shim()->put_Id(get(value)));
}

template <typename T> String impl_IScheduledTileNotification<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> Windows::UI::Notifications::ToastNotificationHistory impl_IToastNotificationManagerStatics2<T>::History() const
{
	Windows::UI::Notifications::ToastNotificationHistory value = nullptr;
	check(shim()->get_History(put(value)));
	return value;
}

template <typename T> void impl_IToastNotificationHistory<T>::RemoveGroup(StringReference const & group) const
{
	check(shim()->abi_RemoveGroup(get(group)));
}

template <typename T> void impl_IToastNotificationHistory<T>::RemoveGroup(StringReference const & group, StringReference const & applicationId) const
{
	check(shim()->abi_RemoveGroupWithId(get(group), get(applicationId)));
}

template <typename T> void impl_IToastNotificationHistory<T>::Remove(StringReference const & tag, StringReference const & group, StringReference const & applicationId) const
{
	check(shim()->abi_RemoveGroupedTagWithId(get(tag), get(group), get(applicationId)));
}

template <typename T> void impl_IToastNotificationHistory<T>::Remove(StringReference const & tag, StringReference const & group) const
{
	check(shim()->abi_RemoveGroupedTag(get(tag), get(group)));
}

template <typename T> void impl_IToastNotificationHistory<T>::Remove(StringReference const & tag) const
{
	check(shim()->abi_Remove(get(tag)));
}

template <typename T> void impl_IToastNotificationHistory<T>::Clear() const
{
	check(shim()->abi_Clear());
}

template <typename T> void impl_IToastNotificationHistory<T>::Clear(StringReference const & applicationId) const
{
	check(shim()->abi_ClearWithId(get(applicationId)));
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Notifications::ToastNotification> impl_IToastNotificationHistory2<T>::GetHistory() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Notifications::ToastNotification> toasts;
	check(shim()->abi_GetHistory(put(toasts)));
	return toasts;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Notifications::ToastNotification> impl_IToastNotificationHistory2<T>::GetHistory(StringReference const & applicationId) const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Notifications::ToastNotification> toasts;
	check(shim()->abi_GetHistoryWithId(get(applicationId), put(toasts)));
	return toasts;
}

template <typename T> Windows::UI::Notifications::ToastHistoryChangedType impl_IToastNotificationHistoryChangedTriggerDetail<T>::ChangeType() const
{
	Windows::UI::Notifications::ToastHistoryChangedType value = {};
	check(shim()->get_ChangeType(&value));
	return value;
}

template <typename T> String impl_IToastNotificationActionTriggerDetail<T>::Argument() const
{
	String argument;
	check(shim()->get_Argument(put(argument)));
	return argument;
}

template <typename T> Windows::Foundation::Collections::ValueSet impl_IToastNotificationActionTriggerDetail<T>::UserInput() const
{
	Windows::Foundation::Collections::ValueSet inputs = nullptr;
	check(shim()->get_UserInput(put(inputs)));
	return inputs;
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Popups {

template <typename T> void impl_IUICommandInvokedHandler<T>::Invoke(Windows::UI::Popups::IUICommand const & command) const
{
	check(shim()->abi_Invoke(get(command)));
}

template <typename T> String impl_IMessageDialog<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_IMessageDialog<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> impl_IMessageDialog<T>::Commands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> value;
	check(shim()->get_Commands(put(value)));
	return value;
}

template <typename T> unsigned impl_IMessageDialog<T>::DefaultCommandIndex() const
{
	unsigned value = {};
	check(shim()->get_DefaultCommandIndex(&value));
	return value;
}

template <typename T> void impl_IMessageDialog<T>::DefaultCommandIndex(unsigned const value) const
{
	check(shim()->put_DefaultCommandIndex(value));
}

template <typename T> unsigned impl_IMessageDialog<T>::CancelCommandIndex() const
{
	unsigned value = {};
	check(shim()->get_CancelCommandIndex(&value));
	return value;
}

template <typename T> void impl_IMessageDialog<T>::CancelCommandIndex(unsigned const value) const
{
	check(shim()->put_CancelCommandIndex(value));
}

template <typename T> String impl_IMessageDialog<T>::Content() const
{
	String value;
	check(shim()->get_Content(put(value)));
	return value;
}

template <typename T> void impl_IMessageDialog<T>::Content(StringReference const & value) const
{
	check(shim()->put_Content(get(value)));
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_IMessageDialog<T>::ShowAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> messageDialogAsyncOperation;
	check(shim()->abi_ShowAsync(put(messageDialogAsyncOperation)));
	return messageDialogAsyncOperation;
}

template <typename T> Windows::UI::Popups::MessageDialogOptions impl_IMessageDialog<T>::Options() const
{
	Windows::UI::Popups::MessageDialogOptions value = {};
	check(shim()->get_Options(&value));
	return value;
}

template <typename T> void impl_IMessageDialog<T>::Options(Windows::UI::Popups::MessageDialogOptions const value) const
{
	check(shim()->put_Options(value));
}

template <typename T> Windows::UI::Popups::MessageDialog impl_IMessageDialogFactory<T>::Create(StringReference const & content) const
{
	Windows::UI::Popups::MessageDialog messageDialog = nullptr;
	check(shim()->abi_Create(get(content), put(messageDialog)));
	return messageDialog;
}

template <typename T> Windows::UI::Popups::MessageDialog impl_IMessageDialogFactory<T>::CreateWithTitle(StringReference const & content, StringReference const & title) const
{
	Windows::UI::Popups::MessageDialog messageDialog = nullptr;
	check(shim()->abi_CreateWithTitle(get(content), get(title), put(messageDialog)));
	return messageDialog;
}

template <typename T> String impl_IUICommand<T>::Label() const
{
	String value;
	check(shim()->get_Label(put(value)));
	return value;
}

template <typename T> void impl_IUICommand<T>::Label(StringReference const & value) const
{
	check(shim()->put_Label(get(value)));
}

template <typename T> Windows::UI::Popups::IUICommandInvokedHandler impl_IUICommand<T>::Invoked() const
{
	Windows::UI::Popups::IUICommandInvokedHandler value = {};
	check(shim()->get_Invoked(put(value)));
	return value;
}

template <typename T> void impl_IUICommand<T>::Invoked(Windows::UI::Popups::IUICommandInvokedHandler const & value) const
{
	check(shim()->put_Invoked(get(value)));
}

template <typename T> template <typename F> void impl_IUICommand<T>::Invoked(F value) const
{
	Invoked(Windows::UI::Popups::UICommandInvokedHandler(value));
}

template <typename T> IInspectable impl_IUICommand<T>::Id() const
{
	IInspectable value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_IUICommand<T>::Id(IInspectable const & value) const
{
	check(shim()->put_Id(get(value)));
}

template <typename T> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::Create(StringReference const & label) const
{
	Windows::UI::Popups::UICommand instance = nullptr;
	check(shim()->abi_Create(get(label), put(instance)));
	return instance;
}

template <typename T> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::CreateWithHandler(StringReference const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action) const
{
	Windows::UI::Popups::UICommand instance = nullptr;
	check(shim()->abi_CreateWithHandler(get(label), get(action), put(instance)));
	return instance;
}

template <typename T> template <typename F> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::CreateWithHandler(StringReference const & label, F action) const
{
	return CreateWithHandler(label, Windows::UI::Popups::UICommandInvokedHandler(action));
}

template <typename T> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::CreateWithHandlerAndId(StringReference const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId) const
{
	Windows::UI::Popups::UICommand instance = nullptr;
	check(shim()->abi_CreateWithHandlerAndId(get(label), get(action), get(commandId), put(instance)));
	return instance;
}

template <typename T> template <typename F> Windows::UI::Popups::UICommand impl_IUICommandFactory<T>::CreateWithHandlerAndId(StringReference const & label, F action, IInspectable const & commandId) const
{
	return CreateWithHandlerAndId(label, Windows::UI::Popups::UICommandInvokedHandler(action), commandId);
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> impl_IPopupMenu<T>::Commands() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::Popups::IUICommand> value;
	check(shim()->get_Commands(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_IPopupMenu<T>::ShowAsync(Windows::Foundation::Point const & invocationPoint) const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> asyncOperation;
	check(shim()->abi_ShowAsync(invocationPoint, put(asyncOperation)));
	return asyncOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_IPopupMenu<T>::ShowForSelectionAsync(Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> asyncOperation;
	check(shim()->abi_ShowAsyncWithRect(selection, put(asyncOperation)));
	return asyncOperation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> impl_IPopupMenu<T>::ShowForSelectionAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::Popups::IUICommand> asyncOperation;
	check(shim()->abi_ShowAsyncWithRectAndPlacement(selection, preferredPlacement, put(asyncOperation)));
	return asyncOperation;
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace StartScreen {

template <typename T> Windows::UI::StartScreen::JumpListItemKind impl_IJumpListItem<T>::Kind() const
{
	Windows::UI::StartScreen::JumpListItemKind value = {};
	check(shim()->get_Kind(&value));
	return value;
}

template <typename T> String impl_IJumpListItem<T>::Arguments() const
{
	String value;
	check(shim()->get_Arguments(put(value)));
	return value;
}

template <typename T> bool impl_IJumpListItem<T>::RemovedByUser() const
{
	bool value = {};
	check(shim()->get_RemovedByUser(put(value)));
	return value;
}

template <typename T> String impl_IJumpListItem<T>::Description() const
{
	String value;
	check(shim()->get_Description(put(value)));
	return value;
}

template <typename T> void impl_IJumpListItem<T>::Description(StringReference const & value) const
{
	check(shim()->put_Description(get(value)));
}

template <typename T> String impl_IJumpListItem<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_IJumpListItem<T>::DisplayName(StringReference const & value) const
{
	check(shim()->put_DisplayName(get(value)));
}

template <typename T> String impl_IJumpListItem<T>::GroupName() const
{
	String value;
	check(shim()->get_GroupName(put(value)));
	return value;
}

template <typename T> void impl_IJumpListItem<T>::GroupName(StringReference const & value) const
{
	check(shim()->put_GroupName(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IJumpListItem<T>::Logo() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Logo(put(value)));
	return value;
}

template <typename T> void impl_IJumpListItem<T>::Logo(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Logo(get(value)));
}

template <typename T> Windows::UI::StartScreen::JumpListItem impl_IJumpListItemStatics<T>::CreateWithArguments(StringReference const & arguments, StringReference const & displayName) const
{
	Windows::UI::StartScreen::JumpListItem result = nullptr;
	check(shim()->abi_CreateWithArguments(get(arguments), get(displayName), put(result)));
	return result;
}

template <typename T> Windows::UI::StartScreen::JumpListItem impl_IJumpListItemStatics<T>::CreateSeparator() const
{
	Windows::UI::StartScreen::JumpListItem result = nullptr;
	check(shim()->abi_CreateSeparator(put(result)));
	return result;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::UI::StartScreen::JumpListItem> impl_IJumpList<T>::Items() const
{
	Windows::Foundation::Collections::IVector<Windows::UI::StartScreen::JumpListItem> value;
	check(shim()->get_Items(put(value)));
	return value;
}

template <typename T> Windows::UI::StartScreen::JumpListSystemGroupKind impl_IJumpList<T>::SystemGroupKind() const
{
	Windows::UI::StartScreen::JumpListSystemGroupKind value = {};
	check(shim()->get_SystemGroupKind(&value));
	return value;
}

template <typename T> void impl_IJumpList<T>::SystemGroupKind(Windows::UI::StartScreen::JumpListSystemGroupKind const value) const
{
	check(shim()->put_SystemGroupKind(value));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IJumpList<T>::SaveAsync() const
{
	Windows::Foundation::IAsyncAction result;
	check(shim()->abi_SaveAsync(put(result)));
	return result;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::UI::StartScreen::JumpList> impl_IJumpListStatics<T>::LoadCurrentAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::UI::StartScreen::JumpList> result;
	check(shim()->abi_LoadCurrentAsync(put(result)));
	return result;
}

template <typename T> bool impl_IJumpListStatics<T>::IsSupported() const
{
	bool result = {};
	check(shim()->abi_IsSupported(put(result)));
	return result;
}

template <typename T> void impl_ISecondaryTile<T>::TileId(StringReference const & value) const
{
	check(shim()->put_TileId(get(value)));
}

template <typename T> String impl_ISecondaryTile<T>::TileId() const
{
	String value;
	check(shim()->get_TileId(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTile<T>::Arguments(StringReference const & value) const
{
	check(shim()->put_Arguments(get(value)));
}

template <typename T> String impl_ISecondaryTile<T>::Arguments() const
{
	String value;
	check(shim()->get_Arguments(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTile<T>::ShortName(StringReference const & value) const
{
	check(shim()->put_ShortName(get(value)));
}

template <typename T> String impl_ISecondaryTile<T>::ShortName() const
{
	String value;
	check(shim()->get_ShortName(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTile<T>::DisplayName(StringReference const & value) const
{
	check(shim()->put_DisplayName(get(value)));
}

template <typename T> String impl_ISecondaryTile<T>::DisplayName() const
{
	String value;
	check(shim()->get_DisplayName(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTile<T>::Logo(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Logo(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISecondaryTile<T>::Logo() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Logo(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTile<T>::SmallLogo(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_SmallLogo(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISecondaryTile<T>::SmallLogo() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_SmallLogo(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTile<T>::WideLogo(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_WideLogo(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISecondaryTile<T>::WideLogo() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_WideLogo(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTile<T>::LockScreenBadgeLogo(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_LockScreenBadgeLogo(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISecondaryTile<T>::LockScreenBadgeLogo() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_LockScreenBadgeLogo(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTile<T>::LockScreenDisplayBadgeAndTileText(bool const value) const
{
	check(shim()->put_LockScreenDisplayBadgeAndTileText(value));
}

template <typename T> bool impl_ISecondaryTile<T>::LockScreenDisplayBadgeAndTileText() const
{
	bool value = {};
	check(shim()->get_LockScreenDisplayBadgeAndTileText(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTile<T>::TileOptions(Windows::UI::StartScreen::TileOptions const value) const
{
	check(shim()->put_TileOptions(value));
}

template <typename T> Windows::UI::StartScreen::TileOptions impl_ISecondaryTile<T>::TileOptions() const
{
	Windows::UI::StartScreen::TileOptions value = {};
	check(shim()->get_TileOptions(&value));
	return value;
}

template <typename T> void impl_ISecondaryTile<T>::ForegroundText(Windows::UI::StartScreen::ForegroundText const value) const
{
	check(shim()->put_ForegroundText(value));
}

template <typename T> Windows::UI::StartScreen::ForegroundText impl_ISecondaryTile<T>::ForegroundText() const
{
	Windows::UI::StartScreen::ForegroundText value = {};
	check(shim()->get_ForegroundText(&value));
	return value;
}

template <typename T> void impl_ISecondaryTile<T>::BackgroundColor(Windows::UI::Color const & value) const
{
	check(shim()->put_BackgroundColor(value));
}

template <typename T> Windows::UI::Color impl_ISecondaryTile<T>::BackgroundColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_BackgroundColor(&value));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::RequestCreateAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_RequestCreateAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::RequestCreateAsync(Windows::Foundation::Point const & invocationPoint) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_RequestCreateAsyncWithPoint(invocationPoint, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::RequestCreateForSelectionAsync(Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_RequestCreateAsyncWithRect(selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::RequestCreateForSelectionAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_RequestCreateAsyncWithRectAndPlacement(selection, preferredPlacement, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::RequestDeleteAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_RequestDeleteAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::RequestDeleteAsync(Windows::Foundation::Point const & invocationPoint) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_RequestDeleteAsyncWithPoint(invocationPoint, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::RequestDeleteForSelectionAsync(Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_RequestDeleteAsyncWithRect(selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::RequestDeleteForSelectionAsync(Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_RequestDeleteAsyncWithRectAndPlacement(selection, preferredPlacement, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_ISecondaryTile<T>::UpdateAsync() const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_UpdateAsync(put(operation)));
	return operation;
}

template <typename T> void impl_ISecondaryTile2<T>::PhoneticName(StringReference const & value) const
{
	check(shim()->put_PhoneticName(get(value)));
}

template <typename T> String impl_ISecondaryTile2<T>::PhoneticName() const
{
	String value;
	check(shim()->get_PhoneticName(put(value)));
	return value;
}

template <typename T> Windows::UI::StartScreen::SecondaryTileVisualElements impl_ISecondaryTile2<T>::VisualElements() const
{
	Windows::UI::StartScreen::SecondaryTileVisualElements value = nullptr;
	check(shim()->get_VisualElements(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTile2<T>::RoamingEnabled(bool const value) const
{
	check(shim()->put_RoamingEnabled(value));
}

template <typename T> bool impl_ISecondaryTile2<T>::RoamingEnabled() const
{
	bool value = {};
	check(shim()->get_RoamingEnabled(put(value)));
	return value;
}

template <typename T> long long impl_ISecondaryTile2<T>::VisualElementsRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::StartScreen::SecondaryTile, Windows::UI::StartScreen::VisualElementsRequestedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_VisualElementsRequested(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_ISecondaryTile2<T>::VisualElementsRequested(F handler) const
{
	return VisualElementsRequested(Windows::Foundation::TypedEventHandler<Windows::UI::StartScreen::SecondaryTile, Windows::UI::StartScreen::VisualElementsRequestedEventArgs>(handler));
}

template <typename T> void impl_ISecondaryTile2<T>::VisualElementsRequested(long long const token) const
{
	check(shim()->remove_VisualElementsRequested(token));
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::Square30x30Logo(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Square30x30Logo(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISecondaryTileVisualElements<T>::Square30x30Logo() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Square30x30Logo(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::Square70x70Logo(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Square70x70Logo(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISecondaryTileVisualElements<T>::Square70x70Logo() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Square70x70Logo(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::Square150x150Logo(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Square150x150Logo(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISecondaryTileVisualElements<T>::Square150x150Logo() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Square150x150Logo(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::Wide310x150Logo(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Wide310x150Logo(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISecondaryTileVisualElements<T>::Wide310x150Logo() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Wide310x150Logo(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::Square310x310Logo(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Square310x310Logo(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISecondaryTileVisualElements<T>::Square310x310Logo() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Square310x310Logo(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::ForegroundText(Windows::UI::StartScreen::ForegroundText const value) const
{
	check(shim()->put_ForegroundText(value));
}

template <typename T> Windows::UI::StartScreen::ForegroundText impl_ISecondaryTileVisualElements<T>::ForegroundText() const
{
	Windows::UI::StartScreen::ForegroundText value = {};
	check(shim()->get_ForegroundText(&value));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::BackgroundColor(Windows::UI::Color const & value) const
{
	check(shim()->put_BackgroundColor(value));
}

template <typename T> Windows::UI::Color impl_ISecondaryTileVisualElements<T>::BackgroundColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_BackgroundColor(&value));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::ShowNameOnSquare150x150Logo(bool const value) const
{
	check(shim()->put_ShowNameOnSquare150x150Logo(value));
}

template <typename T> bool impl_ISecondaryTileVisualElements<T>::ShowNameOnSquare150x150Logo() const
{
	bool value = {};
	check(shim()->get_ShowNameOnSquare150x150Logo(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::ShowNameOnWide310x150Logo(bool const value) const
{
	check(shim()->put_ShowNameOnWide310x150Logo(value));
}

template <typename T> bool impl_ISecondaryTileVisualElements<T>::ShowNameOnWide310x150Logo() const
{
	bool value = {};
	check(shim()->get_ShowNameOnWide310x150Logo(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements<T>::ShowNameOnSquare310x310Logo(bool const value) const
{
	check(shim()->put_ShowNameOnSquare310x310Logo(value));
}

template <typename T> bool impl_ISecondaryTileVisualElements<T>::ShowNameOnSquare310x310Logo() const
{
	bool value = {};
	check(shim()->get_ShowNameOnSquare310x310Logo(put(value)));
	return value;
}

template <typename T> void impl_ISecondaryTileVisualElements3<T>::Square44x44Logo(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Square44x44Logo(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISecondaryTileVisualElements3<T>::Square44x44Logo() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Square44x44Logo(put(value)));
	return value;
}

template <typename T> Windows::UI::StartScreen::SecondaryTile impl_ISecondaryTileFactory<T>::CreateTile(StringReference const & tileId, StringReference const & shortName, StringReference const & displayName, StringReference const & arguments, Windows::UI::StartScreen::TileOptions const tileOptions, Windows::Foundation::Uri const & logoReference) const
{
	Windows::UI::StartScreen::SecondaryTile value = nullptr;
	check(shim()->abi_CreateTile(get(tileId), get(shortName), get(displayName), get(arguments), tileOptions, get(logoReference), put(value)));
	return value;
}

template <typename T> Windows::UI::StartScreen::SecondaryTile impl_ISecondaryTileFactory<T>::CreateWideTile(StringReference const & tileId, StringReference const & shortName, StringReference const & displayName, StringReference const & arguments, Windows::UI::StartScreen::TileOptions const tileOptions, Windows::Foundation::Uri const & logoReference, Windows::Foundation::Uri const & wideLogoReference) const
{
	Windows::UI::StartScreen::SecondaryTile value = nullptr;
	check(shim()->abi_CreateWideTile(get(tileId), get(shortName), get(displayName), get(arguments), tileOptions, get(logoReference), get(wideLogoReference), put(value)));
	return value;
}

template <typename T> Windows::UI::StartScreen::SecondaryTile impl_ISecondaryTileFactory<T>::CreateWithId(StringReference const & tileId) const
{
	Windows::UI::StartScreen::SecondaryTile value = nullptr;
	check(shim()->abi_CreateWithId(get(tileId), put(value)));
	return value;
}

template <typename T> Windows::UI::StartScreen::SecondaryTile impl_ISecondaryTileFactory2<T>::CreateMinimalTile(StringReference const & tileId, StringReference const & displayName, StringReference const & arguments, Windows::Foundation::Uri const & square150x150Logo, Windows::UI::StartScreen::TileSize const desiredSize) const
{
	Windows::UI::StartScreen::SecondaryTile value = nullptr;
	check(shim()->abi_CreateMinimalTile(get(tileId), get(displayName), get(arguments), get(square150x150Logo), desiredSize, put(value)));
	return value;
}

template <typename T> bool impl_ISecondaryTileStatics<T>::Exists(StringReference const & tileId) const
{
	bool exists = {};
	check(shim()->abi_Exists(get(tileId), put(exists)));
	return exists;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> impl_ISecondaryTileStatics<T>::FindAllAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> operation;
	check(shim()->abi_FindAllAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> impl_ISecondaryTileStatics<T>::FindAllAsync(StringReference const & applicationId) const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> operation;
	check(shim()->abi_FindAllForApplicationAsync(get(applicationId), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> impl_ISecondaryTileStatics<T>::FindAllForPackageAsync() const
{
	Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> operation;
	check(shim()->abi_FindAllForPackageAsync(put(operation)));
	return operation;
}

template <typename T> Windows::UI::StartScreen::VisualElementsRequest impl_IVisualElementsRequestedEventArgs<T>::Request() const
{
	Windows::UI::StartScreen::VisualElementsRequest value = nullptr;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> Windows::UI::StartScreen::SecondaryTileVisualElements impl_IVisualElementsRequest<T>::VisualElements() const
{
	Windows::UI::StartScreen::SecondaryTileVisualElements value = nullptr;
	check(shim()->get_VisualElements(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTileVisualElements> impl_IVisualElementsRequest<T>::AlternateVisualElements() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTileVisualElements> value;
	check(shim()->get_AlternateVisualElements(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_IVisualElementsRequest<T>::Deadline() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_Deadline(&value));
	return value;
}

template <typename T> Windows::UI::StartScreen::VisualElementsRequestDeferral impl_IVisualElementsRequest<T>::GetDeferral() const
{
	Windows::UI::StartScreen::VisualElementsRequestDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> void impl_IVisualElementsRequestDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Text {

template <typename T> Windows::UI::Color impl_ITextConstantsStatics<T>::AutoColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_AutoColor(&value));
	return value;
}

template <typename T> int impl_ITextConstantsStatics<T>::MinUnitCount() const
{
	int value = {};
	check(shim()->get_MinUnitCount(&value));
	return value;
}

template <typename T> int impl_ITextConstantsStatics<T>::MaxUnitCount() const
{
	int value = {};
	check(shim()->get_MaxUnitCount(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_ITextConstantsStatics<T>::UndefinedColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_UndefinedColor(&value));
	return value;
}

template <typename T> float impl_ITextConstantsStatics<T>::UndefinedFloatValue() const
{
	float value = {};
	check(shim()->get_UndefinedFloatValue(&value));
	return value;
}

template <typename T> int impl_ITextConstantsStatics<T>::UndefinedInt32Value() const
{
	int value = {};
	check(shim()->get_UndefinedInt32Value(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontStretch impl_ITextConstantsStatics<T>::UndefinedFontStretch() const
{
	Windows::UI::Text::FontStretch value = {};
	check(shim()->get_UndefinedFontStretch(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontStyle impl_ITextConstantsStatics<T>::UndefinedFontStyle() const
{
	Windows::UI::Text::FontStyle value = {};
	check(shim()->get_UndefinedFontStyle(&value));
	return value;
}

template <typename T> Windows::UI::Text::CaretType impl_ITextDocument<T>::CaretType() const
{
	Windows::UI::Text::CaretType value = {};
	check(shim()->get_CaretType(&value));
	return value;
}

template <typename T> void impl_ITextDocument<T>::CaretType(Windows::UI::Text::CaretType const value) const
{
	check(shim()->put_CaretType(value));
}

template <typename T> float impl_ITextDocument<T>::DefaultTabStop() const
{
	float value = {};
	check(shim()->get_DefaultTabStop(&value));
	return value;
}

template <typename T> void impl_ITextDocument<T>::DefaultTabStop(float const value) const
{
	check(shim()->put_DefaultTabStop(value));
}

template <typename T> Windows::UI::Text::ITextSelection impl_ITextDocument<T>::Selection() const
{
	Windows::UI::Text::ITextSelection value;
	check(shim()->get_Selection(put(value)));
	return value;
}

template <typename T> unsigned impl_ITextDocument<T>::UndoLimit() const
{
	unsigned value = {};
	check(shim()->get_UndoLimit(&value));
	return value;
}

template <typename T> void impl_ITextDocument<T>::UndoLimit(unsigned const value) const
{
	check(shim()->put_UndoLimit(value));
}

template <typename T> bool impl_ITextDocument<T>::CanCopy() const
{
	bool value = {};
	check(shim()->abi_CanCopy(put(value)));
	return value;
}

template <typename T> bool impl_ITextDocument<T>::CanPaste() const
{
	bool value = {};
	check(shim()->abi_CanPaste(put(value)));
	return value;
}

template <typename T> bool impl_ITextDocument<T>::CanRedo() const
{
	bool value = {};
	check(shim()->abi_CanRedo(put(value)));
	return value;
}

template <typename T> bool impl_ITextDocument<T>::CanUndo() const
{
	bool value = {};
	check(shim()->abi_CanUndo(put(value)));
	return value;
}

template <typename T> int impl_ITextDocument<T>::ApplyDisplayUpdates() const
{
	int count = {};
	check(shim()->abi_ApplyDisplayUpdates(&count));
	return count;
}

template <typename T> int impl_ITextDocument<T>::BatchDisplayUpdates() const
{
	int count = {};
	check(shim()->abi_BatchDisplayUpdates(&count));
	return count;
}

template <typename T> void impl_ITextDocument<T>::BeginUndoGroup() const
{
	check(shim()->abi_BeginUndoGroup());
}

template <typename T> void impl_ITextDocument<T>::EndUndoGroup() const
{
	check(shim()->abi_EndUndoGroup());
}

template <typename T> Windows::UI::Text::ITextCharacterFormat impl_ITextDocument<T>::GetDefaultCharacterFormat() const
{
	Windows::UI::Text::ITextCharacterFormat value;
	check(shim()->abi_GetDefaultCharacterFormat(put(value)));
	return value;
}

template <typename T> Windows::UI::Text::ITextParagraphFormat impl_ITextDocument<T>::GetDefaultParagraphFormat() const
{
	Windows::UI::Text::ITextParagraphFormat value;
	check(shim()->abi_GetDefaultParagraphFormat(put(value)));
	return value;
}

template <typename T> Windows::UI::Text::ITextRange impl_ITextDocument<T>::GetRange(int const startPosition, int const endPosition) const
{
	Windows::UI::Text::ITextRange value;
	check(shim()->abi_GetRange(startPosition, endPosition, put(value)));
	return value;
}

template <typename T> Windows::UI::Text::ITextRange impl_ITextDocument<T>::GetRangeFromPoint(Windows::Foundation::Point const & point, Windows::UI::Text::PointOptions const options) const
{
	Windows::UI::Text::ITextRange value;
	check(shim()->abi_GetRangeFromPoint(point, options, put(value)));
	return value;
}

template <typename T> void impl_ITextDocument<T>::GetText(Windows::UI::Text::TextGetOptions const options, String & value) const
{
	check(shim()->abi_GetText(options, put(value)));
}

template <typename T> void impl_ITextDocument<T>::LoadFromStream(Windows::UI::Text::TextSetOptions const options, Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	check(shim()->abi_LoadFromStream(options, get(value)));
}

template <typename T> void impl_ITextDocument<T>::Redo() const
{
	check(shim()->abi_Redo());
}

template <typename T> void impl_ITextDocument<T>::SaveToStream(Windows::UI::Text::TextGetOptions const options, Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	check(shim()->abi_SaveToStream(options, get(value)));
}

template <typename T> void impl_ITextDocument<T>::SetDefaultCharacterFormat(Windows::UI::Text::ITextCharacterFormat const & value) const
{
	check(shim()->abi_SetDefaultCharacterFormat(get(value)));
}

template <typename T> void impl_ITextDocument<T>::SetDefaultParagraphFormat(Windows::UI::Text::ITextParagraphFormat const & value) const
{
	check(shim()->abi_SetDefaultParagraphFormat(get(value)));
}

template <typename T> void impl_ITextDocument<T>::SetText(Windows::UI::Text::TextSetOptions const options, StringReference const & value) const
{
	check(shim()->abi_SetText(options, get(value)));
}

template <typename T> void impl_ITextDocument<T>::Undo() const
{
	check(shim()->abi_Undo());
}

template <typename T> wchar_t impl_ITextRange<T>::Character() const
{
	wchar_t value = {};
	check(shim()->get_Character(&value));
	return value;
}

template <typename T> void impl_ITextRange<T>::Character(wchar_t const value) const
{
	check(shim()->put_Character(value));
}

template <typename T> Windows::UI::Text::ITextCharacterFormat impl_ITextRange<T>::CharacterFormat() const
{
	Windows::UI::Text::ITextCharacterFormat value;
	check(shim()->get_CharacterFormat(put(value)));
	return value;
}

template <typename T> void impl_ITextRange<T>::CharacterFormat(Windows::UI::Text::ITextCharacterFormat const & value) const
{
	check(shim()->put_CharacterFormat(get(value)));
}

template <typename T> Windows::UI::Text::ITextRange impl_ITextRange<T>::FormattedText() const
{
	Windows::UI::Text::ITextRange value;
	check(shim()->get_FormattedText(put(value)));
	return value;
}

template <typename T> void impl_ITextRange<T>::FormattedText(Windows::UI::Text::ITextRange const & value) const
{
	check(shim()->put_FormattedText(get(value)));
}

template <typename T> int impl_ITextRange<T>::EndPosition() const
{
	int value = {};
	check(shim()->get_EndPosition(&value));
	return value;
}

template <typename T> void impl_ITextRange<T>::EndPosition(int const value) const
{
	check(shim()->put_EndPosition(value));
}

template <typename T> Windows::UI::Text::RangeGravity impl_ITextRange<T>::Gravity() const
{
	Windows::UI::Text::RangeGravity value = {};
	check(shim()->get_Gravity(&value));
	return value;
}

template <typename T> void impl_ITextRange<T>::Gravity(Windows::UI::Text::RangeGravity const value) const
{
	check(shim()->put_Gravity(value));
}

template <typename T> int impl_ITextRange<T>::Length() const
{
	int length = {};
	check(shim()->get_Length(&length));
	return length;
}

template <typename T> String impl_ITextRange<T>::Link() const
{
	String value;
	check(shim()->get_Link(put(value)));
	return value;
}

template <typename T> void impl_ITextRange<T>::Link(StringReference const & value) const
{
	check(shim()->put_Link(get(value)));
}

template <typename T> Windows::UI::Text::ITextParagraphFormat impl_ITextRange<T>::ParagraphFormat() const
{
	Windows::UI::Text::ITextParagraphFormat value;
	check(shim()->get_ParagraphFormat(put(value)));
	return value;
}

template <typename T> void impl_ITextRange<T>::ParagraphFormat(Windows::UI::Text::ITextParagraphFormat const & value) const
{
	check(shim()->put_ParagraphFormat(get(value)));
}

template <typename T> int impl_ITextRange<T>::StartPosition() const
{
	int value = {};
	check(shim()->get_StartPosition(&value));
	return value;
}

template <typename T> void impl_ITextRange<T>::StartPosition(int const value) const
{
	check(shim()->put_StartPosition(value));
}

template <typename T> int impl_ITextRange<T>::StoryLength() const
{
	int value = {};
	check(shim()->get_StoryLength(&value));
	return value;
}

template <typename T> String impl_ITextRange<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> void impl_ITextRange<T>::Text(StringReference const & value) const
{
	check(shim()->put_Text(get(value)));
}

template <typename T> bool impl_ITextRange<T>::CanPaste(int const format) const
{
	bool value = {};
	check(shim()->abi_CanPaste(format, put(value)));
	return value;
}

template <typename T> void impl_ITextRange<T>::ChangeCase(Windows::UI::Text::LetterCase const value) const
{
	check(shim()->abi_ChangeCase(value));
}

template <typename T> void impl_ITextRange<T>::Collapse(bool const value) const
{
	check(shim()->abi_Collapse(value));
}

template <typename T> void impl_ITextRange<T>::Copy() const
{
	check(shim()->abi_Copy());
}

template <typename T> void impl_ITextRange<T>::Cut() const
{
	check(shim()->abi_Cut());
}

template <typename T> int impl_ITextRange<T>::Delete(Windows::UI::Text::TextRangeUnit const unit, int const count) const
{
	int delta = {};
	check(shim()->abi_Delete(unit, count, &delta));
	return delta;
}

template <typename T> int impl_ITextRange<T>::EndOf(Windows::UI::Text::TextRangeUnit const unit, bool const extend) const
{
	int delta = {};
	check(shim()->abi_EndOf(unit, extend, &delta));
	return delta;
}

template <typename T> int impl_ITextRange<T>::Expand(Windows::UI::Text::TextRangeUnit const unit) const
{
	int delta = {};
	check(shim()->abi_Expand(unit, &delta));
	return delta;
}

template <typename T> int impl_ITextRange<T>::FindText(StringReference const & value, int const scanLength, Windows::UI::Text::FindOptions const options) const
{
	int length = {};
	check(shim()->abi_FindText(get(value), scanLength, options, &length));
	return length;
}

template <typename T> void impl_ITextRange<T>::GetCharacterUtf32(unsigned & value, int const offset) const
{
	check(shim()->abi_GetCharacterUtf32(&value, offset));
}

template <typename T> Windows::UI::Text::ITextRange impl_ITextRange<T>::GetClone() const
{
	Windows::UI::Text::ITextRange value;
	check(shim()->abi_GetClone(put(value)));
	return value;
}

template <typename T> int impl_ITextRange<T>::GetIndex(Windows::UI::Text::TextRangeUnit const unit) const
{
	int index = {};
	check(shim()->abi_GetIndex(unit, &index));
	return index;
}

template <typename T> void impl_ITextRange<T>::GetPoint(Windows::UI::Text::HorizontalCharacterAlignment const horizontalAlign, Windows::UI::Text::VerticalCharacterAlignment const verticalAlign, Windows::UI::Text::PointOptions const options, Windows::Foundation::Point & point) const
{
	check(shim()->abi_GetPoint(horizontalAlign, verticalAlign, options, &point));
}

template <typename T> void impl_ITextRange<T>::GetRect(Windows::UI::Text::PointOptions const options, Windows::Foundation::Rect & rect, int & hit) const
{
	check(shim()->abi_GetRect(options, &rect, &hit));
}

template <typename T> void impl_ITextRange<T>::GetText(Windows::UI::Text::TextGetOptions const options, String & value) const
{
	check(shim()->abi_GetText(options, put(value)));
}

template <typename T> void impl_ITextRange<T>::GetTextViaStream(Windows::UI::Text::TextGetOptions const options, Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	check(shim()->abi_GetTextViaStream(options, get(value)));
}

template <typename T> bool impl_ITextRange<T>::InRange(Windows::UI::Text::ITextRange const & range) const
{
	bool value = {};
	check(shim()->abi_InRange(get(range), put(value)));
	return value;
}

template <typename T> void impl_ITextRange<T>::InsertImage(int const width, int const height, int const ascent, Windows::UI::Text::VerticalCharacterAlignment const verticalAlign, StringReference const & alternateText, Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	check(shim()->abi_InsertImage(width, height, ascent, verticalAlign, get(alternateText), get(value)));
}

template <typename T> bool impl_ITextRange<T>::InStory(Windows::UI::Text::ITextRange const & range) const
{
	bool value = {};
	check(shim()->abi_InStory(get(range), put(value)));
	return value;
}

template <typename T> bool impl_ITextRange<T>::IsEqual(Windows::UI::Text::ITextRange const & range) const
{
	bool value = {};
	check(shim()->abi_IsEqual(get(range), put(value)));
	return value;
}

template <typename T> int impl_ITextRange<T>::Move(Windows::UI::Text::TextRangeUnit const unit, int const count) const
{
	int delta = {};
	check(shim()->abi_Move(unit, count, &delta));
	return delta;
}

template <typename T> int impl_ITextRange<T>::MoveEnd(Windows::UI::Text::TextRangeUnit const unit, int const count) const
{
	int delta = {};
	check(shim()->abi_MoveEnd(unit, count, &delta));
	return delta;
}

template <typename T> int impl_ITextRange<T>::MoveStart(Windows::UI::Text::TextRangeUnit const unit, int const count) const
{
	int delta = {};
	check(shim()->abi_MoveStart(unit, count, &delta));
	return delta;
}

template <typename T> void impl_ITextRange<T>::Paste(int const format) const
{
	check(shim()->abi_Paste(format));
}

template <typename T> void impl_ITextRange<T>::ScrollIntoView(Windows::UI::Text::PointOptions const value) const
{
	check(shim()->abi_ScrollIntoView(value));
}

template <typename T> void impl_ITextRange<T>::MatchSelection() const
{
	check(shim()->abi_MatchSelection());
}

template <typename T> void impl_ITextRange<T>::SetIndex(Windows::UI::Text::TextRangeUnit const unit, int const index, bool const extend) const
{
	check(shim()->abi_SetIndex(unit, index, extend));
}

template <typename T> void impl_ITextRange<T>::SetPoint(Windows::Foundation::Point const & point, Windows::UI::Text::PointOptions const options, bool const extend) const
{
	check(shim()->abi_SetPoint(point, options, extend));
}

template <typename T> void impl_ITextRange<T>::SetRange(int const startPosition, int const endPosition) const
{
	check(shim()->abi_SetRange(startPosition, endPosition));
}

template <typename T> void impl_ITextRange<T>::SetText(Windows::UI::Text::TextSetOptions const options, StringReference const & value) const
{
	check(shim()->abi_SetText(options, get(value)));
}

template <typename T> void impl_ITextRange<T>::SetTextViaStream(Windows::UI::Text::TextSetOptions const options, Windows::Storage::Streams::IRandomAccessStream const & value) const
{
	check(shim()->abi_SetTextViaStream(options, get(value)));
}

template <typename T> int impl_ITextRange<T>::StartOf(Windows::UI::Text::TextRangeUnit const unit, bool const extend) const
{
	int delta = {};
	check(shim()->abi_StartOf(unit, extend, &delta));
	return delta;
}

template <typename T> Windows::UI::Text::SelectionOptions impl_ITextSelection<T>::Options() const
{
	Windows::UI::Text::SelectionOptions value = {};
	check(shim()->get_Options(&value));
	return value;
}

template <typename T> void impl_ITextSelection<T>::Options(Windows::UI::Text::SelectionOptions const value) const
{
	check(shim()->put_Options(value));
}

template <typename T> Windows::UI::Text::SelectionType impl_ITextSelection<T>::Type() const
{
	Windows::UI::Text::SelectionType value = {};
	check(shim()->get_Type(&value));
	return value;
}

template <typename T> int impl_ITextSelection<T>::EndKey(Windows::UI::Text::TextRangeUnit const unit, bool const extend) const
{
	int delta = {};
	check(shim()->abi_EndKey(unit, extend, &delta));
	return delta;
}

template <typename T> int impl_ITextSelection<T>::HomeKey(Windows::UI::Text::TextRangeUnit const unit, bool const extend) const
{
	int delta = {};
	check(shim()->abi_HomeKey(unit, extend, &delta));
	return delta;
}

template <typename T> int impl_ITextSelection<T>::MoveDown(Windows::UI::Text::TextRangeUnit const unit, int const count, bool const extend) const
{
	int delta = {};
	check(shim()->abi_MoveDown(unit, count, extend, &delta));
	return delta;
}

template <typename T> int impl_ITextSelection<T>::MoveLeft(Windows::UI::Text::TextRangeUnit const unit, int const count, bool const extend) const
{
	int delta = {};
	check(shim()->abi_MoveLeft(unit, count, extend, &delta));
	return delta;
}

template <typename T> int impl_ITextSelection<T>::MoveRight(Windows::UI::Text::TextRangeUnit const unit, int const count, bool const extend) const
{
	int delta = {};
	check(shim()->abi_MoveRight(unit, count, extend, &delta));
	return delta;
}

template <typename T> int impl_ITextSelection<T>::MoveUp(Windows::UI::Text::TextRangeUnit const unit, int const count, bool const extend) const
{
	int delta = {};
	check(shim()->abi_MoveUp(unit, count, extend, &delta));
	return delta;
}

template <typename T> void impl_ITextSelection<T>::TypeText(StringReference const & value) const
{
	check(shim()->abi_TypeText(get(value)));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::AllCaps() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(shim()->get_AllCaps(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::AllCaps(Windows::UI::Text::FormatEffect const value) const
{
	check(shim()->put_AllCaps(value));
}

template <typename T> Windows::UI::Color impl_ITextCharacterFormat<T>::BackgroundColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_BackgroundColor(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::BackgroundColor(Windows::UI::Color const & value) const
{
	check(shim()->put_BackgroundColor(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::Bold() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(shim()->get_Bold(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Bold(Windows::UI::Text::FormatEffect const value) const
{
	check(shim()->put_Bold(value));
}

template <typename T> Windows::UI::Text::FontStretch impl_ITextCharacterFormat<T>::FontStretch() const
{
	Windows::UI::Text::FontStretch value = {};
	check(shim()->get_FontStretch(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::FontStretch(Windows::UI::Text::FontStretch const value) const
{
	check(shim()->put_FontStretch(value));
}

template <typename T> Windows::UI::Text::FontStyle impl_ITextCharacterFormat<T>::FontStyle() const
{
	Windows::UI::Text::FontStyle value = {};
	check(shim()->get_FontStyle(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::FontStyle(Windows::UI::Text::FontStyle const value) const
{
	check(shim()->put_FontStyle(value));
}

template <typename T> Windows::UI::Color impl_ITextCharacterFormat<T>::ForegroundColor() const
{
	Windows::UI::Color value = {};
	check(shim()->get_ForegroundColor(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::ForegroundColor(Windows::UI::Color const & value) const
{
	check(shim()->put_ForegroundColor(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::Hidden() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(shim()->get_Hidden(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Hidden(Windows::UI::Text::FormatEffect const value) const
{
	check(shim()->put_Hidden(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::Italic() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(shim()->get_Italic(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Italic(Windows::UI::Text::FormatEffect const value) const
{
	check(shim()->put_Italic(value));
}

template <typename T> float impl_ITextCharacterFormat<T>::Kerning() const
{
	float value = {};
	check(shim()->get_Kerning(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Kerning(float const value) const
{
	check(shim()->put_Kerning(value));
}

template <typename T> String impl_ITextCharacterFormat<T>::LanguageTag() const
{
	String value;
	check(shim()->get_LanguageTag(put(value)));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::LanguageTag(StringReference const & value) const
{
	check(shim()->put_LanguageTag(get(value)));
}

template <typename T> Windows::UI::Text::LinkType impl_ITextCharacterFormat<T>::LinkType() const
{
	Windows::UI::Text::LinkType value = {};
	check(shim()->get_LinkType(&value));
	return value;
}

template <typename T> String impl_ITextCharacterFormat<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::Outline() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(shim()->get_Outline(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Outline(Windows::UI::Text::FormatEffect const value) const
{
	check(shim()->put_Outline(value));
}

template <typename T> float impl_ITextCharacterFormat<T>::Position() const
{
	float value = {};
	check(shim()->get_Position(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Position(float const value) const
{
	check(shim()->put_Position(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::ProtectedText() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(shim()->get_ProtectedText(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::ProtectedText(Windows::UI::Text::FormatEffect const value) const
{
	check(shim()->put_ProtectedText(value));
}

template <typename T> float impl_ITextCharacterFormat<T>::Size() const
{
	float value = {};
	check(shim()->get_Size(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Size(float const value) const
{
	check(shim()->put_Size(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::SmallCaps() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(shim()->get_SmallCaps(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::SmallCaps(Windows::UI::Text::FormatEffect const value) const
{
	check(shim()->put_SmallCaps(value));
}

template <typename T> float impl_ITextCharacterFormat<T>::Spacing() const
{
	float value = {};
	check(shim()->get_Spacing(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Spacing(float const value) const
{
	check(shim()->put_Spacing(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::Strikethrough() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(shim()->get_Strikethrough(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Strikethrough(Windows::UI::Text::FormatEffect const value) const
{
	check(shim()->put_Strikethrough(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::Subscript() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(shim()->get_Subscript(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Subscript(Windows::UI::Text::FormatEffect const value) const
{
	check(shim()->put_Subscript(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextCharacterFormat<T>::Superscript() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(shim()->get_Superscript(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Superscript(Windows::UI::Text::FormatEffect const value) const
{
	check(shim()->put_Superscript(value));
}

template <typename T> Windows::UI::Text::TextScript impl_ITextCharacterFormat<T>::TextScript() const
{
	Windows::UI::Text::TextScript value = {};
	check(shim()->get_TextScript(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::TextScript(Windows::UI::Text::TextScript const value) const
{
	check(shim()->put_TextScript(value));
}

template <typename T> Windows::UI::Text::UnderlineType impl_ITextCharacterFormat<T>::Underline() const
{
	Windows::UI::Text::UnderlineType value = {};
	check(shim()->get_Underline(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Underline(Windows::UI::Text::UnderlineType const value) const
{
	check(shim()->put_Underline(value));
}

template <typename T> int impl_ITextCharacterFormat<T>::Weight() const
{
	int value = {};
	check(shim()->get_Weight(&value));
	return value;
}

template <typename T> void impl_ITextCharacterFormat<T>::Weight(int const value) const
{
	check(shim()->put_Weight(value));
}

template <typename T> void impl_ITextCharacterFormat<T>::SetClone(Windows::UI::Text::ITextCharacterFormat const & value) const
{
	check(shim()->abi_SetClone(get(value)));
}

template <typename T> Windows::UI::Text::ITextCharacterFormat impl_ITextCharacterFormat<T>::GetClone() const
{
	Windows::UI::Text::ITextCharacterFormat value;
	check(shim()->abi_GetClone(put(value)));
	return value;
}

template <typename T> bool impl_ITextCharacterFormat<T>::IsEqual(Windows::UI::Text::ITextCharacterFormat const & format) const
{
	bool value = {};
	check(shim()->abi_IsEqual(get(format), put(value)));
	return value;
}

template <typename T> Windows::UI::Text::ParagraphAlignment impl_ITextParagraphFormat<T>::Alignment() const
{
	Windows::UI::Text::ParagraphAlignment value = {};
	check(shim()->get_Alignment(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::Alignment(Windows::UI::Text::ParagraphAlignment const value) const
{
	check(shim()->put_Alignment(value));
}

template <typename T> float impl_ITextParagraphFormat<T>::FirstLineIndent() const
{
	float value = {};
	check(shim()->get_FirstLineIndent(&value));
	return value;
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextParagraphFormat<T>::KeepTogether() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(shim()->get_KeepTogether(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::KeepTogether(Windows::UI::Text::FormatEffect const value) const
{
	check(shim()->put_KeepTogether(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextParagraphFormat<T>::KeepWithNext() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(shim()->get_KeepWithNext(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::KeepWithNext(Windows::UI::Text::FormatEffect const value) const
{
	check(shim()->put_KeepWithNext(value));
}

template <typename T> float impl_ITextParagraphFormat<T>::LeftIndent() const
{
	float value = {};
	check(shim()->get_LeftIndent(&value));
	return value;
}

template <typename T> float impl_ITextParagraphFormat<T>::LineSpacing() const
{
	float value = {};
	check(shim()->get_LineSpacing(&value));
	return value;
}

template <typename T> Windows::UI::Text::LineSpacingRule impl_ITextParagraphFormat<T>::LineSpacingRule() const
{
	Windows::UI::Text::LineSpacingRule value = {};
	check(shim()->get_LineSpacingRule(&value));
	return value;
}

template <typename T> Windows::UI::Text::MarkerAlignment impl_ITextParagraphFormat<T>::ListAlignment() const
{
	Windows::UI::Text::MarkerAlignment value = {};
	check(shim()->get_ListAlignment(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::ListAlignment(Windows::UI::Text::MarkerAlignment const value) const
{
	check(shim()->put_ListAlignment(value));
}

template <typename T> int impl_ITextParagraphFormat<T>::ListLevelIndex() const
{
	int value = {};
	check(shim()->get_ListLevelIndex(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::ListLevelIndex(int const value) const
{
	check(shim()->put_ListLevelIndex(value));
}

template <typename T> int impl_ITextParagraphFormat<T>::ListStart() const
{
	int value = {};
	check(shim()->get_ListStart(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::ListStart(int const value) const
{
	check(shim()->put_ListStart(value));
}

template <typename T> Windows::UI::Text::MarkerStyle impl_ITextParagraphFormat<T>::ListStyle() const
{
	Windows::UI::Text::MarkerStyle value = {};
	check(shim()->get_ListStyle(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::ListStyle(Windows::UI::Text::MarkerStyle const value) const
{
	check(shim()->put_ListStyle(value));
}

template <typename T> float impl_ITextParagraphFormat<T>::ListTab() const
{
	float value = {};
	check(shim()->get_ListTab(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::ListTab(float const value) const
{
	check(shim()->put_ListTab(value));
}

template <typename T> Windows::UI::Text::MarkerType impl_ITextParagraphFormat<T>::ListType() const
{
	Windows::UI::Text::MarkerType value = {};
	check(shim()->get_ListType(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::ListType(Windows::UI::Text::MarkerType const value) const
{
	check(shim()->put_ListType(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextParagraphFormat<T>::NoLineNumber() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(shim()->get_NoLineNumber(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::NoLineNumber(Windows::UI::Text::FormatEffect const value) const
{
	check(shim()->put_NoLineNumber(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextParagraphFormat<T>::PageBreakBefore() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(shim()->get_PageBreakBefore(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::PageBreakBefore(Windows::UI::Text::FormatEffect const value) const
{
	check(shim()->put_PageBreakBefore(value));
}

template <typename T> float impl_ITextParagraphFormat<T>::RightIndent() const
{
	float value = {};
	check(shim()->get_RightIndent(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::RightIndent(float const value) const
{
	check(shim()->put_RightIndent(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextParagraphFormat<T>::RightToLeft() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(shim()->get_RightToLeft(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::RightToLeft(Windows::UI::Text::FormatEffect const value) const
{
	check(shim()->put_RightToLeft(value));
}

template <typename T> Windows::UI::Text::ParagraphStyle impl_ITextParagraphFormat<T>::Style() const
{
	Windows::UI::Text::ParagraphStyle value = {};
	check(shim()->get_Style(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::Style(Windows::UI::Text::ParagraphStyle const value) const
{
	check(shim()->put_Style(value));
}

template <typename T> float impl_ITextParagraphFormat<T>::SpaceAfter() const
{
	float value = {};
	check(shim()->get_SpaceAfter(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::SpaceAfter(float const value) const
{
	check(shim()->put_SpaceAfter(value));
}

template <typename T> float impl_ITextParagraphFormat<T>::SpaceBefore() const
{
	float value = {};
	check(shim()->get_SpaceBefore(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::SpaceBefore(float const value) const
{
	check(shim()->put_SpaceBefore(value));
}

template <typename T> Windows::UI::Text::FormatEffect impl_ITextParagraphFormat<T>::WidowControl() const
{
	Windows::UI::Text::FormatEffect value = {};
	check(shim()->get_WidowControl(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::WidowControl(Windows::UI::Text::FormatEffect const value) const
{
	check(shim()->put_WidowControl(value));
}

template <typename T> int impl_ITextParagraphFormat<T>::TabCount() const
{
	int value = {};
	check(shim()->get_TabCount(&value));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::AddTab(float const position, Windows::UI::Text::TabAlignment const align, Windows::UI::Text::TabLeader const leader) const
{
	check(shim()->abi_AddTab(position, align, leader));
}

template <typename T> void impl_ITextParagraphFormat<T>::ClearAllTabs() const
{
	check(shim()->abi_ClearAllTabs());
}

template <typename T> void impl_ITextParagraphFormat<T>::DeleteTab(float const position) const
{
	check(shim()->abi_DeleteTab(position));
}

template <typename T> Windows::UI::Text::ITextParagraphFormat impl_ITextParagraphFormat<T>::GetClone() const
{
	Windows::UI::Text::ITextParagraphFormat value;
	check(shim()->abi_GetClone(put(value)));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::GetTab(int const index, float & position, Windows::UI::Text::TabAlignment & align, Windows::UI::Text::TabLeader & leader) const
{
	check(shim()->abi_GetTab(index, &position, &align, &leader));
}

template <typename T> bool impl_ITextParagraphFormat<T>::IsEqual(Windows::UI::Text::ITextParagraphFormat const & format) const
{
	bool value = {};
	check(shim()->abi_IsEqual(get(format), put(value)));
	return value;
}

template <typename T> void impl_ITextParagraphFormat<T>::SetClone(Windows::UI::Text::ITextParagraphFormat const & format) const
{
	check(shim()->abi_SetClone(get(format)));
}

template <typename T> void impl_ITextParagraphFormat<T>::SetIndents(float const start, float const left, float const right) const
{
	check(shim()->abi_SetIndents(start, left, right));
}

template <typename T> void impl_ITextParagraphFormat<T>::SetLineSpacing(Windows::UI::Text::LineSpacingRule const rule, float const spacing) const
{
	check(shim()->abi_SetLineSpacing(rule, spacing));
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::Black() const
{
	Windows::UI::Text::FontWeight value = {};
	check(shim()->get_Black(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::Bold() const
{
	Windows::UI::Text::FontWeight value = {};
	check(shim()->get_Bold(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::ExtraBlack() const
{
	Windows::UI::Text::FontWeight value = {};
	check(shim()->get_ExtraBlack(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::ExtraBold() const
{
	Windows::UI::Text::FontWeight value = {};
	check(shim()->get_ExtraBold(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::ExtraLight() const
{
	Windows::UI::Text::FontWeight value = {};
	check(shim()->get_ExtraLight(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::Light() const
{
	Windows::UI::Text::FontWeight value = {};
	check(shim()->get_Light(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::Medium() const
{
	Windows::UI::Text::FontWeight value = {};
	check(shim()->get_Medium(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::Normal() const
{
	Windows::UI::Text::FontWeight value = {};
	check(shim()->get_Normal(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::SemiBold() const
{
	Windows::UI::Text::FontWeight value = {};
	check(shim()->get_SemiBold(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::SemiLight() const
{
	Windows::UI::Text::FontWeight value = {};
	check(shim()->get_SemiLight(&value));
	return value;
}

template <typename T> Windows::UI::Text::FontWeight impl_IFontWeightsStatics<T>::Thin() const
{
	Windows::UI::Text::FontWeight value = {};
	check(shim()->get_Thin(&value));
	return value;
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Text { namespace Core {

template <typename T> Windows::UI::Text::Core::CoreTextRange impl_ICoreTextTextRequest<T>::Range() const
{
	Windows::UI::Text::Core::CoreTextRange value = {};
	check(shim()->get_Range(&value));
	return value;
}

template <typename T> String impl_ICoreTextTextRequest<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> void impl_ICoreTextTextRequest<T>::Text(StringReference const & value) const
{
	check(shim()->put_Text(get(value)));
}

template <typename T> bool impl_ICoreTextTextRequest<T>::IsCanceled() const
{
	bool value = {};
	check(shim()->get_IsCanceled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Deferral impl_ICoreTextTextRequest<T>::GetDeferral() const
{
	Windows::Foundation::Deferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> Windows::UI::Text::Core::CoreTextTextRequest impl_ICoreTextTextRequestedEventArgs<T>::Request() const
{
	Windows::UI::Text::Core::CoreTextTextRequest value = nullptr;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> Windows::UI::Text::Core::CoreTextRange impl_ICoreTextSelectionRequest<T>::Selection() const
{
	Windows::UI::Text::Core::CoreTextRange value = {};
	check(shim()->get_Selection(&value));
	return value;
}

template <typename T> void impl_ICoreTextSelectionRequest<T>::Selection(Windows::UI::Text::Core::CoreTextRange const & value) const
{
	check(shim()->put_Selection(value));
}

template <typename T> bool impl_ICoreTextSelectionRequest<T>::IsCanceled() const
{
	bool value = {};
	check(shim()->get_IsCanceled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Deferral impl_ICoreTextSelectionRequest<T>::GetDeferral() const
{
	Windows::Foundation::Deferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> Windows::UI::Text::Core::CoreTextSelectionRequest impl_ICoreTextSelectionRequestedEventArgs<T>::Request() const
{
	Windows::UI::Text::Core::CoreTextSelectionRequest value = nullptr;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_ICoreTextLayoutBounds<T>::TextBounds() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_TextBounds(&value));
	return value;
}

template <typename T> void impl_ICoreTextLayoutBounds<T>::TextBounds(Windows::Foundation::Rect const & value) const
{
	check(shim()->put_TextBounds(value));
}

template <typename T> Windows::Foundation::Rect impl_ICoreTextLayoutBounds<T>::ControlBounds() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_ControlBounds(&value));
	return value;
}

template <typename T> void impl_ICoreTextLayoutBounds<T>::ControlBounds(Windows::Foundation::Rect const & value) const
{
	check(shim()->put_ControlBounds(value));
}

template <typename T> Windows::UI::Text::Core::CoreTextRange impl_ICoreTextLayoutRequest<T>::Range() const
{
	Windows::UI::Text::Core::CoreTextRange value = {};
	check(shim()->get_Range(&value));
	return value;
}

template <typename T> Windows::UI::Text::Core::CoreTextLayoutBounds impl_ICoreTextLayoutRequest<T>::LayoutBounds() const
{
	Windows::UI::Text::Core::CoreTextLayoutBounds value = nullptr;
	check(shim()->get_LayoutBounds(put(value)));
	return value;
}

template <typename T> bool impl_ICoreTextLayoutRequest<T>::IsCanceled() const
{
	bool value = {};
	check(shim()->get_IsCanceled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Deferral impl_ICoreTextLayoutRequest<T>::GetDeferral() const
{
	Windows::Foundation::Deferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> Windows::UI::Text::Core::CoreTextLayoutRequest impl_ICoreTextLayoutRequestedEventArgs<T>::Request() const
{
	Windows::UI::Text::Core::CoreTextLayoutRequest value = nullptr;
	check(shim()->get_Request(put(value)));
	return value;
}

template <typename T> Windows::UI::Text::Core::CoreTextRange impl_ICoreTextTextUpdatingEventArgs<T>::Range() const
{
	Windows::UI::Text::Core::CoreTextRange value = {};
	check(shim()->get_Range(&value));
	return value;
}

template <typename T> String impl_ICoreTextTextUpdatingEventArgs<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> Windows::UI::Text::Core::CoreTextRange impl_ICoreTextTextUpdatingEventArgs<T>::NewSelection() const
{
	Windows::UI::Text::Core::CoreTextRange value = {};
	check(shim()->get_NewSelection(&value));
	return value;
}

template <typename T> Windows::Globalization::Language impl_ICoreTextTextUpdatingEventArgs<T>::InputLanguage() const
{
	Windows::Globalization::Language value = nullptr;
	check(shim()->get_InputLanguage(put(value)));
	return value;
}

template <typename T> Windows::UI::Text::Core::CoreTextTextUpdatingResult impl_ICoreTextTextUpdatingEventArgs<T>::Result() const
{
	Windows::UI::Text::Core::CoreTextTextUpdatingResult value = {};
	check(shim()->get_Result(&value));
	return value;
}

template <typename T> void impl_ICoreTextTextUpdatingEventArgs<T>::Result(Windows::UI::Text::Core::CoreTextTextUpdatingResult const value) const
{
	check(shim()->put_Result(value));
}

template <typename T> bool impl_ICoreTextTextUpdatingEventArgs<T>::IsCanceled() const
{
	bool value = {};
	check(shim()->get_IsCanceled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Deferral impl_ICoreTextTextUpdatingEventArgs<T>::GetDeferral() const
{
	Windows::Foundation::Deferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> Windows::UI::Text::Core::CoreTextRange impl_ICoreTextSelectionUpdatingEventArgs<T>::Selection() const
{
	Windows::UI::Text::Core::CoreTextRange value = {};
	check(shim()->get_Selection(&value));
	return value;
}

template <typename T> Windows::UI::Text::Core::CoreTextSelectionUpdatingResult impl_ICoreTextSelectionUpdatingEventArgs<T>::Result() const
{
	Windows::UI::Text::Core::CoreTextSelectionUpdatingResult value = {};
	check(shim()->get_Result(&value));
	return value;
}

template <typename T> void impl_ICoreTextSelectionUpdatingEventArgs<T>::Result(Windows::UI::Text::Core::CoreTextSelectionUpdatingResult const value) const
{
	check(shim()->put_Result(value));
}

template <typename T> bool impl_ICoreTextSelectionUpdatingEventArgs<T>::IsCanceled() const
{
	bool value = {};
	check(shim()->get_IsCanceled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Deferral impl_ICoreTextSelectionUpdatingEventArgs<T>::GetDeferral() const
{
	Windows::Foundation::Deferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> Windows::UI::Text::Core::CoreTextRange impl_ICoreTextFormatUpdatingEventArgs<T>::Range() const
{
	Windows::UI::Text::Core::CoreTextRange value = {};
	check(shim()->get_Range(&value));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::ViewManagement::UIElementType> impl_ICoreTextFormatUpdatingEventArgs<T>::TextColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::ViewManagement::UIElementType> value;
	check(shim()->get_TextColor(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::ViewManagement::UIElementType> impl_ICoreTextFormatUpdatingEventArgs<T>::BackgroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::ViewManagement::UIElementType> value;
	check(shim()->get_BackgroundColor(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::ViewManagement::UIElementType> impl_ICoreTextFormatUpdatingEventArgs<T>::UnderlineColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::ViewManagement::UIElementType> value;
	check(shim()->get_UnderlineColor(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Text::UnderlineType> impl_ICoreTextFormatUpdatingEventArgs<T>::UnderlineType() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Text::UnderlineType> value;
	check(shim()->get_UnderlineType(put(value)));
	return value;
}

template <typename T> Windows::UI::Text::Core::CoreTextFormatUpdatingReason impl_ICoreTextFormatUpdatingEventArgs<T>::Reason() const
{
	Windows::UI::Text::Core::CoreTextFormatUpdatingReason value = {};
	check(shim()->get_Reason(&value));
	return value;
}

template <typename T> Windows::UI::Text::Core::CoreTextFormatUpdatingResult impl_ICoreTextFormatUpdatingEventArgs<T>::Result() const
{
	Windows::UI::Text::Core::CoreTextFormatUpdatingResult value = {};
	check(shim()->get_Result(&value));
	return value;
}

template <typename T> void impl_ICoreTextFormatUpdatingEventArgs<T>::Result(Windows::UI::Text::Core::CoreTextFormatUpdatingResult const value) const
{
	check(shim()->put_Result(value));
}

template <typename T> bool impl_ICoreTextFormatUpdatingEventArgs<T>::IsCanceled() const
{
	bool value = {};
	check(shim()->get_IsCanceled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Deferral impl_ICoreTextFormatUpdatingEventArgs<T>::GetDeferral() const
{
	Windows::Foundation::Deferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> bool impl_ICoreTextCompositionStartedEventArgs<T>::IsCanceled() const
{
	bool value = {};
	check(shim()->get_IsCanceled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Deferral impl_ICoreTextCompositionStartedEventArgs<T>::GetDeferral() const
{
	Windows::Foundation::Deferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> bool impl_ICoreTextCompositionCompletedEventArgs<T>::IsCanceled() const
{
	bool value = {};
	check(shim()->get_IsCanceled(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::UI::Text::Core::CoreTextCompositionSegment> impl_ICoreTextCompositionCompletedEventArgs<T>::CompositionSegments() const
{
	Windows::Foundation::Collections::IVectorView<Windows::UI::Text::Core::CoreTextCompositionSegment> value;
	check(shim()->get_CompositionSegments(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Deferral impl_ICoreTextCompositionCompletedEventArgs<T>::GetDeferral() const
{
	Windows::Foundation::Deferral value = nullptr;
	check(shim()->abi_GetDeferral(put(value)));
	return value;
}

template <typename T> long long impl_ICoreTextEditContext2<T>::NotifyFocusLeaveCompleted(Windows::Foundation::ITypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_NotifyFocusLeaveCompleted(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreTextEditContext2<T>::NotifyFocusLeaveCompleted(F handler) const
{
	return NotifyFocusLeaveCompleted(Windows::Foundation::TypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, IInspectable>(handler));
}

template <typename T> void impl_ICoreTextEditContext2<T>::NotifyFocusLeaveCompleted(long long const cookie) const
{
	check(shim()->remove_NotifyFocusLeaveCompleted(cookie));
}

template <typename T> String impl_ICoreTextEditContext<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_ICoreTextEditContext<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> Windows::UI::Text::Core::CoreTextInputScope impl_ICoreTextEditContext<T>::InputScope() const
{
	Windows::UI::Text::Core::CoreTextInputScope value = {};
	check(shim()->get_InputScope(&value));
	return value;
}

template <typename T> void impl_ICoreTextEditContext<T>::InputScope(Windows::UI::Text::Core::CoreTextInputScope const value) const
{
	check(shim()->put_InputScope(value));
}

template <typename T> bool impl_ICoreTextEditContext<T>::IsReadOnly() const
{
	bool value = {};
	check(shim()->get_IsReadOnly(put(value)));
	return value;
}

template <typename T> void impl_ICoreTextEditContext<T>::IsReadOnly(bool const value) const
{
	check(shim()->put_IsReadOnly(value));
}

template <typename T> Windows::UI::Text::Core::CoreTextInputPaneDisplayPolicy impl_ICoreTextEditContext<T>::InputPaneDisplayPolicy() const
{
	Windows::UI::Text::Core::CoreTextInputPaneDisplayPolicy value = {};
	check(shim()->get_InputPaneDisplayPolicy(&value));
	return value;
}

template <typename T> void impl_ICoreTextEditContext<T>::InputPaneDisplayPolicy(Windows::UI::Text::Core::CoreTextInputPaneDisplayPolicy const value) const
{
	check(shim()->put_InputPaneDisplayPolicy(value));
}

template <typename T> long long impl_ICoreTextEditContext<T>::TextRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, Windows::UI::Text::Core::CoreTextTextRequestedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_TextRequested(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreTextEditContext<T>::TextRequested(F handler) const
{
	return TextRequested(Windows::Foundation::TypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, Windows::UI::Text::Core::CoreTextTextRequestedEventArgs>(handler));
}

template <typename T> void impl_ICoreTextEditContext<T>::TextRequested(long long const cookie) const
{
	check(shim()->remove_TextRequested(cookie));
}

template <typename T> long long impl_ICoreTextEditContext<T>::SelectionRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, Windows::UI::Text::Core::CoreTextSelectionRequestedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_SelectionRequested(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreTextEditContext<T>::SelectionRequested(F handler) const
{
	return SelectionRequested(Windows::Foundation::TypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, Windows::UI::Text::Core::CoreTextSelectionRequestedEventArgs>(handler));
}

template <typename T> void impl_ICoreTextEditContext<T>::SelectionRequested(long long const cookie) const
{
	check(shim()->remove_SelectionRequested(cookie));
}

template <typename T> long long impl_ICoreTextEditContext<T>::LayoutRequested(Windows::Foundation::ITypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, Windows::UI::Text::Core::CoreTextLayoutRequestedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_LayoutRequested(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreTextEditContext<T>::LayoutRequested(F handler) const
{
	return LayoutRequested(Windows::Foundation::TypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, Windows::UI::Text::Core::CoreTextLayoutRequestedEventArgs>(handler));
}

template <typename T> void impl_ICoreTextEditContext<T>::LayoutRequested(long long const cookie) const
{
	check(shim()->remove_LayoutRequested(cookie));
}

template <typename T> long long impl_ICoreTextEditContext<T>::TextUpdating(Windows::Foundation::ITypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_TextUpdating(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreTextEditContext<T>::TextUpdating(F handler) const
{
	return TextUpdating(Windows::Foundation::TypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, Windows::UI::Text::Core::CoreTextTextUpdatingEventArgs>(handler));
}

template <typename T> void impl_ICoreTextEditContext<T>::TextUpdating(long long const cookie) const
{
	check(shim()->remove_TextUpdating(cookie));
}

template <typename T> long long impl_ICoreTextEditContext<T>::SelectionUpdating(Windows::Foundation::ITypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, Windows::UI::Text::Core::CoreTextSelectionUpdatingEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_SelectionUpdating(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreTextEditContext<T>::SelectionUpdating(F handler) const
{
	return SelectionUpdating(Windows::Foundation::TypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, Windows::UI::Text::Core::CoreTextSelectionUpdatingEventArgs>(handler));
}

template <typename T> void impl_ICoreTextEditContext<T>::SelectionUpdating(long long const cookie) const
{
	check(shim()->remove_SelectionUpdating(cookie));
}

template <typename T> long long impl_ICoreTextEditContext<T>::FormatUpdating(Windows::Foundation::ITypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_FormatUpdating(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreTextEditContext<T>::FormatUpdating(F handler) const
{
	return FormatUpdating(Windows::Foundation::TypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, Windows::UI::Text::Core::CoreTextFormatUpdatingEventArgs>(handler));
}

template <typename T> void impl_ICoreTextEditContext<T>::FormatUpdating(long long const cookie) const
{
	check(shim()->remove_FormatUpdating(cookie));
}

template <typename T> long long impl_ICoreTextEditContext<T>::CompositionStarted(Windows::Foundation::ITypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, Windows::UI::Text::Core::CoreTextCompositionStartedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_CompositionStarted(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreTextEditContext<T>::CompositionStarted(F handler) const
{
	return CompositionStarted(Windows::Foundation::TypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, Windows::UI::Text::Core::CoreTextCompositionStartedEventArgs>(handler));
}

template <typename T> void impl_ICoreTextEditContext<T>::CompositionStarted(long long const cookie) const
{
	check(shim()->remove_CompositionStarted(cookie));
}

template <typename T> long long impl_ICoreTextEditContext<T>::CompositionCompleted(Windows::Foundation::ITypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, Windows::UI::Text::Core::CoreTextCompositionCompletedEventArgs> const & handler) const
{
	long long cookie = {};
	check(shim()->add_CompositionCompleted(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreTextEditContext<T>::CompositionCompleted(F handler) const
{
	return CompositionCompleted(Windows::Foundation::TypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, Windows::UI::Text::Core::CoreTextCompositionCompletedEventArgs>(handler));
}

template <typename T> void impl_ICoreTextEditContext<T>::CompositionCompleted(long long const cookie) const
{
	check(shim()->remove_CompositionCompleted(cookie));
}

template <typename T> long long impl_ICoreTextEditContext<T>::FocusRemoved(Windows::Foundation::ITypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_FocusRemoved(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreTextEditContext<T>::FocusRemoved(F handler) const
{
	return FocusRemoved(Windows::Foundation::TypedEventHandler<Windows::UI::Text::Core::CoreTextEditContext, IInspectable>(handler));
}

template <typename T> void impl_ICoreTextEditContext<T>::FocusRemoved(long long const cookie) const
{
	check(shim()->remove_FocusRemoved(cookie));
}

template <typename T> void impl_ICoreTextEditContext<T>::NotifyFocusEnter() const
{
	check(shim()->abi_NotifyFocusEnter());
}

template <typename T> void impl_ICoreTextEditContext<T>::NotifyFocusLeave() const
{
	check(shim()->abi_NotifyFocusLeave());
}

template <typename T> void impl_ICoreTextEditContext<T>::NotifyTextChanged(Windows::UI::Text::Core::CoreTextRange const & modifiedRange, int const newLength, Windows::UI::Text::Core::CoreTextRange const & newSelection) const
{
	check(shim()->abi_NotifyTextChanged(modifiedRange, newLength, newSelection));
}

template <typename T> void impl_ICoreTextEditContext<T>::NotifySelectionChanged(Windows::UI::Text::Core::CoreTextRange const & selection) const
{
	check(shim()->abi_NotifySelectionChanged(selection));
}

template <typename T> void impl_ICoreTextEditContext<T>::NotifyLayoutChanged() const
{
	check(shim()->abi_NotifyLayoutChanged());
}

template <typename T> Windows::Globalization::Language impl_ICoreTextServicesManager<T>::InputLanguage() const
{
	Windows::Globalization::Language value = nullptr;
	check(shim()->get_InputLanguage(put(value)));
	return value;
}

template <typename T> long long impl_ICoreTextServicesManager<T>::InputLanguageChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::Text::Core::CoreTextServicesManager, IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_InputLanguageChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_ICoreTextServicesManager<T>::InputLanguageChanged(F handler) const
{
	return InputLanguageChanged(Windows::Foundation::TypedEventHandler<Windows::UI::Text::Core::CoreTextServicesManager, IInspectable>(handler));
}

template <typename T> void impl_ICoreTextServicesManager<T>::InputLanguageChanged(long long const cookie) const
{
	check(shim()->remove_InputLanguageChanged(cookie));
}

template <typename T> Windows::UI::Text::Core::CoreTextEditContext impl_ICoreTextServicesManager<T>::CreateEditContext() const
{
	Windows::UI::Text::Core::CoreTextEditContext value = nullptr;
	check(shim()->abi_CreateEditContext(put(value)));
	return value;
}

template <typename T> Windows::UI::Text::Core::CoreTextServicesManager impl_ICoreTextServicesManagerStatics<T>::GetForCurrentView() const
{
	Windows::UI::Text::Core::CoreTextServicesManager value = nullptr;
	check(shim()->abi_GetForCurrentView(put(value)));
	return value;
}

template <typename T> wchar_t impl_ICoreTextServicesStatics<T>::HiddenCharacter() const
{
	wchar_t value = {};
	check(shim()->get_HiddenCharacter(&value));
	return value;
}

template <typename T> String impl_ICoreTextCompositionSegment<T>::PreconversionString() const
{
	String value;
	check(shim()->get_PreconversionString(put(value)));
	return value;
}

template <typename T> Windows::UI::Text::Core::CoreTextRange impl_ICoreTextCompositionSegment<T>::Range() const
{
	Windows::UI::Text::Core::CoreTextRange value = {};
	check(shim()->get_Range(&value));
	return value;
}

}}}}}

namespace winrt { namespace Windows { namespace UI { namespace ViewManagement {

template <typename T> void impl_IApplicationViewSwitcherStatics<T>::DisableShowingMainViewOnActivation() const
{
	check(shim()->abi_DisableShowingMainViewOnActivation());
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IApplicationViewSwitcherStatics<T>::TryShowAsStandaloneAsync(int const viewId) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_TryShowAsStandaloneAsync(viewId, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IApplicationViewSwitcherStatics<T>::TryShowAsStandaloneAsync(int const viewId, Windows::UI::ViewManagement::ViewSizePreference const sizePreference) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_TryShowAsStandaloneWithSizePreferenceAsync(viewId, sizePreference, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IApplicationViewSwitcherStatics<T>::TryShowAsStandaloneAsync(int const viewId, Windows::UI::ViewManagement::ViewSizePreference const sizePreference, int const anchorViewId, Windows::UI::ViewManagement::ViewSizePreference const anchorSizePreference) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_TryShowAsStandaloneWithAnchorViewAndSizePreferenceAsync(viewId, sizePreference, anchorViewId, anchorSizePreference, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationViewSwitcherStatics<T>::SwitchAsync(int const viewId) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_SwitchAsync(viewId, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationViewSwitcherStatics<T>::SwitchAsync(int const toViewId, int const fromViewId) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_SwitchFromViewAsync(toViewId, fromViewId, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IApplicationViewSwitcherStatics<T>::SwitchAsync(int const toViewId, int const fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions const options) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_SwitchFromViewWithOptionsAsync(toViewId, fromViewId, options, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IApplicationViewSwitcherStatics<T>::PrepareForCustomAnimatedSwitchAsync(int const toViewId, int const fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions const options) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_PrepareForCustomAnimatedSwitchAsync(toViewId, fromViewId, options, put(operation)));
	return operation;
}

template <typename T> void impl_IApplicationViewSwitcherStatics2<T>::DisableSystemViewActivationPolicy() const
{
	check(shim()->abi_DisableSystemViewActivationPolicy());
}

template <typename T> int impl_IApplicationViewInteropStatics<T>::GetApplicationViewIdForWindow(Windows::UI::Core::ICoreWindow const & window) const
{
	int id = {};
	check(shim()->abi_GetApplicationViewIdForWindow(get(window), &id));
	return id;
}

template <typename T> Windows::UI::ViewManagement::ApplicationViewState impl_IApplicationViewStatics<T>::Value() const
{
	Windows::UI::ViewManagement::ApplicationViewState value = {};
	check(shim()->get_Value(&value));
	return value;
}

template <typename T> bool impl_IApplicationViewStatics<T>::TryUnsnap() const
{
	bool success = {};
	check(shim()->abi_TryUnsnap(put(success)));
	return success;
}

template <typename T> Windows::UI::ViewManagement::ApplicationView impl_IApplicationViewStatics2<T>::GetForCurrentView() const
{
	Windows::UI::ViewManagement::ApplicationView current = nullptr;
	check(shim()->abi_GetForCurrentView(put(current)));
	return current;
}

template <typename T> bool impl_IApplicationViewStatics2<T>::TerminateAppOnFinalViewClose() const
{
	bool value = {};
	check(shim()->get_TerminateAppOnFinalViewClose(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewStatics2<T>::TerminateAppOnFinalViewClose(bool const value) const
{
	check(shim()->put_TerminateAppOnFinalViewClose(value));
}

template <typename T> Windows::UI::ViewManagement::ApplicationViewWindowingMode impl_IApplicationViewStatics3<T>::PreferredLaunchWindowingMode() const
{
	Windows::UI::ViewManagement::ApplicationViewWindowingMode value = {};
	check(shim()->get_PreferredLaunchWindowingMode(&value));
	return value;
}

template <typename T> void impl_IApplicationViewStatics3<T>::PreferredLaunchWindowingMode(Windows::UI::ViewManagement::ApplicationViewWindowingMode const value) const
{
	check(shim()->put_PreferredLaunchWindowingMode(value));
}

template <typename T> Windows::Foundation::Size impl_IApplicationViewStatics3<T>::PreferredLaunchViewSize() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_PreferredLaunchViewSize(&value));
	return value;
}

template <typename T> void impl_IApplicationViewStatics3<T>::PreferredLaunchViewSize(Windows::Foundation::Size const & value) const
{
	check(shim()->put_PreferredLaunchViewSize(value));
}

template <typename T> Windows::UI::ViewManagement::ApplicationViewOrientation impl_IApplicationView<T>::Orientation() const
{
	Windows::UI::ViewManagement::ApplicationViewOrientation value = {};
	check(shim()->get_Orientation(&value));
	return value;
}

template <typename T> bool impl_IApplicationView<T>::AdjacentToLeftDisplayEdge() const
{
	bool value = {};
	check(shim()->get_AdjacentToLeftDisplayEdge(put(value)));
	return value;
}

template <typename T> bool impl_IApplicationView<T>::AdjacentToRightDisplayEdge() const
{
	bool value = {};
	check(shim()->get_AdjacentToRightDisplayEdge(put(value)));
	return value;
}

template <typename T> bool impl_IApplicationView<T>::IsFullScreen() const
{
	bool value = {};
	check(shim()->get_IsFullScreen(put(value)));
	return value;
}

template <typename T> bool impl_IApplicationView<T>::IsOnLockScreen() const
{
	bool value = {};
	check(shim()->get_IsOnLockScreen(put(value)));
	return value;
}

template <typename T> bool impl_IApplicationView<T>::IsScreenCaptureEnabled() const
{
	bool value = {};
	check(shim()->get_IsScreenCaptureEnabled(put(value)));
	return value;
}

template <typename T> void impl_IApplicationView<T>::IsScreenCaptureEnabled(bool const value) const
{
	check(shim()->put_IsScreenCaptureEnabled(value));
}

template <typename T> void impl_IApplicationView<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> String impl_IApplicationView<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> int impl_IApplicationView<T>::Id() const
{
	int value = {};
	check(shim()->get_Id(&value));
	return value;
}

template <typename T> long long impl_IApplicationView<T>::Consolidated(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::ApplicationView, Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Consolidated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IApplicationView<T>::Consolidated(F handler) const
{
	return Consolidated(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::ApplicationView, Windows::UI::ViewManagement::ApplicationViewConsolidatedEventArgs>(handler));
}

template <typename T> void impl_IApplicationView<T>::Consolidated(long long const token) const
{
	check(shim()->remove_Consolidated(token));
}

template <typename T> bool impl_IApplicationView2<T>::SuppressSystemOverlays() const
{
	bool value = {};
	check(shim()->get_SuppressSystemOverlays(put(value)));
	return value;
}

template <typename T> void impl_IApplicationView2<T>::SuppressSystemOverlays(bool const value) const
{
	check(shim()->put_SuppressSystemOverlays(value));
}

template <typename T> Windows::Foundation::Rect impl_IApplicationView2<T>::VisibleBounds() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_VisibleBounds(&value));
	return value;
}

template <typename T> long long impl_IApplicationView2<T>::VisibleBoundsChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::ApplicationView, IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_VisibleBoundsChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IApplicationView2<T>::VisibleBoundsChanged(F handler) const
{
	return VisibleBoundsChanged(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::ApplicationView, IInspectable>(handler));
}

template <typename T> void impl_IApplicationView2<T>::VisibleBoundsChanged(long long const token) const
{
	check(shim()->remove_VisibleBoundsChanged(token));
}

template <typename T> bool impl_IApplicationView2<T>::SetDesiredBoundsMode(Windows::UI::ViewManagement::ApplicationViewBoundsMode const boundsMode) const
{
	bool success = {};
	check(shim()->abi_SetDesiredBoundsMode(boundsMode, put(success)));
	return success;
}

template <typename T> Windows::UI::ViewManagement::ApplicationViewBoundsMode impl_IApplicationView2<T>::DesiredBoundsMode() const
{
	Windows::UI::ViewManagement::ApplicationViewBoundsMode value = {};
	check(shim()->get_DesiredBoundsMode(&value));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check(shim()->put_ForegroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ForegroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check(shim()->get_ForegroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::BackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check(shim()->put_BackgroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::BackgroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check(shim()->get_BackgroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ButtonForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check(shim()->put_ButtonForegroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ButtonForegroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check(shim()->get_ButtonForegroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ButtonBackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check(shim()->put_ButtonBackgroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ButtonBackgroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check(shim()->get_ButtonBackgroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ButtonHoverForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check(shim()->put_ButtonHoverForegroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ButtonHoverForegroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check(shim()->get_ButtonHoverForegroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ButtonHoverBackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check(shim()->put_ButtonHoverBackgroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ButtonHoverBackgroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check(shim()->get_ButtonHoverBackgroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ButtonPressedForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check(shim()->put_ButtonPressedForegroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ButtonPressedForegroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check(shim()->get_ButtonPressedForegroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ButtonPressedBackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check(shim()->put_ButtonPressedBackgroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ButtonPressedBackgroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check(shim()->get_ButtonPressedBackgroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::InactiveForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check(shim()->put_InactiveForegroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::InactiveForegroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check(shim()->get_InactiveForegroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::InactiveBackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check(shim()->put_InactiveBackgroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::InactiveBackgroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check(shim()->get_InactiveBackgroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ButtonInactiveForegroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check(shim()->put_ButtonInactiveForegroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ButtonInactiveForegroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check(shim()->get_ButtonInactiveForegroundColor(put(value)));
	return value;
}

template <typename T> void impl_IApplicationViewTitleBar<T>::ButtonInactiveBackgroundColor(Windows::Foundation::IReference<winrt::Windows::UI::Color> const & value) const
{
	check(shim()->put_ButtonInactiveBackgroundColor(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::UI::Color> impl_IApplicationViewTitleBar<T>::ButtonInactiveBackgroundColor() const
{
	Windows::Foundation::IReference<winrt::Windows::UI::Color> value;
	check(shim()->get_ButtonInactiveBackgroundColor(put(value)));
	return value;
}

template <typename T> Windows::UI::ViewManagement::ApplicationViewTitleBar impl_IApplicationView3<T>::TitleBar() const
{
	Windows::UI::ViewManagement::ApplicationViewTitleBar value = nullptr;
	check(shim()->get_TitleBar(put(value)));
	return value;
}

template <typename T> Windows::UI::ViewManagement::FullScreenSystemOverlayMode impl_IApplicationView3<T>::FullScreenSystemOverlayMode() const
{
	Windows::UI::ViewManagement::FullScreenSystemOverlayMode value = {};
	check(shim()->get_FullScreenSystemOverlayMode(&value));
	return value;
}

template <typename T> void impl_IApplicationView3<T>::FullScreenSystemOverlayMode(Windows::UI::ViewManagement::FullScreenSystemOverlayMode const value) const
{
	check(shim()->put_FullScreenSystemOverlayMode(value));
}

template <typename T> bool impl_IApplicationView3<T>::IsFullScreenMode() const
{
	bool value = {};
	check(shim()->get_IsFullScreenMode(put(value)));
	return value;
}

template <typename T> bool impl_IApplicationView3<T>::TryEnterFullScreenMode() const
{
	bool success = {};
	check(shim()->abi_TryEnterFullScreenMode(put(success)));
	return success;
}

template <typename T> void impl_IApplicationView3<T>::ExitFullScreenMode() const
{
	check(shim()->abi_ExitFullScreenMode());
}

template <typename T> void impl_IApplicationView3<T>::ShowStandardSystemOverlays() const
{
	check(shim()->abi_ShowStandardSystemOverlays());
}

template <typename T> bool impl_IApplicationView3<T>::TryResizeView(Windows::Foundation::Size const & value) const
{
	bool success = {};
	check(shim()->abi_TryResizeView(value, put(success)));
	return success;
}

template <typename T> void impl_IApplicationView3<T>::SetPreferredMinSize(Windows::Foundation::Size const & minSize) const
{
	check(shim()->abi_SetPreferredMinSize(minSize));
}

template <typename T> bool impl_IApplicationViewFullscreenStatics<T>::TryUnsnapToFullscreen() const
{
	bool success = {};
	check(shim()->abi_TryUnsnapToFullscreen(put(success)));
	return success;
}

template <typename T> bool impl_IApplicationViewConsolidatedEventArgs<T>::IsUserInitiated() const
{
	bool value = {};
	check(shim()->get_IsUserInitiated(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IActivationViewSwitcher<T>::ShowAsStandaloneAsync(int const viewId) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ShowAsStandaloneAsync(viewId, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IActivationViewSwitcher<T>::ShowAsStandaloneAsync(int const viewId, Windows::UI::ViewManagement::ViewSizePreference const sizePreference) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_ShowAsStandaloneWithSizePreferenceAsync(viewId, sizePreference, put(operation)));
	return operation;
}

template <typename T> bool impl_IActivationViewSwitcher<T>::IsViewPresentedOnActivationVirtualDesktop(int const viewId) const
{
	bool value = {};
	check(shim()->abi_IsViewPresentedOnActivationVirtualDesktop(viewId, put(value)));
	return value;
}

template <typename T> int impl_IApplicationViewTransferContext<T>::ViewId() const
{
	int value = {};
	check(shim()->get_ViewId(&value));
	return value;
}

template <typename T> void impl_IApplicationViewTransferContext<T>::ViewId(int const value) const
{
	check(shim()->put_ViewId(value));
}

template <typename T> String impl_IApplicationViewTransferContextStatics<T>::DataPackageFormatId() const
{
	String value;
	check(shim()->get_DataPackageFormatId(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Rect impl_IInputPaneVisibilityEventArgs<T>::OccludedRect() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_OccludedRect(&value));
	return value;
}

template <typename T> void impl_IInputPaneVisibilityEventArgs<T>::EnsuredFocusedElementInView(bool const value) const
{
	check(shim()->put_EnsuredFocusedElementInView(value));
}

template <typename T> bool impl_IInputPaneVisibilityEventArgs<T>::EnsuredFocusedElementInView() const
{
	bool value = {};
	check(shim()->get_EnsuredFocusedElementInView(put(value)));
	return value;
}

template <typename T> long long impl_IInputPane<T>::Showing(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Showing(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IInputPane<T>::Showing(F handler) const
{
	return Showing(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs>(handler));
}

template <typename T> void impl_IInputPane<T>::Showing(long long const token) const
{
	check(shim()->remove_Showing(token));
}

template <typename T> long long impl_IInputPane<T>::Hiding(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs> const & handler) const
{
	long long token = {};
	check(shim()->add_Hiding(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IInputPane<T>::Hiding(F handler) const
{
	return Hiding(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::InputPane, Windows::UI::ViewManagement::InputPaneVisibilityEventArgs>(handler));
}

template <typename T> void impl_IInputPane<T>::Hiding(long long const token) const
{
	check(shim()->remove_Hiding(token));
}

template <typename T> Windows::Foundation::Rect impl_IInputPane<T>::OccludedRect() const
{
	Windows::Foundation::Rect value = {};
	check(shim()->get_OccludedRect(&value));
	return value;
}

template <typename T> bool impl_IInputPane2<T>::TryShow() const
{
	bool result = {};
	check(shim()->abi_TryShow(put(result)));
	return result;
}

template <typename T> bool impl_IInputPane2<T>::TryHide() const
{
	bool result = {};
	check(shim()->abi_TryHide(put(result)));
	return result;
}

template <typename T> bool impl_IInputPaneControl<T>::Visible() const
{
	bool value = {};
	check(shim()->get_Visible(put(value)));
	return value;
}

template <typename T> void impl_IInputPaneControl<T>::Visible(bool const value) const
{
	check(shim()->put_Visible(value));
}

template <typename T> Windows::UI::ViewManagement::InputPane impl_IInputPaneStatics<T>::GetForCurrentView() const
{
	Windows::UI::ViewManagement::InputPane inputPane = nullptr;
	check(shim()->abi_GetForCurrentView(put(inputPane)));
	return inputPane;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IProjectionManagerStatics<T>::StartProjectingAsync(int const projectionViewId, int const anchorViewId) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_StartProjectingAsync(projectionViewId, anchorViewId, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IProjectionManagerStatics<T>::SwapDisplaysForViewsAsync(int const projectionViewId, int const anchorViewId) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_SwapDisplaysForViewsAsync(projectionViewId, anchorViewId, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncAction impl_IProjectionManagerStatics<T>::StopProjectingAsync(int const projectionViewId, int const anchorViewId) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_StopProjectingAsync(projectionViewId, anchorViewId, put(operation)));
	return operation;
}

template <typename T> bool impl_IProjectionManagerStatics<T>::ProjectionDisplayAvailable() const
{
	bool value = {};
	check(shim()->get_ProjectionDisplayAvailable(put(value)));
	return value;
}

template <typename T> long long impl_IProjectionManagerStatics<T>::ProjectionDisplayAvailableChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler) const
{
	long long token = {};
	check(shim()->add_ProjectionDisplayAvailableChanged(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IProjectionManagerStatics<T>::ProjectionDisplayAvailableChanged(F handler) const
{
	return ProjectionDisplayAvailableChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

template <typename T> void impl_IProjectionManagerStatics<T>::ProjectionDisplayAvailableChanged(long long const token) const
{
	check(shim()->remove_ProjectionDisplayAvailableChanged(token));
}

template <typename T> Windows::Foundation::IAsyncAction impl_IProjectionManagerStatics2<T>::StartProjectingAsync(int const projectionViewId, int const anchorViewId, Windows::Devices::Enumeration::DeviceInformation const & displayDeviceInfo) const
{
	Windows::Foundation::IAsyncAction operation;
	check(shim()->abi_StartProjectingWithDeviceInfoAsync(projectionViewId, anchorViewId, get(displayDeviceInfo), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IProjectionManagerStatics2<T>::RequestStartProjectingAsync(int const projectionViewId, int const anchorViewId, Windows::Foundation::Rect const & selection) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_RequestStartProjectingAsync(projectionViewId, anchorViewId, selection, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperation<bool> impl_IProjectionManagerStatics2<T>::RequestStartProjectingAsync(int const projectionViewId, int const anchorViewId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const prefferedPlacement) const
{
	Windows::Foundation::IAsyncOperation<bool> operation;
	check(shim()->abi_RequestStartProjectingWithPlacementAsync(projectionViewId, anchorViewId, selection, prefferedPlacement, put(operation)));
	return operation;
}

template <typename T> String impl_IProjectionManagerStatics2<T>::GetDeviceSelector() const
{
	String selector;
	check(shim()->abi_GetDeviceSelector(put(selector)));
	return selector;
}

template <typename T> Windows::UI::ViewManagement::UserInteractionMode impl_IUIViewSettings<T>::UserInteractionMode() const
{
	Windows::UI::ViewManagement::UserInteractionMode value = {};
	check(shim()->get_UserInteractionMode(&value));
	return value;
}

template <typename T> Windows::UI::ViewManagement::UIViewSettings impl_IUIViewSettingsStatics<T>::GetForCurrentView() const
{
	Windows::UI::ViewManagement::UIViewSettings current = nullptr;
	check(shim()->abi_GetForCurrentView(put(current)));
	return current;
}

template <typename T> bool impl_IAccessibilitySettings<T>::HighContrast() const
{
	bool value = {};
	check(shim()->get_HighContrast(put(value)));
	return value;
}

template <typename T> String impl_IAccessibilitySettings<T>::HighContrastScheme() const
{
	String value;
	check(shim()->get_HighContrastScheme(put(value)));
	return value;
}

template <typename T> long long impl_IAccessibilitySettings<T>::HighContrastChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::AccessibilitySettings, IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_HighContrastChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IAccessibilitySettings<T>::HighContrastChanged(F handler) const
{
	return HighContrastChanged(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::AccessibilitySettings, IInspectable>(handler));
}

template <typename T> void impl_IAccessibilitySettings<T>::HighContrastChanged(long long const cookie) const
{
	check(shim()->remove_HighContrastChanged(cookie));
}

template <typename T> Windows::UI::ViewManagement::HandPreference impl_IUISettings<T>::HandPreference() const
{
	Windows::UI::ViewManagement::HandPreference value = {};
	check(shim()->get_HandPreference(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IUISettings<T>::CursorSize() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_CursorSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IUISettings<T>::ScrollBarSize() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_ScrollBarSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IUISettings<T>::ScrollBarArrowSize() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_ScrollBarArrowSize(&value));
	return value;
}

template <typename T> Windows::Foundation::Size impl_IUISettings<T>::ScrollBarThumbBoxSize() const
{
	Windows::Foundation::Size value = {};
	check(shim()->get_ScrollBarThumbBoxSize(&value));
	return value;
}

template <typename T> unsigned impl_IUISettings<T>::MessageDuration() const
{
	unsigned value = {};
	check(shim()->get_MessageDuration(&value));
	return value;
}

template <typename T> bool impl_IUISettings<T>::AnimationsEnabled() const
{
	bool value = {};
	check(shim()->get_AnimationsEnabled(put(value)));
	return value;
}

template <typename T> bool impl_IUISettings<T>::CaretBrowsingEnabled() const
{
	bool value = {};
	check(shim()->get_CaretBrowsingEnabled(put(value)));
	return value;
}

template <typename T> unsigned impl_IUISettings<T>::CaretBlinkRate() const
{
	unsigned value = {};
	check(shim()->get_CaretBlinkRate(&value));
	return value;
}

template <typename T> unsigned impl_IUISettings<T>::CaretWidth() const
{
	unsigned value = {};
	check(shim()->get_CaretWidth(&value));
	return value;
}

template <typename T> unsigned impl_IUISettings<T>::DoubleClickTime() const
{
	unsigned value = {};
	check(shim()->get_DoubleClickTime(&value));
	return value;
}

template <typename T> unsigned impl_IUISettings<T>::MouseHoverTime() const
{
	unsigned value = {};
	check(shim()->get_MouseHoverTime(&value));
	return value;
}

template <typename T> Windows::UI::Color impl_IUISettings<T>::UIElementColor(Windows::UI::ViewManagement::UIElementType const desiredElement) const
{
	Windows::UI::Color value = {};
	check(shim()->abi_UIElementColor(desiredElement, &value));
	return value;
}

template <typename T> double impl_IUISettings2<T>::TextScaleFactor() const
{
	double value = {};
	check(shim()->get_TextScaleFactor(&value));
	return value;
}

template <typename T> long long impl_IUISettings2<T>::TextScaleFactorChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::UISettings, IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_TextScaleFactorChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IUISettings2<T>::TextScaleFactorChanged(F handler) const
{
	return TextScaleFactorChanged(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::UISettings, IInspectable>(handler));
}

template <typename T> void impl_IUISettings2<T>::TextScaleFactorChanged(long long const cookie) const
{
	check(shim()->remove_TextScaleFactorChanged(cookie));
}

template <typename T> Windows::UI::Color impl_IUISettings3<T>::GetColorValue(Windows::UI::ViewManagement::UIColorType const desiredColor) const
{
	Windows::UI::Color value = {};
	check(shim()->abi_GetColorValue(desiredColor, &value));
	return value;
}

template <typename T> long long impl_IUISettings3<T>::ColorValuesChanged(Windows::Foundation::ITypedEventHandler<Windows::UI::ViewManagement::UISettings, IInspectable> const & handler) const
{
	long long cookie = {};
	check(shim()->add_ColorValuesChanged(get(handler), &cookie));
	return cookie;
}

template <typename T> template <typename F> long long impl_IUISettings3<T>::ColorValuesChanged(F handler) const
{
	return ColorValuesChanged(Windows::Foundation::TypedEventHandler<Windows::UI::ViewManagement::UISettings, IInspectable>(handler));
}

template <typename T> void impl_IUISettings3<T>::ColorValuesChanged(long long const cookie) const
{
	check(shim()->remove_ColorValuesChanged(cookie));
}

template <typename T> bool impl_IApplicationViewScalingStatics<T>::DisableLayoutScaling() const
{
	bool value = {};
	check(shim()->get_DisableLayoutScaling(put(value)));
	return value;
}

template <typename T> bool impl_IApplicationViewScalingStatics<T>::TrySetDisableLayoutScaling(bool const disableLayoutScaling) const
{
	bool success = {};
	check(shim()->abi_TrySetDisableLayoutScaling(disableLayoutScaling, put(success)));
	return success;
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace WebUI {

template <typename T> void impl_IActivatedEventHandler<T>::Invoke(IInspectable const & sender, Windows::ApplicationModel::Activation::IActivatedEventArgs const & eventArgs) const
{
	check(shim()->abi_Invoke(get(sender), get(eventArgs)));
}

template <typename T> void impl_IResumingEventHandler<T>::Invoke(IInspectable const & sender) const
{
	check(shim()->abi_Invoke(get(sender)));
}

template <typename T> void impl_ISuspendingEventHandler<T>::Invoke(IInspectable const & sender, Windows::ApplicationModel::ISuspendingEventArgs const & e) const
{
	check(shim()->abi_Invoke(get(sender), get(e)));
}

template <typename T> void impl_INavigatedEventHandler<T>::Invoke(IInspectable const & sender, Windows::UI::WebUI::IWebUINavigatedEventArgs const & e) const
{
	check(shim()->abi_Invoke(get(sender), get(e)));
}

template <typename T> void impl_IActivatedDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::UI::WebUI::ActivatedDeferral impl_IActivatedOperation<T>::GetDeferral() const
{
	Windows::UI::WebUI::ActivatedDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> Windows::UI::WebUI::ActivatedOperation impl_IActivatedEventArgsDeferral<T>::ActivatedOperation() const
{
	Windows::UI::WebUI::ActivatedOperation value = nullptr;
	check(shim()->get_ActivatedOperation(put(value)));
	return value;
}

template <typename T> Windows::UI::WebUI::WebUINavigatedOperation impl_IWebUINavigatedEventArgs<T>::NavigatedOperation() const
{
	Windows::UI::WebUI::WebUINavigatedOperation value = nullptr;
	check(shim()->get_NavigatedOperation(put(value)));
	return value;
}

template <typename T> bool impl_IWebUIBackgroundTaskInstance<T>::Succeeded() const
{
	bool succeeded = {};
	check(shim()->get_Succeeded(put(succeeded)));
	return succeeded;
}

template <typename T> void impl_IWebUIBackgroundTaskInstance<T>::Succeeded(bool const succeeded) const
{
	check(shim()->put_Succeeded(succeeded));
}

template <typename T> Windows::UI::WebUI::IWebUIBackgroundTaskInstance impl_IWebUIBackgroundTaskInstanceStatics<T>::Current() const
{
	Windows::UI::WebUI::IWebUIBackgroundTaskInstance backgroundTaskInstance;
	check(shim()->get_Current(put(backgroundTaskInstance)));
	return backgroundTaskInstance;
}

template <typename T> void impl_IWebUINavigatedDeferral<T>::Complete() const
{
	check(shim()->abi_Complete());
}

template <typename T> Windows::UI::WebUI::WebUINavigatedDeferral impl_IWebUINavigatedOperation<T>::GetDeferral() const
{
	Windows::UI::WebUI::WebUINavigatedDeferral deferral = nullptr;
	check(shim()->abi_GetDeferral(put(deferral)));
	return deferral;
}

template <typename T> long long impl_IWebUIActivationStatics<T>::Activated(Windows::UI::WebUI::IActivatedEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_Activated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IWebUIActivationStatics<T>::Activated(F handler) const
{
	return Activated(Windows::UI::WebUI::ActivatedEventHandler(handler));
}

template <typename T> void impl_IWebUIActivationStatics<T>::Activated(long long const token) const
{
	check(shim()->remove_Activated(token));
}

template <typename T> long long impl_IWebUIActivationStatics<T>::Suspending(Windows::UI::WebUI::ISuspendingEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_Suspending(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IWebUIActivationStatics<T>::Suspending(F handler) const
{
	return Suspending(Windows::UI::WebUI::SuspendingEventHandler(handler));
}

template <typename T> void impl_IWebUIActivationStatics<T>::Suspending(long long const token) const
{
	check(shim()->remove_Suspending(token));
}

template <typename T> long long impl_IWebUIActivationStatics<T>::Resuming(Windows::UI::WebUI::IResumingEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_Resuming(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IWebUIActivationStatics<T>::Resuming(F handler) const
{
	return Resuming(Windows::UI::WebUI::ResumingEventHandler(handler));
}

template <typename T> void impl_IWebUIActivationStatics<T>::Resuming(long long const token) const
{
	check(shim()->remove_Resuming(token));
}

template <typename T> long long impl_IWebUIActivationStatics<T>::Navigated(Windows::UI::WebUI::INavigatedEventHandler const & handler) const
{
	long long token = {};
	check(shim()->add_Navigated(get(handler), &token));
	return token;
}

template <typename T> template <typename F> long long impl_IWebUIActivationStatics<T>::Navigated(F handler) const
{
	return Navigated(Windows::UI::WebUI::NavigatedEventHandler(handler));
}

template <typename T> void impl_IWebUIActivationStatics<T>::Navigated(long long const token) const
{
	check(shim()->remove_Navigated(token));
}

template <typename T> Windows::UI::WebUI::PrintContent impl_IHtmlPrintDocumentSource<T>::Content() const
{
	Windows::UI::WebUI::PrintContent value = {};
	check(shim()->get_Content(&value));
	return value;
}

template <typename T> void impl_IHtmlPrintDocumentSource<T>::Content(Windows::UI::WebUI::PrintContent const value) const
{
	check(shim()->put_Content(value));
}

template <typename T> float impl_IHtmlPrintDocumentSource<T>::LeftMargin() const
{
	float value = {};
	check(shim()->get_LeftMargin(&value));
	return value;
}

template <typename T> void impl_IHtmlPrintDocumentSource<T>::LeftMargin(float const value) const
{
	check(shim()->put_LeftMargin(value));
}

template <typename T> float impl_IHtmlPrintDocumentSource<T>::TopMargin() const
{
	float value = {};
	check(shim()->get_TopMargin(&value));
	return value;
}

template <typename T> void impl_IHtmlPrintDocumentSource<T>::TopMargin(float const value) const
{
	check(shim()->put_TopMargin(value));
}

template <typename T> float impl_IHtmlPrintDocumentSource<T>::RightMargin() const
{
	float value = {};
	check(shim()->get_RightMargin(&value));
	return value;
}

template <typename T> void impl_IHtmlPrintDocumentSource<T>::RightMargin(float const value) const
{
	check(shim()->put_RightMargin(value));
}

template <typename T> float impl_IHtmlPrintDocumentSource<T>::BottomMargin() const
{
	float value = {};
	check(shim()->get_BottomMargin(&value));
	return value;
}

template <typename T> void impl_IHtmlPrintDocumentSource<T>::BottomMargin(float const value) const
{
	check(shim()->put_BottomMargin(value));
}

template <typename T> bool impl_IHtmlPrintDocumentSource<T>::EnableHeaderFooter() const
{
	bool value = {};
	check(shim()->get_EnableHeaderFooter(put(value)));
	return value;
}

template <typename T> void impl_IHtmlPrintDocumentSource<T>::EnableHeaderFooter(bool const value) const
{
	check(shim()->put_EnableHeaderFooter(value));
}

template <typename T> bool impl_IHtmlPrintDocumentSource<T>::ShrinkToFit() const
{
	bool value = {};
	check(shim()->get_ShrinkToFit(put(value)));
	return value;
}

template <typename T> void impl_IHtmlPrintDocumentSource<T>::ShrinkToFit(bool const value) const
{
	check(shim()->put_ShrinkToFit(value));
}

template <typename T> float impl_IHtmlPrintDocumentSource<T>::PercentScale() const
{
	float pScalePercent = {};
	check(shim()->get_PercentScale(&pScalePercent));
	return pScalePercent;
}

template <typename T> void impl_IHtmlPrintDocumentSource<T>::PercentScale(float const scalePercent) const
{
	check(shim()->put_PercentScale(scalePercent));
}

template <typename T> String impl_IHtmlPrintDocumentSource<T>::PageRange() const
{
	String pstrPageRange;
	check(shim()->get_PageRange(put(pstrPageRange)));
	return pstrPageRange;
}

template <typename T> bool impl_IHtmlPrintDocumentSource<T>::TrySetPageRange(StringReference const & strPageRange) const
{
	bool pfSuccess = {};
	check(shim()->abi_TrySetPageRange(get(strPageRange), put(pfSuccess)));
	return pfSuccess;
}

}}}}

namespace winrt { namespace Windows { namespace Web {

template <typename T> Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> impl_IUriToStreamResolver<T>::UriToStreamAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IInputStream> operation;
	check(shim()->abi_UriToStreamAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Web::WebErrorStatus impl_IWebErrorStatics<T>::GetStatus(int const hresult) const
{
	Windows::Web::WebErrorStatus status = {};
	check(shim()->abi_GetStatus(hresult, &status));
	return status;
}

}}}

namespace winrt { namespace Windows { namespace Web { namespace AtomPub {

template <typename T> Windows::Web::Syndication::ISyndicationText impl_IResourceCollection<T>::Title() const
{
	Windows::Web::Syndication::ISyndicationText value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IResourceCollection<T>::Uri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Web::Syndication::SyndicationCategory> impl_IResourceCollection<T>::Categories() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Web::Syndication::SyndicationCategory> value;
	check(shim()->get_Categories(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<String> impl_IResourceCollection<T>::Accepts() const
{
	Windows::Foundation::Collections::IVectorView<String> value;
	check(shim()->get_Accepts(put(value)));
	return value;
}

template <typename T> Windows::Web::Syndication::ISyndicationText impl_IWorkspace<T>::Title() const
{
	Windows::Web::Syndication::ISyndicationText value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Web::AtomPub::ResourceCollection> impl_IWorkspace<T>::Collections() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Web::AtomPub::ResourceCollection> value;
	check(shim()->get_Collections(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Web::AtomPub::Workspace> impl_IServiceDocument<T>::Workspaces() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Web::AtomPub::Workspace> value;
	check(shim()->get_Workspaces(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::AtomPub::ServiceDocument, winrt::Windows::Web::Syndication::RetrievalProgress> impl_IAtomPubClient<T>::RetrieveServiceDocumentAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::AtomPub::ServiceDocument, winrt::Windows::Web::Syndication::RetrievalProgress> operation;
	check(shim()->abi_RetrieveServiceDocumentAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, winrt::Windows::Web::Syndication::RetrievalProgress> impl_IAtomPubClient<T>::RetrieveMediaResourceAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, winrt::Windows::Web::Syndication::RetrievalProgress> operation;
	check(shim()->abi_RetrieveMediaResourceAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, winrt::Windows::Web::Syndication::RetrievalProgress> impl_IAtomPubClient<T>::RetrieveResourceAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, winrt::Windows::Web::Syndication::RetrievalProgress> operation;
	check(shim()->abi_RetrieveResourceAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, winrt::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::CreateResourceAsync(Windows::Foundation::Uri const & uri, StringReference const & description, Windows::Web::Syndication::SyndicationItem const & item) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, winrt::Windows::Web::Syndication::TransferProgress> operation;
	check(shim()->abi_CreateResourceAsync(get(uri), get(description), get(item), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, winrt::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::CreateMediaResourceAsync(Windows::Foundation::Uri const & uri, StringReference const & mediaType, StringReference const & description, Windows::Storage::Streams::IInputStream const & mediaStream) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationItem, winrt::Windows::Web::Syndication::TransferProgress> operation;
	check(shim()->abi_CreateMediaResourceAsync(get(uri), get(mediaType), get(description), get(mediaStream), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncActionWithProgress<winrt::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::UpdateMediaResourceAsync(Windows::Foundation::Uri const & uri, StringReference const & mediaType, Windows::Storage::Streams::IInputStream const & mediaStream) const
{
	Windows::Foundation::IAsyncActionWithProgress<winrt::Windows::Web::Syndication::TransferProgress> operation;
	check(shim()->abi_UpdateMediaResourceAsync(get(uri), get(mediaType), get(mediaStream), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncActionWithProgress<winrt::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::UpdateResourceAsync(Windows::Foundation::Uri const & uri, Windows::Web::Syndication::SyndicationItem const & item) const
{
	Windows::Foundation::IAsyncActionWithProgress<winrt::Windows::Web::Syndication::TransferProgress> operation;
	check(shim()->abi_UpdateResourceAsync(get(uri), get(item), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncActionWithProgress<winrt::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::UpdateResourceItemAsync(Windows::Web::Syndication::SyndicationItem const & item) const
{
	Windows::Foundation::IAsyncActionWithProgress<winrt::Windows::Web::Syndication::TransferProgress> operation;
	check(shim()->abi_UpdateResourceItemAsync(get(item), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncActionWithProgress<winrt::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::DeleteResourceAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncActionWithProgress<winrt::Windows::Web::Syndication::TransferProgress> operation;
	check(shim()->abi_DeleteResourceAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncActionWithProgress<winrt::Windows::Web::Syndication::TransferProgress> impl_IAtomPubClient<T>::DeleteResourceItemAsync(Windows::Web::Syndication::SyndicationItem const & item) const
{
	Windows::Foundation::IAsyncActionWithProgress<winrt::Windows::Web::Syndication::TransferProgress> operation;
	check(shim()->abi_DeleteResourceItemAsync(get(item), put(operation)));
	return operation;
}

template <typename T> void impl_IAtomPubClient<T>::CancelAsyncOperations() const
{
	check(shim()->abi_CancelAsyncOperations());
}

template <typename T> Windows::Web::AtomPub::AtomPubClient impl_IAtomPubClientFactory<T>::CreateAtomPubClientWithCredentials(Windows::Security::Credentials::PasswordCredential const & serverCredential) const
{
	Windows::Web::AtomPub::AtomPubClient atomPubClient = nullptr;
	check(shim()->abi_CreateAtomPubClientWithCredentials(get(serverCredential), put(atomPubClient)));
	return atomPubClient;
}

}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http {

template <typename T> Windows::Web::Http::HttpClient impl_IHttpClientFactory<T>::Create(Windows::Web::Http::Filters::IHttpFilter const & filter) const
{
	Windows::Web::Http::HttpClient client = nullptr;
	check(shim()->abi_Create(get(filter), put(client)));
	return client;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::DeleteAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> operation;
	check(shim()->abi_DeleteAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::GetAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> operation;
	check(shim()->abi_GetAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::GetAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::HttpCompletionOption const completionOption) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> operation;
	check(shim()->abi_GetWithOptionAsync(get(uri), completionOption, put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::GetBufferAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, winrt::Windows::Web::Http::HttpProgress> operation;
	check(shim()->abi_GetBufferAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::GetInputStreamAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, winrt::Windows::Web::Http::HttpProgress> operation;
	check(shim()->abi_GetInputStreamAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<String, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::GetStringAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<String, winrt::Windows::Web::Http::HttpProgress> operation;
	check(shim()->abi_GetStringAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::PostAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::IHttpContent const & content) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> operation;
	check(shim()->abi_PostAsync(get(uri), get(content), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::PutAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::IHttpContent const & content) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> operation;
	check(shim()->abi_PutAsync(get(uri), get(content), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> operation;
	check(shim()->abi_SendRequestAsync(get(request), put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> impl_IHttpClient<T>::SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request, Windows::Web::Http::HttpCompletionOption const completionOption) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> operation;
	check(shim()->abi_SendRequestWithOptionAsync(get(request), completionOption, put(operation)));
	return operation;
}

template <typename T> Windows::Web::Http::Headers::HttpRequestHeaderCollection impl_IHttpClient<T>::DefaultRequestHeaders() const
{
	Windows::Web::Http::Headers::HttpRequestHeaderCollection value = nullptr;
	check(shim()->get_DefaultRequestHeaders(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpContentHeaderCollection impl_IHttpContent<T>::Headers() const
{
	Windows::Web::Http::Headers::HttpContentHeaderCollection value = nullptr;
	check(shim()->get_Headers(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> impl_IHttpContent<T>::BufferAllAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> operation;
	check(shim()->abi_BufferAllAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned long long> impl_IHttpContent<T>::ReadAsBufferAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IBuffer, unsigned long long> operation;
	check(shim()->abi_ReadAsBufferAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, unsigned long long> impl_IHttpContent<T>::ReadAsInputStreamAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Storage::Streams::IInputStream, unsigned long long> operation;
	check(shim()->abi_ReadAsInputStreamAsync(put(operation)));
	return operation;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<String, unsigned long long> impl_IHttpContent<T>::ReadAsStringAsync() const
{
	Windows::Foundation::IAsyncOperationWithProgress<String, unsigned long long> operation;
	check(shim()->abi_ReadAsStringAsync(put(operation)));
	return operation;
}

template <typename T> bool impl_IHttpContent<T>::TryComputeLength(unsigned long long & length) const
{
	bool succeeded = {};
	check(shim()->abi_TryComputeLength(&length, put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> impl_IHttpContent<T>::WriteToStreamAsync(Windows::Storage::Streams::IOutputStream const & outputStream) const
{
	Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> operation;
	check(shim()->abi_WriteToStreamAsync(get(outputStream), put(operation)));
	return operation;
}

template <typename T> bool impl_IHttpCookieManager<T>::SetCookie(Windows::Web::Http::HttpCookie const & cookie) const
{
	bool replaced = {};
	check(shim()->abi_SetCookie(get(cookie), put(replaced)));
	return replaced;
}

template <typename T> bool impl_IHttpCookieManager<T>::SetCookie(Windows::Web::Http::HttpCookie const & cookie, bool const thirdParty) const
{
	bool replaced = {};
	check(shim()->abi_SetCookieWithThirdParty(get(cookie), thirdParty, put(replaced)));
	return replaced;
}

template <typename T> void impl_IHttpCookieManager<T>::DeleteCookie(Windows::Web::Http::HttpCookie const & cookie) const
{
	check(shim()->abi_DeleteCookie(get(cookie)));
}

template <typename T> Windows::Web::Http::HttpCookieCollection impl_IHttpCookieManager<T>::GetCookies(Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Http::HttpCookieCollection value = nullptr;
	check(shim()->abi_GetCookies(get(uri), put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpCookie impl_IHttpCookieFactory<T>::Create(StringReference const & name, StringReference const & domain, StringReference const & path) const
{
	Windows::Web::Http::HttpCookie cookie = nullptr;
	check(shim()->abi_Create(get(name), get(domain), get(path), put(cookie)));
	return cookie;
}

template <typename T> String impl_IHttpCookie<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IHttpCookie<T>::Domain() const
{
	String value;
	check(shim()->get_Domain(put(value)));
	return value;
}

template <typename T> String impl_IHttpCookie<T>::Path() const
{
	String value;
	check(shim()->get_Path(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IHttpCookie<T>::Expires() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_Expires(put(value)));
	return value;
}

template <typename T> void impl_IHttpCookie<T>::Expires(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_Expires(get(value)));
}

template <typename T> bool impl_IHttpCookie<T>::HttpOnly() const
{
	bool value = {};
	check(shim()->get_HttpOnly(put(value)));
	return value;
}

template <typename T> void impl_IHttpCookie<T>::HttpOnly(bool const value) const
{
	check(shim()->put_HttpOnly(value));
}

template <typename T> bool impl_IHttpCookie<T>::Secure() const
{
	bool value = {};
	check(shim()->get_Secure(put(value)));
	return value;
}

template <typename T> void impl_IHttpCookie<T>::Secure(bool const value) const
{
	check(shim()->put_Secure(value));
}

template <typename T> String impl_IHttpCookie<T>::Value() const
{
	String value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IHttpCookie<T>::Value(StringReference const & value) const
{
	check(shim()->put_Value(get(value)));
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Delete() const
{
	Windows::Web::Http::HttpMethod value = nullptr;
	check(shim()->get_Delete(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Get() const
{
	Windows::Web::Http::HttpMethod value = nullptr;
	check(shim()->get_Get(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Head() const
{
	Windows::Web::Http::HttpMethod value = nullptr;
	check(shim()->get_Head(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Options() const
{
	Windows::Web::Http::HttpMethod value = nullptr;
	check(shim()->get_Options(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Patch() const
{
	Windows::Web::Http::HttpMethod value = nullptr;
	check(shim()->get_Patch(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Post() const
{
	Windows::Web::Http::HttpMethod value = nullptr;
	check(shim()->get_Post(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodStatics<T>::Put() const
{
	Windows::Web::Http::HttpMethod value = nullptr;
	check(shim()->get_Put(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpMethodFactory<T>::Create(StringReference const & method) const
{
	Windows::Web::Http::HttpMethod httpMethod = nullptr;
	check(shim()->abi_Create(get(method), put(httpMethod)));
	return httpMethod;
}

template <typename T> String impl_IHttpMethod<T>::Method() const
{
	String value;
	check(shim()->get_Method(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_IHttpTransportInformation<T>::ServerCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check(shim()->get_ServerCertificate(put(value)));
	return value;
}

template <typename T> Windows::Networking::Sockets::SocketSslErrorSeverity impl_IHttpTransportInformation<T>::ServerCertificateErrorSeverity() const
{
	Windows::Networking::Sockets::SocketSslErrorSeverity value = {};
	check(shim()->get_ServerCertificateErrorSeverity(&value));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> impl_IHttpTransportInformation<T>::ServerCertificateErrors() const
{
	Windows::Foundation::Collections::IVectorView<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> value;
	check(shim()->get_ServerCertificateErrors(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> impl_IHttpTransportInformation<T>::ServerIntermediateCertificates() const
{
	Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate> value;
	check(shim()->get_ServerIntermediateCertificates(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpRequestMessage impl_IHttpRequestMessageFactory<T>::Create(Windows::Web::Http::HttpMethod const & method, Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Http::HttpRequestMessage httpRequestMessage = nullptr;
	check(shim()->abi_Create(get(method), get(uri), put(httpRequestMessage)));
	return httpRequestMessage;
}

template <typename T> Windows::Web::Http::IHttpContent impl_IHttpRequestMessage<T>::Content() const
{
	Windows::Web::Http::IHttpContent value;
	check(shim()->get_Content(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestMessage<T>::Content(Windows::Web::Http::IHttpContent const & value) const
{
	check(shim()->put_Content(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpRequestHeaderCollection impl_IHttpRequestMessage<T>::Headers() const
{
	Windows::Web::Http::Headers::HttpRequestHeaderCollection value = nullptr;
	check(shim()->get_Headers(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpMethod impl_IHttpRequestMessage<T>::Method() const
{
	Windows::Web::Http::HttpMethod value = nullptr;
	check(shim()->get_Method(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestMessage<T>::Method(Windows::Web::Http::HttpMethod const & value) const
{
	check(shim()->put_Method(get(value)));
}

template <typename T> Windows::Foundation::Collections::IMap<String, IInspectable> impl_IHttpRequestMessage<T>::Properties() const
{
	Windows::Foundation::Collections::IMap<String, IInspectable> value;
	check(shim()->get_Properties(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_IHttpRequestMessage<T>::RequestUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_RequestUri(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestMessage<T>::RequestUri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_RequestUri(get(value)));
}

template <typename T> Windows::Web::Http::HttpTransportInformation impl_IHttpRequestMessage<T>::TransportInformation() const
{
	Windows::Web::Http::HttpTransportInformation value = nullptr;
	check(shim()->get_TransportInformation(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpResponseMessage impl_IHttpResponseMessageFactory<T>::Create(Windows::Web::Http::HttpStatusCode const statusCode) const
{
	Windows::Web::Http::HttpResponseMessage httpResponseMessage = nullptr;
	check(shim()->abi_Create(statusCode, put(httpResponseMessage)));
	return httpResponseMessage;
}

template <typename T> Windows::Web::Http::IHttpContent impl_IHttpResponseMessage<T>::Content() const
{
	Windows::Web::Http::IHttpContent value;
	check(shim()->get_Content(put(value)));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::Content(Windows::Web::Http::IHttpContent const & value) const
{
	check(shim()->put_Content(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpResponseHeaderCollection impl_IHttpResponseMessage<T>::Headers() const
{
	Windows::Web::Http::Headers::HttpResponseHeaderCollection value = nullptr;
	check(shim()->get_Headers(put(value)));
	return value;
}

template <typename T> bool impl_IHttpResponseMessage<T>::IsSuccessStatusCode() const
{
	bool value = {};
	check(shim()->get_IsSuccessStatusCode(put(value)));
	return value;
}

template <typename T> String impl_IHttpResponseMessage<T>::ReasonPhrase() const
{
	String value;
	check(shim()->get_ReasonPhrase(put(value)));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::ReasonPhrase(StringReference const & value) const
{
	check(shim()->put_ReasonPhrase(get(value)));
}

template <typename T> Windows::Web::Http::HttpRequestMessage impl_IHttpResponseMessage<T>::RequestMessage() const
{
	Windows::Web::Http::HttpRequestMessage value = nullptr;
	check(shim()->get_RequestMessage(put(value)));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::RequestMessage(Windows::Web::Http::HttpRequestMessage const & value) const
{
	check(shim()->put_RequestMessage(get(value)));
}

template <typename T> Windows::Web::Http::HttpResponseMessageSource impl_IHttpResponseMessage<T>::Source() const
{
	Windows::Web::Http::HttpResponseMessageSource value = {};
	check(shim()->get_Source(&value));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::Source(Windows::Web::Http::HttpResponseMessageSource const value) const
{
	check(shim()->put_Source(value));
}

template <typename T> Windows::Web::Http::HttpStatusCode impl_IHttpResponseMessage<T>::StatusCode() const
{
	Windows::Web::Http::HttpStatusCode value = {};
	check(shim()->get_StatusCode(&value));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::StatusCode(Windows::Web::Http::HttpStatusCode const value) const
{
	check(shim()->put_StatusCode(value));
}

template <typename T> Windows::Web::Http::HttpVersion impl_IHttpResponseMessage<T>::Version() const
{
	Windows::Web::Http::HttpVersion value = {};
	check(shim()->get_Version(&value));
	return value;
}

template <typename T> void impl_IHttpResponseMessage<T>::Version(Windows::Web::Http::HttpVersion const value) const
{
	check(shim()->put_Version(value));
}

template <typename T> Windows::Web::Http::HttpResponseMessage impl_IHttpResponseMessage<T>::EnsureSuccessStatusCode() const
{
	Windows::Web::Http::HttpResponseMessage httpResponseMessage = nullptr;
	check(shim()->abi_EnsureSuccessStatusCode(put(httpResponseMessage)));
	return httpResponseMessage;
}

template <typename T> Windows::Web::Http::HttpStringContent impl_IHttpStringContentFactory<T>::CreateFromString(StringReference const & content) const
{
	Windows::Web::Http::HttpStringContent stringContent = nullptr;
	check(shim()->abi_CreateFromString(get(content), put(stringContent)));
	return stringContent;
}

template <typename T> Windows::Web::Http::HttpStringContent impl_IHttpStringContentFactory<T>::CreateFromStringWithEncoding(StringReference const & content, Windows::Storage::Streams::UnicodeEncoding const encoding) const
{
	Windows::Web::Http::HttpStringContent stringContent = nullptr;
	check(shim()->abi_CreateFromStringWithEncoding(get(content), encoding, put(stringContent)));
	return stringContent;
}

template <typename T> Windows::Web::Http::HttpStringContent impl_IHttpStringContentFactory<T>::CreateFromStringWithEncodingAndMediaType(StringReference const & content, Windows::Storage::Streams::UnicodeEncoding const encoding, StringReference const & mediaType) const
{
	Windows::Web::Http::HttpStringContent stringContent = nullptr;
	check(shim()->abi_CreateFromStringWithEncodingAndMediaType(get(content), encoding, get(mediaType), put(stringContent)));
	return stringContent;
}

template <typename T> Windows::Web::Http::HttpBufferContent impl_IHttpBufferContentFactory<T>::CreateFromBuffer(Windows::Storage::Streams::IBuffer const & content) const
{
	Windows::Web::Http::HttpBufferContent bufferContent = nullptr;
	check(shim()->abi_CreateFromBuffer(get(content), put(bufferContent)));
	return bufferContent;
}

template <typename T> Windows::Web::Http::HttpBufferContent impl_IHttpBufferContentFactory<T>::CreateFromBufferWithOffset(Windows::Storage::Streams::IBuffer const & content, unsigned const offset, unsigned const count) const
{
	Windows::Web::Http::HttpBufferContent bufferContent = nullptr;
	check(shim()->abi_CreateFromBufferWithOffset(get(content), offset, count, put(bufferContent)));
	return bufferContent;
}

template <typename T> Windows::Web::Http::HttpStreamContent impl_IHttpStreamContentFactory<T>::CreateFromInputStream(Windows::Storage::Streams::IInputStream const & content) const
{
	Windows::Web::Http::HttpStreamContent streamContent = nullptr;
	check(shim()->abi_CreateFromInputStream(get(content), put(streamContent)));
	return streamContent;
}

template <typename T> Windows::Web::Http::HttpFormUrlEncodedContent impl_IHttpFormUrlEncodedContentFactory<T>::Create(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & content) const
{
	Windows::Web::Http::HttpFormUrlEncodedContent formUrlEncodedContent = nullptr;
	check(shim()->abi_Create(get(content), put(formUrlEncodedContent)));
	return formUrlEncodedContent;
}

template <typename T> Windows::Web::Http::HttpMultipartContent impl_IHttpMultipartContentFactory<T>::CreateWithSubtype(StringReference const & subtype) const
{
	Windows::Web::Http::HttpMultipartContent multipartContent = nullptr;
	check(shim()->abi_CreateWithSubtype(get(subtype), put(multipartContent)));
	return multipartContent;
}

template <typename T> Windows::Web::Http::HttpMultipartContent impl_IHttpMultipartContentFactory<T>::CreateWithSubtypeAndBoundary(StringReference const & subtype, StringReference const & boundary) const
{
	Windows::Web::Http::HttpMultipartContent multipartContent = nullptr;
	check(shim()->abi_CreateWithSubtypeAndBoundary(get(subtype), get(boundary), put(multipartContent)));
	return multipartContent;
}

template <typename T> void impl_IHttpMultipartContent<T>::Add(Windows::Web::Http::IHttpContent const & content) const
{
	check(shim()->abi_Add(get(content)));
}

template <typename T> Windows::Web::Http::HttpMultipartFormDataContent impl_IHttpMultipartFormDataContentFactory<T>::CreateWithBoundary(StringReference const & boundary) const
{
	Windows::Web::Http::HttpMultipartFormDataContent multipartFormDataContent = nullptr;
	check(shim()->abi_CreateWithBoundary(get(boundary), put(multipartFormDataContent)));
	return multipartFormDataContent;
}

template <typename T> void impl_IHttpMultipartFormDataContent<T>::Add(Windows::Web::Http::IHttpContent const & content) const
{
	check(shim()->abi_Add(get(content)));
}

template <typename T> void impl_IHttpMultipartFormDataContent<T>::Add(Windows::Web::Http::IHttpContent const & content, StringReference const & name) const
{
	check(shim()->abi_AddWithName(get(content), get(name)));
}

template <typename T> void impl_IHttpMultipartFormDataContent<T>::Add(Windows::Web::Http::IHttpContent const & content, StringReference const & name, StringReference const & fileName) const
{
	check(shim()->abi_AddWithNameAndFileName(get(content), get(name), get(fileName)));
}

}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http { namespace Filters {

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> impl_IHttpFilter<T>::SendRequestAsync(Windows::Web::Http::HttpRequestMessage const & request) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Http::HttpResponseMessage, winrt::Windows::Web::Http::HttpProgress> operation;
	check(shim()->abi_SendRequestAsync(get(request), put(operation)));
	return operation;
}

template <typename T> Windows::Web::Http::Filters::HttpCacheReadBehavior impl_IHttpCacheControl<T>::ReadBehavior() const
{
	Windows::Web::Http::Filters::HttpCacheReadBehavior value = {};
	check(shim()->get_ReadBehavior(&value));
	return value;
}

template <typename T> void impl_IHttpCacheControl<T>::ReadBehavior(Windows::Web::Http::Filters::HttpCacheReadBehavior const value) const
{
	check(shim()->put_ReadBehavior(value));
}

template <typename T> Windows::Web::Http::Filters::HttpCacheWriteBehavior impl_IHttpCacheControl<T>::WriteBehavior() const
{
	Windows::Web::Http::Filters::HttpCacheWriteBehavior value = {};
	check(shim()->get_WriteBehavior(&value));
	return value;
}

template <typename T> void impl_IHttpCacheControl<T>::WriteBehavior(Windows::Web::Http::Filters::HttpCacheWriteBehavior const value) const
{
	check(shim()->put_WriteBehavior(value));
}

template <typename T> bool impl_IHttpBaseProtocolFilter<T>::AllowAutoRedirect() const
{
	bool value = {};
	check(shim()->get_AllowAutoRedirect(put(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::AllowAutoRedirect(bool const value) const
{
	check(shim()->put_AllowAutoRedirect(value));
}

template <typename T> bool impl_IHttpBaseProtocolFilter<T>::AllowUI() const
{
	bool value = {};
	check(shim()->get_AllowUI(put(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::AllowUI(bool const value) const
{
	check(shim()->put_AllowUI(value));
}

template <typename T> bool impl_IHttpBaseProtocolFilter<T>::AutomaticDecompression() const
{
	bool value = {};
	check(shim()->get_AutomaticDecompression(put(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::AutomaticDecompression(bool const value) const
{
	check(shim()->put_AutomaticDecompression(value));
}

template <typename T> Windows::Web::Http::Filters::HttpCacheControl impl_IHttpBaseProtocolFilter<T>::CacheControl() const
{
	Windows::Web::Http::Filters::HttpCacheControl value = nullptr;
	check(shim()->get_CacheControl(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::HttpCookieManager impl_IHttpBaseProtocolFilter<T>::CookieManager() const
{
	Windows::Web::Http::HttpCookieManager value = nullptr;
	check(shim()->get_CookieManager(put(value)));
	return value;
}

template <typename T> Windows::Security::Cryptography::Certificates::Certificate impl_IHttpBaseProtocolFilter<T>::ClientCertificate() const
{
	Windows::Security::Cryptography::Certificates::Certificate value = nullptr;
	check(shim()->get_ClientCertificate(put(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::ClientCertificate(Windows::Security::Cryptography::Certificates::Certificate const & value) const
{
	check(shim()->put_ClientCertificate(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> impl_IHttpBaseProtocolFilter<T>::IgnorableServerCertificateErrors() const
{
	Windows::Foundation::Collections::IVector<winrt::Windows::Security::Cryptography::Certificates::ChainValidationResult> value;
	check(shim()->get_IgnorableServerCertificateErrors(put(value)));
	return value;
}

template <typename T> unsigned impl_IHttpBaseProtocolFilter<T>::MaxConnectionsPerServer() const
{
	unsigned value = {};
	check(shim()->get_MaxConnectionsPerServer(&value));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::MaxConnectionsPerServer(unsigned const value) const
{
	check(shim()->put_MaxConnectionsPerServer(value));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IHttpBaseProtocolFilter<T>::ProxyCredential() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check(shim()->get_ProxyCredential(put(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::ProxyCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check(shim()->put_ProxyCredential(get(value)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_IHttpBaseProtocolFilter<T>::ServerCredential() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check(shim()->get_ServerCredential(put(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::ServerCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check(shim()->put_ServerCredential(get(value)));
}

template <typename T> bool impl_IHttpBaseProtocolFilter<T>::UseProxy() const
{
	bool value = {};
	check(shim()->get_UseProxy(put(value)));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter<T>::UseProxy(bool const value) const
{
	check(shim()->put_UseProxy(value));
}

template <typename T> Windows::Web::Http::HttpVersion impl_IHttpBaseProtocolFilter2<T>::MaxVersion() const
{
	Windows::Web::Http::HttpVersion value = {};
	check(shim()->get_MaxVersion(&value));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter2<T>::MaxVersion(Windows::Web::Http::HttpVersion const value) const
{
	check(shim()->put_MaxVersion(value));
}

template <typename T> Windows::Web::Http::Filters::HttpCookieUsageBehavior impl_IHttpBaseProtocolFilter3<T>::CookieUsageBehavior() const
{
	Windows::Web::Http::Filters::HttpCookieUsageBehavior value = {};
	check(shim()->get_CookieUsageBehavior(&value));
	return value;
}

template <typename T> void impl_IHttpBaseProtocolFilter3<T>::CookieUsageBehavior(Windows::Web::Http::Filters::HttpCookieUsageBehavior const value) const
{
	check(shim()->put_CookieUsageBehavior(value));
}

}}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http { namespace Headers {

template <typename T> Windows::Web::Http::Headers::HttpContentDispositionHeaderValue impl_IHttpContentHeaderCollection<T>::ContentDisposition() const
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue value = nullptr;
	check(shim()->get_ContentDisposition(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentDisposition(Windows::Web::Http::Headers::HttpContentDispositionHeaderValue const & value) const
{
	check(shim()->put_ContentDisposition(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingHeaderValueCollection impl_IHttpContentHeaderCollection<T>::ContentEncoding() const
{
	Windows::Web::Http::Headers::HttpContentCodingHeaderValueCollection value = nullptr;
	check(shim()->get_ContentEncoding(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpLanguageHeaderValueCollection impl_IHttpContentHeaderCollection<T>::ContentLanguage() const
{
	Windows::Web::Http::Headers::HttpLanguageHeaderValueCollection value = nullptr;
	check(shim()->get_ContentLanguage(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IHttpContentHeaderCollection<T>::ContentLength() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check(shim()->get_ContentLength(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentLength(Windows::Foundation::IReference<unsigned long long> const & value) const
{
	check(shim()->put_ContentLength(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IHttpContentHeaderCollection<T>::ContentLocation() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ContentLocation(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentLocation(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_ContentLocation(get(value)));
}

template <typename T> Windows::Storage::Streams::IBuffer impl_IHttpContentHeaderCollection<T>::ContentMD5() const
{
	Windows::Storage::Streams::IBuffer value;
	check(shim()->get_ContentMD5(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentMD5(Windows::Storage::Streams::IBuffer const & value) const
{
	check(shim()->put_ContentMD5(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpContentRangeHeaderValue impl_IHttpContentHeaderCollection<T>::ContentRange() const
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue value = nullptr;
	check(shim()->get_ContentRange(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentRange(Windows::Web::Http::Headers::HttpContentRangeHeaderValue const & value) const
{
	check(shim()->put_ContentRange(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeHeaderValue impl_IHttpContentHeaderCollection<T>::ContentType() const
{
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue value = nullptr;
	check(shim()->get_ContentType(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::ContentType(Windows::Web::Http::Headers::HttpMediaTypeHeaderValue const & value) const
{
	check(shim()->put_ContentType(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IHttpContentHeaderCollection<T>::Expires() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_Expires(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::Expires(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_Expires(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IHttpContentHeaderCollection<T>::LastModified() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_LastModified(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::LastModified(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_LastModified(get(value)));
}

template <typename T> void impl_IHttpContentHeaderCollection<T>::Append(StringReference const & name, StringReference const & value) const
{
	check(shim()->abi_Append(get(name), get(value)));
}

template <typename T> bool impl_IHttpContentHeaderCollection<T>::TryAppendWithoutValidation(StringReference const & name, StringReference const & value) const
{
	bool succeeded = {};
	check(shim()->abi_TryAppendWithoutValidation(get(name), get(value), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::Accept() const
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValueCollection value = nullptr;
	check(shim()->get_Accept(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::AcceptEncoding() const
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValueCollection value = nullptr;
	check(shim()->get_AcceptEncoding(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::AcceptLanguage() const
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValueCollection value = nullptr;
	check(shim()->get_AcceptLanguage(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpRequestHeaderCollection<T>::Authorization() const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue value = nullptr;
	check(shim()->get_Authorization(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::Authorization(Windows::Web::Http::Headers::HttpCredentialsHeaderValue const & value) const
{
	check(shim()->put_Authorization(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::CacheControl() const
{
	Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection value = nullptr;
	check(shim()->get_CacheControl(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::Connection() const
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection value = nullptr;
	check(shim()->get_Connection(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpCookiePairHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::Cookie() const
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValueCollection value = nullptr;
	check(shim()->get_Cookie(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IHttpRequestHeaderCollection<T>::Date() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_Date(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::Date(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_Date(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpExpectationHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::Expect() const
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValueCollection value = nullptr;
	check(shim()->get_Expect(put(value)));
	return value;
}

template <typename T> String impl_IHttpRequestHeaderCollection<T>::From() const
{
	String value;
	check(shim()->get_From(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::From(StringReference const & value) const
{
	check(shim()->put_From(get(value)));
}

template <typename T> Windows::Networking::HostName impl_IHttpRequestHeaderCollection<T>::Host() const
{
	Windows::Networking::HostName value = nullptr;
	check(shim()->get_Host(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::Host(Windows::Networking::HostName const & value) const
{
	check(shim()->put_Host(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IHttpRequestHeaderCollection<T>::IfModifiedSince() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_IfModifiedSince(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::IfModifiedSince(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_IfModifiedSince(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IHttpRequestHeaderCollection<T>::IfUnmodifiedSince() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_IfUnmodifiedSince(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::IfUnmodifiedSince(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_IfUnmodifiedSince(get(value)));
}

template <typename T> Windows::Foundation::IReference<unsigned> impl_IHttpRequestHeaderCollection<T>::MaxForwards() const
{
	Windows::Foundation::IReference<unsigned> value;
	check(shim()->get_MaxForwards(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::MaxForwards(Windows::Foundation::IReference<unsigned> const & value) const
{
	check(shim()->put_MaxForwards(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpRequestHeaderCollection<T>::ProxyAuthorization() const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue value = nullptr;
	check(shim()->get_ProxyAuthorization(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::ProxyAuthorization(Windows::Web::Http::Headers::HttpCredentialsHeaderValue const & value) const
{
	check(shim()->put_ProxyAuthorization(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IHttpRequestHeaderCollection<T>::Referer() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Referer(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::Referer(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Referer(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::TransferEncoding() const
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection value = nullptr;
	check(shim()->get_TransferEncoding(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpProductInfoHeaderValueCollection impl_IHttpRequestHeaderCollection<T>::UserAgent() const
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValueCollection value = nullptr;
	check(shim()->get_UserAgent(put(value)));
	return value;
}

template <typename T> void impl_IHttpRequestHeaderCollection<T>::Append(StringReference const & name, StringReference const & value) const
{
	check(shim()->abi_Append(get(name), get(value)));
}

template <typename T> bool impl_IHttpRequestHeaderCollection<T>::TryAppendWithoutValidation(StringReference const & name, StringReference const & value) const
{
	bool succeeded = {};
	check(shim()->abi_TryAppendWithoutValidation(get(name), get(value), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IHttpResponseHeaderCollection<T>::Age() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_Age(put(value)));
	return value;
}

template <typename T> void impl_IHttpResponseHeaderCollection<T>::Age(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_Age(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpMethodHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::Allow() const
{
	Windows::Web::Http::Headers::HttpMethodHeaderValueCollection value = nullptr;
	check(shim()->get_Allow(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::CacheControl() const
{
	Windows::Web::Http::Headers::HttpCacheDirectiveHeaderValueCollection value = nullptr;
	check(shim()->get_CacheControl(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::Connection() const
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValueCollection value = nullptr;
	check(shim()->get_Connection(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IHttpResponseHeaderCollection<T>::Date() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_Date(put(value)));
	return value;
}

template <typename T> void impl_IHttpResponseHeaderCollection<T>::Date(Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> const & value) const
{
	check(shim()->put_Date(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_IHttpResponseHeaderCollection<T>::Location() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Location(put(value)));
	return value;
}

template <typename T> void impl_IHttpResponseHeaderCollection<T>::Location(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Location(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::ProxyAuthenticate() const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection value = nullptr;
	check(shim()->get_ProxyAuthenticate(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue impl_IHttpResponseHeaderCollection<T>::RetryAfter() const
{
	Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue value = nullptr;
	check(shim()->get_RetryAfter(put(value)));
	return value;
}

template <typename T> void impl_IHttpResponseHeaderCollection<T>::RetryAfter(Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue const & value) const
{
	check(shim()->put_RetryAfter(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::TransferEncoding() const
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValueCollection value = nullptr;
	check(shim()->get_TransferEncoding(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection impl_IHttpResponseHeaderCollection<T>::WwwAuthenticate() const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValueCollection value = nullptr;
	check(shim()->get_WwwAuthenticate(put(value)));
	return value;
}

template <typename T> void impl_IHttpResponseHeaderCollection<T>::Append(StringReference const & name, StringReference const & value) const
{
	check(shim()->abi_Append(get(name), get(value)));
}

template <typename T> bool impl_IHttpResponseHeaderCollection<T>::TryAppendWithoutValidation(StringReference const & name, StringReference const & value) const
{
	bool succeeded = {};
	check(shim()->abi_TryAppendWithoutValidation(get(name), get(value), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IHttpCacheDirectiveHeaderValueCollection<T>::MaxAge() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_MaxAge(put(value)));
	return value;
}

template <typename T> void impl_IHttpCacheDirectiveHeaderValueCollection<T>::MaxAge(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_MaxAge(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IHttpCacheDirectiveHeaderValueCollection<T>::MaxStale() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_MaxStale(put(value)));
	return value;
}

template <typename T> void impl_IHttpCacheDirectiveHeaderValueCollection<T>::MaxStale(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_MaxStale(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IHttpCacheDirectiveHeaderValueCollection<T>::MinFresh() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_MinFresh(put(value)));
	return value;
}

template <typename T> void impl_IHttpCacheDirectiveHeaderValueCollection<T>::MinFresh(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_MinFresh(get(value)));
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IHttpCacheDirectiveHeaderValueCollection<T>::SharedMaxAge() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_SharedMaxAge(put(value)));
	return value;
}

template <typename T> void impl_IHttpCacheDirectiveHeaderValueCollection<T>::SharedMaxAge(Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const & value) const
{
	check(shim()->put_SharedMaxAge(get(value)));
}

template <typename T> void impl_IHttpCacheDirectiveHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpCacheDirectiveHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpChallengeHeaderValue impl_IHttpChallengeHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValue challengeHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(challengeHeaderValue)));
	return challengeHeaderValue;
}

template <typename T> bool impl_IHttpChallengeHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(challengeHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpChallengeHeaderValue impl_IHttpChallengeHeaderValueFactory<T>::CreateFromScheme(StringReference const & scheme) const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValue challengeHeaderValue = nullptr;
	check(shim()->abi_CreateFromScheme(get(scheme), put(challengeHeaderValue)));
	return challengeHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpChallengeHeaderValue impl_IHttpChallengeHeaderValueFactory<T>::CreateFromSchemeWithToken(StringReference const & scheme, StringReference const & token) const
{
	Windows::Web::Http::Headers::HttpChallengeHeaderValue challengeHeaderValue = nullptr;
	check(shim()->abi_CreateFromSchemeWithToken(get(scheme), get(token), put(challengeHeaderValue)));
	return challengeHeaderValue;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpChallengeHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value;
	check(shim()->get_Parameters(put(value)));
	return value;
}

template <typename T> String impl_IHttpChallengeHeaderValue<T>::Scheme() const
{
	String value;
	check(shim()->get_Scheme(put(value)));
	return value;
}

template <typename T> String impl_IHttpChallengeHeaderValue<T>::Token() const
{
	String value;
	check(shim()->get_Token(put(value)));
	return value;
}

template <typename T> void impl_IHttpChallengeHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpChallengeHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpCredentialsHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue credentialsHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(credentialsHeaderValue)));
	return credentialsHeaderValue;
}

template <typename T> bool impl_IHttpCredentialsHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(credentialsHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpCredentialsHeaderValueFactory<T>::CreateFromScheme(StringReference const & scheme) const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue credentialsHeaderValue = nullptr;
	check(shim()->abi_CreateFromScheme(get(scheme), put(credentialsHeaderValue)));
	return credentialsHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpCredentialsHeaderValue impl_IHttpCredentialsHeaderValueFactory<T>::CreateFromSchemeWithToken(StringReference const & scheme, StringReference const & token) const
{
	Windows::Web::Http::Headers::HttpCredentialsHeaderValue credentialsHeaderValue = nullptr;
	check(shim()->abi_CreateFromSchemeWithToken(get(scheme), get(token), put(credentialsHeaderValue)));
	return credentialsHeaderValue;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpCredentialsHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value;
	check(shim()->get_Parameters(put(value)));
	return value;
}

template <typename T> String impl_IHttpCredentialsHeaderValue<T>::Scheme() const
{
	String value;
	check(shim()->get_Scheme(put(value)));
	return value;
}

template <typename T> String impl_IHttpCredentialsHeaderValue<T>::Token() const
{
	String value;
	check(shim()->get_Token(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue impl_IHttpConnectionOptionHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue connectionOptionHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(connectionOptionHeaderValue)));
	return connectionOptionHeaderValue;
}

template <typename T> bool impl_IHttpConnectionOptionHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(connectionOptionHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue impl_IHttpConnectionOptionHeaderValueFactory<T>::Create(StringReference const & token) const
{
	Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue connectionOptionHeaderValue = nullptr;
	check(shim()->abi_Create(get(token), put(connectionOptionHeaderValue)));
	return connectionOptionHeaderValue;
}

template <typename T> String impl_IHttpConnectionOptionHeaderValue<T>::Token() const
{
	String value;
	check(shim()->get_Token(put(value)));
	return value;
}

template <typename T> void impl_IHttpConnectionOptionHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpConnectionOptionHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingHeaderValue impl_IHttpContentCodingHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpContentCodingHeaderValue contentCodingHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(contentCodingHeaderValue)));
	return contentCodingHeaderValue;
}

template <typename T> bool impl_IHttpContentCodingHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(contentCodingHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingHeaderValue impl_IHttpContentCodingHeaderValueFactory<T>::Create(StringReference const & contentCoding) const
{
	Windows::Web::Http::Headers::HttpContentCodingHeaderValue contentCodingHeaderValue = nullptr;
	check(shim()->abi_Create(get(contentCoding), put(contentCodingHeaderValue)));
	return contentCodingHeaderValue;
}

template <typename T> String impl_IHttpContentCodingHeaderValue<T>::ContentCoding() const
{
	String value;
	check(shim()->get_ContentCoding(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentCodingHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpContentCodingHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentDispositionHeaderValue impl_IHttpContentDispositionHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue contentDispositionHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(contentDispositionHeaderValue)));
	return contentDispositionHeaderValue;
}

template <typename T> bool impl_IHttpContentDispositionHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(contentDispositionHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentDispositionHeaderValue impl_IHttpContentDispositionHeaderValueFactory<T>::Create(StringReference const & dispositionType) const
{
	Windows::Web::Http::Headers::HttpContentDispositionHeaderValue contentDispositionHeaderValue = nullptr;
	check(shim()->abi_Create(get(dispositionType), put(contentDispositionHeaderValue)));
	return contentDispositionHeaderValue;
}

template <typename T> String impl_IHttpContentDispositionHeaderValue<T>::DispositionType() const
{
	String value;
	check(shim()->get_DispositionType(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentDispositionHeaderValue<T>::DispositionType(StringReference const & value) const
{
	check(shim()->put_DispositionType(get(value)));
}

template <typename T> String impl_IHttpContentDispositionHeaderValue<T>::FileName() const
{
	String value;
	check(shim()->get_FileName(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentDispositionHeaderValue<T>::FileName(StringReference const & value) const
{
	check(shim()->put_FileName(get(value)));
}

template <typename T> String impl_IHttpContentDispositionHeaderValue<T>::FileNameStar() const
{
	String value;
	check(shim()->get_FileNameStar(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentDispositionHeaderValue<T>::FileNameStar(StringReference const & value) const
{
	check(shim()->put_FileNameStar(get(value)));
}

template <typename T> String impl_IHttpContentDispositionHeaderValue<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentDispositionHeaderValue<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpContentDispositionHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value;
	check(shim()->get_Parameters(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IHttpContentDispositionHeaderValue<T>::Size() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check(shim()->get_Size(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentDispositionHeaderValue<T>::Size(Windows::Foundation::IReference<unsigned long long> const & value) const
{
	check(shim()->put_Size(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpContentRangeHeaderValue impl_IHttpContentRangeHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue contentRangeHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(contentRangeHeaderValue)));
	return contentRangeHeaderValue;
}

template <typename T> bool impl_IHttpContentRangeHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(contentRangeHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentRangeHeaderValue impl_IHttpContentRangeHeaderValueFactory<T>::CreateFromLength(unsigned long long const length) const
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue contentRangeHeaderValue = nullptr;
	check(shim()->abi_CreateFromLength(length, put(contentRangeHeaderValue)));
	return contentRangeHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpContentRangeHeaderValue impl_IHttpContentRangeHeaderValueFactory<T>::CreateFromRange(unsigned long long const from, unsigned long long const to) const
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue contentRangeHeaderValue = nullptr;
	check(shim()->abi_CreateFromRange(from, to, put(contentRangeHeaderValue)));
	return contentRangeHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpContentRangeHeaderValue impl_IHttpContentRangeHeaderValueFactory<T>::CreateFromRangeWithLength(unsigned long long const from, unsigned long long const to, unsigned long long const length) const
{
	Windows::Web::Http::Headers::HttpContentRangeHeaderValue contentRangeHeaderValue = nullptr;
	check(shim()->abi_CreateFromRangeWithLength(from, to, length, put(contentRangeHeaderValue)));
	return contentRangeHeaderValue;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IHttpContentRangeHeaderValue<T>::FirstBytePosition() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check(shim()->get_FirstBytePosition(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IHttpContentRangeHeaderValue<T>::LastBytePosition() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check(shim()->get_LastBytePosition(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<unsigned long long> impl_IHttpContentRangeHeaderValue<T>::Length() const
{
	Windows::Foundation::IReference<unsigned long long> value;
	check(shim()->get_Length(put(value)));
	return value;
}

template <typename T> String impl_IHttpContentRangeHeaderValue<T>::Unit() const
{
	String value;
	check(shim()->get_Unit(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentRangeHeaderValue<T>::Unit(StringReference const & value) const
{
	check(shim()->put_Unit(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpCookiePairHeaderValue impl_IHttpCookiePairHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue cookiePairHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(cookiePairHeaderValue)));
	return cookiePairHeaderValue;
}

template <typename T> bool impl_IHttpCookiePairHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(cookiePairHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpCookiePairHeaderValue impl_IHttpCookiePairHeaderValueFactory<T>::CreateFromName(StringReference const & name) const
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue cookiePairHeaderValue = nullptr;
	check(shim()->abi_CreateFromName(get(name), put(cookiePairHeaderValue)));
	return cookiePairHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpCookiePairHeaderValue impl_IHttpCookiePairHeaderValueFactory<T>::CreateFromNameWithValue(StringReference const & name, StringReference const & value) const
{
	Windows::Web::Http::Headers::HttpCookiePairHeaderValue cookiePairHeaderValue = nullptr;
	check(shim()->abi_CreateFromNameWithValue(get(name), get(value), put(cookiePairHeaderValue)));
	return cookiePairHeaderValue;
}

template <typename T> String impl_IHttpCookiePairHeaderValue<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IHttpCookiePairHeaderValue<T>::Value() const
{
	String value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IHttpCookiePairHeaderValue<T>::Value(StringReference const & value) const
{
	check(shim()->put_Value(get(value)));
}

template <typename T> void impl_IHttpCookiePairHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpCookiePairHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue impl_IHttpDateOrDeltaHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue dateOrDeltaHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(dateOrDeltaHeaderValue)));
	return dateOrDeltaHeaderValue;
}

template <typename T> bool impl_IHttpDateOrDeltaHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(dateOrDeltaHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> impl_IHttpDateOrDeltaHeaderValue<T>::Date() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> value;
	check(shim()->get_Date(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> impl_IHttpDateOrDeltaHeaderValue<T>::Delta() const
{
	Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> value;
	check(shim()->get_Delta(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpExpectationHeaderValue impl_IHttpExpectationHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValue expectationHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(expectationHeaderValue)));
	return expectationHeaderValue;
}

template <typename T> bool impl_IHttpExpectationHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(expectationHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpExpectationHeaderValue impl_IHttpExpectationHeaderValueFactory<T>::CreateFromName(StringReference const & name) const
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValue expectationHeaderValue = nullptr;
	check(shim()->abi_CreateFromName(get(name), put(expectationHeaderValue)));
	return expectationHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpExpectationHeaderValue impl_IHttpExpectationHeaderValueFactory<T>::CreateFromNameWithValue(StringReference const & name, StringReference const & value) const
{
	Windows::Web::Http::Headers::HttpExpectationHeaderValue expectationHeaderValue = nullptr;
	check(shim()->abi_CreateFromNameWithValue(get(name), get(value), put(expectationHeaderValue)));
	return expectationHeaderValue;
}

template <typename T> String impl_IHttpExpectationHeaderValue<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IHttpExpectationHeaderValue<T>::Value() const
{
	String value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IHttpExpectationHeaderValue<T>::Value(StringReference const & value) const
{
	check(shim()->put_Value(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpExpectationHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value;
	check(shim()->get_Parameters(put(value)));
	return value;
}

template <typename T> void impl_IHttpExpectationHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpExpectationHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> void impl_IHttpLanguageHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpLanguageHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue impl_IHttpLanguageRangeWithQualityHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue languageRangeWithQualityHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(languageRangeWithQualityHeaderValue)));
	return languageRangeWithQualityHeaderValue;
}

template <typename T> bool impl_IHttpLanguageRangeWithQualityHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(languageRangeWithQualityHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue impl_IHttpLanguageRangeWithQualityHeaderValueFactory<T>::CreateFromLanguageRange(StringReference const & languageRange) const
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue languageRangeWithQualityHeaderValue = nullptr;
	check(shim()->abi_CreateFromLanguageRange(get(languageRange), put(languageRangeWithQualityHeaderValue)));
	return languageRangeWithQualityHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue impl_IHttpLanguageRangeWithQualityHeaderValueFactory<T>::CreateFromLanguageRangeWithQuality(StringReference const & languageRange, double const quality) const
{
	Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue languageRangeWithQualityHeaderValue = nullptr;
	check(shim()->abi_CreateFromLanguageRangeWithQuality(get(languageRange), quality, put(languageRangeWithQualityHeaderValue)));
	return languageRangeWithQualityHeaderValue;
}

template <typename T> String impl_IHttpLanguageRangeWithQualityHeaderValue<T>::LanguageRange() const
{
	String languageRange;
	check(shim()->get_LanguageRange(put(languageRange)));
	return languageRange;
}

template <typename T> Windows::Foundation::IReference<double> impl_IHttpLanguageRangeWithQualityHeaderValue<T>::Quality() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_Quality(put(value)));
	return value;
}

template <typename T> void impl_IHttpLanguageRangeWithQualityHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpLanguageRangeWithQualityHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeHeaderValue impl_IHttpMediaTypeHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue mediaTypeHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(mediaTypeHeaderValue)));
	return mediaTypeHeaderValue;
}

template <typename T> bool impl_IHttpMediaTypeHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(mediaTypeHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeHeaderValue impl_IHttpMediaTypeHeaderValueFactory<T>::Create(StringReference const & mediaType) const
{
	Windows::Web::Http::Headers::HttpMediaTypeHeaderValue mediaTypeHeaderValue = nullptr;
	check(shim()->abi_Create(get(mediaType), put(mediaTypeHeaderValue)));
	return mediaTypeHeaderValue;
}

template <typename T> String impl_IHttpMediaTypeHeaderValue<T>::CharSet() const
{
	String value;
	check(shim()->get_CharSet(put(value)));
	return value;
}

template <typename T> void impl_IHttpMediaTypeHeaderValue<T>::CharSet(StringReference const & value) const
{
	check(shim()->put_CharSet(get(value)));
}

template <typename T> String impl_IHttpMediaTypeHeaderValue<T>::MediaType() const
{
	String value;
	check(shim()->get_MediaType(put(value)));
	return value;
}

template <typename T> void impl_IHttpMediaTypeHeaderValue<T>::MediaType(StringReference const & value) const
{
	check(shim()->put_MediaType(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpMediaTypeHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value;
	check(shim()->get_Parameters(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue impl_IHttpMediaTypeWithQualityHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue mediaTypeWithQualityHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(mediaTypeWithQualityHeaderValue)));
	return mediaTypeWithQualityHeaderValue;
}

template <typename T> bool impl_IHttpMediaTypeWithQualityHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(mediaTypeWithQualityHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue impl_IHttpMediaTypeWithQualityHeaderValueFactory<T>::CreateFromMediaType(StringReference const & mediaType) const
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue mediaTypeWithQualityHeaderValue = nullptr;
	check(shim()->abi_CreateFromMediaType(get(mediaType), put(mediaTypeWithQualityHeaderValue)));
	return mediaTypeWithQualityHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue impl_IHttpMediaTypeWithQualityHeaderValueFactory<T>::CreateFromMediaTypeWithQuality(StringReference const & mediaType, double const quality) const
{
	Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue mediaTypeWithQualityHeaderValue = nullptr;
	check(shim()->abi_CreateFromMediaTypeWithQuality(get(mediaType), quality, put(mediaTypeWithQualityHeaderValue)));
	return mediaTypeWithQualityHeaderValue;
}

template <typename T> String impl_IHttpMediaTypeWithQualityHeaderValue<T>::CharSet() const
{
	String value;
	check(shim()->get_CharSet(put(value)));
	return value;
}

template <typename T> void impl_IHttpMediaTypeWithQualityHeaderValue<T>::CharSet(StringReference const & value) const
{
	check(shim()->put_CharSet(get(value)));
}

template <typename T> String impl_IHttpMediaTypeWithQualityHeaderValue<T>::MediaType() const
{
	String value;
	check(shim()->get_MediaType(put(value)));
	return value;
}

template <typename T> void impl_IHttpMediaTypeWithQualityHeaderValue<T>::MediaType(StringReference const & value) const
{
	check(shim()->put_MediaType(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpMediaTypeWithQualityHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value;
	check(shim()->get_Parameters(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IHttpMediaTypeWithQualityHeaderValue<T>::Quality() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_Quality(put(value)));
	return value;
}

template <typename T> void impl_IHttpMediaTypeWithQualityHeaderValue<T>::Quality(Windows::Foundation::IReference<double> const & value) const
{
	check(shim()->put_Quality(get(value)));
}

template <typename T> void impl_IHttpMediaTypeWithQualityHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpMediaTypeWithQualityHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> void impl_IHttpMethodHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpMethodHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpNameValueHeaderValue impl_IHttpNameValueHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpNameValueHeaderValue nameValueHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(nameValueHeaderValue)));
	return nameValueHeaderValue;
}

template <typename T> bool impl_IHttpNameValueHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(nameValueHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpNameValueHeaderValue impl_IHttpNameValueHeaderValueFactory<T>::CreateFromName(StringReference const & name) const
{
	Windows::Web::Http::Headers::HttpNameValueHeaderValue nameValueHeaderValue = nullptr;
	check(shim()->abi_CreateFromName(get(name), put(nameValueHeaderValue)));
	return nameValueHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpNameValueHeaderValue impl_IHttpNameValueHeaderValueFactory<T>::CreateFromNameWithValue(StringReference const & name, StringReference const & value) const
{
	Windows::Web::Http::Headers::HttpNameValueHeaderValue nameValueHeaderValue = nullptr;
	check(shim()->abi_CreateFromNameWithValue(get(name), get(value), put(nameValueHeaderValue)));
	return nameValueHeaderValue;
}

template <typename T> String impl_IHttpNameValueHeaderValue<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IHttpNameValueHeaderValue<T>::Value() const
{
	String value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IHttpNameValueHeaderValue<T>::Value(StringReference const & value) const
{
	check(shim()->put_Value(get(value)));
}

template <typename T> Windows::Web::Http::Headers::HttpProductHeaderValue impl_IHttpProductHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpProductHeaderValue productHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(productHeaderValue)));
	return productHeaderValue;
}

template <typename T> bool impl_IHttpProductHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(productHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpProductHeaderValue impl_IHttpProductHeaderValueFactory<T>::CreateFromName(StringReference const & productName) const
{
	Windows::Web::Http::Headers::HttpProductHeaderValue productHeaderValue = nullptr;
	check(shim()->abi_CreateFromName(get(productName), put(productHeaderValue)));
	return productHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpProductHeaderValue impl_IHttpProductHeaderValueFactory<T>::CreateFromNameWithVersion(StringReference const & productName, StringReference const & productVersion) const
{
	Windows::Web::Http::Headers::HttpProductHeaderValue productHeaderValue = nullptr;
	check(shim()->abi_CreateFromNameWithVersion(get(productName), get(productVersion), put(productHeaderValue)));
	return productHeaderValue;
}

template <typename T> String impl_IHttpProductHeaderValue<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> String impl_IHttpProductHeaderValue<T>::Version() const
{
	String value;
	check(shim()->get_Version(put(value)));
	return value;
}

template <typename T> Windows::Web::Http::Headers::HttpProductInfoHeaderValue impl_IHttpProductInfoHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue productInfoHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(productInfoHeaderValue)));
	return productInfoHeaderValue;
}

template <typename T> bool impl_IHttpProductInfoHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(productInfoHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpProductInfoHeaderValue impl_IHttpProductInfoHeaderValueFactory<T>::CreateFromComment(StringReference const & productComment) const
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue productInfoHeaderValue = nullptr;
	check(shim()->abi_CreateFromComment(get(productComment), put(productInfoHeaderValue)));
	return productInfoHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpProductInfoHeaderValue impl_IHttpProductInfoHeaderValueFactory<T>::CreateFromNameWithVersion(StringReference const & productName, StringReference const & productVersion) const
{
	Windows::Web::Http::Headers::HttpProductInfoHeaderValue productInfoHeaderValue = nullptr;
	check(shim()->abi_CreateFromNameWithVersion(get(productName), get(productVersion), put(productInfoHeaderValue)));
	return productInfoHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpProductHeaderValue impl_IHttpProductInfoHeaderValue<T>::Product() const
{
	Windows::Web::Http::Headers::HttpProductHeaderValue value = nullptr;
	check(shim()->get_Product(put(value)));
	return value;
}

template <typename T> String impl_IHttpProductInfoHeaderValue<T>::Comment() const
{
	String value;
	check(shim()->get_Comment(put(value)));
	return value;
}

template <typename T> void impl_IHttpProductInfoHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpProductInfoHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue impl_IHttpContentCodingWithQualityHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue contentCodingWithQualityHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(contentCodingWithQualityHeaderValue)));
	return contentCodingWithQualityHeaderValue;
}

template <typename T> bool impl_IHttpContentCodingWithQualityHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(contentCodingWithQualityHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue impl_IHttpContentCodingWithQualityHeaderValueFactory<T>::CreateFromValue(StringReference const & contentCoding) const
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue contentCodingWithQualityHeaderValue = nullptr;
	check(shim()->abi_CreateFromValue(get(contentCoding), put(contentCodingWithQualityHeaderValue)));
	return contentCodingWithQualityHeaderValue;
}

template <typename T> Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue impl_IHttpContentCodingWithQualityHeaderValueFactory<T>::CreateFromValueWithQuality(StringReference const & contentCoding, double const quality) const
{
	Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue contentCodingWithQualityHeaderValue = nullptr;
	check(shim()->abi_CreateFromValueWithQuality(get(contentCoding), quality, put(contentCodingWithQualityHeaderValue)));
	return contentCodingWithQualityHeaderValue;
}

template <typename T> String impl_IHttpContentCodingWithQualityHeaderValue<T>::ContentCoding() const
{
	String value;
	check(shim()->get_ContentCoding(put(value)));
	return value;
}

template <typename T> Windows::Foundation::IReference<double> impl_IHttpContentCodingWithQualityHeaderValue<T>::Quality() const
{
	Windows::Foundation::IReference<double> value;
	check(shim()->get_Quality(put(value)));
	return value;
}

template <typename T> void impl_IHttpContentCodingWithQualityHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpContentCodingWithQualityHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpTransferCodingHeaderValue impl_IHttpTransferCodingHeaderValueStatics<T>::Parse(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValue transferCodingHeaderValue = nullptr;
	check(shim()->abi_Parse(get(input), put(transferCodingHeaderValue)));
	return transferCodingHeaderValue;
}

template <typename T> bool impl_IHttpTransferCodingHeaderValueStatics<T>::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue) const
{
	bool succeeded = {};
	check(shim()->abi_TryParse(get(input), put(transferCodingHeaderValue), put(succeeded)));
	return succeeded;
}

template <typename T> Windows::Web::Http::Headers::HttpTransferCodingHeaderValue impl_IHttpTransferCodingHeaderValueFactory<T>::Create(StringReference const & input) const
{
	Windows::Web::Http::Headers::HttpTransferCodingHeaderValue transferCodingHeaderValue = nullptr;
	check(shim()->abi_Create(get(input), put(transferCodingHeaderValue)));
	return transferCodingHeaderValue;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> impl_IHttpTransferCodingHeaderValue<T>::Parameters() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Http::Headers::HttpNameValueHeaderValue> value;
	check(shim()->get_Parameters(put(value)));
	return value;
}

template <typename T> String impl_IHttpTransferCodingHeaderValue<T>::Value() const
{
	String value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_IHttpTransferCodingHeaderValueCollection<T>::ParseAdd(StringReference const & input) const
{
	check(shim()->abi_ParseAdd(get(input)));
}

template <typename T> bool impl_IHttpTransferCodingHeaderValueCollection<T>::TryParseAdd(StringReference const & input) const
{
	bool succeeded = {};
	check(shim()->abi_TryParseAdd(get(input), put(succeeded)));
	return succeeded;
}

}}}}}

namespace winrt { namespace Windows { namespace Web { namespace Syndication {

template <typename T> String impl_ISyndicationAttribute<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationAttribute<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> String impl_ISyndicationAttribute<T>::Namespace() const
{
	String value;
	check(shim()->get_Namespace(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationAttribute<T>::Namespace(StringReference const & value) const
{
	check(shim()->put_Namespace(get(value)));
}

template <typename T> String impl_ISyndicationAttribute<T>::Value() const
{
	String value;
	check(shim()->get_Value(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationAttribute<T>::Value(StringReference const & value) const
{
	check(shim()->put_Value(get(value)));
}

template <typename T> Windows::Web::Syndication::SyndicationAttribute impl_ISyndicationAttributeFactory<T>::CreateSyndicationAttribute(StringReference const & attributeName, StringReference const & attributeNamespace, StringReference const & attributeValue) const
{
	Windows::Web::Syndication::SyndicationAttribute syndicationAttribute = nullptr;
	check(shim()->abi_CreateSyndicationAttribute(get(attributeName), get(attributeNamespace), get(attributeValue), put(syndicationAttribute)));
	return syndicationAttribute;
}

template <typename T> String impl_ISyndicationNode<T>::NodeName() const
{
	String value;
	check(shim()->get_NodeName(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationNode<T>::NodeName(StringReference const & value) const
{
	check(shim()->put_NodeName(get(value)));
}

template <typename T> String impl_ISyndicationNode<T>::NodeNamespace() const
{
	String value;
	check(shim()->get_NodeNamespace(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationNode<T>::NodeNamespace(StringReference const & value) const
{
	check(shim()->put_NodeNamespace(get(value)));
}

template <typename T> String impl_ISyndicationNode<T>::NodeValue() const
{
	String value;
	check(shim()->get_NodeValue(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationNode<T>::NodeValue(StringReference const & value) const
{
	check(shim()->put_NodeValue(get(value)));
}

template <typename T> String impl_ISyndicationNode<T>::Language() const
{
	String value;
	check(shim()->get_Language(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationNode<T>::Language(StringReference const & value) const
{
	check(shim()->put_Language(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationNode<T>::BaseUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_BaseUri(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationNode<T>::BaseUri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_BaseUri(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationAttribute> impl_ISyndicationNode<T>::AttributeExtensions() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationAttribute> value;
	check(shim()->get_AttributeExtensions(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::ISyndicationNode> impl_ISyndicationNode<T>::ElementExtensions() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::ISyndicationNode> value;
	check(shim()->get_ElementExtensions(put(value)));
	return value;
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_ISyndicationNode<T>::GetXmlDocument(Windows::Web::Syndication::SyndicationFormat const format) const
{
	Windows::Data::Xml::Dom::XmlDocument xmlDocument = nullptr;
	check(shim()->abi_GetXmlDocument(format, put(xmlDocument)));
	return xmlDocument;
}

template <typename T> Windows::Web::Syndication::SyndicationNode impl_ISyndicationNodeFactory<T>::CreateSyndicationNode(StringReference const & nodeName, StringReference const & nodeNamespace, StringReference const & nodeValue) const
{
	Windows::Web::Syndication::SyndicationNode node = nullptr;
	check(shim()->abi_CreateSyndicationNode(get(nodeName), get(nodeNamespace), get(nodeValue), put(node)));
	return node;
}

template <typename T> String impl_ISyndicationGenerator<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationGenerator<T>::Text(StringReference const & value) const
{
	check(shim()->put_Text(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationGenerator<T>::Uri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationGenerator<T>::Uri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Uri(get(value)));
}

template <typename T> String impl_ISyndicationGenerator<T>::Version() const
{
	String value;
	check(shim()->get_Version(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationGenerator<T>::Version(StringReference const & value) const
{
	check(shim()->put_Version(get(value)));
}

template <typename T> Windows::Web::Syndication::SyndicationGenerator impl_ISyndicationGeneratorFactory<T>::CreateSyndicationGenerator(StringReference const & text) const
{
	Windows::Web::Syndication::SyndicationGenerator generator = nullptr;
	check(shim()->abi_CreateSyndicationGenerator(get(text), put(generator)));
	return generator;
}

template <typename T> String impl_ISyndicationText<T>::Text() const
{
	String value;
	check(shim()->get_Text(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationText<T>::Text(StringReference const & value) const
{
	check(shim()->put_Text(get(value)));
}

template <typename T> String impl_ISyndicationText<T>::Type() const
{
	String value;
	check(shim()->get_Type(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationText<T>::Type(StringReference const & value) const
{
	check(shim()->put_Type(get(value)));
}

template <typename T> Windows::Data::Xml::Dom::XmlDocument impl_ISyndicationText<T>::Xml() const
{
	Windows::Data::Xml::Dom::XmlDocument value = nullptr;
	check(shim()->get_Xml(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationText<T>::Xml(Windows::Data::Xml::Dom::XmlDocument const & value) const
{
	check(shim()->put_Xml(get(value)));
}

template <typename T> Windows::Web::Syndication::SyndicationText impl_ISyndicationTextFactory<T>::CreateSyndicationText(StringReference const & text) const
{
	Windows::Web::Syndication::SyndicationText syndicationText = nullptr;
	check(shim()->abi_CreateSyndicationText(get(text), put(syndicationText)));
	return syndicationText;
}

template <typename T> Windows::Web::Syndication::SyndicationText impl_ISyndicationTextFactory<T>::CreateSyndicationTextEx(StringReference const & text, Windows::Web::Syndication::SyndicationTextType const type) const
{
	Windows::Web::Syndication::SyndicationText syndicationText = nullptr;
	check(shim()->abi_CreateSyndicationTextEx(get(text), type, put(syndicationText)));
	return syndicationText;
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationContent<T>::SourceUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_SourceUri(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationContent<T>::SourceUri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_SourceUri(get(value)));
}

template <typename T> Windows::Web::Syndication::SyndicationContent impl_ISyndicationContentFactory<T>::CreateSyndicationContent(StringReference const & text, Windows::Web::Syndication::SyndicationTextType const type) const
{
	Windows::Web::Syndication::SyndicationContent content = nullptr;
	check(shim()->abi_CreateSyndicationContent(get(text), type, put(content)));
	return content;
}

template <typename T> Windows::Web::Syndication::SyndicationContent impl_ISyndicationContentFactory<T>::CreateSyndicationContentWithSourceUri(Windows::Foundation::Uri const & sourceUri) const
{
	Windows::Web::Syndication::SyndicationContent content = nullptr;
	check(shim()->abi_CreateSyndicationContentWithSourceUri(get(sourceUri), put(content)));
	return content;
}

template <typename T> unsigned impl_ISyndicationLink<T>::Length() const
{
	unsigned value = {};
	check(shim()->get_Length(&value));
	return value;
}

template <typename T> void impl_ISyndicationLink<T>::Length(unsigned const value) const
{
	check(shim()->put_Length(value));
}

template <typename T> String impl_ISyndicationLink<T>::MediaType() const
{
	String value;
	check(shim()->get_MediaType(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationLink<T>::MediaType(StringReference const & value) const
{
	check(shim()->put_MediaType(get(value)));
}

template <typename T> String impl_ISyndicationLink<T>::Relationship() const
{
	String value;
	check(shim()->get_Relationship(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationLink<T>::Relationship(StringReference const & value) const
{
	check(shim()->put_Relationship(get(value)));
}

template <typename T> String impl_ISyndicationLink<T>::Title() const
{
	String value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationLink<T>::Title(StringReference const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationLink<T>::Uri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationLink<T>::Uri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Uri(get(value)));
}

template <typename T> String impl_ISyndicationLink<T>::ResourceLanguage() const
{
	String value;
	check(shim()->get_ResourceLanguage(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationLink<T>::ResourceLanguage(StringReference const & value) const
{
	check(shim()->put_ResourceLanguage(get(value)));
}

template <typename T> Windows::Web::Syndication::SyndicationLink impl_ISyndicationLinkFactory<T>::CreateSyndicationLink(Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Syndication::SyndicationLink link = nullptr;
	check(shim()->abi_CreateSyndicationLink(get(uri), put(link)));
	return link;
}

template <typename T> Windows::Web::Syndication::SyndicationLink impl_ISyndicationLinkFactory<T>::CreateSyndicationLinkEx(Windows::Foundation::Uri const & uri, StringReference const & relationship, StringReference const & title, StringReference const & mediaType, unsigned const length) const
{
	Windows::Web::Syndication::SyndicationLink link = nullptr;
	check(shim()->abi_CreateSyndicationLinkEx(get(uri), get(relationship), get(title), get(mediaType), length, put(link)));
	return link;
}

template <typename T> String impl_ISyndicationPerson<T>::Email() const
{
	String value;
	check(shim()->get_Email(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationPerson<T>::Email(StringReference const & value) const
{
	check(shim()->put_Email(get(value)));
}

template <typename T> String impl_ISyndicationPerson<T>::Name() const
{
	String value;
	check(shim()->get_Name(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationPerson<T>::Name(StringReference const & value) const
{
	check(shim()->put_Name(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationPerson<T>::Uri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_Uri(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationPerson<T>::Uri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_Uri(get(value)));
}

template <typename T> Windows::Web::Syndication::SyndicationPerson impl_ISyndicationPersonFactory<T>::CreateSyndicationPerson(StringReference const & name) const
{
	Windows::Web::Syndication::SyndicationPerson person = nullptr;
	check(shim()->abi_CreateSyndicationPerson(get(name), put(person)));
	return person;
}

template <typename T> Windows::Web::Syndication::SyndicationPerson impl_ISyndicationPersonFactory<T>::CreateSyndicationPersonEx(StringReference const & name, StringReference const & email, Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Syndication::SyndicationPerson person = nullptr;
	check(shim()->abi_CreateSyndicationPersonEx(get(name), get(email), get(uri), put(person)));
	return person;
}

template <typename T> String impl_ISyndicationCategory<T>::Label() const
{
	String value;
	check(shim()->get_Label(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationCategory<T>::Label(StringReference const & value) const
{
	check(shim()->put_Label(get(value)));
}

template <typename T> String impl_ISyndicationCategory<T>::Scheme() const
{
	String value;
	check(shim()->get_Scheme(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationCategory<T>::Scheme(StringReference const & value) const
{
	check(shim()->put_Scheme(get(value)));
}

template <typename T> String impl_ISyndicationCategory<T>::Term() const
{
	String value;
	check(shim()->get_Term(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationCategory<T>::Term(StringReference const & value) const
{
	check(shim()->put_Term(get(value)));
}

template <typename T> Windows::Web::Syndication::SyndicationCategory impl_ISyndicationCategoryFactory<T>::CreateSyndicationCategory(StringReference const & term) const
{
	Windows::Web::Syndication::SyndicationCategory category = nullptr;
	check(shim()->abi_CreateSyndicationCategory(get(term), put(category)));
	return category;
}

template <typename T> Windows::Web::Syndication::SyndicationCategory impl_ISyndicationCategoryFactory<T>::CreateSyndicationCategoryEx(StringReference const & term, StringReference const & scheme, StringReference const & label) const
{
	Windows::Web::Syndication::SyndicationCategory category = nullptr;
	check(shim()->abi_CreateSyndicationCategoryEx(get(term), get(scheme), get(label), put(category)));
	return category;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> impl_ISyndicationItem<T>::Authors() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> value;
	check(shim()->get_Authors(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationCategory> impl_ISyndicationItem<T>::Categories() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationCategory> value;
	check(shim()->get_Categories(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> impl_ISyndicationItem<T>::Contributors() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> value;
	check(shim()->get_Contributors(put(value)));
	return value;
}

template <typename T> Windows::Web::Syndication::SyndicationContent impl_ISyndicationItem<T>::Content() const
{
	Windows::Web::Syndication::SyndicationContent value = nullptr;
	check(shim()->get_Content(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::Content(Windows::Web::Syndication::SyndicationContent const & value) const
{
	check(shim()->put_Content(get(value)));
}

template <typename T> String impl_ISyndicationItem<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::Id(StringReference const & value) const
{
	check(shim()->put_Id(get(value)));
}

template <typename T> Windows::Foundation::DateTime impl_ISyndicationItem<T>::LastUpdatedTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_LastUpdatedTime(&value));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::LastUpdatedTime(Windows::Foundation::DateTime const & value) const
{
	check(shim()->put_LastUpdatedTime(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationLink> impl_ISyndicationItem<T>::Links() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationLink> value;
	check(shim()->get_Links(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISyndicationItem<T>::PublishedDate() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_PublishedDate(&value));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::PublishedDate(Windows::Foundation::DateTime const & value) const
{
	check(shim()->put_PublishedDate(value));
}

template <typename T> Windows::Web::Syndication::ISyndicationText impl_ISyndicationItem<T>::Rights() const
{
	Windows::Web::Syndication::ISyndicationText value;
	check(shim()->get_Rights(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::Rights(Windows::Web::Syndication::ISyndicationText const & value) const
{
	check(shim()->put_Rights(get(value)));
}

template <typename T> Windows::Web::Syndication::SyndicationFeed impl_ISyndicationItem<T>::Source() const
{
	Windows::Web::Syndication::SyndicationFeed value = nullptr;
	check(shim()->get_Source(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::Source(Windows::Web::Syndication::SyndicationFeed const & value) const
{
	check(shim()->put_Source(get(value)));
}

template <typename T> Windows::Web::Syndication::ISyndicationText impl_ISyndicationItem<T>::Summary() const
{
	Windows::Web::Syndication::ISyndicationText value;
	check(shim()->get_Summary(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::Summary(Windows::Web::Syndication::ISyndicationText const & value) const
{
	check(shim()->put_Summary(get(value)));
}

template <typename T> Windows::Web::Syndication::ISyndicationText impl_ISyndicationItem<T>::Title() const
{
	Windows::Web::Syndication::ISyndicationText value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::Title(Windows::Web::Syndication::ISyndicationText const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationItem<T>::CommentsUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_CommentsUri(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::CommentsUri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_CommentsUri(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationItem<T>::EditUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_EditUri(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationItem<T>::EditMediaUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_EditMediaUri(put(value)));
	return value;
}

template <typename T> String impl_ISyndicationItem<T>::ETag() const
{
	String value;
	check(shim()->get_ETag(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationItem<T>::ItemUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ItemUri(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationItem<T>::Load(StringReference const & item) const
{
	check(shim()->abi_Load(get(item)));
}

template <typename T> void impl_ISyndicationItem<T>::LoadFromXml(Windows::Data::Xml::Dom::XmlDocument const & itemDocument) const
{
	check(shim()->abi_LoadFromXml(get(itemDocument)));
}

template <typename T> Windows::Web::Syndication::SyndicationItem impl_ISyndicationItemFactory<T>::CreateSyndicationItem(StringReference const & title, Windows::Web::Syndication::SyndicationContent const & content, Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Syndication::SyndicationItem item = nullptr;
	check(shim()->abi_CreateSyndicationItem(get(title), get(content), get(uri), put(item)));
	return item;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> impl_ISyndicationFeed<T>::Authors() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> value;
	check(shim()->get_Authors(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationCategory> impl_ISyndicationFeed<T>::Categories() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationCategory> value;
	check(shim()->get_Categories(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> impl_ISyndicationFeed<T>::Contributors() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationPerson> value;
	check(shim()->get_Contributors(put(value)));
	return value;
}

template <typename T> Windows::Web::Syndication::SyndicationGenerator impl_ISyndicationFeed<T>::Generator() const
{
	Windows::Web::Syndication::SyndicationGenerator value = nullptr;
	check(shim()->get_Generator(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::Generator(Windows::Web::Syndication::SyndicationGenerator const & value) const
{
	check(shim()->put_Generator(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationFeed<T>::IconUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_IconUri(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::IconUri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_IconUri(get(value)));
}

template <typename T> String impl_ISyndicationFeed<T>::Id() const
{
	String value;
	check(shim()->get_Id(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::Id(StringReference const & value) const
{
	check(shim()->put_Id(get(value)));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationItem> impl_ISyndicationFeed<T>::Items() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationItem> value;
	check(shim()->get_Items(put(value)));
	return value;
}

template <typename T> Windows::Foundation::DateTime impl_ISyndicationFeed<T>::LastUpdatedTime() const
{
	Windows::Foundation::DateTime value = {};
	check(shim()->get_LastUpdatedTime(&value));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::LastUpdatedTime(Windows::Foundation::DateTime const & value) const
{
	check(shim()->put_LastUpdatedTime(value));
}

template <typename T> Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationLink> impl_ISyndicationFeed<T>::Links() const
{
	Windows::Foundation::Collections::IVector<Windows::Web::Syndication::SyndicationLink> value;
	check(shim()->get_Links(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationFeed<T>::ImageUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_ImageUri(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::ImageUri(Windows::Foundation::Uri const & value) const
{
	check(shim()->put_ImageUri(get(value)));
}

template <typename T> Windows::Web::Syndication::ISyndicationText impl_ISyndicationFeed<T>::Rights() const
{
	Windows::Web::Syndication::ISyndicationText value;
	check(shim()->get_Rights(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::Rights(Windows::Web::Syndication::ISyndicationText const & value) const
{
	check(shim()->put_Rights(get(value)));
}

template <typename T> Windows::Web::Syndication::ISyndicationText impl_ISyndicationFeed<T>::Subtitle() const
{
	Windows::Web::Syndication::ISyndicationText value;
	check(shim()->get_Subtitle(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::Subtitle(Windows::Web::Syndication::ISyndicationText const & value) const
{
	check(shim()->put_Subtitle(get(value)));
}

template <typename T> Windows::Web::Syndication::ISyndicationText impl_ISyndicationFeed<T>::Title() const
{
	Windows::Web::Syndication::ISyndicationText value;
	check(shim()->get_Title(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::Title(Windows::Web::Syndication::ISyndicationText const & value) const
{
	check(shim()->put_Title(get(value)));
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationFeed<T>::FirstUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_FirstUri(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationFeed<T>::LastUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_LastUri(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationFeed<T>::NextUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_NextUri(put(value)));
	return value;
}

template <typename T> Windows::Foundation::Uri impl_ISyndicationFeed<T>::PreviousUri() const
{
	Windows::Foundation::Uri value = nullptr;
	check(shim()->get_PreviousUri(put(value)));
	return value;
}

template <typename T> Windows::Web::Syndication::SyndicationFormat impl_ISyndicationFeed<T>::SourceFormat() const
{
	Windows::Web::Syndication::SyndicationFormat value = {};
	check(shim()->get_SourceFormat(&value));
	return value;
}

template <typename T> void impl_ISyndicationFeed<T>::Load(StringReference const & feed) const
{
	check(shim()->abi_Load(get(feed)));
}

template <typename T> void impl_ISyndicationFeed<T>::LoadFromXml(Windows::Data::Xml::Dom::XmlDocument const & feedDocument) const
{
	check(shim()->abi_LoadFromXml(get(feedDocument)));
}

template <typename T> Windows::Web::Syndication::SyndicationFeed impl_ISyndicationFeedFactory<T>::CreateSyndicationFeed(StringReference const & title, StringReference const & subtitle, Windows::Foundation::Uri const & uri) const
{
	Windows::Web::Syndication::SyndicationFeed feed = nullptr;
	check(shim()->abi_CreateSyndicationFeed(get(title), get(subtitle), get(uri), put(feed)));
	return feed;
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_ISyndicationClient<T>::ServerCredential() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check(shim()->get_ServerCredential(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationClient<T>::ServerCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check(shim()->put_ServerCredential(get(value)));
}

template <typename T> Windows::Security::Credentials::PasswordCredential impl_ISyndicationClient<T>::ProxyCredential() const
{
	Windows::Security::Credentials::PasswordCredential value = nullptr;
	check(shim()->get_ProxyCredential(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationClient<T>::ProxyCredential(Windows::Security::Credentials::PasswordCredential const & value) const
{
	check(shim()->put_ProxyCredential(get(value)));
}

template <typename T> unsigned impl_ISyndicationClient<T>::MaxResponseBufferSize() const
{
	unsigned value = {};
	check(shim()->get_MaxResponseBufferSize(&value));
	return value;
}

template <typename T> void impl_ISyndicationClient<T>::MaxResponseBufferSize(unsigned const value) const
{
	check(shim()->put_MaxResponseBufferSize(value));
}

template <typename T> unsigned impl_ISyndicationClient<T>::Timeout() const
{
	unsigned value = {};
	check(shim()->get_Timeout(&value));
	return value;
}

template <typename T> void impl_ISyndicationClient<T>::Timeout(unsigned const value) const
{
	check(shim()->put_Timeout(value));
}

template <typename T> bool impl_ISyndicationClient<T>::BypassCacheOnRetrieve() const
{
	bool value = {};
	check(shim()->get_BypassCacheOnRetrieve(put(value)));
	return value;
}

template <typename T> void impl_ISyndicationClient<T>::BypassCacheOnRetrieve(bool const value) const
{
	check(shim()->put_BypassCacheOnRetrieve(value));
}

template <typename T> void impl_ISyndicationClient<T>::SetRequestHeader(StringReference const & name, StringReference const & value) const
{
	check(shim()->abi_SetRequestHeader(get(name), get(value)));
}

template <typename T> Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationFeed, winrt::Windows::Web::Syndication::RetrievalProgress> impl_ISyndicationClient<T>::RetrieveFeedAsync(Windows::Foundation::Uri const & uri) const
{
	Windows::Foundation::IAsyncOperationWithProgress<Windows::Web::Syndication::SyndicationFeed, winrt::Windows::Web::Syndication::RetrievalProgress> operation;
	check(shim()->abi_RetrieveFeedAsync(get(uri), put(operation)));
	return operation;
}

template <typename T> Windows::Web::Syndication::SyndicationClient impl_ISyndicationClientFactory<T>::CreateSyndicationClient(Windows::Security::Credentials::PasswordCredential const & serverCredential) const
{
	Windows::Web::Syndication::SyndicationClient syndicationClient = nullptr;
	check(shim()->abi_CreateSyndicationClient(get(serverCredential), put(syndicationClient)));
	return syndicationClient;
}

template <typename T> Windows::Web::Syndication::SyndicationErrorStatus impl_ISyndicationErrorStatics<T>::GetStatus(int const hresult) const
{
	Windows::Web::Syndication::SyndicationErrorStatus status = {};
	check(shim()->abi_GetStatus(hresult, &status));
	return status;
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel {

inline Windows::ApplicationModel::Package Package::Current()
{
	return GetActivationFactory<Package, IPackageStatics>().Current();
}

inline bool DesignMode::DesignModeEnabled()
{
	return GetActivationFactory<DesignMode, IDesignModeStatics>().DesignModeEnabled();
}

}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Activation {

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace AppService {

inline AppServiceConnection::AppServiceConnection() :
	AppServiceConnection(ActivateInstance<AppServiceConnection>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> AppServiceCatalog::FindAppServiceProvidersAsync(StringReference const & appServiceName)
{
	return GetActivationFactory<AppServiceCatalog, IAppServiceCatalogStatics>().FindAppServiceProvidersAsync(appServiceName);
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Appointments {

inline Appointment::Appointment() :
	Appointment(ActivateInstance<Appointment>())
{}

inline AppointmentOrganizer::AppointmentOrganizer() :
	AppointmentOrganizer(ActivateInstance<AppointmentOrganizer>())
{}

inline AppointmentInvitee::AppointmentInvitee() :
	AppointmentInvitee(ActivateInstance<AppointmentInvitee>())
{}

inline AppointmentRecurrence::AppointmentRecurrence() :
	AppointmentRecurrence(ActivateInstance<AppointmentRecurrence>())
{}

inline Windows::Foundation::IAsyncAction AppointmentManager::ShowAppointmentDetailsAsync(StringReference const & appointmentId)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics2>().ShowAppointmentDetailsAsync(appointmentId);
}

inline Windows::Foundation::IAsyncAction AppointmentManager::ShowAppointmentDetailsAsync(StringReference const & appointmentId, Windows::Foundation::DateTime const & instanceStartDate)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics2>().ShowAppointmentDetailsAsync(appointmentId, instanceStartDate);
}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowEditNewAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics2>().ShowEditNewAppointmentAsync(appointment);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Appointments::AppointmentStore> AppointmentManager::RequestStoreAsync(Windows::ApplicationModel::Appointments::AppointmentStoreAccessType const options)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics2>().RequestStoreAsync(options);
}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowAddAppointmentAsync(appointment, selection);
}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowAddAppointmentAsync(Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowAddAppointmentAsync(appointment, selection, preferredPlacement);
}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowReplaceAppointmentAsync(StringReference const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowReplaceAppointmentAsync(appointmentId, appointment, selection);
}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowReplaceAppointmentAsync(StringReference const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowReplaceAppointmentAsync(appointmentId, appointment, selection, preferredPlacement);
}

inline Windows::Foundation::IAsyncOperation<String> AppointmentManager::ShowReplaceAppointmentAsync(StringReference const & appointmentId, Windows::ApplicationModel::Appointments::Appointment const & appointment, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowReplaceAppointmentAsync(appointmentId, appointment, selection, preferredPlacement, instanceStartDate);
}

inline Windows::Foundation::IAsyncOperation<bool> AppointmentManager::ShowRemoveAppointmentAsync(StringReference const & appointmentId, Windows::Foundation::Rect const & selection)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowRemoveAppointmentAsync(appointmentId, selection);
}

inline Windows::Foundation::IAsyncOperation<bool> AppointmentManager::ShowRemoveAppointmentAsync(StringReference const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowRemoveAppointmentAsync(appointmentId, selection, preferredPlacement);
}

inline Windows::Foundation::IAsyncOperation<bool> AppointmentManager::ShowRemoveAppointmentAsync(StringReference const & appointmentId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::Foundation::DateTime const & instanceStartDate)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowRemoveAppointmentAsync(appointmentId, selection, preferredPlacement, instanceStartDate);
}

inline Windows::Foundation::IAsyncAction AppointmentManager::ShowTimeFrameAsync(Windows::Foundation::DateTime const & timeToShow, Windows::Foundation::TimeSpan const & duration)
{
	return GetActivationFactory<AppointmentManager, IAppointmentManagerStatics>().ShowTimeFrameAsync(timeToShow, duration);
}

inline FindAppointmentsOptions::FindAppointmentsOptions() :
	FindAppointmentsOptions(ActivateInstance<FindAppointmentsOptions>())
{}

inline String AppointmentProperties::ChangeNumber()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics2>().ChangeNumber();
}

inline String AppointmentProperties::RemoteChangeNumber()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics2>().RemoteChangeNumber();
}

inline String AppointmentProperties::DetailsKind()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics2>().DetailsKind();
}

inline String AppointmentProperties::Subject()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Subject();
}

inline String AppointmentProperties::Location()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Location();
}

inline String AppointmentProperties::StartTime()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().StartTime();
}

inline String AppointmentProperties::Duration()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Duration();
}

inline String AppointmentProperties::Reminder()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Reminder();
}

inline String AppointmentProperties::BusyStatus()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().BusyStatus();
}

inline String AppointmentProperties::Sensitivity()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Sensitivity();
}

inline String AppointmentProperties::OriginalStartTime()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().OriginalStartTime();
}

inline String AppointmentProperties::IsResponseRequested()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().IsResponseRequested();
}

inline String AppointmentProperties::AllowNewTimeProposal()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().AllowNewTimeProposal();
}

inline String AppointmentProperties::AllDay()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().AllDay();
}

inline String AppointmentProperties::Details()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Details();
}

inline String AppointmentProperties::OnlineMeetingLink()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().OnlineMeetingLink();
}

inline String AppointmentProperties::ReplyTime()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().ReplyTime();
}

inline String AppointmentProperties::Organizer()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Organizer();
}

inline String AppointmentProperties::UserResponse()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().UserResponse();
}

inline String AppointmentProperties::HasInvitees()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().HasInvitees();
}

inline String AppointmentProperties::IsCanceledMeeting()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().IsCanceledMeeting();
}

inline String AppointmentProperties::IsOrganizedByUser()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().IsOrganizedByUser();
}

inline String AppointmentProperties::Recurrence()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Recurrence();
}

inline String AppointmentProperties::Uri()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Uri();
}

inline String AppointmentProperties::Invitees()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().Invitees();
}

inline Windows::Foundation::Collections::IVector<String> AppointmentProperties::DefaultProperties()
{
	return GetActivationFactory<AppointmentProperties, IAppointmentPropertiesStatics>().DefaultProperties();
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Appointments { namespace AppointmentsProvider {

inline String AppointmentsProviderLaunchActionVerbs::AddAppointment()
{
	return GetActivationFactory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics>().AddAppointment();
}

inline String AppointmentsProviderLaunchActionVerbs::ReplaceAppointment()
{
	return GetActivationFactory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics>().ReplaceAppointment();
}

inline String AppointmentsProviderLaunchActionVerbs::RemoveAppointment()
{
	return GetActivationFactory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics>().RemoveAppointment();
}

inline String AppointmentsProviderLaunchActionVerbs::ShowTimeFrame()
{
	return GetActivationFactory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics>().ShowTimeFrame();
}

inline String AppointmentsProviderLaunchActionVerbs::ShowAppointmentDetails()
{
	return GetActivationFactory<AppointmentsProviderLaunchActionVerbs, IAppointmentsProviderLaunchActionVerbsStatics2>().ShowAppointmentDetails();
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Background {

inline Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::AlarmAccessStatus> AlarmApplicationManager::RequestAccessAsync()
{
	return GetActivationFactory<AlarmApplicationManager, IAlarmApplicationManagerStatics>().RequestAccessAsync();
}

inline Windows::ApplicationModel::Background::AlarmAccessStatus AlarmApplicationManager::GetAccessStatus()
{
	return GetActivationFactory<AlarmApplicationManager, IAlarmApplicationManagerStatics>().GetAccessStatus();
}

inline AppointmentStoreNotificationTrigger::AppointmentStoreNotificationTrigger() :
	AppointmentStoreNotificationTrigger(ActivateInstance<AppointmentStoreNotificationTrigger>())
{}

inline ApplicationTrigger::ApplicationTrigger() :
	ApplicationTrigger(ActivateInstance<ApplicationTrigger>())
{}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::BackgroundAccessStatus> BackgroundExecutionManager::RequestAccessAsync()
{
	return GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().RequestAccessAsync();
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Background::BackgroundAccessStatus> BackgroundExecutionManager::RequestAccessAsync(StringReference const & applicationId)
{
	return GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().RequestAccessAsync(applicationId);
}

inline void BackgroundExecutionManager::RemoveAccess()
{
	GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().RemoveAccess();
}

inline void BackgroundExecutionManager::RemoveAccess(StringReference const & applicationId)
{
	GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().RemoveAccess(applicationId);
}

inline Windows::ApplicationModel::Background::BackgroundAccessStatus BackgroundExecutionManager::GetAccessStatus()
{
	return GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().GetAccessStatus();
}

inline Windows::ApplicationModel::Background::BackgroundAccessStatus BackgroundExecutionManager::GetAccessStatus(StringReference const & applicationId)
{
	return GetActivationFactory<BackgroundExecutionManager, IBackgroundExecutionManagerStatics>().GetAccessStatus(applicationId);
}

inline MediaProcessingTrigger::MediaProcessingTrigger() :
	MediaProcessingTrigger(ActivateInstance<MediaProcessingTrigger>())
{}

inline Windows::Foundation::Collections::IMapView<GUID, Windows::ApplicationModel::Background::IBackgroundTaskRegistration> BackgroundTaskRegistration::AllTasks()
{
	return GetActivationFactory<BackgroundTaskRegistration, IBackgroundTaskRegistrationStatics>().AllTasks();
}

inline BackgroundTaskBuilder::BackgroundTaskBuilder() :
	BackgroundTaskBuilder(ActivateInstance<BackgroundTaskBuilder>())
{}

inline Windows::ApplicationModel::Background::BackgroundWorkCostValue BackgroundWorkCost::CurrentBackgroundWorkCost()
{
	return GetActivationFactory<BackgroundWorkCost, IBackgroundWorkCostStatics>().CurrentBackgroundWorkCost();
}

inline ChatMessageNotificationTrigger::ChatMessageNotificationTrigger() :
	ChatMessageNotificationTrigger(ActivateInstance<ChatMessageNotificationTrigger>())
{}

inline ChatMessageReceivedNotificationTrigger::ChatMessageReceivedNotificationTrigger() :
	ChatMessageReceivedNotificationTrigger(ActivateInstance<ChatMessageReceivedNotificationTrigger>())
{}

inline RcsEndUserMessageAvailableTrigger::RcsEndUserMessageAvailableTrigger() :
	RcsEndUserMessageAvailableTrigger(ActivateInstance<RcsEndUserMessageAvailableTrigger>())
{}

inline ContactStoreNotificationTrigger::ContactStoreNotificationTrigger() :
	ContactStoreNotificationTrigger(ActivateInstance<ContactStoreNotificationTrigger>())
{}

inline ContentPrefetchTrigger::ContentPrefetchTrigger() :
	ContentPrefetchTrigger(ActivateInstance<ContentPrefetchTrigger>())
{}

inline ContentPrefetchTrigger::ContentPrefetchTrigger(Windows::Foundation::TimeSpan const & waitInterval) :
	ContentPrefetchTrigger(GetActivationFactory<ContentPrefetchTrigger, IContentPrefetchTriggerFactory>().Create(waitInterval))
{}

inline EmailStoreNotificationTrigger::EmailStoreNotificationTrigger() :
	EmailStoreNotificationTrigger(ActivateInstance<EmailStoreNotificationTrigger>())
{}

inline MobileBroadbandRegistrationStateChangeTrigger::MobileBroadbandRegistrationStateChangeTrigger() :
	MobileBroadbandRegistrationStateChangeTrigger(ActivateInstance<MobileBroadbandRegistrationStateChangeTrigger>())
{}

inline MobileBroadbandRadioStateChangeTrigger::MobileBroadbandRadioStateChangeTrigger() :
	MobileBroadbandRadioStateChangeTrigger(ActivateInstance<MobileBroadbandRadioStateChangeTrigger>())
{}

inline MobileBroadbandPinLockStateChangeTrigger::MobileBroadbandPinLockStateChangeTrigger() :
	MobileBroadbandPinLockStateChangeTrigger(ActivateInstance<MobileBroadbandPinLockStateChangeTrigger>())
{}

inline MobileBroadbandDeviceServiceNotificationTrigger::MobileBroadbandDeviceServiceNotificationTrigger() :
	MobileBroadbandDeviceServiceNotificationTrigger(ActivateInstance<MobileBroadbandDeviceServiceNotificationTrigger>())
{}

inline SmsMessageReceivedTrigger::SmsMessageReceivedTrigger(Windows::Devices::Sms::SmsFilterRules const & filterRules) :
	SmsMessageReceivedTrigger(GetActivationFactory<SmsMessageReceivedTrigger, ISmsMessageReceivedTriggerFactory>().Create(filterRules))
{}

inline Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger StorageLibraryContentChangedTrigger::Create(Windows::Storage::StorageLibrary const & storageLibrary)
{
	return GetActivationFactory<StorageLibraryContentChangedTrigger, IStorageLibraryContentChangedTriggerStatics>().Create(storageLibrary);
}

inline Windows::ApplicationModel::Background::StorageLibraryContentChangedTrigger StorageLibraryContentChangedTrigger::CreateFromLibraries(Windows::Foundation::Collections::IIterable<Windows::Storage::StorageLibrary> const & storageLibraries)
{
	return GetActivationFactory<StorageLibraryContentChangedTrigger, IStorageLibraryContentChangedTriggerStatics>().CreateFromLibraries(storageLibraries);
}

inline SystemTrigger::SystemTrigger(Windows::ApplicationModel::Background::SystemTriggerType const triggerType, bool const oneShot) :
	SystemTrigger(GetActivationFactory<SystemTrigger, ISystemTriggerFactory>().Create(triggerType, oneShot))
{}

inline SystemCondition::SystemCondition(Windows::ApplicationModel::Background::SystemConditionType const conditionType) :
	SystemCondition(GetActivationFactory<SystemCondition, ISystemConditionFactory>().Create(conditionType))
{}

inline NetworkOperatorNotificationTrigger::NetworkOperatorNotificationTrigger(StringReference const & networkAccountId) :
	NetworkOperatorNotificationTrigger(GetActivationFactory<NetworkOperatorNotificationTrigger, INetworkOperatorNotificationTriggerFactory>().Create(networkAccountId))
{}

inline CachedFileUpdaterTrigger::CachedFileUpdaterTrigger() :
	CachedFileUpdaterTrigger(ActivateInstance<CachedFileUpdaterTrigger>())
{}

inline TimeTrigger::TimeTrigger(unsigned const freshnessTime, bool const oneShot) :
	TimeTrigger(GetActivationFactory<TimeTrigger, ITimeTriggerFactory>().Create(freshnessTime, oneShot))
{}

inline MaintenanceTrigger::MaintenanceTrigger(unsigned const freshnessTime, bool const oneShot) :
	MaintenanceTrigger(GetActivationFactory<MaintenanceTrigger, IMaintenanceTriggerFactory>().Create(freshnessTime, oneShot))
{}

inline PhoneTrigger::PhoneTrigger(Windows::ApplicationModel::Calls::Background::PhoneTriggerType const type, bool const oneShot) :
	PhoneTrigger(GetActivationFactory<PhoneTrigger, IPhoneTriggerFactory>().Create(type, oneShot))
{}

inline DeviceUseTrigger::DeviceUseTrigger() :
	DeviceUseTrigger(ActivateInstance<DeviceUseTrigger>())
{}

inline DeviceServicingTrigger::DeviceServicingTrigger() :
	DeviceServicingTrigger(ActivateInstance<DeviceServicingTrigger>())
{}

inline RfcommConnectionTrigger::RfcommConnectionTrigger() :
	RfcommConnectionTrigger(ActivateInstance<RfcommConnectionTrigger>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Background::DeviceConnectionChangeTrigger> DeviceConnectionChangeTrigger::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<DeviceConnectionChangeTrigger, IDeviceConnectionChangeTriggerStatics>().FromIdAsync(deviceId);
}

inline GattCharacteristicNotificationTrigger::GattCharacteristicNotificationTrigger(Windows::Devices::Bluetooth::GenericAttributeProfile::GattCharacteristic const & characteristic) :
	GattCharacteristicNotificationTrigger(GetActivationFactory<GattCharacteristicNotificationTrigger, IGattCharacteristicNotificationTriggerFactory>().Create(characteristic))
{}

inline BluetoothLEAdvertisementWatcherTrigger::BluetoothLEAdvertisementWatcherTrigger() :
	BluetoothLEAdvertisementWatcherTrigger(ActivateInstance<BluetoothLEAdvertisementWatcherTrigger>())
{}

inline BluetoothLEAdvertisementPublisherTrigger::BluetoothLEAdvertisementPublisherTrigger() :
	BluetoothLEAdvertisementPublisherTrigger(ActivateInstance<BluetoothLEAdvertisementPublisherTrigger>())
{}

inline LocationTrigger::LocationTrigger(Windows::ApplicationModel::Background::LocationTriggerType const triggerType) :
	LocationTrigger(GetActivationFactory<LocationTrigger, ILocationTriggerFactory>().Create(triggerType))
{}

inline ActivitySensorTrigger::ActivitySensorTrigger(unsigned const reportIntervalInMilliseconds) :
	ActivitySensorTrigger(GetActivationFactory<ActivitySensorTrigger, IActivitySensorTriggerFactory>().Create(reportIntervalInMilliseconds))
{}

inline SensorDataThresholdTrigger::SensorDataThresholdTrigger(Windows::Devices::Sensors::ISensorDataThreshold const & threshold) :
	SensorDataThresholdTrigger(GetActivationFactory<SensorDataThresholdTrigger, ISensorDataThresholdTriggerFactory>().Create(threshold))
{}

inline NetworkOperatorHotspotAuthenticationTrigger::NetworkOperatorHotspotAuthenticationTrigger() :
	NetworkOperatorHotspotAuthenticationTrigger(ActivateInstance<NetworkOperatorHotspotAuthenticationTrigger>())
{}

inline SocketActivityTrigger::SocketActivityTrigger() :
	SocketActivityTrigger(ActivateInstance<SocketActivityTrigger>())
{}

inline PushNotificationTrigger::PushNotificationTrigger() :
	PushNotificationTrigger(ActivateInstance<PushNotificationTrigger>())
{}

inline PushNotificationTrigger::PushNotificationTrigger(StringReference const & applicationId) :
	PushNotificationTrigger(GetActivationFactory<PushNotificationTrigger, IPushNotificationTriggerFactory>().Create(applicationId))
{}

inline ToastNotificationHistoryChangedTrigger::ToastNotificationHistoryChangedTrigger() :
	ToastNotificationHistoryChangedTrigger(ActivateInstance<ToastNotificationHistoryChangedTrigger>())
{}

inline ToastNotificationHistoryChangedTrigger::ToastNotificationHistoryChangedTrigger(StringReference const & applicationId) :
	ToastNotificationHistoryChangedTrigger(GetActivationFactory<ToastNotificationHistoryChangedTrigger, IToastNotificationHistoryChangedTriggerFactory>().Create(applicationId))
{}

inline ToastNotificationActionTrigger::ToastNotificationActionTrigger() :
	ToastNotificationActionTrigger(ActivateInstance<ToastNotificationActionTrigger>())
{}

inline ToastNotificationActionTrigger::ToastNotificationActionTrigger(StringReference const & applicationId) :
	ToastNotificationActionTrigger(GetActivationFactory<ToastNotificationActionTrigger, IToastNotificationActionTriggerFactory>().Create(applicationId))
{}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls {

inline PhoneCallHistoryEntryAddress::PhoneCallHistoryEntryAddress() :
	PhoneCallHistoryEntryAddress(ActivateInstance<PhoneCallHistoryEntryAddress>())
{}

inline PhoneCallHistoryEntryAddress::PhoneCallHistoryEntryAddress(StringReference const & rawAddress, Windows::ApplicationModel::Calls::PhoneCallHistoryEntryRawAddressKind const rawAddressKind) :
	PhoneCallHistoryEntryAddress(GetActivationFactory<PhoneCallHistoryEntryAddress, IPhoneCallHistoryEntryAddressFactory>().Create(rawAddress, rawAddressKind))
{}

inline PhoneCallHistoryEntry::PhoneCallHistoryEntry() :
	PhoneCallHistoryEntry(ActivateInstance<PhoneCallHistoryEntry>())
{}

inline PhoneCallHistoryEntryQueryOptions::PhoneCallHistoryEntryQueryOptions() :
	PhoneCallHistoryEntryQueryOptions(ActivateInstance<PhoneCallHistoryEntryQueryOptions>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallHistoryStore> PhoneCallHistoryManager::RequestStoreAsync(Windows::ApplicationModel::Calls::PhoneCallHistoryStoreAccessType const accessType)
{
	return GetActivationFactory<PhoneCallHistoryManager, IPhoneCallHistoryManagerStatics>().RequestStoreAsync(accessType);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneLine> PhoneLine::FromIdAsync(GUID const lineId)
{
	return GetActivationFactory<PhoneLine, IPhoneLineStatics>().FromIdAsync(lineId);
}

inline PhoneDialOptions::PhoneDialOptions() :
	PhoneDialOptions(ActivateInstance<PhoneDialOptions>())
{}

inline long long PhoneCallManager::CallStateChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<PhoneCallManager, IPhoneCallManagerStatics2>().CallStateChanged(handler);
}

template <typename F> long long PhoneCallManager::CallStateChanged(F handler)
{
	return GetActivationFactory<PhoneCallManager, IPhoneCallManagerStatics2>().CallStateChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void PhoneCallManager::CallStateChanged(long long const token)
{
	GetActivationFactory<PhoneCallManager, IPhoneCallManagerStatics2>().CallStateChanged(token);
}

inline bool PhoneCallManager::IsCallActive()
{
	return GetActivationFactory<PhoneCallManager, IPhoneCallManagerStatics2>().IsCallActive();
}

inline bool PhoneCallManager::IsCallIncoming()
{
	return GetActivationFactory<PhoneCallManager, IPhoneCallManagerStatics2>().IsCallIncoming();
}

inline void PhoneCallManager::ShowPhoneCallSettingsUI()
{
	GetActivationFactory<PhoneCallManager, IPhoneCallManagerStatics2>().ShowPhoneCallSettingsUI();
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallStore> PhoneCallManager::RequestStoreAsync()
{
	return GetActivationFactory<PhoneCallManager, IPhoneCallManagerStatics2>().RequestStoreAsync();
}

inline void PhoneCallManager::ShowPhoneCallUI(StringReference const & phoneNumber, StringReference const & displayName)
{
	GetActivationFactory<PhoneCallManager, IPhoneCallManagerStatics>().ShowPhoneCallUI(phoneNumber, displayName);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Calls::PhoneCallVideoCapabilities> PhoneCallVideoCapabilitiesManager::GetCapabilitiesAsync(StringReference const & phoneNumber)
{
	return GetActivationFactory<PhoneCallVideoCapabilitiesManager, IPhoneCallVideoCapabilitiesManagerStatics>().GetCapabilitiesAsync(phoneNumber);
}

inline bool PhoneCallBlocking::BlockUnknownNumbers()
{
	return GetActivationFactory<PhoneCallBlocking, IPhoneCallBlockingStatics>().BlockUnknownNumbers();
}

inline void PhoneCallBlocking::BlockUnknownNumbers(bool const value)
{
	GetActivationFactory<PhoneCallBlocking, IPhoneCallBlockingStatics>().BlockUnknownNumbers(value);
}

inline bool PhoneCallBlocking::BlockPrivateNumbers()
{
	return GetActivationFactory<PhoneCallBlocking, IPhoneCallBlockingStatics>().BlockPrivateNumbers();
}

inline void PhoneCallBlocking::BlockPrivateNumbers(bool const value)
{
	GetActivationFactory<PhoneCallBlocking, IPhoneCallBlockingStatics>().BlockPrivateNumbers(value);
}

inline Windows::Foundation::IAsyncOperation<bool> PhoneCallBlocking::SetCallBlockingListAsync(Windows::Foundation::Collections::IIterable<String> const & phoneNumberList)
{
	return GetActivationFactory<PhoneCallBlocking, IPhoneCallBlockingStatics>().SetCallBlockingListAsync(phoneNumberList);
}

inline Windows::ApplicationModel::Calls::VoipCallCoordinator VoipCallCoordinator::GetDefault()
{
	return GetActivationFactory<VoipCallCoordinator, IVoipCallCoordinatorStatics>().GetDefault();
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls { namespace Background {

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Calls { namespace Provider {

inline PhoneCallOrigin::PhoneCallOrigin() :
	PhoneCallOrigin(ActivateInstance<PhoneCallOrigin>())
{}

inline bool PhoneCallOriginManager::IsCurrentAppActiveCallOriginApp()
{
	return GetActivationFactory<PhoneCallOriginManager, IPhoneCallOriginManagerStatics>().IsCurrentAppActiveCallOriginApp();
}

inline void PhoneCallOriginManager::ShowPhoneCallOriginSettingsUI()
{
	GetActivationFactory<PhoneCallOriginManager, IPhoneCallOriginManagerStatics>().ShowPhoneCallOriginSettingsUI();
}

inline void PhoneCallOriginManager::SetCallOrigin(GUID const requestId, Windows::ApplicationModel::Calls::Provider::PhoneCallOrigin const & callOrigin)
{
	GetActivationFactory<PhoneCallOriginManager, IPhoneCallOriginManagerStatics>().SetCallOrigin(requestId, callOrigin);
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Chat {

inline ChatMessage::ChatMessage() :
	ChatMessage(ActivateInstance<ChatMessage>())
{}

inline ChatMessageAttachment::ChatMessageAttachment(StringReference const & mimeType, Windows::Storage::Streams::IRandomAccessStreamReference const & dataStreamReference) :
	ChatMessageAttachment(GetActivationFactory<ChatMessageAttachment, IChatMessageAttachmentFactory>().CreateChatMessageAttachment(mimeType, dataStreamReference))
{}

inline ChatConversationThreadingInfo::ChatConversationThreadingInfo() :
	ChatConversationThreadingInfo(ActivateInstance<ChatConversationThreadingInfo>())
{}

inline ChatRecipientDeliveryInfo::ChatRecipientDeliveryInfo() :
	ChatRecipientDeliveryInfo(ActivateInstance<ChatRecipientDeliveryInfo>())
{}

inline ChatQueryOptions::ChatQueryOptions() :
	ChatQueryOptions(ActivateInstance<ChatQueryOptions>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::ChatMessageTransport>> ChatMessageManager::GetTransportsAsync()
{
	return GetActivationFactory<ChatMessageManager, IChatMessageManagerStatic>().GetTransportsAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatMessageStore> ChatMessageManager::RequestStoreAsync()
{
	return GetActivationFactory<ChatMessageManager, IChatMessageManagerStatic>().RequestStoreAsync();
}

inline Windows::Foundation::IAsyncAction ChatMessageManager::ShowComposeSmsMessageAsync(Windows::ApplicationModel::Chat::ChatMessage const & message)
{
	return GetActivationFactory<ChatMessageManager, IChatMessageManagerStatic>().ShowComposeSmsMessageAsync(message);
}

inline void ChatMessageManager::ShowSmsSettings()
{
	GetActivationFactory<ChatMessageManager, IChatMessageManagerStatic>().ShowSmsSettings();
}

inline Windows::Foundation::IAsyncOperation<String> ChatMessageManager::RegisterTransportAsync()
{
	return GetActivationFactory<ChatMessageManager, IChatMessageManager2Statics>().RegisterTransportAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatMessageTransport> ChatMessageManager::GetTransportAsync(StringReference const & transportId)
{
	return GetActivationFactory<ChatMessageManager, IChatMessageManager2Statics>().GetTransportAsync(transportId);
}

inline Windows::Foundation::IAsyncAction ChatMessageBlocking::MarkMessageAsBlockedAsync(StringReference const & localChatMessageId, bool const blocked)
{
	return GetActivationFactory<ChatMessageBlocking, IChatMessageBlockingStatic>().MarkMessageAsBlockedAsync(localChatMessageId, blocked);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatCapabilities> ChatCapabilitiesManager::GetCachedCapabilitiesAsync(StringReference const & address)
{
	return GetActivationFactory<ChatCapabilitiesManager, IChatCapabilitiesManagerStatics>().GetCachedCapabilitiesAsync(address);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::ChatCapabilities> ChatCapabilitiesManager::GetCapabilitiesFromNetworkAsync(StringReference const & address)
{
	return GetActivationFactory<ChatCapabilitiesManager, IChatCapabilitiesManagerStatics>().GetCapabilitiesFromNetworkAsync(address);
}

inline Windows::ApplicationModel::Chat::RcsEndUserMessageManager RcsManager::GetEndUserMessageManager()
{
	return GetActivationFactory<RcsManager, IRcsManagerStatics>().GetEndUserMessageManager();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Chat::RcsTransport>> RcsManager::GetTransportsAsync()
{
	return GetActivationFactory<RcsManager, IRcsManagerStatics>().GetTransportsAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Chat::RcsTransport> RcsManager::GetTransportAsync(StringReference const & transportId)
{
	return GetActivationFactory<RcsManager, IRcsManagerStatics>().GetTransportAsync(transportId);
}

inline Windows::Foundation::IAsyncAction RcsManager::LeaveConversationAsync(Windows::ApplicationModel::Chat::ChatConversation const & conversation)
{
	return GetActivationFactory<RcsManager, IRcsManagerStatics>().LeaveConversationAsync(conversation);
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Contacts {

inline Contact::Contact() :
	Contact(ActivateInstance<Contact>())
{}

inline ContactCardOptions::ContactCardOptions() :
	ContactCardOptions(ActivateInstance<ContactCardOptions>())
{}

inline FullContactCardOptions::FullContactCardOptions() :
	FullContactCardOptions(ActivateInstance<FullContactCardOptions>())
{}

inline ContactAnnotation::ContactAnnotation() :
	ContactAnnotation(ActivateInstance<ContactAnnotation>())
{}

inline ContactQueryOptions::ContactQueryOptions() :
	ContactQueryOptions(ActivateInstance<ContactQueryOptions>())
{}

inline ContactQueryOptions::ContactQueryOptions(StringReference const & text) :
	ContactQueryOptions(GetActivationFactory<ContactQueryOptions, IContactQueryOptionsFactory>().CreateWithText(text))
{}

inline ContactQueryOptions::ContactQueryOptions(StringReference const & text, Windows::ApplicationModel::Contacts::ContactQuerySearchFields const fields) :
	ContactQueryOptions(GetActivationFactory<ContactQueryOptions, IContactQueryOptionsFactory>().CreateWithTextAndFields(text, fields))
{}

inline ContactPhone::ContactPhone() :
	ContactPhone(ActivateInstance<ContactPhone>())
{}

inline ContactEmail::ContactEmail() :
	ContactEmail(ActivateInstance<ContactEmail>())
{}

inline ContactAddress::ContactAddress() :
	ContactAddress(ActivateInstance<ContactAddress>())
{}

inline ContactConnectedServiceAccount::ContactConnectedServiceAccount() :
	ContactConnectedServiceAccount(ActivateInstance<ContactConnectedServiceAccount>())
{}

inline ContactDate::ContactDate() :
	ContactDate(ActivateInstance<ContactDate>())
{}

inline ContactJobInfo::ContactJobInfo() :
	ContactJobInfo(ActivateInstance<ContactJobInfo>())
{}

inline ContactSignificantOther::ContactSignificantOther() :
	ContactSignificantOther(ActivateInstance<ContactSignificantOther>())
{}

inline ContactWebsite::ContactWebsite() :
	ContactWebsite(ActivateInstance<ContactWebsite>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactStore> ContactManager::RequestStoreAsync()
{
	return GetActivationFactory<ContactManager, IContactManagerStatics2>().RequestStoreAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> ContactManager::ConvertContactToVCardAsync(Windows::ApplicationModel::Contacts::Contact const & contact)
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().ConvertContactToVCardAsync(contact);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::RandomAccessStreamReference> ContactManager::ConvertContactToVCardAsync(Windows::ApplicationModel::Contacts::Contact const & contact, unsigned const maxBytes)
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().ConvertContactToVCardAsync(contact, maxBytes);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::Contact> ContactManager::ConvertVCardToContactAsync(Windows::Storage::Streams::IRandomAccessStreamReference const & vCard)
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().ConvertVCardToContactAsync(vCard);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactStore> ContactManager::RequestStoreAsync(Windows::ApplicationModel::Contacts::ContactStoreAccessType const accessType)
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().RequestStoreAsync(accessType);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Contacts::ContactAnnotationStore> ContactManager::RequestAnnotationStoreAsync(Windows::ApplicationModel::Contacts::ContactAnnotationStoreAccessType const accessType)
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().RequestAnnotationStoreAsync(accessType);
}

inline bool ContactManager::IsShowContactCardSupported()
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().IsShowContactCardSupported();
}

inline void ContactManager::ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::ApplicationModel::Contacts::ContactCardOptions const & contactCardOptions)
{
	GetActivationFactory<ContactManager, IContactManagerStatics3>().ShowContactCard(contact, selection, preferredPlacement, contactCardOptions);
}

inline bool ContactManager::IsShowDelayLoadedContactCardSupported()
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().IsShowDelayLoadedContactCardSupported();
}

inline Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader ContactManager::ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement, Windows::ApplicationModel::Contacts::ContactCardOptions const & contactCardOptions)
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().ShowDelayLoadedContactCard(contact, selection, preferredPlacement, contactCardOptions);
}

inline void ContactManager::ShowFullContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::ApplicationModel::Contacts::FullContactCardOptions const & fullContactCardOptions)
{
	GetActivationFactory<ContactManager, IContactManagerStatics3>().ShowFullContactCard(contact, fullContactCardOptions);
}

inline Windows::ApplicationModel::Contacts::ContactNameOrder ContactManager::SystemDisplayNameOrder()
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().SystemDisplayNameOrder();
}

inline void ContactManager::SystemDisplayNameOrder(Windows::ApplicationModel::Contacts::ContactNameOrder const value)
{
	GetActivationFactory<ContactManager, IContactManagerStatics3>().SystemDisplayNameOrder(value);
}

inline Windows::ApplicationModel::Contacts::ContactNameOrder ContactManager::SystemSortOrder()
{
	return GetActivationFactory<ContactManager, IContactManagerStatics3>().SystemSortOrder();
}

inline void ContactManager::SystemSortOrder(Windows::ApplicationModel::Contacts::ContactNameOrder const value)
{
	GetActivationFactory<ContactManager, IContactManagerStatics3>().SystemSortOrder(value);
}

inline void ContactManager::ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection)
{
	GetActivationFactory<ContactManager, IContactManagerStatics>().ShowContactCard(contact, selection);
}

inline void ContactManager::ShowContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	GetActivationFactory<ContactManager, IContactManagerStatics>().ShowContactCard(contact, selection, preferredPlacement);
}

inline Windows::ApplicationModel::Contacts::ContactCardDelayedDataLoader ContactManager::ShowDelayLoadedContactCard(Windows::ApplicationModel::Contacts::Contact const & contact, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const preferredPlacement)
{
	return GetActivationFactory<ContactManager, IContactManagerStatics>().ShowDelayLoadedContactCard(contact, selection, preferredPlacement);
}

inline String ContactLaunchActionVerbs::Call()
{
	return GetActivationFactory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>().Call();
}

inline String ContactLaunchActionVerbs::Message()
{
	return GetActivationFactory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>().Message();
}

inline String ContactLaunchActionVerbs::Map()
{
	return GetActivationFactory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>().Map();
}

inline String ContactLaunchActionVerbs::Post()
{
	return GetActivationFactory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>().Post();
}

inline String ContactLaunchActionVerbs::VideoCall()
{
	return GetActivationFactory<ContactLaunchActionVerbs, IContactLaunchActionVerbsStatics>().VideoCall();
}

inline ContactField::ContactField(StringReference const & value, Windows::ApplicationModel::Contacts::ContactFieldType const type) :
	ContactField(GetActivationFactory<ContactField, IContactFieldFactory>().CreateField(value, type))
{}

inline ContactField::ContactField(StringReference const & value, Windows::ApplicationModel::Contacts::ContactFieldType const type, Windows::ApplicationModel::Contacts::ContactFieldCategory const category) :
	ContactField(GetActivationFactory<ContactField, IContactFieldFactory>().CreateField(value, type, category))
{}

inline ContactField::ContactField(StringReference const & name, StringReference const & value, Windows::ApplicationModel::Contacts::ContactFieldType const type, Windows::ApplicationModel::Contacts::ContactFieldCategory const category) :
	ContactField(GetActivationFactory<ContactField, IContactFieldFactory>().CreateField(name, value, type, category))
{}

inline ContactLocationField::ContactLocationField(StringReference const & unstructuredAddress) :
	ContactLocationField(GetActivationFactory<ContactLocationField, IContactLocationFieldFactory>().CreateLocation(unstructuredAddress))
{}

inline ContactLocationField::ContactLocationField(StringReference const & unstructuredAddress, Windows::ApplicationModel::Contacts::ContactFieldCategory const category) :
	ContactLocationField(GetActivationFactory<ContactLocationField, IContactLocationFieldFactory>().CreateLocation(unstructuredAddress, category))
{}

inline ContactLocationField::ContactLocationField(StringReference const & unstructuredAddress, Windows::ApplicationModel::Contacts::ContactFieldCategory const category, StringReference const & street, StringReference const & city, StringReference const & region, StringReference const & country, StringReference const & postalCode) :
	ContactLocationField(GetActivationFactory<ContactLocationField, IContactLocationFieldFactory>().CreateLocation(unstructuredAddress, category, street, city, region, country, postalCode))
{}

inline ContactInstantMessageField::ContactInstantMessageField(StringReference const & userName) :
	ContactInstantMessageField(GetActivationFactory<ContactInstantMessageField, IContactInstantMessageFieldFactory>().CreateInstantMessage(userName))
{}

inline ContactInstantMessageField::ContactInstantMessageField(StringReference const & userName, Windows::ApplicationModel::Contacts::ContactFieldCategory const category) :
	ContactInstantMessageField(GetActivationFactory<ContactInstantMessageField, IContactInstantMessageFieldFactory>().CreateInstantMessage(userName, category))
{}

inline ContactInstantMessageField::ContactInstantMessageField(StringReference const & userName, Windows::ApplicationModel::Contacts::ContactFieldCategory const category, StringReference const & service, StringReference const & displayText, Windows::Foundation::Uri const & verb) :
	ContactInstantMessageField(GetActivationFactory<ContactInstantMessageField, IContactInstantMessageFieldFactory>().CreateInstantMessage(userName, category, service, displayText, verb))
{}

inline String KnownContactField::Email()
{
	return GetActivationFactory<KnownContactField, IKnownContactFieldStatics>().Email();
}

inline String KnownContactField::PhoneNumber()
{
	return GetActivationFactory<KnownContactField, IKnownContactFieldStatics>().PhoneNumber();
}

inline String KnownContactField::Location()
{
	return GetActivationFactory<KnownContactField, IKnownContactFieldStatics>().Location();
}

inline String KnownContactField::InstantMessage()
{
	return GetActivationFactory<KnownContactField, IKnownContactFieldStatics>().InstantMessage();
}

inline Windows::ApplicationModel::Contacts::ContactFieldType KnownContactField::ConvertNameToType(StringReference const & name)
{
	return GetActivationFactory<KnownContactField, IKnownContactFieldStatics>().ConvertNameToType(name);
}

inline String KnownContactField::ConvertTypeToName(Windows::ApplicationModel::Contacts::ContactFieldType const type)
{
	return GetActivationFactory<KnownContactField, IKnownContactFieldStatics>().ConvertTypeToName(type);
}

inline ContactFieldFactory::ContactFieldFactory() :
	ContactFieldFactory(ActivateInstance<ContactFieldFactory>())
{}

inline ContactPicker::ContactPicker() :
	ContactPicker(ActivateInstance<ContactPicker>())
{}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Contacts { namespace Provider {

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Core {

inline void CoreApplication::IncrementApplicationUseCount()
{
	GetActivationFactory<CoreApplication, ICoreApplicationUseCount>().IncrementApplicationUseCount();
}

inline void CoreApplication::DecrementApplicationUseCount()
{
	GetActivationFactory<CoreApplication, ICoreApplicationUseCount>().DecrementApplicationUseCount();
}

inline Windows::ApplicationModel::Core::CoreApplicationView CoreApplication::CreateNewView(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource)
{
	return GetActivationFactory<CoreApplication, ICoreImmersiveApplication3>().CreateNewView(viewSource);
}

inline String CoreApplication::Id()
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Id();
}

inline long long CoreApplication::Suspending(Windows::Foundation::IEventHandler<Windows::ApplicationModel::SuspendingEventArgs> const & handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Suspending(handler);
}

template <typename F> long long CoreApplication::Suspending(F handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Suspending(Windows::Foundation::EventHandler<Windows::ApplicationModel::SuspendingEventArgs>(handler));
}

inline void CoreApplication::Suspending(long long const token)
{
	GetActivationFactory<CoreApplication, ICoreApplication>().Suspending(token);
}

inline long long CoreApplication::Resuming(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Resuming(handler);
}

template <typename F> long long CoreApplication::Resuming(F handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Resuming(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void CoreApplication::Resuming(long long const token)
{
	GetActivationFactory<CoreApplication, ICoreApplication>().Resuming(token);
}

inline Windows::Foundation::Collections::IPropertySet CoreApplication::Properties()
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().Properties();
}

inline Windows::ApplicationModel::Core::CoreApplicationView CoreApplication::GetCurrentView()
{
	return GetActivationFactory<CoreApplication, ICoreApplication>().GetCurrentView();
}

inline void CoreApplication::Run(Windows::ApplicationModel::Core::IFrameworkViewSource const & viewSource)
{
	GetActivationFactory<CoreApplication, ICoreApplication>().Run(viewSource);
}

inline void CoreApplication::RunWithActivationFactories(Windows::Foundation::IGetActivationFactory const & activationFactoryCallback)
{
	GetActivationFactory<CoreApplication, ICoreApplication>().RunWithActivationFactories(activationFactoryCallback);
}

inline void CoreApplication::Exit()
{
	GetActivationFactory<CoreApplication, ICoreApplicationExit>().Exit();
}

inline long long CoreApplication::Exiting(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplicationExit>().Exiting(handler);
}

template <typename F> long long CoreApplication::Exiting(F handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplicationExit>().Exiting(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void CoreApplication::Exiting(long long const token)
{
	GetActivationFactory<CoreApplication, ICoreApplicationExit>().Exiting(token);
}

inline Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Core::CoreApplicationView> CoreApplication::Views()
{
	return GetActivationFactory<CoreApplication, ICoreImmersiveApplication>().Views();
}

inline Windows::ApplicationModel::Core::CoreApplicationView CoreApplication::CreateNewView(StringReference const & runtimeType, StringReference const & entryPoint)
{
	return GetActivationFactory<CoreApplication, ICoreImmersiveApplication>().CreateNewView(runtimeType, entryPoint);
}

inline Windows::ApplicationModel::Core::CoreApplicationView CoreApplication::MainView()
{
	return GetActivationFactory<CoreApplication, ICoreImmersiveApplication>().MainView();
}

inline long long CoreApplication::UnhandledErrorDetected(Windows::Foundation::IEventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs> const & handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplicationUnhandledError>().UnhandledErrorDetected(handler);
}

template <typename F> long long CoreApplication::UnhandledErrorDetected(F handler)
{
	return GetActivationFactory<CoreApplication, ICoreApplicationUnhandledError>().UnhandledErrorDetected(Windows::Foundation::EventHandler<Windows::ApplicationModel::Core::UnhandledErrorDetectedEventArgs>(handler));
}

inline void CoreApplication::UnhandledErrorDetected(long long const token)
{
	GetActivationFactory<CoreApplication, ICoreApplicationUnhandledError>().UnhandledErrorDetected(token);
}

inline Windows::ApplicationModel::Core::CoreApplicationView CoreApplication::CreateNewView()
{
	return GetActivationFactory<CoreApplication, ICoreImmersiveApplication2>().CreateNewView();
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer {

inline String StandardDataFormats::WebLink()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics2>().WebLink();
}

inline String StandardDataFormats::ApplicationLink()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics2>().ApplicationLink();
}

inline String StandardDataFormats::Text()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().Text();
}

inline String StandardDataFormats::Uri()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().Uri();
}

inline String StandardDataFormats::Html()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().Html();
}

inline String StandardDataFormats::Rtf()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().Rtf();
}

inline String StandardDataFormats::Bitmap()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().Bitmap();
}

inline String StandardDataFormats::StorageItems()
{
	return GetActivationFactory<StandardDataFormats, IStandardDataFormatsStatics>().StorageItems();
}

inline DataPackage::DataPackage() :
	DataPackage(ActivateInstance<DataPackage>())
{}

inline String HtmlFormatHelper::GetStaticFragment(StringReference const & htmlFormat)
{
	return GetActivationFactory<HtmlFormatHelper, IHtmlFormatHelperStatics>().GetStaticFragment(htmlFormat);
}

inline String HtmlFormatHelper::CreateHtmlFormat(StringReference const & htmlFragment)
{
	return GetActivationFactory<HtmlFormatHelper, IHtmlFormatHelperStatics>().CreateHtmlFormat(htmlFragment);
}

inline Windows::ApplicationModel::DataTransfer::DataPackageView Clipboard::GetContent()
{
	return GetActivationFactory<Clipboard, IClipboardStatics>().GetContent();
}

inline void Clipboard::SetContent(Windows::ApplicationModel::DataTransfer::DataPackage const & content)
{
	GetActivationFactory<Clipboard, IClipboardStatics>().SetContent(content);
}

inline void Clipboard::Flush()
{
	GetActivationFactory<Clipboard, IClipboardStatics>().Flush();
}

inline void Clipboard::Clear()
{
	GetActivationFactory<Clipboard, IClipboardStatics>().Clear();
}

inline long long Clipboard::ContentChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler)
{
	return GetActivationFactory<Clipboard, IClipboardStatics>().ContentChanged(changeHandler);
}

template <typename F> long long Clipboard::ContentChanged(F changeHandler)
{
	return GetActivationFactory<Clipboard, IClipboardStatics>().ContentChanged(Windows::Foundation::EventHandler<IInspectable>(changeHandler));
}

inline void Clipboard::ContentChanged(long long const token)
{
	GetActivationFactory<Clipboard, IClipboardStatics>().ContentChanged(token);
}

inline void DataTransferManager::ShowShareUI()
{
	GetActivationFactory<DataTransferManager, IDataTransferManagerStatics>().ShowShareUI();
}

inline Windows::ApplicationModel::DataTransfer::DataTransferManager DataTransferManager::GetForCurrentView()
{
	return GetActivationFactory<DataTransferManager, IDataTransferManagerStatics>().GetForCurrentView();
}

inline String SharedStorageAccessManager::AddFile(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<SharedStorageAccessManager, ISharedStorageAccessManagerStatics>().AddFile(file);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> SharedStorageAccessManager::RedeemTokenForFileAsync(StringReference const & token)
{
	return GetActivationFactory<SharedStorageAccessManager, ISharedStorageAccessManagerStatics>().RedeemTokenForFileAsync(token);
}

inline void SharedStorageAccessManager::RemoveFile(StringReference const & token)
{
	GetActivationFactory<SharedStorageAccessManager, ISharedStorageAccessManagerStatics>().RemoveFile(token);
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace DragDrop { namespace Core {

inline Windows::ApplicationModel::DataTransfer::DragDrop::Core::CoreDragDropManager CoreDragDropManager::GetForCurrentView()
{
	return GetActivationFactory<CoreDragDropManager, ICoreDragDropManagerStatics>().GetForCurrentView();
}

inline CoreDragOperation::CoreDragOperation() :
	CoreDragOperation(ActivateInstance<CoreDragOperation>())
{}

}}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace DataTransfer { namespace ShareTarget {

inline QuickLink::QuickLink() :
	QuickLink(ActivateInstance<QuickLink>())
{}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Email {

inline EmailMessage::EmailMessage() :
	EmailMessage(ActivateInstance<EmailMessage>())
{}

inline EmailQueryOptions::EmailQueryOptions() :
	EmailQueryOptions(ActivateInstance<EmailQueryOptions>())
{}

inline EmailQueryOptions::EmailQueryOptions(StringReference const & text) :
	EmailQueryOptions(GetActivationFactory<EmailQueryOptions, IEmailQueryOptionsFactory>().CreateWithText(text))
{}

inline EmailQueryOptions::EmailQueryOptions(StringReference const & text, Windows::ApplicationModel::Email::EmailQuerySearchFields const fields) :
	EmailQueryOptions(GetActivationFactory<EmailQueryOptions, IEmailQueryOptionsFactory>().CreateWithTextAndFields(text, fields))
{}

inline EmailRecipient::EmailRecipient() :
	EmailRecipient(ActivateInstance<EmailRecipient>())
{}

inline EmailRecipient::EmailRecipient(StringReference const & address) :
	EmailRecipient(GetActivationFactory<EmailRecipient, IEmailRecipientFactory>().Create(address))
{}

inline EmailRecipient::EmailRecipient(StringReference const & address, StringReference const & name) :
	EmailRecipient(GetActivationFactory<EmailRecipient, IEmailRecipientFactory>().CreateWithName(address, name))
{}

inline EmailIrmTemplate::EmailIrmTemplate() :
	EmailIrmTemplate(ActivateInstance<EmailIrmTemplate>())
{}

inline EmailIrmTemplate::EmailIrmTemplate(StringReference const & id, StringReference const & name, StringReference const & description) :
	EmailIrmTemplate(GetActivationFactory<EmailIrmTemplate, IEmailIrmTemplateFactory>().Create(id, name, description))
{}

inline EmailIrmInfo::EmailIrmInfo() :
	EmailIrmInfo(ActivateInstance<EmailIrmInfo>())
{}

inline EmailIrmInfo::EmailIrmInfo(Windows::Foundation::DateTime const & expiration, Windows::ApplicationModel::Email::EmailIrmTemplate const & irmTemplate) :
	EmailIrmInfo(GetActivationFactory<EmailIrmInfo, IEmailIrmInfoFactory>().Create(expiration, irmTemplate))
{}

inline EmailAttachment::EmailAttachment() :
	EmailAttachment(ActivateInstance<EmailAttachment>())
{}

inline EmailAttachment::EmailAttachment(StringReference const & fileName, Windows::Storage::Streams::IRandomAccessStreamReference const & data) :
	EmailAttachment(GetActivationFactory<EmailAttachment, IEmailAttachmentFactory>().Create(fileName, data))
{}

inline EmailAttachment::EmailAttachment(StringReference const & fileName, Windows::Storage::Streams::IRandomAccessStreamReference const & data, StringReference const & mimeType) :
	EmailAttachment(GetActivationFactory<EmailAttachment, IEmailAttachmentFactory2>().Create(fileName, data, mimeType))
{}

inline EmailMeetingInfo::EmailMeetingInfo() :
	EmailMeetingInfo(ActivateInstance<EmailMeetingInfo>())
{}

inline EmailMailboxAutoReplySettings::EmailMailboxAutoReplySettings() :
	EmailMailboxAutoReplySettings(ActivateInstance<EmailMailboxAutoReplySettings>())
{}

inline Windows::Foundation::IAsyncAction EmailManager::ShowComposeNewEmailAsync(Windows::ApplicationModel::Email::EmailMessage const & message)
{
	return GetActivationFactory<EmailManager, IEmailManagerStatics>().ShowComposeNewEmailAsync(message);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Email::EmailStore> EmailManager::RequestStoreAsync(Windows::ApplicationModel::Email::EmailStoreAccessType const accessType)
{
	return GetActivationFactory<EmailManager, IEmailManagerStatics2>().RequestStoreAsync(accessType);
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace ExtendedExecution {

inline ExtendedExecutionSession::ExtendedExecutionSession() :
	ExtendedExecutionSession(ActivateInstance<ExtendedExecutionSession>())
{}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace ExtendedExecution { namespace Foreground {

inline ExtendedExecutionForegroundSession::ExtendedExecutionForegroundSession() :
	ExtendedExecutionForegroundSession(ActivateInstance<ExtendedExecutionForegroundSession>())
{}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace LockScreen {

inline Windows::ApplicationModel::LockScreen::LockApplicationHost LockApplicationHost::GetForCurrentView()
{
	return GetActivationFactory<LockApplicationHost, ILockApplicationHostStatics>().GetForCurrentView();
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Resources {

inline ResourceLoader::ResourceLoader() :
	ResourceLoader(ActivateInstance<ResourceLoader>())
{}

inline ResourceLoader::ResourceLoader(StringReference const & name) :
	ResourceLoader(GetActivationFactory<ResourceLoader, IResourceLoaderFactory>().CreateResourceLoaderByName(name))
{}

inline Windows::ApplicationModel::Resources::ResourceLoader ResourceLoader::GetForCurrentView()
{
	return GetActivationFactory<ResourceLoader, IResourceLoaderStatics2>().GetForCurrentView();
}

inline Windows::ApplicationModel::Resources::ResourceLoader ResourceLoader::GetForCurrentView(StringReference const & name)
{
	return GetActivationFactory<ResourceLoader, IResourceLoaderStatics2>().GetForCurrentView(name);
}

inline Windows::ApplicationModel::Resources::ResourceLoader ResourceLoader::GetForViewIndependentUse()
{
	return GetActivationFactory<ResourceLoader, IResourceLoaderStatics2>().GetForViewIndependentUse();
}

inline Windows::ApplicationModel::Resources::ResourceLoader ResourceLoader::GetForViewIndependentUse(StringReference const & name)
{
	return GetActivationFactory<ResourceLoader, IResourceLoaderStatics2>().GetForViewIndependentUse(name);
}

inline String ResourceLoader::GetStringForReference(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<ResourceLoader, IResourceLoaderStatics>().GetStringForReference(uri);
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Core {

inline ResourceContext::ResourceContext() :
	ResourceContext(ActivateInstance<ResourceContext>())
{}

inline Windows::ApplicationModel::Resources::Core::ResourceContext ResourceContext::GetForCurrentView()
{
	return GetActivationFactory<ResourceContext, IResourceContextStatics2>().GetForCurrentView();
}

inline void ResourceContext::SetGlobalQualifierValue(StringReference const & key, StringReference const & value)
{
	GetActivationFactory<ResourceContext, IResourceContextStatics2>().SetGlobalQualifierValue(key, value);
}

inline void ResourceContext::ResetGlobalQualifierValues()
{
	GetActivationFactory<ResourceContext, IResourceContextStatics2>().ResetGlobalQualifierValues();
}

inline void ResourceContext::ResetGlobalQualifierValues(Windows::Foundation::Collections::IIterable<String> const & qualifierNames)
{
	GetActivationFactory<ResourceContext, IResourceContextStatics2>().ResetGlobalQualifierValues(qualifierNames);
}

inline Windows::ApplicationModel::Resources::Core::ResourceContext ResourceContext::GetForViewIndependentUse()
{
	return GetActivationFactory<ResourceContext, IResourceContextStatics2>().GetForViewIndependentUse();
}

inline void ResourceContext::SetGlobalQualifierValue(StringReference const & key, StringReference const & value, Windows::ApplicationModel::Resources::Core::ResourceQualifierPersistence const persistence)
{
	GetActivationFactory<ResourceContext, IResourceContextStatics3>().SetGlobalQualifierValue(key, value, persistence);
}

inline Windows::ApplicationModel::Resources::Core::ResourceContext ResourceContext::CreateMatchingContext(Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::Resources::Core::ResourceQualifier> const & result)
{
	return GetActivationFactory<ResourceContext, IResourceContextStatics>().CreateMatchingContext(result);
}

inline Windows::ApplicationModel::Resources::Core::ResourceManager ResourceManager::Current()
{
	return GetActivationFactory<ResourceManager, IResourceManagerStatics>().Current();
}

inline bool ResourceManager::IsResourceReference(StringReference const & resourceReference)
{
	return GetActivationFactory<ResourceManager, IResourceManagerStatics>().IsResourceReference(resourceReference);
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Resources { namespace Management {

inline ResourceIndexer::ResourceIndexer(Windows::Foundation::Uri const & projectRoot) :
	ResourceIndexer(GetActivationFactory<ResourceIndexer, IResourceIndexerFactory>().CreateResourceIndexer(projectRoot))
{}

inline ResourceIndexer::ResourceIndexer(Windows::Foundation::Uri const & projectRoot, Windows::Foundation::Uri const & extensionDllPath) :
	ResourceIndexer(GetActivationFactory<ResourceIndexer, IResourceIndexerFactory2>().CreateResourceIndexerWithExtension(projectRoot, extensionDllPath))
{}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Search {

inline LocalContentSuggestionSettings::LocalContentSuggestionSettings() :
	LocalContentSuggestionSettings(ActivateInstance<LocalContentSuggestionSettings>())
{}

inline void SearchPane::HideThisApplication()
{
	GetActivationFactory<SearchPane, ISearchPaneStaticsWithHideThisApplication>().HideThisApplication();
}

inline Windows::ApplicationModel::Search::SearchPane SearchPane::GetForCurrentView()
{
	return GetActivationFactory<SearchPane, ISearchPaneStatics>().GetForCurrentView();
}

inline SearchQueryLinguisticDetails::SearchQueryLinguisticDetails(Windows::Foundation::Collections::IIterable<String> const & queryTextAlternatives, unsigned const queryTextCompositionStart, unsigned const queryTextCompositionLength) :
	SearchQueryLinguisticDetails(GetActivationFactory<SearchQueryLinguisticDetails, ISearchQueryLinguisticDetailsFactory>().CreateInstance(queryTextAlternatives, queryTextCompositionStart, queryTextCompositionLength))
{}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Store {

inline ProductPurchaseDisplayProperties::ProductPurchaseDisplayProperties() :
	ProductPurchaseDisplayProperties(ActivateInstance<ProductPurchaseDisplayProperties>())
{}

inline ProductPurchaseDisplayProperties::ProductPurchaseDisplayProperties(StringReference const & name) :
	ProductPurchaseDisplayProperties(GetActivationFactory<ProductPurchaseDisplayProperties, IProductPurchaseDisplayPropertiesFactory>().CreateProductPurchaseDisplayProperties(name))
{}

inline Windows::Foundation::IAsyncOperation<String> CurrentApp::GetCustomerPurchaseIdAsync(StringReference const & serviceTicket, StringReference const & publisherUserId)
{
	return GetActivationFactory<CurrentApp, ICurrentApp2Statics>().GetCustomerPurchaseIdAsync(serviceTicket, publisherUserId);
}

inline Windows::Foundation::IAsyncOperation<String> CurrentApp::GetCustomerCollectionsIdAsync(StringReference const & serviceTicket, StringReference const & publisherUserId)
{
	return GetActivationFactory<CurrentApp, ICurrentApp2Statics>().GetCustomerCollectionsIdAsync(serviceTicket, publisherUserId);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Store::FulfillmentResult> CurrentApp::ReportConsumableFulfillmentAsync(StringReference const & productId, GUID const transactionId)
{
	return GetActivationFactory<CurrentApp, ICurrentAppWithConsumables>().ReportConsumableFulfillmentAsync(productId, transactionId);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> CurrentApp::RequestProductPurchaseAsync(StringReference const & productId)
{
	return GetActivationFactory<CurrentApp, ICurrentAppWithConsumables>().RequestProductPurchaseAsync(productId);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> CurrentApp::RequestProductPurchaseAsync(StringReference const & productId, StringReference const & offerId, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties)
{
	return GetActivationFactory<CurrentApp, ICurrentAppWithConsumables>().RequestProductPurchaseAsync(productId, offerId, displayProperties);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> CurrentApp::GetUnfulfilledConsumablesAsync()
{
	return GetActivationFactory<CurrentApp, ICurrentAppWithConsumables>().GetUnfulfilledConsumablesAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> CurrentApp::LoadListingInformationByProductIdsAsync(Windows::Foundation::Collections::IIterable<String> const & productIds)
{
	return GetActivationFactory<CurrentApp, ICurrentAppStaticsWithFiltering>().LoadListingInformationByProductIdsAsync(productIds);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> CurrentApp::LoadListingInformationByKeywordsAsync(Windows::Foundation::Collections::IIterable<String> const & keywords)
{
	return GetActivationFactory<CurrentApp, ICurrentAppStaticsWithFiltering>().LoadListingInformationByKeywordsAsync(keywords);
}

inline void CurrentApp::ReportProductFulfillment(StringReference const & productId)
{
	GetActivationFactory<CurrentApp, ICurrentAppStaticsWithFiltering>().ReportProductFulfillment(productId);
}

inline Windows::Foundation::IAsyncOperation<String> CurrentApp::GetAppPurchaseCampaignIdAsync()
{
	return GetActivationFactory<CurrentApp, ICurrentAppWithCampaignId>().GetAppPurchaseCampaignIdAsync();
}

inline Windows::ApplicationModel::Store::LicenseInformation CurrentApp::LicenseInformation()
{
	return GetActivationFactory<CurrentApp, ICurrentApp>().LicenseInformation();
}

inline Windows::Foundation::Uri CurrentApp::LinkUri()
{
	return GetActivationFactory<CurrentApp, ICurrentApp>().LinkUri();
}

inline GUID CurrentApp::AppId()
{
	return GetActivationFactory<CurrentApp, ICurrentApp>().AppId();
}

inline Windows::Foundation::IAsyncOperation<String> CurrentApp::RequestAppPurchaseAsync(bool const includeReceipt)
{
	return GetActivationFactory<CurrentApp, ICurrentApp>().RequestAppPurchaseAsync(includeReceipt);
}

inline Windows::Foundation::IAsyncOperation<String> CurrentApp::RequestProductPurchaseAsync(StringReference const & productId, bool const includeReceipt)
{
	return GetActivationFactory<CurrentApp, ICurrentApp>().RequestProductPurchaseAsync(productId, includeReceipt);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> CurrentApp::LoadListingInformationAsync()
{
	return GetActivationFactory<CurrentApp, ICurrentApp>().LoadListingInformationAsync();
}

inline Windows::Foundation::IAsyncOperation<String> CurrentApp::GetAppReceiptAsync()
{
	return GetActivationFactory<CurrentApp, ICurrentApp>().GetAppReceiptAsync();
}

inline Windows::Foundation::IAsyncOperation<String> CurrentApp::GetProductReceiptAsync(StringReference const & productId)
{
	return GetActivationFactory<CurrentApp, ICurrentApp>().GetProductReceiptAsync(productId);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> CurrentAppSimulator::LoadListingInformationByProductIdsAsync(Windows::Foundation::Collections::IIterable<String> const & productIds)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulatorStaticsWithFiltering>().LoadListingInformationByProductIdsAsync(productIds);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> CurrentAppSimulator::LoadListingInformationByKeywordsAsync(Windows::Foundation::Collections::IIterable<String> const & keywords)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulatorStaticsWithFiltering>().LoadListingInformationByKeywordsAsync(keywords);
}

inline Windows::Foundation::IAsyncOperation<String> CurrentAppSimulator::GetAppPurchaseCampaignIdAsync()
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulatorWithCampaignId>().GetAppPurchaseCampaignIdAsync();
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::ApplicationModel::Store::FulfillmentResult> CurrentAppSimulator::ReportConsumableFulfillmentAsync(StringReference const & productId, GUID const transactionId)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulatorWithConsumables>().ReportConsumableFulfillmentAsync(productId, transactionId);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> CurrentAppSimulator::RequestProductPurchaseAsync(StringReference const & productId)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulatorWithConsumables>().RequestProductPurchaseAsync(productId);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::PurchaseResults> CurrentAppSimulator::RequestProductPurchaseAsync(StringReference const & productId, StringReference const & offerId, Windows::ApplicationModel::Store::ProductPurchaseDisplayProperties const & displayProperties)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulatorWithConsumables>().RequestProductPurchaseAsync(productId, offerId, displayProperties);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::UnfulfilledConsumable>> CurrentAppSimulator::GetUnfulfilledConsumablesAsync()
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulatorWithConsumables>().GetUnfulfilledConsumablesAsync();
}

inline Windows::ApplicationModel::Store::LicenseInformation CurrentAppSimulator::LicenseInformation()
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().LicenseInformation();
}

inline Windows::Foundation::Uri CurrentAppSimulator::LinkUri()
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().LinkUri();
}

inline GUID CurrentAppSimulator::AppId()
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().AppId();
}

inline Windows::Foundation::IAsyncOperation<String> CurrentAppSimulator::RequestAppPurchaseAsync(bool const includeReceipt)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().RequestAppPurchaseAsync(includeReceipt);
}

inline Windows::Foundation::IAsyncOperation<String> CurrentAppSimulator::RequestProductPurchaseAsync(StringReference const & productId, bool const includeReceipt)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().RequestProductPurchaseAsync(productId, includeReceipt);
}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::ListingInformation> CurrentAppSimulator::LoadListingInformationAsync()
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().LoadListingInformationAsync();
}

inline Windows::Foundation::IAsyncOperation<String> CurrentAppSimulator::GetAppReceiptAsync()
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().GetAppReceiptAsync();
}

inline Windows::Foundation::IAsyncOperation<String> CurrentAppSimulator::GetProductReceiptAsync(StringReference const & productId)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().GetProductReceiptAsync(productId);
}

inline Windows::Foundation::IAsyncAction CurrentAppSimulator::ReloadSimulatorAsync(Windows::Storage::StorageFile const & simulatorSettingsFile)
{
	return GetActivationFactory<CurrentAppSimulator, ICurrentAppSimulator>().ReloadSimulatorAsync(simulatorSettingsFile);
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Store { namespace Preview {

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Store::Preview::StorePreviewPurchaseResults> StorePreview::RequestProductPurchaseByProductIdAndSkuIdAsync(StringReference const & productId, StringReference const & skuId)
{
	return GetActivationFactory<StorePreview, IStorePreview>().RequestProductPurchaseByProductIdAndSkuIdAsync(productId, skuId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::Store::Preview::StorePreviewProductInfo>> StorePreview::LoadAddOnProductInfosAsync()
{
	return GetActivationFactory<StorePreview, IStorePreview>().LoadAddOnProductInfosAsync();
}

inline Windows::Foundation::IReference<unsigned> StoreConfiguration::PurchasePromptingPolicy()
{
	return GetActivationFactory<StoreConfiguration, IStoreConfigurationStatics2>().PurchasePromptingPolicy();
}

inline void StoreConfiguration::PurchasePromptingPolicy(Windows::Foundation::IReference<unsigned> const & value)
{
	GetActivationFactory<StoreConfiguration, IStoreConfigurationStatics2>().PurchasePromptingPolicy(value);
}

inline void StoreConfiguration::SetSystemConfiguration(StringReference const & catalogHardwareManufacturerId, StringReference const & catalogStoreContentModifierId, Windows::Foundation::DateTime const & systemConfigurationExpiration, StringReference const & catalogHardwareDescriptor)
{
	GetActivationFactory<StoreConfiguration, IStoreConfigurationStatics>().SetSystemConfiguration(catalogHardwareManufacturerId, catalogStoreContentModifierId, systemConfigurationExpiration, catalogHardwareDescriptor);
}

inline void StoreConfiguration::SetMobileOperatorConfiguration(StringReference const & mobileOperatorId, unsigned const appDownloadLimitInMegabytes, unsigned const updateDownloadLimitInMegabytes)
{
	GetActivationFactory<StoreConfiguration, IStoreConfigurationStatics>().SetMobileOperatorConfiguration(mobileOperatorId, appDownloadLimitInMegabytes, updateDownloadLimitInMegabytes);
}

inline void StoreConfiguration::SetStoreWebAccountId(StringReference const & webAccountId)
{
	GetActivationFactory<StoreConfiguration, IStoreConfigurationStatics>().SetStoreWebAccountId(webAccountId);
}

inline bool StoreConfiguration::IsStoreWebAccountId(StringReference const & webAccountId)
{
	return GetActivationFactory<StoreConfiguration, IStoreConfigurationStatics>().IsStoreWebAccountId(webAccountId);
}

inline Windows::ApplicationModel::Store::Preview::StoreHardwareManufacturerInfo StoreConfiguration::HardwareManufacturerInfo()
{
	return GetActivationFactory<StoreConfiguration, IStoreConfigurationStatics>().HardwareManufacturerInfo();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<winrt::Windows::ApplicationModel::Store::Preview::StoreSystemFeature>> StoreConfiguration::FilterUnsupportedSystemFeaturesAsync(Windows::Foundation::Collections::IIterable<winrt::Windows::ApplicationModel::Store::Preview::StoreSystemFeature> const & systemFeatures)
{
	return GetActivationFactory<StoreConfiguration, IStoreConfigurationStatics>().FilterUnsupportedSystemFeaturesAsync(systemFeatures);
}

}}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace UserDataAccounts {

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::UserDataAccounts::UserDataAccountStore> UserDataAccountManager::RequestStoreAsync(Windows::ApplicationModel::UserDataAccounts::UserDataAccountStoreAccessType const storeAccessType)
{
	return GetActivationFactory<UserDataAccountManager, IUserDataAccountManagerStatics>().RequestStoreAsync(storeAccessType);
}

inline Windows::Foundation::IAsyncOperation<String> UserDataAccountManager::ShowAddAccountAsync(Windows::ApplicationModel::UserDataAccounts::UserDataAccountContentKinds const contentKinds)
{
	return GetActivationFactory<UserDataAccountManager, IUserDataAccountManagerStatics>().ShowAddAccountAsync(contentKinds);
}

inline Windows::Foundation::IAsyncAction UserDataAccountManager::ShowAccountSettingsAsync(StringReference const & id)
{
	return GetActivationFactory<UserDataAccountManager, IUserDataAccountManagerStatics>().ShowAccountSettingsAsync(id);
}

inline Windows::Foundation::IAsyncAction UserDataAccountManager::ShowAccountErrorResolverAsync(StringReference const & id)
{
	return GetActivationFactory<UserDataAccountManager, IUserDataAccountManagerStatics>().ShowAccountErrorResolverAsync(id);
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace VoiceCommands {

inline Windows::Foundation::IAsyncAction VoiceCommandDefinitionManager::InstallCommandDefinitionsFromStorageFileAsync(Windows::Storage::StorageFile const & file)
{
	return GetActivationFactory<VoiceCommandDefinitionManager, IVoiceCommandDefinitionManagerStatics>().InstallCommandDefinitionsFromStorageFileAsync(file);
}

inline Windows::Foundation::Collections::IMapView<String, Windows::ApplicationModel::VoiceCommands::VoiceCommandDefinition> VoiceCommandDefinitionManager::InstalledCommandDefinitions()
{
	return GetActivationFactory<VoiceCommandDefinitionManager, IVoiceCommandDefinitionManagerStatics>().InstalledCommandDefinitions();
}

inline VoiceCommandContentTile::VoiceCommandContentTile() :
	VoiceCommandContentTile(ActivateInstance<VoiceCommandContentTile>())
{}

inline VoiceCommandUserMessage::VoiceCommandUserMessage() :
	VoiceCommandUserMessage(ActivateInstance<VoiceCommandUserMessage>())
{}

inline unsigned VoiceCommandResponse::MaxSupportedVoiceCommandContentTiles()
{
	return GetActivationFactory<VoiceCommandResponse, IVoiceCommandResponseStatics>().MaxSupportedVoiceCommandContentTiles();
}

inline Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse VoiceCommandResponse::CreateResponse(Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage const & userMessage)
{
	return GetActivationFactory<VoiceCommandResponse, IVoiceCommandResponseStatics>().CreateResponse(userMessage);
}

inline Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse VoiceCommandResponse::CreateResponse(Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage const & message, Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile> const & contentTiles)
{
	return GetActivationFactory<VoiceCommandResponse, IVoiceCommandResponseStatics>().CreateResponse(message, contentTiles);
}

inline Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse VoiceCommandResponse::CreateResponseForPrompt(Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage const & message, Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage const & repeatMessage)
{
	return GetActivationFactory<VoiceCommandResponse, IVoiceCommandResponseStatics>().CreateResponseForPrompt(message, repeatMessage);
}

inline Windows::ApplicationModel::VoiceCommands::VoiceCommandResponse VoiceCommandResponse::CreateResponseForPrompt(Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage const & message, Windows::ApplicationModel::VoiceCommands::VoiceCommandUserMessage const & repeatMessage, Windows::Foundation::Collections::IIterable<Windows::ApplicationModel::VoiceCommands::VoiceCommandContentTile> const & contentTiles)
{
	return GetActivationFactory<VoiceCommandResponse, IVoiceCommandResponseStatics>().CreateResponseForPrompt(message, repeatMessage, contentTiles);
}

inline Windows::ApplicationModel::VoiceCommands::VoiceCommandServiceConnection VoiceCommandServiceConnection::FromAppServiceTriggerDetails(Windows::ApplicationModel::AppService::AppServiceTriggerDetails const & triggerDetails)
{
	return GetActivationFactory<VoiceCommandServiceConnection, IVoiceCommandServiceConnectionStatics>().FromAppServiceTriggerDetails(triggerDetails);
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Wallet {

inline WalletBarcode::WalletBarcode(Windows::ApplicationModel::Wallet::WalletBarcodeSymbology const symbology, StringReference const & value) :
	WalletBarcode(GetActivationFactory<WalletBarcode, IWalletBarcodeFactory>().CreateWalletBarcode(symbology, value))
{}

inline WalletBarcode::WalletBarcode(Windows::Storage::Streams::IRandomAccessStreamReference const & streamToBarcodeImage) :
	WalletBarcode(GetActivationFactory<WalletBarcode, IWalletBarcodeFactory>().CreateCustomWalletBarcode(streamToBarcodeImage))
{}

inline WalletTransaction::WalletTransaction() :
	WalletTransaction(ActivateInstance<WalletTransaction>())
{}

inline WalletRelevantLocation::WalletRelevantLocation() :
	WalletRelevantLocation(ActivateInstance<WalletRelevantLocation>())
{}

inline WalletItemCustomProperty::WalletItemCustomProperty(StringReference const & name, StringReference const & value) :
	WalletItemCustomProperty(GetActivationFactory<WalletItemCustomProperty, IWalletItemCustomPropertyFactory>().CreateWalletItemCustomProperty(name, value))
{}

inline WalletVerb::WalletVerb(StringReference const & name) :
	WalletVerb(GetActivationFactory<WalletVerb, IWalletVerbFactory>().CreateWalletVerb(name))
{}

inline WalletItem::WalletItem(Windows::ApplicationModel::Wallet::WalletItemKind const kind, StringReference const & displayName) :
	WalletItem(GetActivationFactory<WalletItem, IWalletItemFactory>().CreateWalletItem(kind, displayName))
{}

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Wallet::WalletItemStore> WalletManager::RequestStoreAsync()
{
	return GetActivationFactory<WalletManager, IWalletManagerStatics>().RequestStoreAsync();
}

}}}}

namespace winrt { namespace Windows { namespace ApplicationModel { namespace Wallet { namespace System {

inline Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::Wallet::System::WalletItemSystemStore> WalletManagerSystem::RequestStoreAsync()
{
	return GetActivationFactory<WalletManagerSystem, IWalletManagerSystemStatics>().RequestStoreAsync();
}

}}}}}

namespace winrt { namespace Windows { namespace Data { namespace Html {

inline String HtmlUtilities::ConvertToText(StringReference const & html)
{
	return GetActivationFactory<HtmlUtilities, IHtmlUtilities>().ConvertToText(html);
}

}}}}

namespace winrt { namespace Windows { namespace Data { namespace Json {

inline JsonArray::JsonArray() :
	JsonArray(ActivateInstance<JsonArray>())
{}

inline Windows::Data::Json::JsonArray JsonArray::Parse(StringReference const & input)
{
	return GetActivationFactory<JsonArray, IJsonArrayStatics>().Parse(input);
}

inline bool JsonArray::TryParse(StringReference const & input, Windows::Data::Json::JsonArray & result)
{
	return GetActivationFactory<JsonArray, IJsonArrayStatics>().TryParse(input, result);
}

inline JsonObject::JsonObject() :
	JsonObject(ActivateInstance<JsonObject>())
{}

inline Windows::Data::Json::JsonObject JsonObject::Parse(StringReference const & input)
{
	return GetActivationFactory<JsonObject, IJsonObjectStatics>().Parse(input);
}

inline bool JsonObject::TryParse(StringReference const & input, Windows::Data::Json::JsonObject & result)
{
	return GetActivationFactory<JsonObject, IJsonObjectStatics>().TryParse(input, result);
}

inline Windows::Data::Json::JsonValue JsonValue::CreateNullValue()
{
	return GetActivationFactory<JsonValue, IJsonValueStatics2>().CreateNullValue();
}

inline Windows::Data::Json::JsonValue JsonValue::Parse(StringReference const & input)
{
	return GetActivationFactory<JsonValue, IJsonValueStatics>().Parse(input);
}

inline bool JsonValue::TryParse(StringReference const & input, Windows::Data::Json::JsonValue & result)
{
	return GetActivationFactory<JsonValue, IJsonValueStatics>().TryParse(input, result);
}

inline Windows::Data::Json::JsonValue JsonValue::CreateBooleanValue(bool const input)
{
	return GetActivationFactory<JsonValue, IJsonValueStatics>().CreateBooleanValue(input);
}

inline Windows::Data::Json::JsonValue JsonValue::CreateNumberValue(double const input)
{
	return GetActivationFactory<JsonValue, IJsonValueStatics>().CreateNumberValue(input);
}

inline Windows::Data::Json::JsonValue JsonValue::CreateStringValue(StringReference const & input)
{
	return GetActivationFactory<JsonValue, IJsonValueStatics>().CreateStringValue(input);
}

inline Windows::Data::Json::JsonErrorStatus JsonError::GetJsonStatus(int const hresult)
{
	return GetActivationFactory<JsonError, IJsonErrorStatics2>().GetJsonStatus(hresult);
}

}}}}

namespace winrt { namespace Windows { namespace Data { namespace Pdf {

inline PdfPageRenderOptions::PdfPageRenderOptions() :
	PdfPageRenderOptions(ActivateInstance<PdfPageRenderOptions>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> PdfDocument::LoadFromFileAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<PdfDocument, IPdfDocumentStatics>().LoadFromFileAsync(file);
}

inline Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> PdfDocument::LoadFromFileAsync(Windows::Storage::IStorageFile const & file, StringReference const & password)
{
	return GetActivationFactory<PdfDocument, IPdfDocumentStatics>().LoadFromFileAsync(file, password);
}

inline Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> PdfDocument::LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream)
{
	return GetActivationFactory<PdfDocument, IPdfDocumentStatics>().LoadFromStreamAsync(inputStream);
}

inline Windows::Foundation::IAsyncOperation<Windows::Data::Pdf::PdfDocument> PdfDocument::LoadFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & inputStream, StringReference const & password)
{
	return GetActivationFactory<PdfDocument, IPdfDocumentStatics>().LoadFromStreamAsync(inputStream, password);
}

}}}}

namespace winrt { namespace Windows { namespace Data { namespace Text {

inline SemanticTextQuery::SemanticTextQuery(StringReference const & aqsFilter) :
	SemanticTextQuery(GetActivationFactory<SemanticTextQuery, ISemanticTextQueryFactory>().Create(aqsFilter))
{}

inline SemanticTextQuery::SemanticTextQuery(StringReference const & aqsFilter, StringReference const & filterLanguage) :
	SemanticTextQuery(GetActivationFactory<SemanticTextQuery, ISemanticTextQueryFactory>().CreateWithLanguage(aqsFilter, filterLanguage))
{}

inline unsigned UnicodeCharacters::GetCodepointFromSurrogatePair(unsigned const highSurrogate, unsigned const lowSurrogate)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().GetCodepointFromSurrogatePair(highSurrogate, lowSurrogate);
}

inline void UnicodeCharacters::GetSurrogatePairFromCodepoint(unsigned const codepoint, wchar_t & highSurrogate, wchar_t & lowSurrogate)
{
	GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().GetSurrogatePairFromCodepoint(codepoint, highSurrogate, lowSurrogate);
}

inline bool UnicodeCharacters::IsHighSurrogate(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsHighSurrogate(codepoint);
}

inline bool UnicodeCharacters::IsLowSurrogate(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsLowSurrogate(codepoint);
}

inline bool UnicodeCharacters::IsSupplementary(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsSupplementary(codepoint);
}

inline bool UnicodeCharacters::IsNoncharacter(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsNoncharacter(codepoint);
}

inline bool UnicodeCharacters::IsWhitespace(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsWhitespace(codepoint);
}

inline bool UnicodeCharacters::IsAlphabetic(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsAlphabetic(codepoint);
}

inline bool UnicodeCharacters::IsCased(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsCased(codepoint);
}

inline bool UnicodeCharacters::IsUppercase(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsUppercase(codepoint);
}

inline bool UnicodeCharacters::IsLowercase(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsLowercase(codepoint);
}

inline bool UnicodeCharacters::IsIdStart(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsIdStart(codepoint);
}

inline bool UnicodeCharacters::IsIdContinue(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsIdContinue(codepoint);
}

inline bool UnicodeCharacters::IsGraphemeBase(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsGraphemeBase(codepoint);
}

inline bool UnicodeCharacters::IsGraphemeExtend(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().IsGraphemeExtend(codepoint);
}

inline Windows::Data::Text::UnicodeNumericType UnicodeCharacters::GetNumericType(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().GetNumericType(codepoint);
}

inline Windows::Data::Text::UnicodeGeneralCategory UnicodeCharacters::GetGeneralCategory(unsigned const codepoint)
{
	return GetActivationFactory<UnicodeCharacters, IUnicodeCharactersStatics>().GetGeneralCategory(codepoint);
}

inline WordsSegmenter::WordsSegmenter(StringReference const & language) :
	WordsSegmenter(GetActivationFactory<WordsSegmenter, IWordsSegmenterFactory>().CreateWithLanguage(language))
{}

inline SelectableWordsSegmenter::SelectableWordsSegmenter(StringReference const & language) :
	SelectableWordsSegmenter(GetActivationFactory<SelectableWordsSegmenter, ISelectableWordsSegmenterFactory>().CreateWithLanguage(language))
{}

inline TextPredictionGenerator::TextPredictionGenerator(StringReference const & languageTag) :
	TextPredictionGenerator(GetActivationFactory<TextPredictionGenerator, ITextPredictionGeneratorFactory>().Create(languageTag))
{}

inline TextConversionGenerator::TextConversionGenerator(StringReference const & languageTag) :
	TextConversionGenerator(GetActivationFactory<TextConversionGenerator, ITextConversionGeneratorFactory>().Create(languageTag))
{}

inline TextReverseConversionGenerator::TextReverseConversionGenerator(StringReference const & languageTag) :
	TextReverseConversionGenerator(GetActivationFactory<TextReverseConversionGenerator, ITextReverseConversionGeneratorFactory>().Create(languageTag))
{}

}}}}

namespace winrt { namespace Windows { namespace Data { namespace Xml { namespace Dom {

inline XmlDocument::XmlDocument() :
	XmlDocument(ActivateInstance<XmlDocument>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> XmlDocument::LoadFromUriAsync(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<XmlDocument, IXmlDocumentStatics>().LoadFromUriAsync(uri);
}

inline Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> XmlDocument::LoadFromUriAsync(Windows::Foundation::Uri const & uri, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings)
{
	return GetActivationFactory<XmlDocument, IXmlDocumentStatics>().LoadFromUriAsync(uri, loadSettings);
}

inline Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> XmlDocument::LoadFromFileAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<XmlDocument, IXmlDocumentStatics>().LoadFromFileAsync(file);
}

inline Windows::Foundation::IAsyncOperation<Windows::Data::Xml::Dom::XmlDocument> XmlDocument::LoadFromFileAsync(Windows::Storage::IStorageFile const & file, Windows::Data::Xml::Dom::XmlLoadSettings const & loadSettings)
{
	return GetActivationFactory<XmlDocument, IXmlDocumentStatics>().LoadFromFileAsync(file, loadSettings);
}

inline XmlLoadSettings::XmlLoadSettings() :
	XmlLoadSettings(ActivateInstance<XmlLoadSettings>())
{}

}}}}}

namespace winrt { namespace Windows { namespace Data { namespace Xml { namespace Xsl {

inline XsltProcessor::XsltProcessor(Windows::Data::Xml::Dom::XmlDocument const & document) :
	XsltProcessor(GetActivationFactory<XsltProcessor, IXsltProcessorFactory>().CreateInstance(document))
{}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace AllJoyn {

inline int AllJoynStatus::Ok()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().Ok();
}

inline int AllJoynStatus::Fail()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().Fail();
}

inline int AllJoynStatus::OperationTimedOut()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().OperationTimedOut();
}

inline int AllJoynStatus::OtherEndClosed()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().OtherEndClosed();
}

inline int AllJoynStatus::ConnectionRefused()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().ConnectionRefused();
}

inline int AllJoynStatus::AuthenticationFailed()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().AuthenticationFailed();
}

inline int AllJoynStatus::AuthenticationRejectedByUser()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().AuthenticationRejectedByUser();
}

inline int AllJoynStatus::SslConnectFailed()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().SslConnectFailed();
}

inline int AllJoynStatus::SslIdentityVerificationFailed()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().SslIdentityVerificationFailed();
}

inline int AllJoynStatus::InsufficientSecurity()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().InsufficientSecurity();
}

inline int AllJoynStatus::InvalidArgument1()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().InvalidArgument1();
}

inline int AllJoynStatus::InvalidArgument2()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().InvalidArgument2();
}

inline int AllJoynStatus::InvalidArgument3()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().InvalidArgument3();
}

inline int AllJoynStatus::InvalidArgument4()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().InvalidArgument4();
}

inline int AllJoynStatus::InvalidArgument5()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().InvalidArgument5();
}

inline int AllJoynStatus::InvalidArgument6()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().InvalidArgument6();
}

inline int AllJoynStatus::InvalidArgument7()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().InvalidArgument7();
}

inline int AllJoynStatus::InvalidArgument8()
{
	return GetActivationFactory<AllJoynStatus, IAllJoynStatusStatics>().InvalidArgument8();
}

inline AllJoynBusAttachment::AllJoynBusAttachment() :
	AllJoynBusAttachment(ActivateInstance<AllJoynBusAttachment>())
{}

inline AllJoynBusAttachment::AllJoynBusAttachment(StringReference const & connectionSpecification) :
	AllJoynBusAttachment(GetActivationFactory<AllJoynBusAttachment, IAllJoynBusAttachmentFactory>().Create(connectionSpecification))
{}

inline AllJoynServiceInfo::AllJoynServiceInfo(StringReference const & uniqueName, StringReference const & objectPath, unsigned short const sessionPort) :
	AllJoynServiceInfo(GetActivationFactory<AllJoynServiceInfo, IAllJoynServiceInfoFactory>().Create(uniqueName, objectPath, sessionPort))
{}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::AllJoyn::AllJoynAboutDataView> AllJoynAboutDataView::GetDataBySessionPortAsync(StringReference const & uniqueName, Windows::Devices::AllJoyn::AllJoynBusAttachment const & busAttachment, unsigned short const sessionPort)
{
	return GetActivationFactory<AllJoynAboutDataView, IAllJoynAboutDataViewStatics>().GetDataBySessionPortAsync(uniqueName, busAttachment, sessionPort);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::AllJoyn::AllJoynAboutDataView> AllJoynAboutDataView::GetDataBySessionPortAsync(StringReference const & uniqueName, Windows::Devices::AllJoyn::AllJoynBusAttachment const & busAttachment, unsigned short const sessionPort, Windows::Globalization::Language const & language)
{
	return GetActivationFactory<AllJoynAboutDataView, IAllJoynAboutDataViewStatics>().GetDataBySessionPortAsync(uniqueName, busAttachment, sessionPort, language);
}

inline AllJoynAcceptSessionJoinerEventArgs::AllJoynAcceptSessionJoinerEventArgs(StringReference const & uniqueName, unsigned short const sessionPort, Windows::Devices::AllJoyn::AllJoynTrafficType const trafficType, byte const proximity, Windows::Devices::AllJoyn::IAllJoynAcceptSessionJoiner const & acceptSessionJoiner) :
	AllJoynAcceptSessionJoinerEventArgs(GetActivationFactory<AllJoynAcceptSessionJoinerEventArgs, IAllJoynAcceptSessionJoinerEventArgsFactory>().Create(uniqueName, sessionPort, trafficType, proximity, acceptSessionJoiner))
{}

inline AllJoynSessionMemberAddedEventArgs::AllJoynSessionMemberAddedEventArgs(StringReference const & uniqueName) :
	AllJoynSessionMemberAddedEventArgs(GetActivationFactory<AllJoynSessionMemberAddedEventArgs, IAllJoynSessionMemberAddedEventArgsFactory>().Create(uniqueName))
{}

inline AllJoynSessionMemberRemovedEventArgs::AllJoynSessionMemberRemovedEventArgs(StringReference const & uniqueName) :
	AllJoynSessionMemberRemovedEventArgs(GetActivationFactory<AllJoynSessionMemberRemovedEventArgs, IAllJoynSessionMemberRemovedEventArgsFactory>().Create(uniqueName))
{}

inline AllJoynSessionLostEventArgs::AllJoynSessionLostEventArgs(Windows::Devices::AllJoyn::AllJoynSessionLostReason const reason) :
	AllJoynSessionLostEventArgs(GetActivationFactory<AllJoynSessionLostEventArgs, IAllJoynSessionLostEventArgsFactory>().Create(reason))
{}

inline AllJoynProducerStoppedEventArgs::AllJoynProducerStoppedEventArgs(int const status) :
	AllJoynProducerStoppedEventArgs(GetActivationFactory<AllJoynProducerStoppedEventArgs, IAllJoynProducerStoppedEventArgsFactory>().Create(status))
{}

inline AllJoynWatcherStoppedEventArgs::AllJoynWatcherStoppedEventArgs(int const status) :
	AllJoynWatcherStoppedEventArgs(GetActivationFactory<AllJoynWatcherStoppedEventArgs, IAllJoynWatcherStoppedEventArgsFactory>().Create(status))
{}

inline AllJoynServiceInfoRemovedEventArgs::AllJoynServiceInfoRemovedEventArgs(StringReference const & uniqueName) :
	AllJoynServiceInfoRemovedEventArgs(GetActivationFactory<AllJoynServiceInfoRemovedEventArgs, IAllJoynServiceInfoRemovedEventArgsFactory>().Create(uniqueName))
{}

inline AllJoynMessageInfo::AllJoynMessageInfo(StringReference const & senderUniqueName) :
	AllJoynMessageInfo(GetActivationFactory<AllJoynMessageInfo, IAllJoynMessageInfoFactory>().Create(senderUniqueName))
{}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Background {

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth {

inline String BluetoothLEDevice::GetDeviceSelectorFromPairingState(bool const pairingState)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>().GetDeviceSelectorFromPairingState(pairingState);
}

inline String BluetoothLEDevice::GetDeviceSelectorFromConnectionStatus(Windows::Devices::Bluetooth::BluetoothConnectionStatus const connectionStatus)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>().GetDeviceSelectorFromConnectionStatus(connectionStatus);
}

inline String BluetoothLEDevice::GetDeviceSelectorFromDeviceName(StringReference const & deviceName)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>().GetDeviceSelectorFromDeviceName(deviceName);
}

inline String BluetoothLEDevice::GetDeviceSelectorFromBluetoothAddress(unsigned long long const bluetoothAddress)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>().GetDeviceSelectorFromBluetoothAddress(bluetoothAddress);
}

inline String BluetoothLEDevice::GetDeviceSelectorFromBluetoothAddress(unsigned long long const bluetoothAddress, Windows::Devices::Bluetooth::BluetoothAddressType const bluetoothAddressType)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>().GetDeviceSelectorFromBluetoothAddress(bluetoothAddress, bluetoothAddressType);
}

inline String BluetoothLEDevice::GetDeviceSelectorFromAppearance(Windows::Devices::Bluetooth::BluetoothLEAppearance const & appearance)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>().GetDeviceSelectorFromAppearance(appearance);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> BluetoothLEDevice::FromBluetoothAddressAsync(unsigned long long const bluetoothAddress, Windows::Devices::Bluetooth::BluetoothAddressType const bluetoothAddressType)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics2>().FromBluetoothAddressAsync(bluetoothAddress, bluetoothAddressType);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> BluetoothLEDevice::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics>().FromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothLEDevice> BluetoothLEDevice::FromBluetoothAddressAsync(unsigned long long const bluetoothAddress)
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics>().FromBluetoothAddressAsync(bluetoothAddress);
}

inline String BluetoothLEDevice::GetDeviceSelector()
{
	return GetActivationFactory<BluetoothLEDevice, IBluetoothLEDeviceStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> BluetoothDevice::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics>().FromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> BluetoothDevice::FromHostNameAsync(Windows::Networking::HostName const & hostName)
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics>().FromHostNameAsync(hostName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::BluetoothDevice> BluetoothDevice::FromBluetoothAddressAsync(unsigned long long const address)
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics>().FromBluetoothAddressAsync(address);
}

inline String BluetoothDevice::GetDeviceSelector()
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics>().GetDeviceSelector();
}

inline String BluetoothDevice::GetDeviceSelectorFromPairingState(bool const pairingState)
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics2>().GetDeviceSelectorFromPairingState(pairingState);
}

inline String BluetoothDevice::GetDeviceSelectorFromConnectionStatus(Windows::Devices::Bluetooth::BluetoothConnectionStatus const connectionStatus)
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics2>().GetDeviceSelectorFromConnectionStatus(connectionStatus);
}

inline String BluetoothDevice::GetDeviceSelectorFromDeviceName(StringReference const & deviceName)
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics2>().GetDeviceSelectorFromDeviceName(deviceName);
}

inline String BluetoothDevice::GetDeviceSelectorFromBluetoothAddress(unsigned long long const bluetoothAddress)
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics2>().GetDeviceSelectorFromBluetoothAddress(bluetoothAddress);
}

inline String BluetoothDevice::GetDeviceSelectorFromClassOfDevice(Windows::Devices::Bluetooth::BluetoothClassOfDevice const & classOfDevice)
{
	return GetActivationFactory<BluetoothDevice, IBluetoothDeviceStatics2>().GetDeviceSelectorFromClassOfDevice(classOfDevice);
}

inline Windows::Devices::Bluetooth::BluetoothClassOfDevice BluetoothClassOfDevice::FromRawValue(unsigned const rawValue)
{
	return GetActivationFactory<BluetoothClassOfDevice, IBluetoothClassOfDeviceStatics>().FromRawValue(rawValue);
}

inline Windows::Devices::Bluetooth::BluetoothClassOfDevice BluetoothClassOfDevice::FromParts(Windows::Devices::Bluetooth::BluetoothMajorClass const majorClass, Windows::Devices::Bluetooth::BluetoothMinorClass const minorClass, Windows::Devices::Bluetooth::BluetoothServiceCapabilities const serviceCapabilities)
{
	return GetActivationFactory<BluetoothClassOfDevice, IBluetoothClassOfDeviceStatics>().FromParts(majorClass, minorClass, serviceCapabilities);
}

inline unsigned short BluetoothLEAppearanceCategories::Uncategorized()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Uncategorized();
}

inline unsigned short BluetoothLEAppearanceCategories::Phone()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Phone();
}

inline unsigned short BluetoothLEAppearanceCategories::Computer()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Computer();
}

inline unsigned short BluetoothLEAppearanceCategories::Watch()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Watch();
}

inline unsigned short BluetoothLEAppearanceCategories::Clock()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Clock();
}

inline unsigned short BluetoothLEAppearanceCategories::Display()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Display();
}

inline unsigned short BluetoothLEAppearanceCategories::RemoteControl()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().RemoteControl();
}

inline unsigned short BluetoothLEAppearanceCategories::EyeGlasses()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().EyeGlasses();
}

inline unsigned short BluetoothLEAppearanceCategories::Tag()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Tag();
}

inline unsigned short BluetoothLEAppearanceCategories::Keyring()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Keyring();
}

inline unsigned short BluetoothLEAppearanceCategories::MediaPlayer()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().MediaPlayer();
}

inline unsigned short BluetoothLEAppearanceCategories::BarcodeScanner()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().BarcodeScanner();
}

inline unsigned short BluetoothLEAppearanceCategories::Thermometer()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Thermometer();
}

inline unsigned short BluetoothLEAppearanceCategories::HeartRate()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().HeartRate();
}

inline unsigned short BluetoothLEAppearanceCategories::BloodPressure()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().BloodPressure();
}

inline unsigned short BluetoothLEAppearanceCategories::HumanInterfaceDevice()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().HumanInterfaceDevice();
}

inline unsigned short BluetoothLEAppearanceCategories::GlucoseMeter()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().GlucoseMeter();
}

inline unsigned short BluetoothLEAppearanceCategories::RunningWalking()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().RunningWalking();
}

inline unsigned short BluetoothLEAppearanceCategories::Cycling()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().Cycling();
}

inline unsigned short BluetoothLEAppearanceCategories::PulseOximeter()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().PulseOximeter();
}

inline unsigned short BluetoothLEAppearanceCategories::WeightScale()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().WeightScale();
}

inline unsigned short BluetoothLEAppearanceCategories::OutdoorSportActivity()
{
	return GetActivationFactory<BluetoothLEAppearanceCategories, IBluetoothLEAppearanceCategoriesStatics>().OutdoorSportActivity();
}

inline unsigned short BluetoothLEAppearanceSubcategories::Generic()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().Generic();
}

inline unsigned short BluetoothLEAppearanceSubcategories::SportsWatch()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().SportsWatch();
}

inline unsigned short BluetoothLEAppearanceSubcategories::ThermometerEar()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().ThermometerEar();
}

inline unsigned short BluetoothLEAppearanceSubcategories::HeartRateBelt()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().HeartRateBelt();
}

inline unsigned short BluetoothLEAppearanceSubcategories::BloodPressureArm()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().BloodPressureArm();
}

inline unsigned short BluetoothLEAppearanceSubcategories::BloodPressureWrist()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().BloodPressureWrist();
}

inline unsigned short BluetoothLEAppearanceSubcategories::Keyboard()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().Keyboard();
}

inline unsigned short BluetoothLEAppearanceSubcategories::Mouse()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().Mouse();
}

inline unsigned short BluetoothLEAppearanceSubcategories::Joystick()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().Joystick();
}

inline unsigned short BluetoothLEAppearanceSubcategories::Gamepad()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().Gamepad();
}

inline unsigned short BluetoothLEAppearanceSubcategories::DigitizerTablet()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().DigitizerTablet();
}

inline unsigned short BluetoothLEAppearanceSubcategories::CardReader()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().CardReader();
}

inline unsigned short BluetoothLEAppearanceSubcategories::DigitalPen()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().DigitalPen();
}

inline unsigned short BluetoothLEAppearanceSubcategories::BarcodeScanner()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().BarcodeScanner();
}

inline unsigned short BluetoothLEAppearanceSubcategories::RunningWalkingInShoe()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().RunningWalkingInShoe();
}

inline unsigned short BluetoothLEAppearanceSubcategories::RunningWalkingOnShoe()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().RunningWalkingOnShoe();
}

inline unsigned short BluetoothLEAppearanceSubcategories::RunningWalkingOnHip()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().RunningWalkingOnHip();
}

inline unsigned short BluetoothLEAppearanceSubcategories::CyclingComputer()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().CyclingComputer();
}

inline unsigned short BluetoothLEAppearanceSubcategories::CyclingSpeedSensor()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().CyclingSpeedSensor();
}

inline unsigned short BluetoothLEAppearanceSubcategories::CyclingCadenceSensor()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().CyclingCadenceSensor();
}

inline unsigned short BluetoothLEAppearanceSubcategories::CyclingPowerSensor()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().CyclingPowerSensor();
}

inline unsigned short BluetoothLEAppearanceSubcategories::CyclingSpeedCadenceSensor()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().CyclingSpeedCadenceSensor();
}

inline unsigned short BluetoothLEAppearanceSubcategories::OximeterFingertip()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().OximeterFingertip();
}

inline unsigned short BluetoothLEAppearanceSubcategories::OximeterWristWorn()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().OximeterWristWorn();
}

inline unsigned short BluetoothLEAppearanceSubcategories::LocationDisplay()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().LocationDisplay();
}

inline unsigned short BluetoothLEAppearanceSubcategories::LocationNavigationDisplay()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().LocationNavigationDisplay();
}

inline unsigned short BluetoothLEAppearanceSubcategories::LocationPod()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().LocationPod();
}

inline unsigned short BluetoothLEAppearanceSubcategories::LocationNavigationPod()
{
	return GetActivationFactory<BluetoothLEAppearanceSubcategories, IBluetoothLEAppearanceSubcategoriesStatics>().LocationNavigationPod();
}

inline Windows::Devices::Bluetooth::BluetoothLEAppearance BluetoothLEAppearance::FromRawValue(unsigned short const rawValue)
{
	return GetActivationFactory<BluetoothLEAppearance, IBluetoothLEAppearanceStatics>().FromRawValue(rawValue);
}

inline Windows::Devices::Bluetooth::BluetoothLEAppearance BluetoothLEAppearance::FromParts(unsigned short const appearanceCategory, unsigned short const appearanceSubCategory)
{
	return GetActivationFactory<BluetoothLEAppearance, IBluetoothLEAppearanceStatics>().FromParts(appearanceCategory, appearanceSubCategory);
}

inline BluetoothSignalStrengthFilter::BluetoothSignalStrengthFilter() :
	BluetoothSignalStrengthFilter(ActivateInstance<BluetoothSignalStrengthFilter>())
{}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Advertisement {

inline BluetoothLEManufacturerData::BluetoothLEManufacturerData() :
	BluetoothLEManufacturerData(ActivateInstance<BluetoothLEManufacturerData>())
{}

inline BluetoothLEManufacturerData::BluetoothLEManufacturerData(unsigned short const companyId, Windows::Storage::Streams::IBuffer const & data) :
	BluetoothLEManufacturerData(GetActivationFactory<BluetoothLEManufacturerData, IBluetoothLEManufacturerDataFactory>().Create(companyId, data))
{}

inline BluetoothLEAdvertisementDataSection::BluetoothLEAdvertisementDataSection() :
	BluetoothLEAdvertisementDataSection(ActivateInstance<BluetoothLEAdvertisementDataSection>())
{}

inline BluetoothLEAdvertisementDataSection::BluetoothLEAdvertisementDataSection(byte const dataType, Windows::Storage::Streams::IBuffer const & data) :
	BluetoothLEAdvertisementDataSection(GetActivationFactory<BluetoothLEAdvertisementDataSection, IBluetoothLEAdvertisementDataSectionFactory>().Create(dataType, data))
{}

inline BluetoothLEAdvertisement::BluetoothLEAdvertisement() :
	BluetoothLEAdvertisement(ActivateInstance<BluetoothLEAdvertisement>())
{}

inline BluetoothLEAdvertisementBytePattern::BluetoothLEAdvertisementBytePattern() :
	BluetoothLEAdvertisementBytePattern(ActivateInstance<BluetoothLEAdvertisementBytePattern>())
{}

inline BluetoothLEAdvertisementBytePattern::BluetoothLEAdvertisementBytePattern(byte const dataType, short const offset, Windows::Storage::Streams::IBuffer const & data) :
	BluetoothLEAdvertisementBytePattern(GetActivationFactory<BluetoothLEAdvertisementBytePattern, IBluetoothLEAdvertisementBytePatternFactory>().Create(dataType, offset, data))
{}

inline BluetoothLEAdvertisementFilter::BluetoothLEAdvertisementFilter() :
	BluetoothLEAdvertisementFilter(ActivateInstance<BluetoothLEAdvertisementFilter>())
{}

inline BluetoothLEAdvertisementWatcher::BluetoothLEAdvertisementWatcher() :
	BluetoothLEAdvertisementWatcher(ActivateInstance<BluetoothLEAdvertisementWatcher>())
{}

inline BluetoothLEAdvertisementWatcher::BluetoothLEAdvertisementWatcher(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisementFilter const & advertisementFilter) :
	BluetoothLEAdvertisementWatcher(GetActivationFactory<BluetoothLEAdvertisementWatcher, IBluetoothLEAdvertisementWatcherFactory>().Create(advertisementFilter))
{}

inline byte BluetoothLEAdvertisementDataTypes::Flags()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().Flags();
}

inline byte BluetoothLEAdvertisementDataTypes::IncompleteService16BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().IncompleteService16BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::CompleteService16BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().CompleteService16BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::IncompleteService32BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().IncompleteService32BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::CompleteService32BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().CompleteService32BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::IncompleteService128BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().IncompleteService128BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::CompleteService128BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().CompleteService128BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::ShortenedLocalName()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().ShortenedLocalName();
}

inline byte BluetoothLEAdvertisementDataTypes::CompleteLocalName()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().CompleteLocalName();
}

inline byte BluetoothLEAdvertisementDataTypes::TxPowerLevel()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().TxPowerLevel();
}

inline byte BluetoothLEAdvertisementDataTypes::SlaveConnectionIntervalRange()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().SlaveConnectionIntervalRange();
}

inline byte BluetoothLEAdvertisementDataTypes::ServiceSolicitation16BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().ServiceSolicitation16BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::ServiceSolicitation32BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().ServiceSolicitation32BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::ServiceSolicitation128BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().ServiceSolicitation128BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::ServiceData16BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().ServiceData16BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::ServiceData32BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().ServiceData32BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::ServiceData128BitUuids()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().ServiceData128BitUuids();
}

inline byte BluetoothLEAdvertisementDataTypes::PublicTargetAddress()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().PublicTargetAddress();
}

inline byte BluetoothLEAdvertisementDataTypes::RandomTargetAddress()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().RandomTargetAddress();
}

inline byte BluetoothLEAdvertisementDataTypes::Appearance()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().Appearance();
}

inline byte BluetoothLEAdvertisementDataTypes::AdvertisingInterval()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().AdvertisingInterval();
}

inline byte BluetoothLEAdvertisementDataTypes::ManufacturerSpecificData()
{
	return GetActivationFactory<BluetoothLEAdvertisementDataTypes, IBluetoothLEAdvertisementDataTypesStatics>().ManufacturerSpecificData();
}

inline BluetoothLEAdvertisementPublisher::BluetoothLEAdvertisementPublisher() :
	BluetoothLEAdvertisementPublisher(ActivateInstance<BluetoothLEAdvertisementPublisher>())
{}

inline BluetoothLEAdvertisementPublisher::BluetoothLEAdvertisementPublisher(Windows::Devices::Bluetooth::Advertisement::BluetoothLEAdvertisement const & advertisement) :
	BluetoothLEAdvertisementPublisher(GetActivationFactory<BluetoothLEAdvertisementPublisher, IBluetoothLEAdvertisementPublisherFactory>().Create(advertisement))
{}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Background {

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace GenericAttributeProfile {

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::GenericAttributeProfile::GattDeviceService> GattDeviceService::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<GattDeviceService, IGattDeviceServiceStatics>().FromIdAsync(deviceId);
}

inline String GattDeviceService::GetDeviceSelectorFromUuid(GUID const serviceUuid)
{
	return GetActivationFactory<GattDeviceService, IGattDeviceServiceStatics>().GetDeviceSelectorFromUuid(serviceUuid);
}

inline String GattDeviceService::GetDeviceSelectorFromShortId(unsigned short const serviceShortId)
{
	return GetActivationFactory<GattDeviceService, IGattDeviceServiceStatics>().GetDeviceSelectorFromShortId(serviceShortId);
}

inline GUID GattDeviceService::ConvertShortIdToUuid(unsigned short const shortId)
{
	return GetActivationFactory<GattDeviceService, IGattDeviceServiceStatics>().ConvertShortIdToUuid(shortId);
}

inline GUID GattCharacteristic::ConvertShortIdToUuid(unsigned short const shortId)
{
	return GetActivationFactory<GattCharacteristic, IGattCharacteristicStatics>().ConvertShortIdToUuid(shortId);
}

inline GUID GattDescriptor::ConvertShortIdToUuid(unsigned short const shortId)
{
	return GetActivationFactory<GattDescriptor, IGattDescriptorStatics>().ConvertShortIdToUuid(shortId);
}

inline byte GattPresentationFormat::BluetoothSigAssignedNumbers()
{
	return GetActivationFactory<GattPresentationFormat, IGattPresentationFormatStatics>().BluetoothSigAssignedNumbers();
}

inline GUID GattServiceUuids::AlertNotification()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().AlertNotification();
}

inline GUID GattServiceUuids::CurrentTime()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().CurrentTime();
}

inline GUID GattServiceUuids::CyclingPower()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().CyclingPower();
}

inline GUID GattServiceUuids::DeviceInformation()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().DeviceInformation();
}

inline GUID GattServiceUuids::HumanInterfaceDevice()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().HumanInterfaceDevice();
}

inline GUID GattServiceUuids::ImmediateAlert()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().ImmediateAlert();
}

inline GUID GattServiceUuids::LinkLoss()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().LinkLoss();
}

inline GUID GattServiceUuids::LocationAndNavigation()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().LocationAndNavigation();
}

inline GUID GattServiceUuids::NextDstChange()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().NextDstChange();
}

inline GUID GattServiceUuids::PhoneAlertStatus()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().PhoneAlertStatus();
}

inline GUID GattServiceUuids::ReferenceTimeUpdate()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().ReferenceTimeUpdate();
}

inline GUID GattServiceUuids::ScanParameters()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().ScanParameters();
}

inline GUID GattServiceUuids::TxPower()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics2>().TxPower();
}

inline GUID GattServiceUuids::Battery()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().Battery();
}

inline GUID GattServiceUuids::BloodPressure()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().BloodPressure();
}

inline GUID GattServiceUuids::CyclingSpeedAndCadence()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().CyclingSpeedAndCadence();
}

inline GUID GattServiceUuids::GenericAccess()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().GenericAccess();
}

inline GUID GattServiceUuids::GenericAttribute()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().GenericAttribute();
}

inline GUID GattServiceUuids::Glucose()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().Glucose();
}

inline GUID GattServiceUuids::HealthThermometer()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().HealthThermometer();
}

inline GUID GattServiceUuids::HeartRate()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().HeartRate();
}

inline GUID GattServiceUuids::RunningSpeedAndCadence()
{
	return GetActivationFactory<GattServiceUuids, IGattServiceUuidsStatics>().RunningSpeedAndCadence();
}

inline GUID GattCharacteristicUuids::AlertCategoryId()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().AlertCategoryId();
}

inline GUID GattCharacteristicUuids::AlertCategoryIdBitMask()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().AlertCategoryIdBitMask();
}

inline GUID GattCharacteristicUuids::AlertLevel()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().AlertLevel();
}

inline GUID GattCharacteristicUuids::AlertNotificationControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().AlertNotificationControlPoint();
}

inline GUID GattCharacteristicUuids::AlertStatus()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().AlertStatus();
}

inline GUID GattCharacteristicUuids::GapAppearance()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().GapAppearance();
}

inline GUID GattCharacteristicUuids::BootKeyboardInputReport()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().BootKeyboardInputReport();
}

inline GUID GattCharacteristicUuids::BootKeyboardOutputReport()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().BootKeyboardOutputReport();
}

inline GUID GattCharacteristicUuids::BootMouseInputReport()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().BootMouseInputReport();
}

inline GUID GattCharacteristicUuids::CurrentTime()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().CurrentTime();
}

inline GUID GattCharacteristicUuids::CyclingPowerControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().CyclingPowerControlPoint();
}

inline GUID GattCharacteristicUuids::CyclingPowerFeature()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().CyclingPowerFeature();
}

inline GUID GattCharacteristicUuids::CyclingPowerMeasurement()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().CyclingPowerMeasurement();
}

inline GUID GattCharacteristicUuids::CyclingPowerVector()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().CyclingPowerVector();
}

inline GUID GattCharacteristicUuids::DateTime()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().DateTime();
}

inline GUID GattCharacteristicUuids::DayDateTime()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().DayDateTime();
}

inline GUID GattCharacteristicUuids::DayOfWeek()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().DayOfWeek();
}

inline GUID GattCharacteristicUuids::GapDeviceName()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().GapDeviceName();
}

inline GUID GattCharacteristicUuids::DstOffset()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().DstOffset();
}

inline GUID GattCharacteristicUuids::ExactTime256()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().ExactTime256();
}

inline GUID GattCharacteristicUuids::FirmwareRevisionString()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().FirmwareRevisionString();
}

inline GUID GattCharacteristicUuids::HardwareRevisionString()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().HardwareRevisionString();
}

inline GUID GattCharacteristicUuids::HidControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().HidControlPoint();
}

inline GUID GattCharacteristicUuids::HidInformation()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().HidInformation();
}

inline GUID GattCharacteristicUuids::Ieee1107320601RegulatoryCertificationDataList()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().Ieee1107320601RegulatoryCertificationDataList();
}

inline GUID GattCharacteristicUuids::LnControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().LnControlPoint();
}

inline GUID GattCharacteristicUuids::LnFeature()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().LnFeature();
}

inline GUID GattCharacteristicUuids::LocalTimeInformation()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().LocalTimeInformation();
}

inline GUID GattCharacteristicUuids::LocationAndSpeed()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().LocationAndSpeed();
}

inline GUID GattCharacteristicUuids::ManufacturerNameString()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().ManufacturerNameString();
}

inline GUID GattCharacteristicUuids::ModelNumberString()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().ModelNumberString();
}

inline GUID GattCharacteristicUuids::Navigation()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().Navigation();
}

inline GUID GattCharacteristicUuids::NewAlert()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().NewAlert();
}

inline GUID GattCharacteristicUuids::GapPeripheralPreferredConnectionParameters()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().GapPeripheralPreferredConnectionParameters();
}

inline GUID GattCharacteristicUuids::GapPeripheralPrivacyFlag()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().GapPeripheralPrivacyFlag();
}

inline GUID GattCharacteristicUuids::PnpId()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().PnpId();
}

inline GUID GattCharacteristicUuids::PositionQuality()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().PositionQuality();
}

inline GUID GattCharacteristicUuids::ProtocolMode()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().ProtocolMode();
}

inline GUID GattCharacteristicUuids::GapReconnectionAddress()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().GapReconnectionAddress();
}

inline GUID GattCharacteristicUuids::ReferenceTimeInformation()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().ReferenceTimeInformation();
}

inline GUID GattCharacteristicUuids::Report()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().Report();
}

inline GUID GattCharacteristicUuids::ReportMap()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().ReportMap();
}

inline GUID GattCharacteristicUuids::RingerControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().RingerControlPoint();
}

inline GUID GattCharacteristicUuids::RingerSetting()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().RingerSetting();
}

inline GUID GattCharacteristicUuids::ScanIntervalWindow()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().ScanIntervalWindow();
}

inline GUID GattCharacteristicUuids::ScanRefresh()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().ScanRefresh();
}

inline GUID GattCharacteristicUuids::SerialNumberString()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().SerialNumberString();
}

inline GUID GattCharacteristicUuids::GattServiceChanged()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().GattServiceChanged();
}

inline GUID GattCharacteristicUuids::SoftwareRevisionString()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().SoftwareRevisionString();
}

inline GUID GattCharacteristicUuids::SupportedNewAlertCategory()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().SupportedNewAlertCategory();
}

inline GUID GattCharacteristicUuids::SupportUnreadAlertCategory()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().SupportUnreadAlertCategory();
}

inline GUID GattCharacteristicUuids::SystemId()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().SystemId();
}

inline GUID GattCharacteristicUuids::TimeAccuracy()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().TimeAccuracy();
}

inline GUID GattCharacteristicUuids::TimeSource()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().TimeSource();
}

inline GUID GattCharacteristicUuids::TimeUpdateControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().TimeUpdateControlPoint();
}

inline GUID GattCharacteristicUuids::TimeUpdateState()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().TimeUpdateState();
}

inline GUID GattCharacteristicUuids::TimeWithDst()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().TimeWithDst();
}

inline GUID GattCharacteristicUuids::TimeZone()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().TimeZone();
}

inline GUID GattCharacteristicUuids::TxPowerLevel()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().TxPowerLevel();
}

inline GUID GattCharacteristicUuids::UnreadAlertStatus()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics2>().UnreadAlertStatus();
}

inline GUID GattCharacteristicUuids::BatteryLevel()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().BatteryLevel();
}

inline GUID GattCharacteristicUuids::BloodPressureFeature()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().BloodPressureFeature();
}

inline GUID GattCharacteristicUuids::BloodPressureMeasurement()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().BloodPressureMeasurement();
}

inline GUID GattCharacteristicUuids::BodySensorLocation()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().BodySensorLocation();
}

inline GUID GattCharacteristicUuids::CscFeature()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().CscFeature();
}

inline GUID GattCharacteristicUuids::CscMeasurement()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().CscMeasurement();
}

inline GUID GattCharacteristicUuids::GlucoseFeature()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().GlucoseFeature();
}

inline GUID GattCharacteristicUuids::GlucoseMeasurement()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().GlucoseMeasurement();
}

inline GUID GattCharacteristicUuids::GlucoseMeasurementContext()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().GlucoseMeasurementContext();
}

inline GUID GattCharacteristicUuids::HeartRateControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().HeartRateControlPoint();
}

inline GUID GattCharacteristicUuids::HeartRateMeasurement()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().HeartRateMeasurement();
}

inline GUID GattCharacteristicUuids::IntermediateCuffPressure()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().IntermediateCuffPressure();
}

inline GUID GattCharacteristicUuids::IntermediateTemperature()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().IntermediateTemperature();
}

inline GUID GattCharacteristicUuids::MeasurementInterval()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().MeasurementInterval();
}

inline GUID GattCharacteristicUuids::RecordAccessControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().RecordAccessControlPoint();
}

inline GUID GattCharacteristicUuids::RscFeature()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().RscFeature();
}

inline GUID GattCharacteristicUuids::RscMeasurement()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().RscMeasurement();
}

inline GUID GattCharacteristicUuids::SCControlPoint()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().SCControlPoint();
}

inline GUID GattCharacteristicUuids::SensorLocation()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().SensorLocation();
}

inline GUID GattCharacteristicUuids::TemperatureMeasurement()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().TemperatureMeasurement();
}

inline GUID GattCharacteristicUuids::TemperatureType()
{
	return GetActivationFactory<GattCharacteristicUuids, IGattCharacteristicUuidsStatics>().TemperatureType();
}

inline GUID GattDescriptorUuids::CharacteristicAggregateFormat()
{
	return GetActivationFactory<GattDescriptorUuids, IGattDescriptorUuidsStatics>().CharacteristicAggregateFormat();
}

inline GUID GattDescriptorUuids::CharacteristicExtendedProperties()
{
	return GetActivationFactory<GattDescriptorUuids, IGattDescriptorUuidsStatics>().CharacteristicExtendedProperties();
}

inline GUID GattDescriptorUuids::CharacteristicPresentationFormat()
{
	return GetActivationFactory<GattDescriptorUuids, IGattDescriptorUuidsStatics>().CharacteristicPresentationFormat();
}

inline GUID GattDescriptorUuids::CharacteristicUserDescription()
{
	return GetActivationFactory<GattDescriptorUuids, IGattDescriptorUuidsStatics>().CharacteristicUserDescription();
}

inline GUID GattDescriptorUuids::ClientCharacteristicConfiguration()
{
	return GetActivationFactory<GattDescriptorUuids, IGattDescriptorUuidsStatics>().ClientCharacteristicConfiguration();
}

inline GUID GattDescriptorUuids::ServerCharacteristicConfiguration()
{
	return GetActivationFactory<GattDescriptorUuids, IGattDescriptorUuidsStatics>().ServerCharacteristicConfiguration();
}

inline GattReliableWriteTransaction::GattReliableWriteTransaction() :
	GattReliableWriteTransaction(ActivateInstance<GattReliableWriteTransaction>())
{}

inline byte GattPresentationFormatTypes::Boolean()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Boolean();
}

inline byte GattPresentationFormatTypes::Bit2()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Bit2();
}

inline byte GattPresentationFormatTypes::Nibble()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Nibble();
}

inline byte GattPresentationFormatTypes::UInt8()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().UInt8();
}

inline byte GattPresentationFormatTypes::UInt12()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().UInt12();
}

inline byte GattPresentationFormatTypes::UInt16()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().UInt16();
}

inline byte GattPresentationFormatTypes::UInt24()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().UInt24();
}

inline byte GattPresentationFormatTypes::UInt32()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().UInt32();
}

inline byte GattPresentationFormatTypes::UInt48()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().UInt48();
}

inline byte GattPresentationFormatTypes::UInt64()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().UInt64();
}

inline byte GattPresentationFormatTypes::UInt128()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().UInt128();
}

inline byte GattPresentationFormatTypes::SInt8()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SInt8();
}

inline byte GattPresentationFormatTypes::SInt12()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SInt12();
}

inline byte GattPresentationFormatTypes::SInt16()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SInt16();
}

inline byte GattPresentationFormatTypes::SInt24()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SInt24();
}

inline byte GattPresentationFormatTypes::SInt32()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SInt32();
}

inline byte GattPresentationFormatTypes::SInt48()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SInt48();
}

inline byte GattPresentationFormatTypes::SInt64()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SInt64();
}

inline byte GattPresentationFormatTypes::SInt128()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SInt128();
}

inline byte GattPresentationFormatTypes::Float32()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Float32();
}

inline byte GattPresentationFormatTypes::Float64()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Float64();
}

inline byte GattPresentationFormatTypes::SFloat()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().SFloat();
}

inline byte GattPresentationFormatTypes::Float()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Float();
}

inline byte GattPresentationFormatTypes::DUInt16()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().DUInt16();
}

inline byte GattPresentationFormatTypes::Utf8()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Utf8();
}

inline byte GattPresentationFormatTypes::Utf16()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Utf16();
}

inline byte GattPresentationFormatTypes::Struct()
{
	return GetActivationFactory<GattPresentationFormatTypes, IGattPresentationFormatTypesStatics>().Struct();
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Bluetooth { namespace Rfcomm {

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::Rfcomm::RfcommDeviceService> RfcommDeviceService::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<RfcommDeviceService, IRfcommDeviceServiceStatics>().FromIdAsync(deviceId);
}

inline String RfcommDeviceService::GetDeviceSelector(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & serviceId)
{
	return GetActivationFactory<RfcommDeviceService, IRfcommDeviceServiceStatics>().GetDeviceSelector(serviceId);
}

inline Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RfcommServiceId::FromUuid(GUID const uuid)
{
	return GetActivationFactory<RfcommServiceId, IRfcommServiceIdStatics>().FromUuid(uuid);
}

inline Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RfcommServiceId::FromShortId(unsigned const shortId)
{
	return GetActivationFactory<RfcommServiceId, IRfcommServiceIdStatics>().FromShortId(shortId);
}

inline Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RfcommServiceId::SerialPort()
{
	return GetActivationFactory<RfcommServiceId, IRfcommServiceIdStatics>().SerialPort();
}

inline Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RfcommServiceId::ObexObjectPush()
{
	return GetActivationFactory<RfcommServiceId, IRfcommServiceIdStatics>().ObexObjectPush();
}

inline Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RfcommServiceId::ObexFileTransfer()
{
	return GetActivationFactory<RfcommServiceId, IRfcommServiceIdStatics>().ObexFileTransfer();
}

inline Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RfcommServiceId::PhoneBookAccessPce()
{
	return GetActivationFactory<RfcommServiceId, IRfcommServiceIdStatics>().PhoneBookAccessPce();
}

inline Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RfcommServiceId::PhoneBookAccessPse()
{
	return GetActivationFactory<RfcommServiceId, IRfcommServiceIdStatics>().PhoneBookAccessPse();
}

inline Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId RfcommServiceId::GenericFileTransfer()
{
	return GetActivationFactory<RfcommServiceId, IRfcommServiceIdStatics>().GenericFileTransfer();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Bluetooth::Rfcomm::RfcommServiceProvider> RfcommServiceProvider::CreateAsync(Windows::Devices::Bluetooth::Rfcomm::RfcommServiceId const & serviceId)
{
	return GetActivationFactory<RfcommServiceProvider, IRfcommServiceProviderStatics>().CreateAsync(serviceId);
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Custom {

inline unsigned short KnownDeviceTypes::Unknown()
{
	return GetActivationFactory<KnownDeviceTypes, IKnownDeviceTypesStatics>().Unknown();
}

inline IOControlCode::IOControlCode(unsigned short const deviceType, unsigned short const function, Windows::Devices::Custom::IOControlAccessMode const accessMode, Windows::Devices::Custom::IOControlBufferingMethod const bufferingMethod) :
	IOControlCode(GetActivationFactory<IOControlCode, IIOControlCodeFactory>().CreateIOControlCode(deviceType, function, accessMode, bufferingMethod))
{}

inline String CustomDevice::GetDeviceSelector(GUID const classGuid)
{
	return GetActivationFactory<CustomDevice, ICustomDeviceStatics>().GetDeviceSelector(classGuid);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Custom::CustomDevice> CustomDevice::FromIdAsync(StringReference const & deviceId, Windows::Devices::Custom::DeviceAccessMode const desiredAccess, Windows::Devices::Custom::DeviceSharingMode const sharingMode)
{
	return GetActivationFactory<CustomDevice, ICustomDeviceStatics>().FromIdAsync(deviceId, desiredAccess, sharingMode);
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Enumeration {

inline String DeviceInformation::GetAqsFilterFromDeviceClass(Windows::Devices::Enumeration::DeviceClass const deviceClass)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics2>().GetAqsFilterFromDeviceClass(deviceClass);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> DeviceInformation::CreateFromIdAsync(StringReference const & deviceId, Windows::Foundation::Collections::IIterable<String> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind const kind)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics2>().CreateFromIdAsync(deviceId, additionalProperties, kind);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> DeviceInformation::FindAllAsync(StringReference const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind const kind)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics2>().FindAllAsync(aqsFilter, additionalProperties, kind);
}

inline Windows::Devices::Enumeration::DeviceWatcher DeviceInformation::CreateWatcher(StringReference const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties, Windows::Devices::Enumeration::DeviceInformationKind const kind)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics2>().CreateWatcher(aqsFilter, additionalProperties, kind);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> DeviceInformation::CreateFromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateFromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformation> DeviceInformation::CreateFromIdAsync(StringReference const & deviceId, Windows::Foundation::Collections::IIterable<String> const & additionalProperties)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateFromIdAsync(deviceId, additionalProperties);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> DeviceInformation::FindAllAsync()
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().FindAllAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> DeviceInformation::FindAllAsync(Windows::Devices::Enumeration::DeviceClass const deviceClass)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().FindAllAsync(deviceClass);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> DeviceInformation::FindAllAsync(StringReference const & aqsFilter)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().FindAllAsync(aqsFilter);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::DeviceInformationCollection> DeviceInformation::FindAllAsync(StringReference const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().FindAllAsync(aqsFilter, additionalProperties);
}

inline Windows::Devices::Enumeration::DeviceWatcher DeviceInformation::CreateWatcher()
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateWatcher();
}

inline Windows::Devices::Enumeration::DeviceWatcher DeviceInformation::CreateWatcher(Windows::Devices::Enumeration::DeviceClass const deviceClass)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateWatcher(deviceClass);
}

inline Windows::Devices::Enumeration::DeviceWatcher DeviceInformation::CreateWatcher(StringReference const & aqsFilter)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateWatcher(aqsFilter);
}

inline Windows::Devices::Enumeration::DeviceWatcher DeviceInformation::CreateWatcher(StringReference const & aqsFilter, Windows::Foundation::Collections::IIterable<String> const & additionalProperties)
{
	return GetActivationFactory<DeviceInformation, IDeviceInformationStatics>().CreateWatcher(aqsFilter, additionalProperties);
}

inline DevicePicker::DevicePicker() :
	DevicePicker(ActivateInstance<DevicePicker>())
{}

inline bool DeviceInformationPairing::TryRegisterForAllInboundPairingRequests(Windows::Devices::Enumeration::DevicePairingKinds const pairingKindsSupported)
{
	return GetActivationFactory<DeviceInformationPairing, IDeviceInformationPairingStatics>().TryRegisterForAllInboundPairingRequests(pairingKindsSupported);
}

inline Windows::Devices::Enumeration::DeviceAccessInformation DeviceAccessInformation::CreateFromId(StringReference const & deviceId)
{
	return GetActivationFactory<DeviceAccessInformation, IDeviceAccessInformationStatics>().CreateFromId(deviceId);
}

inline Windows::Devices::Enumeration::DeviceAccessInformation DeviceAccessInformation::CreateFromDeviceClassId(GUID const deviceClassId)
{
	return GetActivationFactory<DeviceAccessInformation, IDeviceAccessInformationStatics>().CreateFromDeviceClassId(deviceClassId);
}

inline Windows::Devices::Enumeration::DeviceAccessInformation DeviceAccessInformation::CreateFromDeviceClass(Windows::Devices::Enumeration::DeviceClass const deviceClass)
{
	return GetActivationFactory<DeviceAccessInformation, IDeviceAccessInformationStatics>().CreateFromDeviceClass(deviceClass);
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Enumeration { namespace Pnp {

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObject> PnpObject::CreateFromIdAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, StringReference const & id, Windows::Foundation::Collections::IIterable<String> const & requestedProperties)
{
	return GetActivationFactory<PnpObject, IPnpObjectStatics>().CreateFromIdAsync(type, id, requestedProperties);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> PnpObject::FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties)
{
	return GetActivationFactory<PnpObject, IPnpObjectStatics>().FindAllAsync(type, requestedProperties);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Enumeration::Pnp::PnpObjectCollection> PnpObject::FindAllAsync(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, StringReference const & aqsFilter)
{
	return GetActivationFactory<PnpObject, IPnpObjectStatics>().FindAllAsync(type, requestedProperties, aqsFilter);
}

inline Windows::Devices::Enumeration::Pnp::PnpObjectWatcher PnpObject::CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties)
{
	return GetActivationFactory<PnpObject, IPnpObjectStatics>().CreateWatcher(type, requestedProperties);
}

inline Windows::Devices::Enumeration::Pnp::PnpObjectWatcher PnpObject::CreateWatcher(Windows::Devices::Enumeration::Pnp::PnpObjectType const type, Windows::Foundation::Collections::IIterable<String> const & requestedProperties, StringReference const & aqsFilter)
{
	return GetActivationFactory<PnpObject, IPnpObjectStatics>().CreateWatcher(type, requestedProperties, aqsFilter);
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Geolocation {

inline Geopoint::Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position) :
	Geopoint(GetActivationFactory<Geopoint, IGeopointFactory>().Create(position))
{}

inline Geopoint::Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) :
	Geopoint(GetActivationFactory<Geopoint, IGeopointFactory>().CreateWithAltitudeReferenceSystem(position, altitudeReferenceSystem))
{}

inline Geopoint::Geopoint(Windows::Devices::Geolocation::BasicGeoposition const & position, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) :
	Geopoint(GetActivationFactory<Geopoint, IGeopointFactory>().CreateWithAltitudeReferenceSystemAndSpatialReferenceId(position, altitudeReferenceSystem, spatialReferenceId))
{}

inline Geopath::Geopath(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions) :
	Geopath(GetActivationFactory<Geopath, IGeopathFactory>().Create(positions))
{}

inline Geopath::Geopath(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) :
	Geopath(GetActivationFactory<Geopath, IGeopathFactory>().CreateWithAltitudeReference(positions, altitudeReferenceSystem))
{}

inline Geopath::Geopath(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) :
	Geopath(GetActivationFactory<Geopath, IGeopathFactory>().CreateWithAltitudeReferenceAndSpatialReference(positions, altitudeReferenceSystem, spatialReferenceId))
{}

inline GeoboundingBox::GeoboundingBox(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner) :
	GeoboundingBox(GetActivationFactory<GeoboundingBox, IGeoboundingBoxFactory>().Create(northwestCorner, southeastCorner))
{}

inline GeoboundingBox::GeoboundingBox(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) :
	GeoboundingBox(GetActivationFactory<GeoboundingBox, IGeoboundingBoxFactory>().CreateWithAltitudeReference(northwestCorner, southeastCorner, altitudeReferenceSystem))
{}

inline GeoboundingBox::GeoboundingBox(Windows::Devices::Geolocation::BasicGeoposition const & northwestCorner, Windows::Devices::Geolocation::BasicGeoposition const & southeastCorner, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) :
	GeoboundingBox(GetActivationFactory<GeoboundingBox, IGeoboundingBoxFactory>().CreateWithAltitudeReferenceAndSpatialReference(northwestCorner, southeastCorner, altitudeReferenceSystem, spatialReferenceId))
{}

inline Windows::Devices::Geolocation::GeoboundingBox GeoboundingBox::TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions)
{
	return GetActivationFactory<GeoboundingBox, IGeoboundingBoxStatics>().TryCompute(positions);
}

inline Windows::Devices::Geolocation::GeoboundingBox GeoboundingBox::TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeRefSystem)
{
	return GetActivationFactory<GeoboundingBox, IGeoboundingBoxStatics>().TryCompute(positions, altitudeRefSystem);
}

inline Windows::Devices::Geolocation::GeoboundingBox GeoboundingBox::TryCompute(Windows::Foundation::Collections::IIterable<winrt::Windows::Devices::Geolocation::BasicGeoposition> const & positions, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeRefSystem, unsigned const spatialReferenceId)
{
	return GetActivationFactory<GeoboundingBox, IGeoboundingBoxStatics>().TryCompute(positions, altitudeRefSystem, spatialReferenceId);
}

inline Geolocator::Geolocator() :
	Geolocator(ActivateInstance<Geolocator>())
{}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Geolocation::GeolocationAccessStatus> Geolocator::RequestAccessAsync()
{
	return GetActivationFactory<Geolocator, IGeolocatorStatics>().RequestAccessAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geoposition>> Geolocator::GetGeopositionHistoryAsync(Windows::Foundation::DateTime const & startTime)
{
	return GetActivationFactory<Geolocator, IGeolocatorStatics>().GetGeopositionHistoryAsync(startTime);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Geolocation::Geoposition>> Geolocator::GetGeopositionHistoryAsync(Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration)
{
	return GetActivationFactory<Geolocator, IGeolocatorStatics>().GetGeopositionHistoryAsync(startTime, duration);
}

inline Geocircle::Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius) :
	Geocircle(GetActivationFactory<Geocircle, IGeocircleFactory>().Create(position, radius))
{}

inline Geocircle::Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem) :
	Geocircle(GetActivationFactory<Geocircle, IGeocircleFactory>().CreateWithAltitudeReferenceSystem(position, radius, altitudeReferenceSystem))
{}

inline Geocircle::Geocircle(Windows::Devices::Geolocation::BasicGeoposition const & position, double const radius, Windows::Devices::Geolocation::AltitudeReferenceSystem const altitudeReferenceSystem, unsigned const spatialReferenceId) :
	Geocircle(GetActivationFactory<Geocircle, IGeocircleFactory>().CreateWithAltitudeReferenceSystemAndSpatialReferenceId(position, radius, altitudeReferenceSystem, spatialReferenceId))
{}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Geolocation { namespace Geofencing {

inline Geofence::Geofence(StringReference const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape) :
	Geofence(GetActivationFactory<Geofence, IGeofenceFactory>().Create(id, geoshape))
{}

inline Geofence::Geofence(StringReference const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse) :
	Geofence(GetActivationFactory<Geofence, IGeofenceFactory>().CreateWithMonitorStates(id, geoshape, monitoredStates, singleUse))
{}

inline Geofence::Geofence(StringReference const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse, Windows::Foundation::TimeSpan const & dwellTime) :
	Geofence(GetActivationFactory<Geofence, IGeofenceFactory>().CreateWithMonitorStatesAndDwellTime(id, geoshape, monitoredStates, singleUse, dwellTime))
{}

inline Geofence::Geofence(StringReference const & id, Windows::Devices::Geolocation::IGeoshape const & geoshape, Windows::Devices::Geolocation::Geofencing::MonitoredGeofenceStates const monitoredStates, bool const singleUse, Windows::Foundation::TimeSpan const & dwellTime, Windows::Foundation::DateTime const & startTime, Windows::Foundation::TimeSpan const & duration) :
	Geofence(GetActivationFactory<Geofence, IGeofenceFactory>().CreateWithMonitorStatesDwellTimeStartTimeAndDuration(id, geoshape, monitoredStates, singleUse, dwellTime, startTime, duration))
{}

inline Windows::Devices::Geolocation::Geofencing::GeofenceMonitor GeofenceMonitor::Current()
{
	return GetActivationFactory<GeofenceMonitor, IGeofenceMonitorStatics>().Current();
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace HumanInterfaceDevice {

inline String HidDevice::GetDeviceSelector(unsigned short const usagePage, unsigned short const usageId)
{
	return GetActivationFactory<HidDevice, IHidDeviceStatics>().GetDeviceSelector(usagePage, usageId);
}

inline String HidDevice::GetDeviceSelector(unsigned short const usagePage, unsigned short const usageId, unsigned short const vendorId, unsigned short const productId)
{
	return GetActivationFactory<HidDevice, IHidDeviceStatics>().GetDeviceSelector(usagePage, usageId, vendorId, productId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::HumanInterfaceDevice::HidDevice> HidDevice::FromIdAsync(StringReference const & deviceId, Windows::Storage::FileAccessMode const accessMode)
{
	return GetActivationFactory<HidDevice, IHidDeviceStatics>().FromIdAsync(deviceId, accessMode);
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Input {

inline Windows::Devices::Input::PointerDevice PointerDevice::GetPointerDevice(unsigned const pointerId)
{
	return GetActivationFactory<PointerDevice, IPointerDeviceStatics>().GetPointerDevice(pointerId);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Devices::Input::PointerDevice> PointerDevice::GetPointerDevices()
{
	return GetActivationFactory<PointerDevice, IPointerDeviceStatics>().GetPointerDevices();
}

inline Windows::Devices::Input::MouseDevice MouseDevice::GetForCurrentView()
{
	return GetActivationFactory<MouseDevice, IMouseDeviceStatics>().GetForCurrentView();
}

inline MouseCapabilities::MouseCapabilities() :
	MouseCapabilities(ActivateInstance<MouseCapabilities>())
{}

inline KeyboardCapabilities::KeyboardCapabilities() :
	KeyboardCapabilities(ActivateInstance<KeyboardCapabilities>())
{}

inline TouchCapabilities::TouchCapabilities() :
	TouchCapabilities(ActivateInstance<TouchCapabilities>())
{}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Lights {

inline String Lamp::GetDeviceSelector()
{
	return GetActivationFactory<Lamp, ILampStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Lights::Lamp> Lamp::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<Lamp, ILampStatics>().FromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Lights::Lamp> Lamp::GetDefaultAsync()
{
	return GetActivationFactory<Lamp, ILampStatics>().GetDefaultAsync();
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Midi {

inline MidiNoteOffMessage::MidiNoteOffMessage(byte const channel, byte const note, byte const velocity) :
	MidiNoteOffMessage(GetActivationFactory<MidiNoteOffMessage, IMidiNoteOffMessageFactory>().CreateMidiNoteOffMessage(channel, note, velocity))
{}

inline MidiNoteOnMessage::MidiNoteOnMessage(byte const channel, byte const note, byte const velocity) :
	MidiNoteOnMessage(GetActivationFactory<MidiNoteOnMessage, IMidiNoteOnMessageFactory>().CreateMidiNoteOnMessage(channel, note, velocity))
{}

inline MidiPolyphonicKeyPressureMessage::MidiPolyphonicKeyPressureMessage(byte const channel, byte const note, byte const pressure) :
	MidiPolyphonicKeyPressureMessage(GetActivationFactory<MidiPolyphonicKeyPressureMessage, IMidiPolyphonicKeyPressureMessageFactory>().CreateMidiPolyphonicKeyPressureMessage(channel, note, pressure))
{}

inline MidiControlChangeMessage::MidiControlChangeMessage(byte const channel, byte const controller, byte const controlValue) :
	MidiControlChangeMessage(GetActivationFactory<MidiControlChangeMessage, IMidiControlChangeMessageFactory>().CreateMidiControlChangeMessage(channel, controller, controlValue))
{}

inline MidiProgramChangeMessage::MidiProgramChangeMessage(byte const channel, byte const program) :
	MidiProgramChangeMessage(GetActivationFactory<MidiProgramChangeMessage, IMidiProgramChangeMessageFactory>().CreateMidiProgramChangeMessage(channel, program))
{}

inline MidiChannelPressureMessage::MidiChannelPressureMessage(byte const channel, byte const pressure) :
	MidiChannelPressureMessage(GetActivationFactory<MidiChannelPressureMessage, IMidiChannelPressureMessageFactory>().CreateMidiChannelPressureMessage(channel, pressure))
{}

inline MidiPitchBendChangeMessage::MidiPitchBendChangeMessage(byte const channel, unsigned short const bend) :
	MidiPitchBendChangeMessage(GetActivationFactory<MidiPitchBendChangeMessage, IMidiPitchBendChangeMessageFactory>().CreateMidiPitchBendChangeMessage(channel, bend))
{}

inline MidiSystemExclusiveMessage::MidiSystemExclusiveMessage(Windows::Storage::Streams::IBuffer const & rawData) :
	MidiSystemExclusiveMessage(GetActivationFactory<MidiSystemExclusiveMessage, IMidiSystemExclusiveMessageFactory>().CreateMidiSystemExclusiveMessage(rawData))
{}

inline MidiTimeCodeMessage::MidiTimeCodeMessage(byte const frameType, byte const values) :
	MidiTimeCodeMessage(GetActivationFactory<MidiTimeCodeMessage, IMidiTimeCodeMessageFactory>().CreateMidiTimeCodeMessage(frameType, values))
{}

inline MidiSongPositionPointerMessage::MidiSongPositionPointerMessage(unsigned short const beats) :
	MidiSongPositionPointerMessage(GetActivationFactory<MidiSongPositionPointerMessage, IMidiSongPositionPointerMessageFactory>().CreateMidiSongPositionPointerMessage(beats))
{}

inline MidiSongSelectMessage::MidiSongSelectMessage(byte const song) :
	MidiSongSelectMessage(GetActivationFactory<MidiSongSelectMessage, IMidiSongSelectMessageFactory>().CreateMidiSongSelectMessage(song))
{}

inline MidiTuneRequestMessage::MidiTuneRequestMessage() :
	MidiTuneRequestMessage(ActivateInstance<MidiTuneRequestMessage>())
{}

inline MidiTimingClockMessage::MidiTimingClockMessage() :
	MidiTimingClockMessage(ActivateInstance<MidiTimingClockMessage>())
{}

inline MidiStartMessage::MidiStartMessage() :
	MidiStartMessage(ActivateInstance<MidiStartMessage>())
{}

inline MidiContinueMessage::MidiContinueMessage() :
	MidiContinueMessage(ActivateInstance<MidiContinueMessage>())
{}

inline MidiStopMessage::MidiStopMessage() :
	MidiStopMessage(ActivateInstance<MidiStopMessage>())
{}

inline MidiActiveSensingMessage::MidiActiveSensingMessage() :
	MidiActiveSensingMessage(ActivateInstance<MidiActiveSensingMessage>())
{}

inline MidiSystemResetMessage::MidiSystemResetMessage() :
	MidiSystemResetMessage(ActivateInstance<MidiSystemResetMessage>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Midi::MidiInPort> MidiInPort::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<MidiInPort, IMidiInPortStatics>().FromIdAsync(deviceId);
}

inline String MidiInPort::GetDeviceSelector()
{
	return GetActivationFactory<MidiInPort, IMidiInPortStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Midi::IMidiOutPort> MidiOutPort::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<MidiOutPort, IMidiOutPortStatics>().FromIdAsync(deviceId);
}

inline String MidiOutPort::GetDeviceSelector()
{
	return GetActivationFactory<MidiOutPort, IMidiOutPortStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Midi::MidiSynthesizer> MidiSynthesizer::CreateAsync()
{
	return GetActivationFactory<MidiSynthesizer, IMidiSynthesizerStatics>().CreateAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Midi::MidiSynthesizer> MidiSynthesizer::CreateAsync(Windows::Devices::Enumeration::DeviceInformation const & audioDevice)
{
	return GetActivationFactory<MidiSynthesizer, IMidiSynthesizerStatics>().CreateAsync(audioDevice);
}

inline bool MidiSynthesizer::IsSynthesizer(Windows::Devices::Enumeration::DeviceInformation const & midiDevice)
{
	return GetActivationFactory<MidiSynthesizer, IMidiSynthesizerStatics>().IsSynthesizer(midiDevice);
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Perception {

inline Windows::Devices::Perception::PerceptionColorFrameSourceWatcher PerceptionColorFrameSource::CreateWatcher()
{
	return GetActivationFactory<PerceptionColorFrameSource, IPerceptionColorFrameSourceStatics>().CreateWatcher();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionColorFrameSource>> PerceptionColorFrameSource::FindAllAsync()
{
	return GetActivationFactory<PerceptionColorFrameSource, IPerceptionColorFrameSourceStatics>().FindAllAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionColorFrameSource> PerceptionColorFrameSource::FromIdAsync(StringReference const & id)
{
	return GetActivationFactory<PerceptionColorFrameSource, IPerceptionColorFrameSourceStatics>().FromIdAsync(id);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Perception::PerceptionFrameSourceAccessStatus> PerceptionColorFrameSource::RequestAccessAsync()
{
	return GetActivationFactory<PerceptionColorFrameSource, IPerceptionColorFrameSourceStatics>().RequestAccessAsync();
}

inline Windows::Devices::Perception::PerceptionDepthFrameSourceWatcher PerceptionDepthFrameSource::CreateWatcher()
{
	return GetActivationFactory<PerceptionDepthFrameSource, IPerceptionDepthFrameSourceStatics>().CreateWatcher();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionDepthFrameSource>> PerceptionDepthFrameSource::FindAllAsync()
{
	return GetActivationFactory<PerceptionDepthFrameSource, IPerceptionDepthFrameSourceStatics>().FindAllAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionDepthFrameSource> PerceptionDepthFrameSource::FromIdAsync(StringReference const & id)
{
	return GetActivationFactory<PerceptionDepthFrameSource, IPerceptionDepthFrameSourceStatics>().FromIdAsync(id);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Perception::PerceptionFrameSourceAccessStatus> PerceptionDepthFrameSource::RequestAccessAsync()
{
	return GetActivationFactory<PerceptionDepthFrameSource, IPerceptionDepthFrameSourceStatics>().RequestAccessAsync();
}

inline Windows::Devices::Perception::PerceptionInfraredFrameSourceWatcher PerceptionInfraredFrameSource::CreateWatcher()
{
	return GetActivationFactory<PerceptionInfraredFrameSource, IPerceptionInfraredFrameSourceStatics>().CreateWatcher();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Perception::PerceptionInfraredFrameSource>> PerceptionInfraredFrameSource::FindAllAsync()
{
	return GetActivationFactory<PerceptionInfraredFrameSource, IPerceptionInfraredFrameSourceStatics>().FindAllAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Perception::PerceptionInfraredFrameSource> PerceptionInfraredFrameSource::FromIdAsync(StringReference const & id)
{
	return GetActivationFactory<PerceptionInfraredFrameSource, IPerceptionInfraredFrameSourceStatics>().FromIdAsync(id);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Perception::PerceptionFrameSourceAccessStatus> PerceptionInfraredFrameSource::RequestAccessAsync()
{
	return GetActivationFactory<PerceptionInfraredFrameSource, IPerceptionInfraredFrameSourceStatics>().RequestAccessAsync();
}

inline String KnownPerceptionFrameSourceProperties::Id()
{
	return GetActivationFactory<KnownPerceptionFrameSourceProperties, IKnownPerceptionFrameSourcePropertiesStatics>().Id();
}

inline String KnownPerceptionFrameSourceProperties::PhysicalDeviceIds()
{
	return GetActivationFactory<KnownPerceptionFrameSourceProperties, IKnownPerceptionFrameSourcePropertiesStatics>().PhysicalDeviceIds();
}

inline String KnownPerceptionFrameSourceProperties::FrameKind()
{
	return GetActivationFactory<KnownPerceptionFrameSourceProperties, IKnownPerceptionFrameSourcePropertiesStatics>().FrameKind();
}

inline String KnownPerceptionFrameSourceProperties::DeviceModelVersion()
{
	return GetActivationFactory<KnownPerceptionFrameSourceProperties, IKnownPerceptionFrameSourcePropertiesStatics>().DeviceModelVersion();
}

inline String KnownPerceptionFrameSourceProperties::EnclosureLocation()
{
	return GetActivationFactory<KnownPerceptionFrameSourceProperties, IKnownPerceptionFrameSourcePropertiesStatics>().EnclosureLocation();
}

inline String KnownPerceptionFrameSourceProperties::DeviceId()
{
	return GetActivationFactory<KnownPerceptionFrameSourceProperties, IKnownPerceptionFrameSourcePropertiesStatics2>().DeviceId();
}

inline String KnownPerceptionVideoFrameSourceProperties::VideoProfile()
{
	return GetActivationFactory<KnownPerceptionVideoFrameSourceProperties, IKnownPerceptionVideoFrameSourcePropertiesStatics>().VideoProfile();
}

inline String KnownPerceptionVideoFrameSourceProperties::SupportedVideoProfiles()
{
	return GetActivationFactory<KnownPerceptionVideoFrameSourceProperties, IKnownPerceptionVideoFrameSourcePropertiesStatics>().SupportedVideoProfiles();
}

inline String KnownPerceptionVideoFrameSourceProperties::AvailableVideoProfiles()
{
	return GetActivationFactory<KnownPerceptionVideoFrameSourceProperties, IKnownPerceptionVideoFrameSourcePropertiesStatics>().AvailableVideoProfiles();
}

inline String KnownPerceptionVideoFrameSourceProperties::IsMirrored()
{
	return GetActivationFactory<KnownPerceptionVideoFrameSourceProperties, IKnownPerceptionVideoFrameSourcePropertiesStatics>().IsMirrored();
}

inline String KnownPerceptionVideoFrameSourceProperties::CameraIntrinsics()
{
	return GetActivationFactory<KnownPerceptionVideoFrameSourceProperties, IKnownPerceptionVideoFrameSourcePropertiesStatics>().CameraIntrinsics();
}

inline String KnownPerceptionInfraredFrameSourceProperties::Exposure()
{
	return GetActivationFactory<KnownPerceptionInfraredFrameSourceProperties, IKnownPerceptionInfraredFrameSourcePropertiesStatics>().Exposure();
}

inline String KnownPerceptionInfraredFrameSourceProperties::AutoExposureEnabled()
{
	return GetActivationFactory<KnownPerceptionInfraredFrameSourceProperties, IKnownPerceptionInfraredFrameSourcePropertiesStatics>().AutoExposureEnabled();
}

inline String KnownPerceptionInfraredFrameSourceProperties::ExposureCompensation()
{
	return GetActivationFactory<KnownPerceptionInfraredFrameSourceProperties, IKnownPerceptionInfraredFrameSourcePropertiesStatics>().ExposureCompensation();
}

inline String KnownPerceptionInfraredFrameSourceProperties::ActiveIlluminationEnabled()
{
	return GetActivationFactory<KnownPerceptionInfraredFrameSourceProperties, IKnownPerceptionInfraredFrameSourcePropertiesStatics>().ActiveIlluminationEnabled();
}

inline String KnownPerceptionInfraredFrameSourceProperties::AmbientSubtractionEnabled()
{
	return GetActivationFactory<KnownPerceptionInfraredFrameSourceProperties, IKnownPerceptionInfraredFrameSourcePropertiesStatics>().AmbientSubtractionEnabled();
}

inline String KnownPerceptionInfraredFrameSourceProperties::StructureLightPatternEnabled()
{
	return GetActivationFactory<KnownPerceptionInfraredFrameSourceProperties, IKnownPerceptionInfraredFrameSourcePropertiesStatics>().StructureLightPatternEnabled();
}

inline String KnownPerceptionInfraredFrameSourceProperties::InterleavedIlluminationEnabled()
{
	return GetActivationFactory<KnownPerceptionInfraredFrameSourceProperties, IKnownPerceptionInfraredFrameSourcePropertiesStatics>().InterleavedIlluminationEnabled();
}

inline String KnownPerceptionDepthFrameSourceProperties::MinDepth()
{
	return GetActivationFactory<KnownPerceptionDepthFrameSourceProperties, IKnownPerceptionDepthFrameSourcePropertiesStatics>().MinDepth();
}

inline String KnownPerceptionDepthFrameSourceProperties::MaxDepth()
{
	return GetActivationFactory<KnownPerceptionDepthFrameSourceProperties, IKnownPerceptionDepthFrameSourcePropertiesStatics>().MaxDepth();
}

inline String KnownPerceptionColorFrameSourceProperties::Exposure()
{
	return GetActivationFactory<KnownPerceptionColorFrameSourceProperties, IKnownPerceptionColorFrameSourcePropertiesStatics>().Exposure();
}

inline String KnownPerceptionColorFrameSourceProperties::AutoExposureEnabled()
{
	return GetActivationFactory<KnownPerceptionColorFrameSourceProperties, IKnownPerceptionColorFrameSourcePropertiesStatics>().AutoExposureEnabled();
}

inline String KnownPerceptionColorFrameSourceProperties::ExposureCompensation()
{
	return GetActivationFactory<KnownPerceptionColorFrameSourceProperties, IKnownPerceptionColorFrameSourcePropertiesStatics>().ExposureCompensation();
}

inline String KnownPerceptionVideoProfileProperties::BitmapPixelFormat()
{
	return GetActivationFactory<KnownPerceptionVideoProfileProperties, IKnownPerceptionVideoProfilePropertiesStatics>().BitmapPixelFormat();
}

inline String KnownPerceptionVideoProfileProperties::BitmapAlphaMode()
{
	return GetActivationFactory<KnownPerceptionVideoProfileProperties, IKnownPerceptionVideoProfilePropertiesStatics>().BitmapAlphaMode();
}

inline String KnownPerceptionVideoProfileProperties::Width()
{
	return GetActivationFactory<KnownPerceptionVideoProfileProperties, IKnownPerceptionVideoProfilePropertiesStatics>().Width();
}

inline String KnownPerceptionVideoProfileProperties::Height()
{
	return GetActivationFactory<KnownPerceptionVideoProfileProperties, IKnownPerceptionVideoProfilePropertiesStatics>().Height();
}

inline String KnownPerceptionVideoProfileProperties::FrameDuration()
{
	return GetActivationFactory<KnownPerceptionVideoProfileProperties, IKnownPerceptionVideoProfilePropertiesStatics>().FrameDuration();
}

inline String KnownCameraIntrinsicsProperties::FocalLength()
{
	return GetActivationFactory<KnownCameraIntrinsicsProperties, IKnownCameraIntrinsicsPropertiesStatics>().FocalLength();
}

inline String KnownCameraIntrinsicsProperties::PrincipalPoint()
{
	return GetActivationFactory<KnownCameraIntrinsicsProperties, IKnownCameraIntrinsicsPropertiesStatics>().PrincipalPoint();
}

inline String KnownCameraIntrinsicsProperties::RadialDistortion()
{
	return GetActivationFactory<KnownCameraIntrinsicsProperties, IKnownCameraIntrinsicsPropertiesStatics>().RadialDistortion();
}

inline String KnownCameraIntrinsicsProperties::TangentialDistortion()
{
	return GetActivationFactory<KnownCameraIntrinsicsProperties, IKnownCameraIntrinsicsPropertiesStatics>().TangentialDistortion();
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Perception { namespace Provider {

inline PerceptionFrameProviderInfo::PerceptionFrameProviderInfo() :
	PerceptionFrameProviderInfo(ActivateInstance<PerceptionFrameProviderInfo>())
{}

inline PerceptionFaceAuthenticationGroup::PerceptionFaceAuthenticationGroup(Windows::Foundation::Collections::IIterable<String> const & ids, Windows::Devices::Perception::Provider::IPerceptionStartFaceAuthenticationHandler const & startHandler, Windows::Devices::Perception::Provider::IPerceptionStopFaceAuthenticationHandler const & stopHandler) :
	PerceptionFaceAuthenticationGroup(GetActivationFactory<PerceptionFaceAuthenticationGroup, IPerceptionFaceAuthenticationGroupFactory>().Create(ids, startHandler, stopHandler))
{}

template <typename F> PerceptionFaceAuthenticationGroup::PerceptionFaceAuthenticationGroup(Windows::Foundation::Collections::IIterable<String> const & ids, F startHandler, F stopHandler) :
	PerceptionFaceAuthenticationGroup(GetActivationFactory<PerceptionFaceAuthenticationGroup, IPerceptionFaceAuthenticationGroupFactory>().Create(ids, Windows::Devices::Perception::Provider::PerceptionStartFaceAuthenticationHandler(startHandler), Windows::Devices::Perception::Provider::PerceptionStopFaceAuthenticationHandler(stopHandler)))
{}

inline PerceptionControlGroup::PerceptionControlGroup(Windows::Foundation::Collections::IIterable<String> const & ids) :
	PerceptionControlGroup(GetActivationFactory<PerceptionControlGroup, IPerceptionControlGroupFactory>().Create(ids))
{}

inline PerceptionCorrelationGroup::PerceptionCorrelationGroup(Windows::Foundation::Collections::IIterable<Windows::Devices::Perception::Provider::PerceptionCorrelation> const & relativeLocations) :
	PerceptionCorrelationGroup(GetActivationFactory<PerceptionCorrelationGroup, IPerceptionCorrelationGroupFactory>().Create(relativeLocations))
{}

inline PerceptionCorrelation::PerceptionCorrelation(StringReference const & targetId, Windows::Foundation::Numerics::Vector3 const & position, Windows::Foundation::Numerics::Quaternion const & orientation) :
	PerceptionCorrelation(GetActivationFactory<PerceptionCorrelation, IPerceptionCorrelationFactory>().Create(targetId, position, orientation))
{}

inline PerceptionVideoFrameAllocator::PerceptionVideoFrameAllocator(unsigned const maxOutstandingFrameCountForWrite, Windows::Graphics::Imaging::BitmapPixelFormat const format, Windows::Foundation::Size const & resolution, Windows::Graphics::Imaging::BitmapAlphaMode const alpha) :
	PerceptionVideoFrameAllocator(GetActivationFactory<PerceptionVideoFrameAllocator, IPerceptionVideoFrameAllocatorFactory>().Create(maxOutstandingFrameCountForWrite, format, resolution, alpha))
{}

inline void PerceptionFrameProviderManagerService::RegisterFrameProviderInfo(Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager const & manager, Windows::Devices::Perception::Provider::PerceptionFrameProviderInfo const & frameProviderInfo)
{
	GetActivationFactory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>().RegisterFrameProviderInfo(manager, frameProviderInfo);
}

inline void PerceptionFrameProviderManagerService::UnregisterFrameProviderInfo(Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager const & manager, Windows::Devices::Perception::Provider::PerceptionFrameProviderInfo const & frameProviderInfo)
{
	GetActivationFactory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>().UnregisterFrameProviderInfo(manager, frameProviderInfo);
}

inline void PerceptionFrameProviderManagerService::RegisterFaceAuthenticationGroup(Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager const & manager, Windows::Devices::Perception::Provider::PerceptionFaceAuthenticationGroup const & faceAuthenticationGroup)
{
	GetActivationFactory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>().RegisterFaceAuthenticationGroup(manager, faceAuthenticationGroup);
}

inline void PerceptionFrameProviderManagerService::UnregisterFaceAuthenticationGroup(Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager const & manager, Windows::Devices::Perception::Provider::PerceptionFaceAuthenticationGroup const & faceAuthenticationGroup)
{
	GetActivationFactory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>().UnregisterFaceAuthenticationGroup(manager, faceAuthenticationGroup);
}

inline void PerceptionFrameProviderManagerService::RegisterControlGroup(Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager const & manager, Windows::Devices::Perception::Provider::PerceptionControlGroup const & controlGroup)
{
	GetActivationFactory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>().RegisterControlGroup(manager, controlGroup);
}

inline void PerceptionFrameProviderManagerService::UnregisterControlGroup(Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager const & manager, Windows::Devices::Perception::Provider::PerceptionControlGroup const & controlGroup)
{
	GetActivationFactory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>().UnregisterControlGroup(manager, controlGroup);
}

inline void PerceptionFrameProviderManagerService::RegisterCorrelationGroup(Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager const & manager, Windows::Devices::Perception::Provider::PerceptionCorrelationGroup const & correlationGroup)
{
	GetActivationFactory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>().RegisterCorrelationGroup(manager, correlationGroup);
}

inline void PerceptionFrameProviderManagerService::UnregisterCorrelationGroup(Windows::Devices::Perception::Provider::IPerceptionFrameProviderManager const & manager, Windows::Devices::Perception::Provider::PerceptionCorrelationGroup const & correlationGroup)
{
	GetActivationFactory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>().UnregisterCorrelationGroup(manager, correlationGroup);
}

inline void PerceptionFrameProviderManagerService::UpdateAvailabilityForProvider(Windows::Devices::Perception::Provider::IPerceptionFrameProvider const & provider, bool const available)
{
	GetActivationFactory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>().UpdateAvailabilityForProvider(provider, available);
}

inline void PerceptionFrameProviderManagerService::PublishFrameForProvider(Windows::Devices::Perception::Provider::IPerceptionFrameProvider const & provider, Windows::Devices::Perception::Provider::PerceptionFrame const & frame)
{
	GetActivationFactory<PerceptionFrameProviderManagerService, IPerceptionFrameProviderManagerServiceStatics>().PublishFrameForProvider(provider, frame);
}

inline String KnownPerceptionFrameKind::Color()
{
	return GetActivationFactory<KnownPerceptionFrameKind, IKnownPerceptionFrameKindStatics>().Color();
}

inline String KnownPerceptionFrameKind::Depth()
{
	return GetActivationFactory<KnownPerceptionFrameKind, IKnownPerceptionFrameKindStatics>().Depth();
}

inline String KnownPerceptionFrameKind::Infrared()
{
	return GetActivationFactory<KnownPerceptionFrameKind, IKnownPerceptionFrameKindStatics>().Infrared();
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace PointOfService {

inline unsigned BarcodeSymbologies::Unknown()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Unknown();
}

inline unsigned BarcodeSymbologies::Ean8()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean8();
}

inline unsigned BarcodeSymbologies::Ean8Add2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean8Add2();
}

inline unsigned BarcodeSymbologies::Ean8Add5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean8Add5();
}

inline unsigned BarcodeSymbologies::Eanv()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Eanv();
}

inline unsigned BarcodeSymbologies::EanvAdd2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().EanvAdd2();
}

inline unsigned BarcodeSymbologies::EanvAdd5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().EanvAdd5();
}

inline unsigned BarcodeSymbologies::Ean13()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean13();
}

inline unsigned BarcodeSymbologies::Ean13Add2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean13Add2();
}

inline unsigned BarcodeSymbologies::Ean13Add5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean13Add5();
}

inline unsigned BarcodeSymbologies::Isbn()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Isbn();
}

inline unsigned BarcodeSymbologies::IsbnAdd5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().IsbnAdd5();
}

inline unsigned BarcodeSymbologies::Ismn()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ismn();
}

inline unsigned BarcodeSymbologies::IsmnAdd2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().IsmnAdd2();
}

inline unsigned BarcodeSymbologies::IsmnAdd5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().IsmnAdd5();
}

inline unsigned BarcodeSymbologies::Issn()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Issn();
}

inline unsigned BarcodeSymbologies::IssnAdd2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().IssnAdd2();
}

inline unsigned BarcodeSymbologies::IssnAdd5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().IssnAdd5();
}

inline unsigned BarcodeSymbologies::Ean99()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean99();
}

inline unsigned BarcodeSymbologies::Ean99Add2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean99Add2();
}

inline unsigned BarcodeSymbologies::Ean99Add5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ean99Add5();
}

inline unsigned BarcodeSymbologies::Upca()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Upca();
}

inline unsigned BarcodeSymbologies::UpcaAdd2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UpcaAdd2();
}

inline unsigned BarcodeSymbologies::UpcaAdd5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UpcaAdd5();
}

inline unsigned BarcodeSymbologies::Upce()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Upce();
}

inline unsigned BarcodeSymbologies::UpceAdd2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UpceAdd2();
}

inline unsigned BarcodeSymbologies::UpceAdd5()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UpceAdd5();
}

inline unsigned BarcodeSymbologies::UpcCoupon()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UpcCoupon();
}

inline unsigned BarcodeSymbologies::TfStd()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().TfStd();
}

inline unsigned BarcodeSymbologies::TfDis()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().TfDis();
}

inline unsigned BarcodeSymbologies::TfInt()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().TfInt();
}

inline unsigned BarcodeSymbologies::TfInd()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().TfInd();
}

inline unsigned BarcodeSymbologies::TfMat()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().TfMat();
}

inline unsigned BarcodeSymbologies::TfIata()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().TfIata();
}

inline unsigned BarcodeSymbologies::Gs1DatabarType1()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Gs1DatabarType1();
}

inline unsigned BarcodeSymbologies::Gs1DatabarType2()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Gs1DatabarType2();
}

inline unsigned BarcodeSymbologies::Gs1DatabarType3()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Gs1DatabarType3();
}

inline unsigned BarcodeSymbologies::Code39()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code39();
}

inline unsigned BarcodeSymbologies::Code39Ex()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code39Ex();
}

inline unsigned BarcodeSymbologies::Trioptic39()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Trioptic39();
}

inline unsigned BarcodeSymbologies::Code32()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code32();
}

inline unsigned BarcodeSymbologies::Pzn()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Pzn();
}

inline unsigned BarcodeSymbologies::Code93()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code93();
}

inline unsigned BarcodeSymbologies::Code93Ex()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code93Ex();
}

inline unsigned BarcodeSymbologies::Code128()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code128();
}

inline unsigned BarcodeSymbologies::Gs1128()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Gs1128();
}

inline unsigned BarcodeSymbologies::Gs1128Coupon()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Gs1128Coupon();
}

inline unsigned BarcodeSymbologies::UccEan128()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UccEan128();
}

inline unsigned BarcodeSymbologies::Sisac()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Sisac();
}

inline unsigned BarcodeSymbologies::Isbt()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Isbt();
}

inline unsigned BarcodeSymbologies::Codabar()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Codabar();
}

inline unsigned BarcodeSymbologies::Code11()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code11();
}

inline unsigned BarcodeSymbologies::Msi()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Msi();
}

inline unsigned BarcodeSymbologies::Plessey()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Plessey();
}

inline unsigned BarcodeSymbologies::Telepen()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Telepen();
}

inline unsigned BarcodeSymbologies::Code16k()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code16k();
}

inline unsigned BarcodeSymbologies::CodablockA()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().CodablockA();
}

inline unsigned BarcodeSymbologies::CodablockF()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().CodablockF();
}

inline unsigned BarcodeSymbologies::Codablock128()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Codablock128();
}

inline unsigned BarcodeSymbologies::Code49()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Code49();
}

inline unsigned BarcodeSymbologies::Aztec()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Aztec();
}

inline unsigned BarcodeSymbologies::DataCode()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().DataCode();
}

inline unsigned BarcodeSymbologies::DataMatrix()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().DataMatrix();
}

inline unsigned BarcodeSymbologies::HanXin()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().HanXin();
}

inline unsigned BarcodeSymbologies::Maxicode()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Maxicode();
}

inline unsigned BarcodeSymbologies::MicroPdf417()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().MicroPdf417();
}

inline unsigned BarcodeSymbologies::MicroQr()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().MicroQr();
}

inline unsigned BarcodeSymbologies::Pdf417()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Pdf417();
}

inline unsigned BarcodeSymbologies::Qr()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Qr();
}

inline unsigned BarcodeSymbologies::MsTag()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().MsTag();
}

inline unsigned BarcodeSymbologies::Ccab()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ccab();
}

inline unsigned BarcodeSymbologies::Ccc()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Ccc();
}

inline unsigned BarcodeSymbologies::Tlc39()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Tlc39();
}

inline unsigned BarcodeSymbologies::AusPost()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().AusPost();
}

inline unsigned BarcodeSymbologies::CanPost()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().CanPost();
}

inline unsigned BarcodeSymbologies::ChinaPost()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().ChinaPost();
}

inline unsigned BarcodeSymbologies::DutchKix()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().DutchKix();
}

inline unsigned BarcodeSymbologies::InfoMail()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().InfoMail();
}

inline unsigned BarcodeSymbologies::ItalianPost25()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().ItalianPost25();
}

inline unsigned BarcodeSymbologies::ItalianPost39()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().ItalianPost39();
}

inline unsigned BarcodeSymbologies::JapanPost()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().JapanPost();
}

inline unsigned BarcodeSymbologies::KoreanPost()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().KoreanPost();
}

inline unsigned BarcodeSymbologies::SwedenPost()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().SwedenPost();
}

inline unsigned BarcodeSymbologies::UkPost()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UkPost();
}

inline unsigned BarcodeSymbologies::UsIntelligent()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UsIntelligent();
}

inline unsigned BarcodeSymbologies::UsIntelligentPkg()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UsIntelligentPkg();
}

inline unsigned BarcodeSymbologies::UsPlanet()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UsPlanet();
}

inline unsigned BarcodeSymbologies::UsPostNet()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().UsPostNet();
}

inline unsigned BarcodeSymbologies::Us4StateFics()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Us4StateFics();
}

inline unsigned BarcodeSymbologies::OcrA()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().OcrA();
}

inline unsigned BarcodeSymbologies::OcrB()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().OcrB();
}

inline unsigned BarcodeSymbologies::Micr()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().Micr();
}

inline unsigned BarcodeSymbologies::ExtendedBase()
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().ExtendedBase();
}

inline String BarcodeSymbologies::GetName(unsigned const scanDataType)
{
	return GetActivationFactory<BarcodeSymbologies, IBarcodeSymbologiesStatics>().GetName(scanDataType);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> BarcodeScanner::GetDefaultAsync()
{
	return GetActivationFactory<BarcodeScanner, IBarcodeScannerStatics>().GetDefaultAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::BarcodeScanner> BarcodeScanner::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<BarcodeScanner, IBarcodeScannerStatics>().FromIdAsync(deviceId);
}

inline String BarcodeScanner::GetDeviceSelector()
{
	return GetActivationFactory<BarcodeScanner, IBarcodeScannerStatics>().GetDeviceSelector();
}

inline unsigned MagneticStripeReaderEncryptionAlgorithms::None()
{
	return GetActivationFactory<MagneticStripeReaderEncryptionAlgorithms, IMagneticStripeReaderEncryptionAlgorithmsStatics>().None();
}

inline unsigned MagneticStripeReaderEncryptionAlgorithms::TripleDesDukpt()
{
	return GetActivationFactory<MagneticStripeReaderEncryptionAlgorithms, IMagneticStripeReaderEncryptionAlgorithmsStatics>().TripleDesDukpt();
}

inline unsigned MagneticStripeReaderEncryptionAlgorithms::ExtendedBase()
{
	return GetActivationFactory<MagneticStripeReaderEncryptionAlgorithms, IMagneticStripeReaderEncryptionAlgorithmsStatics>().ExtendedBase();
}

inline unsigned MagneticStripeReaderCardTypes::Unknown()
{
	return GetActivationFactory<MagneticStripeReaderCardTypes, IMagneticStripeReaderCardTypesStatics>().Unknown();
}

inline unsigned MagneticStripeReaderCardTypes::Bank()
{
	return GetActivationFactory<MagneticStripeReaderCardTypes, IMagneticStripeReaderCardTypesStatics>().Bank();
}

inline unsigned MagneticStripeReaderCardTypes::Aamva()
{
	return GetActivationFactory<MagneticStripeReaderCardTypes, IMagneticStripeReaderCardTypesStatics>().Aamva();
}

inline unsigned MagneticStripeReaderCardTypes::ExtendedBase()
{
	return GetActivationFactory<MagneticStripeReaderCardTypes, IMagneticStripeReaderCardTypesStatics>().ExtendedBase();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> MagneticStripeReader::GetDefaultAsync()
{
	return GetActivationFactory<MagneticStripeReader, IMagneticStripeReaderStatics>().GetDefaultAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::MagneticStripeReader> MagneticStripeReader::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<MagneticStripeReader, IMagneticStripeReaderStatics>().FromIdAsync(deviceId);
}

inline String MagneticStripeReader::GetDeviceSelector()
{
	return GetActivationFactory<MagneticStripeReader, IMagneticStripeReaderStatics>().GetDeviceSelector();
}

inline unsigned PosPrinterCharacterSetIds::Utf16LE()
{
	return GetActivationFactory<PosPrinterCharacterSetIds, IPosPrinterCharacterSetIdsStatics>().Utf16LE();
}

inline unsigned PosPrinterCharacterSetIds::Ascii()
{
	return GetActivationFactory<PosPrinterCharacterSetIds, IPosPrinterCharacterSetIdsStatics>().Ascii();
}

inline unsigned PosPrinterCharacterSetIds::Ansi()
{
	return GetActivationFactory<PosPrinterCharacterSetIds, IPosPrinterCharacterSetIdsStatics>().Ansi();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::PosPrinter> PosPrinter::GetDefaultAsync()
{
	return GetActivationFactory<PosPrinter, IPosPrinterStatics>().GetDefaultAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::PosPrinter> PosPrinter::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<PosPrinter, IPosPrinterStatics>().FromIdAsync(deviceId);
}

inline String PosPrinter::GetDeviceSelector()
{
	return GetActivationFactory<PosPrinter, IPosPrinterStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::CashDrawer> CashDrawer::GetDefaultAsync()
{
	return GetActivationFactory<CashDrawer, ICashDrawerStatics>().GetDefaultAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::PointOfService::CashDrawer> CashDrawer::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<CashDrawer, ICashDrawerStatics>().FromIdAsync(deviceId);
}

inline String CashDrawer::GetDeviceSelector()
{
	return GetActivationFactory<CashDrawer, ICashDrawerStatics>().GetDeviceSelector();
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Portable {

inline Windows::Storage::StorageFolder StorageDevice::FromId(StringReference const & deviceId)
{
	return GetActivationFactory<StorageDevice, IStorageDeviceStatics>().FromId(deviceId);
}

inline String StorageDevice::GetDeviceSelector()
{
	return GetActivationFactory<StorageDevice, IStorageDeviceStatics>().GetDeviceSelector();
}

inline String ServiceDevice::GetDeviceSelector(Windows::Devices::Portable::ServiceDeviceType const serviceType)
{
	return GetActivationFactory<ServiceDevice, IServiceDeviceStatics>().GetDeviceSelector(serviceType);
}

inline String ServiceDevice::GetDeviceSelectorFromServiceId(GUID const serviceId)
{
	return GetActivationFactory<ServiceDevice, IServiceDeviceStatics>().GetDeviceSelectorFromServiceId(serviceId);
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Power {

inline Windows::Devices::Power::Battery Battery::AggregateBattery()
{
	return GetActivationFactory<Battery, IBatteryStatics>().AggregateBattery();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Power::Battery> Battery::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<Battery, IBatteryStatics>().FromIdAsync(deviceId);
}

inline String Battery::GetDeviceSelector()
{
	return GetActivationFactory<Battery, IBatteryStatics>().GetDeviceSelector();
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Printers {

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Printers::Print3DDevice> Print3DDevice::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<Print3DDevice, IPrint3DDeviceStatics>().FromIdAsync(deviceId);
}

inline String Print3DDevice::GetDeviceSelector()
{
	return GetActivationFactory<Print3DDevice, IPrint3DDeviceStatics>().GetDeviceSelector();
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Printers { namespace Extensions {

inline IInspectable PrintExtensionContext::FromDeviceId(StringReference const & deviceId)
{
	return GetActivationFactory<PrintExtensionContext, IPrintExtensionContextStatic>().FromDeviceId(deviceId);
}

}}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Radios {

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Radios::Radio>> Radio::GetRadiosAsync()
{
	return GetActivationFactory<Radio, IRadioStatics>().GetRadiosAsync();
}

inline String Radio::GetDeviceSelector()
{
	return GetActivationFactory<Radio, IRadioStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Radios::Radio> Radio::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<Radio, IRadioStatics>().FromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::Radios::RadioAccessStatus> Radio::RequestAccessAsync()
{
	return GetActivationFactory<Radio, IRadioStatics>().RequestAccessAsync();
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Scanners {

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Scanners::ImageScanner> ImageScanner::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<ImageScanner, IImageScannerStatics>().FromIdAsync(deviceId);
}

inline String ImageScanner::GetDeviceSelector()
{
	return GetActivationFactory<ImageScanner, IImageScannerStatics>().GetDeviceSelector();
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sensors {

inline Windows::Devices::Sensors::Accelerometer Accelerometer::GetDefault()
{
	return GetActivationFactory<Accelerometer, IAccelerometerStatics>().GetDefault();
}

inline Windows::Devices::Sensors::Inclinometer Inclinometer::GetDefault()
{
	return GetActivationFactory<Inclinometer, IInclinometerStatics>().GetDefault();
}

inline Windows::Devices::Sensors::Inclinometer Inclinometer::GetDefaultForRelativeReadings()
{
	return GetActivationFactory<Inclinometer, IInclinometerStatics2>().GetDefaultForRelativeReadings();
}

inline Windows::Devices::Sensors::Gyrometer Gyrometer::GetDefault()
{
	return GetActivationFactory<Gyrometer, IGyrometerStatics>().GetDefault();
}

inline Windows::Devices::Sensors::Compass Compass::GetDefault()
{
	return GetActivationFactory<Compass, ICompassStatics>().GetDefault();
}

inline Windows::Devices::Sensors::LightSensor LightSensor::GetDefault()
{
	return GetActivationFactory<LightSensor, ILightSensorStatics>().GetDefault();
}

inline Windows::Devices::Sensors::OrientationSensor OrientationSensor::GetDefault()
{
	return GetActivationFactory<OrientationSensor, IOrientationSensorStatics>().GetDefault();
}

inline Windows::Devices::Sensors::OrientationSensor OrientationSensor::GetDefaultForRelativeReadings()
{
	return GetActivationFactory<OrientationSensor, IOrientationSensorStatics2>().GetDefaultForRelativeReadings();
}

inline Windows::Devices::Sensors::SimpleOrientationSensor SimpleOrientationSensor::GetDefault()
{
	return GetActivationFactory<SimpleOrientationSensor, ISimpleOrientationSensorStatics>().GetDefault();
}

inline Windows::Devices::Sensors::Magnetometer Magnetometer::GetDefault()
{
	return GetActivationFactory<Magnetometer, IMagnetometerStatics>().GetDefault();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensor> ActivitySensor::GetDefaultAsync()
{
	return GetActivationFactory<ActivitySensor, IActivitySensorStatics>().GetDefaultAsync();
}

inline String ActivitySensor::GetDeviceSelector()
{
	return GetActivationFactory<ActivitySensor, IActivitySensorStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::ActivitySensor> ActivitySensor::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<ActivitySensor, IActivitySensorStatics>().FromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReading>> ActivitySensor::GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime)
{
	return GetActivationFactory<ActivitySensor, IActivitySensorStatics>().GetSystemHistoryAsync(fromTime);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ActivitySensorReading>> ActivitySensor::GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime, Windows::Foundation::TimeSpan const & duration)
{
	return GetActivationFactory<ActivitySensor, IActivitySensorStatics>().GetSystemHistoryAsync(fromTime, duration);
}

inline Windows::Devices::Sensors::Barometer Barometer::GetDefault()
{
	return GetActivationFactory<Barometer, IBarometerStatics>().GetDefault();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::Pedometer> Pedometer::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<Pedometer, IPedometerStatics>().FromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sensors::Pedometer> Pedometer::GetDefaultAsync()
{
	return GetActivationFactory<Pedometer, IPedometerStatics>().GetDefaultAsync();
}

inline String Pedometer::GetDeviceSelector()
{
	return GetActivationFactory<Pedometer, IPedometerStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading>> Pedometer::GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime)
{
	return GetActivationFactory<Pedometer, IPedometerStatics>().GetSystemHistoryAsync(fromTime);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading>> Pedometer::GetSystemHistoryAsync(Windows::Foundation::DateTime const & fromTime, Windows::Foundation::TimeSpan const & duration)
{
	return GetActivationFactory<Pedometer, IPedometerStatics>().GetSystemHistoryAsync(fromTime, duration);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::PedometerReading> Pedometer::GetReadingsFromTriggerDetails(Windows::Devices::Sensors::SensorDataThresholdTriggerDetails const & triggerDetails)
{
	return GetActivationFactory<Pedometer, IPedometerStatics2>().GetReadingsFromTriggerDetails(triggerDetails);
}

inline PedometerDataThreshold::PedometerDataThreshold(Windows::Devices::Sensors::Pedometer const & sensor, int const stepGoal) :
	PedometerDataThreshold(GetActivationFactory<PedometerDataThreshold, IPedometerDataThresholdFactory>().Create(sensor, stepGoal))
{}

inline Windows::Foundation::Collections::IVectorView<Windows::Devices::Sensors::ProximitySensorReading> ProximitySensor::GetReadingsFromTriggerDetails(Windows::Devices::Sensors::SensorDataThresholdTriggerDetails const & triggerDetails)
{
	return GetActivationFactory<ProximitySensor, IProximitySensorStatics2>().GetReadingsFromTriggerDetails(triggerDetails);
}

inline String ProximitySensor::GetDeviceSelector()
{
	return GetActivationFactory<ProximitySensor, IProximitySensorStatics>().GetDeviceSelector();
}

inline Windows::Devices::Sensors::ProximitySensor ProximitySensor::FromId(StringReference const & sensorId)
{
	return GetActivationFactory<ProximitySensor, IProximitySensorStatics>().FromId(sensorId);
}

inline ProximitySensorDataThreshold::ProximitySensorDataThreshold(Windows::Devices::Sensors::ProximitySensor const & sensor) :
	ProximitySensorDataThreshold(GetActivationFactory<ProximitySensorDataThreshold, IProximitySensorDataThresholdFactory>().Create(sensor))
{}

inline Windows::Devices::Sensors::Altimeter Altimeter::GetDefault()
{
	return GetActivationFactory<Altimeter, IAltimeterStatics>().GetDefault();
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace SerialCommunication {

inline String SerialDevice::GetDeviceSelector()
{
	return GetActivationFactory<SerialDevice, ISerialDeviceStatics>().GetDeviceSelector();
}

inline String SerialDevice::GetDeviceSelector(StringReference const & portName)
{
	return GetActivationFactory<SerialDevice, ISerialDeviceStatics>().GetDeviceSelector(portName);
}

inline String SerialDevice::GetDeviceSelectorFromUsbVidPid(unsigned short const vendorId, unsigned short const productId)
{
	return GetActivationFactory<SerialDevice, ISerialDeviceStatics>().GetDeviceSelectorFromUsbVidPid(vendorId, productId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::SerialCommunication::SerialDevice> SerialDevice::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<SerialDevice, ISerialDeviceStatics>().FromIdAsync(deviceId);
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace SmartCards {

inline String SmartCardReader::GetDeviceSelector()
{
	return GetActivationFactory<SmartCardReader, ISmartCardReaderStatics>().GetDeviceSelector();
}

inline String SmartCardReader::GetDeviceSelector(Windows::Devices::SmartCards::SmartCardReaderKind const kind)
{
	return GetActivationFactory<SmartCardReader, ISmartCardReaderStatics>().GetDeviceSelector(kind);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardReader> SmartCardReader::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<SmartCardReader, ISmartCardReaderStatics>().FromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> SmartCardProvisioning::FromSmartCardAsync(Windows::Devices::SmartCards::SmartCard const & card)
{
	return GetActivationFactory<SmartCardProvisioning, ISmartCardProvisioningStatics>().FromSmartCardAsync(card);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> SmartCardProvisioning::RequestVirtualSmartCardCreationAsync(StringReference const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy)
{
	return GetActivationFactory<SmartCardProvisioning, ISmartCardProvisioningStatics>().RequestVirtualSmartCardCreationAsync(friendlyName, administrativeKey, pinPolicy);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> SmartCardProvisioning::RequestVirtualSmartCardCreationAsync(StringReference const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy, GUID const cardId)
{
	return GetActivationFactory<SmartCardProvisioning, ISmartCardProvisioningStatics>().RequestVirtualSmartCardCreationAsync(friendlyName, administrativeKey, pinPolicy, cardId);
}

inline Windows::Foundation::IAsyncOperation<bool> SmartCardProvisioning::RequestVirtualSmartCardDeletionAsync(Windows::Devices::SmartCards::SmartCard const & card)
{
	return GetActivationFactory<SmartCardProvisioning, ISmartCardProvisioningStatics>().RequestVirtualSmartCardDeletionAsync(card);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> SmartCardProvisioning::RequestAttestedVirtualSmartCardCreationAsync(StringReference const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy)
{
	return GetActivationFactory<SmartCardProvisioning, ISmartCardProvisioningStatics2>().RequestAttestedVirtualSmartCardCreationAsync(friendlyName, administrativeKey, pinPolicy);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::SmartCards::SmartCardProvisioning> SmartCardProvisioning::RequestAttestedVirtualSmartCardCreationAsync(StringReference const & friendlyName, Windows::Storage::Streams::IBuffer const & administrativeKey, Windows::Devices::SmartCards::SmartCardPinPolicy const & pinPolicy, GUID const cardId)
{
	return GetActivationFactory<SmartCardProvisioning, ISmartCardProvisioningStatics2>().RequestAttestedVirtualSmartCardCreationAsync(friendlyName, administrativeKey, pinPolicy, cardId);
}

inline SmartCardPinPolicy::SmartCardPinPolicy() :
	SmartCardPinPolicy(ActivateInstance<SmartCardPinPolicy>())
{}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Sms {

inline SmsBinaryMessage::SmsBinaryMessage() :
	SmsBinaryMessage(ActivateInstance<SmsBinaryMessage>())
{}

inline SmsTextMessage::SmsTextMessage() :
	SmsTextMessage(ActivateInstance<SmsTextMessage>())
{}

inline Windows::Devices::Sms::SmsTextMessage SmsTextMessage::FromBinaryMessage(Windows::Devices::Sms::SmsBinaryMessage const & binaryMessage)
{
	return GetActivationFactory<SmsTextMessage, ISmsTextMessageStatics>().FromBinaryMessage(binaryMessage);
}

inline SmsTextMessage2::SmsTextMessage2() :
	SmsTextMessage2(ActivateInstance<SmsTextMessage2>())
{}

inline SmsAppMessage::SmsAppMessage() :
	SmsAppMessage(ActivateInstance<SmsAppMessage>())
{}

inline String SmsDevice::GetDeviceSelector()
{
	return GetActivationFactory<SmsDevice, ISmsDeviceStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> SmsDevice::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<SmsDevice, ISmsDeviceStatics>().FromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> SmsDevice::GetDefaultAsync()
{
	return GetActivationFactory<SmsDevice, ISmsDeviceStatics>().GetDefaultAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Sms::SmsDevice> SmsDevice::FromNetworkAccountIdAsync(StringReference const & networkAccountId)
{
	return GetActivationFactory<SmsDevice, ISmsDeviceStatics2>().FromNetworkAccountIdAsync(networkAccountId);
}

inline String SmsDevice2::GetDeviceSelector()
{
	return GetActivationFactory<SmsDevice2, ISmsDevice2Statics>().GetDeviceSelector();
}

inline Windows::Devices::Sms::SmsDevice2 SmsDevice2::FromId(StringReference const & deviceId)
{
	return GetActivationFactory<SmsDevice2, ISmsDevice2Statics>().FromId(deviceId);
}

inline Windows::Devices::Sms::SmsDevice2 SmsDevice2::GetDefault()
{
	return GetActivationFactory<SmsDevice2, ISmsDevice2Statics>().GetDefault();
}

inline Windows::Devices::Sms::SmsDevice2 SmsDevice2::FromParentId(StringReference const & parentDeviceId)
{
	return GetActivationFactory<SmsDevice2, ISmsDevice2Statics>().FromParentId(parentDeviceId);
}

inline SmsFilterRule::SmsFilterRule(Windows::Devices::Sms::SmsMessageType const messageType) :
	SmsFilterRule(GetActivationFactory<SmsFilterRule, ISmsFilterRuleFactory>().CreateFilterRule(messageType))
{}

inline SmsFilterRules::SmsFilterRules(Windows::Devices::Sms::SmsFilterActionType const actionType) :
	SmsFilterRules(GetActivationFactory<SmsFilterRules, ISmsFilterRulesFactory>().CreateFilterRules(actionType))
{}

inline Windows::Foundation::Collections::IVectorView<Windows::Devices::Sms::SmsMessageRegistration> SmsMessageRegistration::AllRegistrations()
{
	return GetActivationFactory<SmsMessageRegistration, ISmsMessageRegistrationStatics>().AllRegistrations();
}

inline Windows::Devices::Sms::SmsMessageRegistration SmsMessageRegistration::Register(StringReference const & id, Windows::Devices::Sms::SmsFilterRules const & filterRules)
{
	return GetActivationFactory<SmsMessageRegistration, ISmsMessageRegistrationStatics>().Register(id, filterRules);
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace Usb {

inline UsbControlRequestType::UsbControlRequestType() :
	UsbControlRequestType(ActivateInstance<UsbControlRequestType>())
{}

inline UsbSetupPacket::UsbSetupPacket() :
	UsbSetupPacket(ActivateInstance<UsbSetupPacket>())
{}

inline UsbSetupPacket::UsbSetupPacket(Windows::Storage::Streams::IBuffer const & eightByteBuffer) :
	UsbSetupPacket(GetActivationFactory<UsbSetupPacket, IUsbSetupPacketFactory>().CreateWithEightByteBuffer(eightByteBuffer))
{}

inline UsbDeviceClass::UsbDeviceClass() :
	UsbDeviceClass(ActivateInstance<UsbDeviceClass>())
{}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::CdcControl()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().CdcControl();
}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::Physical()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().Physical();
}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::PersonalHealthcare()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().PersonalHealthcare();
}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::ActiveSync()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().ActiveSync();
}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::PalmSync()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().PalmSync();
}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::DeviceFirmwareUpdate()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().DeviceFirmwareUpdate();
}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::Irda()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().Irda();
}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::Measurement()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().Measurement();
}

inline Windows::Devices::Usb::UsbDeviceClass UsbDeviceClasses::VendorSpecific()
{
	return GetActivationFactory<UsbDeviceClasses, IUsbDeviceClassesStatics>().VendorSpecific();
}

inline String UsbDevice::GetDeviceSelector(unsigned const vendorId, unsigned const productId, GUID const winUsbInterfaceClass)
{
	return GetActivationFactory<UsbDevice, IUsbDeviceStatics>().GetDeviceSelector(vendorId, productId, winUsbInterfaceClass);
}

inline String UsbDevice::GetDeviceSelector(GUID const winUsbInterfaceClass)
{
	return GetActivationFactory<UsbDevice, IUsbDeviceStatics>().GetDeviceSelector(winUsbInterfaceClass);
}

inline String UsbDevice::GetDeviceSelector(unsigned const vendorId, unsigned const productId)
{
	return GetActivationFactory<UsbDevice, IUsbDeviceStatics>().GetDeviceSelector(vendorId, productId);
}

inline String UsbDevice::GetDeviceClassSelector(Windows::Devices::Usb::UsbDeviceClass const & usbClass)
{
	return GetActivationFactory<UsbDevice, IUsbDeviceStatics>().GetDeviceClassSelector(usbClass);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Usb::UsbDevice> UsbDevice::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<UsbDevice, IUsbDeviceStatics>().FromIdAsync(deviceId);
}

inline bool UsbConfigurationDescriptor::TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbConfigurationDescriptor & parsed)
{
	return GetActivationFactory<UsbConfigurationDescriptor, IUsbConfigurationDescriptorStatics>().TryParse(descriptor, parsed);
}

inline Windows::Devices::Usb::UsbConfigurationDescriptor UsbConfigurationDescriptor::Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor)
{
	return GetActivationFactory<UsbConfigurationDescriptor, IUsbConfigurationDescriptorStatics>().Parse(descriptor);
}

inline bool UsbInterfaceDescriptor::TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbInterfaceDescriptor & parsed)
{
	return GetActivationFactory<UsbInterfaceDescriptor, IUsbInterfaceDescriptorStatics>().TryParse(descriptor, parsed);
}

inline Windows::Devices::Usb::UsbInterfaceDescriptor UsbInterfaceDescriptor::Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor)
{
	return GetActivationFactory<UsbInterfaceDescriptor, IUsbInterfaceDescriptorStatics>().Parse(descriptor);
}

inline bool UsbEndpointDescriptor::TryParse(Windows::Devices::Usb::UsbDescriptor const & descriptor, Windows::Devices::Usb::UsbEndpointDescriptor & parsed)
{
	return GetActivationFactory<UsbEndpointDescriptor, IUsbEndpointDescriptorStatics>().TryParse(descriptor, parsed);
}

inline Windows::Devices::Usb::UsbEndpointDescriptor UsbEndpointDescriptor::Parse(Windows::Devices::Usb::UsbDescriptor const & descriptor)
{
	return GetActivationFactory<UsbEndpointDescriptor, IUsbEndpointDescriptorStatics>().Parse(descriptor);
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace WiFi {

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Devices::WiFi::WiFiAdapter>> WiFiAdapter::FindAllAdaptersAsync()
{
	return GetActivationFactory<WiFiAdapter, IWiFiAdapterStatics>().FindAllAdaptersAsync();
}

inline String WiFiAdapter::GetDeviceSelector()
{
	return GetActivationFactory<WiFiAdapter, IWiFiAdapterStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::WiFi::WiFiAdapter> WiFiAdapter::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<WiFiAdapter, IWiFiAdapterStatics>().FromIdAsync(deviceId);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Devices::WiFi::WiFiAccessStatus> WiFiAdapter::RequestAccessAsync()
{
	return GetActivationFactory<WiFiAdapter, IWiFiAdapterStatics>().RequestAccessAsync();
}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace WiFiDirect {

inline String WiFiDirectDevice::GetDeviceSelector()
{
	return GetActivationFactory<WiFiDirectDevice, IWiFiDirectDeviceStatics>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> WiFiDirectDevice::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<WiFiDirectDevice, IWiFiDirectDeviceStatics>().FromIdAsync(deviceId);
}

inline String WiFiDirectDevice::GetDeviceSelector(Windows::Devices::WiFiDirect::WiFiDirectDeviceSelectorType const type)
{
	return GetActivationFactory<WiFiDirectDevice, IWiFiDirectDeviceStatics2>().GetDeviceSelector(type);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::WiFiDirectDevice> WiFiDirectDevice::FromIdAsync(StringReference const & deviceId, Windows::Devices::WiFiDirect::WiFiDirectConnectionParameters const & connectionParameters)
{
	return GetActivationFactory<WiFiDirectDevice, IWiFiDirectDeviceStatics2>().FromIdAsync(deviceId, connectionParameters);
}

inline WiFiDirectConnectionParameters::WiFiDirectConnectionParameters() :
	WiFiDirectConnectionParameters(ActivateInstance<WiFiDirectConnectionParameters>())
{}

inline Windows::Devices::Enumeration::DevicePairingKinds WiFiDirectConnectionParameters::GetDevicePairingKinds(Windows::Devices::WiFiDirect::WiFiDirectConfigurationMethod const configurationMethod)
{
	return GetActivationFactory<WiFiDirectConnectionParameters, IWiFiDirectConnectionParametersStatics>().GetDevicePairingKinds(configurationMethod);
}

inline WiFiDirectInformationElement::WiFiDirectInformationElement() :
	WiFiDirectInformationElement(ActivateInstance<WiFiDirectInformationElement>())
{}

inline Windows::Foundation::Collections::IVector<Windows::Devices::WiFiDirect::WiFiDirectInformationElement> WiFiDirectInformationElement::CreateFromBuffer(Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<WiFiDirectInformationElement, IWiFiDirectInformationElementStatics>().CreateFromBuffer(buffer);
}

inline Windows::Foundation::Collections::IVector<Windows::Devices::WiFiDirect::WiFiDirectInformationElement> WiFiDirectInformationElement::CreateFromDeviceInformation(Windows::Devices::Enumeration::DeviceInformation const & deviceInformation)
{
	return GetActivationFactory<WiFiDirectInformationElement, IWiFiDirectInformationElementStatics>().CreateFromDeviceInformation(deviceInformation);
}

inline WiFiDirectAdvertisementPublisher::WiFiDirectAdvertisementPublisher() :
	WiFiDirectAdvertisementPublisher(ActivateInstance<WiFiDirectAdvertisementPublisher>())
{}

inline WiFiDirectConnectionListener::WiFiDirectConnectionListener() :
	WiFiDirectConnectionListener(ActivateInstance<WiFiDirectConnectionListener>())
{}

}}}}

namespace winrt { namespace Windows { namespace Devices { namespace WiFiDirect { namespace Services {

inline WiFiDirectServiceAdvertiser::WiFiDirectServiceAdvertiser(StringReference const & serviceName) :
	WiFiDirectServiceAdvertiser(GetActivationFactory<WiFiDirectServiceAdvertiser, IWiFiDirectServiceAdvertiserFactory>().CreateWiFiDirectServiceAdvertiser(serviceName))
{}

inline String WiFiDirectService::GetSelector(StringReference const & serviceName)
{
	return GetActivationFactory<WiFiDirectService, IWiFiDirectServiceStatics>().GetSelector(serviceName);
}

inline String WiFiDirectService::GetSelector(StringReference const & serviceName, Windows::Storage::Streams::IBuffer const & serviceInfoFilter)
{
	return GetActivationFactory<WiFiDirectService, IWiFiDirectServiceStatics>().GetSelector(serviceName, serviceInfoFilter);
}

inline Windows::Foundation::IAsyncOperation<Windows::Devices::WiFiDirect::Services::WiFiDirectService> WiFiDirectService::FromIdAsync(StringReference const & deviceId)
{
	return GetActivationFactory<WiFiDirectService, IWiFiDirectServiceStatics>().FromIdAsync(deviceId);
}

}}}}}

namespace winrt { namespace Windows { namespace Foundation {

inline WwwFormUrlDecoder::WwwFormUrlDecoder(StringReference const & query) :
	WwwFormUrlDecoder(GetActivationFactory<WwwFormUrlDecoder, IWwwFormUrlDecoderRuntimeClassFactory>().CreateWwwFormUrlDecoder(query))
{}

inline Uri::Uri(StringReference const & uri) :
	Uri(GetActivationFactory<Uri, IUriRuntimeClassFactory>().CreateUri(uri))
{}

inline Uri::Uri(StringReference const & baseUri, StringReference const & relativeUri) :
	Uri(GetActivationFactory<Uri, IUriRuntimeClassFactory>().CreateWithRelativeUri(baseUri, relativeUri))
{}

inline String Uri::UnescapeComponent(StringReference const & toUnescape)
{
	return GetActivationFactory<Uri, IUriEscapeStatics>().UnescapeComponent(toUnescape);
}

inline String Uri::EscapeComponent(StringReference const & toEscape)
{
	return GetActivationFactory<Uri, IUriEscapeStatics>().EscapeComponent(toEscape);
}

inline IInspectable PropertyValue::CreateEmpty()
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateEmpty();
}

inline IInspectable PropertyValue::CreateUInt8(byte const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateUInt8(value);
}

inline IInspectable PropertyValue::CreateInt16(short const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateInt16(value);
}

inline IInspectable PropertyValue::CreateUInt16(unsigned short const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateUInt16(value);
}

inline IInspectable PropertyValue::CreateInt32(int const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateInt32(value);
}

inline IInspectable PropertyValue::CreateUInt32(unsigned const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateUInt32(value);
}

inline IInspectable PropertyValue::CreateInt64(long long const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateInt64(value);
}

inline IInspectable PropertyValue::CreateUInt64(unsigned long long const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateUInt64(value);
}

inline IInspectable PropertyValue::CreateSingle(float const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateSingle(value);
}

inline IInspectable PropertyValue::CreateDouble(double const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateDouble(value);
}

inline IInspectable PropertyValue::CreateChar16(wchar_t const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateChar16(value);
}

inline IInspectable PropertyValue::CreateBoolean(bool const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateBoolean(value);
}

inline IInspectable PropertyValue::CreateString(StringReference const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateString(value);
}

inline IInspectable PropertyValue::CreateInspectable(IInspectable const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateInspectable(value);
}

inline IInspectable PropertyValue::CreateGuid(GUID const value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateGuid(value);
}

inline IInspectable PropertyValue::CreateDateTime(Windows::Foundation::DateTime const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateDateTime(value);
}

inline IInspectable PropertyValue::CreateTimeSpan(Windows::Foundation::TimeSpan const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateTimeSpan(value);
}

inline IInspectable PropertyValue::CreatePoint(Windows::Foundation::Point const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreatePoint(value);
}

inline IInspectable PropertyValue::CreateSize(Windows::Foundation::Size const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateSize(value);
}

inline IInspectable PropertyValue::CreateRect(Windows::Foundation::Rect const & value)
{
	return GetActivationFactory<PropertyValue, IPropertyValueStatics>().CreateRect(value);
}

inline Deferral::Deferral(Windows::Foundation::IDeferralCompletedHandler const & handler) :
	Deferral(GetActivationFactory<Deferral, IDeferralFactory>().Create(handler))
{}

template <typename F> Deferral::Deferral(F handler) :
	Deferral(GetActivationFactory<Deferral, IDeferralFactory>().Create(Windows::Foundation::DeferralCompletedHandler(handler)))
{}

inline MemoryBuffer::MemoryBuffer(unsigned const capacity) :
	MemoryBuffer(GetActivationFactory<MemoryBuffer, IMemoryBufferFactory>().Create(capacity))
{}

}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Collections {

inline PropertySet::PropertySet() :
	PropertySet(ActivateInstance<PropertySet>())
{}

inline ValueSet::ValueSet() :
	ValueSet(ActivateInstance<ValueSet>())
{}

inline StringMap::StringMap() :
	StringMap(ActivateInstance<StringMap>())
{}

}}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Diagnostics {

inline void AsyncCausalityTracer::TraceOperationCreation(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, StringReference const & operationName, unsigned long long const relatedContext)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TraceOperationCreation(traceLevel, source, platformId, operationId, operationName, relatedContext);
}

inline void AsyncCausalityTracer::TraceOperationCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, AsyncStatus const status)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TraceOperationCompletion(traceLevel, source, platformId, operationId, status);
}

inline void AsyncCausalityTracer::TraceOperationRelation(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, Windows::Foundation::Diagnostics::CausalityRelation const relation)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TraceOperationRelation(traceLevel, source, platformId, operationId, relation);
}

inline void AsyncCausalityTracer::TraceSynchronousWorkStart(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, GUID const platformId, unsigned long long const operationId, Windows::Foundation::Diagnostics::CausalitySynchronousWork const work)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TraceSynchronousWorkStart(traceLevel, source, platformId, operationId, work);
}

inline void AsyncCausalityTracer::TraceSynchronousWorkCompletion(Windows::Foundation::Diagnostics::CausalityTraceLevel const traceLevel, Windows::Foundation::Diagnostics::CausalitySource const source, Windows::Foundation::Diagnostics::CausalitySynchronousWork const work)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TraceSynchronousWorkCompletion(traceLevel, source, work);
}

inline long long AsyncCausalityTracer::TracingStatusChanged(Windows::Foundation::IEventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs> const & handler)
{
	return GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TracingStatusChanged(handler);
}

template <typename F> long long AsyncCausalityTracer::TracingStatusChanged(F handler)
{
	return GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TracingStatusChanged(Windows::Foundation::EventHandler<Windows::Foundation::Diagnostics::TracingStatusChangedEventArgs>(handler));
}

inline void AsyncCausalityTracer::TracingStatusChanged(long long const cookie)
{
	GetActivationFactory<AsyncCausalityTracer, IAsyncCausalityTracerStatics>().TracingStatusChanged(cookie);
}

inline RuntimeBrokerErrorSettings::RuntimeBrokerErrorSettings() :
	RuntimeBrokerErrorSettings(ActivateInstance<RuntimeBrokerErrorSettings>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Diagnostics::ErrorDetails> ErrorDetails::CreateFromHResultAsync(int const errorCode)
{
	return GetActivationFactory<ErrorDetails, IErrorDetailsStatics>().CreateFromHResultAsync(errorCode);
}

inline LoggingOptions::LoggingOptions() :
	LoggingOptions(ActivateInstance<LoggingOptions>())
{}

inline LoggingOptions::LoggingOptions(long long const keywords) :
	LoggingOptions(GetActivationFactory<LoggingOptions, ILoggingOptionsFactory>().CreateWithKeywords(keywords))
{}

inline LoggingChannelOptions::LoggingChannelOptions() :
	LoggingChannelOptions(ActivateInstance<LoggingChannelOptions>())
{}

inline LoggingChannelOptions::LoggingChannelOptions(GUID const group) :
	LoggingChannelOptions(GetActivationFactory<LoggingChannelOptions, ILoggingChannelOptionsFactory>().Create(group))
{}

inline LoggingFields::LoggingFields() :
	LoggingFields(ActivateInstance<LoggingFields>())
{}

inline LoggingActivity::LoggingActivity(StringReference const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel) :
	LoggingActivity(GetActivationFactory<LoggingActivity, ILoggingActivityFactory>().CreateLoggingActivity(activityName, loggingChannel))
{}

inline LoggingActivity::LoggingActivity(StringReference const & activityName, Windows::Foundation::Diagnostics::ILoggingChannel const & loggingChannel, Windows::Foundation::Diagnostics::LoggingLevel const level) :
	LoggingActivity(GetActivationFactory<LoggingActivity, ILoggingActivityFactory>().CreateLoggingActivityWithLevel(activityName, loggingChannel, level))
{}

inline LoggingChannel::LoggingChannel(StringReference const & name) :
	LoggingChannel(GetActivationFactory<LoggingChannel, ILoggingChannelFactory>().Create(name))
{}

inline LoggingChannel::LoggingChannel(StringReference const & name, Windows::Foundation::Diagnostics::LoggingChannelOptions const & options) :
	LoggingChannel(GetActivationFactory<LoggingChannel, ILoggingChannelFactory2>().CreateWithOptions(name, options))
{}

inline LoggingChannel::LoggingChannel(StringReference const & name, Windows::Foundation::Diagnostics::LoggingChannelOptions const & options, GUID const id) :
	LoggingChannel(GetActivationFactory<LoggingChannel, ILoggingChannelFactory2>().CreateWithOptionsAndId(name, options, id))
{}

inline LoggingSession::LoggingSession(StringReference const & name) :
	LoggingSession(GetActivationFactory<LoggingSession, ILoggingSessionFactory>().Create(name))
{}

inline FileLoggingSession::FileLoggingSession(StringReference const & name) :
	FileLoggingSession(GetActivationFactory<FileLoggingSession, IFileLoggingSessionFactory>().Create(name))
{}

}}}}

namespace winrt { namespace Windows { namespace Foundation { namespace Metadata {

inline bool ApiInformation::IsTypePresent(StringReference const & typeName)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsTypePresent(typeName);
}

inline bool ApiInformation::IsMethodPresent(StringReference const & typeName, StringReference const & methodName)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsMethodPresent(typeName, methodName);
}

inline bool ApiInformation::IsMethodPresent(StringReference const & typeName, StringReference const & methodName, unsigned const inputParameterCount)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsMethodPresent(typeName, methodName, inputParameterCount);
}

inline bool ApiInformation::IsEventPresent(StringReference const & typeName, StringReference const & eventName)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsEventPresent(typeName, eventName);
}

inline bool ApiInformation::IsPropertyPresent(StringReference const & typeName, StringReference const & propertyName)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsPropertyPresent(typeName, propertyName);
}

inline bool ApiInformation::IsReadOnlyPropertyPresent(StringReference const & typeName, StringReference const & propertyName)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsReadOnlyPropertyPresent(typeName, propertyName);
}

inline bool ApiInformation::IsWriteablePropertyPresent(StringReference const & typeName, StringReference const & propertyName)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsWriteablePropertyPresent(typeName, propertyName);
}

inline bool ApiInformation::IsEnumNamedValuePresent(StringReference const & enumTypeName, StringReference const & valueName)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsEnumNamedValuePresent(enumTypeName, valueName);
}

inline bool ApiInformation::IsApiContractPresent(StringReference const & contractName, unsigned short const majorVersion)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsApiContractPresent(contractName, majorVersion);
}

inline bool ApiInformation::IsApiContractPresent(StringReference const & contractName, unsigned short const majorVersion, unsigned short const minorVersion)
{
	return GetActivationFactory<ApiInformation, IApiInformationStatics>().IsApiContractPresent(contractName, majorVersion, minorVersion);
}

}}}}

namespace winrt { namespace Windows { namespace Gaming { namespace Input {

inline long long Gamepad::GamepadAdded(Windows::Foundation::IEventHandler<Windows::Gaming::Input::Gamepad> const & value)
{
	return GetActivationFactory<Gamepad, IGamepadStatics>().GamepadAdded(value);
}

template <typename F> long long Gamepad::GamepadAdded(F value)
{
	return GetActivationFactory<Gamepad, IGamepadStatics>().GamepadAdded(Windows::Foundation::EventHandler<Windows::Gaming::Input::Gamepad>(value));
}

inline void Gamepad::GamepadAdded(long long const token)
{
	GetActivationFactory<Gamepad, IGamepadStatics>().GamepadAdded(token);
}

inline long long Gamepad::GamepadRemoved(Windows::Foundation::IEventHandler<Windows::Gaming::Input::Gamepad> const & value)
{
	return GetActivationFactory<Gamepad, IGamepadStatics>().GamepadRemoved(value);
}

template <typename F> long long Gamepad::GamepadRemoved(F value)
{
	return GetActivationFactory<Gamepad, IGamepadStatics>().GamepadRemoved(Windows::Foundation::EventHandler<Windows::Gaming::Input::Gamepad>(value));
}

inline void Gamepad::GamepadRemoved(long long const token)
{
	GetActivationFactory<Gamepad, IGamepadStatics>().GamepadRemoved(token);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Gaming::Input::Gamepad> Gamepad::Gamepads()
{
	return GetActivationFactory<Gamepad, IGamepadStatics>().Gamepads();
}

}}}}

namespace winrt { namespace Windows { namespace Gaming { namespace Preview { namespace GamesEnumeration {

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Gaming::Preview::GamesEnumeration::GameListEntry>> GameList::FindAllAsync()
{
	return GetActivationFactory<GameList, IGameListStatics>().FindAllAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Gaming::Preview::GamesEnumeration::GameListEntry>> GameList::FindAllAsync(StringReference const & packageFamilyName)
{
	return GetActivationFactory<GameList, IGameListStatics>().FindAllAsync(packageFamilyName);
}

inline long long GameList::GameAdded(Windows::Gaming::Preview::GamesEnumeration::IGameListChangedEventHandler const & handler)
{
	return GetActivationFactory<GameList, IGameListStatics>().GameAdded(handler);
}

template <typename F> long long GameList::GameAdded(F handler)
{
	return GetActivationFactory<GameList, IGameListStatics>().GameAdded(Windows::Gaming::Preview::GamesEnumeration::GameListChangedEventHandler(handler));
}

inline void GameList::GameAdded(long long const token)
{
	GetActivationFactory<GameList, IGameListStatics>().GameAdded(token);
}

inline long long GameList::GameRemoved(Windows::Gaming::Preview::GamesEnumeration::IGameListRemovedEventHandler const & handler)
{
	return GetActivationFactory<GameList, IGameListStatics>().GameRemoved(handler);
}

template <typename F> long long GameList::GameRemoved(F handler)
{
	return GetActivationFactory<GameList, IGameListStatics>().GameRemoved(Windows::Gaming::Preview::GamesEnumeration::GameListRemovedEventHandler(handler));
}

inline void GameList::GameRemoved(long long const token)
{
	GetActivationFactory<GameList, IGameListStatics>().GameRemoved(token);
}

inline long long GameList::GameUpdated(Windows::Gaming::Preview::GamesEnumeration::IGameListChangedEventHandler const & handler)
{
	return GetActivationFactory<GameList, IGameListStatics>().GameUpdated(handler);
}

template <typename F> long long GameList::GameUpdated(F handler)
{
	return GetActivationFactory<GameList, IGameListStatics>().GameUpdated(Windows::Gaming::Preview::GamesEnumeration::GameListChangedEventHandler(handler));
}

inline void GameList::GameUpdated(long long const token)
{
	GetActivationFactory<GameList, IGameListStatics>().GameUpdated(token);
}

}}}}}

namespace winrt { namespace Windows { namespace Gaming { namespace UI {

inline long long GameBar::VisibilityChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<GameBar, IGameBarStatics>().VisibilityChanged(handler);
}

template <typename F> long long GameBar::VisibilityChanged(F handler)
{
	return GetActivationFactory<GameBar, IGameBarStatics>().VisibilityChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void GameBar::VisibilityChanged(long long const token)
{
	GetActivationFactory<GameBar, IGameBarStatics>().VisibilityChanged(token);
}

inline long long GameBar::IsInputRedirectedChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<GameBar, IGameBarStatics>().IsInputRedirectedChanged(handler);
}

template <typename F> long long GameBar::IsInputRedirectedChanged(F handler)
{
	return GetActivationFactory<GameBar, IGameBarStatics>().IsInputRedirectedChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void GameBar::IsInputRedirectedChanged(long long const token)
{
	GetActivationFactory<GameBar, IGameBarStatics>().IsInputRedirectedChanged(token);
}

inline bool GameBar::Visible()
{
	return GetActivationFactory<GameBar, IGameBarStatics>().Visible();
}

inline bool GameBar::IsInputRedirected()
{
	return GetActivationFactory<GameBar, IGameBarStatics>().IsInputRedirected();
}

}}}}

namespace winrt { namespace Windows { namespace Globalization {

inline Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> JapanesePhoneticAnalyzer::GetWords(StringReference const & input)
{
	return GetActivationFactory<JapanesePhoneticAnalyzer, IJapanesePhoneticAnalyzerStatics>().GetWords(input);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Globalization::JapanesePhoneme> JapanesePhoneticAnalyzer::GetWords(StringReference const & input, bool const monoRuby)
{
	return GetActivationFactory<JapanesePhoneticAnalyzer, IJapanesePhoneticAnalyzerStatics>().GetWords(input, monoRuby);
}

inline String CalendarIdentifiers::Gregorian()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Gregorian();
}

inline String CalendarIdentifiers::Hebrew()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Hebrew();
}

inline String CalendarIdentifiers::Hijri()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Hijri();
}

inline String CalendarIdentifiers::Japanese()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Japanese();
}

inline String CalendarIdentifiers::Julian()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Julian();
}

inline String CalendarIdentifiers::Korean()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Korean();
}

inline String CalendarIdentifiers::Taiwan()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Taiwan();
}

inline String CalendarIdentifiers::Thai()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().Thai();
}

inline String CalendarIdentifiers::UmAlQura()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics>().UmAlQura();
}

inline String CalendarIdentifiers::Persian()
{
	return GetActivationFactory<CalendarIdentifiers, ICalendarIdentifiersStatics2>().Persian();
}

inline String ClockIdentifiers::TwelveHour()
{
	return GetActivationFactory<ClockIdentifiers, IClockIdentifiersStatics>().TwelveHour();
}

inline String ClockIdentifiers::TwentyFourHour()
{
	return GetActivationFactory<ClockIdentifiers, IClockIdentifiersStatics>().TwentyFourHour();
}

inline String NumeralSystemIdentifiers::Arab()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Arab();
}

inline String NumeralSystemIdentifiers::ArabExt()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().ArabExt();
}

inline String NumeralSystemIdentifiers::Bali()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Bali();
}

inline String NumeralSystemIdentifiers::Beng()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Beng();
}

inline String NumeralSystemIdentifiers::Cham()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Cham();
}

inline String NumeralSystemIdentifiers::Deva()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Deva();
}

inline String NumeralSystemIdentifiers::FullWide()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().FullWide();
}

inline String NumeralSystemIdentifiers::Gujr()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Gujr();
}

inline String NumeralSystemIdentifiers::Guru()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Guru();
}

inline String NumeralSystemIdentifiers::HaniDec()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().HaniDec();
}

inline String NumeralSystemIdentifiers::Java()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Java();
}

inline String NumeralSystemIdentifiers::Kali()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Kali();
}

inline String NumeralSystemIdentifiers::Khmr()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Khmr();
}

inline String NumeralSystemIdentifiers::Knda()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Knda();
}

inline String NumeralSystemIdentifiers::Lana()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Lana();
}

inline String NumeralSystemIdentifiers::LanaTham()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().LanaTham();
}

inline String NumeralSystemIdentifiers::Laoo()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Laoo();
}

inline String NumeralSystemIdentifiers::Latn()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Latn();
}

inline String NumeralSystemIdentifiers::Lepc()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Lepc();
}

inline String NumeralSystemIdentifiers::Limb()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Limb();
}

inline String NumeralSystemIdentifiers::Mlym()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Mlym();
}

inline String NumeralSystemIdentifiers::Mong()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Mong();
}

inline String NumeralSystemIdentifiers::Mtei()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Mtei();
}

inline String NumeralSystemIdentifiers::Mymr()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Mymr();
}

inline String NumeralSystemIdentifiers::MymrShan()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().MymrShan();
}

inline String NumeralSystemIdentifiers::Nkoo()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Nkoo();
}

inline String NumeralSystemIdentifiers::Olck()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Olck();
}

inline String NumeralSystemIdentifiers::Orya()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Orya();
}

inline String NumeralSystemIdentifiers::Saur()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Saur();
}

inline String NumeralSystemIdentifiers::Sund()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Sund();
}

inline String NumeralSystemIdentifiers::Talu()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Talu();
}

inline String NumeralSystemIdentifiers::TamlDec()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().TamlDec();
}

inline String NumeralSystemIdentifiers::Telu()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Telu();
}

inline String NumeralSystemIdentifiers::Thai()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Thai();
}

inline String NumeralSystemIdentifiers::Tibt()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Tibt();
}

inline String NumeralSystemIdentifiers::Vaii()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics>().Vaii();
}

inline String NumeralSystemIdentifiers::Brah()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().Brah();
}

inline String NumeralSystemIdentifiers::Osma()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().Osma();
}

inline String NumeralSystemIdentifiers::MathBold()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().MathBold();
}

inline String NumeralSystemIdentifiers::MathDbl()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().MathDbl();
}

inline String NumeralSystemIdentifiers::MathSans()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().MathSans();
}

inline String NumeralSystemIdentifiers::MathSanb()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().MathSanb();
}

inline String NumeralSystemIdentifiers::MathMono()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().MathMono();
}

inline String NumeralSystemIdentifiers::ZmthBold()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().ZmthBold();
}

inline String NumeralSystemIdentifiers::ZmthDbl()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().ZmthDbl();
}

inline String NumeralSystemIdentifiers::ZmthSans()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().ZmthSans();
}

inline String NumeralSystemIdentifiers::ZmthSanb()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().ZmthSanb();
}

inline String NumeralSystemIdentifiers::ZmthMono()
{
	return GetActivationFactory<NumeralSystemIdentifiers, INumeralSystemIdentifiersStatics2>().ZmthMono();
}

inline String CurrencyIdentifiers::AED()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AED();
}

inline String CurrencyIdentifiers::AFN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AFN();
}

inline String CurrencyIdentifiers::ALL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ALL();
}

inline String CurrencyIdentifiers::AMD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AMD();
}

inline String CurrencyIdentifiers::ANG()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ANG();
}

inline String CurrencyIdentifiers::AOA()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AOA();
}

inline String CurrencyIdentifiers::ARS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ARS();
}

inline String CurrencyIdentifiers::AUD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AUD();
}

inline String CurrencyIdentifiers::AWG()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AWG();
}

inline String CurrencyIdentifiers::AZN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().AZN();
}

inline String CurrencyIdentifiers::BAM()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BAM();
}

inline String CurrencyIdentifiers::BBD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BBD();
}

inline String CurrencyIdentifiers::BDT()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BDT();
}

inline String CurrencyIdentifiers::BGN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BGN();
}

inline String CurrencyIdentifiers::BHD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BHD();
}

inline String CurrencyIdentifiers::BIF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BIF();
}

inline String CurrencyIdentifiers::BMD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BMD();
}

inline String CurrencyIdentifiers::BND()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BND();
}

inline String CurrencyIdentifiers::BOB()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BOB();
}

inline String CurrencyIdentifiers::BRL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BRL();
}

inline String CurrencyIdentifiers::BSD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BSD();
}

inline String CurrencyIdentifiers::BTN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BTN();
}

inline String CurrencyIdentifiers::BWP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BWP();
}

inline String CurrencyIdentifiers::BYR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BYR();
}

inline String CurrencyIdentifiers::BZD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().BZD();
}

inline String CurrencyIdentifiers::CAD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CAD();
}

inline String CurrencyIdentifiers::CDF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CDF();
}

inline String CurrencyIdentifiers::CHF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CHF();
}

inline String CurrencyIdentifiers::CLP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CLP();
}

inline String CurrencyIdentifiers::CNY()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CNY();
}

inline String CurrencyIdentifiers::COP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().COP();
}

inline String CurrencyIdentifiers::CRC()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CRC();
}

inline String CurrencyIdentifiers::CUP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CUP();
}

inline String CurrencyIdentifiers::CVE()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CVE();
}

inline String CurrencyIdentifiers::CZK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().CZK();
}

inline String CurrencyIdentifiers::DJF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().DJF();
}

inline String CurrencyIdentifiers::DKK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().DKK();
}

inline String CurrencyIdentifiers::DOP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().DOP();
}

inline String CurrencyIdentifiers::DZD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().DZD();
}

inline String CurrencyIdentifiers::EGP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().EGP();
}

inline String CurrencyIdentifiers::ERN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ERN();
}

inline String CurrencyIdentifiers::ETB()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ETB();
}

inline String CurrencyIdentifiers::EUR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().EUR();
}

inline String CurrencyIdentifiers::FJD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().FJD();
}

inline String CurrencyIdentifiers::FKP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().FKP();
}

inline String CurrencyIdentifiers::GBP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GBP();
}

inline String CurrencyIdentifiers::GEL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GEL();
}

inline String CurrencyIdentifiers::GHS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GHS();
}

inline String CurrencyIdentifiers::GIP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GIP();
}

inline String CurrencyIdentifiers::GMD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GMD();
}

inline String CurrencyIdentifiers::GNF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GNF();
}

inline String CurrencyIdentifiers::GTQ()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GTQ();
}

inline String CurrencyIdentifiers::GYD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().GYD();
}

inline String CurrencyIdentifiers::HKD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().HKD();
}

inline String CurrencyIdentifiers::HNL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().HNL();
}

inline String CurrencyIdentifiers::HRK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().HRK();
}

inline String CurrencyIdentifiers::HTG()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().HTG();
}

inline String CurrencyIdentifiers::HUF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().HUF();
}

inline String CurrencyIdentifiers::IDR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().IDR();
}

inline String CurrencyIdentifiers::ILS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ILS();
}

inline String CurrencyIdentifiers::INR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().INR();
}

inline String CurrencyIdentifiers::IQD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().IQD();
}

inline String CurrencyIdentifiers::IRR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().IRR();
}

inline String CurrencyIdentifiers::ISK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ISK();
}

inline String CurrencyIdentifiers::JMD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().JMD();
}

inline String CurrencyIdentifiers::JOD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().JOD();
}

inline String CurrencyIdentifiers::JPY()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().JPY();
}

inline String CurrencyIdentifiers::KES()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KES();
}

inline String CurrencyIdentifiers::KGS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KGS();
}

inline String CurrencyIdentifiers::KHR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KHR();
}

inline String CurrencyIdentifiers::KMF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KMF();
}

inline String CurrencyIdentifiers::KPW()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KPW();
}

inline String CurrencyIdentifiers::KRW()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KRW();
}

inline String CurrencyIdentifiers::KWD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KWD();
}

inline String CurrencyIdentifiers::KYD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KYD();
}

inline String CurrencyIdentifiers::KZT()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().KZT();
}

inline String CurrencyIdentifiers::LAK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LAK();
}

inline String CurrencyIdentifiers::LBP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LBP();
}

inline String CurrencyIdentifiers::LKR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LKR();
}

inline String CurrencyIdentifiers::LRD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LRD();
}

inline String CurrencyIdentifiers::LSL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LSL();
}

inline String CurrencyIdentifiers::LTL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LTL();
}

inline String CurrencyIdentifiers::LVL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LVL();
}

inline String CurrencyIdentifiers::LYD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().LYD();
}

inline String CurrencyIdentifiers::MAD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MAD();
}

inline String CurrencyIdentifiers::MDL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MDL();
}

inline String CurrencyIdentifiers::MGA()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MGA();
}

inline String CurrencyIdentifiers::MKD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MKD();
}

inline String CurrencyIdentifiers::MMK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MMK();
}

inline String CurrencyIdentifiers::MNT()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MNT();
}

inline String CurrencyIdentifiers::MOP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MOP();
}

inline String CurrencyIdentifiers::MRO()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MRO();
}

inline String CurrencyIdentifiers::MUR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MUR();
}

inline String CurrencyIdentifiers::MVR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MVR();
}

inline String CurrencyIdentifiers::MWK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MWK();
}

inline String CurrencyIdentifiers::MXN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MXN();
}

inline String CurrencyIdentifiers::MYR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MYR();
}

inline String CurrencyIdentifiers::MZN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().MZN();
}

inline String CurrencyIdentifiers::NAD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NAD();
}

inline String CurrencyIdentifiers::NGN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NGN();
}

inline String CurrencyIdentifiers::NIO()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NIO();
}

inline String CurrencyIdentifiers::NOK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NOK();
}

inline String CurrencyIdentifiers::NPR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NPR();
}

inline String CurrencyIdentifiers::NZD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().NZD();
}

inline String CurrencyIdentifiers::OMR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().OMR();
}

inline String CurrencyIdentifiers::PAB()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PAB();
}

inline String CurrencyIdentifiers::PEN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PEN();
}

inline String CurrencyIdentifiers::PGK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PGK();
}

inline String CurrencyIdentifiers::PHP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PHP();
}

inline String CurrencyIdentifiers::PKR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PKR();
}

inline String CurrencyIdentifiers::PLN()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PLN();
}

inline String CurrencyIdentifiers::PYG()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().PYG();
}

inline String CurrencyIdentifiers::QAR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().QAR();
}

inline String CurrencyIdentifiers::RON()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().RON();
}

inline String CurrencyIdentifiers::RSD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().RSD();
}

inline String CurrencyIdentifiers::RUB()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().RUB();
}

inline String CurrencyIdentifiers::RWF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().RWF();
}

inline String CurrencyIdentifiers::SAR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SAR();
}

inline String CurrencyIdentifiers::SBD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SBD();
}

inline String CurrencyIdentifiers::SCR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SCR();
}

inline String CurrencyIdentifiers::SDG()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SDG();
}

inline String CurrencyIdentifiers::SEK()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SEK();
}

inline String CurrencyIdentifiers::SGD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SGD();
}

inline String CurrencyIdentifiers::SHP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SHP();
}

inline String CurrencyIdentifiers::SLL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SLL();
}

inline String CurrencyIdentifiers::SOS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SOS();
}

inline String CurrencyIdentifiers::SRD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SRD();
}

inline String CurrencyIdentifiers::STD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().STD();
}

inline String CurrencyIdentifiers::SYP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SYP();
}

inline String CurrencyIdentifiers::SZL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().SZL();
}

inline String CurrencyIdentifiers::THB()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().THB();
}

inline String CurrencyIdentifiers::TJS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TJS();
}

inline String CurrencyIdentifiers::TMT()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TMT();
}

inline String CurrencyIdentifiers::TND()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TND();
}

inline String CurrencyIdentifiers::TOP()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TOP();
}

inline String CurrencyIdentifiers::TRY()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TRY();
}

inline String CurrencyIdentifiers::TTD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TTD();
}

inline String CurrencyIdentifiers::TWD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TWD();
}

inline String CurrencyIdentifiers::TZS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().TZS();
}

inline String CurrencyIdentifiers::UAH()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().UAH();
}

inline String CurrencyIdentifiers::UGX()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().UGX();
}

inline String CurrencyIdentifiers::USD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().USD();
}

inline String CurrencyIdentifiers::UYU()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().UYU();
}

inline String CurrencyIdentifiers::UZS()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().UZS();
}

inline String CurrencyIdentifiers::VEF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().VEF();
}

inline String CurrencyIdentifiers::VND()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().VND();
}

inline String CurrencyIdentifiers::VUV()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().VUV();
}

inline String CurrencyIdentifiers::WST()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().WST();
}

inline String CurrencyIdentifiers::XAF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().XAF();
}

inline String CurrencyIdentifiers::XCD()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().XCD();
}

inline String CurrencyIdentifiers::XOF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().XOF();
}

inline String CurrencyIdentifiers::XPF()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().XPF();
}

inline String CurrencyIdentifiers::XXX()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().XXX();
}

inline String CurrencyIdentifiers::YER()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().YER();
}

inline String CurrencyIdentifiers::ZAR()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ZAR();
}

inline String CurrencyIdentifiers::ZMW()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ZMW();
}

inline String CurrencyIdentifiers::ZWL()
{
	return GetActivationFactory<CurrencyIdentifiers, ICurrencyIdentifiersStatics>().ZWL();
}

inline GeographicRegion::GeographicRegion() :
	GeographicRegion(ActivateInstance<GeographicRegion>())
{}

inline GeographicRegion::GeographicRegion(StringReference const & geographicRegionCode) :
	GeographicRegion(GetActivationFactory<GeographicRegion, IGeographicRegionFactory>().CreateGeographicRegion(geographicRegionCode))
{}

inline bool GeographicRegion::IsSupported(StringReference const & geographicRegionCode)
{
	return GetActivationFactory<GeographicRegion, IGeographicRegionStatics>().IsSupported(geographicRegionCode);
}

inline Language::Language(StringReference const & languageTag) :
	Language(GetActivationFactory<Language, ILanguageFactory>().CreateLanguage(languageTag))
{}

inline bool Language::TrySetInputMethodLanguageTag(StringReference const & languageTag)
{
	return GetActivationFactory<Language, ILanguageStatics2>().TrySetInputMethodLanguageTag(languageTag);
}

inline bool Language::IsWellFormed(StringReference const & languageTag)
{
	return GetActivationFactory<Language, ILanguageStatics>().IsWellFormed(languageTag);
}

inline String Language::CurrentInputMethodLanguageTag()
{
	return GetActivationFactory<Language, ILanguageStatics>().CurrentInputMethodLanguageTag();
}

inline Calendar::Calendar() :
	Calendar(ActivateInstance<Calendar>())
{}

inline Calendar::Calendar(Windows::Foundation::Collections::IIterable<String> const & languages) :
	Calendar(GetActivationFactory<Calendar, ICalendarFactory>().CreateCalendarDefaultCalendarAndClock(languages))
{}

inline Calendar::Calendar(Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & calendar, StringReference const & clock) :
	Calendar(GetActivationFactory<Calendar, ICalendarFactory>().CreateCalendar(languages, calendar, clock))
{}

inline Calendar::Calendar(Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & calendar, StringReference const & clock, StringReference const & timeZoneId) :
	Calendar(GetActivationFactory<Calendar, ICalendarFactory2>().CreateCalendarWithTimeZone(languages, calendar, clock, timeZoneId))
{}

inline String ApplicationLanguages::PrimaryLanguageOverride()
{
	return GetActivationFactory<ApplicationLanguages, IApplicationLanguagesStatics>().PrimaryLanguageOverride();
}

inline void ApplicationLanguages::PrimaryLanguageOverride(StringReference const & value)
{
	GetActivationFactory<ApplicationLanguages, IApplicationLanguagesStatics>().PrimaryLanguageOverride(value);
}

inline Windows::Foundation::Collections::IVectorView<String> ApplicationLanguages::Languages()
{
	return GetActivationFactory<ApplicationLanguages, IApplicationLanguagesStatics>().Languages();
}

inline Windows::Foundation::Collections::IVectorView<String> ApplicationLanguages::ManifestLanguages()
{
	return GetActivationFactory<ApplicationLanguages, IApplicationLanguagesStatics>().ManifestLanguages();
}

}}}

namespace winrt { namespace Windows { namespace Globalization { namespace Collation {

inline CharacterGroupings::CharacterGroupings() :
	CharacterGroupings(ActivateInstance<CharacterGroupings>())
{}

}}}}

namespace winrt { namespace Windows { namespace Globalization { namespace DateTimeFormatting {

inline DateTimeFormatter::DateTimeFormatter(StringReference const & formatTemplate) :
	DateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatter(formatTemplate))
{}

inline DateTimeFormatter::DateTimeFormatter(StringReference const & formatTemplate, Windows::Foundation::Collections::IIterable<String> const & languages) :
	DateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatterLanguages(formatTemplate, languages))
{}

inline DateTimeFormatter::DateTimeFormatter(StringReference const & formatTemplate, Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & geographicRegion, StringReference const & calendar, StringReference const & clock) :
	DateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatterContext(formatTemplate, languages, geographicRegion, calendar, clock))
{}

inline DateTimeFormatter::DateTimeFormatter(Windows::Globalization::DateTimeFormatting::YearFormat const yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat const monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat const dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat const dayOfWeekFormat) :
	DateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatterDate(yearFormat, monthFormat, dayFormat, dayOfWeekFormat))
{}

inline DateTimeFormatter::DateTimeFormatter(Windows::Globalization::DateTimeFormatting::HourFormat const hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat const minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat const secondFormat) :
	DateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatterTime(hourFormat, minuteFormat, secondFormat))
{}

inline DateTimeFormatter::DateTimeFormatter(Windows::Globalization::DateTimeFormatting::YearFormat const yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat const monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat const dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat const dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat const hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat const minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat const secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages) :
	DateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatterDateTimeLanguages(yearFormat, monthFormat, dayFormat, dayOfWeekFormat, hourFormat, minuteFormat, secondFormat, languages))
{}

inline DateTimeFormatter::DateTimeFormatter(Windows::Globalization::DateTimeFormatting::YearFormat const yearFormat, Windows::Globalization::DateTimeFormatting::MonthFormat const monthFormat, Windows::Globalization::DateTimeFormatting::DayFormat const dayFormat, Windows::Globalization::DateTimeFormatting::DayOfWeekFormat const dayOfWeekFormat, Windows::Globalization::DateTimeFormatting::HourFormat const hourFormat, Windows::Globalization::DateTimeFormatting::MinuteFormat const minuteFormat, Windows::Globalization::DateTimeFormatting::SecondFormat const secondFormat, Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & geographicRegion, StringReference const & calendar, StringReference const & clock) :
	DateTimeFormatter(GetActivationFactory<DateTimeFormatter, IDateTimeFormatterFactory>().CreateDateTimeFormatterDateTimeContext(yearFormat, monthFormat, dayFormat, dayOfWeekFormat, hourFormat, minuteFormat, secondFormat, languages, geographicRegion, calendar, clock))
{}

inline Windows::Globalization::DateTimeFormatting::DateTimeFormatter DateTimeFormatter::LongDate()
{
	return GetActivationFactory<DateTimeFormatter, IDateTimeFormatterStatics>().LongDate();
}

inline Windows::Globalization::DateTimeFormatting::DateTimeFormatter DateTimeFormatter::LongTime()
{
	return GetActivationFactory<DateTimeFormatter, IDateTimeFormatterStatics>().LongTime();
}

inline Windows::Globalization::DateTimeFormatting::DateTimeFormatter DateTimeFormatter::ShortDate()
{
	return GetActivationFactory<DateTimeFormatter, IDateTimeFormatterStatics>().ShortDate();
}

inline Windows::Globalization::DateTimeFormatting::DateTimeFormatter DateTimeFormatter::ShortTime()
{
	return GetActivationFactory<DateTimeFormatter, IDateTimeFormatterStatics>().ShortTime();
}

}}}}

namespace winrt { namespace Windows { namespace Globalization { namespace Fonts {

inline LanguageFontGroup::LanguageFontGroup(StringReference const & languageTag) :
	LanguageFontGroup(GetActivationFactory<LanguageFontGroup, ILanguageFontGroupFactory>().CreateLanguageFontGroup(languageTag))
{}

}}}}

namespace winrt { namespace Windows { namespace Globalization { namespace NumberFormatting {

inline SignificantDigitsNumberRounder::SignificantDigitsNumberRounder() :
	SignificantDigitsNumberRounder(ActivateInstance<SignificantDigitsNumberRounder>())
{}

inline IncrementNumberRounder::IncrementNumberRounder() :
	IncrementNumberRounder(ActivateInstance<IncrementNumberRounder>())
{}

inline DecimalFormatter::DecimalFormatter() :
	DecimalFormatter(ActivateInstance<DecimalFormatter>())
{}

inline DecimalFormatter::DecimalFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & geographicRegion) :
	DecimalFormatter(GetActivationFactory<DecimalFormatter, IDecimalFormatterFactory>().CreateDecimalFormatter(languages, geographicRegion))
{}

inline PercentFormatter::PercentFormatter() :
	PercentFormatter(ActivateInstance<PercentFormatter>())
{}

inline PercentFormatter::PercentFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & geographicRegion) :
	PercentFormatter(GetActivationFactory<PercentFormatter, IPercentFormatterFactory>().CreatePercentFormatter(languages, geographicRegion))
{}

inline PermilleFormatter::PermilleFormatter() :
	PermilleFormatter(ActivateInstance<PermilleFormatter>())
{}

inline PermilleFormatter::PermilleFormatter(Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & geographicRegion) :
	PermilleFormatter(GetActivationFactory<PermilleFormatter, IPermilleFormatterFactory>().CreatePermilleFormatter(languages, geographicRegion))
{}

inline CurrencyFormatter::CurrencyFormatter(StringReference const & currencyCode) :
	CurrencyFormatter(GetActivationFactory<CurrencyFormatter, ICurrencyFormatterFactory>().CreateCurrencyFormatterCode(currencyCode))
{}

inline CurrencyFormatter::CurrencyFormatter(StringReference const & currencyCode, Windows::Foundation::Collections::IIterable<String> const & languages, StringReference const & geographicRegion) :
	CurrencyFormatter(GetActivationFactory<CurrencyFormatter, ICurrencyFormatterFactory>().CreateCurrencyFormatterCodeContext(currencyCode, languages, geographicRegion))
{}

inline NumeralSystemTranslator::NumeralSystemTranslator() :
	NumeralSystemTranslator(ActivateInstance<NumeralSystemTranslator>())
{}

inline NumeralSystemTranslator::NumeralSystemTranslator(Windows::Foundation::Collections::IIterable<String> const & languages) :
	NumeralSystemTranslator(GetActivationFactory<NumeralSystemTranslator, INumeralSystemTranslatorFactory>().Create(languages))
{}

}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Display {

inline Windows::Graphics::Display::DisplayInformation DisplayInformation::GetForCurrentView()
{
	return GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().GetForCurrentView();
}

inline Windows::Graphics::Display::DisplayOrientations DisplayInformation::AutoRotationPreferences()
{
	return GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().AutoRotationPreferences();
}

inline void DisplayInformation::AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations const value)
{
	GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().AutoRotationPreferences(value);
}

inline long long DisplayInformation::DisplayContentsInvalidated(Windows::Foundation::ITypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable> const & handler)
{
	return GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().DisplayContentsInvalidated(handler);
}

template <typename F> long long DisplayInformation::DisplayContentsInvalidated(F handler)
{
	return GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().DisplayContentsInvalidated(Windows::Foundation::TypedEventHandler<Windows::Graphics::Display::DisplayInformation, IInspectable>(handler));
}

inline void DisplayInformation::DisplayContentsInvalidated(long long const token)
{
	GetActivationFactory<DisplayInformation, IDisplayInformationStatics>().DisplayContentsInvalidated(token);
}

inline Windows::Graphics::Display::DisplayOrientations DisplayProperties::CurrentOrientation()
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().CurrentOrientation();
}

inline Windows::Graphics::Display::DisplayOrientations DisplayProperties::NativeOrientation()
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().NativeOrientation();
}

inline Windows::Graphics::Display::DisplayOrientations DisplayProperties::AutoRotationPreferences()
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().AutoRotationPreferences();
}

inline void DisplayProperties::AutoRotationPreferences(Windows::Graphics::Display::DisplayOrientations const value)
{
	GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().AutoRotationPreferences(value);
}

inline long long DisplayProperties::OrientationChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().OrientationChanged(handler);
}

template <typename F> long long DisplayProperties::OrientationChanged(F handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().OrientationChanged(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

inline void DisplayProperties::OrientationChanged(long long const token)
{
	GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().OrientationChanged(token);
}

inline Windows::Graphics::Display::ResolutionScale DisplayProperties::ResolutionScale()
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().ResolutionScale();
}

inline float DisplayProperties::LogicalDpi()
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().LogicalDpi();
}

inline long long DisplayProperties::LogicalDpiChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().LogicalDpiChanged(handler);
}

template <typename F> long long DisplayProperties::LogicalDpiChanged(F handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().LogicalDpiChanged(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

inline void DisplayProperties::LogicalDpiChanged(long long const token)
{
	GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().LogicalDpiChanged(token);
}

inline bool DisplayProperties::StereoEnabled()
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().StereoEnabled();
}

inline long long DisplayProperties::StereoEnabledChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().StereoEnabledChanged(handler);
}

template <typename F> long long DisplayProperties::StereoEnabledChanged(F handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().StereoEnabledChanged(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

inline void DisplayProperties::StereoEnabledChanged(long long const token)
{
	GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().StereoEnabledChanged(token);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IRandomAccessStream> DisplayProperties::GetColorProfileAsync()
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().GetColorProfileAsync();
}

inline long long DisplayProperties::ColorProfileChanged(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().ColorProfileChanged(handler);
}

template <typename F> long long DisplayProperties::ColorProfileChanged(F handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().ColorProfileChanged(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

inline void DisplayProperties::ColorProfileChanged(long long const token)
{
	GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().ColorProfileChanged(token);
}

inline long long DisplayProperties::DisplayContentsInvalidated(Windows::Graphics::Display::IDisplayPropertiesEventHandler const & handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().DisplayContentsInvalidated(handler);
}

template <typename F> long long DisplayProperties::DisplayContentsInvalidated(F handler)
{
	return GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().DisplayContentsInvalidated(Windows::Graphics::Display::DisplayPropertiesEventHandler(handler));
}

inline void DisplayProperties::DisplayContentsInvalidated(long long const token)
{
	GetActivationFactory<DisplayProperties, IDisplayPropertiesStatics>().DisplayContentsInvalidated(token);
}

}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Holographic {

inline Windows::Graphics::Holographic::HolographicSpace HolographicSpace::CreateForCoreWindow(Windows::UI::Core::CoreWindow const & window)
{
	return GetActivationFactory<HolographicSpace, IHolographicSpaceStatics>().CreateForCoreWindow(window);
}

}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Imaging {

inline BitmapTransform::BitmapTransform() :
	BitmapTransform(ActivateInstance<BitmapTransform>())
{}

inline BitmapTypedValue::BitmapTypedValue(IInspectable const & value, Windows::Foundation::PropertyType const type) :
	BitmapTypedValue(GetActivationFactory<BitmapTypedValue, IBitmapTypedValueFactory>().Create(value, type))
{}

inline BitmapPropertySet::BitmapPropertySet() :
	BitmapPropertySet(ActivateInstance<BitmapPropertySet>())
{}

inline GUID BitmapDecoder::BmpDecoderId()
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().BmpDecoderId();
}

inline GUID BitmapDecoder::JpegDecoderId()
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().JpegDecoderId();
}

inline GUID BitmapDecoder::PngDecoderId()
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().PngDecoderId();
}

inline GUID BitmapDecoder::TiffDecoderId()
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().TiffDecoderId();
}

inline GUID BitmapDecoder::GifDecoderId()
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().GifDecoderId();
}

inline GUID BitmapDecoder::JpegXRDecoderId()
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().JpegXRDecoderId();
}

inline GUID BitmapDecoder::IcoDecoderId()
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().IcoDecoderId();
}

inline Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> BitmapDecoder::GetDecoderInformationEnumerator()
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().GetDecoderInformationEnumerator();
}

inline Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> BitmapDecoder::CreateAsync(Windows::Storage::Streams::IRandomAccessStream const & stream)
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().CreateAsync(stream);
}

inline Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapDecoder> BitmapDecoder::CreateAsync(GUID const decoderId, Windows::Storage::Streams::IRandomAccessStream const & stream)
{
	return GetActivationFactory<BitmapDecoder, IBitmapDecoderStatics>().CreateAsync(decoderId, stream);
}

inline GUID BitmapEncoder::BmpEncoderId()
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().BmpEncoderId();
}

inline GUID BitmapEncoder::JpegEncoderId()
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().JpegEncoderId();
}

inline GUID BitmapEncoder::PngEncoderId()
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().PngEncoderId();
}

inline GUID BitmapEncoder::TiffEncoderId()
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().TiffEncoderId();
}

inline GUID BitmapEncoder::GifEncoderId()
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().GifEncoderId();
}

inline GUID BitmapEncoder::JpegXREncoderId()
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().JpegXREncoderId();
}

inline Windows::Foundation::Collections::IVectorView<Windows::Graphics::Imaging::BitmapCodecInformation> BitmapEncoder::GetEncoderInformationEnumerator()
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().GetEncoderInformationEnumerator();
}

inline Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> BitmapEncoder::CreateAsync(GUID const encoderId, Windows::Storage::Streams::IRandomAccessStream const & stream)
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().CreateAsync(encoderId, stream);
}

inline Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> BitmapEncoder::CreateAsync(GUID const encoderId, Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Graphics::Imaging::BitmapTypedValue>> const & encodingOptions)
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().CreateAsync(encoderId, stream, encodingOptions);
}

inline Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> BitmapEncoder::CreateForTranscodingAsync(Windows::Storage::Streams::IRandomAccessStream const & stream, Windows::Graphics::Imaging::BitmapDecoder const & bitmapDecoder)
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().CreateForTranscodingAsync(stream, bitmapDecoder);
}

inline Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::BitmapEncoder> BitmapEncoder::CreateForInPlacePropertyEncodingAsync(Windows::Graphics::Imaging::BitmapDecoder const & bitmapDecoder)
{
	return GetActivationFactory<BitmapEncoder, IBitmapEncoderStatics>().CreateForInPlacePropertyEncodingAsync(bitmapDecoder);
}

inline SoftwareBitmap::SoftwareBitmap(Windows::Graphics::Imaging::BitmapPixelFormat const format, int const width, int const height) :
	SoftwareBitmap(GetActivationFactory<SoftwareBitmap, ISoftwareBitmapFactory>().Create(format, width, height))
{}

inline SoftwareBitmap::SoftwareBitmap(Windows::Graphics::Imaging::BitmapPixelFormat const format, int const width, int const height, Windows::Graphics::Imaging::BitmapAlphaMode const alpha) :
	SoftwareBitmap(GetActivationFactory<SoftwareBitmap, ISoftwareBitmapFactory>().CreateWithAlpha(format, width, height, alpha))
{}

inline Windows::Graphics::Imaging::SoftwareBitmap SoftwareBitmap::Copy(Windows::Graphics::Imaging::SoftwareBitmap const & source)
{
	return GetActivationFactory<SoftwareBitmap, ISoftwareBitmapStatics>().Copy(source);
}

inline Windows::Graphics::Imaging::SoftwareBitmap SoftwareBitmap::Convert(Windows::Graphics::Imaging::SoftwareBitmap const & source, Windows::Graphics::Imaging::BitmapPixelFormat const format)
{
	return GetActivationFactory<SoftwareBitmap, ISoftwareBitmapStatics>().Convert(source, format);
}

inline Windows::Graphics::Imaging::SoftwareBitmap SoftwareBitmap::Convert(Windows::Graphics::Imaging::SoftwareBitmap const & source, Windows::Graphics::Imaging::BitmapPixelFormat const format, Windows::Graphics::Imaging::BitmapAlphaMode const alpha)
{
	return GetActivationFactory<SoftwareBitmap, ISoftwareBitmapStatics>().Convert(source, format, alpha);
}

inline Windows::Graphics::Imaging::SoftwareBitmap SoftwareBitmap::CreateCopyFromBuffer(Windows::Storage::Streams::IBuffer const & source, Windows::Graphics::Imaging::BitmapPixelFormat const format, int const width, int const height)
{
	return GetActivationFactory<SoftwareBitmap, ISoftwareBitmapStatics>().CreateCopyFromBuffer(source, format, width, height);
}

inline Windows::Graphics::Imaging::SoftwareBitmap SoftwareBitmap::CreateCopyFromBuffer(Windows::Storage::Streams::IBuffer const & source, Windows::Graphics::Imaging::BitmapPixelFormat const format, int const width, int const height, Windows::Graphics::Imaging::BitmapAlphaMode const alpha)
{
	return GetActivationFactory<SoftwareBitmap, ISoftwareBitmapStatics>().CreateCopyFromBuffer(source, format, width, height, alpha);
}

inline Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::SoftwareBitmap> SoftwareBitmap::CreateCopyFromSurfaceAsync(Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const & surface)
{
	return GetActivationFactory<SoftwareBitmap, ISoftwareBitmapStatics>().CreateCopyFromSurfaceAsync(surface);
}

inline Windows::Foundation::IAsyncOperation<Windows::Graphics::Imaging::SoftwareBitmap> SoftwareBitmap::CreateCopyFromSurfaceAsync(Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const & surface, Windows::Graphics::Imaging::BitmapAlphaMode const alpha)
{
	return GetActivationFactory<SoftwareBitmap, ISoftwareBitmapStatics>().CreateCopyFromSurfaceAsync(surface, alpha);
}

}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Printing {

inline String StandardPrintTaskOptions::MediaSize()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().MediaSize();
}

inline String StandardPrintTaskOptions::MediaType()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().MediaType();
}

inline String StandardPrintTaskOptions::Orientation()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().Orientation();
}

inline String StandardPrintTaskOptions::PrintQuality()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().PrintQuality();
}

inline String StandardPrintTaskOptions::ColorMode()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().ColorMode();
}

inline String StandardPrintTaskOptions::Duplex()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().Duplex();
}

inline String StandardPrintTaskOptions::Collation()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().Collation();
}

inline String StandardPrintTaskOptions::Staple()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().Staple();
}

inline String StandardPrintTaskOptions::HolePunch()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().HolePunch();
}

inline String StandardPrintTaskOptions::Binding()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().Binding();
}

inline String StandardPrintTaskOptions::Copies()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().Copies();
}

inline String StandardPrintTaskOptions::NUp()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().NUp();
}

inline String StandardPrintTaskOptions::InputBin()
{
	return GetActivationFactory<StandardPrintTaskOptions, IStandardPrintTaskOptionsStatic>().InputBin();
}

inline Windows::Graphics::Printing::PrintManager PrintManager::GetForCurrentView()
{
	return GetActivationFactory<PrintManager, IPrintManagerStatic>().GetForCurrentView();
}

inline Windows::Foundation::IAsyncOperation<bool> PrintManager::ShowPrintUIAsync()
{
	return GetActivationFactory<PrintManager, IPrintManagerStatic>().ShowPrintUIAsync();
}

}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Printing3D {

inline Windows::Graphics::Printing3D::Print3DManager Print3DManager::GetForCurrentView()
{
	return GetActivationFactory<Print3DManager, IPrint3DManagerStatics>().GetForCurrentView();
}

inline Windows::Foundation::IAsyncOperation<bool> Print3DManager::ShowPrintUIAsync()
{
	return GetActivationFactory<Print3DManager, IPrint3DManagerStatics>().ShowPrintUIAsync();
}

inline Printing3DTextureResource::Printing3DTextureResource() :
	Printing3DTextureResource(ActivateInstance<Printing3DTextureResource>())
{}

inline Printing3DComponent::Printing3DComponent() :
	Printing3DComponent(ActivateInstance<Printing3DComponent>())
{}

inline Printing3DMesh::Printing3DMesh() :
	Printing3DMesh(ActivateInstance<Printing3DMesh>())
{}

inline Printing3DComponentWithMatrix::Printing3DComponentWithMatrix() :
	Printing3DComponentWithMatrix(ActivateInstance<Printing3DComponentWithMatrix>())
{}

inline Printing3DColorMaterial::Printing3DColorMaterial() :
	Printing3DColorMaterial(ActivateInstance<Printing3DColorMaterial>())
{}

inline Printing3DModelTexture::Printing3DModelTexture() :
	Printing3DModelTexture(ActivateInstance<Printing3DModelTexture>())
{}

inline Printing3DBaseMaterialGroup::Printing3DBaseMaterialGroup(unsigned const MaterialGroupId) :
	Printing3DBaseMaterialGroup(GetActivationFactory<Printing3DBaseMaterialGroup, IPrinting3DBaseMaterialGroupFactory>().Create(MaterialGroupId))
{}

inline Printing3DBaseMaterial::Printing3DBaseMaterial() :
	Printing3DBaseMaterial(ActivateInstance<Printing3DBaseMaterial>())
{}

inline String Printing3DBaseMaterial::Abs()
{
	return GetActivationFactory<Printing3DBaseMaterial, IPrinting3DBaseMaterialStatics>().Abs();
}

inline String Printing3DBaseMaterial::Pla()
{
	return GetActivationFactory<Printing3DBaseMaterial, IPrinting3DBaseMaterialStatics>().Pla();
}

inline Printing3DColorMaterialGroup::Printing3DColorMaterialGroup(unsigned const MaterialGroupId) :
	Printing3DColorMaterialGroup(GetActivationFactory<Printing3DColorMaterialGroup, IPrinting3DColorMaterialGroupFactory>().Create(MaterialGroupId))
{}

inline Printing3DTexture2CoordMaterialGroup::Printing3DTexture2CoordMaterialGroup(unsigned const MaterialGroupId) :
	Printing3DTexture2CoordMaterialGroup(GetActivationFactory<Printing3DTexture2CoordMaterialGroup, IPrinting3DTexture2CoordMaterialGroupFactory>().Create(MaterialGroupId))
{}

inline Printing3DTexture2CoordMaterial::Printing3DTexture2CoordMaterial() :
	Printing3DTexture2CoordMaterial(ActivateInstance<Printing3DTexture2CoordMaterial>())
{}

inline Printing3DCompositeMaterialGroup::Printing3DCompositeMaterialGroup(unsigned const MaterialGroupId) :
	Printing3DCompositeMaterialGroup(GetActivationFactory<Printing3DCompositeMaterialGroup, IPrinting3DCompositeMaterialGroupFactory>().Create(MaterialGroupId))
{}

inline Printing3DCompositeMaterial::Printing3DCompositeMaterial() :
	Printing3DCompositeMaterial(ActivateInstance<Printing3DCompositeMaterial>())
{}

inline Printing3DMultiplePropertyMaterialGroup::Printing3DMultiplePropertyMaterialGroup(unsigned const MaterialGroupId) :
	Printing3DMultiplePropertyMaterialGroup(GetActivationFactory<Printing3DMultiplePropertyMaterialGroup, IPrinting3DMultiplePropertyMaterialGroupFactory>().Create(MaterialGroupId))
{}

inline Printing3DMultiplePropertyMaterial::Printing3DMultiplePropertyMaterial() :
	Printing3DMultiplePropertyMaterial(ActivateInstance<Printing3DMultiplePropertyMaterial>())
{}

inline Printing3DMaterial::Printing3DMaterial() :
	Printing3DMaterial(ActivateInstance<Printing3DMaterial>())
{}

inline Printing3DModel::Printing3DModel() :
	Printing3DModel(ActivateInstance<Printing3DModel>())
{}

inline Printing3D3MFPackage::Printing3D3MFPackage() :
	Printing3D3MFPackage(ActivateInstance<Printing3D3MFPackage>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Graphics::Printing3D::Printing3D3MFPackage> Printing3D3MFPackage::LoadAsync(Windows::Storage::Streams::IRandomAccessStream const & value)
{
	return GetActivationFactory<Printing3D3MFPackage, IPrinting3D3MFPackageStatics>().LoadAsync(value);
}

}}}}

namespace winrt { namespace Windows { namespace Graphics { namespace Printing { namespace OptionDetails {

inline Windows::Graphics::Printing::OptionDetails::PrintTaskOptionDetails PrintTaskOptionDetails::GetFromPrintTaskOptions(Windows::Graphics::Printing::PrintTaskOptions const & printTaskOptions)
{
	return GetActivationFactory<PrintTaskOptionDetails, IPrintTaskOptionDetailsStatic>().GetFromPrintTaskOptions(printTaskOptions);
}

}}}}}

namespace winrt { namespace Windows { namespace Management { namespace Core {

inline Windows::Storage::ApplicationData ApplicationDataManager::CreateForPackageFamily(StringReference const & packageFamilyName)
{
	return GetActivationFactory<ApplicationDataManager, IApplicationDataManagerStatics>().CreateForPackageFamily(packageFamilyName);
}

}}}}

namespace winrt { namespace Windows { namespace Management { namespace Deployment {

inline PackageVolume::PackageVolume() :
	PackageVolume(ActivateInstance<PackageVolume>())
{}

inline PackageManager::PackageManager() :
	PackageManager(ActivateInstance<PackageManager>())
{}

}}}}

namespace winrt { namespace Windows { namespace Management { namespace Deployment { namespace Preview {

inline Windows::Management::Deployment::Preview::InstalledClassicAppInfo ClassicAppManager::FindInstalledApp(StringReference const & appUninstallKey)
{
	return GetActivationFactory<ClassicAppManager, IClassicAppManagerStatics>().FindInstalledApp(appUninstallKey);
}

}}}}}

namespace winrt { namespace Windows { namespace Management { namespace Orchestration {

inline Windows::Management::Orchestration::CurrentAppOrchestration CurrentAppOrchestration::GetForCurrentView()
{
	return GetActivationFactory<CurrentAppOrchestration, ICurrentAppOrchestrationStatics>().GetForCurrentView();
}

}}}}

namespace winrt { namespace Windows { namespace Management { namespace Workplace {

inline bool MdmPolicy::IsBrowserAllowed()
{
	return GetActivationFactory<MdmPolicy, IMdmAllowPolicyStatics>().IsBrowserAllowed();
}

inline bool MdmPolicy::IsCameraAllowed()
{
	return GetActivationFactory<MdmPolicy, IMdmAllowPolicyStatics>().IsCameraAllowed();
}

inline bool MdmPolicy::IsMicrosoftAccountAllowed()
{
	return GetActivationFactory<MdmPolicy, IMdmAllowPolicyStatics>().IsMicrosoftAccountAllowed();
}

inline bool MdmPolicy::IsStoreAllowed()
{
	return GetActivationFactory<MdmPolicy, IMdmAllowPolicyStatics>().IsStoreAllowed();
}

inline bool WorkplaceSettings::IsMicrosoftAccountOptional()
{
	return GetActivationFactory<WorkplaceSettings, IWorkplaceSettingsStatics>().IsMicrosoftAccountOptional();
}

}}}}

namespace winrt { namespace Windows { namespace Media {

inline VideoFrame::VideoFrame(Windows::Graphics::Imaging::BitmapPixelFormat const format, int const width, int const height) :
	VideoFrame(GetActivationFactory<VideoFrame, IVideoFrameFactory>().Create(format, width, height))
{}

inline VideoFrame::VideoFrame(Windows::Graphics::Imaging::BitmapPixelFormat const format, int const width, int const height, Windows::Graphics::Imaging::BitmapAlphaMode const alpha) :
	VideoFrame(GetActivationFactory<VideoFrame, IVideoFrameFactory>().CreateWithAlpha(format, width, height, alpha))
{}

inline AudioFrame::AudioFrame(unsigned const capacity) :
	AudioFrame(GetActivationFactory<AudioFrame, IAudioFrameFactory>().Create(capacity))
{}

inline long long MediaControl::SoundLevelChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().SoundLevelChanged(handler);
}

template <typename F> long long MediaControl::SoundLevelChanged(F handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().SoundLevelChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void MediaControl::SoundLevelChanged(long long const cookie)
{
	GetActivationFactory<MediaControl, IMediaControl>().SoundLevelChanged(cookie);
}

inline long long MediaControl::PlayPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().PlayPressed(handler);
}

template <typename F> long long MediaControl::PlayPressed(F handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().PlayPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void MediaControl::PlayPressed(long long const cookie)
{
	GetActivationFactory<MediaControl, IMediaControl>().PlayPressed(cookie);
}

inline long long MediaControl::PausePressed(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().PausePressed(handler);
}

template <typename F> long long MediaControl::PausePressed(F handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().PausePressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void MediaControl::PausePressed(long long const cookie)
{
	GetActivationFactory<MediaControl, IMediaControl>().PausePressed(cookie);
}

inline long long MediaControl::StopPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().StopPressed(handler);
}

template <typename F> long long MediaControl::StopPressed(F handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().StopPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void MediaControl::StopPressed(long long const cookie)
{
	GetActivationFactory<MediaControl, IMediaControl>().StopPressed(cookie);
}

inline long long MediaControl::PlayPauseTogglePressed(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().PlayPauseTogglePressed(handler);
}

template <typename F> long long MediaControl::PlayPauseTogglePressed(F handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().PlayPauseTogglePressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void MediaControl::PlayPauseTogglePressed(long long const cookie)
{
	GetActivationFactory<MediaControl, IMediaControl>().PlayPauseTogglePressed(cookie);
}

inline long long MediaControl::RecordPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().RecordPressed(handler);
}

template <typename F> long long MediaControl::RecordPressed(F handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().RecordPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void MediaControl::RecordPressed(long long const cookie)
{
	GetActivationFactory<MediaControl, IMediaControl>().RecordPressed(cookie);
}

inline long long MediaControl::NextTrackPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().NextTrackPressed(handler);
}

template <typename F> long long MediaControl::NextTrackPressed(F handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().NextTrackPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void MediaControl::NextTrackPressed(long long const cookie)
{
	GetActivationFactory<MediaControl, IMediaControl>().NextTrackPressed(cookie);
}

inline long long MediaControl::PreviousTrackPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().PreviousTrackPressed(handler);
}

template <typename F> long long MediaControl::PreviousTrackPressed(F handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().PreviousTrackPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void MediaControl::PreviousTrackPressed(long long const cookie)
{
	GetActivationFactory<MediaControl, IMediaControl>().PreviousTrackPressed(cookie);
}

inline long long MediaControl::FastForwardPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().FastForwardPressed(handler);
}

template <typename F> long long MediaControl::FastForwardPressed(F handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().FastForwardPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void MediaControl::FastForwardPressed(long long const cookie)
{
	GetActivationFactory<MediaControl, IMediaControl>().FastForwardPressed(cookie);
}

inline long long MediaControl::RewindPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().RewindPressed(handler);
}

template <typename F> long long MediaControl::RewindPressed(F handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().RewindPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void MediaControl::RewindPressed(long long const cookie)
{
	GetActivationFactory<MediaControl, IMediaControl>().RewindPressed(cookie);
}

inline long long MediaControl::ChannelUpPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().ChannelUpPressed(handler);
}

template <typename F> long long MediaControl::ChannelUpPressed(F handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().ChannelUpPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void MediaControl::ChannelUpPressed(long long const cookie)
{
	GetActivationFactory<MediaControl, IMediaControl>().ChannelUpPressed(cookie);
}

inline long long MediaControl::ChannelDownPressed(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().ChannelDownPressed(handler);
}

template <typename F> long long MediaControl::ChannelDownPressed(F handler)
{
	return GetActivationFactory<MediaControl, IMediaControl>().ChannelDownPressed(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void MediaControl::ChannelDownPressed(long long const cookie)
{
	GetActivationFactory<MediaControl, IMediaControl>().ChannelDownPressed(cookie);
}

inline Windows::Media::SoundLevel MediaControl::SoundLevel()
{
	return GetActivationFactory<MediaControl, IMediaControl>().SoundLevel();
}

inline void MediaControl::TrackName(StringReference const & value)
{
	GetActivationFactory<MediaControl, IMediaControl>().TrackName(value);
}

inline String MediaControl::TrackName()
{
	return GetActivationFactory<MediaControl, IMediaControl>().TrackName();
}

inline void MediaControl::ArtistName(StringReference const & value)
{
	GetActivationFactory<MediaControl, IMediaControl>().ArtistName(value);
}

inline String MediaControl::ArtistName()
{
	return GetActivationFactory<MediaControl, IMediaControl>().ArtistName();
}

inline void MediaControl::IsPlaying(bool const value)
{
	GetActivationFactory<MediaControl, IMediaControl>().IsPlaying(value);
}

inline bool MediaControl::IsPlaying()
{
	return GetActivationFactory<MediaControl, IMediaControl>().IsPlaying();
}

inline void MediaControl::AlbumArt(Windows::Foundation::Uri const & value)
{
	GetActivationFactory<MediaControl, IMediaControl>().AlbumArt(value);
}

inline Windows::Foundation::Uri MediaControl::AlbumArt()
{
	return GetActivationFactory<MediaControl, IMediaControl>().AlbumArt();
}

inline String MediaMarkerTypes::Bookmark()
{
	return GetActivationFactory<MediaMarkerTypes, IMediaMarkerTypesStatics>().Bookmark();
}

inline SystemMediaTransportControlsTimelineProperties::SystemMediaTransportControlsTimelineProperties() :
	SystemMediaTransportControlsTimelineProperties(ActivateInstance<SystemMediaTransportControlsTimelineProperties>())
{}

inline Windows::Media::SystemMediaTransportControls SystemMediaTransportControls::GetForCurrentView()
{
	return GetActivationFactory<SystemMediaTransportControls, ISystemMediaTransportControlsStatics>().GetForCurrentView();
}

inline MediaExtensionManager::MediaExtensionManager() :
	MediaExtensionManager(ActivateInstance<MediaExtensionManager>())
{}

inline String VideoEffects::VideoStabilization()
{
	return GetActivationFactory<VideoEffects, IVideoEffectsStatics>().VideoStabilization();
}

}}}

namespace winrt { namespace Windows { namespace Media { namespace Audio {

inline Windows::Foundation::IAsyncOperation<Windows::Media::Audio::CreateAudioGraphResult> AudioGraph::CreateAsync(Windows::Media::Audio::AudioGraphSettings const & settings)
{
	return GetActivationFactory<AudioGraph, IAudioGraphStatics>().CreateAsync(settings);
}

inline AudioGraphSettings::AudioGraphSettings(Windows::Media::Render::AudioRenderCategory const audioRenderCategory) :
	AudioGraphSettings(GetActivationFactory<AudioGraphSettings, IAudioGraphSettingsFactory>().Create(audioRenderCategory))
{}

inline EqualizerEffectDefinition::EqualizerEffectDefinition(Windows::Media::Audio::AudioGraph const & audioGraph) :
	EqualizerEffectDefinition(GetActivationFactory<EqualizerEffectDefinition, IEqualizerEffectDefinitionFactory>().Create(audioGraph))
{}

inline ReverbEffectDefinition::ReverbEffectDefinition(Windows::Media::Audio::AudioGraph const & audioGraph) :
	ReverbEffectDefinition(GetActivationFactory<ReverbEffectDefinition, IReverbEffectDefinitionFactory>().Create(audioGraph))
{}

inline EchoEffectDefinition::EchoEffectDefinition(Windows::Media::Audio::AudioGraph const & audioGraph) :
	EchoEffectDefinition(GetActivationFactory<EchoEffectDefinition, IEchoEffectDefinitionFactory>().Create(audioGraph))
{}

inline LimiterEffectDefinition::LimiterEffectDefinition(Windows::Media::Audio::AudioGraph const & audioGraph) :
	LimiterEffectDefinition(GetActivationFactory<LimiterEffectDefinition, ILimiterEffectDefinitionFactory>().Create(audioGraph))
{}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Capture {

inline Windows::Media::Capture::AppCaptureSettings AppCaptureManager::GetCurrentSettings()
{
	return GetActivationFactory<AppCaptureManager, IAppCaptureManagerStatics>().GetCurrentSettings();
}

inline void AppCaptureManager::ApplySettings(Windows::Media::Capture::AppCaptureSettings const & appCaptureSettings)
{
	GetActivationFactory<AppCaptureManager, IAppCaptureManagerStatics>().ApplySettings(appCaptureSettings);
}

inline CameraCaptureUI::CameraCaptureUI() :
	CameraCaptureUI(ActivateInstance<CameraCaptureUI>())
{}

inline void CameraOptionsUI::Show(Windows::Media::Capture::MediaCapture const & mediaCapture)
{
	GetActivationFactory<CameraOptionsUI, ICameraOptionsUIStatics>().Show(mediaCapture);
}

inline Windows::Media::Capture::AppCapture AppCapture::GetForCurrentView()
{
	return GetActivationFactory<AppCapture, IAppCaptureStatics>().GetForCurrentView();
}

inline MediaCapture::MediaCapture() :
	MediaCapture(ActivateInstance<MediaCapture>())
{}

inline bool MediaCapture::IsVideoProfileSupported(StringReference const & videoDeviceId)
{
	return GetActivationFactory<MediaCapture, IMediaCaptureStatics>().IsVideoProfileSupported(videoDeviceId);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfile> MediaCapture::FindAllVideoProfiles(StringReference const & videoDeviceId)
{
	return GetActivationFactory<MediaCapture, IMediaCaptureStatics>().FindAllVideoProfiles(videoDeviceId);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfile> MediaCapture::FindConcurrentProfiles(StringReference const & videoDeviceId)
{
	return GetActivationFactory<MediaCapture, IMediaCaptureStatics>().FindConcurrentProfiles(videoDeviceId);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Media::Capture::MediaCaptureVideoProfile> MediaCapture::FindKnownVideoProfiles(StringReference const & videoDeviceId, Windows::Media::Capture::KnownVideoProfile const name)
{
	return GetActivationFactory<MediaCapture, IMediaCaptureStatics>().FindKnownVideoProfiles(videoDeviceId, name);
}

inline MediaCaptureInitializationSettings::MediaCaptureInitializationSettings() :
	MediaCaptureInitializationSettings(ActivateInstance<MediaCaptureInitializationSettings>())
{}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Capture { namespace Core {

}}}}}

namespace winrt { namespace Windows { namespace Media { namespace Casting {

inline String CastingDevice::GetDeviceSelector(Windows::Media::Casting::CastingPlaybackTypes const type)
{
	return GetActivationFactory<CastingDevice, ICastingDeviceStatics>().GetDeviceSelector(type);
}

inline Windows::Foundation::IAsyncOperation<String> CastingDevice::GetDeviceSelectorFromCastingSourceAsync(Windows::Media::Casting::CastingSource const & castingSource)
{
	return GetActivationFactory<CastingDevice, ICastingDeviceStatics>().GetDeviceSelectorFromCastingSourceAsync(castingSource);
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::Casting::CastingDevice> CastingDevice::FromIdAsync(StringReference const & value)
{
	return GetActivationFactory<CastingDevice, ICastingDeviceStatics>().FromIdAsync(value);
}

inline Windows::Foundation::IAsyncOperation<bool> CastingDevice::DeviceInfoSupportsCastingAsync(Windows::Devices::Enumeration::DeviceInformation const & device)
{
	return GetActivationFactory<CastingDevice, ICastingDeviceStatics>().DeviceInfoSupportsCastingAsync(device);
}

inline CastingDevicePicker::CastingDevicePicker() :
	CastingDevicePicker(ActivateInstance<CastingDevicePicker>())
{}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace ClosedCaptioning {

inline Windows::Media::ClosedCaptioning::ClosedCaptionColor ClosedCaptionProperties::FontColor()
{
	return GetActivationFactory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>().FontColor();
}

inline Windows::UI::Color ClosedCaptionProperties::ComputedFontColor()
{
	return GetActivationFactory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>().ComputedFontColor();
}

inline Windows::Media::ClosedCaptioning::ClosedCaptionOpacity ClosedCaptionProperties::FontOpacity()
{
	return GetActivationFactory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>().FontOpacity();
}

inline Windows::Media::ClosedCaptioning::ClosedCaptionSize ClosedCaptionProperties::FontSize()
{
	return GetActivationFactory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>().FontSize();
}

inline Windows::Media::ClosedCaptioning::ClosedCaptionStyle ClosedCaptionProperties::FontStyle()
{
	return GetActivationFactory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>().FontStyle();
}

inline Windows::Media::ClosedCaptioning::ClosedCaptionEdgeEffect ClosedCaptionProperties::FontEffect()
{
	return GetActivationFactory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>().FontEffect();
}

inline Windows::Media::ClosedCaptioning::ClosedCaptionColor ClosedCaptionProperties::BackgroundColor()
{
	return GetActivationFactory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>().BackgroundColor();
}

inline Windows::UI::Color ClosedCaptionProperties::ComputedBackgroundColor()
{
	return GetActivationFactory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>().ComputedBackgroundColor();
}

inline Windows::Media::ClosedCaptioning::ClosedCaptionOpacity ClosedCaptionProperties::BackgroundOpacity()
{
	return GetActivationFactory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>().BackgroundOpacity();
}

inline Windows::Media::ClosedCaptioning::ClosedCaptionColor ClosedCaptionProperties::RegionColor()
{
	return GetActivationFactory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>().RegionColor();
}

inline Windows::UI::Color ClosedCaptionProperties::ComputedRegionColor()
{
	return GetActivationFactory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>().ComputedRegionColor();
}

inline Windows::Media::ClosedCaptioning::ClosedCaptionOpacity ClosedCaptionProperties::RegionOpacity()
{
	return GetActivationFactory<ClosedCaptionProperties, IClosedCaptionPropertiesStatics>().RegionOpacity();
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace ContentRestrictions {

inline RatedContentDescription::RatedContentDescription(StringReference const & id, StringReference const & title, Windows::Media::ContentRestrictions::RatedContentCategory const category) :
	RatedContentDescription(GetActivationFactory<RatedContentDescription, IRatedContentDescriptionFactory>().Create(id, title, category))
{}

inline RatedContentRestrictions::RatedContentRestrictions() :
	RatedContentRestrictions(ActivateInstance<RatedContentRestrictions>())
{}

inline RatedContentRestrictions::RatedContentRestrictions(unsigned const maxAgeRating) :
	RatedContentRestrictions(GetActivationFactory<RatedContentRestrictions, IRatedContentRestrictionsFactory>().CreateWithMaxAgeRating(maxAgeRating))
{}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Core {

inline MediaStreamSource::MediaStreamSource(Windows::Media::Core::IMediaStreamDescriptor const & descriptor) :
	MediaStreamSource(GetActivationFactory<MediaStreamSource, IMediaStreamSourceFactory>().CreateFromDescriptor(descriptor))
{}

inline MediaStreamSource::MediaStreamSource(Windows::Media::Core::IMediaStreamDescriptor const & descriptor, Windows::Media::Core::IMediaStreamDescriptor const & descriptor2) :
	MediaStreamSource(GetActivationFactory<MediaStreamSource, IMediaStreamSourceFactory>().CreateFromDescriptors(descriptor, descriptor2))
{}

inline Windows::Media::Core::MediaSource MediaSource::CreateFromMediaBinder(Windows::Media::Core::MediaBinder const & binder)
{
	return GetActivationFactory<MediaSource, IMediaSourceStatics2>().CreateFromMediaBinder(binder);
}

inline Windows::Media::Core::MediaSource MediaSource::CreateFromAdaptiveMediaSource(Windows::Media::Streaming::Adaptive::AdaptiveMediaSource const & mediaSource)
{
	return GetActivationFactory<MediaSource, IMediaSourceStatics>().CreateFromAdaptiveMediaSource(mediaSource);
}

inline Windows::Media::Core::MediaSource MediaSource::CreateFromMediaStreamSource(Windows::Media::Core::MediaStreamSource const & mediaSource)
{
	return GetActivationFactory<MediaSource, IMediaSourceStatics>().CreateFromMediaStreamSource(mediaSource);
}

inline Windows::Media::Core::MediaSource MediaSource::CreateFromMseStreamSource(Windows::Media::Core::MseStreamSource const & mediaSource)
{
	return GetActivationFactory<MediaSource, IMediaSourceStatics>().CreateFromMseStreamSource(mediaSource);
}

inline Windows::Media::Core::MediaSource MediaSource::CreateFromIMediaSource(Windows::Media::Core::IMediaSource const & mediaSource)
{
	return GetActivationFactory<MediaSource, IMediaSourceStatics>().CreateFromIMediaSource(mediaSource);
}

inline Windows::Media::Core::MediaSource MediaSource::CreateFromStorageFile(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<MediaSource, IMediaSourceStatics>().CreateFromStorageFile(file);
}

inline Windows::Media::Core::MediaSource MediaSource::CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream, StringReference const & contentType)
{
	return GetActivationFactory<MediaSource, IMediaSourceStatics>().CreateFromStream(stream, contentType);
}

inline Windows::Media::Core::MediaSource MediaSource::CreateFromStreamReference(Windows::Storage::Streams::IRandomAccessStreamReference const & stream, StringReference const & contentType)
{
	return GetActivationFactory<MediaSource, IMediaSourceStatics>().CreateFromStreamReference(stream, contentType);
}

inline Windows::Media::Core::MediaSource MediaSource::CreateFromUri(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<MediaSource, IMediaSourceStatics>().CreateFromUri(uri);
}

inline TimedMetadataTrack::TimedMetadataTrack(StringReference const & id, StringReference const & language, Windows::Media::Core::TimedMetadataKind const kind) :
	TimedMetadataTrack(GetActivationFactory<TimedMetadataTrack, ITimedMetadataTrackFactory>().Create(id, language, kind))
{}

inline AudioStreamDescriptor::AudioStreamDescriptor(Windows::Media::MediaProperties::AudioEncodingProperties const & encodingProperties) :
	AudioStreamDescriptor(GetActivationFactory<AudioStreamDescriptor, IAudioStreamDescriptorFactory>().Create(encodingProperties))
{}

inline VideoStreamDescriptor::VideoStreamDescriptor(Windows::Media::MediaProperties::VideoEncodingProperties const & encodingProperties) :
	VideoStreamDescriptor(GetActivationFactory<VideoStreamDescriptor, IVideoStreamDescriptorFactory>().Create(encodingProperties))
{}

inline Windows::Media::Core::MediaStreamSample MediaStreamSample::CreateFromBuffer(Windows::Storage::Streams::IBuffer const & buffer, Windows::Foundation::TimeSpan const & timestamp)
{
	return GetActivationFactory<MediaStreamSample, IMediaStreamSampleStatics>().CreateFromBuffer(buffer, timestamp);
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::Core::MediaStreamSample> MediaStreamSample::CreateFromStreamAsync(Windows::Storage::Streams::IInputStream const & stream, unsigned const count, Windows::Foundation::TimeSpan const & timestamp)
{
	return GetActivationFactory<MediaStreamSample, IMediaStreamSampleStatics>().CreateFromStreamAsync(stream, count, timestamp);
}

inline MseStreamSource::MseStreamSource() :
	MseStreamSource(ActivateInstance<MseStreamSource>())
{}

inline bool MseStreamSource::IsContentTypeSupported(StringReference const & contentType)
{
	return GetActivationFactory<MseStreamSource, IMseStreamSourceStatics>().IsContentTypeSupported(contentType);
}

inline SceneAnalysisEffectDefinition::SceneAnalysisEffectDefinition() :
	SceneAnalysisEffectDefinition(ActivateInstance<SceneAnalysisEffectDefinition>())
{}

inline FaceDetectionEffectDefinition::FaceDetectionEffectDefinition() :
	FaceDetectionEffectDefinition(ActivateInstance<FaceDetectionEffectDefinition>())
{}

inline VideoStabilizationEffectDefinition::VideoStabilizationEffectDefinition() :
	VideoStabilizationEffectDefinition(ActivateInstance<VideoStabilizationEffectDefinition>())
{}

inline MediaBinder::MediaBinder() :
	MediaBinder(ActivateInstance<MediaBinder>())
{}

inline Windows::Media::Core::TimedTextSource TimedTextSource::CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream)
{
	return GetActivationFactory<TimedTextSource, ITimedTextSourceStatics>().CreateFromStream(stream);
}

inline Windows::Media::Core::TimedTextSource TimedTextSource::CreateFromUri(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<TimedTextSource, ITimedTextSourceStatics>().CreateFromUri(uri);
}

inline Windows::Media::Core::TimedTextSource TimedTextSource::CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream, StringReference const & defaultLanguage)
{
	return GetActivationFactory<TimedTextSource, ITimedTextSourceStatics>().CreateFromStream(stream, defaultLanguage);
}

inline Windows::Media::Core::TimedTextSource TimedTextSource::CreateFromUri(Windows::Foundation::Uri const & uri, StringReference const & defaultLanguage)
{
	return GetActivationFactory<TimedTextSource, ITimedTextSourceStatics>().CreateFromUri(uri, defaultLanguage);
}

inline TimedTextRegion::TimedTextRegion() :
	TimedTextRegion(ActivateInstance<TimedTextRegion>())
{}

inline TimedTextStyle::TimedTextStyle() :
	TimedTextStyle(ActivateInstance<TimedTextStyle>())
{}

inline TimedTextLine::TimedTextLine() :
	TimedTextLine(ActivateInstance<TimedTextLine>())
{}

inline TimedTextSubformat::TimedTextSubformat() :
	TimedTextSubformat(ActivateInstance<TimedTextSubformat>())
{}

inline TimedTextCue::TimedTextCue() :
	TimedTextCue(ActivateInstance<TimedTextCue>())
{}

inline DataCue::DataCue() :
	DataCue(ActivateInstance<DataCue>())
{}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Devices {

inline Windows::Media::Devices::CallControl CallControl::GetDefault()
{
	return GetActivationFactory<CallControl, ICallControlStatics>().GetDefault();
}

inline Windows::Media::Devices::CallControl CallControl::FromId(StringReference const & deviceId)
{
	return GetActivationFactory<CallControl, ICallControlStatics>().FromId(deviceId);
}

inline String MediaDevice::GetAudioCaptureSelector()
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().GetAudioCaptureSelector();
}

inline String MediaDevice::GetAudioRenderSelector()
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().GetAudioRenderSelector();
}

inline String MediaDevice::GetVideoCaptureSelector()
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().GetVideoCaptureSelector();
}

inline String MediaDevice::GetDefaultAudioCaptureId(Windows::Media::Devices::AudioDeviceRole const role)
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().GetDefaultAudioCaptureId(role);
}

inline String MediaDevice::GetDefaultAudioRenderId(Windows::Media::Devices::AudioDeviceRole const role)
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().GetDefaultAudioRenderId(role);
}

inline long long MediaDevice::DefaultAudioCaptureDeviceChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs> const & handler)
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().DefaultAudioCaptureDeviceChanged(handler);
}

template <typename F> long long MediaDevice::DefaultAudioCaptureDeviceChanged(F handler)
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().DefaultAudioCaptureDeviceChanged(Windows::Foundation::TypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioCaptureDeviceChangedEventArgs>(handler));
}

inline void MediaDevice::DefaultAudioCaptureDeviceChanged(long long const cookie)
{
	GetActivationFactory<MediaDevice, IMediaDeviceStatics>().DefaultAudioCaptureDeviceChanged(cookie);
}

inline long long MediaDevice::DefaultAudioRenderDeviceChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs> const & handler)
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().DefaultAudioRenderDeviceChanged(handler);
}

template <typename F> long long MediaDevice::DefaultAudioRenderDeviceChanged(F handler)
{
	return GetActivationFactory<MediaDevice, IMediaDeviceStatics>().DefaultAudioRenderDeviceChanged(Windows::Foundation::TypedEventHandler<IInspectable, Windows::Media::Devices::DefaultAudioRenderDeviceChangedEventArgs>(handler));
}

inline void MediaDevice::DefaultAudioRenderDeviceChanged(long long const cookie)
{
	GetActivationFactory<MediaDevice, IMediaDeviceStatics>().DefaultAudioRenderDeviceChanged(cookie);
}

inline ZoomSettings::ZoomSettings() :
	ZoomSettings(ActivateInstance<ZoomSettings>())
{}

inline FocusSettings::FocusSettings() :
	FocusSettings(ActivateInstance<FocusSettings>())
{}

inline RegionOfInterest::RegionOfInterest() :
	RegionOfInterest(ActivateInstance<RegionOfInterest>())
{}

inline AdvancedPhotoCaptureSettings::AdvancedPhotoCaptureSettings() :
	AdvancedPhotoCaptureSettings(ActivateInstance<AdvancedPhotoCaptureSettings>())
{}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Devices { namespace Core {

inline CameraIntrinsics::CameraIntrinsics(Windows::Foundation::Numerics::Vector2 const & focalLength, Windows::Foundation::Numerics::Vector2 const & principalPoint, Windows::Foundation::Numerics::Vector3 const & radialDistortion, Windows::Foundation::Numerics::Vector2 const & tangentialDistortion, unsigned const imageWidth, unsigned const imageHeight) :
	CameraIntrinsics(GetActivationFactory<CameraIntrinsics, ICameraIntrinsicsFactory>().Create(focalLength, principalPoint, radialDistortion, tangentialDistortion, imageWidth, imageHeight))
{}

inline FrameController::FrameController() :
	FrameController(ActivateInstance<FrameController>())
{}

}}}}}

namespace winrt { namespace Windows { namespace Media { namespace DialProtocol {

inline String DialDevice::GetDeviceSelector(StringReference const & appName)
{
	return GetActivationFactory<DialDevice, IDialDeviceStatics>().GetDeviceSelector(appName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::DialProtocol::DialDevice> DialDevice::FromIdAsync(StringReference const & value)
{
	return GetActivationFactory<DialDevice, IDialDeviceStatics>().FromIdAsync(value);
}

inline Windows::Foundation::IAsyncOperation<bool> DialDevice::DeviceInfoSupportsDialAsync(Windows::Devices::Enumeration::DeviceInformation const & device)
{
	return GetActivationFactory<DialDevice, IDialDeviceStatics>().DeviceInfoSupportsDialAsync(device);
}

inline DialDevicePicker::DialDevicePicker() :
	DialDevicePicker(ActivateInstance<DialDevicePicker>())
{}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Editing {

inline MediaOverlay::MediaOverlay(Windows::Media::Editing::MediaClip const & clip) :
	MediaOverlay(GetActivationFactory<MediaOverlay, IMediaOverlayFactory>().Create(clip))
{}

inline MediaOverlay::MediaOverlay(Windows::Media::Editing::MediaClip const & clip, Windows::Foundation::Rect const & position, double const opacity) :
	MediaOverlay(GetActivationFactory<MediaOverlay, IMediaOverlayFactory>().CreateWithPositionAndOpacity(clip, position, opacity))
{}

inline Windows::Media::Editing::MediaClip MediaClip::CreateFromSurface(Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const & surface, Windows::Foundation::TimeSpan const & originalDuration)
{
	return GetActivationFactory<MediaClip, IMediaClipStatics2>().CreateFromSurface(surface, originalDuration);
}

inline Windows::Media::Editing::MediaClip MediaClip::CreateFromColor(Windows::UI::Color const & color, Windows::Foundation::TimeSpan const & originalDuration)
{
	return GetActivationFactory<MediaClip, IMediaClipStatics>().CreateFromColor(color, originalDuration);
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::Editing::MediaClip> MediaClip::CreateFromFileAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<MediaClip, IMediaClipStatics>().CreateFromFileAsync(file);
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::Editing::MediaClip> MediaClip::CreateFromImageFileAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::TimeSpan const & originalDuration)
{
	return GetActivationFactory<MediaClip, IMediaClipStatics>().CreateFromImageFileAsync(file, originalDuration);
}

inline Windows::Media::Editing::BackgroundAudioTrack BackgroundAudioTrack::CreateFromEmbeddedAudioTrack(Windows::Media::Editing::EmbeddedAudioTrack const & embeddedAudioTrack)
{
	return GetActivationFactory<BackgroundAudioTrack, IBackgroundAudioTrackStatics>().CreateFromEmbeddedAudioTrack(embeddedAudioTrack);
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::Editing::BackgroundAudioTrack> BackgroundAudioTrack::CreateFromFileAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<BackgroundAudioTrack, IBackgroundAudioTrackStatics>().CreateFromFileAsync(file);
}

inline MediaComposition::MediaComposition() :
	MediaComposition(ActivateInstance<MediaComposition>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Media::Editing::MediaComposition> MediaComposition::LoadAsync(Windows::Storage::StorageFile const & file)
{
	return GetActivationFactory<MediaComposition, IMediaCompositionStatics>().LoadAsync(file);
}

inline MediaOverlayLayer::MediaOverlayLayer() :
	MediaOverlayLayer(ActivateInstance<MediaOverlayLayer>())
{}

inline MediaOverlayLayer::MediaOverlayLayer(Windows::Media::Effects::IVideoCompositorDefinition const & compositorDefinition) :
	MediaOverlayLayer(GetActivationFactory<MediaOverlayLayer, IMediaOverlayLayerFactory>().CreateWithCompositorDefinition(compositorDefinition))
{}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Effects {

inline VideoCompositorDefinition::VideoCompositorDefinition(StringReference const & activatableClassId) :
	VideoCompositorDefinition(GetActivationFactory<VideoCompositorDefinition, IVideoCompositorDefinitionFactory>().Create(activatableClassId))
{}

inline VideoCompositorDefinition::VideoCompositorDefinition(StringReference const & activatableClassId, Windows::Foundation::Collections::IPropertySet const & props) :
	VideoCompositorDefinition(GetActivationFactory<VideoCompositorDefinition, IVideoCompositorDefinitionFactory>().CreateWithProperties(activatableClassId, props))
{}

inline Windows::Media::Effects::AudioRenderEffectsManager AudioEffectsManager::CreateAudioRenderEffectsManager(StringReference const & deviceId, Windows::Media::Render::AudioRenderCategory const category)
{
	return GetActivationFactory<AudioEffectsManager, IAudioEffectsManagerStatics>().CreateAudioRenderEffectsManager(deviceId, category);
}

inline Windows::Media::Effects::AudioRenderEffectsManager AudioEffectsManager::CreateAudioRenderEffectsManager(StringReference const & deviceId, Windows::Media::Render::AudioRenderCategory const category, Windows::Media::AudioProcessing const mode)
{
	return GetActivationFactory<AudioEffectsManager, IAudioEffectsManagerStatics>().CreateAudioRenderEffectsManager(deviceId, category, mode);
}

inline Windows::Media::Effects::AudioCaptureEffectsManager AudioEffectsManager::CreateAudioCaptureEffectsManager(StringReference const & deviceId, Windows::Media::Capture::MediaCategory const category)
{
	return GetActivationFactory<AudioEffectsManager, IAudioEffectsManagerStatics>().CreateAudioCaptureEffectsManager(deviceId, category);
}

inline Windows::Media::Effects::AudioCaptureEffectsManager AudioEffectsManager::CreateAudioCaptureEffectsManager(StringReference const & deviceId, Windows::Media::Capture::MediaCategory const category, Windows::Media::AudioProcessing const mode)
{
	return GetActivationFactory<AudioEffectsManager, IAudioEffectsManagerStatics>().CreateAudioCaptureEffectsManager(deviceId, category, mode);
}

inline VideoEffectDefinition::VideoEffectDefinition(StringReference const & activatableClassId) :
	VideoEffectDefinition(GetActivationFactory<VideoEffectDefinition, IVideoEffectDefinitionFactory>().Create(activatableClassId))
{}

inline VideoEffectDefinition::VideoEffectDefinition(StringReference const & activatableClassId, Windows::Foundation::Collections::IPropertySet const & props) :
	VideoEffectDefinition(GetActivationFactory<VideoEffectDefinition, IVideoEffectDefinitionFactory>().CreateWithProperties(activatableClassId, props))
{}

inline AudioEffectDefinition::AudioEffectDefinition(StringReference const & activatableClassId) :
	AudioEffectDefinition(GetActivationFactory<AudioEffectDefinition, IAudioEffectDefinitionFactory>().Create(activatableClassId))
{}

inline AudioEffectDefinition::AudioEffectDefinition(StringReference const & activatableClassId, Windows::Foundation::Collections::IPropertySet const & props) :
	AudioEffectDefinition(GetActivationFactory<AudioEffectDefinition, IAudioEffectDefinitionFactory>().CreateWithProperties(activatableClassId, props))
{}

inline VideoTransformEffectDefinition::VideoTransformEffectDefinition() :
	VideoTransformEffectDefinition(ActivateInstance<VideoTransformEffectDefinition>())
{}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace FaceAnalysis {

inline Windows::Foundation::IAsyncOperation<Windows::Media::FaceAnalysis::FaceTracker> FaceTracker::CreateAsync()
{
	return GetActivationFactory<FaceTracker, IFaceTrackerStatics>().CreateAsync();
}

inline Windows::Foundation::Collections::IVectorView<winrt::Windows::Graphics::Imaging::BitmapPixelFormat> FaceTracker::GetSupportedBitmapPixelFormats()
{
	return GetActivationFactory<FaceTracker, IFaceTrackerStatics>().GetSupportedBitmapPixelFormats();
}

inline bool FaceTracker::IsBitmapPixelFormatSupported(Windows::Graphics::Imaging::BitmapPixelFormat const bitmapPixelFormat)
{
	return GetActivationFactory<FaceTracker, IFaceTrackerStatics>().IsBitmapPixelFormatSupported(bitmapPixelFormat);
}

inline bool FaceTracker::IsSupported()
{
	return GetActivationFactory<FaceTracker, IFaceTrackerStatics>().IsSupported();
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::FaceAnalysis::FaceDetector> FaceDetector::CreateAsync()
{
	return GetActivationFactory<FaceDetector, IFaceDetectorStatics>().CreateAsync();
}

inline Windows::Foundation::Collections::IVectorView<winrt::Windows::Graphics::Imaging::BitmapPixelFormat> FaceDetector::GetSupportedBitmapPixelFormats()
{
	return GetActivationFactory<FaceDetector, IFaceDetectorStatics>().GetSupportedBitmapPixelFormats();
}

inline bool FaceDetector::IsBitmapPixelFormatSupported(Windows::Graphics::Imaging::BitmapPixelFormat const bitmapPixelFormat)
{
	return GetActivationFactory<FaceDetector, IFaceDetectorStatics>().IsBitmapPixelFormatSupported(bitmapPixelFormat);
}

inline bool FaceDetector::IsSupported()
{
	return GetActivationFactory<FaceDetector, IFaceDetectorStatics>().IsSupported();
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Import {

inline Windows::Foundation::IAsyncOperation<Windows::Media::Import::PhotoImportSource> PhotoImportSource::FromIdAsync(StringReference const & sourceId)
{
	return GetActivationFactory<PhotoImportSource, IPhotoImportSourceStatics>().FromIdAsync(sourceId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::Import::PhotoImportSource> PhotoImportSource::FromFolderAsync(Windows::Storage::IStorageFolder const & sourceRootFolder)
{
	return GetActivationFactory<PhotoImportSource, IPhotoImportSourceStatics>().FromFolderAsync(sourceRootFolder);
}

inline Windows::Foundation::IAsyncOperation<bool> PhotoImportManager::IsSupportedAsync()
{
	return GetActivationFactory<PhotoImportManager, IPhotoImportManagerStatics>().IsSupportedAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportSource>> PhotoImportManager::FindAllSourcesAsync()
{
	return GetActivationFactory<PhotoImportManager, IPhotoImportManagerStatics>().FindAllSourcesAsync();
}

inline Windows::Foundation::Collections::IVectorView<Windows::Media::Import::PhotoImportOperation> PhotoImportManager::GetPendingOperations()
{
	return GetActivationFactory<PhotoImportManager, IPhotoImportManagerStatics>().GetPendingOperations();
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace MediaProperties {

inline MediaPropertySet::MediaPropertySet() :
	MediaPropertySet(ActivateInstance<MediaPropertySet>())
{}

inline AudioEncodingProperties::AudioEncodingProperties() :
	AudioEncodingProperties(ActivateInstance<AudioEncodingProperties>())
{}

inline Windows::Media::MediaProperties::AudioEncodingProperties AudioEncodingProperties::CreateAac(unsigned const sampleRate, unsigned const channelCount, unsigned const bitrate)
{
	return GetActivationFactory<AudioEncodingProperties, IAudioEncodingPropertiesStatics>().CreateAac(sampleRate, channelCount, bitrate);
}

inline Windows::Media::MediaProperties::AudioEncodingProperties AudioEncodingProperties::CreateAacAdts(unsigned const sampleRate, unsigned const channelCount, unsigned const bitrate)
{
	return GetActivationFactory<AudioEncodingProperties, IAudioEncodingPropertiesStatics>().CreateAacAdts(sampleRate, channelCount, bitrate);
}

inline Windows::Media::MediaProperties::AudioEncodingProperties AudioEncodingProperties::CreateMp3(unsigned const sampleRate, unsigned const channelCount, unsigned const bitrate)
{
	return GetActivationFactory<AudioEncodingProperties, IAudioEncodingPropertiesStatics>().CreateMp3(sampleRate, channelCount, bitrate);
}

inline Windows::Media::MediaProperties::AudioEncodingProperties AudioEncodingProperties::CreatePcm(unsigned const sampleRate, unsigned const channelCount, unsigned const bitsPerSample)
{
	return GetActivationFactory<AudioEncodingProperties, IAudioEncodingPropertiesStatics>().CreatePcm(sampleRate, channelCount, bitsPerSample);
}

inline Windows::Media::MediaProperties::AudioEncodingProperties AudioEncodingProperties::CreateWma(unsigned const sampleRate, unsigned const channelCount, unsigned const bitrate)
{
	return GetActivationFactory<AudioEncodingProperties, IAudioEncodingPropertiesStatics>().CreateWma(sampleRate, channelCount, bitrate);
}

inline String MediaEncodingSubtypes::Aac()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Aac();
}

inline String MediaEncodingSubtypes::AacAdts()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().AacAdts();
}

inline String MediaEncodingSubtypes::Ac3()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Ac3();
}

inline String MediaEncodingSubtypes::AmrNb()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().AmrNb();
}

inline String MediaEncodingSubtypes::AmrWb()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().AmrWb();
}

inline String MediaEncodingSubtypes::Argb32()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Argb32();
}

inline String MediaEncodingSubtypes::Asf()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Asf();
}

inline String MediaEncodingSubtypes::Avi()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Avi();
}

inline String MediaEncodingSubtypes::Bgra8()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Bgra8();
}

inline String MediaEncodingSubtypes::Bmp()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Bmp();
}

inline String MediaEncodingSubtypes::Eac3()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Eac3();
}

inline String MediaEncodingSubtypes::Float()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Float();
}

inline String MediaEncodingSubtypes::Gif()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Gif();
}

inline String MediaEncodingSubtypes::H263()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().H263();
}

inline String MediaEncodingSubtypes::H264()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().H264();
}

inline String MediaEncodingSubtypes::H264Es()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().H264Es();
}

inline String MediaEncodingSubtypes::Hevc()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Hevc();
}

inline String MediaEncodingSubtypes::HevcEs()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().HevcEs();
}

inline String MediaEncodingSubtypes::Iyuv()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Iyuv();
}

inline String MediaEncodingSubtypes::Jpeg()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Jpeg();
}

inline String MediaEncodingSubtypes::JpegXr()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().JpegXr();
}

inline String MediaEncodingSubtypes::Mjpg()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Mjpg();
}

inline String MediaEncodingSubtypes::Mpeg()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Mpeg();
}

inline String MediaEncodingSubtypes::Mpeg1()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Mpeg1();
}

inline String MediaEncodingSubtypes::Mpeg2()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Mpeg2();
}

inline String MediaEncodingSubtypes::Mp3()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Mp3();
}

inline String MediaEncodingSubtypes::Mpeg4()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Mpeg4();
}

inline String MediaEncodingSubtypes::Nv12()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Nv12();
}

inline String MediaEncodingSubtypes::Pcm()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Pcm();
}

inline String MediaEncodingSubtypes::Png()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Png();
}

inline String MediaEncodingSubtypes::Rgb24()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Rgb24();
}

inline String MediaEncodingSubtypes::Rgb32()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Rgb32();
}

inline String MediaEncodingSubtypes::Tiff()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Tiff();
}

inline String MediaEncodingSubtypes::Wave()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Wave();
}

inline String MediaEncodingSubtypes::Wma8()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Wma8();
}

inline String MediaEncodingSubtypes::Wma9()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Wma9();
}

inline String MediaEncodingSubtypes::Wmv3()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Wmv3();
}

inline String MediaEncodingSubtypes::Wvc1()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Wvc1();
}

inline String MediaEncodingSubtypes::Yuy2()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Yuy2();
}

inline String MediaEncodingSubtypes::Yv12()
{
	return GetActivationFactory<MediaEncodingSubtypes, IMediaEncodingSubtypesStatics>().Yv12();
}

inline int H264ProfileIds::ConstrainedBaseline()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().ConstrainedBaseline();
}

inline int H264ProfileIds::Baseline()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().Baseline();
}

inline int H264ProfileIds::Extended()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().Extended();
}

inline int H264ProfileIds::Main()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().Main();
}

inline int H264ProfileIds::High()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().High();
}

inline int H264ProfileIds::High10()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().High10();
}

inline int H264ProfileIds::High422()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().High422();
}

inline int H264ProfileIds::High444()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().High444();
}

inline int H264ProfileIds::StereoHigh()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().StereoHigh();
}

inline int H264ProfileIds::MultiviewHigh()
{
	return GetActivationFactory<H264ProfileIds, IH264ProfileIdsStatics>().MultiviewHigh();
}

inline int Mpeg2ProfileIds::Simple()
{
	return GetActivationFactory<Mpeg2ProfileIds, IMpeg2ProfileIdsStatics>().Simple();
}

inline int Mpeg2ProfileIds::Main()
{
	return GetActivationFactory<Mpeg2ProfileIds, IMpeg2ProfileIdsStatics>().Main();
}

inline int Mpeg2ProfileIds::SignalNoiseRatioScalable()
{
	return GetActivationFactory<Mpeg2ProfileIds, IMpeg2ProfileIdsStatics>().SignalNoiseRatioScalable();
}

inline int Mpeg2ProfileIds::SpatiallyScalable()
{
	return GetActivationFactory<Mpeg2ProfileIds, IMpeg2ProfileIdsStatics>().SpatiallyScalable();
}

inline int Mpeg2ProfileIds::High()
{
	return GetActivationFactory<Mpeg2ProfileIds, IMpeg2ProfileIdsStatics>().High();
}

inline VideoEncodingProperties::VideoEncodingProperties() :
	VideoEncodingProperties(ActivateInstance<VideoEncodingProperties>())
{}

inline Windows::Media::MediaProperties::VideoEncodingProperties VideoEncodingProperties::CreateH264()
{
	return GetActivationFactory<VideoEncodingProperties, IVideoEncodingPropertiesStatics>().CreateH264();
}

inline Windows::Media::MediaProperties::VideoEncodingProperties VideoEncodingProperties::CreateMpeg2()
{
	return GetActivationFactory<VideoEncodingProperties, IVideoEncodingPropertiesStatics>().CreateMpeg2();
}

inline Windows::Media::MediaProperties::VideoEncodingProperties VideoEncodingProperties::CreateUncompressed(StringReference const & subtype, unsigned const width, unsigned const height)
{
	return GetActivationFactory<VideoEncodingProperties, IVideoEncodingPropertiesStatics>().CreateUncompressed(subtype, width, height);
}

inline ImageEncodingProperties::ImageEncodingProperties() :
	ImageEncodingProperties(ActivateInstance<ImageEncodingProperties>())
{}

inline Windows::Media::MediaProperties::ImageEncodingProperties ImageEncodingProperties::CreateUncompressed(Windows::Media::MediaProperties::MediaPixelFormat const format)
{
	return GetActivationFactory<ImageEncodingProperties, IImageEncodingPropertiesStatics2>().CreateUncompressed(format);
}

inline Windows::Media::MediaProperties::ImageEncodingProperties ImageEncodingProperties::CreateBmp()
{
	return GetActivationFactory<ImageEncodingProperties, IImageEncodingPropertiesStatics2>().CreateBmp();
}

inline Windows::Media::MediaProperties::ImageEncodingProperties ImageEncodingProperties::CreateJpeg()
{
	return GetActivationFactory<ImageEncodingProperties, IImageEncodingPropertiesStatics>().CreateJpeg();
}

inline Windows::Media::MediaProperties::ImageEncodingProperties ImageEncodingProperties::CreatePng()
{
	return GetActivationFactory<ImageEncodingProperties, IImageEncodingPropertiesStatics>().CreatePng();
}

inline Windows::Media::MediaProperties::ImageEncodingProperties ImageEncodingProperties::CreateJpegXR()
{
	return GetActivationFactory<ImageEncodingProperties, IImageEncodingPropertiesStatics>().CreateJpegXR();
}

inline ContainerEncodingProperties::ContainerEncodingProperties() :
	ContainerEncodingProperties(ActivateInstance<ContainerEncodingProperties>())
{}

inline MediaEncodingProfile::MediaEncodingProfile() :
	MediaEncodingProfile(ActivateInstance<MediaEncodingProfile>())
{}

inline Windows::Media::MediaProperties::MediaEncodingProfile MediaEncodingProfile::CreateM4a(Windows::Media::MediaProperties::AudioEncodingQuality const quality)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics>().CreateM4a(quality);
}

inline Windows::Media::MediaProperties::MediaEncodingProfile MediaEncodingProfile::CreateMp3(Windows::Media::MediaProperties::AudioEncodingQuality const quality)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics>().CreateMp3(quality);
}

inline Windows::Media::MediaProperties::MediaEncodingProfile MediaEncodingProfile::CreateWma(Windows::Media::MediaProperties::AudioEncodingQuality const quality)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics>().CreateWma(quality);
}

inline Windows::Media::MediaProperties::MediaEncodingProfile MediaEncodingProfile::CreateMp4(Windows::Media::MediaProperties::VideoEncodingQuality const quality)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics>().CreateMp4(quality);
}

inline Windows::Media::MediaProperties::MediaEncodingProfile MediaEncodingProfile::CreateWmv(Windows::Media::MediaProperties::VideoEncodingQuality const quality)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics>().CreateWmv(quality);
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> MediaEncodingProfile::CreateFromFileAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics>().CreateFromFileAsync(file);
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::MediaProperties::MediaEncodingProfile> MediaEncodingProfile::CreateFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & stream)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics>().CreateFromStreamAsync(stream);
}

inline Windows::Media::MediaProperties::MediaEncodingProfile MediaEncodingProfile::CreateWav(Windows::Media::MediaProperties::AudioEncodingQuality const quality)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics2>().CreateWav(quality);
}

inline Windows::Media::MediaProperties::MediaEncodingProfile MediaEncodingProfile::CreateAvi(Windows::Media::MediaProperties::VideoEncodingQuality const quality)
{
	return GetActivationFactory<MediaEncodingProfile, IMediaEncodingProfileStatics2>().CreateAvi(quality);
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Ocr {

inline unsigned OcrEngine::MaxImageDimension()
{
	return GetActivationFactory<OcrEngine, IOcrEngineStatics>().MaxImageDimension();
}

inline Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> OcrEngine::AvailableRecognizerLanguages()
{
	return GetActivationFactory<OcrEngine, IOcrEngineStatics>().AvailableRecognizerLanguages();
}

inline bool OcrEngine::IsLanguageSupported(Windows::Globalization::Language const & language)
{
	return GetActivationFactory<OcrEngine, IOcrEngineStatics>().IsLanguageSupported(language);
}

inline Windows::Media::Ocr::OcrEngine OcrEngine::TryCreateFromLanguage(Windows::Globalization::Language const & language)
{
	return GetActivationFactory<OcrEngine, IOcrEngineStatics>().TryCreateFromLanguage(language);
}

inline Windows::Media::Ocr::OcrEngine OcrEngine::TryCreateFromUserProfileLanguages()
{
	return GetActivationFactory<OcrEngine, IOcrEngineStatics>().TryCreateFromUserProfileLanguages();
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace PlayTo {

inline PlayToReceiver::PlayToReceiver() :
	PlayToReceiver(ActivateInstance<PlayToReceiver>())
{}

inline Windows::Media::PlayTo::PlayToManager PlayToManager::GetForCurrentView()
{
	return GetActivationFactory<PlayToManager, IPlayToManagerStatics>().GetForCurrentView();
}

inline void PlayToManager::ShowPlayToUI()
{
	GetActivationFactory<PlayToManager, IPlayToManagerStatics>().ShowPlayToUI();
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Playback {

inline MediaPlaybackItem::MediaPlaybackItem(Windows::Media::Core::MediaSource const & source) :
	MediaPlaybackItem(GetActivationFactory<MediaPlaybackItem, IMediaPlaybackItemFactory>().Create(source))
{}

inline Windows::Media::Playback::MediaPlaybackItem MediaPlaybackItem::FindFromMediaSource(Windows::Media::Core::MediaSource const & source)
{
	return GetActivationFactory<MediaPlaybackItem, IMediaPlaybackItemStatics>().FindFromMediaSource(source);
}

inline PlaybackMediaMarker::PlaybackMediaMarker(Windows::Foundation::TimeSpan const & value) :
	PlaybackMediaMarker(GetActivationFactory<PlaybackMediaMarker, IPlaybackMediaMarkerFactory>().CreateFromTime(value))
{}

inline PlaybackMediaMarker::PlaybackMediaMarker(Windows::Foundation::TimeSpan const & value, StringReference const & mediaMarketType, StringReference const & text) :
	PlaybackMediaMarker(GetActivationFactory<PlaybackMediaMarker, IPlaybackMediaMarkerFactory>().Create(value, mediaMarketType, text))
{}

inline Windows::Media::Playback::MediaPlayer BackgroundMediaPlayer::Current()
{
	return GetActivationFactory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>().Current();
}

inline long long BackgroundMediaPlayer::MessageReceivedFromBackground(Windows::Foundation::IEventHandler<Windows::Media::Playback::MediaPlayerDataReceivedEventArgs> const & value)
{
	return GetActivationFactory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>().MessageReceivedFromBackground(value);
}

template <typename F> long long BackgroundMediaPlayer::MessageReceivedFromBackground(F value)
{
	return GetActivationFactory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>().MessageReceivedFromBackground(Windows::Foundation::EventHandler<Windows::Media::Playback::MediaPlayerDataReceivedEventArgs>(value));
}

inline void BackgroundMediaPlayer::MessageReceivedFromBackground(long long const token)
{
	GetActivationFactory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>().MessageReceivedFromBackground(token);
}

inline long long BackgroundMediaPlayer::MessageReceivedFromForeground(Windows::Foundation::IEventHandler<Windows::Media::Playback::MediaPlayerDataReceivedEventArgs> const & value)
{
	return GetActivationFactory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>().MessageReceivedFromForeground(value);
}

template <typename F> long long BackgroundMediaPlayer::MessageReceivedFromForeground(F value)
{
	return GetActivationFactory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>().MessageReceivedFromForeground(Windows::Foundation::EventHandler<Windows::Media::Playback::MediaPlayerDataReceivedEventArgs>(value));
}

inline void BackgroundMediaPlayer::MessageReceivedFromForeground(long long const token)
{
	GetActivationFactory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>().MessageReceivedFromForeground(token);
}

inline void BackgroundMediaPlayer::SendMessageToBackground(Windows::Foundation::Collections::ValueSet const & value)
{
	GetActivationFactory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>().SendMessageToBackground(value);
}

inline void BackgroundMediaPlayer::SendMessageToForeground(Windows::Foundation::Collections::ValueSet const & value)
{
	GetActivationFactory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>().SendMessageToForeground(value);
}

inline bool BackgroundMediaPlayer::IsMediaPlaying()
{
	return GetActivationFactory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>().IsMediaPlaying();
}

inline void BackgroundMediaPlayer::Shutdown()
{
	GetActivationFactory<BackgroundMediaPlayer, IBackgroundMediaPlayerStatics>().Shutdown();
}

inline MediaPlaybackList::MediaPlaybackList() :
	MediaPlaybackList(ActivateInstance<MediaPlaybackList>())
{}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Playlists {

inline Playlist::Playlist() :
	Playlist(ActivateInstance<Playlist>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Media::Playlists::Playlist> Playlist::LoadAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<Playlist, IPlaylistStatics>().LoadAsync(file);
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Protection {

inline MediaProtectionManager::MediaProtectionManager() :
	MediaProtectionManager(ActivateInstance<MediaProtectionManager>())
{}

inline MediaProtectionPMPServer::MediaProtectionPMPServer(Windows::Foundation::Collections::IPropertySet const & pProperties) :
	MediaProtectionPMPServer(GetActivationFactory<MediaProtectionPMPServer, IMediaProtectionPMPServerFactory>().CreatePMPServer(pProperties))
{}

inline Windows::Foundation::IAsyncOperationWithProgress<winrt::Windows::Media::Protection::RenewalStatus, unsigned> ComponentRenewal::RenewSystemComponentsAsync(Windows::Media::Protection::RevocationAndRenewalInformation const & information)
{
	return GetActivationFactory<ComponentRenewal, IComponentRenewalStatics>().RenewSystemComponentsAsync(information);
}

inline ProtectionCapabilities::ProtectionCapabilities() :
	ProtectionCapabilities(ActivateInstance<ProtectionCapabilities>())
{}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Protection { namespace PlayReady {

inline PlayReadyContentHeader::PlayReadyContentHeader(GUID const contentKeyId, StringReference const & contentKeyIdString, Windows::Media::Protection::PlayReady::PlayReadyEncryptionAlgorithm const contentEncryptionAlgorithm, Windows::Foundation::Uri const & licenseAcquisitionUrl, Windows::Foundation::Uri const & licenseAcquisitionUserInterfaceUrl, StringReference const & customAttributes, GUID const domainServiceId) :
	PlayReadyContentHeader(GetActivationFactory<PlayReadyContentHeader, IPlayReadyContentHeaderFactory>().CreateInstanceFromComponents(contentKeyId, contentKeyIdString, contentEncryptionAlgorithm, licenseAcquisitionUrl, licenseAcquisitionUserInterfaceUrl, customAttributes, domainServiceId))
{}

inline Windows::Media::Protection::PlayReady::IPlayReadyServiceRequest PlayReadyContentResolver::ServiceRequest(Windows::Media::Protection::PlayReady::PlayReadyContentHeader const & contentHeader)
{
	return GetActivationFactory<PlayReadyContentResolver, IPlayReadyContentResolver>().ServiceRequest(contentHeader);
}

inline PlayReadyIndividualizationServiceRequest::PlayReadyIndividualizationServiceRequest() :
	PlayReadyIndividualizationServiceRequest(ActivateInstance<PlayReadyIndividualizationServiceRequest>())
{}

inline PlayReadyDomainJoinServiceRequest::PlayReadyDomainJoinServiceRequest() :
	PlayReadyDomainJoinServiceRequest(ActivateInstance<PlayReadyDomainJoinServiceRequest>())
{}

inline PlayReadyDomainLeaveServiceRequest::PlayReadyDomainLeaveServiceRequest() :
	PlayReadyDomainLeaveServiceRequest(ActivateInstance<PlayReadyDomainLeaveServiceRequest>())
{}

inline PlayReadyLicenseAcquisitionServiceRequest::PlayReadyLicenseAcquisitionServiceRequest() :
	PlayReadyLicenseAcquisitionServiceRequest(ActivateInstance<PlayReadyLicenseAcquisitionServiceRequest>())
{}

inline PlayReadyMeteringReportServiceRequest::PlayReadyMeteringReportServiceRequest() :
	PlayReadyMeteringReportServiceRequest(ActivateInstance<PlayReadyMeteringReportServiceRequest>())
{}

inline PlayReadyRevocationServiceRequest::PlayReadyRevocationServiceRequest() :
	PlayReadyRevocationServiceRequest(ActivateInstance<PlayReadyRevocationServiceRequest>())
{}

inline Windows::Foundation::IAsyncAction PlayReadyLicenseManagement::DeleteLicenses(Windows::Media::Protection::PlayReady::PlayReadyContentHeader const & contentHeader)
{
	return GetActivationFactory<PlayReadyLicenseManagement, IPlayReadyLicenseManagement>().DeleteLicenses(contentHeader);
}

inline PlayReadyLicenseIterable::PlayReadyLicenseIterable() :
	PlayReadyLicenseIterable(ActivateInstance<PlayReadyLicenseIterable>())
{}

inline PlayReadyLicenseIterable::PlayReadyLicenseIterable(Windows::Media::Protection::PlayReady::PlayReadyContentHeader const & contentHeader, bool const fullyEvaluated) :
	PlayReadyLicenseIterable(GetActivationFactory<PlayReadyLicenseIterable, IPlayReadyLicenseIterableFactory>().CreateInstance(contentHeader, fullyEvaluated))
{}

inline PlayReadyDomainIterable::PlayReadyDomainIterable(GUID const domainAccountId) :
	PlayReadyDomainIterable(GetActivationFactory<PlayReadyDomainIterable, IPlayReadyDomainIterableFactory>().CreateInstance(domainAccountId))
{}

inline GUID PlayReadyStatics::DomainJoinServiceRequestType()
{
	return GetActivationFactory<PlayReadyStatics, IPlayReadyStatics>().DomainJoinServiceRequestType();
}

inline GUID PlayReadyStatics::DomainLeaveServiceRequestType()
{
	return GetActivationFactory<PlayReadyStatics, IPlayReadyStatics>().DomainLeaveServiceRequestType();
}

inline GUID PlayReadyStatics::IndividualizationServiceRequestType()
{
	return GetActivationFactory<PlayReadyStatics, IPlayReadyStatics>().IndividualizationServiceRequestType();
}

inline GUID PlayReadyStatics::LicenseAcquirerServiceRequestType()
{
	return GetActivationFactory<PlayReadyStatics, IPlayReadyStatics>().LicenseAcquirerServiceRequestType();
}

inline GUID PlayReadyStatics::MeteringReportServiceRequestType()
{
	return GetActivationFactory<PlayReadyStatics, IPlayReadyStatics>().MeteringReportServiceRequestType();
}

inline GUID PlayReadyStatics::RevocationServiceRequestType()
{
	return GetActivationFactory<PlayReadyStatics, IPlayReadyStatics>().RevocationServiceRequestType();
}

inline GUID PlayReadyStatics::MediaProtectionSystemId()
{
	return GetActivationFactory<PlayReadyStatics, IPlayReadyStatics>().MediaProtectionSystemId();
}

inline unsigned PlayReadyStatics::PlayReadySecurityVersion()
{
	return GetActivationFactory<PlayReadyStatics, IPlayReadyStatics>().PlayReadySecurityVersion();
}

inline PlayReadyITADataGenerator::PlayReadyITADataGenerator() :
	PlayReadyITADataGenerator(ActivateInstance<PlayReadyITADataGenerator>())
{}

inline PlayReadyLicenseSession::PlayReadyLicenseSession(Windows::Foundation::Collections::IPropertySet const & configuration) :
	PlayReadyLicenseSession(GetActivationFactory<PlayReadyLicenseSession, IPlayReadyLicenseSessionFactory>().CreateInstance(configuration))
{}

inline NDDownloadEngineNotifier::NDDownloadEngineNotifier() :
	NDDownloadEngineNotifier(ActivateInstance<NDDownloadEngineNotifier>())
{}

inline NDStreamParserNotifier::NDStreamParserNotifier() :
	NDStreamParserNotifier(ActivateInstance<NDStreamParserNotifier>())
{}

inline NDTCPMessenger::NDTCPMessenger(StringReference const & remoteHostName, unsigned const remoteHostPort) :
	NDTCPMessenger(GetActivationFactory<NDTCPMessenger, INDTCPMessengerFactory>().CreateInstance(remoteHostName, remoteHostPort))
{}

inline NDClient::NDClient(Windows::Media::Protection::PlayReady::INDDownloadEngine const & downloadEngine, Windows::Media::Protection::PlayReady::INDStreamParser const & streamParser, Windows::Media::Protection::PlayReady::INDMessenger const & pMessenger) :
	NDClient(GetActivationFactory<NDClient, INDClientFactory>().CreateInstance(downloadEngine, streamParser, pMessenger))
{}

inline NDStorageFileHelper::NDStorageFileHelper() :
	NDStorageFileHelper(ActivateInstance<NDStorageFileHelper>())
{}

}}}}}

namespace winrt { namespace Windows { namespace Media { namespace SpeechRecognition {

inline SpeechRecognitionTopicConstraint::SpeechRecognitionTopicConstraint(Windows::Media::SpeechRecognition::SpeechRecognitionScenario const scenario, StringReference const & topicHint) :
	SpeechRecognitionTopicConstraint(GetActivationFactory<SpeechRecognitionTopicConstraint, ISpeechRecognitionTopicConstraintFactory>().Create(scenario, topicHint))
{}

inline SpeechRecognitionTopicConstraint::SpeechRecognitionTopicConstraint(Windows::Media::SpeechRecognition::SpeechRecognitionScenario const scenario, StringReference const & topicHint, StringReference const & tag) :
	SpeechRecognitionTopicConstraint(GetActivationFactory<SpeechRecognitionTopicConstraint, ISpeechRecognitionTopicConstraintFactory>().CreateWithTag(scenario, topicHint, tag))
{}

inline SpeechRecognitionListConstraint::SpeechRecognitionListConstraint(Windows::Foundation::Collections::IIterable<String> const & commands) :
	SpeechRecognitionListConstraint(GetActivationFactory<SpeechRecognitionListConstraint, ISpeechRecognitionListConstraintFactory>().Create(commands))
{}

inline SpeechRecognitionListConstraint::SpeechRecognitionListConstraint(Windows::Foundation::Collections::IIterable<String> const & commands, StringReference const & tag) :
	SpeechRecognitionListConstraint(GetActivationFactory<SpeechRecognitionListConstraint, ISpeechRecognitionListConstraintFactory>().CreateWithTag(commands, tag))
{}

inline SpeechRecognitionGrammarFileConstraint::SpeechRecognitionGrammarFileConstraint(Windows::Storage::StorageFile const & file) :
	SpeechRecognitionGrammarFileConstraint(GetActivationFactory<SpeechRecognitionGrammarFileConstraint, ISpeechRecognitionGrammarFileConstraintFactory>().Create(file))
{}

inline SpeechRecognitionGrammarFileConstraint::SpeechRecognitionGrammarFileConstraint(Windows::Storage::StorageFile const & file, StringReference const & tag) :
	SpeechRecognitionGrammarFileConstraint(GetActivationFactory<SpeechRecognitionGrammarFileConstraint, ISpeechRecognitionGrammarFileConstraintFactory>().CreateWithTag(file, tag))
{}

inline SpeechRecognizer::SpeechRecognizer() :
	SpeechRecognizer(ActivateInstance<SpeechRecognizer>())
{}

inline SpeechRecognizer::SpeechRecognizer(Windows::Globalization::Language const & language) :
	SpeechRecognizer(GetActivationFactory<SpeechRecognizer, ISpeechRecognizerFactory>().Create(language))
{}

inline Windows::Globalization::Language SpeechRecognizer::SystemSpeechLanguage()
{
	return GetActivationFactory<SpeechRecognizer, ISpeechRecognizerStatics>().SystemSpeechLanguage();
}

inline Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> SpeechRecognizer::SupportedTopicLanguages()
{
	return GetActivationFactory<SpeechRecognizer, ISpeechRecognizerStatics>().SupportedTopicLanguages();
}

inline Windows::Foundation::Collections::IVectorView<Windows::Globalization::Language> SpeechRecognizer::SupportedGrammarLanguages()
{
	return GetActivationFactory<SpeechRecognizer, ISpeechRecognizerStatics>().SupportedGrammarLanguages();
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace SpeechSynthesis {

inline SpeechSynthesizer::SpeechSynthesizer() :
	SpeechSynthesizer(ActivateInstance<SpeechSynthesizer>())
{}

inline Windows::Foundation::Collections::IVectorView<Windows::Media::SpeechSynthesis::VoiceInformation> SpeechSynthesizer::AllVoices()
{
	return GetActivationFactory<SpeechSynthesizer, IInstalledVoicesStatic>().AllVoices();
}

inline Windows::Media::SpeechSynthesis::VoiceInformation SpeechSynthesizer::DefaultVoice()
{
	return GetActivationFactory<SpeechSynthesizer, IInstalledVoicesStatic>().DefaultVoice();
}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Streaming {

inline BasicDevice::BasicDevice() :
	BasicDevice(ActivateInstance<BasicDevice>())
{}

inline ActiveBasicDevice::ActiveBasicDevice() :
	ActiveBasicDevice(ActivateInstance<ActiveBasicDevice>())
{}

inline MediaRenderer::MediaRenderer() :
	MediaRenderer(ActivateInstance<MediaRenderer>())
{}

inline DeviceController::DeviceController() :
	DeviceController(ActivateInstance<DeviceController>())
{}

}}}}

namespace winrt { namespace Windows { namespace Media { namespace Streaming { namespace Adaptive {

inline bool AdaptiveMediaSource::IsContentTypeSupported(StringReference const & contentType)
{
	return GetActivationFactory<AdaptiveMediaSource, IAdaptiveMediaSourceStatics>().IsContentTypeSupported(contentType);
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCreationResult> AdaptiveMediaSource::CreateFromUriAsync(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<AdaptiveMediaSource, IAdaptiveMediaSourceStatics>().CreateFromUriAsync(uri);
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCreationResult> AdaptiveMediaSource::CreateFromUriAsync(Windows::Foundation::Uri const & uri, Windows::Web::Http::HttpClient const & httpClient)
{
	return GetActivationFactory<AdaptiveMediaSource, IAdaptiveMediaSourceStatics>().CreateFromUriAsync(uri, httpClient);
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCreationResult> AdaptiveMediaSource::CreateFromStreamAsync(Windows::Storage::Streams::IInputStream const & stream, Windows::Foundation::Uri const & uri, StringReference const & contentType)
{
	return GetActivationFactory<AdaptiveMediaSource, IAdaptiveMediaSourceStatics>().CreateFromStreamAsync(stream, uri, contentType);
}

inline Windows::Foundation::IAsyncOperation<Windows::Media::Streaming::Adaptive::AdaptiveMediaSourceCreationResult> AdaptiveMediaSource::CreateFromStreamAsync(Windows::Storage::Streams::IInputStream const & stream, Windows::Foundation::Uri const & uri, StringReference const & contentType, Windows::Web::Http::HttpClient const & httpClient)
{
	return GetActivationFactory<AdaptiveMediaSource, IAdaptiveMediaSourceStatics>().CreateFromStreamAsync(stream, uri, contentType, httpClient);
}

}}}}}

namespace winrt { namespace Windows { namespace Media { namespace Streaming { namespace Internal {

}}}}}

namespace winrt { namespace Windows { namespace Media { namespace Transcoding {

inline MediaTranscoder::MediaTranscoder() :
	MediaTranscoder(ActivateInstance<MediaTranscoder>())
{}

}}}}

namespace winrt { namespace Windows { namespace Networking {

inline EndpointPair::EndpointPair(Windows::Networking::HostName const & localHostName, StringReference const & localServiceName, Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName) :
	EndpointPair(GetActivationFactory<EndpointPair, IEndpointPairFactory>().CreateEndpointPair(localHostName, localServiceName, remoteHostName, remoteServiceName))
{}

inline HostName::HostName(StringReference const & hostName) :
	HostName(GetActivationFactory<HostName, IHostNameFactory>().CreateHostName(hostName))
{}

inline int HostName::Compare(StringReference const & value1, StringReference const & value2)
{
	return GetActivationFactory<HostName, IHostNameStatics>().Compare(value1, value2);
}

}}}

namespace winrt { namespace Windows { namespace Networking { namespace BackgroundTransfer {

inline Windows::Networking::BackgroundTransfer::BackgroundTransferGroup BackgroundTransferGroup::CreateGroup(StringReference const & name)
{
	return GetActivationFactory<BackgroundTransferGroup, IBackgroundTransferGroupStatics>().CreateGroup(name);
}

inline BackgroundTransferCompletionGroup::BackgroundTransferCompletionGroup() :
	BackgroundTransferCompletionGroup(ActivateInstance<BackgroundTransferCompletionGroup>())
{}

inline BackgroundTransferContentPart::BackgroundTransferContentPart() :
	BackgroundTransferContentPart(ActivateInstance<BackgroundTransferContentPart>())
{}

inline BackgroundTransferContentPart::BackgroundTransferContentPart(StringReference const & name) :
	BackgroundTransferContentPart(GetActivationFactory<BackgroundTransferContentPart, IBackgroundTransferContentPartFactory>().CreateWithName(name))
{}

inline BackgroundTransferContentPart::BackgroundTransferContentPart(StringReference const & name, StringReference const & fileName) :
	BackgroundTransferContentPart(GetActivationFactory<BackgroundTransferContentPart, IBackgroundTransferContentPartFactory>().CreateWithNameAndFileName(name, fileName))
{}

inline BackgroundDownloader::BackgroundDownloader() :
	BackgroundDownloader(ActivateInstance<BackgroundDownloader>())
{}

inline BackgroundDownloader::BackgroundDownloader(Windows::Networking::BackgroundTransfer::BackgroundTransferCompletionGroup const & completionGroup) :
	BackgroundDownloader(GetActivationFactory<BackgroundDownloader, IBackgroundDownloaderFactory>().CreateWithCompletionGroup(completionGroup))
{}

inline Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> BackgroundDownloader::RequestUnconstrainedDownloadsAsync(Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::DownloadOperation> const & operations)
{
	return GetActivationFactory<BackgroundDownloader, IBackgroundDownloaderUserConsent>().RequestUnconstrainedDownloadsAsync(operations);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> BackgroundDownloader::GetCurrentDownloadsAsync()
{
	return GetActivationFactory<BackgroundDownloader, IBackgroundDownloaderStaticMethods>().GetCurrentDownloadsAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> BackgroundDownloader::GetCurrentDownloadsAsync(StringReference const & group)
{
	return GetActivationFactory<BackgroundDownloader, IBackgroundDownloaderStaticMethods>().GetCurrentDownloadsAsync(group);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::DownloadOperation>> BackgroundDownloader::GetCurrentDownloadsForTransferGroupAsync(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & group)
{
	return GetActivationFactory<BackgroundDownloader, IBackgroundDownloaderStaticMethods2>().GetCurrentDownloadsForTransferGroupAsync(group);
}

inline BackgroundUploader::BackgroundUploader() :
	BackgroundUploader(ActivateInstance<BackgroundUploader>())
{}

inline BackgroundUploader::BackgroundUploader(Windows::Networking::BackgroundTransfer::BackgroundTransferCompletionGroup const & completionGroup) :
	BackgroundUploader(GetActivationFactory<BackgroundUploader, IBackgroundUploaderFactory>().CreateWithCompletionGroup(completionGroup))
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> BackgroundUploader::GetCurrentUploadsAsync()
{
	return GetActivationFactory<BackgroundUploader, IBackgroundUploaderStaticMethods>().GetCurrentUploadsAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> BackgroundUploader::GetCurrentUploadsAsync(StringReference const & group)
{
	return GetActivationFactory<BackgroundUploader, IBackgroundUploaderStaticMethods>().GetCurrentUploadsAsync(group);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::BackgroundTransfer::UploadOperation>> BackgroundUploader::GetCurrentUploadsForTransferGroupAsync(Windows::Networking::BackgroundTransfer::BackgroundTransferGroup const & group)
{
	return GetActivationFactory<BackgroundUploader, IBackgroundUploaderStaticMethods2>().GetCurrentUploadsForTransferGroupAsync(group);
}

inline Windows::Foundation::IAsyncOperation<Windows::Networking::BackgroundTransfer::UnconstrainedTransferRequestResult> BackgroundUploader::RequestUnconstrainedUploadsAsync(Windows::Foundation::Collections::IIterable<Windows::Networking::BackgroundTransfer::UploadOperation> const & operations)
{
	return GetActivationFactory<BackgroundUploader, IBackgroundUploaderUserConsent>().RequestUnconstrainedUploadsAsync(operations);
}

inline Windows::Web::WebErrorStatus BackgroundTransferError::GetStatus(int const hresult)
{
	return GetActivationFactory<BackgroundTransferError, IBackgroundTransferErrorStaticMethods>().GetStatus(hresult);
}

inline Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> ContentPrefetcher::ContentUris()
{
	return GetActivationFactory<ContentPrefetcher, IContentPrefetcher>().ContentUris();
}

inline void ContentPrefetcher::IndirectContentUri(Windows::Foundation::Uri const & value)
{
	GetActivationFactory<ContentPrefetcher, IContentPrefetcher>().IndirectContentUri(value);
}

inline Windows::Foundation::Uri ContentPrefetcher::IndirectContentUri()
{
	return GetActivationFactory<ContentPrefetcher, IContentPrefetcher>().IndirectContentUri();
}

inline Windows::Foundation::IReference<winrt::Windows::Foundation::DateTime> ContentPrefetcher::LastSuccessfulPrefetchTime()
{
	return GetActivationFactory<ContentPrefetcher, IContentPrefetcherTime>().LastSuccessfulPrefetchTime();
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Connectivity {

inline ConnectionProfileFilter::ConnectionProfileFilter() :
	ConnectionProfileFilter(ActivateInstance<ConnectionProfileFilter>())
{}

inline RoutePolicy::RoutePolicy(Windows::Networking::Connectivity::ConnectionProfile const & connectionProfile, Windows::Networking::HostName const & hostName, Windows::Networking::DomainNameType const type) :
	RoutePolicy(GetActivationFactory<RoutePolicy, IRoutePolicyFactory>().CreateRoutePolicy(connectionProfile, hostName, type))
{}

inline CellularApnContext::CellularApnContext() :
	CellularApnContext(ActivateInstance<CellularApnContext>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile>> NetworkInformation::FindConnectionProfilesAsync(Windows::Networking::Connectivity::ConnectionProfileFilter const & pProfileFilter)
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics2>().FindConnectionProfilesAsync(pProfileFilter);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile> NetworkInformation::GetConnectionProfiles()
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetConnectionProfiles();
}

inline Windows::Networking::Connectivity::ConnectionProfile NetworkInformation::GetInternetConnectionProfile()
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetInternetConnectionProfile();
}

inline Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::LanIdentifier> NetworkInformation::GetLanIdentifiers()
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetLanIdentifiers();
}

inline Windows::Foundation::Collections::IVectorView<Windows::Networking::HostName> NetworkInformation::GetHostNames()
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetHostNames();
}

inline Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration> NetworkInformation::GetProxyConfigurationAsync(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetProxyConfigurationAsync(uri);
}

inline Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair> NetworkInformation::GetSortedEndpointPairs(Windows::Foundation::Collections::IIterable<Windows::Networking::EndpointPair> const & destinationList, Windows::Networking::HostNameSortOptions const sortOptions)
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().GetSortedEndpointPairs(destinationList, sortOptions);
}

inline long long NetworkInformation::NetworkStatusChanged(Windows::Networking::Connectivity::INetworkStatusChangedEventHandler const & networkStatusHandler)
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().NetworkStatusChanged(networkStatusHandler);
}

template <typename F> long long NetworkInformation::NetworkStatusChanged(F networkStatusHandler)
{
	return GetActivationFactory<NetworkInformation, INetworkInformationStatics>().NetworkStatusChanged(Windows::Networking::Connectivity::NetworkStatusChangedEventHandler(networkStatusHandler));
}

inline void NetworkInformation::NetworkStatusChanged(long long const eventCookie)
{
	GetActivationFactory<NetworkInformation, INetworkInformationStatics>().NetworkStatusChanged(eventCookie);
}

inline Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession> ConnectivityManager::AcquireConnectionAsync(Windows::Networking::Connectivity::CellularApnContext const & cellularApnContext)
{
	return GetActivationFactory<ConnectivityManager, IConnectivityManagerStatics>().AcquireConnectionAsync(cellularApnContext);
}

inline void ConnectivityManager::AddHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy)
{
	GetActivationFactory<ConnectivityManager, IConnectivityManagerStatics>().AddHttpRoutePolicy(routePolicy);
}

inline void ConnectivityManager::RemoveHttpRoutePolicy(Windows::Networking::Connectivity::RoutePolicy const & routePolicy)
{
	GetActivationFactory<ConnectivityManager, IConnectivityManagerStatics>().RemoveHttpRoutePolicy(routePolicy);
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace NetworkOperators {

inline Windows::Foundation::Collections::IVectorView<String> MobileBroadbandAccount::AvailableNetworkAccountIds()
{
	return GetActivationFactory<MobileBroadbandAccount, IMobileBroadbandAccountStatics>().AvailableNetworkAccountIds();
}

inline Windows::Networking::NetworkOperators::MobileBroadbandAccount MobileBroadbandAccount::CreateFromNetworkAccountId(StringReference const & networkAccountId)
{
	return GetActivationFactory<MobileBroadbandAccount, IMobileBroadbandAccountStatics>().CreateFromNetworkAccountId(networkAccountId);
}

inline NetworkOperatorTetheringAccessPointConfiguration::NetworkOperatorTetheringAccessPointConfiguration() :
	NetworkOperatorTetheringAccessPointConfiguration(ActivateInstance<NetworkOperatorTetheringAccessPointConfiguration>())
{}

inline Windows::Networking::NetworkOperators::TetheringCapability NetworkOperatorTetheringManager::GetTetheringCapability(StringReference const & networkAccountId)
{
	return GetActivationFactory<NetworkOperatorTetheringManager, INetworkOperatorTetheringManagerStatics>().GetTetheringCapability(networkAccountId);
}

inline Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager NetworkOperatorTetheringManager::CreateFromNetworkAccountId(StringReference const & networkAccountId)
{
	return GetActivationFactory<NetworkOperatorTetheringManager, INetworkOperatorTetheringManagerStatics>().CreateFromNetworkAccountId(networkAccountId);
}

inline Windows::Networking::NetworkOperators::TetheringCapability NetworkOperatorTetheringManager::GetTetheringCapabilityFromConnectionProfile(Windows::Networking::Connectivity::ConnectionProfile const & profile)
{
	return GetActivationFactory<NetworkOperatorTetheringManager, INetworkOperatorTetheringManagerStatics2>().GetTetheringCapabilityFromConnectionProfile(profile);
}

inline Windows::Networking::NetworkOperators::NetworkOperatorTetheringManager NetworkOperatorTetheringManager::CreateFromConnectionProfile(Windows::Networking::Connectivity::ConnectionProfile const & profile)
{
	return GetActivationFactory<NetworkOperatorTetheringManager, INetworkOperatorTetheringManagerStatics2>().CreateFromConnectionProfile(profile);
}

inline MobileBroadbandAccountWatcher::MobileBroadbandAccountWatcher() :
	MobileBroadbandAccountWatcher(ActivateInstance<MobileBroadbandAccountWatcher>())
{}

inline String MobileBroadbandModem::GetDeviceSelector()
{
	return GetActivationFactory<MobileBroadbandModem, IMobileBroadbandModemStatics>().GetDeviceSelector();
}

inline Windows::Networking::NetworkOperators::MobileBroadbandModem MobileBroadbandModem::FromId(StringReference const & deviceId)
{
	return GetActivationFactory<MobileBroadbandModem, IMobileBroadbandModemStatics>().FromId(deviceId);
}

inline Windows::Networking::NetworkOperators::MobileBroadbandModem MobileBroadbandModem::GetDefault()
{
	return GetActivationFactory<MobileBroadbandModem, IMobileBroadbandModemStatics>().GetDefault();
}

inline Windows::Foundation::Collections::IVectorView<unsigned> KnownCSimFilePaths::EFSpn()
{
	return GetActivationFactory<KnownCSimFilePaths, IKnownCSimFilePathsStatics>().EFSpn();
}

inline Windows::Foundation::Collections::IVectorView<unsigned> KnownCSimFilePaths::Gid1()
{
	return GetActivationFactory<KnownCSimFilePaths, IKnownCSimFilePathsStatics>().Gid1();
}

inline Windows::Foundation::Collections::IVectorView<unsigned> KnownCSimFilePaths::Gid2()
{
	return GetActivationFactory<KnownCSimFilePaths, IKnownCSimFilePathsStatics>().Gid2();
}

inline Windows::Foundation::Collections::IVectorView<unsigned> KnownRuimFilePaths::EFSpn()
{
	return GetActivationFactory<KnownRuimFilePaths, IKnownRuimFilePathsStatics>().EFSpn();
}

inline Windows::Foundation::Collections::IVectorView<unsigned> KnownRuimFilePaths::Gid1()
{
	return GetActivationFactory<KnownRuimFilePaths, IKnownRuimFilePathsStatics>().Gid1();
}

inline Windows::Foundation::Collections::IVectorView<unsigned> KnownRuimFilePaths::Gid2()
{
	return GetActivationFactory<KnownRuimFilePaths, IKnownRuimFilePathsStatics>().Gid2();
}

inline Windows::Foundation::Collections::IVectorView<unsigned> KnownSimFilePaths::EFOns()
{
	return GetActivationFactory<KnownSimFilePaths, IKnownSimFilePathsStatics>().EFOns();
}

inline Windows::Foundation::Collections::IVectorView<unsigned> KnownSimFilePaths::EFSpn()
{
	return GetActivationFactory<KnownSimFilePaths, IKnownSimFilePathsStatics>().EFSpn();
}

inline Windows::Foundation::Collections::IVectorView<unsigned> KnownSimFilePaths::Gid1()
{
	return GetActivationFactory<KnownSimFilePaths, IKnownSimFilePathsStatics>().Gid1();
}

inline Windows::Foundation::Collections::IVectorView<unsigned> KnownSimFilePaths::Gid2()
{
	return GetActivationFactory<KnownSimFilePaths, IKnownSimFilePathsStatics>().Gid2();
}

inline Windows::Foundation::Collections::IVectorView<unsigned> KnownUSimFilePaths::EFSpn()
{
	return GetActivationFactory<KnownUSimFilePaths, IKnownUSimFilePathsStatics>().EFSpn();
}

inline Windows::Foundation::Collections::IVectorView<unsigned> KnownUSimFilePaths::EFOpl()
{
	return GetActivationFactory<KnownUSimFilePaths, IKnownUSimFilePathsStatics>().EFOpl();
}

inline Windows::Foundation::Collections::IVectorView<unsigned> KnownUSimFilePaths::EFPnn()
{
	return GetActivationFactory<KnownUSimFilePaths, IKnownUSimFilePathsStatics>().EFPnn();
}

inline Windows::Foundation::Collections::IVectorView<unsigned> KnownUSimFilePaths::Gid1()
{
	return GetActivationFactory<KnownUSimFilePaths, IKnownUSimFilePathsStatics>().Gid1();
}

inline Windows::Foundation::Collections::IVectorView<unsigned> KnownUSimFilePaths::Gid2()
{
	return GetActivationFactory<KnownUSimFilePaths, IKnownUSimFilePathsStatics>().Gid2();
}

inline bool HotspotAuthenticationContext::TryGetAuthenticationContext(StringReference const & evenToken, Windows::Networking::NetworkOperators::HotspotAuthenticationContext & context)
{
	return GetActivationFactory<HotspotAuthenticationContext, IHotspotAuthenticationContextStatics>().TryGetAuthenticationContext(evenToken, context);
}

inline ProvisioningAgent::ProvisioningAgent() :
	ProvisioningAgent(ActivateInstance<ProvisioningAgent>())
{}

inline Windows::Networking::NetworkOperators::ProvisioningAgent ProvisioningAgent::CreateFromNetworkAccountId(StringReference const & networkAccountId)
{
	return GetActivationFactory<ProvisioningAgent, IProvisioningAgentStaticMethods>().CreateFromNetworkAccountId(networkAccountId);
}

inline UssdMessage::UssdMessage(StringReference const & messageText) :
	UssdMessage(GetActivationFactory<UssdMessage, IUssdMessageFactory>().CreateMessage(messageText))
{}

inline Windows::Networking::NetworkOperators::UssdSession UssdSession::CreateFromNetworkAccountId(StringReference const & networkAccountId)
{
	return GetActivationFactory<UssdSession, IUssdSessionStatics>().CreateFromNetworkAccountId(networkAccountId);
}

inline Windows::Networking::NetworkOperators::UssdSession UssdSession::CreateFromNetworkInterfaceId(StringReference const & networkInterfaceId)
{
	return GetActivationFactory<UssdSession, IUssdSessionStatics>().CreateFromNetworkInterfaceId(networkInterfaceId);
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Proximity {

inline String ProximityDevice::GetDeviceSelector()
{
	return GetActivationFactory<ProximityDevice, IProximityDeviceStatics>().GetDeviceSelector();
}

inline Windows::Networking::Proximity::ProximityDevice ProximityDevice::GetDefault()
{
	return GetActivationFactory<ProximityDevice, IProximityDeviceStatics>().GetDefault();
}

inline Windows::Networking::Proximity::ProximityDevice ProximityDevice::FromId(StringReference const & deviceId)
{
	return GetActivationFactory<ProximityDevice, IProximityDeviceStatics>().FromId(deviceId);
}

inline Windows::Networking::Proximity::PeerRole PeerFinder::Role()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics2>().Role();
}

inline void PeerFinder::Role(Windows::Networking::Proximity::PeerRole const value)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics2>().Role(value);
}

inline Windows::Storage::Streams::IBuffer PeerFinder::DiscoveryData()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics2>().DiscoveryData();
}

inline void PeerFinder::DiscoveryData(Windows::Storage::Streams::IBuffer const & value)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics2>().DiscoveryData(value);
}

inline Windows::Networking::Proximity::PeerWatcher PeerFinder::CreateWatcher()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics2>().CreateWatcher();
}

inline bool PeerFinder::AllowBluetooth()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().AllowBluetooth();
}

inline void PeerFinder::AllowBluetooth(bool const value)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().AllowBluetooth(value);
}

inline bool PeerFinder::AllowInfrastructure()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().AllowInfrastructure();
}

inline void PeerFinder::AllowInfrastructure(bool const value)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().AllowInfrastructure(value);
}

inline bool PeerFinder::AllowWiFiDirect()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().AllowWiFiDirect();
}

inline void PeerFinder::AllowWiFiDirect(bool const value)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().AllowWiFiDirect(value);
}

inline String PeerFinder::DisplayName()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().DisplayName();
}

inline void PeerFinder::DisplayName(StringReference const & value)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().DisplayName(value);
}

inline Windows::Networking::Proximity::PeerDiscoveryTypes PeerFinder::SupportedDiscoveryTypes()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().SupportedDiscoveryTypes();
}

inline Windows::Foundation::Collections::IMap<String, String> PeerFinder::AlternateIdentities()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().AlternateIdentities();
}

inline void PeerFinder::Start()
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().Start();
}

inline void PeerFinder::Start(StringReference const & peerMessage)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().Start(peerMessage);
}

inline void PeerFinder::Stop()
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().Stop();
}

inline long long PeerFinder::TriggeredConnectionStateChanged(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs> const & handler)
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().TriggeredConnectionStateChanged(handler);
}

template <typename F> long long PeerFinder::TriggeredConnectionStateChanged(F handler)
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().TriggeredConnectionStateChanged(Windows::Foundation::TypedEventHandler<IInspectable, Windows::Networking::Proximity::TriggeredConnectionStateChangedEventArgs>(handler));
}

inline void PeerFinder::TriggeredConnectionStateChanged(long long const cookie)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().TriggeredConnectionStateChanged(cookie);
}

inline long long PeerFinder::ConnectionRequested(Windows::Foundation::ITypedEventHandler<IInspectable, Windows::Networking::Proximity::ConnectionRequestedEventArgs> const & handler)
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().ConnectionRequested(handler);
}

template <typename F> long long PeerFinder::ConnectionRequested(F handler)
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().ConnectionRequested(Windows::Foundation::TypedEventHandler<IInspectable, Windows::Networking::Proximity::ConnectionRequestedEventArgs>(handler));
}

inline void PeerFinder::ConnectionRequested(long long const cookie)
{
	GetActivationFactory<PeerFinder, IPeerFinderStatics>().ConnectionRequested(cookie);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Proximity::PeerInformation>> PeerFinder::FindAllPeersAsync()
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().FindAllPeersAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Networking::Sockets::StreamSocket> PeerFinder::ConnectAsync(Windows::Networking::Proximity::PeerInformation const & peerInformation)
{
	return GetActivationFactory<PeerFinder, IPeerFinderStatics>().ConnectAsync(peerInformation);
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace PushNotifications {

inline Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> PushNotificationChannelManager::CreatePushNotificationChannelForApplicationAsync()
{
	return GetActivationFactory<PushNotificationChannelManager, IPushNotificationChannelManagerStatics>().CreatePushNotificationChannelForApplicationAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> PushNotificationChannelManager::CreatePushNotificationChannelForApplicationAsync(StringReference const & applicationId)
{
	return GetActivationFactory<PushNotificationChannelManager, IPushNotificationChannelManagerStatics>().CreatePushNotificationChannelForApplicationAsync(applicationId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Networking::PushNotifications::PushNotificationChannel> PushNotificationChannelManager::CreatePushNotificationChannelForSecondaryTileAsync(StringReference const & tileId)
{
	return GetActivationFactory<PushNotificationChannelManager, IPushNotificationChannelManagerStatics>().CreatePushNotificationChannelForSecondaryTileAsync(tileId);
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace ServiceDiscovery { namespace Dnssd {

inline DnssdServiceInstance::DnssdServiceInstance(StringReference const & dnssdServiceInstanceName, Windows::Networking::HostName const & hostName, unsigned short const port) :
	DnssdServiceInstance(GetActivationFactory<DnssdServiceInstance, IDnssdServiceInstanceFactory>().Create(dnssdServiceInstanceName, hostName, port))
{}

inline DnssdRegistrationResult::DnssdRegistrationResult() :
	DnssdRegistrationResult(ActivateInstance<DnssdRegistrationResult>())
{}

}}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Sockets {

inline ControlChannelTrigger::ControlChannelTrigger(StringReference const & channelId, unsigned const serverKeepAliveIntervalInMinutes) :
	ControlChannelTrigger(GetActivationFactory<ControlChannelTrigger, IControlChannelTriggerFactory>().CreateControlChannelTrigger(channelId, serverKeepAliveIntervalInMinutes))
{}

inline ControlChannelTrigger::ControlChannelTrigger(StringReference const & channelId, unsigned const serverKeepAliveIntervalInMinutes, Windows::Networking::Sockets::ControlChannelTriggerResourceType const resourceRequestType) :
	ControlChannelTrigger(GetActivationFactory<ControlChannelTrigger, IControlChannelTriggerFactory>().CreateControlChannelTriggerEx(channelId, serverKeepAliveIntervalInMinutes, resourceRequestType))
{}

inline SocketActivityContext::SocketActivityContext(Windows::Storage::Streams::IBuffer const & data) :
	SocketActivityContext(GetActivationFactory<SocketActivityContext, ISocketActivityContextFactory>().Create(data))
{}

inline DatagramSocket::DatagramSocket() :
	DatagramSocket(ActivateInstance<DatagramSocket>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> DatagramSocket::GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName)
{
	return GetActivationFactory<DatagramSocket, IDatagramSocketStatics>().GetEndpointPairsAsync(remoteHostName, remoteServiceName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::EndpointPair>> DatagramSocket::GetEndpointPairsAsync(Windows::Networking::HostName const & remoteHostName, StringReference const & remoteServiceName, Windows::Networking::HostNameSortOptions const sortOptions)
{
	return GetActivationFactory<DatagramSocket, IDatagramSocketStatics>().GetEndpointPairsAsync(remoteHostName, remoteServiceName, sortOptions);
}

inline StreamSocket::StreamSocket() :
	StreamSocket(ActivateInstance<StreamSocket>())
{}

inline StreamSocketListener::StreamSocketListener() :
	StreamSocketListener(ActivateInstance<StreamSocketListener>())
{}

inline Windows::Foundation::Collections::IMapView<String, Windows::Networking::Sockets::SocketActivityInformation> SocketActivityInformation::AllSockets()
{
	return GetActivationFactory<SocketActivityInformation, ISocketActivityInformationStatics>().AllSockets();
}

inline MessageWebSocket::MessageWebSocket() :
	MessageWebSocket(ActivateInstance<MessageWebSocket>())
{}

inline StreamWebSocket::StreamWebSocket() :
	StreamWebSocket(ActivateInstance<StreamWebSocket>())
{}

inline WebSocketKeepAlive::WebSocketKeepAlive() :
	WebSocketKeepAlive(ActivateInstance<WebSocketKeepAlive>())
{}

inline Windows::Networking::Sockets::SocketErrorStatus SocketError::GetStatus(int const hresult)
{
	return GetActivationFactory<SocketError, ISocketErrorStatics>().GetStatus(hresult);
}

inline Windows::Web::WebErrorStatus WebSocketError::GetStatus(int const hresult)
{
	return GetActivationFactory<WebSocketError, IWebSocketErrorStatics>().GetStatus(hresult);
}

}}}}

namespace winrt { namespace Windows { namespace Networking { namespace Vpn {

inline VpnRoute::VpnRoute(Windows::Networking::HostName const & address, byte const prefixSize) :
	VpnRoute(GetActivationFactory<VpnRoute, IVpnRouteFactory>().CreateVpnRoute(address, prefixSize))
{}

inline VpnNamespaceInfo::VpnNamespaceInfo(StringReference const & name, Windows::Foundation::Collections::IVector<Windows::Networking::HostName> const & dnsServerList, Windows::Foundation::Collections::IVector<Windows::Networking::HostName> const & proxyServerList) :
	VpnNamespaceInfo(GetActivationFactory<VpnNamespaceInfo, IVpnNamespaceInfoFactory>().CreateVpnNamespaceInfo(name, dnsServerList, proxyServerList))
{}

inline VpnRouteAssignment::VpnRouteAssignment() :
	VpnRouteAssignment(ActivateInstance<VpnRouteAssignment>())
{}

inline VpnNamespaceAssignment::VpnNamespaceAssignment() :
	VpnNamespaceAssignment(ActivateInstance<VpnNamespaceAssignment>())
{}

inline VpnPacketBuffer::VpnPacketBuffer(Windows::Networking::Vpn::VpnPacketBuffer const & parentBuffer, unsigned const offset, unsigned const length) :
	VpnPacketBuffer(GetActivationFactory<VpnPacketBuffer, IVpnPacketBufferFactory>().CreateVpnPacketBuffer(parentBuffer, offset, length))
{}

inline void VpnChannel::ProcessEventAsync(IInspectable const & thirdPartyPlugIn, IInspectable const & event)
{
	GetActivationFactory<VpnChannel, IVpnChannelStatics>().ProcessEventAsync(thirdPartyPlugIn, event);
}

inline VpnDomainNameAssignment::VpnDomainNameAssignment() :
	VpnDomainNameAssignment(ActivateInstance<VpnDomainNameAssignment>())
{}

inline VpnTrafficFilterAssignment::VpnTrafficFilterAssignment() :
	VpnTrafficFilterAssignment(ActivateInstance<VpnTrafficFilterAssignment>())
{}

inline VpnAppId::VpnAppId(Windows::Networking::Vpn::VpnAppIdType const type, StringReference const & value) :
	VpnAppId(GetActivationFactory<VpnAppId, IVpnAppIdFactory>().Create(type, value))
{}

inline VpnDomainNameInfo::VpnDomainNameInfo(StringReference const & name, Windows::Networking::Vpn::VpnDomainNameType const nameType, Windows::Foundation::Collections::IIterable<Windows::Networking::HostName> const & dnsServerList, Windows::Foundation::Collections::IIterable<Windows::Networking::HostName> const & proxyServerList) :
	VpnDomainNameInfo(GetActivationFactory<VpnDomainNameInfo, IVpnDomainNameInfoFactory>().CreateVpnDomainNameInfo(name, nameType, dnsServerList, proxyServerList))
{}

inline VpnTrafficFilter::VpnTrafficFilter(Windows::Networking::Vpn::VpnAppId const & appId) :
	VpnTrafficFilter(GetActivationFactory<VpnTrafficFilter, IVpnTrafficFilterFactory>().Create(appId))
{}

inline VpnCustomEditBox::VpnCustomEditBox() :
	VpnCustomEditBox(ActivateInstance<VpnCustomEditBox>())
{}

inline VpnCustomPromptTextInput::VpnCustomPromptTextInput() :
	VpnCustomPromptTextInput(ActivateInstance<VpnCustomPromptTextInput>())
{}

inline VpnCustomComboBox::VpnCustomComboBox() :
	VpnCustomComboBox(ActivateInstance<VpnCustomComboBox>())
{}

inline VpnCustomPromptOptionSelector::VpnCustomPromptOptionSelector() :
	VpnCustomPromptOptionSelector(ActivateInstance<VpnCustomPromptOptionSelector>())
{}

inline VpnCustomTextBox::VpnCustomTextBox() :
	VpnCustomTextBox(ActivateInstance<VpnCustomTextBox>())
{}

inline VpnCustomPromptText::VpnCustomPromptText() :
	VpnCustomPromptText(ActivateInstance<VpnCustomPromptText>())
{}

inline VpnCustomCheckBox::VpnCustomCheckBox() :
	VpnCustomCheckBox(ActivateInstance<VpnCustomCheckBox>())
{}

inline VpnCustomPromptBooleanInput::VpnCustomPromptBooleanInput() :
	VpnCustomPromptBooleanInput(ActivateInstance<VpnCustomPromptBooleanInput>())
{}

inline VpnCustomErrorBox::VpnCustomErrorBox() :
	VpnCustomErrorBox(ActivateInstance<VpnCustomErrorBox>())
{}

inline VpnPlugInProfile::VpnPlugInProfile() :
	VpnPlugInProfile(ActivateInstance<VpnPlugInProfile>())
{}

inline VpnNativeProfile::VpnNativeProfile() :
	VpnNativeProfile(ActivateInstance<VpnNativeProfile>())
{}

inline VpnManagementAgent::VpnManagementAgent() :
	VpnManagementAgent(ActivateInstance<VpnManagementAgent>())
{}

}}}}

namespace winrt { namespace Windows { namespace Perception {

inline Windows::Perception::PerceptionTimestamp PerceptionTimestampHelper::FromHistoricalTargetTime(Windows::Foundation::DateTime const & targetTime)
{
	return GetActivationFactory<PerceptionTimestampHelper, IPerceptionTimestampHelperStatics>().FromHistoricalTargetTime(targetTime);
}

}}}

namespace winrt { namespace Windows { namespace Perception { namespace People {

}}}}

namespace winrt { namespace Windows { namespace Perception { namespace Spatial {

inline Windows::Perception::Spatial::SpatialAnchor SpatialAnchor::TryCreateRelativeTo(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem)
{
	return GetActivationFactory<SpatialAnchor, ISpatialAnchorStatics>().TryCreateRelativeTo(coordinateSystem);
}

inline Windows::Perception::Spatial::SpatialAnchor SpatialAnchor::TryCreateRelativeTo(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Foundation::Numerics::Vector3 const & position)
{
	return GetActivationFactory<SpatialAnchor, ISpatialAnchorStatics>().TryCreateRelativeTo(coordinateSystem, position);
}

inline Windows::Perception::Spatial::SpatialAnchor SpatialAnchor::TryCreateRelativeTo(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Foundation::Numerics::Vector3 const & position, Windows::Foundation::Numerics::Quaternion const & orientation)
{
	return GetActivationFactory<SpatialAnchor, ISpatialAnchorStatics>().TryCreateRelativeTo(coordinateSystem, position, orientation);
}

inline Windows::Perception::Spatial::SpatialLocator SpatialLocator::GetDefault()
{
	return GetActivationFactory<SpatialLocator, ISpatialLocatorStatics>().GetDefault();
}

inline Windows::Foundation::IAsyncOperation<Windows::Perception::Spatial::SpatialAnchorStore> SpatialAnchorManager::RequestStoreAsync()
{
	return GetActivationFactory<SpatialAnchorManager, ISpatialAnchorManagerStatics>().RequestStoreAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IMapView<String, Windows::Perception::Spatial::SpatialAnchor>> SpatialAnchorTransferManager::TryImportAnchorsAsync(Windows::Storage::Streams::IInputStream const & stream)
{
	return GetActivationFactory<SpatialAnchorTransferManager, ISpatialAnchorTransferManagerStatics>().TryImportAnchorsAsync(stream);
}

inline Windows::Foundation::IAsyncOperation<bool> SpatialAnchorTransferManager::TryExportAnchorsAsync(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, Windows::Perception::Spatial::SpatialAnchor>> const & anchors, Windows::Storage::Streams::IOutputStream const & stream)
{
	return GetActivationFactory<SpatialAnchorTransferManager, ISpatialAnchorTransferManagerStatics>().TryExportAnchorsAsync(anchors, stream);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Perception::Spatial::SpatialPerceptionAccessStatus> SpatialAnchorTransferManager::RequestAccessAsync()
{
	return GetActivationFactory<SpatialAnchorTransferManager, ISpatialAnchorTransferManagerStatics>().RequestAccessAsync();
}

inline Windows::Perception::Spatial::SpatialBoundingVolume SpatialBoundingVolume::FromBox(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Perception::Spatial::SpatialBoundingBox const & box)
{
	return GetActivationFactory<SpatialBoundingVolume, ISpatialBoundingVolumeStatics>().FromBox(coordinateSystem, box);
}

inline Windows::Perception::Spatial::SpatialBoundingVolume SpatialBoundingVolume::FromOrientedBox(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Perception::Spatial::SpatialBoundingOrientedBox const & box)
{
	return GetActivationFactory<SpatialBoundingVolume, ISpatialBoundingVolumeStatics>().FromOrientedBox(coordinateSystem, box);
}

inline Windows::Perception::Spatial::SpatialBoundingVolume SpatialBoundingVolume::FromSphere(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Perception::Spatial::SpatialBoundingSphere const & sphere)
{
	return GetActivationFactory<SpatialBoundingVolume, ISpatialBoundingVolumeStatics>().FromSphere(coordinateSystem, sphere);
}

inline Windows::Perception::Spatial::SpatialBoundingVolume SpatialBoundingVolume::FromFrustum(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Perception::Spatial::SpatialBoundingFrustum const & frustum)
{
	return GetActivationFactory<SpatialBoundingVolume, ISpatialBoundingVolumeStatics>().FromFrustum(coordinateSystem, frustum);
}

}}}}

namespace winrt { namespace Windows { namespace Perception { namespace Spatial { namespace Surfaces {

inline SpatialSurfaceMeshOptions::SpatialSurfaceMeshOptions() :
	SpatialSurfaceMeshOptions(ActivateInstance<SpatialSurfaceMeshOptions>())
{}

inline Windows::Foundation::Collections::IVectorView<winrt::Windows::Graphics::DirectX::DirectXPixelFormat> SpatialSurfaceMeshOptions::SupportedVertexPositionFormats()
{
	return GetActivationFactory<SpatialSurfaceMeshOptions, ISpatialSurfaceMeshOptionsStatics>().SupportedVertexPositionFormats();
}

inline Windows::Foundation::Collections::IVectorView<winrt::Windows::Graphics::DirectX::DirectXPixelFormat> SpatialSurfaceMeshOptions::SupportedTriangleIndexFormats()
{
	return GetActivationFactory<SpatialSurfaceMeshOptions, ISpatialSurfaceMeshOptionsStatics>().SupportedTriangleIndexFormats();
}

inline Windows::Foundation::Collections::IVectorView<winrt::Windows::Graphics::DirectX::DirectXPixelFormat> SpatialSurfaceMeshOptions::SupportedVertexNormalFormats()
{
	return GetActivationFactory<SpatialSurfaceMeshOptions, ISpatialSurfaceMeshOptionsStatics>().SupportedVertexNormalFormats();
}

inline SpatialSurfaceObserver::SpatialSurfaceObserver() :
	SpatialSurfaceObserver(ActivateInstance<SpatialSurfaceObserver>())
{}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Perception::Spatial::SpatialPerceptionAccessStatus> SpatialSurfaceObserver::RequestAccessAsync()
{
	return GetActivationFactory<SpatialSurfaceObserver, ISpatialSurfaceObserverStatics>().RequestAccessAsync();
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace OnlineId {

inline OnlineIdServiceTicketRequest::OnlineIdServiceTicketRequest(StringReference const & service, StringReference const & policy) :
	OnlineIdServiceTicketRequest(GetActivationFactory<OnlineIdServiceTicketRequest, IOnlineIdServiceTicketRequestFactory>().CreateOnlineIdServiceTicketRequest(service, policy))
{}

inline OnlineIdServiceTicketRequest::OnlineIdServiceTicketRequest(StringReference const & service) :
	OnlineIdServiceTicketRequest(GetActivationFactory<OnlineIdServiceTicketRequest, IOnlineIdServiceTicketRequestFactory>().CreateOnlineIdServiceTicketRequestAdvanced(service))
{}

inline OnlineIdAuthenticator::OnlineIdAuthenticator() :
	OnlineIdAuthenticator(ActivateInstance<OnlineIdAuthenticator>())
{}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web {

inline void WebAuthenticationBroker::AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri)
{
	GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics2>().AuthenticateAndContinue(requestUri);
}

inline void WebAuthenticationBroker::AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri)
{
	GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics2>().AuthenticateAndContinue(requestUri, callbackUri);
}

inline void WebAuthenticationBroker::AuthenticateAndContinue(Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri, Windows::Foundation::Collections::ValueSet const & continuationData, Windows::Security::Authentication::Web::WebAuthenticationOptions const options)
{
	GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics2>().AuthenticateAndContinue(requestUri, callbackUri, continuationData, options);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> WebAuthenticationBroker::AuthenticateSilentlyAsync(Windows::Foundation::Uri const & requestUri)
{
	return GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics2>().AuthenticateSilentlyAsync(requestUri);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> WebAuthenticationBroker::AuthenticateSilentlyAsync(Windows::Foundation::Uri const & requestUri, Windows::Security::Authentication::Web::WebAuthenticationOptions const options)
{
	return GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics2>().AuthenticateSilentlyAsync(requestUri, options);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> WebAuthenticationBroker::AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions const options, Windows::Foundation::Uri const & requestUri, Windows::Foundation::Uri const & callbackUri)
{
	return GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics>().AuthenticateAsync(options, requestUri, callbackUri);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::WebAuthenticationResult> WebAuthenticationBroker::AuthenticateAsync(Windows::Security::Authentication::Web::WebAuthenticationOptions const options, Windows::Foundation::Uri const & requestUri)
{
	return GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics>().AuthenticateAsync(options, requestUri);
}

inline Windows::Foundation::Uri WebAuthenticationBroker::GetCurrentApplicationCallbackUri()
{
	return GetActivationFactory<WebAuthenticationBroker, IWebAuthenticationBrokerStatics>().GetCurrentApplicationCallbackUri();
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Core {

inline WebTokenRequest::WebTokenRequest(Windows::Security::Credentials::WebAccountProvider const & provider, StringReference const & scope, StringReference const & clientId) :
	WebTokenRequest(GetActivationFactory<WebTokenRequest, IWebTokenRequestFactory>().Create(provider, scope, clientId))
{}

inline WebTokenRequest::WebTokenRequest(Windows::Security::Credentials::WebAccountProvider const & provider, StringReference const & scope, StringReference const & clientId, Windows::Security::Authentication::Web::Core::WebTokenRequestPromptType const promptType) :
	WebTokenRequest(GetActivationFactory<WebTokenRequest, IWebTokenRequestFactory>().CreateWithPromptType(provider, scope, clientId, promptType))
{}

inline WebTokenRequest::WebTokenRequest(Windows::Security::Credentials::WebAccountProvider const & provider) :
	WebTokenRequest(GetActivationFactory<WebTokenRequest, IWebTokenRequestFactory>().CreateWithProvider(provider))
{}

inline WebTokenRequest::WebTokenRequest(Windows::Security::Credentials::WebAccountProvider const & provider, StringReference const & scope) :
	WebTokenRequest(GetActivationFactory<WebTokenRequest, IWebTokenRequestFactory>().CreateWithScope(provider, scope))
{}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> WebAuthenticationCoreManager::GetTokenSilentlyAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request)
{
	return GetActivationFactory<WebAuthenticationCoreManager, IWebAuthenticationCoreManagerStatics>().GetTokenSilentlyAsync(request);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> WebAuthenticationCoreManager::GetTokenSilentlyAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request, Windows::Security::Credentials::WebAccount const & webAccount)
{
	return GetActivationFactory<WebAuthenticationCoreManager, IWebAuthenticationCoreManagerStatics>().GetTokenSilentlyAsync(request, webAccount);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> WebAuthenticationCoreManager::RequestTokenAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request)
{
	return GetActivationFactory<WebAuthenticationCoreManager, IWebAuthenticationCoreManagerStatics>().RequestTokenAsync(request);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Authentication::Web::Core::WebTokenRequestResult> WebAuthenticationCoreManager::RequestTokenAsync(Windows::Security::Authentication::Web::Core::WebTokenRequest const & request, Windows::Security::Credentials::WebAccount const & webAccount)
{
	return GetActivationFactory<WebAuthenticationCoreManager, IWebAuthenticationCoreManagerStatics>().RequestTokenAsync(request, webAccount);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> WebAuthenticationCoreManager::FindAccountAsync(Windows::Security::Credentials::WebAccountProvider const & provider, StringReference const & webAccountId)
{
	return GetActivationFactory<WebAuthenticationCoreManager, IWebAuthenticationCoreManagerStatics>().FindAccountAsync(provider, webAccountId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> WebAuthenticationCoreManager::FindAccountProviderAsync(StringReference const & webAccountProviderId)
{
	return GetActivationFactory<WebAuthenticationCoreManager, IWebAuthenticationCoreManagerStatics>().FindAccountProviderAsync(webAccountProviderId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> WebAuthenticationCoreManager::FindAccountProviderAsync(StringReference const & webAccountProviderId, StringReference const & authority)
{
	return GetActivationFactory<WebAuthenticationCoreManager, IWebAuthenticationCoreManagerStatics>().FindAccountProviderAsync(webAccountProviderId, authority);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccountProvider> WebAuthenticationCoreManager::FindAccountProviderAsync(StringReference const & webAccountProviderId, StringReference const & authority, Windows::System::User const & user)
{
	return GetActivationFactory<WebAuthenticationCoreManager, IWebAuthenticationCoreManagerStatics2>().FindAccountProviderAsync(webAccountProviderId, authority, user);
}

inline WebProviderError::WebProviderError(unsigned const errorCode, StringReference const & errorMessage) :
	WebProviderError(GetActivationFactory<WebProviderError, IWebProviderErrorFactory>().Create(errorCode, errorMessage))
{}

inline WebTokenResponse::WebTokenResponse() :
	WebTokenResponse(ActivateInstance<WebTokenResponse>())
{}

inline WebTokenResponse::WebTokenResponse(StringReference const & token) :
	WebTokenResponse(GetActivationFactory<WebTokenResponse, IWebTokenResponseFactory>().CreateWithToken(token))
{}

inline WebTokenResponse::WebTokenResponse(StringReference const & token, Windows::Security::Credentials::WebAccount const & webAccount) :
	WebTokenResponse(GetActivationFactory<WebTokenResponse, IWebTokenResponseFactory>().CreateWithTokenAndAccount(token, webAccount))
{}

inline WebTokenResponse::WebTokenResponse(StringReference const & token, Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Core::WebProviderError const & error) :
	WebTokenResponse(GetActivationFactory<WebTokenResponse, IWebTokenResponseFactory>().CreateWithTokenAccountAndError(token, webAccount, error))
{}

}}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Authentication { namespace Web { namespace Provider {

inline WebProviderTokenResponse::WebProviderTokenResponse(Windows::Security::Authentication::Web::Core::WebTokenResponse const & webTokenResponse) :
	WebProviderTokenResponse(GetActivationFactory<WebProviderTokenResponse, IWebProviderTokenResponseFactory>().Create(webTokenResponse))
{}

inline WebAccountClientView::WebAccountClientView(Windows::Security::Authentication::Web::Provider::WebAccountClientViewType const viewType, Windows::Foundation::Uri const & applicationCallbackUri) :
	WebAccountClientView(GetActivationFactory<WebAccountClientView, IWebAccountClientViewFactory>().Create(viewType, applicationCallbackUri))
{}

inline WebAccountClientView::WebAccountClientView(Windows::Security::Authentication::Web::Provider::WebAccountClientViewType const viewType, Windows::Foundation::Uri const & applicationCallbackUri, StringReference const & accountPairwiseId) :
	WebAccountClientView(GetActivationFactory<WebAccountClientView, IWebAccountClientViewFactory>().CreateWithPairwiseId(viewType, applicationCallbackUri, accountPairwiseId))
{}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> WebAccountManager::AddWebAccountAsync(StringReference const & webAccountId, StringReference const & webAccountUserName, Windows::Foundation::Collections::IMapView<String, String> const & props, Windows::Security::Authentication::Web::Provider::WebAccountScope const scope)
{
	return GetActivationFactory<WebAccountManager, IWebAccountScopeManagerStatics>().AddWebAccountAsync(webAccountId, webAccountUserName, props, scope);
}

inline Windows::Foundation::IAsyncAction WebAccountManager::SetScopeAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Provider::WebAccountScope const scope)
{
	return GetActivationFactory<WebAccountManager, IWebAccountScopeManagerStatics>().SetScopeAsync(webAccount, scope);
}

inline Windows::Security::Authentication::Web::Provider::WebAccountScope WebAccountManager::GetScope(Windows::Security::Credentials::WebAccount const & webAccount)
{
	return GetActivationFactory<WebAccountManager, IWebAccountScopeManagerStatics>().GetScope(webAccount);
}

inline Windows::Foundation::IAsyncAction WebAccountManager::PullCookiesAsync(StringReference const & uriString, StringReference const & callerPFN)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics2>().PullCookiesAsync(uriString, callerPFN);
}

inline Windows::Foundation::IAsyncAction WebAccountManager::UpdateWebAccountPropertiesAsync(Windows::Security::Credentials::WebAccount const & webAccount, StringReference const & webAccountUserName, Windows::Foundation::Collections::IMapView<String, String> const & additionalProperties)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().UpdateWebAccountPropertiesAsync(webAccount, webAccountUserName, additionalProperties);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::WebAccount> WebAccountManager::AddWebAccountAsync(StringReference const & webAccountId, StringReference const & webAccountUserName, Windows::Foundation::Collections::IMapView<String, String> const & props)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().AddWebAccountAsync(webAccountId, webAccountUserName, props);
}

inline Windows::Foundation::IAsyncAction WebAccountManager::DeleteWebAccountAsync(Windows::Security::Credentials::WebAccount const & webAccount)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().DeleteWebAccountAsync(webAccount);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Credentials::WebAccount>> WebAccountManager::FindAllProviderWebAccountsAsync()
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().FindAllProviderWebAccountsAsync();
}

inline Windows::Foundation::IAsyncAction WebAccountManager::PushCookiesAsync(Windows::Foundation::Uri const & uri, Windows::Foundation::Collections::IVectorView<Windows::Web::Http::HttpCookie> const & cookies)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().PushCookiesAsync(uri, cookies);
}

inline Windows::Foundation::IAsyncAction WebAccountManager::SetViewAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Security::Authentication::Web::Provider::WebAccountClientView const & view)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().SetViewAsync(webAccount, view);
}

inline Windows::Foundation::IAsyncAction WebAccountManager::ClearViewAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Foundation::Uri const & applicationCallbackUri)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().ClearViewAsync(webAccount, applicationCallbackUri);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Authentication::Web::Provider::WebAccountClientView>> WebAccountManager::GetViewsAsync(Windows::Security::Credentials::WebAccount const & webAccount)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().GetViewsAsync(webAccount);
}

inline Windows::Foundation::IAsyncAction WebAccountManager::SetWebAccountPictureAsync(Windows::Security::Credentials::WebAccount const & webAccount, Windows::Storage::Streams::IRandomAccessStream const & webAccountPicture)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().SetWebAccountPictureAsync(webAccount, webAccountPicture);
}

inline Windows::Foundation::IAsyncAction WebAccountManager::ClearWebAccountPictureAsync(Windows::Security::Credentials::WebAccount const & webAccount)
{
	return GetActivationFactory<WebAccountManager, IWebAccountManagerStatics>().ClearWebAccountPictureAsync(webAccount);
}

}}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Credentials {

inline WebAccountProvider::WebAccountProvider(StringReference const & id, StringReference const & displayName, Windows::Foundation::Uri const & iconUri) :
	WebAccountProvider(GetActivationFactory<WebAccountProvider, IWebAccountProviderFactory>().CreateWebAccountProvider(id, displayName, iconUri))
{}

inline WebAccount::WebAccount(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, StringReference const & userName, Windows::Security::Credentials::WebAccountState const state) :
	WebAccount(GetActivationFactory<WebAccount, IWebAccountFactory>().CreateWebAccount(webAccountProvider, userName, state))
{}

inline Windows::Foundation::IAsyncOperation<bool> KeyCredentialManager::IsSupportedAsync()
{
	return GetActivationFactory<KeyCredentialManager, IKeyCredentialManagerStatics>().IsSupportedAsync();
}

inline Windows::Foundation::IAsyncAction KeyCredentialManager::RenewAttestationAsync()
{
	return GetActivationFactory<KeyCredentialManager, IKeyCredentialManagerStatics>().RenewAttestationAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialRetrievalResult> KeyCredentialManager::RequestCreateAsync(StringReference const & name, Windows::Security::Credentials::KeyCredentialCreationOption const option)
{
	return GetActivationFactory<KeyCredentialManager, IKeyCredentialManagerStatics>().RequestCreateAsync(name, option);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::KeyCredentialRetrievalResult> KeyCredentialManager::OpenAsync(StringReference const & name)
{
	return GetActivationFactory<KeyCredentialManager, IKeyCredentialManagerStatics>().OpenAsync(name);
}

inline Windows::Foundation::IAsyncAction KeyCredentialManager::DeleteAsync(StringReference const & name)
{
	return GetActivationFactory<KeyCredentialManager, IKeyCredentialManagerStatics>().DeleteAsync(name);
}

inline PasswordCredential::PasswordCredential() :
	PasswordCredential(ActivateInstance<PasswordCredential>())
{}

inline PasswordCredential::PasswordCredential(StringReference const & resource, StringReference const & userName, StringReference const & password) :
	PasswordCredential(GetActivationFactory<PasswordCredential, ICredentialFactory>().CreatePasswordCredential(resource, userName, password))
{}

inline PasswordVault::PasswordVault() :
	PasswordVault(ActivateInstance<PasswordVault>())
{}

inline PasswordCredentialPropertyStore::PasswordCredentialPropertyStore() :
	PasswordCredentialPropertyStore(ActivateInstance<PasswordCredentialPropertyStore>())
{}

}}}}

namespace winrt { namespace Windows { namespace Security { namespace Credentials { namespace UI {

inline CredentialPickerOptions::CredentialPickerOptions() :
	CredentialPickerOptions(ActivateInstance<CredentialPickerOptions>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> CredentialPicker::PickAsync(Windows::Security::Credentials::UI::CredentialPickerOptions const & options)
{
	return GetActivationFactory<CredentialPicker, ICredentialPickerStatics>().PickAsync(options);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> CredentialPicker::PickAsync(StringReference const & targetName, StringReference const & message)
{
	return GetActivationFactory<CredentialPicker, ICredentialPickerStatics>().PickAsync(targetName, message);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Credentials::UI::CredentialPickerResults> CredentialPicker::PickAsync(StringReference const & targetName, StringReference const & message, StringReference const & caption)
{
	return GetActivationFactory<CredentialPicker, ICredentialPickerStatics>().PickAsync(targetName, message, caption);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Security::Credentials::UI::UserConsentVerifierAvailability> UserConsentVerifier::CheckAvailabilityAsync()
{
	return GetActivationFactory<UserConsentVerifier, IUserConsentVerifierStatics>().CheckAvailabilityAsync();
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Security::Credentials::UI::UserConsentVerificationResult> UserConsentVerifier::RequestVerificationAsync(StringReference const & message)
{
	return GetActivationFactory<UserConsentVerifier, IUserConsentVerifierStatics>().RequestVerificationAsync(message);
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography {

inline bool CryptographicBuffer::Compare(Windows::Storage::Streams::IBuffer const & object1, Windows::Storage::Streams::IBuffer const & object2)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().Compare(object1, object2);
}

inline Windows::Storage::Streams::IBuffer CryptographicBuffer::GenerateRandom(unsigned const length)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().GenerateRandom(length);
}

inline unsigned CryptographicBuffer::GenerateRandomNumber()
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().GenerateRandomNumber();
}

inline Windows::Storage::Streams::IBuffer CryptographicBuffer::DecodeFromHexString(StringReference const & value)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().DecodeFromHexString(value);
}

inline String CryptographicBuffer::EncodeToHexString(Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().EncodeToHexString(buffer);
}

inline Windows::Storage::Streams::IBuffer CryptographicBuffer::DecodeFromBase64String(StringReference const & value)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().DecodeFromBase64String(value);
}

inline String CryptographicBuffer::EncodeToBase64String(Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().EncodeToBase64String(buffer);
}

inline Windows::Storage::Streams::IBuffer CryptographicBuffer::ConvertStringToBinary(StringReference const & value, Windows::Security::Cryptography::BinaryStringEncoding const encoding)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().ConvertStringToBinary(value, encoding);
}

inline String CryptographicBuffer::ConvertBinaryToString(Windows::Security::Cryptography::BinaryStringEncoding const encoding, Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<CryptographicBuffer, ICryptographicBufferStatics>().ConvertBinaryToString(encoding, buffer);
}

}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace Certificates {

inline Certificate::Certificate(Windows::Storage::Streams::IBuffer const & certBlob) :
	Certificate(GetActivationFactory<Certificate, ICertificateFactory>().CreateCertificate(certBlob))
{}

inline CertificateRequestProperties::CertificateRequestProperties() :
	CertificateRequestProperties(ActivateInstance<CertificateRequestProperties>())
{}

inline PfxImportParameters::PfxImportParameters() :
	PfxImportParameters(ActivateInstance<PfxImportParameters>())
{}

inline Windows::Security::Cryptography::Certificates::UserCertificateEnrollmentManager CertificateEnrollmentManager::UserCertificateEnrollmentManager()
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics2>().UserCertificateEnrollmentManager();
}

inline Windows::Foundation::IAsyncAction CertificateEnrollmentManager::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, StringReference const & friendlyName, StringReference const & keyStorageProvider)
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics2>().ImportPfxDataAsync(pfxData, password, exportable, keyProtectionLevel, installOption, friendlyName, keyStorageProvider);
}

inline Windows::Foundation::IAsyncAction CertificateEnrollmentManager::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::PfxImportParameters const & pfxImportParameters)
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics3>().ImportPfxDataAsync(pfxData, password, pfxImportParameters);
}

inline Windows::Foundation::IAsyncOperation<String> CertificateEnrollmentManager::CreateRequestAsync(Windows::Security::Cryptography::Certificates::CertificateRequestProperties const & request)
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics>().CreateRequestAsync(request);
}

inline Windows::Foundation::IAsyncAction CertificateEnrollmentManager::InstallCertificateAsync(StringReference const & certificate, Windows::Security::Cryptography::Certificates::InstallOptions const installOption)
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics>().InstallCertificateAsync(certificate, installOption);
}

inline Windows::Foundation::IAsyncAction CertificateEnrollmentManager::ImportPfxDataAsync(StringReference const & pfxData, StringReference const & password, Windows::Security::Cryptography::Certificates::ExportOption const exportable, Windows::Security::Cryptography::Certificates::KeyProtectionLevel const keyProtectionLevel, Windows::Security::Cryptography::Certificates::InstallOptions const installOption, StringReference const & friendlyName)
{
	return GetActivationFactory<CertificateEnrollmentManager, ICertificateEnrollmentManagerStatics>().ImportPfxDataAsync(pfxData, password, exportable, keyProtectionLevel, installOption, friendlyName);
}

inline Windows::Foundation::IAsyncOperation<String> KeyAttestationHelper::DecryptTpmAttestationCredentialAsync(StringReference const & credential, StringReference const & containerName)
{
	return GetActivationFactory<KeyAttestationHelper, IKeyAttestationHelperStatics2>().DecryptTpmAttestationCredentialAsync(credential, containerName);
}

inline Windows::Foundation::IAsyncOperation<String> KeyAttestationHelper::DecryptTpmAttestationCredentialAsync(StringReference const & credential)
{
	return GetActivationFactory<KeyAttestationHelper, IKeyAttestationHelperStatics>().DecryptTpmAttestationCredentialAsync(credential);
}

inline String KeyAttestationHelper::GetTpmAttestationCredentialId(StringReference const & credential)
{
	return GetActivationFactory<KeyAttestationHelper, IKeyAttestationHelperStatics>().GetTpmAttestationCredentialId(credential);
}

inline CertificateQuery::CertificateQuery() :
	CertificateQuery(ActivateInstance<CertificateQuery>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> CertificateStores::FindAllAsync()
{
	return GetActivationFactory<CertificateStores, ICertificateStoresStatics>().FindAllAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Security::Cryptography::Certificates::Certificate>> CertificateStores::FindAllAsync(Windows::Security::Cryptography::Certificates::CertificateQuery const & query)
{
	return GetActivationFactory<CertificateStores, ICertificateStoresStatics>().FindAllAsync(query);
}

inline Windows::Security::Cryptography::Certificates::CertificateStore CertificateStores::TrustedRootCertificationAuthorities()
{
	return GetActivationFactory<CertificateStores, ICertificateStoresStatics>().TrustedRootCertificationAuthorities();
}

inline Windows::Security::Cryptography::Certificates::CertificateStore CertificateStores::IntermediateCertificationAuthorities()
{
	return GetActivationFactory<CertificateStores, ICertificateStoresStatics>().IntermediateCertificationAuthorities();
}

inline Windows::Security::Cryptography::Certificates::CertificateStore CertificateStores::GetStoreByName(StringReference const & storeName)
{
	return GetActivationFactory<CertificateStores, ICertificateStoresStatics>().GetStoreByName(storeName);
}

inline String KeyAlgorithmNames::Ecdsa()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics2>().Ecdsa();
}

inline String KeyAlgorithmNames::Ecdh()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics2>().Ecdh();
}

inline String KeyAlgorithmNames::Rsa()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Rsa();
}

inline String KeyAlgorithmNames::Dsa()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Dsa();
}

inline String KeyAlgorithmNames::Ecdh256()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdh256();
}

inline String KeyAlgorithmNames::Ecdh384()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdh384();
}

inline String KeyAlgorithmNames::Ecdh521()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdh521();
}

inline String KeyAlgorithmNames::Ecdsa256()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdsa256();
}

inline String KeyAlgorithmNames::Ecdsa384()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdsa384();
}

inline String KeyAlgorithmNames::Ecdsa521()
{
	return GetActivationFactory<KeyAlgorithmNames, IKeyAlgorithmNamesStatics>().Ecdsa521();
}

inline String KeyStorageProviderNames::PassportKeyStorageProvider()
{
	return GetActivationFactory<KeyStorageProviderNames, IKeyStorageProviderNamesStatics2>().PassportKeyStorageProvider();
}

inline String KeyStorageProviderNames::SoftwareKeyStorageProvider()
{
	return GetActivationFactory<KeyStorageProviderNames, IKeyStorageProviderNamesStatics>().SoftwareKeyStorageProvider();
}

inline String KeyStorageProviderNames::SmartcardKeyStorageProvider()
{
	return GetActivationFactory<KeyStorageProviderNames, IKeyStorageProviderNamesStatics>().SmartcardKeyStorageProvider();
}

inline String KeyStorageProviderNames::PlatformKeyStorageProvider()
{
	return GetActivationFactory<KeyStorageProviderNames, IKeyStorageProviderNamesStatics>().PlatformKeyStorageProvider();
}

inline ChainBuildingParameters::ChainBuildingParameters() :
	ChainBuildingParameters(ActivateInstance<ChainBuildingParameters>())
{}

inline ChainValidationParameters::ChainValidationParameters() :
	ChainValidationParameters(ActivateInstance<ChainValidationParameters>())
{}

inline CertificateKeyUsages::CertificateKeyUsages() :
	CertificateKeyUsages(ActivateInstance<CertificateKeyUsages>())
{}

inline SubjectAlternativeNameInfo::SubjectAlternativeNameInfo() :
	SubjectAlternativeNameInfo(ActivateInstance<SubjectAlternativeNameInfo>())
{}

inline CmsSignerInfo::CmsSignerInfo() :
	CmsSignerInfo(ActivateInstance<CmsSignerInfo>())
{}

inline CmsAttachedSignature::CmsAttachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) :
	CmsAttachedSignature(GetActivationFactory<CmsAttachedSignature, ICmsAttachedSignatureFactory>().CreateCmsAttachedSignature(inputBlob))
{}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> CmsAttachedSignature::GenerateSignatureAsync(Windows::Storage::Streams::IBuffer const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates)
{
	return GetActivationFactory<CmsAttachedSignature, ICmsAttachedSignatureStatics>().GenerateSignatureAsync(data, signers, certificates);
}

inline CmsDetachedSignature::CmsDetachedSignature(Windows::Storage::Streams::IBuffer const & inputBlob) :
	CmsDetachedSignature(GetActivationFactory<CmsDetachedSignature, ICmsDetachedSignatureFactory>().CreateCmsDetachedSignature(inputBlob))
{}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> CmsDetachedSignature::GenerateSignatureAsync(Windows::Storage::Streams::IInputStream const & data, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::CmsSignerInfo> const & signers, Windows::Foundation::Collections::IIterable<Windows::Security::Cryptography::Certificates::Certificate> const & certificates)
{
	return GetActivationFactory<CmsDetachedSignature, ICmsDetachedSignatureStatics>().GenerateSignatureAsync(data, signers, certificates);
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace Core {

inline Windows::Security::Cryptography::Core::KeyDerivationParameters KeyDerivationParameters::BuildForPbkdf2(Windows::Storage::Streams::IBuffer const & pbkdf2Salt, unsigned const iterationCount)
{
	return GetActivationFactory<KeyDerivationParameters, IKeyDerivationParametersStatics>().BuildForPbkdf2(pbkdf2Salt, iterationCount);
}

inline Windows::Security::Cryptography::Core::KeyDerivationParameters KeyDerivationParameters::BuildForSP800108(Windows::Storage::Streams::IBuffer const & label, Windows::Storage::Streams::IBuffer const & context)
{
	return GetActivationFactory<KeyDerivationParameters, IKeyDerivationParametersStatics>().BuildForSP800108(label, context);
}

inline Windows::Security::Cryptography::Core::KeyDerivationParameters KeyDerivationParameters::BuildForSP80056a(Windows::Storage::Streams::IBuffer const & algorithmId, Windows::Storage::Streams::IBuffer const & partyUInfo, Windows::Storage::Streams::IBuffer const & partyVInfo, Windows::Storage::Streams::IBuffer const & suppPubInfo, Windows::Storage::Streams::IBuffer const & suppPrivInfo)
{
	return GetActivationFactory<KeyDerivationParameters, IKeyDerivationParametersStatics>().BuildForSP80056a(algorithmId, partyUInfo, partyVInfo, suppPubInfo, suppPrivInfo);
}

inline Windows::Security::Cryptography::Core::KeyDerivationParameters KeyDerivationParameters::BuildForCapi1Kdf(Windows::Security::Cryptography::Core::Capi1KdfTargetAlgorithm const capi1KdfTargetAlgorithm)
{
	return GetActivationFactory<KeyDerivationParameters, IKeyDerivationParametersStatics2>().BuildForCapi1Kdf(capi1KdfTargetAlgorithm);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::Cryptography::Core::CryptographicKey> PersistedKeyProvider::OpenKeyPairFromCertificateAsync(Windows::Security::Cryptography::Certificates::Certificate const & certificate, StringReference const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding const padding)
{
	return GetActivationFactory<PersistedKeyProvider, IPersistedKeyProviderStatics>().OpenKeyPairFromCertificateAsync(certificate, hashAlgorithmName, padding);
}

inline Windows::Security::Cryptography::Core::CryptographicKey PersistedKeyProvider::OpenPublicKeyFromCertificate(Windows::Security::Cryptography::Certificates::Certificate const & certificate, StringReference const & hashAlgorithmName, Windows::Security::Cryptography::Core::CryptographicPadding const padding)
{
	return GetActivationFactory<PersistedKeyProvider, IPersistedKeyProviderStatics>().OpenPublicKeyFromCertificate(certificate, hashAlgorithmName, padding);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::Encrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().Encrypt(key, data, iv);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::Decrypt(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().Decrypt(key, data, iv);
}

inline Windows::Security::Cryptography::Core::EncryptedAndAuthenticatedData CryptographicEngine::EncryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticatedData)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().EncryptAndAuthenticate(key, data, nonce, authenticatedData);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::DecryptAndAuthenticate(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & nonce, Windows::Storage::Streams::IBuffer const & authenticationTag, Windows::Storage::Streams::IBuffer const & authenticatedData)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().DecryptAndAuthenticate(key, data, nonce, authenticationTag, authenticatedData);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::Sign(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().Sign(key, data);
}

inline bool CryptographicEngine::VerifySignature(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().VerifySignature(key, data, signature);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::DeriveKeyMaterial(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Security::Cryptography::Core::KeyDerivationParameters const & parameters, unsigned const desiredKeySize)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics>().DeriveKeyMaterial(key, parameters, desiredKeySize);
}

inline Windows::Storage::Streams::IBuffer CryptographicEngine::SignHashedData(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics2>().SignHashedData(key, data);
}

inline bool CryptographicEngine::VerifySignatureWithHashInput(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & signature)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics2>().VerifySignatureWithHashInput(key, data, signature);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> CryptographicEngine::DecryptAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data, Windows::Storage::Streams::IBuffer const & iv)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics2>().DecryptAsync(key, data, iv);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> CryptographicEngine::SignAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics2>().SignAsync(key, data);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> CryptographicEngine::SignHashedDataAsync(Windows::Security::Cryptography::Core::CryptographicKey const & key, Windows::Storage::Streams::IBuffer const & data)
{
	return GetActivationFactory<CryptographicEngine, ICryptographicEngineStatics2>().SignHashedDataAsync(key, data);
}

inline Windows::Security::Cryptography::Core::HashAlgorithmProvider HashAlgorithmProvider::OpenAlgorithm(StringReference const & algorithm)
{
	return GetActivationFactory<HashAlgorithmProvider, IHashAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

inline Windows::Security::Cryptography::Core::MacAlgorithmProvider MacAlgorithmProvider::OpenAlgorithm(StringReference const & algorithm)
{
	return GetActivationFactory<MacAlgorithmProvider, IMacAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

inline Windows::Security::Cryptography::Core::KeyDerivationAlgorithmProvider KeyDerivationAlgorithmProvider::OpenAlgorithm(StringReference const & algorithm)
{
	return GetActivationFactory<KeyDerivationAlgorithmProvider, IKeyDerivationAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

inline Windows::Security::Cryptography::Core::SymmetricKeyAlgorithmProvider SymmetricKeyAlgorithmProvider::OpenAlgorithm(StringReference const & algorithm)
{
	return GetActivationFactory<SymmetricKeyAlgorithmProvider, ISymmetricKeyAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

inline Windows::Security::Cryptography::Core::AsymmetricKeyAlgorithmProvider AsymmetricKeyAlgorithmProvider::OpenAlgorithm(StringReference const & algorithm)
{
	return GetActivationFactory<AsymmetricKeyAlgorithmProvider, IAsymmetricKeyAlgorithmProviderStatics>().OpenAlgorithm(algorithm);
}

inline String HashAlgorithmNames::Md5()
{
	return GetActivationFactory<HashAlgorithmNames, IHashAlgorithmNamesStatics>().Md5();
}

inline String HashAlgorithmNames::Sha1()
{
	return GetActivationFactory<HashAlgorithmNames, IHashAlgorithmNamesStatics>().Sha1();
}

inline String HashAlgorithmNames::Sha256()
{
	return GetActivationFactory<HashAlgorithmNames, IHashAlgorithmNamesStatics>().Sha256();
}

inline String HashAlgorithmNames::Sha384()
{
	return GetActivationFactory<HashAlgorithmNames, IHashAlgorithmNamesStatics>().Sha384();
}

inline String HashAlgorithmNames::Sha512()
{
	return GetActivationFactory<HashAlgorithmNames, IHashAlgorithmNamesStatics>().Sha512();
}

inline String MacAlgorithmNames::HmacMd5()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().HmacMd5();
}

inline String MacAlgorithmNames::HmacSha1()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().HmacSha1();
}

inline String MacAlgorithmNames::HmacSha256()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().HmacSha256();
}

inline String MacAlgorithmNames::HmacSha384()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().HmacSha384();
}

inline String MacAlgorithmNames::HmacSha512()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().HmacSha512();
}

inline String MacAlgorithmNames::AesCmac()
{
	return GetActivationFactory<MacAlgorithmNames, IMacAlgorithmNamesStatics>().AesCmac();
}

inline String SymmetricAlgorithmNames::DesCbc()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().DesCbc();
}

inline String SymmetricAlgorithmNames::DesEcb()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().DesEcb();
}

inline String SymmetricAlgorithmNames::TripleDesCbc()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().TripleDesCbc();
}

inline String SymmetricAlgorithmNames::TripleDesEcb()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().TripleDesEcb();
}

inline String SymmetricAlgorithmNames::Rc2Cbc()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().Rc2Cbc();
}

inline String SymmetricAlgorithmNames::Rc2Ecb()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().Rc2Ecb();
}

inline String SymmetricAlgorithmNames::AesCbc()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesCbc();
}

inline String SymmetricAlgorithmNames::AesEcb()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesEcb();
}

inline String SymmetricAlgorithmNames::AesGcm()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesGcm();
}

inline String SymmetricAlgorithmNames::AesCcm()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesCcm();
}

inline String SymmetricAlgorithmNames::AesCbcPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesCbcPkcs7();
}

inline String SymmetricAlgorithmNames::AesEcbPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().AesEcbPkcs7();
}

inline String SymmetricAlgorithmNames::DesCbcPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().DesCbcPkcs7();
}

inline String SymmetricAlgorithmNames::DesEcbPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().DesEcbPkcs7();
}

inline String SymmetricAlgorithmNames::TripleDesCbcPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().TripleDesCbcPkcs7();
}

inline String SymmetricAlgorithmNames::TripleDesEcbPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().TripleDesEcbPkcs7();
}

inline String SymmetricAlgorithmNames::Rc2CbcPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().Rc2CbcPkcs7();
}

inline String SymmetricAlgorithmNames::Rc2EcbPkcs7()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().Rc2EcbPkcs7();
}

inline String SymmetricAlgorithmNames::Rc4()
{
	return GetActivationFactory<SymmetricAlgorithmNames, ISymmetricAlgorithmNamesStatics>().Rc4();
}

inline String AsymmetricAlgorithmNames::EcdsaSha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics2>().EcdsaSha256();
}

inline String AsymmetricAlgorithmNames::EcdsaSha384()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics2>().EcdsaSha384();
}

inline String AsymmetricAlgorithmNames::EcdsaSha512()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics2>().EcdsaSha512();
}

inline String AsymmetricAlgorithmNames::RsaPkcs1()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaPkcs1();
}

inline String AsymmetricAlgorithmNames::RsaOaepSha1()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaOaepSha1();
}

inline String AsymmetricAlgorithmNames::RsaOaepSha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaOaepSha256();
}

inline String AsymmetricAlgorithmNames::RsaOaepSha384()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaOaepSha384();
}

inline String AsymmetricAlgorithmNames::RsaOaepSha512()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaOaepSha512();
}

inline String AsymmetricAlgorithmNames::EcdsaP256Sha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().EcdsaP256Sha256();
}

inline String AsymmetricAlgorithmNames::EcdsaP384Sha384()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().EcdsaP384Sha384();
}

inline String AsymmetricAlgorithmNames::EcdsaP521Sha512()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().EcdsaP521Sha512();
}

inline String AsymmetricAlgorithmNames::DsaSha1()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().DsaSha1();
}

inline String AsymmetricAlgorithmNames::DsaSha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().DsaSha256();
}

inline String AsymmetricAlgorithmNames::RsaSignPkcs1Sha1()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPkcs1Sha1();
}

inline String AsymmetricAlgorithmNames::RsaSignPkcs1Sha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPkcs1Sha256();
}

inline String AsymmetricAlgorithmNames::RsaSignPkcs1Sha384()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPkcs1Sha384();
}

inline String AsymmetricAlgorithmNames::RsaSignPkcs1Sha512()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPkcs1Sha512();
}

inline String AsymmetricAlgorithmNames::RsaSignPssSha1()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPssSha1();
}

inline String AsymmetricAlgorithmNames::RsaSignPssSha256()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPssSha256();
}

inline String AsymmetricAlgorithmNames::RsaSignPssSha384()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPssSha384();
}

inline String AsymmetricAlgorithmNames::RsaSignPssSha512()
{
	return GetActivationFactory<AsymmetricAlgorithmNames, IAsymmetricAlgorithmNamesStatics>().RsaSignPssSha512();
}

inline String EccCurveNames::BrainpoolP160r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP160r1();
}

inline String EccCurveNames::BrainpoolP160t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP160t1();
}

inline String EccCurveNames::BrainpoolP192r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP192r1();
}

inline String EccCurveNames::BrainpoolP192t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP192t1();
}

inline String EccCurveNames::BrainpoolP224r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP224r1();
}

inline String EccCurveNames::BrainpoolP224t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP224t1();
}

inline String EccCurveNames::BrainpoolP256r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP256r1();
}

inline String EccCurveNames::BrainpoolP256t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP256t1();
}

inline String EccCurveNames::BrainpoolP320r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP320r1();
}

inline String EccCurveNames::BrainpoolP320t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP320t1();
}

inline String EccCurveNames::BrainpoolP384r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP384r1();
}

inline String EccCurveNames::BrainpoolP384t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP384t1();
}

inline String EccCurveNames::BrainpoolP512r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP512r1();
}

inline String EccCurveNames::BrainpoolP512t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().BrainpoolP512t1();
}

inline String EccCurveNames::Curve25519()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().Curve25519();
}

inline String EccCurveNames::Ec192wapi()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().Ec192wapi();
}

inline String EccCurveNames::NistP192()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().NistP192();
}

inline String EccCurveNames::NistP224()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().NistP224();
}

inline String EccCurveNames::NistP256()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().NistP256();
}

inline String EccCurveNames::NistP384()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().NistP384();
}

inline String EccCurveNames::NistP521()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().NistP521();
}

inline String EccCurveNames::NumsP256t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().NumsP256t1();
}

inline String EccCurveNames::NumsP384t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().NumsP384t1();
}

inline String EccCurveNames::NumsP512t1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().NumsP512t1();
}

inline String EccCurveNames::SecP160k1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP160k1();
}

inline String EccCurveNames::SecP160r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP160r1();
}

inline String EccCurveNames::SecP160r2()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP160r2();
}

inline String EccCurveNames::SecP192k1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP192k1();
}

inline String EccCurveNames::SecP192r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP192r1();
}

inline String EccCurveNames::SecP224k1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP224k1();
}

inline String EccCurveNames::SecP224r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP224r1();
}

inline String EccCurveNames::SecP256k1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP256k1();
}

inline String EccCurveNames::SecP256r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP256r1();
}

inline String EccCurveNames::SecP384r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP384r1();
}

inline String EccCurveNames::SecP521r1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().SecP521r1();
}

inline String EccCurveNames::Wtls7()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().Wtls7();
}

inline String EccCurveNames::Wtls9()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().Wtls9();
}

inline String EccCurveNames::Wtls12()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().Wtls12();
}

inline String EccCurveNames::X962P192v1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().X962P192v1();
}

inline String EccCurveNames::X962P192v2()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().X962P192v2();
}

inline String EccCurveNames::X962P192v3()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().X962P192v3();
}

inline String EccCurveNames::X962P239v1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().X962P239v1();
}

inline String EccCurveNames::X962P239v2()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().X962P239v2();
}

inline String EccCurveNames::X962P239v3()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().X962P239v3();
}

inline String EccCurveNames::X962P256v1()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().X962P256v1();
}

inline Windows::Foundation::Collections::IVectorView<String> EccCurveNames::AllEccCurveNames()
{
	return GetActivationFactory<EccCurveNames, IEccCurveNamesStatics>().AllEccCurveNames();
}

inline String KeyDerivationAlgorithmNames::CapiKdfMd5()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics2>().CapiKdfMd5();
}

inline String KeyDerivationAlgorithmNames::CapiKdfSha1()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics2>().CapiKdfSha1();
}

inline String KeyDerivationAlgorithmNames::CapiKdfSha256()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics2>().CapiKdfSha256();
}

inline String KeyDerivationAlgorithmNames::CapiKdfSha384()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics2>().CapiKdfSha384();
}

inline String KeyDerivationAlgorithmNames::CapiKdfSha512()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics2>().CapiKdfSha512();
}

inline String KeyDerivationAlgorithmNames::Pbkdf2Md5()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Pbkdf2Md5();
}

inline String KeyDerivationAlgorithmNames::Pbkdf2Sha1()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Pbkdf2Sha1();
}

inline String KeyDerivationAlgorithmNames::Pbkdf2Sha256()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Pbkdf2Sha256();
}

inline String KeyDerivationAlgorithmNames::Pbkdf2Sha384()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Pbkdf2Sha384();
}

inline String KeyDerivationAlgorithmNames::Pbkdf2Sha512()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Pbkdf2Sha512();
}

inline String KeyDerivationAlgorithmNames::Sp800108CtrHmacMd5()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp800108CtrHmacMd5();
}

inline String KeyDerivationAlgorithmNames::Sp800108CtrHmacSha1()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp800108CtrHmacSha1();
}

inline String KeyDerivationAlgorithmNames::Sp800108CtrHmacSha256()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp800108CtrHmacSha256();
}

inline String KeyDerivationAlgorithmNames::Sp800108CtrHmacSha384()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp800108CtrHmacSha384();
}

inline String KeyDerivationAlgorithmNames::Sp800108CtrHmacSha512()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp800108CtrHmacSha512();
}

inline String KeyDerivationAlgorithmNames::Sp80056aConcatMd5()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp80056aConcatMd5();
}

inline String KeyDerivationAlgorithmNames::Sp80056aConcatSha1()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp80056aConcatSha1();
}

inline String KeyDerivationAlgorithmNames::Sp80056aConcatSha256()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp80056aConcatSha256();
}

inline String KeyDerivationAlgorithmNames::Sp80056aConcatSha384()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp80056aConcatSha384();
}

inline String KeyDerivationAlgorithmNames::Sp80056aConcatSha512()
{
	return GetActivationFactory<KeyDerivationAlgorithmNames, IKeyDerivationAlgorithmNamesStatics>().Sp80056aConcatSha512();
}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace Cryptography { namespace DataProtection {

inline DataProtectionProvider::DataProtectionProvider() :
	DataProtectionProvider(ActivateInstance<DataProtectionProvider>())
{}

inline DataProtectionProvider::DataProtectionProvider(StringReference const & protectionDescriptor) :
	DataProtectionProvider(GetActivationFactory<DataProtectionProvider, IDataProtectionProviderFactory>().CreateOverloadExplicit(protectionDescriptor))
{}

}}}}}

namespace winrt { namespace Windows { namespace Security { namespace EnterpriseData {

inline bool ProtectionPolicyManager::HasContentBeenRevokedSince(StringReference const & identity, Windows::Foundation::DateTime const & since)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().HasContentBeenRevokedSince(identity, since);
}

inline Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult ProtectionPolicyManager::CheckAccessForApp(StringReference const & sourceIdentity, StringReference const & appPackageFamilyName)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().CheckAccessForApp(sourceIdentity, appPackageFamilyName);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> ProtectionPolicyManager::RequestAccessForAppAsync(StringReference const & sourceIdentity, StringReference const & appPackageFamilyName)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().RequestAccessForAppAsync(sourceIdentity, appPackageFamilyName);
}

inline Windows::Security::EnterpriseData::EnforcementLevel ProtectionPolicyManager::GetEnforcementLevel(StringReference const & identity)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().GetEnforcementLevel(identity);
}

inline bool ProtectionPolicyManager::IsUserDecryptionAllowed(StringReference const & identity)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().IsUserDecryptionAllowed(identity);
}

inline bool ProtectionPolicyManager::IsProtectionUnderLockRequired(StringReference const & identity)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().IsProtectionUnderLockRequired(identity);
}

inline long long ProtectionPolicyManager::PolicyChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().PolicyChanged(handler);
}

template <typename F> long long ProtectionPolicyManager::PolicyChanged(F handler)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().PolicyChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void ProtectionPolicyManager::PolicyChanged(long long const token)
{
	GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().PolicyChanged(token);
}

inline bool ProtectionPolicyManager::IsProtectionEnabled()
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics2>().IsProtectionEnabled();
}

inline bool ProtectionPolicyManager::IsIdentityManaged(StringReference const & identity)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().IsIdentityManaged(identity);
}

inline bool ProtectionPolicyManager::TryApplyProcessUIPolicy(StringReference const & identity)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().TryApplyProcessUIPolicy(identity);
}

inline void ProtectionPolicyManager::ClearProcessUIPolicy()
{
	GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ClearProcessUIPolicy();
}

inline Windows::Security::EnterpriseData::ThreadNetworkContext ProtectionPolicyManager::CreateCurrentThreadNetworkContext(StringReference const & identity)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().CreateCurrentThreadNetworkContext(identity);
}

inline Windows::Foundation::IAsyncOperation<String> ProtectionPolicyManager::GetPrimaryManagedIdentityForNetworkEndpointAsync(Windows::Networking::HostName const & endpointHost)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().GetPrimaryManagedIdentityForNetworkEndpointAsync(endpointHost);
}

inline void ProtectionPolicyManager::RevokeContent(StringReference const & identity)
{
	GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().RevokeContent(identity);
}

inline Windows::Security::EnterpriseData::ProtectionPolicyManager ProtectionPolicyManager::GetForCurrentView()
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().GetForCurrentView();
}

inline long long ProtectionPolicyManager::ProtectedAccessSuspending(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs> const & handler)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedAccessSuspending(handler);
}

template <typename F> long long ProtectionPolicyManager::ProtectedAccessSuspending(F handler)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedAccessSuspending(Windows::Foundation::EventHandler<Windows::Security::EnterpriseData::ProtectedAccessSuspendingEventArgs>(handler));
}

inline void ProtectionPolicyManager::ProtectedAccessSuspending(long long const token)
{
	GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedAccessSuspending(token);
}

inline long long ProtectionPolicyManager::ProtectedAccessResumed(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs> const & handler)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedAccessResumed(handler);
}

template <typename F> long long ProtectionPolicyManager::ProtectedAccessResumed(F handler)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedAccessResumed(Windows::Foundation::EventHandler<Windows::Security::EnterpriseData::ProtectedAccessResumedEventArgs>(handler));
}

inline void ProtectionPolicyManager::ProtectedAccessResumed(long long const token)
{
	GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedAccessResumed(token);
}

inline long long ProtectionPolicyManager::ProtectedContentRevoked(Windows::Foundation::IEventHandler<Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs> const & handler)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedContentRevoked(handler);
}

template <typename F> long long ProtectionPolicyManager::ProtectedContentRevoked(F handler)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedContentRevoked(Windows::Foundation::EventHandler<Windows::Security::EnterpriseData::ProtectedContentRevokedEventArgs>(handler));
}

inline void ProtectionPolicyManager::ProtectedContentRevoked(long long const token)
{
	GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().ProtectedContentRevoked(token);
}

inline Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult ProtectionPolicyManager::CheckAccess(StringReference const & sourceIdentity, StringReference const & targetIdentity)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().CheckAccess(sourceIdentity, targetIdentity);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::ProtectionPolicyEvaluationResult> ProtectionPolicyManager::RequestAccessAsync(StringReference const & sourceIdentity, StringReference const & targetIdentity)
{
	return GetActivationFactory<ProtectionPolicyManager, IProtectionPolicyManagerStatics>().RequestAccessAsync(sourceIdentity, targetIdentity);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::FileProtectionStatus> FileRevocationManager::ProtectAsync(Windows::Storage::IStorageItem const & storageItem, StringReference const & enterpriseIdentity)
{
	return GetActivationFactory<FileRevocationManager, IFileRevocationManagerStatics>().ProtectAsync(storageItem, enterpriseIdentity);
}

inline Windows::Foundation::IAsyncOperation<bool> FileRevocationManager::CopyProtectionAsync(Windows::Storage::IStorageItem const & sourceStorageItem, Windows::Storage::IStorageItem const & targetStorageItem)
{
	return GetActivationFactory<FileRevocationManager, IFileRevocationManagerStatics>().CopyProtectionAsync(sourceStorageItem, targetStorageItem);
}

inline void FileRevocationManager::Revoke(StringReference const & enterpriseIdentity)
{
	GetActivationFactory<FileRevocationManager, IFileRevocationManagerStatics>().Revoke(enterpriseIdentity);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Security::EnterpriseData::FileProtectionStatus> FileRevocationManager::GetStatusAsync(Windows::Storage::IStorageItem const & storageItem)
{
	return GetActivationFactory<FileRevocationManager, IFileRevocationManagerStatics>().GetStatusAsync(storageItem);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::FileProtectionInfo> FileProtectionManager::ProtectAsync(Windows::Storage::IStorageItem const & target, StringReference const & identity)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics>().ProtectAsync(target, identity);
}

inline Windows::Foundation::IAsyncOperation<bool> FileProtectionManager::CopyProtectionAsync(Windows::Storage::IStorageItem const & source, Windows::Storage::IStorageItem const & target)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics>().CopyProtectionAsync(source, target);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::FileProtectionInfo> FileProtectionManager::GetProtectionInfoAsync(Windows::Storage::IStorageItem const & source)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics>().GetProtectionInfoAsync(source);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerExportResult> FileProtectionManager::SaveFileAsContainerAsync(Windows::Storage::IStorageFile const & protectedFile)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics>().SaveFileAsContainerAsync(protectedFile);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> FileProtectionManager::LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics>().LoadFileFromContainerAsync(containerFile);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> FileProtectionManager::LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile, Windows::Storage::IStorageItem const & target)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics>().LoadFileFromContainerAsync(containerFile, target);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedFileCreateResult> FileProtectionManager::CreateProtectedAndOpenAsync(Windows::Storage::IStorageFolder const & parentFolder, StringReference const & desiredName, StringReference const & identity, Windows::Storage::CreationCollisionOption const collisionOption)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics>().CreateProtectedAndOpenAsync(parentFolder, desiredName, identity, collisionOption);
}

inline Windows::Foundation::IAsyncOperation<bool> FileProtectionManager::IsContainerAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics2>().IsContainerAsync(file);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerImportResult> FileProtectionManager::LoadFileFromContainerAsync(Windows::Storage::IStorageFile const & containerFile, Windows::Storage::IStorageItem const & target, Windows::Storage::NameCollisionOption const collisionOption)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics2>().LoadFileFromContainerAsync(containerFile, target, collisionOption);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::ProtectedContainerExportResult> FileProtectionManager::SaveFileAsContainerAsync(Windows::Storage::IStorageFile const & protectedFile, Windows::Foundation::Collections::IIterable<String> const & sharedWithIdentities)
{
	return GetActivationFactory<FileProtectionManager, IFileProtectionManagerStatics2>().SaveFileAsContainerAsync(protectedFile, sharedWithIdentities);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::BufferProtectUnprotectResult> DataProtectionManager::ProtectAsync(Windows::Storage::Streams::IBuffer const & data, StringReference const & identity)
{
	return GetActivationFactory<DataProtectionManager, IDataProtectionManagerStatics>().ProtectAsync(data, identity);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::BufferProtectUnprotectResult> DataProtectionManager::UnprotectAsync(Windows::Storage::Streams::IBuffer const & data)
{
	return GetActivationFactory<DataProtectionManager, IDataProtectionManagerStatics>().UnprotectAsync(data);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> DataProtectionManager::ProtectStreamAsync(Windows::Storage::Streams::IInputStream const & unprotectedStream, StringReference const & identity, Windows::Storage::Streams::IOutputStream const & protectedStream)
{
	return GetActivationFactory<DataProtectionManager, IDataProtectionManagerStatics>().ProtectStreamAsync(unprotectedStream, identity, protectedStream);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> DataProtectionManager::UnprotectStreamAsync(Windows::Storage::Streams::IInputStream const & protectedStream, Windows::Storage::Streams::IOutputStream const & unprotectedStream)
{
	return GetActivationFactory<DataProtectionManager, IDataProtectionManagerStatics>().UnprotectStreamAsync(protectedStream, unprotectedStream);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> DataProtectionManager::GetProtectionInfoAsync(Windows::Storage::Streams::IBuffer const & protectedData)
{
	return GetActivationFactory<DataProtectionManager, IDataProtectionManagerStatics>().GetProtectionInfoAsync(protectedData);
}

inline Windows::Foundation::IAsyncOperation<Windows::Security::EnterpriseData::DataProtectionInfo> DataProtectionManager::GetStreamProtectionInfoAsync(Windows::Storage::Streams::IInputStream const & protectedStream)
{
	return GetActivationFactory<DataProtectionManager, IDataProtectionManagerStatics>().GetStreamProtectionInfoAsync(protectedStream);
}

}}}}

namespace winrt { namespace Windows { namespace Security { namespace ExchangeActiveSyncProvisioning {

inline EasClientSecurityPolicy::EasClientSecurityPolicy() :
	EasClientSecurityPolicy(ActivateInstance<EasClientSecurityPolicy>())
{}

inline EasClientDeviceInformation::EasClientDeviceInformation() :
	EasClientDeviceInformation(ActivateInstance<EasClientDeviceInformation>())
{}

}}}}

namespace winrt { namespace Windows { namespace Services { namespace Maps {

inline MapRouteDrivingOptions::MapRouteDrivingOptions() :
	MapRouteDrivingOptions(ActivateInstance<MapRouteDrivingOptions>())
{}

inline Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapLocationFinderResult> MapLocationFinder::FindLocationsAtAsync(Windows::Devices::Geolocation::Geopoint const & queryPoint)
{
	return GetActivationFactory<MapLocationFinder, IMapLocationFinderStatics>().FindLocationsAtAsync(queryPoint);
}

inline Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapLocationFinderResult> MapLocationFinder::FindLocationsAsync(StringReference const & searchText, Windows::Devices::Geolocation::Geopoint const & referencePoint)
{
	return GetActivationFactory<MapLocationFinder, IMapLocationFinderStatics>().FindLocationsAsync(searchText, referencePoint);
}

inline Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapLocationFinderResult> MapLocationFinder::FindLocationsAsync(StringReference const & searchText, Windows::Devices::Geolocation::Geopoint const & referencePoint, unsigned const maxCount)
{
	return GetActivationFactory<MapLocationFinder, IMapLocationFinderStatics>().FindLocationsAsync(searchText, referencePoint, maxCount);
}

inline Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> MapRouteFinder::GetDrivingRouteAsync(Windows::Devices::Geolocation::Geopoint const & startPoint, Windows::Devices::Geolocation::Geopoint const & endPoint)
{
	return GetActivationFactory<MapRouteFinder, IMapRouteFinderStatics>().GetDrivingRouteAsync(startPoint, endPoint);
}

inline Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> MapRouteFinder::GetDrivingRouteAsync(Windows::Devices::Geolocation::Geopoint const & startPoint, Windows::Devices::Geolocation::Geopoint const & endPoint, Windows::Services::Maps::MapRouteOptimization const optimization)
{
	return GetActivationFactory<MapRouteFinder, IMapRouteFinderStatics>().GetDrivingRouteAsync(startPoint, endPoint, optimization);
}

inline Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> MapRouteFinder::GetDrivingRouteAsync(Windows::Devices::Geolocation::Geopoint const & startPoint, Windows::Devices::Geolocation::Geopoint const & endPoint, Windows::Services::Maps::MapRouteOptimization const optimization, Windows::Services::Maps::MapRouteRestrictions const restrictions)
{
	return GetActivationFactory<MapRouteFinder, IMapRouteFinderStatics>().GetDrivingRouteAsync(startPoint, endPoint, optimization, restrictions);
}

inline Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> MapRouteFinder::GetDrivingRouteAsync(Windows::Devices::Geolocation::Geopoint const & startPoint, Windows::Devices::Geolocation::Geopoint const & endPoint, Windows::Services::Maps::MapRouteOptimization const optimization, Windows::Services::Maps::MapRouteRestrictions const restrictions, double const headingInDegrees)
{
	return GetActivationFactory<MapRouteFinder, IMapRouteFinderStatics>().GetDrivingRouteAsync(startPoint, endPoint, optimization, restrictions, headingInDegrees);
}

inline Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> MapRouteFinder::GetDrivingRouteFromWaypointsAsync(Windows::Foundation::Collections::IIterable<Windows::Devices::Geolocation::Geopoint> const & wayPoints)
{
	return GetActivationFactory<MapRouteFinder, IMapRouteFinderStatics>().GetDrivingRouteFromWaypointsAsync(wayPoints);
}

inline Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> MapRouteFinder::GetDrivingRouteFromWaypointsAsync(Windows::Foundation::Collections::IIterable<Windows::Devices::Geolocation::Geopoint> const & wayPoints, Windows::Services::Maps::MapRouteOptimization const optimization)
{
	return GetActivationFactory<MapRouteFinder, IMapRouteFinderStatics>().GetDrivingRouteFromWaypointsAsync(wayPoints, optimization);
}

inline Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> MapRouteFinder::GetDrivingRouteFromWaypointsAsync(Windows::Foundation::Collections::IIterable<Windows::Devices::Geolocation::Geopoint> const & wayPoints, Windows::Services::Maps::MapRouteOptimization const optimization, Windows::Services::Maps::MapRouteRestrictions const restrictions)
{
	return GetActivationFactory<MapRouteFinder, IMapRouteFinderStatics>().GetDrivingRouteFromWaypointsAsync(wayPoints, optimization, restrictions);
}

inline Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> MapRouteFinder::GetDrivingRouteFromWaypointsAsync(Windows::Foundation::Collections::IIterable<Windows::Devices::Geolocation::Geopoint> const & wayPoints, Windows::Services::Maps::MapRouteOptimization const optimization, Windows::Services::Maps::MapRouteRestrictions const restrictions, double const headingInDegrees)
{
	return GetActivationFactory<MapRouteFinder, IMapRouteFinderStatics>().GetDrivingRouteFromWaypointsAsync(wayPoints, optimization, restrictions, headingInDegrees);
}

inline Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> MapRouteFinder::GetWalkingRouteAsync(Windows::Devices::Geolocation::Geopoint const & startPoint, Windows::Devices::Geolocation::Geopoint const & endPoint)
{
	return GetActivationFactory<MapRouteFinder, IMapRouteFinderStatics>().GetWalkingRouteAsync(startPoint, endPoint);
}

inline Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> MapRouteFinder::GetWalkingRouteFromWaypointsAsync(Windows::Foundation::Collections::IIterable<Windows::Devices::Geolocation::Geopoint> const & wayPoints)
{
	return GetActivationFactory<MapRouteFinder, IMapRouteFinderStatics>().GetWalkingRouteFromWaypointsAsync(wayPoints);
}

inline Windows::Foundation::IAsyncOperation<Windows::Services::Maps::MapRouteFinderResult> MapRouteFinder::GetDrivingRouteAsync(Windows::Devices::Geolocation::Geopoint const & startPoint, Windows::Devices::Geolocation::Geopoint const & endPoint, Windows::Services::Maps::MapRouteDrivingOptions const & options)
{
	return GetActivationFactory<MapRouteFinder, IMapRouteFinderStatics2>().GetDrivingRouteAsync(startPoint, endPoint, options);
}

inline String MapService::WorldViewRegionCode()
{
	return GetActivationFactory<MapService, IMapServiceStatics2>().WorldViewRegionCode();
}

inline void MapService::ServiceToken(StringReference const & value)
{
	GetActivationFactory<MapService, IMapServiceStatics>().ServiceToken(value);
}

inline String MapService::ServiceToken()
{
	return GetActivationFactory<MapService, IMapServiceStatics>().ServiceToken();
}

inline String MapService::DataAttributions()
{
	return GetActivationFactory<MapService, IMapServiceStatics3>().DataAttributions();
}

inline void MapManager::ShowDownloadedMapsUI()
{
	GetActivationFactory<MapManager, IMapManagerStatics>().ShowDownloadedMapsUI();
}

inline void MapManager::ShowMapsUpdateUI()
{
	GetActivationFactory<MapManager, IMapManagerStatics>().ShowMapsUpdateUI();
}

}}}}

namespace winrt { namespace Windows { namespace Services { namespace Maps { namespace Guidance {

inline bool GuidanceRoute::CanCreateFromMapRoute(Windows::Services::Maps::MapRoute const & mapRoute)
{
	return GetActivationFactory<GuidanceRoute, IGuidanceRouteStatics>().CanCreateFromMapRoute(mapRoute);
}

inline Windows::Services::Maps::Guidance::GuidanceRoute GuidanceRoute::TryCreateFromMapRoute(Windows::Services::Maps::MapRoute const & mapRoute)
{
	return GetActivationFactory<GuidanceRoute, IGuidanceRouteStatics>().TryCreateFromMapRoute(mapRoute);
}

inline bool GuidanceNavigator::UseAppProvidedVoice()
{
	return GetActivationFactory<GuidanceNavigator, IGuidanceNavigatorStatics2>().UseAppProvidedVoice();
}

inline Windows::Services::Maps::Guidance::GuidanceNavigator GuidanceNavigator::GetCurrent()
{
	return GetActivationFactory<GuidanceNavigator, IGuidanceNavigatorStatics>().GetCurrent();
}

inline Windows::Services::Maps::Guidance::GuidanceTelemetryCollector GuidanceTelemetryCollector::GetCurrent()
{
	return GetActivationFactory<GuidanceTelemetryCollector, IGuidanceTelemetryCollectorStatics>().GetCurrent();
}

}}}}}

namespace winrt { namespace Windows { namespace Services { namespace Maps { namespace LocalSearch {

inline Windows::Foundation::IAsyncOperation<Windows::Services::Maps::LocalSearch::LocalLocationFinderResult> LocalLocationFinder::FindLocalLocationsAsync(StringReference const & searchTerm, Windows::Devices::Geolocation::Geocircle const & searchArea, StringReference const & localCategory, unsigned const maxResults)
{
	return GetActivationFactory<LocalLocationFinder, ILocalLocationFinderStatics>().FindLocalLocationsAsync(searchTerm, searchArea, localCategory, maxResults);
}

inline String LocalCategories::BankAndCreditUnions()
{
	return GetActivationFactory<LocalCategories, ILocalCategoriesStatics>().BankAndCreditUnions();
}

inline String LocalCategories::EatDrink()
{
	return GetActivationFactory<LocalCategories, ILocalCategoriesStatics>().EatDrink();
}

inline String LocalCategories::Hospitals()
{
	return GetActivationFactory<LocalCategories, ILocalCategoriesStatics>().Hospitals();
}

inline String LocalCategories::HotelsAndMotels()
{
	return GetActivationFactory<LocalCategories, ILocalCategoriesStatics>().HotelsAndMotels();
}

inline String LocalCategories::All()
{
	return GetActivationFactory<LocalCategories, ILocalCategoriesStatics>().All();
}

inline String LocalCategories::Parking()
{
	return GetActivationFactory<LocalCategories, ILocalCategoriesStatics>().Parking();
}

inline String LocalCategories::SeeDo()
{
	return GetActivationFactory<LocalCategories, ILocalCategoriesStatics>().SeeDo();
}

inline String LocalCategories::Shop()
{
	return GetActivationFactory<LocalCategories, ILocalCategoriesStatics>().Shop();
}

}}}}}

namespace winrt { namespace Windows { namespace Storage {

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::GetFileFromPathAsync(StringReference const & path)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().GetFileFromPathAsync(path);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::GetFileFromApplicationUriAsync(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().GetFileFromApplicationUriAsync(uri);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::CreateStreamedFileAsync(StringReference const & displayNameWithExtension, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().CreateStreamedFileAsync(displayNameWithExtension, dataRequested, thumbnail);
}

template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::CreateStreamedFileAsync(StringReference const & displayNameWithExtension, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().CreateStreamedFileAsync(displayNameWithExtension, Windows::Storage::StreamedFileDataRequestedHandler(dataRequested), thumbnail);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Storage::IStreamedFileDataRequestedHandler const & dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().ReplaceWithStreamedFileAsync(fileToReplace, dataRequested, thumbnail);
}

template <typename F> Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::ReplaceWithStreamedFileAsync(Windows::Storage::IStorageFile const & fileToReplace, F dataRequested, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().ReplaceWithStreamedFileAsync(fileToReplace, Windows::Storage::StreamedFileDataRequestedHandler(dataRequested), thumbnail);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::CreateStreamedFileFromUriAsync(StringReference const & displayNameWithExtension, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().CreateStreamedFileFromUriAsync(displayNameWithExtension, uri, thumbnail);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> StorageFile::ReplaceWithStreamedFileFromUriAsync(Windows::Storage::IStorageFile const & fileToReplace, Windows::Foundation::Uri const & uri, Windows::Storage::Streams::IRandomAccessStreamReference const & thumbnail)
{
	return GetActivationFactory<StorageFile, IStorageFileStatics>().ReplaceWithStreamedFileFromUriAsync(fileToReplace, uri, thumbnail);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> StorageFolder::GetFolderFromPathAsync(StringReference const & path)
{
	return GetActivationFactory<StorageFolder, IStorageFolderStatics>().GetFolderFromPathAsync(path);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> StorageLibrary::GetLibraryAsync(Windows::Storage::KnownLibraryId const libraryId)
{
	return GetActivationFactory<StorageLibrary, IStorageLibraryStatics>().GetLibraryAsync(libraryId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageLibrary> StorageLibrary::GetLibraryForUserAsync(Windows::System::User const & user, Windows::Storage::KnownLibraryId const libraryId)
{
	return GetActivationFactory<StorageLibrary, IStorageLibraryStatics2>().GetLibraryForUserAsync(user, libraryId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> KnownFolders::GetFolderForUserAsync(Windows::System::User const & user, Windows::Storage::KnownFolderId const folderId)
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics3>().GetFolderForUserAsync(user, folderId);
}

inline Windows::Storage::StorageFolder KnownFolders::Objects3D()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics2>().Objects3D();
}

inline Windows::Storage::StorageFolder KnownFolders::AppCaptures()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics2>().AppCaptures();
}

inline Windows::Storage::StorageFolder KnownFolders::RecordedCalls()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics2>().RecordedCalls();
}

inline Windows::Storage::StorageFolder KnownFolders::SavedPictures()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersSavedPicturesStatics>().SavedPictures();
}

inline Windows::Storage::StorageFolder KnownFolders::CameraRoll()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersCameraRollStatics>().CameraRoll();
}

inline Windows::Storage::StorageFolder KnownFolders::MusicLibrary()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().MusicLibrary();
}

inline Windows::Storage::StorageFolder KnownFolders::PicturesLibrary()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().PicturesLibrary();
}

inline Windows::Storage::StorageFolder KnownFolders::VideosLibrary()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().VideosLibrary();
}

inline Windows::Storage::StorageFolder KnownFolders::DocumentsLibrary()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().DocumentsLibrary();
}

inline Windows::Storage::StorageFolder KnownFolders::HomeGroup()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().HomeGroup();
}

inline Windows::Storage::StorageFolder KnownFolders::RemovableDevices()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().RemovableDevices();
}

inline Windows::Storage::StorageFolder KnownFolders::MediaServerDevices()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersStatics>().MediaServerDevices();
}

inline Windows::Storage::StorageFolder KnownFolders::Playlists()
{
	return GetActivationFactory<KnownFolders, IKnownFoldersPlaylistsStatics>().Playlists();
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> DownloadsFolder::CreateFileAsync(StringReference const & desiredName)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics>().CreateFileAsync(desiredName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> DownloadsFolder::CreateFolderAsync(StringReference const & desiredName)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics>().CreateFolderAsync(desiredName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> DownloadsFolder::CreateFileAsync(StringReference const & desiredName, Windows::Storage::CreationCollisionOption const option)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics>().CreateFileAsync(desiredName, option);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> DownloadsFolder::CreateFolderAsync(StringReference const & desiredName, Windows::Storage::CreationCollisionOption const option)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics>().CreateFolderAsync(desiredName, option);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> DownloadsFolder::CreateFileForUserAsync(Windows::System::User const & user, StringReference const & desiredName)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics2>().CreateFileForUserAsync(user, desiredName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> DownloadsFolder::CreateFolderForUserAsync(Windows::System::User const & user, StringReference const & desiredName)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics2>().CreateFolderForUserAsync(user, desiredName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFile> DownloadsFolder::CreateFileForUserAsync(Windows::System::User const & user, StringReference const & desiredName, Windows::Storage::CreationCollisionOption const option)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics2>().CreateFileForUserAsync(user, desiredName, option);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::StorageFolder> DownloadsFolder::CreateFolderForUserAsync(Windows::System::User const & user, StringReference const & desiredName, Windows::Storage::CreationCollisionOption const option)
{
	return GetActivationFactory<DownloadsFolder, IDownloadsFolderStatics2>().CreateFolderForUserAsync(user, desiredName, option);
}

inline Windows::Foundation::IAsyncOperation<String> FileIO::ReadTextAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().ReadTextAsync(file);
}

inline Windows::Foundation::IAsyncOperation<String> FileIO::ReadTextAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().ReadTextAsync(file, encoding);
}

inline Windows::Foundation::IAsyncAction FileIO::WriteTextAsync(Windows::Storage::IStorageFile const & file, StringReference const & contents)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteTextAsync(file, contents);
}

inline Windows::Foundation::IAsyncAction FileIO::WriteTextAsync(Windows::Storage::IStorageFile const & file, StringReference const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteTextAsync(file, contents, encoding);
}

inline Windows::Foundation::IAsyncAction FileIO::AppendTextAsync(Windows::Storage::IStorageFile const & file, StringReference const & contents)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().AppendTextAsync(file, contents);
}

inline Windows::Foundation::IAsyncAction FileIO::AppendTextAsync(Windows::Storage::IStorageFile const & file, StringReference const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().AppendTextAsync(file, contents, encoding);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> FileIO::ReadLinesAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().ReadLinesAsync(file);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> FileIO::ReadLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().ReadLinesAsync(file, encoding);
}

inline Windows::Foundation::IAsyncAction FileIO::WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteLinesAsync(file, lines);
}

inline Windows::Foundation::IAsyncAction FileIO::WriteLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteLinesAsync(file, lines, encoding);
}

inline Windows::Foundation::IAsyncAction FileIO::AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().AppendLinesAsync(file, lines);
}

inline Windows::Foundation::IAsyncAction FileIO::AppendLinesAsync(Windows::Storage::IStorageFile const & file, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().AppendLinesAsync(file, lines, encoding);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> FileIO::ReadBufferAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().ReadBufferAsync(file);
}

inline Windows::Foundation::IAsyncAction FileIO::WriteBufferAsync(Windows::Storage::IStorageFile const & file, Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<FileIO, IFileIOStatics>().WriteBufferAsync(file, buffer);
}

inline Windows::Foundation::IAsyncOperation<String> PathIO::ReadTextAsync(StringReference const & absolutePath)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadTextAsync(absolutePath);
}

inline Windows::Foundation::IAsyncOperation<String> PathIO::ReadTextAsync(StringReference const & absolutePath, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadTextAsync(absolutePath, encoding);
}

inline Windows::Foundation::IAsyncAction PathIO::WriteTextAsync(StringReference const & absolutePath, StringReference const & contents)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteTextAsync(absolutePath, contents);
}

inline Windows::Foundation::IAsyncAction PathIO::WriteTextAsync(StringReference const & absolutePath, StringReference const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteTextAsync(absolutePath, contents, encoding);
}

inline Windows::Foundation::IAsyncAction PathIO::AppendTextAsync(StringReference const & absolutePath, StringReference const & contents)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().AppendTextAsync(absolutePath, contents);
}

inline Windows::Foundation::IAsyncAction PathIO::AppendTextAsync(StringReference const & absolutePath, StringReference const & contents, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().AppendTextAsync(absolutePath, contents, encoding);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> PathIO::ReadLinesAsync(StringReference const & absolutePath)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadLinesAsync(absolutePath);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVector<String>> PathIO::ReadLinesAsync(StringReference const & absolutePath, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadLinesAsync(absolutePath, encoding);
}

inline Windows::Foundation::IAsyncAction PathIO::WriteLinesAsync(StringReference const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteLinesAsync(absolutePath, lines);
}

inline Windows::Foundation::IAsyncAction PathIO::WriteLinesAsync(StringReference const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteLinesAsync(absolutePath, lines, encoding);
}

inline Windows::Foundation::IAsyncAction PathIO::AppendLinesAsync(StringReference const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().AppendLinesAsync(absolutePath, lines);
}

inline Windows::Foundation::IAsyncAction PathIO::AppendLinesAsync(StringReference const & absolutePath, Windows::Foundation::Collections::IIterable<String> const & lines, Windows::Storage::Streams::UnicodeEncoding const encoding)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().AppendLinesAsync(absolutePath, lines, encoding);
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::Streams::IBuffer> PathIO::ReadBufferAsync(StringReference const & absolutePath)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().ReadBufferAsync(absolutePath);
}

inline Windows::Foundation::IAsyncAction PathIO::WriteBufferAsync(StringReference const & absolutePath, Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<PathIO, IPathIOStatics>().WriteBufferAsync(absolutePath, buffer);
}

inline void CachedFileManager::DeferUpdates(Windows::Storage::IStorageFile const & file)
{
	GetActivationFactory<CachedFileManager, ICachedFileManagerStatics>().DeferUpdates(file);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Provider::FileUpdateStatus> CachedFileManager::CompleteUpdatesAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<CachedFileManager, ICachedFileManagerStatics>().CompleteUpdatesAsync(file);
}

inline String SystemProperties::Author()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Author();
}

inline String SystemProperties::Comment()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Comment();
}

inline String SystemProperties::ItemNameDisplay()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().ItemNameDisplay();
}

inline String SystemProperties::Keywords()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Keywords();
}

inline String SystemProperties::Rating()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Rating();
}

inline String SystemProperties::Title()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Title();
}

inline Windows::Storage::SystemAudioProperties SystemProperties::Audio()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Audio();
}

inline Windows::Storage::SystemGPSProperties SystemProperties::GPS()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().GPS();
}

inline Windows::Storage::SystemMediaProperties SystemProperties::Media()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Media();
}

inline Windows::Storage::SystemMusicProperties SystemProperties::Music()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Music();
}

inline Windows::Storage::SystemPhotoProperties SystemProperties::Photo()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Photo();
}

inline Windows::Storage::SystemVideoProperties SystemProperties::Video()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Video();
}

inline Windows::Storage::SystemImageProperties SystemProperties::Image()
{
	return GetActivationFactory<SystemProperties, ISystemProperties>().Image();
}

inline Windows::Foundation::IAsyncOperation<Windows::Storage::ApplicationData> ApplicationData::GetForUserAsync(Windows::System::User const & user)
{
	return GetActivationFactory<ApplicationData, IApplicationDataStatics2>().GetForUserAsync(user);
}

inline Windows::Storage::ApplicationData ApplicationData::Current()
{
	return GetActivationFactory<ApplicationData, IApplicationDataStatics>().Current();
}

inline ApplicationDataCompositeValue::ApplicationDataCompositeValue() :
	ApplicationDataCompositeValue(ActivateInstance<ApplicationDataCompositeValue>())
{}

}}}

namespace winrt { namespace Windows { namespace Storage { namespace AccessCache {

inline Windows::Storage::AccessCache::StorageItemAccessList StorageApplicationPermissions::FutureAccessList()
{
	return GetActivationFactory<StorageApplicationPermissions, IStorageApplicationPermissionsStatics>().FutureAccessList();
}

inline Windows::Storage::AccessCache::StorageItemMostRecentlyUsedList StorageApplicationPermissions::MostRecentlyUsedList()
{
	return GetActivationFactory<StorageApplicationPermissions, IStorageApplicationPermissionsStatics>().MostRecentlyUsedList();
}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace BulkAccess {

inline FileInformationFactory::FileInformationFactory(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode const mode) :
	FileInformationFactory(GetActivationFactory<FileInformationFactory, IFileInformationFactoryFactory>().CreateWithMode(queryResult, mode))
{}

inline FileInformationFactory::FileInformationFactory(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedThumbnailSize) :
	FileInformationFactory(GetActivationFactory<FileInformationFactory, IFileInformationFactoryFactory>().CreateWithModeAndSize(queryResult, mode, requestedThumbnailSize))
{}

inline FileInformationFactory::FileInformationFactory(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedThumbnailSize, Windows::Storage::FileProperties::ThumbnailOptions const thumbnailOptions) :
	FileInformationFactory(GetActivationFactory<FileInformationFactory, IFileInformationFactoryFactory>().CreateWithModeAndSizeAndOptions(queryResult, mode, requestedThumbnailSize, thumbnailOptions))
{}

inline FileInformationFactory::FileInformationFactory(Windows::Storage::Search::IStorageQueryResultBase const & queryResult, Windows::Storage::FileProperties::ThumbnailMode const mode, unsigned const requestedThumbnailSize, Windows::Storage::FileProperties::ThumbnailOptions const thumbnailOptions, bool const delayLoad) :
	FileInformationFactory(GetActivationFactory<FileInformationFactory, IFileInformationFactoryFactory>().CreateWithModeAndSizeAndOptionsAndFlags(queryResult, mode, requestedThumbnailSize, thumbnailOptions, delayLoad))
{}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Compression {

inline Compressor::Compressor(Windows::Storage::Streams::IOutputStream const & underlyingStream) :
	Compressor(GetActivationFactory<Compressor, ICompressorFactory>().CreateCompressor(underlyingStream))
{}

inline Compressor::Compressor(Windows::Storage::Streams::IOutputStream const & underlyingStream, Windows::Storage::Compression::CompressAlgorithm const algorithm, unsigned const blockSize) :
	Compressor(GetActivationFactory<Compressor, ICompressorFactory>().CreateCompressorEx(underlyingStream, algorithm, blockSize))
{}

inline Decompressor::Decompressor(Windows::Storage::Streams::IInputStream const & underlyingStream) :
	Decompressor(GetActivationFactory<Decompressor, IDecompressorFactory>().CreateDecompressor(underlyingStream))
{}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace FileProperties {

inline Windows::Foundation::IAsyncOperation<Windows::Devices::Geolocation::Geopoint> GeotagHelper::GetGeotagAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<GeotagHelper, IGeotagHelperStatics>().GetGeotagAsync(file);
}

inline Windows::Foundation::IAsyncAction GeotagHelper::SetGeotagFromGeolocatorAsync(Windows::Storage::IStorageFile const & file, Windows::Devices::Geolocation::Geolocator const & geolocator)
{
	return GetActivationFactory<GeotagHelper, IGeotagHelperStatics>().SetGeotagFromGeolocatorAsync(file, geolocator);
}

inline Windows::Foundation::IAsyncAction GeotagHelper::SetGeotagAsync(Windows::Storage::IStorageFile const & file, Windows::Devices::Geolocation::Geopoint const & geopoint)
{
	return GetActivationFactory<GeotagHelper, IGeotagHelperStatics>().SetGeotagAsync(file, geopoint);
}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Pickers {

inline FileOpenPicker::FileOpenPicker() :
	FileOpenPicker(ActivateInstance<FileOpenPicker>())
{}

inline FileSavePicker::FileSavePicker() :
	FileSavePicker(ActivateInstance<FileSavePicker>())
{}

inline FolderPicker::FolderPicker() :
	FolderPicker(ActivateInstance<FolderPicker>())
{}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Pickers { namespace Provider {

}}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Provider {

inline void CachedFileUpdater::SetUpdateInformation(Windows::Storage::IStorageFile const & file, StringReference const & contentId, Windows::Storage::Provider::ReadActivationMode const readMode, Windows::Storage::Provider::WriteActivationMode const writeMode, Windows::Storage::Provider::CachedFileOptions const options)
{
	GetActivationFactory<CachedFileUpdater, ICachedFileUpdaterStatics>().SetUpdateInformation(file, contentId, readMode, writeMode, options);
}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Search {

inline Windows::Storage::Search::ContentIndexer ContentIndexer::GetIndexer(StringReference const & indexName)
{
	return GetActivationFactory<ContentIndexer, IContentIndexerStatics>().GetIndexer(indexName);
}

inline Windows::Storage::Search::ContentIndexer ContentIndexer::GetIndexer()
{
	return GetActivationFactory<ContentIndexer, IContentIndexerStatics>().GetIndexer();
}

inline ValueAndLanguage::ValueAndLanguage() :
	ValueAndLanguage(ActivateInstance<ValueAndLanguage>())
{}

inline IndexableContent::IndexableContent() :
	IndexableContent(ActivateInstance<IndexableContent>())
{}

inline QueryOptions::QueryOptions() :
	QueryOptions(ActivateInstance<QueryOptions>())
{}

inline QueryOptions::QueryOptions(Windows::Storage::Search::CommonFileQuery const query, Windows::Foundation::Collections::IIterable<String> const & fileTypeFilter) :
	QueryOptions(GetActivationFactory<QueryOptions, IQueryOptionsFactory>().CreateCommonFileQuery(query, fileTypeFilter))
{}

inline QueryOptions::QueryOptions(Windows::Storage::Search::CommonFolderQuery const query) :
	QueryOptions(GetActivationFactory<QueryOptions, IQueryOptionsFactory>().CreateCommonFolderQuery(query))
{}

}}}}

namespace winrt { namespace Windows { namespace Storage { namespace Streams {

inline Windows::Storage::Streams::RandomAccessStreamReference RandomAccessStreamReference::CreateFromFile(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<RandomAccessStreamReference, IRandomAccessStreamReferenceStatics>().CreateFromFile(file);
}

inline Windows::Storage::Streams::RandomAccessStreamReference RandomAccessStreamReference::CreateFromUri(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<RandomAccessStreamReference, IRandomAccessStreamReferenceStatics>().CreateFromUri(uri);
}

inline Windows::Storage::Streams::RandomAccessStreamReference RandomAccessStreamReference::CreateFromStream(Windows::Storage::Streams::IRandomAccessStream const & stream)
{
	return GetActivationFactory<RandomAccessStreamReference, IRandomAccessStreamReferenceStatics>().CreateFromStream(stream);
}

inline DataReader::DataReader(Windows::Storage::Streams::IInputStream const & inputStream) :
	DataReader(GetActivationFactory<DataReader, IDataReaderFactory>().CreateDataReader(inputStream))
{}

inline Windows::Storage::Streams::DataReader DataReader::FromBuffer(Windows::Storage::Streams::IBuffer const & buffer)
{
	return GetActivationFactory<DataReader, IDataReaderStatics>().FromBuffer(buffer);
}

inline DataWriter::DataWriter() :
	DataWriter(ActivateInstance<DataWriter>())
{}

inline DataWriter::DataWriter(Windows::Storage::Streams::IOutputStream const & outputStream) :
	DataWriter(GetActivationFactory<DataWriter, IDataWriterFactory>().CreateDataWriter(outputStream))
{}

inline Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> RandomAccessStream::CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination)
{
	return GetActivationFactory<RandomAccessStream, IRandomAccessStreamStatics>().CopyAsync(source, destination);
}

inline Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> RandomAccessStream::CopyAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination, unsigned long long const bytesToCopy)
{
	return GetActivationFactory<RandomAccessStream, IRandomAccessStreamStatics>().CopyAsync(source, destination, bytesToCopy);
}

inline Windows::Foundation::IAsyncOperationWithProgress<unsigned long long, unsigned long long> RandomAccessStream::CopyAndCloseAsync(Windows::Storage::Streams::IInputStream const & source, Windows::Storage::Streams::IOutputStream const & destination)
{
	return GetActivationFactory<RandomAccessStream, IRandomAccessStreamStatics>().CopyAndCloseAsync(source, destination);
}

inline Buffer::Buffer(unsigned const capacity) :
	Buffer(GetActivationFactory<Buffer, IBufferFactory>().Create(capacity))
{}

inline Windows::Storage::Streams::Buffer Buffer::CreateCopyFromMemoryBuffer(Windows::Foundation::IMemoryBuffer const & input)
{
	return GetActivationFactory<Buffer, IBufferStatics>().CreateCopyFromMemoryBuffer(input);
}

inline Windows::Foundation::MemoryBuffer Buffer::CreateMemoryBufferOverIBuffer(Windows::Storage::Streams::IBuffer const & input)
{
	return GetActivationFactory<Buffer, IBufferStatics>().CreateMemoryBufferOverIBuffer(input);
}

inline InMemoryRandomAccessStream::InMemoryRandomAccessStream() :
	InMemoryRandomAccessStream(ActivateInstance<InMemoryRandomAccessStream>())
{}

}}}}

namespace winrt { namespace Windows { namespace System {

inline Windows::System::UserWatcher User::CreateWatcher()
{
	return GetActivationFactory<User, IUserStatics>().CreateWatcher();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> User::FindAllAsync()
{
	return GetActivationFactory<User, IUserStatics>().FindAllAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> User::FindAllAsync(Windows::System::UserType const type)
{
	return GetActivationFactory<User, IUserStatics>().FindAllAsync(type);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::System::User>> User::FindAllAsync(Windows::System::UserType const type, Windows::System::UserAuthenticationStatus const status)
{
	return GetActivationFactory<User, IUserStatics>().FindAllAsync(type, status);
}

inline Windows::System::User User::GetFromId(StringReference const & nonRoamableId)
{
	return GetActivationFactory<User, IUserStatics>().GetFromId(nonRoamableId);
}

inline bool MemoryManager::TrySetAppMemoryUsageLimit(unsigned long long const value)
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics3>().TrySetAppMemoryUsageLimit(value);
}

inline Windows::System::AppMemoryReport MemoryManager::GetAppMemoryReport()
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics2>().GetAppMemoryReport();
}

inline Windows::System::ProcessMemoryReport MemoryManager::GetProcessMemoryReport()
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics2>().GetProcessMemoryReport();
}

inline unsigned long long MemoryManager::AppMemoryUsage()
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsage();
}

inline unsigned long long MemoryManager::AppMemoryUsageLimit()
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageLimit();
}

inline Windows::System::AppMemoryUsageLevel MemoryManager::AppMemoryUsageLevel()
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageLevel();
}

inline long long MemoryManager::AppMemoryUsageIncreased(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageIncreased(handler);
}

template <typename F> long long MemoryManager::AppMemoryUsageIncreased(F handler)
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageIncreased(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void MemoryManager::AppMemoryUsageIncreased(long long const token)
{
	GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageIncreased(token);
}

inline long long MemoryManager::AppMemoryUsageDecreased(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageDecreased(handler);
}

template <typename F> long long MemoryManager::AppMemoryUsageDecreased(F handler)
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageDecreased(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void MemoryManager::AppMemoryUsageDecreased(long long const token)
{
	GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageDecreased(token);
}

inline long long MemoryManager::AppMemoryUsageLimitChanging(Windows::Foundation::IEventHandler<Windows::System::AppMemoryUsageLimitChangingEventArgs> const & handler)
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageLimitChanging(handler);
}

template <typename F> long long MemoryManager::AppMemoryUsageLimitChanging(F handler)
{
	return GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageLimitChanging(Windows::Foundation::EventHandler<Windows::System::AppMemoryUsageLimitChangingEventArgs>(handler));
}

inline void MemoryManager::AppMemoryUsageLimitChanging(long long const token)
{
	GetActivationFactory<MemoryManager, IMemoryManagerStatics>().AppMemoryUsageLimitChanging(token);
}

inline String KnownUserProperties::DisplayName()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().DisplayName();
}

inline String KnownUserProperties::FirstName()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().FirstName();
}

inline String KnownUserProperties::LastName()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().LastName();
}

inline String KnownUserProperties::ProviderName()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().ProviderName();
}

inline String KnownUserProperties::AccountName()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().AccountName();
}

inline String KnownUserProperties::GuestHost()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().GuestHost();
}

inline String KnownUserProperties::PrincipalName()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().PrincipalName();
}

inline String KnownUserProperties::DomainName()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().DomainName();
}

inline String KnownUserProperties::SessionInitiationProtocolUri()
{
	return GetActivationFactory<KnownUserProperties, IKnownUserPropertiesStatics>().SessionInitiationProtocolUri();
}

inline LauncherOptions::LauncherOptions() :
	LauncherOptions(ActivateInstance<LauncherOptions>())
{}

inline FolderLauncherOptions::FolderLauncherOptions() :
	FolderLauncherOptions(ActivateInstance<FolderLauncherOptions>())
{}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchFileAsync(Windows::Storage::IStorageFile const & file)
{
	return GetActivationFactory<Launcher, ILauncherStatics>().LaunchFileAsync(file);
}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchFileAsync(Windows::Storage::IStorageFile const & file, Windows::System::LauncherOptions const & options)
{
	return GetActivationFactory<Launcher, ILauncherStatics>().LaunchFileAsync(file, options);
}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchUriAsync(Windows::Foundation::Uri const & uri)
{
	return GetActivationFactory<Launcher, ILauncherStatics>().LaunchUriAsync(uri);
}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options)
{
	return GetActivationFactory<Launcher, ILauncherStatics>().LaunchUriAsync(uri, options);
}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchFolderAsync(Windows::Storage::IStorageFolder const & folder)
{
	return GetActivationFactory<Launcher, ILauncherStatics3>().LaunchFolderAsync(folder);
}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchFolderAsync(Windows::Storage::IStorageFolder const & folder, Windows::System::FolderLauncherOptions const & options)
{
	return GetActivationFactory<Launcher, ILauncherStatics3>().LaunchFolderAsync(folder, options);
}

inline Windows::Foundation::IAsyncOperation<Windows::System::LaunchUriResult> Launcher::LaunchUriForResultsAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().LaunchUriForResultsAsync(uri, options);
}

inline Windows::Foundation::IAsyncOperation<Windows::System::LaunchUriResult> Launcher::LaunchUriForResultsAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options, Windows::Foundation::Collections::ValueSet const & inputData)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().LaunchUriForResultsAsync(uri, options, inputData);
}

inline Windows::Foundation::IAsyncOperation<bool> Launcher::LaunchUriAsync(Windows::Foundation::Uri const & uri, Windows::System::LauncherOptions const & options, Windows::Foundation::Collections::ValueSet const & inputData)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().LaunchUriAsync(uri, options, inputData);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> Launcher::QueryUriSupportAsync(Windows::Foundation::Uri const & uri, Windows::System::LaunchQuerySupportType const launchQuerySupportType)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().QueryUriSupportAsync(uri, launchQuerySupportType);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> Launcher::QueryUriSupportAsync(Windows::Foundation::Uri const & uri, Windows::System::LaunchQuerySupportType const launchQuerySupportType, StringReference const & packageFamilyName)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().QueryUriSupportAsync(uri, launchQuerySupportType, packageFamilyName);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> Launcher::QueryFileSupportAsync(Windows::Storage::StorageFile const & file)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().QueryFileSupportAsync(file);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::System::LaunchQuerySupportStatus> Launcher::QueryFileSupportAsync(Windows::Storage::StorageFile const & file, StringReference const & packageFamilyName)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().QueryFileSupportAsync(file, packageFamilyName);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> Launcher::FindUriSchemeHandlersAsync(StringReference const & scheme)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().FindUriSchemeHandlersAsync(scheme);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> Launcher::FindUriSchemeHandlersAsync(StringReference const & scheme, Windows::System::LaunchQuerySupportType const launchQuerySupportType)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().FindUriSchemeHandlersAsync(scheme, launchQuerySupportType);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::ApplicationModel::AppInfo>> Launcher::FindFileHandlersAsync(StringReference const & extension)
{
	return GetActivationFactory<Launcher, ILauncherStatics2>().FindFileHandlersAsync(extension);
}

}}}

namespace winrt { namespace Windows { namespace System { namespace Diagnostics {

inline Windows::Foundation::Collections::IVectorView<Windows::System::Diagnostics::ProcessDiagnosticInfo> ProcessDiagnosticInfo::GetForProcesses()
{
	return GetActivationFactory<ProcessDiagnosticInfo, IProcessDiagnosticInfoStatics>().GetForProcesses();
}

inline Windows::System::Diagnostics::ProcessDiagnosticInfo ProcessDiagnosticInfo::GetForCurrentProcess()
{
	return GetActivationFactory<ProcessDiagnosticInfo, IProcessDiagnosticInfoStatics>().GetForCurrentProcess();
}

}}}}

namespace winrt { namespace Windows { namespace System { namespace Display {

inline DisplayRequest::DisplayRequest() :
	DisplayRequest(ActivateInstance<DisplayRequest>())
{}

}}}}

namespace winrt { namespace Windows { namespace System { namespace Power {

inline Windows::System::Power::EnergySaverStatus PowerManager::EnergySaverStatus()
{
	return GetActivationFactory<PowerManager, IPowerManagerStatics>().EnergySaverStatus();
}

inline long long PowerManager::EnergySaverStatusChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<PowerManager, IPowerManagerStatics>().EnergySaverStatusChanged(handler);
}

template <typename F> long long PowerManager::EnergySaverStatusChanged(F handler)
{
	return GetActivationFactory<PowerManager, IPowerManagerStatics>().EnergySaverStatusChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void PowerManager::EnergySaverStatusChanged(long long const token)
{
	GetActivationFactory<PowerManager, IPowerManagerStatics>().EnergySaverStatusChanged(token);
}

inline Windows::System::Power::BatteryStatus PowerManager::BatteryStatus()
{
	return GetActivationFactory<PowerManager, IPowerManagerStatics>().BatteryStatus();
}

inline long long PowerManager::BatteryStatusChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<PowerManager, IPowerManagerStatics>().BatteryStatusChanged(handler);
}

template <typename F> long long PowerManager::BatteryStatusChanged(F handler)
{
	return GetActivationFactory<PowerManager, IPowerManagerStatics>().BatteryStatusChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void PowerManager::BatteryStatusChanged(long long const token)
{
	GetActivationFactory<PowerManager, IPowerManagerStatics>().BatteryStatusChanged(token);
}

inline Windows::System::Power::PowerSupplyStatus PowerManager::PowerSupplyStatus()
{
	return GetActivationFactory<PowerManager, IPowerManagerStatics>().PowerSupplyStatus();
}

inline long long PowerManager::PowerSupplyStatusChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<PowerManager, IPowerManagerStatics>().PowerSupplyStatusChanged(handler);
}

template <typename F> long long PowerManager::PowerSupplyStatusChanged(F handler)
{
	return GetActivationFactory<PowerManager, IPowerManagerStatics>().PowerSupplyStatusChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void PowerManager::PowerSupplyStatusChanged(long long const token)
{
	GetActivationFactory<PowerManager, IPowerManagerStatics>().PowerSupplyStatusChanged(token);
}

inline int PowerManager::RemainingChargePercent()
{
	return GetActivationFactory<PowerManager, IPowerManagerStatics>().RemainingChargePercent();
}

inline long long PowerManager::RemainingChargePercentChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<PowerManager, IPowerManagerStatics>().RemainingChargePercentChanged(handler);
}

template <typename F> long long PowerManager::RemainingChargePercentChanged(F handler)
{
	return GetActivationFactory<PowerManager, IPowerManagerStatics>().RemainingChargePercentChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void PowerManager::RemainingChargePercentChanged(long long const token)
{
	GetActivationFactory<PowerManager, IPowerManagerStatics>().RemainingChargePercentChanged(token);
}

inline Windows::Foundation::TimeSpan PowerManager::RemainingDischargeTime()
{
	return GetActivationFactory<PowerManager, IPowerManagerStatics>().RemainingDischargeTime();
}

inline long long PowerManager::RemainingDischargeTimeChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<PowerManager, IPowerManagerStatics>().RemainingDischargeTimeChanged(handler);
}

template <typename F> long long PowerManager::RemainingDischargeTimeChanged(F handler)
{
	return GetActivationFactory<PowerManager, IPowerManagerStatics>().RemainingDischargeTimeChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void PowerManager::RemainingDischargeTimeChanged(long long const token)
{
	GetActivationFactory<PowerManager, IPowerManagerStatics>().RemainingDischargeTimeChanged(token);
}

inline unsigned BackgroundEnergyManager::LowUsageLevel()
{
	return GetActivationFactory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>().LowUsageLevel();
}

inline unsigned BackgroundEnergyManager::NearMaxAcceptableUsageLevel()
{
	return GetActivationFactory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>().NearMaxAcceptableUsageLevel();
}

inline unsigned BackgroundEnergyManager::MaxAcceptableUsageLevel()
{
	return GetActivationFactory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>().MaxAcceptableUsageLevel();
}

inline unsigned BackgroundEnergyManager::ExcessiveUsageLevel()
{
	return GetActivationFactory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>().ExcessiveUsageLevel();
}

inline unsigned BackgroundEnergyManager::NearTerminationUsageLevel()
{
	return GetActivationFactory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>().NearTerminationUsageLevel();
}

inline unsigned BackgroundEnergyManager::TerminationUsageLevel()
{
	return GetActivationFactory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>().TerminationUsageLevel();
}

inline unsigned BackgroundEnergyManager::RecentEnergyUsage()
{
	return GetActivationFactory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>().RecentEnergyUsage();
}

inline unsigned BackgroundEnergyManager::RecentEnergyUsageLevel()
{
	return GetActivationFactory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>().RecentEnergyUsageLevel();
}

inline long long BackgroundEnergyManager::RecentEnergyUsageIncreased(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>().RecentEnergyUsageIncreased(handler);
}

template <typename F> long long BackgroundEnergyManager::RecentEnergyUsageIncreased(F handler)
{
	return GetActivationFactory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>().RecentEnergyUsageIncreased(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void BackgroundEnergyManager::RecentEnergyUsageIncreased(long long const token)
{
	GetActivationFactory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>().RecentEnergyUsageIncreased(token);
}

inline long long BackgroundEnergyManager::RecentEnergyUsageReturnedToLow(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>().RecentEnergyUsageReturnedToLow(handler);
}

template <typename F> long long BackgroundEnergyManager::RecentEnergyUsageReturnedToLow(F handler)
{
	return GetActivationFactory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>().RecentEnergyUsageReturnedToLow(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void BackgroundEnergyManager::RecentEnergyUsageReturnedToLow(long long const token)
{
	GetActivationFactory<BackgroundEnergyManager, IBackgroundEnergyManagerStatics>().RecentEnergyUsageReturnedToLow(token);
}

inline unsigned ForegroundEnergyManager::LowUsageLevel()
{
	return GetActivationFactory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>().LowUsageLevel();
}

inline unsigned ForegroundEnergyManager::NearMaxAcceptableUsageLevel()
{
	return GetActivationFactory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>().NearMaxAcceptableUsageLevel();
}

inline unsigned ForegroundEnergyManager::MaxAcceptableUsageLevel()
{
	return GetActivationFactory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>().MaxAcceptableUsageLevel();
}

inline unsigned ForegroundEnergyManager::ExcessiveUsageLevel()
{
	return GetActivationFactory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>().ExcessiveUsageLevel();
}

inline unsigned ForegroundEnergyManager::RecentEnergyUsage()
{
	return GetActivationFactory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>().RecentEnergyUsage();
}

inline unsigned ForegroundEnergyManager::RecentEnergyUsageLevel()
{
	return GetActivationFactory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>().RecentEnergyUsageLevel();
}

inline long long ForegroundEnergyManager::RecentEnergyUsageIncreased(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>().RecentEnergyUsageIncreased(handler);
}

template <typename F> long long ForegroundEnergyManager::RecentEnergyUsageIncreased(F handler)
{
	return GetActivationFactory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>().RecentEnergyUsageIncreased(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void ForegroundEnergyManager::RecentEnergyUsageIncreased(long long const token)
{
	GetActivationFactory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>().RecentEnergyUsageIncreased(token);
}

inline long long ForegroundEnergyManager::RecentEnergyUsageReturnedToLow(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>().RecentEnergyUsageReturnedToLow(handler);
}

template <typename F> long long ForegroundEnergyManager::RecentEnergyUsageReturnedToLow(F handler)
{
	return GetActivationFactory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>().RecentEnergyUsageReturnedToLow(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void ForegroundEnergyManager::RecentEnergyUsageReturnedToLow(long long const token)
{
	GetActivationFactory<ForegroundEnergyManager, IForegroundEnergyManagerStatics>().RecentEnergyUsageReturnedToLow(token);
}

}}}}

namespace winrt { namespace Windows { namespace System { namespace Power { namespace Diagnostics {

inline double BackgroundEnergyDiagnostics::DeviceSpecificConversionFactor()
{
	return GetActivationFactory<BackgroundEnergyDiagnostics, IBackgroundEnergyDiagnosticsStatics>().DeviceSpecificConversionFactor();
}

inline unsigned long long BackgroundEnergyDiagnostics::ComputeTotalEnergyUsage()
{
	return GetActivationFactory<BackgroundEnergyDiagnostics, IBackgroundEnergyDiagnosticsStatics>().ComputeTotalEnergyUsage();
}

inline void BackgroundEnergyDiagnostics::ResetTotalEnergyUsage()
{
	GetActivationFactory<BackgroundEnergyDiagnostics, IBackgroundEnergyDiagnosticsStatics>().ResetTotalEnergyUsage();
}

inline double ForegroundEnergyDiagnostics::DeviceSpecificConversionFactor()
{
	return GetActivationFactory<ForegroundEnergyDiagnostics, IForegroundEnergyDiagnosticsStatics>().DeviceSpecificConversionFactor();
}

inline unsigned long long ForegroundEnergyDiagnostics::ComputeTotalEnergyUsage()
{
	return GetActivationFactory<ForegroundEnergyDiagnostics, IForegroundEnergyDiagnosticsStatics>().ComputeTotalEnergyUsage();
}

inline void ForegroundEnergyDiagnostics::ResetTotalEnergyUsage()
{
	GetActivationFactory<ForegroundEnergyDiagnostics, IForegroundEnergyDiagnosticsStatics>().ResetTotalEnergyUsage();
}

}}}}}

namespace winrt { namespace Windows { namespace System { namespace Profile {

inline Windows::System::Profile::AnalyticsVersionInfo AnalyticsInfo::VersionInfo()
{
	return GetActivationFactory<AnalyticsInfo, IAnalyticsInfoStatics>().VersionInfo();
}

inline String AnalyticsInfo::DeviceForm()
{
	return GetActivationFactory<AnalyticsInfo, IAnalyticsInfoStatics>().DeviceForm();
}

inline Windows::System::Profile::HardwareToken HardwareIdentification::GetPackageSpecificToken(Windows::Storage::Streams::IBuffer const & nonce)
{
	return GetActivationFactory<HardwareIdentification, IHardwareIdentificationStatics>().GetPackageSpecificToken(nonce);
}

inline bool SharedModeSettings::IsEnabled()
{
	return GetActivationFactory<SharedModeSettings, ISharedModeSettingsStatics>().IsEnabled();
}

inline Windows::System::Profile::PlatformDataCollectionLevel PlatformDiagnosticsAndUsageDataSettings::CollectionLevel()
{
	return GetActivationFactory<PlatformDiagnosticsAndUsageDataSettings, IPlatformDiagnosticsAndUsageDataSettingsStatics>().CollectionLevel();
}

inline long long PlatformDiagnosticsAndUsageDataSettings::CollectionLevelChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<PlatformDiagnosticsAndUsageDataSettings, IPlatformDiagnosticsAndUsageDataSettingsStatics>().CollectionLevelChanged(handler);
}

template <typename F> long long PlatformDiagnosticsAndUsageDataSettings::CollectionLevelChanged(F handler)
{
	return GetActivationFactory<PlatformDiagnosticsAndUsageDataSettings, IPlatformDiagnosticsAndUsageDataSettingsStatics>().CollectionLevelChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void PlatformDiagnosticsAndUsageDataSettings::CollectionLevelChanged(long long const token)
{
	GetActivationFactory<PlatformDiagnosticsAndUsageDataSettings, IPlatformDiagnosticsAndUsageDataSettingsStatics>().CollectionLevelChanged(token);
}

inline bool PlatformDiagnosticsAndUsageDataSettings::CanCollectDiagnostics(Windows::System::Profile::PlatformDataCollectionLevel const level)
{
	return GetActivationFactory<PlatformDiagnosticsAndUsageDataSettings, IPlatformDiagnosticsAndUsageDataSettingsStatics>().CanCollectDiagnostics(level);
}

inline bool RetailInfo::IsDemoModeEnabled()
{
	return GetActivationFactory<RetailInfo, IRetailInfoStatics>().IsDemoModeEnabled();
}

inline Windows::Foundation::Collections::IMapView<String, IInspectable> RetailInfo::Properties()
{
	return GetActivationFactory<RetailInfo, IRetailInfoStatics>().Properties();
}

inline String KnownRetailInfoProperties::RetailAccessCode()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().RetailAccessCode();
}

inline String KnownRetailInfoProperties::ManufacturerName()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().ManufacturerName();
}

inline String KnownRetailInfoProperties::ModelName()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().ModelName();
}

inline String KnownRetailInfoProperties::DisplayModelName()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().DisplayModelName();
}

inline String KnownRetailInfoProperties::Price()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().Price();
}

inline String KnownRetailInfoProperties::IsFeatured()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().IsFeatured();
}

inline String KnownRetailInfoProperties::FormFactor()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().FormFactor();
}

inline String KnownRetailInfoProperties::ScreenSize()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().ScreenSize();
}

inline String KnownRetailInfoProperties::Weight()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().Weight();
}

inline String KnownRetailInfoProperties::DisplayDescription()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().DisplayDescription();
}

inline String KnownRetailInfoProperties::BatteryLifeDescription()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().BatteryLifeDescription();
}

inline String KnownRetailInfoProperties::ProcessorDescription()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().ProcessorDescription();
}

inline String KnownRetailInfoProperties::Memory()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().Memory();
}

inline String KnownRetailInfoProperties::StorageDescription()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().StorageDescription();
}

inline String KnownRetailInfoProperties::GraphicsDescription()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().GraphicsDescription();
}

inline String KnownRetailInfoProperties::FrontCameraDescription()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().FrontCameraDescription();
}

inline String KnownRetailInfoProperties::RearCameraDescription()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().RearCameraDescription();
}

inline String KnownRetailInfoProperties::HasNfc()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().HasNfc();
}

inline String KnownRetailInfoProperties::HasSdSlot()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().HasSdSlot();
}

inline String KnownRetailInfoProperties::HasOpticalDrive()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().HasOpticalDrive();
}

inline String KnownRetailInfoProperties::IsOfficeInstalled()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().IsOfficeInstalled();
}

inline String KnownRetailInfoProperties::WindowsEdition()
{
	return GetActivationFactory<KnownRetailInfoProperties, IKnownRetailInfoPropertiesStatics>().WindowsEdition();
}

}}}}

namespace winrt { namespace Windows { namespace System { namespace Profile { namespace SystemManufacturers {

inline String SmbiosInformation::SerialNumber()
{
	return GetActivationFactory<SmbiosInformation, ISmbiosInformationStatics>().SerialNumber();
}

}}}}}

namespace winrt { namespace Windows { namespace System { namespace RemoteDesktop {

inline bool InteractiveSession::IsRemote()
{
	return GetActivationFactory<InteractiveSession, IInteractiveSessionStatics>().IsRemote();
}

}}}}

namespace winrt { namespace Windows { namespace System { namespace Threading {

inline Windows::System::Threading::ThreadPoolTimer ThreadPoolTimer::CreatePeriodicTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & period)
{
	return GetActivationFactory<ThreadPoolTimer, IThreadPoolTimerStatics>().CreatePeriodicTimer(handler, period);
}

template <typename F> Windows::System::Threading::ThreadPoolTimer ThreadPoolTimer::CreatePeriodicTimer(F handler, Windows::Foundation::TimeSpan const & period)
{
	return GetActivationFactory<ThreadPoolTimer, IThreadPoolTimerStatics>().CreatePeriodicTimer(Windows::System::Threading::TimerElapsedHandler(handler), period);
}

inline Windows::System::Threading::ThreadPoolTimer ThreadPoolTimer::CreateTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & delay)
{
	return GetActivationFactory<ThreadPoolTimer, IThreadPoolTimerStatics>().CreateTimer(handler, delay);
}

template <typename F> Windows::System::Threading::ThreadPoolTimer ThreadPoolTimer::CreateTimer(F handler, Windows::Foundation::TimeSpan const & delay)
{
	return GetActivationFactory<ThreadPoolTimer, IThreadPoolTimerStatics>().CreateTimer(Windows::System::Threading::TimerElapsedHandler(handler), delay);
}

inline Windows::System::Threading::ThreadPoolTimer ThreadPoolTimer::CreatePeriodicTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & period, Windows::System::Threading::ITimerDestroyedHandler const & destroyed)
{
	return GetActivationFactory<ThreadPoolTimer, IThreadPoolTimerStatics>().CreatePeriodicTimer(handler, period, destroyed);
}

template <typename F> Windows::System::Threading::ThreadPoolTimer ThreadPoolTimer::CreatePeriodicTimer(F handler, Windows::Foundation::TimeSpan const & period, F destroyed)
{
	return GetActivationFactory<ThreadPoolTimer, IThreadPoolTimerStatics>().CreatePeriodicTimer(Windows::System::Threading::TimerElapsedHandler(handler), period, Windows::System::Threading::TimerDestroyedHandler(destroyed));
}

inline Windows::System::Threading::ThreadPoolTimer ThreadPoolTimer::CreateTimer(Windows::System::Threading::ITimerElapsedHandler const & handler, Windows::Foundation::TimeSpan const & delay, Windows::System::Threading::ITimerDestroyedHandler const & destroyed)
{
	return GetActivationFactory<ThreadPoolTimer, IThreadPoolTimerStatics>().CreateTimer(handler, delay, destroyed);
}

template <typename F> Windows::System::Threading::ThreadPoolTimer ThreadPoolTimer::CreateTimer(F handler, Windows::Foundation::TimeSpan const & delay, F destroyed)
{
	return GetActivationFactory<ThreadPoolTimer, IThreadPoolTimerStatics>().CreateTimer(Windows::System::Threading::TimerElapsedHandler(handler), delay, Windows::System::Threading::TimerDestroyedHandler(destroyed));
}

inline Windows::Foundation::IAsyncAction ThreadPool::RunAsync(Windows::System::Threading::IWorkItemHandler const & handler)
{
	return GetActivationFactory<ThreadPool, IThreadPoolStatics>().RunAsync(handler);
}

template <typename F> Windows::Foundation::IAsyncAction ThreadPool::RunAsync(F handler)
{
	return GetActivationFactory<ThreadPool, IThreadPoolStatics>().RunAsync(Windows::System::Threading::WorkItemHandler(handler));
}

inline Windows::Foundation::IAsyncAction ThreadPool::RunAsync(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority const priority)
{
	return GetActivationFactory<ThreadPool, IThreadPoolStatics>().RunAsync(handler, priority);
}

template <typename F> Windows::Foundation::IAsyncAction ThreadPool::RunAsync(F handler, Windows::System::Threading::WorkItemPriority const priority)
{
	return GetActivationFactory<ThreadPool, IThreadPoolStatics>().RunAsync(Windows::System::Threading::WorkItemHandler(handler), priority);
}

inline Windows::Foundation::IAsyncAction ThreadPool::RunAsync(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority const priority, Windows::System::Threading::WorkItemOptions const options)
{
	return GetActivationFactory<ThreadPool, IThreadPoolStatics>().RunAsync(handler, priority, options);
}

template <typename F> Windows::Foundation::IAsyncAction ThreadPool::RunAsync(F handler, Windows::System::Threading::WorkItemPriority const priority, Windows::System::Threading::WorkItemOptions const options)
{
	return GetActivationFactory<ThreadPool, IThreadPoolStatics>().RunAsync(Windows::System::Threading::WorkItemHandler(handler), priority, options);
}

}}}}

namespace winrt { namespace Windows { namespace System { namespace Threading { namespace Core {

inline Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToEvent(StringReference const & name, Windows::System::Threading::Core::ISignalHandler const & handler)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToEvent(name, handler);
}

template <typename F> Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToEvent(StringReference const & name, F handler)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToEvent(name, Windows::System::Threading::Core::SignalHandler(handler));
}

inline Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToEvent(StringReference const & name, Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToEvent(name, handler, timeout);
}

template <typename F> Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToEvent(StringReference const & name, F handler, Windows::Foundation::TimeSpan const & timeout)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToEvent(name, Windows::System::Threading::Core::SignalHandler(handler), timeout);
}

inline Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToSemaphore(StringReference const & name, Windows::System::Threading::Core::ISignalHandler const & handler)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToSemaphore(name, handler);
}

template <typename F> Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToSemaphore(StringReference const & name, F handler)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToSemaphore(name, Windows::System::Threading::Core::SignalHandler(handler));
}

inline Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToSemaphore(StringReference const & name, Windows::System::Threading::Core::ISignalHandler const & handler, Windows::Foundation::TimeSpan const & timeout)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToSemaphore(name, handler, timeout);
}

template <typename F> Windows::System::Threading::Core::SignalNotifier SignalNotifier::AttachToSemaphore(StringReference const & name, F handler, Windows::Foundation::TimeSpan const & timeout)
{
	return GetActivationFactory<SignalNotifier, ISignalNotifierStatics>().AttachToSemaphore(name, Windows::System::Threading::Core::SignalHandler(handler), timeout);
}

inline PreallocatedWorkItem::PreallocatedWorkItem(Windows::System::Threading::IWorkItemHandler const & handler) :
	PreallocatedWorkItem(GetActivationFactory<PreallocatedWorkItem, IPreallocatedWorkItemFactory>().CreateWorkItem(handler))
{}

template <typename F> PreallocatedWorkItem::PreallocatedWorkItem(F handler) :
	PreallocatedWorkItem(GetActivationFactory<PreallocatedWorkItem, IPreallocatedWorkItemFactory>().CreateWorkItem(Windows::System::Threading::WorkItemHandler(handler)))
{}

inline PreallocatedWorkItem::PreallocatedWorkItem(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority const priority) :
	PreallocatedWorkItem(GetActivationFactory<PreallocatedWorkItem, IPreallocatedWorkItemFactory>().CreateWorkItemWithPriority(handler, priority))
{}

template <typename F> PreallocatedWorkItem::PreallocatedWorkItem(F handler, Windows::System::Threading::WorkItemPriority const priority) :
	PreallocatedWorkItem(GetActivationFactory<PreallocatedWorkItem, IPreallocatedWorkItemFactory>().CreateWorkItemWithPriority(Windows::System::Threading::WorkItemHandler(handler), priority))
{}

inline PreallocatedWorkItem::PreallocatedWorkItem(Windows::System::Threading::IWorkItemHandler const & handler, Windows::System::Threading::WorkItemPriority const priority, Windows::System::Threading::WorkItemOptions const options) :
	PreallocatedWorkItem(GetActivationFactory<PreallocatedWorkItem, IPreallocatedWorkItemFactory>().CreateWorkItemWithPriorityAndOptions(handler, priority, options))
{}

template <typename F> PreallocatedWorkItem::PreallocatedWorkItem(F handler, Windows::System::Threading::WorkItemPriority const priority, Windows::System::Threading::WorkItemOptions const options) :
	PreallocatedWorkItem(GetActivationFactory<PreallocatedWorkItem, IPreallocatedWorkItemFactory>().CreateWorkItemWithPriorityAndOptions(Windows::System::Threading::WorkItemHandler(handler), priority, options))
{}

}}}}}

namespace winrt { namespace Windows { namespace System { namespace UserProfile {

inline String AdvertisingManager::AdvertisingId()
{
	return GetActivationFactory<AdvertisingManager, IAdvertisingManagerStatics>().AdvertisingId();
}

inline bool UserInformation::AccountPictureChangeEnabled()
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().AccountPictureChangeEnabled();
}

inline bool UserInformation::NameAccessAllowed()
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().NameAccessAllowed();
}

inline Windows::Storage::IStorageFile UserInformation::GetAccountPicture(Windows::System::UserProfile::AccountPictureKind const kind)
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().GetAccountPicture(kind);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::System::UserProfile::SetAccountPictureResult> UserInformation::SetAccountPictureAsync(Windows::Storage::IStorageFile const & image)
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().SetAccountPictureAsync(image);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::System::UserProfile::SetAccountPictureResult> UserInformation::SetAccountPicturesAsync(Windows::Storage::IStorageFile const & smallImage, Windows::Storage::IStorageFile const & largeImage, Windows::Storage::IStorageFile const & video)
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().SetAccountPicturesAsync(smallImage, largeImage, video);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::System::UserProfile::SetAccountPictureResult> UserInformation::SetAccountPictureFromStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & image)
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().SetAccountPictureFromStreamAsync(image);
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::System::UserProfile::SetAccountPictureResult> UserInformation::SetAccountPicturesFromStreamsAsync(Windows::Storage::Streams::IRandomAccessStream const & smallImage, Windows::Storage::Streams::IRandomAccessStream const & largeImage, Windows::Storage::Streams::IRandomAccessStream const & video)
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().SetAccountPicturesFromStreamsAsync(smallImage, largeImage, video);
}

inline long long UserInformation::AccountPictureChanged(Windows::Foundation::IEventHandler<IInspectable> const & changeHandler)
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().AccountPictureChanged(changeHandler);
}

template <typename F> long long UserInformation::AccountPictureChanged(F changeHandler)
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().AccountPictureChanged(Windows::Foundation::EventHandler<IInspectable>(changeHandler));
}

inline void UserInformation::AccountPictureChanged(long long const token)
{
	GetActivationFactory<UserInformation, IUserInformationStatics>().AccountPictureChanged(token);
}

inline Windows::Foundation::IAsyncOperation<String> UserInformation::GetDisplayNameAsync()
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().GetDisplayNameAsync();
}

inline Windows::Foundation::IAsyncOperation<String> UserInformation::GetFirstNameAsync()
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().GetFirstNameAsync();
}

inline Windows::Foundation::IAsyncOperation<String> UserInformation::GetLastNameAsync()
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().GetLastNameAsync();
}

inline Windows::Foundation::IAsyncOperation<String> UserInformation::GetPrincipalNameAsync()
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().GetPrincipalNameAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Uri> UserInformation::GetSessionInitiationProtocolUriAsync()
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().GetSessionInitiationProtocolUriAsync();
}

inline Windows::Foundation::IAsyncOperation<String> UserInformation::GetDomainNameAsync()
{
	return GetActivationFactory<UserInformation, IUserInformationStatics>().GetDomainNameAsync();
}

inline Windows::Foundation::IAsyncOperation<winrt::Windows::System::UserProfile::SetImageFeedResult> LockScreen::RequestSetImageFeedAsync(Windows::Foundation::Uri const & syndicationFeedUri)
{
	return GetActivationFactory<LockScreen, ILockScreenImageFeedStatics>().RequestSetImageFeedAsync(syndicationFeedUri);
}

inline bool LockScreen::TryRemoveImageFeed()
{
	return GetActivationFactory<LockScreen, ILockScreenImageFeedStatics>().TryRemoveImageFeed();
}

inline Windows::Foundation::Uri LockScreen::OriginalImageFile()
{
	return GetActivationFactory<LockScreen, ILockScreenStatics>().OriginalImageFile();
}

inline Windows::Storage::Streams::IRandomAccessStream LockScreen::GetImageStream()
{
	return GetActivationFactory<LockScreen, ILockScreenStatics>().GetImageStream();
}

inline Windows::Foundation::IAsyncAction LockScreen::SetImageFileAsync(Windows::Storage::IStorageFile const & value)
{
	return GetActivationFactory<LockScreen, ILockScreenStatics>().SetImageFileAsync(value);
}

inline Windows::Foundation::IAsyncAction LockScreen::SetImageStreamAsync(Windows::Storage::Streams::IRandomAccessStream const & value)
{
	return GetActivationFactory<LockScreen, ILockScreenStatics>().SetImageStreamAsync(value);
}

inline Windows::System::UserProfile::UserProfilePersonalizationSettings UserProfilePersonalizationSettings::Current()
{
	return GetActivationFactory<UserProfilePersonalizationSettings, IUserProfilePersonalizationSettingsStatics>().Current();
}

inline bool UserProfilePersonalizationSettings::IsSupported()
{
	return GetActivationFactory<UserProfilePersonalizationSettings, IUserProfilePersonalizationSettingsStatics>().IsSupported();
}

inline Windows::Foundation::Collections::IVectorView<String> GlobalizationPreferences::Calendars()
{
	return GetActivationFactory<GlobalizationPreferences, IGlobalizationPreferencesStatics>().Calendars();
}

inline Windows::Foundation::Collections::IVectorView<String> GlobalizationPreferences::Clocks()
{
	return GetActivationFactory<GlobalizationPreferences, IGlobalizationPreferencesStatics>().Clocks();
}

inline Windows::Foundation::Collections::IVectorView<String> GlobalizationPreferences::Currencies()
{
	return GetActivationFactory<GlobalizationPreferences, IGlobalizationPreferencesStatics>().Currencies();
}

inline Windows::Foundation::Collections::IVectorView<String> GlobalizationPreferences::Languages()
{
	return GetActivationFactory<GlobalizationPreferences, IGlobalizationPreferencesStatics>().Languages();
}

inline String GlobalizationPreferences::HomeGeographicRegion()
{
	return GetActivationFactory<GlobalizationPreferences, IGlobalizationPreferencesStatics>().HomeGeographicRegion();
}

inline Windows::Globalization::DayOfWeek GlobalizationPreferences::WeekStartsOn()
{
	return GetActivationFactory<GlobalizationPreferences, IGlobalizationPreferencesStatics>().WeekStartsOn();
}

inline Windows::System::UserProfile::FirstSignInSettings FirstSignInSettings::GetDefault()
{
	return GetActivationFactory<FirstSignInSettings, IFirstSignInSettingsStatics>().GetDefault();
}

}}}}

namespace winrt { namespace Windows { namespace UI {

inline Windows::UI::Color ColorHelper::FromArgb(byte const a, byte const r, byte const g, byte const b)
{
	return GetActivationFactory<ColorHelper, IColorHelperStatics>().FromArgb(a, r, g, b);
}

inline Windows::UI::Color Colors::AliceBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().AliceBlue();
}

inline Windows::UI::Color Colors::AntiqueWhite()
{
	return GetActivationFactory<Colors, IColorsStatics>().AntiqueWhite();
}

inline Windows::UI::Color Colors::Aqua()
{
	return GetActivationFactory<Colors, IColorsStatics>().Aqua();
}

inline Windows::UI::Color Colors::Aquamarine()
{
	return GetActivationFactory<Colors, IColorsStatics>().Aquamarine();
}

inline Windows::UI::Color Colors::Azure()
{
	return GetActivationFactory<Colors, IColorsStatics>().Azure();
}

inline Windows::UI::Color Colors::Beige()
{
	return GetActivationFactory<Colors, IColorsStatics>().Beige();
}

inline Windows::UI::Color Colors::Bisque()
{
	return GetActivationFactory<Colors, IColorsStatics>().Bisque();
}

inline Windows::UI::Color Colors::Black()
{
	return GetActivationFactory<Colors, IColorsStatics>().Black();
}

inline Windows::UI::Color Colors::BlanchedAlmond()
{
	return GetActivationFactory<Colors, IColorsStatics>().BlanchedAlmond();
}

inline Windows::UI::Color Colors::Blue()
{
	return GetActivationFactory<Colors, IColorsStatics>().Blue();
}

inline Windows::UI::Color Colors::BlueViolet()
{
	return GetActivationFactory<Colors, IColorsStatics>().BlueViolet();
}

inline Windows::UI::Color Colors::Brown()
{
	return GetActivationFactory<Colors, IColorsStatics>().Brown();
}

inline Windows::UI::Color Colors::BurlyWood()
{
	return GetActivationFactory<Colors, IColorsStatics>().BurlyWood();
}

inline Windows::UI::Color Colors::CadetBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().CadetBlue();
}

inline Windows::UI::Color Colors::Chartreuse()
{
	return GetActivationFactory<Colors, IColorsStatics>().Chartreuse();
}

inline Windows::UI::Color Colors::Chocolate()
{
	return GetActivationFactory<Colors, IColorsStatics>().Chocolate();
}

inline Windows::UI::Color Colors::Coral()
{
	return GetActivationFactory<Colors, IColorsStatics>().Coral();
}

inline Windows::UI::Color Colors::CornflowerBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().CornflowerBlue();
}

inline Windows::UI::Color Colors::Cornsilk()
{
	return GetActivationFactory<Colors, IColorsStatics>().Cornsilk();
}

inline Windows::UI::Color Colors::Crimson()
{
	return GetActivationFactory<Colors, IColorsStatics>().Crimson();
}

inline Windows::UI::Color Colors::Cyan()
{
	return GetActivationFactory<Colors, IColorsStatics>().Cyan();
}

inline Windows::UI::Color Colors::DarkBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkBlue();
}

inline Windows::UI::Color Colors::DarkCyan()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkCyan();
}

inline Windows::UI::Color Colors::DarkGoldenrod()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkGoldenrod();
}

inline Windows::UI::Color Colors::DarkGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkGray();
}

inline Windows::UI::Color Colors::DarkGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkGreen();
}

inline Windows::UI::Color Colors::DarkKhaki()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkKhaki();
}

inline Windows::UI::Color Colors::DarkMagenta()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkMagenta();
}

inline Windows::UI::Color Colors::DarkOliveGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkOliveGreen();
}

inline Windows::UI::Color Colors::DarkOrange()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkOrange();
}

inline Windows::UI::Color Colors::DarkOrchid()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkOrchid();
}

inline Windows::UI::Color Colors::DarkRed()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkRed();
}

inline Windows::UI::Color Colors::DarkSalmon()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkSalmon();
}

inline Windows::UI::Color Colors::DarkSeaGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkSeaGreen();
}

inline Windows::UI::Color Colors::DarkSlateBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkSlateBlue();
}

inline Windows::UI::Color Colors::DarkSlateGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkSlateGray();
}

inline Windows::UI::Color Colors::DarkTurquoise()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkTurquoise();
}

inline Windows::UI::Color Colors::DarkViolet()
{
	return GetActivationFactory<Colors, IColorsStatics>().DarkViolet();
}

inline Windows::UI::Color Colors::DeepPink()
{
	return GetActivationFactory<Colors, IColorsStatics>().DeepPink();
}

inline Windows::UI::Color Colors::DeepSkyBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().DeepSkyBlue();
}

inline Windows::UI::Color Colors::DimGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().DimGray();
}

inline Windows::UI::Color Colors::DodgerBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().DodgerBlue();
}

inline Windows::UI::Color Colors::Firebrick()
{
	return GetActivationFactory<Colors, IColorsStatics>().Firebrick();
}

inline Windows::UI::Color Colors::FloralWhite()
{
	return GetActivationFactory<Colors, IColorsStatics>().FloralWhite();
}

inline Windows::UI::Color Colors::ForestGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().ForestGreen();
}

inline Windows::UI::Color Colors::Fuchsia()
{
	return GetActivationFactory<Colors, IColorsStatics>().Fuchsia();
}

inline Windows::UI::Color Colors::Gainsboro()
{
	return GetActivationFactory<Colors, IColorsStatics>().Gainsboro();
}

inline Windows::UI::Color Colors::GhostWhite()
{
	return GetActivationFactory<Colors, IColorsStatics>().GhostWhite();
}

inline Windows::UI::Color Colors::Gold()
{
	return GetActivationFactory<Colors, IColorsStatics>().Gold();
}

inline Windows::UI::Color Colors::Goldenrod()
{
	return GetActivationFactory<Colors, IColorsStatics>().Goldenrod();
}

inline Windows::UI::Color Colors::Gray()
{
	return GetActivationFactory<Colors, IColorsStatics>().Gray();
}

inline Windows::UI::Color Colors::Green()
{
	return GetActivationFactory<Colors, IColorsStatics>().Green();
}

inline Windows::UI::Color Colors::GreenYellow()
{
	return GetActivationFactory<Colors, IColorsStatics>().GreenYellow();
}

inline Windows::UI::Color Colors::Honeydew()
{
	return GetActivationFactory<Colors, IColorsStatics>().Honeydew();
}

inline Windows::UI::Color Colors::HotPink()
{
	return GetActivationFactory<Colors, IColorsStatics>().HotPink();
}

inline Windows::UI::Color Colors::IndianRed()
{
	return GetActivationFactory<Colors, IColorsStatics>().IndianRed();
}

inline Windows::UI::Color Colors::Indigo()
{
	return GetActivationFactory<Colors, IColorsStatics>().Indigo();
}

inline Windows::UI::Color Colors::Ivory()
{
	return GetActivationFactory<Colors, IColorsStatics>().Ivory();
}

inline Windows::UI::Color Colors::Khaki()
{
	return GetActivationFactory<Colors, IColorsStatics>().Khaki();
}

inline Windows::UI::Color Colors::Lavender()
{
	return GetActivationFactory<Colors, IColorsStatics>().Lavender();
}

inline Windows::UI::Color Colors::LavenderBlush()
{
	return GetActivationFactory<Colors, IColorsStatics>().LavenderBlush();
}

inline Windows::UI::Color Colors::LawnGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().LawnGreen();
}

inline Windows::UI::Color Colors::LemonChiffon()
{
	return GetActivationFactory<Colors, IColorsStatics>().LemonChiffon();
}

inline Windows::UI::Color Colors::LightBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightBlue();
}

inline Windows::UI::Color Colors::LightCoral()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightCoral();
}

inline Windows::UI::Color Colors::LightCyan()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightCyan();
}

inline Windows::UI::Color Colors::LightGoldenrodYellow()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightGoldenrodYellow();
}

inline Windows::UI::Color Colors::LightGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightGreen();
}

inline Windows::UI::Color Colors::LightGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightGray();
}

inline Windows::UI::Color Colors::LightPink()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightPink();
}

inline Windows::UI::Color Colors::LightSalmon()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightSalmon();
}

inline Windows::UI::Color Colors::LightSeaGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightSeaGreen();
}

inline Windows::UI::Color Colors::LightSkyBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightSkyBlue();
}

inline Windows::UI::Color Colors::LightSlateGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightSlateGray();
}

inline Windows::UI::Color Colors::LightSteelBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightSteelBlue();
}

inline Windows::UI::Color Colors::LightYellow()
{
	return GetActivationFactory<Colors, IColorsStatics>().LightYellow();
}

inline Windows::UI::Color Colors::Lime()
{
	return GetActivationFactory<Colors, IColorsStatics>().Lime();
}

inline Windows::UI::Color Colors::LimeGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().LimeGreen();
}

inline Windows::UI::Color Colors::Linen()
{
	return GetActivationFactory<Colors, IColorsStatics>().Linen();
}

inline Windows::UI::Color Colors::Magenta()
{
	return GetActivationFactory<Colors, IColorsStatics>().Magenta();
}

inline Windows::UI::Color Colors::Maroon()
{
	return GetActivationFactory<Colors, IColorsStatics>().Maroon();
}

inline Windows::UI::Color Colors::MediumAquamarine()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumAquamarine();
}

inline Windows::UI::Color Colors::MediumBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumBlue();
}

inline Windows::UI::Color Colors::MediumOrchid()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumOrchid();
}

inline Windows::UI::Color Colors::MediumPurple()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumPurple();
}

inline Windows::UI::Color Colors::MediumSeaGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumSeaGreen();
}

inline Windows::UI::Color Colors::MediumSlateBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumSlateBlue();
}

inline Windows::UI::Color Colors::MediumSpringGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumSpringGreen();
}

inline Windows::UI::Color Colors::MediumTurquoise()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumTurquoise();
}

inline Windows::UI::Color Colors::MediumVioletRed()
{
	return GetActivationFactory<Colors, IColorsStatics>().MediumVioletRed();
}

inline Windows::UI::Color Colors::MidnightBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().MidnightBlue();
}

inline Windows::UI::Color Colors::MintCream()
{
	return GetActivationFactory<Colors, IColorsStatics>().MintCream();
}

inline Windows::UI::Color Colors::MistyRose()
{
	return GetActivationFactory<Colors, IColorsStatics>().MistyRose();
}

inline Windows::UI::Color Colors::Moccasin()
{
	return GetActivationFactory<Colors, IColorsStatics>().Moccasin();
}

inline Windows::UI::Color Colors::NavajoWhite()
{
	return GetActivationFactory<Colors, IColorsStatics>().NavajoWhite();
}

inline Windows::UI::Color Colors::Navy()
{
	return GetActivationFactory<Colors, IColorsStatics>().Navy();
}

inline Windows::UI::Color Colors::OldLace()
{
	return GetActivationFactory<Colors, IColorsStatics>().OldLace();
}

inline Windows::UI::Color Colors::Olive()
{
	return GetActivationFactory<Colors, IColorsStatics>().Olive();
}

inline Windows::UI::Color Colors::OliveDrab()
{
	return GetActivationFactory<Colors, IColorsStatics>().OliveDrab();
}

inline Windows::UI::Color Colors::Orange()
{
	return GetActivationFactory<Colors, IColorsStatics>().Orange();
}

inline Windows::UI::Color Colors::OrangeRed()
{
	return GetActivationFactory<Colors, IColorsStatics>().OrangeRed();
}

inline Windows::UI::Color Colors::Orchid()
{
	return GetActivationFactory<Colors, IColorsStatics>().Orchid();
}

inline Windows::UI::Color Colors::PaleGoldenrod()
{
	return GetActivationFactory<Colors, IColorsStatics>().PaleGoldenrod();
}

inline Windows::UI::Color Colors::PaleGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().PaleGreen();
}

inline Windows::UI::Color Colors::PaleTurquoise()
{
	return GetActivationFactory<Colors, IColorsStatics>().PaleTurquoise();
}

inline Windows::UI::Color Colors::PaleVioletRed()
{
	return GetActivationFactory<Colors, IColorsStatics>().PaleVioletRed();
}

inline Windows::UI::Color Colors::PapayaWhip()
{
	return GetActivationFactory<Colors, IColorsStatics>().PapayaWhip();
}

inline Windows::UI::Color Colors::PeachPuff()
{
	return GetActivationFactory<Colors, IColorsStatics>().PeachPuff();
}

inline Windows::UI::Color Colors::Peru()
{
	return GetActivationFactory<Colors, IColorsStatics>().Peru();
}

inline Windows::UI::Color Colors::Pink()
{
	return GetActivationFactory<Colors, IColorsStatics>().Pink();
}

inline Windows::UI::Color Colors::Plum()
{
	return GetActivationFactory<Colors, IColorsStatics>().Plum();
}

inline Windows::UI::Color Colors::PowderBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().PowderBlue();
}

inline Windows::UI::Color Colors::Purple()
{
	return GetActivationFactory<Colors, IColorsStatics>().Purple();
}

inline Windows::UI::Color Colors::Red()
{
	return GetActivationFactory<Colors, IColorsStatics>().Red();
}

inline Windows::UI::Color Colors::RosyBrown()
{
	return GetActivationFactory<Colors, IColorsStatics>().RosyBrown();
}

inline Windows::UI::Color Colors::RoyalBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().RoyalBlue();
}

inline Windows::UI::Color Colors::SaddleBrown()
{
	return GetActivationFactory<Colors, IColorsStatics>().SaddleBrown();
}

inline Windows::UI::Color Colors::Salmon()
{
	return GetActivationFactory<Colors, IColorsStatics>().Salmon();
}

inline Windows::UI::Color Colors::SandyBrown()
{
	return GetActivationFactory<Colors, IColorsStatics>().SandyBrown();
}

inline Windows::UI::Color Colors::SeaGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().SeaGreen();
}

inline Windows::UI::Color Colors::SeaShell()
{
	return GetActivationFactory<Colors, IColorsStatics>().SeaShell();
}

inline Windows::UI::Color Colors::Sienna()
{
	return GetActivationFactory<Colors, IColorsStatics>().Sienna();
}

inline Windows::UI::Color Colors::Silver()
{
	return GetActivationFactory<Colors, IColorsStatics>().Silver();
}

inline Windows::UI::Color Colors::SkyBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().SkyBlue();
}

inline Windows::UI::Color Colors::SlateBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().SlateBlue();
}

inline Windows::UI::Color Colors::SlateGray()
{
	return GetActivationFactory<Colors, IColorsStatics>().SlateGray();
}

inline Windows::UI::Color Colors::Snow()
{
	return GetActivationFactory<Colors, IColorsStatics>().Snow();
}

inline Windows::UI::Color Colors::SpringGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().SpringGreen();
}

inline Windows::UI::Color Colors::SteelBlue()
{
	return GetActivationFactory<Colors, IColorsStatics>().SteelBlue();
}

inline Windows::UI::Color Colors::Tan()
{
	return GetActivationFactory<Colors, IColorsStatics>().Tan();
}

inline Windows::UI::Color Colors::Teal()
{
	return GetActivationFactory<Colors, IColorsStatics>().Teal();
}

inline Windows::UI::Color Colors::Thistle()
{
	return GetActivationFactory<Colors, IColorsStatics>().Thistle();
}

inline Windows::UI::Color Colors::Tomato()
{
	return GetActivationFactory<Colors, IColorsStatics>().Tomato();
}

inline Windows::UI::Color Colors::Transparent()
{
	return GetActivationFactory<Colors, IColorsStatics>().Transparent();
}

inline Windows::UI::Color Colors::Turquoise()
{
	return GetActivationFactory<Colors, IColorsStatics>().Turquoise();
}

inline Windows::UI::Color Colors::Violet()
{
	return GetActivationFactory<Colors, IColorsStatics>().Violet();
}

inline Windows::UI::Color Colors::Wheat()
{
	return GetActivationFactory<Colors, IColorsStatics>().Wheat();
}

inline Windows::UI::Color Colors::White()
{
	return GetActivationFactory<Colors, IColorsStatics>().White();
}

inline Windows::UI::Color Colors::WhiteSmoke()
{
	return GetActivationFactory<Colors, IColorsStatics>().WhiteSmoke();
}

inline Windows::UI::Color Colors::Yellow()
{
	return GetActivationFactory<Colors, IColorsStatics>().Yellow();
}

inline Windows::UI::Color Colors::YellowGreen()
{
	return GetActivationFactory<Colors, IColorsStatics>().YellowGreen();
}

}}}

namespace winrt { namespace Windows { namespace UI { namespace ApplicationSettings {

inline SettingsCommand::SettingsCommand(IInspectable const & settingsCommandId, StringReference const & label, Windows::UI::Popups::IUICommandInvokedHandler const & handler) :
	SettingsCommand(GetActivationFactory<SettingsCommand, ISettingsCommandFactory>().CreateSettingsCommand(settingsCommandId, label, handler))
{}

template <typename F> SettingsCommand::SettingsCommand(IInspectable const & settingsCommandId, StringReference const & label, F handler) :
	SettingsCommand(GetActivationFactory<SettingsCommand, ISettingsCommandFactory>().CreateSettingsCommand(settingsCommandId, label, Windows::UI::Popups::UICommandInvokedHandler(handler)))
{}

inline Windows::UI::ApplicationSettings::SettingsCommand SettingsCommand::AccountsCommand()
{
	return GetActivationFactory<SettingsCommand, ISettingsCommandStatics>().AccountsCommand();
}

inline WebAccountProviderCommand::WebAccountProviderCommand(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, Windows::UI::ApplicationSettings::IWebAccountProviderCommandInvokedHandler const & invoked) :
	WebAccountProviderCommand(GetActivationFactory<WebAccountProviderCommand, IWebAccountProviderCommandFactory>().CreateWebAccountProviderCommand(webAccountProvider, invoked))
{}

template <typename F> WebAccountProviderCommand::WebAccountProviderCommand(Windows::Security::Credentials::WebAccountProvider const & webAccountProvider, F invoked) :
	WebAccountProviderCommand(GetActivationFactory<WebAccountProviderCommand, IWebAccountProviderCommandFactory>().CreateWebAccountProviderCommand(webAccountProvider, Windows::UI::ApplicationSettings::WebAccountProviderCommandInvokedHandler(invoked)))
{}

inline WebAccountCommand::WebAccountCommand(Windows::Security::Credentials::WebAccount const & webAccount, Windows::UI::ApplicationSettings::IWebAccountCommandInvokedHandler const & invoked, Windows::UI::ApplicationSettings::SupportedWebAccountActions const actions) :
	WebAccountCommand(GetActivationFactory<WebAccountCommand, IWebAccountCommandFactory>().CreateWebAccountCommand(webAccount, invoked, actions))
{}

template <typename F> WebAccountCommand::WebAccountCommand(Windows::Security::Credentials::WebAccount const & webAccount, F invoked, Windows::UI::ApplicationSettings::SupportedWebAccountActions const actions) :
	WebAccountCommand(GetActivationFactory<WebAccountCommand, IWebAccountCommandFactory>().CreateWebAccountCommand(webAccount, Windows::UI::ApplicationSettings::WebAccountCommandInvokedHandler(invoked), actions))
{}

inline CredentialCommand::CredentialCommand(Windows::Security::Credentials::PasswordCredential const & passwordCredential) :
	CredentialCommand(GetActivationFactory<CredentialCommand, ICredentialCommandFactory>().CreateCredentialCommand(passwordCredential))
{}

inline CredentialCommand::CredentialCommand(Windows::Security::Credentials::PasswordCredential const & passwordCredential, Windows::UI::ApplicationSettings::ICredentialCommandCredentialDeletedHandler const & deleted) :
	CredentialCommand(GetActivationFactory<CredentialCommand, ICredentialCommandFactory>().CreateCredentialCommandWithHandler(passwordCredential, deleted))
{}

template <typename F> CredentialCommand::CredentialCommand(Windows::Security::Credentials::PasswordCredential const & passwordCredential, F deleted) :
	CredentialCommand(GetActivationFactory<CredentialCommand, ICredentialCommandFactory>().CreateCredentialCommandWithHandler(passwordCredential, Windows::UI::ApplicationSettings::CredentialCommandCredentialDeletedHandler(deleted)))
{}

inline Windows::UI::ApplicationSettings::AccountsSettingsPane AccountsSettingsPane::GetForCurrentView()
{
	return GetActivationFactory<AccountsSettingsPane, IAccountsSettingsPaneStatics>().GetForCurrentView();
}

inline void AccountsSettingsPane::Show()
{
	GetActivationFactory<AccountsSettingsPane, IAccountsSettingsPaneStatics>().Show();
}

inline Windows::UI::ApplicationSettings::SettingsPane SettingsPane::GetForCurrentView()
{
	return GetActivationFactory<SettingsPane, ISettingsPaneStatics>().GetForCurrentView();
}

inline void SettingsPane::Show()
{
	GetActivationFactory<SettingsPane, ISettingsPaneStatics>().Show();
}

inline Windows::UI::ApplicationSettings::SettingsEdgeLocation SettingsPane::Edge()
{
	return GetActivationFactory<SettingsPane, ISettingsPaneStatics>().Edge();
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Composition {

inline CompositionEffectSourceParameter::CompositionEffectSourceParameter(StringReference const & name) :
	CompositionEffectSourceParameter(GetActivationFactory<CompositionEffectSourceParameter, ICompositionEffectSourceParameterFactory>().Create(name))
{}

inline Compositor::Compositor() :
	Compositor(ActivateInstance<Compositor>())
{}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Core {

inline CoreCursor::CoreCursor(Windows::UI::Core::CoreCursorType const type, unsigned const id) :
	CoreCursor(GetActivationFactory<CoreCursor, ICoreCursorFactory>().CreateCursor(type, id))
{}

inline Windows::UI::Core::CoreWindow CoreWindow::GetForCurrentThread()
{
	return GetActivationFactory<CoreWindow, ICoreWindowStatic>().GetForCurrentThread();
}

inline Windows::UI::Core::CoreWindowResizeManager CoreWindowResizeManager::GetForCurrentView()
{
	return GetActivationFactory<CoreWindowResizeManager, ICoreWindowResizeManagerStatics>().GetForCurrentView();
}

inline CoreWindowDialog::CoreWindowDialog() :
	CoreWindowDialog(ActivateInstance<CoreWindowDialog>())
{}

inline CoreWindowDialog::CoreWindowDialog(StringReference const & title) :
	CoreWindowDialog(GetActivationFactory<CoreWindowDialog, ICoreWindowDialogFactory>().CreateWithTitle(title))
{}

inline CoreWindowFlyout::CoreWindowFlyout(Windows::Foundation::Point const & position) :
	CoreWindowFlyout(GetActivationFactory<CoreWindowFlyout, ICoreWindowFlyoutFactory>().Create(position))
{}

inline CoreWindowFlyout::CoreWindowFlyout(Windows::Foundation::Point const & position, StringReference const & title) :
	CoreWindowFlyout(GetActivationFactory<CoreWindowFlyout, ICoreWindowFlyoutFactory>().CreateWithTitle(position, title))
{}

inline Windows::UI::Core::SystemNavigationManager SystemNavigationManager::GetForCurrentView()
{
	return GetActivationFactory<SystemNavigationManager, ISystemNavigationManagerStatics>().GetForCurrentView();
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Core { namespace AnimationMetrics {

inline AnimationDescription::AnimationDescription(Windows::UI::Core::AnimationMetrics::AnimationEffect const effect, Windows::UI::Core::AnimationMetrics::AnimationEffectTarget const target) :
	AnimationDescription(GetActivationFactory<AnimationDescription, IAnimationDescriptionFactory>().CreateInstance(effect, target))
{}

}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input {

inline Windows::UI::Input::EdgeGesture EdgeGesture::GetForCurrentView()
{
	return GetActivationFactory<EdgeGesture, IEdgeGestureStatics>().GetForCurrentView();
}

inline Windows::UI::Input::KeyboardDeliveryInterceptor KeyboardDeliveryInterceptor::GetForCurrentView()
{
	return GetActivationFactory<KeyboardDeliveryInterceptor, IKeyboardDeliveryInterceptorStatics>().GetForCurrentView();
}

inline GestureRecognizer::GestureRecognizer() :
	GestureRecognizer(ActivateInstance<GestureRecognizer>())
{}

inline Windows::UI::Input::PointerPoint PointerPoint::GetCurrentPoint(unsigned const pointerId)
{
	return GetActivationFactory<PointerPoint, IPointerPointStatics>().GetCurrentPoint(pointerId);
}

inline Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> PointerPoint::GetIntermediatePoints(unsigned const pointerId)
{
	return GetActivationFactory<PointerPoint, IPointerPointStatics>().GetIntermediatePoints(pointerId);
}

inline Windows::UI::Input::PointerPoint PointerPoint::GetCurrentPoint(unsigned const pointerId, Windows::UI::Input::IPointerPointTransform const & transform)
{
	return GetActivationFactory<PointerPoint, IPointerPointStatics>().GetCurrentPoint(pointerId, transform);
}

inline Windows::Foundation::Collections::IVector<Windows::UI::Input::PointerPoint> PointerPoint::GetIntermediatePoints(unsigned const pointerId, Windows::UI::Input::IPointerPointTransform const & transform)
{
	return GetActivationFactory<PointerPoint, IPointerPointStatics>().GetIntermediatePoints(pointerId, transform);
}

inline Windows::UI::Input::PointerVisualizationSettings PointerVisualizationSettings::GetForCurrentView()
{
	return GetActivationFactory<PointerVisualizationSettings, IPointerVisualizationSettingsStatics>().GetForCurrentView();
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Inking {

inline InkPoint::InkPoint(Windows::Foundation::Point const & position, float const pressure) :
	InkPoint(GetActivationFactory<InkPoint, IInkPointFactory>().CreateInkPoint(position, pressure))
{}

inline InkDrawingAttributes::InkDrawingAttributes() :
	InkDrawingAttributes(ActivateInstance<InkDrawingAttributes>())
{}

inline InkStrokeBuilder::InkStrokeBuilder() :
	InkStrokeBuilder(ActivateInstance<InkStrokeBuilder>())
{}

inline InkStrokeContainer::InkStrokeContainer() :
	InkStrokeContainer(ActivateInstance<InkStrokeContainer>())
{}

inline InkRecognizerContainer::InkRecognizerContainer() :
	InkRecognizerContainer(ActivateInstance<InkRecognizerContainer>())
{}

inline InkManager::InkManager() :
	InkManager(ActivateInstance<InkManager>())
{}

}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Inking { namespace Core {

inline Windows::UI::Input::Inking::Core::CoreInkIndependentInputSource CoreInkIndependentInputSource::Create(Windows::UI::Input::Inking::InkPresenter const & inkPresenter)
{
	return GetActivationFactory<CoreInkIndependentInputSource, ICoreInkIndependentInputSourceStatics>().Create(inkPresenter);
}

}}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Input { namespace Spatial {

inline Windows::UI::Input::Spatial::SpatialPointerPose SpatialPointerPose::TryGetAtTimestamp(Windows::Perception::Spatial::SpatialCoordinateSystem const & coordinateSystem, Windows::Perception::PerceptionTimestamp const & timestamp)
{
	return GetActivationFactory<SpatialPointerPose, ISpatialPointerPoseStatics>().TryGetAtTimestamp(coordinateSystem, timestamp);
}

inline SpatialGestureRecognizer::SpatialGestureRecognizer(Windows::UI::Input::Spatial::SpatialGestureSettings const settings) :
	SpatialGestureRecognizer(GetActivationFactory<SpatialGestureRecognizer, ISpatialGestureRecognizerFactory>().Create(settings))
{}

inline Windows::UI::Input::Spatial::SpatialInteractionManager SpatialInteractionManager::GetForCurrentView()
{
	return GetActivationFactory<SpatialInteractionManager, ISpatialInteractionManagerStatics>().GetForCurrentView();
}

}}}}}

namespace winrt { namespace Windows { namespace UI { namespace Notifications {

inline TileNotification::TileNotification(Windows::Data::Xml::Dom::XmlDocument const & content) :
	TileNotification(GetActivationFactory<TileNotification, ITileNotificationFactory>().CreateTileNotification(content))
{}

inline ScheduledTileNotification::ScheduledTileNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime) :
	ScheduledTileNotification(GetActivationFactory<ScheduledTileNotification, IScheduledTileNotificationFactory>().CreateScheduledTileNotification(content, deliveryTime))
{}

inline BadgeNotification::BadgeNotification(Windows::Data::Xml::Dom::XmlDocument const & content) :
	BadgeNotification(GetActivationFactory<BadgeNotification, IBadgeNotificationFactory>().CreateBadgeNotification(content))
{}

inline ToastNotification::ToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content) :
	ToastNotification(GetActivationFactory<ToastNotification, IToastNotificationFactory>().CreateToastNotification(content))
{}

inline ScheduledToastNotification::ScheduledToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime) :
	ScheduledToastNotification(GetActivationFactory<ScheduledToastNotification, IScheduledToastNotificationFactory>().CreateScheduledToastNotification(content, deliveryTime))
{}

inline ScheduledToastNotification::ScheduledToastNotification(Windows::Data::Xml::Dom::XmlDocument const & content, Windows::Foundation::DateTime const & deliveryTime, Windows::Foundation::TimeSpan const & snoozeInterval, unsigned const maximumSnoozeCount) :
	ScheduledToastNotification(GetActivationFactory<ScheduledToastNotification, IScheduledToastNotificationFactory>().CreateScheduledToastNotificationRecurring(content, deliveryTime, snoozeInterval, maximumSnoozeCount))
{}

inline Windows::UI::Notifications::TileUpdater TileUpdateManager::CreateTileUpdaterForApplication()
{
	return GetActivationFactory<TileUpdateManager, ITileUpdateManagerStatics>().CreateTileUpdaterForApplication();
}

inline Windows::UI::Notifications::TileUpdater TileUpdateManager::CreateTileUpdaterForApplication(StringReference const & applicationId)
{
	return GetActivationFactory<TileUpdateManager, ITileUpdateManagerStatics>().CreateTileUpdaterForApplication(applicationId);
}

inline Windows::UI::Notifications::TileUpdater TileUpdateManager::CreateTileUpdaterForSecondaryTile(StringReference const & tileId)
{
	return GetActivationFactory<TileUpdateManager, ITileUpdateManagerStatics>().CreateTileUpdaterForSecondaryTile(tileId);
}

inline Windows::Data::Xml::Dom::XmlDocument TileUpdateManager::GetTemplateContent(Windows::UI::Notifications::TileTemplateType const type)
{
	return GetActivationFactory<TileUpdateManager, ITileUpdateManagerStatics>().GetTemplateContent(type);
}

inline Windows::UI::Notifications::BadgeUpdater BadgeUpdateManager::CreateBadgeUpdaterForApplication()
{
	return GetActivationFactory<BadgeUpdateManager, IBadgeUpdateManagerStatics>().CreateBadgeUpdaterForApplication();
}

inline Windows::UI::Notifications::BadgeUpdater BadgeUpdateManager::CreateBadgeUpdaterForApplication(StringReference const & applicationId)
{
	return GetActivationFactory<BadgeUpdateManager, IBadgeUpdateManagerStatics>().CreateBadgeUpdaterForApplication(applicationId);
}

inline Windows::UI::Notifications::BadgeUpdater BadgeUpdateManager::CreateBadgeUpdaterForSecondaryTile(StringReference const & tileId)
{
	return GetActivationFactory<BadgeUpdateManager, IBadgeUpdateManagerStatics>().CreateBadgeUpdaterForSecondaryTile(tileId);
}

inline Windows::Data::Xml::Dom::XmlDocument BadgeUpdateManager::GetTemplateContent(Windows::UI::Notifications::BadgeTemplateType const type)
{
	return GetActivationFactory<BadgeUpdateManager, IBadgeUpdateManagerStatics>().GetTemplateContent(type);
}

inline Windows::UI::Notifications::ToastNotificationHistory ToastNotificationManager::History()
{
	return GetActivationFactory<ToastNotificationManager, IToastNotificationManagerStatics2>().History();
}

inline Windows::UI::Notifications::ToastNotifier ToastNotificationManager::CreateToastNotifier()
{
	return GetActivationFactory<ToastNotificationManager, IToastNotificationManagerStatics>().CreateToastNotifier();
}

inline Windows::UI::Notifications::ToastNotifier ToastNotificationManager::CreateToastNotifier(StringReference const & applicationId)
{
	return GetActivationFactory<ToastNotificationManager, IToastNotificationManagerStatics>().CreateToastNotifier(applicationId);
}

inline Windows::Data::Xml::Dom::XmlDocument ToastNotificationManager::GetTemplateContent(Windows::UI::Notifications::ToastTemplateType const type)
{
	return GetActivationFactory<ToastNotificationManager, IToastNotificationManagerStatics>().GetTemplateContent(type);
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Popups {

inline MessageDialog::MessageDialog(StringReference const & content) :
	MessageDialog(GetActivationFactory<MessageDialog, IMessageDialogFactory>().Create(content))
{}

inline MessageDialog::MessageDialog(StringReference const & content, StringReference const & title) :
	MessageDialog(GetActivationFactory<MessageDialog, IMessageDialogFactory>().CreateWithTitle(content, title))
{}

inline UICommand::UICommand() :
	UICommand(ActivateInstance<UICommand>())
{}

inline UICommand::UICommand(StringReference const & label) :
	UICommand(GetActivationFactory<UICommand, IUICommandFactory>().Create(label))
{}

inline UICommand::UICommand(StringReference const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action) :
	UICommand(GetActivationFactory<UICommand, IUICommandFactory>().CreateWithHandler(label, action))
{}

template <typename F> UICommand::UICommand(StringReference const & label, F action) :
	UICommand(GetActivationFactory<UICommand, IUICommandFactory>().CreateWithHandler(label, Windows::UI::Popups::UICommandInvokedHandler(action)))
{}

inline UICommand::UICommand(StringReference const & label, Windows::UI::Popups::IUICommandInvokedHandler const & action, IInspectable const & commandId) :
	UICommand(GetActivationFactory<UICommand, IUICommandFactory>().CreateWithHandlerAndId(label, action, commandId))
{}

template <typename F> UICommand::UICommand(StringReference const & label, F action, IInspectable const & commandId) :
	UICommand(GetActivationFactory<UICommand, IUICommandFactory>().CreateWithHandlerAndId(label, Windows::UI::Popups::UICommandInvokedHandler(action), commandId))
{}

inline UICommandSeparator::UICommandSeparator() :
	UICommandSeparator(ActivateInstance<UICommandSeparator>())
{}

inline PopupMenu::PopupMenu() :
	PopupMenu(ActivateInstance<PopupMenu>())
{}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace StartScreen {

inline Windows::UI::StartScreen::JumpListItem JumpListItem::CreateWithArguments(StringReference const & arguments, StringReference const & displayName)
{
	return GetActivationFactory<JumpListItem, IJumpListItemStatics>().CreateWithArguments(arguments, displayName);
}

inline Windows::UI::StartScreen::JumpListItem JumpListItem::CreateSeparator()
{
	return GetActivationFactory<JumpListItem, IJumpListItemStatics>().CreateSeparator();
}

inline Windows::Foundation::IAsyncOperation<Windows::UI::StartScreen::JumpList> JumpList::LoadCurrentAsync()
{
	return GetActivationFactory<JumpList, IJumpListStatics>().LoadCurrentAsync();
}

inline bool JumpList::IsSupported()
{
	return GetActivationFactory<JumpList, IJumpListStatics>().IsSupported();
}

inline SecondaryTile::SecondaryTile() :
	SecondaryTile(ActivateInstance<SecondaryTile>())
{}

inline SecondaryTile::SecondaryTile(StringReference const & tileId, StringReference const & shortName, StringReference const & displayName, StringReference const & arguments, Windows::UI::StartScreen::TileOptions const tileOptions, Windows::Foundation::Uri const & logoReference) :
	SecondaryTile(GetActivationFactory<SecondaryTile, ISecondaryTileFactory>().CreateTile(tileId, shortName, displayName, arguments, tileOptions, logoReference))
{}

inline SecondaryTile::SecondaryTile(StringReference const & tileId, StringReference const & shortName, StringReference const & displayName, StringReference const & arguments, Windows::UI::StartScreen::TileOptions const tileOptions, Windows::Foundation::Uri const & logoReference, Windows::Foundation::Uri const & wideLogoReference) :
	SecondaryTile(GetActivationFactory<SecondaryTile, ISecondaryTileFactory>().CreateWideTile(tileId, shortName, displayName, arguments, tileOptions, logoReference, wideLogoReference))
{}

inline SecondaryTile::SecondaryTile(StringReference const & tileId) :
	SecondaryTile(GetActivationFactory<SecondaryTile, ISecondaryTileFactory>().CreateWithId(tileId))
{}

inline SecondaryTile::SecondaryTile(StringReference const & tileId, StringReference const & displayName, StringReference const & arguments, Windows::Foundation::Uri const & square150x150Logo, Windows::UI::StartScreen::TileSize const desiredSize) :
	SecondaryTile(GetActivationFactory<SecondaryTile, ISecondaryTileFactory2>().CreateMinimalTile(tileId, displayName, arguments, square150x150Logo, desiredSize))
{}

inline bool SecondaryTile::Exists(StringReference const & tileId)
{
	return GetActivationFactory<SecondaryTile, ISecondaryTileStatics>().Exists(tileId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> SecondaryTile::FindAllAsync()
{
	return GetActivationFactory<SecondaryTile, ISecondaryTileStatics>().FindAllAsync();
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> SecondaryTile::FindAllAsync(StringReference const & applicationId)
{
	return GetActivationFactory<SecondaryTile, ISecondaryTileStatics>().FindAllAsync(applicationId);
}

inline Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::UI::StartScreen::SecondaryTile>> SecondaryTile::FindAllForPackageAsync()
{
	return GetActivationFactory<SecondaryTile, ISecondaryTileStatics>().FindAllForPackageAsync();
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Text {

inline Windows::UI::Color TextConstants::AutoColor()
{
	return GetActivationFactory<TextConstants, ITextConstantsStatics>().AutoColor();
}

inline int TextConstants::MinUnitCount()
{
	return GetActivationFactory<TextConstants, ITextConstantsStatics>().MinUnitCount();
}

inline int TextConstants::MaxUnitCount()
{
	return GetActivationFactory<TextConstants, ITextConstantsStatics>().MaxUnitCount();
}

inline Windows::UI::Color TextConstants::UndefinedColor()
{
	return GetActivationFactory<TextConstants, ITextConstantsStatics>().UndefinedColor();
}

inline float TextConstants::UndefinedFloatValue()
{
	return GetActivationFactory<TextConstants, ITextConstantsStatics>().UndefinedFloatValue();
}

inline int TextConstants::UndefinedInt32Value()
{
	return GetActivationFactory<TextConstants, ITextConstantsStatics>().UndefinedInt32Value();
}

inline Windows::UI::Text::FontStretch TextConstants::UndefinedFontStretch()
{
	return GetActivationFactory<TextConstants, ITextConstantsStatics>().UndefinedFontStretch();
}

inline Windows::UI::Text::FontStyle TextConstants::UndefinedFontStyle()
{
	return GetActivationFactory<TextConstants, ITextConstantsStatics>().UndefinedFontStyle();
}

inline Windows::UI::Text::FontWeight FontWeights::Black()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().Black();
}

inline Windows::UI::Text::FontWeight FontWeights::Bold()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().Bold();
}

inline Windows::UI::Text::FontWeight FontWeights::ExtraBlack()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().ExtraBlack();
}

inline Windows::UI::Text::FontWeight FontWeights::ExtraBold()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().ExtraBold();
}

inline Windows::UI::Text::FontWeight FontWeights::ExtraLight()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().ExtraLight();
}

inline Windows::UI::Text::FontWeight FontWeights::Light()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().Light();
}

inline Windows::UI::Text::FontWeight FontWeights::Medium()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().Medium();
}

inline Windows::UI::Text::FontWeight FontWeights::Normal()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().Normal();
}

inline Windows::UI::Text::FontWeight FontWeights::SemiBold()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().SemiBold();
}

inline Windows::UI::Text::FontWeight FontWeights::SemiLight()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().SemiLight();
}

inline Windows::UI::Text::FontWeight FontWeights::Thin()
{
	return GetActivationFactory<FontWeights, IFontWeightsStatics>().Thin();
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace Text { namespace Core {

inline Windows::UI::Text::Core::CoreTextServicesManager CoreTextServicesManager::GetForCurrentView()
{
	return GetActivationFactory<CoreTextServicesManager, ICoreTextServicesManagerStatics>().GetForCurrentView();
}

inline wchar_t CoreTextServicesConstants::HiddenCharacter()
{
	return GetActivationFactory<CoreTextServicesConstants, ICoreTextServicesStatics>().HiddenCharacter();
}

}}}}}

namespace winrt { namespace Windows { namespace UI { namespace ViewManagement {

inline int ApplicationView::GetApplicationViewIdForWindow(Windows::UI::Core::ICoreWindow const & window)
{
	return GetActivationFactory<ApplicationView, IApplicationViewInteropStatics>().GetApplicationViewIdForWindow(window);
}

inline Windows::UI::ViewManagement::ApplicationView ApplicationView::GetForCurrentView()
{
	return GetActivationFactory<ApplicationView, IApplicationViewStatics2>().GetForCurrentView();
}

inline bool ApplicationView::TerminateAppOnFinalViewClose()
{
	return GetActivationFactory<ApplicationView, IApplicationViewStatics2>().TerminateAppOnFinalViewClose();
}

inline void ApplicationView::TerminateAppOnFinalViewClose(bool const value)
{
	GetActivationFactory<ApplicationView, IApplicationViewStatics2>().TerminateAppOnFinalViewClose(value);
}

inline bool ApplicationView::TryUnsnapToFullscreen()
{
	return GetActivationFactory<ApplicationView, IApplicationViewFullscreenStatics>().TryUnsnapToFullscreen();
}

inline Windows::UI::ViewManagement::ApplicationViewWindowingMode ApplicationView::PreferredLaunchWindowingMode()
{
	return GetActivationFactory<ApplicationView, IApplicationViewStatics3>().PreferredLaunchWindowingMode();
}

inline void ApplicationView::PreferredLaunchWindowingMode(Windows::UI::ViewManagement::ApplicationViewWindowingMode const value)
{
	GetActivationFactory<ApplicationView, IApplicationViewStatics3>().PreferredLaunchWindowingMode(value);
}

inline Windows::Foundation::Size ApplicationView::PreferredLaunchViewSize()
{
	return GetActivationFactory<ApplicationView, IApplicationViewStatics3>().PreferredLaunchViewSize();
}

inline void ApplicationView::PreferredLaunchViewSize(Windows::Foundation::Size const & value)
{
	GetActivationFactory<ApplicationView, IApplicationViewStatics3>().PreferredLaunchViewSize(value);
}

inline Windows::UI::ViewManagement::ApplicationViewState ApplicationView::Value()
{
	return GetActivationFactory<ApplicationView, IApplicationViewStatics>().Value();
}

inline bool ApplicationView::TryUnsnap()
{
	return GetActivationFactory<ApplicationView, IApplicationViewStatics>().TryUnsnap();
}

inline void ApplicationViewSwitcher::DisableSystemViewActivationPolicy()
{
	GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics2>().DisableSystemViewActivationPolicy();
}

inline void ApplicationViewSwitcher::DisableShowingMainViewOnActivation()
{
	GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().DisableShowingMainViewOnActivation();
}

inline Windows::Foundation::IAsyncOperation<bool> ApplicationViewSwitcher::TryShowAsStandaloneAsync(int const viewId)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().TryShowAsStandaloneAsync(viewId);
}

inline Windows::Foundation::IAsyncOperation<bool> ApplicationViewSwitcher::TryShowAsStandaloneAsync(int const viewId, Windows::UI::ViewManagement::ViewSizePreference const sizePreference)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().TryShowAsStandaloneAsync(viewId, sizePreference);
}

inline Windows::Foundation::IAsyncOperation<bool> ApplicationViewSwitcher::TryShowAsStandaloneAsync(int const viewId, Windows::UI::ViewManagement::ViewSizePreference const sizePreference, int const anchorViewId, Windows::UI::ViewManagement::ViewSizePreference const anchorSizePreference)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().TryShowAsStandaloneAsync(viewId, sizePreference, anchorViewId, anchorSizePreference);
}

inline Windows::Foundation::IAsyncAction ApplicationViewSwitcher::SwitchAsync(int const viewId)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().SwitchAsync(viewId);
}

inline Windows::Foundation::IAsyncAction ApplicationViewSwitcher::SwitchAsync(int const toViewId, int const fromViewId)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().SwitchAsync(toViewId, fromViewId);
}

inline Windows::Foundation::IAsyncAction ApplicationViewSwitcher::SwitchAsync(int const toViewId, int const fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions const options)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().SwitchAsync(toViewId, fromViewId, options);
}

inline Windows::Foundation::IAsyncOperation<bool> ApplicationViewSwitcher::PrepareForCustomAnimatedSwitchAsync(int const toViewId, int const fromViewId, Windows::UI::ViewManagement::ApplicationViewSwitchingOptions const options)
{
	return GetActivationFactory<ApplicationViewSwitcher, IApplicationViewSwitcherStatics>().PrepareForCustomAnimatedSwitchAsync(toViewId, fromViewId, options);
}

inline ApplicationViewTransferContext::ApplicationViewTransferContext() :
	ApplicationViewTransferContext(ActivateInstance<ApplicationViewTransferContext>())
{}

inline String ApplicationViewTransferContext::DataPackageFormatId()
{
	return GetActivationFactory<ApplicationViewTransferContext, IApplicationViewTransferContextStatics>().DataPackageFormatId();
}

inline Windows::UI::ViewManagement::InputPane InputPane::GetForCurrentView()
{
	return GetActivationFactory<InputPane, IInputPaneStatics>().GetForCurrentView();
}

inline Windows::Foundation::IAsyncAction ProjectionManager::StartProjectingAsync(int const projectionViewId, int const anchorViewId, Windows::Devices::Enumeration::DeviceInformation const & displayDeviceInfo)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics2>().StartProjectingAsync(projectionViewId, anchorViewId, displayDeviceInfo);
}

inline Windows::Foundation::IAsyncOperation<bool> ProjectionManager::RequestStartProjectingAsync(int const projectionViewId, int const anchorViewId, Windows::Foundation::Rect const & selection)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics2>().RequestStartProjectingAsync(projectionViewId, anchorViewId, selection);
}

inline Windows::Foundation::IAsyncOperation<bool> ProjectionManager::RequestStartProjectingAsync(int const projectionViewId, int const anchorViewId, Windows::Foundation::Rect const & selection, Windows::UI::Popups::Placement const prefferedPlacement)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics2>().RequestStartProjectingAsync(projectionViewId, anchorViewId, selection, prefferedPlacement);
}

inline String ProjectionManager::GetDeviceSelector()
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics2>().GetDeviceSelector();
}

inline Windows::Foundation::IAsyncAction ProjectionManager::StartProjectingAsync(int const projectionViewId, int const anchorViewId)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().StartProjectingAsync(projectionViewId, anchorViewId);
}

inline Windows::Foundation::IAsyncAction ProjectionManager::SwapDisplaysForViewsAsync(int const projectionViewId, int const anchorViewId)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().SwapDisplaysForViewsAsync(projectionViewId, anchorViewId);
}

inline Windows::Foundation::IAsyncAction ProjectionManager::StopProjectingAsync(int const projectionViewId, int const anchorViewId)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().StopProjectingAsync(projectionViewId, anchorViewId);
}

inline bool ProjectionManager::ProjectionDisplayAvailable()
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().ProjectionDisplayAvailable();
}

inline long long ProjectionManager::ProjectionDisplayAvailableChanged(Windows::Foundation::IEventHandler<IInspectable> const & handler)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().ProjectionDisplayAvailableChanged(handler);
}

template <typename F> long long ProjectionManager::ProjectionDisplayAvailableChanged(F handler)
{
	return GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().ProjectionDisplayAvailableChanged(Windows::Foundation::EventHandler<IInspectable>(handler));
}

inline void ProjectionManager::ProjectionDisplayAvailableChanged(long long const token)
{
	GetActivationFactory<ProjectionManager, IProjectionManagerStatics>().ProjectionDisplayAvailableChanged(token);
}

inline Windows::UI::ViewManagement::UIViewSettings UIViewSettings::GetForCurrentView()
{
	return GetActivationFactory<UIViewSettings, IUIViewSettingsStatics>().GetForCurrentView();
}

inline AccessibilitySettings::AccessibilitySettings() :
	AccessibilitySettings(ActivateInstance<AccessibilitySettings>())
{}

inline UISettings::UISettings() :
	UISettings(ActivateInstance<UISettings>())
{}

inline bool ApplicationViewScaling::DisableLayoutScaling()
{
	return GetActivationFactory<ApplicationViewScaling, IApplicationViewScalingStatics>().DisableLayoutScaling();
}

inline bool ApplicationViewScaling::TrySetDisableLayoutScaling(bool const disableLayoutScaling)
{
	return GetActivationFactory<ApplicationViewScaling, IApplicationViewScalingStatics>().TrySetDisableLayoutScaling(disableLayoutScaling);
}

}}}}

namespace winrt { namespace Windows { namespace UI { namespace WebUI {

inline Windows::UI::WebUI::IWebUIBackgroundTaskInstance WebUIBackgroundTaskInstance::Current()
{
	return GetActivationFactory<WebUIBackgroundTaskInstance, IWebUIBackgroundTaskInstanceStatics>().Current();
}

inline long long WebUIApplication::Activated(Windows::UI::WebUI::IActivatedEventHandler const & handler)
{
	return GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Activated(handler);
}

template <typename F> long long WebUIApplication::Activated(F handler)
{
	return GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Activated(Windows::UI::WebUI::ActivatedEventHandler(handler));
}

inline void WebUIApplication::Activated(long long const token)
{
	GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Activated(token);
}

inline long long WebUIApplication::Suspending(Windows::UI::WebUI::ISuspendingEventHandler const & handler)
{
	return GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Suspending(handler);
}

template <typename F> long long WebUIApplication::Suspending(F handler)
{
	return GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Suspending(Windows::UI::WebUI::SuspendingEventHandler(handler));
}

inline void WebUIApplication::Suspending(long long const token)
{
	GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Suspending(token);
}

inline long long WebUIApplication::Resuming(Windows::UI::WebUI::IResumingEventHandler const & handler)
{
	return GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Resuming(handler);
}

template <typename F> long long WebUIApplication::Resuming(F handler)
{
	return GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Resuming(Windows::UI::WebUI::ResumingEventHandler(handler));
}

inline void WebUIApplication::Resuming(long long const token)
{
	GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Resuming(token);
}

inline long long WebUIApplication::Navigated(Windows::UI::WebUI::INavigatedEventHandler const & handler)
{
	return GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Navigated(handler);
}

template <typename F> long long WebUIApplication::Navigated(F handler)
{
	return GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Navigated(Windows::UI::WebUI::NavigatedEventHandler(handler));
}

inline void WebUIApplication::Navigated(long long const token)
{
	GetActivationFactory<WebUIApplication, IWebUIActivationStatics>().Navigated(token);
}

}}}}

namespace winrt { namespace Windows { namespace Web {

inline Windows::Web::WebErrorStatus WebError::GetStatus(int const hresult)
{
	return GetActivationFactory<WebError, IWebErrorStatics>().GetStatus(hresult);
}

}}}

namespace winrt { namespace Windows { namespace Web { namespace AtomPub {

inline AtomPubClient::AtomPubClient() :
	AtomPubClient(ActivateInstance<AtomPubClient>())
{}

inline AtomPubClient::AtomPubClient(Windows::Security::Credentials::PasswordCredential const & serverCredential) :
	AtomPubClient(GetActivationFactory<AtomPubClient, IAtomPubClientFactory>().CreateAtomPubClientWithCredentials(serverCredential))
{}

}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http {

inline HttpRequestMessage::HttpRequestMessage() :
	HttpRequestMessage(ActivateInstance<HttpRequestMessage>())
{}

inline HttpRequestMessage::HttpRequestMessage(Windows::Web::Http::HttpMethod const & method, Windows::Foundation::Uri const & uri) :
	HttpRequestMessage(GetActivationFactory<HttpRequestMessage, IHttpRequestMessageFactory>().Create(method, uri))
{}

inline HttpResponseMessage::HttpResponseMessage() :
	HttpResponseMessage(ActivateInstance<HttpResponseMessage>())
{}

inline HttpResponseMessage::HttpResponseMessage(Windows::Web::Http::HttpStatusCode const statusCode) :
	HttpResponseMessage(GetActivationFactory<HttpResponseMessage, IHttpResponseMessageFactory>().Create(statusCode))
{}

inline HttpMethod::HttpMethod(StringReference const & method) :
	HttpMethod(GetActivationFactory<HttpMethod, IHttpMethodFactory>().Create(method))
{}

inline Windows::Web::Http::HttpMethod HttpMethod::Delete()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Delete();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Get()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Get();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Head()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Head();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Options()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Options();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Patch()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Patch();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Post()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Post();
}

inline Windows::Web::Http::HttpMethod HttpMethod::Put()
{
	return GetActivationFactory<HttpMethod, IHttpMethodStatics>().Put();
}

inline HttpClient::HttpClient() :
	HttpClient(ActivateInstance<HttpClient>())
{}

inline HttpClient::HttpClient(Windows::Web::Http::Filters::IHttpFilter const & filter) :
	HttpClient(GetActivationFactory<HttpClient, IHttpClientFactory>().Create(filter))
{}

inline HttpCookie::HttpCookie(StringReference const & name, StringReference const & domain, StringReference const & path) :
	HttpCookie(GetActivationFactory<HttpCookie, IHttpCookieFactory>().Create(name, domain, path))
{}

inline HttpStringContent::HttpStringContent(StringReference const & content) :
	HttpStringContent(GetActivationFactory<HttpStringContent, IHttpStringContentFactory>().CreateFromString(content))
{}

inline HttpStringContent::HttpStringContent(StringReference const & content, Windows::Storage::Streams::UnicodeEncoding const encoding) :
	HttpStringContent(GetActivationFactory<HttpStringContent, IHttpStringContentFactory>().CreateFromStringWithEncoding(content, encoding))
{}

inline HttpStringContent::HttpStringContent(StringReference const & content, Windows::Storage::Streams::UnicodeEncoding const encoding, StringReference const & mediaType) :
	HttpStringContent(GetActivationFactory<HttpStringContent, IHttpStringContentFactory>().CreateFromStringWithEncodingAndMediaType(content, encoding, mediaType))
{}

inline HttpBufferContent::HttpBufferContent(Windows::Storage::Streams::IBuffer const & content) :
	HttpBufferContent(GetActivationFactory<HttpBufferContent, IHttpBufferContentFactory>().CreateFromBuffer(content))
{}

inline HttpBufferContent::HttpBufferContent(Windows::Storage::Streams::IBuffer const & content, unsigned const offset, unsigned const count) :
	HttpBufferContent(GetActivationFactory<HttpBufferContent, IHttpBufferContentFactory>().CreateFromBufferWithOffset(content, offset, count))
{}

inline HttpStreamContent::HttpStreamContent(Windows::Storage::Streams::IInputStream const & content) :
	HttpStreamContent(GetActivationFactory<HttpStreamContent, IHttpStreamContentFactory>().CreateFromInputStream(content))
{}

inline HttpFormUrlEncodedContent::HttpFormUrlEncodedContent(Windows::Foundation::Collections::IIterable<Windows::Foundation::Collections::IKeyValuePair<String, String>> const & content) :
	HttpFormUrlEncodedContent(GetActivationFactory<HttpFormUrlEncodedContent, IHttpFormUrlEncodedContentFactory>().Create(content))
{}

inline HttpMultipartContent::HttpMultipartContent() :
	HttpMultipartContent(ActivateInstance<HttpMultipartContent>())
{}

inline HttpMultipartContent::HttpMultipartContent(StringReference const & subtype) :
	HttpMultipartContent(GetActivationFactory<HttpMultipartContent, IHttpMultipartContentFactory>().CreateWithSubtype(subtype))
{}

inline HttpMultipartContent::HttpMultipartContent(StringReference const & subtype, StringReference const & boundary) :
	HttpMultipartContent(GetActivationFactory<HttpMultipartContent, IHttpMultipartContentFactory>().CreateWithSubtypeAndBoundary(subtype, boundary))
{}

inline HttpMultipartFormDataContent::HttpMultipartFormDataContent() :
	HttpMultipartFormDataContent(ActivateInstance<HttpMultipartFormDataContent>())
{}

inline HttpMultipartFormDataContent::HttpMultipartFormDataContent(StringReference const & boundary) :
	HttpMultipartFormDataContent(GetActivationFactory<HttpMultipartFormDataContent, IHttpMultipartFormDataContentFactory>().CreateWithBoundary(boundary))
{}

}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http { namespace Filters {

inline HttpBaseProtocolFilter::HttpBaseProtocolFilter() :
	HttpBaseProtocolFilter(ActivateInstance<HttpBaseProtocolFilter>())
{}

}}}}}

namespace winrt { namespace Windows { namespace Web { namespace Http { namespace Headers {

inline HttpContentHeaderCollection::HttpContentHeaderCollection() :
	HttpContentHeaderCollection(ActivateInstance<HttpContentHeaderCollection>())
{}

inline HttpContentDispositionHeaderValue::HttpContentDispositionHeaderValue(StringReference const & dispositionType) :
	HttpContentDispositionHeaderValue(GetActivationFactory<HttpContentDispositionHeaderValue, IHttpContentDispositionHeaderValueFactory>().Create(dispositionType))
{}

inline Windows::Web::Http::Headers::HttpContentDispositionHeaderValue HttpContentDispositionHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpContentDispositionHeaderValue, IHttpContentDispositionHeaderValueStatics>().Parse(input);
}

inline bool HttpContentDispositionHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpContentDispositionHeaderValue & contentDispositionHeaderValue)
{
	return GetActivationFactory<HttpContentDispositionHeaderValue, IHttpContentDispositionHeaderValueStatics>().TryParse(input, contentDispositionHeaderValue);
}

inline HttpContentRangeHeaderValue::HttpContentRangeHeaderValue(unsigned long long const length) :
	HttpContentRangeHeaderValue(GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueFactory>().CreateFromLength(length))
{}

inline HttpContentRangeHeaderValue::HttpContentRangeHeaderValue(unsigned long long const from, unsigned long long const to) :
	HttpContentRangeHeaderValue(GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueFactory>().CreateFromRange(from, to))
{}

inline HttpContentRangeHeaderValue::HttpContentRangeHeaderValue(unsigned long long const from, unsigned long long const to, unsigned long long const length) :
	HttpContentRangeHeaderValue(GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueFactory>().CreateFromRangeWithLength(from, to, length))
{}

inline Windows::Web::Http::Headers::HttpContentRangeHeaderValue HttpContentRangeHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueStatics>().Parse(input);
}

inline bool HttpContentRangeHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpContentRangeHeaderValue & contentRangeHeaderValue)
{
	return GetActivationFactory<HttpContentRangeHeaderValue, IHttpContentRangeHeaderValueStatics>().TryParse(input, contentRangeHeaderValue);
}

inline HttpMediaTypeHeaderValue::HttpMediaTypeHeaderValue(StringReference const & mediaType) :
	HttpMediaTypeHeaderValue(GetActivationFactory<HttpMediaTypeHeaderValue, IHttpMediaTypeHeaderValueFactory>().Create(mediaType))
{}

inline Windows::Web::Http::Headers::HttpMediaTypeHeaderValue HttpMediaTypeHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpMediaTypeHeaderValue, IHttpMediaTypeHeaderValueStatics>().Parse(input);
}

inline bool HttpMediaTypeHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpMediaTypeHeaderValue & mediaTypeHeaderValue)
{
	return GetActivationFactory<HttpMediaTypeHeaderValue, IHttpMediaTypeHeaderValueStatics>().TryParse(input, mediaTypeHeaderValue);
}

inline HttpCredentialsHeaderValue::HttpCredentialsHeaderValue(StringReference const & scheme) :
	HttpCredentialsHeaderValue(GetActivationFactory<HttpCredentialsHeaderValue, IHttpCredentialsHeaderValueFactory>().CreateFromScheme(scheme))
{}

inline HttpCredentialsHeaderValue::HttpCredentialsHeaderValue(StringReference const & scheme, StringReference const & token) :
	HttpCredentialsHeaderValue(GetActivationFactory<HttpCredentialsHeaderValue, IHttpCredentialsHeaderValueFactory>().CreateFromSchemeWithToken(scheme, token))
{}

inline Windows::Web::Http::Headers::HttpCredentialsHeaderValue HttpCredentialsHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpCredentialsHeaderValue, IHttpCredentialsHeaderValueStatics>().Parse(input);
}

inline bool HttpCredentialsHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpCredentialsHeaderValue & credentialsHeaderValue)
{
	return GetActivationFactory<HttpCredentialsHeaderValue, IHttpCredentialsHeaderValueStatics>().TryParse(input, credentialsHeaderValue);
}

inline Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue HttpDateOrDeltaHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpDateOrDeltaHeaderValue, IHttpDateOrDeltaHeaderValueStatics>().Parse(input);
}

inline bool HttpDateOrDeltaHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpDateOrDeltaHeaderValue & dateOrDeltaHeaderValue)
{
	return GetActivationFactory<HttpDateOrDeltaHeaderValue, IHttpDateOrDeltaHeaderValueStatics>().TryParse(input, dateOrDeltaHeaderValue);
}

inline HttpNameValueHeaderValue::HttpNameValueHeaderValue(StringReference const & name) :
	HttpNameValueHeaderValue(GetActivationFactory<HttpNameValueHeaderValue, IHttpNameValueHeaderValueFactory>().CreateFromName(name))
{}

inline HttpNameValueHeaderValue::HttpNameValueHeaderValue(StringReference const & name, StringReference const & value) :
	HttpNameValueHeaderValue(GetActivationFactory<HttpNameValueHeaderValue, IHttpNameValueHeaderValueFactory>().CreateFromNameWithValue(name, value))
{}

inline Windows::Web::Http::Headers::HttpNameValueHeaderValue HttpNameValueHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpNameValueHeaderValue, IHttpNameValueHeaderValueStatics>().Parse(input);
}

inline bool HttpNameValueHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpNameValueHeaderValue & nameValueHeaderValue)
{
	return GetActivationFactory<HttpNameValueHeaderValue, IHttpNameValueHeaderValueStatics>().TryParse(input, nameValueHeaderValue);
}

inline HttpChallengeHeaderValue::HttpChallengeHeaderValue(StringReference const & scheme) :
	HttpChallengeHeaderValue(GetActivationFactory<HttpChallengeHeaderValue, IHttpChallengeHeaderValueFactory>().CreateFromScheme(scheme))
{}

inline HttpChallengeHeaderValue::HttpChallengeHeaderValue(StringReference const & scheme, StringReference const & token) :
	HttpChallengeHeaderValue(GetActivationFactory<HttpChallengeHeaderValue, IHttpChallengeHeaderValueFactory>().CreateFromSchemeWithToken(scheme, token))
{}

inline Windows::Web::Http::Headers::HttpChallengeHeaderValue HttpChallengeHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpChallengeHeaderValue, IHttpChallengeHeaderValueStatics>().Parse(input);
}

inline bool HttpChallengeHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpChallengeHeaderValue & challengeHeaderValue)
{
	return GetActivationFactory<HttpChallengeHeaderValue, IHttpChallengeHeaderValueStatics>().TryParse(input, challengeHeaderValue);
}

inline HttpConnectionOptionHeaderValue::HttpConnectionOptionHeaderValue(StringReference const & token) :
	HttpConnectionOptionHeaderValue(GetActivationFactory<HttpConnectionOptionHeaderValue, IHttpConnectionOptionHeaderValueFactory>().Create(token))
{}

inline Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue HttpConnectionOptionHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpConnectionOptionHeaderValue, IHttpConnectionOptionHeaderValueStatics>().Parse(input);
}

inline bool HttpConnectionOptionHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpConnectionOptionHeaderValue & connectionOptionHeaderValue)
{
	return GetActivationFactory<HttpConnectionOptionHeaderValue, IHttpConnectionOptionHeaderValueStatics>().TryParse(input, connectionOptionHeaderValue);
}

inline HttpContentCodingHeaderValue::HttpContentCodingHeaderValue(StringReference const & contentCoding) :
	HttpContentCodingHeaderValue(GetActivationFactory<HttpContentCodingHeaderValue, IHttpContentCodingHeaderValueFactory>().Create(contentCoding))
{}

inline Windows::Web::Http::Headers::HttpContentCodingHeaderValue HttpContentCodingHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpContentCodingHeaderValue, IHttpContentCodingHeaderValueStatics>().Parse(input);
}

inline bool HttpContentCodingHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpContentCodingHeaderValue & contentCodingHeaderValue)
{
	return GetActivationFactory<HttpContentCodingHeaderValue, IHttpContentCodingHeaderValueStatics>().TryParse(input, contentCodingHeaderValue);
}

inline HttpCookiePairHeaderValue::HttpCookiePairHeaderValue(StringReference const & name) :
	HttpCookiePairHeaderValue(GetActivationFactory<HttpCookiePairHeaderValue, IHttpCookiePairHeaderValueFactory>().CreateFromName(name))
{}

inline HttpCookiePairHeaderValue::HttpCookiePairHeaderValue(StringReference const & name, StringReference const & value) :
	HttpCookiePairHeaderValue(GetActivationFactory<HttpCookiePairHeaderValue, IHttpCookiePairHeaderValueFactory>().CreateFromNameWithValue(name, value))
{}

inline Windows::Web::Http::Headers::HttpCookiePairHeaderValue HttpCookiePairHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpCookiePairHeaderValue, IHttpCookiePairHeaderValueStatics>().Parse(input);
}

inline bool HttpCookiePairHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpCookiePairHeaderValue & cookiePairHeaderValue)
{
	return GetActivationFactory<HttpCookiePairHeaderValue, IHttpCookiePairHeaderValueStatics>().TryParse(input, cookiePairHeaderValue);
}

inline HttpExpectationHeaderValue::HttpExpectationHeaderValue(StringReference const & name) :
	HttpExpectationHeaderValue(GetActivationFactory<HttpExpectationHeaderValue, IHttpExpectationHeaderValueFactory>().CreateFromName(name))
{}

inline HttpExpectationHeaderValue::HttpExpectationHeaderValue(StringReference const & name, StringReference const & value) :
	HttpExpectationHeaderValue(GetActivationFactory<HttpExpectationHeaderValue, IHttpExpectationHeaderValueFactory>().CreateFromNameWithValue(name, value))
{}

inline Windows::Web::Http::Headers::HttpExpectationHeaderValue HttpExpectationHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpExpectationHeaderValue, IHttpExpectationHeaderValueStatics>().Parse(input);
}

inline bool HttpExpectationHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpExpectationHeaderValue & expectationHeaderValue)
{
	return GetActivationFactory<HttpExpectationHeaderValue, IHttpExpectationHeaderValueStatics>().TryParse(input, expectationHeaderValue);
}

inline HttpLanguageRangeWithQualityHeaderValue::HttpLanguageRangeWithQualityHeaderValue(StringReference const & languageRange) :
	HttpLanguageRangeWithQualityHeaderValue(GetActivationFactory<HttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValueFactory>().CreateFromLanguageRange(languageRange))
{}

inline HttpLanguageRangeWithQualityHeaderValue::HttpLanguageRangeWithQualityHeaderValue(StringReference const & languageRange, double const quality) :
	HttpLanguageRangeWithQualityHeaderValue(GetActivationFactory<HttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValueFactory>().CreateFromLanguageRangeWithQuality(languageRange, quality))
{}

inline Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue HttpLanguageRangeWithQualityHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValueStatics>().Parse(input);
}

inline bool HttpLanguageRangeWithQualityHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpLanguageRangeWithQualityHeaderValue & languageRangeWithQualityHeaderValue)
{
	return GetActivationFactory<HttpLanguageRangeWithQualityHeaderValue, IHttpLanguageRangeWithQualityHeaderValueStatics>().TryParse(input, languageRangeWithQualityHeaderValue);
}

inline HttpMediaTypeWithQualityHeaderValue::HttpMediaTypeWithQualityHeaderValue(StringReference const & mediaType) :
	HttpMediaTypeWithQualityHeaderValue(GetActivationFactory<HttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValueFactory>().CreateFromMediaType(mediaType))
{}

inline HttpMediaTypeWithQualityHeaderValue::HttpMediaTypeWithQualityHeaderValue(StringReference const & mediaType, double const quality) :
	HttpMediaTypeWithQualityHeaderValue(GetActivationFactory<HttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValueFactory>().CreateFromMediaTypeWithQuality(mediaType, quality))
{}

inline Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue HttpMediaTypeWithQualityHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValueStatics>().Parse(input);
}

inline bool HttpMediaTypeWithQualityHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpMediaTypeWithQualityHeaderValue & mediaTypeWithQualityHeaderValue)
{
	return GetActivationFactory<HttpMediaTypeWithQualityHeaderValue, IHttpMediaTypeWithQualityHeaderValueStatics>().TryParse(input, mediaTypeWithQualityHeaderValue);
}

inline HttpProductHeaderValue::HttpProductHeaderValue(StringReference const & productName) :
	HttpProductHeaderValue(GetActivationFactory<HttpProductHeaderValue, IHttpProductHeaderValueFactory>().CreateFromName(productName))
{}

inline HttpProductHeaderValue::HttpProductHeaderValue(StringReference const & productName, StringReference const & productVersion) :
	HttpProductHeaderValue(GetActivationFactory<HttpProductHeaderValue, IHttpProductHeaderValueFactory>().CreateFromNameWithVersion(productName, productVersion))
{}

inline Windows::Web::Http::Headers::HttpProductHeaderValue HttpProductHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpProductHeaderValue, IHttpProductHeaderValueStatics>().Parse(input);
}

inline bool HttpProductHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpProductHeaderValue & productHeaderValue)
{
	return GetActivationFactory<HttpProductHeaderValue, IHttpProductHeaderValueStatics>().TryParse(input, productHeaderValue);
}

inline HttpProductInfoHeaderValue::HttpProductInfoHeaderValue(StringReference const & productComment) :
	HttpProductInfoHeaderValue(GetActivationFactory<HttpProductInfoHeaderValue, IHttpProductInfoHeaderValueFactory>().CreateFromComment(productComment))
{}

inline HttpProductInfoHeaderValue::HttpProductInfoHeaderValue(StringReference const & productName, StringReference const & productVersion) :
	HttpProductInfoHeaderValue(GetActivationFactory<HttpProductInfoHeaderValue, IHttpProductInfoHeaderValueFactory>().CreateFromNameWithVersion(productName, productVersion))
{}

inline Windows::Web::Http::Headers::HttpProductInfoHeaderValue HttpProductInfoHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpProductInfoHeaderValue, IHttpProductInfoHeaderValueStatics>().Parse(input);
}

inline bool HttpProductInfoHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpProductInfoHeaderValue & productInfoHeaderValue)
{
	return GetActivationFactory<HttpProductInfoHeaderValue, IHttpProductInfoHeaderValueStatics>().TryParse(input, productInfoHeaderValue);
}

inline HttpContentCodingWithQualityHeaderValue::HttpContentCodingWithQualityHeaderValue(StringReference const & contentCoding) :
	HttpContentCodingWithQualityHeaderValue(GetActivationFactory<HttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValueFactory>().CreateFromValue(contentCoding))
{}

inline HttpContentCodingWithQualityHeaderValue::HttpContentCodingWithQualityHeaderValue(StringReference const & contentCoding, double const quality) :
	HttpContentCodingWithQualityHeaderValue(GetActivationFactory<HttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValueFactory>().CreateFromValueWithQuality(contentCoding, quality))
{}

inline Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue HttpContentCodingWithQualityHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValueStatics>().Parse(input);
}

inline bool HttpContentCodingWithQualityHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpContentCodingWithQualityHeaderValue & contentCodingWithQualityHeaderValue)
{
	return GetActivationFactory<HttpContentCodingWithQualityHeaderValue, IHttpContentCodingWithQualityHeaderValueStatics>().TryParse(input, contentCodingWithQualityHeaderValue);
}

inline HttpTransferCodingHeaderValue::HttpTransferCodingHeaderValue(StringReference const & input) :
	HttpTransferCodingHeaderValue(GetActivationFactory<HttpTransferCodingHeaderValue, IHttpTransferCodingHeaderValueFactory>().Create(input))
{}

inline Windows::Web::Http::Headers::HttpTransferCodingHeaderValue HttpTransferCodingHeaderValue::Parse(StringReference const & input)
{
	return GetActivationFactory<HttpTransferCodingHeaderValue, IHttpTransferCodingHeaderValueStatics>().Parse(input);
}

inline bool HttpTransferCodingHeaderValue::TryParse(StringReference const & input, Windows::Web::Http::Headers::HttpTransferCodingHeaderValue & transferCodingHeaderValue)
{
	return GetActivationFactory<HttpTransferCodingHeaderValue, IHttpTransferCodingHeaderValueStatics>().TryParse(input, transferCodingHeaderValue);
}

}}}}}

namespace winrt { namespace Windows { namespace Web { namespace Syndication {

inline SyndicationAttribute::SyndicationAttribute() :
	SyndicationAttribute(ActivateInstance<SyndicationAttribute>())
{}

inline SyndicationAttribute::SyndicationAttribute(StringReference const & attributeName, StringReference const & attributeNamespace, StringReference const & attributeValue) :
	SyndicationAttribute(GetActivationFactory<SyndicationAttribute, ISyndicationAttributeFactory>().CreateSyndicationAttribute(attributeName, attributeNamespace, attributeValue))
{}

inline SyndicationNode::SyndicationNode() :
	SyndicationNode(ActivateInstance<SyndicationNode>())
{}

inline SyndicationNode::SyndicationNode(StringReference const & nodeName, StringReference const & nodeNamespace, StringReference const & nodeValue) :
	SyndicationNode(GetActivationFactory<SyndicationNode, ISyndicationNodeFactory>().CreateSyndicationNode(nodeName, nodeNamespace, nodeValue))
{}

inline SyndicationGenerator::SyndicationGenerator() :
	SyndicationGenerator(ActivateInstance<SyndicationGenerator>())
{}

inline SyndicationGenerator::SyndicationGenerator(StringReference const & text) :
	SyndicationGenerator(GetActivationFactory<SyndicationGenerator, ISyndicationGeneratorFactory>().CreateSyndicationGenerator(text))
{}

inline SyndicationText::SyndicationText() :
	SyndicationText(ActivateInstance<SyndicationText>())
{}

inline SyndicationText::SyndicationText(StringReference const & text) :
	SyndicationText(GetActivationFactory<SyndicationText, ISyndicationTextFactory>().CreateSyndicationText(text))
{}

inline SyndicationText::SyndicationText(StringReference const & text, Windows::Web::Syndication::SyndicationTextType const type) :
	SyndicationText(GetActivationFactory<SyndicationText, ISyndicationTextFactory>().CreateSyndicationTextEx(text, type))
{}

inline SyndicationContent::SyndicationContent() :
	SyndicationContent(ActivateInstance<SyndicationContent>())
{}

inline SyndicationContent::SyndicationContent(StringReference const & text, Windows::Web::Syndication::SyndicationTextType const type) :
	SyndicationContent(GetActivationFactory<SyndicationContent, ISyndicationContentFactory>().CreateSyndicationContent(text, type))
{}

inline SyndicationContent::SyndicationContent(Windows::Foundation::Uri const & sourceUri) :
	SyndicationContent(GetActivationFactory<SyndicationContent, ISyndicationContentFactory>().CreateSyndicationContentWithSourceUri(sourceUri))
{}

inline SyndicationLink::SyndicationLink() :
	SyndicationLink(ActivateInstance<SyndicationLink>())
{}

inline SyndicationLink::SyndicationLink(Windows::Foundation::Uri const & uri) :
	SyndicationLink(GetActivationFactory<SyndicationLink, ISyndicationLinkFactory>().CreateSyndicationLink(uri))
{}

inline SyndicationLink::SyndicationLink(Windows::Foundation::Uri const & uri, StringReference const & relationship, StringReference const & title, StringReference const & mediaType, unsigned const length) :
	SyndicationLink(GetActivationFactory<SyndicationLink, ISyndicationLinkFactory>().CreateSyndicationLinkEx(uri, relationship, title, mediaType, length))
{}

inline SyndicationPerson::SyndicationPerson() :
	SyndicationPerson(ActivateInstance<SyndicationPerson>())
{}

inline SyndicationPerson::SyndicationPerson(StringReference const & name) :
	SyndicationPerson(GetActivationFactory<SyndicationPerson, ISyndicationPersonFactory>().CreateSyndicationPerson(name))
{}

inline SyndicationPerson::SyndicationPerson(StringReference const & name, StringReference const & email, Windows::Foundation::Uri const & uri) :
	SyndicationPerson(GetActivationFactory<SyndicationPerson, ISyndicationPersonFactory>().CreateSyndicationPersonEx(name, email, uri))
{}

inline SyndicationCategory::SyndicationCategory() :
	SyndicationCategory(ActivateInstance<SyndicationCategory>())
{}

inline SyndicationCategory::SyndicationCategory(StringReference const & term) :
	SyndicationCategory(GetActivationFactory<SyndicationCategory, ISyndicationCategoryFactory>().CreateSyndicationCategory(term))
{}

inline SyndicationCategory::SyndicationCategory(StringReference const & term, StringReference const & scheme, StringReference const & label) :
	SyndicationCategory(GetActivationFactory<SyndicationCategory, ISyndicationCategoryFactory>().CreateSyndicationCategoryEx(term, scheme, label))
{}

inline SyndicationFeed::SyndicationFeed() :
	SyndicationFeed(ActivateInstance<SyndicationFeed>())
{}

inline SyndicationFeed::SyndicationFeed(StringReference const & title, StringReference const & subtitle, Windows::Foundation::Uri const & uri) :
	SyndicationFeed(GetActivationFactory<SyndicationFeed, ISyndicationFeedFactory>().CreateSyndicationFeed(title, subtitle, uri))
{}

inline SyndicationItem::SyndicationItem() :
	SyndicationItem(ActivateInstance<SyndicationItem>())
{}

inline SyndicationItem::SyndicationItem(StringReference const & title, Windows::Web::Syndication::SyndicationContent const & content, Windows::Foundation::Uri const & uri) :
	SyndicationItem(GetActivationFactory<SyndicationItem, ISyndicationItemFactory>().CreateSyndicationItem(title, content, uri))
{}

inline SyndicationClient::SyndicationClient() :
	SyndicationClient(ActivateInstance<SyndicationClient>())
{}

inline SyndicationClient::SyndicationClient(Windows::Security::Credentials::PasswordCredential const & serverCredential) :
	SyndicationClient(GetActivationFactory<SyndicationClient, ISyndicationClientFactory>().CreateSyndicationClient(serverCredential))
{}

inline Windows::Web::Syndication::SyndicationErrorStatus SyndicationError::GetStatus(int const hresult)
{
	return GetActivationFactory<SyndicationError, ISyndicationErrorStatics>().GetStatus(hresult);
}

}}}}
